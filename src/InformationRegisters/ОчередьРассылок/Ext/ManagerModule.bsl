#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Регистрирует массовую рассылку в очереди.
//
// Параметры:
//  МассоваяРассылка		 - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
//  СпособОтправки			 - ПеречислениеСсылка.ВидыКаналовСвязи - способ отправки рассылки.
//  КакСвязаться			 - Строка - адрес, по которому отправляется рассылка.
//  ИнтервалМеждуПопытками	 - Число - интервал между попытками, указывается в минутах.
//  КоличествоПопыток		 - Число - количество попыток.
//
Процедура Зарегистрировать(
	Знач МассоваяРассылка,
	Знач КакСвязаться, 
	Знач СпособОтправки, 
	Знач ИнтервалМеждуПопытками, 
	Знач КоличествоПопыток) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран()
		И МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.Отправлено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	МенеджерЗаписи.СпособОтправки = СпособОтправки;
	
	Если ЗначениеЗаполнено(ИнтервалМеждуПопытками) Тогда
		МенеджерЗаписи.ИнтервалМеждуПопытками = ИнтервалМеждуПопытками;
	Иначе
		МенеджерЗаписи.ИнтервалМеждуПопытками = 10;
	КонецЕсли;
	
	МенеджерЗаписи.ПопытокОсталось = КоличествоПопыток;
	МенеджерЗаписи.СледующаяПопытка = '0001-01-01';
	МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.Сформировано;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Регистрирует начало отправки электронного письма.
//
// Параметры:
//  МассоваяРассылка		 - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
//  КакСвязаться			 - Строка - адрес, по которому отправляется рассылка.
//
Процедура ЗарегистрироватьНачалоОтправки(Знач МассоваяРассылка, Знач КакСвязаться) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.ПопытокОсталось = МенеджерЗаписи.ПопытокОсталось - 1;
	МенеджерЗаписи.СледующаяПопытка = ТекущаяДатаСеанса() + МенеджерЗаписи.ИнтервалМеждуПопытками * 60;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Регистрирует факт успешной отправки электронного письма.
//
// Параметры:
//  МассоваяРассылка		 - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка,
//  КакСвязаться			 - Строка - адрес, по которому отправляется рассылка,
//  Идентификаторы			 - Структура - результат выполнения ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(),
//  ИдентификаторСообщенияSMS	 - Строка - Идентификатор сообщения, который передал провайдер SMS,
//  СостояниеСообщенияSMS	 - ПеречислениеСсылка.СостоянияСообщенияSMS - Статус доставки сообщения SMS адресату,
//  УчетнаяЗапись			 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Учетная запись электронной почты,
//                             через которую отправлялась рассылка.
//
Процедура ЗарегистрироватьУспешнуюОтправку(
	Знач МассоваяРассылка,
	Знач КакСвязаться,
	Знач Идентификаторы,
	Знач ИдентификаторСообщенияSMS,
	Знач СостояниеСообщенияSMS,
	Знач УчетнаяЗапись) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	Если Не ТребуетсяПоследующаяПроверкаСостояния(СостояниеСообщенияSMS) Тогда
		МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.Отправлено;
		МенеджерЗаписи.ПопытокОсталось = 0;
	КонецЕсли;
	МенеджерЗаписи.СледующаяПопытка = '0001-01-01';
	МенеджерЗаписи.СообщениеОбОшибке = "";
	
	Если ЗначениеЗаполнено(Идентификаторы) Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Идентификаторы);
		МенеджерЗаписи.ИдентификаторыJSON = ЗаписьJSON.Закрыть();
	КонецЕсли;
	
	МенеджерЗаписи.ИдентификаторСообщенияSMS = ИдентификаторСообщенияSMS;
	МенеджерЗаписи.СостояниеСообщенияSMS = СостояниеСообщенияSMS;
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Регистрирует ошибку отправки электронного письма.
//
// Параметры:
//  МассоваяРассылка		 - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
//  КакСвязаться			 - Строка - адрес, по которому отправляется рассылка.
//  СообщениеОбОшибке		 - Строка - подробное представление ошибки.
//
Процедура ЗарегистрироватьСообщениеОбОшибке(Знач МассоваяРассылка, Знач КакСвязаться, Знач СообщениеОбОшибке) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.МассоваяРассылка = МассоваяРассылка;
	МенеджерЗаписи.КакСвязаться = КакСвязаться;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.СообщениеОбОшибке = СообщениеОбОшибке;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Запускает задание асинхронного выполнения массовой рассылки.
//
Процедура ЗапуститьВыполнениеЗадания() Экспорт
	
	ВыполнятьКаждуюМинуту = Новый РасписаниеРегламентногоЗадания;
	ВыполнятьКаждуюМинуту.ПериодПовтораДней = 1;
	ВыполнятьКаждуюМинуту.ПериодПовтораВТечениеДня = 60;
	
	Если ЗаданиеЗапланировано() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяЗадания()]);
	ПараметрыЗадания.Вставить("Расписание", ВыполнятьКаждуюМинуту);
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецПроцедуры

// Признак: запущено задание массовой рассылки.
// 
// Возвращаемое значение:
//  Булево - Истина, когда задание массовой рассылки запущено.
//
Функция ЗаданиеЗапланировано() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Отбор.Вставить("Использование", Истина);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Возврат ЗначениеЗаполнено(Задания);
	
КонецФункции

// Признак: Задание уже выполняется.
// Используется для проверки - не поздно ли еще отменить задание.
//
// Возвращаемое значение:
//  Булево - Истина, когда задание массовой рассылки уже выполняется.
//
Функция ЗаданиеУжеВыполняется() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого ТекЗадание Из Задания Цикл
		
		СвойстваЗадания = Новый Структура("ПоследнееЗадание, ЗапланированныйМоментЗапуска");
		
		ЗаполнитьЗначенияСвойств(СвойстваЗадания, ТекЗадание);
		
		Если ТипЗнч(СвойстваЗадания.ПоследнееЗадание) = Тип("ФоновоеЗадание") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ТипЗнч(СвойстваЗадания.ЗапланированныйМоментЗапуска) = Тип("Дата") Тогда
			Возврат ТекущаяДатаСеанса() > СвойстваЗадания.ЗапланированныйМоментЗапуска;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Отключает задание массовой рассылки, когда в очереди отсутствуют данные для отправки.
//
Процедура ОтключитьНевостребованноеЗадание() Экспорт
	
	Если ОтсутствуютДанныеДляОтправки() Тогда
		УдалитьЗадание();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак отсутствия данных для отправки.
// 
// Возвращаемое значение:
//  Булево - Истина, когда нечего рассылать.
//
Функция ОтсутствуютДанныеДляОтправки() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Отправлено)
	|	И ОчередьРассылок.ПопытокОсталось > 0");
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Отключает задание массовой рассылки.
//
Процедура УдалитьЗадание() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого ТекЗадание Из Задания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(ТекЗадание);
	КонецЦикла;

КонецПроцедуры

// Возвращает количество сформированных записей по указанной массовой рассылке.
//
// Параметры:
//  МассоваяРассылка		 - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
// 
// Возвращаемое значение:
//  Число - количество сформированных записей по указанной массовой рассылке.
//
Функция КоличествоСформированныхРассылок(МассоваяРассылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоСформированныхРассылок
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка
	|	И ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)");
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.КоличествоСформированныхРассылок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет необходимость последующей проверки состояния отправленного SMS-сообщения.
//
// Параметры:
//  СостояниеСообщенияSMS			 - ПеречислениеСсылка.СостоянияСообщенияSMS - Статус доставки сообщения SMS адресату.
// 
// Возвращаемое значение:
//  Булево - признак необходимости последующей проверки состояния отправленного SMS-сообщения.
//
Функция ТребуетсяПоследующаяПроверкаСостояния(СостояниеСообщенияSMS)
	
	Если Не ЗначениеЗаполнено(СостояниеСообщенияSMS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеСообщенияSMS = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеСообщенияSMS = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеСообщенияSMS = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает отбор для поиска задания массовой рассылки.
//
// Возвращаемое значение:
//  Структура - отбор для поиска задания массовой рассылки.
//
Функция ОтборВыполнениеМассовойРассылки()
	
	Результат = Новый Структура;
	Результат.Вставить("Метаданные", ИмяЗадания());
	Возврат Результат;

КонецФункции

Функция ИмяЗадания()
	
	Возврат "ВыполнениеМассовойРассылки"; // Не локализуется
	
КонецФункции

#КонецОбласти

#КонецЕсли