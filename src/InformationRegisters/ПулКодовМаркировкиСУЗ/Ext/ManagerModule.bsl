#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДанныеКодовМаркировки(КодыМаркировки) Экспорт
	
	Если КодыМаркировки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ИсходныеДанные.Колонки.Добавить("ХешСуммаКодаМаркировки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	Для Каждого КодМаркировки Из КодыМаркировки Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.КодМаркировки          = КодМаркировки;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодМаркировки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсходныеДанные.КодМаркировки          КАК КодМаркировки,
	|	ИсходныеДанные.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование         КАК ДокументОснование,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию            КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки             КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки    КАК ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗ.Статус                    КАК Статус,
	|	ПулКодовМаркировкиСУЗ.Организация               КАК Организация,
	|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	ПулКодовМаркировкиСУЗ.Номенклатура              КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика            КАК Характеристика,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки       КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная  КАК ДатаЭмиссииУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная   КАК ДатаПечатиУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки          КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировкиСУЗ.GTIN                      КАК GTIN,
	|	ПулКодовМаркировкиСУЗ.ВидПродукции              КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
	|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот        КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗ.Шаблон                    КАК Шаблон,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки          КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировкиСУЗ.МаркировкаОстатков        КАК МаркировкаОстатков,
	|	ПулКодовМаркировкиСУЗ.ТипШтрихкода              КАК ТипШтрихкода,
	|	// Требуется отслеживать наличие в пуле в начала обработки сканирования
	|	ВЫБОР
	|			КОГДА ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная = ДатаВремя(1,1,1)
	|		ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК СохраненоПриСканировании
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ИсходныеДанные.КодМаркировки          = ПулКодовМаркировкиСУЗ.КодМаркировки
	|		 И ИсходныеДанные.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки");
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПула = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПула.Индексы.Добавить("КодМаркировки");
	
	Возврат ДанныеПула;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	Возврат;
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб         = Ложь;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПулКодовМаркировкиСУЗ_ЭтикеткаИСМП";
		
		ВходящиеДанныеПечати = ПолучитьИзВременногоХранилища(ПараметрыПечати.АдресВХранилище);
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("АдресВХранилище",            ПараметрыПечати.АдресВХранилище);
		ДанныеПечати.Вставить("Документ",                   ВходящиеДанныеПечати.Документ);
		ДанныеПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте", ВходящиеДанныеПечати.КаждаяЭтикеткаНаНовомЛисте);
		ДанныеПечати.Вставить("РазрешитьПовторнуюПечать",   ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки());
		
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru = 'Этикетки (обувь, одежда, табак...)'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтатусыВыведенИзОборота() Экспорт
	
	Статусы = Новый Массив();
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗ.Использован);
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗ.Отбракован);
	
	Возврат Статусы;
	
КонецФункции

Функция РассчитатьТаблицуСостоянияПоЗаказу(Заказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросСостоянияКодовПоЗаказу(Заказ);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЕстьНераспределенныеКоды(ДокументОснование) Экспорт
	
	ТаблицаСостояния = РассчитатьТаблицуСостоянияПоЗаказу(ДокументОснование);
	Возврат ТаблицаСостояния.Итог("КоличествоРезервировать") > 0;
	
КонецФункции

Процедура ЗарезервироватьКодыПодЗаказ(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаркировкаОстатков  = Неопределено;
	ТаблицаНоменклатуры = НоваяТаблицаНоменклатуры(Параметры);
	Параметры.Свойство("МаркировкаОстатков", МаркировкаОстатков);
	
	Запрос = ЗапросСвободныхКодовПоЗаказу(Параметры.Документ, ТаблицаНоменклатуры, МаркировкаОстатков);
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеКоды.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	СвободныеКоды КАК СвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	СвободныеКоды.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозможныеСвободныеКоды.ДокументОснование
	|ИЗ
	|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	ВозможныеСвободныеКоды.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Заказ
	|";
	Результат = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "ДокументОснование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = ЗапросСостоянияКодовПоЗаказу(Параметры.Документ, Ложь, ТаблицаНоменклатуры, МаркировкаОстатков);
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвободныеКоды.КодМаркировки       КАК КодМаркировки,
		|	СвободныеКоды.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
		|	СвободныеКоды.ДокументОснование   КАК ДокументОснование,
		|	СвободныеКоды.ВидПродукции        КАК ВидПродукции,
		|	СвободныеКоды.Номенклатура        КАК Номенклатура,
		|	СвободныеКоды.Характеристика      КАК Характеристика
		|ИЗ
		|	СвободныеКоды КАК СвободныеКоды
		|ГДЕ
		|	СвободныеКоды.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозможныеСвободныеКоды.КодМаркировки       КАК КодМаркировки,
		|	ВозможныеСвободныеКоды.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
		|	ВозможныеСвободныеКоды.ДокументОснование   КАК ДокументОснование,
		|	ВозможныеСвободныеКоды.ВидПродукции        КАК ВидПродукции,
		|	ВозможныеСвободныеКоды.Номенклатура        КАК Номенклатура,
		|	ВозможныеСвободныеКоды.Характеристика      КАК Характеристика
		|ИЗ
		|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
		|ГДЕ
		|	ВозможныеСвободныеКоды.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование КАК ДокументОснование,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции      КАК ВидПродукции,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура      КАК Номенклатура,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика    КАК Характеристика,
		|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) КАК Количество
		|ИЗ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно КАК ДоступноКРезрвированиюПоИзлишкамПредварительно
		|ГДЕ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация = &Организация
		|СГРУППИРОВАТЬ ПО
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика
		|ИМЕЮЩИЕ
		|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) > 0
		|";
		Результаты = Запрос.ВыполнитьПакет();
		КоличествоРезультатов = Результаты.Количество();
		
		ВыборкаДоступноКРезервированию = Результаты[КоличествоРезультатов - 1].Выбрать();
		ВыборкаВозможныеСвободныеКоды  = Результаты[КоличествоРезультатов - 2].Выбрать();
		ВыборкаСвободныеКоды           = Результаты[КоличествоРезультатов - 3].Выбрать();
		
		ТаблицаСостояниеКодов = Результаты[КоличествоРезультатов - 4].Выгрузить();
		
		ТаблицаКодыМаркировки = НоваяТаблицаРезультатаРезервирования();
				
		СоответствиеКодовОснованиям = Новый Соответствие();
		
		Для Каждого СтрокаСостоянияКодов Из ТаблицаСостояниеКодов Цикл
			КоличествоРезервировать = СтрокаСостоянияКодов.КоличествоРезервировать;
			
			Если КоличествоРезервировать = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостоянияКодов);
			
			ВыборкаСвободныеКоды.Сбросить();
			ВыборкаДоступноКРезервированию.Сбросить();

			Пока ВыборкаСвободныеКоды.НайтиСледующий(СтруктураПоиска)
				И КоличествоРезервировать > 0 Цикл
				ДобавитьКодВСоответствиеКодовОснованиям(ВыборкаСвободныеКоды, СоответствиеКодовОснованиям);
				КоличествоРезервировать = КоличествоРезервировать - 1;
			КонецЦикла;
			
			Пока ВыборкаДоступноКРезервированию.НайтиСледующий(СтруктураПоиска)
				И КоличествоРезервировать > 0 Цикл
				ДоступноКРезервированию = ВыборкаДоступноКРезервированию.Количество;
				
				СтруктураПоискаДоступных = Новый Структура("ДокументОснование,Номенклатура,Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДоступных, ВыборкаДоступноКРезервированию);
				
				ВыборкаВозможныеСвободныеКоды.Сбросить();
				
				Пока ВыборкаВозможныеСвободныеКоды.НайтиСледующий(СтруктураПоискаДоступных)
					И ДоступноКРезервированию > 0 И КоличествоРезервировать > 0 Цикл
					ДобавитьКодВСоответствиеКодовОснованиям(ВыборкаВозможныеСвободныеКоды, СоответствиеКодовОснованиям);
					ДоступноКРезервированию = ДоступноКРезервированию - 1;
					КоличествоРезервировать = КоличествоРезервировать - 1;
				КонецЦикла;
			КонецЦикла;
			
			КоличествоЗарезервировано = СтрокаСостоянияКодов.КоличествоРезервировать - КоличествоРезервировать;
			
			СтрокаСостоянияКодов.КоличествоПечатать = СтрокаСостоянияКодов.КоличествоПечатать + КоличествоЗарезервировано;
			СтрокаСостоянияКодов.КоличествоРезервировать = КоличествоРезервировать;
		КонецЦикла;
		
		НаборЗаписейПоЗаказу = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписейПоЗаказу.Отбор["ДокументОснование"].Установить(Параметры.Документ);
		
		Для Каждого КлючИЗначение Из СоответствиеКодовОснованиям Цикл
			ДокументОснование = ДокументОснованиеИзСоответствияКодам(КлючИЗначение);

			НаборЗаписейПоОснованию = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
			НаборЗаписейПоОснованию.Отбор["ДокументОснование"].Установить(ДокументОснование);
			НаборЗаписейПоОснованию.Прочитать();
			
			КоличествоЗаписей   = НаборЗаписейПоОснованию.Количество();
			РезервированныеКоды = КлючИЗначение.Значение;
			
			Для ОбратныйИндекс = 1 По КоличествоЗаписей Цикл
				ПроверяемаяЗапись = НаборЗаписейПоОснованию[КоличествоЗаписей - ОбратныйИндекс];
				Если РезервированныеКоды.Найти(ПроверяемаяЗапись.КодМаркировки) <> Неопределено Тогда
					НоваяЗаписьПоЗаказу = НаборЗаписейПоЗаказу.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьПоЗаказу, ПроверяемаяЗапись,, "ДокументОснование");
					НоваяЗаписьПоЗаказу.ДокументОснование = Параметры.Документ;
					НаборЗаписейПоОснованию.Удалить(КоличествоЗаписей - ОбратныйИндекс);
					
					НоваяСтрокаПоКоду = ТаблицаКодыМаркировки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоКоду, НоваяЗаписьПоЗаказу);
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписейПоОснованию.Записать(Истина);
		КонецЦикла;
		
		НаборЗаписейПоЗаказу.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при резервировании кодов маркировки.'");
		ТекстОшибки = ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;
	
	РезультатРезервирования = Новый Структура();
	РезультатРезервирования.Вставить("ТаблицаСостояниеКодов", ТаблицаСостояниеКодов);
	РезультатРезервирования.Вставить("ТаблицаКодыМаркировки", ТаблицаКодыМаркировки);

	ПоместитьВоВременноеХранилище(РезультатРезервирования, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСуществующихУпаковокПоДокументу(ДеревоУпаковок,
	Документ, ВидПродукции = Неопределено, УчитыватьСтатусПечати = Истина) Экспорт
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки          КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировки.ШтрихкодУпаковки          КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировки.Номенклатура              КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика            КАК Характеристика,
	|	ПулКодовМаркировки.ВидПродукции              КАК ВидПродукции,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ                                        КАК GTIN,
	|	ПулКодовМаркировки.Шаблон                    КАК Шаблон,
	|	ПулКодовМаркировки.СпособВводаВОборот        КАК СпособВводаВОборот,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеИзКешаОписанияОстатков,
	|	КОЛИЧЕСТВО(ПулКодовМаркировки.КодМаркировки)      КАК Количество,
	|	МАКСИМУМ(ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1,1,1)) КАК Распечатан
	|ПОМЕСТИТЬ
	|	ВТАгрегированныеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО ПулКодовМаркировки.GTIN = КэшОписанияОстатков.GTIN
	|		И ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И " + ?(ЗначениеЗаполнено(ВидПродукции), "ПулКодовМаркировки.ВидПродукции = &ВидПродукции", "ИСТИНА") + "
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировки.ХешСуммаУпаковки,
	|	ПулКодовМаркировки.ШтрихкодУпаковки,
	|	ПулКодовМаркировки.Номенклатура,
	|	ПулКодовМаркировки.Шаблон,
	|	ПулКодовМаркировки.СпособВводаВОборот,
	|	ПулКодовМаркировки.Характеристика,
	|	ПулКодовМаркировки.ВидПродукции,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АгрегированныеКоды.ХешСуммаУпаковки     КАК ХешСуммаУпаковки,
	|	АгрегированныеКоды.ШтрихкодУпаковки     КАК ШтрихкодУпаковки,
	|	МАКСИМУМ(АгрегированныеКоды.Распечатан) КАК Распечатана
	|ПОМЕСТИТЬ
	|	ВТАгрегированныеУпаковки
	|ИЗ
	|	ВТАгрегированныеКоды КАК АгрегированныеКоды
	|СГРУППИРОВАТЬ ПО
	|	АгрегированныеКоды.ХешСуммаУпаковки,
	|	АгрегированныеКоды.ШтрихкодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АгрегированныеКоды.ХешСуммаУпаковки                    КАК ХешСуммаУпаковки,
	|	АгрегированныеКоды.Номенклатура                        КАК Номенклатура,
	|	АгрегированныеКоды.Характеристика                      КАК Характеристика,
	|	АгрегированныеКоды.ВидПродукции                        КАК ВидПродукции,
	|	АгрегированныеКоды.GTIN                                КАК GTIN,
	|	АгрегированныеКоды.Шаблон                              КАК Шаблон,
	|	АгрегированныеКоды.СпособВводаВОборот                  КАК СпособВводаВОборот,
	|	АгрегированныеКоды.Количество                          КАК Количество,
	|	АгрегированныеКоды.ПредставлениеИзКешаОписанияОстатков КАК ПредставлениеИзКешаОписанияОстатков,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(АгрегированныеКоды.Номенклатура)   КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(АгрегированныеКоды.Характеристика) КАК ХарактеристикаПредставление,
	|	КОЛИЧЕСТВО(АгрегированныеКоды.ШтрихкодУпаковки)        КАК КоличествоУпаковок,
	|	СУММА(ВЫБОР
	|		КОГДА АгрегированныеУпаковки.Распечатана
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ)                                                 КАК КоличествоПечать
	|ИЗ
	|	ВТАгрегированныеКоды КАК АгрегированныеКоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАгрегированныеУпаковки КАК АгрегированныеУпаковки
	|		ПО АгрегированныеКоды.ХешСуммаУпаковки = АгрегированныеУпаковки.ХешСуммаУпаковки
	|		 И АгрегированныеКоды.ШтрихкодУпаковки = АгрегированныеУпаковки.ШтрихкодУпаковки
	|СГРУППИРОВАТЬ ПО
	|	АгрегированныеКоды.ХешСуммаУпаковки,
	|	АгрегированныеКоды.Номенклатура,
	|	АгрегированныеКоды.Характеристика,
	|	АгрегированныеКоды.ВидПродукции,
	|	АгрегированныеКоды.GTIN,
	|	АгрегированныеКоды.Шаблон,
	|	АгрегированныеКоды.СпособВводаВОборот,
	|	АгрегированныеКоды.Количество,
	|	АгрегированныеКоды.ПредставлениеИзКешаОписанияОстатков
	|
	|ИТОГИ
	|	МАКСИМУМ(КоличествоУпаковок),
	|	МАКСИМУМ(КоличествоПечать)
	|ПО
	|	ХешСуммаУпаковки
	|");
	
	Запрос.УстановитьПараметр("Документ",           Документ);
	Запрос.УстановитьПараметр("ВидПродукции",       ВидПродукции);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Результат = Запрос.Выполнить();
	
	ВыборкаХешСуммаУпаковки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаХешСуммаУпаковки.Следующий() Цикл
		
		Если УчитыватьСтатусПечати
			И ВыборкаХешСуммаУпаковки.КоличествоПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУпаковки = ДеревоУпаковок.Строки.Добавить();
		
		Если Не УчитыватьСтатусПечати Тогда
			СтрокаУпаковки.Количество = ВыборкаХешСуммаУпаковки.КоличествоУпаковок;
			СтрокаУпаковки.ХешСуммаУпаковки = ВыборкаХешСуммаУпаковки.ХешСуммаУпаковки;
		Иначе
			СтрокаУпаковки.Количество = ВыборкаХешСуммаУпаковки.КоличествоПечать;
			
			СтрокаУпаковки.КоличествоПечать = ВыборкаХешСуммаУпаковки.КоличествоПечать;
			СтрокаУпаковки.ХешСуммаУпаковки = ВыборкаХешСуммаУпаковки.ХешСуммаУпаковки;
			
			Если СтрокаУпаковки.КоличествоПечать > 0 И СтрокаУпаковки.КоличествоЭкземпляров = 0 Тогда
				СтрокаУпаковки.КоличествоЭкземпляров = 1;
			КонецЕсли;
		КонецЕсли;
		
		СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
		
		Выборка = ВыборкаХешСуммаУпаковки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаПродукции = СтрокаУпаковки.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				СтрокаПродукции, Выборка,
				"Номенклатура, Характеристика, GTIN, Количество, Шаблон, СпособВводаВОборот");
			Если УчитыватьСтатусПечати Тогда
				СтрокаПродукции.КоличествоПечать = Выборка.Количество;
			КонецЕсли;
			
			ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				Выборка.ПредставлениеИзКешаОписанияОстатков, Выборка.ВидПродукции);
			
			СтрокаПродукции.Содержимое = ИнтеграцияИС.ПредставлениеНоменклатуры(
				Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление,,,
				ПредставлениеНоменклатуры);
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				
				ЭлементСодержимого = СодержимоеУпаковки.Добавить();
				ЭлементСодержимого.Номенклатура   = Выборка.НоменклатураПредставление;
				ЭлементСодержимого.Характеристика = Выборка.ХарактеристикаПредставление;
				ЭлементСодержимого.Серия          = "";
				ЭлементСодержимого.Количество     = Выборка.Количество;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаПродукции.Содержимое) Тогда
				
				ЭлементСодержимого = СодержимоеУпаковки.Добавить();
				ЭлементСодержимого.Номенклатура   = СтрокаПродукции.Содержимое;
				ЭлементСодержимого.Характеристика = "";
				ЭлементСодержимого.Серия          = "";
				ЭлементСодержимого.Количество     = Выборка.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаУпаковки.Содержимое = ИнтеграцияИС.ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
		
		СтрокаУпаковки.Строки.Сортировать("Содержимое", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

//Возвращает структуру для наложения отборов на регистр ПулКодовМаркировкиСУЗ
// 
//Параметры:
//   Документ                   - ДокументСсылка - источник отбора.
//   ВыбиратьСвязанныеОснования - Булево         - Управляет функция выбора документов, связанных основанием.
//
//Возвращаемое значение:
//   Структура - Где ключ - это имя измерения регистра по типу документа, значение - ссылка на документ.
//
Функция СтруктураОтбораДокументаПоТипуДокумента(Документ, ВыбиратьСвязанныеОснования = Ложь) Экспорт
	
	СтруктураОтбораДокументы = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СтруктураОтбораДокументы;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		
		СтруктураОтбораДокументы.Вставить("ЗаказНаЭмиссию", Документ);
		
	ИначеЕсли Метаданные.ОпределяемыеТипы["ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"].Тип.СодержитТип(ТипДокумента) Тогда
		
		Если ВыбиратьСвязанныеОснования Тогда
			
			МассивОснований = ПечатьЭтикетокИСМП.МассивСвязанныхДокументовОснований(Документ);
			
			СтруктураОтбораДокументы.Вставить("ДокументОснование", МассивОснований);
			
		Иначе
			
			СтруктураОтбораДокументы.Вставить("ДокументОснование", Документ);
			
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Тип документа %1 не явялется основанием для заказа кодов маркировки.'"),
			ТипДокумента);
	КонецЕсли;
	
	Возврат СтруктураОтбораДокументы;
	
КонецФункции

// Процедура выполняет блокировку записей пула, выполняет печать этикеток и сохраняет дату печати
// 
// Параметры:
// 	ДанныеПечати - Структура - Входные данные печаети
// 	ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода результатов
// 	СтруктураНастроек - Структура - Дополнительные настройки печати
// 	ДанныеПоВыбраннымКодам - Массив, Неопределено -Выходной параметр выбранных кодов из пула.
// 	ВстроеннаяПечать - Булево - Производить печать во встроенный макет (без шаблона).
Процедура РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
	ДанныеПечати,
	ТабличныйДокумент,
	СтруктураНастроек = Неопределено,
	ДанныеПоВыбраннымКодам = Неопределено,
	ВстроеннаяПечать = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документ                    = Неопределено;
	СтруктураОбъектовПечати     = Новый Структура();
	ОбъектыПечати               = Новый Массив();
	РежимПечати                 = "";
	МаркировкаОстатков          = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ДанныеПечати.АдресВХранилище) Тогда
		СтруктураОбъектовПечати = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
		ОбъектыПечати           = СтруктураОбъектовПечати.ОбъектыПечати;
		СтруктураОбъектовПечати.Свойство("РежимПечати", РежимПечати);
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте") Тогда
		СтруктураНастроек.Вставить("КаждаяЭтикеткаНаНовомЛисте", ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") Тогда
		СтруктураНастроек.Вставить("СтруктураМакетаШаблона", ДанныеПечати.СтруктураМакетаШаблона);
		ВстроеннаяПечать = Ложь;
	КонецЕсли;
	
	ИсходнаяТаблица = НоваяТаблицаДанныхДляПечатиЭтикеток();
	НомерСтроки     = 1;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		НоваяСтрока = ИсходнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектПечати);
		НомерСтроки   = НомерСтроки + 1;
		КодМаркировки = "";
		
		Если ЗначениеЗаполнено(НоваяСтрока.КодМаркировки) Тогда
			КодМаркировки = НоваяСтрока.КодМаркировки;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			КодМаркировки = НоваяСтрока.Штрихкод;
		КонецЕсли;
		
		Если НоваяСтрока.ЭтоКодМаркировки
			И ЗначениеЗаполнено(КодМаркировки)
			И Не ЗначениеЗаполнено(НоваяСтрока.ХешСуммаКодаМаркировки) Тогда
			НоваяСтрока.ХешСуммаКодаМаркировки = Справочники.ШтрихкодыУпаковокТоваров.ХэшСуммаСтроки(КодМаркировки);
		КонецЕсли;
		
		МаркировкаОстатков = ОбъектПечати.МаркировкаОстатков;
		Если НоваяСтрока.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
			НоваяСтрока.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.ПустаяСсылка();
		КонецЕсли;
		
		ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
			НоваяСтрока.ПредставлениеНоменклатуры,
			НоваяСтрока.ВидПродукции);
		
		НоваяСтрока.ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(
			НоваяСтрока.Номенклатура,
			НоваяСтрока.Характеристика,,
			НоваяСтрока.Серия,
			ПредставлениеНоменклатуры);
		
	КонецЦикла;
	
	ДанныеПечати.Свойство("Документ", Документ);
	
	Если Не ЗначениеЗаполнено(Документ) И РежимПечати <> "Выборочно" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Не указан документ для печати'");
	КонецЕсли;

	БлокировкаЗаписей           = Новый БлокировкаДанных;
	БлокировкаПоКодамМаркировки = Истина;
	РежимНеРаспечатанныеКоды    = (РежимПечати = "НеРаспечатанныеКодыПоДокументу"
		Или РежимПечати = "НеРаспечатанныеКодыПоДокументуСРезервированием");
	РежимВыборочно              = РежимПечати = "Выборочно";
	ВыбиратьСвязанныеОснования  = Ложь;
	РезервироватьСвободныеКоды  = Ложь;
	
	Если РежимПечати = "НеРаспечатанныеКодыПоДокументуСРезервированием" Тогда
		ВыбиратьСвязанныеОснования = Истина;
		РезервироватьСвободныеКоды = Истина;
	КонецЕсли;
	
	ОтборПоДокументам = СтруктураОтбораДокументаПоТипуДокумента(Документ, ВыбиратьСвязанныеОснования);
	
	Для Каждого ПолеОтбора Из ОтборПоДокументам Цикл
		
		ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		Если ТипЗнч(ПолеОтбора.Значение) = Тип("Массив") Тогда
			
			ТаблицаБлокировки = Новый ТаблицаЗначений;
			ТаблицаБлокировки.Колонки.Добавить(ПолеОтбора.Ключ);
			
			Для Каждого ЗначениеБлокировки Из ПолеОтбора.Значение Цикл
				НоваяСтрока                  = ТаблицаБлокировки.Добавить();
				НоваяСтрока[ПолеОтбора.Ключ] = ЗначениеБлокировки;
			КонецЦикла;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПолеОтбора.Ключ, ПолеОтбора.Ключ);
			
		Иначе
			ЭлементБлокировки.УстановитьЗначение(ПолеОтбора.Ключ, ПолеОтбора.Значение);
		КонецЕсли;
		
		БлокировкаПоКодамМаркировки = Ложь;
		
	КонецЦикла;
	
	Если БлокировкаПоКодамМаркировки Тогда
		ЭлементБлокировки                = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = ИсходнаяТаблица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки",          "КодМаркировки");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСуммаКодаМаркировки", "ХешСуммаКодаМаркировки");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбщаяТаблицаПечати       = Неопределено;
	ТаблицаДляРезервирования = Неопределено;
	ИсходнаяТаблицаВыборочно = ИсходнаяТаблица;
	
	Попытка
		
		БлокировкаЗаписей.Заблокировать();
		
		Если РежимНеРаспечатанныеКоды Тогда
			
			Результат = ТаблицаДляПечатиНеРаспечатанныеКодыПоДокументу(ИсходнаяТаблица, ОтборПоДокументам, РезервироватьСвободныеКоды, МаркировкаОстатков);
			ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, Результат.ТаблицаДляПечати);
			ТаблицаДляРезервирования = Результат.ТаблицаДляРезервирования;
			
		КонецЕсли;
		
		Если РезервироватьСвободныеКоды И ТаблицаДляРезервирования.Количество() > 0 Тогда
			
			ПараметрыРезервирования = Новый Структура();
			ПараметрыРезервирования.Вставить("Документ",            Документ);
			ПараметрыРезервирования.Вставить("ТаблицаНоменклатуры", ТаблицаДляРезервирования);
			ПараметрыРезервирования.Вставить("МаркировкаОстатков",  МаркировкаОстатков);
			
			АдресРезультатаРезервирования = ПоместитьВоВременноеХранилище(Неопределено);
			
			ЗарезервироватьКодыПодЗаказ(ПараметрыРезервирования, АдресРезультатаРезервирования);
			
			ИсходнаяТаблицаВыборочно = НоваяТаблицаДанныхДляПечатиЭтикеток();
			
			ДополнитьТаблицуПечатиЗарезервированнымКодам(
				ИсходнаяТаблицаВыборочно, ТаблицаДляРезервирования, АдресРезультатаРезервирования);
			
			РежимВыборочно = Истина;
			
		КонецЕсли;
		
		Если РежимВыборочно Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "РазрешитьПовторнуюПечать") Тогда
				РазрешитьПовторнуюПечать = Истина;
			КонецЕсли;
			
			ТаблицаДляПечати = ТаблицаДляПечатиПоИзвестнымКодамМаркировки(
				ИсходнаяТаблицаВыборочно, ОтборПоДокументам, РазрешитьПовторнуюПечать);
			
			ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, ТаблицаДляПечати);
			
		КонецЕсли;
		
		Если ОбщаяТаблицаПечати.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Ошибка режима печати (нет данных для печати)'");
		КонецЕсли;
		
		ДополнитьКолонкуПредставлениеНоменклатуры(ОбщаяТаблицаПечати);
		ВывестиВТабличныйДокументЭтикетки(ТабличныйДокумент, ОбщаяТаблицаПечати, СтруктураНастроек, ВстроеннаяПечать);
		УстановитьСостояниеРаспечатанПоТаблицеДляПечати(ОбщаяТаблицаПечати);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеПоВыбраннымКодам = Новый Массив();
	Если ОбщаяТаблицаПечати <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ОбщаяТаблицаПечати Цикл
			ДанныеКода = Новый Структура();
			ДанныеКода.Вставить("КодМаркировки",       СтрокаТаблицы.КодМаркировки);
			ДанныеКода.Вставить("ПолныйКодМаркировки", СтрокаТаблицы.ПолныйКодМаркировки);
			ДанныеПоВыбраннымКодам.Добавить(ДанныеКода);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет использованные коды маркировки из пула в случаях:
//   * Все коды маркировки по основанию распечатаны, основание полностью оформлено (по основанию)
//   * Основание не указано или архивировано, коды маркировки распечатаны (по использованным кодам).
//
Процедура ОчисткаПулаКодовМаркировки() Экспорт
	
	СрокХраненияКодовВПуле = Константы.СрокХраненияИспользованныхКодовМаркировки.Получить();
	Если СрокХраненияКодовВПуле = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОчисткиПула", НачалоДня(ТекущаяДатаСеанса()) - 86400 * СрокХраненияКодовВПуле);
	Запрос.УстановитьПараметр("ПустоеОснование", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеСтатусыОформленияДокументовИСМП"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование
	|ПОМЕСТИТЬ ПроверяемыеОснования
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеОснования.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДляАрхивирования
	|ИЗ
	|	ПроверяемыеОснования КАК ПроверяемыеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПроверяемыеОснования.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование
	|		И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|		ПО ПроверяемыеОснования.ДокументОснование = СтатусыОформленияДокументовИСМП.Основание
	|		И
	|			СтатусыОформленияДокументовИСМП.СтатусОформления <> ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.Оформлено)
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование ЕСТЬ NULL
	|	И СтатусыОформленияДокументовИСМП.Основание ЕСТЬ NULL
	|;
	|
	|// Полностью распечатанные по основаниям/////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеОснования.ДокументОснование
	|ИЗ
	|	ОснованияДляАрхивирования КАК ПроверяемыеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПроверяемыеОснования.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеОснования.ДокументОснование
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная) < &ДатаОчисткиПула
	|;
	|
	|// Распечатанные без оснований///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|		ПО ПулКодовМаркировкиСУЗ.ДокументОснование = СтатусыОформленияДокументовИСМП.Основание
	|ГДЕ
	|	(ПулКодовМаркировкиСУЗ.ДокументОснование В(&ПустоеОснование)
	|		ИЛИ ЕСТЬNULL(СтатусыОформленияДокументовИСМП.Архивный, ЛОЖЬ))
	|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1,1,1)
	|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная < &ДатаОчисткиПула
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировкиСУЗ.КодМаркировки
	|";
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаОснования = Пакет[2].Выбрать();
	
	Набор = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	Пока ВыборкаОснования.Следующий() Цикл
		
		Набор.Отбор.ДокументОснование.Установить(ВыборкаОснования.ДокументОснование);
		НачатьТранзакцию();
		Попытка
			
			Набор.Записать();
			
			Основания = Новый Массив;
			Основания.Добавить(ВыборкаОснования.ДокументОснование);
			РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(
				Основания,
				Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПустаяСсылка());
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ИСМП'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				РегистрыСведений.ПулКодовМаркировкиСУЗ,
				ВыборкаОснования.ДокументОснование,
				СтрШаблон(
					НСтр("ru='Ошибка при очистке пула кодов маркировки по причине: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЦикла;
	
	ВыборкаКоды = Пакет[3].Выбрать();
	
	Набор = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	Пока ВыборкаКоды.Следующий() Цикл
		Набор.Отбор.КодМаркировки.Установить(ВыборкаКоды.КодМаркировки);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#Область ПечатьКодовМаркировки

// Подготавливает данные для печати этикеток ИС
// 
// Параметры:
// 	ДанныеПечати - Структура - Данные для печати
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * РезультатРезервирования - Массив - Результат резервированных кодов маркировки
// * ТабличныйДокумент - ТабличныйДокумент - Напечатанные коды маркировки
Функция ПечатьЭтикетокСРезервированиемПоДокументу(ДанныеПечати) Экспорт
	
	СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
	СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте = ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте;
	
	ТабличныйДокумент       = Новый ТабличныйДокумент();
	РезультатРезервирования = Неопределено;
	Попытка
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
			ДанныеПечати, ТабличныйДокумент, СтруктураНастроек, РезультатРезервирования);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ТабличныйДокумент",       ТабличныйДокумент);
	СтруктураРезультат.Вставить("РезультатРезервирования", РезультатРезервирования);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Возвращает новую таблицу для печати этикеток
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Новая пустая таблица для заполнения данными печати
Функция НоваяТаблицаДанныхДляПечатиЭтикеток() Экспорт
	
	НаборВременный = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	
	ОписаниеТипаСтрока = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип;
	ОписаниеТипаЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(10);

	ТаблицаИтог        = НаборВременный.Выгрузить(,"Номенклатура, Характеристика");

	ТаблицаИтог.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаИтог.Колонки.Добавить("Количество",           ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("КоличествоПечать",     ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Порядок",              ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Штрихкод",             ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ТаблицаИтог.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаИтог.Колонки.Добавить("КодМаркировки",        ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("НомерВГруппе",         ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("СодержимоеКоличество", ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("ШаблонЭтикетки",       Метаданные.ОпределяемыеТипы.ШаблонЭтикеткиИС.Тип);
	ТаблицаИтог.Колонки.Добавить("Шаблон",               Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ТаблицаИтог.Колонки.Добавить("СпособВводаВОборот",   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ТаблицаИтог.Колонки.Добавить(
		"СрокГодности",
		Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИтог.Колонки.Добавить("ЭтоКодМаркировки",     Новый ОписаниеТипов("Булево"));
	ТаблицаИтог.Колонки.Добавить("Организация",          Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаИтог.Колонки.Добавить("ВидПродукции",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаИтог.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаИтог.Колонки.Добавить("GTIN",                 Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	МассивТиповПризнакаМаркировкиОстатков = Новый Массив();
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("Булево"));
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	ТаблицаИтог.Колонки.Добавить("МаркировкаОстатков", Новый ОписаниеТипов(МассивТиповПризнакаМаркировкиОстатков));
	ТаблицаИтог.Индексы.Добавить("Количество");
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Используя объект платформы СхемаЗапроса добавляет условие по документу в зависимости от типа документа
// 
// Параметры:
// 	Запрос - Запрос - Экземпляр объекта запроса, текст которого необходимо модифицировать
// 	СтруктураОтбораДокументы - Структура - Описание:
// * Ключ - Строка - Имя поля, на значение которог необходимо установить отбор
// * Значение - ДокументСсылка - Значение отбора, которое необходимо установить
// 	ИндексПакета - Число, Неопределено - Индекс запроса в пакете, в который необходимо добавить условие,
//	если Неопределено - условие добавляется в последний запрос.
Процедура ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, ИндексПакета = Неопределено) Экспорт
	
	Если СтруктураОтбораДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Если ИндексПакета = Неопределено Тогда
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Иначе
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(ИндексПакета);
	КонецЕсли;
	
	Операторы = ПоследнийПакет.Операторы.Получить(0);
	Для Каждого КлючЗначение Из СтруктураОтбораДокументы Цикл
		Операторы.Отбор.Добавить(СтрШаблон("%1 В (&%2)", КлючЗначение.Ключ, КлючЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция НоваяТаблицаРезультатаРезервирования() Экспорт
	
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить(
		"Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"КодМаркировки", Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ПолныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Реквизиты.ПолныйКодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ТипШтрихкода",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Реквизиты.ТипШтрихкода.Тип);
	ТаблицаИтог.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаИтог.Колонки.Добавить("ИННВладельца", Новый ОписаниеТипов("Строка"));
	ТаблицаИтог.Индексы.Добавить("Номенклатура, Характеристика, GTIN");
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Возвращает признак наличия в конфигурации-потребителе справочника шаблонов для печати этикеток
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВидимостьШаблонаЭтикетки() Экспорт
	
	ШаблонЭтикеткиЭтоСправочник = Ложь;
	
	ТипыШаблонаЭтикетки = Метаданные.ОпределяемыеТипы["ШаблонЭтикеткиИС"].Тип.Типы();
	ТипВсеСправочники   = Справочники.ТипВсеСсылки();
	
	Для Каждого ТипШаблонаЭтикетки Из ТипыШаблонаЭтикетки Цикл
		Если ТипВсеСправочники.СодержитТип(ТипШаблонаЭтикетки) Тогда
			ШаблонЭтикеткиЭтоСправочник = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ШаблонЭтикеткиЭтоСправочник;
	
КонецФункции

Процедура СброситьПризнакПечатиПоЗаказу(ЗаказНаЭмиссию) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка                = Новый БлокировкаДанных();
	ЭлементБлокировки         = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.Режим   = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗаказНаЭмиссию", ЗаказНаЭмиссию);
	
	НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаЭмиссию.Установить(ЗаказНаЭмиссию);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ЭлементНабора Из НаборЗаписей Цикл
			ЭлементНабора.ДатаПечатиУниверсальная = Неопределено;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка сбрасывании признака печати по документу %1:
				       |%2'"),
			ЗаказНаЭмиссию,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

// Получает коды маркировки по документам основания
// 
// Параметры:
// 	Основания    - Массив из ОпределяемыйТип.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП - Основания для заказа на эмиссию.
// 	Напечатанные - Неопределено, Булево                                                 - Отбор по признаку печати.
// Возвращаемое значение:
// 	ТаблицаЗначений - Коды маркировки.
Функция КодыМаркировкиПоОснованию(Основания, Напечатанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки                   КАК КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки             КАК ПолныйКодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ВидПродукции                    КАК ВидПродукции,
		|	ПулКодовМаркировкиСУЗ.Шаблон                          КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.GTIN                            КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.СрокГодности                    КАК СрокГодности,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки.ЗначениеШтрихкода,"""") КАК КодМаркировкиУпаковки,
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки                КАК ШтрихкодУпаковки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	(ПулКодовМаркировкиСУЗ.ДокументОснование В (&Основания)
		|	И НЕ ПулКодовМаркировкиСУЗ.ДокументОснование В (&НезаполненныеЗначенияОснования)
		|	ИЛИ ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию В (&Основания))
		|	И ВЫБОР
		|		КОГДА &Напечатанные = НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		КОГДА &Напечатанные = ЛОЖЬ
		|			ТОГДА ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки УБЫВ,
		|	GTIN,
		|	СрокГодности";
	
	Запрос.УстановитьПараметр("Основания",                      Основания);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияОснования", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"));
	Запрос.УстановитьПараметр("Напечатанные",                   Напечатанные);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	ВозвращаемоеЗначение       = Новый Массив();
	ПараметрыНормализацииКМ    = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		КодМаркировки = ВыборкаИзРезультатаЗапроса.КодМаркировки;
		Если ВыборкаИзРезультатаЗапроса.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			
			ПолныйКодМаркировки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(
				ВыборкаИзРезультатаЗапроса.ПолныйКодМаркировки);
			
			Если ВыборкаИзРезультатаЗапроса.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка Тогда
				
				КодМаркировки = ПолныйКодМаркировки;
				
			Иначе
				
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					ПолныйКодМаркировки,
					ВыборкаИзРезультатаЗапроса.ВидПродукции);
					
				Если ДанныеРазбора <> Неопределено Тогда
					КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
						ДанныеРазбора,
						ВыборкаИзРезультатаЗапроса.ВидПродукции,
						ПараметрыНормализацииКМ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяСтрока = Новый Структура;
		ТекущаяСтрока.Вставить("Штрихкод",                          КодМаркировки);
		ТекущаяСтрока.Вставить("Количество",                        1);
		ТекущаяСтрока.Вставить("ШтрихкодМаркиАлкогольнойПродукции", "");
		ТекущаяСтрока.Вставить("ШтрихкодУпаковки",                  ВыборкаИзРезультатаЗапроса.КодМаркировкиУпаковки);
		
		ВозвращаемоеЗначение.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает в ПулКодовМаркировкиСУЗ данные штрихкода.
// 
// Параметры:
// 	ДанныеШтрихкода       - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// 	ДанныеЗаписи          - Структура - Поля для записи данных.
Процедура ЗаписатьДанныеКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, ДанныеЗаписи = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("КодМаркировки",           ДанныеШтрихкода.Штрихкод);
	ДанныеДляЗаписи.Вставить("ПолныйКодМаркировки",     ДанныеШтрихкода.ШтрихкодBase64);
	ДанныеДляЗаписи.Вставить("Организация",             ПараметрыСканирования.Организация);
	ДанныеДляЗаписи.Вставить("ДатаПечатиУниверсальная", ТекущаяУниверсальнаяДата());
	ДанныеДляЗаписи.Вставить("Статус",                  Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен);
	
	Если ДанныеЗаписи <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДанныеЗаписи Цикл
			ДанныеДляЗаписи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить(
		"ХешСуммаКодаМаркировки",
		ИнтеграцияИС.ХешированиеДанныхSHA256(ДанныеДляЗаписи.КодМаркировки));
	
	МенеджерЗаписи = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеШтрихкода);
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеДляЗаписи);
	
	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек;
		КонецЕсли;
	ИначеЕсли ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.Шаблон) Тогда
		МенеджерЗаписи.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(
			МенеджерЗаписи.ВидПродукции);
	КонецЕсли;
	
	Если МенеджерЗаписи.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		МенеджерЗаписи.МаркировкаОстатков = Истина;
	КонецЕсли;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.УстановитьЗначение("ХешСуммаКодаМаркировки", ДанныеДляЗаписи.ХешСуммаКодаМаркировки);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НаборДанныхРезультатПроверки = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
		НаборДанныхРезультатПроверки.Отбор.ШтрихкодУпаковки.Установить(ДанныеШтрихкода.ШтрихкодУпаковки);
		
		НаборДанныхРезультатПроверки.Прочитать();
		
		Если НаборДанныхРезультатПроверки.Количество() Тогда
			
			УдаляемыеСтрокиНабора = Новый Массив();
			Для Каждого СтрокаНабора Из НаборДанныхРезультатПроверки Цикл
				Если СтрокаНабора.ТребуетсяПолныйКодМаркировки Тогда
					УдаляемыеСтрокиНабора.Добавить(СтрокаНабора);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаНабора Из УдаляемыеСтрокиНабора Цикл
				НаборДанныхРезультатПроверки.Удалить(НаборДанныхРезультатПроверки.Индекс(СтрокаНабора));
			КонецЦикла;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
			ЭлементБлокировки.УстановитьЗначение("ШтрихкодУпаковки", ДанныеШтрихкода.ШтрихкодУпаковки);
		
		Иначе
			НаборДанныхРезультатПроверки = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НаборДанныхРезультатПроверки <> Неопределено Тогда
			НаборДанныхРезультатПроверки.Записать();
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеШтрихкода.ЕстьВПулеКодовМаркировки = Истина;
		ДанныеШтрихкода.ПолныйКодМаркировки      = ДанныеШтрихкода.ШтрихкодBase64;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка сохранения кода маркировки %1 в пул:
				       |%2'"),
			ДанныеДляЗаписи.КодМаркировки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюНормализацияБезМРЦ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	ПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ПараметрыОтметки.ЭтоНезависимыйРегистрСведений = Истина;
	ПараметрыОтметки.ПолноеИмяРегистра = "РегистрСведений.ПулКодовМаркировкиСУЗ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаЗаказов, ПараметрыОтметки);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюНормализацияБезМРЦ(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "РегистрСведений.ПулКодовМаркировкиСУЗ";
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатСозданияТаблицы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	Если Не РезультатСозданияТаблицы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	Если Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказов.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию
	|ИЗ
	|	ВТДляОбработкиПулКодовМаркировкиСУЗ КАК ТаблицаЗаказов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("ЗаказНаЭмиссию", Выборка.ЗаказНаЭмиссию);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборДанных = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
			НаборДанных.Отбор.ЗаказНаЭмиссию.Установить(Выборка.ЗаказНаЭмиссию);
			НаборДанных.Прочитать();
			
			ЕстьИзменения = Ложь;
			
			Для Каждого СтрокаНабораДанных Из НаборДанных Цикл
				
				СтрокаДанных = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(СтрокаНабораДанных.КодМаркировки);
				НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных,
					СтрокаНабораДанных.ВидПродукции,
					ПараметрыНормализацииКМ);
				
				Если СтрокаНабораДанных.КодМаркировки <> НормализованныйКод Тогда
					ЕстьИзменения                             = Истина;
					СтрокаНабораДанных.КодМаркировки          = НормализованныйКод;
					СтрокаНабораДанных.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(
						СтрокаНабораДанных.КодМаркировки)
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборДанных);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборДанных,, Параметры.Очередь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать регистр сведений: %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", МетаданныеОбъекта.Синоним);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура ДополнитьКолонкуПредставлениеНоменклатуры(ОбщаяТаблицаПечати)
	
	Для Каждого СтрокаТаблицы Из ОбщаяТаблицаПечати Цикл
		СтрокаТаблицы.ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.Характеристика,,,
				СтрокаТаблицы.ПредставлениеНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, Источник)
	
	Если ОбщаяТаблицаПечати = Неопределено Тогда
		ОбщаяТаблицаПечати = Источник;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Источник, ОбщаяТаблицаПечати);
	КонецЕсли;
	
КонецПроцедуры

// Выводит на печать этикетки
// 
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - Результат печати
// 	ТаблицаОбъектыПечати - ТаблицаЗначений - Исходные данные для печати
// 	СтруктураНастроек - Структура - (См. ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП).
// 	ВстроеннаяПечать  - Булево    - Не использовать переопределение для печати.
Процедура ВывестиВТабличныйДокументЭтикетки(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек, ВстроеннаяПечать)
	
	СтандартнаяОбработка = Истина;
	
	Если Не ВстроеннаяПечать Тогда
		ПечатьЭтикетокИСМППереопределяемый.ПечатьЭтикетокИСМП(
			ТаблицаОбъектыПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		ПечатьЭтикетокИСМП(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

// Библиотечная функция печати
// 
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - Результат печати.
// 	ОбъектыПечати     - ТаблицаЗначений   - Исходные данные для печати.
// 	СтруктураНастроек - Структура         - Дополнительные настройки печати.
Процедура ПечатьЭтикетокИСМП(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек)
	
	Макет         = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПФ_MXL_ЭтикеткаОбувь");
	МакетУпаковки = УправлениеПечатью.МакетПечатнойФормы(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПФ_MXL_ЭтикеткаОбувьУпаковка");
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ЭталонИС");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
	
	ПредыдущейНомерВГруппе = Неопределено;
	ПредыдущаяСтрокаПечати = Новый Структура("Номенклатура, Характеристика, GTIN");
	
	Для Каждого СтрокаДанных Из ТаблицаОбъектыПечати Цикл
		
		ИспользоватьХарактеристики = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "Характеристика");
		
		ТекущийНомерВГруппе = СтрокаДанных.НомерВГруппе;
		Для НомерЭкземпляра = 1 По СтрокаДанных.Количество Цикл
			
			Если СтрокаДанных.ЭтоКодМаркировки Тогда
				
				Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
				Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
					ТипКода = 18;
				ИначеЕсли СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
					ТипКода = 24;
				КонецЕсли;
				
				Область.Параметры.Наименование = СтрокаДанных.ПредставлениеНоменклатуры;
				Область.Параметры.Артикул      = СтрокаДанных.Номенклатура.Артикул;
				Область.Параметры.НомерВГруппе = СтрокаДанных.НомерВГруппе;
				
			Иначе
				
				Область                                = МакетУпаковки.ПолучитьОбласть(МакетУпаковки.ОбластьПечати.Имя);
				ТипКода                                = 2;
				Область.Параметры.НомерВГруппе         = СтрокаДанных.НомерВГруппе;
				Область.Параметры.СодержимоеКоличество = СтрокаДанных.СодержимоеКоличество;
				
			КонецЕсли;
			
			Если СтрокаДанных.ШтрихкодВBase64 Тогда
				ТипВходныхДанных = 1;
				Штрихкод         = СтрокаДанных.Штрихкод;
			Иначе
				ТипВходныхДанных = 0;
				Штрихкод         = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(СтрокаДанных.Штрихкод, ТипКода);
			КонецЕсли;
			
			Для Каждого Рисунок Из Область.Рисунки Цикл
				
				Область.Параметры.ПредставлениеШтрихкода = СтрокаДанных.КодМаркировки;
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Штрихкод",         Штрихкод);
				ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
				ПараметрыШтрихкода.Вставить("ТипКода",          ТипКода);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Истина);
				
				РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
				Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
					Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
				Иначе
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
			
			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			ВывестиГоризонтальныйРазделитель = Ложь;
			Если ПредыдущейНомерВГруппе = Неопределено Тогда
				ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
			КонецЕсли;
			
			Присоединять = Истина;
			Если ТекущийНомерВГруппе = 0 Тогда
				// Разбивка по номенклатуре и характеристике при печати свободных кодов
				Если ЗначениеЗаполнено(ПредыдущаяСтрокаПечати.Номенклатура)
					И (ИспользоватьХарактеристики И ПредыдущаяСтрокаПечати.Характеристика <> СтрокаДанных.Характеристика)
					Или ПредыдущаяСтрокаПечати.Номенклатура <> СтрокаДанных.Номенклатура
					Или (Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
						И ПредыдущаяСтрокаПечати.GTIN <> СтрокаДанных.GTIN) Тогда
					ВывестиГоризонтальныйРазделитель = Истина;
				КонецЕсли;
			ИначеЕсли ПредыдущейНомерВГруппе <> ТекущийНомерВГруппе Тогда
				ВывестиГоризонтальныйРазделитель = Истина;
				ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
			КонецЕсли;
			
			Если ВывестиГоризонтальныйРазделитель Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Присоединять = Ложь;
			КонецЕсли;
			
			МассивОбластейПрисоединения = Новый Массив();
			МассивОбластейПрисоединения.Добавить(Область);
			
			Если Не ТабличныйДокумент.АвтоМасштаб
				И Присоединять
				И ТабличныйДокумент.ПроверитьПрисоединение(МассивОбластейПрисоединения) Тогда
				
				ТабличныйДокумент.Присоединить(Область);
				
			Иначе
				
				Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Область);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПредыдущаяСтрокаПечати, СтрокаДанных,, "GTIN");
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ПредыдущаяСтрокаПечати.GTIN = СтрокаДанных.GTIN;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает таблицу кодов, выводимых на печать.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений     - Исходные данныех для печати
// 	СтруктураОтбораДокументы - Структура      - Описание:
// * ДокументОснование - ДокументСсылка       - Документ-основание для резервирования свободных кодов.
// 	РезервироватьСвободныеКоды - Булево       - Признак необходимости резервировать коды, если не достаточно для печати.
// 	МаркировкаОстатков - Булево, Неопределено - Признак печати кода для маркировки остатков.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТаблицаПечати            - ТаблицаЗначений - Данные для печати этикеток.
// * ТаблицаДляРезервирования - ТаблицаЗначений - Данные для резервирования свободных кодов.
//
Функция ТаблицаДляПечатиНеРаспечатанныеКодыПоДокументу(ТаблицаНоменклатуры, СтруктураОтбораДокументы, РезервироватьСвободныеКоды, МаркировкаОстатков)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.Организация          КАК Организация,
		|	ИсходнаяТаблица.Номенклатура         КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика       КАК Характеристика,
		|	ИсходнаяТаблица.Шаблон               КАК Шаблон,
		|	ИсходнаяТаблица.СпособВводаВОборот   КАК СпособВводаВОборот,
		|	ИсходнаяТаблица.СрокГодности         КАК СрокГодности,
		|	ИсходнаяТаблица.ШаблонЭтикетки       КАК ШаблонЭтикетки,
		|	ИсходнаяТаблица.НомерВГруппе         КАК НомерВГруппе,
		|	ИсходнаяТаблица.СодержимоеКоличество КАК СодержимоеКоличество,
		|	ИсходнаяТаблица.КоличествоПечать     КАК КоличествоПечать,
		|	ИсходнаяТаблица.Количество           КАК Количество,
		|	ИсходнаяТаблица.GTIN                 КАК GTIN,
		|	ИсходнаяТаблица.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура,
		|	Характеристика,
		|	Шаблон,
		|	СпособВводаВОборот,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки,
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗ.ДокументОснование,
		|	ПулКодовМаркировкиСУЗ.Статус,
		|	ПулКодовМаркировкиСУЗ.Организация КАК Организация,
		|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.ТипШтрихкода,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.СрокГодности,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки,
		|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ДанныеРегистра
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
		|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировкиСУЗ.GTIN
		|		И ПулКодовМаркировкиСУЗ.Номенклатура = &ПустаяНоменклатура
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.МаркировкаОстатков = &МаркировкаОстатков
		|	КОНЕЦ
		|	И НЕ ПулКодовМаркировкиСУЗ.Статус В (&НедоступныеСтатусы)
		|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|	И ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки        = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура,
		|	Характеристика,
		|	Шаблон,
		|	СпособВводаВОборот,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.КодМаркировки,
		|	ДанныеРегистра.ПолныйКодМаркировки Как Штрихкод,
		|	ДанныеРегистра.ПолныйКодМаркировки,
		|	ДанныеРегистра.ХешСуммаКодаМаркировки,
		|	ДанныеРегистра.ЗаказНаЭмиссию,
		|	ДанныеРегистра.ДокументОснование,
		|	ДанныеРегистра.Статус,
		|	ДанныеРегистра.Организация,
		|	ДанныеРегистра.СтанцияУправленияЗаказами,
		|	ДанныеРегистра.Номенклатура,
		|	ДанныеРегистра.Характеристика,
		|	ДанныеРегистра.GTIN КАК GTIN,
		|	ДанныеРегистра.ДатаЭмиссииУниверсальная,
		|	ДанныеРегистра.ДатаПечатиУниверсальная,
		|	ДанныеРегистра.ШтрихкодУпаковки,
		|	ДанныеРегистра.ХешСуммаУпаковки,
		|	ДанныеРегистра.Шаблон,
		|	ДанныеРегистра.СпособВводаВОборот,
		|	ДанныеРегистра.СрокГодности,
		|	ДанныеРегистра.ТипШтрихкода КАК ТипШтрихкода,
		|	ЛОЖЬ                        КАК ОтметкаПечати,
		|	ИСТИНА                      КАК ЭтоКодМаркировки,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ПредставлениеНоменклатуры <> """"
		|			ТОГДА ДанныеРегистра.ПредставлениеНоменклатуры
		|		ИНАЧЕ ТаблицаНоменклатуры.ПредставлениеНоменклатуры
		|	КОНЕЦ КАК ПредставлениеНоменклатуры,
		|	ТаблицаНоменклатуры.ШаблонЭтикетки,
		|	ТаблицаНоменклатуры.НомерВГруппе,
		|	ТаблицаНоменклатуры.СодержимоеКоличество,
		|	ТаблицаНоменклатуры.КоличествоПечать Как Количество
		|ИЗ
		|	ДанныеРегистра КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО ДанныеРегистра.Организация       = ТаблицаНоменклатуры.Организация
		|		И ДанныеРегистра.Шаблон             = ТаблицаНоменклатуры.Шаблон
		|		И ТаблицаНоменклатуры.СпособВводаВОборот В (ДанныеРегистра.СпособВводаВОборот, ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
		|		И ТаблицаНоменклатуры.СрокГодности В (ДанныеРегистра.СрокГодности, ДАТАВРЕМЯ(1, 1, 1))
		|		И ВЫБОР
		|			КОГДА ТаблицаНоменклатуры.Номенклатура = &ПустаяНоменклатура
		|				ТОГДА ДанныеРегистра.GTIN = ТаблицаНоменклатуры.GTIN
		|			ИНАЧЕ
		|				ДанныеРегистра.Номенклатура     = ТаблицаНоменклатуры.Номенклатура
		|				И ДанныеРегистра.Характеристика = ТаблицаНоменклатуры.Характеристика
		|		КОНЕЦ
		|";
	
	ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, 1);
	
	Запрос.УстановитьПараметр("НедоступныеСтатусы",  СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("МаркировкаОстатков",  МаркировкаОстатков);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",  ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ШтрихкодВBase64", Новый ОписаниеТипов("Булево"));
	
	ТаблицаЗаписей.Индексы.Добавить("КодМаркировки");
	ТаблицаЗаписей.Индексы.Добавить("ОтметкаПечати");
	ТаблицаЗаписей.Индексы.Добавить("Организация, Номенклатура, Характеристика, Шаблон, ОтметкаПечати");
	ТаблицаЗаписей.Индексы.Добавить("Организация, Номенклатура, Характеристика, Шаблон, ОтметкаПечати, СпособВводаВОборот");
	
	Отказ                    = Ложь;
	ТаблицаДляРезервирования = ТаблицаНоменклатуры.Скопировать(Новый Структура("Количество", 0));
	ТаблицаДляРезервирования.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация",    СтрокаТЧ.Организация);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		Иначе
			СтруктураПоиска.Вставить("GTIN", СтрокаТЧ.GTIN);
		КонецЕсли;
		СтруктураПоиска.Вставить("Шаблон",        СтрокаТЧ.Шаблон);
		СтруктураПоиска.Вставить("ОтметкаПечати", Ложь);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособВводаВОборот) Тогда
			СтруктураПоиска.Вставить("СпособВводаВОборот", СтрокаТЧ.СпособВводаВОборот);
		КонецЕсли;
		
		ПоискСтрокКодов = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
		ТекущееКоличество = 0;
		
		Для Каждого СтрокаКода Из ПоискСтрокКодов Цикл
			СтрокаКода.ОтметкаПечати   = Истина;
			СтрокаКода.Количество      = 1;
			СтрокаКода.Штрихкод        = СтрокаКода.ПолныйКодМаркировки;
			СтрокаКода.ШтрихкодВBase64 = Истина;
			ТекущееКоличество          = ТекущееКоличество + 1;
			Если ТекущееКоличество = СтрокаТЧ.Количество Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НеНайденоКодов = СтрокаТЧ.Количество - ТекущееКоличество;
		Если НеНайденоКодов <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезервироватьСвободныеКоды Тогда
			
			НоваяСтрока = ТаблицаДляРезервирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.Количество = НеНайденоКодов;
			
		Иначе
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка печати кода для %1, требуется кодов: %2, доступно %3'"),
				ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика),
				СтрокаТЧ.Количество,
				ТекущееКоличество);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати кодов маркировки'");
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТаблицаДляРезервирования", ТаблицаДляРезервирования);
	ВозвращаемоеЗначение.Вставить("ТаблицаДляПечати",         ТаблицаЗаписей.Скопировать(
		Новый Структура("ОтметкаПечати", Истина)));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает таблицу кодов маркировки для печати.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Исходные данные для печати.
// 	СтруктураОтбораДокументы - Структура - Описание:
// * ДокументОснование - ДокументСсылка - Документ-основание для выбокри кодов.
// РазрешитьПовторнуюПечать - Булево - Разрашает печать ранее напечатанных кодов.
// Возвращаемое значение:
// 	ТаблицаЗначений - Данные для печати.
Функция ТаблицаДляПечатиПоИзвестнымКодамМаркировки(ТаблицаНоменклатуры, СтруктураОтбораДокументы, РазрешитьПовторнуюПечать = Неопределено)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.КодМаркировки          КАК КодМаркировки,
		|	ИсходнаяТаблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ИсходнаяТаблица.Номенклатура           КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика         КАК Характеристика,
		|	ИсходнаяТаблица.ШаблонЭтикетки         КАК ШаблонЭтикетки,
		|	ИсходнаяТаблица.НомерВГруппе           КАК НомерВГруппе,
		|	ИсходнаяТаблица.СодержимоеКоличество   КАК СодержимоеКоличество,
		|	ИсходнаяТаблица.СрокГодности           КАК СрокГодности,
		|	ИсходнаяТаблица.Шаблон                 КАК Шаблон,
		|	ИсходнаяТаблица.КоличествоПечать       КАК КоличествоПечать,
		|	ИсходнаяТаблица.ЭтоКодМаркировки       КАК ЭтоКодМаркировки,
		|	ИсходнаяТаблица.ШтрихкодУпаковки       КАК ШтрихкодУпаковки,
		|	ИсходнаяТаблица.ТипШтрихкода           КАК ТипШтрихкода,
		|	ИсходнаяТаблица.Количество             КАК Количество,
		|	ИсходнаяТаблица.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки,
		|	ХешСуммаКодаМаркировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки,
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗ.ДокументОснование,
		|	ВЫБОР
		|		КОГДА ПулКодовМаркировкиСУЗ.Статус В (&НедоступныеСтатусы)
		|			ТОГДА ЛОЖЬ
		|		КОГДА &РазрешенаПовторнаяПечать
		|			ТОГДА ИСТИНА
		|		КОГДА ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Доступно,
		|	ПулКодовМаркировкиСУЗ.Статус,
		|	ПулКодовМаркировкиСУЗ.Организация КАК Организация,
		|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN,
		|	ПулКодовМаркировкиСУЗ.СрокГодности,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки,
		|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ДанныеРегистра
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
		|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировкиСУЗ.GTIN
		|		И ПулКодовМаркировкиСУЗ.Номенклатура = &ПустаяНоменклатура
		|
		|ГДЕ
		|	(ПулКодовМаркировкиСУЗ.КодМаркировки, ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки) В
		|		(ВЫБРАТЬ
		|			ТаблицаНоменклатуры.КодМаркировки          КАК КодМаркировки,
		|			ТаблицаНоменклатуры.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
		|		ИЗ
		|			ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки,
		|	ХешСуммаКодаМаркировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаНоменклатуры.ЭтоКодМаркировки
		|			ТОГДА ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, """")
		|		ИНАЧЕ ТаблицаНоменклатуры.КодМаркировки
		|	КОНЕЦ                                                     КАК Штрихкод,
		|	ТаблицаНоменклатуры.КодМаркировки                         КАК КодМаркировки,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, """") КАК ПолныйКодМаркировки,
		|	ВЫБОР
		|		КОГДА ТаблицаНоменклатуры.ЭтоКодМаркировки
		|			ТОГДА ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки
		|		ИНАЧЕ ТаблицаНоменклатуры.ШтрихкодУпаковки
		|	КОНЕЦ                                        КАК ШтрихкодУпаковки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ТаблицаНоменклатуры.Номенклатура             КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика           КАК Характеристика,
		|	ТаблицаНоменклатуры.ШаблонЭтикетки           КАК ШаблонЭтикетки,
		|	ТаблицаНоменклатуры.НомерВГруппе             КАК НомерВГруппе,
		|	ТаблицаНоменклатуры.СодержимоеКоличество     КАК СодержимоеКоличество,
		|	ТаблицаНоменклатуры.КоличествоПечать         КАК КоличествоПечать,
		|	ТаблицаНоменклатуры.Количество               КАК Количество,
		|	ПулКодовМаркировкиСУЗ.Организация            КАК Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаНоменклатуры.ЭтоКодМаркировки
		|			ТОГДА ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Доступно, &РазрешенаПовторнаяПечать)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ                                        КАК Доступно,
		|	ТаблицаНоменклатуры.ЭтоКодМаркировки         КАК ЭтоКодМаркировки,
		|	ТаблицаНоменклатуры.ТипШтрихкода             КАК ТипШтрихкода,
		|	ПулКодовМаркировкиСУЗ.GTIN                   КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию         КАК ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗ.ДокументОснование      КАК ДокументОснование,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.СрокГодности, ТаблицаНоменклатуры.СрокГодности) КАК СрокГодности,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Шаблон,       ТаблицаНоменклатуры.Шаблон)       КАК Шаблон,
		|	ВЫБОР
		|		КОГДА ПулКодовМаркировкиСУЗ.ПредставлениеНоменклатуры <> """"
		|			ТОГДА ПулКодовМаркировкиСУЗ.ПредставлениеНоменклатуры
		|		ИНАЧЕ ТаблицаНоменклатуры.ПредставлениеНоменклатуры
		|	КОНЕЦ                                        КАК ПредставлениеНоменклатуры
		|
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистра КАК ПулКодовМаркировкиСУЗ
		|		ПО ТаблицаНоменклатуры.КодМаркировки         = ПулКодовМаркировкиСУЗ.КодМаркировки
		|		И ТаблицаНоменклатуры.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки";
	
	ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, 1);
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("НедоступныеСтатусы",  СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("ПустаяНоменклатура",  ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	Если РазрешитьПовторнуюПечать = Неопределено Тогда
		Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки());
	Иначе
		Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", РазрешитьПовторнуюПечать);
	КонецЕсли;
	
	ТаблицаПечати = Запрос.Выполнить().Выгрузить();
	ТаблицаПечати.Колонки.Добавить("ШтрихкодВBase64", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПечати.Сортировать(
		"НомерВГруппе, ШтрихкодУпаковки, ЭтоКодМаркировки Убыв, Номенклатура, Характеристика, СрокГодности, Шаблон");
	ТаблицаПечати.Индексы.Добавить("Доступно");
	ТаблицаПечати.Индексы.Добавить("КодМаркировки");
	
	Для Каждого СтрокаТЧ Из ТаблицаПечати Цикл
		Если СтрокаТЧ.ЭтоКодМаркировки Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ПолныйКодМаркировки) Тогда
				СтрокаТЧ.ШтрихкодВBase64 = Истина;
				СтрокаТЧ.Штрихкод        = СтрокаТЧ.ПолныйКодМаркировки;
			Иначе
				СтрокаТЧ.Штрихкод = СтрокаТЧ.КодМаркировки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка на доступность
	НедоступныеКоды = ТаблицаПечати.НайтиСтроки(Новый Структура("Доступно", Ложь));
	Для Каждого СтрокаТЧ Из НедоступныеКоды Цикл
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для %1: код маркировки уже распечатан.'"),
			ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток'");
	КонецЕсли;
	
	Возврат ТаблицаПечати;
	
КонецФункции

Процедура ДополнитьТаблицуПечатиЗарезервированнымКодам(ТаблицаДляПечатиВыборочно, ТаблицаНоменклатуры, АдресРезультатаРезервирования)
	
	РезультатРезервирования = ПолучитьИзВременногоХранилища(АдресРезультатаРезервирования).ТаблицаКодыМаркировки;
	
	ДеревоУпаковок = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НовоеДеревоУпаковок();
	ДеревоУпаковок.Колонки.Добавить("ИсходнаяСтрока");
	ДеревоУпаковок.Колонки.Добавить("ИННВладельца");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
	
		ПоискСтрокКодов = РезультатРезервирования.НайтиСтроки(СтруктураПоиска);
		Зарезервировано = ПоискСтрокКодов.Количество();
		
		Если Зарезервировано <> СтрокаТаблицы.Количество Тогда
			МассивПолейПредставления = Новый Массив();
			МассивПолейПредставления.Добавить(
				ИнтеграцияИС.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика));
			Если ЗначениеЗаполнено(СтрокаТаблицы.СпособВводаВОборот) Тогда
				МассивПолейПредставления.Добавить(СтрокаТаблицы.СпособВводаВОборот);
			КонецЕсли;
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зарезервировать код маркировки для:
					       | ""%1""
					       |по причине:
					       |Не найдено свободного кода.'"),
				СтрСоединить(МассивПолейПредставления, ", "));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		СтрокаРезервирования        = ПоискСтрокКодов.Получить(0);
		
		СтрокаДерева                = ДеревоУпаковок.Строки.Добавить();
		СтрокаДерева.Штрихкод       = СтрокаРезервирования.КодМаркировки;
		СтрокаДерева.Номенклатура   = СтрокаРезервирования.Номенклатура;
		СтрокаДерева.Характеристика = СтрокаРезервирования.Характеристика;
		СтрокаДерева.Серия          = СтрокаТаблицы.Серия;
		СтрокаДерева.ИННВладельца   = СтрокаРезервирования.ИННВладельца;
		СтрокаДерева.Количество     = СтрокаТаблицы.Количество;
		
		СтрокаТаблицы.КодМаркировки = СтрокаРезервирования.КодМаркировки;
		
		РеквизитыШтрихкодаУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ШтрихкодУпаковки, "Серия, ТипУпаковки");
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
			СтрокаДерева.Серия = РеквизитыШтрихкодаУпаковки.Серия;
		КонецЕсли;
		
		СтрокаДерева.ТипШтрихкода = СтрокаРезервирования.ТипШтрихкода;
		
		Если ЗначениеЗаполнено(РеквизитыШтрихкодаУпаковки.ТипУпаковки) Тогда
			СтрокаДерева.ТипУпаковки = РеквизитыШтрихкодаУпаковки.ТипУпаковки;
		Иначе
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
		КонецЕсли;
		
		СтрокаДерева.ИсходнаяСтрока          = СтрокаТаблицы;
		СтрокаТаблицы.Штрихкод               = СтрокаРезервирования.ПолныйКодМаркировки;
		СтрокаТаблицы.ХешСуммаКодаМаркировки = СтрокаРезервирования.ХешСуммаКодаМаркировки;
		
		РезультатРезервирования.Удалить(СтрокаРезервирования);
		
	КонецЦикла;
	
	Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок);
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихкодУпаковки) Тогда
			Обработки.РаботаСКМПриПеремаркировкеТоваровИСМП.УстановитьЗначенияНовогоКодаМаркировки(
				СтрокаТаблицы.ШтрихкодУпаковки, СтрокаДерева.ШтрихкодУпаковки);
		КонецЕсли;
		
		НоваяСтрокаПечатиВыборочно = ТаблицаДляПечатиВыборочно.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПечатиВыборочно, СтрокаДерева);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПечатиВыборочно, СтрокаДерева.ИсходнаяСтрока);

	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак печати по кодам маркировки.
// 
// Параметры:
// 	ТаблицаДляПечати - ТаблицаЗначений - Таблица кодов маркировки для установки признака печати.
Процедура УстановитьСостояниеРаспечатанПоТаблицеДляПечати(ТаблицаДляПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПечати = ТекущаяУниверсальнаяДата();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляПечати Цикл
		
		МенеджерЗаписиРегистра = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, СтрокаТаблицы);
		МенеджерЗаписиРегистра.Прочитать();
		
		Если МенеджерЗаписиРегистра.Выбран() Тогда
			
			Если ЗначениеЗаполнено(МенеджерЗаписиРегистра.ДатаПечатиУниверсальная)
			 И Не ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки() Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru='Ошибка при печати кода маркировки:
						     |Код маркировки %1 уже распечатан %2'"),
					МенеджерЗаписиРегистра.КодМаркировки,
					МенеджерЗаписиРегистра.ДатаПечатиУниверсальная);
			КонецЕсли;
			
			МенеджерЗаписиРегистра.ДатаПечатиУниверсальная = ДатаПечати;
			МенеджерЗаписиРегистра.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДанныхПоДокументу

Функция ЗапросСвободныхКодовПоЗаказу(Заказ, ТаблицаНоменклатуры, МаркировкаОстатков = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Заказ",                   Заказ);
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП",       ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина));
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры",     ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("РезервироватьПоТаблице",  (ТаблицаНоменклатуры.Количество() > 0));
	Запрос.УстановитьПараметр("СтатусыВыведенИзОборота", СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("МаркировкаОстатков",      МаркировкаОстатков);
	Запрос.УстановитьПараметр("ШаблонБлок",              ИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок());
	Запрос.УстановитьПараметр(
		"Организация",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация"));
	Запрос.УстановитьПараметр(
		"НачалоGTINМаркировкиОстатков",
		ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр(
		"ПустоеОснование",
		ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Заказ КАК ДокументОснование
	|ПОМЕСТИТЬ ДокументВРаботе
	|;";
	Запрос.Выполнить();
	
	СформироватьТаблицуМаркированныхТоваровОснований(Запрос, "ДокументВРаботе");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркированныеТоварыОснований.Организация        КАК Организация,
	|	МаркированныеТоварыОснований.ВидПродукции       КАК ВидПродукции,
	|	МаркированныеТоварыОснований.Номенклатура       КАК Номенклатура,
	|	МаркированныеТоварыОснований.Характеристика     КАК Характеристика,
	|	МаркированныеТоварыОснований.Шаблон             КАК Шаблон,
	|	МаркированныеТоварыОснований.СпособВводаВОборот КАК СпособВводаВОборот,
	|	МаркированныеТоварыОснований.Количество         КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	МаркированныеТоварыОснований КАК МаркированныеТоварыОснований
	|ГДЕ
	|	МаркированныеТоварыОснований.ВидПродукции В (&ВидыПродукцииИСМП)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидПродукции,
	|	Номенклатура,
	|	Характеристика,
	|	Шаблон,
	|	СпособВводаВОборот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаркированныеТоварыОснований;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументВРаботе;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пул.КодМаркировки               КАК КодМаркировки,
	|	Пул.ПолныйКодМаркировки         КАК ПолныйКодМаркировки,
	|	Пул.ДокументОснование           КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика
	|ПОМЕСТИТЬ СвободныеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|			ПО Товары.Организация       = Пул.ЗаказНаЭмиссию.Организация
	|			И Товары.ВидПродукции       = Пул.ЗаказНаЭмиссию.ВидПродукции
	|			И Товары.Номенклатура       = Пул.Номенклатура
	|			И Товары.Характеристика     = Пул.Характеристика
	|			И Товары.Шаблон             = Пул.Шаблон
	|			И Товары.СпособВводаВОборот В
	|				(Пул.СпособВводаВОборот, Значение(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|			ПО СтатусыОформленияДокументовИСМП.Основание = Пул.ДокументОснование
	|			И Пул.ДокументОснование <> &Заказ
	|			И СтатусыОформленияДокументовИСМП.Архивный
	|ГДЕ
	|	НЕ Пул.Статус В (&СтатусыВыведенИзОборота)
	|	И Не Пул.Шаблон В (&ШаблонБлок)
	|	И Пул.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1)
	|	И (Пул.ДокументОснование В(&ПустоеОснование)
	|		ИЛИ НЕ СтатусыОформленияДокументовИСМП.Архивный ЕСТЬ NULL)
	|	И ВЫБОР
	|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
	|		ИНАЧЕ Пул.МаркировкаОстатков = &МаркировкаОстатков
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Пул.КодМаркировки               КАК КодМаркировки,
	|	Пул.ПолныйКодМаркировки         КАК ПолныйКодМаркировки,
	|	Пул.ДокументОснование           КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика,
	|	Пул.Шаблон                      КАК Шаблон,
	|	Пул.СпособВводаВОборот          КАК СпособВводаВОборот
	|ПОМЕСТИТЬ ВозможныеСвободныеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|			ПО Товары.Организация       = Пул.ЗаказНаЭмиссию.Организация
	|			И Товары.ВидПродукции       = Пул.ЗаказНаЭмиссию.ВидПродукции
	|			И Товары.Номенклатура       = Пул.Номенклатура
	|			И Товары.Характеристика     = Пул.Характеристика
	|			И Товары.Шаблон             = Пул.Шаблон
	|			И Товары.СпособВводаВОборот В
	|				(Пул.СпособВводаВОборот, Значение(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
	|			И Пул.ДокументОснование <> &Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|			ПО СтатусыОформленияДокументовИСМП.Основание = Пул.ДокументОснование
	|			И НЕ СтатусыОформленияДокументовИСМП.Архивный
	|			И СтатусыОформленияДокументовИСМП.СтатусОформления = ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления)
	|ГДЕ
	|	НЕ Пул.Статус В (&СтатусыВыведенИзОборота)
	|	И Не Пул.Шаблон В (&ШаблонБлок)
	|	И Пул.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1)
	|	И ВЫБОР
	|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
	|		ИНАЧЕ Пул.МаркировкаОстатков = &МаркировкаОстатков
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВозможныеСвободныеКоды.ДокументОснование,
	|	ВозможныеСвободныеКоды.Организация,
	|	ВозможныеСвободныеКоды.ВидПродукции,
	|	ВозможныеСвободныеКоды.Номенклатура,
	|	ВозможныеСвободныеКоды.Характеристика,
	|	ВозможныеСвободныеКоды.Шаблон,
	|	ВозможныеСвободныеКоды.СпособВводаВОборот,
	|	КОЛИЧЕСТВО(ВозможныеСвободныеКоды.КодМаркировки) КАК Количество
	|ПОМЕСТИТЬ ВозможныйИсточникСвободныхКодов
	|ИЗ
	|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	ВозможныеСвободныеКоды.ДокументОснование,
	|	ВозможныеСвободныеКоды.Организация,
	|	ВозможныеСвободныеКоды.ВидПродукции,
	|	ВозможныеСвободныеКоды.Номенклатура,
	|	ВозможныеСвободныеКоды.Характеристика,
	|	ВозможныеСвободныеКоды.Шаблон,
	|	ВозможныеСвободныеКоды.СпособВводаВОборот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции
	|ПОМЕСТИТЬ ДокументыСОшибкамиОформления
	|ИЗ
	|	ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|СГРУППИРОВАТЬ ПО
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции
	|
	|";
	Запрос.Выполнить();
	
	СформироватьТаблицуМаркированныхТоваровОснований(Запрос, "ДокументыСОшибкамиОформления");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаЭмиссиюТовары.Ссылка                    КАК ЗаказНаЭмиссию,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование  КАК ДокументОснование,
	|	ЗаказНаЭмиссиюТовары.Ссылка.Организация        КАК Организация,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции       КАК ВидПродукции,
	|	ЗаказНаЭмиссиюТовары.Номенклатура              КАК Номенклатура,
	|	ЗаказНаЭмиссиюТовары.Характеристика            КАК Характеристика,
	|	ЗаказНаЭмиссиюТовары.Шаблон                    КАК Шаблон,
	|	ЗаказНаЭмиссиюТовары.Ссылка.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ЗаказНаЭмиссиюТовары.Количество                КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументамСОшибкамиПредварительно
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = ЗаказНаЭмиссиюТовары.Ссылка.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции
	|ГДЕ
	|	ЗаказНаЭмиссиюТовары.Ссылка.Проведен
	|	И Не ЗаказНаЭмиссиюТовары.Шаблон В (&ШаблонБлок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.ДокументОснование,
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика,
	|	Пул.Шаблон,
	|	Пул.СпособВводаВОборот,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = Пул.ЗаказНаЭмиссию.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = Пул.ЗаказНаЭмиссию.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = Пул.ЗаказНаЭмиссию.ВидПродукции
	|		 И Не Пул.Шаблон В (&ШаблонБлок)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Организация,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика,
	|	СУММА(ОжидаетсяПоДокументамСОшибкамиПредварительно.Количество) КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументамСОшибкамиОформления
	|ИЗ
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно КАК ОжидаетсяПоДокументамСОшибкамиПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|		ПО ВозможныйИсточникСвободныхКодов.Номенклатура = ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура
	|		И ВозможныйИсточникСвободныхКодов.Характеристика = ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика
	|		И ВозможныйИсточникСвободныхКодов.Шаблон = ОжидаетсяПоДокументамСОшибкамиПредварительно.Шаблон
	|		И ВозможныйИсточникСвободныхКодов.СпособВводаВОборот = ОжидаетсяПоДокументамСОшибкамиПредварительно.СпособВводаВОборот
	|		И ВозможныйИсточникСвободныхКодов.ДокументОснование = ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Организация,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ОжидаетсяПоДокументамСОшибкамиПредварительно.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркированныеТоварыОснований.ДокументОснование КАК ДокументОснование,
	|	МаркированныеТоварыОснований.Организация       КАК Организация,
	|	МаркированныеТоварыОснований.ВидПродукции      КАК ВидПродукции,
	|	МаркированныеТоварыОснований.Номенклатура      КАК Номенклатура,
	|	МаркированныеТоварыОснований.Характеристика    КАК Характеристика,
	|	-МаркированныеТоварыОснований.Количество       КАК Количество
	|ПОМЕСТИТЬ ДоступноКРезрвированиюПоИзлишкамПредварительно
	|ИЗ
	|	МаркированныеТоварыОснований КАК МаркированныеТоварыОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = МаркированныеТоварыОснований.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = МаркированныеТоварыОснований.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = МаркированныеТоварыОснований.ВидПродукции
	|ГДЕ
	|	МаркированныеТоварыОснований.ВидПродукции В (&ВидыПродукцииИСМП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ожидается.ДокументОснование,
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика,
	|	Ожидается.Количество
	|ИЗ
	|	ОжидаетсяПоДокументамСОшибкамиОформления КАК Ожидается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции,
	|	ВозможныйИсточникСвободныхКодов.Номенклатура,
	|	ВозможныйИсточникСвободныхКодов.Характеристика,
	|	ВозможныйИсточникСвободныхКодов.Количество
	|ИЗ
	|	ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|;
	|";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСостоянияКодовПоЗаказу(
	Заказ,
	УничтожитьТаблицыСвободныхКодов = Истина,
	ТаблицаНоменклатуры = Неопределено,
	МаркировкаОстатков = Неопределено)
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		ТаблицаНоменклатуры = НоваяТаблицаНоменклатуры();
	КонецЕсли;
	
	Запрос = ЗапросСвободныхКодовПоЗаказу(Заказ, ТаблицаНоменклатуры, МаркировкаОстатков);
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование КАК ДокументОснование,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация       КАК Организация,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции      КАК ВидПродукции,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура      КАК Номенклатура,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика    КАК Характеристика,
	|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) КАК Количество
	|ПОМЕСТИТЬ ДоступноКРезрвированию
	|ИЗ
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно КАК ДоступноКРезрвированиюПоИзлишкамПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободныеКоды.ДокументОснование,
	|	СвободныеКоды.Организация,
	|	СвободныеКоды.ВидПродукции,
	|	СвободныеКоды.Номенклатура,
	|	СвободныеКоды.Характеристика,
	|	КОЛИЧЕСТВО(СвободныеКоды.КодМаркировки)
	|ИЗ
	|	СвободныеКоды КАК СвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	СвободныеКоды.ДокументОснование,
	|	СвободныеКоды.Организация,
	|	СвободныеКоды.ВидПродукции,
	|	СвободныеКоды.Номенклатура,
	|	СвободныеКоды.Характеристика
	|;
	|";
	
	Если УничтожитьТаблицыСвободныхКодов Тогда
		Запрос.Текст = Запрос.Текст + "
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СвободныеКоды;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВозможныеСвободныеКоды;
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВозможныйИсточникСвободныхКодов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОжидаетсяПоДокументамСОшибкамиПредварительно;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОжидаетсяПоДокументамСОшибкамиОформления;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаЭмиссиюТовары.Ссылка              КАК ЗаказНаЭмиссию,
	|	ЗаказНаЭмиссиюТовары.Ссылка.Организация  КАК Организация,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции КАК ВидПродукции,
	|	ЗаказНаЭмиссиюТовары.Номенклатура        КАК Номенклатура,
	|	ЗаказНаЭмиссиюТовары.Характеристика      КАК Характеристика,
	|	ЗаказНаЭмиссиюТовары.Количество          КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументуОснованиюПредварительно
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюТовары
	|ГДЕ
	|	ЗаказНаЭмиссиюТовары.Ссылка.Проведен
	|	И ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование = &Заказ
	|	И Не ЗаказНаЭмиссиюТовары.Шаблон В(&ШаблонБлок)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	Пул.ЗаказНаЭмиссию.ДокументОснование = &Заказ
	|	И Не Пул.Шаблон В(&ШаблонБлок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ЗаказНаЭмиссию    КАК ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Организация       КАК Организация,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ВидПродукции      КАК ВидПродукции,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Номенклатура      КАК Номенклатура,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Характеристика    КАК Характеристика,
	|	СУММА(ОжидаетсяПоДокументуОснованиюПредварительно.Количество) КАК Количество
	|ПОМЕСТИТЬ Ожидается
	|ИЗ
	|	ОжидаетсяПоДокументуОснованиюПредварительно КАК ОжидаетсяПоДокументуОснованиюПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Организация,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ОжидаетсяПоДокументуОснованиюПредварительно.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика,
	|	0                               КАК КоличествоВЗаказе,
	|	0                               КАК КоличествоРезервировать,
	|	0                               КАК КоличествоЗаказано,
	|	СУММА(ВЫБОР КОГДА Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоПечатать,
	|	СУММА(ВЫБОР КОГДА Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) КАК КоличествоРаспечатано
	|ПОМЕСТИТЬ ОбщийРасчетПредварительно
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	Пул.ДокументОснование = &Заказ
	|СГРУППИРОВАТЬ ПО
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.ВидПродукции,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика,
	|	0,
	|	0,
	|	СУММА(Ожидается.Количество),
	|	0,
	|	0
	|ИЗ
	|	Ожидается КАК Ожидается
	|СГРУППИРОВАТЬ ПО
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступноКРезрвированию.Организация,
	|	ДоступноКРезрвированию.ВидПродукции,
	|	ДоступноКРезрвированию.Номенклатура,
	|	ДоступноКРезрвированию.Характеристика,
	|	0,
	|	СУММА(ДоступноКРезрвированию.Количество),
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ДоступноКРезрвированию КАК ДоступноКРезрвированию
	|СГРУППИРОВАТЬ ПО
	|	ДоступноКРезрвированию.Организация,
	|	ДоступноКРезрвированию.ВидПродукции,
	|	ДоступноКРезрвированию.Номенклатура,
	|	ДоступноКРезрвированию.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийРасчет.ВидПродукции                   КАК ВидПродукции,
	|	ОбщийРасчет.Номенклатура                   КАК Номенклатура,
	|	ОбщийРасчет.Характеристика                 КАК Характеристика,
	|	СУММА(ОбщийРасчет.КоличествоВЗаказе)       КАК КоличествоВЗаказе,
	|	СУММА(ОбщийРасчет.КоличествоРезервировать) КАК КоличествоРезервировать,
	|	СУММА(ОбщийРасчет.КоличествоЗаказано)      КАК КоличествоЗаказано,
	|	СУММА(ОбщийРасчет.КоличествоПечатать)      КАК КоличествоПечатать,
	|	СУММА(ОбщийРасчет.КоличествоРаспечатано)   КАК КоличествоРаспечатано,
	|	СУММА(ОбщийРасчет.КоличествоВЗаказе)
	|		- СУММА(ОбщийРасчет.КоличествоЗаказано)
	|		- СУММА(ОбщийРасчет.КоличествоПечатать)
	|		- СУММА(ОбщийРасчет.КоличествоРаспечатано) КАК Распределить
	|ПОМЕСТИТЬ ОбщийРасчет
	|ИЗ
	|	ОбщийРасчетПредварительно КАК ОбщийРасчет
	|ГДЕ
	|	ОбщийРасчет.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	ОбщийРасчет.ВидПродукции,
	|	ОбщийРасчет.Номенклатура,
	|	ОбщийРасчет.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийРасчет.ВидПродукции          КАК ВидПродукции,
	|	ОбщийРасчет.Номенклатура          КАК Номенклатура,
	|	ОбщийРасчет.Характеристика        КАК Характеристика,
	|	ОбщийРасчет.КоличествоВЗаказе     КАК КоличествоВЗаказе,
	|	ОбщийРасчет.КоличествоЗаказано    КАК КоличествоЗаказано,
	|	ОбщийРасчет.КоличествоПечатать    КАК КоличествоПечатать,
	|	ОбщийРасчет.КоличествоРаспечатано КАК КоличествоРаспечатано,
	|	ВЫБОР
	|		КОГДА ОбщийРасчет.Распределить < 0 ТОГДА 0
	|		КОГДА ОбщийРасчет.Распределить < ОбщийРасчет.КоличествоРезервировать ТОГДА ОбщийРасчет.Распределить
	|		ИНАЧЕ ОбщийРасчет.КоличествоРезервировать
	|	КОНЕЦ КАК КоличествоРезервировать,
	|	ВЫБОР
	|		КОГДА ОбщийРасчет.Распределить - ОбщийРасчет.КоличествоРезервировать < 0 ТОГДА 0
	|		ИНАЧЕ ОбщийРасчет.Распределить - ОбщийРасчет.КоличествоРезервировать
	|	КОНЕЦ КАК КоличествоЗаказать
	|ИЗ
	|	ОбщийРасчет КАК ОбщийРасчет
	|";
	
	Возврат Запрос;
	
КонецФункции

Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИмяВременнойТаблицыСКолонкойДокументОснование)
	
	СтандартнаяОбработка = Истина;
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка             КАК Ссылка,
	|	Товары.Организация        КАК Организация,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.ВидПродукции       КАК ВидПродукции,
	|	Товары.Шаблон             КАК Шаблон,
	|	Товары.СпособВводаВОборот КАК СпособВводаВОборот,
	|	Товары.Количество         КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаНоменклатурыВременная
	|ИЗ
	|	&ТаблицаНоменклатуры КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка             КАК Ссылка,
	|	Товары.Организация        КАК Организация,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.ВидПродукции       КАК ВидПродукции,
	|	Товары.Шаблон             КАК Шаблон,
	|	Товары.СпособВводаВОборот КАК СпособВводаВОборот,
	|	Товары.Количество         КАК Количество
	|ПОМЕСТИТЬ
	|	ТоварыПредварительно
	|ИЗ
	|	ТаблицаНоменклатурыВременная КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.ВидПродукции,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство)
	|	КОНЕЦ,
	|	Товары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|ГДЕ
	|	НЕ &РезервироватьПоТаблице
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.ВидПродукции,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ,
	|	Товары.СпособВводаВОборот,
	|	1
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|ГДЕ
	|	НЕ &РезервироватьПоТаблице";
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ИмяВременнойТаблицыСКолонкойДокументОснование);
	
	ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркированныхТоваровОснований(
		Запрос, ИмяВременнойТаблицыСКолонкойДокументОснование, СтандартнаяОбработка);
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыВременная
	|";
	
	Если СтандартнаяОбработка Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
		|	ТоварыПредварительно.Организация        КАК Организация,
		|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
		|	ТоварыПредварительно.Характеристика     КАК Характеристика,
		|	ТоварыПредварительно.ВидПродукции       КАК ВидПродукции,
		|	ТоварыПредварительно.Шаблон             КАК Шаблон,
		|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
		|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
		|ПОМЕСТИТЬ МаркированныеТоварыОснований
		|ИЗ
		|	ТоварыПредварительно КАК ТоварыПредварительно
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПредварительно.Ссылка,
		|	ТоварыПредварительно.Организация,
		|	ТоварыПредварительно.Номенклатура,
		|	ТоварыПредварительно.Характеристика,
		|	ТоварыПредварительно.ВидПродукции,
		|	ТоварыПредварительно.Шаблон,
		|	ТоварыПредварительно.СпособВводаВОборот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПредварительно
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПредварительно
		|";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РезервированиеКодовМаркировки

// Подготавливает таблицу для передачи в процедуру резервирования
// (См. РегистрСведений.ПулКодовМаркировкиСУЗ.ЗарезервироватьКодыПодЗаказ)
// 
// Параметры:
// 	Параметры - Неопределено, Структура - Описание:
// * ТаблицаНоменклатуры - ТаблицаЗначений - Исходная таблица, которой необходимо инициализировать итоговую таблицу
// * Документ  - ДокументСсылка - Документ, по которому необходимо получить существующие записи из пула
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица номенклатуры для расчета резервирования
Функция НоваяТаблицаНоменклатуры(Параметры = Неопределено)
	
	ПереданаТаблицаНоменклатуры = Параметры <> Неопределено И Параметры.Свойство("ТаблицаНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пул.ДокументОснование  КАК Ссылка,
	|	Пул.Организация        КАК Организация,
	|	Пул.Номенклатура       КАК Номенклатура,
	|	Пул.Характеристика     КАК Характеристика,
	|	Пул.ВидПродукции       КАК ВидПродукции,
	|	Пул.Шаблон             КАК Шаблон,
	|	Пул.СпособВводаВОборот КАК СпособВводаВОборот,
	|	1                      КАК Количество
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	&ВыбратьДанныеПула
	|	И Пул.ДокументОснование = &Документ";
	
	Если Параметры = Неопределено Тогда
		Запрос.УстановитьПараметр("Документ", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ВыбратьДанныеПула", ПереданаТаблицаНоменклатуры);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если ПереданаТаблицаНоменклатуры Тогда
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНоменклатуры Цикл
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Ссылка = Параметры.Документ;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Добавляет в соответствие с ключем документа массив кодов маркировки ,в случае значения Неопределено - в качестве 
// ключа используется текстовое значение "Неопределено".
// 
// Параметры:
// 	ВходноеЗначение - ВыборкаИзРезультатаЗапроса, Структура - сущетствующая структура данных с полями КодМаркировки и
// 	ДокументОснование.
// 	СоответствиеКодовОснованиям - Соответствие - Выходной параметр соответствие, в качестве ключа используется значение
// ДокументОснование, в качестве значения - массив кодов маркировки.
Процедура ДобавитьКодВСоответствиеКодовОснованиям(ВходноеЗначение, СоответствиеКодовОснованиям)
	
	КлючСоответствия = ВходноеЗначение.ДокументОснование;
	
	Если КлючСоответствия = Неопределено Тогда
		КлючСоответствия = "Неопределено";
	КонецЕсли;
	
	МассивКодов = СоответствиеКодовОснованиям[КлючСоответствия];
	
	Если МассивКодов = Неопределено Тогда
		МассивКодов = Новый Массив();
	КонецЕсли;
	
	МассивКодов.Добавить(ВходноеЗначение.КодМаркировки);
	СоответствиеКодовОснованиям.Вставить(КлючСоответствия, МассивКодов);
	
КонецПроцедуры

// Возвращает значение документа основания из ключа соответствия. Используется для пребразования значения
// "Неопределено" в ключе соответствия в значение Неопределено.
// 
// Параметры:
// 	КлючИЗначение - КлючИЗначение - Описание
// Возвращаемое значение:
// 	Произвольный, Неопределено - Описание
Функция ДокументОснованиеИзСоответствияКодам(КлючИЗначение)
	
	ДокументОснование = КлючИЗначение.Ключ;
	
	Если ДокументОснование = "Неопределено" Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
