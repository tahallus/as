#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РазрешенаПовторнаяПечать = ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки();
	
	РазмещениеЭтикетокНаЛисте = "Замостить";
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьДанныеФормы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	УправлениеЭлементамиФормыПриСоздании();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СвернутьДеревоУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
		ЭлементыКорня = ДеревоАгрегированныхКодов.ПолучитьЭлементы();
		Для Каждого СтрокаНоменклатура Из ЭлементыКорня Цикл
			Если ЗначениеЗаполнено(СтрокаНоменклатура.КоличествоПечать) И ВидимостьШаблонаЭтикетки Тогда
				НомерСтроки = ЭлементыКорня.Индекс(СтрокаНоменклатура) + 1;
				Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ШаблонПотребительскойЭтикетки) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 не заполнено поле ""Шаблон потребительской этикетки""'"),
						НомерСтроки);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДеревоАгрегированныхКодов", НомерСтроки , "ШаблонПотребительскойЭтикетки");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ШаблонЛогистическойЭтикетки) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 не заполнено поле ""Шаблон логистической этикетки""'"),
						НомерСтроки);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДеревоАгрегированныхКодов", НомерСтроки, "ШаблонЛогистическойЭтикетки");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаНоменклатура Из СписокКодовМаркировки Цикл
			Если ЗначениеЗаполнено(СтрокаНоменклатура.КоличествоПечать)
				И ВидимостьШаблонаЭтикетки И Не ЗначениеЗаполнено(СтрокаНоменклатура.ШаблонПотребительскойЭтикетки) Тогда
				НомерСтроки = СписокКодовМаркировки.Индекс(СтрокаНоменклатура) + 1;
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В строке %1 не заполнено поле ""Шаблон этикетки""'"),
					НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"СписокКодовМаркировки", НомерСтроки, "ШаблонПотребительскойЭтикетки");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокКодовМаркировкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиКоличествоПечатьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокКодовМаркировки.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМаксимальноеКоличествоПоСтроке(СписокКодовМаркировки.НайтиПоИдентификатору(ТекущаяСтрока));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоАгрегированныхКодов

&НаКлиенте
Процедура ДеревоАгрегированныхКодовКоличествоПечатьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоАгрегированныхКодов.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМаксимальноеКоличествоПоСтроке(ДеревоАгрегированныхКодов.НайтиПоИдентификатору(ТекущаяСтрока));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПечати = ПодготовитьДанныеДляПечати();
	
	Если ДанныеПечати.ОбъектыПечати.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для печати'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "СписокКодовМаркировки.КоличествоПечать");
		Возврат;
		
	ИначеЕсли ПревышенПорогКоличестваЭтикетокДляПредупрежденияПользователя(ДанныеПечати.ОбъектыПечати) Тогда
		
		ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Количество этикеток для печати превышает %1,
					       |выбранные данные можно распечатать только один раз.
					       |Продолжить?'"),
				ПорогКоличестваЭтикетокДляПредупрежденияПриПечати());
				
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Распечатать этикетки по выбранным данным можно только один раз.
			                      |Продолжить?'");
		
	КонецЕсли;
	
	ОповещениеВопросПечатиОкончание = Новый ОписаниеОповещения(
		"ОтветПользователяПродолженияПечатиОкончание", ЭтотОбъект, ДанныеПечати);
	
	ПоказатьВопрос(ОповещениеВопросПечатиОкончание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыЗаполнения    = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыделенныеСтроки", Новый Массив);
	
	Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
		
		ПараметрыОткрытияФормы.Вставить("ОтображатьЛогистическуюЭтикетку", Истина);
		
		Для Каждого ТекущаяСтрока Из Элементы.ДеревоАгрегированныхКодов.ВыделенныеСтроки Цикл
			ДанныеСтроки = ДеревоАгрегированныхКодов.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ДанныеСтроки.ПолучитьРодителя() <> Неопределено Тогда
				ДанныеСтроки = ДанныеСтроки.ПолучитьРодителя();
			КонецЕсли;
			ПараметрыЗаполнения.ВыделенныеСтроки.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		Если ПараметрыЗаполнения.ВыделенныеСтроки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Операция недоступна для выбранного объекта'"),,
				Элементы.ДеревоАгрегированныхКодов.Имя);
		КонецЕсли;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из Элементы.СписокКодовМаркировки.ВыделенныеСтроки Цикл
			ПараметрыЗаполнения.ВыделенныеСтроки.Добавить(СписокКодовМаркировки.НайтиПоИдентификатору(ТекущаяСтрока));
		КонецЦикла;
		
		Если ПараметрыЗаполнения.ВыделенныеСтроки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Операция недоступна для выбранного объекта'"),,
				Элементы.СписокКодовМаркировки.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаПомощникЗаполненияШаблоновЭтикеток",
		ПараметрыОткрытияФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗаполнения", ЭтотОбъект, ПараметрыЗаполнения))
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьМаксимальноеКоличествоПоСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные.КоличествоПечать > ТекущиеДанные.Количество Тогда
		ТекущиеДанные.КоличествоПечать = ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодов.ХешСуммаУпаковки");
	ОтборОформления.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодовКоличествоПечать");
	
	ЭлементПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодовКоличествоЭкземпляров");
	
	ЭлементПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодовШаблонПотребительскойЭтикетки");
	
	ЭлементПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодовШаблонЛогистическойЭтикетки");
	
	ЭлементПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоАгрегированныхКодовШаблонЛогистическойКоличествоЭкземпляров");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиСодержимое.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовСодержимое.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеДляПечати()
	
	Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
		ДанныеДляПечати = ДанныеДляПечатиАгрегированныеКоды();
	Иначе
		ДанныеДляПечати = ДанныеДляПечатиСвободныеКоды();
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаКлиенте
Функция ДанныеДляПечатиСвободныеКоды()
	
	ОбъектыПечати = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СписокКодовМаркировки Цикл
		
		Если СтрокаТаблицы.КоличествоПечать = 0
			Или ВидимостьШаблонаЭтикетки И Не ЗначениеЗаполнено(СтрокаТаблицы.ШаблонПотребительскойЭтикетки) Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыШтрихкода                    = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
		ПараметрыШтрихкода.Организация        = Организация;
		ПараметрыШтрихкода.ВидПродукции       = СтрокаТаблицы.ВидПродукции;
		ПараметрыШтрихкода.Номенклатура       = СтрокаТаблицы.Номенклатура;
		ПараметрыШтрихкода.Характеристика     = СтрокаТаблицы.Характеристика;
		ПараметрыШтрихкода.ШаблонЭтикетки     = СтрокаТаблицы.ШаблонПотребительскойЭтикетки;
		ПараметрыШтрихкода.Количество         = СтрокаТаблицы.КоличествоПечать;
		ПараметрыШтрихкода.СпособВводаВОборот = СтрокаТаблицы.СпособВводаВОборот;
		ПараметрыШтрихкода.Шаблон             = СтрокаТаблицы.Шаблон;
		ПараметрыШтрихкода.GTIN               = СтрокаТаблицы.GTIN;
		
		ОбъектыПечати.Добавить(ПараметрыШтрихкода);
		
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   Документ);
	ИтоговаяСтруктура.Вставить("РежимПечати",                "НеРаспечатанныеКодыПоДокументу");
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте());
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаКлиенте
Функция ДанныеДляПечатиАгрегированныеКоды()
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("Документ",                   Документ);
	ИтоговаяСтруктура.Вставить("РежимПечати",                "Выборочно");
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте());
	
	МассивДанныхПоХешам = Новый Массив();
	
	Для Каждого СтрокаДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.КоличествоПечать = 0 
			Или (Не ЗначениеЗаполнено(СтрокаДерева.ШаблонПотребительскойЭтикетки) И ВидимостьШаблонаЭтикетки)
			Или (Не ЗначениеЗаполнено(СтрокаДерева.ШаблонЛогистическойЭтикетки) И ВидимостьШаблонаЭтикетки)
			Или Не ЗначениеЗаполнено(СтрокаДерева.ХешСуммаУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровПечатиУпаковок = Новый Структура();
		СтруктураПараметровПечатиУпаковок.Вставить("Организация",           Организация);
		СтруктураПараметровПечатиУпаковок.Вставить("Количество",            СтрокаДерева.КоличествоПечать);
		СтруктураПараметровПечатиУпаковок.Вставить("ХешСуммаУпаковки",      СтрокаДерева.ХешСуммаУпаковки);
		СтруктураПараметровПечатиУпаковок.Вставить("Содержимое",            СтрокаДерева.Содержимое);
		СтруктураПараметровПечатиУпаковок.Вставить("КоличествоЭкземпляров", СтрокаДерева.КоличествоЭкземпляров);
		СтруктураПараметровПечатиУпаковок.Вставить("ШаблонПотребительскойЭтикетки",
			СтрокаДерева.ШаблонПотребительскойЭтикетки);
		СтруктураПараметровПечатиУпаковок.Вставить("ШаблонЛогистическойЭтикетки",
			СтрокаДерева.ШаблонЛогистическойЭтикетки);
		
		МассивДанныхПоХешам.Добавить(СтруктураПараметровПечатиУпаковок);
		
	КонецЦикла;
	
	Отказ = Ложь;
	ОбъектыПечати = МассивДанныхДляПечатиЭтикетокПоАгрегированнымКодам(Документ, МассивДанныхПоХешам, Отказ);
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить печать агрегированных кодов'");
	КонецЕсли;
	
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",  ОбъектыПечати);
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаКлиенте
Функция КаждаяЭтикеткаНаНовомЛисте()
	Возврат РазмещениеЭтикетокНаЛисте = "Отдельно";
КонецФункции

&НаСервереБезКонтекста
Функция МассивДанныхДляПечатиЭтикетокПоАгрегированнымКодам(Документ, МассивДанныхПоХешам, Отказ)
	
	МассивДанныхДляПечати = Новый Массив();
	
	ТаблицаХешей = Новый ТаблицаЗначений();
	ТаблицаХешей.Колонки.Добавить("Организация",                   Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаХешей.Колонки.Добавить("Содержимое",                    ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаХешей.Колонки.Добавить("ХешСуммаУпаковки",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТаблицаХешей.Колонки.Добавить("Количество",                    Новый ОписаниеТипов("Число"));
	ТаблицаХешей.Колонки.Добавить("КоличествоЭкземпляров",         Новый ОписаниеТипов("Число"));
	ТаблицаХешей.Колонки.Добавить("ШаблонПотребительскойЭтикетки", Метаданные.ОпределяемыеТипы.ШаблонЭтикеткиИС.Тип);
	ТаблицаХешей.Колонки.Добавить("ШаблонЛогистическойЭтикетки",   Метаданные.ОпределяемыеТипы.ШаблонЭтикеткиИС.Тип);
	
	Для Каждого СтрокаДанных Из МассивДанныхПоХешам Цикл
		НоваяСтрока = ТаблицаХешей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаХешей.Организация                   КАК Организация,
		|	ТаблицаХешей.Содержимое                    КАК Содержимое,
		|	ТаблицаХешей.ХешСуммаУпаковки              КАК ХешСуммаУпаковки,
		|	ТаблицаХешей.Количество                    КАК Количество,
		|	ТаблицаХешей.КоличествоЭкземпляров         КАК КоличествоЭкземпляров,
		|	ТаблицаХешей.ШаблонПотребительскойЭтикетки КАК ШаблонПотребительскойЭтикетки,
		|	ТаблицаХешей.ШаблонЛогистическойЭтикетки   КАК ШаблонЛогистическойЭтикетки
		|ПОМЕСТИТЬ ТаблицаПараметровУпаковок
		|ИЗ
		|	&ТаблицаХешей КАК ТаблицаХешей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ХешСуммаУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки                     КАК КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки            КАК ХешСуммаКодаМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки               КАК ПолныйКодМаркировки,
		|	ПулКодовМаркировкиСУЗ.Организация                       КАК Организация,
		|	ПулКодовМаркировкиСУЗ.Номенклатура                      КАК Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика                    КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная           КАК ДатаПечатиУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки                  КАК ШтрихкодУпаковки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки                  КАК ХешСуммаУпаковки,
		|	ТаблицаПараметровУпаковок.Содержимое                    КАК Содержимое,
		|	ТаблицаПараметровУпаковок.Количество                    КАК Количество,
		|	ТаблицаПараметровУпаковок.КоличествоЭкземпляров         КАК КоличествоЭкземпляров,
		|	ТаблицаПараметровУпаковок.ШаблонПотребительскойЭтикетки КАК ШаблонПотребительскойЭтикетки,
		|	ТаблицаПараметровУпаковок.ШаблонЛогистическойЭтикетки   КАК ШаблонЛогистическойЭтикетки,
		|	ВЫБОР
		|		КОГДА ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РаспечатаноКоличество
		|ПОМЕСТИТЬ ТаблицаПула
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметровУпаковок КАК ТаблицаПараметровУпаковок
		|		ПО (ТаблицаПараметровУпаковок.Организация = ПулКодовМаркировкиСУЗ.Организация)
		|			И (ТаблицаПараметровУпаковок.ХешСуммаУпаковки = ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ХешСуммаУпаковки,
		|	ДатаПечатиУниверсальная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КоличестваПоХешу.Организация КАК Организация,
		|	КоличестваПоХешу.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличестваПоХешу.ШтрихкодУпаковки) КАК РаспечатаноКоличество
		|ПОМЕСТИТЬ РаспечатаноРанееПоХешу
		|ИЗ
		|	ТаблицаПула КАК КоличестваПоХешу
		|ГДЕ
		|	КоличестваПоХешу.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	КоличестваПоХешу.Организация,
		|	КоличестваПоХешу.ХешСуммаУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ЗначениеШтрихкода         КАК КодМаркировки,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ХешСуммаЗначенияШтрихкода КАК ХешСуммаКодаМаркировки,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод.ТипШтрихкода              КАК ТипШтрихкодаВложенногоКода,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка                   КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Номенклатура      КАК НоменклатураУпаковка,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.Характеристика    КАК ХарактеристикаУпаковка,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ТипШтрихкода      КАК ТипШтрихкодаУпаковка,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода КАК ЗначениеШтрихкодаУпаковка,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ХешСумма          КАК ХешСуммаУпаковки
		|ПОМЕСТИТЬ ЗначенияВложенныхКодовМаркировки
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка В
		|			(ВЫБРАТЬ
		|				ТаблицаПула.ШтрихкодУпаковки
		|			ИЗ
		|				ТаблицаПула КАК ТаблицаПула
		|			ГДЕ
		|				ТаблицаПула.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияВложенныхКодовМаркировки.КодМаркировки              КАК КодМаркировки,
		|	ЗначенияВложенныхКодовМаркировки.ХешСуммаКодаМаркировки     КАК ХешСуммаКодаМаркировки,
		|	ЗначенияВложенныхКодовМаркировки.ШтрихкодУпаковки           КАК ШтрихкодУпаковки,
		|	ЗначенияВложенныхКодовМаркировки.НоменклатураУпаковка       КАК НоменклатураУпаковка,
		|	ЗначенияВложенныхКодовМаркировки.ХарактеристикаУпаковка     КАК ХарактеристикаУпаковка,
		|	ЗначенияВложенныхКодовМаркировки.ТипШтрихкодаУпаковка       КАК ТипШтрихкодаУпаковка,
		|	ЗначенияВложенныхКодовМаркировки.ТипШтрихкодаВложенногоКода КАК ТипШтрихкодаВложенногоКода,
		|	ЗначенияВложенныхКодовМаркировки.ЗначениеШтрихкодаУпаковка  КАК ЗначениеШтрихкодаУпаковка,
		|	ТаблицаПула.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
		|	
		|	ТаблицаПула.Организация КАК Организация,
		|	ТаблицаПула.Номенклатура КАК Номенклатура,
		|	ТаблицаПула.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ЗначенияВложенныхШтрихкодов
		|ИЗ
		|	ЗначенияВложенныхКодовМаркировки КАК ЗначенияВложенныхКодовМаркировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПула КАК ТаблицаПула
		|		ПО ЗначенияВложенныхКодовМаркировки.КодМаркировки          = ТаблицаПула.КодМаркировки
		|		 И ЗначенияВложенныхКодовМаркировки.ХешСуммаКодаМаркировки = ТаблицаПула.ХешСуммаКодаМаркировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметровУпаковок.Организация                     КАК Организация,
		|	ТаблицаПараметровУпаковок.Содержимое                      КАК Содержимое,
		|	ТаблицаПараметровУпаковок.Количество                      КАК Количество,
		|	ТаблицаПараметровУпаковок.КоличествоЭкземпляров           КАК КоличествоЭкземпляров,
		|	ТаблицаПараметровУпаковок.ШаблонПотребительскойЭтикетки   КАК ШаблонПотребительскойЭтикетки,
		|	ТаблицаПараметровУпаковок.ШаблонЛогистическойЭтикетки     КАК ШаблонЛогистическойЭтикетки,
		|	ЕСТЬNULL(РаспечатаноРанееПоХешу.РаспечатаноКоличество, 0) КАК РаспечатаноКоличество,
		|	ТаблицаПараметровУпаковок.ХешСуммаУпаковки                КАК ХешСуммаУпаковки,
		|	ЗначенияВложенныхШтрихкодов.ШтрихкодУпаковки              КАК ШтрихкодУпаковки,
		|	ЗначенияВложенныхШтрихкодов.НоменклатураУпаковка          КАК НоменклатураУпаковка,
		|	ЗначенияВложенныхШтрихкодов.Номенклатура                  КАК Номенклатура,
		|	ЗначенияВложенныхШтрихкодов.ХарактеристикаУпаковка        КАК ХарактеристикаУпаковка,
		|	ЗначенияВложенныхШтрихкодов.Характеристика                КАК Характеристика,
		|	ЗначенияВложенныхШтрихкодов.ТипШтрихкодаУпаковка          КАК ТипШтрихкодаУпаковка,
		|	ЗначенияВложенныхШтрихкодов.ТипШтрихкодаВложенногоКода    КАК ТипШтрихкодаВложенногоКода,
		|	ЗначенияВложенныхШтрихкодов.ЗначениеШтрихкодаУпаковка     КАК ЗначениеШтрихкодаУпаковка,
		|	ЗначенияВложенныхШтрихкодов.КодМаркировки                 КАК КодМаркировки
		|ИЗ
		|	ТаблицаПараметровУпаковок КАК ТаблицаПараметровУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспечатаноРанееПоХешу КАК РаспечатаноРанееПоХешу
		|		ПО ТаблицаПараметровУпаковок.Организация         = РаспечатаноРанееПоХешу.Организация
		|			И ТаблицаПараметровУпаковок.ХешСуммаУпаковки = РаспечатаноРанееПоХешу.ХешСуммаУпаковки
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияВложенныхШтрихкодов КАК ЗначенияВложенныхШтрихкодов
		|		ПО ТаблицаПараметровУпаковок.Организация      = ЗначенияВложенныхШтрихкодов.Организация
		|		 И ТаблицаПараметровУпаковок.ХешСуммаУпаковки = ЗначенияВложенныхШтрихкодов.ХешСуммаУпаковки
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(КоличествоЭкземпляров),
		|	МАКСИМУМ(ШаблонПотребительскойЭтикетки),
		|	МАКСИМУМ(ШаблонЛогистическойЭтикетки),
		|	МАКСИМУМ(РаспечатаноКоличество),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодУпаковки),
		|	МАКСИМУМ(НоменклатураУпаковка),
		|	МАКСИМУМ(ХарактеристикаУпаковка),
		|	МАКСИМУМ(ТипШтрихкодаУпаковка),
		|	МАКСИМУМ(ЗначениеШтрихкодаУпаковка)
		|ПО
		|	Организация,
		|	ХешСуммаУпаковки,
		|	ШтрихкодУпаковки";
	
	СтруктураОтбораПоДокументу = РегистрыСведений.ПулКодовМаркировкиСУЗ.СтруктураОтбораДокументаПоТипуДокумента(Документ);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораПоДокументу, 1);
	Запрос.УстановитьПараметр("ТаблицаХешей", ТаблицаХешей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаХешУпаковки = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХешУпаковки.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаХешУпаковки.ШтрихкодУпаковки)
				Или ВыборкаХешУпаковки.Количество > ВыборкаХешУпаковки.ШтрихкодУпаковки Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не хватает упаковок для печати %1. Необходимо: %2, Доступно: %3'"),
					ВыборкаХешУпаковки.Содержимое,
					ВыборкаХешУпаковки.Количество,
					ВыборкаХешУпаковки.ШтрихкодУпаковки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Продолжить;
			КонецЕсли;
			
			ВыборкаУпаковка = ВыборкаХешУпаковки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ДобавленоУпаковок = 0;
			НомерВГруппе      = ВыборкаХешУпаковки.РаспечатаноКоличество;
			НужноДобавить     = ВыборкаХешУпаковки.Количество;
			
			Пока ВыборкаУпаковка.Следующий() И ДобавленоУпаковок < НужноДобавить Цикл
				ДобавленоУпаковок = ДобавленоУпаковок + 1;
				НомерВГруппе      = НомерВГруппе      + 1;
				
				СодержимоеКоличество = 0;
				ВыборкаКодМаркировки = ВыборкаУпаковка.Выбрать();
				ШтрихкодУпаковки     = Неопределено;
				
				Пока ВыборкаКодМаркировки.Следующий() Цикл
					
					ПараметрыШтрихкода = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
					ПараметрыШтрихкода.Номенклатура         = ВыборкаКодМаркировки.Номенклатура;
					ПараметрыШтрихкода.Характеристика       = ВыборкаКодМаркировки.Характеристика;
					ПараметрыШтрихкода.Организация          = ВыборкаКодМаркировки.Организация;
					ПараметрыШтрихкода.ШаблонЭтикетки       = ВыборкаХешУпаковки.ШаблонПотребительскойЭтикетки;
					ПараметрыШтрихкода.КодМаркировки        = ВыборкаКодМаркировки.КодМаркировки;
					ПараметрыШтрихкода.ТипШтрихкода         = ВыборкаКодМаркировки.ТипШтрихкодаВложенногоКода;
					ПараметрыШтрихкода.НомерВГруппе         = НомерВГруппе;
					ПараметрыШтрихкода.СодержимоеКоличество = 1;
					ПараметрыШтрихкода.Количество           = 1;
					
					СодержимоеКоличество                    = СодержимоеКоличество + 1;
					ШтрихкодУпаковки                        = ВыборкаКодМаркировки.ШтрихкодУпаковки;
					
					МассивДанныхДляПечати.Добавить(ПараметрыШтрихкода);
					
				КонецЦикла;
				
				ПараметрыШтрихкода                      = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
				ПараметрыШтрихкода.Организация          = ВыборкаУпаковка.Организация;
				ПараметрыШтрихкода.Номенклатура         = ВыборкаУпаковка.НоменклатураУпаковка;
				ПараметрыШтрихкода.Характеристика       = ВыборкаУпаковка.ХарактеристикаУпаковка;
				ПараметрыШтрихкода.ШаблонЭтикетки       = ВыборкаХешУпаковки.ШаблонЛогистическойЭтикетки;
				ПараметрыШтрихкода.Количество           = ВыборкаХешУпаковки.КоличествоЭкземпляров;
				ПараметрыШтрихкода.КодМаркировки        = ВыборкаУпаковка.ЗначениеШтрихкодаУпаковка;
				ПараметрыШтрихкода.ТипШтрихкода         = ВыборкаУпаковка.ТипШтрихкодаУпаковка;
				ПараметрыШтрихкода.НомерВГруппе         = НомерВГруппе;
				ПараметрыШтрихкода.СодержимоеКоличество = СодержимоеКоличество;
				ПараметрыШтрихкода.ШтрихкодУпаковки     = ШтрихкодУпаковки;
				ПараметрыШтрихкода.ЭтоКодМаркировки     = Ложь;
				
				МассивДанныхДляПечати.Добавить(ПараметрыШтрихкода);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивДанныхДляПечати;
	
КонецФункции

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Документ) Тогда
		ТекстОшибки = НСтр("ru = 'В форму печати кодов маркировки не передан документ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ТолькоАгрегированныеКоды = Параметры.ТолькоАгрегированныеКоды;
	ТолькоСвободныеКоды = Параметры.ТолькоСвободныеКоды;
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПулКодовМаркировки.КодМаркировки           КАК КодМаркировки,
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная КАК ДатаПечатиУниверсальная
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|УПОРЯДОЧИТЬ ПО
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная
	|");
	
	Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	Результат = Запрос.Выполнить();
	
	ТекстОшибки = "";
	
	Если Результат.Пустой() Тогда
		Если ЭтоЗаказНаЭмиссию Тогда
			Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Документ, "СервисПровайдер")) Тогда
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" эмиссия кодов осуществляется сервис-провайдером.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'По заказу ""%1"" эмиссия кодов еще не выполнена.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'По документу ""%1"" отсутствуют исполненные заказы на эмиссию кодов маркировки.'");
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ДатаПечатиУниверсальная) И НЕ РазрешенаПовторнаяПечать Тогда
			ТекстОшибки = НСтр("ru = 'По документу ""%1"" все коды маркировки уже распечатаны.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Документ = Параметры.Документ;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Организация") Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон(ТекстОшибки, Параметры.Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы(Отказ = Неопределено)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Если НЕ ТолькоАгрегированныеКоды Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПулКодовМаркировки.ВидПродукции                        КАК ВидПродукции,
		|	ПулКодовМаркировки.Номенклатура                        КАК Номенклатура,
		|	ПулКодовМаркировки.Характеристика                      КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
		|			ТОГДА ПулКодовМаркировки.GTIN
		|		ИНАЧЕ """"
		|	КОНЕЦ                                                  КАК GTIN,
		|	ПулКодовМаркировки.Шаблон                              КАК Шаблон,
		|	ПулКодовМаркировки.СрокГодности                        КАК СрокГодности,
		|	ПулКодовМаркировки.СпособВводаВОборот                  КАК СпособВводаВОборот,
		|	КОЛИЧЕСТВО(ПулКодовМаркировки.КодМаркировки)           КАК Количество,
		|	СУММА(ВЫБОР
		|		КОГДА ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                                 КАК КоличествоПечать,
		|	&ПустойШаблонЭтикетки                                  КАК ШаблонПотребительскойЭтикетки,
		|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")      КАК ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
		|		ПО ПулКодовМаркировки.GTIN         = КэшОписанияОстатков.GTIN
		|		 И ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
		|ГДЕ
		|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
		|	И ПулКодовМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|	И ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|СГРУППИРОВАТЬ ПО
		|	ПулКодовМаркировки.ВидПродукции,
		|	ПулКодовМаркировки.Номенклатура,
		|	ПулКодовМаркировки.Характеристика,
		|	ВЫБОР
		|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
		|			ТОГДА ПулКодовМаркировки.GTIN
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ПулКодовМаркировки.Шаблон,
		|	ПулКодовМаркировки.СрокГодности,
		|	ПулКодовМаркировки.СпособВводаВОборот,
		|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
		|");
		
		Запрос.УстановитьПараметр("Документ",           Документ);
		Запрос.УстановитьПараметр("ПустаяНоменклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Запрос.УстановитьПараметр(
			"ПустойШаблонЭтикетки",
			ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ШаблонЭтикеткиИС"));
		
		ТаблицаСвободныхКодов = Запрос.Выполнить().Выгрузить();
		ТаблицаСвободныхКодов.Колонки.Добавить("Содержимое", ОбщегоНазначения.ОписаниеТипаСтрока(500));
		
		Для Каждого СтрокаТаблицы Из ТаблицаСвободныхКодов Цикл
			
			ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				СтрокаТаблицы.ПредставлениеНоменклатуры, СтрокаТаблицы.ВидПродукции);
				
			СтрокаТаблицы.Содержимое = ИнтеграцияИС.ПредставлениеНоменклатуры(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика,,, ПредставлениеНоменклатуры);
		
		КонецЦикла;
		
		ТаблицаСвободныхКодов.Сортировать(
			"Номенклатура, Характеристика, ПредставлениеНоменклатуры, GTIN, СрокГодности, Шаблон");
		
		СписокКодовМаркировки.Загрузить(ТаблицаСвободныхКодов);
	КонецЕсли;
	
	Если НЕ ТолькоСвободныеКоды Тогда
		ДеревоКодов = РеквизитФормыВЗначение("ДеревоАгрегированныхКодов", Тип("ДеревоЗначений"));
		ДеревоКодов.Строки.Очистить();
		РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьДеревоСуществующихУпаковокПоДокументу(
			ДеревоКодов, Документ,, Истина);
		ЗначениеВРеквизитФормы(ДеревоКодов, "ДеревоАгрегированныхКодов");
	КонецЕсли;
	
	ЕстьСвободныеКоды      = СписокКодовМаркировки.Количество() > 0;
	ЕстьАгрегированныеКоды = ДеревоАгрегированныхКодов.ПолучитьЭлементы().Количество() > 0;
	
	Если Отказ <> Неопределено
		И НЕ ЕстьСвободныеКоды
		И НЕ ЕстьАгрегированныеКоды Тогда
		ТекстОшибки = НСтр("ru = 'По документу ""%1"" нет кодов маркировки для печати.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Параметры.Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоУпаковок()
	Для Каждого СтрокаДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоАгрегированныхКодов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.СписокКодовМаркировкиХарактеристика.Видимость     = Ложь;
		Элементы.ДеревоАгрегированныхКодовХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьСвободныеКоды      = СписокКодовМаркировки.Количество() > 0;
	ЕстьАгрегированныеКоды = ДеревоАгрегированныхКодов.ПолучитьЭлементы().Количество() > 0;
	
	Элементы.СтраницаСвободныеКодыМаркировки.Видимость      = ЕстьСвободныеКоды;
	Элементы.СтраницаАгрегированныеКодыМаркировки.Видимость = ЕстьАгрегированныеКоды;
	
	Если НЕ ЕстьСвободныеКоды ИЛИ НЕ ЕстьАгрегированныеКоды Тогда
		Элементы.СтраницыКодыМаркировки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Если ЕстьСвободныеКоды Тогда
			Элементы.СписокКодовМаркировкиПечать.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ЕстьАгрегированныеКоды Тогда
			Элементы.ДеревоАгрегированныхКодовПечать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьШаблонаЭтикетки = ВидимостьШаблонаЭтикетки();
	
	Если ЕстьСвободныеКоды Тогда
		Элементы.СписокКодовМаркировкиШаблонЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
		Элементы.СписокКодовМаркировкиЗаполнить.Видимость      = ВидимостьШаблонаЭтикетки;
	КонецЕсли;
	
	Если ЕстьАгрегированныеКоды Тогда
		Элементы.ДеревоАгрегированныхКодовШаблонПотребительскойЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
		Элементы.ДеревоАгрегированныхКодовШаблонЛогистическойЭтикетки.Видимость   = ВидимостьШаблонаЭтикетки;
		Элементы.ДеревоАгрегированныхКодовЗаполнить.Видимость                     = ВидимостьШаблонаЭтикетки;
	КонецЕсли;
	
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.СписокКодовМаркировкиШаблонЭтикетки.Имя);
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.ДеревоАгрегированныхКодовШаблонПотребительскойЭтикетки.Имя);
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.ДеревоАгрегированныхКодовШаблонЛогистическойЭтикетки.Имя);
	
КонецПроцедуры

&НаСервере
Функция ВидимостьШаблонаЭтикетки()
	
	Возврат РегистрыСведений.ПулКодовМаркировкиСУЗ.ВидимостьШаблонаЭтикетки();
	
КонецФункции

&НаКлиенте
Функция ПревышенПорогКоличестваЭтикетокДляПредупрежденияПользователя(ОбъектыПечати)
	
	ОбщееКоличество = 0;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		ОбщееКоличество = ОбщееКоличество + ОбъектПечати.Количество;
	КонецЦикла;
	
	Возврат ОбщееКоличество > ПорогКоличестваЭтикетокДляПредупрежденияПриПечати();
	
КонецФункции

&НаКлиенте
Функция ПорогКоличестваЭтикетокДляПредупрежденияПриПечати()
	
	Возврат 3000;
	
КонецФункции

#КонецОбласти

#Область ОписанияОповещений

&НаКлиенте
Процедура ОтветПользователяПродолженияПечатиОкончание(Ответ, ДанныеПечати) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПечатьЭтикетокИСМПКлиент.НапечататьЭтикеткиИСМП(ДанныеПечати, ЭтотОбъект);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗаполнения(ДанныеЗаполнения, ПараметрыЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ПараметрыЗаполнения.ВыделенныеСтроки Цикл
		
		Для Каждого ЭлементЗаполнения Из ДанныеЗаполнения Цикл
			
			СтрокаДанных[ЭлементЗаполнения.Ключ] = ЭлементЗаполнения.Значение;
			
			Если ЭлементЗаполнения.Ключ = "КоличествоПечать" Тогда
				УстановитьМаксимальноеКоличествоПоСтроке(СтрокаДанных);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти