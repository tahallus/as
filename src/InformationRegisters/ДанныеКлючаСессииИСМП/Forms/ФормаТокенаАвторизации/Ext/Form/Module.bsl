#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИмяПараметраСеанса = "ДанныеКлючаСессииИСМП";
	
	ДоступноИзменениеТокена = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДанныеКлючаСессииИСМП);
	
	Элементы.Токен.ТолькоПросмотр = Не ДоступноИзменениеТокена;
	Если ДоступноИзменениеТокена Тогда
		ЗаголовокКоманды = НСтр("ru = 'Записать и закрыть'");
	Иначе
		ЗаголовокКоманды = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	Элементы.ФормаЗакрытьФорму.Заголовок = ЗаголовокКоманды;
	
	Организация = Параметры.Организация;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПолучитьТокен();
	КонецЕсли;
	
	Элементы.Организация.ТолькоПросмотр = Не Параметры.СозданиеТокена;
	Если Параметры.СозданиеТокена Тогда
		Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Модифицированность = Не ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	
	РасшифроватьТокен(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Если Модифицированность Тогда
		Если Не ПроверитьЗаполнениеДанных() Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьТокен();
		ПараметрЗакрытия = Истина;
	Иначе
		ПараметрЗакрытия = Неопределено;
	КонецЕсли;
	
	Закрыть(ПараметрЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// РасшифрованныйТокен
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифрованныйТокен.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОшибкаРасшифровкиТокена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТокен()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПолучитьСохраненныеДанныеКлючаСессии(ИмяПараметраСеанса);
	Если ДанныеКлючаСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДанныеКлючаСессии[Организация] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Токен = ДанныеКлючаСессии[Организация].КлючСессии;
	РасшифроватьТокен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасшифроватьТокен(Форма)
	
	РезультатРасшифровкиТокена    = РасшифроватьТокенJWT(Форма.Токен);
	Форма.ОшибкаРасшифровкиТокена = РезультатРасшифровкиТокена.ОшибкаРасшифровки;
	Форма.РасшифрованныйТокен     = РезультатРасшифровкиТокена.РезультатРасшифровки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасшифроватьТокенJWT(Токен)
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаРасшифровки", Истина);
	Результат.Вставить("РезультатРасшифровки",
		НСтр("ru = 'Не удалось расшифровать данные токена'"));
	
	Если ПустаяСтрока(Токен) Тогда
		Результат.РезультатРасшифровки     = НСтр("ru = 'Токен не указан'");
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		РезультатРазбора = ИнтерфейсМОТПСлужебный.РасшифроватьТокенJWT(Токен);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Если РезультатРазбора.Данные = Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатРазбора.ТекстОшибки) Тогда
			Результат.РезультатРасшифровки = РезультатРазбора.ТекстОшибки;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОшибкаРасшифровки    = Ложь;
	Результат.РезультатРасшифровки = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(РезультатРазбора.Данные);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеДанных()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Организация", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Токен"" не заполнено'");;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Токен", , Отказ);
	ИначеЕсли ОшибкаРасшифровкиТокена Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Токен"" заполнено не верно'");;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Токен", , Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура ЗаписатьТокен()
	
	ДействуетДо = Дата(1,1,1);
	РезультатРабора = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РасшифрованныйТокен);
	Если РезультатРабора <> Неопределено Тогда
		ДействуетДо = ИнтеграцияИС.ДатаИзСтрокиUNIX(РезультатРабора.exp, 1);
	КонецЕсли;

	ПараметрыКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыКлючаСессии();
	ПараметрыКлючаСессии.КлючСессии  = Токен;
	ПараметрыКлючаСессии.ДействуетДо = ДействуетДо;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяПараметраСеанса", ИмяПараметраСеанса);
	ПараметрыЗапроса.Вставить("Организация",        Организация);
	
	ИнтерфейсАвторизацииИСМПСлужебный.УстановитьКлючСессии(ПараметрыЗапроса, ПараметрыКлючаСессии);
	
КонецПроцедуры

#КонецОбласти
