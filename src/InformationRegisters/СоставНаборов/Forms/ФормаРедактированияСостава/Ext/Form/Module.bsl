
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НоменклатураНабора", НоменклатураНабора) ИЛИ НЕ ЗначениеЗаполнено(НоменклатураНабора) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НоваяНоменклатураНабора = НоменклатураНабора;
	
	УстановитьУсловноеОформлениеФормы();
	
	СтароеКоличество = 0;
	Параметры.Свойство("Количество", СтароеКоличество);
	Если НЕ ЗначениеЗаполнено(СтароеКоличество) Тогда
		СтароеКоличество = 1;
	КонецЕсли; 
	КоличествоДоИзменения = СтароеКоличество;
	Количество = СтароеКоличество;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураНабора, 
		"ТипНоменклатуры, СпособРасчетаЦеныНабора, ВариантПечатиНабора, ИспользоватьХарактеристики, Весовой");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
	
	Если Параметры.Свойство("ИспользоватьХарактеристики") И ИспользоватьХарактеристики <> Параметры.ИспользоватьХарактеристики Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'После изменения признака использования характеристик следует сохранить карточку номенклатуры'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	Элементы.Цена.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если Параметры.Свойство("СпособРасчетаЦеныНабора") Тогда
		СпособРасчетаЦеныНабора = Параметры.СпособРасчетаЦеныНабора;
	КонецЕсли; 
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь));
	МассивТипов = Новый Массив;
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	КонецЕсли; 
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", Новый ФиксированныйМассив(МассивТипов)));
	Элементы.СоставНабораНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Цена = 0;
	Если Параметры.Свойство("СоставНабора") Тогда
		РежимРаботы = РежимРаботыРедактированиеСостава();
		Параметры.Свойство("ХарактеристикаНабора", ТекущаяХарактеристика);
		НоваяХарактеристикаНабора = ТекущаяХарактеристика;
		Для каждого ЭлементСтруктуры Из Параметры.СоставНабора Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", ЭлементСтруктуры.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", ЭлементСтруктуры.Характеристика);
			Если ЭлементСтруктуры.Свойство("ЕдиницаИзмерения") Тогда
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", ЭлементСтруктуры.ЕдиницаИзмерения);
			КонецЕсли;
			СтрокиСостава = СоставНабора.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСостава.Количество() = 0 Тогда
				СтрокаСостава = СоставНабора.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСостава, ЭлементСтруктуры);
				СтрокаСостава.ХарактеристикаНабора = ТекущаяХарактеристика;
			Иначе
				СтрокаСостава = СтрокиСостава[0];
				СтрокаСостава.Количество = СтрокаСостава.Количество + ЭлементСтруктуры.Количество;
				СтрокаСостава.ДоляСтоимости = СтрокаСостава.ДоляСтоимости + ЭлементСтруктуры.ДоляСтоимости;
			КонецЕсли;
			Если ЭлементСтруктуры.Свойство("Активная") И ЭлементСтруктуры.Активная = Истина Тогда
				Элементы.СоставНабора.ТекущаяСтрока = СтрокаСостава.ПолучитьИдентификатор();
			КонецЕсли;
			Если ЭлементСтруктуры.Свойство("Цена") Тогда
				Цена = Цена + ЭлементСтруктуры.Количество * ЭлементСтруктуры.Цена;
			КонецЕсли; 
		КонецЦикла;
		Если Цена > 0 И Количество > 0 Тогда
			Цена = Цена / Количество; 
		КонецЕсли; 
		Элементы.СоставНабораЕдиницаИзмерения.Видимость = Ложь;
		Для каждого Стр Из СоставНабора Цикл
			Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				Элементы.СоставНабораЕдиницаИзмерения.Видимость = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	ИначеЕсли Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		РежимРаботы = РежимРаботыВыборХарактеристики();
		ЗаполнитьСоставНабора();
		ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ОбновитьОтборСтрок(СоставНабора, ТекущаяХарактеристика);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Отображать", Истина);
		Элементы.СоставНабора.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		РежимРаботы = РежимРаботыИзФормыНоменклатуры();
		ЗаполнитьИспользованиеВНаборах();
		ПрочитатьДанные();
	КонецЕсли;
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() Тогда
		ИзменяемыеЭлементы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"СоставНабораНоменклатура,СоставНабораХарактеристика,СоставНабораЕдиницаИзмерения");
		Для каждого ИмяЭлемента Из ИзменяемыеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ПредупреждениеПриРедактировании", 
				ТекстПредупрежденияИзмененияСостава());
		КонецЦикла; 
		СоставИзменен = СоставИзменен();
	КонецЕсли;
	
	// Заголовок формы
	Если РежимРаботы = РежимРаботыВыборХарактеристики() Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Характеристики набора: %1'"), НоменклатураНабора);
	ИначеЕсли РежимРаботы = РежимРаботыИзФормыНоменклатуры() И Наборы.Количество() > 0 Тогда
		Заголовок = НСтр("ru = 'Номенклатура используется в наборах'");
	ИначеЕсли РежимРаботы = РежимРаботыИзФормыНоменклатуры() Тогда 
		Заголовок = НСтр("ru = 'Состав набора'");
		Элементы.ЗаголовокХарактеристики.Подсказка =
		"В списке характеристик всегда присутствуют два предопределенных элемента:
		| - Без характеристики: состав, заданный для этого пункта будет подставлен в документ продажи, если характеристика не используется
		| - Общий состав для всех характеристик: добавляется к составу любой другой характеристики";
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = 'Состав набора: %1'"), НоменклатураНабора);
	КонецЕсли;
	
	ПроверкаИспользованияНаборов();
	
	//Характеристики
	Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
		ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
		ЗаполнитьПризнакиИспользованияХарактеристик()
	КонецЕсли;
	//Конец Характеристики
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// КонецМобильныйКлиент
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	Если ФормаВладельца <> Неопределено
		И ФормаВладельца.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		ОбъектНоменклатура = ФормаВладельца.Объект;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбъектНоменклатура, 
			"ЭтоНабор, ТипНоменклатуры, СпособРасчетаЦеныНабора, ВариантПечатиНабора, ИспользоватьХарактеристики, Весовой");
		ИзменитьДоступностьЭлементовФормы(ЭтоНабор);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если РежимРаботы = РежимРаботыВыборХарактеристики() Тогда
		КлючСохраненияПоложенияОкна = "РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава/РежимВыбора";
	Иначе
		КлючСохраненияПоложенияОкна = "РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава/РежимРедактированияСоставаНабора";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДобавленаХарактеристика" И Источник = НоменклатураНабора И Элементы.Характеристики.Видимость Тогда
		
		Если ТипЗнч(Параметр)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") 
			И ЗначениеЗаполнено(Параметр) 
			И Характеристики.НайтиПоЗначению(Параметр)=Неопределено Тогда
			Характеристики.Добавить(Параметр, Строка(Параметр));
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "КопированиеСоставаНабора" И Параметр = НоменклатураНабора Тогда
		
		ПрочитатьДанные();
		
	ИначеЕсли ИмяСобытия = НаборыКлиент.ИмяСобытияИзменениеРеквизитовНабора() И ТипЗнч(Источник) = Тип("Структура") 
		И Источник.Свойство("Номенклатура") И Источник.Номенклатура = НоменклатураНабора Тогда
		
		ЭтоНабор = Источник.ЭтоНабор;
		СпособРасчетаЦеныНабора = Источник.СпособРасчетаЦеныНабора;
		ВариантПечатиНабора = Источник.ВариантПечатиНабора;
		
		ИзменитьДоступностьЭлементовФормы(ЭтоНабор);
		
	ИначеЕсли ИмяСобытия = "Запись_Номенклатура" И Параметр = НоменклатураНабора Тогда
		
		СохранитьИзменения();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ТолькоПросмотр Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		Текст = НСтр("ru = 'Сохранить внесенные изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьИзменения();
		Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
			Закрыть(Истина);
		КонецЕсли; 
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
			Закрыть();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаборыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйЭлемент = Наборы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Ключ", ВыбранныйЭлемент.Значение);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНаборПриИзменении(Элемент)
	
	Если НЕ МожноИзменитьПризнакНабора(НоменклатураНабора, ЭтоНабор) Тогда
		Возврат;
	КонецЕсли; 
	
	ИзменитьДоступностьЭлементовФормы(ЭтоНабор);
	
	Если ЭтоНабор Тогда
		Если НЕ ЗначениеЗаполнено(СпособРасчетаЦеныНабора) Тогда
			СпособРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих");
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ВариантПечатиНабора) Тогда
			ВариантПечатиНабора = ПредопределенноеЗначение("Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие");
		КонецЕсли; 
	Иначе
		СпособРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.ПустаяСсылка");
		ВариантПечатиНабора = ПредопределенноеЗначение("Перечисление.ВариантыПечатиНаборов.ПустаяСсылка");
	КонецЕсли;
	
	ОповеститьОбИзмененииРеквизитовНабора();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаЦеныНабораПриИзменении(Элемент)
	
	ОповеститьОбИзмененииРеквизитовНабора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПечатиНабораПриИзменении(Элемент)
	
	ОповеститьОбИзмененииРеквизитовНабора();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	Если Количество = КоличествоДоИзменения Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьНоменклатуруНабораВСтроках();
	Если Количество < КоличествоДоИзменения Тогда
		НаборыКлиентСервер.УдалитьЭкземплярНабора(НоваяНоменклатураНабора, НоваяХарактеристикаНабора, , СоставНабора, , КоличествоДоИзменения, Количество);
	Иначе
		НаборыКлиентСервер.ДобавитьЭкземплярНабора(НоваяНоменклатураНабора, НоваяХарактеристикаНабора, , СоставНабора, , КоличествоДоИзменения, Количество);
	КонецЕсли; 
	КоличествоДоИзменения = Количество;
	
	Модифицированность = Истина;
	СоставИзменен = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование И (Элемент.ТекущиеДанные=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение))  Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОткрытия = Новый Структура;
	Если Копирование Тогда
		СтруктураОткрытия.Вставить("ЗначениеКопирования", Элемент.ТекущиеДанные.Значение);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", НоменклатураНабора);
		СтруктураОткрытия.Вставить("ЗначенияЗаполнения", СтруктураОтбора);
	КонецЕсли; 
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриАктивизацииСтроки(Элемент)
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийЭлементСписка = Элемент.ТекущиеДанные;
	Если ТекущийЭлементСписка.Значение <> ТекущаяХарактеристика Тогда
		ТекущаяХарактеристика = ТекущийЭлементСписка.Значение;
		ОбновитьОтборСтрок(СоставНабора, ТекущаяХарактеристика);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Отображать", Истина);
		Элементы.СоставНабора.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимРаботы = РежимРаботыВыборХарактеристики() Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		ОповеститьОВыборе(СтрокаТабличнойЧасти.Значение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() И Количество > 1 Тогда
		// При изменении номенклатуры состава количество экземпляров сбрасывается до 1
		Отказ = Истина;
		ПередИзменениемСостава();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	                             
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.ХарактеристикаНабора = ?(РежимРаботы = РежимРаботыИзФормыНоменклатуры(), 
			ТекущаяХарактеристика, НоваяХарактеристикаНабора);
		СтрокаТабличнойЧасти.Отображать = Истина;
		СтрокаТабличнойЧасти.Общий = (РежимРаботы = РежимРаботыИзФормыНоменклатуры() 
			И ТекущаяХарактеристика = Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И РежимРаботы = РежимРаботыИзФормыНоменклатуры() 
		И ТекущаяХарактеристика = Неопределено И НоваяСтрока Тогда
		// Смещение общих строк в начало
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		ИндексСтроки = СоставНабора.Индекс(СтрокаТабличнойЧасти);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Общий", Истина);
		ОбщиеСтроки = СоставНабора.НайтиСтроки(СтруктураОтбора);
		Если ОбщиеСтроки.Количество()=1 И ИндексСтроки>0 Тогда
			СоставНабора.Сдвинуть(ИндексСтроки, -ИндексСтроки);
		ИначеЕсли ОбщиеСтроки.Количество()>1 Тогда
			Смещение = ИндексСтроки-СоставНабора.Индекс(ОбщиеСтроки[ОбщиеСтроки.Количество()-2])-1;
			Если Смещение>0 Тогда
				СоставНабора.Сдвинуть(ИндексСтроки, -Смещение);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования И НЕ СоставИзменен 
		И РежимРаботы = РежимРаботыРедактированиеСостава() Тогда
		СоставИзменен = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПриИзменении(Элемент)
	
	ПриМодификацииСостава();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПередУдалением(Элемент, Отказ)
	
	Если РежимРаботы = РежимРаботыИзФормыНоменклатуры() И ЗначениеЗаполнено(ТекущаяХарактеристика) Тогда
		Для каждого Идентификатор Из Элемент.ВыделенныеСтроки Цикл
			Стр = СоставНабора.НайтиПоИдентификатору(Идентификатор);
			Если Стр.Общий Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораПослеУдаления(Элемент)
	
	ПриМодификацииСостава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриМодификацииСостава()
	
	Если РежимРаботы = РежимРаботыИзФормыНоменклатуры() Тогда
		ОповеститьОбИзмененииСоставаНабора();
	Иначе
		Модифицированность = Истина;
	КонецЕсли; 
	
	Элементы.НоваяНоменклатураНабора.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Элементы.НоваяХарактеристикаНабора.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() И Количество > 1 Тогда
		Идентификатор = Элементы.СоставНабора.ТекущаяСтрока;
		// При изменении номенклатуры состава количество экземпляров сбрасывается до 1
		СброситьКоличествоНаборов();
		ТекущаяСтрока = СоставНабора.НайтиПоИдентификатору(Идентификатор);
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Номенклатура = ВыбранноеЗначение;
			ПриИзмененииНоменклатурыСостава(Идентификатор);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииНоменклатурыСостава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыСостава(Идентификатор = Неопределено)
	
	Если Идентификатор = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.СоставНабора.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = СоставНабора.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли; 
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ТипНоменклатурыЗапас;
	СтрокаТабличнойЧасти.ТипНоменклатурыУслуга = СтруктураДанные.ТипНоменклатурыУслуга;
	
	Если СтруктураДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
		ИЛИ СтруктураДанные.ФиксированнаяСтоимость Тогда
		СтрокаТабличнойЧасти.ФиксированнаяСтоимость = Истина;
	КонецЕсли;
	
	//Характеристики
	Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
		ЗаполнитьПризнакиИспользованияХарактеристик()
	КонецЕсли;
	//Конец Характеристики
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() И Количество > 1 Тогда
		Идентификатор = Элементы.СоставНабора.ТекущаяСтрока;
		// При изменении номенклатуры состава количество экземпляров сбрасывается до 1
		СброситьКоличествоНаборов();
		ТекущаяСтрока = СоставНабора.НайтиПоИдентификатору(Идентификатор);
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Характеристика = ВыбранноеЗначение;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РежимРаботы = РежимРаботыРедактированиеСостава() И Количество > 1 Тогда
		Идентификатор = Элементы.СоставНабора.ТекущаяСтрока;
		// При изменении номенклатуры состава количество экземпляров сбрасывается до 1
		СброситьКоличествоНаборов();
		ТекущаяСтрока = СоставНабора.НайтиПоИдентификатору(Идентификатор);
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.ЕдиницаИзмерения = ВыбранноеЗначение;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНабораПриИзменении(Элемент)
	
	ЗаменитьСостав();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяХарактеристикаНабораАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ХарактеристикиНабора(НоваяНоменклатураНабора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяХарактеристикаНабораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("НоменклатураНабора", НоваяНоменклатураНабора);
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("РегистрСведений.СоставНаборов.Форма.ФормаРедактированияСостава", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНабораПриИзменении(Элемент)
	
	ЗаменитьСостав();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	Если РежимРаботы = РежимРаботыРедактированиеСостава() И СоставНабора.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Не заполнен состав набора'"),,
		"СоставНабора", ,
		Отказ);
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из СоставНабора Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана номенклатура'"), ,
			"СоставНабора["+СоставНабора.Индекс(СтрокаТабличнойЧасти)+"].Номенклатура", ,
			Отказ);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не задано количество запасов'"), ,
			"СоставНабора["+СоставНабора.Индекс(СтрокаТабличнойЧасти)+"].Количество", ,
			Отказ);
		КонецЕсли; 
		Если Элементы.СоставНабораЕдиницаИзмерения.Видимость 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана единица измерения'"), ,
			"СоставНабора["+СоставНабора.Индекс(СтрокаТабличнойЧасти)+"].ЕдиницаИзмерения", ,
			Отказ);
		КонецЕсли; 
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если РежимРаботы = РежимРаботыВыборХарактеристики() Тогда
		СтрокаТабличнойЧасти = Элементы.Характеристики.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ОповеститьОВыборе(СтрокаТабличнойЧасти.Значение);
	Иначе
		СохранитьИзменения();
		Закрыть(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОт(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", НоменклатураНабора);
	СтруктураОткрытия.Вставить("КопироватьСоставНаборов", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Истина);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДругим(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", НоменклатураНабора);
	СтруктураОткрытия.Вставить("КопироватьСоставНаборов", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)

	ПереместитьСтрокуТаблицы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьСтрокуТаблицы(1);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "СоставНабора.Общий", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ТекущаяХарактеристика", Неопределено, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СоставНабора");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Характеристики.Пометка", Истина);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Характеристики");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.Характеристики.Шрифт, , , Истина));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НазначаетсяИРаспределяетсяПоДолеСтоимости()
	Возврат ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости");
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СкладыватьИзЦенКомплектующих()
	Возврат ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих");
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.СпособРасчетаЦеныНабора = НазначаетсяИРаспределяетсяПоДолеСтоимости() Тогда
		ВидимостьДолиСтоимости = Истина;
	Иначе
		ВидимостьДолиСтоимости = Ложь;
	КонецЕсли;
	ВидимостьХарактеристик = (Форма.РежимРаботы <> РежимРаботыРедактированиеСостава() И Форма.ИспользоватьХарактеристики);
	
	Если Форма.РежимРаботы = РежимРаботыИзФормыНоменклатуры() Тогда
		Форма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	Иначе
		Форма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ЗаписатьИЗакрыть",				
		"Видимость", 
		НЕ Форма.РежимРаботы = РежимРаботыИзФормыНоменклатуры()); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаКопирование",				
		"Видимость", 
		Форма.РежимРаботы = РежимРаботыИзФормыНоменклатуры()); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаНастройкиНабора",				
		"Видимость", 
		Форма.РежимРаботы = РежимРаботыИзФормыНоменклатуры()); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаХарактеристики",			
		"Видимость", 
		ВидимостьХарактеристик); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СоставНабораДоляСтоимости",		
		"Видимость", 
		ВидимостьДолиСтоимости);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаКоличествоНабор",			
		"Видимость", 
		Форма.РежимРаботы = РежимРаботыРедактированиеСостава()); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"Цена",			
		"Видимость", 
		Форма.СпособРасчетаЦеныНабора <> СкладыватьИзЦенКомплектующих()); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СоставНабора",					
		"ТолькоПросмотр", 
		Форма.РежимРаботы = РежимРаботыВыборХарактеристики());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаСмещение",				
		"Доступность", 
		Форма.РежимРаботы = РежимРаботыРедактированиеСостава());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"КоманднаяПанельХарактеристики",	
		"Видимость", 
		НЕ Форма.РежимРаботы = РежимРаботыВыборХарактеристики());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"КоманднаяПанельСоставНабора", 	
		"Видимость", 
		НЕ Форма.РежимРаботы = РежимРаботыВыборХарактеристики());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СоставНабораИзменить", 			
		"Видимость", 
		НЕ Форма.РежимРаботы = РежимРаботыВыборХарактеристики());
	
	Если Форма.РежимРаботы = РежимРаботыВыборХарактеристики() Тогда
		ЗаголовокВыбрать = НСтр("ru = 'Выбрать'");
		Если Элементы.ЗаписатьИЗакрыть.Заголовок <> ЗаголовокВыбрать Тогда
			Элементы.ЗаписатьИЗакрыть.Заголовок = ЗаголовокВыбрать;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РежимРаботы = РежимРаботыРедактированиеСостава() Тогда
		ИзменяемыеЭлементы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("СоставНабораНоменклатура,СоставНабораХарактеристика,СоставНабораЕдиницаИзмерения");
		Для каждого ИмяЭлемента Из ИзменяемыеЭлементы Цикл
			Если Форма.Количество > 1 Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					ИмяЭлемента, 
					"ОтображениеПредупрежденияПриРедактировании", 
					ОтображениеПредупрежденияПриРедактировании.Отображать);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					ИмяЭлемента, 
					"ОтображениеПредупрежденияПриРедактировании", 
					ОтображениеПредупрежденияПриРедактировании.НеОтображать);
			КонецЕсли; 
		КонецЦикла;
		Если Форма.СоставИзменен Тогда
			ТекстПредупреждения = НСтр("ru = 'Изменение количества экземпляров наборов приведет к сбросу ручных изменений'");
		Иначе
			ТекстПредупреждения = "";
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"Количество", 
			"ПредупреждениеПриРедактировании", 
			ТекстПредупреждения);
		Если ПустаяСтрока(ТекстПредупреждения) Тогда
			ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Иначе
			ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"Количество", 
			"ОтображениеПредупрежденияПриРедактировании", 
			ОтображениеПредупреждения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НоваяХарактеристикаНабора",
		"ТолькоПросмотр", 
		НЕ Форма.ИспользоватьХарактеристики); 
	Если Форма.ИспользоватьХарактеристики Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"НоваяХарактеристикаНабора",	
			"ПодсказкаВвода", 
			"");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"НоваяХарактеристикаНабора",	
			"ПодсказкаВвода", 
			НСтр("ru = '<Не используется>'"));
	КонецЕсли;
		
	Если Форма.РежимРаботы = РежимРаботыИзФормыНоменклатуры() И Форма.Наборы.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаборы;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСостав;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.Состав.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		Элементы.ЗаголовокХарактеристики.Шрифт = Новый Шрифт(Новый Шрифт, , , , , , , 125);
		Элементы.ЗаголовокСостав.Шрифт = Новый Шрифт(Новый Шрифт, , , , , , , 125);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборСтрок(СоставНабора, ТекущаяХарактеристика)
	
	Для каждого Стр Из СоставНабора Цикл
		Если ТекущаяХарактеристика=Неопределено Тогда
			Отображать = Стр.Общий;
		ИначеЕсли ТекущаяХарактеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка") Тогда
			Отображать = (ТекущаяХарактеристика=Стр.ХарактеристикаНабора И НЕ Стр.Общий);
		Иначе
			Отображать = (ТекущаяХарактеристика=Стр.ХарактеристикаНабора ИЛИ Стр.Общий);
		КонецЕсли;
		Если Стр.Отображать<>Отображать Тогда
			Стр.Отображать = Отображать;
		КонецЕсли; 
	КонецЦикла; 		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставНабора()
	
	Характеристики.Очистить();
	СоставНабора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураНабора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ НоменклатураИХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	3
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Недействителен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	3
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).КатегорияНоменклатуры
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИХарактеристики.Порядок КАК ПорядокХарактеристик,
	|	НоменклатураИХарактеристики.Характеристика КАК ХарактеристикаНабора,
	|	НоменклатураИХарактеристики.Характеристика.Наименование КАК ПредставлениеХарактеристикиНабора,
	|	ЕСТЬNULL(СоставНаборов.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ЕСТЬNULL(СоставНаборов.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ЕСТЬNULL(СоставНаборов.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СоставНаборов.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(СоставНаборов.ДоляСтоимости, 0) КАК ДоляСтоимости,
	|	ЕСТЬNULL(СоставНаборов.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(СоставНаборов.Общий, ЛОЖЬ) КАК Общий
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставНаборов КАК СоставНаборов
	|		ПО НоменклатураИХарактеристики.Номенклатура = СоставНаборов.НоменклатураНабора
	|			И (НоменклатураИХарактеристики.Характеристика = СоставНаборов.ХарактеристикаНабора
	|					И НЕ СоставНаборов.Общий
	|				ИЛИ НоменклатураИХарактеристики.Характеристика = НЕОПРЕДЕЛЕНО
	|					И СоставНаборов.Общий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокХарактеристик,
	|	ПредставлениеХарактеристикиНабора,
	|	Порядок
	|ИТОГИ ПО
	|	ПорядокХарактеристик,
	|	ХарактеристикаНабора";
	ВыборкаПорядок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПорядок.Следующий() Цикл
		ВыборкаХарактеристики = ВыборкаПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаХарактеристики.Следующий() Цикл
			Если ВыборкаХарактеристики.ХарактеристикаНабора = Неопределено Тогда
				ЗаголовокХарактеристики = ЗаголовокОбщийСостав();
			ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаХарактеристики.ХарактеристикаНабора) Тогда
				ЗаголовокХарактеристики = ЗаголовокБезХарактеристики();
			Иначе
				ЗаголовокХарактеристики = Строка(ВыборкаХарактеристики.ХарактеристикаНабора);
			КонецЕсли;
			Если РежимРаботы <> РежимРаботыВыборХарактеристики() 
				ИЛИ ВыборкаХарактеристики.ХарактеристикаНабора <> Неопределено Тогда
				Характеристики.Добавить(ВыборкаХарактеристики.ХарактеристикаНабора, ЗаголовокХарактеристики, 
					НЕ ЗначениеЗаполнено(ВыборкаХарактеристики.ХарактеристикаНабора));
			КонецЕсли; 
			Выборка = ВыборкаХарактеристики.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Номенклатура = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрСостава = СоставНабора.Добавить();
				ЗаполнитьЗначенияСвойств(СтрСостава, Выборка);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруНабораВСтроках()
	
	Для каждого СтрокаТабличнойЧасти Из СоставНабора Цикл
		СтрокаТабличнойЧасти.НоменклатураНабора = НоваяНоменклатураНабора;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДубли()
	
	СтрокиКУдалению = Новый Массив;
	Для каждого Стр Из СоставНабора Цикл
		Если СтрокиКУдалению.Найти(Стр)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", Стр.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Стр.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", Стр.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("Общий", Стр.Общий);
		СтруктураПоиска.Вставить("ХарактеристикаНабора", Стр.ХарактеристикаНабора);
		НайденныеСтроки = СоставНабора.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество()<=1 Тогда
			Продолжить;
		КонецЕсли;
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ПолучитьИдентификатор()=Стр.ПолучитьИдентификатор() Тогда
				Продолжить;
			КонецЕсли; 
			Стр.Количество = Стр.Количество+НайденнаяСтрока.Количество;
			Стр.ДоляСтоимости = Стр.ДоляСтоимости+НайденнаяСтрока.ДоляСтоимости;
			СтрокиКУдалению.Добавить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого НайденнаяСтрока Из СтрокиКУдалению Цикл
		СоставНабора.Удалить(НайденнаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "ЕдиницаИзмерения, ИспользоватьСерииНоменклатуры, ИспользоватьХарактеристики, ИспользоватьПартии, ФиксированнаяСтоимость, ТипНоменклатуры");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДанные, ЗначенияРеквизитов, Истина);
	СтруктураДанные.Вставить("ТипНоменклатурыЗапас", ЗначенияРеквизитов.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Запас);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ЗначенияРеквизитов.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения()
	
	Если РежимРаботы = РежимРаботыИзФормыНоменклатуры() Тогда
		
		// Сохранение изменений состава и вызов основной формы
		СвернутьДубли();
		СохранитьИзмененияСервер();
		ОповеститьОбЗаписиСоставаНабора();
		
	Иначе
		
		// Сохранение изменений состава в форме документа
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("НоменклатураНабора", НоменклатураНабора);
		СтруктураВозврата.Вставить("ХарактеристикаНабора", ТекущаяХарактеристика);
		СтруктураВозврата.Вставить("Количество", Количество);
		СтруктураВозврата.Вставить("Цена", Цена);
		СтруктураВозврата.Вставить("СоставНабора", Новый Массив);
		Для каждого Стр Из СоставНабора Цикл
			СтруктураСтроки = Новый Структура("Номенклатура,Характеристика,Количество,ДоляСтоимости,ЕдиницаИзмерения,ФиксированнаяСтоимость,ТипНоменклатурыЗапас,ТипНоменклатурыУслуга");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр);
			СтруктураСтроки.Вставить("НоменклатураНабора", НоваяНоменклатураНабора);
			СтруктураСтроки.Вставить("ХарактеристикаНабора", НоваяХарактеристикаНабора);
			СтруктураВозврата.СоставНабора.Добавить(СтруктураСтроки);
		КонецЦикла;
		ДобавитьТипыНоменклатуры(СтруктураВозврата); 
		
		Оповестить(НаборыКлиент.ИмяСобытияИзменениеСоставаНабора(), СтруктураВозврата, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено));
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияСервер()
	
	Набор = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
	Набор.Отбор.НоменклатураНабора.Установить(НоменклатураНабора);
	Для каждого Стр Из СоставНабора Цикл
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Запись.НоменклатураНабора = НоменклатураНабора;
		Запись.Порядок = СоставНабора.Индекс(Стр);
	КонецЦикла; 
	Набор.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьТипыНоменклатуры(СтруктураВозврата)

	МассивНоменклатуры = Новый Массив;
	Для каждого Элемент Из СтруктураВозврата.СоставНабора Цикл
		Если ЗначениеЗаполнено(Элемент.Номенклатура) И МассивНоменклатуры.Найти(Элемент.Номенклатура)=Неопределено Тогда
			МассивНоменклатуры.Добавить(Элемент.Номенклатура);
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|				И НЕ Номенклатура.ФиксированнаяСтоимость
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФиксированнаяСтоимость
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
	ТипыНоменклатуры = Новый Соответствие;
	ФиксированнаяСтоимость = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыНоменклатуры.Вставить(Выборка.Ссылка, Выборка.ТипНоменклатуры);	
		ФиксированнаяСтоимость.Вставить(Выборка.Ссылка, Выборка.ФиксированнаяСтоимость);	
	КонецЦикла;
	
	Для каждого Элемент Из СтруктураВозврата.СоставНабора Цикл
		Элемент.Вставить("ТипНоменклатуры", ТипыНоменклатуры.Получить(Элемент.Номенклатура));
		Элемент.Вставить("ФиксированнаяСтоимость", ФиксированнаяСтоимость.Получить(Элемент.Номенклатура));
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОбщийСостав()
	
	Возврат НСтр("ru = 'Общий состав для всех характеристик'");	
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокБезХарактеристики()
	
	Возврат НСтр("ru = 'Без характеристики'");	
	
КонецФункции 

&НаКлиенте
Процедура ПередИзменениемСостава()
	
	Оповещение = Новый ОписаниеОповещения("ПередИзменениемСоставаЗавершение", ЭтотОбъект);
	ОкончаниеТекста = "."+Символы.ПС+НСтр("ru = 'Продолжить редактирование?'");
	ПоказатьВопрос(Оповещение, ТекстПредупрежденияИзмененияСостава()+ОкончаниеТекста, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередИзменениемСоставаЗавершение(Ответ, СтруктураСобытия) Экспорт
	
	Если Ответ<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	СброситьКоличествоНаборов();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьКоличествоНаборов()
	
	Количество = 1;
	ЗаполнитьНоменклатуруНабораВСтроках();
	НаборыКлиентСервер.УдалитьЭкземплярНабора(НоваяНоменклатураНабора, НоваяХарактеристикаНабора, , СоставНабора, , КоличествоДоИзменения, Количество);
	КоличествоДоИзменения = Количество;
	
	УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияИзмененияСостава()
	
	Возврат НСтр("ru = 'Количество экземпляров набора будет сброшено до одного. После внесения изменений можно заново установить количество наборов'");	
	
КонецФункции 

&НаСервере
Функция СоставИзменен()
	
	ТаблицаСостава = СоставНабора.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСостава", ТаблицаСостава);
	Запрос.УстановитьПараметр("НоменклатураНабора", НоменклатураНабора);
	Запрос.УстановитьПараметр("ХарактеристикаНабора", ТекущаяХарактеристика);
	Запрос.УстановитьПараметр("Количество", Количество);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСостава.Номенклатура КАК Номенклатура,
	|	ТаблицаСостава.Характеристика КАК Характеристика,
	|	ТаблицаСостава.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаСостава.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ИЛИ ТаблицаСостава.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
	|			ТОГДА ТаблицаСостава.ЕдиницаИзмерения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаСостава
	|ИЗ
	|	&ТаблицаСостава КАК ТаблицаСостава
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставНаборов.Номенклатура КАК Номенклатура,
	|	СоставНаборов.Характеристика КАК Характеристика,
	|	СУММА(СоставНаборов.Количество * ВЫБОР
	|			КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА СоставНаборов.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ * &Количество) КАК Количество
	|ПОМЕСТИТЬ СоставНабора
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &НоменклатураНабора
	|	И (СоставНаборов.ХарактеристикаНабора = &ХарактеристикаНабора
	|			ИЛИ СоставНаборов.Общий
	|				И &ХарактеристикаНабора <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.Номенклатура,
	|	СоставНаборов.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Количество КАК Количество
	|ПОМЕСТИТЬ Разница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСостава.Номенклатура КАК Номенклатура,
	|		ТаблицаСостава.Характеристика КАК Характеристика,
	|		СУММА(ТаблицаСостава.Количество * ВЫБОР
	|				КОГДА ТаблицаСостава.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|					ТОГДА ТаблицаСостава.ЕдиницаИзмерения.Коэффициент
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Количество
	|	ИЗ
	|		ТаблицаСостава КАК ТаблицаСостава
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаСостава.Номенклатура,
	|		ТаблицаСостава.Характеристика) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставНабора.Номенклатура,
	|	СоставНабора.Характеристика,
	|	-СоставНабора.Количество
	|ИЗ
	|	СоставНабора КАК СоставНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Разница.Номенклатура КАК Номенклатура,
	|	Разница.Характеристика КАК Характеристика,
	|	СУММА(Разница.Количество) КАК Количество
	|ИЗ
	|	Разница КАК Разница
	|
	|СГРУППИРОВАТЬ ПО
	|	Разница.Номенклатура,
	|	Разница.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(Разница.Количество) <> 0";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанные()
	
	ЗаполнитьСоставНабора();
	ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ОбновитьОтборСтрок(СоставНабора, ТекущаяХарактеристика);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Отображать", Истина);
	Элементы.СоставНабора.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
	//Характеристики
	Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
		ЗаполнитьПризнакиИспользованияХарактеристик()
	КонецЕсли;
	//Конец Характеристики
	
КонецПроцедуры

// Перемещает выделенные в таблице строки на одну позицию вверх/вниз.
//
// Параметры:
//  Сдвиг	 - Число [-1;1] - Задает направление перемещения строк.
//                            Положительное значение означает, что строка будет передвинута ближе к концу таблицы (вниз),
//                            отрицательное - ближе к началу (вверх).
//
&НаСервере
Процедура ПереместитьСтрокуТаблицы(Направление)
	
	Если Элементы.СоставНабора.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление > 0 Тогда
		КрайняяСтрокаИдентификатор = Элементы.СоставНабора.ВыделенныеСтроки[Элементы.СоставНабора.ВыделенныеСтроки.ВГраница()];
	Иначе
		КрайняяСтрокаИдентификатор = Элементы.СоставНабора.ВыделенныеСтроки[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	Если НЕ ТекущаяХарактеристика=Неопределено Тогда
		СтруктураОтбора.Вставить("ХарактеристикаНабора", ТекущаяХарактеристика);
		СтруктураОтбора.Вставить("Общий", Ложь);
	Иначе
		СтруктураОтбора.Вставить("Общий", Истина);
	КонецЕсли; 
	Строки = СоставНабора.НайтиСтроки(СтруктураОтбора);
	
	Если Направление > 0 Тогда
		Итератор = Элементы.СоставНабора.ВыделенныеСтроки.ВГраница();
		Пока Итератор >= 0 Цикл
			ИдентификаторСтроки = Элементы.СоставНабора.ВыделенныеСтроки[Итератор];
			Строка = СоставНабора.НайтиПоИдентификатору(ИдентификаторСтроки);
			ИндексВМассиве = Строки.Найти(Строка);
			Если ИндексВМассиве=Неопределено ИЛИ (ИндексВМассиве+Направление>=Строки.Количество()) Тогда
				Итератор = Итератор - 1;
				Продолжить;
			КонецЕсли; 
			ИндексСтроки = СоставНабора.Индекс(Строка);
			ИндексСмещения = СоставНабора.Индекс(Строки[ИндексВМассиве+Направление]);
			СоставНабора.Сдвинуть(ИндексСтроки, ИндексСмещения - ИндексСтроки);
			Итератор = Итератор - 1;
		КонецЦикла;
	Иначе
		Для каждого ИдентификаторСтроки Из Элементы.СоставНабора.ВыделенныеСтроки Цикл
			Строка = СоставНабора.НайтиПоИдентификатору(ИдентификаторСтроки);
			ИндексВМассиве = Строки.Найти(Строка);
			Если ИндексВМассиве=Неопределено ИЛИ (ИндексВМассиве+Направление<0) Тогда
				Продолжить;
			КонецЕсли; 
			ИндексСтроки = СоставНабора.Индекс(Строка);
			ИндексСмещения = СоставНабора.Индекс(Строки[ИндексВМассиве+Направление]);
			СоставНабора.Сдвинуть(ИндексСтроки, ИндексСмещения - ИндексСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьОтборСтрок(СоставНабора, ТекущаяХарактеристика);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСостав()
	
	СоставНабора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(НоваяНоменклатураНабора) Тогда
		Возврат;
	КонецЕсли; 
	
	Элементы.НоваяНоменклатураНабора.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.НоваяХарактеристикаНабора.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
	НовыйСостав = НаборыСервер.СоставНабора(НоваяНоменклатураНабора, НоваяХарактеристикаНабора);
	Для каждого СтрокаТабличнойЧасти Из НовыйСостав Цикл
		НоваяСтрока = СоставНабора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ХарактеристикаНабора = НоваяХарактеристикаНабора;
		НоваяСтрока.НоменклатураНабора = НоваяНоменклатураНабора;
		НоваяСтрока.Количество = НоваяСтрока.Количество*Количество;
	КонецЦикла;
	
	//Характеристики
	Если РежимРаботы <> РежимРаботыИзФормыНоменклатуры() Тогда
		ЗаполнитьПризнакиИспользованияХарактеристик()
	КонецЕсли;
	//Конец Характеристики
	
	ИспользоватьХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяНоменклатураНабора, "ИспользоватьХарактеристики");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ХарактеристикиНабора(Номенклатура, Текст)
	
	СтруктураПараметров = Новый Структура();
	Если ПустаяСтрока(Текст) Тогда
		СтруктураПараметров.Вставить("СтрокаПоиска", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СтрокаПоиска", Текст);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Отбор", Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец", Номенклатура);
	Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

&НаСервере
// Обновляет условное оформление колонки "Характеристика" для формы Записи
// Форма - Форма объекта для условного оформления
// СоответствиеИменТабличныхЧастей - Соответствие Имя Табличной части -> Имя колонки табличной части
Процедура ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(Форма)
	
	НаименованиеПоля = "СоставНабораХарактеристика";
	ЗначениеПоиска = Форма.Элементы.Найти(НаименованиеПоля);
	
	Если НЕ ЗначениеПоиска = Неопределено Тогда
		ИмяПоляПроверятьЗаполнениеХарактеристики = ЗначениеПоиска.Родитель.ПутьКДанным + ".ПроверятьЗаполнениеХарактеристики";
		ИмяПоляИспользоватьХарактеристики = ЗначениеПоиска.Родитель.ПутьКДанным+".ИспользоватьХарактеристики";
		ИмяПоляХарактеристики = НаименованиеПоля; 
		
		НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляИспользоватьХарактеристики, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
		
		Если РежимРаботы <> РежимРаботыВыборХарактеристики() Тогда
			НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ИмяПоляПроверятьЗаполнениеХарактеристики, Истина, ВидСравненияКомпоновкиДанных.Равно);
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
			
			НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ЗначениеПоиска.Родитель.ПутьКДанным+".Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.НеРавно);
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяПоляХарактеристики);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признаки использования характеристик на основании которых будет строится условное оформление
//
&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка КАК Номенклатура
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы";
	
	ТаблицаНоменклатурыДокумента = СоставНабора.Выгрузить(,"Номенклатура, Характеристика");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента",ТаблицаНоменклатурыДокумента);
	ВыборкаПоХарактеристикам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоХарактеристикам.Следующий() Цикл
		
		ОтборСтрок = Новый Структура("Номенклатура",ВыборкаПоХарактеристикам.Номенклатура);
		
		МассивОтобранныхСтрок = СоставНабора.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаМассива Из МассивОтобранныхСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаМассива,ВыборкаПоХарактеристикам);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовФормы(ПризнакДоступности = Истина)
	
	Элементы.ЭтоНабор.ТолькоПросмотр = НЕ (ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"))
		И НЕ Весовой;
	
	Элементы.Состав.Доступность = ПризнакДоступности;
	Элементы.СпособРасчетаЦеныНабора.ТолькоПросмотр = НЕ ПризнакДоступности;
	Элементы.ВариантПечатиНабора.ТолькоПросмотр = НЕ ПризнакДоступности;
	
	Если Наборы.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаборы;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСостав;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаИспользованияНаборов()
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		Элементы.ЗаголовокСостав.Заголовок =  
			НСтр("ru = 'Состав набора (может содержать запасы и услуги):'");
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		Элементы.ЗаголовокСостав.Заголовок =  
			НСтр("ru = 'Состав набора (может содержать работы и услуги):'");
	Иначе 
		Элементы.ЗаголовокСостав.Заголовок = НРег("ru = 'Состав набора:'"); 
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Наборы доступны только для запасов и работ'");
		Элементы.Страницы.Доступность = Ложь;
		Элементы.ФормаКоманднаяПанель.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры
 
#Область ОткрытиеИзФормыНоменклатуры

&НаСервереБезКонтекста
Функция МожноИзменитьПризнакНабора(Номенклатура, ЭтоНабор)
	
	Возврат НаборыСервер.МожноИзменитьПризнакНабора(Номенклатура, ЭтоНабор);
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииРеквизитовНабора()
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", НоменклатураНабора);
	СтруктураПолей.Вставить("ЭтоНабор", ЭтоНабор);
	СтруктураПолей.Вставить("ВариантПечатиНабора", ВариантПечатиНабора);
	СтруктураПолей.Вставить("СпособРасчетаЦеныНабора", СпособРасчетаЦеныНабора);
	
	Оповестить(НаборыКлиент.ИмяСобытияИзменениеРеквизитовНабора(), СтруктураПолей, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбЗаписиСоставаНабора()
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить(НаборыКлиент.ИмяСобытияЗаписанСоставаНабора(), НоменклатураНабора, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииСоставаНабора()
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить(НаборыКлиент.ИмяСобытияИзменениеСоставаНабора(), НоменклатураНабора, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованиеВНаборах()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураНабора);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.НоменклатураНабора
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНабора";
	Наборы.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НоменклатураНабора"));
	Элементы.Наборы.ВысотаВСтрокахТаблицы = ?(Наборы.Количество()>0, Наборы.Количество(), 1); 
	
КонецПроцедуры

#КонецОбласти

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыИзФормыНоменклатуры()
	
	// Форма открыта через навигационную панель карточки номенклатуры
	Возврат "ИзФормыНоменклатуры";
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыВыборХарактеристики()
	
	// Форма используется для выбора характеристики набора
	Возврат "ВыборХарактеристики";
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыРедактированиеСостава()
	
	// Форма используется редактирования состава экземпляра набора в документе
	Возврат "РедактированиеСостава";
	
КонецФункции 

#КонецОбласти 

#КонецОбласти
