#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВидЦенКонтрагента.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Код", 		НСтр("ru = 'Код'"), 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 	НСтр("ru = 'Штрихкод'"), 	ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 	НСтр("ru = 'Артикул'"), 		ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование",НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное",НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыЦенКонтрагентов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидЦенКонтрагента", НСтр("ru = 'Вид цен контрагента (наименование)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , Ложь);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", НСтр("ru = 'Цена'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Дата", НСтр("ru = 'Дата (начало использования)'"), ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	ОбновлятьДанные				= НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ВидЦенКонтрагента = Неопределено;
	НастройкиЗагрузкиДанных.Свойство("ВидЦенКонтрагента", ВидЦенКонтрагента);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// ВидыЦенКонтрагентов передаются из формы вызова
		СтрокаТаблицыФормы.ВидЦенКонтрагента = ВидЦенКонтрагента;
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если НоменклатураСопоставлена Тогда
				
				// Характеристика по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.шт;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЕдиницаИзмерения", СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, НоменклатураСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные);
		
		// Дата
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.Дата, СтрокаТаблицыФормы.Дата_ВходящиеДанные);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы.Дата) Тогда
			
			СтрокаТаблицыФормы.Дата = НачалоДня(ТекущаяДата());
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.ВидЦенКонтрагента)
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И СтрокаТаблицыФормы.Цена > 0
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.ЕдиницаИзмерения)
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Дата)
		;
	
	Если СтрокаТаблицыФормы[ИмяСлужебногоПоля] Тогда
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрокаТаблицыФормы.Дата));
		НаборЗаписей.Отбор.ВидЦенКонтрагента.Установить(СтрокаТаблицыФормы.ВидЦенКонтрагента);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицыФормы.Характеристика);
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		СтрокаТаблицыФормы._СтрокаСопоставлена = (НаборЗаписей.Количество() > 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Автор 						= Пользователи.АвторизованныйПользователь();
	ОбновлятьСуществующие		= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьНовые 				= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных	= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции	= 0;
	ТранзакцияОткрыта			= Ложь;
	ВидыЦенИспользуемые			= Новый Массив;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
				РабочийНомерОчередиЦен = ЦенообразованиеСервер.УстановитьРабочийНомерОчередиЦен();
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьНовые);
			
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции		= КоличествоЗаписейТранзакции + 1;
				
				НаборЗаписей 					= РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрокаТаблицы.Дата), Истина);
				НаборЗаписей.Отбор.ВидЦенКонтрагента.Установить(СтрокаТаблицы.ВидЦенКонтрагента, Истина);
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура, Истина);
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика, Истина);
					
				КонецЕсли;
				
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() <> 0 Тогда
					
					НаборЗаписей.Очистить();
					
				КонецЕсли;
				
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
				
				СтрокаНабора.Период					= НачалоДня(СтрокаТаблицы.Дата);
				СтрокаНабора.Актуальность			= Истина;
				СтрокаНабора.Автор					= Автор;
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РабочийНомерОчередиЦен", РабочийНомерОчередиЦен);
				НаборЗаписей.Записать(Истина);
				
				Если ВидыЦенИспользуемые.Найти(СтрокаТаблицы.ВидЦенКонтрагента) = Неопределено Тогда
					
					ВидыЦенИспользуемые.Добавить(СтрокаТаблицы.ВидЦенКонтрагента);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексТекущейСтроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейСтроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ОКР(ИндексТекущейСтроки * 100 / РазмерТаблицыДанных, 1), ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые);
				ЗафиксироватьТранзакцию();
				
				ВидыЦенИспользуемые.Очистить();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые);
			ЗафиксироватьТранзакцию();
			
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЦеныНоменклатуры, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПризнакАктуальностиРасчетныхВидовЦен(ВидыЦенИспользуемые)
	
	Если ВидыЦенИспользуемые.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЦенИспользуемые", ВидыЦенИспользуемые);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|ГДЕ
	|	СвязиВидовЦенСлужебный.ВидЦенБазовый В(&ВидыЦенИспользуемые)
	|		ИЛИ СвязиВидовЦенСлужебный.ВидЦенБазовыйЦеновойГруппы В(&ВидыЦенИспользуемые)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.ВидЦенРасчетный.ПолучитьОбъект();
		СправочникОбъект.ЦеныАктуальны = Ложь;
		
		// Если не отключить бизнес логику, то в очередь добавиться вся номенклатура
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Ложь, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли