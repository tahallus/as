#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус документа
//
// Параметры:
//  Документ             - ДокументСсылка.* - документ для которого требуется установить статус
//  Статус               - ПеречислениеСсылка.* - новый статус документа
//
Процедура УстановитьСтатусДокумента(Документ, Статус = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСтатус = ПолучитьСтатусДокумента(Документ);
	
	Если ЗначениеЗаполнено(Статус) Тогда
		НовыйСтатус = Статус;
	Иначе
		НовыйСтатус = ОпределитьСтатусДокумента(Документ);
	КонецЕсли;
	
	Если ТекущийСтатус <> НовыйСтатус Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Документ = Документ;
		Запись.Статус 	= НовыйСтатус;
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущий статус документа
//
// Параметры:
//  Документ    - ДокументСсылка.* - документ
//
// Возвращаемое значение:
//   Статус - ПеречислениеСсылка - основной статус документа
//
Функция ПолучитьСтатусДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыДокументов.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	СтатусыДокументов.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ВыборкаСтатуса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаСтатуса.Следующий() Тогда
		Возврат ВыборкаСтатуса.Статус;
	Иначе
		Возврат Перечисления.СтатусыПлатежногоПоручения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает статус документа, который необходимо установить
//
// Параметры:
//  Документ             - ДокументСсылка.* - документ для которого требуется определить статус
//
// Возвращаемое значение:
//   Статус - ПеречислениеСсылка - основной статус документа
//
Функция ОпределитьСтатусДокумента(Документ) Экспорт
	
	// РасходДСПлан, ПеремещениеДСПлан
	Если НЕ ЗначениеЗаполнено(Документ.ТипДенежныхСредств) ИЛИ Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		СтатусДокумента = Перечисления.СтатусыПлатежногоПоручения.НеТребуется;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА КАК НаличиеПлатежногоПоручения
			|ИЗ
			|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
			|ГДЕ
			|	ПлатежноеПоручение.ДокументОснование = &Документ
			|	И НЕ ПлатежноеПоручение.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПлатежноеПоручение.РасшифровкаПлатежа КАК ПлатежноеПоручениеРасшифровкаПлатежа
			|ГДЕ
			|	ПлатежноеПоручениеРасшифровкаПлатежа.ДокументПланирования = &Документ
			|	И НЕ ПлатежноеПоручениеРасшифровкаПлатежа.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			СтатусДокумента = Перечисления.СтатусыПлатежногоПоручения.НеСоздано;
		Иначе
			СтатусДокумента = Перечисления.СтатусыПлатежногоПоручения.Создано;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусДокумента;
	
КонецФункции

#КонецОбласти

#КонецЕсли