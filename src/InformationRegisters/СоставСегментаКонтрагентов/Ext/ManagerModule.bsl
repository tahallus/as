
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает состав выбранного сегмента
//
// Параметры:
//  Сегмент			 - 	СправочникСсылка.СегментыКонтрагентов - сегмент, состав которого необходимо получить
//  СпособДобавления - 	ПеречисленияСсылка.СпособыДобавленияВСегмент - способ добавления в сегмент
// 
// Возвращаемое значение:
//  Контрагенты - Массив - массив контрагентов сегмента
//
Функция СоставВыбранногоСегмента(Сегмент, СпособДобавления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставСегментаКонтрагентов.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СоставСегментаКонтрагентов КАК СоставСегментаКонтрагентов
	|ГДЕ
	|	СоставСегментаКонтрагентов.Сегмент В(&Сегмент)
	|	И (&ОтборПоСпособуДобавления
	|				И СоставСегментаКонтрагентов.СпособДобавления = &СпособДобавления
	|			ИЛИ НЕ &ОтборПоСпособуДобавления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	СпособДобавленияВСегмент = Неопределено;
	
	Если СпособДобавления = Неопределено Тогда
		СпособДобавленияВСегмент = Перечисления.СпособыДобавленияВСегмент.ПустаяСсылка();
	Иначе
		СпособДобавленияВСегмент = СпособДобавления;
	КонецЕсли;
	Запрос.УстановитьПараметр("Сегмент", Сегмент);	
	Запрос.УстановитьПараметр("ОтборПоСпособуДобавления", ЗначениеЗаполнено(СпособДобавленияВСегмент));
	Запрос.УстановитьПараметр("СпособДобавления", СпособДобавления);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Контрагент");
	
	Возврат Результат.ВыгрузитьКолонку("Контрагент");
	
КонецФункции

// Процедура обновляет состав выбранного сегмента по правилам
//
// Параметры:
//  Сегмент					 - СправочникСсылка.СегментыКонтрагентов - сегмент для обновления
//  СхемаКомпоновкиДанных	 - 	СхемаКомпоновкиДанных - схема компоновки данных сегмента
//
Процедура ОбновитьСоставВыбранногоСегментаПоПравилам(Сегмент, СхемаКомпоновкиДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Сегмент.СхемаКомпоновкиДанных.Получить();	
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаСегмента = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСегмента);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	НаборЗаписей = РегистрыСведений.СоставСегментаКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.СпособДобавления.Установить(Перечисления.СпособыДобавленияВСегмент.ПоПравилам);
	
	Для Каждого Контрагент Из ТаблицаСегмента Цикл
		СтрокаКонтрагент = НаборЗаписей.Добавить();
		СтрокаКонтрагент.Сегмент = Сегмент;
		СтрокаКонтрагент.Контрагент = Контрагент.СлужебныеРеквизитыСсылка;
		СтрокаКонтрагент.СпособДобавления = Перечисления.СпособыДобавленияВСегмент.ПоПравилам;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	ФормированиеСегмента = РегистрыСведений.ФормированиеСегментовКонтрагентов.СоздатьНаборЗаписей();
	ФормированиеСегмента.Отбор.Сегмент.Установить(Сегмент);
	НоваяСтрокаФормирования = ФормированиеСегмента.Добавить();
	НоваяСтрокаФормирования.Сегмент = Сегмент;
	НоваяСтрокаФормирования.ДатаПоследнегоФормирования = ТекущаяДатаСеанса();
	
	ФормированиеСегмента.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Процедура обновляет состав выбранного сегмента вручную
//
// Параметры:
//  Сегмент			 - 	СправочникСсылка.СегментыКонтрагентов - сегмент для обновления
//  СоставСегмента	 - 	Массив - контрагенты, для добавления в сегмент
//
Процедура ОбновитьСоставВыбранногоСегментаВручную(Сегмент, СоставСегмента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СоставСегментаКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
	НаборЗаписей.Отбор.СпособДобавления.Установить(Перечисления.СпособыДобавленияВСегмент.Вручную);
	
	Для Каждого Контрагент Из СоставСегмента Цикл
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКонтрагент = НаборЗаписей.Добавить();
		СтрокаКонтрагент.Сегмент = Сегмент;
		СтрокаКонтрагент.Контрагент = Контрагент;
		СтрокаКонтрагент.СпособДобавления = Перечисления.СпособыДобавленияВСегмент.Вручную;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли