#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Записано Тогда
		Запись.ОбменНаСервере          = Истина;
		ОбменНаСервере                 = 1;
		Запись.ИдентификаторСоединения = "";
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Элементы.Подсказка.Видимость        = Не РазделениеВключено;
	Элементы.ГруппаРасписание.Видимость = Не РазделениеВключено;
	
	РежимРаботыСТестовымКонтуромИСМП = ПолучитьФункциональнуюОпцию("РежимРаботыСТестовымКонтуромИСМП");
	
	КомандаПолучитьИдентификаторСоединенияЧерезИнтернетПоддержкуДоступна = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСЦРПТ")
		Или РежимРаботыСТестовымКонтуромИСМП Тогда
		КомандаПолучитьИдентификаторСоединенияЧерезИнтернетПоддержкуДоступна = Истина;
	КонецЕсли;
	
	Элементы.ПолучитьИдентификаторСоединенияЧерезИнтернетПоддержку.Видимость = КомандаПолучитьИдентификаторСоединенияЧерезИнтернетПоддержкуДоступна;
	
	Если КомандаПолучитьИдентификаторСоединенияЧерезИнтернетПоддержкуДоступна Тогда
		ТребуетсяПодключениеИнтернетПоддержки = ТребуетсяПодключениеИнтернетПоддержки();
	КонецЕсли;
	
	Если РежимРаботыСТестовымКонтуромИСМП Тогда
		Элементы.АдресСУЗ.СписокВыбора.Добавить("suz.sandbox.crpt.tech");
	Иначе
		Элементы.АдресСУЗ.СписокВыбора.Добавить("suzgrid.crpt.ru");
		Элементы.АдресСУЗ.СписокВыбора.Добавить("suz2.crpt.ru");
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не Записано
		И Не ЗначениеЗаполнено(Запись.РабочееМесто) Тогда
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Запись.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Адрес)
		И ЗначениеЗаполнено(Запись.Порт)
		И (ЗначениеЗаполнено(Запись.Токен)
			Или ЗначениеЗаполнено(Запись.ИдентификаторСоединения)) Тогда
		
		СброситьПроверкуПодключения(3);
		
	Иначе
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаНеПодключенияНеВыполнялась;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Записано = Истина;
	
	Запись.РабочееМесто = ТекущийОбъект.РабочееМесто;
	
	КлючЗаписиКеш = Новый Структура("Организация, ПроизводственныйОбъект");
	ЗаполнитьЗначенияСвойств(КлючЗаписиКеш, ТекущийОбъект);
	
	ОбменНаСервере = ТекущийОбъект.ОбменНаСервере;
	
	Если Не ОбменНаСервере Тогда
		ОбменПоРасписанию = ТекущийОбъект.ОбменНаКлиентеПоРасписанию;
		РасписаниеОбмена  = ТекущийОбъект.ОбменНаКлиентеРасписание.Получить();
	Иначе
		ОбменПоРасписанию = Ложь;
		РасписаниеОбмена  = Неопределено;
	КонецЕсли;
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОбменНаСервере = ОбменНаСервере;
	
	Если ОбменНаСервере Тогда
		ТекущийОбъект.ОбменНаКлиентеПоРасписанию = Ложь;
		ТекущийОбъект.ОбменНаКлиентеРасписание   = Неопределено;
		ТекущийОбъект.РабочееМесто               = Неопределено;
	Иначе
		ТекущийОбъект.ОбменНаКлиентеПоРасписанию = ОбменПоРасписанию;
		ТекущийОбъект.ОбменНаКлиентеРасписание   = Новый ХранилищеЗначения(РасписаниеОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КлючЗаписиКеш = Новый Структура("Организация, ПроизводственныйОбъект");
	ЗаполнитьЗначенияСвойств(КлючЗаписиКеш, Запись);
	
	Записано = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТребуетсяПроверкаНаДубли = Ложь;
	Если КлючЗаписиКеш = Неопределено Тогда
		ТребуетсяПроверкаНаДубли = Истина;
	Иначе
		Для Каждого КлючИЗначение Из КлючЗаписиКеш Цикл
			Если Запись[КлючИЗначение.Ключ]<>КлючИЗначение.Значение Тогда
				ТребуетсяПроверкаНаДубли = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяПроверкаНаДубли
		И ЗначениеЗаполнено(Запись.Организация)
		И ЗначениеЗаполнено(Запись.ПроизводственныйОбъект) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ
		|ГДЕ
		|	НастройкиОбменаСУЗ.Организация = &Организация
		|	И НастройкиОбменаСУЗ.ПроизводственныйОбъект = &ПроизводственныйОбъект";
		
		Запрос.УстановитьПараметр("Организация",            Запись.Организация);
		Запрос.УстановитьПараметр("ПроизводственныйОбъект", Запись.ПроизводственныйОбъект);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Настройка обмена для организации %1 и производственного объекта %2 уже существует'"),
					Запись.Организация,
					Запись.ПроизводственныйОбъект),,
				"Запись.ПроизводственныйОбъект",,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Токен)
		И Не ЗначениеЗаполнено(Запись.ИдентификаторСоединения) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить идентификатор соединения или токен'"),,
			"Запись.ИдентификаторСоединения",,
			Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ИдентификаторСоединения) Тогда
		Если ИспользуетсяПроизводственныйОбъект
			И Не ЗначениеЗаполнено(Запись.ПроизводственныйОбъект) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо заполнить производственный объект'"),,
				"Запись.ПроизводственныйОбъект",,
				Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.ПроизводственныйОбъектАдресСтрокой) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Необходимо заполнить адрес производственного объекта'"),,
				"Запись.ПроизводственныйОбъектАдресСтрокой",,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбменПоРасписаниюПриИзменении(Элемент)
	
	Если ОбменНаСервере = 1 Тогда
		
		ИзменитьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтотОбъект, РасписаниеОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСУЗПриИзменении(Элемент)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПортСУЗПриИзменении(Элемент)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторСоединенияПриИзменении(Элемент)
	
	ПриИзмененииИдентификатораСоединения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Токен) Тогда
		Запись.ИдентификаторСоединения = "";
	КонецЕсли;
	
	СброситьПроверкуПодключения();
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтанцияУправленияЗаказамиПриИзменении(Элемент)
	
	СтанцияУправленияЗаказамиПриИзмененииНаСервере();
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеПриИзменении(Элемент)
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменНаСервереПриИзменении(Элемент)
	
	ПриИзмененииВариантаПодключения(ЭтотОбъект);
	
	Если ОбменНаСервере = 1 Тогда
		
		Если ОбменНаКлиентеРасписаниеКеш <> РасписаниеОбмена
			И РасписаниеОбмена <> Неопределено Тогда
			
			ОбменНаКлиентеПоРасписаниюКеш = ОбменПоРасписанию;
			ОбменНаКлиентеРасписаниеКеш   = РасписаниеОбмена;
			
		КонецЕсли;
		
		ПрочитатьРасписаниеОбменаНаСервере();
		
	Иначе
		
		Если ОбменНаКлиентеРасписаниеКеш <> Неопределено Тогда
			
			ОбменПоРасписанию = ОбменНаКлиентеПоРасписаниюКеш;
			РасписаниеОбмена  = ОбменНаКлиентеРасписаниеКеш;
			
			ОбменНаКлиентеПоРасписаниюКеш = Неопределено;
			ОбменНаКлиентеРасписаниеКеш =   Неопределено;
			
		КонецЕсли;
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтотОбъект, РасписаниеОбмена);
		
	КонецЕсли;
	
	СброситьПроверкуПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВыполняетсяПроверкаПодключенияКСУЗНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНетСвязиССУЗНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПодключениеНастроеноКорректноНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаГруппаПроверкаНеПодключенияНеВыполняласьНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальноеКоличествоКодовВЗаказеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.МаксимальноеКоличествоКодовВЗаказе) Тогда
		Если Запись.МаксимальноеКоличествоКодовВЗаказе > 300000 Тогда
			Запись.МаксимальноеКоличествоКодовВЗаказе = 300000;
		КонецЕсли;
		Если Запись.ПолучатьКодовЗаИтерацию > Запись.МаксимальноеКоличествоКодовВЗаказе Тогда
			Запись.ПолучатьКодовЗаИтерацию = Запись.МаксимальноеКоличествоКодовВЗаказе;
		КонецЕсли;
	Иначе
		Если Запись.ПолучатьКодовЗаИтерацию > 25000 Тогда
			Запись.ПолучатьКодовЗаИтерацию = 25000;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьКодовЗаИтерациюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.МаксимальноеКоличествоКодовВЗаказе) Тогда
		МаксимальноеКоличествоКодовВЗаказе = Запись.МаксимальноеКоличествоКодовВЗаказе;
	Иначе
		МаксимальноеКоличествоКодовВЗаказе = 25000;
	КонецЕсли;

	Если Запись.ПолучатьКодовЗаИтерацию > МаксимальноеКоличествоКодовВЗаказе Тогда
		Запись.ПолучатьКодовЗаИтерацию = МаксимальноеКоличествоКодовВЗаказе;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроизводственныйОбъектАдрес

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Запись.ПроизводственныйОбъектАдресСтрокой = ВыбранноеЗначение.Представление;
	КомментарийАдресаПроизводственногоОбъекта = ВыбранноеЗначение.Комментарий;
	Запись.ПроизводственныйОбъектАдрес        = ВыбранноеЗначение.КонтактнаяИнформация;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Запись.ПроизводственныйОбъектАдресСтрокой = "";
		КомментарийАдресаПроизводственногоОбъекта = "";
		Запись.ПроизводственныйОбъектАдрес        = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// структуры ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.
	Запись.ПроизводственныйОбъектАдресСтрокой = Текст;
	Запись.ПроизводственныйОбъектАдрес = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта, КомментарийАдресаПроизводственногоОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Запись.ПроизводственныйОбъектАдресСтрокой Тогда
		Запись.ПроизводственныйОбъектАдресСтрокой = Элемент.ТекстРедактирования;
		Запись.ПроизводственныйОбъектАдрес = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Запись.ПроизводственныйОбъектАдрес);
	ПараметрыОткрытия.Вставить("Представление",           Запись.ПроизводственныйОбъектАдресСтрокой);
	ПараметрыОткрытия.Вставить("Комментарий",             КомментарийАдресаПроизводственногоОбъекта);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Адрес объекта'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	Запись.ПроизводственныйОбъектАдресСтрокой = "";
	КомментарийАдресаПроизводственногоОбъекта = "";
	Запись.ПроизводственныйОбъектАдрес        = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлючАвторизации

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ДополнительныеПараметры)
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
		"ЗапроситьКлючСессииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПараметрыЗапроса = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(Запись);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Запись.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	Иначе
		ПроверитьПодключениеСУЗ(
			Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры),
			Запись.Таймаут,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	Запись   = Форма.Запись;
	
	ИспользуетсяТокен = ЗначениеЗаполнено(Запись.Токен);
	
	Элементы.Токен.АвтоОтметкаНезаполненного                              = Не ЗначениеЗаполнено(Запись.ИдентификаторСоединения);
	Элементы.Токен.ОтметкаНезаполненного                                  = Не ЗначениеЗаполнено(Запись.ИдентификаторСоединения);
	Элементы.ИдентификаторСоединения.АвтоОтметкаНезаполненного            = Не ИспользуетсяТокен;
	Элементы.ИдентификаторСоединения.ОтметкаНезаполненного                = Не ИспользуетсяТокен;
	Элементы.ПроизводственныйОбъект.АвтоОтметкаНезаполненного             = Не ИспользуетсяТокен;
	Элементы.ПроизводственныйОбъект.ОтметкаНезаполненного                 = Не ИспользуетсяТокен;
	Элементы.ПроизводственныйОбъектАдресСтрокой.АвтоОтметкаНезаполненного = Не ИспользуетсяТокен;
	Элементы.ПроизводственныйОбъектАдресСтрокой.ОтметкаНезаполненного     = Не ИспользуетсяТокен;
	
	Элементы.Токен.ОбновитьТекстРедактирования();
	Элементы.ИдентификаторСоединения.ОбновитьТекстРедактирования();
	Элементы.ПроизводственныйОбъект.ОбновитьТекстРедактирования();
	Элементы.ПроизводственныйОбъектАдресСтрокой.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ЦветаСтиляКлиент = Новый Структура;
	ЦветаСтиляКлиент.Вставить("ЦветГиперссылкиГосИС",    ЦветаСтиля.ЦветГиперссылкиГосИС);
	ЦветаСтиляКлиент.Вставить("ЦветТекстаПроблемаГосИС", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	ИспользуетсяПроизводственныйОбъект = Истина;
	ИнтеграцияИСМППереопределяемый.ПриОпределенииИспользованияПроизводственногоОбъекта(ИспользуетсяПроизводственныйОбъект);
	Элементы.ПроизводственныйОбъект.Видимость = ИспользуетсяПроизводственныйОбъект;
	
	ПриИзмененииВариантаПодключения(ЭтотОбъект);
	
	Если ОбменНаСервере Тогда
		
		ПрочитатьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтотОбъект, РасписаниеОбмена);
		
	КонецЕсли;
	
	Элементы.ГруппаРасписание.ТолькоПросмотр = ТолькоПросмотр;
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВариантаПодключения(Форма)
	
	Если Форма.ОбменНаСервере = 0 Тогда
		Форма.Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подключение будет осуществляться с компьютера пользователя'"));
	ИначеЕсли Форма.ОбменНаСервере = 1 И Форма.ИнформационнаяБазаФайловая Тогда
		Форма.Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подключение будет осуществляться с компьютера пользователя (файловый вариант)'"));
	ИначеЕсли Форма.ОбменНаСервере = 1 И Не Форма.ИнформационнаяБазаФайловая Тогда
		Форма.Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подключение будет осуществляться с компьютера,
			           |на котором установлен сервер 1С:Предприятия (клиент-сервер)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуПоискаРегламентногоЗадания()
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ИС МП'"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП,,
		НСтр("ru = 'Не найдено регламентное задание обмена с ИС МП'"));
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеОбменаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхИСМП");
	
	ЗаданияОбмена = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если ЗаданияОбмена.Количество() <> 1 Тогда
		ЗаписатьОшибкуПоискаРегламентногоЗадания();
		ЗаданиеОбмена     = Неопределено;
		РасписаниеОбмена  = Неопределено;
		ОбменПоРасписанию = Ложь;
	Иначе
		ЗаданиеОбмена     = ЗаданияОбмена[0];
		РасписаниеОбмена  = ЗаданиеОбмена.Расписание;
		ОбменПоРасписанию = ЗаданиеОбмена.Использование;
	КонецЕсли;
	
	Элементы.ОтправкаПолучениеДанныхИСМП.Доступность = ОбменПоРасписанию;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОбмена, Элементы.ОтправкаПолучениеДанныхИСМП);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеОбменаНаСервере()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхИСМП");
	
	ЗаданияОбмена = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если ЗаданияОбмена.Количество() <> 1 Тогда
		ЗаписатьОшибкуПоискаРегламентногоЗадания();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не найдено регламентное задание обмена с ИС МП'"));
		ОбменПоРасписанию = Ложь;
	Иначе
		Если ОбменПоРасписанию Тогда
			КонстантаИмя = "ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП";
			КонстантаМенеджер = Константы[КонстантаИмя];
			Если КонстантаМенеджер.Получить() <> ОбменПоРасписанию Тогда
				КонстантаМенеджер.Установить(ОбменПоРасписанию);
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхИСМП", ОбменПоРасписанию);
		ИзменитьРасписаниеЗадания("ОтправкаПолучениеДанныхИСМП", РасписаниеОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания;
	
	ИнтеграцияИС.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, ОбменПоРасписанию);
	Элемент.Заголовок   = ТекстРасписания;
	Элемент.Доступность = ОбменПоРасписанию;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьРасписаниеОбменаНаКлиенте(Форма, НовоеРасписание)
	
	Если НовоеРасписание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Форма.ОбменПоРасписанию Тогда
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(НовоеРасписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(НовоеРасписание));
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ОтправкаПолучениеДанныхИСМП.Доступность = Форма.ОбменПоРасписанию;
	Форма.Элементы.ОтправкаПолучениеДанныхИСМП.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПроверкуПодключения(ИнтервалОжидания = 1)
	
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.СтанцияУправленияЗаказами) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Порт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Таймаут) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Токен)
		И Не ЗначениеЗаполнено(Запись.ИдентификаторСоединения) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключениеНастроеноКорректно = Ложь;
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ВыполняетсяПроверкаПодключенияКСУЗ;
	
	ПодключитьОбработчикОжидания("ПроверкаПодключениеКСУЗОбработчикОжидания", ИнтервалОжидания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодключениеКСУЗОбработчикОжидания()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Ложь);
	
	ПроверитьПодключениеСУЗ(
		Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеСУЗ(ОписаниеОповещения, Таймаут, ВызовПослеАвторизации = Ложь)
	
	ОчиститьСообщения();
	
	Если ОбменНаСервере = 1 Тогда
		Результат = ПроверитьПодключениеСУЗНаСервере();
	Иначе
		Результат = ПроверитьПодключениеСУЗНаКлиенте();
	КонецЕсли;
	
	Если Результат.ТребуетсяОбновлениеКлючаСессии
		И ВызовПослеАвторизации Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПодключениеСУЗНаКлиенте()
	
	Возврат Новый Структура("ТекстОшибки, ТребуетсяОбновлениеКлючаСессии", НСтр("ru = 'Недоступно'"), Ложь);
	
КонецФункции

&НаСервере
Функция ПроверитьПодключениеСУЗНаСервере()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен");
	ВозвращаемоеЗначение.Вставить("ОтветПолучен");
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ПараметрыСУЗ = ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
	ЗаполнитьЗначенияСвойств(ПараметрыСУЗ, Запись);
	ПараметрыСУЗ.Сервер        = Запись.Адрес;
	
	ДанныеНастройкиСУЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Запись.СтанцияУправленияЗаказами, "ФорматОбмена, Идентификатор", Истина);
	ПараметрыСУЗ.ФорматОбмена  = ДанныеНастройкиСУЗ.ФорматОбмена;
	ПараметрыСУЗ.Идентификатор = ДанныеНастройкиСУЗ.Идентификатор;
	
	Если ПараметрыСУЗ.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		СтруктураРезультат = ИнтерфейсСУЗ.ЗапроситьСтатусБизнесЗаказа_V1(
			"121d48de-3a2a-4da0-8dc5-23140ffe8f80", ПараметрыСУЗ);
	Иначе
		СтруктураРезультат = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(
			Неопределено, ПараметрыСУЗ);
			
		Если СтруктураРезультат.ТребуетсяОбновлениеКлючаСессии Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, СтруктураРезультат.РезультатОтправкиЗапроса);
	ВозвращаемоеЗначение.ТекстОшибки = УдалитьНедопустимыеСимволыИзСтроки(СтруктураРезультат.ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИдентификаторСоединенияЧерезИнтернетПоддержку(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Запись.ПроизводственныйОбъектАдресСтрокой) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Адрес объекта"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,,
			"ПроизводственныйОбъектАдресСтрокой", "Запись.ПроизводственныйОбъектАдресСтрокой");
		Возврат;
	КонецЕсли;
	
	Если РежимРаботыСТестовымКонтуромИСМП Тогда
		
		Подключаемый_ИдентификаторСоединения(Истина, "ПолучитьИдентификаторСоединенияЧерезAPI");
		
	ИначеЕсли ТребуетсяПодключениеИнтернетПоддержки Тогда
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ИдентификаторСоединения", ЭтотОбъект, "ПолучитьИдентификаторСоединенияЧерезИнтернетПоддержку");
			
			МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
			Если МодульИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
				МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ВладелецФормы);
			Иначе
				ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Подключаемый_ИдентификаторСоединения(Истина, "ПолучитьИдентификаторСоединенияЧерезИнтернетПоддержку");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПолученияИдентификатораСоединения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из Результат Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			Прервать;
		ИначеЕсли ТипЗнч(ЭлементДанных.Объект) = Тип("Строка")
			И ЗначениеЗаполнено(ЭлементДанных.Объект) Тогда
			
			Запись.ИдентификаторСоединения = ЭлементДанных.Объект;
			
			ПриИзмененииИдентификатораСоединения();
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УдалитьНедопустимыеСимволыИзСтроки(Знач ДанныеСтроки)
	
	Пока Истина Цикл
		
		ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(ДанныеСтроки);
		Если ПозицияНедопустимогоСимвола = 0 Тогда
			Прервать
		КонецЕсли;
		ДанныеСтроки = Лев(ДанныеСтроки, ПозицияНедопустимогоСимвола - 1)
			+ Сред(ДанныеСтроки, ПозицияНедопустимогоСимвола + 1);
		
	КонецЦикла;
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиПодключенияСУЗ(РезультатПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатПроверки = Неопределено Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияНедоступна;
	
	ИначеЕсли РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ЗапроситьКлючСессииНачало(ДополнительныеПараметры);
		
	ИначеЕсли РезультатПроверки.ОтветПолучен = Истина И РезультатПроверки.КодСостояния = 200 Тогда
		
		ПодключениеНастроеноКорректно = Истина;
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.ПроверкаПодключенияКорректно;
		
	Иначе
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ОтображатьСообщенияОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.СтраницыПроверкаПодключения.ПодчиненныеЭлементы.НетСвязиССУЗ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОбмена = РасписаниеЗадания;
	
	Если ОбменНаСервере = 1 Тогда
		
		ИзменитьРасписаниеОбменаНаСервере();
		
	Иначе
		
		ИзменитьРасписаниеОбменаНаКлиенте(ЭтотОбъект, РасписаниеОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Знач НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтображатьСообщенияОбОшибках", Истина);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключениеКСУЗ" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ПроверитьЗаполнение() Тогда
			ПроверитьПодключениеСУЗ(
				Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры),
				Запись.Таймаут);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьWebИнтерфейсСУЗ" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Запись.ИспользоватьЗащищенноеСоединение Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
				СтрШаблон("https://%1:%2", Запись.Адрес, Формат(Запись.Порт, "ЧГ=0")));
		Иначе
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
				СтрШаблон("http://%1:%2", Запись.Адрес, Формат(Запись.Порт, "ЧГ=0")));
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ПроверитьЗаполнениеНаКлиенте() Тогда
			ПроверитьПодключениеСУЗ(
				Новый ОписаниеОповещения("ПослеПроверкиПодключенияСУЗ", ЭтотОбъект, ДополнительныеПараметры),
				Запись.Таймаут);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	ЕстьОшибки = Ложь;
	
	Если Не ЗначениеЗаполнено(Запись.СтанцияУправленияЗаказами) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""СУЗ""'"),, "Запись.СтанцияУправленияЗаказами",, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Адрес) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Адрес""'"),, "Запись.Адрес",, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Порт) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Порт""'"),, "Запись.Порт",, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Таймаут) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Таймаут""'"),, "Запись.Таймаут",, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Организация""'"),, "Запись.Организация",, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.Токен)
		И Не ЗначениеЗаполнено(Запись.ИдентификаторСоединения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Идентификатор соединения""'"),, "Запись.ИдентификаторСоединения",, ЕстьОшибки);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура СтанцияУправленияЗаказамиПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Запись.СтанцияУправленияЗаказами) Тогда
		ФорматОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.СтанцияУправленияЗаказами, "ФорматОбмена");
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			Запись.ИспользоватьЗащищенноеСоединение = Ложь;
		ИначеЕсли ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
			Запись.ИспользоватьЗащищенноеСоединение = Истина;
		Иначе
			Запись.ИспользоватьЗащищенноеСоединение = Истина;
		КонецЕсли;
	Иначе
		Запись.ИспользоватьЗащищенноеСоединение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяПодключениеИнтернетПоддержки()
	
	ТребуетсяПодключениеИнтернетПоддержки = Истина;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ТребуетсяПодключениеИнтернетПоддержки = Ложь;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАвторизации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТребуетсяПодключениеИнтернетПоддержки = (ДанныеАвторизации = Неопределено);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ИдентификаторСоединения(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияКСУЗ = Новый Структура;
	Если РежимРаботыСТестовымКонтуромИСМП Тогда
		АдресСервераРегистрации = "suz-integrator.sandbox.crpt.tech";
		ПортСервераРегистрации = 443;
	Иначе
		АдресСервераРегистрации = "suzgrid.crpt.ru";
		ПортСервераРегистрации = 16443;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ПараметрыПодключенияКСУЗ.Вставить("Адрес",                            АдресСервераРегистрации);
	ПараметрыПодключенияКСУЗ.Вставить("Порт",                             ПортСервераРегистрации);
	ПараметрыПодключенияКСУЗ.Вставить("Таймаут",                          60);
	ПараметрыПодключенияКСУЗ.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	ДополнительныеПараметры.Вставить("ПараметрыПодключенияКСУЗ", ПараметрыПодключенияКСУЗ);
	
	ДополнительныеПараметры.Вставить("Организация",               Запись.Организация);
	ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", Запись.СтанцияУправленияЗаказами);
	ДополнительныеПараметры.Вставить("ПроизводственныйОбъект",    Запись.ПроизводственныйОбъект);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Адрес", Запись.ПроизводственныйОбъектАдресСтрокой);
	
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Организация             = Запись.Организация;
	ПараметрыОбработкиДокументов.ДальнейшееДействие      = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеИдентификаторСоединения");
	ПараметрыОбработкиДокументов.ДополнительныеПараметры = ДополнительныеПараметры;
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПослеПолученияИдентификатораСоединения", ЭтотОбъект, ПараметрыОбработкиДокументов);
	
	ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
		ЭтотОбъект,
		ПараметрыОбработкиДокументов,
		ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИдентификатораСоединения()
	
	Если ЗначениеЗаполнено(Запись.ИдентификаторСоединения) Тогда
		Запись.Токен = "";
	КонецЕсли;
	
	СброситьПроверкуПодключения();
	УправлениеВидимостьюДоступностью(ЭтотОбъект);
	
КонецПроцедуры

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта = Новый Структура;
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	Запись.ПроизводственныйОбъектАдресСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		Запись.ПроизводственныйОбъектАдрес);
	КомментарийАдресаПроизводственногоОбъекта = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(
		Запись.ПроизводственныйОбъектАдрес);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти