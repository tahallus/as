
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаЗаписи" Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Пригласить", Ложь) Тогда
		ОбработкаПолученияФормыОтправкиПриглашения(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Иначе
		ОбработкаПолученияФормыЗаписи(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставленияПриглашений(КлючиЗаписей) Экспорт
	
	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
		|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписиЭДО.Организация) КАК Организация,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК НаименованиеКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК ИННКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КППКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ В (&КлючиПриглашений)";
	
	КлючиПриглашений = Новый Массив;
 	Для каждого КлючЗаписи Из КлючиЗаписей Цикл
		КлючиПриглашений.Добавить(КлючЗаписи.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("КлючиПриглашений", КлючиПриглашений);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Для Каждого КлючЗаписи Из КлючиЗаписей Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючПриглашения", КлючЗаписи.Ключ);
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
			ПредставлениеПриглашения = СтрШаблон(НСтр("ru = '%1 -> %2 (ИНН: %3)'"), ВыборкаДетальныеЗаписи.Организация,
				ВыборкаДетальныеЗаписи.НаименованиеКонтрагента, ВыборкаДетальныеЗаписи.ИННКонтрагента);
			Результат.Вставить(КлючЗаписи, ПредставлениеПриглашения);
			ВыборкаДетальныеЗаписи.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации,
		|	УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
		|ИЗ
		|	РегистрСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами КАК УдалитьПриглашенияКОбменуЭлектроннымиДокументами";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПредставлениеРегистра = МетаданныеРегистра.Представление();
	
	МассивПроверяемыхОбъектов = Новый Массив;
	МассивПроверяемыхОбъектов.Добавить("РегистрСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами");
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, МассивПроверяемыхОбъектов) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, МассивПроверяемыхОбъектов);
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяРегистра, ДополнительныеПараметрыВыборкиДанныхДляОбработки);
	
	Обработано = 0;
	Проблемных = 0;

	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;

	Пока Выборка.Следующий() Цикл
		Попытка
			ПеренестиЗаписьРегистраПриглашений(Выборка);

			Обработано = Обработано + 1;
		Исключение
			Проблемных = Проблемных + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать набор записей регистра ""%1"" по причине:
				|%2'"), ПредставлениеРегистра, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиЗаписьРегистраПриглашений(ЗаписьРегистра) 
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОрганизации", ЗаписьРегистра.ИдентификаторОрганизации);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторКонтрагента", ЗаписьРегистра.ИдентификаторКонтрагента);		
		Блокировка.Заблокировать();
		
		НаборЗаписейСтарый = РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.СоздатьНаборЗаписей();
		НаборЗаписейСтарый.Отбор.ИдентификаторОрганизации.Установить(ЗаписьРегистра.ИдентификаторОрганизации);
		НаборЗаписейСтарый.Отбор.ИдентификаторКонтрагента.Установить(ЗаписьРегистра.ИдентификаторКонтрагента);
		
		НаборЗаписейСтарый.Прочитать();
		
		Если НаборЗаписейСтарый.Количество() = 0 Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписейСтарый);
		Иначе
			НовыйКлючПриглашения = Строка(Новый УникальныйИдентификатор);
			
			НаборЗаписейНовый = СоздатьНаборЗаписей();
			НаборЗаписейНовый.Отбор.Ключ.Установить(НовыйКлючПриглашения);		
			
			ЗаписьНовый = НаборЗаписейНовый.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНовый, НаборЗаписейСтарый[0]);
			ЗаписьНовый.Ключ = НовыйКлючПриглашения;
			ЗаписьНовый.ИдентификаторОператора = НаборЗаписейСтарый[0].ОператорЭДО;
			ЗаписьНовый.EmailКонтрагента = НаборЗаписейСтарый[0].Email;
			Если ЗаписьНовый.ИдентификаторКонтрагента = ЗаписьНовый.ИНН
				Или СтрДлина(ЗаписьНовый.ИдентификаторКонтрагента) <= 12 Тогда
				
				ЗаписьНовый.ИдентификаторКонтрагента = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗаписьНовый.ИдентификаторОрганизации)
				И ЗначениеЗаполнено(ЗаписьНовый.ИдентификаторКонтрагента) Тогда
				
				ЗаписьНовый.Тип = Перечисления.ТипыПриглашений.НаИдентификатор;
			ИначеЕсли ЗначениеЗаполнено(ЗаписьНовый.ИдентификаторОператора) Тогда
				ЗаписьНовый.Тип = Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг;
			Иначе
				ЗаписьНовый.Тип = Перечисления.ТипыПриглашений.Широковещательное;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНовый);
			
			НаборЗаписейСтарый.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСтарый);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияФормыЗаписи(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	КлючЗаписи = Неопределено;
	Если Параметры.Свойство("Ключ", КлючЗаписи) И ЗначениеЗаполнено(КлючЗаписи.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = "ПомощникОтправкиПриглашения";
	
КонецПроцедуры

Процедура ОбработкаПолученияФормыОтправкиПриглашения(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = "ПомощникОтправкиПриглашения";
	
	Если Параметры.Контрагент = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Параметры.Контрагент) = Тип("Массив")  Тогда 
		МассивКонтрагентов = Параметры.Контрагент;
	Иначе
		МассивКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Контрагент);
	КонецЕсли;
	
	МетаданныеОбъекта = МассивКонтрагентов[0].Метаданные();
	
	Если ОбщегоНазначенияБЭД.СправочникИспользуетГруппы(МетаданныеОбъекта) Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	ИмяТаблицыКонтрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка В (&Контрагенты)
			|	И НЕ Контрагенты.ЭтоГруппа";
		ИмяТаблицыКонтрагенты = МетаданныеОбъекта.ПолноеИмя();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыКонтрагенты", ИмяТаблицыКонтрагенты);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		МассивКонтрагентов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Если МассивКонтрагентов.Количество() = 1 Тогда
		Параметры.Вставить("Контрагент", МассивКонтрагентов[0]);
	Иначе
		Параметры.Вставить("МассивКонтрагентов", МассивКонтрагентов);
		ВыбраннаяФорма = "ПомощникМассовойОтправкиПриглашений";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли
