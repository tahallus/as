#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки                      = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ТорговоеПредложение");
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Организация");
	
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ТорговоеПредложение");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Организация");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
		|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		|ГДЕ
		|	(СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение > &ТорговоеПредложение
		|			ИЛИ СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение
		|				И СостоянияСинхронизацииТорговыеПредложения.Организация > &Организация)
		|	И СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииОстатков = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.ПустаяСсылка)
		|	И СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение,
		|	СостоянияСинхронизацииТорговыеПредложения.Организация";
	
	Организация         = Неопределено;
	ТорговоеПредложение = Неопределено;
	
	Запрос.УстановитьПараметр("ТорговоеПредложение", ТорговоеПредложение);
	Запрос.УстановитьПараметр("Организация",         Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	РазмерПорцииДанных = 1000;
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ТорговоеПредложение", ТорговоеПредложение);
		Запрос.УстановитьПараметр("Организация",         Организация);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
		Если КоличествоСтрок < РазмерПорцииДанных Тогда
			Прервать;
		КонецЕсли;
		
		ПоследняяСтрока = Выгрузка[КоличествоСтрок - 1];
		
		ТорговоеПредложение = ПоследняяСтрока.ТорговоеПредложение;
		Организация         = ПоследняяСтрока.Организация;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
		
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	ТекстСообщения         = "";
	
	Для Каждого ТекущаяСтрокаРегистра Из ОбновляемыеДанные Цикл
				
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.ТорговоеПредложение.Установить(ТекущаяСтрокаРегистра.ТорговоеПредложение);
			НаборЗаписей.Отбор.Организация.Установить(ТекущаяСтрокаРегистра.Организация);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Записать = Ложь;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТекущаяЗапись = НаборЗаписей[0];
				
				Если Не ЗначениеЗаполнено(ТекущаяЗапись.ВариантПубликацииОстатков) Тогда
					
					Записать = Истина;
					
					ТекущаяЗапись.ВариантПубликацииОстатков = Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Наличие;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по торговому предложению %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущаяСтрокаРегистра.ТорговоеПредложение) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта, ТекущаяСтрокаРегистра.ТорговоеПредложение, ТекстСообщения);
				
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли

