
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаписьБылаЗаписана = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи.ВидЦен) Тогда
		
		Запись.Автор = Пользователи.ТекущийПользователь();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Актуальность", "Видимость", Ложь);
		
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("Номенклатура")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Номенклатура) Тогда
			
			Запись.ЕдиницаИзмерения = Параметры.ЗначенияЗаполнения.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодЗаписи") Тогда
		
		Запись.Период = Параметры.ПериодЗаписи;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВидЦен") Тогда
		
		Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
			
			Запись.ВидЦен = Параметры.ВидЦен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.ВидЦен) Тогда
		
		ВидЦенПоУмолчанию = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
		Если УправлениеДоступом.ЧтениеРазрешено(ВидЦенПоУмолчанию) Тогда
			Запись.ВидЦен = ВидЦенПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Номенклатура") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			Запись.Номенклатура = Параметры.Номенклатура;
			Запись.ЕдиницаИзмерения = Параметры.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Цена") Тогда
		
		Запись.Цена = Параметры.Цена;
		
	КонецЕсли;
	
	Если ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(Запись.ВидЦен) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", Истина);
		
	КонецЕсли;
	
	ОкруглятьВБольшуюСторону = Запись.ВидЦен.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = Запись.ВидЦен.ПорядокОкругления;
	ПорядкиОкругленияОкр0_01 = Перечисления.ПорядкиОкругления.Окр0_01; 
	ПсихологическоеОкругление = Запись.ВидЦен.ПсихологическоеОкругление;
	ИспользоватьРасширеннуюНастройкуОкругления = ИспользуютсяРасширенныеНастройкиОкругления(Запись.ВидЦен);
  
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	ИспользоватьХарактеристики = Запись.Номенклатура.ИспользоватьХарактеристики;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключаяХарактеристики" , "Доступность", ИспользоватьХарактеристики И НЕ ЗначениеЗаполнено(Запись.Характеристика));
	
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если ЗначениеЗаполнено(Запись.ДокументУстановки) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ДокументУстановки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПодсказкуВидаЦены();
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЗаписьБылаЗаписана Тогда
		Оповестить("ИзмененаЦена", ЗаписьБылаЗаписана);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВидЦен.ТипВидаЦен <> Перечисления.ТипыВидовЦен.Статический Тогда
		
		Если ТекущийОбъект.ВидЦен.РассчитыватьАвтоматически Тогда
			
			ТекстСообщения = НСтр("ru ='Записи по данному виду цен рассчитываются только программой (автоматически).'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru ='Записи по данному виду цен рассчитываются программой и утверждаются в отдельной форме. Вызов формы осуществляется из формы списка видов цен.'");
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Запись.ВидЦен", , Отказ);
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(Истина, "РегистрСведенийЦеныНоменклатурыЗаписьИнтерактивно");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВключаяХарактеристики Тогда
		
		ДеталиЗаписи = Новый Структура;
		ДеталиЗаписи.Вставить("Период", 			НачалоДня(ТекущийОбъект.Период));
		ДеталиЗаписи.Вставить("ВидЦен", 			ТекущийОбъект.ВидЦен);
		ДеталиЗаписи.Вставить("Номенклатура",		ТекущийОбъект.Номенклатура);
		ДеталиЗаписи.Вставить("ЕдиницаИзмерения",	ТекущийОбъект.ЕдиницаИзмерения);
		ДеталиЗаписи.Вставить("Цена", 				ТекущийОбъект.Цена);
		ДеталиЗаписи.Вставить("Автор", 				ТекущийОбъект.Автор);
		
		ДеталиЗаписи.Вставить("ПараметрыЗаписи",	ПараметрыЗаписи);
		
		ЦенообразованиеСервер.ЗаписатьЦеныХарактеристик(ДеталиЗаписи);
		
	КонецЕсли;
	
	Если ТекущийОбъект.ВидЦен = Справочники.ВидыЦен.Оптовая Тогда
		РегистрыСведений.ОбъектыИнтеграцииCRM.ПослеЗаписиОбъекта(ТекущийОбъект.Номенклатура);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписьБылаЗаписана = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДанныеНоменклатураПриИзменении(Запись.Номенклатура);
	Запись.ЕдиницаИзмерения = СтруктураДанных.ЕдиницаИзмерения;
	ИспользоватьХарактеристики = СтруктураДанных.ИспользоватьХарактеристики;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключаяХарактеристики" , "Доступность", ИспользоватьХарактеристики);
	Если НЕ ИспользоватьХарактеристики Тогда
		
		Запись.ВключаяХарактеристики = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура ХарактеристикаПриИзменении(Элемент)
	
	Если ИспользоватьХарактеристики Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключаяХарактеристики" , "Доступность", НЕ ЗначениеЗаполнено(Запись.Характеристика));
		Если ЗначениеЗаполнено(Запись.Характеристика) Тогда
			
			Запись.ВключаяХарактеристики = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ВидЦенПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДанныеВидЦенПриИзменении(Запись.ВидЦен);
	ОкруглятьВБольшуюСторону = СтруктураДанных.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураДанных.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураДанных.ПсихологическоеОкругление;
	ИспользоватьРасширеннуюНастройкуОкругления = СтруктураДанных.ИспользоватьРасширеннуюНастройкуОкругления;
	
	УстановитьПодсказкуВидаЦены();
	
	Если СтруктураДанных.ВыполняетсяРасчетОчередиЦенВРазделеннойИБ = Истина Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", Истина);
		
	КонецЕсли;
	
	Запись.Цена = ОкруглитьЦену(Запись.Цена, Запись.ВидЦен);
	
КонецПроцедуры // ВидЦенПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ЦенаПриИзменении(Элемент)
	
	Запись.Цена = ОкруглитьЦену(Запись.Цена, Запись.ВидЦен);
	
КонецПроцедуры // ЦенаПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(ВидЦен)
	
	РезультатПроверки = Ложь;
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен ГДЕ СвязиВидовЦен.ВидЦенРасчетный = &ВидЦен ИЛИ СвязиВидовЦен.ВидЦенБазовый = &ВидЦен");
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	// Параметры:
	//   ОбластьДанных
	//   Использование
	//   ЗапланированныйМоментЗапуска
	//   ЭксклюзивноеВыполнение.
	//   ИмяМетода - обязательно для указания.
	//   Параметры
	//   Ключ
	//   ИнтервалПовтораПриАварийномЗавершении.
	//   Расписание
	//   КоличествоПовторовПриАварийномЗавершении
	
	ИмяМетода = "ЦенообразованиеСервер.РасчетОчередиЦен";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода",		ИмяМетода);
	
	ТаблицаНайденныхЗаданий = ОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
	
	Если ТаблицаНайденныхЗаданий.Количество() <> 0 Тогда
		
		Для каждого ЗапланированноеРЗ Из ТаблицаНайденныхЗаданий Цикл
			
			Если ЗапланированноеРЗ.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется Тогда
				
				РезультатПроверки = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(Номенклатура)
	
	Возврат Новый Структура("ЕдиницаИзмерения, ИспользоватьХарактеристики", Номенклатура.ЕдиницаИзмерения, Номенклатура.ИспользоватьХарактеристики);
	
КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ВидЦенПриИзменении.
//
Функция ПолучитьДанныеВидЦенПриИзменении(ВидЦен)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
	СтруктураДанных.Вставить("ПорядокОкругления", ВидЦен.ПорядокОкругления);
	СтруктураДанных.Вставить("ВыполняетсяРасчетОчередиЦенВРазделеннойИБ", ВыполняетсяРасчетОчередиЦенВРазделеннойИБ(ВидЦен));
	СтруктураДанных.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);
	СтруктураДанных.Вставить("ИспользоватьРасширеннуюНастройкуОкругления", ИспользуютсяРасширенныеНастройкиОкругления(ВидЦен)); 
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ВидЦен)
 	
	СтруктураОкругления = Новый Структура;
	ПсихологическоеОкругление = 0;
	
	// параметры округления надо получить из объекта		
	КоличествоСтрок = ВидЦен.ПравилаОкругленияЦены.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		// распределения по диапазонам нет, возьмем из объекта
		ПорядокОкругления = ВидЦен.ПорядокОкругления;
		Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
			ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
		КонецЕсли; 			
		
		СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);
		СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
		СтруктураОкругления.Вставить("ПсихологическоеОкругление", ВидЦен.ПсихологическоеОкругление);			
		
	Иначе
		
		// есть распределение по диапазонам
		Для Индекс = 1 По КоличествоСтрок Цикл
			
			ПравилаОкругления = ВидЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];


			
			Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= Число Тогда
				
				СтруктураОкругления = Новый Структура;
				ПорядокОкругления = ПравилаОкругления.ТочностьОкругления;
				Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда								
					ПорядокОкругления	= Перечисления.ПорядкиОкругления.Окр0_01; 				
				КонецЕсли;
				СтруктураОкругления.Вставить("ПорядокОкругления", ПорядокОкругления);					
				СтруктураОкругления.Вставить("ОкруглятьВБольшуюСторону", ВидЦен.ОкруглятьВБольшуюСторону);
				СтруктураОкругления.Вставить("ПсихологическоеОкругление", ПравилаОкругления.ПсихологическоеОкругление);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления);
	
	Возврат Число; 	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(ВидЦен)
	
	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	
	Если ВидЦен.ПравилаОкругленияЦены.Количество() = 1
		И ВидЦен.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И ВидЦен.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	ИначеЕсли ВидЦен.ПравилаОкругленияЦены.Количество() >= 1 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Истина;
	Иначе
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьРасширеннуюНастройкуОкругления;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОкруглитьЦенуПоПравилу(Число, СтруктураОкругления)
		
	ОкруглятьВБольшуюСторону = СтруктураОкругления.ОкруглятьВБольшуюСторону;
	ПорядокОкругления = СтруктураОкругления.ПорядокОкругления;
	ПсихологическоеОкругление = СтруктураОкругления.ПсихологическоеОкругление;
		     			
	Порядок = Число(Строка(ПорядокОкругления)); 
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		
	Иначе
		
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	
	Число = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодсказкуВидаЦены()

	СтруктураЗаголовка = Новый Структура("ТретийПараметр, ЧетвертыйПараметр", "", "");
	СтруктураЗаголовка.Вставить("ПервыйПараметр", ?(ИспользоватьРасширеннуюНастройкуОкругления, НСтр("ru = 'Цены по диапазонам'"), НСтр("ru = 'Все цены'")));
	СтруктураЗаголовка.Вставить("ВторойПараметр", ?(НЕ ОкруглятьВБольшуюСторону, НСтр("ru = 'Арифметическим'"), НСтр("ru = 'В большую сторону'")));
	СтруктураЗаголовка.Вставить("ИспользоватьРасширеннуюНастройкуОкругления", ИспользоватьРасширеннуюНастройкуОкругления);
	СтруктураЗаголовка.Вставить("ПорядокОкругления", ПорядокОкругления);
	СтруктураЗаголовка.Вставить("ПсихологическоеОкругление", ПсихологическоеОкругление);
	
	Элементы.ВидЦенРасширеннаяПодсказка.Заголовок = ЦенообразованиеКлиентСервер.ПолучитьКраткоеОписаниеСпособаОкругленияВидаЦены(СтруктураЗаголовка);
	
КонецПроцедуры
#КонецОбласти
