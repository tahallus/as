
&НаСервере
Процедура ПолучитьДаныеПоЗагрузкамНаСервере()

	НаборЗаписей = РегистрыСведений._adfox_place_СреднедневныеПоказатели.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.adfox_account.Установить(adfox_account);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_adfox_zone.Код КАК sectionId
		|ИЗ
		|	Справочник._adfox_zone КАК _adfox_zone
		|ГДЕ
		|	_adfox_zone.Владелец.Владелец = &adfox_account";
	
	Запрос.УстановитьПараметр("adfox_account", adfox_account);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		sectionId = СтрЗаменить(ВыборкаДетальныеЗаписи.sectionId,Символы.НПП,"");
		ДанныеСтатистики = ПолучитьДанныеСтатистики(adfox_account, sectionId);
		Если ДанныеСтатистики = Неопределено тогда 
			Продолжить;
		Иначе 
			Для Каждого Строка Из ДанныеСтатистики Цикл
				adfox_place = Справочники._adfox_place.НайтиПоКоду(Строка.placeId);
				Если adfox_place.Пустая() Тогда 
					Продолжить;
				КонецЕсли;
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.adfox_account = adfox_account;
				НоваяЗапись.adfox_place = adfox_place;
				НоваяЗапись.dateFrom = dateFrom;
				НоваяЗапись.dateTo = dateTo;
				КоличествоДнейДляРасчета = (dateTo-dateFrom)/86400 + 1;
				КоличествоНедельДляРачета = КоличествоДнейДляРасчета/7;
				НоваяЗапись.loadsTotal_average_weekly = Окр(Строка.loadsTotal/КоличествоНедельДляРачета,0);
				НоваяЗапись.loadsTotal_average_daily = Окр(Строка.loadsTotal/КоличествоДнейДляРасчета,0);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
    НаборЗаписей.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДаныеПоЗагрузкам(Команда)
	ПолучитьДаныеПоЗагрузкамНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатистики(adfox_account, sectionId)

    Соединение = Новый HTTPСоединение("adfox.yandex.ru", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL(),Ложь);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-Yandex-API-Key", adfox_account.X_Yandex_API_Key); 
	//Заголовки.Вставить("Accept-Encoding", "gzip"); 
	
	ПараметрыЗапроса = Новый Структура("name, sectionId, dateFrom, dateTo", "places", sectionId, Формат(dateFrom, "ДФ=yyyy-MM-dd"), Формат(dateFrom, "ДФ=yyyy-MM-dd"));
	
	СтрокаПараметров = "?encoding=UTF-8";
	
	Для каждого Параметр из ПараметрыЗапроса Цикл 
		СтрокаПараметров = СтрокаПараметров + "&" + Параметр.Ключ  + "=" + Параметр.Значение;
	КонецЦикла;
    
	Запрос = Новый HTTPЗапрос("api/report/owner" + СтрокаПараметров, Заголовки);

	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда 
		Возврат Неопределено;
	Иначе
		ОтветРасшифровка = ПрочитатьОтветJSON(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.Системная));
		Если ОтветРасшифровка.Свойство("result") и ОтветРасшифровка.result.Свойство("taskID") Тогда 
			taskID = ОтветРасшифровка.result.taskId;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//Теперь получаем данные отчета 
	Запрос = Новый HTTPЗапрос("api/report/result?taskId=" + taskID, Заголовки);

	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда 
		Возврат Неопределено;
	Иначе
		ОтветРасшифровка = ПрочитатьОтветJSON(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.Системная));
		Если ОтветРасшифровка.Свойство("result") и ОтветРасшифровка.result.Свойство("state") и ОтветРасшифровка.result.state = "SUCCESS" Тогда 
			Возврат КонвертироватьВОтчет(ОтветРасшифровка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПрочитатьОтветJSON(JSON_Строка)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON_Строка);
	Результат = _ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Результат;
КонецФункции

&НаСервере                 
Функция _ПрочитатьJSON(ЧтениеJSON, Родитель = Неопределено) 
	
	ИмяСвойства = Неопределено;
	Пока ЧтениеJSON.Прочитать() Цикл
		ТипТекущегоЗначения = ЧтениеJSON.ТипТекущегоЗначения;
		Если ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
			ВозвращаемоеЗначение = Новый Структура;
			Если ТипЗнч(Родитель) = Тип("Структура") Тогда
				Родитель[ИмяСвойства] = _ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение);
			ИначеЕсли Родитель = Неопределено Тогда 
				Родитель = _ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение);
			ИначеЕсли ТипЗнч(Родитель) = Тип("Массив") Тогда
				Родитель.Добавить(_ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение));
			КонецЕсли;
		ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда 
			ВозвращаемоеЗначение = Новый Массив;
			Если ТипЗнч(Родитель) = Тип("Структура") Тогда
				Родитель[ИмяСвойства] = _ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение);
			ИначеЕсли ТипЗнч(Родитель) = Тип("Массив") Тогда
				Родитель.Добавить(_ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение));
			ИначеЕсли Родитель = Неопределено Тогда 
				Родитель = Новый Массив;
				Родитель.Добавить(_ПрочитатьJSON(ЧтениеJSON, ВозвращаемоеЗначение));
			КонецЕсли;
		ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			Родитель.Вставить(ЧтениеJSON.ТекущееЗначение);
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.Строка ИЛИ ТипТекущегоЗначения = ТипЗначенияJSON.Число ИЛИ ТипТекущегоЗначения = ТипЗначенияJSON.Булево ИЛИ ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда 
			Если ТипЗнч(Родитель) = Тип("Структура") Тогда
				Родитель[ИмяСвойства] = ЧтениеJSON.ТекущееЗначение;
			ИначеЕсли ТипЗнч(Родитель) = Тип("Массив") Тогда
				Родитель.Добавить(ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		ИначеЕсли ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива ИЛИ ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта И Родитель <> Неопределено Тогда 
			Возврат Родитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

&НаСервере                 
Функция КонвертироватьВОтчет(Результат)

	ТипЧисло = Новый ОписаниеТипов("Число");

	Таблица = Новый ТаблицаЗначений;
	Для Каждого Поле из Результат.result.fields Цикл
		ПолеНаименование = Результат.result.fieldsInfo[Поле]["title"];
		ПолеТипДанных = ОпределитьТипДанных(Результат.result.fieldsInfo[Поле]["type"]);
		Таблица.Колонки.Добавить(Поле, ПолеТипДанных, ПолеНаименование);
	КонецЦикла;
	
	Для Каждого Строка из Результат.result.table Цикл
		НоваяСтрока = Таблица.Добавить();
		Для Каждого Колонка из Таблица.Колонки Цикл 
			Индекс = Таблица.Колонки.Индекс(Колонка);
			Если Колонка.ТипЗначения = ТипЧисло Тогда 
				Значение = Число(СтрЗаменить(Строка[Индекс],Символы.НПП,""));
			Иначе 
				Значение = Строка[Индекс];
			КонецЕсли;
			НоваяСтрока[Колонка.Имя] = Значение;	
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
КонецФункции

&НаСервере                 
Функция ОпределитьТипДанных(type)
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ТипыДанных = Новый Структура("String,UInt8,UInt32,UInt64,Percent", ТипСтрока, ТипЧисло, ТипЧисло, ТипЧисло, ТипЧисло);
	
	Возврат ТипыДанных[type];
	
	
КонецФункции
























