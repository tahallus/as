#Область HTTPМетоды

Функция GetAppNameGet(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ИспользоватьОНас КАК ИспользоватьОНас,
	|	НастройкиПубликацииМЛК.Наименование КАК Наименование
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета = Новый Структура("НаименованиеМобильногоПриложения", ВыборкаДетальныеЗаписи.Наименование);
	КонецЕсли;;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция GetDataPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Входящее сообщение'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	АдресШины = ПолучитьАдресШины();
	
	// Переводим старых пользователей в шину
	Если АдресШины <> "" Тогда
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("АдресШины", АдресШины);
		
		Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
		
		Возврат Ответ;
		
	КонецЕсли;
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	СтруктураОтвета = Новый Структура;
	
	// ВЕРСИИ
	ВерсияОНас = Неопределено;
	ВерсияОнлайнЗаписи = Неопределено;
	ВерсияОсновныхДанных = Неопределено;
	ВерсияЛоготипа = Неопределено;
	ВерсияЗаказаТоваров = Неопределено;
	ПолучитьВерсии(ВерсияЛоготипа, ВерсияОНас, ВерсияОнлайнЗаписи, ВерсияОсновныхДанных, ВерсияЗаказаТоваров);
	
	// ОСНОВНЫЕ ДАННЫЕ
	Если ВерсияОсновныхДанных <> СтруктураЗапроса.ВерсияОсновныхДанных Тогда
		ПолучитьОсновныеДанные(СтруктураОтвета);
		СтруктураОтвета.Вставить("ВерсияОсновныхДанных", ВерсияОсновныхДанных);
	КонецЕсли;
	
	// ЛОГОТИП
	Если ВерсияЛоготипа <> СтруктураЗапроса.ВерсияЛоготипа Тогда
		ПолучитьЛоготип(СтруктураОтвета);
		СтруктураОтвета.Вставить("ВерсияЛоготипа", ВерсияЛоготипа);
	КонецЕсли;
	
	// О НАС
	Если ВерсияОНас <> СтруктураЗапроса.ВерсияОНас Тогда
		ПолучитьСтраницуОНас(СтруктураОтвета);
		СтруктураОтвета.Вставить("ВерсияОНас", ВерсияОНас);
	КонецЕсли;
	
	// ОНЛАЙН-ЗАПИСЬ
	Если ВерсияОнлайнЗаписи <> СтруктураЗапроса.ВерсияОнлайнЗаписи Тогда
		ПолучитьДанныеОнлайнЗаписи(СтруктураОтвета);
		СтруктураОтвета.Вставить("ВерсияОнлайнЗаписи", ВерсияОнлайнЗаписи);
	КонецЕсли;
	
	// ОБРАБОТКА ПРЕДСТОЯЩИХ ЗАПИСЕЙ
	ХешиПредстоящихЗаписей = Неопределено;
	Если СтруктураЗапроса.Свойство("ХешиПредстоящихЗаписей", ХешиПредстоящихЗаписей) Тогда
		
		ИзмененныеПредстоящиеЗаписи = ПроверитьПредстоящиеЗаписи(ХешиПредстоящихЗаписей);
		Если ИзмененныеПредстоящиеЗаписи.Количество() <> 0 Тогда
			СтруктураОтвета.Вставить("ИзмененныеПредстоящиеЗаписи", ИзмененныеПредстоящиеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	// ВЕРСИЯ СЕРВЕРА
	СтруктураОтвета.Вставить("ВерсияСервера", КонструкторМобильногоПриложения.ВерсияМЛК());
	
	// ИДЕНТИФИКАТОР ИНФОРМАЦИОННОЙ БАЗЫ
	НужноПолучитьИдентификаторИнформационнойБазыУНФ = Неопределено;
	Если СтруктураЗапроса.Свойство("НужноПолучитьИдентификаторИнформационнойБазыУНФ", НужноПолучитьИдентификаторИнформационнойБазыУНФ) Тогда
		СтруктураОтвета.Вставить("ИдентификаторИнформационнойБазыУНФ", Константы.ИдентификаторИнформационнойБазы.Получить());
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция GetCalendarPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	Если СтруктураЗапроса.УИРесурса = Неопределено Тогда
		
		// Получаем графики всех ресурсов
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса() + (СтруктураЗапроса.КоличествоНедельВперед*7*24*60*60);
		Если СтруктураЗапроса.КоличествоНедельВперед <> 0 Тогда
			ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса);
		КонецЕсли;
		
		ГрафикиРаботыРесурсов = ПолучитьГрафикРаботыРесурсовНа7Дней(ТекущаяДатаСеанса, СтруктураЗапроса.ДлительностьУслуг, ТекущаяДатаСеанса);
		
		БлижайшийДень = ГрафикиРаботыРесурсов.Получить(0);
		
		СвободноеВремя = ПолучитьСвободноеВремяРесурсовДляЗаписи(СтруктураЗапроса.ДлительностьУслуг, БлижайшийДень, ТекущаяДатаСеанса());
		
	Иначе
		
		// Получаем график работы ресурса
		
		Ресурс = Справочники.КлючевыеРесурсы.ПолучитьСсылку(СтруктураЗапроса.УИРесурса);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса() + (СтруктураЗапроса.КоличествоНедельВперед*7*24*60*60);
		Если СтруктураЗапроса.КоличествоНедельВперед <> 0 Тогда
			ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса);
		КонецЕсли;
		
		ГрафикиРаботыРесурсов = ПолучитьГрафикРаботыРесурсаНа7Дней(ТекущаяДатаСеанса, Ресурс, СтруктураЗапроса.ДлительностьУслуг, ТекущаяДатаСеанса);
		
		БлижайшийДень = ГрафикиРаботыРесурсов.Получить(0);
		
		СвободноеВремя = ПолучитьВремяДляЗаписи(Ресурс, СтруктураЗапроса.ДлительностьУслуг, БлижайшийДень, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("ГрафикиРаботыСотрудника, ТекущаяДата, СвободноеВремя", ГрафикиРаботыРесурсов, НачалоДня(ТекущаяДатаСеанса), СвободноеВремя);
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция GetTimePost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	ДатаДляЗапроса = СтруктураЗапроса.ВыбраннаяДата;
	
	Если СтруктураЗапроса.УИРесурса = Неопределено Тогда
		
		МассивСВременем = ПолучитьСвободноеВремяРесурсовДляЗаписи(СтруктураЗапроса.ДлительностьУслуг, ДатаДляЗапроса, ТекущаяДатаСеанса());
		
	Иначе
		
		МассивСВременем = ПолучитьВремяДляЗаписи(Справочники.КлючевыеРесурсы.ПолучитьСсылку(СтруктураЗапроса.УИРесурса), СтруктураЗапроса.ДлительностьУслуг, ДатаДляЗапроса, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("МассивСВременем", МассивСВременем);
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция SendServiceRegistrationPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	СтруктураВозврата = СоздатьОбновитьЗаказ(СтруктураЗапроса, Справочники.КлючевыеРесурсы.ПолучитьСсылку(СтруктураЗапроса.УИРесурса), ПолучитьВидЦен());
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		СтруктураОтвета = СтруктураВозврата;
	Иначе
		СтруктураОтвета  = Неопределено;
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция CancelServicePost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	СсылкаНаЗаказНаряд = Документы.ЗаказПокупателя.ПолучитьСсылку(СтруктураЗапроса.УИЗаписи);
	
	Если НЕ ПустаяСтрока(СсылкаНаЗаказНаряд.ВерсияДанных) Тогда
		
		ЗаказНарядОбъект = СсылкаНаЗаказНаряд.ПолучитьОбъект();
		ЗаказНарядОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен;
		ЗаказНарядОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию("Отменено из мобильного приложения");
		
		Если НЕ ЗначениеЗаполнено(ПричинаОтмены) Тогда
			
			ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.СоздатьЭлемент();
			ПричинаОтмены.Наименование = "Отменено из мобильного приложения";
			ПричинаОтмены.Записать();
			
		КонецЕсли;
		
		ЗаказНарядОбъект.ПричинаОтмены = ПричинаОтмены.Ссылка;
		ЗаказНарядОбъект.Записать();
		
		НаборЗаписей = РегистрыСведений.РасписаниеЗагрузкиРесурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаЗаказНаряд);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(Новый Структура("", )));
	
	Возврат Ответ;
	
КонецФункции

Функция VerifyPhoneNumberPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	КодПодтверждения = ОтправитьSMSДляПодтвержденияНомера(СтруктураЗапроса.НомерТелефона);
	
	СтруктураОтвета = Новый Структура("КодПодтверждения", КодПодтверждения);
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция GetAboutUsPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Возврат Ответ;
	
КонецФункции

Функция GetResourcesAndEndTimePost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	Если СтруктураЗапроса.НаименованиеФормы = "ФормаВыбораРесурса" Тогда
		
		ТЗСРесурсамиИВременем = ПолучитьСписокРесурсовИВремяОкончания(СтруктураЗапроса.ВыбранноеВремя, ТекущаяДатаСеанса(), СтруктураЗапроса.ДлительностьУслуг);
		
	Иначе
		
		УИРесурса = Неопределено;
		Если СтруктураЗапроса.Свойство("УИРесурса", УИРесурса) Тогда
			Ресурс = Справочники.КлючевыеРесурсы.ПолучитьСсылку(УИРесурса);
			ТЗСРесурсамиИВременем = ПолучитьВремяОкончанияРесурса(СтруктураЗапроса.ВыбранноеВремя, ТекущаяДатаСеанса(), СтруктураЗапроса.ДлительностьУслуг, Ресурс);
		Иначе
			ТЗСРесурсамиИВременем = ПолучитьВремяОкончанияРесурсов(СтруктураЗапроса.ВыбранноеВремя, ТекущаяДатаСеанса(), СтруктураЗапроса.ДлительностьУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура("ТЗСРесурсамиИВременем", ТЗСРесурсамиИВременем);
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция GetComingDaysOfResourcesPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	БлижайшиеДниРесурсовДляЗаписи = Новый ХранилищеЗначения(ПолучитьБлижайшиеДниРесурсовДляЗаписи(СтруктураЗапроса.ДлительностьУслуг), Новый СжатиеДанных(9));
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(Новый Структура("БлижайшиеДниСотрудниковДляЗаписи", БлижайшиеДниРесурсовДляЗаписи)));
	
	Возврат Ответ;
	
КонецФункции

Функция GetHistoryOfServicesPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	ТелефонКлиента = Неопределено;
	Если СтруктураЗапроса.Свойство("ТелефонКлиента", ТелефонКлиента) Тогда
		СтруктураВозврата = НайтиКонтрагента(ТелефонКлиента, Неопределено);
		Если СтруктураВозврата.КонтрагентНайден Тогда
			Контрагент = СтруктураВозврата.Контрагент;
		Иначе
			Контрагент = Неопределено;
		КонецЕсли;
	Иначе
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтруктураЗапроса.УИКонтрагента);
	КонецЕсли;
	
	ТЗСИсториейЗаписей = ПолучитьИсториюЗаписей(СтруктураЗапроса.ИсключающаяДатаС, СтруктураЗапроса.ИсключающаяДатаПо, Контрагент);
	СтруктураОтвета = Новый Структура("ТЗСИсториейЗаписей", ТЗСИсториейЗаписей);
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция VerifyEmailPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	КодПодтверждения = ПолучитьСгенерированныйКод();
	
	ОтправитьПисьмоСКодом(СтруктураЗапроса.ПочтаКлиента, КодПодтверждения);
	
	СтруктураОтвета = Новый Структура("КодПодтверждения", КодПодтверждения);
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция SendOrderPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Запрос из мобильного личного кабинета'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	СтруктураВозврата = СоздатьЗаказ(СтруктураЗапроса);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		СтруктураОтвета = СтруктураВозврата;
	Иначе
		СтруктураОтвета = Неопределено;
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция CheckUpcomingOrdersPost(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='Входящее сообщение'", ОбщегоНазначения.КодОсновногоЯзыка());;
	
	Если НЕ Константы.ИспользоватьМобильныйЛичныйКабинет.Получить() Тогда
		ОписаниеОшибки = НСтр("ru='Использование мобильного личного кабинета отключено в настройках'");
		
		ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ИмяСобытияДляЖурналаРегистрации,
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
		
		Возврат Новый HTTPСервисОтвет(500, ОписаниеОшибки);
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураЗапроса = ПолучитьСтруктуруЗапроса(Запрос.ПолучитьТелоКакСтроку());
	
	СтруктураОтвета = Новый Структура;
	
	// ОБРАБОТКА ПРЕДСТОЯЩИХ ЗАПИСЕЙ
	ХешиПредстоящихЗаписей = Неопределено;
	Если СтруктураЗапроса.Свойство("ХешиПредстоящихЗаписей", ХешиПредстоящихЗаписей) Тогда
		
		ИзмененныеПредстоящиеЗаписи = ПроверитьПредстоящиеЗаписи(ХешиПредстоящихЗаписей);
		Если ИзмененныеПредстоящиеЗаписи.Количество() <> 0 Тогда
			СтруктураОтвета.Вставить("ИзмененныеПредстоящиеЗаписи", ИзмененныеПредстоящиеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(СформироватьСтрокуОтправки(СтруктураОтвета));
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ЗапросыСГрафикомРаботы

Функция ПолучитьГрафикРаботыРесурсаНа7Дней(ДатаЗаписи, Ресурс, Длительность, ТекущаяДатаВремя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала, ДЕНЬ) КАК ВремяНачалаИнтервала
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втБезУчетаМощности.ВремяНачалаИнтервала, ДЕНЬ)
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачалаИнтервала";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 7);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("Длительность", Длительность);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаВремя + МинимальныйИнтервалУслуги * 60);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСГрафиком = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСГрафиком.Добавить(ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала);
	КонецЦикла;
	
	Возврат МассивСГрафиком;
	
КонецФункции

Функция ПолучитьГрафикРаботыРесурсовНа7Дней(ДатаЗаписи, Длительность, ТекущаяДатаВремя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала, ДЕНЬ) КАК ВремяНачалаИнтервала
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(втБезУчетаМощности.ВремяНачалаИнтервала, ДЕНЬ)
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачалаИнтервала";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 7);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("Длительность", Длительность);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаВремя + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСГрафиком = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСГрафиком.Добавить(ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала);
	КонецЦикла;
	
	Возврат МассивСГрафиком;
	
КонецФункции

Функция ПолучитьСвободноеВремяРесурсовДляЗаписи(ДлительностьУслуг, ДатаЗаписи, ТекущаяДатаСеанса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБезУчетаМощности.ВремяНачалаИнтервала
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачалаИнтервала";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("Длительность", ДлительностьУслуг);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСВременем = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСВременем.Добавить(ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала);
	КонецЦикла;
	
	Возврат МассивСВременем;
	
КонецФункции

Функция ПолучитьВремяДляЗаписи(Ресурс, ДлительностьУслуг, ДатаЗаписи, ТекущаяДатаСеанса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБезУчетаМощности.ВремяНачалаИнтервала
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачалаИнтервала";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("Длительность", ДлительностьУслуг);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса + МинимальныйИнтервалУслуги * 60);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСВременем = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСВременем.Добавить(ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала);
	КонецЦикла;
	
	Возврат МассивСВременем;
	
КонецФункции

Функция ПолучитьМенееЗагруженныйРесурс(ДлительностьУслуг, ДатаЗаписи, ТекущаяДатаСеанса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втГрафикСИнтервалами.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втУчетЗанятыхИнтервалов.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втСвободныеДатаИВремя
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБезУчетаМощности.ВремяНачалаИнтервала,
	|	втБезУчетаМощности.Ресурс
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвободныеДатаИВремя.Ресурс КАК Ресурс,
	|	втСвободныеДатаИВремя.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала
	|ПОМЕСТИТЬ втПотенциальныеРесурсы
	|ИЗ
	|	втСвободныеДатаИВремя КАК втСвободныеДатаИВремя
	|ГДЕ
	|	втСвободныеДатаИВремя.ВремяНачалаИнтервала = &ДатаЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втГрафикСИнтервалами.ВремяНачалаИнтервала) КАК КоличествоИнтервалов,
	|	втГрафикСИнтервалами.Мощность КАК ОсновнаяМощность,
	|	втПотенциальныеРесурсы.Ресурс КАК Ресурс1
	|ПОМЕСТИТЬ втКоличествоВсехИнтервалов
	|ИЗ
	|	втПотенциальныеРесурсы КАК втПотенциальныеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПО (втГрафикСИнтервалами.Ресурс = втПотенциальныеРесурсы.Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.Мощность,
	|	втПотенциальныеРесурсы.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала,
	|	втПотенциальныеРесурсы.Ресурс КАК Ресурс1
	|ПОМЕСТИТЬ втКоличествоЗанятыхИнтервалов
	|ИЗ
	|	втПотенциальныеРесурсы КАК втПотенциальныеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|		ПО (втЗанятыеИнтервалы.Ресурс = втПотенциальныеРесурсы.Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втПотенциальныеРесурсы.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(втКоличествоЗанятыхИнтервалов.СуммаМощностиИнтервала, 0) * 100 / (втКоличествоИнтервалов.ОсновнаяМощность * втКоличествоИнтервалов.КоличествоИнтервалов) КАК Поле2,
	|	втКоличествоЗанятыхИнтервалов.Ресурс1 КАК Ресурс
	|ИЗ
	|	втКоличествоВсехИнтервалов КАК втКоличествоИнтервалов,
	|	втКоличествоЗанятыхИнтервалов КАК втКоличествоЗанятыхИнтервалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поле2";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	Запрос.УстановитьПараметр("Длительность", ДлительностьУслуг);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ресурс;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВремяОкончанияРесурса(ВыбранноеВремя, ДатаЗаписи, Длительность, Ресурс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|	И &ДатаЗаписи МЕЖДУ ГрафикиРаботы.ВремяНачала И ГрафикиРаботы.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала,
	|	втГрафикСИнтервалами.ВремяОкончанияИнтервала КАК ВремяОкончанияИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность,
	|	втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала,
	|	втЗанятыеИнтервалы.ВремяОкончанияИнтервала КАК ВремяОкончанияИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса,
	|	втЗанятыеИнтервалы.ВремяОкончанияИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтУчетЗанятыхИнтервалов.ВремяНачалаИнтервала) КАК ВремяНачалаИнтервала,
	|	ВтУчетЗанятыхИнтервалов.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втЗанятыеИнтервалы2
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК ВтУчетЗанятыхИнтервалов
	|ГДЕ
	|	ВтУчетЗанятыхИнтервалов.СуммаМощностиИнтервала >= ВтУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса
	|	И ВтУчетЗанятыхИнтервалов.ВремяНачалаИнтервала >= &ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтУчетЗанятыхИнтервалов.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикПлан.Ресурс КАК Ресурс,
	|	МИНИМУМ(втГрафикПлан.ВремяОкончания) КАК ВремяОкончания,
	|	втЗанятыеИнтервалы2.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	МИНИМУМ(РАЗНОСТЬДАТ(&ДатаЗаписи, втГрафикПлан.ВремяОкончания, МИНУТА)) КАК РазностьСГрафиком,
	|	РАЗНОСТЬДАТ(&ДатаЗаписи, втЗанятыеИнтервалы2.ВремяНачалаИнтервала, МИНУТА) КАК РазностьСЗаписью
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗанятыеИнтервалы2 КАК втЗанятыеИнтервалы2
	|		ПО втГрафикПлан.Ресурс = втЗанятыеИнтервалы2.Ресурс
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикПлан.Ресурс,
	|	втЗанятыеИнтервалы2.ВремяНачалаИнтервала
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазностьСЗаписью УБЫВ,
	|	РазностьСГрафиком УБЫВ";
	
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("ДатаЗаписи", ВыбранноеВремя);
	Запрос.УстановитьПараметр("Длительность", 1); // Длительность
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса() + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИРесурса");
	ТаблицаЗначений.Колонки.Добавить("ВремяОкончания");
	ТаблицаЗначений.Колонки.Добавить("СвободныеМинуты");
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Строка = ТаблицаЗначений.Добавить();
		Строка.УИРесурса = ВыборкаДетальныеЗаписи.Ресурс.УникальныйИдентификатор();
		
		Если ВыборкаДетальныеЗаписи.РазностьСЗаписью = NULL Тогда
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяОкончания;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСГрафиком;
		ИначеЕсли ВыборкаДетальныеЗаписи.РазностьСЗаписью < ВыборкаДетальныеЗаписи.РазностьСГрафиком Тогда
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСЗаписью;
		Иначе
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяОкончания;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСГрафиком;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаЗначений
	
КонецФункции

Функция ПолучитьВремяОкончанияРесурсов(ВыбранноеВремя, ДатаЗаписи, Длительность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|	И &ДатаЗаписи МЕЖДУ ГрафикиРаботы.ВремяНачала И ГрафикиРаботы.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала,
	|	втГрафикСИнтервалами.ВремяОкончанияИнтервала КАК ВремяОкончанияИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность,
	|	втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала,
	|	втЗанятыеИнтервалы.ВремяОкончанияИнтервала КАК ВремяОкончанияИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса,
	|	втЗанятыеИнтервалы.ВремяОкончанияИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтУчетЗанятыхИнтервалов.ВремяНачалаИнтервала) КАК ВремяНачалаИнтервала,
	|	ВтУчетЗанятыхИнтервалов.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втЗанятыеИнтервалы2
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК ВтУчетЗанятыхИнтервалов
	|ГДЕ
	|	ВтУчетЗанятыхИнтервалов.СуммаМощностиИнтервала >= ВтУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса
	|	И ВтУчетЗанятыхИнтервалов.ВремяНачалаИнтервала >= &ДатаЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтУчетЗанятыхИнтервалов.Ресурс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикПлан.Ресурс КАК Ресурс,
	|	МИНИМУМ(втГрафикПлан.ВремяОкончания) КАК ВремяОкончания,
	|	втЗанятыеИнтервалы2.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	МИНИМУМ(РАЗНОСТЬДАТ(&ДатаЗаписи, втГрафикПлан.ВремяОкончания, МИНУТА)) КАК РазностьСГрафиком,
	|	РАЗНОСТЬДАТ(&ДатаЗаписи, втЗанятыеИнтервалы2.ВремяНачалаИнтервала, МИНУТА) КАК РазностьСЗаписью
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗанятыеИнтервалы2 КАК втЗанятыеИнтервалы2
	|		ПО втГрафикПлан.Ресурс = втЗанятыеИнтервалы2.Ресурс
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикПлан.Ресурс,
	|	втЗанятыеИнтервалы2.ВремяНачалаИнтервала
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазностьСЗаписью УБЫВ,
	|	РазностьСГрафиком УБЫВ";
	
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("ДатаЗаписи", ВыбранноеВремя);
	Запрос.УстановитьПараметр("Длительность", 1); // Длительность
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса() + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИРесурса");
	ТаблицаЗначений.Колонки.Добавить("ВремяОкончания");
	ТаблицаЗначений.Колонки.Добавить("СвободныеМинуты");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаЗначений.Добавить();
		Строка.УИРесурса = ВыборкаДетальныеЗаписи.Ресурс.УникальныйИдентификатор();
		
		Если ВыборкаДетальныеЗаписи.РазностьСЗаписью = NULL Тогда
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяОкончания;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСГрафиком;
		ИначеЕсли ВыборкаДетальныеЗаписи.РазностьСЗаписью < ВыборкаДетальныеЗаписи.РазностьСГрафиком Тогда
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСЗаписью;
		Иначе
			Строка.ВремяОкончания = ВыборкаДетальныеЗаписи.ВремяОкончания;
			Строка.СвободныеМинуты = ВыборкаДетальныеЗаписи.РазностьСГрафиком;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений
	
КонецФункции

Функция ПолучитьБлижайшиеДниРесурсовДляЗаписи(ДлительностьУслуг)
	
	Если ДлительностьУслуг = 0 Тогда
		ДлительностьУслуг = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втГрафикСИнтервалами.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втУчетЗанятыхИнтервалов.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБезУчетаМощности.ВремяНачалаИнтервала,
	|	втБезУчетаМощности.Ресурс
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВременнаяТаблица.ВремяНачалаИнтервала) КАК ВремяНачалаИнтервала,
	|	ВременнаяТаблица.Ресурс КАК Ресурс
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.Ресурс";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 14);
	Запрос.УстановитьПараметр("ДатаЗаписи", ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("Длительность", ДлительностьУслуг);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИРесурса");
	ТаблицаЗначений.Колонки.Добавить("Дата");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаЗначений.Добавить();
		Строка.УИРесурса = ВыборкаДетальныеЗаписи.Ресурс.УникальныйИдентификатор();
		Строка.Дата = ВыборкаДетальныеЗаписи.ВремяНачалаИнтервала;
	КонецЦикла;
	
	Возврат ТаблицаЗначений
	
	
КонецФункции

Функция ПолучитьСписокРесурсовИВремяОкончания(ВыбранноеВремя, ДатаЗаписи, Длительность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Поле
	|ПОМЕСТИТЬ Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
	|ПОМЕСТИТЬ втЧисла256
	|ИЗ
	|	Числа КАК Числа1,
	|	Числа КАК Числа2,
	|	Числа КАК Числа3,
	|	Числа КАК Числа4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
	|	ДанныеПроизводственногоКалендаря.Год КАК Год,
	|	ДанныеПроизводственногоКалендаря.Дата КАК ДЕНЬ,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ втГрафикПлан
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаЗаписи, РесурсПредприятия В (&Ресурс)) КАК ГрафикиРаботыРесурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
	|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
	|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
	|		ПО (ДанныеПроизводственногоКалендаря.Дата = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ГрафикиРаботыРесурсов.ГрафикРаботы.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = ГОД(&ДатаЗаписи)
	|	И ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
	|	И ГрафикиРаботыРесурсов.РесурсПредприятия В(&Ресурс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втГрафикПлан.Ресурс, ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия) КАК Ресурс,
	|	втГрафикПлан.Год КАК Год,
	|	втГрафикПлан.ДЕНЬ КАК ДЕНЬ,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания
	|ПОМЕСТИТЬ втОтклонения
	|ИЗ
	|	втГрафикПлан КАК втГрафикПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО втГрафикПлан.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И втГрафикПлан.ДЕНЬ = ОтклоненияОтГрафиковРаботыРесурсов.День
	|			И втГрафикПлан.Ресурс = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|		ПО (НастройкиЗаписьНаУслуги.Ресурс = втГрафикПлан.Ресурс)
	|ГДЕ
	|	РАЗНОСТЬДАТ(ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала), ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания), ЧАС) > 0
	|	И втГрафикПлан.ДЕНЬ >= НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ)
	|	И втГрафикПлан.ДЕНЬ < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОтклонения.Ресурс КАК Ресурс,
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
	|	втОтклонения.Год КАК Год,
	|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
	|	втОтклонения.ВремяНачала КАК ВремяНачала,
	|	втОтклонения.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСОтклонениями
	|ИЗ
	|	втОтклонения КАК втОтклонения,
	|	втЧисла256 КАК втЧисла256
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаЗаписи, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) >= втОтклонения.ВремяНачала
	|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * &МинимальныйИнтервалУслуги) <= втОтклонения.ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
	|	втГрафикСОтклонениями.Ресурс.Мощность КАК Мощность,
	|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, &Длительность) КАК ВремяОкончанияИнтервала,
	|	втГрафикСОтклонениями.Год КАК Год,
	|	втГрафикСОтклонениями.день КАК день,
	|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачала,
	|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втГрафикСИнтервалами
	|ИЗ
	|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка КАК Ресурс,
	|	КлючевыеРесурсы.Мощность КАК ОсновнаяМощностьРесурса,
	|	СУММА(РасписаниеЗагрузкиРесурсов.Мощность) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втЗанятыеИнтервалы
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ПО втГрафикСИнтервалами.Ресурс = КлючевыеРесурсы.Ссылка
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|	И РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&Ресурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала,
	|	КлючевыеРесурсы.Ссылка,
	|	РасписаниеЗагрузкиРесурсов.Мощность,
	|	КлючевыеРесурсы.Мощность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗанятыеИнтервалы.Ресурс КАК Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса КАК ОсновнаяМощностьРесурса,
	|	СУММА(втЗанятыеИнтервалы.СуммаМощностиИнтервала) КАК СуммаМощностиИнтервала
	|ПОМЕСТИТЬ втУчетЗанятыхИнтервалов
	|ИЗ
	|	втЗанятыеИнтервалы КАК втЗанятыеИнтервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗанятыеИнтервалы.Ресурс,
	|	втЗанятыеИнтервалы.ВремяНачалаИнтервала,
	|	втЗанятыеИнтервалы.ОсновнаяМощностьРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втГрафикСИнтервалами.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втБезУчетаМощности
	|ИЗ
	|	втГрафикСИнтервалами КАК втГрафикСИнтервалами
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ПО втГрафикСИнтервалами.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
	|			И (втГрафикСИнтервалами.ВремяНачалаИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ втГрафикСИнтервалами.ВремяОкончанияИнтервала МЕЖДУ РасписаниеЗагрузкиРесурсов.Старт И РасписаниеЗагрузкиРесурсов.Финиш
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала
	|				ИЛИ РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ втГрафикСИнтервалами.ВремяНачалаИнтервала И втГрафикСИнтервалами.ВремяОкончанияИнтервала)
	|			И втГрафикСИнтервалами.ВремяОкончанияИнтервала <> РасписаниеЗагрузкиРесурсов.Старт
	|			И втГрафикСИнтервалами.ВремяНачалаИнтервала <> РасписаниеЗагрузкиРесурсов.Финиш
	|ГДЕ
	|	втГрафикСИнтервалами.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ДатаЗаписи, ДЕНЬ, &ВыгружатьДнейГрафика)
	|	И РасписаниеЗагрузкиРесурсов.Документ ЕСТЬ NULL
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &Длительность) <= втГрафикСИнтервалами.ВремяОкончания
	|	И ДОБАВИТЬКДАТЕ(втГрафикСИнтервалами.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) > &ТекущаяДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втУчетЗанятыхИнтервалов.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
	|	втУчетЗанятыхИнтервалов.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ втСвободныеДатаИВремя
	|ИЗ
	|	втУчетЗанятыхИнтервалов КАК втУчетЗанятыхИнтервалов
	|ГДЕ
	|	втУчетЗанятыхИнтервалов.ОсновнаяМощностьРесурса > втУчетЗанятыхИнтервалов.СуммаМощностиИнтервала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втБезУчетаМощности.ВремяНачалаИнтервала,
	|	втБезУчетаМощности.Ресурс
	|ИЗ
	|	втБезУчетаМощности КАК втБезУчетаМощности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвободныеДатаИВремя.Ресурс КАК Ресурс
	|ИЗ
	|	втСвободныеДатаИВремя КАК втСвободныеДатаИВремя
	|ГДЕ
	|	втСвободныеДатаИВремя.ВремяНачалаИнтервала = &ДатаЗаписи";
	
	МинимальныйИнтервалУслуги = ПолучитьМинимальныйИнтервалУслуги();
	
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", 1);
	Запрос.УстановитьПараметр("ДатаЗаписи", ВыбранноеВремя);
	Запрос.УстановитьПараметр("Длительность", Длительность);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", МинимальныйИнтервалУслуги);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса() + МинимальныйИнтервалУслуги * 60);
	Запрос.УстановитьПараметр("Ресурс", ПолучитьСписокРесурсов());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИРесурса");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаЗначений.Добавить();
		Строка.УИРесурса = ВыборкаДетальныеЗаписи.Ресурс.УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат ТаблицаЗначений
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАдресШины()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	СсылкаМЛК = ВыборкаДетальныеЗаписи.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииКабинетКлиента.АдресПриложения КАК АдресПриложения
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииКабинетКлиента КАК НастройкиИнтеграцииКабинетКлиента
	|ГДЕ
	|	НастройкиИнтеграцииКабинетКлиента.НастройкаПубликации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаМЛК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.АдресПриложения
	Иначе
		Возврат ""
	КонецЕсли;
	
КонецФункции // ()

Процедура ОтправитьПисьмоСКодом(ПочтаКлиента, КодПодтверждения)
	
	ОписаниеВложения = Новый Структура;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Кому",     ПочтаКлиента);
	ПараметрыСообщения.Вставить("Тема",     "Ваш код подтверждения: " + КодПодтверждения);
	ПараметрыСообщения.Вставить("Тело",     "Ваш код: " + КодПодтверждения + ". Введите этот код для подтверждения электронной почты.");
	ПараметрыСообщения.Вставить("Вложения", Новый Массив);
	
	Попытка
		
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		Если РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(СистемнаяУчетнаяЗапись) Тогда
			НовоеПисьмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(СистемнаяУчетнаяЗапись, ПараметрыСообщения);
			РаботаСПочтовымиСообщениями.ОтправитьПисьмо(СистемнаяУчетнаяЗапись, НовоеПисьмо);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru='МобильныйЛичныйКабинет'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПроверитьПредстоящиеЗаписи(ХешиПредстоящихЗаписей)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИ");
	ТаблицаЗначений.Колонки.Добавить("ИзмененныеДанные");
	
	Для каждого Строка Из ХешиПредстоящихЗаписей Цикл
		
		СтрокаДляХеша = "";
		ДокументСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Строка.УИ);
		
		Если НЕ ПустаяСтрока(ДокументСсылка.ВерсияДанных) Тогда
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Для каждого СтрокаТЧ Из ДокументОбъект.РесурсыПредприятия Цикл
				СтрокаДляХеша = Строка(СтрокаТЧ.РесурсПредприятия.УникальныйИдентификатор());
			КонецЦикла;
			
			// Проверяем на неподтвержденную запись
			Если ДокументОбъект.Старт = НачалоДня(ДокументОбъект.Старт) И ТекущаяДатаСеанса() > ДокументОбъект.Старт Тогда
				СтрокаДляХеша = СтрокаДляХеша + "_" + Строка(Дата(1,1,1));
			Иначе
				СтрокаДляХеша = СтрокаДляХеша + "_" + Строка(ДокументОбъект.Старт);
			КонецЕсли;
			
			Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
				СтрокаДляХеша = СтрокаДляХеша + "_" + Строка(Истина);
			Иначе
				СтрокаДляХеша = СтрокаДляХеша + "_" + Строка(Ложь);
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из ДокументОбъект.Работы Цикл
				СтрокаДляХеша = СтрокаДляХеша + "_" + Строка(СтрокаТЧ.Номенклатура.УникальныйИдентификатор());
			КонецЦикла;
			
			Если Строка.Хеш <> СформироватьХеш(СтрокаДляХеша) Тогда
				
				Строка = ТаблицаЗначений.Добавить();
				Строка.УИ = ДокументСсылка.УникальныйИдентификатор();
				Строка.ИзмененныеДанные = Новый ХранилищеЗначения(СформироватьИзмененнуюЗапись(ДокументОбъект), Новый СжатиеДанных(9));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция СформироватьИзмененнуюЗапись(ДокументОбъект)
	
	РесурсСтрока = "";
	Для каждого СтрокаТЧ Из ДокументОбъект.РесурсыПредприятия Цикл
		Если СтрокаТЧ.НомерСтроки = 1 Тогда
			РесурсСтрока = Строка(СтрокаТЧ.РесурсПредприятия.Наименование);
			Продолжить;
		КонецЕсли;
		РесурсСтрока = РесурсСтрока + ", " + Строка(СтрокаТЧ.РесурсПредприятия.Наименование);
	КонецЦикла;
	
	УслугиСтрока = "";
	Для каждого СтрокаТЧ Из ДокументОбъект.Работы Цикл
		Если СтрокаТЧ.НомерСтроки = 1 Тогда
			УслугиСтрока = Строка(СтрокаТЧ.Номенклатура.Наименование);
			Продолжить;
		КонецЕсли;
		УслугиСтрока = УслугиСтрока + ", " + Строка(СтрокаТЧ.Номенклатура.Наименование);
	КонецЦикла;
	
	Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		ЗаписьОтменена = Истина;
	Иначе
		ЗаписьОтменена = Ложь;
	КонецЕсли;
	
	ДатаИВремя = ДокументОбъект.Старт;
	Сумма = ДокументОбъект.СуммаДокумента;
	
	Возврат Новый Структура("РесурсСтрока, УслугиСтрока, ЗаписьОтменена, ДатаИВремя, Сумма", РесурсСтрока, УслугиСтрока, ЗаписьОтменена, ДатаИВремя,Сумма);
	
КонецФункции

Функция СформироватьХеш(СтрокаДляХеша)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Хеш.Добавить(СтрокаДляХеша);
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

Процедура ПолучитьДанныеОнлайнЗаписи(Знач СтруктураОтвета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ИспользоватьОнлайнЗапись КАК ИспользоватьОнлайнЗапись
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.Вставить("ИспользоватьОнлайнЗапись", ВыборкаДетальныеЗаписи.ИспользоватьОнлайнЗапись);
	КонецЕсли;
	
	Если СтруктураОтвета.ИспользоватьОнлайнЗапись Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПубликацииМЛК.ПакетСРесурсами КАК ПакетСРесурсами,
		|	НастройкиПубликацииМЛК.ПакетСУслугами КАК ПакетСУслугами,
		|	НастройкиПубликацииМЛК.ПакетСРесурсамиИУслугами КАК ПакетСРесурсамиИУслугами,
		|	НастройкиПубликацииМЛК.НаименованиеРесурса КАК НаименованиеРесурса,
		|	НастройкиПубликацииМЛК.НаименованиеРесурсаВВинительномПадеже КАК НаименованиеРесурсаВВинительномПадеже,
		|	НастройкиПубликацииМЛК.НаименованиеРесурсаВДательномПадеже КАК НаименованиеРесурсаВДательномПадеже,
		|	НастройкиПубликацииМЛК.НаименованиеРесурсаВРодительномПадеже КАК НаименованиеРесурсаВРодительномПадеже,
		|	НастройкиПубликацииМЛК.ИспользоватьКартинкиРесурсов КАК ИспользоватьКартинкиРесурсов,
		|	НастройкиПубликацииМЛК.ИспользоватьКартинкиУслуг КАК ИспользоватьКартинкиУслуг,
		|	НастройкиПубликацииМЛК.РежимПодтвержденияЗаписи КАК РежимПодтвержденияЗаписи,
		|	НастройкиПубликацииМЛК.ПорядокЗаписи КАК ПорядокЗаписи,
		|	НастройкиПубликацииМЛК.ИспользоватьВыборРесурса КАК ИспользоватьВыборРесурса,
		|	НастройкиПубликацииМЛК.ВариантЗаписиНаУслуги КАК ВариантЗаписиНаУслуги,
		|	НастройкиПубликацииМЛК.РазрешитьЗагрузкуИсторииЗаписей КАК РазрешитьЗагрузкуИсторииЗаписей,
		|	НастройкиПубликацииМЛК.ТребоватьПодтвержденияДляНовогоКлиента КАК ТребоватьПодтвержденияДляНовогоКлиента,
		|	НастройкиПубликацииМЛК.ВариантПодтвержденияНовогоКлиента КАК ВариантПодтвержденияНовогоКлиента,
		|	НастройкиПубликацииМЛК.ВариантОтбораУслуг КАК ВариантОтбораУслуг
		|ИЗ
		|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтруктураОтвета.Вставить("ПакетСРесурсами", ВыборкаДетальныеЗаписи.ПакетСРесурсами);
			СтруктураОтвета.Вставить("ПакетСУслугами", ВыборкаДетальныеЗаписи.ПакетСУслугами);
			СтруктураОтвета.Вставить("ПакетСРесурсамиИУслугами", ВыборкаДетальныеЗаписи.ПакетСРесурсамиИУслугами);
			СтруктураОтвета.Вставить("НаименованиеРесурса", ВыборкаДетальныеЗаписи.НаименованиеРесурса);
			СтруктураОтвета.Вставить("НаименованиеРесурсаВВинительномПадеже", ВыборкаДетальныеЗаписи.НаименованиеРесурсаВВинительномПадеже);
			СтруктураОтвета.Вставить("НаименованиеРесурсаВДательномПадеже", ВыборкаДетальныеЗаписи.НаименованиеРесурсаВДательномПадеже);
			СтруктураОтвета.Вставить("НаименованиеРесурсаВРодительномПадеже", ВыборкаДетальныеЗаписи.НаименованиеРесурсаВРодительномПадеже);
			СтруктураОтвета.Вставить("ИспользоватьКартинкиРесурсов", ВыборкаДетальныеЗаписи.ИспользоватьКартинкиРесурсов);
			СтруктураОтвета.Вставить("ИспользоватьКартинкиУслуг", ВыборкаДетальныеЗаписи.ИспользоватьКартинкиУслуг);
			СтруктураОтвета.Вставить("РежимПодтвержденияЗаписи", ВыборкаДетальныеЗаписи.РежимПодтвержденияЗаписи);
			СтруктураОтвета.Вставить("ПорядокЗаписи", ВыборкаДетальныеЗаписи.ПорядокЗаписи);
			СтруктураОтвета.Вставить("ИспользоватьВыборРесурса", ВыборкаДетальныеЗаписи.ИспользоватьВыборРесурса);
			СтруктураОтвета.Вставить("ВариантЗаписиНаУслуги", ВыборкаДетальныеЗаписи.ВариантЗаписиНаУслуги);
			СтруктураОтвета.Вставить("РазрешитьЗагрузкуИсторииЗаписей", ВыборкаДетальныеЗаписи.РазрешитьЗагрузкуИсторииЗаписей);
			СтруктураОтвета.Вставить("ТребоватьПодтвержденияДляНовогоКлиента", ВыборкаДетальныеЗаписи.ТребоватьПодтвержденияДляНовогоКлиента);
			СтруктураОтвета.Вставить("ВариантПодтвержденияНовогоКлиента", ВыборкаДетальныеЗаписи.ВариантПодтвержденияНовогоКлиента);
			СтруктураОтвета.Вставить("ВариантОтбораУслуг", ВыборкаДетальныеЗаписи.ВариантОтбораУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСтраницуОНас(Знач СтруктураОтвета)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ИспользоватьОНас КАК ИспользоватьОНас,
	|	НастройкиПубликацииМЛК.ВерсияОНас КАК ВерсияОНас
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.Вставить("ИспользоватьОНас", ВыборкаДетальныеЗаписи.ИспользоватьОНас);
		СтруктураОтвета.Вставить("ВерсияОНас", ВыборкаДетальныеЗаписи.ВерсияОНас);
	КонецЕсли;
	
	Если СтруктураОтвета.ИспользоватьОНас Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПубликацииМЛК.ПакетОНас КАК ПакетОНас
		|ИЗ
		|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СтруктураОтвета.Вставить("ПакетОНас", ВыборкаДетальныеЗаписи.ПакетОНас);
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПолучитьЛоготип(Знач СтруктураОтвета)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.Логотип КАК Логотип
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.Вставить("ПакетСЛоготипом", ВыборкаДетальныеЗаписи.Логотип);
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПолучитьОсновныеДанные(Знач СтруктураОтвета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ПакетСОсновнымиДанными КАК ПакетСОсновнымиДанными
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.Вставить("ПакетСОсновнымиДанными", ВыборкаДетальныеЗаписи.ПакетСОсновнымиДанными);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВерсии(ВерсияЛоготипа, ВерсияОНас, ВерсияОнлайнЗаписи, ВерсияОсновныхДанных, ВерсияЗаказаТоваров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВерсияОсновныхДанных КАК ВерсияОсновныхДанных,
	|	НастройкиПубликацииМЛК.ВерсияЛоготипа КАК ВерсияЛоготипа,
	|	НастройкиПубликацииМЛК.ВерсияОНас КАК ВерсияОНас,
	|	НастройкиПубликацииМЛК.ВерсияОнлайнЗаписи КАК ВерсияОнлайнЗаписи,
	|	НастройкиПубликацииМЛК.ВерсияЗаказаТоваров КАК ВерсияЗаказаТоваров
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВерсияОсновныхДанных = ВыборкаДетальныеЗаписи.ВерсияОсновныхДанных;
		ВерсияЛоготипа = ВыборкаДетальныеЗаписи.ВерсияЛоготипа;
		ВерсияОНас = ВыборкаДетальныеЗаписи.ВерсияОНас;
		ВерсияОнлайнЗаписи = ВыборкаДетальныеЗаписи.ВерсияОнлайнЗаписи;
		ВерсияЗаказаТоваров = ВыборкаДетальныеЗаписи.ВерсияЗаказаТоваров;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруЗапроса(СтрокаЗапроса)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаЗапроса);
	СтруктураЗапроса = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	Возврат СтруктураЗапроса
	
КонецФункции

Функция СформироватьСтрокуОтправки(СтруктураОтвета)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета, НазначениеТипаXML.Явное);
	СтрокаОтправки = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаОтправки
	
КонецФункции

Функция ПолучитьМинимальныйИнтервалУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.МинимальныйИнтервалУслуги КАК МинимальныйИнтервалУслуги
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Инфо = ИнформацияОбОшибке();
	КонецПопытки;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.МинимальныйИнтервалУслуги;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьВидЦен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВидЦенУслуг КАК ВидЦенУслуг
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ВидЦенУслуг;
	КонецЕсли;
	
КонецФункции

Функция СоздатьОбновитьЗаказ(СтруктураЗапроса, Ресурс, ВидЦен)
	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	ДокументОбъект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	ДокументОбъект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	ДокументОбъект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12Покупатель;
	
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтруктураЗапроса.УИКонтрагента);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураВозврата = НайтиСоздатьКонтрагента(СтруктураЗапроса.Имя, СтруктураЗапроса.Телефон, СтруктураЗапроса.Почта, ДокументОбъект);
		Контрагент = СтруктураВозврата.Контрагент;
		Договор = СтруктураВозврата.Договор;
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентНайден = СтруктураВозврата.КонтрагентНайден;
	Иначе
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентОбъект.Ссылка);
		КонтрагентНайден = Истина;
	КонецЕсли;
	
	НайтиСоздатьОбновитьКонтакт(КонтрагентОбъект.КонтактноеЛицо, СтруктураЗапроса.Имя, СтруктураЗапроса.Телефон, СтруктураЗапроса.Почта);
	
	ДокументОбъект.Контрагент = Контрагент;
	ДокументОбъект.Договор = Договор;
	
	Если ТребоватьПодтверждениеДляНовогоКлиента() И ПолучитьВариантПодтвержденияНовогоКлиента() = Перечисления.ВариантыПодтвержденияНовогоКлиента.Вручную И НЕ КонтрагентНайден Тогда
		СтруктураСВидомИСостоянием = ПолучитьВидЗаказНарядаИСостояниеЗаказНарядаДляНовогоКлиента();
		ДокументОбъект.ВидЗаказа = СтруктураСВидомИСостоянием.ВидЗаказНарядаДляНовыхКлиентов;
		ДокументОбъект.СостояниеЗаказа = СтруктураСВидомИСостоянием.СостояниеЗаказНарядаДляНовыхКлиентов;
	Иначе
		ДокументОбъект.ВидЗаказа = ПолучитьВидЗаказаДляНовойЗаписи();
		ДокументОбъект.СостояниеЗаказа = ПолучитьСостояниеЗаказНарядаДляНовойЗаписи();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДокументОбъект.Организация, , ДокументОбъект.Дата);
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.Комментарий = СтруктураЗапроса.Комментарий;
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументОбъект.ВалютаДокумента = Константы.ВалютаУчета.Получить();
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	
	ДокументОбъект.ВидЦен = ВидЦен;
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	Для каждого УИ Из СтруктураЗапроса.МассивСУИУслуг Цикл
		Услуга = Справочники.Номенклатура.ПолучитьСсылку(УИ);
		НоваяСтрока = ДокументОбъект.Работы.Добавить();
		НоваяСтрока.ТипНоменклатурыУслуга = Истина;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Кратность = 1;
		НоваяСтрока.Номенклатура = Услуга;
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Услуга.ВидСтавкиНДС);
		ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);
	КонецЦикла;
	
	Если СтруктураЗапроса.ДатаВремяЗаписи = Дата(1, 1, 1) Тогда
		НоваяДатаЗаписи = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		ДокументОбъект.Старт = СтруктураЗапроса.ДатаВремяЗаписи;
		ДокументОбъект.Финиш = ДокументОбъект.Старт + 60 * СтруктураЗапроса.Длительность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ресурс) Тогда
		НоваяСтрокаРесурсы = ДокументОбъект.РесурсыПредприятия.Добавить();
		Если СтруктураЗапроса.ДатаВремяЗаписи = Дата(1, 1, 1) Тогда
			НоваяСтрокаРесурсы.Старт = НоваяДатаЗаписи;
			НоваяСтрокаРесурсы.Финиш = НоваяДатаЗаписи + 60 * СтруктураЗапроса.Длительность;
		Иначе
			НоваяСтрокаРесурсы.Старт = СтруктураЗапроса.ДатаВремяЗаписи;
			НоваяСтрокаРесурсы.Финиш = ДокументОбъект.Финиш;
		КонецЕсли;
		НоваяСтрокаРесурсы.Мощность = 1;
		НоваяСтрокаРесурсы.РесурсПредприятия = Ресурс;
	Иначе
		РежимЗаполненияРесурса = ПолучитьРежимЗаполненияРесурса();
		Если РежимЗаполненияРесурса = Перечисления.РежимыЗаполненияРесурса.ПоМенееЗагруженному И СтруктураЗапроса.ДатаВремяЗаписи <> Дата(1, 1, 1) Тогда
			Ресурс = ПолучитьМенееЗагруженныйРесурс(СтруктураЗапроса.Длительность, СтруктураЗапроса.ДатаВремяЗаписи, ТекущаяДатаСеанса());
			Если Ресурс <> Неопределено Тогда
				НоваяСтрокаРесурсы = ДокументОбъект.РесурсыПредприятия.Добавить();
				НоваяСтрокаРесурсы.Старт = СтруктураЗапроса.ДатаВремяЗаписи;
				НоваяСтрокаРесурсы.Финиш = ДокументОбъект.Финиш;
				НоваяСтрокаРесурсы.Мощность = 1;
				НоваяСтрокаРесурсы.РесурсПредприятия = Ресурс;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		СтруктураВозврата = Новый Структура("УИКонтрагента, УИЗаказНаряда", Контрагент.Ссылка.УникальныйИдентификатор(), ДокументОбъект.Ссылка.УникальныйИдентификатор());
		Если РежимЗаполненияРесурса = Перечисления.РежимыЗаполненияРесурса.ПоМенееЗагруженному И ЗначениеЗаполнено(Ресурс) Тогда
			СтруктураВозврата.Вставить("УИРесурса", Ресурс.УникальныйИдентификатор());
		КонецЕсли;
		Возврат СтруктураВозврата
		
	Исключение
		ИмяСобытия = "МобильныйЛичныйКабинет.Проведение заказ-наряда";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗаказПокупателя,, 
		"Не удалось провести заказ-наряд " + ДокументОбъект.Номер);
	КонецПопытки;
	
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		СтруктураВозврата = Новый Структура("УИКонтрагента, УИЗаказНаряда", Контрагент.Ссылка.УникальныйИдентификатор(), ДокументОбъект.Ссылка.УникальныйИдентификатор());
		Если РежимЗаполненияРесурса = Перечисления.РежимыЗаполненияРесурса.ПоМенееЗагруженному И ЗначениеЗаполнено(Ресурс) Тогда
			СтруктураВозврата.Вставить("УИРесурса", Ресурс.УникальныйИдентификатор());
		КонецЕсли;
		Возврат СтруктураВозврата
		
	Исключение
		ИмяСобытия = "МобильныйЛичныйКабинет.Запись заказ-наряда";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя,, 
		"Не удалось записать заказ-наряд по клиенту "+ СтруктураЗапроса.Имя);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСостояниеЗаказНарядаДляНовойЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.СостояниеЗаказНаряда КАК СостояниеЗаказНаряда
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СостояниеЗаказНаряда;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидЗаказаДляНовойЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВидЗаказНаряда КАК ВидЗаказНаряда
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ВидЗаказНаряда;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидЗаказНарядаИСостояниеЗаказНарядаДляНовогоКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВидЗаказНарядаДляНовыхКлиентов КАК ВидЗаказНарядаДляНовыхКлиентов,
	|	НастройкиПубликацииМЛК.СостояниеЗаказНарядаДляНовыхКлиентов КАК СостояниеЗаказНарядаДляНовыхКлиентов
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Новый Структура("ВидЗаказНарядаДляНовыхКлиентов, СостояниеЗаказНарядаДляНовыхКлиентов", ВыборкаДетальныеЗаписи.ВидЗаказНарядаДляНовыхКлиентов, ВыборкаДетальныеЗаписи.СостояниеЗаказНарядаДляНовыхКлиентов);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВариантПодтвержденияНовогоКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВариантПодтвержденияНовогоКлиента КАК ВариантПодтвержденияНовогоКлиента
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ВариантПодтвержденияНовогоКлиента;
	КонецЕсли;
	
КонецФункции

Функция ТребоватьПодтверждениеДляНовогоКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ТребоватьПодтвержденияДляНовогоКлиента КАК ТребоватьПодтвержденияДляНовогоКлиента
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ТребоватьПодтвержденияДляНовогоКлиента;
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьКонтрагента(Имя, Телефон, Почта, ДокументОбъект)
	
	ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоНомеруТелефона(Телефон);
	
	Если ПокупательСсылка = Неопределено Тогда
		ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоАдресуЭП(Почта, Истина, Истина);
	КонецЕсли;
	
	ДоговорПоУмолчанию = Неопределено;
	СтруктураВозврата = Новый Структура;
	
	Если ПокупательСсылка = Неопределено Тогда
		СтруктураВозврата = СоздатьКонтрагентаДоговор(Имя, Телефон, Почта, ДокументОбъект);
		СтруктураВозврата.Вставить("КонтрагентНайден", Ложь);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ПокупательСсылка);
		СтруктураВозврата.Вставить("Контрагент", ПокупательСсылка);
		СтруктураВозврата.Вставить("Договор", ДоговорПоУмолчанию);
		СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентКонтактСрезПоследних.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт = &Контакт
		|	И НЕ СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)
		|	И СвязиКонтрагентКонтактСрезПоследних.Контрагент.КонтактноеЛицо = &Контакт";
		Запрос.УстановитьПараметр("Контакт", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			СтруктураВозврата = СоздатьКонтрагентаДоговор(Имя, Телефон, Почта, ДокументОбъект);
			СтруктураВозврата.Вставить("КонтрагентНайден", Ложь);
			
		Иначе
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
				СтруктураВозврата.Вставить("Договор", Выборка.Договор);
				СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Лиды") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентЛид.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентЛид.Контрагент = ОсновныеДоговорыКонтрагента.Договор
		|ГДЕ
		|	СвязиКонтрагентЛид.Лид = &Лид";
		Запрос.УстановитьПараметр("Лид", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураВозврата.Вставить("Договор", Выборка.Договор);
			СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьКонтрагентаДоговор(Имя, Телефон, Почта, ДокументОбъект)
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Наименование", Имя);
	
	ИсточникПривлечения = НСтр("ru='Мобильное приложение ""Кабинет клиента""'");
	
	элИсточникПривлечения = Справочники.ИсточникиПривлеченияПокупателей.НайтиПоНаименованию("Мобильное приложение ""Кабинет клиента""");
	Если НЕ ЗначениеЗаполнено(элИсточникПривлечения) Тогда
		
		НовИсточник = Справочники.ИсточникиПривлеченияПокупателей.СоздатьЭлемент();
		НовИсточник.Наименование = ИсточникПривлечения;
		НовИсточник.ДатаСоздания = ТекущаяДата();
		Попытка
			НовИсточник.Записать();
		Исключение
		КонецПопытки;
		
		КонтрагентОбъект.ИсточникПривлеченияПокупателя = НовИсточник.Ссылка;
	Иначе
		КонтрагентОбъект.ИсточникПривлеченияПокупателя = элИсточникПривлечения;
	КонецЕсли;
	
	КонтрагентОбъект.Заполнить(СтруктураЗаполнения);
	КонтрагентОбъект.Покупатель = Истина;
	Контакт = НайтиСоздатьОбновитьКонтакт(Неопределено, Имя, Телефон, Почта);
	КонтрагентОбъект.КонтактноеЛицо = Контакт;
	КонтрагентОбъект.Записать();
	ПокупательСсылка = КонтрагентОбъект.Ссылка;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(КонтрагентОбъект.Ссылка, Справочники.Организации.ОсновнаяОрганизация, СписокВидовДоговора);
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
		Договор.Организация = ДокументОбъект.Организация;
		Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Договор.ВидЦен = ДокументОбъект.ВидЦен;
		Договор.Владелец = КонтрагентОбъект.Ссылка;
		Договор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Если ПустаяСтрока(Договор.Наименование) Тогда
			Договор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(Договор);
		КонецЕсли;
		Договор.Записать();
		ДоговорПоУмолчанию = Договор.Ссылка;
		
		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(Договор);
		
	КонецЕсли;
	
	РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(ПокупательСсылка, Контакт);
	
	Возврат Новый Структура("Контрагент, Договор", ПокупательСсылка, ДоговорПоУмолчанию);
	
КонецФункции

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Неопределено);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Документ, СтрокаТабличнойЧасти, СтруктураДанные);

		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтрокаТабличнойЧасти.Цена = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Кратность;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

Функция НайтиСоздатьОбновитьКонтакт(Контакт, Имя, Телефон, Почта)
	
	ИсточникПривлечения = НСтр("ru='Мобильное приложение ""Кабинет клиента""'");
	
	Если Контакт = Неопределено Тогда
		Контакт = Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Контакт = ТелефонияСервер.ПолучитьАбонентаПоНомеруТелефона(Телефон, Ложь, Истина, Ложь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		КонтактОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		ЭтоНовыйКонтакт = Истина;
	Иначе
		КонтактОбъект = Контакт.ПолучитьОбъект();
		ЭтоНовыйКонтакт = Ложь;
	КонецЕсли;
	
	НеобходимоЗаписать = Ложь;
	
	Если ЭтоНовыйКонтакт Тогда
		элИсточникПривлечения = Справочники.ИсточникиПривлеченияПокупателей.НайтиПоНаименованию("Мобильное приложение ""Кабинет клиента""");
		Если НЕ ЗначениеЗаполнено(элИсточникПривлечения) Тогда
			
			НовИсточник = Справочники.ИсточникиПривлеченияПокупателей.СоздатьЭлемент();
			НовИсточник.Наименование = ИсточникПривлечения;
			НовИсточник.ДатаСоздания = ТекущаяДата();
			Попытка
				НовИсточник.Записать();
			Исключение
			КонецПопытки;
			
			КонтактОбъект.ИсточникПривлечения = НовИсточник.Ссылка;
		Иначе
			КонтактОбъект.ИсточникПривлечения = элИсточникПривлечения;
		КонецЕсли;
		
		КонтактОбъект.Наименование = Имя;
		
	КонецЕсли;
	
	ТелефонУжеЗаписан = Ложь;
	ПочтаУжеЗаписана = Ложь;
	
	Для каждого Строка Из КонтактОбъект.КонтактнаяИнформация Цикл
		Если ОбработатьНомерТелефона(Строка.Представление) = ОбработатьНомерТелефона(Телефон) И Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонУжеЗаписан = Истина;
		ИначеЕсли Строка.Представление = Почта И Строка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ПочтаУжеЗаписана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ТелефонУжеЗаписан Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтактОбъект, Телефон, 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, ТекущаяДатаСеанса(), Ложь);
		НеобходимоЗаписать = Истина;
	КонецЕсли;
	
	Если НЕ ПочтаУжеЗаписана И ЗначениеЗаполнено(Почта) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтактОбъект, Почта, 
		Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, ТекущаяДатаСеанса(), Ложь);
		НеобходимоЗаписать = Истина;
	КонецЕсли;
	
	Попытка
		Если НеобходимоЗаписать Тогда
			
			КонтактОбъект.Записать();
			
		КонецЕсли;
		
		Возврат КонтактОбъект.Ссылка;
		
	Исключение
	КонецПопытки;
	
КонецФункции

Функция ОтправитьSMSДляПодтвержденияНомера(НомерТелефона)
	
	КодПодтверждения = ПолучитьСгенерированныйКод();
	
	Текст = "Код подтверждения номера: " + КодПодтверждения;
	
	Массив = Новый Массив();
	Массив.Добавить(НомерТелефона);
	
	ОтправкаSMS.ОтправитьSMS(Массив, Текст);
	
	Возврат КодПодтверждения;
	
КонецФункции

Функция ОбработатьНомерТелефона(НомерТелефонаАбонента)
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%";
	Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Или СтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "-", "");
	
	Возврат ПоисковоеВыражение
	
КонецФункции

Функция ПолучитьРежимЗаполненияРесурса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.РежимЗаполненияРесурса КАК РежимЗаполненияРесурса
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.РежимЗаполненияРесурса;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИсториюЗаписей(ИсключающаяДатаС, ИсключающаяДатаПо, Контрагент)
	
	Если Контрагент = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Работы.(
	|		Номенклатура КАК Номенклатура
	|	) КАК Работы,
	|	ЗаказПокупателя.РесурсыПредприятия.(
	|		РесурсПредприятия КАК РесурсПредприятия
	|	) КАК РесурсыПредприятия,
	|	ЗаказПокупателя.ВариантЗавершения КАК ВариантЗавершения
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Контрагент = &Контрагент
	|	И (ЗаказПокупателя.Старт < &ИсключающаяДатаС
	|			ИЛИ ЗаказПокупателя.Старт > &ИсключающаяДатаПо)
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Старт УБЫВ";
	
	Запрос.УстановитьПараметр("ИсключающаяДатаПо", ИсключающаяДатаПо);
	Запрос.УстановитьПараметр("ИсключающаяДатаС", ИсключающаяДатаС);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("УИЗаказНаряда");
	ТаблицаЗначений.Колонки.Добавить("ДатаИВремя");
	ТаблицаЗначений.Колонки.Добавить("Сумма");
	ТаблицаЗначений.Колонки.Добавить("СписокУслугВСтроку");
	ТаблицаЗначений.Колонки.Добавить("РесурсВСтроку");
	ТаблицаЗначений.Колонки.Добавить("УИРесурса");
	ТаблицаЗначений.Колонки.Добавить("ЗаписьОтменена");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Строка = ТаблицаЗначений.Добавить();
		
		Строка.УИЗаказНаряда = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.ДатаИВремя = ВыборкаДетальныеЗаписи.Старт;
		Строка.Сумма = ВыборкаДетальныеЗаписи.СуммаДокумента;
		
		Если ВыборкаДетальныеЗаписи.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен И ВыборкаДетальныеЗаписи.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			Строка.ЗаписьОтменена = Истина;
		Иначе
			Строка.ЗаписьОтменена = Ложь;
		КонецЕсли;
		
		ВыборкаУслуг = ВыборкаДетальныеЗаписи.Работы.Выбрать();
		СписокУслугВСтроку = "";
		Счетчик = 0;
		Пока ВыборкаУслуг.Следующий() Цикл
			Если Счетчик = 0 Тогда
				СписокУслугВСтроку = СписокУслугВСтроку + ВыборкаУслуг.Номенклатура.Наименование;
				Счетчик = Счетчик + 1;
				Продолжить;
			КонецЕсли;
			СписокУслугВСтроку = СписокУслугВСтроку + ", " + ВыборкаУслуг.Номенклатура.Наименование;
		КонецЦикла;
		
		Строка.СписокУслугВСтроку = СписокУслугВСтроку;
		
		ВыборкаРесурсов = ВыборкаДетальныеЗаписи.РесурсыПредприятия.Выбрать();
		РесурсВСтроку = "";
		Счетчик = 0;
		Пока ВыборкаРесурсов.Следующий() Цикл
			Если Счетчик = 0 Тогда
				РесурсВСтроку = РесурсВСтроку + ВыборкаРесурсов.РесурсПредприятия.Наименование;
				Счетчик = Счетчик + 1;
				Строка.УИРесурса = ВыборкаРесурсов.РесурсПредприятия.УникальныйИдентификатор();
				Продолжить;
			КонецЕсли;
			РесурсВСтроку = РесурсВСтроку + ", " + ВыборкаРесурсов.РесурсПредприятия.Наименование;
		КонецЦикла;
		
		Строка.РесурсВСтроку = РесурсВСтроку;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НайтиКонтрагента(Телефон, Почта)
	
	ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоНомеруТелефона(Телефон);
	
	Если ПокупательСсылка = Неопределено И Почта <> Неопределено Тогда
		ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоАдресуЭП(Почта, Истина, Истина);
	КонецЕсли;
	
	ДоговорПоУмолчанию = Неопределено;
	СтруктураВозврата = Новый Структура;
	
	Если ПокупательСсылка = Неопределено Тогда
		СтруктураВозврата.Вставить("КонтрагентНайден", Ложь);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтруктураВозврата.Вставить("Контрагент", ПокупательСсылка);
		СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентКонтактСрезПоследних.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт = &Контакт
		|	И НЕ СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)
		|	И СвязиКонтрагентКонтактСрезПоследних.Контрагент.КонтактноеЛицо = &Контакт";
		Запрос.УстановитьПараметр("Контакт", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СтруктураВозврата.Вставить("КонтрагентНайден", Ложь);
		Иначе
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
				СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
				Прервать;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Лиды") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиКонтрагентЛид.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентЛид.Контрагент = ОсновныеДоговорыКонтрагента.Договор
		|ГДЕ
		|	СвязиКонтрагентЛид.Лид = &Лид";
		Запрос.УстановитьПараметр("Лид", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураВозврата.Вставить("КонтрагентНайден", Истина);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьСгенерированныйКод()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	КодПодтверждения = ГСЧ.СлучайноеЧисло(1000, 9999);
	
	КодПодтверждения = СтрЗаменить(Строка(КодПодтверждения), Символы.НПП, "");
	Возврат КодПодтверждения;
	
КонецФункции

Функция ПолучитьСписокРесурсов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиЗаписьНаУслуги.Ресурс КАК Ресурс
	|ИЗ
	|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
	|ГДЕ
	|	НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.МобильноеПриложение)
	|	И НастройкиЗаписьНаУслуги.Ресурс <> ЗНАЧЕНИЕ(Справочник.КлючевыеРесурсы.ПустаяСсылка)
	|	И НЕ НастройкиЗаписьНаУслуги.Ресурс.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ресурс")
	
КонецФункции

Функция СоздатьЗаказ(СтруктураЗапроса)
	
	ПлатежнаяСсылка = "";
	
	НастройкиКонструктора = ПолучитьНастройкиДляСозданияЗаказа();
	
	НовыйОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтруктураЗапроса.УИКонтрагента);
	
	Если Не ЗначениеЗаполнено(Контрагент) ИЛИ СокрЛП(Контрагент.ВерсияДанных) = "" Тогда
		СтруктураВозврата = НайтиСоздатьКонтрагента(СтруктураЗапроса.Имя, СтруктураЗапроса.Телефон, СтруктураЗапроса.Почта, НовыйОбъект);
		Контрагент = СтруктураВозврата.Контрагент;
		Договор = СтруктураВозврата.Договор;
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентНайден = СтруктураВозврата.КонтрагентНайден;
	Иначе
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентОбъект.Ссылка);
		КонтрагентНайден = Истина;
	КонецЕсли;
	
	НайтиСоздатьОбновитьКонтакт(КонтрагентОбъект.КонтактноеЛицо, СтруктураЗапроса.Имя, СтруктураЗапроса.Телефон, СтруктураЗапроса.Почта);
	
	НовыйОбъект.Контрагент = Контрагент;
	НовыйОбъект.Договор = Договор;
	
	
	НовыйОбъект.Дата = ТекущаяДатаСеанса();
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Автор) Тогда
		НовыйОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Организация) Тогда
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнаяОрганизация");
		
		НовыйОбъект.Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	КонецЕсли;
	Если ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И НЕ ЗначениеЗаполнено(НовыйОбъект.НалогообложениеНДС) Тогда
		НовыйОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(НовыйОбъект.Организация, , НовыйОбъект.Дата);
	КонецЕсли;
	
	НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	НовыйОбъект.Автор,
	"ОсновнойОтветственный");
	
	НовыйОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Период", НовыйОбъект.Дата);
	Запрос.УстановитьПараметр("Валюта", НовыйОбъект.Договор.ВалютаРасчетов);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйОбъект.Курс = ВыборкаДетальныеЗаписи.Курс;
		НовыйОбъект.Кратность = ВыборкаДетальныеЗаписи.Кратность;
	Иначе
		НовыйОбъект.Курс = 1;
		НовыйОбъект.Кратность = 1;
	КонецЕсли;
	
	НовыйОбъект.ДатаОтгрузки = НовыйОбъект.Дата;
	
	НовыйОбъект.ВидЗаказа = НастройкиКонструктора.ВидЗаказаПокупателя;
	НовыйОбъект.СостояниеЗаказа = НастройкиКонструктора.СостояниеЗаказаПокупателя;
	
	НовыйОбъект.СтруктурнаяЕдиницаПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	НовыйОбъект.Автор,
	"ОсновноеПодразделение");
	
	НовыйОбъект.СтруктурнаяЕдиницаПродажи = ?(ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиницаПродажи), НовыйОбъект.СтруктурнаяЕдиницаПродажи, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
	НовыйОбъект.Автор,
	"ОсновнойВидЦенПродажи");
	
	//НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, НовыйОбъект.Договор.ВидЦен);
	//НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);
	НовыйОбъект.ВидЦен = НастройкиКонструктора.ВидЦенТоваров;
	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеДатыОтгрузкиВЗаказеПокупателя");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если НовыйОбъект.ПоложениеДатыОтгрузки <> ЗначениеНастройки Тогда
			НовыйОбъект.ПоложениеДатыОтгрузки = ЗначениеНастройки;
		КонецЕсли;
	Иначе
		НовыйОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	Для каждого Строка Из СтруктураЗапроса.Корзина Цикл
		
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Строка.УИТовара);
		
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
		ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
		
		НоваяСтрока.Цена = Строка.Цена;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.Сумма = Строка.Сумма;
		НоваяСтрока.ДатаОтгрузки = НовыйОбъект.Дата;
		
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(НоваяСтрока.Номенклатура);
		
		
		Если Номенклатура.ЭтоНабор Тогда
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Константы.УчетПоКомпании.Компания(НовыйОбъект.Организация));
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", НовыйОбъект.НалогообложениеНДС);
			СтруктураДанные.Вставить("Цена", НоваяСтрока.Цена);
			СтруктураДанные.Вставить("ДатаОбработки", 		НовыйОбъект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	НовыйОбъект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС",	НовыйОбъект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("СтавкаНДС", 	НоваяСтрока.СтавкаНДС);
			СтруктураДанные.Вставить("ВидЦен", НовыйОбъект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			
			НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
			ЗаменитьСтрокуЗапасовДаннымиНабора(НовыйОбъект, НоваяСтрока, СтруктураДанные);
		Иначе
			
			РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	НовыйОбъект.Комментарий = СтруктураЗапроса.Комментарий;
	
	НовыйОбъект.АдресДоставки = СтруктураЗапроса.АдресДоставки;
	
	// ----------------------------------------
	НовыйОбъект.УстановитьНовыйНомер();
	
	НовыйОбъект.СпособДоставки = СтруктураЗапроса.СпособДоставки;
	
	Если НовыйОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи Тогда
		
		ПунктВыдачиЗаказа = Справочники.ПунктыВыдачиЗаказа.ПолучитьСсылку(СтруктураЗапроса.УИПунктаВыдачи);
		
		Если ПунктВыдачиЗаказа <> Справочники.ПунктыВыдачиЗаказа.ПустаяСсылка() Тогда
			НовыйОбъект.ПунктВыдачиЗаказа = ПунктВыдачиЗаказа;
			НовыйОбъект.СлужбаДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктВыдачиЗаказа, "Владелец");
		КонецЕсли;
	Иначе
		НовыйОбъект.СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	КонецЕсли;
	
	
	НовыйОбъект.КонтактноеЛицо = КонтрагентОбъект.КонтактноеЛицо;
	
	НовыйОбъект.КонтактныйТелефон = СтруктураЗапроса.Телефон;
	
	НовыйОбъект.СтоимостьДоставки = СтруктураЗапроса.СтоимостьДоставки;
	
	Если ЗначениеЗаполнено(СтруктураЗапроса.Почта) Тогда
		НовыйОбъект.ПочтаПолучателя = СтруктураЗапроса.Почта;
	КонецЕсли;
	
	Попытка
		НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если СтруктураЗапроса.НеобходимоВернутьПлатежнуюСсылку Тогда
			ПлатежнаяСсылка = СформироватьПлатежнуюСсылку(НовыйОбъект);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("УИКонтрагента, УИЗаказаПокупателя, НомерЗаказаВЦБ, ДатаИзмененияВЦБ, ПлатежнаяСсылка", НовыйОбъект.Контрагент.Ссылка.УникальныйИдентификатор(), НовыйОбъект.Ссылка.УникальныйИдентификатор(), НовыйОбъект.Номер, НовыйОбъект.ДатаИзменения, ПлатежнаяСсылка);
		
		Возврат СтруктураВозврата;
		
	Исключение
		ИмяСобытия = "МобильныйЛичныйКабинет.Проведение заказа покупателя";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Документы.ЗаказПокупателя,, 
		"Не удалось провести заказ покупателя " + НовыйОбъект.Номер);
	КонецПопытки;
	
	Попытка
		НовыйОбъект.ОбменДанными.Загрузка = Истина;
		
		// Заполняем УИП для оплаты
		Если НЕ ЗначениеЗаполнено(НовыйОбъект.ИдентификаторПлатежа) Тогда
			НовыйОбъект.ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(НовыйОбъект);
		КонецЕсли;
		
		НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если СтруктураЗапроса.НеобходимоВернутьПлатежнуюСсылку Тогда
			ПлатежнаяСсылка = СформироватьПлатежнуюСсылку(НовыйОбъект);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("УИКонтрагента, УИЗаказаПокупателя, НомерЗаказаВЦБ, ДатаИзмененияВЦБ, ПлатежнаяСсылка", НовыйОбъект.Контрагент.Ссылка.УникальныйИдентификатор(), НовыйОбъект.Ссылка.УникальныйИдентификатор(), НовыйОбъект.Номер, НовыйОбъект.ДатаИзменения, ПлатежнаяСсылка);
		Возврат СтруктураВозврата;
		
	Исключение
		ИмяСобытия = "МобильныйЛичныйКабинет.Запись заказа покупателя";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя,, 
		"Не удалось записать заказ покупателя по клиенту "+ СтруктураЗапроса.Имя);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Объект, СтрокаТабличнойЧасти, СтруктураДанные)
	
	ИндексСтроки = Объект.Запасы.Индекс(СтрокаТабличнойЧасти);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество()=0 Тогда
		ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
	Иначе
		ДобавленнаяСтрока = ДобавленныеСтроки[0];
	КонецЕсли; 
	ДобавленнаяСтрока.Количество = ДобавленнаяСтрока.Количество+?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
	ДобавленыСтроки = Ложь;
	
	Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСостава);
		СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
		СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество()>0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
			Если СтруктураДанные.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") Тогда
				Если НоваяСтрока.Количество+ОписаниеСостава.Количество<>0 И НоваяСтрока.Цена<>ОписаниеСостава.Цена Тогда
					НоваяСтрока.Цена = (НоваяСтрока.Количество*НоваяСтрока.Цена+ОписаниеСостава.Количество*ОписаниеСостава.Цена)/(НоваяСтрока.Количество+ОписаниеСостава.Количество);
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			НоваяСтрока = Объект.Запасы.Вставить(ИндексСтроки);
			ИндексСтроки = ИндексСтроки+1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава, , "Количество, ДоляСтоимости");
			НоваяСтрока.НоменклатураНабора = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ХарактеристикаНабора = СтрокаТабличнойЧасти.Характеристика;
			НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
			ДобавленыСтроки = Истина;
		КонецЕсли; 
		
		НоваяСтрока.Количество = НоваяСтрока.Количество+ОписаниеСостава.Количество*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
		НоваяСтрока.Резерв = НоваяСтрока.Резерв+ОписаниеСостава.Количество*СтрокаТабличнойЧасти.Резерв;
		НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимости+ОписаниеСостава.ДоляСтоимости*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
			НоваяСтрока.Сумма = 0;
		ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0 И НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если Объект.СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.Сумма / ((СтавкаНДС + 100) / 100);
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
		КонецЕсли;
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
	КонецЦикла;
	
	Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Функция ПолучитьСтавкуНДС(Товар)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ВидСтавкиНДС = &ВидСтавкиНДС";
	
	Запрос.УстановитьПараметр("ВидСтавкиНДС", Товар.ВидСтавкиНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	
	
	
КонецФункции

Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока)
	
	Если НовыйОбъект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	Иначе
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НовыйОбъект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаНДС = ?(
	НовыйОбъект.СуммаВключаетНДС,
	НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
	НоваяСтрока.Сумма * СтавкаНДС / 100);
	
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(НовыйОбъект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

Функция СформироватьПлатежнуюСсылку(Заказ)
	
	ОснованиеПлатежа = Заказ.Ссылка;
	НастройкаЯндексКассы = ИнтеграцияСЯндексКассойСлужебный.НастройкаЯндексКассыОснованияПлатежа(ОснованиеПлатежа);
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПлатежа) ИЛИ НастройкаЯндексКассы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("ОснованиеПлатежа", ОснованиеПлатежа);
	ВходящиеПараметры.Вставить("НастройкаЯндексКассы", НастройкаЯндексКассы);
	ВходящиеПараметры.Вставить("КонтактныеДанныеЧека", КонтактныеДанныеЧека(Заказ));
	
	Возврат ИнтеграцияСЯндексКассойСлужебный.ПлатежнаяСсылка(ВходящиеПараметры);
	
КонецФункции

Функция КонтактныеДанныеЧека(Заказ)
	
	КонтактныеДанныеЧека = "";
	
	Если ЗначениеЗаполнено(Заказ.ПочтаПолучателя) Тогда
		КонтактныеДанныеЧека = Заказ.ПочтаПолучателя;
	Иначе
		КонтактныеДанныеЧека = "+7" + ТелефонВСтрокуВнутр(Заказ.КонтактныйТелефон);
	КонецЕсли; 
	
	Возврат КонтактныеДанныеЧека;
	
КонецФункции

Функция ТелефонВСтрокуВнутр(Знач Телефон)
	
	СтрокаТелефона = "";
	Числа = "0123456789";
	
	ДлинаПредставленияТелефона = СтрДлина(Телефон);
	Для Индекс = 1 По ДлинаПредставленияТелефона Цикл
		
		Символ = Сред(Телефон, Индекс, 1);
		Если СтрНайти(Числа, Символ) > 0 Тогда
			СтрокаТелефона = СтрокаТелефона + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Прав(СтрокаТелефона, 10);
	
КонецФункции

Функция ПолучитьНастройкиДляСозданияЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.ВидЗаказаПокупателя КАК ВидЗаказаПокупателя,
	|	НастройкиПубликацииМЛК.СостояниеЗаказаПокупателя КАК СостояниеЗаказаПокупателя,
	|	НастройкиПубликацииМЛК.ВидЦенТоваров КАК ВидЦенТоваров
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат Новый Структура("ВидЗаказаПокупателя, СостояниеЗаказаПокупателя, ВидЦенТоваров", ВыборкаДетальныеЗаписи.ВидЗаказаПокупателя, ВыборкаДетальныеЗаписи.СостояниеЗаказаПокупателя, ВыборкаДетальныеЗаписи.ВидЦенТоваров);
	
КонецФункции // ()

#КонецОбласти

