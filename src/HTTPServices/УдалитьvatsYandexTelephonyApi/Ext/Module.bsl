
#Область ОбработчикиМетодовHTTP

#Область PING

Функция ОбработатьPING(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	Возврат Ответ;
	
КонецФункции

Функция pingGET(Запрос)
	
	Возврат ОбработатьPING(Запрос);
	
КонецФункции

#КонецОбласти

#Область Яндекс

Функция EventPOST(Запрос)
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЗаголовкиОтвет = Новый Структура("Echo", Запрос.Заголовки.Получить("Echo"));
	
	Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда // Проверочный запрос при первом подключении webhook в личном кабинете.
		Возврат НовыйHTTPСервисОтвет(200, ЗаголовкиОтвет);
	КонецЕсли;
	
	ИмяСобытияДляЖурналаРегистрации = "/event";
	
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON,, "Timestamp", ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	
	Если НЕ ТелефонияСервер.КорректнаяПодписьЗапроса(Перечисления.ДоступныеАТС.Яндекс, ПараметрыЗапроса.ApiKey) Тогда
		Возврат СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			СтрШаблон(НСтр("ru='Некорректный ApiKey'")),
			ЗаголовкиОтвет);
	КонецЕсли;
	
	ОбязательныеПараметры = "EventType";
	Если НЕ ЕстьОбязательныеПараметры(ПараметрыЗапроса, ОбязательныеПараметры) Тогда
		Возврат СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			СтрШаблон(НСтр("ru='Отсутствует обязательные параметры: %1'"), ОбязательныеПараметры),
			ЗаголовкиОтвет);
	КонецЕсли;
	
	ТипСобытия = ПараметрыЗапроса.EventType;
	
	Попытка
		
		// Появление нового входящего звонка со внешнего номера {From} на бизнес номер {To}
		Если ТипСобытия = "IncomingCall" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.Body.From;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.Body.To;
			ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.НомерОрганизации = ПараметрыЗапроса.Body.To;
			
			ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Ложь);
			
		// Начало дозвона до пользователя с указанным добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallRinging" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.Body.From;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.Body.Extension;
			
			ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
			
		// Неуспешная попытка дозвона до пользователя с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallStopRinging" Тогда 
			
		// Успешное соединение с пользователем с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "IncomingCallConnected" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.ДатаНачалаРазговора = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.Body.Extension;
			
			ТелефонияСервер.ОбработатьИзменениеЗвонка(ДанныеЗвонка);
			
		// Завершение входящего звонка
		ИначеЕсли ТипСобытия = "IncomingCallCompleted" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.ДатаЗавершенияРазговора = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить = Истина;
			ДанныеЗвонка.ОпределятьНеотвеченный = Истина;
			
			ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		// Начало исходящего звонка с бизнес номера {From} на внешний номер {To} пользователем с добавочным номером {Extension}
		ИначеЕсли ТипСобытия = "OutgoingCall" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.Body.Extension;
			ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.Body.To;
			
			ТелефонияСервер.ОбработатьИсходящийЗвонок(ДанныеЗвонка);
			
		// Начало разговора при исходящем звонке
		ИначеЕсли ТипСобытия = "OutgoingCallConnected" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.ДатаНачалаРазговора = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.Body.Extension;
			
			ТелефонияСервер.ОбработатьИзменениеЗвонка(ДанныеЗвонка);
			
		// Завершение исходящего звонка
		ИначеЕсли ТипСобытия = "OutgoingCallCompleted" Тогда
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.Body.Id;
			ДанныеЗвонка.ДатаЗавершенияРазговора = ПараметрыЗапроса.Timestamp;
			ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить = Истина;
			ДанныеЗвонка.ОпределятьНеотвеченный = Истина;
			
			ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		// Появление заявки на обратный звонок с бизнес номера {From} на внешний номер {To}
		ИначеЕсли ТипСобытия = "CallbackCall" Тогда
			
		// Начало дозвона до пользователя с указанным добавочным номером {Extension} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallRinging" Тогда
			
		// Неуспешная попытка дозвона до пользователя с добавочным номером {Extension} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallStopRinging" Тогда
			
		// Пользователь с добавочным номером {Extension} соединился с номером {To} при обратном звонке
		ИначеЕсли ТипСобытия = "CallbackCallConnected" Тогда
			
		// Завершение обратного звонка
		ИначеЕсли ТипСобытия = "CallbackCallCompleted" Тогда
			
		КонецЕсли;
		
	Исключение
		Возврат СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЗаголовкиОтвет);
	КонецПопытки;
	
	Возврат НовыйHTTPСервисОтвет(200, ЗаголовкиОтвет);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры, ОтсутствующиеПараметры = "")
	
	ОтсутствующиеПараметрыМассив = Новый Массив;
	
	Если ТипЗнч(ОбязательныеПараметры) = Тип("Строка") Тогда
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбязательныеПараметры);
	Иначе
		МассивПараметров = ОбязательныеПараметры;
	КонецЕсли;
	
	Для Каждого ОбязательныйПараметр Из МассивПараметров Цикл
		Если НЕ ПараметрыТела.Свойство(ОбязательныйПараметр) Тогда
			ОтсутствующиеПараметрыМассив.Добавить(ОбязательныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтсутствующиеПараметрыМассив.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтсутствующиеПараметры = СтрСоединить(ОтсутствующиеПараметрыМассив, ",");
	
	Возврат Ложь;
	
КонецФункции

Функция СообщениеОбОшибке(КодСостояния, ВложенноеИмяСобытия, Комментарий = Неопределено, Заголовки = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ТелефонияСервер.СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		Комментарий);
	
	Возврат НовыйHTTPСервисОтвет(КодСостояния, Заголовки);
	
КонецФункции

Функция НовыйHTTPСервисОтвет(КодСостояния, Заголовки = Неопределено)
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	Если Заголовки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Ответ.Заголовки, Заголовки);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
