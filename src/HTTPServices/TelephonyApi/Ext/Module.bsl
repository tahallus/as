
#Область ОбработчикиМетодовHTTP

#Область PING

Функция ОбработатьPING(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	Возврат Ответ;
	
КонецФункции

Функция pingGET(Запрос)
	
	Возврат ОбработатьPING(Запрос);
	
КонецФункции

Функция itoolabsPingGET(Запрос)
	
	Возврат ОбработатьPING(Запрос);
	
КонецФункции

Функция mangoPingGET(Запрос)
	
	Возврат ОбработатьPING(Запрос);
	
КонецФункции

Функция rtPingGET(Запрос)
	
	Возврат ОбработатьPING(Запрос);
	
КонецФункции

#КонецОбласти

#Область MangoOffice

Функция mangoEventsCallPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/events/call";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	ПараметрыТела = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ТелоЗапроса, "&");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТелефонияСервер.КорректнаяПодписьЗапроса(Перечисления.ДоступныеАТС.MangoOffice, ПараметрыТела.sign, ПараметрыТела) Тогда
		Ответ = СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			СтрШаблон(НСтр("ru='Неверно указана подпись запроса sign=%1'"), ПараметрыТела.sign));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON",ТелефонияСервер,,МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("entry_id");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("call_state");
	ОбязательныеПараметры.Добавить("location");
	ОбязательныеПараметры.Добавить("to");
	ОбязательныеПараметры.Добавить("from");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапроса.Свойство(ОбязательныйПараметр) Тогда
			Ответ = СообщениеОбОшибке(
				400,
				ИмяСобытияДляЖурналаРегистрации,
				СтрШаблон(НСтр("ru='Отсутствует обязательный параметр %1.'"), ОбязательныйПараметр));
			ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Если НРег(ПараметрыЗапроса.location) = "ivr" Тогда
			
			Если ПараметрыЗапроса.call_state = "Appeared" Тогда
				
				НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
				Если НастройкиТелефонии.МаршрутизироватьВходящиеНаОтветственных Тогда
					
					Если ПараметрыЗапроса.from.Свойство("number") Тогда
						
						ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
						// Для перенаправления вызова использовать внутренний идентификатор плеча вызова.
						ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.call_id;
						ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.from.number;
						ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыЗапроса.timestamp;
						
						ТелефонияСервер.МаршрутизироватьЗвонокНаОтветственного(ДанныеЗвонка);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли НРег(ПараметрыЗапроса.location) = "abonent" Тогда
		
			Если ПараметрыЗапроса.call_state = "Appeared" Тогда
				
				Если ПараметрыЗапроса.from.Свойство("extension") И ПараметрыЗапроса.to.Свойство("number") Тогда
					
					ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
					ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.entry_id;
					ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.to.number;
					ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.from.extension;
					ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыЗапроса.timestamp;
					
					ТелефонияСервер.ОбработатьИсходящийЗвонок(ДанныеЗвонка);
					
				ИначеЕсли ПараметрыЗапроса.from.Свойство("number") И ПараметрыЗапроса.to.Свойство("extension") Тогда
					
					ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
					ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.entry_id;
					ДанныеЗвонка.НомерКонтакта = ПараметрыЗапроса.from.number;
					ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыЗапроса.to.extension;
					ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыЗапроса.timestamp;
					Если ПараметрыЗапроса.to.Свойство("line_number") Тогда
						ДанныеЗвонка.НомерОрганизации = ПараметрыЗапроса.to.line_number;
					КонецЕсли;
					
					ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗапроса.call_state = "Connected" Тогда
				
				Если ПараметрыЗапроса.to.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапроса.to.extension;
				ИначеЕсли ПараметрыЗапроса.from.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапроса.from.extension;
				КонецЕсли;
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.entry_id;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = Пользователь;
				ДанныеЗвонка.ДатаНачалаРазговора = ПараметрыЗапроса.timestamp;
				
				ТелефонияСервер.ОбработатьИзменениеЗвонка(ДанныеЗвонка);
				
			ИначеЕсли ПараметрыЗапроса.call_state = "Disconnected" Тогда
				
				Пользователь = Неопределено;
				Если ПараметрыЗапроса.to.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапроса.to.extension;
				ИначеЕсли ПараметрыЗапроса.from.Свойство("extension") Тогда
					Пользователь = ПараметрыЗапроса.from.extension;
				КонецЕсли;
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.entry_id;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = Пользователь;
				ДанныеЗвонка.ДатаЗавершенияРазговора = ПараметрыЗапроса.timestamp;
				ДанныеЗвонка.ОпределятьНеотвеченный = Истина;
				
				ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

Функция mangoEventsRecordingPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/events/recording";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии Манго отключено в настройках'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ПараметрыТела = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(ТелоЗапроса, "&");
	
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ПараметрыТела.json);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТелефонияСервер.КорректнаяПодписьЗапроса(Перечисления.ДоступныеАТС.MangoOffice, ПараметрыТела.sign, ПараметрыТела) Тогда
		Ответ = СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			СтрШаблон(НСтр("ru='Неверно указана подпись запроса sign=%1'"), ПараметрыТела.sign));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыТела.json);
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("timestamp");
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON,,,,"ВосстановлениеJSON",ТелефонияСервер,,МассивИмен);
	ЧтениеJSON.Закрыть();
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("recording_id");
	ОбязательныеПараметры.Добавить("recording_state");
	ОбязательныеПараметры.Добавить("seq");
	ОбязательныеПараметры.Добавить("entry_id");
	ОбязательныеПараметры.Добавить("call_id");
	ОбязательныеПараметры.Добавить("timestamp");
	
	Для Каждого ОбязательныйПараметр Из ОбязательныеПараметры Цикл
		Если Не ПараметрыЗапроса.Свойство(ОбязательныйПараметр) Тогда
			Ответ = СообщениеОбОшибке(
				400,
				ИмяСобытияДляЖурналаРегистрации,
				СтрШаблон(НСтр("ru='Отсутствует обязательный параметр %1.'"), ОбязательныйПараметр));
			ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	
	НеобходимоОбработатьУведомление =
		ВРег(ПараметрыЗапроса.recording_state) = ВРег("Completed")
		И ПараметрыЗапроса.completion_code = 1000; // 1000 - Действие успешно выполнено
	
	Если НЕ НеобходимоОбработатьУведомление Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
		ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыЗапроса.entry_id;
		ДанныеЗвонка.ЗаписьРазговора.Ссылка = ПараметрыЗапроса.recording_id;
		ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
	Исключение
		Ответ = СообщениеОбОшибке(500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

Функция mangoResultCallbackPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/result/callback";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

Функция mangoResultStatsPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/result/stats";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

Функция mangoResultRoutePOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/result/route";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Использование телефонии отключено в настройках'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(501); // Not implemented
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;;
	
КонецФункции

#КонецОбласти

#Область Itoolabs

Функция itoolabsEventPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/event";
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	ПараметрыТела = ПолучитьПараметрыИзСтроки(ТелоЗапроса, "&");
	
	Если НЕ ТелефонияСервер.КорректнаяПодписьЗапроса(Перечисления.ДоступныеАТС.ДомRu, ПараметрыТела.crm_token) Тогда
		Ответ = СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			НСтр("ru='Некорректный ключ'"));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ОбязательныеПараметры = "cmd";
	Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела,ОбязательныеПараметры) Тогда
		Ответ = СообщениеОбОшибке(
			400,
			ИмяСобытияДляЖурналаРегистрации,
			СтрШаблон(НСтр("ru='Отсутствует обязательные параметры: %1'"), ОбязательныеПараметры));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ТипОперации = ПараметрыТела.cmd;
	Ответ = Неопределено;
	
	Попытка
		
		Если ТипОперации = "contact" Тогда
			
			ОбязательныеПараметры = "phone";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Ответ = СообщениеОбОшибке(
					400,
					ИмяСобытияДляЖурналаРегистрации,
					СтрШаблон(НСтр("ru='Отсутствует обязательные параметры: %1'"), ОбязательныеПараметры));
				ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
				Возврат Ответ;
			КонецЕсли;
			
			ДанныеАбонента = ТелефонияСервер.ПолучитьДанныеКлиента(ПараметрыТела.phone);
			
			ЗаписьJSON = Неопределено;
			Если ДанныеАбонента <> Неопределено Тогда
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("contact_name");
				ЗаписьJSON.ЗаписатьЗначение(ДанныеАбонента.Представление);
				
				Если ЗначениеЗаполнено(ДанныеАбонента.ВнутреннийНомерОтветственного) Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("responsible");
					ЗаписьJSON.ЗаписатьЗначение(ДанныеАбонента.ВнутреннийНомерОтветственного);
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				ПараметрыОтвета = ЗаписьJSON.Закрыть();
				
			КонецЕсли;
			
			Ответ = Новый HTTPСервисОтвет(200);
			Если ЗаписьJSON <> Неопределено Тогда
				Ответ.УстановитьТелоИзСтроки(ПараметрыОтвета);
			КонецЕсли;
			
		ИначеЕсли ТипОперации = "history" Тогда
			
			ОбязательныеПараметры = "callid,status";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Ответ = СообщениеОбОшибке(
					400,
					ИмяСобытияДляЖурналаРегистрации,
					СтрШаблон(НСтр("ru='Отсутствует обязательные параметры: %1'"), ОбязательныеПараметры));
				ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
				Возврат Ответ;
			КонецЕсли;
			
			ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
			ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
			ДанныеЗвонка.ЗаписьРазговора.Ссылка = ?(ПараметрыТела.Свойство("link"), ПараметрыТела.link, "");
			ДанныеЗвонка.ДлительностьРазговора = Число(ПараметрыТела.duration);
			Если НРег(ПараметрыТела.status) <> НРег("Success") Тогда
				ДанныеЗвонка.Неотвеченный = Истина;
			КонецЕсли;
			
			ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		ИначеЕсли ТипОперации = "event" Тогда
			
			ОбязательныеПараметры = "type,callid,phone,ext";
			Если НЕ ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры) Тогда
				Ответ = СообщениеОбОшибке(
					400,
					ИмяСобытияДляЖурналаРегистрации,
					СтрШаблон(НСтр("ru='Отсутствует обязательные параметры: %1'"), ОбязательныеПараметры));
				ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
				Возврат Ответ;
			КонецЕсли;
			
			Если НРег(ПараметрыТела.type) = "incoming" Тогда
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
				ДанныеЗвонка.ДатаНачалаЗвонка = ТекущаяДатаСеанса();
				ДанныеЗвонка.НомерКонтакта = ПараметрыТела.phone;
				ПараметрыТела.Свойство("diversion", ДанныеЗвонка.НомерОрганизации);
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.ext;
				
				ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
				
			ИначеЕсли НРег(ПараметрыТела.type) = "outgoing" Тогда
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
				ДанныеЗвонка.ДатаНачалаЗвонка = ТекущаяДатаСеанса();
				ДанныеЗвонка.НомерКонтакта = ПараметрыТела.phone;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.ext;
				
				ТелефонияСервер.ОбработатьИсходящийЗвонок(ДанныеЗвонка);
				
			ИначеЕсли НРег(ПараметрыТела.type) = "accepted" Тогда
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
				ДанныеЗвонка.ДатаНачалаРазговора = ТекущаяДатаСеанса();
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.ext;
				
				ТелефонияСервер.ОбработатьИзменениеЗвонка(ДанныеЗвонка);
				
			ИначеЕсли НРег(ПараметрыТела.type) = "completed" Тогда
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.ext;
				ДанныеЗвонка.Неотвеченный = Ложь;
				
				ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
				
			ИначеЕсли НРег(ПараметрыТела.type) = "cancelled" Тогда
				
				ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
				ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.callid;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.ext;
				ДанныеЗвонка.Неотвеченный = Истина;
				
				ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
				
			КонецЕсли;
			
		Иначе
			
			// Not implemented.
			Ответ = СообщениеОбОшибке(501, ИмяСобытияДляЖурналаРегистрации);
			ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
			Возврат Ответ;
			
		КонецЕсли;
		
	Исключение
		
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
		
	КонецПопытки;
	
	Если Ответ = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(200);
	КонецЕсли;
	
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Ростелеком

Процедура rtПроверитьПодписьЗапроса(Запрос, ТелоЗапроса, ИмяСобытияДляЖурналаРегистрации, Ответ)
	
	ПодписьЗапросаЗаголовок = "X-Client-Sign";
	ПодписьЗапроса = Запрос.Заголовки.Получить(ПодписьЗапросаЗаголовок);
	
	Если ПодписьЗапроса = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='В заголовках не передана подпись ""%1""'"), ПодписьЗапросаЗаголовок);
		Ответ = СообщениеОбОшибке(400, ИмяСобытияДляЖурналаРегистрации, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ТелефонияСервер.КорректнаяПодписьЗапроса(Перечисления.ДоступныеАТС.Ростелеком, ПодписьЗапроса, ТелоЗапроса) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Неверно указана подпись запроса ""%1""=""%2""'"), ПодписьЗапросаЗаголовок, ПодписьЗапроса);
		Ответ = СообщениеОбОшибке(400, ИмяСобытияДляЖурналаРегистрации, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура rtПроверитьОбязательныеПараметры(ПараметрыТела, ИмяСобытияДляЖурналаРегистрации, Ответ)
	
	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("session_id");
	ОбязательныеПараметры.Добавить("timestamp");
	ОбязательныеПараметры.Добавить("type");
	ОбязательныеПараметры.Добавить("state");
	ОбязательныеПараметры.Добавить("from_number");
	ОбязательныеПараметры.Добавить("request_number");
	
	ПроверитьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры, ИмяСобытияДляЖурналаРегистрации, Ответ);
	
КонецПроцедуры

Функция rtCallEventsPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/call_events";
	
	Ответ = Неопределено;
	ПроверитьИспользованиеТелефонииВНастройках(ИмяСобытияДляЖурналаРегистрации, Ответ);
	Если Ответ <> Неопределено Тогда
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ДанныеЗапросаДляЛога = ТелефонияСервер.ПредставлениеСоответствияСтрокой(Запрос.Заголовки);
	ДанныеЗапросаДляЛога = ДанныеЗапросаДляЛога + Символы.ПС + ТелоЗапроса;
	
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ДанныеЗапросаДляЛога);
	
	rtПроверитьПодписьЗапроса(Запрос, ТелоЗапроса, ИмяСобытияДляЖурналаРегистрации, Ответ);
	Если Ответ <> Неопределено Тогда
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыТела = ТелефонияСервер.ПрочитатьJSONВСтруктуру(
		ТелоЗапроса,,, "ВосстановлениеСвойствСоЗначениямиДатаISO", ТелефонияСервер,, "timestamp");
	
	rtПроверитьОбязательныеПараметры(ПараметрыТела, ИмяСобытияДляЖурналаРегистрации, Ответ);
	Если Ответ <> Неопределено Тогда
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ДанныеЗвонка = ТелефонияСервер.НовыйДанныеЗвонка();
		ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ПараметрыТела.session_id;
		
		ТипУведомления = НРег(ПараметрыТела.state);
		Если ТипУведомления = "new" Тогда
			
			Если ПараметрыТела.type = "incoming" Тогда
				
				ДанныеЗвонка.НомерКонтакта = НомерТелефонаИзСтрокиSipURI(ПараметрыТела.from_number);
				ДанныеЗвонка.НомерОрганизации = НомерТелефонаИзСтрокиSipURI(ПараметрыТела.request_number);
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.request_pin;
				ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыТела.timestamp;
				ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
				
			Иначе
				
				ДанныеЗвонка.НомерКонтакта = НомерТелефонаИзСтрокиSipURI(ПараметрыТела.request_number);
				ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыТела.timestamp;
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.from_pin;
				ТелефонияСервер.ОбработатьИсходящийЗвонок(ДанныеЗвонка);
				
			КонецЕсли;
			
		ИначеЕсли ТипУведомления = "calling" Тогда
			
			Если ПараметрыТела.type = "incoming" Тогда
				
				ДанныеЗвонка.НомерКонтакта = НомерТелефонаИзСтрокиSipURI(ПараметрыТела.from_number);
				ДанныеЗвонка.НомерОрганизации = НомерТелефонаИзСтрокиSipURI(ПараметрыТела.request_number);
				ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПараметрыТела.request_pin;
				ДанныеЗвонка.ДатаНачалаЗвонка = ПараметрыТела.timestamp;
				ТелефонияСервер.ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
				
			КонецЕсли;
			
		ИначеЕсли ТипУведомления = "connected" Тогда
			
			Если ПараметрыТела.type = "incoming" Тогда
				Пользователь = ПараметрыТела.request_pin;
			Иначе
				Пользователь = ПараметрыТела.from_pin;
			КонецЕсли;
			
			ДанныеЗвонка.ДатаНачалаРазговора = ПараметрыТела.timestamp;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = Пользователь;
			ТелефонияСервер.ОбработатьИзменениеЗвонка(ДанныеЗвонка);
			
		ИначеЕсли ТипУведомления = "end" Тогда
			
			Если ПараметрыТела.type = "incoming" Тогда
				Пользователь = ПараметрыТела.request_pin;
			Иначе
				Пользователь = ПараметрыТела.from_pin;
			КонецЕсли;
			
			ДанныеЗвонка.ДатаЗавершенияРазговора = ПараметрыТела.timestamp;
			ДанныеЗвонка.Пользователь.ВнутреннийНомер = Пользователь;
			ДанныеЗвонка.ОпределятьНеотвеченный = Истина;
			Если ПараметрыТела.Свойство("is_record") Тогда
				ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить = ПараметрыТела.is_record;
			КонецЕсли;
			ТелефонияСервер.ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		КонецЕсли;
		
	Исключение
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(200);
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

Функция rtGetNumberInfoPOST(Запрос)
	
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьВходящийЗапрос(Запрос);
	ИмяСобытияДляЖурналаРегистрации = "/get_number_info";
	
	Ответ = Неопределено;
	ПроверитьИспользованиеТелефонииВНастройках(ИмяСобытияДляЖурналаРегистрации, Ответ);
	Если Ответ <> Неопределено Тогда
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(Запрос.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	ТелефонияСервер.ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТелоЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// rtПроверитьПодписьЗапроса(Запрос, ТелоЗапроса, ИмяСобытияДляЖурналаРегистрации, Ответ);   // todo
	//Если Ответ <> Неопределено Тогда
	//	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	//	Возврат Ответ;
	//КонецЕсли;
	
	ПараметрыТела = ТелефонияСервер.ПрочитатьJSONВСтруктуру(ТелоЗапроса);
	
	ПроверитьОбязательныеПараметры(ПараметрыТела, "from_number", ИмяСобытияДляЖурналаРегистрации, Ответ);
	Если Ответ <> Неопределено Тогда
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ТелефонияСервер.ОбработатьПолучениеИнформацииОВызывающемАбоненте(Перечисления.ДоступныеАТС.Ростелеком, НомерТелефонаИзСтрокиSipURI(ПараметрыТела.from_number), Ответ);
		Если Ответ <> Неопределено Тогда
			ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
			Возврат Ответ;
		КонецЕсли;
		
	Исключение
		
		Ответ = СообщениеОбОшибке(
			500,
			ИмяСобытияДляЖурналаРегистрации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
		Возврат Ответ;
		
	КонецПопытки;
	
	Ответ = СообщениеОбОшибке(501, ИмяСобытияДляЖурналаРегистрации, НСтр("ru='Не выполнена обработка получения информации об абоненте.'"));
	ТелефонияСервер.ЛогироватьИсходящийОтвет(Ответ, ИдентификаторЗапроса);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьИспользованиеТелефонииВНастройках(ИмяСобытияЖР, Ответ)
	
	Ответ = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Использование телефонии отключено в настройках'");
	Ответ = СообщениеОбОшибке(500, ИмяСобытияЖР, ТекстОшибки);
	
КонецПроцедуры

Процедура ПроверитьОбязательныеПараметры(ПараметрыЗапроса, ОбязательныеПараметры, ИмяСобытияЖР, Ответ)
	
	ОтсутствующиеПараметры = "";
	Если ЕстьОбязательныеПараметры(ПараметрыЗапроса, ОбязательныеПараметры, ОтсутствующиеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru='Отсутствуют обязательные параметры: %1'"), ОтсутствующиеПараметры);
	Ответ = СообщениеОбОшибке(400, ИмяСобытияЖР, ТекстОшибки);
	
КонецПроцедуры

Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";")
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ =Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(ЗначениеПараметра);
				Попытка
					Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
				Исключение
				КонецПопытки;
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЕстьОбязательныеПараметры(ПараметрыТела, ОбязательныеПараметры, ОтсутствующиеПараметры = "")
	
	ОтсутствующиеПараметрыМассив = Новый Массив;
	
	Если ТипЗнч(ОбязательныеПараметры) = Тип("Строка") Тогда
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбязательныеПараметры);
	Иначе
		МассивПараметров = ОбязательныеПараметры;
	КонецЕсли;
	
	Для Каждого ОбязательныйПараметр Из МассивПараметров Цикл
		Если НЕ ПараметрыТела.Свойство(ОбязательныйПараметр) Тогда
			ОтсутствующиеПараметрыМассив.Добавить(ОбязательныйПараметр);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтсутствующиеПараметрыМассив.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтсутствующиеПараметры = СтрСоединить(ОтсутствующиеПараметрыМассив, ",");
	
	Возврат Ложь;
	
КонецФункции

Функция СообщениеОбОшибке(КодСостояния, ВложенноеИмяСобытия, Комментарий = Неопределено, Заголовки = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ТелефонияСервер.СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,,
		Комментарий);
	
	Возврат НовыйHTTPСервисОтвет(КодСостояния, Заголовки);
	
КонецФункции

Функция НовыйHTTPСервисОтвет(КодСостояния, Заголовки = Неопределено)
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	Если Заголовки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Ответ.Заголовки, Заголовки);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция НомерТелефонаИзСтрокиSipURI(Знач НомерТелефона)
	
	Если НЕ СтрНачинаетсяС(НомерТелефона, "sip:") Тогда
		Возврат НомерТелефона;
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "sip:", "");
	НомерТелефона = Лев(НомерТелефона, СтрНайти(НомерТелефона, "@") - 1);
	
	Возврат НомерТелефона;
	
КонецФункции

#КонецОбласти
