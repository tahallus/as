#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает и записывает оплаты заказа.
// Дата оплаты указывается в "Периоде". При фактической оплате
// по заказу происходит закрытие графика по ФИФО.
//
Процедура РассчитатьОплатыЗаказов()
	
	ТаблицаСчетов = ДополнительныеСвойства.ТаблицаСчетов;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовНаОплату", ТаблицаСчетов.ВыгрузитьКолонку("СчетНаОплату"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ОплатаСчетовИЗаказовОбороты.СуммаОборот) КАК Сумма,
	|	СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот) КАК СуммаАванса,
	|	СУММА(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , , СчетНаОплату В (&МассивСчетовНаОплату)) КАК ОплатаСчетовИЗаказовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату";
	
	НаборЗаписей = РегистрыСведений.ФактОплатыЗаказов.СоздатьНаборЗаписей();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекСчетНаОплату = Выборка.СчетНаОплату;
		
		НаборЗаписей.Отбор.СчетНаОплату.Установить(ТекСчетНаОплату);
		
		// АссистентУправления: статус оплаты счета до записи движений.
		НаборЗаписей.Прочитать();
		СостояниеОплатыДо = СтатусОплатыЗаказа(НаборЗаписей);
		НаборЗаписей.Очистить();
		
		// Из таблицы удаляем отработанный счет на оплату.
		ТаблицаСчетов.Удалить(ТаблицаСчетов.Найти(ТекСчетНаОплату, "СчетНаОплату"));
		
		Запись = НаборЗаписей.Добавить();
		Запись.СчетНаОплату = Выборка.СчетНаОплату;
		Запись.Сумма = Выборка.Сумма;
		Запись.СуммаАванса = Выборка.СуммаАванса;
		Запись.СуммаОплаты = Выборка.СуммаОплаты;
		
		НаборЗаписей.Записать(Истина);
		
		// АссистентУправления: статус отгрузки заказа после записи движений.
		СостояниеОплатыПосле = СтатусОплатыЗаказа(НаборЗаписей);
		НаборЗаписей.Очистить();
		
		АссистентУправленияПриСрабатыванииСобытия(ТекСчетНаОплату, Отбор.Регистратор.Значение, СостояниеОплатыДо, СостояниеОплатыПосле);
		
	КонецЦикла;
	
	// По неотработанным заказам нужно очистить движения.
	Если ТаблицаСчетов.Количество() > 0 Тогда
		Для Каждого СтрокаТаб Из ТаблицаСчетов Цикл
			
			НаборЗаписей.Отбор.СчетНаОплату.Установить(СтрокаТаб.СчетНаОплату);
			НаборЗаписей.Записать(Истина);
			НаборЗаписей.Очистить();
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьОплатыЗаказов()

// Процедура формирует таблицу счетов (заказов), которые были раньше в движениях
// и которые сейчас будут записаны.
//
Процедура СФормироватьТаблицуСчетовНаОплату()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОплатаСчетовИЗаказов.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ТаблицаОплатаСчетовИЗаказов
	|ГДЕ
	|	ТаблицаОплатаСчетовИЗаказов.Регистратор = &Регистратор";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаНовыхСчетов = Выгрузить(, "СчетНаОплату");
	ТаблицаНовыхСчетов.Свернуть("СчетНаОплату");
	Для Каждого Запись Из ТаблицаНовыхСчетов Цикл
		
		Если ТаблицаСчетов.Найти(Запись.СчетНаОплату, "СчетНаОплату") = Неопределено Тогда
			ТаблицаСчетов.Добавить().СчетНаОплату = Запись.СчетНаОплату;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ТаблицаСчетов", ТаблицаСчетов);
	
КонецПроцедуры // СФормироватьТаблицуСчетовНаОплату()

// Процедура устанавливает блокировку данных для расчета оплаты.
//
Процедура УстановитьБлокировкиДанныхДляРасчетаОплаты()
	
	Блокировка = Новый БлокировкаДанных;
	
	// Блокировка регистра для подсчета остатков по календарю.
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОплатаСчетовИЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетНаОплату", "СчетНаОплату");
	
	// Блокировка набора для записи.
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФактОплатыЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетНаОплату", "СчетНаОплату");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры // УстановитьБлокировкиДанныхДляРасчетаОплаты()

// Определяет статус оплаты заказа по набору записей СтатусОплатыЗаказа.
//
// Параметры:
//  ФактОплатыНаборЗаписей - РегистрСведенийНаборЗаписей
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.СтатусОплаты
//
Функция СтатусОплатыЗаказа(ФактОплатыНаборЗаписей)
	
	СостояниеОплаты = Новый Структура("СтатусОплаты,ПроцентОплаты");
	
	Если ФактОплатыНаборЗаписей.Количество() = 0 Тогда
		СостояниеОплаты.СтатусОплаты = Перечисления.СтатусОплаты.НеУчитывается;
		СостояниеОплаты.ПроцентОплаты = Неопределено;
	Иначе
		Если ФактОплатыНаборЗаписей[0].СуммаОплаты + ФактОплатыНаборЗаписей[0].СуммаАванса - ФактОплатыНаборЗаписей[0].Сумма >= 0 Тогда
			СостояниеОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Полная;
			СостояниеОплаты.ПроцентОплаты = 100;
		ИначеЕсли ФактОплатыНаборЗаписей[0].СуммаОплаты + ФактОплатыНаборЗаписей[0].СуммаАванса > 0 Тогда
			СостояниеОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Частичная;
			СостояниеОплаты.ПроцентОплаты = (ФактОплатыНаборЗаписей[0].СуммаОплаты + ФактОплатыНаборЗаписей[0].СуммаАванса) * 100 / ФактОплатыНаборЗаписей[0].Сумма;
		Иначе
			СостояниеОплаты.СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует;
			СостояниеОплаты.ПроцентОплаты = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеОплаты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СФормироватьТаблицуСчетовНаОплату();
	УстановитьБлокировкиДанныхДляРасчетаОплаты();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьОплатыЗаказов();
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область АссистентУправления

Процедура АссистентУправленияПриСрабатыванииСобытия(СчетНаОплату, Источник, СостояниеОплатыДо, СостояниеОплатыПосле)
	
	Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Событие = Неопределено;
		
		Если СостояниеОплатыДо.СтатусОплаты = СостояниеОплатыПосле.СтатусОплаты Тогда
			Возврат;
		КонецЕсли;
		
		Если СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Частичная Тогда
			Событие = "ЧастичнаяОплатаПоступила"
		ИначеЕсли (СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Полная) Тогда
			Событие = "ПолнаяОплатаПоступила"
		ИначеЕсли (СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Частичная И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует) Тогда
			Событие = "ЧастичнаяОплатаОтмена"
		ИначеЕсли СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Частичная И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Полная Тогда
			Событие = "ПолнаяОплатаПоступила"
		ИначеЕсли (СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Полная И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует) Тогда
			Событие = "ПолнаяОплатаОтмена"
		ИначеЕсли (СостояниеОплатыДо.СтатусОплаты = Перечисления.СтатусОплаты.Полная И СостояниеОплатыПосле.СтатусОплаты = Перечисления.СтатусОплаты.Частичная) Тогда
			Событие = "ПолнаяОплатаОтмена"
		КонецЕсли;
		
		Если Событие <> Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПроцентОплаты", СостояниеОплатыПосле.ПроцентОплаты);
			ДополнительныеПараметры.Вставить("ПроцентОплатыИзменение", СостояниеОплатыПосле.ПроцентОплаты - СостояниеОплатыДо.ПроцентОплаты);
			
			АссистентУправления.ПриСрабатыванииСобытия(СчетНаОплату, Событие, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		АссистентУправления.ПриСрабатыванииСобытия(СчетНаОплату, "ИзменениеПоступленияОплаты", Источник);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти
#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли