#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
		ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
		ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Установка исключительной блокировки текущего набора записей регистратора.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыНаПеремещение.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Отбор.Регистратор.Значение);
	Блокировка.Заблокировать();
	
	Если НЕ СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыНаПеремещениеИзменение") 
		ИЛИ СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыНаПеремещениеИзменение") 
		И НЕ СтруктураВременныеТаблицы.ДвиженияЗаказыНаПеремещениеИзменение Тогда
		
		// Если временная таблица "ДвиженияЗаказыНаПеремещениеИзменение" не существует или не содержит записей
		// об изменении набора, значит набор записывается первый раз или для набора был выполнен контроль остатков.
		// Текущее состояние набора помещается во временную таблицу "ДвиженияЗаказыНаПеремещениеПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно текущего.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыНаПеремещение.НомерСтроки КАК НомерСтроки,
		|	ЗаказыНаПеремещение.Организация КАК Организация,
		|	ЗаказыНаПеремещение.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
		|	ЗаказыНаПеремещение.ТипДвижения КАК ТипДвижения,
		|	ЗаказыНаПеремещение.Склад КАК Склад,
		|	ЗаказыНаПеремещение.Номенклатура КАК Номенклатура,
		|	ЗаказыНаПеремещение.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЗаказыНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ЗаказыНаПеремещение.Количество
		|		ИНАЧЕ -ЗаказыНаПеремещение.Количество
		|	КОНЕЦ КАК КоличествоПередЗаписью
		|ПОМЕСТИТЬ ДвиженияЗаказыНаПеремещениеПередЗаписью
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|ГДЕ
		|	ЗаказыНаПеремещение.Регистратор = &Регистратор
		|	И &Замещение");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		// Если временная таблица "ДвиженияЗаказыНаПеремещениеИзменение" существует и содержит записи
		// об изменении набора, значит набор записывается не первый раз и для набора не был выполнен контроль остатков.
		// Текущее состояние набора и текущее состояние изменений помещаются во временную таблицу "ДвиженияЗаказыНаПеремещениеПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно первоначального.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗаказыНаПеремещениеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Организация КАК Организация,
		|	ДвиженияЗаказыНаПеремещениеИзменение.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
		|	ДвиженияЗаказыНаПеремещениеИзменение.ТипДвижения КАК ТипДвижения,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Склад КАК Склад,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Номенклатура КАК Номенклатура,
		|	ДвиженияЗаказыНаПеремещениеИзменение.Характеристика КАК Характеристика,
		|	ДвиженияЗаказыНаПеремещениеИзменение.КоличествоПередЗаписью КАК КоличествоПередЗаписью
		|ПОМЕСТИТЬ ДвиженияЗаказыНаПеремещениеПередЗаписью
		|ИЗ
		|	ДвиженияЗаказыНаПеремещениеИзменение КАК ДвиженияЗаказыНаПеремещениеИзменение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыНаПеремещение.НомерСтроки,
		|	ЗаказыНаПеремещение.Организация,
		|	ЗаказыНаПеремещение.ЗаказНаПеремещение,
		|	ЗаказыНаПеремещение.ТипДвижения,
		|	ЗаказыНаПеремещение.Склад,
		|	ЗаказыНаПеремещение.Номенклатура,
		|	ЗаказыНаПеремещение.Характеристика,
		|	ВЫБОР
		|		КОГДА ЗаказыНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ЗаказыНаПеремещение.Количество
		|		ИНАЧЕ -ЗаказыНаПеремещение.Количество
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
		|ГДЕ
		|	ЗаказыНаПеремещение.Регистратор = &Регистратор
		|	И &Замещение");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Временная таблица "ДвиженияЗаказыНаПеремещениеИзменение" уничтожается
	// Удаляется информация о ее существовании.
	
	Если СтруктураВременныеТаблицы.Свойство("ДвиженияЗаказыНаПеремещениеИзменение") Тогда
		
		Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияЗаказыНаПеремещениеИзменение");
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		СтруктураВременныеТаблицы.Удалить("ДвиженияЗаказыНаПеремещениеИзменение");
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
		ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
		ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда	
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу "ДвиженияЗаказыНаПеремещениеИзменение".
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияЗаказыНаПеремещениеИзменение.НомерСтроки) КАК НомерСтроки,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Организация КАК Организация,
	|	ДвиженияЗаказыНаПеремещениеИзменение.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	ДвиженияЗаказыНаПеремещениеИзменение.ТипДвижения КАК ТипДвижения,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Склад КАК Склад,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Номенклатура КАК Номенклатура,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Характеристика КАК Характеристика,
	|	СУММА(ДвиженияЗаказыНаПеремещениеИзменение.КоличествоПередЗаписью) КАК КоличествоПередЗаписью,
	|	СУММА(ДвиженияЗаказыНаПеремещениеИзменение.КоличествоИзменение) КАК КоличествоИзменение,
	|	СУММА(ДвиженияЗаказыНаПеремещениеИзменение.КоличествоПриЗаписи) КАК КоличествоПриЗаписи
	|ПОМЕСТИТЬ ДвиженияЗаказыНаПеремещениеИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.НомерСтроки КАК НомерСтроки,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.Организация КАК Организация,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.ТипДвижения КАК ТипДвижения,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.Склад КАК Склад,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.Номенклатура КАК Номенклатура,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.Характеристика КАК Характеристика,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.КоличествоПередЗаписью КАК КоличествоПередЗаписью,
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью.КоличествоПередЗаписью КАК КоличествоИзменение,
	|		0 КАК КоличествоПриЗаписи
	|	ИЗ
	|		ДвиженияЗаказыНаПеремещениеПередЗаписью КАК ДвиженияЗаказыНаПеремещениеПередЗаписью
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.НомерСтроки,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Организация,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.ЗаказНаПеремещение,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.ТипДвижения,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Склад,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Номенклатура,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Характеристика,
	|		0,
	|		ВЫБОР
	|			КОГДА ДвиженияЗаказыНаПеремещениеПриЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДвиженияЗаказыНаПеремещениеПриЗаписи.Количество
	|			ИНАЧЕ ДвиженияЗаказыНаПеремещениеПриЗаписи.Количество
	|		КОНЕЦ,
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Количество
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение КАК ДвиженияЗаказыНаПеремещениеПриЗаписи
	|	ГДЕ
	|		ДвиженияЗаказыНаПеремещениеПриЗаписи.Регистратор = &Регистратор) КАК ДвиженияЗаказыНаПеремещениеИзменение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияЗаказыНаПеремещениеИзменение.Организация,
	|	ДвиженияЗаказыНаПеремещениеИзменение.ЗаказНаПеремещение,
	|	ДвиженияЗаказыНаПеремещениеИзменение.ТипДвижения,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Склад,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Номенклатура,
	|	ДвиженияЗаказыНаПеремещениеИзменение.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияЗаказыНаПеремещениеИзменение.КоличествоИзменение) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ЗаказНаПеремещение,
	|	ТипДвижения,
	|	Склад,
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Новые изменения были помещены во временную таблицу "ДвиженияЗаказыНаПеремещениеИзменение".
	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияЗаказыНаПеремещениеИзменение", ВыборкаИзРезультатаЗапроса.Количество > 0);
	
	// Временная таблица "ДвиженияЗаказыНаПеремещениеПередЗаписью" уничтожается
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияЗаказыНаПеремещениеПередЗаписью");
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли