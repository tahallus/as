#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура создает пустую временную таблицу изменения движений.
//
Процедура СоздатьПустуюВременнуюТаблицуИзменение(ДополнительныеСвойства) Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
	 ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ЗаказыПокупателей.НомерСтроки КАК НомерСтроки,
	|	ЗаказыПокупателей.Организация КАК Организация,
	|	ЗаказыПокупателей.Склад КАК Склад,
	|	ЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ЗаказыПокупателей.Количество КАК КоличествоПередЗаписью,
	|	ЗаказыПокупателей.Количество КАК КоличествоИзменение,
	|	ЗаказыПокупателей.Количество КАК КоличествоПриЗаписи
	|ПОМЕСТИТЬ ДвиженияЗаказыПокупателейИзменение
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей");
	
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураВременныеТаблицы.Вставить("ДвиженияЗаказыПокупателейИзменение", Ложь);
	
КонецПроцедуры // СоздатьПустуюВременнуюТаблицуИзменение()

// Процедура - Изменяет таблицу движений с учетом текущих остатков в разрезе складов
//
// Параметры:
//  Регистратор		 - 	ДокументСсылка - Документ движений
//  ТаблицаДвижений	 - 	ТаблицаЗначений - Таблица движений регистра
//
Процедура ДобавитьДвиженияСУчетомСкладов(Регистратор, ТаблицаДвижений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДвижений.Организация КАК Организация,
	|	ТаблицаДвижений.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДвижений.Склад КАК Склад,
	|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	|	ТаблицаДвижений.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений";
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых заказов покупателей
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДвижений.Организация КАК Организация,
	|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	|	ТаблицаДвижений.Характеристика КАК Характеристика,
	|	ТаблицаДвижений.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрОстатки.Организация КАК Организация,
	|		РегистрОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		РегистрОстатки.Склад КАК Склад,
	|		РегистрОстатки.Номенклатура КАК Номенклатура,
	|		РегистрОстатки.Характеристика КАК Характеристика,
	|		РегистрОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаДвижений.Организация,
	|						ТаблицаДвижений.ЗаказПокупателя,
	|						ТаблицаДвижений.Номенклатура,
	|						ТаблицаДвижений.Характеристика
	|					ИЗ
	|						ТаблицаДвижений
	|					ГДЕ
	|						ТаблицаДвижений.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))) КАК РегистрОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокумента.Организация,
	|		ДвиженияДокумента.ЗаказПокупателя,
	|		ДвиженияДокумента.Склад,
	|		ДвиженияДокумента.Номенклатура,
	|		ДвиженияДокумента.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокумента.Количество
	|			ИНАЧЕ -ДвиженияДокумента.Количество
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокумента
	|	ГДЕ
	|		ДвиженияДокумента.Регистратор = &Регистратор
	|		И (ДвиженияДокумента.Организация, ДвиженияДокумента.ЗаказПокупателя, ДвиженияДокумента.Номенклатура, ДвиженияДокумента.Характеристика) В
	|				(ВЫБРАТЬ
	|					ТаблицаДвижений.Организация,
	|					ТаблицаДвижений.ЗаказПокупателя,
	|					ТаблицаДвижений.Номенклатура,
	|					ТаблицаДвижений.Характеристика
	|				ИЗ
	|					ТаблицаДвижений
	|				ГДЕ
	|					ТаблицаДвижений.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ЗаказПокупателя";
	ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатки.Индексы.Добавить("Организация, ЗаказПокупателя, Номенклатура, Характеристика");
	ТаблицаОстатки.Индексы.Добавить("Организация, Склад, ЗаказПокупателя, Номенклатура, Характеристика");
	
	НоваяТаблицаДвижений = ТаблицаДвижений.СкопироватьКолонки();
	СтруктураОтбора = Новый Структура;
	
	// Итерация 1: Строки с пустым складом переносятся как есть
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаТаблицы.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = НоваяТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 
	
	// Итерация 2: Поиск остатка по нужному складу
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаТаблицы.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураОтбора.Вставить("Склад", СтрокаТаблицы.Склад);
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОстатка Из НайденныеСтроки Цикл
			Если СтрокаОстатка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			Количество = Мин(СтрокаТаблицы.Количество, СтрокаОстатка.Количество);
			НоваяСтрока = НоваяТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Количество = Количество;
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Количество;
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Количество;
			Если СтрокаТаблицы.Количество <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// Итерация 3: Поиск остатка на других складах
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаТаблицы.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОстатка Из НайденныеСтроки Цикл
			Если СтрокаОстатка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			Количество = Мин(СтрокаТаблицы.Количество, СтрокаОстатка.Количество);
			НоваяСтрока = НоваяТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Количество = Количество;
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Количество;
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Количество;
			ИндексВставки = НоваяТаблицаДвижений.Индекс(НоваяСтрока);
			НоваяСтрокаПриход = НоваяТаблицаДвижений.Вставить(ИндексВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаТаблицы);
			НоваяСтрокаПриход.Количество = Количество;
			НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрокаРасход = НоваяТаблицаДвижений.Вставить(ИндексВставки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, НоваяСтрокаПриход);
			НоваяСтрокаРасход.Количество = - Количество;
			НоваяСтрокаРасход.Склад = СтрокаОстатка.Склад;
			Если СтрокаТаблицы.Количество <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	// Итерация 4: Оставшиеся строки переносим как есть, требуется для корректной работы контроля остатков
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаТаблицы.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = НоваяТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 
	
	ТаблицаДвижений = НоваяТаблицаДвижений;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК Т1 
	|	ПО Т.ЗаказПокупателя = Т1.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т.Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(Т1.Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли