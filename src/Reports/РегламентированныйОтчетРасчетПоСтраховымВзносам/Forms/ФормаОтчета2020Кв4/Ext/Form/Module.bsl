
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКC2021

&НаКлиенте
Перем ОбработкаКС Экспорт;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруРеквизитовФормы(Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ЗаполнитьКодОтчетногоПериода(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации
	= Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		Элементы.ФормаОткрытьФормуКонтекстныхНовостей.Видимость = Истина;
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.Отчет.РегламентированныйОтчетРасчетПоСтраховымВзносам",
			ИмяФормы(ЭтаФорма.ИмяФормы),
			,
			НСтр("ru='Новости: Расчет по страховым взносам'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОбъектОтчета.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.ИнициализироватьОбычныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы,
								 				мСтруктураМногоуровневыхРазделов,
								 				СтруктураДанныхРазделов);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗначениеВДанныеФормы(ОбъектОтчета.СтруктураСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ЭтаФорма["мДеревоСтраницОтчета"]);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ИсходныйОтчетЗаПервыйКвартал = Ложь;
	
	ОтчетСкопированОтчетныйГодИзменилсяС2020НаБолееПоздний = Ложь;
	ОтчетСкопированОтчетныйГодИзменилсяС2021НаБолееРанний  = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ИсходныйОтчетЗаПервыйКвартал
			= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 3);
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			
			Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 2020
				И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2020 Тогда
				ОтчетСкопированОтчетныйГодИзменилсяС2020НаБолееПоздний = Истина;
			ИначеЕсли Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) > 2020
				И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
				ОтчетСкопированОтчетныйГодИзменилсяС2021НаБолееРанний = Истина;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		ОбъектОтчета.ЗаполнитьЗначенияПоУмолчанию(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  СтруктураРеквизитовФормы,
												  СтруктураДанныхРазделов);
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту;
		МесяцОкончания = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ТабличныйДокумент.Области.Период.Значение = СтруктураРеквизитовФормы.КодОтчетногоПериода[
		"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
															СтруктураРеквизитовФормы,
															ДатаПодписи,
															ТабличныйДокумент);
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			Иначе
				РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
			КонецЕсли;
		Иначе
			ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
														СтруктураРеквизитовФормы,
														ДатаПодписи,
														ТабличныйДокумент);
		КонецЕсли;
		
		Если ОтчетСкопированОтчетныйГодИзменилсяС2021НаБолееРанний Тогда
			
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел1Прил3", 1, Ложь);
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел1Прил4", 1, Ложь);
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел1Прил5", 1, Ложь);
			
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел1Прил5_1", 0, Ложь);
			
		ИначеЕсли ОтчетСкопированОтчетныйГодИзменилсяС2020НаБолееПоздний Тогда
			
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел1Прил3", 0, Ложь);
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел1Прил4", 0, Ложь);
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел1Прил5", 0, Ложь);
			
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел1Прил5_1", 1, Ложь);
			
		КонецЕсли;
		
		Если ТабличныйДокумент.Области.ПоМесту.Значение = "124"
			ИЛИ ТабличныйДокумент.Области.ПоМесту.Значение = "240" Тогда
			ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2", 1, Ложь);
		Иначе
			ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2", 0, Ложь);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
			И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
			ДанныеСтраницы = ДеревоРазд.Строки[0].Данные;
			ДанныеСтраницы.Вставить("П000010012001", 0);
			ДанныеСтраницы.Вставить("П000010012101", 0);
			ДанныеСтраницы.Вставить("П000010012201", 0);
			ДанныеСтраницы.Вставить("П000010012301", 0);
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРазд, Новый УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
			
			ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
			ДанныеСтраницы = ДеревоРазд.Строки[0].Данные;
			ДанныеСтраницы.Вставить("П000120007001", 0);
			ДанныеСтраницы.Вставить("П000120007002", 0);
			ДанныеСтраницы.Вставить("П000120007003", 0);
			ДанныеСтраницы.Вставить("П000120007004", 0);
			Если ДанныеСтраницы["П000120009001"] = "2" Тогда
				ДанныеСтраницы.Вставить("П000120009001", "1");
			КонецЕсли;
			Если ДанныеСтраницы["П000120009003"] = "2" Тогда
				ДанныеСтраницы.Вставить("П000120009003", "1");
			КонецЕсли;
			Если ДанныеСтраницы["П000120009005"] = "2" Тогда
				ДанныеСтраницы.Вставить("П000120009005", "1");
			КонецЕсли;
			Если ДанныеСтраницы["П000120009007"] = "2" Тогда
				ДанныеСтраницы.Вставить("П000120009007", "1");
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРазд, Новый УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
			
			РасчетНаСервере();
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов)
	
	Если СтруктураДанныхРазделов.СтруктураДанныхТитульный.Количество() > 0 Тогда
		ЭтаФорма.СтруктураДанныхТитульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормы(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2020Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	ИмяСекции_КодыПериода_ПоМесту120_124
	= "КодыПериода_ПоМесту120_124_" + Формат(Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) / 3, "ЧГ=");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор расчетного периода", КоллекцияСписковВыбора[ИмяСекции_КодыПериода_ПоМесту120_124]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации, лишения полномочий, пр.)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000101", 0, ,
	"Выбор кода типа плательщика", КоллекцияСписковВыбора["КодыТипаПлательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010002001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр020"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010004001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М106001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр060"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М208001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр080"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010010001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел1_Стр100"]);
	
	//Прил. 1 к разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110000101", 0, ,
	"Выбор кода тарифа плательщика", КоллекцияСписковВыбора["КодыТарифаПлательщика"]);
	//Подр. 1.3.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П11131М100101", 1, ,
	"Выбор признака основания исчисления", КоллекцияСписковВыбора["ПризнакиОснованияИсчисления"]);
	//Подр. 1.3.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П11132М100101", 1, ,
	"Выбор кода основания исчисления", КоллекцияСписковВыбора["КодыОснованияИсчисления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П11132М100201", 1, ,
	"Выбор кода класса условий труда", КоллекцияСписковВыбора["КодыКлассаУсловийТруда"]);
	
	//Прил. 1.1 к разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00111М100101", 1, ,
	"Выбор кода основания исчисления", КоллекцияСписковВыбора["КодыОснованияИсчисленияНаДСО"]);
	
	//Прил. 2 к разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М100101", 0, ,
	"Выбор кода тарифа плательщика", КоллекцияСписковВыбора["КодыТарифаПлательщика"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М100201", 1, ,
	"Выбор признака выплат", КоллекцияСписковВыбора["ПризнакиВыплат"]);
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
		
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009001", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009003", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009005", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009007", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1"]);
		
	Иначе
		
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009001", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1_2020"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009003", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1_2020"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009005", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1_2020"]);
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120009007", 1, ,
		"Выбор признака", КоллекцияСписковВыбора["ПризнакиСтр090Прил2Разд1_2020"]);
		
	КонецЕсли;
	
	//Прил. 5.1 к разд. 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00151М100101", 1, ,
	"Выбор кода плательщика", КоллекцияСписковВыбора["КодыПлательщикаРаздел1Прил5_1"]);
	
	//Разд. 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020002001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел2_Стр020"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004001", 20, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК_Раздел2_Стр040"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М106301", 1, ,
	"Выбор пола", КоллекцияСписковВыбора["ПризнакиМЖ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М106501", 2, ,
	"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
	
	//Разд. 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001001", 1, ,
	"Выбор признака аннулирования сведений", КоллекцияСписковВыбора["ПризнакиАннулирования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310009001", 1, ,
	"Выбор пола", КоллекцияСписковВыбора["ПризнакиМЖ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310010001", 2, ,
	"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидовДокументов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00321М113001", 0, ,
	"Выбор кода категории застрахованного лица", КоллекцияСписковВыбора["КодыКатегорииЗастрахованногоЛица"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00322М119001", 0, ,
	"Выбор кода застрахованного лица", КоллекцияСписковВыбора["КодыЗастрахованногоЛица"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	КодФормыРеорганизации = СокрЛП(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
	
	КодПериода = Неопределено;
	
	Если ПоМесту = "120" ИЛИ ПоМесту = "124" Тогда
		КодПериода = СокрЛП(Форма.ТабличныйДокумент.Области.Период.Значение);
		ВозможныеКодыПериода = СтрРазделить("21,31,33,34,83,84,85,86", ",", Ложь);
		ТекВозмКодыПериода = Новый Массив;
		ТекВозмКодыПериода.Добавить(ВозможныеКодыПериода[МесяцОкончания / 3 - 1]);
		ТекВозмКодыПериода.Добавить(ВозможныеКодыПериода[МесяцОкончания / 3 + 3]);
		Если ЗначениеЗаполнено(КодПериода) И ТекВозмКодыПериода.Найти(КодПериода) = Неопределено Тогда
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		КонецЕсли;
	Иначе
		Если (ЗначениеЗаполнено(КодФормыРеорганизации) И КодФормыРеорганизации <> "9") Тогда
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"ЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		Иначе
			КодПериода = Форма.СтруктураРеквизитовФормы.КодОтчетногоПериода[
			"НеЗаполненКодФормыРеорганизации_" + МесяцОкончания];
		КонецЕсли;
	КонецЕсли;
	
	Если КодПериода <> Неопределено Тогда
		Форма.ТабличныйДокумент.Области.Период.Значение = КодПериода;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует,
										   Вариант,
										   ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
										   Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
				СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										НаимТекРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РазделыРеглОтчета = ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	РазделыРеглОтчета.Титульный = СтруктураДанныхТитульный;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("КодИФНС", КодИФНС);
	ПараметрыЗаписи.Вставить("КПП", КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыЗаписи.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
		
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ОбъектОтчета.ЗаписатьДокумент(СтруктураРеквизитовФормы.мВыбраннаяФорма, ПараметрыЗаписи) = Ложь Тогда
	
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПараметрыЗаписи.Ошибки[0];
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = ОбъектОтчета(ЭтаФорма.ИмяФормы).СохраненныеДанныеОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена",
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "ПечататьСтраницуРаздела3") Тогда
		Печать("ПоказатьБланкСтраницыРаздела3");
	ИначеЕсли Область.Имя = "СобратьДанные" Тогда
		СобратьДанные();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00018М107001")
		ИЛИ Область.Имя = "П000310008001" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии
		= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00321М112001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00322М118001") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоследнееЧисло = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПервоеЧисло = ПоследнееЧисло - 2;
		
		СписокМесяцев = Новый СписокЗначений;
		СписокМесяцев.Добавить("", "Пустое значение");
		СписокМесяцев.Добавить("1", ПредставлениеМесяцаОтчетногоПериода("1"));
		СписокМесяцев.Добавить("2", ПредставлениеМесяцаОтчетногоПериода("2"));
		СписокМесяцев.Добавить("3", ПредставлениеМесяцаОтчетногоПериода("3"));
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область),
		СписокМесяцев, Элементы.ТабличныйДокумент.ТекущаяОбласть, СписокМесяцев.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(
			Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
		ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010001001" ИЛИ ИмяПоказателя = "П000020001001" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010002001" ИЛИ ИмяПоказателя = "П000010004001"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М106001") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М208001")
		ИЛИ ИмяПоказателя = "П000010010001" ИЛИ ИмяПоказателя = "П000020002001" ИЛИ ИмяПоказателя = "П000020004001" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000110000101" ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00012М100101") Тогда
		КодТарифа = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодТарифа = СтрДлина(КодТарифа);
		Если ДлинаКодТарифа = 2 ИЛИ ДлинаКодТарифа = 0 Тогда
			Область.Значение = КодТарифа;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код тарифа должен состоять из 2 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00018М105001")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00021М104001") ИЛИ ИмяПоказателя = "П000310002001" Тогда
		ИННФЛ = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИННФЛ = СтрДлина(ИННФЛ);
		Если ДлинаИННФЛ = 12 ИЛИ ДлинаИННФЛ = 0 Тогда
			Область.Значение = ИННФЛ;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='ИНН физического лица должен состоять из 12 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00018М106001")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00021М105001") ИЛИ ИмяПоказателя = "П000310003001" Тогда
		СНИЛС = СокрЛП(ЗначПоказателя);
		ДлинаСНИЛС = СтрДлина(СНИЛС);
		Символ4 = "";
		Символ8 = "";
		Символ12 = "";
		Если ДлинаСНИЛС = 14 Тогда
			Символ4 = Сред(СНИЛС, 4, 1);
			Символ8 = Сред(СНИЛС, 8, 1);
			Символ12 = Сред(СНИЛС, 12, 1);
		КонецЕсли;
		Если ДлинаСНИЛС = 0 ИЛИ (ДлинаСНИЛС = 14
			И Символ4 = "-" И Символ8 = "-" И (Символ12 = " " ИЛИ Символ12 = "-")) Тогда
			Область.Значение = СНИЛС;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='СНИЛС должен состоять из 14 символов и соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра). Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00021М106501") ИЛИ ИмяПоказателя = "П000310010001" Тогда
		КодВидаДокумента = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКодВидаДокумента = СтрДлина(КодВидаДокумента);
		Если ДлинаКодВидаДокумента = 2 ИЛИ ДлинаКодВидаДокумента = 0 Тогда
			Область.Значение = КодВидаДокумента;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Код вида документа должен состоять из 2 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00021М106701") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00021М106702") Тогда
		ВведенноеЗначение = СтрЗаменить(СокрЛП(ЗначПоказателя), "№", "");
		_Постфикс = Сред(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
		СерияДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П00021М106701" + _Постфикс).Значение), "№", "");
		НомерДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П00021М106702" + _Постфикс).Значение), "№", "");
		Если СтрДлина(СерияДокумента) + СтрДлина(НомерДокумента) <= 24 Тогда
			Область.Значение = ВведенноеЗначение;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Общее количество символов в серии и номере документа не должно превышать 24. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000310011001" ИЛИ ИмяПоказателя = "П000310011002" Тогда
		ВведенноеЗначение = СтрЗаменить(СокрЛП(ЗначПоказателя), "№", "");
		СерияДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000310011001").Значение), "№", "");
		НомерДокумента = СтрЗаменить(СокрЛП(ТабличныйДокумент.Области.Найти("П000310011002").Значение), "№", "");
		Если СтрДлина(СерияДокумента) + СтрДлина(НомерДокумента) <= 24 Тогда
			Область.Значение = ВведенноеЗначение;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Общее количество символов в серии и номере документа не должно превышать 24. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
		
		Если СтрНачинаетсяС(ИмяПоказателя, "П000010012") И ЗначениеЗаполнено(ЗначПоказателя) Тогда
			
			Область.Очистить();
			Стр1 = Сред(ИмяПоказателя, 9, 3);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='С отчетного периода 1 квартал 2021 года строки 120-123 раздела 1 не подлежат заполнению. "
			+ "Значение в строке %1 очищено'"), Стр1);
			Сообщение.Сообщить();
			Мофицированность = Истина;
			
		ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000120007") И ЗначениеЗаполнено(ЗначПоказателя) Тогда
			
			Область.Очистить();
			Графа = Сред(ИмяПоказателя, 13);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru='С отчетного периода 1 квартал 2021 года строка 070 приложения 2 к разделу 1 не подлежит заполнению "
			+ "(письмо ФНС России от 29.01.2021 № БС-4-11/1020@). Значение в графе %1 строки 070 очищено'"), Графа);
			Сообщение.Сообщить();
			Мофицированность = Истина;
			
		ИначеЕсли ИмяПоказателя = "П000120009001" ИЛИ ИмяПоказателя = "П000120009003"
			ИЛИ ИмяПоказателя = "П000120009005" ИЛИ ИмяПоказателя = "П000120009007" Тогда
			
			Признак = СокрЛП(ЗначПоказателя);
			Если Признак = "2" Тогда
				Область.Очистить();
				Графа = Сред(ИмяПоказателя, 13);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='С отчетного периода 1 квартал 2021 года в строке 090 приложения 2 к разделу 1 признак ""2"" не может быть указан "
				+ "(письмо ФНС России от 29.01.2021 № БС-4-11/1020@). Значение в графе %1 строки 090 очищено'"), Графа);
				Сообщение.Сообщить();
				Мофицированность = Истина;
			ИначеЕсли ЗначениеЗаполнено(Признак) И Признак <> "1" Тогда
				Область.Очистить();
				Графа = Сред(ИмяПоказателя, 13);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='В строке 090 приложения 2 к разделу 1 указано некорректное значение признака. "
				+ "Значение в графе %1 строки 090 очищено'"), Графа);
				Сообщение.Сообщить();
				Мофицированность = Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Раздел1Прил3" И ЗначениеЗаполнено(ЗначПоказателя) Тогда
			
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='С отчетного периода 1 квартал 2021 года приложение 3 к разделу 1 не подлежит заполнению "
			+ "(письмо ФНС России от 29.01.2021 № БС-4-11/1020@). Значение очищено'");
			Сообщение.Сообщить();
			Мофицированность = Истина;
			
		ИначеЕсли ИмяРаздела = "Раздел1Прил4" И ЗначениеЗаполнено(ЗначПоказателя) Тогда
			
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='С отчетного периода 1 квартал 2021 года приложение 4 к разделу 1 не подлежит заполнению "
			+ "(письмо ФНС России от 29.01.2021 № БС-4-11/1020@). Значение очищено'");
			Сообщение.Сообщить();
			Мофицированность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрНачинаетсяС(ИмяПоказателя, "П000010011") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П000010012") Тогда
			ИмяПарногоПоказателя = ?(Лев(ИмяПоказателя, 10) = "П000010011",
			"П000010012", "П000010011") + Сред(ИмяПоказателя, 11);
			ОблПарногоПоказателя = ТабличныйДокумент.Области.Найти(ИмяПарногоПоказателя);
			Если ОблПарногоПоказателя <> Неопределено Тогда
				ЗначПарногоПоказателя = ОблПарногоПоказателя.Значение;
				Если ЗначениеЗаполнено(ЗначПоказателя) И ЗначениеЗаполнено(ЗначПарногоПоказателя) Тогда
					ОблПарногоПоказателя.Очистить();
					Стр1 = Сред(ИмяПоказателя, 9, 3);
					Стр2 = Сред(ИмяПарногоПоказателя, 9, 3);
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Не допускается одновременное заполнение строк %1 и %2. Значение в строке %2 очищено'"), Стр1, Стр2);
					Сообщение.Сообщить();
					РасчетНаКлиенте(ИмяРаздела, ИмяПарногоПоказателя);
					Мофицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000150005") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П000150006") Тогда
		Если Лев(ИмяПоказателя, 10) = "П000150005" Тогда
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П000150006002");
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П000150006003");
		Иначе
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П000150005002");
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П000150005003");
		КонецЕсли;
		Если ОблПарногоПоказателя1 <> Неопределено И ОблПарногоПоказателя2 <> Неопределено Тогда
			Если ЗначениеЗаполнено(ЗначПоказателя)
				И (ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) ИЛИ ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение))Тогда
				Если ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) И ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение) Тогда
					ТекстСообщения = "ru='Не допускается одновременное заполнение строк %1 и %2. Значения в строке %2 очищены'";
				Иначе
					ТекстСообщения = "ru='Не допускается одновременное заполнение строк %1 и %2. Значение в строке %2 очищено'";
				КонецЕсли;
				ОблПарногоПоказателя1.Очистить();
				ОблПарногоПоказателя2.Очистить();
				Стр1 = Сред(ИмяПоказателя, 9, 3);
				Стр2 = Сред(ОблПарногоПоказателя1.Имя, 9, 3);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(ТекстСообщения), Стр1, Стр2);
				Сообщение.Сообщить();
				Мофицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00151М105") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00151М106") Тогда
		Постфикс = Сред(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
		Если Лев(ИмяПоказателя, 10) = "П00151М105" Тогда
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П00151М106002" + Постфикс);
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П00151М106003" + Постфикс);
		Иначе
			ОблПарногоПоказателя1 = ТабличныйДокумент.Области.Найти("П00151М105002" + Постфикс);
			ОблПарногоПоказателя2 = ТабличныйДокумент.Области.Найти("П00151М105003" + Постфикс);
		КонецЕсли;
		Если ОблПарногоПоказателя1 <> Неопределено И ОблПарногоПоказателя2 <> Неопределено Тогда
			Если ЗначениеЗаполнено(ЗначПоказателя)
				И (ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) ИЛИ ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение))Тогда
				НомСтр = "В строке " + Сред(Постфикс, 1) + " группы строк 001-060";
				Если ЗначениеЗаполнено(ОблПарногоПоказателя1.Значение) И ЗначениеЗаполнено(ОблПарногоПоказателя2.Значение) Тогда
					ТекстСообщения = "ru='%1 не допускается одновременное заполнение строк %2 и %3. Значения в строке %3 очищены'";
				Иначе
					ТекстСообщения = "ru='%1 не допускается одновременное заполнение строк %2 и %3. Значение в строке %3 очищено'";
				КонецЕсли;
				ОблПарногоПоказателя1.Очистить();
				ОблПарногоПоказателя2.Очистить();
				Стр1 = Сред(ИмяПоказателя, 9, 3);
				Стр2 = Сред(ОблПарногоПоказателя1.Имя, 9, 3);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(ТекстСообщения), НомСтр, Стр1, Стр2);
				Сообщение.Сообщить();
				Мофицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000310004001"
		ИЛИ ИмяПоказателя = "П000310005001"
		ИЛИ ИмяПоказателя = "П000310006001"
		ИЛИ ИмяПоказателя = "П000310007001" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000310004001").Значение);
		СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000310005001").Значение);
		СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000310006001").Значение);
		СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000310007001").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРаздела3ФормыРСВ(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРаздела3ФормыРСВ(СтруктПарам);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000110000101" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("КодТарифа", ТабличныйДокумент.Область("П000110000101").Значение);
		СтруктПарам.Вставить("НомерСтраницы",
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" И (Область.Имя = "КодФормыРеорганизации" ИЛИ Область.Имя = "ПоМесту") Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	// Особая обработка для подраздела 3.2 раздела 3.
	Если Область.Имя = "П000030001001" И СокрЛП(Область.Значение) = "1" Тогда
		УдалитьДополнительныеСтрокиВРазделе3();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Область.Имя, "П00018М108003") Тогда
		СтруктураРеквизитовФормы.Вставить("БезПереходаВТабличномДокументе");
		Элемент.ТекущаяОбласть = ТабличныйДокумент.Область(СтрЗаменить(Область.Имя, "П00018М108003", "П00018М108004"));
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00018М108004") Тогда
		ИмяОбл = "П00018М102001" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(
		РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(Область.Имя) + 1);
		Обл = ТабличныйДокумент.Области.Найти(ИмяОбл);
		Если Обл <> Неопределено Тогда
			СтруктураРеквизитовФормы.Вставить("БезПереходаВТабличномДокументе");
			Элемент.ТекущаяОбласть = Обл;
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00018М102001") Тогда
		ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоСтрокам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
	СтруктураРеквизитовФормы, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
		// Особая обработка для приложения 5.1 к разделу 1.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил5_1" Тогда
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Особая обработка для подраздела 3.2 раздела 3.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			Обл = ТабличныйДокумент.Области.Найти("П000030001001");
			Если Обл <> Неопределено И СокрЛП(Обл.Значение) = "1" Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("БезПереходаВТабличномДокументе") Тогда
		ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.БезПерехода;
		СтруктураРеквизитовФормы.Удалить("БезПереходаВТабличномДокументе");
	Иначе
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы18М1 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы19М1
			ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы21М1 Тогда
			ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоСтрокам;
		Иначе
			ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоКолонкам;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ПоМесту = СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение);
		
		УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте_ЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте_ЗаполнитьСведенияОПодписантах(СсылкаНаРегистрациюВНО)
	
	ПоМесту = СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение);
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																			   СсылкаНаРегистрациюВНО,
																			   СтруктураРеквизитовФормы,
																			   ПоМесту);
	
	ОбъектОтчета.ЗаполнитьСведенияОПодписантах(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если Область.Значение = РеквизитыЭлемента.ЦифровойКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыЭлемента.ЦифровойКод;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочника(Результат)
	
	Возврат Новый Структура("ЦифровойКод", Результат.Код);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеМесяцаОтчетногоПериода(НомерМесяцаСтрокой)
	
	ПоследнийМесяцОтчетногоПериода = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ПоследнийМесяцОтчетногоПериода = 3 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru='1 - январь'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru='2 - февраль'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru='3 - март'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 6 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru='1 - апрель'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru='2 - май'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru='3 - июнь'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 9 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru='1 - июль'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru='2 - август'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru='3 - сентябрь'");
		КонецЕсли;
	ИначеЕсли ПоследнийМесяцОтчетногоПериода = 12 Тогда
		Если НомерМесяцаСтрокой = "1" Тогда
			Возврат НСтр("ru='1 - октябрь'");
		ИначеЕсли НомерМесяцаСтрокой = "2" Тогда
			Возврат НСтр("ru='2 - ноябрь'");
		ИначеЕсли НомерМесяцаСтрокой = "3" Тогда
			Возврат НСтр("ru='3 - декабрь'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "217" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					Форма.ТабличныйДокумент.Области.НаимОрг.Значение
					= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ИП И (ЗначПоМесту = "120" ИЛИ ЗначПоМесту = "124") Тогда
			РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Период);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Период, Ложь);
		КонецЕсли;
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021
			И (ЗначПоМесту = "335" ИЛИ ЗначПоМесту = "222" ИЛИ ЗначКодФормыРеорг = "9") Тогда
			Форма.ТабличныйДокумент.Области["СрСпЧисленность"].Формат = "";
		Иначе
			Форма.ТабличныйДокумент.Области["СрСпЧисленность"].Формат = "ЧН=0";
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области["СекцияПояснение_НомерКорректировки"].Видимость
		= Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		ТипПлательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П000010000101.Значение);
		
		Если ТипПлательщика = "2" Тогда
			
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если Обл.Имя = "П000010003101" ИЛИ Обл.Имя = "П000010003201" ИЛИ Обл.Имя = "П000010003301"
					ИЛИ Обл.Имя = "П000010005101" ИЛИ Обл.Имя = "П000010005201" ИЛИ Обл.Имя = "П000010005301"
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107301")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209301")
					ИЛИ Обл.Имя = "П000010012101" ИЛИ Обл.Имя = "П000010012201" ИЛИ Обл.Имя = "П000010012301" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				ИначеЕсли Обл.Имя = "П000010003001" ИЛИ Обл.Имя = "П000010005001"
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107001") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209001")
					ИЛИ Обл.Имя = "П000010011001" ИЛИ Обл.Имя = "П000010012001" Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если Обл.Имя = "П000010003101" ИЛИ Обл.Имя = "П000010003201" ИЛИ Обл.Имя = "П000010003301"
					ИЛИ Обл.Имя = "П000010005101" ИЛИ Обл.Имя = "П000010005201" ИЛИ Обл.Имя = "П000010005301"
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М107301")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209101") ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209201")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П00001М209301")
					ИЛИ Обл.Имя = "П000010012101" ИЛИ Обл.Имя = "П000010012201" ИЛИ Обл.Имя = "П000010012301" Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если НЕ СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М1)
					И НЕ СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М2) Тогда
					АвтоРасчПоказатели.Добавить(Пок.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Инд = 1;
			Инд_Строка = "_1";
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00001М107101" + Инд_Строка);
			Пока Обл <> Неопределено Цикл
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Если СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М1) Тогда
						АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
					КонецЕсли;
				КонецЦикла;
				Инд = Инд + 1;
				Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00001М107101" + Инд_Строка);
			КонецЦикла;
			
			Инд = 1;
			Инд_Строка = "_1";
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00001М209101" + Инд_Строка);
			Пока Обл <> Неопределено Цикл
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Если СтрНачинаетсяС(Пок.Ключ, Форма.СтруктураРеквизитовФормы.мИдГруппы1М2) Тогда
						АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
					КонецЕсли;
				КонецЦикла;
				Инд = Инд + 1;
				Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00001М209101" + Инд_Строка);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_1и1_2" ИЛИ ИмяРаздела = "Раздел1Прил6" ИЛИ ИмяРаздела = "Раздел1Прил7" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил3" ИЛИ ИмяРаздела = "Раздел1Прил4" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			РазделЗаполнен = Ложь;
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если СтрНачинаетсяС(Обл.Имя, "П0") И ЗначениеЗаполнено(Обл.Значение) Тогда
					РазделЗаполнен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ РазделЗаполнен Тогда
				Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
					Если СтрНачинаетсяС(Обл.Имя, "П0") Тогда
						ЗапретитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области["СекцияПояснение"].Видимость
		= Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12М1;
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			Если НЕ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы) Тогда
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00012М101001" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если СтрНачинаетсяС(Пок.Ключ, ИмяГруппы) Тогда
					АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
				КонецЕсли;
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00012М101001" + Инд_Строка);
		КонецЦикла;
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			ИменаЯчеек_Стр070 = СтрРазделить("П000120007001,П000120007002,П000120007003,П000120007004", ",", Ложь);
			
			Стр070Заполнена = Ложь;
			Для каждого ИмяЯчейки Из ИменаЯчеек_Стр070 Цикл
				Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области[ИмяЯчейки].Значение) Тогда
					Стр070Заполнена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ Стр070Заполнена Тогда
				Для каждого ИмяЯчейки Из ИменаЯчеек_Стр070 Цикл
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области[ИмяЯчейки]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области["СекцияПояснение"].Видимость
		= Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П11131М101002" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П11131М101002" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П11132М101002" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П11132М101002" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1_1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00111М101002" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
			КонецЦикла;
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00111М101002" + Инд_Строка);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
		Иначе
			
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если СтрНачинаетсяС(Обл.Имя, "П0") Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5_1" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы151М1;
			
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если СтрНачинаетсяС(Обл.Имя, ИмяГруппы) Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				ИначеЕсли СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00151М1") Тогда
					Обл.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			
			Ном = 1;
			Постфикс = "_1";
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00151М100101_1");
			Пока Обл <> Неопределено Цикл
				
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					АвтоРасчПоказатели.Добавить(Пок.Ключ + Постфикс);
				КонецЦикла;
				
				Если СокрЛП(Обл.Значение) = "2" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П00151М106002" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П00151М106003" + Постфикс));
				Иначе
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П00151М106002" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Область("П00151М106003" + Постфикс));
				КонецЕсли;
				
				Ном = Ном + 1;
				Постфикс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00151М100101" + Постфикс);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил8" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			Если Пок.Значение = "Итог" Тогда
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00018М108001" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если Пок.Ключ <> "Итого" И Пок.Значение <> "Итог" Тогда
					АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
				КонецЕсли;
			КонецЦикла;
			
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00018М108001" + Инд_Строка);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил9" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			Если Пок.Значение = "Итог" Тогда
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Инд = 1;
		Инд_Строка = "_1";
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00019М108001" + Инд_Строка);
		Пока Обл <> Неопределено Цикл
			
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если Пок.Ключ <> "Итого" И Пок.Значение <> "Итог" Тогда
					АвтоРасчПоказатели.Добавить(Пок.Ключ + Инд_Строка);
				КонецЕсли;
			КонецЦикла;
			
			Инд = Инд + 1;
			Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00019М108001" + Инд_Строка);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			Если Пок.Значение = "Итог" Тогда
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ОблПрАннулирования = Форма.ТабличныйДокумент.Области.Найти("П000030001001");
		
		Если ОблПрАннулирования <> Неопределено Тогда
			
			ПрАннулирования = СокрЛП(ОблПрАннулирования.Значение);
			
			Форма.ТабличныйДокумент.Области["СекцияПояснение_Подраздел32"].Видимость = ПрАннулирования = "1";
			
			Ном = 1;
			Постфикс = "_1";
			Обл = Форма.ТабличныйДокумент.Области["П00321М112001_1"];
			Пока Обл <> Неопределено Цикл
				Если ПрАннулирования = "1" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М113001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М114001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М115001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М116001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М117001" + Постфикс));
				Иначе
					РазрешитьВводДанныхВОбласть(Форма, Обл);
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М113001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М114001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М115001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М116001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00321М117001" + Постфикс));
				КонецЕсли;
				Ном = Ном + 1;
				Постфикс = "_" + Формат(Ном, "ЧГ=");
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00321М112001" + Постфикс);
			КонецЦикла;
			
			Ном = 1;
			Постфикс = "_1";
			Обл = Форма.ТабличныйДокумент.Области["П00322М118001_1"];
			Пока Обл <> Неопределено Цикл
				Если ПрАннулирования = "1" Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М119001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М120001" + Постфикс));
					ЗапретитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М121001" + Постфикс));
				Иначе
					РазрешитьВводДанныхВОбласть(Форма, Обл);
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М119001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М120001" + Постфикс));
					РазрешитьВводДанныхВОбласть(Форма, Форма.ТабличныйДокумент.Области.Найти("П00322М121001" + Постфикс));
				КонецЕсли;
				Ном = Ном + 1;
				Постфикс = "_" + Формат(Ном, "ЧГ=");
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00322М118001" + Постфикс);
			КонецЦикла;
			
			Ном = 0;
			Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
				Если СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00321М1")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтрокиП00322М1") Тогда
					Если ПрАннулирования = "1" Тогда
						Обл.Видимость = Ложь;
					Иначе
						Обл.Видимость = Истина;
					КонецЕсли;
					Ном = Ном + 1;
					Если Ном = 2 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			Обл.Защита = Ложь;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			Обл.Защита = Истина;
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	ОбрабатываемаяОбласть.Защита = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	ОбрабатываемаяОбласть.Защита = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
			ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		Форма.СтруктураРеквизитовФормы, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска)
			И Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Отображение данных других разделов.
		Обл = ТабличныйДокумент.Области.Найти("П000110000101");
		Если Обл <> Неопределено И ИмяТекРаздела <> "Раздел1Прил1" Тогда
			Обл.Текст = ДеревоДанныхРаздела.Строки[НовыеНомераСтрокМногоуровнегоРаздела[0] - 1].Данные.П000110000101;
		КонецЕсли;
		
		// Добавление в многострочную часть необходимого количества дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ОбъектОтчета.ВставитьДопСтроку(ЭтаФорма.ИмяФормы,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ЭлемСтруктуры.Ключ,
											   ИмяОбластиПреемника);
				Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1Прил1" ИЛИ ИмяРаздела = "Раздел3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел3" Тогда
		Обл = ТабличныйДокумент.Области.Найти("СекцияУдалитьСтраницу");
		Если Обл <> Неопределено Тогда
			Обл.Видимость = Истина;
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы (добавляется строка в конец коллекции строк дерева значений).
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ОбъектОтчета.ИнициализироватьПодчиненныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													ИмяРаздела,
													НовВетка,
													мСтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ИндексыВыделенныхСтраницРаздела = ИндексыВыделенныхСтраницРаздела();
	
	Если ИндексыВыделенныхСтраницРаздела <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИндексыВыделенныхСтраницРаздела", ИндексыВыделенныхСтраницРаздела);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Удалить выделенные страницы?'");
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
		
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1Прил1" ИЛИ ИмяРаздела = "Раздел3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИндексыВыделенныхСтраницРаздела") Тогда
		
		СписокИндексовУдаляемыхСтраниц = Новый СписокЗначений;
		СписокИндексовУдаляемыхСтраниц.ЗагрузитьЗначения(ДополнительныеПараметры["ИндексыВыделенныхСтраницРаздела"]);
		СписокИндексовУдаляемыхСтраниц.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИндексыУдаляемыхСтраниц = СписокИндексовУдаляемыхСтраниц.ВыгрузитьЗначения();
		
		ИндексПоследнейУдаляемойСтраницы = ИндексыУдаляемыхСтраниц[0];
		ИндексПоследнейСтраницы = ДеревоДанных.Строки.Количество() - 1;
		
		Если ИндексПоследнейУдаляемойСтраницы = ИндексПоследнейСтраницы Тогда
			СтраницаДляФокусированияПослеУдаления = Неопределено;
		Иначе
			СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ИндексПоследнейУдаляемойСтраницы + 1];
		КонецЕсли;
		
		Для каждого ИндексУдаляемойСтраницы Из ИндексыУдаляемыхСтраниц Цикл
			ДеревоДанных.Строки.Удалить(ИндексУдаляемойСтраницы);
		КонецЦикла;
		
		Если СтраницаДляФокусированияПослеУдаления = Неопределено Тогда
			Если ДеревоДанных.Строки.Количество() = 0 Тогда
				ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
				СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, ИмяРаздела);
				ДеревоДанных = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[0];
			Иначе
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ДеревоДанных.Строки.Количество() - 1];
			КонецЕсли;
		КонецЕсли;
		
		НомСтраницыПослеУдаления = ДеревоДанных.Строки.Индекс(СтраницаДляФокусированияПослеУдаления) + 1;
		
	Иначе
		
		НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
		НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		
		НомСтраницыПослеУдаления
		= ?(НомУдаляемойСтраницы = НомПоследнейСтраницы, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
		
		ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
		
	КонецЕсли;
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИндексыВыделенныхСтраницРаздела()
	
	ИндексыВыделенныхСтраниц = Неопределено;
	
	Если ТипЗнч(Элементы.РазделыОтчета.ВыделенныеСтроки) = Тип("Массив")
		И Элементы.РазделыОтчета.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ИндексыВыделенныхСтраниц = Новый Массив;
		Для каждого ИдентификаторСтроки Из Элементы.РазделыОтчета.ВыделенныеСтроки Цикл
			
			ЭлементДерева = РазделыОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ЭлементДерева.КолонкаРазделыОтчетаСокрНаим <> СтруктураРеквизитовФормы.НаимТекущегоРаздела
				ИЛИ ЭлементДерева.ПолучитьРодителя() = Неопределено
				ИЛИ ЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			ИндексыВыделенныхСтраниц.Добавить(ЭлементДерева.КолонкаНомерСтраницыРазделаОтчета - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИндексыВыделенныхСтраниц;
	
КонецФункции

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		Обл = ТабличныйДокумент.Области.Найти("СекцияУдалитьСтраницу");
		Если Обл <> Неопределено Тогда
			Обл.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = "";
			ОблУдалитьСтраницу.Гиперссылка = Ложь;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = "";
			ОблУдалитьСтраницу.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		ИмяОбласти = ТабличныйДокумент.ТекущаяОбласть.Имя;
		ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
		ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
		
		Если СтрНачинаетсяС(ИмяОбласти, СтруктураРеквизитовФормы.мИдГруппы1М1) Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы1М1]["ИменаГраф"][0];
			Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_4") <> Неопределено Тогда
				ТекстПредупреждения = НСтр(
				"ru = 'Возможно не более четырех групп строк 060-073 в разделе 1'");
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(ИмяОбласти, СтруктураРеквизитовФормы.мИдГруппы1М2) Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппы1М2]["ИменаГраф"][0];
			Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
				ТекстПредупреждения = НСтр(
				"ru = 'Возможно не более двух групп строк 080-093 в разделе 1'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_1" Тогда
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы11131М1]["ИменаГраф"][0];
		Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более двух групп строк 001-050 в подразделе 1.3.1 приложения 1 к разделу 1'");
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_2" Тогда
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы11132М1]["ИменаГраф"][0];
		Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_10") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более десяти групп строк 001-050 в подразделе 1.3.2 приложения 1 к разделу 1'");
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1_1" Тогда
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы111М1]["ИменаГраф"][0];
		Если ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_2") <> Неопределено Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'Возможно не более двух групп строк 001-050 в приложении 1.1 к разделу 1'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил5_1" Тогда
		
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяТекОбласти);
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ОбъектОтчета.ВставитьДопСтроку(ЭтаФорма.ИмяФормы,
									   СтруктураРеквизитовФормы,
									   ТабличныйДокумент,
									   ИмяГруппы,
									   ИмяОбластиПреемника);
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
		
		// Особая обработка текста в строке 020 Приложения 9 к Разделу 1.
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы19М1 Тогда
			
			Инд020 = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника) + 1;
			Инд020_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд020);
			
			ИмяПокСтр020 = "П00019М102001" + Инд020_Строка;
			Обл020 = ТабличныйДокумент.Области.Найти(ИмяПокСтр020);
			Обл020.Значение = Формат(Инд020, "ЧЦ=5; ЧВН=; ЧГ=");
			
		КонецЕсли;
		
		ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
		
		СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											СтруктураРеквизитовФормы,
											мСтруктураМногоуровневыхРазделов,
											СтруктураДанныхРазделов,
											ТабличныйДокумент,
											СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбласти);
	
	ТекИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
		"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Особая обработка текста в строке 020 Приложения 9 к Разделу 1.
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы19М1 Тогда
			
			Инд020 = ТекИндекс_Число;
			Инд020_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд020);
			Обл020 = ТабличныйДокумент.Области.Найти("П00019М102001" + Инд020_Строка);
			
			Пока Обл020 <> Неопределено Цикл
				Обл020.Значение = Формат(Инд020, "ЧЦ=5; ЧВН=; ЧГ=");
				
				Инд020 = Инд020 + 1;
				Инд020_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд020);
				Обл020 = ТабличныйДокумент.Области.Найти("П00019М102001" + Инд020_Строка);
			КонецЦикла;
			
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительныеСтрокиВРазделе3()
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00321М1_2");
	Пока Обл <> Неопределено Цикл
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		УдалитьДопСтрокуНаСервере();
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00321М1_2");
	КонецЦикла;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00322М1_2");
	Пока Обл <> Неопределено Цикл
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		УдалитьДопСтрокуНаСервере();
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтрокуП00322М1_2");
	КонецЦикла;
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ПреКоординаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗаПервыйКвартал = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ТипПлательщика = СокрЛП(ТДО.П000010000101.Значение);
				
				Если ТипПлательщика = "2" Тогда
					
					ТДО["П000010003101"].Значение = 0;
					ТДО["П000010003201"].Значение = 0;
					ТДО["П000010003301"].Значение = 0;
					
					ТДО["П000010005101"].Значение = 0;
					ТДО["П000010005201"].Значение = 0;
					ТДО["П000010005301"].Значение = 0;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М107101" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = 0;
						ТДО["П00001М107201" + Инд_Строка].Значение = 0;
						ТДО["П00001М107301" + Инд_Строка].Значение = 0;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М107101" + Инд_Строка);
					КонецЦикла;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М209101" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = 0;
						ТДО["П00001М209201" + Инд_Строка].Значение = 0;
						ТДО["П00001М209301" + Инд_Строка].Значение = 0;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М209101" + Инд_Строка);
					КонецЦикла;
					
					ТДО["П000010012101"].Значение = 0;
					ТДО["П000010012201"].Значение = 0;
					ТДО["П000010012301"].Значение = 0;
					
				ИначеЕсли РасчетЗаПервыйКвартал Тогда
					
					ТДО["П000010003001"].Значение
					= ТДО["П000010003101"].Значение + ТДО["П000010003201"].Значение + ТДО["П000010003301"].Значение;
					
					ТДО["П000010005001"].Значение
					= ТДО["П000010005101"].Значение + ТДО["П000010005201"].Значение + ТДО["П000010005301"].Значение;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М107001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = ТДО["П00001М107101" + Инд_Строка].Значение
						+ ТДО["П00001М107201" + Инд_Строка].Значение + ТДО["П00001М107301" + Инд_Строка].Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М107001" + Инд_Строка);
					КонецЦикла;
					
					Инд = 1;
					Инд_Строка = "_1";
					Обл = ТДО.Найти("П00001М209001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Обл.Значение = ТДО["П00001М209101" + Инд_Строка].Значение
						+ ТДО["П00001М209201" + Инд_Строка].Значение + ТДО["П00001М209301" + Инд_Строка].Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00001М209001" + Инд_Строка);
					КонецЦикла;
					
					Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
						
						ТДО["П000010011001"].Значение
						= ТДО["П000010011101"].Значение + ТДО["П000010011201"].Значение + ТДО["П000010011301"].Значение;
						
					Иначе
						
						ПромежуточнаяСумма
						= ТДО["П000010011101"].Значение + ТДО["П000010011201"].Значение + ТДО["П000010011301"].Значение
						- ТДО["П000010012101"].Значение - ТДО["П000010012201"].Значение - ТДО["П000010012301"].Значение;
						ТДО["П000010011001"].Значение = Макс(ПромежуточнаяСумма, 0);
						ТДО["П000010012001"].Значение = - Мин(ПромежуточнаяСумма, 0);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_1и1_2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110003001, ОбластьИмя) > 0 Тогда
						ТДО["П011110003001"].Значение = ТДО["П011110003002"].Значение
						+ ТДО["П011110003003"].Значение + ТДО["П011110003004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110004001, ОбластьИмя) > 0 Тогда
						ТДО["П011110004001"].Значение = ТДО["П011110004002"].Значение
						+ ТДО["П011110004003"].Значение + ТДО["П011110004004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110004501, ОбластьИмя) > 0 Тогда
						ТДО["П011110004501"].Значение = ТДО["П011110004502"].Значение
						+ ТДО["П011110004503"].Значение + ТДО["П011110004504"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110005101, ОбластьИмя) > 0 Тогда
						ТДО["П011110005101"].Значение = ТДО["П011110005102"].Значение
						+ ТДО["П011110005103"].Значение + ТДО["П011110005104"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006101, ОбластьИмя) > 0 Тогда
						ТДО["П011110006101"].Значение = ТДО["П011110006102"].Значение
						+ ТДО["П011110006103"].Значение + ТДО["П011110006104"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006201, ОбластьИмя) > 0 Тогда
						ТДО["П011110006201"].Значение = ТДО["П011110006202"].Значение
						+ ТДО["П011110006203"].Значение + ТДО["П011110006204"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120003001, ОбластьИмя) > 0 Тогда
						ТДО["П011120003001"].Значение = ТДО["П011120003002"].Значение
						+ ТДО["П011120003003"].Значение + ТДО["П011120003004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120004001, ОбластьИмя) > 0 Тогда
						ТДО["П011120004001"].Значение = ТДО["П011120004002"].Значение
						+ ТДО["П011120004003"].Значение + ТДО["П011120004004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120004501, ОбластьИмя) > 0 Тогда
						ТДО["П011120004501"].Значение = ТДО["П011120004502"].Значение
						+ ТДО["П011120004503"].Значение + ТДО["П011120004504"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120006001, ОбластьИмя) > 0 Тогда
						ТДО["П011120006001"].Значение = ТДО["П011120006002"].Значение
						+ ТДО["П011120006003"].Значение + ТДО["П011120006004"].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110005001, ОбластьИмя) > 0 Тогда
					ТДО["П011110005001"].Значение = ТДО["П011110003001"].Значение
					- ТДО["П011110004001"].Значение - ТДО["П011110004501"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110005002, ОбластьИмя) > 0 Тогда
					ТДО["П011110005002"].Значение = ТДО["П011110003002"].Значение
					- ТДО["П011110004002"].Значение - ТДО["П011110004502"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110005003, ОбластьИмя) > 0 Тогда
					ТДО["П011110005003"].Значение = ТДО["П011110003003"].Значение
					- ТДО["П011110004003"].Значение - ТДО["П011110004503"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110005004, ОбластьИмя) > 0 Тогда
					ТДО["П011110005004"].Значение = ТДО["П011110003004"].Значение
					- ТДО["П011110004004"].Значение - ТДО["П011110004504"].Значение;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006001, ОбластьИмя) > 0 Тогда
					ТДО["П011110006001"].Значение = ТДО["П011110006101"].Значение + ТДО["П011110006201"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006002, ОбластьИмя) > 0 Тогда
					ТДО["П011110006002"].Значение = ТДО["П011110006102"].Значение + ТДО["П011110006202"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006003, ОбластьИмя) > 0 Тогда
					ТДО["П011110006003"].Значение = ТДО["П011110006103"].Значение + ТДО["П011110006203"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011110006004, ОбластьИмя) > 0 Тогда
					ТДО["П011110006004"].Значение = ТДО["П011110006104"].Значение + ТДО["П011110006204"].Значение;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120005001, ОбластьИмя) > 0 Тогда
					ТДО["П011120005001"].Значение = ТДО["П011120003001"].Значение
					- ТДО["П011120004001"].Значение - ТДО["П011120004501"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120005002, ОбластьИмя) > 0 Тогда
					ТДО["П011120005002"].Значение = ТДО["П011120003002"].Значение
					- ТДО["П011120004002"].Значение - ТДО["П011120004502"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120005003, ОбластьИмя) > 0 Тогда
					ТДО["П011120005003"].Значение = ТДО["П011120003003"].Значение
					- ТДО["П011120004003"].Значение - ТДО["П011120004503"].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П011120005004, ОбластьИмя) > 0 Тогда
					ТДО["П011120005004"].Значение = ТДО["П011120003004"].Значение
					- ТДО["П011120004004"].Значение - ТДО["П011120004504"].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М102001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11131М102001" + _Инд].Значение = ТДО["П11131М102002" + _Инд].Значение
						+ ТДО["П11131М102003" + _Инд].Значение + ТДО["П11131М102004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М103001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11131М103001" + _Инд].Значение = ТДО["П11131М103002" + _Инд].Значение
						+ ТДО["П11131М103003" + _Инд].Значение + ТДО["П11131М103004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М105001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11131М105001" + _Инд].Значение = ТДО["П11131М105002" + _Инд].Значение
						+ ТДО["П11131М105003" + _Инд].Значение + ТДО["П11131М105004" + _Инд].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М104001, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11131М104001" + _Инд].Значение = ТДО["П11131М102001" + _Инд].Значение
					- ТДО["П11131М103001" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М104002, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11131М104002" + _Инд].Значение = ТДО["П11131М102002" + _Инд].Значение
					- ТДО["П11131М103002" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М104003, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11131М104003" + _Инд].Значение = ТДО["П11131М102003" + _Инд].Значение
					- ТДО["П11131М103003" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11131М104004, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11131М104004" + _Инд].Значение = ТДО["П11131М102004" + _Инд].Значение
					- ТДО["П11131М103004" + _Инд].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М102001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11132М102001" + _Инд].Значение = ТДО["П11132М102002" + _Инд].Значение
						+ ТДО["П11132М102003" + _Инд].Значение + ТДО["П11132М102004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М103001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11132М103001" + _Инд].Значение = ТДО["П11132М103002" + _Инд].Значение
						+ ТДО["П11132М103003" + _Инд].Значение + ТДО["П11132М103004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М105001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П11132М105001" + _Инд].Значение = ТДО["П11132М105002" + _Инд].Значение
						+ ТДО["П11132М105003" + _Инд].Значение + ТДО["П11132М105004" + _Инд].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М104001, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11132М104001" + _Инд].Значение = ТДО["П11132М102001" + _Инд].Значение
					- ТДО["П11132М103001" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М104002, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11132М104002" + _Инд].Значение = ТДО["П11132М102002" + _Инд].Значение
					- ТДО["П11132М103002" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М104003, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11132М104003" + _Инд].Значение = ТДО["П11132М102003" + _Инд].Значение
					- ТДО["П11132М103003" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П11132М104004, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П11132М104004" + _Инд].Значение = ТДО["П11132М102004" + _Инд].Значение
					- ТДО["П11132М103004" + _Инд].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1_1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М102001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00111М102001" + _Инд].Значение = ТДО["П00111М102002" + _Инд].Значение
						+ ТДО["П00111М102003" + _Инд].Значение + ТДО["П00111М102004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М103001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00111М103001" + _Инд].Значение = ТДО["П00111М103002" + _Инд].Значение
						+ ТДО["П00111М103003" + _Инд].Значение + ТДО["П00111М103004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М105001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00111М105001" + _Инд].Значение = ТДО["П00111М105002" + _Инд].Значение
						+ ТДО["П00111М105003" + _Инд].Значение + ТДО["П00111М105004" + _Инд].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М104001, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00111М104001" + _Инд].Значение = ТДО["П00111М102001" + _Инд].Значение
					- ТДО["П00111М103001" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М104002, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00111М104002" + _Инд].Значение = ТДО["П00111М102002" + _Инд].Значение
					- ТДО["П00111М103002" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М104003, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00111М104003" + _Инд].Значение = ТДО["П00111М102003" + _Инд].Значение
					- ТДО["П00111М103003" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00111М104004, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00111М104004" + _Инд].Значение = ТДО["П00111М102004" + _Инд].Значение
					- ТДО["П00111М103004" + _Инд].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М102001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00012М102001" + _Инд].Значение = ТДО["П00012М102002" + _Инд].Значение
						+ ТДО["П00012М102003" + _Инд].Значение + ТДО["П00012М102004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М103001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00012М103001" + _Инд].Значение = ТДО["П00012М103002" + _Инд].Значение
						+ ТДО["П00012М103003" + _Инд].Значение + ТДО["П00012М103004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М104001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00012М104001" + _Инд].Значение = ТДО["П00012М104002" + _Инд].Значение
						+ ТДО["П00012М104003" + _Инд].Значение + ТДО["П00012М104004" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М105501, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00012М105501" + _Инд].Значение = ТДО["П00012М105502" + _Инд].Значение
						+ ТДО["П00012М105503" + _Инд].Значение + ТДО["П00012М105504" + _Инд].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М106001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00012М106001" + _Инд].Значение = ТДО["П00012М106002" + _Инд].Значение
						+ ТДО["П00012М106003" + _Инд].Значение + ТДО["П00012М106004" + _Инд].Значение;
					КонецЕсли;
					
					Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
						
						Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000120007001, ОбластьИмя) > 0 Тогда
							ТДО["П000120007001"].Значение = ТДО["П000120007002"].Значение
							+ ТДО["П000120007003"].Значение + ТДО["П000120007004"].Значение;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000120008001, ОбластьИмя) > 0 Тогда
						ТДО["П000120008001"].Значение = ТДО["П000120008002"].Значение
						+ ТДО["П000120008003"].Значение + ТДО["П000120008004"].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М105001, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00012М105001" + _Инд].Значение = ТДО["П00012М102001" + _Инд].Значение
					- ТДО["П00012М103001" + _Инд].Значение - ТДО["П00012М104001" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М105002, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00012М105002" + _Инд].Значение = ТДО["П00012М102002" + _Инд].Значение
					- ТДО["П00012М103002" + _Инд].Значение - ТДО["П00012М104002" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М105003, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00012М105003" + _Инд].Значение = ТДО["П00012М102003" + _Инд].Значение
					- ТДО["П00012М103003" + _Инд].Значение - ТДО["П00012М104003" + _Инд].Значение;
				КонецЕсли;
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00012М105004, ОбластьИмяБезИнд) > 0 Тогда
					ТДО["П00012М105004" + _Инд].Значение = ТДО["П00012М102004" + _Инд].Значение
					- ТДО["П00012М103004" + _Инд].Значение - ТДО["П00012М104004" + _Инд].Значение;
				КонецЕсли;
				
				Сумма060_Гр1 = 0;
				Сумма060_Гр2 = 0;
				Сумма060_Гр3 = 0;
				Сумма060_Гр4 = 0;
				ТекИнд = 1;
				_ТекИнд = "_1";
				ТекОбл = ТДО.Найти("П00012М106001_1");
				Пока ТекОбл <> Неопределено Цикл
					Сумма060_Гр1 = Сумма060_Гр1 + ТекОбл.Значение;
					Сумма060_Гр2 = Сумма060_Гр2 + ТДО["П00012М106002" + _ТекИнд].Значение;
					Сумма060_Гр3 = Сумма060_Гр3 + ТДО["П00012М106003" + _ТекИнд].Значение;
					Сумма060_Гр4 = Сумма060_Гр4 + ТДО["П00012М106004" + _ТекИнд].Значение;
					ТекИнд = ТекИнд + 1;
					_ТекИнд = "_" + Формат(ТекИнд, "ЧГ=");
					ТекОбл = ТДО.Найти("П00012М106001" + _ТекИнд);
				КонецЦикла;
				
				Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
					
					ТДО["П000120009001"].Значение = "1";
					ТДО["П000120009002"].Значение = Сумма060_Гр1 + ТДО["П000120008001"].Значение;
					ТДО["П000120009003"].Значение = "1";
					ТДО["П000120009004"].Значение = Сумма060_Гр2 + ТДО["П000120008002"].Значение;
					ТДО["П000120009005"].Значение = "1";
					ТДО["П000120009006"].Значение = Сумма060_Гр3 + ТДО["П000120008003"].Значение;
					ТДО["П000120009007"].Значение = "1";
					ТДО["П000120009008"].Значение = Сумма060_Гр4 + ТДО["П000120008004"].Значение;
					
				Иначе
					
					Сумма090 = Сумма060_Гр1 - ТДО["П000120007001"].Значение + ТДО["П000120008001"].Значение;
					ТДО["П000120009001"].Значение = ?(Сумма090 < 0, "2", "1");
					ТДО["П000120009002"].Значение = ?(Сумма090 < 0, - Сумма090, Сумма090);
					Сумма090 = Сумма060_Гр2 - ТДО["П000120007002"].Значение + ТДО["П000120008002"].Значение;
					ТДО["П000120009003"].Значение = ?(Сумма090 < 0, "2", "1");
					ТДО["П000120009004"].Значение = ?(Сумма090 < 0, - Сумма090, Сумма090);
					Сумма090 = Сумма060_Гр3 - ТДО["П000120007003"].Значение + ТДО["П000120008003"].Значение;
					ТДО["П000120009005"].Значение = ?(Сумма090 < 0, "2", "1");
					ТДО["П000120009006"].Значение = ?(Сумма090 < 0, - Сумма090, Сумма090);
					Сумма090 = Сумма060_Гр4 - ТДО["П000120007004"].Значение + ТДО["П000120008004"].Значение;
					ТДО["П000120009007"].Значение = ?(Сумма090 < 0, "2", "1");
					ТДО["П000120009008"].Значение = ?(Сумма090 < 0, - Сумма090, Сумма090);
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил3" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000130006002, ОбластьИмя) > 0 Тогда
						ТДО["П000130006002"].Значение = ТДО["П000130006102"].Значение + ТДО["П000130006202"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000130006003, ОбластьИмя) > 0 Тогда
						ТДО["П000130006003"].Значение = ТДО["П000130006103"].Значение + ТДО["П000130006203"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000130006004, ОбластьИмя) > 0 Тогда
						ТДО["П000130006004"].Значение = ТДО["П000130006104"].Значение + ТДО["П000130006204"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000130010003, ОбластьИмя) > 0 Тогда
						ТДО["П000130010003"].Значение = ТДО["П000130001003"].Значение + ТДО["П000130002003"].Значение
						+ ТДО["П000130003003"].Значение + ТДО["П000130004003"].Значение + ТДО["П000130005003"].Значение
						+ ТДО["П000130006003"].Значение + ТДО["П000130007003"].Значение + ТДО["П000130008003"].Значение
						+ ТДО["П000130009003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000130010004, ОбластьИмя) > 0 Тогда
						ТДО["П000130010004"].Значение = ТДО["П000130001004"].Значение + ТДО["П000130003004"].Значение
						+ ТДО["П000130006004"].Значение + ТДО["П000130007004"].Значение + ТДО["П000130008004"].Значение;
					КонецЕсли;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
					РасчетВДеревеЗначений(Форма, ИмяРаздела);
				КонецЕсли;
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил4" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140004003, ОбластьИмя) > 0 Тогда
						ТДО["П000140004003"].Значение = ТДО["П000140005003"].Значение + ТДО["П000140006003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140004004, ОбластьИмя) > 0 Тогда
						ТДО["П000140004004"].Значение = ТДО["П000140005004"].Значение + ТДО["П000140006004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140001002, ОбластьИмя) > 0 Тогда
						ТДО["П000140001002"].Значение = ТДО["П000140002002"].Значение + ТДО["П000140003002"].Значение
						+ ТДО["П000140004002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140001004, ОбластьИмя) > 0 Тогда
						ТДО["П000140001004"].Значение = ТДО["П000140002004"].Значение + ТДО["П000140003004"].Значение
						+ ТДО["П000140004004"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140010003, ОбластьИмя) > 0 Тогда
						ТДО["П000140010003"].Значение = ТДО["П000140011003"].Значение + ТДО["П000140012003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140010004, ОбластьИмя) > 0 Тогда
						ТДО["П000140010004"].Значение = ТДО["П000140011004"].Значение + ТДО["П000140012004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140007002, ОбластьИмя) > 0 Тогда
						ТДО["П000140007002"].Значение = ТДО["П000140008002"].Значение + ТДО["П000140009002"].Значение
						+ ТДО["П000140010002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140007004, ОбластьИмя) > 0 Тогда
						ТДО["П000140007004"].Значение = ТДО["П000140008004"].Значение + ТДО["П000140009004"].Значение
						+ ТДО["П000140010004"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140013002, ОбластьИмя) > 0 Тогда
						ТДО["П000140013002"].Значение = ТДО["П000140014002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140013004, ОбластьИмя) > 0 Тогда
						ТДО["П000140013004"].Значение = ТДО["П000140014004"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140018003, ОбластьИмя) > 0 Тогда
						ТДО["П000140018003"].Значение = ТДО["П000140019003"].Значение + ТДО["П000140020003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140018004, ОбластьИмя) > 0 Тогда
						ТДО["П000140018004"].Значение = ТДО["П000140019004"].Значение + ТДО["П000140020004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140015002, ОбластьИмя) > 0 Тогда
						ТДО["П000140015002"].Значение = ТДО["П000140016002"].Значение + ТДО["П000140017002"].Значение
						+ ТДО["П000140018002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140015004, ОбластьИмя) > 0 Тогда
						ТДО["П000140015004"].Значение = ТДО["П000140016004"].Значение + ТДО["П000140017004"].Значение
						+ ТДО["П000140018004"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140021002, ОбластьИмя) > 0 Тогда
						ТДО["П000140021002"].Значение = ТДО["П000140022002"].Значение + ТДО["П000140023002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140021004, ОбластьИмя) > 0 Тогда
						ТДО["П000140021004"].Значение = ТДО["П000140022004"].Значение + ТДО["П000140023004"].Значение;
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140029002, ОбластьИмя) > 0 Тогда
						ТДО["П000140029002"].Значение = ТДО["П000140006002"].Значение + ТДО["П000140012002"].Значение
						+ ТДО["П000140020002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140029003, ОбластьИмя) > 0 Тогда
						ТДО["П000140029003"].Значение = ТДО["П000140006003"].Значение + ТДО["П000140012003"].Значение
						+ ТДО["П000140020003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140029004, ОбластьИмя) > 0 Тогда
						ТДО["П000140029004"].Значение = ТДО["П000140006004"].Значение + ТДО["П000140012004"].Значение
						+ ТДО["П000140020004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140028002, ОбластьИмя) > 0 Тогда
						ТДО["П000140028002"].Значение = ТДО["П000140005002"].Значение + ТДО["П000140011002"].Значение
						+ ТДО["П000140019002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140028003, ОбластьИмя) > 0 Тогда
						ТДО["П000140028003"].Значение = ТДО["П000140005003"].Значение + ТДО["П000140011003"].Значение
						+ ТДО["П000140019003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140028004, ОбластьИмя) > 0 Тогда
						ТДО["П000140028004"].Значение = ТДО["П000140005004"].Значение + ТДО["П000140011004"].Значение
						+ ТДО["П000140019004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140027002, ОбластьИмя) > 0 Тогда
						ТДО["П000140027002"].Значение = ТДО["П000140004002"].Значение + ТДО["П000140010002"].Значение
						+ ТДО["П000140018002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140027003, ОбластьИмя) > 0 Тогда
						ТДО["П000140027003"].Значение = ТДО["П000140028003"].Значение + ТДО["П000140029003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140027004, ОбластьИмя) > 0 Тогда
						ТДО["П000140027004"].Значение = ТДО["П000140028004"].Значение + ТДО["П000140029004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140026002, ОбластьИмя) > 0 Тогда
						ТДО["П000140026002"].Значение = ТДО["П000140003002"].Значение + ТДО["П000140009002"].Значение
						+ ТДО["П000140017002"].Значение + ТДО["П000140023002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140026003, ОбластьИмя) > 0 Тогда
						ТДО["П000140026003"].Значение = ТДО["П000140003003"].Значение + ТДО["П000140009003"].Значение
						+ ТДО["П000140017003"].Значение + ТДО["П000140023003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140026004, ОбластьИмя) > 0 Тогда
						ТДО["П000140026004"].Значение = ТДО["П000140003004"].Значение + ТДО["П000140009004"].Значение
						+ ТДО["П000140017004"].Значение + ТДО["П000140023004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140025002, ОбластьИмя) > 0 Тогда
						ТДО["П000140025002"].Значение = ТДО["П000140002002"].Значение + ТДО["П000140008002"].Значение
						+ ТДО["П000140014002"].Значение + ТДО["П000140016002"].Значение + ТДО["П000140022002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140025003, ОбластьИмя) > 0 Тогда
						ТДО["П000140025003"].Значение = ТДО["П000140002003"].Значение + ТДО["П000140008003"].Значение
						+ ТДО["П000140014003"].Значение + ТДО["П000140016003"].Значение + ТДО["П000140022003"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140025004, ОбластьИмя) > 0 Тогда
						ТДО["П000140025004"].Значение = ТДО["П000140002004"].Значение + ТДО["П000140008004"].Значение
						+ ТДО["П000140014004"].Значение + ТДО["П000140016004"].Значение + ТДО["П000140022004"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140024002, ОбластьИмя) > 0 Тогда
						ТДО["П000140024002"].Значение = ТДО["П000140025002"].Значение + ТДО["П000140026002"].Значение
						+ ТДО["П000140027002"].Значение + ТДО["П000140030002"].Значение;
					КонецЕсли;
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000140024004, ОбластьИмя) > 0 Тогда
						ТДО["П000140024004"].Значение = ТДО["П000140025004"].Значение + ТДО["П000140026004"].Значение
						+ ТДО["П000140027004"].Значение + ТДО["П000140030004"].Значение + ТДО["П000140031004"].Значение;
					КонецЕсли;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
					РасчетВДеревеЗначений(Форма, ИмяРаздела);
				КонецЕсли;
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000150004002, ОбластьИмя) > 0 Тогда
						Знаменатель = ТДО["П000150002002"].Значение;
						ТДО["П000150004002"].Значение = ?(Знаменатель = 0,
						0, ТДО["П000150003002"].Значение / Знаменатель * 100);
					КонецЕсли;
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000150004003, ОбластьИмя) > 0 Тогда
						Знаменатель = ТДО["П000150002003"].Значение;
						ТДО["П000150004003"].Значение = ?(Знаменатель = 0,
						0, ТДО["П000150003003"].Значение / Знаменатель * 100);
					КонецЕсли;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
					РасчетВДеревеЗначений(Форма, ИмяРаздела);
				КонецЕсли;
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5_1" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				Если ЗначениеЗаполнено(ОбластьИмя) Тогда
					
					СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
					
					ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
					_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
					
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек["П00151М104002"], ОбластьИмяБезИнд) > 0
						ИЛИ СтрЧислоВхождений(СтруктЗависимыхЯчеек["П00151М104003"], ОбластьИмяБезИнд) > 0 Тогда
						
						Инд = 1;
						Инд_Строка = "_1";
						Обл = ТДО.Найти("П00151М100101_1");
						
						Пока Обл <> Неопределено Цикл
							Знаменатель = ТДО["П00151М102002" + Инд_Строка].Значение;
							ТДО["П00151М104002" + Инд_Строка].Значение = ?(Знаменатель = 0,
							0, ТДО["П00151М103002" + Инд_Строка].Значение / Знаменатель * 100);
							
							Знаменатель = ТДО["П00151М102003" + Инд_Строка].Значение;
							ТДО["П00151М104003" + Инд_Строка].Значение = ?(Знаменатель = 0,
							0, ТДО["П00151М103003" + Инд_Строка].Значение / Знаменатель * 100);
							
							Инд = Инд + 1;
							Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
							Обл = ТДО.Найти("П00151М100101" + Инд_Строка);
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
					РасчетВДеревеЗначений(Форма, ИмяРаздела);
				КонецЕсли;
			Иначе
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000160005001, ОбластьИмя) > 0 Тогда
					Знаменатель = ТДО["П000160001001"].Значение;
					ТДО["П000160005001"].Значение = ?(Знаменатель = 0, 0, (ТДО["П000160002001"].Значение
					+ ТДО["П000160003001"].Значение + ТДО["П000160004001"].Значение) / Знаменатель * 100);
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000160005002, ОбластьИмя) > 0 Тогда
					Знаменатель = ТДО["П000160001002"].Значение;
					ТДО["П000160005002"].Значение = ?(Знаменатель = 0, 0, (ТДО["П000160002002"].Значение
					+ ТДО["П000160003002"].Значение + ТДО["П000160004002"].Значение) / Знаменатель * 100);
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил7" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000170004002, ОбластьИмя) > 0 Тогда
					Знаменатель = ТДО["П000170002002"].Значение;
					ТДО["П000170004002"].Значение = ?(Знаменатель = 0, 0, ТДО["П000170003002"].Значение / Знаменатель * 100);
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П000170004003, ОбластьИмя) > 0 Тогда
					Знаменатель = ТДО["П000170002003"].Значение;
					ТДО["П000170004003"].Значение = ?(Знаменатель = 0, 0, ТДО["П000170003003"].Значение / Знаменатель * 100);
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил8" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00018М108001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00018М108001" + _Инд].Значение = ТДО["П00018М108002" + _Инд].Значение
						+ ТДО["П00018М108003" + _Инд].Значение + ТДО["П00018М108004" + _Инд].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.Итого, ОбластьИмяБезИнд) > 0 Тогда
					Итог010_Гр1 = 0;
					Итог010_Гр2 = 0;
					Итог010_Гр3 = 0;
					Итог010_Гр4 = 0;
					Инд = 1;
					Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
					Обл = ТДО.Найти("П00018М108001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Итог010_Гр1 = Итог010_Гр1 + Обл.Значение;
						Итог010_Гр2 = Итог010_Гр2 + ТДО.Найти("П00018М108002" + Инд_Строка).Значение;
						Итог010_Гр3 = Итог010_Гр3 + ТДО.Найти("П00018М108003" + Инд_Строка).Значение;
						Итог010_Гр4 = Итог010_Гр4 + ТДО.Найти("П00018М108004" + Инд_Строка).Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00018М108001" + Инд_Строка);
					КонецЦикла;
					ТДО.Найти("П000180001001").Значение = Итог010_Гр1;
					ТДО.Найти("П000180001002").Значение = Итог010_Гр2;
					ТДО.Найти("П000180001003").Значение = Итог010_Гр3;
					ТДО.Найти("П000180001004").Значение = Итог010_Гр4;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил9" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				_Инд = Сред(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
				
				Если РасчетЗаПервыйКвартал Тогда
					Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.П00019М108001, ОбластьИмяБезИнд) > 0 Тогда
						ТДО["П00019М108001" + _Инд].Значение = ТДО["П00019М108002" + _Инд].Значение
						+ ТДО["П00019М108003" + _Инд].Значение + ТДО["П00019М108004" + _Инд].Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.Итого, ОбластьИмяБезИнд) > 0 Тогда
					Итог010_Гр1 = 0;
					Итог010_Гр2 = 0;
					Итог010_Гр3 = 0;
					Итог010_Гр4 = 0;
					Инд = 1;
					Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
					Обл = ТДО.Найти("П00019М108001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Итог010_Гр1 = Итог010_Гр1 + Обл.Значение;
						Итог010_Гр2 = Итог010_Гр2 + ТДО.Найти("П00019М108002" + Инд_Строка).Значение;
						Итог010_Гр3 = Итог010_Гр3 + ТДО.Найти("П00019М108003" + Инд_Строка).Значение;
						Итог010_Гр4 = Итог010_Гр4 + ТДО.Найти("П00019М108004" + Инд_Строка).Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00019М108001" + Инд_Строка);
					КонецЦикла;
					ТДО.Найти("П000190001001").Значение = Итог010_Гр1;
					ТДО.Найти("П000190001002").Значение = Итог010_Гр2;
					ТДО.Найти("П000190001003").Значение = Итог010_Гр3;
					ТДО.Найти("П000190001004").Значение = Итог010_Гр4;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				
				ОбластьИмяБезИнд = Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
				
				Если СтрЧислоВхождений(СтруктЗависимыхЯчеек.Итого, ОбластьИмяБезИнд) > 0 Тогда
					Сумма030 = 0;
					Сумма050 = 0;
					Инд = 1;
					Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
					Обл = ТДО.Найти("П00021М109001" + Инд_Строка);
					Пока Обл <> Неопределено Цикл
						Сумма030 = Сумма030 + Обл.Значение;
						Сумма050 = Сумма050 + ТДО.Найти("П00021М109002" + Инд_Строка).Значение;
						Инд = Инд + 1;
						Инд_Строка = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд);
						Обл = ТДО.Найти("П00021М109001" + Инд_Строка);
					КонецЦикла;
					ТДО.Найти("П000020003001").Значение = Сумма030;
					ТДО.Найти("П000020005001").Значение = Сумма050;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	РасчетЗаПервыйКвартал = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3;
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ1 = Форма.СтруктураРеквизитовФормы.мИдГруппы1М1;
		СтруктураГруппыМнЧ1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1];
		ИменаГрафМнЧ1 = СтруктураГруппыМнЧ1["ИменаГраф"];
		
		ИмяГруппыМнЧ2 = Форма.СтруктураРеквизитовФормы.мИдГруппы1М2;
		СтруктураГруппыМнЧ2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2];
		ИменаГрафМнЧ2 = СтруктураГруппыМнЧ2["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		ДеревоМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
		ДеревоМнЧ2 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТипПлательщика = СокрЛП(Данные["П000010000101"]);
		
		Если ТипПлательщика = "2" Тогда
			
			Данные.Вставить("П000010003101", 0);
			Данные.Вставить("П000010003201", 0);
			Данные.Вставить("П000010003301", 0);
			Данные.Вставить("П000010005101", 0);
			Данные.Вставить("П000010005201", 0);
			Данные.Вставить("П000010005301", 0);
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М107101", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М107201", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М107301", 0);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М209101", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М209201", 0);
				СтрокаМнЧ.Данные.Вставить("П00001М209301", 0);
			КонецЦикла;
			Данные.Вставить("П000010012101", 0);
			Данные.Вставить("П000010012201", 0);
			Данные.Вставить("П000010012301", 0);
			
		ИначеЕсли РасчетЗаПервыйКвартал Тогда
			
			Данные.Вставить("П000010003001", Данные["П000010003101"] + Данные["П000010003201"] + Данные["П000010003301"]);
			Данные.Вставить("П000010005001", Данные["П000010005101"] + Данные["П000010005201"] + Данные["П000010005301"]);
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М107001",
				СтрокаМнЧ.Данные["П00001М107101"] + СтрокаМнЧ.Данные["П00001М107201"] + СтрокаМнЧ.Данные["П00001М107301"]);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				СтрокаМнЧ.Данные.Вставить("П00001М209001",
				СтрокаМнЧ.Данные["П00001М209101"] + СтрокаМнЧ.Данные["П00001М209201"] + СтрокаМнЧ.Данные["П00001М209301"]);
			КонецЦикла;
			
			Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
				
				Данные.Вставить("П000010011001", Данные["П000010011101"] + Данные["П000010011201"] + Данные["П000010011301"]);
				
			Иначе
				
				ПромежуточнаяСумма
				= Данные["П000010011101"] + Данные["П000010011201"] + Данные["П000010011301"]
				- Данные["П000010012101"] - Данные["П000010012201"] - Данные["П000010012301"];
				Данные.Вставить("П000010011001", Макс(ПромежуточнаяСумма, 0));
				Данные.Вставить("П000010012001", - Мин(ПромежуточнаяСумма, 0));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ1.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ2.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_1и1_2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Для каждого ВеткаР1Пр1 Из ДеревоДанных.Строки Цикл
			
			Ветка = ВеткаР1Пр1.Строки[0].Строки[0];
			Данные = Ветка.Данные;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Данные Цикл
					Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если РасчетЗаПервыйКвартал Тогда
				Данные.Вставить("П011110003001", Данные["П011110003002"] + Данные["П011110003003"] + Данные["П011110003004"]);
				Данные.Вставить("П011110004001", Данные["П011110004002"] + Данные["П011110004003"] + Данные["П011110004004"]);
				Данные.Вставить("П011110004501", Данные["П011110004502"] + Данные["П011110004503"] + Данные["П011110004504"]);
				Данные.Вставить("П011110005101", Данные["П011110005102"] + Данные["П011110005103"] + Данные["П011110005104"]);
				Данные.Вставить("П011110006101", Данные["П011110006102"] + Данные["П011110006103"] + Данные["П011110006104"]);
				Данные.Вставить("П011110006201", Данные["П011110006202"] + Данные["П011110006203"] + Данные["П011110006204"]);
				Данные.Вставить("П011120003001", Данные["П011120003002"] + Данные["П011120003003"] + Данные["П011120003004"]);
				Данные.Вставить("П011120004001", Данные["П011120004002"] + Данные["П011120004003"] + Данные["П011120004004"]);
				Данные.Вставить("П011120004501", Данные["П011120004502"] + Данные["П011120004503"] + Данные["П011120004504"]);
				Данные.Вставить("П011120006001", Данные["П011120006002"] + Данные["П011120006003"] + Данные["П011120006004"]);
			КонецЕсли;
			
			Данные.Вставить("П011110005001", Данные["П011110003001"] - Данные["П011110004001"] - Данные["П011110004501"]);
			Данные.Вставить("П011110005002", Данные["П011110003002"] - Данные["П011110004002"] - Данные["П011110004502"]);
			Данные.Вставить("П011110005003", Данные["П011110003003"] - Данные["П011110004003"] - Данные["П011110004503"]);
			Данные.Вставить("П011110005004", Данные["П011110003004"] - Данные["П011110004004"] - Данные["П011110004504"]);
			Данные.Вставить("П011110006001", Данные["П011110006101"] + Данные["П011110006201"]);
			Данные.Вставить("П011110006002", Данные["П011110006102"] + Данные["П011110006202"]);
			Данные.Вставить("П011110006003", Данные["П011110006103"] + Данные["П011110006203"]);
			Данные.Вставить("П011110006004", Данные["П011110006104"] + Данные["П011110006204"]);
			Данные.Вставить("П011120005001", Данные["П011120003001"] - Данные["П011120004001"] - Данные["П011120004501"]);
			Данные.Вставить("П011120005002", Данные["П011120003002"] - Данные["П011120004002"] - Данные["П011120004502"]);
			Данные.Вставить("П011120005003", Данные["П011120003003"] - Данные["П011120004003"] - Данные["П011120004503"]);
			Данные.Вставить("П011120005004", Данные["П011120003004"] - Данные["П011120004004"] - Данные["П011120004504"]);
			
			Если Ветка = АктивнаяВетка Тогда
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Обл = ТДО.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы11131М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого ВеткаР1Пр1 Из ДеревоДанных.Строки Цикл
			
			Ветка = ВеткаР1Пр1.Строки[1].Строки[0];
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ДанСтр = СтрокаМнЧ.Данные;
				Если РасчетЗаПервыйКвартал Тогда
					ДанСтр.Вставить("П11131М102001", ДанСтр["П11131М102002"] + ДанСтр["П11131М102003"] + ДанСтр["П11131М102004"]);
					ДанСтр.Вставить("П11131М103001", ДанСтр["П11131М103002"] + ДанСтр["П11131М103003"] + ДанСтр["П11131М103004"]);
					ДанСтр.Вставить("П11131М105001", ДанСтр["П11131М105002"] + ДанСтр["П11131М105003"] + ДанСтр["П11131М105004"]);
				КонецЕсли;
				ДанСтр.Вставить("П11131М104001", ДанСтр["П11131М102001"] - ДанСтр["П11131М103001"]);
				ДанСтр.Вставить("П11131М104002", ДанСтр["П11131М102002"] - ДанСтр["П11131М103002"]);
				ДанСтр.Вставить("П11131М104003", ДанСтр["П11131М102003"] - ДанСтр["П11131М103003"]);
				ДанСтр.Вставить("П11131М104004", ДанСтр["П11131М102004"] - ДанСтр["П11131М103004"]);
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1Подр1_3_2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы11132М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого ВеткаР1Пр1 Из ДеревоДанных.Строки Цикл
			
			Ветка = ВеткаР1Пр1.Строки[2].Строки[0];
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ДанСтр = СтрокаМнЧ.Данные;
				Если РасчетЗаПервыйКвартал Тогда
					ДанСтр.Вставить("П11132М102001", ДанСтр["П11132М102002"] + ДанСтр["П11132М102003"] + ДанСтр["П11132М102004"]);
					ДанСтр.Вставить("П11132М103001", ДанСтр["П11132М103002"] + ДанСтр["П11132М103003"] + ДанСтр["П11132М103004"]);
					ДанСтр.Вставить("П11132М105001", ДанСтр["П11132М105002"] + ДанСтр["П11132М105003"] + ДанСтр["П11132М105004"]);
				КонецЕсли;
				ДанСтр.Вставить("П11132М104001", ДанСтр["П11132М102001"] - ДанСтр["П11132М103001"]);
				ДанСтр.Вставить("П11132М104002", ДанСтр["П11132М102002"] - ДанСтр["П11132М103002"]);
				ДанСтр.Вставить("П11132М104003", ДанСтр["П11132М102003"] - ДанСтр["П11132М103003"]);
				ДанСтр.Вставить("П11132М104004", ДанСтр["П11132М102004"] - ДанСтр["П11132М103004"]);
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил1_1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы111М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00111М102001", ДанСтр["П00111М102002"] + ДанСтр["П00111М102003"] + ДанСтр["П00111М102004"]);
				ДанСтр.Вставить("П00111М103001", ДанСтр["П00111М103002"] + ДанСтр["П00111М103003"] + ДанСтр["П00111М103004"]);
				ДанСтр.Вставить("П00111М105001", ДанСтр["П00111М105002"] + ДанСтр["П00111М105003"] + ДанСтр["П00111М105004"]);
			КонецЕсли;
			ДанСтр.Вставить("П00111М104001", ДанСтр["П00111М102001"] - ДанСтр["П00111М103001"]);
			ДанСтр.Вставить("П00111М104002", ДанСтр["П00111М102002"] - ДанСтр["П00111М103002"]);
			ДанСтр.Вставить("П00111М104003", ДанСтр["П00111М102003"] - ДанСтр["П00111М103003"]);
			ДанСтр.Вставить("П00111М104004", ДанСтр["П00111М102004"] - ДанСтр["П00111М103004"]);
		КонецЦикла;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы12М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Сумма060_Гр1 = 0;
		Сумма060_Гр2 = 0;
		Сумма060_Гр3 = 0;
		Сумма060_Гр4 = 0;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00012М102001", ДанСтр["П00012М102002"] + ДанСтр["П00012М102003"] + ДанСтр["П00012М102004"]);
				ДанСтр.Вставить("П00012М103001", ДанСтр["П00012М103002"] + ДанСтр["П00012М103003"] + ДанСтр["П00012М103004"]);
				ДанСтр.Вставить("П00012М104001", ДанСтр["П00012М104002"] + ДанСтр["П00012М104003"] + ДанСтр["П00012М104004"]);
				ДанСтр.Вставить("П00012М105501", ДанСтр["П00012М105502"] + ДанСтр["П00012М105503"] + ДанСтр["П00012М105504"]);
				ДанСтр.Вставить("П00012М106001", ДанСтр["П00012М106002"] + ДанСтр["П00012М106003"] + ДанСтр["П00012М106004"]);
			КонецЕсли;
			ДанСтр.Вставить("П00012М105001", ДанСтр["П00012М102001"] - ДанСтр["П00012М103001"] - ДанСтр["П00012М104001"]);
			ДанСтр.Вставить("П00012М105002", ДанСтр["П00012М102002"] - ДанСтр["П00012М103002"] - ДанСтр["П00012М104002"]);
			ДанСтр.Вставить("П00012М105003", ДанСтр["П00012М102003"] - ДанСтр["П00012М103003"] - ДанСтр["П00012М104003"]);
			ДанСтр.Вставить("П00012М105004", ДанСтр["П00012М102004"] - ДанСтр["П00012М103004"] - ДанСтр["П00012М104004"]);
			Сумма060_Гр1 = Сумма060_Гр1 + ДанСтр["П00012М106001"];
			Сумма060_Гр2 = Сумма060_Гр2 + ДанСтр["П00012М106002"];
			Сумма060_Гр3 = Сумма060_Гр3 + ДанСтр["П00012М106003"];
			Сумма060_Гр4 = Сумма060_Гр4 + ДанСтр["П00012М106004"];
		КонецЦикла;
		
		Если РасчетЗаПервыйКвартал Тогда
			
			Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
				
				Данные.Вставить("П000120007001", Данные["П000120007002"] + Данные["П000120007003"] + Данные["П000120007004"]);
				
			КонецЕсли;
			
			Данные.Вставить("П000120008001", Данные["П000120008002"] + Данные["П000120008003"] + Данные["П000120008004"]);
			
		КонецЕсли;
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			Данные.Вставить("П000120009001", "1");
			Данные.Вставить("П000120009002", Сумма060_Гр1 + Данные["П000120008001"]);
			Данные.Вставить("П000120009003", "1");
			Данные.Вставить("П000120009004", Сумма060_Гр2 + Данные["П000120008002"]);
			Данные.Вставить("П000120009005", "1");
			Данные.Вставить("П000120009006", Сумма060_Гр3 + Данные["П000120008003"]);
			Данные.Вставить("П000120009007", "1");
			Данные.Вставить("П000120009008", Сумма060_Гр4 + Данные["П000120008004"]);
			
		Иначе
			
			Сумма090 = Сумма060_Гр1 - Данные["П000120007001"] + Данные["П000120008001"];
			Данные.Вставить("П000120009001", ?(Сумма090 < 0, "2", "1"));
			Данные.Вставить("П000120009002", ?(Сумма090 < 0, - Сумма090, Сумма090));
			Сумма090 = Сумма060_Гр2 - Данные["П000120007002"] + Данные["П000120008002"];
			Данные.Вставить("П000120009003", ?(Сумма090 < 0, "2", "1"));
			Данные.Вставить("П000120009004", ?(Сумма090 < 0, - Сумма090, Сумма090));
			Сумма090 = Сумма060_Гр3 - Данные["П000120007003"] + Данные["П000120008003"];
			Данные.Вставить("П000120009005", ?(Сумма090 < 0, "2", "1"));
			Данные.Вставить("П000120009006", ?(Сумма090 < 0, - Сумма090, Сумма090));
			Сумма090 = Сумма060_Гр4 - Данные["П000120007004"] + Данные["П000120008004"];
			Данные.Вставить("П000120009007", ?(Сумма090 < 0, "2", "1"));
			Данные.Вставить("П000120009008", ?(Сумма090 < 0, - Сумма090, Сумма090));
			
		КонецЕсли;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			АктивнаяВетка = Неопределено;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
			КонецЕсли;
			
			Ветка = ДеревоДанных.Строки[0];
			Данные = Ветка.Данные;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Данные Цикл
					Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Данные.Вставить("П000130006002", Данные["П000130006102"] + Данные["П000130006202"]);
			Данные.Вставить("П000130006003", Данные["П000130006103"] + Данные["П000130006203"]);
			Данные.Вставить("П000130006004", Данные["П000130006104"] + Данные["П000130006204"]);
			
			Данные.Вставить("П000130010003", Данные["П000130001003"] + Данные["П000130002003"] + Данные["П000130003003"]
			+ Данные["П000130004003"] + Данные["П000130005003"] + Данные["П000130006003"] + Данные["П000130007003"]
			+ Данные["П000130008003"] + Данные["П000130009003"]);
			
			Данные.Вставить("П000130010004", Данные["П000130001004"] + Данные["П000130003004"] + Данные["П000130006004"]
			+ Данные["П000130007004"] + Данные["П000130008004"]);
			
			Если Ветка = АктивнаяВетка Тогда
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Обл = ТДО.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил4" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			АктивнаяВетка = Неопределено;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
			КонецЕсли;
			
			Ветка = ДеревоДанных.Строки[0];
			Данные = Ветка.Данные;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Данные Цикл
					Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Данные.Вставить("П000140004003", Данные["П000140005003"] + Данные["П000140006003"]);
			Данные.Вставить("П000140004004", Данные["П000140005004"] + Данные["П000140006004"]);
			
			Данные.Вставить("П000140001002", Данные["П000140002002"] + Данные["П000140003002"] + Данные["П000140004002"]);
			Данные.Вставить("П000140001004", Данные["П000140002004"] + Данные["П000140003004"] + Данные["П000140004004"]);
			
			Данные.Вставить("П000140010003", Данные["П000140011003"] + Данные["П000140012003"]);
			Данные.Вставить("П000140010004", Данные["П000140011004"] + Данные["П000140012004"]);
			
			Данные.Вставить("П000140007002", Данные["П000140008002"] + Данные["П000140009002"] + Данные["П000140010002"]);
			Данные.Вставить("П000140007004", Данные["П000140008004"] + Данные["П000140009004"] + Данные["П000140010004"]);
			
			Данные.Вставить("П000140013002", Данные["П000140014002"]);
			Данные.Вставить("П000140013004", Данные["П000140014004"]);
			
			Данные.Вставить("П000140018003", Данные["П000140019003"] + Данные["П000140020003"]);
			Данные.Вставить("П000140018004", Данные["П000140019004"] + Данные["П000140020004"]);
			
			Данные.Вставить("П000140015002", Данные["П000140016002"] + Данные["П000140017002"] + Данные["П000140018002"]);
			Данные.Вставить("П000140015004", Данные["П000140016004"] + Данные["П000140017004"] + Данные["П000140018004"]);
			
			Данные.Вставить("П000140021002", Данные["П000140022002"] + Данные["П000140023002"]);
			Данные.Вставить("П000140021004", Данные["П000140022004"] + Данные["П000140023004"]);
			
			Данные.Вставить("П000140029002", Данные["П000140006002"] + Данные["П000140012002"] + Данные["П000140020002"]);
			Данные.Вставить("П000140029003", Данные["П000140006003"] + Данные["П000140012003"] + Данные["П000140020003"]);
			Данные.Вставить("П000140029004", Данные["П000140006004"] + Данные["П000140012004"] + Данные["П000140020004"]);
			
			Данные.Вставить("П000140028002", Данные["П000140005002"] + Данные["П000140011002"] + Данные["П000140019002"]);
			Данные.Вставить("П000140028003", Данные["П000140005003"] + Данные["П000140011003"] + Данные["П000140019003"]);
			Данные.Вставить("П000140028004", Данные["П000140005004"] + Данные["П000140011004"] + Данные["П000140019004"]);
			
			Данные.Вставить("П000140027002", Данные["П000140004002"] + Данные["П000140010002"] + Данные["П000140018002"]);
			Данные.Вставить("П000140027003", Данные["П000140028003"] + Данные["П000140029003"]);
			Данные.Вставить("П000140027004", Данные["П000140028004"] + Данные["П000140029004"]);
			
			Данные.Вставить("П000140026002", Данные["П000140003002"] + Данные["П000140009002"] + Данные["П000140017002"]
			+ Данные["П000140023002"]);
			Данные.Вставить("П000140026003", Данные["П000140003003"] + Данные["П000140009003"] + Данные["П000140017003"]
			+ Данные["П000140023003"]);
			Данные.Вставить("П000140026004", Данные["П000140003004"] + Данные["П000140009004"] + Данные["П000140017004"]
			+ Данные["П000140023004"]);
			
			Данные.Вставить("П000140025002", Данные["П000140002002"] + Данные["П000140008002"] + Данные["П000140014002"]
			+ Данные["П000140016002"] + Данные["П000140022002"]);
			Данные.Вставить("П000140025003", Данные["П000140002003"] + Данные["П000140008003"] + Данные["П000140014003"]
			+ Данные["П000140016003"] + Данные["П000140022003"]);
			Данные.Вставить("П000140025004", Данные["П000140002004"] + Данные["П000140008004"] + Данные["П000140014004"]
			+ Данные["П000140016004"] + Данные["П000140022004"]);
			
			Данные.Вставить("П000140024002", Данные["П000140025002"] + Данные["П000140026002"] + Данные["П000140027002"]
			+ Данные["П000140030002"]);
			Данные.Вставить("П000140024004", Данные["П000140025004"] + Данные["П000140026004"] + Данные["П000140027004"]
			+ Данные["П000140030004"] + Данные["П000140031004"]);
			
			Если Ветка = АктивнаяВетка Тогда
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Обл = ТДО.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			АктивнаяВетка = Неопределено;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
			КонецЕсли;
			
			Ветка = ДеревоДанных.Строки[0];
			Данные = Ветка.Данные;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Данные Цикл
					Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Знаменатель = Данные["П000150002002"];
			Данные.Вставить("П000150004002", ?(Знаменатель = 0, 0, Данные["П000150003002"] / Знаменатель * 100));
			
			Знаменатель = Данные["П000150002003"];
			Данные.Вставить("П000150004003", ?(Знаменатель = 0, 0, Данные["П000150003003"] / Знаменатель * 100));
			
			Если Ветка = АктивнаяВетка Тогда
				СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
				Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
					Обл = ТДО.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Данные[Пок.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил5_1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
			
			АктивнаяВетка = Неопределено;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
			КонецЕсли;
			
			ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы151М1;
			СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
			ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
			
			Ветка = ДеревоДанных.Строки[0];
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ДанСтр = СтрокаМнЧ.Данные;
				Знаменатель = ДанСтр["П00151М102002"];
				ДанСтр.Вставить("П00151М104002", ?(Знаменатель = 0, 0, ДанСтр["П00151М103002"] / Знаменатель * 100));
				Знаменатель = ДанСтр["П00151М102003"];
				ДанСтр.Вставить("П00151М104003", ?(Знаменатель = 0, 0, ДанСтр["П00151М103003"] / Знаменатель * 100));
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил6" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Знаменатель = Данные["П000160001001"];
		Данные.Вставить("П000160005001", ?(Знаменатель = 0, 0,
		(Данные["П000160002001"] + Данные["П000160003001"] + Данные["П000160004001"]) / Знаменатель * 100));
		
		Знаменатель = Данные["П000160001002"];
		Данные.Вставить("П000160005002", ?(Знаменатель = 0, 0,
		(Данные["П000160002002"] + Данные["П000160003002"] + Данные["П000160004002"]) / Знаменатель * 100));
		
		Если Ветка = АктивнаяВетка Тогда
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил7" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				Данные.Вставить(Пок.Ключ, ТДО[Пок.Ключ].Значение);
			КонецЦикла;
		КонецЕсли;
		
		Знаменатель = Данные["П000170002002"];
		Данные.Вставить("П000170004002", ?(Знаменатель = 0, 0, Данные["П000170003002"] / Знаменатель * 100));
		
		Знаменатель = Данные["П000170002003"];
		Данные.Вставить("П000170004003", ?(Знаменатель = 0, 0, Данные["П000170003003"] / Знаменатель * 100));
		
		Если Ветка = АктивнаяВетка Тогда
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Обл = ТДО.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Данные[Пок.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил8" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы18М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Итог010_Гр1 = 0;
		Итог010_Гр2 = 0;
		Итог010_Гр3 = 0;
		Итог010_Гр4 = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00018М108001", ДанСтр["П00018М108002"] + ДанСтр["П00018М108003"] + ДанСтр["П00018М108004"]);
			КонецЕсли;
			Итог010_Гр1 = Итог010_Гр1 + ДанСтр["П00018М108001"];
			Итог010_Гр2 = Итог010_Гр2 + ДанСтр["П00018М108002"];
			Итог010_Гр3 = Итог010_Гр3 + ДанСтр["П00018М108003"];
			Итог010_Гр4 = Итог010_Гр4 + ДанСтр["П00018М108004"];
		КонецЦикла;
		Данные.Вставить("П000180001001", Итог010_Гр1);
		Данные.Вставить("П000180001002", Итог010_Гр2);
		Данные.Вставить("П000180001003", Итог010_Гр3);
		Данные.Вставить("П000180001004", Итог010_Гр4);
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел1Прил9" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы19М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Итог010_Гр1 = 0;
		Итог010_Гр2 = 0;
		Итог010_Гр3 = 0;
		Итог010_Гр4 = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Если РасчетЗаПервыйКвартал Тогда
				ДанСтр.Вставить("П00019М108001", ДанСтр["П00019М108002"] + ДанСтр["П00019М108003"] + ДанСтр["П00019М108004"]);
			КонецЕсли;
			Итог010_Гр1 = Итог010_Гр1 + ДанСтр["П00019М108001"];
			Итог010_Гр2 = Итог010_Гр2 + ДанСтр["П00019М108002"];
			Итог010_Гр3 = Итог010_Гр3 + ДанСтр["П00019М108003"];
			Итог010_Гр4 = Итог010_Гр4 + ДанСтр["П00019М108004"];
		КонецЦикла;
		Данные.Вставить("П000190001001", Итог010_Гр1);
		Данные.Вставить("П000190001002", Итог010_Гр2);
		Данные.Вставить("П000190001003", Итог010_Гр3);
		Данные.Вставить("П000190001004", Итог010_Гр4);
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
				КонецЦикла;
			КонецЦикла;
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппы21М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Ветка = ДеревоДанных.Строки[0];
		Данные = Ветка.Данные;
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Сумма030 = 0;
		Сумма050 = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ДанСтр = СтрокаМнЧ.Данные;
			Сумма030 = Сумма030 + ДанСтр["П00021М109001"];
			Сумма050 = Сумма050 + ДанСтр["П00021М109002"];
		КонецЦикла;
		Данные.Вставить("П000020003001", Сумма030);
		Данные.Вставить("П000020005001", Сумма050);
		
		Если Ветка = АктивнаяВетка Тогда
			Для каждого Пок Из Данные Цикл
				ТДО[Пок.Ключ].Значение = Пок.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	СформироватьРаздел1();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрОКТМО = СокрЛП(ТабличныйДокумент.Области.Найти("П000010001001").Значение);
	Иначе
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		СохрОКТМО = СокрЛП(ДеревоРаздела1.Строки[0].Данные.П000010001001);
	КонецЕсли;
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1");
	
	ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ВеткаРаздел1 = ДеревоРаздела1.Строки[0];
	
	ВеткаРаздел1.Данные.Вставить("П000010001001", СохрОКТМО);
	
	ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись = Ложь;
	
	Стр070_Код1 = 0;
	Стр071_Код1 = 0;
	Стр072_Код1 = 0;
	Стр073_Код1 = 0;
	Стр070_Код2 = 0;
	Стр071_Код2 = 0;
	Стр072_Код2 = 0;
	Стр073_Код2 = 0;
	Стр070_Код3 = 0;
	Стр071_Код3 = 0;
	Стр072_Код3 = 0;
	Стр073_Код3 = 0;
	Стр070_Код4 = 0;
	Стр071_Код4 = 0;
	Стр072_Код4 = 0;
	Стр073_Код4 = 0;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1"]);
	
	Для каждого ВеткаРаздел1Прил1 Из ДеревоДанных.Строки Цикл
		
		ДанныеПодр1_1и1_2 = ВеткаРаздел1Прил1.Строки[0].Строки[0].Данные;
		
		ВеткаРаздел1.Данные["П000010003001"] = ВеткаРаздел1.Данные["П000010003001"] + ДанныеПодр1_1и1_2["П011110006001"];
		ВеткаРаздел1.Данные["П000010003101"] = ВеткаРаздел1.Данные["П000010003101"] + ДанныеПодр1_1и1_2["П011110006002"];
		ВеткаРаздел1.Данные["П000010003201"] = ВеткаРаздел1.Данные["П000010003201"] + ДанныеПодр1_1и1_2["П011110006003"];
		ВеткаРаздел1.Данные["П000010003301"] = ВеткаРаздел1.Данные["П000010003301"] + ДанныеПодр1_1и1_2["П011110006004"];
		
		ВеткаРаздел1.Данные["П000010005001"] = ВеткаРаздел1.Данные["П000010005001"] + ДанныеПодр1_1и1_2["П011120006001"];
		ВеткаРаздел1.Данные["П000010005101"] = ВеткаРаздел1.Данные["П000010005101"] + ДанныеПодр1_1и1_2["П011120006002"];
		ВеткаРаздел1.Данные["П000010005201"] = ВеткаРаздел1.Данные["П000010005201"] + ДанныеПодр1_1и1_2["П011120006003"];
		ВеткаРаздел1.Данные["П000010005301"] = ВеткаРаздел1.Данные["П000010005301"] + ДанныеПодр1_1и1_2["П011120006004"];
		
		МногострочныеДанныеПодр1_3_1
		= ВеткаРаздел1Прил1.Строки[1].Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11131М1];
		Для каждого Строка1_3_1 Из МногострочныеДанныеПодр1_3_1.Строки Цикл
			Стр001 = СокрЛП(Строка1_3_1.Данные["П11131М100101"]);
			Если Стр001 = "1" Тогда
				Стр070_Код1 = Стр070_Код1 + Строка1_3_1.Данные["П11131М105001"];
				Стр071_Код1 = Стр071_Код1 + Строка1_3_1.Данные["П11131М105002"];
				Стр072_Код1 = Стр072_Код1 + Строка1_3_1.Данные["П11131М105003"];
				Стр073_Код1 = Стр073_Код1 + Строка1_3_1.Данные["П11131М105004"];
			ИначеЕсли Стр001 = "2" Тогда
				Стр070_Код3 = Стр070_Код3 + Строка1_3_1.Данные["П11131М105001"];
				Стр071_Код3 = Стр071_Код3 + Строка1_3_1.Данные["П11131М105002"];
				Стр072_Код3 = Стр072_Код3 + Строка1_3_1.Данные["П11131М105003"];
				Стр073_Код3 = Стр073_Код3 + Строка1_3_1.Данные["П11131М105004"];
			КонецЕсли;
		КонецЦикла;
		
		МногострочныеДанныеПодр1_3_2
		= ВеткаРаздел1Прил1.Строки[2].Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11132М1];
		Для каждого Строка1_3_2 Из МногострочныеДанныеПодр1_3_2.Строки Цикл
			Стр001 = СокрЛП(Строка1_3_2.Данные["П11132М100101"]);
			Если Стр001 = "1" Тогда
				Стр070_Код2 = Стр070_Код2 + Строка1_3_2.Данные["П11132М105001"];
				Стр071_Код2 = Стр071_Код2 + Строка1_3_2.Данные["П11132М105002"];
				Стр072_Код2 = Стр072_Код2 + Строка1_3_2.Данные["П11132М105003"];
				Стр073_Код2 = Стр073_Код2 + Строка1_3_2.Данные["П11132М105004"];
			ИначеЕсли Стр001 = "2" Тогда
				Стр070_Код4 = Стр070_Код4 + Строка1_3_2.Данные["П11132М105001"];
				Стр071_Код4 = Стр071_Код4 + Строка1_3_2.Данные["П11132М105002"];
				Стр072_Код4 = Стр072_Код4 + Строка1_3_2.Данные["П11132М105003"];
				Стр073_Код4 = Стр073_Код4 + Строка1_3_2.Данные["П11132М105004"];
			КонецЕсли;
		КонецЦикла;
		
		ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись
		= ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись
		ИЛИ ДанныеПодр1_1и1_2["П011110003002"] > 0 ИЛИ ДанныеПодр1_1и1_2["П011110003003"] > 0
		ИЛИ ДанныеПодр1_1и1_2["П011110003004"] > 0 ИЛИ ДанныеПодр1_1и1_2["П011120003002"] > 0
		ИЛИ ДанныеПодр1_1и1_2["П011120003003"] > 0 ИЛИ ДанныеПодр1_1и1_2["П011120003004"] > 0;
		
	КонецЦикла;
	
	Стр090_Код1 = 0;
	Стр091_Код1 = 0;
	Стр092_Код1 = 0;
	Стр093_Код1 = 0;
	Стр090_Код2 = 0;
	Стр091_Код2 = 0;
	Стр092_Код2 = 0;
	Стр093_Код2 = 0;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1_1"]);
	ВеткаРаздел1Прил1_1 = ДеревоДанных.Строки[0];
	МногострочныеДанные = ВеткаРаздел1Прил1_1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы111М1];
	Для каждого Строка1_1 Из МногострочныеДанные.Строки Цикл
		Стр001 = СокрЛП(Строка1_1.Данные["П00111М100101"]);
		Если Стр001 = "1" Тогда
			Стр090_Код1 = Стр090_Код1 + Строка1_1.Данные["П00111М105001"];
			Стр091_Код1 = Стр091_Код1 + Строка1_1.Данные["П00111М105002"];
			Стр092_Код1 = Стр092_Код1 + Строка1_1.Данные["П00111М105003"];
			Стр093_Код1 = Стр093_Код1 + Строка1_1.Данные["П00111М105004"];
		ИначеЕсли Стр001 = "2" Тогда
			Стр090_Код2 = Стр090_Код2 + Строка1_1.Данные["П00111М105001"];
			Стр091_Код2 = Стр091_Код2 + Строка1_1.Данные["П00111М105002"];
			Стр092_Код2 = Стр092_Код2 + Строка1_1.Данные["П00111М105003"];
			Стр093_Код2 = Стр093_Код2 + Строка1_1.Данные["П00111М105004"];
		КонецЕсли;
	КонецЦикла;
	
	МногострочныеДанные = ВеткаРаздел1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М1];
	ИндексСтроки = 0;
	Если ЗначениеЗаполнено(Стр070_Код1) ИЛИ ЗначениеЗаполнено(Стр071_Код1)
		ИЛИ ЗначениеЗаполнено(Стр072_Код1) ИЛИ ЗначениеЗаполнено(Стр073_Код1) Тогда
		ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		ДанныеМнЧ.Вставить("П00001М106001", "18210202131061010160");
		ДанныеМнЧ.Вставить("П00001М107001", Стр070_Код1);
		ДанныеМнЧ.Вставить("П00001М107101", Стр071_Код1);
		ДанныеМнЧ.Вставить("П00001М107201", Стр072_Код1);
		ДанныеМнЧ.Вставить("П00001М107301", Стр073_Код1);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр070_Код2) ИЛИ ЗначениеЗаполнено(Стр071_Код2)
		ИЛИ ЗначениеЗаполнено(Стр072_Код2) ИЛИ ЗначениеЗаполнено(Стр073_Код2) Тогда
		Если ИндексСтроки > 0 Тогда
			НовСтрМнЧ = МногострочныеДанные.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			ДанныеМнЧ = НовСтрМнЧ.Данные;
		Иначе
			ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		КонецЕсли;
		ДанныеМнЧ.Вставить("П00001М106001", "18210202131061020160");
		ДанныеМнЧ.Вставить("П00001М107001", Стр070_Код2);
		ДанныеМнЧ.Вставить("П00001М107101", Стр071_Код2);
		ДанныеМнЧ.Вставить("П00001М107201", Стр072_Код2);
		ДанныеМнЧ.Вставить("П00001М107301", Стр073_Код2);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр070_Код3) ИЛИ ЗначениеЗаполнено(Стр071_Код3)
		ИЛИ ЗначениеЗаполнено(Стр072_Код3) ИЛИ ЗначениеЗаполнено(Стр073_Код3) Тогда
		Если ИндексСтроки > 0 Тогда
			НовСтрМнЧ = МногострочныеДанные.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			ДанныеМнЧ = НовСтрМнЧ.Данные;
		Иначе
			ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		КонецЕсли;
		ДанныеМнЧ.Вставить("П00001М106001", "18210202132061010160");
		ДанныеМнЧ.Вставить("П00001М107001", Стр070_Код3);
		ДанныеМнЧ.Вставить("П00001М107101", Стр071_Код3);
		ДанныеМнЧ.Вставить("П00001М107201", Стр072_Код3);
		ДанныеМнЧ.Вставить("П00001М107301", Стр073_Код3);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр070_Код4) ИЛИ ЗначениеЗаполнено(Стр071_Код4)
		ИЛИ ЗначениеЗаполнено(Стр072_Код4) ИЛИ ЗначениеЗаполнено(Стр073_Код4) Тогда
		Если ИндексСтроки > 0 Тогда
			НовСтрМнЧ = МногострочныеДанные.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			ДанныеМнЧ = НовСтрМнЧ.Данные;
		Иначе
			ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		КонецЕсли;
		ДанныеМнЧ.Вставить("П00001М106001", "18210202132061020160");
		ДанныеМнЧ.Вставить("П00001М107001", Стр070_Код4);
		ДанныеМнЧ.Вставить("П00001М107101", Стр071_Код4);
		ДанныеМнЧ.Вставить("П00001М107201", Стр072_Код4);
		ДанныеМнЧ.Вставить("П00001М107301", Стр073_Код4);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	
	МногострочныеДанные = ВеткаРаздел1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы1М2];
	ИндексСтроки = 0;
	Если ЗначениеЗаполнено(Стр090_Код1) ИЛИ ЗначениеЗаполнено(Стр091_Код1)
		ИЛИ ЗначениеЗаполнено(Стр092_Код1) ИЛИ ЗначениеЗаполнено(Стр093_Код1) Тогда
		ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		ДанныеМнЧ.Вставить("П00001М208001", "18210202080061000160");
		ДанныеМнЧ.Вставить("П00001М209001", Стр090_Код1);
		ДанныеМнЧ.Вставить("П00001М209101", Стр091_Код1);
		ДанныеМнЧ.Вставить("П00001М209201", Стр092_Код1);
		ДанныеМнЧ.Вставить("П00001М209301", Стр093_Код1);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(Стр090_Код2) ИЛИ ЗначениеЗаполнено(Стр091_Код2)
		ИЛИ ЗначениеЗаполнено(Стр092_Код2) ИЛИ ЗначениеЗаполнено(Стр093_Код2) Тогда
		Если ИндексСтроки > 0 Тогда
			НовСтрМнЧ = МногострочныеДанные.Строки.Добавить();
			НовСтрМнЧ.Данные = Новый Структура;
			НовСтрМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			ДанныеМнЧ = НовСтрМнЧ.Данные;
		Иначе
			ДанныеМнЧ = МногострочныеДанные.Строки[0].Данные;
		КонецЕсли;
		ДанныеМнЧ.Вставить("П00001М208001", "18210202120061000160");
		ДанныеМнЧ.Вставить("П00001М209001", Стр090_Код2);
		ДанныеМнЧ.Вставить("П00001М209101", Стр091_Код2);
		ДанныеМнЧ.Вставить("П00001М209201", Стр092_Код2);
		ДанныеМнЧ.Вставить("П00001М209301", Стр093_Код2);
	КонецЕсли;
	
	ВеткаРаздел1.Данные["П000010002001"] = "18210202010061010160";
	ВеткаРаздел1.Данные["П000010004001"] = "18210202101081013160";
	ВеткаРаздел1.Данные["П000010010001"] = "18210202090071010160";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
	ДанныеРаздел1Прил2 = ДеревоДанных.Строки[0].Данные;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009001"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011001"] = ВеткаРаздел1.Данные["П000010011001"] + ДанныеРаздел1Прил2["П000120009002"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009003"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011101"] = ВеткаРаздел1.Данные["П000010011101"] + ДанныеРаздел1Прил2["П000120009004"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009005"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011201"] = ВеткаРаздел1.Данные["П000010011201"] + ДанныеРаздел1Прил2["П000120009006"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009007"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011301"] = ВеткаРаздел1.Данные["П000010011301"] + ДанныеРаздел1Прил2["П000120009008"];
		КонецЕсли;
		
	Иначе
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009001"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011001"] = ВеткаРаздел1.Данные["П000010011001"] + ДанныеРаздел1Прил2["П000120009002"];
		ИначеЕсли ПризнакСтр090 = "2" Тогда
			ВеткаРаздел1.Данные["П000010012001"] = ВеткаРаздел1.Данные["П000010012001"] + ДанныеРаздел1Прил2["П000120009002"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009003"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011101"] = ВеткаРаздел1.Данные["П000010011101"] + ДанныеРаздел1Прил2["П000120009004"];
		ИначеЕсли ПризнакСтр090 = "2" Тогда
			ВеткаРаздел1.Данные["П000010012101"] = ВеткаРаздел1.Данные["П000010012101"] + ДанныеРаздел1Прил2["П000120009004"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009005"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011201"] = ВеткаРаздел1.Данные["П000010011201"] + ДанныеРаздел1Прил2["П000120009006"];
		ИначеЕсли ПризнакСтр090 = "2" Тогда
			ВеткаРаздел1.Данные["П000010012201"] = ВеткаРаздел1.Данные["П000010012201"] + ДанныеРаздел1Прил2["П000120009006"];
		КонецЕсли;
		
		ПризнакСтр090 = СокрЛП(ДанныеРаздел1Прил2["П000120009007"]);
		Если ПризнакСтр090 = "1" Тогда
			ВеткаРаздел1.Данные["П000010011301"] = ВеткаРаздел1.Данные["П000010011301"] + ДанныеРаздел1Прил2["П000120009008"];
		ИначеЕсли ПризнакСтр090 = "2" Тогда
			ВеткаРаздел1.Данные["П000010012301"] = ВеткаРаздел1.Данные["П000010012301"] + ДанныеРаздел1Прил2["П000120009008"];
		КонецЕсли;
		
	КонецЕсли;
	
	МногострочныеДанные = ДеревоДанных.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы12М1];
	Для каждого СтрМнЧ Из МногострочныеДанные.Строки Цикл
		ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись
		= ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись
		ИЛИ СтрМнЧ.Данные["П00012М102002"] > 0 ИЛИ СтрМнЧ.Данные["П00012М102003"] > 0
		ИЛИ СтрМнЧ.Данные["П00012М102004"] > 0;
	КонецЦикла;
	
	ВеткаРаздел1.Данные["П000010000101"] = ?(ВыплатыИИныеВознагрВПользуФизЛицВПоследние3МесНачислялись, "1", "2");
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела1, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
		НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
		ВывестиДанныеВТабличныйДокумент("Раздел1", НовыеНомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	РасчетНаСервере("Раздел1");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.
	//
	Структ = Новый Структура;
	Структ.Вставить("П000020003001", "Итог");
	Структ.Вставить("П000020005001", "Итог");
	Структ.Вставить("Итого", "П00021М109001;П00021М109002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
	// Прил. 9 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П000190001001", "Итог");
	Структ.Вставить("П000190001002", "Итог");
	Структ.Вставить("П000190001003", "Итог");
	Структ.Вставить("П000190001004", "Итог");
	Структ.Вставить("Итого", "П00019М108001;П00019М108002;П00019М108003;П00019М108004");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П00019М108001", "П00019М108002;П00019М108003;П00019М108004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил9", Структ);
	
	// Прил. 8 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П000180001001", "Итог");
	Структ.Вставить("П000180001002", "Итог");
	Структ.Вставить("П000180001003", "Итог");
	Структ.Вставить("П000180001004", "Итог");
	Структ.Вставить("Итого", "П00018М108001;П00018М108002;П00018М108003;П00018М108004");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П00018М108001", "П00018М108002;П00018М108003;П00018М108004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил8", Структ);
	
	// Прил. 7 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П000170004002", "П000170002002;П000170003002");
	Структ.Вставить("П000170004003", "П000170002003;П000170003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил7", Структ);
	
	// Прил. 6 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П000160005001", "П000160001001;П000160002001;П000160003001;П000160004001");
	Структ.Вставить("П000160005002", "П000160001002;П000160002002;П000160003002;П000160004002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил6", Структ);
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
		
		// Прил. 5 к разделу 1.
		//
		Структ = Новый Структура;
		Структ.Вставить("П000150004002", "П000150002002;П000150003002");
		Структ.Вставить("П000150004003", "П000150002003;П000150003003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил5", Структ);
		
		// Прил. 4 к разделу 1.
		//
		Структ = Новый Структура;
		Структ.Вставить("П000140004003", "П000140005003;П000140006003");
		Структ.Вставить("П000140004004", "П000140005004;П000140006004");
		Структ.Вставить("П000140001002", "П000140002002;П000140003002;П000140004002;П000140005002;П000140006002");
		Структ.Вставить("П000140001004", "П000140002004;П000140003004;П000140004004;П000140005004;П000140006004");
		Структ.Вставить("П000140010003", "П000140011003;П000140012003");
		Структ.Вставить("П000140010004", "П000140011004;П000140012004");
		Структ.Вставить("П000140007002", "П000140008002;П000140009002;П000140010002;П000140011002;П000140012002");
		Структ.Вставить("П000140007004", "П000140008004;П000140009004;П000140010004;П000140011004;П000140012004");
		Структ.Вставить("П000140013002", "П000140014002");
		Структ.Вставить("П000140013004", "П000140014004");
		Структ.Вставить("П000140018003", "П000140019003;П000140020003");
		Структ.Вставить("П000140018004", "П000140019004;П000140020004");
		Структ.Вставить("П000140015002", "П000140016002;П000140017002;П000140018002;П000140019002;П000140020002");
		Структ.Вставить("П000140015004", "П000140016004;П000140017004;П000140018004;П000140019004;П000140020004");
		Структ.Вставить("П000140021002", "П000140022002;П000140023002");
		Структ.Вставить("П000140021004", "П000140022004;П000140023004");
		Структ.Вставить("П000140029002", "П000140006002;П000140012002;П000140020002");
		Структ.Вставить("П000140029003", "П000140006003;П000140012003;П000140020003");
		Структ.Вставить("П000140029004", "П000140006004;П000140012004;П000140020004");
		Структ.Вставить("П000140028002", "П000140005002;П000140011002;П000140019002");
		Структ.Вставить("П000140028003", "П000140005003;П000140011003;П000140019003");
		Структ.Вставить("П000140028004", "П000140005004;П000140011004;П000140019004");
		Структ.Вставить("П000140027002", "П000140004002;П000140010002;П000140018002");
		Структ.Вставить("П000140027003", "П000140028003;П000140005003;П000140011003;П000140019003;П000140029003;П000140006003;П000140012003;П000140020003");
		Структ.Вставить("П000140027004", "П000140028004;П000140005004;П000140011004;П000140019004;П000140029004;П000140006004;П000140012004;П000140020004");
		Структ.Вставить("П000140026002", "П000140003002;П000140009002;П000140017002;П000140023002");
		Структ.Вставить("П000140026003", "П000140003003;П000140009003;П000140017003;П000140023003");
		Структ.Вставить("П000140026004", "П000140003004;П000140009004;П000140017004;П000140023004");
		Структ.Вставить("П000140025002", "П000140002002;П000140008002;П000140014002;П000140016002;П000140022002");
		Структ.Вставить("П000140025003", "П000140002003;П000140008003;П000140014003;П000140016003;П000140022003");
		Структ.Вставить("П000140025004", "П000140002004;П000140008004;П000140014004;П000140016004;П000140022004");
		Структ.Вставить("П000140024002", "П000140025002;П000140002002;П000140008002;П000140014002;П000140016002;П000140022002;П000140026002;П000140003002;П000140009002;П000140017002;П000140023002;П000140027002;П000140027002;П000140004002;П000140010002;П000140018002;П000140030002");
		Структ.Вставить("П000140024004", "П000140025004;П000140002004;П000140008004;П000140014004;П000140016004;П000140022004;П000140026004;П000140003004;П000140009004;П000140017004;П000140023004;П000140027004;П000140028004;П000140005004;П000140011004;П000140019004;П000140029004;П000140006004;П000140012004;П000140020004;П000140030004;П000140031004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил4", Структ);
		
		// Прил. 3 к разделу 1.
		//
		Структ = Новый Структура;
		Структ.Вставить("П000130006002", "П000130006102;П000130006202");
		Структ.Вставить("П000130006003", "П000130006103;П000130006203");
		Структ.Вставить("П000130006004", "П000130006104;П000130006204");
		Структ.Вставить("П000130010003", "П000130001003;П000130002003;П000130003003;П000130004003;П000130005003;П000130006003;П000130006103;П000130006203;П000130007003;П000130008003;П000130009003");
		Структ.Вставить("П000130010004", "П000130001004;П000130003004;П000130006004;П000130006104;П000130006204;П000130007004;П000130008004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил3", Структ);
		
	Иначе
		
		// Прил. 5.1 к разделу 1.
		//
		Структ = Новый Структура;
		Структ.Вставить("П00151М104002", "П00151М102002;П00151М103002");
		Структ.Вставить("П00151М104003", "П00151М102003;П00151М103003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил5_1", Структ);
		
	КонецЕсли;
	
	// Прил. 2 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П00012М105001", "П00012М102001;П00012М102002;П00012М102003;П00012М102004;П00012М103001;П00012М103002;П00012М103003;П00012М103004;П00012М104001;П00012М104002;П00012М104003;П00012М104004");
	Структ.Вставить("П00012М105002", "П00012М102002;П00012М103002;П00012М104002");
	Структ.Вставить("П00012М105003", "П00012М102003;П00012М103003;П00012М104003");
	Структ.Вставить("П00012М105004", "П00012М102004;П00012М103004;П00012М104004");
	Структ.Вставить("П000120009001", "");
	Структ.Вставить("П000120009002", "");
	Структ.Вставить("П000120009003", "");
	Структ.Вставить("П000120009004", "");
	Структ.Вставить("П000120009005", "");
	Структ.Вставить("П000120009006", "");
	Структ.Вставить("П000120009007", "");
	Структ.Вставить("П000120009008", "");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П00012М102001", "П00012М102002;П00012М102003;П00012М102004");
		Структ.Вставить("П00012М103001", "П00012М103002;П00012М103003;П00012М103004");
		Структ.Вставить("П00012М104001", "П00012М104002;П00012М104003;П00012М104004");
		Структ.Вставить("П00012М105501", "П00012М105502;П00012М105503;П00012М105504");
		Структ.Вставить("П00012М106001", "П00012М106002;П00012М106003;П00012М106004");
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			Структ.Вставить("П000120007001", "П000120007002;П000120007003;П000120007004");
			
		КонецЕсли;
		
		Структ.Вставить("П000120008001", "П000120008002;П000120008003;П000120008004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил2", Структ);
	
	// Прил. 1.1 к разделу 1.
	//
	Структ = Новый Структура;
	Структ.Вставить("П00111М104001", "П00111М102001;П00111М102002;П00111М102003;П00111М102004;П00111М103001;П00111М103002;П00111М103003;П00111М103004");
	Структ.Вставить("П00111М104002", "П00111М102002;П00111М103002");
	Структ.Вставить("П00111М104003", "П00111М102003;П00111М103003");
	Структ.Вставить("П00111М104004", "П00111М102004;П00111М103004");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П00111М102001", "П00111М102002;П00111М102003;П00111М102004");
		Структ.Вставить("П00111М103001", "П00111М103002;П00111М103003;П00111М103004");
		Структ.Вставить("П00111М105001", "П00111М105002;П00111М105003;П00111М105004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил1_1", Структ);
	
	// Прил. 1 к разделу 1.
	//
	// Подр. 1.3.2.
	Структ = Новый Структура;
	Структ.Вставить("П11132М104001", "П11132М102001;П11132М102002;П11132М102003;П11132М102004;П11132М103001;П11132М103002;П11132М103003;П11132М103004");
	Структ.Вставить("П11132М104002", "П11132М102002;П11132М103002");
	Структ.Вставить("П11132М104003", "П11132М102003;П11132М103003");
	Структ.Вставить("П11132М104004", "П11132М102004;П11132М103004");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П11132М102001", "П11132М102002;П11132М102003;П11132М102004");
		Структ.Вставить("П11132М103001", "П11132М103002;П11132М103003;П11132М103004");
		Структ.Вставить("П11132М105001", "П11132М105002;П11132М105003;П11132М105004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил1Подр1_3_2", Структ);
	// Подр. 1.3.1.
	Структ = Новый Структура;
	Структ.Вставить("П11131М104001", "П11131М102001;П11131М102002;П11131М102003;П11131М102004;П11131М103001;П11131М103002;П11131М103003;П11131М103004");
	Структ.Вставить("П11131М104002", "П11131М102002;П11131М103002");
	Структ.Вставить("П11131М104003", "П11131М102003;П11131М103003");
	Структ.Вставить("П11131М104004", "П11131М102004;П11131М103004");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П11131М102001", "П11131М102002;П11131М102003;П11131М102004");
		Структ.Вставить("П11131М103001", "П11131М103002;П11131М103003;П11131М103004");
		Структ.Вставить("П11131М105001", "П11131М105002;П11131М105003;П11131М105004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил1Подр1_3_1", Структ);
	// Подр. 1.1, 1.2.
	Структ = Новый Структура;
	Структ.Вставить("П011110005001", "П011110003001;П011110003002;П011110003003;П011110003004;П011110004001;П011110004002;П011110004003;П011110004004;П011110004501;П011110004502;П011110004503;П011110004504");
	Структ.Вставить("П011110005002", "П011110003002;П011110004002;П011110004502");
	Структ.Вставить("П011110005003", "П011110003003;П011110004003;П011110004503");
	Структ.Вставить("П011110005004", "П011110003004;П011110004004;П011110004504");
	Структ.Вставить("П011110006001", "П011110006101;П011110006102;П011110006103;П011110006104;П011110006201;П011110006202;П011110006203;П011110006204");
	Структ.Вставить("П011110006002", "П011110006102;П011110006202");
	Структ.Вставить("П011110006003", "П011110006103;П011110006203");
	Структ.Вставить("П011110006004", "П011110006104;П011110006204");
	Структ.Вставить("П011120005001", "П011120003001;П011120003002;П011120003003;П011120003004;П011120004001;П011120004002;П011120004003;П011120004004;П011120004501;П011120004502;П011120004503;П011120004504");
	Структ.Вставить("П011120005002", "П011120003002;П011120004002;П011120004502");
	Структ.Вставить("П011120005003", "П011120003003;П011120004003;П011120004503");
	Структ.Вставить("П011120005004", "П011120003004;П011120004004;П011120004504");
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П011110003001", "П011110003002;П011110003003;П011110003004");
		Структ.Вставить("П011110004001", "П011110004002;П011110004003;П011110004004");
		Структ.Вставить("П011110004501", "П011110004502;П011110004503;П011110004504");
		Структ.Вставить("П011110005101", "П011110005102;П011110005103;П011110005104");
		Структ.Вставить("П011110006101", "П011110006102;П011110006103;П011110006104");
		Структ.Вставить("П011110006201", "П011110006202;П011110006203;П011110006204");
		Структ.Вставить("П011120003001", "П011120003002;П011120003003;П011120003004");
		Структ.Вставить("П011120004001", "П011120004002;П011120004003;П011120004004");
		Структ.Вставить("П011120004501", "П011120004502;П011120004503;П011120004504");
		Структ.Вставить("П011120006001", "П011120006002;П011120006003;П011120006004");
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1Прил1Подр1_1и1_2", Структ);
	
	// Раздел 1.
	//
	Структ = Новый Структура;
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		Структ.Вставить("П000010003001", "П000010000101;П000010003101;П000010003201;П000010003301");
		Структ.Вставить("П000010005001", "П000010000101;П000010005101;П000010005201;П000010005301");
		Структ.Вставить("П00001М107001", "П000010000101;П00001М107101;П00001М107201;П00001М107301");
		Структ.Вставить("П00001М209001", "П000010000101;П00001М209101;П00001М209201;П00001М209301");
		Структ.Вставить("П000010011001", "П000010000101;П000010011101;П000010011201;П000010011301;П000010012101;П000010012201;П000010012301");
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			Структ.Вставить("П000010012001", "П000010000101;П000010011101;П000010011201;П000010011301;П000010012101;П000010012201;П000010012301");
			
		КонецЕсли;
	КонецЕсли;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

#Область ЗапросВФНСНаПроверкуСведенийРаботников

&НаКлиенте
Процедура ВыгрузитьСведенияРаботников(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьСведенияРаботниковЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСведенияРаботниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПроверитьВозможностьВыгрузкиСведенийРаботников() Тогда
		
		ТаблицаСообщенийЗаполнена = Истина;
		
		Если ТаблицаСообщений.Количество() = 0 Тогда
			ТаблицаСообщенийЗаполнена = Ложь;
			НовСтр = ТаблицаСообщений.Добавить();
			НовСтр.Описание = "Выгрузка сведений работников прервана";
		КонецЕсли;
		
		ПредставлениеРасчетаПоСтраховымВзносам = "Расчет по страховым взносам за " + ПредставлениеПериода(НачалоДня(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
		"ФП=Истина") + ?(НомерКорректировки = 0, " (Первичный", " (Корректирующий, номер корректировки " + Формат(
		НомерКорректировки, "ЧГ=")) + ". ИФНС: " + СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган) + ")";
		
		Для Каждого СтрСообщения Из ТаблицаСообщений Цикл
			СтрСообщения.ОтчетДок = СтруктураРеквизитовФормы.мСохраненныйДок;
			СтрСообщения.Отчет = ПредставлениеРасчетаПоСтраховымВзносам;
		КонецЦикла;
		
		ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", ТаблицаСообщений);
		
		ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
		
		ФормаНавигацииПоОшибкам = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		Если ФормаНавигацииПоОшибкам.Открыта() Тогда
			ФормаНавигацииПоОшибкам.Закрыть();
			ФормаНавигацииПоОшибкам = ПолучитьФорму(
			"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		КонецЕсли;
		
		ФормаНавигацииПоОшибкам.Открыть();
		
		ТаблицаСообщений.Очистить();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='Не удалось выгрузить сведения работающих лиц из Раздела 3 (%1)'"), ПредставлениеРасчетаПоСтраховымВзносам);
		Сообщение.Сообщить();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать тексты выгрузки'");
		Сообщение.Сообщить();
		
		Если ТаблицаСообщенийЗаполнена Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Для исправления ошибок используйте окно навигации по ошибкам'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РасчетПоСтраховымВзносам", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ИнтерфейсыВзаимодействияБРОКлиент.СформироватьИСохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(
	СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыгрузкиСведенийРаботников()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = ОбъектОтчета.СохраненныеДанныеОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Титульный лист.
	//
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Не задан ИНН организации, обособленного подразделения", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Задан ИНН организации, обособленного подразделения, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Не задан КПП организации, обособленного подразделения", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Задан КПП организации, обособленного подразделения, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПараметрыВыгрузки.ПоМесту = "124" Тогда
			ИП_ГлаваКФХ = " главы крестьянского (фермерского) хозяйства";
		Иначе
			ИП_ГлаваКФХ = " индивидуального предпринимателя";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Не задан ИНН" + ИП_ГлаваКФХ, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
			"Задан ИНН" + ИП_ГлаваКФХ + ", не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
		"Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
		"Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 3.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел3;
	Если ОбъектОтчета.ЗаполненРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
									 ДеревоРаздела,
									 "Раздел3",
									 СтруктураРеквизитовФормы,
									 мСтруктураМногоуровневыхРазделов) Тогда
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			Данные = СтраницаРаздела.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			ДолженБытьЗаполненИННФЛ = НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000310010001"]))
			ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"])) ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"])));
			
			ДолжныБытьЗаполненыКодСерияНомерДокумента = НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310002001"]))
			ИЛИ (ЗначениеЗаполнено(СокрЛП(Данные["П000310010001"])) ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"]))
			ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"])));
			
			Если ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
				"Раздел 3 -> Страница " + НомерСтраницы
				+ ": должен быть заполнен ИНН физического лица и (или) должны быть заполнены сведения документа, удостоверяющего личность",
				"Раздел3", "П000310002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ (ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента) Тогда
				ИННФЛ = СокрЛП(Данные["П000310002001"]);
				Если ДолженБытьЗаполненИННФЛ Тогда
					ИННФЛДлина = СтрДлина(ИННФЛ);
					Если НЕ ИННФЛДлина = 12 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
						+ НомерСтраницы + ": в строке 020 не" + ?(ИННФЛДлина = 0, "", "верно") + " задан ИНН физического лица",
						"Раздел3", "П000310002001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ИННФЛ) Тогда
						Если НЕ СтрДлина(ИННФЛ) = 12 Тогда
							ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
							+ НомерСтраницы + ": в строке 020 неверно задан ИНН физического лица",
							"Раздел3", "П000310002001", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СНИЛСДлина = СтрДлина(СокрЛП(Данные["П000310003001"]));
			Если НЕ СНИЛСДлина = 14 Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 030 не" + ?(СНИЛСДлина = 0, "", "верно") + " задан СНИЛС физического лица",
				"Раздел3", "П000310003001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310004001"])) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 040 не задана фамилия физического лица", "Раздел3", "П000310004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000310005001"])) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 050 не задано имя физического лица", "Раздел3", "П000310005001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Данные["П000310007001"]) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
				+ НомерСтраницы + ": в строке 070 не задана дата рождения физического лица",
				"Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ОбъектОтчета.ДатаВходитВРазрешенныйПериод(
				СтруктураРеквизитовФормы.мВыбраннаяФорма, Данные["П000310007001"]) Тогда
				ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
				"Раздел 3 -> Страница " + НомерСтраницы
				+ ": в строке 070 задана дата рождения физического лица, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
				"Раздел3", "П000310007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ (ДолженБытьЗаполненИННФЛ И ДолжныБытьЗаполненыКодСерияНомерДокумента) Тогда
				Если ДолжныБытьЗаполненыКодСерияНомерДокумента Тогда
					КодВидДокДлина = СтрДлина(СокрЛП(Данные["П000310010001"]));
					Если НЕ КодВидДокДлина = 2 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 -> Страница "
						+ НомерСтраницы + ": в строке 100 не" + ?(КодВидДокДлина = 0, "", "верно")
						+ " задан код вида документа, удостоверяющего личность", "Раздел3", "П000310010001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000310011001"]))
						ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000310011002"]))) Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
						"Раздел 3 -> Страница " + НомерСтраницы
						+ ": в строке 110 не заданы серия и номер документа, удостоверяющего личность",
						"Раздел3", "П000310011001", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(Данные["П000310011001"]) + СокрЛП(Данные["П000310011002"])) > 24 Тогда
						ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма,
						"Раздел 3 -> Страница " + НомерСтраницы
						+ ": в строке 110 общее количество символов в серии и номере документа, удостоверяющего личность, превышает 24",
						"Раздел3", "П000310011001", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбъектОтчета.СообщитьВТС(СтруктураРеквизитовФормы.мВыбраннаяФорма, ЭтаФорма, "Раздел 3 не заполнен",
		"Раздел3", "П000310004001", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
									  			  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляСравнения = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляЗагрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	ТекстВыгрузки = Новый Массив;
	ТекстВыгрузки.Добавить(РезультатВыгрузки);
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													  ПараметрыВыгрузки,
													  ДеревоВыгрузки,
													  ЭтаФорма,
													  СтруктураРеквизитовФормы,
													  мСтруктураМногоуровневыхРазделов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  мДанныеОтчета,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтаФорма,
								  СтруктураРеквизитовФормы,
								  мСтруктураМногоуровневыхРазделов);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
	"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			Оп = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		КонецЕсли;
	Иначе
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	РасчетНаСервере();
	
	ДопПараметры = Новый Структура("НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																		  СтруктураРеквизитовФормы,
																		  мСтруктураМногоуровневыхРазделов);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_1и1_2" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_1" тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(2);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_2" тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(3);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущегоРаздела

&НаКлиенте
Процедура ОчиститьТекущийРаздел(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущийРазделЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='Внимание! Будет очищен текущий раздел.%1Продолжить?'"), Символы.ПС);
	
	Оп = Новый ОписаниеОповещения("ВопросОчиститьТекущийРазделЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущийРазделЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТекущийРазделНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТекущийРазделНаСервере(ИмяРаздела)
	
	Если ИмяРаздела = "Раздел3" Тогда
		
		ТабличныйДокумент.Очистить();
		
		ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, ИмяРаздела);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
				Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущийРазделЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураРеквизитовФормы.Вставить("КодПоМестуДоОчистки", СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение));
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	Оп = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Если СтруктураРеквизитовФормы.Свойство("КодПоМестуДоОчистки") Тогда
			ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.КодПоМестуДоОчистки;
			СтруктураРеквизитовФормы.Удалить("КодПоМестуДоОчистки");
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("КодТарифа", ТабличныйДокумент.Область("П000110000101").Значение);
			СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил9" Тогда
			// Особая обработка текста в строке 020 Приложения 9 к Разделу 1.
			ТабличныйДокумент.Области.П00019М102001_1.Значение = "00001";
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("Фам", ТабличныйДокумент.Область("П000310004001").Значение);
			СтруктПарам.Вставить("Имя", ТабличныйДокумент.Область("П000310005001").Значение);
			СтруктПарам.Вставить("Отч", ТабличныйДокумент.Область("П000310006001").Значение);
			СтруктПарам.Вставить("ДатаРожд", ТабличныйДокумент.Область("П000310007001").Значение);
			СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРаздела3ФормыРСВ(СтруктПарам);
		КонецЕсли;
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Если ВидПечати <> "ПоказатьРеестр" Тогда
		
		ТекстСообщения = "";
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			ЗначПоМесту = СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение);
			ЗначКодФормыРеорг = СокрЛП(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
			СрСпЧисленность = ТабличныйДокумент.Области.СрСпЧисленность.Значение;
		Иначе
			ЗначПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
			ЗначКодФормыРеорг = СокрЛП(СтруктураДанныхТитульный.КодФормыРеорганизации);
			СрСпЧисленность = СтруктураДанныхТитульный.СрСпЧисленность;
		КонецЕсли;
		
		Если СрСпЧисленность <> 0 И (ЗначПоМесту = "335" ИЛИ ЗначПоМесту = "222" ИЛИ ЗначКодФормыРеорг = "9") Тогда
			
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2021 Тогда
				
				ТекстСообщения
				= "Поле ""Среднесписочная численность (чел.)"" расчета, представляемого по обособленному"
				+ " подразделению организации, начиная с расчетного (отчетного) периода 1 квартал 2021 года,"
				+ " не заполняется (письмо ФНС России от 22.01.2021 № БС-4-11/663@)";
				
			Иначе
				
				ТекстСообщения
				= "В поле ""Среднесписочная численность (чел.)"" расчета за 2020 год, представляемого"
				+ " по обособленному подразделению организации, указывается значение ""0"""
				+ " (письмо ФНС России от 22.01.2021 № БС-4-11/663@)";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru='%1. Вывод на печать прерван'"), ТекстСообщения);
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если ВидПечати = "ПоказатьРеестр" Тогда
		ЗаголовокФормы = "Реестр сведений о сумме выплат и вознаграждений за " + ПредставлениеПериода(
		НачалоДня(НачалоМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 2))),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина")
		+ " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		ДополнительныеПараметры = Новый Структура("ЗаголовокФормы", ЗаголовокФормы);
		Если НЕ ПечатьРеестраНаСервере(ВидПечати, ЗаголовокФормы) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
			РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
		КонецЕсли;
	
		ДополнительныеПараметры = Неопределено;
		Если НЕ ПечатьНаСервере(ВидПечати) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов, ДополнительныеПараметры);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьРеестраНаСервере(ВидПечати, ЗаголовокПечатнойФормы)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	// Начало общей части формирования реестра.
	//
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Реестр");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Реестр");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          "ПоказатьБланк");
	
	ПредставленияМесяцев = Новый Структура;
	
	КонПериода = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	НачПериода = НачалоДня(НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПредставленияМесяцев.Вставить("Мес3", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	КонПериода = КонецДня(КонецМесяца(ДобавитьМесяц(КонПериода, -1)));
	НачПериода = НачалоДня(НачалоМесяца(КонПериода));
	ПредставленияМесяцев.Вставить("Мес2", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	КонПериода = КонецДня(КонецМесяца(ДобавитьМесяц(КонПериода, -1)));
	НачПериода = НачалоДня(НачалоМесяца(КонПериода));
	ПредставленияМесяцев.Вставить("Мес1", ПредставлениеПериода(НачПериода, КонПериода, "ФП = Истина"));
	
	ВозможныеМесяцы = Новый Массив;
	ВозможныеМесяцы.Добавить("1");
	ВозможныеМесяцы.Добавить("2");
	ВозможныеМесяцы.Добавить("3");
	
	ИмяМакета = "ПечатныйБланк2020Кв4_Реестр";
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	// Формирование части "Реестр сведений о сумме выплат и вознаграждений".
	//
	ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
	СтрокаПФ = Макет.Получитьобласть("Шапка");
	СтрокаПФ.Параметры.Заполнить(ПредставленияМесяцев);
	СтрокаПФ.Параметры.ЗаголовокПечатнойФормы = ЗаголовокПечатнойФормы;
	ПечФорма.Вывести(СтрокаПФ);
	ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2"));
	
	ИндОсновныхЧастей = 2;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТЗ = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(17, 2);
	КС = Новый КвалификаторыСтроки(4);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	ТЗ.Колонки.Добавить("КодКатегорииЗЛ", ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Мес1_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаВыпл", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_БазаВсего", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_БазаГПДог", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаСтВз", ОписаниеТиповЧ);
	
	ТЗ_ИтогПоРазделу = ТЗ.Скопировать();
	
	ИндСтрокаВыплат = 0;
	
	РазмерПачки = 1000;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ТЗ.Очистить();
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы321М1];
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			ДанныеСтрокиМнЧ = СтрокаМнЧ.Данные;
			
			Мес = СокрЛП(ДанныеСтрокиМнЧ["П00321М112001"]);
			
			ИндМес = ВозможныеМесяцы.Найти(Мес);
			
			Если ИндМес <> Неопределено Тогда
				
				НовСтрТЗ = ТЗ.Добавить();
				НовСтрТЗ.КодКатегорииЗЛ = ДанныеСтрокиМнЧ["П00321М113001"];
				
				Инд_ = Формат(ИндМес + 1, "ЧГ=") + "_";
				
				НовСтрТЗ["Мес" + Инд_ + "СуммаВыпл"] = ДанныеСтрокиМнЧ["П00321М114001"];
				НовСтрТЗ["Мес" + Инд_ + "БазаВсего"] = ДанныеСтрокиМнЧ["П00321М115001"];
				НовСтрТЗ["Мес" + Инд_ + "БазаГПДог"] = ДанныеСтрокиМнЧ["П00321М116001"];
				НовСтрТЗ["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00321М117001"];
				
				НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
				
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаВыпл"] = ДанныеСтрокиМнЧ["П00321М114001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "БазаВсего"] = ДанныеСтрокиМнЧ["П00321М115001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "БазаГПДог"] = ДанныеСтрокиМнЧ["П00321М116001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00321М117001"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗ.Свернуть("КодКатегорииЗЛ", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
		ТЗ.Сортировать("КодКатегорииЗЛ");
		
		Если ТЗ.Количество() > 0 Тогда
			
			ПредстЗЛ = "";
			Фам = СокрЛП(Ветка.Данные["П000310004001"]);
			Имя = СокрЛП(Ветка.Данные["П000310005001"]);
			Отч = СокрЛП(Ветка.Данные["П000310006001"]);
			Если ЗначениеЗаполнено(Фам) Тогда
				ПредстЗЛ = Фам;
			КонецЕсли;
			Если ЗначениеЗаполнено(Имя) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Имя, Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(Отч) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Отч, Отч);
			КонецЕсли;
			
			СНИЛС = СокрЛП(Ветка.Данные["П000310003001"]);
			
			ИмяСтрокиВыплат = ?(ТЗ.Количество() = 1, "СтрокаВыплат", "СтрокаВыплатКурсив");
			
			ПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
			
			ПФ.Параметры.ФИО = ПредстЗЛ;
			ПФ.Параметры.СНИЛС = СНИЛС;
			ПФ.Параметры.Заполнить(ТЗ[0]);
			
			ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
			
			ПФ.Параметры.НомПП = Формат(ИндСтрокаВыплат, "ЧГ=");
			
			ПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплат" + Формат(ИндСтрокаВыплат, "ЧГ=");
			
			Для ИндСтрТЗ = 1 По ТЗ.Количество() - 1 Цикл
				
				СтрокаПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
				
				СтрокаПФ.Параметры.Заполнить(ТЗ[ИндСтрТЗ]);
				
				ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
				
				СтрокаПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплат" + Формат(ИндСтрокаВыплат, "ЧГ=");
				
				ПФ.Вывести(СтрокаПФ);
				
				Если ИндСтрТЗ = ТЗ.Количество() - 1 Тогда
					
					СтрокаПФ = Макет.Получитьобласть("СтрокаВыплатПодитог");
					ТЗ_ = ТЗ.Скопировать();
					ТЗ_.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
					СтрокаПФ.Параметры.Заполнить(ТЗ_[0]);
					
					ПФ.Вывести(СтрокаПФ);
					
					ОблНиз  = ПФ.Область("СтрокаВыплатПодитог").Низ;
					ОблВерх = ОблНиз - ТЗ.Количество();
					
					Для ОблКоордПоВертикали = ОблВерх По ОблНиз Цикл
						Обл = ПФ.Область(ОблКоордПоВертикали, , ОблКоордПоВертикали, );
						Обл.Имя = "";
					КонецЦикла;
					НовыйИндСтрокаВыплат = ИндСтрокаВыплат - (ТЗ.Количество() - 1);
					Обл = ПФ.Область(ОблВерх, , ОблНиз, );
					Обл.Имя = "СтрокаВыплат" + Формат(НовыйИндСтрокаВыплат, "ЧГ=");
					
					ИндСтрокаВыплат = НовыйИндСтрокаВыплат;
					
					Обл = ПФ.Область(ОблВерх, 5, ОблВерх, 17);
					Обл.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					
					Обл = ПФ.Область(ОблВерх, 2, ОблНиз, 2);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 3, ОблНиз, 3);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 4, ОблНиз, 4);
					Обл.Объединить();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПечФорма.Вывести(ПФ);
			
		КонецЕсли;
		
		Если ИндСтрокаВыплат > 0
			И (ИндСтрокаВыплат / РазмерПачки = Цел(ИндСтрокаВыплат / РазмерПачки))
			И (ИндСтрокаВыплат <> ДеревоДанных.Строки.Количество()) Тогда
			
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			ТабличныйДокумент.ПолеСверху = 5;
			ТабличныйДокумент.ПолеСправа = 5;
			ТабличныйДокумент.ПолеСнизу  = 5;
			ТабличныйДокумент.ПолеСлева  = 5;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПечФорма);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
			ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2"));
			
			ИндОсновныхЧастей = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу3");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
	Если ТЗ_ИтогПоРазделу.Количество() > 0 Тогда
		ПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	КонецЕсли;
		
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1"]);
	
	ТЗ_ИтогПоРазделу.Очистить();
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДанныеПодр1_1и1_2 = Ветка.Строки[0].Строки[0].Данные;
		
		НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаВыпл"] = ДанныеПодр1_1и1_2["П011110003002"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаВыпл"] = ДанныеПодр1_1и1_2["П011110003003"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаВыпл"] = ДанныеПодр1_1и1_2["П011110003004"];
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_БазаВсего"] = ДанныеПодр1_1и1_2["П011110005002"] - ДанныеПодр1_1и1_2["П011110005102"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_БазаВсего"] = ДанныеПодр1_1и1_2["П011110005003"] - ДанныеПодр1_1и1_2["П011110005103"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_БазаВсего"] = ДанныеПодр1_1и1_2["П011110005004"] - ДанныеПодр1_1и1_2["П011110005104"];
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаСтВз"] = ДанныеПодр1_1и1_2["П011110006102"];
		НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаСтВз"] = ДанныеПодр1_1и1_2["П011110006103"];
		НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаСтВз"] = ДанныеПодр1_1и1_2["П011110006104"];
		
	КонецЦикла;
	
	СтрокаПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу1");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_СуммаВыпл,Мес1_БазаВсего,Мес1_БазаГПДог,Мес1_СуммаСтВз,Мес2_СуммаВыпл,Мес2_БазаВсего,Мес2_БазаГПДог,Мес2_СуммаСтВз,Мес3_СуммаВыпл,Мес3_БазаВсего,Мес3_БазаГПДог,Мес3_СуммаСтВз");
	СтрокаПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	ПФ.Вывести(СтрокаПФ);
		
	Если НЕ ПечФорма.ПроверитьВывод(ПФ) Тогда
		
		ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть1");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть1");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧасть" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть2");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть2");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧасть" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
	КонецЕсли;
	
	ПечФорма.Вывести(ПФ);
	
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСнизу  = 5;
	ТабличныйДокумент.ПолеСлева  = 5;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечФорма);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
	// Формирование части "Реестр сведений о сумме выплат и вознаграждений по дополнительному тарифу".
	//
	ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
	СтрокаПФ = Макет.Получитьобласть("ШапкаДопТариф");
	СтрокаПФ.Параметры.Заполнить(ПредставленияМесяцев);
	СтрокаПФ.Параметры.ЗаголовокПечатнойФормы = СтрЗаменить(ЗаголовокПечатнойФормы,
	"Реестр сведений о сумме выплат и вознаграждений",
	"Реестр сведений о сумме выплат и вознаграждений по дополнительному тарифу");
	ПечФорма.Вывести(СтрокаПФ);
	ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф"));
	
	ИндОсновныхЧастей = 2;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТЗ = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(17, 2);
	КС = Новый КвалификаторыСтроки(3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	ТЗ.Колонки.Добавить("КодЗЛ",          ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Мес1_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес1_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес2_СуммаСтВз", ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_База",      ОписаниеТиповЧ);
	ТЗ.Колонки.Добавить("Мес3_СуммаСтВз", ОписаниеТиповЧ);
	
	ТЗ_ИтогПоРазделу = ТЗ.Скопировать();
	
	ИндСтрокаВыплат = 0;
	
	РазмерПачки = 1000;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ТЗ.Очистить();
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы322М1];
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			ДанныеСтрокиМнЧ = СтрокаМнЧ.Данные;
			
			Мес = СокрЛП(ДанныеСтрокиМнЧ["П00322М118001"]);
			
			ИндМес = ВозможныеМесяцы.Найти(Мес);
			
			Если ИндМес <> Неопределено Тогда
				
				НовСтрТЗ = ТЗ.Добавить();
				НовСтрТЗ.КодЗЛ = ДанныеСтрокиМнЧ["П00322М119001"];
				
				Инд_ = Формат(ИндМес + 1, "ЧГ=") + "_";
				
				НовСтрТЗ["Мес" + Инд_ + "База"]      = ДанныеСтрокиМнЧ["П00322М120001"];
				НовСтрТЗ["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00322М121001"];
				
				НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
				
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "База"]      = ДанныеСтрокиМнЧ["П00322М120001"];
				НовСтрТЗ_ИтогПоРазделу["Мес" + Инд_ + "СуммаСтВз"] = ДанныеСтрокиМнЧ["П00322М121001"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗ.Свернуть("КодЗЛ", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
		ТЗ.Сортировать("КодЗЛ");
		
		Если ТЗ.Количество() > 0 Тогда
			
			ПредстЗЛ = "";
			Фам = СокрЛП(Ветка.Данные["П000310004001"]);
			Имя = СокрЛП(Ветка.Данные["П000310005001"]);
			Отч = СокрЛП(Ветка.Данные["П000310006001"]);
			Если ЗначениеЗаполнено(Фам) Тогда
				ПредстЗЛ = Фам;
			КонецЕсли;
			Если ЗначениеЗаполнено(Имя) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Имя, Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(Отч) Тогда
				ПредстЗЛ = ?(ЗначениеЗаполнено(ПредстЗЛ), ПредстЗЛ + " " + Отч, Отч);
			КонецЕсли;
			
			СНИЛС = СокрЛП(Ветка.Данные["П000310003001"]);
			
			ИмяСтрокиВыплат = ?(ТЗ.Количество() = 1, "СтрокаВыплатДопТариф", "СтрокаВыплатДопТарифКурсив");
			
			ПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
			
			ПФ.Параметры.ФИО = ПредстЗЛ;
			ПФ.Параметры.СНИЛС = СНИЛС;
			ПФ.Параметры.Заполнить(ТЗ[0]);
			
			ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
			
			ПФ.Параметры.НомПП = Формат(ИндСтрокаВыплат, "ЧГ=");
			
			ПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплатДопТариф" + Формат(ИндСтрокаВыплат, "ЧГ=");
			
			Для ИндСтрТЗ = 1 По ТЗ.Количество() - 1 Цикл
				
				СтрокаПФ = Макет.Получитьобласть(ИмяСтрокиВыплат);
				
				СтрокаПФ.Параметры.Заполнить(ТЗ[ИндСтрТЗ]);
				
				ИндСтрокаВыплат = ИндСтрокаВыплат + 1;
				
				СтрокаПФ.Область(ИмяСтрокиВыплат).Имя = "СтрокаВыплатДопТариф" + Формат(ИндСтрокаВыплат, "ЧГ=");
				
				ПФ.Вывести(СтрокаПФ);
				
				Если ИндСтрТЗ = ТЗ.Количество() - 1 Тогда
					
					СтрокаПФ = Макет.Получитьобласть("СтрокаВыплатДопТарифПодитог");
					ТЗ_ = ТЗ.Скопировать();
					ТЗ_.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
					СтрокаПФ.Параметры.Заполнить(ТЗ_[0]);
					
					ПФ.Вывести(СтрокаПФ);
					
					ОблНиз  = ПФ.Область("СтрокаВыплатДопТарифПодитог").Низ;
					ОблВерх = ОблНиз - ТЗ.Количество();
					
					Для ОблКоордПоВертикали = ОблВерх По ОблНиз Цикл
						Обл = ПФ.Область(ОблКоордПоВертикали, , ОблКоордПоВертикали, );
						Обл.Имя = "";
					КонецЦикла;
					НовыйИндСтрокаВыплат = ИндСтрокаВыплат - (ТЗ.Количество() - 1);
					Обл = ПФ.Область(ОблВерх, , ОблНиз, );
					Обл.Имя = "СтрокаВыплатДопТариф" + Формат(НовыйИндСтрокаВыплат, "ЧГ=");
					
					ИндСтрокаВыплат = НовыйИндСтрокаВыплат;
					
					Обл = ПФ.Область(ОблВерх, 5, ОблВерх, 11);
					Обл.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					
					Обл = ПФ.Область(ОблВерх, 2, ОблНиз, 2);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 3, ОблНиз, 3);
					Обл.Объединить();
					
					Обл = ПФ.Область(ОблВерх, 4, ОблНиз, 4);
					Обл.Объединить();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПечФорма.Вывести(ПФ);
			
		КонецЕсли;
		
		Если ИндСтрокаВыплат > 0
			И (ИндСтрокаВыплат / РазмерПачки = Цел(ИндСтрокаВыплат / РазмерПачки))
			И (ИндСтрокаВыплат <> ДеревоДанных.Строки.Количество()) Тогда
			
			ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ПечФорма.Автомасштаб = Истина;
			
			ТабличныйДокумент.ПолеСверху = 5;
			ТабличныйДокумент.ПолеСправа = 5;
			ТабличныйДокумент.ПолеСнизу  = 5;
			ТабличныйДокумент.ПолеСлева  = 5;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПечФорма);
			
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма = Макет.Получитьобласть("ОсновнаяЧасть1");
			ПечФорма.Вывести(Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф"));
			
			ИндОсновныхЧастей = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу3ДопТариф");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
	Если ТЗ_ИтогПоРазделу.Количество() > 0 Тогда
		ПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	КонецЕсли;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил1"]);
	
	ТЗ_ИтогПоРазделу.Очистить();
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		Мес1_База = 0;
		Мес2_База = 0;
		Мес3_База = 0;
		
		Мес1_СуммаСтВз = 0;
		Мес2_СуммаСтВз = 0;
		Мес3_СуммаСтВз = 0;
		
		НовСтрТЗ_ИтогПоРазделу = ТЗ_ИтогПоРазделу.Добавить();
		
		ДеревоМнЧ1_3_1 = Ветка.Строки[1].Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11131М1];
		
		Для каждого СтрокаМнЧ1_3_1 Из ДеревоМнЧ1_3_1.Строки Цикл
			ДанныеСтрокиМнЧ1_3_1 = СтрокаМнЧ1_3_1.Данные;
			Мес1_База = Мес1_База + СтрокаМнЧ1_3_1.Данные["П11131М104002"];
			Мес2_База = Мес2_База + СтрокаМнЧ1_3_1.Данные["П11131М104003"];
			Мес3_База = Мес3_База + СтрокаМнЧ1_3_1.Данные["П11131М104004"];
			Мес1_СуммаСтВз = Мес1_СуммаСтВз + СтрокаМнЧ1_3_1.Данные["П11131М105002"];
			Мес2_СуммаСтВз = Мес2_СуммаСтВз + СтрокаМнЧ1_3_1.Данные["П11131М105003"];
			Мес3_СуммаСтВз = Мес3_СуммаСтВз + СтрокаМнЧ1_3_1.Данные["П11131М105004"];
		КонецЦикла;
		
		ДеревоМнЧ1_3_2 = Ветка.Строки[2].Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы11132М1];
		
		Для каждого СтрокаМнЧ1_3_2 Из ДеревоМнЧ1_3_2.Строки Цикл
			Мес1_База = Мес1_База + СтрокаМнЧ1_3_2.Данные["П11132М104002"];
			Мес2_База = Мес2_База + СтрокаМнЧ1_3_2.Данные["П11132М104003"];
			Мес3_База = Мес3_База + СтрокаМнЧ1_3_2.Данные["П11132М104004"];
			Мес1_СуммаСтВз = Мес1_СуммаСтВз + СтрокаМнЧ1_3_2.Данные["П11132М105002"];
			Мес2_СуммаСтВз = Мес2_СуммаСтВз + СтрокаМнЧ1_3_2.Данные["П11132М105003"];
			Мес3_СуммаСтВз = Мес3_СуммаСтВз + СтрокаМнЧ1_3_2.Данные["П11132М105004"];
		КонецЦикла;
		
		НовСтрТЗ_ИтогПоРазделу["Мес1_База"] = Мес1_База;
		НовСтрТЗ_ИтогПоРазделу["Мес2_База"] = Мес2_База;
		НовСтрТЗ_ИтогПоРазделу["Мес3_База"] = Мес3_База;
		НовСтрТЗ_ИтогПоРазделу["Мес1_СуммаСтВз"] = Мес1_СуммаСтВз;
		НовСтрТЗ_ИтогПоРазделу["Мес2_СуммаСтВз"] = Мес2_СуммаСтВз;
		НовСтрТЗ_ИтогПоРазделу["Мес3_СуммаСтВз"] = Мес3_СуммаСтВз;
		
	КонецЦикла;
	
	СтрокаПФ = Макет.Получитьобласть("СтрокаИтогоПоРазделу1ДопТариф");
	ТЗ_ИтогПоРазделу.Свернуть("", "Мес1_База,Мес1_СуммаСтВз,Мес2_База,Мес2_СуммаСтВз,Мес3_База,Мес3_СуммаСтВз");
	СтрокаПФ.Параметры.Заполнить(ТЗ_ИтогПоРазделу[0]);
	ПФ.Вывести(СтрокаПФ);
	
	Если НЕ ПечФорма.ПроверитьВывод(ПФ) Тогда
		
		ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть1");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть1");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧастьДопТариф" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
		СтрокаПФ = Макет.Получитьобласть("ОсновнаяЧасть2ДопТариф");
		Обл = СтрокаПФ.Область("ОсновнаяЧасть2ДопТариф");
		ИндОсновныхЧастей = ИндОсновныхЧастей + 1;
		Обл.Имя = "ОсновнаяЧастьДопТариф" + Формат(ИндОсновныхЧастей, "ЧГ=");
		ПечФорма.Вывести(СтрокаПФ);
		
	КонецЕсли;
	
	ПечФорма.Вывести(ПФ);
	
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.ПолеСнизу  = 5;
	ТабличныйДокумент.ПолеСлева  = 5;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечФорма);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
	// Окончание общей части формирования реестра.
	//
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", ЭтаФорма["СтруктураДанныхТитульный"]);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма",                  СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов",                  ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати",                       ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы",        СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц",
	ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
	
	ОбъектОтчета.ПечатныйБланк(ПараметрыПечати);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапуска = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
						
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("НомерКорректировки",           СтруктураДанныхТитульный.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  СтруктураДанныхТитульный.ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормы(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	КонецЕсли;
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = Неопределено;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер)
		И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		// Получение данных из контейнера.
		СтруктураДанныхТитульный = Контейнер["Титульный"];
		Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
			Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
				РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2020 Тогда
			
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1Прил5_1");
			
		Иначе
			
			ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
			ДеревоРазд.Строки[0].Данные.Вставить("П000010012001", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000010012101", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000010012201", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000010012301", 0);
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРазд, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
			
			ДеревоРазд = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
			ДеревоРазд.Строки[0].Данные.Вставить("П000120007001", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000120007002", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000120007003", 0);
			ДеревоРазд.Строки[0].Данные.Вставить("П000120007004", 0);
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРазд, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1Прил2"]);
			
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1Прил3");
			
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1Прил4");
			
			ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1Прил5");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_1и1_2"
			ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_1"
			ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1Подр1_3_2" Тогда
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1Прил1";
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		РасчетНаСервере();
		
		СформироватьРаздел1();
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ЯчейкаРасшифровки = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ТекущаяСтрока = ЯчейкаРасшифровки.Верх;
	
	Раздел1Прил1КодТарифа = "";
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П000110000101");
	Если ОбластьТаблДокумента <> Неопределено Тогда
		Если ОбластьТаблДокумента.СодержитЗначение = Истина Тогда
			Раздел1Прил1КодТарифа = СокрЛП(ОбластьТаблДокумента.Значение);
		Иначе
			Раздел1Прил1КодТарифа = СокрЛП(ОбластьТаблДокумента.Текст);
		КонецЕсли;
	КонецЕсли;
	
	Раздел1Прил1Подр1_3_1ПризнакОснования = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11131М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил1Подр1_3_1ПризнакОснования = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11131М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Прил1Подр1_3_2КодОснования = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11132М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил1Подр1_3_2КодОснования = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11132М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Прил1Подр1_3_2КодКлассаУсловий = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11132М100201_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил1Подр1_3_2КодКлассаУсловий = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П11132М100201"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Прил1_1КодОснования = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00111М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил1_1КодОснования = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00111М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Прил2КодТарифа = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100101_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил2КодТарифа = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100101"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	Раздел1Прил2ПризнакВыплат = "";
	НомерСтроки = 1;
	ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100201_1");
	Пока ОбластьТаблДокумента <> Неопределено Цикл
		Если ОбластьТаблДокумента.Верх > ТекущаяСтрока Тогда
			Прервать;
		КонецЕсли;
		Раздел1Прил2ПризнакВыплат = СокрЛП(ОбластьТаблДокумента.Значение);
		НомерСтроки = НомерСтроки + 1;
		ОбластьТаблДокумента = ТабличныйДокумент.Области.Найти("П00012М100201"
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомерСтроки));
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("Организация",                СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаПодписи",                СтруктураДанныхТитульный.ДатаПодписи);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", ЯчейкаРасшифровки.Текст);
	
	ПараметрыОтчета.Вставить("Раздел1Прил1КодТарифа",                 Раздел1Прил1КодТарифа);
	ПараметрыОтчета.Вставить("Раздел1Прил1Подр1_3_1ПризнакОснования", Раздел1Прил1Подр1_3_1ПризнакОснования);
	ПараметрыОтчета.Вставить("Раздел1Прил1Подр1_3_2КодОснования",     Раздел1Прил1Подр1_3_2КодОснования);
	ПараметрыОтчета.Вставить("Раздел1Прил1Подр1_3_2КодКлассаУсловий", Раздел1Прил1Подр1_3_2КодКлассаУсловий);
	ПараметрыОтчета.Вставить("Раздел1Прил1_1КодОснования",            Раздел1Прил1_1КодОснования);
	ПараметрыОтчета.Вставить("Раздел1Прил2КодТарифа",                 Раздел1Прил2КодТарифа);
	ПараметрыОтчета.Вставить("Раздел1Прил2ПризнакВыплат",             Раздел1Прил2ПризнакВыплат);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(ЯчейкаРасшифровки.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормы(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = 
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
		
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
		
	СписочныеЗначения = Новый Структура;
	СписочныеЗначения.Вставить("П000010002001");
	СписочныеЗначения.Вставить("П000010004001");
	СписочныеЗначения.Вставить("П00001М106001");
	СписочныеЗначения.Вставить("П00001М208001");
	СписочныеЗначения.Вставить("П000010010001");
	СписочныеЗначения.Вставить("П000020002001");
	СписочныеЗначения.Вставить("П000020004001");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если СписочныеЗначения.Свойство(СтрокаТЗ.Показатель) Тогда
			МассивЗначений = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
			СписочныеЗначения.Вставить(СтрокаТЗ.Показатель, МассивЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяФормы"								, ЭтаФорма.ИмяФормы);
	ПараметрыВыполнения.Вставить("мСохраненныйДок"						, СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыполнения.Вставить("мВыбраннаяФорма"						, СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыВыполнения.Вставить("СтруктураРеквизитовФормы"				, СтруктураРеквизитовФормы);
	ПараметрыВыполнения.Вставить("мСтруктураМногоуровневыхРазделов"		, мСтруктураМногоуровневыхРазделов);
	ПараметрыВыполнения.Вставить("СоответствиеЕдиницыИзмеренияДелителю"	, СоответствиеЕдиницыИзмеренияДелителю);
	ПараметрыВыполнения.Вставить("СтруктураДанныхТитульный"				, СтруктураДанныхТитульный);
	ПараметрыВыполнения.Вставить("СписочныеЗначения"					, СписочныеЗначения);
	ПараметрыВыполнения.Вставить("АдресПоказателей"		, СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	ПараметрыВыполнения.Вставить("АдресФормул"			, СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтаФорма.УникальныйИдентификатор);
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Проверка контрольных соотношений Расчета по страховым взносам'");
	ИмяПроцедуры = "РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияДлительнаяОперация";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЗапуска);
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФорма.ИмяФормы);
	Возврат ОбъектОтчета.ВыполнитьДокументированиеОбъект2021();
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ (СтруктураРеквизитовФормы.мАвтоВыборКодов И НЕ Область.Имя = "ПоМесту") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
			<> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	Оп = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ПоМесту" Тогда
		
		ПрежнийКодПоМесту = СокрЛП(Область.Значение);
		НовыйКодПоМесту = СокрЛП(РезультатВыбора[КолонкаПоиска]);
		
		ПрежнийКодПоМестуЭтоКодГлавыКФХ = (ПрежнийКодПоМесту = "124" ИЛИ ПрежнийКодПоМесту = "240");
		НовыйКодПоМестуЭтоКодГлавыКФХ = (НовыйКодПоМесту = "124" ИЛИ НовыйКодПоМесту = "240");
		
		ДополнительныеПараметры = Новый Структура("Область, НовыйКодПоМесту", Область, НовыйКодПоМесту);
	
		Если ПрежнийКодПоМестуЭтоКодГлавыКФХ И НЕ НовыйКодПоМестуЭтоКодГлавыКФХ Тогда
			Оп = Новый ОписаниеОповещения("ВопросВвестиКодПоМестуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При изменении значения кода по месту нахождения (учета) с ""%1"" на ""%2""
			|Раздел 2 будет очищен и исключен из состава дерева разделов. Продолжить?'"), ПрежнийКодПоМесту, НовыйКодПоМесту);
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
			Возврат;
		ИначеЕсли НЕ ПрежнийКодПоМестуЭтоКодГлавыКФХ И НовыйКодПоМестуЭтоКодГлавыКФХ Тогда
			ВопросВвестиКодПоМестуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "ПоМесту" ИЛИ КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВвестиКодПоМестуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Область.Значение = ДополнительныеПараметры.НовыйКодПоМесту;
	
	УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СохрИмяТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ДополнительныеПараметры.НовыйКодПоМесту <> "124" И ДополнительныеПараметры.НовыйКодПоМесту <> "240" Тогда
		ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел("Раздел2", 0);
	Иначе
		ИзменитьНастройкиРаздела2ВДеревеРазделов_УстановитьКодПоОКТМОИКБКВРазделах1и2();
	КонецЕсли;
	
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
	РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", СохрИмяТекРазделаОтчета);
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиРаздела2ВДеревеРазделов_УстановитьКодПоОКТМОИКБКВРазделах1и2()
	
	ИзменитьНастройкиРазделаВДеревеРазделов("Раздел2", 1);
	
	СсылкаНаРегистрациюВНО = ОбъектОтчета(ЭтаФорма.ИмяФормы).РеквизитЭлементаСправочника(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы.Организация);
	
	ПоМесту = СокрЛП(ТабличныйДокумент.Области.ПоМесту.Значение);
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).УстановитьКодПоОКТМОИКБКВРазделах1и2ПриАктивномТитульномЛисте(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СсылкаНаРегистрациюВНО, СтруктураРеквизитовФормы, ПоМесту);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиВДеревеРазделовИОчиститьМногоуровневыйРаздел(ИмяРаздела, ВариантНастроек, ФормироватьДеревоРазделов = Истина)
	
	ИзменитьНастройкиРазделаВДеревеРазделов(ИмяРаздела, ВариантНастроек);
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																		 СтруктураРеквизитовФормы,
																		 мСтруктураМногоуровневыхРазделов,
																		 ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкиРазделаВДеревеРазделов(ИмяРаздела, ВариантНастроек, ФормироватьДеревоРазделов = Истина)
	
	Для каждого СтраницаНастроек Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если СтраницаНастроек.ИмяСтраницы = ИмяРаздела Тогда
			СтраницаНастроек.ПоказатьСтраницу = ВариантНастроек;
			СтраницаНастроек.ВыводНаПечать    = ВариантНастроек;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если ФормироватьДеревоРазделов Тогда
		СформироватьДеревоРазделовОтчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел1Прил1_1" ИЛИ Ячейка.Раздел = "Раздел1Прил2"
		ИЛИ Ячейка.Раздел = "Раздел1Прил3" ИЛИ Ячейка.Раздел = "Раздел1Прил4" ИЛИ Ячейка.Раздел = "Раздел1Прил5"
		ИЛИ Ячейка.Раздел = "Раздел1Прил5_1" ИЛИ Ячейка.Раздел = "Раздел1Прил6" ИЛИ Ячейка.Раздел = "Раздел1Прил7"
		ИЛИ Ячейка.Раздел = "Раздел1Прил8" ИЛИ Ячейка.Раздел = "Раздел1Прил9" ИЛИ Ячейка.Раздел = "Раздел2" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Ячейка.Раздел = "Раздел1Прил1" ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Ячейка.Раздел = "Раздел1Прил1Подр1_1и1_2" ИЛИ Ячейка.Раздел = "Раздел1Прил1Подр1_3_1"
		ИЛИ Ячейка.Раздел = "Раздел1Прил1Подр1_3_2" Тогда
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Раздел1Прил1" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого НайденнаяПодчСтраница Из ТекСтраницаРаздела.ПолучитьЭлементы() Цикл
			Если НайденнаяПодчСтраница.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ИмяРаздела = "Раздел3" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("Фам", ДанныеСтраницы.П000310004001);
							СтруктПарам.Вставить("Имя", ДанныеСтраницы.П000310005001);
							СтруктПарам.Вставить("Отч", ДанныеСтраницы.П000310006001);
							СтруктПарам.Вставить("ДатаРожд", ДанныеСтраницы.П000310007001);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета
							= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРаздела3ФормыРСВ(СтруктПарам);
							
						ИначеЕсли ИмяРаздела = "Раздел1Прил1" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							СтруктПарам.Вставить("КодТарифа", ДанныеСтраницы.П000110000101);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницыПриложения1КРазделу1(СтруктПарам);
							
						Иначе
							
							НаимСтраницы = "Стр. ";
							Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
								НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
							КонецЕсли;
							
							ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
							+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
							
						КонецЕсли;
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = "Стр. ";
								Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
									НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
								КонецЕсли;
								ЭлементПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницыПриложения1КРазделу1(СтруктураПараметров)
	
	КодТарифа = СокрЛП(СтруктураПараметров.КодТарифа);
	
	Возврат ?(ЗначениеЗаполнено(КодТарифа), "Код тарифа " + КодТарифа,
	"Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ="));
	
КонецФункции

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущийРаздел.Доступность = Ложь;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
			1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			
			Элементы.ОчиститьТекущийРаздел.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3";
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
				ТекстЗаголовка = "Удалить страницу";
				Если ИндексыВыделенныхСтраницРаздела() <> Неопределено Тогда
					ТекстЗаголовка = "Удалить выделенные страницы";
				КонецЕсли;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Заголовок = ТекстЗаголовка;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюПоказатьБланкСтраницыРаздела3.Видимость = Истина;
	Иначе
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюПоказатьБланкСтраницыРаздела3.Видимость = Ложь;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   СтруктураРеквизитовФормы,
																   ДатаПодписи,
																   ТабличныйДокумент,
																   Неопределено,
																   ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
	ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Оп = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оп = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормы(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
