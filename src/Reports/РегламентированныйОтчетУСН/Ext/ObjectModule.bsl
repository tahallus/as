
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;

	РазделыОтчета = ИзвлечьСохраненныеПоказателиОтчета(ИмяФормы, СохраненныйОтчет);
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(ИмяФормы, СохраненныйОтчет, РазделыОтчета);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы, ИсточникОтчета);
	Если НЕ ВыгрузкаВозможна(ИмяФормы, СохраненныйОтчет, ПараметрыВыгрузки, РазделыОтчета, РезультатВыгрузки) Тогда
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки, РазделыОтчета, РезультатВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(РезультатВыгрузки, ДеревоВыгрузки) Тогда
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "УСН");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2021");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/04/2016");
		
		СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
		СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", ЭтотОбъект.Метаданные().Имя);
	СтруктураРеквизитовФормы.Вставить("НаименованиеФормыОтчета", ИмяФормы);
	СтруктураРеквизитовФормы.Вставить("мКодОтчета", "1152017");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2)));
	СтруктураРеквизитовФормы.Вставить("мИдГруппы", "П0000300001");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("МестоПостановкиНаУчетИзменено", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВПрограммеИзмененаОрганизация", Ложь);
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияОтчета");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ИПИспользуетТрудНаемныхРаботников");
	СтруктураРеквизитовФормы.Вставить("ОпределятьТрудНаемныхРабочих");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ПоказателиОтчета = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ПоказателиОтчета;
		
		ДанныеМногострочныхРазделов = ПараметрыПечати.СохраненныйОтчет.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
		
		ДанныеРазделов = Новый Структура;
		ДанныеРазделов.Вставить("Титульный", ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
		ДанныеРазделов.Вставить("Раздел11",  ПоказателиОтчета.ПолеТабличногоДокументаРаздел11);
		ДанныеРазделов.Вставить("Раздел12",  ПоказателиОтчета.ПолеТабличногоДокументаРаздел12);
		ДанныеРазделов.Вставить("Раздел21",  ПоказателиОтчета.ПолеТабличногоДокументаРаздел21);
		ДанныеРазделов.Вставить("Раздел22",  ПоказателиОтчета.ПолеТабличногоДокументаРаздел22);
		ДанныеРазделов.Вставить("Раздел3",   ПоказателиОтчета.ПолеТабличногоДокументаРаздел3);
		ДанныеРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 
			ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы]);
			
	КонецЕсли;	
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, ДанныеРазделов.Титульный);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
	
			Продолжить;
	
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",		   ВидПечати);
	
		ВывестиНаПечатьЛист(ИмяФормы,
							СтруктураПараметров,
							ОбщиеРеквизитыРазделов,
							СтруктураРеквизитовФормы,
							ДанныеРазделов);
	
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(СтруктураРеквизитовФормы, ,
												СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
	
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
	
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = НСтр("ru='Декларация по УСН'")
							+ НСтр("ru=' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
							 	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
							 	"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			
			СтрИНН = СтрИНН + "--";
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
	
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
						
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда
			
		Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
				
		Иначе
				
			СтрДатаПодписи = "";
				
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + Прав(СокрЛП(ИмяФормы), 7) + "_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел11",  ПрефиксИменМакетов + "Раздел11");
	СоответствиеРазделовМакетам.Вставить("Раздел12",  ПрефиксИменМакетов + "Раздел12");
	СоответствиеРазделовМакетам.Вставить("Раздел21",  ПрефиксИменМакетов + "Раздел21");
	СоответствиеРазделовМакетам.Вставить("Раздел22",  ПрефиксИменМакетов + "Раздел22");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   ПрефиксИменМакетов + "Раздел3");
	
	МЧБРаздела = СоответствиеРазделовМакетам[СтруктураПараметров.ИмяСтраницы];
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(МЧБРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы;
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		Если СтруктураПараметров.ИмяСтраницы = "Раздел3" Тогда
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
				
				ИсхКолвоСтрокБлока = 10;
				
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
				
				ИсхКолвоСтрокБлока = 9;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекКолвоСтрокБлока = ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			// Определение общего количества листов МЧБ.
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
			КонецЕсли;
			
			// Заполнение строки имен показателей (для проверки перед переименованием).
			СтрИменаПоказателей = "";
			
			Для Каждого КолонкаСтруктуры Из ДанныеРазделов[СтруктураРеквизитовФормы.мИдГруппы].Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			// Заполнение списка листов МЧБ.
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				Для Каждого ТекущаяОбласть Из МакетПечатнойФормы.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						// Проверка на вхождение в данную многострочную часть.
						Продолжить;
					КонецЕсли;
					
					// Определение и обрасывание НомерЯчейки.
					ПоказательИНомерСтрокиСРазделителем
						= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,
												 СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					// Определение СмысловаяЧасть и ТекущийСчетчик.
					СмысловаяЧастьСРазделителем
					 	= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик
						= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					// Окончательная проверка на вхождение в данную многострочную часть.
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						// Очищение происходит после этого цикла.
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					// Подготовка к переименованию.
					// Заполнение списка: значение - область, представление - будущее имя.
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
				КонецЦикла;
				
				// Очищение.
				Для Каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				// Переименование.
				Для Каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетПечатнойФормы.ПолучитьОбласть());
				
			КонецЦикла;
			
			Для Каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЛистМЧБ.ПолеСверху = 5;
				ЛистМЧБ.ПолеСправа = 5;
				ЛистМЧБ.ПолеСнизу  = 5;
				ЛистМЧБ.ПолеСлева  = 5;
				
				ЗаполнитьПечатнуюФорму(ИмяФормы,
									   СтруктураПараметров,
						   			   ЛистМЧБ,
						   			   ОбщиеРеквизитыРазделов,
						   			   ДанныеРазделов,
									   СтруктураРеквизитовФормы);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					// Выводится не последний лист многострочной серии листов МЧБ.
					// Необходимо обнулить итоговые показатели.
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ИмяФормы, ЛистМЧБ);
				КонецЕсли;
				
				ТабличныйДокумент = Новый ТабличныйДокумент;
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
																	  СтруктураПараметров,
																	  ТабличныйДокумент,
																	  СтруктураРеквизитовФормы.мПечатныеФормы);
				
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения.
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   СтруктураРеквизитовФормы);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 СтруктураРеквизитовФормы)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
	
	ПоказателиОтчета = ДанныеРазделов[ПараметрыПечати.ИмяСтраницы];
		
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		
		Если ТипЗнч(Показатель) = Тип("ОбластьЯчеекТабличногоДокумента")
		   И (НЕ Показатель.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   ИЛИ НЕ Показатель.СодержитЗначение) Тогда
		   
		   Продолжить;
		   
		КонецЕсли;
				
		НовСтр = Показатели.Добавить();
		
		НовСтр.Имя = ?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), Показатель.Ключ, Показатель.Имя);
		НовСтр.Значение = Показатель.Значение;
		
		Если ПараметрыПечати.ИмяСтраницы = "Раздел22"
		   И НовСтр.Имя = "П000220024303" Тогда
		
			СписокДляИзменения = Новый СписокЗначений;
	
			Если (Число(ПоказателиОтчета.П000220021303)
				- Число(ПоказателиОтчета.П000220022303)
				- Число(ПоказателиОтчета.П000220023003)) >= 0 Тогда
				
				СписокДляИзменения.Добавить(НовСтр.Имя, "0");
				
			Иначе
				
				СписокДляИзменения.Добавить(НовСтр.Имя, "-");
				
			КонецЕсли;
		
			Для Каждого ПоказательИзСписка Из СписокДляИзменения Цикл
			
				КодПоказателя = ПоказательИзСписка.Значение;
		
				ТекущийФормат = МакетФормыОтчета.Области[КодПоказателя].Формат;
				ПозЧН = СтрНайти(ТекущийФормат, "ЧН=");
				ТекЗначЧН = Сред(ТекущийФормат, ПозЧН, 4);
				НовЗначЧН = Лев(ТекЗначЧН, 3) + ПоказательИзСписка.Представление;
				МакетФормыОтчета.Области[КодПоказателя].Формат = СтрЗаменить(ТекущийФормат, ТекЗначЧН, НовЗначЧН);
		
			КонецЦикла;
		
		КонецЕсли;
		
		НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы);
		
	КонецЦикла;

	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИННДоп1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИННДоп2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИННДоп3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КППДоп1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КППДоп2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КППДоп3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						   + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		// Особая обработка ФИО на титульном листе.
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
			
			// Особая обработка ОКВЭД.
			ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
			Если ПокОКВЭД <> Неопределено Тогда
				ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
				Если Сред(ОКВЭД, 2, 1) = "." Тогда
					ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
				КонецЕсли;
				Если Сред(ОКВЭД, 5, 1) = "." Тогда
					ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
				КонецЕсли;
				ПокОКВЭД.Значение = ОКВЭД;
				ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Строка(Цел(РезультатПоиска.Значение));
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							// Разделение областей показателя на 2 части.
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
														 ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
																ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, СтрДообнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
								ТекАдресЗначенияОбласти.ИндексЗнакоместа,
								ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
				КонецЕсли;
			Иначе
				Если Лев(ИмяОбласти, 10) = "П002110012" Тогда
					ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ?(РезультатПоиска.Значение = 0, "0", РезультатПоиска.ЗначениеМЧБ));
				Иначе
					ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ИмяФормы, ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы)
	
	ФорматОбласти = "";
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Если НЕ Область = Неопределено
		   И Область.ТипЗначения.КвалификаторыЧисла.Разрядность
		   = СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ.КвалификаторыЧисла.Разрядность
		   И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти
		   = СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ.КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
			
			СоотвСтрокаФормата.Вставить("ЧЦ", СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ.КвалификаторыЧисла.Разрядность);
			СоотвСтрокаФормата.Вставить("ЧДЦ", "0");
			СоотвСтрокаФормата.Вставить("ЧРД", ",");
			СоотвСтрокаФормата.Вставить("ЧС", "0");
			
		КонецЕсли;
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
						
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	
	КореньИмениОбласти = Неопределено;
	
	СтрИндексЗнакоместа = "";
	
	ИндексЗнакоместа = 0;
	
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
		
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы,
								   Область,
								   Знач Значение,
								   ИндексЗнакоместа = 0,
								   Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) И Дополнять_ Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

#КонецОбласти

Функция ИзвлечьСохраненныеПоказателиОтчета(ИмяФормы, СохраненныйОтчет)
	
	РазделыОтчета = Новый Структура;
	
	ДанныеОтчета = СохраненныйОтчет.ДанныеОтчета.Получить();
	
	Показатели = ДанныеОтчета.ПоказателиОтчета;
	Для Каждого Раздел Из Показатели Цикл
		РазделыОтчета.Вставить(Раздел.Ключ,
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, РазделыОтчета);
	
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, РазделыОтчета)
	
	Раздел11 = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел11.Вставить("П100110004003", Раздел11["П000110004003"] - Раздел11["П000110005003"]);
	Раздел11.Вставить("П100110007003", Раздел11["П000110007003"] - Раздел11["П000110008003"]);
	Раздел11.Вставить("П100110010003", Раздел11["П000110010003"] - Раздел11["П000110011003"]);
	
	Раздел12 = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел12.Вставить("П100120004003", Раздел12["П000120004003"] - Раздел12["П000120005003"]);
	Раздел12.Вставить("П100120007003", Раздел12["П000120007003"] - Раздел12["П000120008003"]);
	Раздел12.Вставить("П100120010003", Раздел12["П000120010003"] - Раздел12["П000120011003"]);
	
	Раздел21 = РазделыОтчета.ПолеТабличногоДокументаРаздел21;
	
	Раздел22 = РазделыОтчета.ПолеТабличногоДокументаРаздел22;
	Раздел22.Вставить("П100220024003", Раздел22["П000220024003"] - Раздел22["П000220025003"]);
	Раздел22.Вставить("П100220024103", Раздел22["П000220024103"] - Раздел22["П000220025103"]);
	Раздел22.Вставить("П100220024203", Раздел22["П000220024203"] - Раздел22["П000220025203"]);
	Раздел22.Вставить("П100220024303", Раздел22["П000220024303"] - Раздел22["П000220025303"]);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		Р21_Стр124 = СокрЛП(Раздел21["П002110012403"]) + "/" + СокрЛП(Раздел21["П002110012404"]);
		Раздел21.Вставить("П102110012403", ?(СтрДлина(Р21_Стр124) = 20, Р21_Стр124, ""));
		
		Р22_Стр264 = СокрЛП(Раздел22["П000220026403"]) + "/" + СокрЛП(Раздел22["П000220026404"]);
		Раздел22.Вставить("П100220026403", ?(СтрДлина(Р22_Стр264) = 20, Р22_Стр264, ""));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета(ИмяФормы, СохраненныйОтчет, РазделыОтчета)
	
	Титульный = РазделыОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
		
	КонецЕсли;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СохраненныйОтчет.Организация);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СохраненныйОтчет.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО", СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СохраненныйОтчет.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	Если ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(СохраненныйОтчет.Организация.ИНН));
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
	Иначе
		// Случай перехода 2.0 -> 3.0.
		Если НЕ Титульный.Свойство("КПП") И Титульный.Свойство("КПП1_1")Тогда
			Титульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				Титульный.КПП = СокрЛП(Титульный.КПП) + ?(Титульный["КПП1_" + Ном] = "-", "", Титульный["КПП1_" + Ном]);
				Титульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
		ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СохраненныйОтчет.Организация.ИНН));
		ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП));
		
		ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
		ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
		ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_USN");
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СохраненныйОтчет.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СохраненныйОтчет.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	// Условия выгрузки отдельных ветвей файла электронного представления.
	Раздел11 = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел12 = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(ИмяФормы, Раздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(ИмяФормы, Раздел12);
	
	Если ЗаполненРаздел11 И НЕ ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Истина;
		ВыгружатьРаздел12 = Ложь;
	ИначеЕсли НЕ ЗаполненРаздел11 И ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Ложь;
		ВыгружатьРаздел12 = Истина;
	Иначе
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитикиУСН(СохраненныйОтчет);
		Если ДанныеУчетнойПолитики.ПрименяетсяУСН Тогда
			ВидОбъектаНалогообложения = ДанныеУчетнойПолитики.КодОбъектаНалогообложенияУСН;
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		Иначе
			// Попытка получить объекта налогообложения в случае, если в отчетном периоде УСН применялась.
			ВидОбъектаНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
				СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаНачала, СохраненныйОтчет.ДатаОкончания);
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел11", ВыгружатьРаздел11);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12", ВыгружатьРаздел12);
	
	ВыгружатьРаздел12_100
	= ЗначениеЗаполнено(Раздел12.П000120010003)
	ИЛИ ЗначениеЗаполнено(Раздел12.П000120011003)
	ИЛИ НЕ ЗначениеЗаполнено(Раздел12.П000120012003);
	
	ВыгружатьРаздел12_120 = НЕ ВыгружатьРаздел12_100;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12_100", ВыгружатьРаздел12_100);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12_120", ВыгружатьРаздел12_120);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННФЛ),
				СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ВыгрузкаВозможна(ИмяФормы, СохраненныйОтчет, ПараметрыВыгрузки, РазделыОтчета, Результат)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, СтатусПроверки, Результат);
	
	СочетаниеРазделовКорректно = Истина;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(ИмяФормы, РазделыОтчета.ПолеТабличногоДокументаРаздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(ИмяФормы,РазделыОтчета.ПолеТабличногоДокументаРаздел12);
	ЗаполненРаздел21 = ЗаполненРаздел21(ИмяФормы,РазделыОтчета.ПолеТабличногоДокументаРаздел21);
	ЗаполненРаздел22 = ЗаполненРаздел22(ИмяФормы,РазделыОтчета.ПолеТабличногоДокументаРаздел22);
	
	ЗаполненоПоКоду1 = ЗаполненРаздел11 ИЛИ ЗаполненРаздел21;
	ЗаполненоПоКоду2 = ЗаполненРаздел12 ИЛИ ЗаполненРаздел22;
	
	ДанныеУчетнойПолитики = ДанныеУчетнойПолитикиУСН(СохраненныйОтчет);
	
	КодВидаОбъекта = Неопределено;
	Если ДанныеУчетнойПолитики.ПрименяетсяУСН Тогда
		КодВидаОбъекта = ДанныеУчетнойПолитики.КодОбъектаНалогообложенияУСН;
	Иначе
		// Попытка получить объект налогообложения в случае, если в отчетном периоде УСН применялась.
		КодВидаОбъекта = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
			СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаНачала, СохраненныйОтчет.ДатаОкончания);
	КонецЕсли;
	
	Если КодВидаОбъекта = 1 Тогда
		Если ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 2", "Раздел12", "П000120001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	ИначеЕсли КодВидаОбъекта = 2 Тогда
		Если ЗаполненоПоКоду1 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 1", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	Иначе
		Если ЗаполненоПоКоду1 И ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "Не допускается одновременное заполнение отчета по объектам налогообложения с кодами 1 и 2", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		Иначе
			Если НЕ ПараметрыВыгрузки.ВыгружатьРаздел11 И НЕ ПараметрыВыгрузки.ВыгружатьРаздел12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "Не указан объект налогообложения УСН", "Раздел11", "П000110001003");
				СтатусПроверки = Ложь;
				СочетаниеРазделовКорректно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СочетаниеРазделовКорректно Тогда
		
		ПроверятьПоКоду1 = (КодВидаОбъекта = 1)
		               ИЛИ (КодВидаОбъекта <> 2 И ЗаполненоПоКоду1)
		               ИЛИ (КодВидаОбъекта <> 2 И НЕ ЗаполненоПоКоду2);
		
		ПроверятьПоКоду2 = НЕ ПроверятьПоКоду1;
		
		Если ПроверятьПоКоду1 Тогда
			ПроверитьЗаполнение_Раздел11(РазделыОтчета, СтатусПроверки, Результат);
			ПроверитьЗаполнение_Раздел21(ИмяФормы, РазделыОтчета, СтатусПроверки, Результат);
		КонецЕсли;
		
		Если ПроверятьПоКоду2 Тогда
			ПроверитьЗаполнение_Раздел12(РазделыОтчета, СтатусПроверки, Результат);
			ПроверитьЗаполнение_Раздел22(ИмяФормы, РазделыОтчета, СтатусПроверки, Результат);
		КонецЕсли;
		
		ПроверитьЗаполнение_Раздел3(РазделыОтчета, СтатусПроверки, Результат);
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗаполненРаздел11(ИмяФормы, ДанныеРаздела)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		СписокПоказателей = "П000110002003,П000110003003,П000110004003,П000110005003,П000110006003,
		|П000110007003,П000110008003,П000110009003,П000110010003,П000110010103,П000110011003";
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		СписокПоказателей = "П000110002003,П000110003003,П000110004003,П000110005003,П000110006003,
		|П000110007003,П000110008003,П000110009003,П000110010003,П000110011003";
		
	КонецЕсли;
	
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел12(ИмяФормы, ДанныеРаздела)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		СписокПоказателей = "П000120002003,П000120003003,П000120004003,П000120005003,П000120006003,
		|П000120007003,П000120008003,П000120009003,П000120010003,П000120010103,П000120011003,П000120012003";
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		СписокПоказателей = "П000120002003,П000120003003,П000120004003,П000120005003,П000120006003,
		|П000120007003,П000120008003,П000120009003,П000120010003,П000120011003,П000120012003";
		
	КонецЕсли;
	
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел21(ИмяФормы, ДанныеРаздела)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		СписокПоказателей
		= "П002110011003,П002110011103,П002110011203,П002110011303,
		|П002110012403,П002110012404,
		|П002110013003,П002110013103,П002110013203,П002110013303,
		|П002110014003,П002110014103,П002110014203,П002110014303,
		|П002120011003,П002120011103,П002120011203,П002120011303,
		|П002120013003,П002120013103,П002120013203,П002120013303,
		|П002120014003,П002120014103,П002120014203,П002120014303,
		|П002120015003,П002120015103,П002120015203,П002120015303,
		|П002120016003,П002120016103,П002120016203,П002120016303";
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		СписокПоказателей
		= "П002110011003,П002110011103,П002110011203,П002110011303,
		|П002110013003,П002110013103,П002110013203,П002110013303,
		|П002110014003,П002110014103,П002110014203,П002110014303,
		|П002120011003,П002120011103,П002120011203,П002120011303,
		|П002120013003,П002120013103,П002120013203,П002120013303,
		|П002120014003,П002120014103,П002120014203,П002120014303,
		|П002120015003,П002120015103,П002120015203,П002120015303,
		|П002120016003,П002120016103,П002120016203,П002120016303";
		
	КонецЕсли;
	
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел22(ИмяФормы, ДанныеРаздела)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		СписокПоказателей
		= "П000220021003,П000220021103,П000220021203,П000220021303,
		|П000220022003,П000220022103,П000220022203,П000220022303,П000220023003,
		|П000220024003,П000220024103,П000220024203,П000220024303,
		|П000220025003,П000220025103,П000220025203,П000220025303,
		|П000220026403,П000220026404,
		|П000220027003,П000220027103,П000220027203,П000220027303,П000220028003";
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		СписокПоказателей
		= "П000220021003,П000220021103,П000220021203,П000220021303,
		|П000220022003,П000220022103,П000220022203,П000220022303,П000220023003,
		|П000220024003,П000220024103,П000220024203,П000220024303,
		|П000220025003,П000220025103,П000220025203,П000220025303,
		|П000220027003,П000220027103,П000220027203,П000220027303,П000220028003";
		
	КонецЕсли;
	
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция РазделЗаполнен(ДанныеРаздела, СписокПоказателей)
	
	ИменаПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	
	Результат = Ложь;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ИмяПоказателя = СокрЛП(ИмяПоказателя);
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя]) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, СтатусПроверки, Результат)
	
	ЭтоПБОЮЛ = ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("34,50,95,96"); // ограничено форматом выгрузки
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("120,210,215"); // ограничено форматом выгрузки
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код налогового периода",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе задан некорректный код налогового периода",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код налогового органа",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодНО)) <> 4 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе неверно задан код налогового органа",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код места, по которому представляется документ",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе задан некорректный код места, по которому представляется документ",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе не задано значение кода вида деятельности по ОКВЭД",
			"Титульный", "ОКВЭД");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).",
			"Титульный", "ОКВЭД");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан ИНН индивидуального предпринимателя",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННФЛ) <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан ИНН индивидуального предпринимателя",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе не указана фамилия индивидуального предпринимателя",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе не указано имя индивидуального предпринимателя",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не указано полное наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10
					ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
					"Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
					"Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И ПараметрыВыгрузки.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Не задано наименование документа, удостоверяющего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел11(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000110001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.1 не указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.1 неверно указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000110003003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000110006003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000110009003", СтатусПроверки, Результат);
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110004003,П000110005003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110007003,П000110008003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110010003,П000110011003", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел12(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000120001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.2 не указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.2 неверно указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000120003003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000120006003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000120009003", СтатусПроверки, Результат);
	
	СочетаниеСтрок = ?(ЗначениеЗаполнено(ДанныеРаздела.П000120010003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120011003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120012003), 1, 0);
	Если СочетаниеСтрок > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Допускается заполнение только одной из строк 100, 110 и 120 раздела 1.2",
		"Раздел12", "П000120010003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120004003,П000120005003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120007003,П000120008003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120010003,П000120011003", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел21(ИмяФормы, РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел21;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		ВозможныеПризнакиПримененияСтавки
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,2"); // ограничено форматом выгрузки
		Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П002110010103) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 101 раздела 2.1.1 не задан код признака применения налоговой ставки", "Раздел21", "П002110010103");
			СтатусПроверки = Ложь;
		ИначеЕсли ВозможныеПризнакиПримененияСтавки.Найти(ДанныеРаздела.П002110010103) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 101 раздела 2.1.1 неверно задан код признака применения налоговой ставки", "Раздел21", "П002110010103");
			СтатусПроверки = Ложь;
		Иначе
			Признак1НеСоответствуетСтавкам = (ДанныеРаздела.П002110010103 = "1" И Макс(ДанныеРаздела.П002110012003,
			ДанныеРаздела.П002110012103, ДанныеРаздела.П002110012203, ДанныеРаздела.П002110012303) > 6);
			Признак2НеСоответствуетСтавкам = (ДанныеРаздела.П002110010103 = "2" И Макс(ДанныеРаздела.П002110012003,
			ДанныеРаздела.П002110012103, ДанныеРаздела.П002110012203, ДанныеРаздела.П002110012303) <= 6);
			Если Признак1НеСоответствуетСтавкам ИЛИ Признак2НеСоответствуетСтавкам Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке 101 раздела 2.1.1 задан код признака применения налоговой ставки, "
				+ "не соответствующий заданным в строках 120-123 налоговым ставкам", "Раздел21", "П002110010103");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозможныеПризнакиНалогоплательщика
		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,2"); // ограничено форматом выгрузки
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П002110010203) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 102 раздела 2.1.1 не задан признак налогоплательщика", "Раздел21", "П002110010203");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеПризнакиНалогоплательщика.Найти(ДанныеРаздела.П002110010203) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 102 раздела 2.1.1 неверно задан признак налогоплательщика", "Раздел21", "П002110010203");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		Если ДанныеРаздела.П002110012003 > 6 И ДанныеРаздела.П002110012103 <= 6 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 121 раздела 2.1.1 налоговая ставка должна быть не меньше налоговой ставки в строке 120",
			"Раздел21", "П002110012103");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ДанныеРаздела.П002110012103 > 6 И ДанныеРаздела.П002110012203 <= 6 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 122 раздела 2.1.1 налоговая ставка должна быть не меньше налоговой ставки в строке 121",
			"Раздел21", "П002110012203");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ДанныеРаздела.П002110012203 > 6 И ДанныеРаздела.П002110012303 <= 6 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 123 раздела 2.1.1 налоговая ставка должна быть не меньше налоговой ставки в строке 122",
			"Раздел21", "П002110012303");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРаздела.П002110012403) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П002110012404) Тогда
			ВозможныеКодыОбоснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"3462010,3462020,3462030,3462040"); // ограничено форматом выгрузки
			Р21_Стр124 = СокрЛП(ДанныеРаздела["П002110012403"]) + "/" + СокрЛП(ДанныеРаздела["П002110012404"]);
			Если НЕ (СтрДлина(Р21_Стр124) = 20 И ВозможныеКодыОбоснования.Найти(Лев(Р21_Стр124, 7)) <> Неопределено
				И Прав(Р21_Стр124, 12) <> "000000000000") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке 124 раздела 2.1.1 задано значение, не соответствующее шаблону ""ЛЛЛЛЛЛЛ/ХХХХХХХХХХХХ"", где: "
				+ """ЛЛЛЛЛЛЛ"" - код обоснования применения налоговой ставки, установленной законом субъекта РФ "
				+ "(3462010, 3462020, 3462030 или 3462040); ""/ХХХХХХХХХХХХ"" - разделительный знак ""/"" и номер статьи "
				+ "(ХХХХ), пункта (ХХХХ) и подпункта (ХХХХ) закона субъекта РФ", "Раздел21", "П002110012403");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Окр_П002120016003 = Окр(ДанныеРаздела.П002120016003);
	Окр_П002110013003 = Окр(ДанныеРаздела.П002110013003);
	Окр_П002110014003 = Окр(ДанныеРаздела.П002110014003);
	Если Окр_П002120016003 > Окр_П002110013003 - Окр_П002110014003 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 160 раздела 2.1.2 должно быть меньше или равно разности значений в строках 130 и 140 раздела 2.1.1", "Раздел21", "П002120016003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016103 = Окр(ДанныеРаздела.П002120016103);
	Окр_П002110013103 = Окр(ДанныеРаздела.П002110013103);
	Окр_П002110014103 = Окр(ДанныеРаздела.П002110014103);
	Если Окр_П002120016103 > Окр_П002110013103 - Окр_П002110014103 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 161 раздела 2.1.2 должно быть меньше или равно разности значений в строках 131 и 141 раздела 2.1.1", "Раздел21", "П002120016103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016203 = Окр(ДанныеРаздела.П002120016203);
	Окр_П002110013203 = Окр(ДанныеРаздела.П002110013203);
	Окр_П002110014203 = Окр(ДанныеРаздела.П002110014203);
	Если Окр_П002120016203 > Окр_П002110013203 - Окр_П002110014203 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 162 раздела 2.1.2 должно быть меньше или равно разности значений в строках 132 и 142 раздела 2.1.1", "Раздел21", "П002120016203");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016303 = Окр(ДанныеРаздела.П002120016303);
	Окр_П002110013303 = Окр(ДанныеРаздела.П002110013303);
	Окр_П002110014303 = Окр(ДанныеРаздела.П002110014303);
	Если Окр_П002120016303 > Окр_П002110013303 - Окр_П002110014303 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 163 раздела 2.1.2 должно быть меньше или равно разности значений в строках 133 и 143 раздела 2.1.1", "Раздел21", "П002120016303");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел22(ИмяФормы, РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел22;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		ВозможныеПризнакиПримененияСтавки
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,2"); // ограничено форматом выгрузки
		Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П000220020103) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 201 раздела 2.2 не задан код признака применения налоговой ставки", "Раздел22", "П000220020103");
			СтатусПроверки = Ложь;
		ИначеЕсли ВозможныеПризнакиПримененияСтавки.Найти(ДанныеРаздела.П000220020103) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 201 раздела 2.2 неверно задан код признака применения налоговой ставки", "Раздел22", "П000220020103");
			СтатусПроверки = Ложь;
		Иначе
			Признак1НеСоответствуетСтавкам = (ДанныеРаздела.П000220020103 = "1" И Макс(ДанныеРаздела.П000220026003,
			ДанныеРаздела.П000220026103, ДанныеРаздела.П000220026203, ДанныеРаздела.П000220026303) > 15);
			Признак2НеСоответствуетСтавкам = (ДанныеРаздела.П000220020103 = "2" И Макс(ДанныеРаздела.П000220026003,
			ДанныеРаздела.П000220026103, ДанныеРаздела.П000220026203, ДанныеРаздела.П000220026303) <= 15);
			Если Признак1НеСоответствуетСтавкам ИЛИ Признак2НеСоответствуетСтавкам Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке 201 раздела 2.2 задан код признака применения налоговой ставки, "
				+ "не соответствующий заданным в строках 260-263 налоговым ставкам", "Раздел22", "П000220020103");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеРаздела.П000220026003 > 15 И ДанныеРаздела.П000220026103 <= 15 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 261 раздела 2.2 налоговая ставка должна быть не меньше налоговой ставки в строке 260",
			"Раздел22", "П000220026103");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ДанныеРаздела.П000220026103 > 15 И ДанныеРаздела.П000220026203 <= 15 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 262 раздела 2.2 налоговая ставка должна быть не меньше налоговой ставки в строке 261",
			"Раздел22", "П000220026203");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ДанныеРаздела.П000220026203 > 15 И ДанныеРаздела.П000220026303 <= 15 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"В строке 263 раздела 2.2 налоговая ставка должна быть не меньше налоговой ставки в строке 262",
			"Раздел22", "П000220026303");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеРаздела.П000220026403) ИЛИ ЗначениеЗаполнено(ДанныеРаздела.П000220026404) Тогда
			ВозможныеКодыОбоснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"3462010,3462020,3462030,3462040"); // ограничено форматом выгрузки
			Р22_Стр264 = СокрЛП(ДанныеРаздела["П000220026403"]) + "/" + СокрЛП(ДанныеРаздела["П000220026404"]);
			Если НЕ (СтрДлина(Р22_Стр264) = 20 И ВозможныеКодыОбоснования.Найти(Лев(Р22_Стр264, 7)) <> Неопределено
				И Прав(Р22_Стр264, 12) <> "000000000000") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке 264 раздела 2.2 задано значение, не соответствующее шаблону ""ЛЛЛЛЛЛЛ/ХХХХХХХХХХХХ"", где: "
				+ """ЛЛЛЛЛЛЛ"" - код обоснования применения налоговой ставки, установленной законом субъекта РФ "
				+ "(3462010, 3462020, 3462030 или 3462040); ""/ХХХХХХХХХХХХ"" - разделительный знак ""/"" и номер статьи "
				+ "(ХХХХ), пункта (ХХХХ) и подпункта (ХХХХ) закона субъекта РФ", "Раздел22", "П000220026403");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024003,П000220025003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024103,П000220025103", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024203,П000220025203", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024303,П000220025303", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел3(РазделыОтчета, СтатусПроверки, Результат)
	
	Перем Индекс, ИндексСтр;
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел3;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	
	Пока ДанныеРаздела.Свойство("П000030000101_" + ИндексСтр) Цикл
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000030000101_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000102_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000103_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000104_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000105_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000106_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000107_" + ИндексСтр]);
		
		Если СтрокаЗаполнена Тогда
			
			КодВидаПоступления = СокрЛП(ДанныеРаздела["П000030000101_" + ИндексСтр]);
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке " + ИндексСтр + " раздела 3 не указан код вида поступлений",
				"Раздел3", "П000030000101_" + ИндексСтр);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(КодВидаПоступления) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке " + ИндексСтр + " раздела 3 неверно указан код вида поступлений",
				"Раздел3", "П000030000101_" + ИндексСтр);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОКТМО(ДанныеРаздела, ИмяПоказателя, СтатусПроверки, Результат)
	
	КодРаздела = Сред(ИмяПоказателя, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя, 5, 1) + "." + Сред(ИмяПоказателя, 6, 1);
	КодСтроки = Сред(ИмяПоказателя, 9, 3);
	
	ОКТМО = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО <> 0 И ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		ОписаниеОшибки = "В строке " + КодСтроки + " раздела " + НомерРаздела
			+ " неверно указан код по ОКТМО";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСочетаниеПоказателей(ДанныеРаздела, СписокПоказателей, СтатусПроверки, Результат)
	
	Показатели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	ИмяПоказателя1 = Показатели[0];
	ИмяПоказателя2 = Показатели[1];
	
	КодРаздела = Сред(ИмяПоказателя1, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя1, 5, 1) + "." + Сред(ИмяПоказателя1, 6, 1);
	КодСтроки1 = Сред(ИмяПоказателя1, 9, 3);
	КодСтроки2 = Сред(ИмяПоказателя2, 9, 3);
	
	ЗаполненПоказатель1 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя1]);
	ЗаполненПоказатель2 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя2]);
	
	Если ЗаполненПоказатель1 и ЗаполненПоказатель2 Тогда
		ОписаниеОшибки = "Не допускается одновременное заполнение показателей в строках "
			+ КодСтроки1 + " и " + КодСтроки2 + " раздела " + НомерРаздела;
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ИмяФормы, ИсточникОтчета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
		
		Макет = Отчеты[ИсточникОтчета].ПолучитьМакет("СхемаВыгрузки506");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2015Кв1") Тогда
		
		Макет = Отчеты[ИсточникОтчета].ПолучитьМакет("СхемаВыгрузки505");
		
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки, РазделыОтчета, Результат)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, Результат);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, РазделыОтчета);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, Результат)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(Результат, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, Результат);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, РазделыОтчета, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = РазделыОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы, РазделыОтчета);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = РазделыОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки, РазделыОтчета);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, РазделыОтчета);
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = РазделыОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ДанныеУчетнойПолитикиУСН(СохраненныйОтчет)
	
	Результат = Новый Структура("ПрименяетсяУСН, КодОбъектаНалогообложенияУСН", Ложь, 0);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет.Организация) Тогда
		Возврат Результат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ПрименяетсяУСН");
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаОкончания, Сведения);
	
	ПрименяетсяУСН = Ложь;
	ОргСведения.Свойство("ПрименяетсяУСН", ПрименяетсяУСН);
	// Учет случая, когда значение ПрименяетсяУСН
	// не заполнено или тип значения отличен от Булево.
	ПрименяетсяУСН = ?(ПрименяетсяУСН = Истина, ПрименяетсяУСН, Ложь);
	
	КодВида = "";
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", КодВида);
	
	Результат.Вставить("ПрименяетсяУСН", ПрименяетсяУСН);
	Результат.Вставить("КодОбъектаНалогообложенияУСН", КодВида);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли