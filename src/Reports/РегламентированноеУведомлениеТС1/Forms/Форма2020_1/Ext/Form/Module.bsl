&НаКлиенте
Перем ОписаниеОповещенияОЗавершенииЗагрузки Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	Параметры.Свойство("ЗаполнитьПриОткрытии", ЗаполнитьПриОткрытии);
	ОТЧ = Новый ОписаниеТипов("Число");
	
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложения.СформироватьСпискиВыбора(ЭтотОбъект, "СпискиВыбора2020_1");
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Объект.Организация = Параметры.Организация;
		ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
		СформироватьДеревоСтраниц();
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		ЗаполнитьНачальныеДанные();
		ЗагрузитьДанныеТорговойТочки(Данные);
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Организация = Параметры.Ключ.Организация;
		ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
		ЗагрузитьДанные(Параметры.Ключ);
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Организация = Параметры.ЗначениеКопирования.Организация;
		ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
		ЗагрузитьДанные(Параметры.ЗначениеКопирования);
	ИначеЕсли Параметры.Свойство("ПредставлениеXML") Тогда 
		Модифицированность = Истина;
		Параметры.Свойство("РегистрацияВНалоговомОргане", Объект.РегистрацияВИФНС);
		Параметры.Свойство("Организация", Объект.Организация);
		ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
		ЗагрузитьИзXMLНаСервере(Новый Структура("Организация, РегистрацияВНалоговомОргане, ПредставлениеXML", 
								Объект.Организация, Объект.РегистрацияВИФНС, Параметры.ПредставлениеXML));
	Иначе
		Параметры.Свойство("Организация", Объект.Организация);
		ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
		Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		СформироватьДеревоСтраниц();
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		ЗаполнитьНачальныеДанные();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	Заголовок = УведомлениеОСпецрежимахНалогообложения.ДополнитьЗаголовокУведомления(Заголовок, Объект.Организация);
	
	ИдДляСвор = УведомлениеОСпецрежимахНалогообложения.ПолучитьИдентификаторыДляСворачивания(ЭтотОбъект);
	СворачиваемыеЭлементы = ПоместитьВоВременноеХранилище(ИдДляСвор);
	РучнойВвод = Ложь;
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	ПараметрыОтчета = Новый Структура("Организация, ДатаПодписи, РегистрацияВИФНС",
		Объект.Организация, Объект.ДатаПодписи, Объект.РегистрацияВИФНС);
	ПоказателиОтчета = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
		
	Если ТипЗнч(ПоказателиОтчета) = Тип("Структура")
		И ПоказателиОтчета.Количество() > 0 Тогда 
			
		Для Каждого КЗ Из ПоказателиОтчета Цикл 
			ЗаполняемыеРеквизиты.Добавить(КЗ.Ключ);
		КонецЦикла;
	Иначе
		Элементы.ФормаЗаполнить.Видимость = Ложь;
	КонецЕсли;
	ЦветФонаАвто = Новый Цвет(230, 240, 220);
	ЦветФонаЗащита = Новый Цвет(255, 255, 255);
	ЦФЖ = Новый Цвет(255, 255, 192);
	УведомлениеОСпецрежимахНалогообложения.СпрятатьКнопкиВыгрузкиОтправкиУНеактуальныхФорм(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеТорговойТочки(Данные)
	НужноОповещатьОСоздании = Истина;
	ИФНС = Неопределено;
	ДанныеТорговойТочки = Неопределено;
	АдресБСП = Неопределено;
	ФайлДанных = Неопределено;
	ИмяФайлДанных = Неопределено;
	Титульная = ДанныеУведомления.Титульная;
	Данные.Свойство("ИФНС", ИФНС);
	Данные.Свойство("ДанныеТорговойТочки", ДанныеТорговойТочки);
	ДанныеТорговойТочки.Свойство("ИмяФайла", ИмяФайлДанных);
	ДанныеТорговойТочки.Свойство("АдресДвДанных", ФайлДанных);
	ДанныеТорговойТочки.Свойство("ТорговаяТочка", ТорговаяТочка);
	ДанныеТорговойТочки.Свойство("ПрТоргСбор", Титульная.ПрТоргСбор);
	
	Если Не ЗначениеЗаполнено(Титульная.ПрТоргСбор) Тогда 
		Титульная.ПрТоргСбор = "1";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИФНС) И ТипЗнч(ИФНС) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда 
		Объект.РегистрацияВИФНС = ИФНС;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.РегистрацияВИФНС) Тогда 
		Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Код,Представитель,КПП,ДокументПредставителя");
	Титульная["КодНО"] = Реквизиты.Код;
	Титульная["КПП"] = Реквизиты.КПП;
	СтруктураСтраницы = ДанныеМногостраничныхРазделов.ОбТоргСбор[0].Значение;
	ЗаполнитьЗначенияСвойств(СтруктураСтраницы, ДанныеТорговойТочки);
	СтруктураСтраницы.ИсчислКв = ОТЧ.ПривестиЗначение(СтруктураСтраницы.СтавкаОбТорг) + 
		ОТЧ.ПривестиЗначение(СтруктураСтраницы.ПлощОбТорг) * ОТЧ.ПривестиЗначение(СтруктураСтраницы.СтавкаКвМ);
	СтруктураСтраницы.СумСборКв = СтруктураСтраницы.ИсчислКв - ОТЧ.ПривестиЗначение(СтруктураСтраницы.СумЛьгот);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РучнойВвод = Ложь;
	Элементы.ФормаРучнойВвод.Пометка = Ложь;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если ЗаполнитьПриОткрытии Тогда 
		Заполнить(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаОповещенияНавигацииПоОшибкам(ЭтотОбъект, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Очистить(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОчиститьУведомление(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОчисткаОтчета() Экспорт
	Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	СформироватьДеревоСтраниц();
	УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
	ЗаполнитьНачальныеДанные();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеДанные() Экспорт
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	ДанныеУведомленияТитульный.Вставить("КодНО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код"));
	Объект.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", Объект.ДатаПодписи);
	
	Если ЭтоЮЛ Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ОГРН,ТелОрганизации";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеУведомленияТитульный.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("ОГРН", СведенияОбОрганизации.ОГРН);
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ИННФЛ,ФИО,ОГРН,ТелДом";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.ФИО);
		ДанныеУведомленияТитульный.Вставить("ОГРНИП", СведенияОбОрганизации.ОГРН);
		ДанныеУведомленияТитульный.Вставить("КПП", "");
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелДом);
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Код,Представитель,КПП,ДокументПредставителя");
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП", Реквизиты.КПП);
	
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ?(ЭтоЮЛ, "4", "2"));
		ДанныеУведомленияТитульный.Вставить("НаимДок", Реквизиты.ДокументПредставителя);
	Иначе
		УстановитьПредставителяПоОрганизации();
		ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ?(ЭтоЮЛ, "3", "1"));
		ДанныеУведомленияТитульный.Вставить("НаимДок", "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц() Экспорт
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная_2020";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2020_1_Титульная";
	
	СтрРег = КорневойУровень.Добавить();
	СтрРег.Наименование = "Сведения об" + символы.ПС + "объектах торговли";
	СтрРег.ИндексКартинки = 1;
	СтрРег.Многостраничность = Истина;
	СтрРег.Многострочность = Истина;
	
	СтрРег = СтрРег.ПолучитьЭлементы().Добавить();
	СтрРег.Наименование = "Стр. 1";
	СтрРег.ИндексКартинки = 1;
	СтрРег.ИмяМакета = "ОбТоргСбор_2020";
	СтрРег.Многостраничность = Истина;
	СтрРег.Многострочность = Ложь;
	СтрРег.УИД = Новый УникальныйИдентификатор;
	СтрРег.ИДНаименования = "ОбТоргСбор";
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтроки(Элемент)
	Если УИДТекущаяСтраница <> Элемент.ТекущиеДанные.УИД Тогда 
		ПредУИД = УИДТекущаяСтраница;
		
		УИДТекущаяСтраница = Элемент.ТекущиеДанные.УИД;
		ТекущееИДНаименования = Элемент.ТекущиеДанные.ИДНаименования;
		Если Не ЗначениеЗаполнено(ТекущееИДНаименования) Тогда 
			ТекущееИДНаименования = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].ИДНаименования;
			УИДТекущаяСтраница = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].УИД;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.Многостраничность Тогда 
			ИмяМакета = УведомлениеОСпецрежимахНалогообложенияКлиент.ПолучитьИмяВыводимогоМакета(Элемент.ТекущиеДанные);
			ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, ПредУИД);
			
			М = Модифицированность;
			ДоступностьОбластейКоррекстировочногоУведомления();
			Модифицированность = М;
		Иначе 
			ПоказатьТекущуюСтраницу(Элемент.ТекущиеДанные.ИмяМакета, ПредУИД);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущуюМногостраничнуюСтраницу(ИмяМакета, ПредУИД)
	ПредставлениеУведомления.Очистить();
	ТекущийМакет = ИмяМакета;
	Макет = Отчеты[Объект.ИмяОтчета].ПолучитьМакет(ИмяМакета);
	ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("УправлениеСтраницами"));
	ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
	СтрДанных = Неопределено;
	Для Каждого Элт Из ДанныеМногостраничныхРазделов[ТекущееИДНаименования] Цикл 
		Если Элт.Значение.УИД = УИДТекущаяСтраница Тогда 
			СтрДанных = Элт.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение Тогда 
			
			СтрДанных.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	НайденнаяСтрока = УведомлениеОСпецрежимахНалогообложения.НайтиСтрокуВДеревеПоУИД(ДеревоСтраниц.ПолучитьЭлементы(), УИДТекущаяСтраница);
	Если НайденнаяСтрока <> Неопределено
		И НайденнаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда 
		
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницу.Текст = "";
		ПредставлениеУведомления.Области.УдалитьСтраницуЗначок.Гиперссылка = Ложь;
		ПредставлениеУведомления.Области.УдалитьСтраницу.Гиперссылка = Ложь;
		Элементы.ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Ложь;
	Иначе
		Элементы.ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ДеревоСтраницКонтекстноеМенюДобавитьСтраницу.Доступность = Истина;
	Если ДанныеУведомления.Титульная.ПрТоргСбор = "1" Тогда
		ПредставлениеУведомления.Области.НомОбПерв.Текст = 
			Формат(ОТЧ.ПривестиЗначение(СтрЗаменить(НайденнаяСтрока.Наименование, "Стр. ", "")) + 1, "ЧЦ=3; ЧВН=; ЧГ=");
	Иначе
		ПредставлениеУведомления.Области.НомОбПерв.Текст = "-";
	КонецЕсли;
	
	Элементы.ДеревоСтраницКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
	Элементы.ДеревоСтраницКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущуюСтраницу(ИмяМакета, ПредУИД)
	УведомлениеОСпецрежимахНалогообложения.ПоказатьТекущуюСтраницу(ЭтотОбъект, ИмяМакета, ПредУИД);
	
	Если ЭтоЮЛ Тогда 
		ПредставлениеУведомления.Области["ОГРНИП"].Защита = Истина;
		ПредставлениеУведомления.Области["ОГРНИП"].ЦветФона = ЦветФонаЗащита;
	Иначе
		ПредставлениеУведомления.Области["ОГРН"].Защита = Истина;
		ПредставлениеУведомления.Области["ОГРН"].ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области["НаимОрг"].Защита = Истина;
		ПредставлениеУведомления.Области["НаимОрг"].ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области["КПП"].Защита = Истина;
		ПредставлениеУведомления.Области["КПП"].ЦветФона = ЦветФонаЗащита;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
	
	Если Область.Имя = "ДАТА_ПОДПИСИ" Тогда
		Объект.ДатаПодписи = Область.Значение;
		УстановитьДанныеПоРегистрацииВИФНС();
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "Аддр_") Тогда
		ОблАдресJSON = ПредставлениеУведомления.Области.Найти("АдресJSON");
		ОблАдресJSON.Значение = "";
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, ОблАдресJSON, Истина);
	ИначеЕсли Область.Имя = "СтавкаОбТорг" Тогда
		Если Область.Значение <> 0 Тогда 
			СтавкаКвМ = ПредставлениеУведомления.Области.Найти("СтавкаКвМ");
			СтавкаКвМ.Значение = 0;
			УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, СтавкаКвМ, Истина);
		КонецЕсли;
		Расчет();
	ИначеЕсли Область.Имя = "СтавкаКвМ" Тогда
		Если Область.Значение <> 0 Тогда 
			СтавкаОбТорг = ПредставлениеУведомления.Области.Найти("СтавкаОбТорг");
			СтавкаОбТорг.Значение = 0;
			УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, СтавкаОбТорг, Истина);
		КонецЕсли;
		Расчет();
	ИначеЕсли Область.Имя = "СумЛьгот" Или Область.Имя = "ПлощОбТорг" Тогда
		Расчет();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Расчет()
	ПлощОбТорг = ПредставлениеУведомления.Области.Найти("ПлощОбТорг");
	СтавкаОбТорг = ПредставлениеУведомления.Области.Найти("СтавкаОбТорг");
	СтавкаКвМ = ПредставлениеУведомления.Области.Найти("СтавкаКвМ");
	ИсчислКв = ПредставлениеУведомления.Области.Найти("ИсчислКв");
	СумЛьгот = ПредставлениеУведомления.Области.Найти("СумЛьгот");
	СумСборКв = ПредставлениеУведомления.Области.Найти("СумСборКв");
	
	ИсчислКв.Значение = ОТЧ.ПривестиЗначение(СтавкаОбТорг.Значение) + 
		ОТЧ.ПривестиЗначение(ПлощОбТорг.Значение) * ОТЧ.ПривестиЗначение(СтавкаКвМ.Значение);
	СумСборКв.Значение = ИсчислКв.Значение - ОТЧ.ПривестиЗначение(СумЛьгот.Значение);
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, ИсчислКв, Истина);
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, СумСборКв, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РегистрацияВИФНС, "Код,Представитель,КПП,ДокументПредставителя");
	ПредставлениеУведомления.Области["КодНО"].Значение = Реквизиты.Код;
	ПредставлениеУведомления.Области["КПП"].Значение = Реквизиты.КПП;
	ДанныеУведомленияТитульный.Вставить("КодНО", ПредставлениеУведомления.Области["КодНО"].Значение);
	ДанныеУведомленияТитульный.Вставить("КПП", ПредставлениеУведомления.Области["КПП"].Значение);

	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УстановитьПредставителяПоФизЛицу(Реквизиты.Представитель);
		ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ?(ЭтоЮЛ, "4", "2");
		ПредставлениеУведомления.Области["НаимДок"].Значение = Реквизиты.ДокументПредставителя;
	Иначе
		УстановитьПредставителяПоОрганизации();
		ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение = ?(ЭтоЮЛ, "3", "1");
		ПредставлениеУведомления.Области["НаимДок"].Значение = "";
	КонецЕсли;
	
	ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение);
	ДанныеУведомленияТитульный.Вставить("НаимДок", ПредставлениеУведомления.Области["НаимДок"].Значение);
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", ПредставлениеУведомления.Области["ДАТА_ПОДПИСИ"].Значение);
	ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение);
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоФизЛицу(Физлицо)
	ЕстьОбласть = (Неопределено <> ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"));
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	Если ЗначениеЗаполнено(Физлицо) Тогда
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			Объект.Организация, 
			ДанныеУведомленияТитульный["КодНО"], 
			ДанныеУведомленияТитульный["КПП"]);
		
		Если ЗначениеЗаполнено(СведенияОПредставителе.НаименованиеОрганизацииПредставителя) Тогда 
			ПодписантСтр = СведенияОПредставителе.ФИОПредставителя;
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			Объект.ПодписантФамилия = СокрЛП(ФИО.Фамилия);
			Объект.ПодписантИмя = СокрЛП(ФИО.Имя);
			Объект.ПодписантОтчество = СокрЛП(ФИО.Отчество);
		Иначе
			ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
			Объект.ПодписантФамилия = СокрЛП(ДанныеПредставителя.Фамилия);
			Объект.ПодписантИмя = СокрЛП(ДанныеПредставителя.Имя);
			Объект.ПодписантОтчество = СокрЛП(ДанныеПредставителя.Отчество);
			ПодписантСтр = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
		КонецЕсли;
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
		Если ЕстьОбласть Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = ПодписантСтр;
		КонецЕсли;
	Иначе
		Объект.ПодписантФамилия = "";
		Объект.ПодписантИмя = "";
		Объект.ПодписантОтчество = "";
		ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", "");
		Если ЕстьОбласть Тогда 
			ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставителяПоОрганизации()
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	ЕстьОбласть = (Неопределено <> ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"));
	
	СтрокаСведений = "ФамилияРук,ИмяРук,ОтчествоРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
	Объект.ПодписантФамилия = СведенияОбОрганизации.ФамилияРук;
	Объект.ПодписантИмя = СведенияОбОрганизации.ИмяРук;
	Объект.ПодписантОтчество = СведенияОбОрганизации.ОтчествоРук;
	
	ПодписантСтр = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
	ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПодписантСтр);
	Если ЕстьОбласть Тогда 
		ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = ПодписантСтр;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоСтраниц", РеквизитФормыВЗначение("ДеревоСтраниц"));
	СтруктураПараметров.Вставить("ДанныеУведомления", ДанныеУведомления);
	СтруктураПараметров.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	СтруктураПараметров.Вставить("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
	СтруктураПараметров.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");
	
	УведомлениеОСпецрежимахНалогообложения.СохранитьНастройкиРучногоВвода(ЭтотОбъект);
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	ОповеститьОСозданииТС1();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	СтруктураПараметров = СсылкаНаДанные.Ссылка.ДанныеУведомления.Получить();
	ДанныеУведомления = СтруктураПараметров.ДанныеУведомления;
	ДанныеМногостраничныхРазделов = СтруктураПараметров.ДанныеМногостраничныхРазделов;
	ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоСтраниц, "ДеревоСтраниц");
	СтруктураПараметров.Свойство("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	СтруктураПараметров.Свойство("ИдентификаторыОбычныхСтраниц", ИдентификаторыОбычныхСтраниц);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	ДобавитьСтраницуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере()
	НовИд = УведомлениеОСпецрежимахНалогообложения.ДобавитьСтраницуУведомления(ЭтотОбъект);
	Если НовИд <> Неопределено Тогда 
		Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда = Неопределено) Экспорт
	УдалениеСтраницы = Истина;
	УдалитьСтраницуНаСервере();
	УдалениеСтраницы = Ложь;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере()
	НовИд = УведомлениеОСпецрежимахНалогообложения.УдалитьСтраницуНаСервере(ЭтотОбъект);
	Если НовИд <> Неопределено Тогда 
		Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу(Неопределено);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
		УведомлениеОСпецрежимахНалогообложенияКлиент.УдалитьСтраницу(ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "ИспользоватьФайл" Тогда
		Область.Значение = Не Область.Значение;
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
		ПредставлениеУведомления.Области.ИспользоватьАкт.Значение = Ложь;
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ИспользоватьАкт, Истина);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		ДоступностьОбластейКоррекстировочногоУведомления();
		Возврат;
	ИначеЕсли Область.Имя = "ИспользоватьАкт" Тогда
		Область.Значение = Не Область.Значение;
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
		ПредставлениеУведомления.Области.ИспользоватьФайл.Значение = Ложь;
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ИспользоватьФайл, Истина);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		ДоступностьОбластейКоррекстировочногоУведомления();
		Возврат;
	ИначеЕсли Область.Имя = "ПодобратьИзКлассификатора" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
		ПараметрыФормы.Вставить("КонтактнаяИнформация", ПредставлениеУведомления.Области.АдресJSON.Значение);
		ПараметрыФормы.Вставить("ЗначенияПолей", ПредставлениеУведомления.Области.АдресJSON.Значение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущееИДНаименования", ТекущееИДНаименования);
		ДополнительныеПараметры.Вставить("УИДТекущаяСтраница", УИДТекущаяСтраница);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтотОбъект;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "КодЛьгот" Тогда 
		СтандартнаяОбработка = Ложь;
		ПараметрыВыборСтруктурнойЕдиницы = Новый Структура("РеквизитыДляРедактирования, ИмяОбласти", Область.Значение, Область.Имя);
		ВыборСтруктурнойЕдиницы = Новый ОписаниеОповещения("ВыборКодаЛьготыЗавершение", ЭтотОбъект);
		ОткрытьФорму("Отчет.РегламентированноеУведомлениеТС1.Форма.ФормаВводаКодаЛьготы", 
			ПараметрыВыборСтруктурнойЕдиницы, ЭтотОбъект, , , , ВыборСтруктурнойЕдиницы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораПодписантаЗавершение", ЭтотОбъект, Неопределено);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораФИО(ЭтотОбъект, СтандартнаяОбработка, "ПредставлениеУведомления",
																	"ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если РучнойВвод Тогда 
		Возврат;
	КонецЕсли;
			
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыбор(ЭтотОбъект, Область, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
	Если Область.Имя = "КодНО" Тогда 
		СтандартнаяОбработка = Ложь;
		ОбработкаКодаНО(Область.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаЛьготыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда 
		Область = ПредставлениеУведомления.Области.Найти(Ответ.ИмяОбласти);
		Область.Значение = Ответ.Результат;
		ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(ПредставлениеУведомления, Область);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.ТекущееИДНаименования, Параметры.УИДТекущаяСтраница);
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресВТабличномДокументе(Результат, ТекущееИДНаименования, УИДТекущаяСтраница)
	УведомлениеОСпецрежимахНалогообложения.ОбновитьАдресВМногостраничнойСтранице(Результат, ЭтотОбъект, ТекущееИДНаименования, УИДТекущаяСтраница)
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьОбластейКоррекстировочногоУведомления()
	Если ПредставлениеУведомления.Области.ИспользоватьАкт.Значение Тогда
		ПредставлениеУведомления.Области.НомАкт.Защита = Ложь;
		ПредставлениеУведомления.Области.ДатаАкт.Защита = Ложь;
		ПредставлениеУведомления.Области.НомАкт.ЦветФона = ЦФЖ;
		ПредставлениеУведомления.Области.ДатаАкт.ЦветФона = ЦФЖ;
		
		ПредставлениеУведомления.Области.НомОбъектУв.Защита = Истина;
		ПредставлениеУведомления.Области.ИдФайлУв.Защита = Истина;
		ПредставлениеУведомления.Области.НомОбъектУв.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.ИдФайлУв.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.НомОбъектУв.Значение = "";
		ПредставлениеУведомления.Области.ИдФайлУв.Значение = "";
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.НомОбъектУв, Истина);
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ИдФайлУв, Истина);
	ИначеЕсли ПредставлениеУведомления.Области.ИспользоватьФайл.Значение Тогда
		ПредставлениеУведомления.Области.НомОбъектУв.Защита = Ложь;
		ПредставлениеУведомления.Области.ИдФайлУв.Защита = Ложь;
		ПредставлениеУведомления.Области.НомОбъектУв.ЦветФона = ЦФЖ;
		ПредставлениеУведомления.Области.ИдФайлУв.ЦветФона = ЦФЖ;
		
		ПредставлениеУведомления.Области.НомАкт.Защита = Истина;
		ПредставлениеУведомления.Области.ДатаАкт.Защита = Истина;
		ПредставлениеУведомления.Области.НомАкт.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.ДатаАкт.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.НомАкт.Значение = "";
		ПредставлениеУведомления.Области.ДатаАкт.Значение = "";
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.НомАкт, Истина);
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ДатаАкт, Истина);
	Иначе
		ПредставлениеУведомления.Области.НомАкт.Защита = Истина;
		ПредставлениеУведомления.Области.ДатаАкт.Защита = Истина;
		ПредставлениеУведомления.Области.НомАкт.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.ДатаАкт.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.НомАкт.Значение = "";
		ПредставлениеУведомления.Области.ДатаАкт.Значение = "";
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.НомАкт, Истина);
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ДатаАкт, Истина);
			
		ПредставлениеУведомления.Области.НомОбъектУв.Защита = Истина;
		ПредставлениеУведомления.Области.ИдФайлУв.Защита = Истина;
		ПредставлениеУведомления.Области.НомОбъектУв.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.ИдФайлУв.ЦветФона = ЦветФонаЗащита;
		ПредставлениеУведомления.Области.НомОбъектУв.Значение = "";
		ПредставлениеУведомления.Области.ИдФайлУв.Значение = "";
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.НомОбъектУв, Истина);
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект,
			ПредставлениеУведомления.Области.ИдФайлУв, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНО(Инфо)
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Инфо);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Инфо = ДополнительныеПараметры.Инфо;
	
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодписантаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Нет Тогда
		Результат.Свойство("Фамилия", Объект.ПодписантФамилия);
		Результат.Свойство("Имя", Объект.ПодписантИмя);
		Результат.Свойство("Отчество", Объект.ПодписантОтчество);
		Представление = СокрЛП(Объект.ПодписантФамилия + " " + Объект.ПодписантИмя + " " + Объект.ПодписантОтчество);
		Область = ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ");
		Область.Значение = Представление;
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	Если Модифицированность Тогда 
		СохранитьДанные();
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УведомлениеОбъект = Объект.Ссылка.ПолучитьОбъект();
		Если УведомлениеОбъект.Заблокирован() Тогда 
			УведомлениеОбъект.Разблокировать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт 
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	Возврат Новый Структура("ТестВыгрузки,КодировкаВыгрузки,Данные,ИмяФайла", 
			Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки, 
			Отчеты[Объект.ИмяОтчета].ПолучитьМакет("TIFF_2020_1"),
			"1110050_5.02000_02.tif");
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	ОповеститьОСозданииТС1();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	ОповеститьОСозданииТС1();
	Закрыть(Неопределено);
КонецПроцедуры

#Область ОтправкаВФНС
////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС
&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ТаблицаОшибок = ПроверитьВыгрузкуНаСервере();
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), ЭтотОбъект, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, , Ложь, СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Процедура ПечатьБРОНаСервере()
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РучнойВвод(Команда)
	РучнойВвод = Не РучнойВвод;
	Элементы.ФормаРучнойВвод.Пометка = РучнойВвод;
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	РазрешитьВыгружатьСОшибками = Не РазрешитьВыгружатьСОшибками;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Доступность = Ложь;
	РезультатВыполнения = ЗаполнитьАвтоНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершениеПослеЗаполнения", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется заполнение по данным информационной базы'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершениеПослеЗаполнения(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	
	Если РезультатЗагрузки = Неопределено
		ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить автозаполнение...'"));
		Возврат;
	КонецЕсли;

	ЗагрузитьПодготовленныеДанные();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Объект.Организация);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ВидУведомления", Объект.ВидУведомления);
	ПараметрыОтчета.Вставить("РегистрацияВИФНС", Объект.РегистрацияВИФНС);
	ПараметрыОтчета.Вставить("ДатаПодписи", Объект.ДатаПодписи);
	Контейнер = Новый Структура();
	
	ОТУИД = Новый ОписаниеТипов("УникальныйИдентификатор");
	Для Каждого КЗ Из ДанныеМногостраничныхРазделов Цикл 
		ДанныеСтраницы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КЗ.Значение[0].Значение);
		ТЗСтр = Новый ТаблицаЗначений;
		Для Каждого Кол Из ДанныеСтраницы Цикл 
			ТЗСтр.Колонки.Добавить(Кол.Ключ, ?(ТипЗнч(Кол.Значение) = Тип("УникальныйИдентификатор"), ОТУИД, Неопределено))
		КонецЦикла;
		Контейнер.Вставить(КЗ.Ключ, ТЗСтр);
	КонецЦикла;
	
	Контейнер.Вставить("РегистрацияВИФНС", Объект.РегистрацияВИФНС);
	Контейнер.Вставить("ДатаПодписи", Объект.ДатаПодписи);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне_Уведомления",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	ПараметрыСтраницы = Неопределено;
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	СтруктураДанных.Контейнер.Свойство("РегистрацияВИФНС", Объект.РегистрацияВИФНС);
	СтруктураДанных.Контейнер.Свойство("ДатаПодписи", Объект.ДатаПодписи);
	ДанныеУведомления.Титульная["КодНО"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
	ДанныеУведомления.Титульная["ДАТА_ПОДПИСИ"] = Объект.ДатаПодписи;
	
	Для Каждого КЗ Из ДанныеМногостраничныхРазделов Цикл 
		КЗ.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого КЗ Из СтруктураДанных.Контейнер.ОбТоргСбор Цикл 
		СтруктураСтраницы = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КЗ);
		ДанныеМногостраничныхРазделов.ОбТоргСбор.Добавить(СтруктураСтраницы);
	КонецЦикла;

	Если СтруктураДанных.Контейнер.ОбТоргСбор.Количество() = 0 Тогда
		ДанныеМногостраничныхРазделов.ОбТоргСбор.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтруктураДанных.Контейнер.ОбТоргСбор.Добавить()));
		ДанныеМногостраничныхРазделов.ОбТоргСбор[0].Значение.УИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	КорневойУровень.Удалить(1);
	КорневойУровень.Удалить(1);
	
	СтрРег = КорневойУровень.Добавить();
	СтрРег.Наименование = "Сведения об" + символы.ПС + "объектах торговли";
	СтрРег.ИндексКартинки = 1;
	СтрРег.Многостраничность = Истина;
	СтрРег.Многострочность = Истина;
	Для Каждого Стр Из ДанныеМногостраничныхРазделов.ОбТоргСбор Цикл 
		СтрРегТр = СтрРег.ПолучитьЭлементы().Добавить();
		СтрРегТр.Наименование = "Стр. " + (ДанныеМногостраничныхРазделов.ОбТоргСбор.Индекс(Стр) + 1);
		СтрРегТр.ИндексКартинки = 1;
		СтрРегТр.ИмяМакета = "ОбТоргСбор_2020";
		СтрРегТр.Многостраничность = Истина;
		СтрРегТр.Многострочность = Ложь;
		СтрРегТр.УИД = Стр.Значение.УИД;
		СтрРегТр.ИДНаименования = "ОбТоргСбор";
	КонецЦикла;
	
	ТекущееИДНаименования = "Титульная";
	ПоказатьТекущуюСтраницу("Титульная_2020", Неопределено);
	Модифицированность = Истина;
	Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзXML(ПараметрыЗагрузкиXML) Экспорт
	ЗагрузитьИзXMLНаСервере(ПараметрыЗагрузкиXML);
	Элементы.ДеревоСтраниц.ТекущаяСтрока = ДеревоСтраниц.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуОсобыхПолей()
	ТаблицаОсобыхПолейВВыгрузке = УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуПутейВВыгрузке();
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведУвед/НомОбъектУв";
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведУвед/ИдФайлУв";
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведАкт/НомАкт";
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведАкт/ДатаАкт";
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/РасчСумСбор/СтавкаОбТорг";
	
	НовСтр = ТаблицаОсобыхПолейВВыгрузке.Добавить();
	НовСтр.ПутьXML = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/РасчСумСбор/СтавкаКвМ";
	
	Возврат ТаблицаОсобыхПолейВВыгрузке;
КонецФункции

&НаСервере
Процедура ЗагрузитьИзXMLНаСервере(ПараметрыЗагрузкиXML)
	ДеревоЗагрузки = УведомлениеОСпецрежимахНалогообложения.СформироватьДеревоЗагрузки(ПараметрыЗагрузкиXML.ПредставлениеXML);
	СхемаВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_1");
	УведомлениеОСпецрежимахНалогообложения.УстановитьОрганизациюПоПараметрамЗагрузки(ЭтотОбъект, ПараметрыЗагрузкиXML);
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	СформироватьДеревоСтраниц();
	УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
	
	МнгСтр = Новый ТаблицаЗначений;
	МнгСтр.Колонки.Добавить("УИД");
	МнгСтр.Колонки.Добавить("Аддр_ЗданиеТип");
	МнгСтр.Колонки.Добавить("Аддр_ЗданиеНомер");
	ДанныеДопСтрок = Новый Структура("МнгСтр", ПоместитьВоВременноеХранилище(МнгСтр));
	Для Каждого Элт Из ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы() Цикл 
		Элт.Многострочность = Истина;
		Элт.МногострочныеЧасти.Добавить("МнгСтр");
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТаблицаОсобыхПолейВВыгрузке", ПолучитьТаблицуОсобыхПолей());
	УведомлениеОСпецрежимахНалогообложения.ЗагрузитьОбычныеСтраницы(ЭтотОбъект, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры);
	УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМногостраничныеСтраницы(ЭтотОбъект, ДеревоЗагрузки, СхемаВыгрузки, ДополнительныеПараметры);
	
	МнгСтр = ПолучитьИзВременногоХранилища(ДанныеДопСтрок.МнгСтр);
	Для Каждого Элт Из ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы() Цикл 
		Элт.Многострочность = Ложь;
		Элт.МногострочныеЧасти.Очистить();
	КонецЦикла;
	
	Для Каждого Стр Из ДанныеМногостраничныхРазделов.ОбТоргСбор Цикл 
		ОбТоргСбор = Стр.Значение;
		
		СтрокиЗданий = МнгСтр.НайтиСтроки(Новый Структура("УИД", ОбТоргСбор.УИД));
		Инд = 0;
		Для Каждого Элт Из СтрокиЗданий Цикл 
			Инд = Инд + 1;
			Если Инд > 3 Тогда 
				Прервать;
			КонецЕсли;
			
			ОбТоргСбор["Аддр_ЗданиеТип" + Инд] = Элт["Аддр_ЗданиеТип"];
			ОбТоргСбор["Аддр_ЗданиеНомер" + Инд] = Элт["Аддр_ЗданиеНомер"];
		КонецЦикла;
	КонецЦикла;
	
	Если Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		ДанныеУведомления.Титульная.Наименование = УведомлениеОСпецрежимахНалогообложения.ПолучитьНаименованиеИПИзВыгрузки(ДеревоЗагрузки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОсобаяОбработкаЭлементов(Путь, СтрЗагружаемоеЗначение, Страница) Экспорт 
	Если Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведУвед/НомОбъектУв"
		Или Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведУвед/ИдФайлУв" Тогда 
		Если ЗначениеЗаполнено(СтрЗагружаемоеЗначение.ЗначениеЭлемента) Тогда 
			Страница.ИспользоватьФайл = Истина;
			Страница.ИспользоватьАкт = Ложь;
		КонецЕсли;
	ИначеЕсли Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведАкт/НомАкт"
		Или Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/СведОбТорг/ИдОбъект/СведАкт/ДатаАкт" Тогда
		Если ЗначениеЗаполнено(СтрЗагружаемоеЗначение.ЗначениеЭлемента) Тогда 
			Страница.ИспользоватьФайл = Ложь;
			Страница.ИспользоватьАкт = Истина;
		КонецЕсли;
	ИначеЕсли Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/РасчСумСбор/СтавкаОбТорг" Тогда 
		Страница.СтавкаОбТорг = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	ИначеЕсли Путь = "Файл/Документ/УчетТоргСбор/ОбТоргСбор/РасчСумСбор/СтавкаКвМ" Тогда 
		Страница.СтавкаКвМ = СтрЗагружаемоеЗначение.ЗначениеЭлемента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаВФормуУведомление(Команда)
	ОписаниеОповещенияОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузитьИзФайлаВФормуУведомлениеЗавершение", ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложенияКлиент.ЗагрузитьИзФайлаУведомление(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПолучитьСворачиваемыеЭлементы()
	СворачиваемыеЭлементы = ПоместитьВоВременноеХранилище(УведомлениеОСпецрежимахНалогообложения.ПолучитьИдентификаторыДляСворачивания(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаВФормуУведомлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	ПолучитьСворачиваемыеЭлементы();
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриОткрытии(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуРанееСданного(Команда)
	ОткрытьФорму("Отчет.РегламентированноеУведомлениеТС1.Форма.ФормаВыбораОтправленных", 
		Новый Структура("Организация", Объект.Организация), 
		ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ЗагрузитьУведомлениеНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеНаКлиенте(Уведомление)
	ОписаниеОшибки = "";
	Результат = ЗагрузитьУведомлениеНаСервере(Уведомление, ОписаниеОшибки);
	Если Не Результат Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьУведомлениеНаСервере(Уведомление, ОписаниеОшибки)
	СведенияПоВсемОтправкам = СведенияПоОтправкам.СведенияПоВсемОтправкам(Уведомление);
	
	Для Каждого ОтправленныеСведения Из СведенияПоВсемОтправкам Цикл
		Если ЗначениеЗаполнено(ОтправленныеСведения.ДатаЗавершения) Тогда
			Идентификатор = ОтправленныеСведения.ИдентификаторОтправки;
			СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(Уведомление, Идентификатор);
			
			Если СведенияПоОтправке.Статус = Перечисления.СтатусыОтправки.Сдан Тогда
				
				СтруктураПолногоИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СведенияПоОтправке.ИмяФайла);
				ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
				АдресДвДанных = СведенияПоОтправке.АдресДвДанных;
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ОписаниеОшибки = "Данное уведомление не было сдано в налоговую инспекцию";
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Не ЗагрузитьОтчет(ОписаниеОшибки, АдресДвДанных, ИмяФайла) Тогда 
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Не удалось распознать документ";
		Возврат Ложь;
	КонецПопытки;
	
	ДанныеУведомления.Титульная.ПрТоргСбор = "2";
	Обл = ПредставлениеУведомления.Области.Найти("ПрТоргСбор");
	Если Обл <> Неопределено Тогда 
		Обл.Значение = "2";
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьДочернийУзелПоИмени(Узел, ИмяУзла)
	Если Узел = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Элт Из Узел.ДочерниеУзлы Цикл 
		Если Элт.ИмяУзла = ИмяУзла Тогда 
			Возврат Элт;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеАтрибутаПоИмени(Узел, ИмяУзла)
	Если Узел = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Аттр = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяУзла);
	Если Аттр <> Неопределено Тогда 
		Возврат Аттр.Значение;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьТекстовоеЗначениеДочернегоЭлемента(Узел, ИмяУзла)
	Дочерний = ПолучитьДочернийУзелПоИмени(Узел, ИмяУзла);
	Если Дочерний = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Возврат Дочерний.ТекстовоеСодержимое;
КонецФункции

&НаСервере
Функция ЗагрузитьОтчетФормата501(Ошибка, ДокументDOM, ИдФайл)
	ТекУзел = Неопределено;
	Для Каждого Элт Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если Элт.ИмяУзла = "УчетТоргСбор" Тогда 
			ТекУзел = Элт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекУзел = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоТорговыхТочек = 0;
	Для Каждого Элт Из ТекУзел.ДочерниеУзлы Цикл 
		Если Элт.ИмяУзла = "ОбТоргСбор" Тогда 
			КоличествоТорговыхТочек = КоличествоТорговыхТочек + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоТорговыхТочек = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Пока ДанныеМногостраничныхРазделов.ОбТоргСбор.Количество() > 1 Цикл 
		ДанныеМногостраничныхРазделов.ОбТоргСбор.Удалить(0);
		ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы().Удалить(0);
	КонецЦикла;
	
	Инд = 0;
	УИДТекущаяСтраница = ДанныеМногостраничныхРазделов.ОбТоргСбор[0].Значение.УИД;
	Для Каждого Элт Из ТекУзел.ДочерниеУзлы Цикл
		Если Не Элт.ИмяУзла = "ОбТоргСбор" Тогда 
			Продолжить;
		КонецЕсли;
		ДобавитьСтраницуНаСервере();
		
		Инд = Инд + 1;
		ОбТоргСбор = ДанныеМногостраничныхРазделов.ОбТоргСбор[Инд].Значение;
		СведВидПД = ПолучитьДочернийУзелПоИмени(Элт, "СведВидПД");
		ОбТоргСбор.ДатаВозникИсп = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(
			ПолучитьЗначениеАтрибутаПоИмени(СведВидПД, "ДатаВозникИсп"));
		ОбТоргСбор.КодВидТорг = ПолучитьЗначениеАтрибутаПоИмени(СведВидПД, "КодВидТорг");
		
		СведОбТорг = ПолучитьДочернийУзелПоИмени(Элт, "СведОбТорг");
		ОбТоргСбор.ОКТМО = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ОКТМО");
		ОбТоргСбор.КодВидОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КодВидОб");
		ОбТоргСбор.НаимТоргОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "НаимТоргОб");
		ОбТоргСбор.ОснПользОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ОснПользОб");
		ОбТоргСбор.НомерРазр = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "НомерРазр");
		ОбТоргСбор.КадастрНомЗд = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастрНомЗд");
		ОбТоргСбор.КадастНомПом = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастНомПом");
		ОбТоргСбор.КадастНомЗУ = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастНомЗУ");
		ОбТоргСбор.ПлощОбТорг = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ПлощОбТорг");
		Если ПолучитьДочернийУзелПоИмени(СведОбТорг, "ИдОбъект") <> Неопределено Тогда 
			СведУвед = ПолучитьДочернийУзелПоИмени(ПолучитьДочернийУзелПоИмени(СведОбТорг, "ИдОбъект"), "СведУвед");
			ОбТоргСбор.НомОбъектУв = ПолучитьЗначениеАтрибутаПоИмени(СведУвед, "НомОбъектУв");
		Иначе
			ОбТоргСбор.НомОбъектУв = ПолучитьТекстовоеЗначениеДочернегоЭлемента(СведОбТорг, "НомОбъект");
		КонецЕсли;
		ОбТоргСбор.ИдФайлУв = ИдФайл;
		ОбТоргСбор.ИспользоватьФайл = Истина;
		
		РасчСумСбор = ПолучитьДочернийУзелПоИмени(Элт, "РасчСумСбор");
		ОбТоргСбор.ИсчислКв = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "ИсчислКв");
		ОбТоргСбор.СумЛьгот = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "СумЛьгот");
		ОбТоргСбор.КодЛьгот = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "КодЛьгот");
		ОбТоргСбор.СумСборКв = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "СумСборКв");
		ОбТоргСбор.СтавкаОбТорг = ПолучитьТекстовоеЗначениеДочернегоЭлемента(РасчСумСбор, "СтавкаОбТорг");
		ОбТоргСбор.СтавкаКвМ = ПолучитьТекстовоеЗначениеДочернегоЭлемента(РасчСумСбор, "СтавкаКвМ");
	КонецЦикла;
	
	ДанныеМногостраничныхРазделов.ОбТоргСбор.Удалить(0);
	ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы().Удалить(0);
	Инд = 0;
	Для Каждого Элт Из ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы() Цикл 
		Инд = Инд + 1;
		Элт.Наименование = "Стр. " + Формат(Инд, "ЧГ=");
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗагрузитьОтчетФормата502(Ошибка, ДокументDOM, ИдФайл)
	ТекУзел = Неопределено;
	Для Каждого Элт Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если Элт.ИмяУзла = "УчетТоргСбор" Тогда 
			ТекУзел = Элт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекУзел = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоТорговыхТочек = 0;
	Для Каждого Элт Из ТекУзел.ДочерниеУзлы Цикл 
		Если Элт.ИмяУзла = "ОбТоргСбор" Тогда 
			КоличествоТорговыхТочек = КоличествоТорговыхТочек + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоТорговыхТочек = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Пока ДанныеМногостраничныхРазделов.ОбТоргСбор.Количество() > 1 Цикл 
		ДанныеМногостраничныхРазделов.ОбТоргСбор.Удалить(0);
		ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы().Удалить(0);
	КонецЦикла;
	
	Инд = 0;
	УИДТекущаяСтраница = ДанныеМногостраничныхРазделов.ОбТоргСбор[0].Значение.УИД;
	Для Каждого Элт Из ТекУзел.ДочерниеУзлы Цикл
		Если Не Элт.ИмяУзла = "ОбТоргСбор" Тогда 
			Продолжить;
		КонецЕсли;
		ДобавитьСтраницуНаСервере();
		
		Инд = Инд + 1;
		ОбТоргСбор = ДанныеМногостраничныхРазделов.ОбТоргСбор[Инд].Значение;
		ИнформАкт = ПолучитьДочернийУзелПоИмени(Элт, "ИнформАкт");
		ОбТоргСбор.ДатаАктОбщ = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(
			ПолучитьЗначениеАтрибутаПоИмени(ИнформАкт, "ДатаАкт"));
		ОбТоргСбор.НомерАктОбщ = ПолучитьЗначениеАтрибутаПоИмени(ИнформАкт, "НомерАкт");
		
		СведВидПД = ПолучитьДочернийУзелПоИмени(Элт, "СведВидПД");
		ОбТоргСбор.ДатаВозникИсп = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(
			ПолучитьЗначениеАтрибутаПоИмени(СведВидПД, "ДатаВозникИсп"));
		ОбТоргСбор.КодВидТорг = ПолучитьЗначениеАтрибутаПоИмени(СведВидПД, "КодВидТорг");
		
		СведОбТорг = ПолучитьДочернийУзелПоИмени(Элт, "СведОбТорг");
		ОбТоргСбор.ОКТМО = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ОКТМО");
		ОбТоргСбор.КодВидОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КодВидОб");
		ОбТоргСбор.НаимТоргОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "НаимТоргОб");
		ОбТоргСбор.ОснПользОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ОснПользОб");
		ОбТоргСбор.ПризИспОб = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ПризИспОб");
		ОбТоргСбор.НомерРазр = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "НомерРазр");
		ОбТоргСбор.КадастрНомЗд = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастрНомЗд");
		ОбТоргСбор.КадастНомПом = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастНомПом");
		ОбТоргСбор.КадастНомЗУ = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "КадастНомЗУ");
		ОбТоргСбор.ПлощОбТорг = ПолучитьЗначениеАтрибутаПоИмени(СведОбТорг, "ПлощОбТорг");
		Если ПолучитьДочернийУзелПоИмени(СведОбТорг, "ИдОбъект") <> Неопределено Тогда 
			СведУвед = ПолучитьДочернийУзелПоИмени(ПолучитьДочернийУзелПоИмени(СведОбТорг, "ИдОбъект"), "СведУвед");
			ОбТоргСбор.НомОбъектУв = ПолучитьЗначениеАтрибутаПоИмени(СведУвед, "НомОбъектУв");
		Иначе
			ОбТоргСбор.НомОбъектУв = ПолучитьТекстовоеЗначениеДочернегоЭлемента(СведОбТорг, "НомОбъект");
		КонецЕсли;
		ОбТоргСбор.ИдФайлУв = ИдФайл;
		ОбТоргСбор.ИспользоватьФайл = Истина;
		
		РасчСумСбор = ПолучитьДочернийУзелПоИмени(Элт, "РасчСумСбор");
		ОбТоргСбор.ИсчислКв = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "ИсчислКв");
		ОбТоргСбор.СумЛьгот = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "СумЛьгот");
		ОбТоргСбор.КодЛьгот = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "КодЛьгот");
		ОбТоргСбор.СумСборКв = ПолучитьЗначениеАтрибутаПоИмени(РасчСумСбор, "СумСборКв");
		ОбТоргСбор.СтавкаОбТорг = ПолучитьТекстовоеЗначениеДочернегоЭлемента(РасчСумСбор, "СтавкаОбТорг");
		ОбТоргСбор.СтавкаКвМ = ПолучитьТекстовоеЗначениеДочернегоЭлемента(РасчСумСбор, "СтавкаКвМ");
		
		АдрОбТорг = ПолучитьДочернийУзелПоИмени(СведОбТорг, "АдрОбТорг");
		ОбТоргСбор.Аддр_ИдНом = ПолучитьЗначениеАтрибутаПоИмени(АдрОбТорг, "ИдНом");
		ОбТоргСбор.Аддр_Регион = ПолучитьТекстовоеЗначениеДочернегоЭлемента(АдрОбТорг, "Регион");
		ОбТоргСбор.Аддр_ЗемелУчасток = ПолучитьТекстовоеЗначениеДочернегоЭлемента(АдрОбТорг, "ЗемелУчасток");
		
		МуниципРайон = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "МуниципРайон");
		ОбТоргСбор.Аддр_МуниципРайонВидКод = ПолучитьЗначениеАтрибутаПоИмени(МуниципРайон, "ВидКод");
		ОбТоргСбор.Аддр_МуниципРайонНаим = ПолучитьЗначениеАтрибутаПоИмени(МуниципРайон, "Наим");
		
		ГородСелПоселен = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "ГородСелПоселен");
		ОбТоргСбор.Аддр_ГородСелПоселенВидКод = ПолучитьЗначениеАтрибутаПоИмени(ГородСелПоселен, "ВидКод");
		ОбТоргСбор.Аддр_ГородСелПоселенНаим = ПолучитьЗначениеАтрибутаПоИмени(ГородСелПоселен, "Наим");
		
		НаселенПункт = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "НаселенПункт");
		ОбТоргСбор.Аддр_НаселенПунВид = ПолучитьЗначениеАтрибутаПоИмени(НаселенПункт, "Вид");
		ОбТоргСбор.Аддр_НаселенПунктНаим = ПолучитьЗначениеАтрибутаПоИмени(НаселенПункт, "Наим");
		
		ЭлПланСтруктур = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "ЭлПланСтруктур");
		ОбТоргСбор.Аддр_ЭлПланСтруктурТип = ПолучитьЗначениеАтрибутаПоИмени(ЭлПланСтруктур, "Тип");
		ОбТоргСбор.Аддр_ЭлПланСтруктурНаим = ПолучитьЗначениеАтрибутаПоИмени(ЭлПланСтруктур, "Наим");
		
		ЭлУлДорСети = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "ЭлУлДорСети");
		ОбТоргСбор.Аддр_ЭлУлДорСетиТип = ПолучитьЗначениеАтрибутаПоИмени(ЭлУлДорСети, "Тип");
		ОбТоргСбор.Аддр_ЭлУлДорСетиНаим = ПолучитьЗначениеАтрибутаПоИмени(ЭлУлДорСети, "Наим");
		
		ПомещЗдания = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "ПомещЗдания");
		ОбТоргСбор.Аддр_ПомещЗданияТип = ПолучитьЗначениеАтрибутаПоИмени(ПомещЗдания, "Тип");
		ОбТоргСбор.Аддр_ПомещЗданияНомер = ПолучитьЗначениеАтрибутаПоИмени(ПомещЗдания, "Номер");
		
		ПомещКвартиры = ПолучитьДочернийУзелПоИмени(АдрОбТорг, "ПомещКвартиры");
		ОбТоргСбор.Аддр_ПомещКвартирыТип = ПолучитьЗначениеАтрибутаПоИмени(ПомещКвартиры, "Тип");
		ОбТоргСбор.Аддр_ПомещКвартирыНомер = ПолучитьЗначениеАтрибутаПоИмени(ПомещКвартиры, "Номер");
		
		Ит = 0;
		Для Каждого УзелЗдание Из АдрОбТорг.ДочерниеУзлы Цикл 
			Если УзелЗдание.ИмяУзла = "Здание" Тогда 
				Ит = Ит + 1;
				Если Ит > 3 Тогда 
					Прервать;
				КонецЕсли;
				ОбТоргСбор["Аддр_ЗданиеТип" + Ит] = ПолучитьЗначениеАтрибутаПоИмени(УзелЗдание, "Тип");
				ОбТоргСбор["Аддр_ЗданиеНомер" + Ит] = ПолучитьЗначениеАтрибутаПоИмени(УзелЗдание, "Номер");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеМногостраничныхРазделов.ОбТоргСбор.Удалить(0);
	ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы().Удалить(0);
	Инд = 0;
	Для Каждого Элт Из ДеревоСтраниц.ПолучитьЭлементы()[1].ПолучитьЭлементы() Цикл 
		Инд = Инд + 1;
		Элт.Наименование = "Стр. " + Формат(Инд, "ЧГ=");
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗагрузитьОтчет(Ошибка, ВХ, ИмяФайлаКороткое)
	ФайлСрвДанные = ПолучитьИзВременногоХранилища(ВХ);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ФайлСрвДанные.Записать(ИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Исключение
		ЧтениеXML.УстановитьСтроку(ИмяФайла);
	КонецПопытки;
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ВерсФорм = ДокументDOM.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("ВерсФорм").Значение;
	ИдФайл = ДокументDOM.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("ИдФайл").Значение;
	КНД = ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("КНД").Значение;
	Если КНД <> "1110050" 
		Или Не ЗначениеЗаполнено(ИдФайл)
		Или (ВерсФорм <> "5.01" И ВерсФорм <> "5.02") Тогда 
		Ошибка = "Неверный формат документа";
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	Если ВерсФорм = "5.01" Тогда
		Результат = ЗагрузитьОтчетФормата501(Ошибка, ДокументDOM, ИдФайл);
	Иначе
		Результат = ЗагрузитьОтчетФормата502(Ошибка, ДокументDOM, ИдФайл);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации("Не удалось удалить файл "+ИмяФайла, УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданииТС1()
	Если НужноОповещатьОСоздании Тогда
		Оповестить("Создание_ФормаТС1", ТорговаяТочка, Объект.Ссылка);
		НужноОповещатьОСоздании = Ложь;
	КонецЕсли;
КонецПроцедуры