#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

// Обработчик контекстного открытия отчета
//
// Параметры:
//  Объект		 - Произвольный	 - Источник контекстного открытия отчета
//  ПолеСвязи	 - Строка		 - Поле из настроек связи контекстного открытия
//  Отборы		 - Структура	 - Изменяемая структура отборов отчета
//  Отказ		 - Булево		 - Признак отмены открытия отчета
//
Процедура ПриКонтекстномОткрытии(Объект, ПолеСвязи, Отборы, Отказ) Экспорт
	
	Если ПолеСвязи = "Номенклатура" Тогда
		Отборы.Вставить("Номенклатура", Объект);
		Если ЗначениеЗаполнено(Объект) И Объект.ИспользоватьХарактеристики Тогда
			Характеристика = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(Объект);
		Иначе
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Отборы.Вставить("Характеристика", Характеристика);
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(Объект, Характеристика);
		Иначе
			Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(Номенклатура);
		КонецЕсли;
		Отборы.Вставить("Спецификация", Спецификация);
		Отборы.Вставить("Количество", 1);
	КонецЕсли;
	
	Если ПолеСвязи = "Спецификация" Тогда
		Отборы.Вставить("Номенклатура", Объект.Владелец);
		Отборы.Вставить("Характеристика", Объект.ХарактеристикаПродукции);
		Отборы.Вставить("Спецификация", Объект);
		Отборы.Вставить("Количество", 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Характеристика"));
		Если ТипЗнч(Параметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Параметр.ИдентификаторПользовательскойНастройки = "";	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	ПодготовитьВнешниеНаборыДанных(КомпоновщикНастроек.Настройки.ДополнительныеСвойства);
	МодифицироватьНастройкиПередФормированием();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		УдалитьПолеВСтруктуреКД(КомпоновщикНастроек.Настройки.Структура, Новый ПолеКомпоновкиДанных("Характеристика"));	
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		УдалитьПолеВСтруктуреКД(КомпоновщикНастроек.Настройки.Структура, Новый ПолеКомпоновкиДанных("Этап"));	
	КонецЕсли;
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Основной"].Теги = НСТР("ru = 'Производство,Продукция,Изделия'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "Спецификация", "Справочник.Спецификации", , Истина);
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "Номенклатура", "Справочник.Номенклатура", , Истина);
	
КонецПроцедуры

Процедура ПодготовитьВнешниеНаборыДанных(ДополнительныеСвойства)
	
	Номенклатура = ЗначениеПараметра("Номенклатура");
	Характеристика = ЗначениеПараметра("Характеристика");
	Спецификация = ЗначениеПараметра("Спецификация");
	Количество = ЗначениеПараметра("Количество");
	Период = ЗначениеПараметра("Период");
	Если ТипЗнч(Период) = Тип("СтандартнаяДатаНачала") Тогда
		Период = Период.Дата; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли; 
	ВидЦен = ЗначениеПараметра("ВидЦен");
	
	СтруктураСостава = СформироватьСтруктуруСостава();
	СтруктураСостава.Номенклатура		= Номенклатура;
	СтруктураСостава.Характеристика		= Характеристика;
	СтруктураСостава.ЕдиницаИзмерения	= Номенклатура.ЕдиницаИзмерения;
	СтруктураСостава.Количество			= Количество;
	СтруктураСостава.Спецификация		= Спецификация;
	СтруктураСостава.ДатаОбработки		= Период;
	СтруктураСостава.ВидЦен				= ВидЦен;
	СтруктураСостава.Уровень			= 0;
	СтруктураСостава.УчетнаяЦена		= 0;
	СтруктураСостава.Стоимость			= 0;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3));
	
	ТаблицаСостава = Новый ТаблицаЗначений;
	
	ТаблицаСостава.Колонки.Добавить("Этап");
	ТаблицаСостава.Колонки.Добавить("Тип");
	ТаблицаСостава.Колонки.Добавить("Номенклатура");
	ТаблицаСостава.Колонки.Добавить("Характеристика");
	ТаблицаСостава.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаСостава.Колонки.Добавить("Количество", ОписаниеТипаЧисло);
	ТаблицаСостава.Колонки.Добавить("Уровень");
	ТаблицаСостава.Колонки.Добавить("Узел");
	ТаблицаСостава.Колонки.Добавить("УчетнаяЦена", ОписаниеТипаЧисло);
	ТаблицаСостава.Колонки.Добавить("Стоимость", ОписаниеТипаЧисло);
	
	Разузлование(СтруктураСостава, ТаблицаСостава);
	
	ТипИдентификатор = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСостава.Колонки.Добавить("ИдентификаторСтроки", ТипИдентификатор);
	ТаблицаСостава.Колонки.Добавить("ИдентификаторРодителя", ТипИдентификатор);
	ТаблицаСостава.Колонки.Добавить("Собирается", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДанных = ТаблицаСостава.СкопироватьКолонки();
	ТаблицаИерархии = ТаблицаСостава.СкопироватьКолонки();
	ЗаполнитьТаблицуИерархии(ТаблицаДанных, ТаблицаИерархии, ТаблицаСостава);
	ТаблицаДанных.Сортировать("ИдентификаторРодителя, ИдентификаторСтроки");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ТаблицаДанных);
	ВнешниеНаборыДанных.Вставить("ТаблицаИерархии", ТаблицаИерархии);
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВнешниеНаборыДанных", ПоместитьВоВременноеХранилище(ВнешниеНаборыДанных));	
	
КонецПроцедуры

Функция ЗначениеПараметра(ИмяПараметра, НастройкиСКД = Неопределено)
	
	Если НастройкиСКД=Неопределено Тогда
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		Параметр = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли; 
	Если Параметр<>Неопределено И Параметр.Использование Тогда
		Возврат Параметр.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ЗаполнитьТаблицуИерархии(ТаблицаДанных, ТаблицаИерархии, ТаблицаИсточник, БезИерархии = Ложь)
	
	СтекРодителей = Новый Массив;
	ТекущийУровень = 0;
	ПредыдущаяСтрока = Неопределено;
	Идентификатор = ТаблицаИерархии.Количество();
	Для каждого СтрокаСостава Из ТаблицаИсточник Цикл
		Если СтрокаСостава.Тип=Перечисления.ТипыНоменклатуры.Операция Тогда
			Продолжить;
		КонецЕсли;
		Идентификатор = Идентификатор + 1;
		СтрокаСостава.ИдентификаторСтроки = ?(ПредыдущаяСтрока=Неопределено, 1, Идентификатор);
		СтрокаСостава.Тип = НСтр("ru = 'Материалы'");
		Если ПредыдущаяСтрока=Неопределено Тогда
			// Корень
			ПредыдущаяСтрока = СтрокаСостава;
			Продолжить;
		ИначеЕсли БезИерархии Тогда
			СтрокаСостава.ИдентификаторРодителя = 1;
		ИначеЕсли ТекущийУровень=СтрокаСостава.Уровень Тогда
			СтрокаСостава.ИдентификаторРодителя = ПредыдущаяСтрока.ИдентификаторРодителя;
		ИначеЕсли ТекущийУровень<СтрокаСостава.Уровень Тогда
			СтрокаСостава.ИдентификаторРодителя = ПредыдущаяСтрока.ИдентификаторСтроки;
			ПредыдущаяСтрока.Собирается = Истина;
			Для ии = ТекущийУровень По СтрокаСостава.Уровень-1 Цикл
				СтекРодителей.Добавить(ПредыдущаяСтрока);
			КонецЦикла; 
			ТекущийУровень = СтрокаСостава.Уровень;
		ИначеЕсли ТекущийУровень>СтрокаСостава.Уровень Тогда
			Для ии = СтрокаСостава.Уровень По ТекущийУровень-1 Цикл
				СтекРодителей.Удалить(СтекРодителей.Количество()-1);
			КонецЦикла; 
			СтрокаСостава.ИдентификаторРодителя = СтекРодителей[СтекРодителей.Количество()-1].ИдентификаторСтроки;
			ТекущийУровень = СтрокаСостава.Уровень;
		КонецЕсли;
		Если ПредыдущаяСтрока.ИдентификаторСтроки>1 ИЛИ ТаблицаИерархии.Количество()=0 Тогда
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредыдущаяСтрока);
			НоваяСтрокаИерархии = ТаблицаИерархии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИерархии, ПредыдущаяСтрока);
		КонецЕсли; 
		ПредыдущаяСтрока = СтрокаСостава;
	КонецЦикла;
	Если ПредыдущаяСтрока<>Неопределено И ПредыдущаяСтрока.Тип<>Перечисления.ТипыНоменклатуры.Операция Тогда
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредыдущаяСтрока);
		НоваяСтрокаИерархии = ТаблицаИерархии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИерархии, ПредыдущаяСтрока);
	КонецЕсли;
	
	// Операции
	Для каждого СтрокаСостава Из ТаблицаИсточник Цикл
		Если СтрокаСостава.Тип<>Перечисления.ТипыНоменклатуры.Операция Тогда
			Продолжить;
		КонецЕсли; 
		Идентификатор = Идентификатор + 1;
		СтрокаСостава.ИдентификаторСтроки = Идентификатор;
		СтрокаСостава.ИдентификаторРодителя = 0;
		СтрокаСостава.Тип = НСтр("ru = 'Тех. операции'");
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
		НоваяСтрокаИерархии = ТаблицаИерархии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИерархии, СтрокаСостава);
	КонецЦикла; 
	
КонецПроцедуры

Процедура МодифицироватьНастройкиПередФормированием()
	
	// Исключение элементов-изделий
	ПолеПоиска = Новый ПолеКомпоновкиДанных("Собирается");
	ЭлементОтбора = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(ПолеПоиска, КомпоновщикНастроек.Настройки.Отбор.Элементы);
	Если ЭлементОтбора=Неопределено Тогда
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеПоиска;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли; 
	
	// Отключение видимости служебных колонок
	ПолеПоиска = Новый ПолеКомпоновкиДанных("ИдентификаторСтроки");
	ЭлементСтруктуры = ОтчетыУНФКлиентСервер.НайтиПолеРекурсивно(ПолеПоиска, КомпоновщикНастроек.Настройки.Структура);
	Если ЭлементСтруктуры<>Неопределено Тогда
		ЭлементСтруктуры.Выбор.Элементы.Очистить();
		Для каждого ВыбранноеПоле Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если ВыбранноеПоле.Поле=ПолеПоиска Тогда
				Продолжить;
			КонецЕсли; 
			ВыбранныйЭлемент = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныйЭлемент.Поле = ВыбранноеПоле.Поле;
			ВыбранныйЭлемент.Использование = Истина;
		КонецЦикла;
		Для каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
			Если ТипЗнч(ВыбранноеПоле)=Тип("АвтоВыбранноеПолеКомпоновкиДанных") ИЛИ ВыбранноеПоле.Поле=ПолеПоиска Тогда
				Продолжить;
			КонецЕсли; 
			ВыбранныйЭлемент = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныйЭлемент.Поле = ВыбранноеПоле.Поле;
			ВыбранныйЭлемент.Использование = Истина;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьПолеВСтруктуреКД(Структура, Поле)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") 
					И ПолеГруппировки.Поле = Поле Тогда
					ЭлементСтруктуры.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Структура, Поле);
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Выбор.Элементы, Поле);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Строки, Поле);
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Колонки, Поле);
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Выбор.Элементы, Поле);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Серии, Поле);
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Точки, Поле);
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Выбор.Элементы, Поле);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Поле = Поле Тогда
				Структура.Удалить(ЭлементСтруктуры);
				Прервать;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Поле = Поле Тогда
				Структура.Удалить(ЭлементСтруктуры);
				Прервать;
			КонецЕсли;
			УдалитьПолеВСтруктуреКД(ЭлементСтруктуры.Элементы, Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРазузлования

// Формирование структуры с определенным составом полей для процедуры 
// разузлования.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Структура - структура с определенным составом полей для процедуры 
//              разузлования.
//
Функция СформироватьСтруктуруСостава()
	
	Структура = Новый Структура();
	
	// Поля описания текущего узла.
	Структура.Вставить("Этап");
	Структура.Вставить("Тип");
	Структура.Вставить("Номенклатура");
	Структура.Вставить("Характеристика");
	Структура.Вставить("ЕдиницаИзмерения");
	Структура.Вставить("Количество");
	Структура.Вставить("УчетнаяЦена");
	Структура.Вставить("Стоимость");
	Структура.Вставить("КоличествоПродукции");
	Структура.Вставить("Спецификация");
	
	Структура.Вставить("ТипСтрокиСостава");
	
	// Вспомогательные данные.
	Структура.Вставить("Объект");
	Структура.Вставить("ДатаОбработки", '00010101');
	Структура.Вставить("Уровень");
	Структура.Вставить("ВидЦен");
	
	Возврат Структура;
	
КонецФункции // обСформироватьСтруктуруСостава()

Функция ПолучитьСоставСпецификации(СтруктураСостава)
	
	ПоЗакупочнымЦенам = ЗначениеПараметра("ПоЗакупочнымЦенам") = "ПоЗакупочнымЦенам";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоЗакупочнымЦенам", ПоЗакупочнымЦенам);
	Запрос.УстановитьПараметр("ВидЦен", ?(ПоЗакупочнымЦенам, Справочники.ВидыЦен.Учетная, СтруктураСостава.ВидЦен));
	Запрос.УстановитьПараметр("Спецификация", СтруктураСостава.Спецификация);
	Запрос.УстановитьПараметр("Количество", СтруктураСостава.Количество);
	Запрос.УстановитьПараметр("ДатаОбработки", СтруктураСостава.ДатаОбработки);
	Запрос.УстановитьПараметр("ТаблицаПорядковОкругления", ЦенообразованиеСервер.ТаблицаПорядковОкругления());
	
	ЭлементыЗапроса = Новый Массив;
	ЭлементыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаПорядковОкругления.Порядок КАК Порядок,
	|	ТаблицаПорядковОкругления.Значение КАК Значение
	|ПОМЕСТИТЬ ТаблицаПорядковОкругления
	|ИЗ
	|	&ТаблицаПорядковОкругления КАК ТаблицаПорядковОкругления");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации")
		И ЗначениеЗаполнено(СтруктураСостава.Спецификация)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураСостава.Спецификация, "ЭтоШаблон") Тогда
		СпецификацияОбъект = СтруктураСостава.Спецификация.ПолучитьОбъект();
		Если ЗначениеЗаполнено(СтруктураСостава.Характеристика) Тогда
			СпецификацияОбъект.ХарактеристикаПродукции = СтруктураСостава.Характеристика;
		КонецЕсли; 
		Отказ = Ложь;
		ПроизводствоФормулыСервер.ЗаполнитьСпецификацию(СпецификацияОбъект, Отказ);
		Если Отказ Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Ошибка формирования: не удалось рассчитать состав параметрической спецификации %1.'"), СтруктураСостава.Спецификация);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Запрос.УстановитьПараметр("Состав", СпецификацияОбъект.Состав.Выгрузить());
		Запрос.УстановитьПараметр("Операции", СпецификацияОбъект.Операции.Выгрузить());
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
		|	СпецификацииСостав.Этап КАК Этап,
		|	СпецификацииСостав.Номенклатура КАК Номенклатура,
		|	СпецификацииСостав.Характеристика КАК Характеристика,
		|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпецификацииСостав.Спецификация КАК Спецификация,
		|	СпецификацииСостав.Количество КАК Количество,
		|	СпецификацииСостав.КоличествоПродукции КАК КоличествоПродукции
		|ПОМЕСТИТЬ СоставПоШаблону
		|ИЗ
		|	&Состав КАК СпецификацииСостав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецификацииОперации.Этап КАК Этап,
		|	СпецификацииОперации.Операция КАК Операция,
		|	СпецификацииОперации.Количество КАК Количество,
		|	СпецификацииОперации.НормаВремени КАК НормаВремени,
		|	СпецификацииОперации.КоличествоПродукции КАК КоличествоПродукции
		|ПОМЕСТИТЬ ОперацииПоШаблону
		|ИЗ
		|	&Операции КАК СпецификацииОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставПоШаблону.ТипСтрокиСостава КАК ТипСтрокиСостава,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас) КАК Тип,
		|	СоставПоШаблону.Этап КАК Этап,
		|	СоставПоШаблону.Номенклатура КАК Номенклатура,
		|	СоставПоШаблону.Характеристика КАК Характеристика,
		|	СоставПоШаблону.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СоставПоШаблону.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СоставПоШаблону.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Коэффициент,
		|	СоставПоШаблону.Спецификация КАК Спецификация,
		|	СоставПоШаблону.Количество * &Количество КАК Количество,
		|	СоставПоШаблону.КоличествоПродукции КАК КоличествоПродукции
		|ПОМЕСТИТЬ Состав
		|ИЗ
		|	СоставПоШаблону КАК СоставПоШаблону
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция),
		|	ОперацииПоШаблону.Этап,
		|	ОперацииПоШаблону.Операция,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ОперацииПоШаблону.НормаВремени,
		|	1,
		|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ОперацииПоШаблону.Операция КАК Справочник.Номенклатура).ФиксированнаяСтоимость
		|			ТОГДА ВЫБОР
		|					КОГДА ОперацииПоШаблону.Количество = 0
		|						ТОГДА 1
		|					ИНАЧЕ ОперацииПоШаблону.Количество
		|				КОНЕЦ
		|		ИНАЧЕ ОперацииПоШаблону.НормаВремени
		|	КОНЕЦ * &Количество,
		|	ОперацииПоШаблону.КоличествоПродукции
		|ИЗ
		|	ОперацииПоШаблону КАК ОперацииПоШаблону";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас) КАК Тип,
		|	СпецификацииСостав.Этап КАК Этап,
		|	СпецификацииСостав.Номенклатура КАК Номенклатура,
		|	СпецификацииСостав.Характеристика КАК Характеристика,
		|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СпецификацииСостав.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА СпецификацииСостав.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Коэффициент,
		|	СпецификацииСостав.Спецификация КАК Спецификация,
		|	ЕСТЬNULL(СпецификацииСостав.Количество, 0) * &Количество КАК Количество,
		|	ЕСТЬNULL(СпецификацииСостав.КоличествоПродукции, 0) КАК КоличествоПродукции
		|ПОМЕСТИТЬ Состав
		|ИЗ
		|	Справочник.Спецификации.Состав КАК СпецификацииСостав
		|ГДЕ
		|	СпецификацииСостав.Ссылка = &Спецификация
		|	И НЕ СпецификацииСостав.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция),
		|	СпецификацииОперации.Этап,
		|	СпецификацииОперации.Операция,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	СпецификацииОперации.НормаВремени,
		|	1,
		|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
		|	ВЫБОР
		|		КОГДА СпецификацииОперации.Операция.ФиксированнаяСтоимость
		|			ТОГДА ВЫБОР
		|					КОГДА СпецификацииОперации.Количество = 0
		|						ТОГДА 1
		|					ИНАЧЕ СпецификацииОперации.Количество
		|				КОНЕЦ
		|		ИНАЧЕ СпецификацииОперации.НормаВремени
		|	КОНЕЦ * &Количество,
		|	ЕСТЬNULL(СпецификацииОперации.КоличествоПродукции, 0)
		|ИЗ
		|	Справочник.Спецификации.Операции КАК СпецификацииОперации
		|ГДЕ
		|	СпецификацииОперации.Ссылка = &Спецификация
		|	И НЕ СпецификацииОперации.Ссылка.ПометкаУдаления";
	КонецЕсли;
	ЭлементыЗапроса.Добавить(ТекстЗапроса);
	ЭлементыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Состав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	Состав.Этап КАК Этап,
	|	Состав.Тип КАК Тип,
	|	Состав.Номенклатура КАК Номенклатура,
	|	Состав.Характеристика КАК Характеристика,
	|	Состав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Состав.Спецификация КАК Спецификация,
	|	Состав.Количество КАК Количество,
	|	Состав.КоличествоПродукции КАК КоличествоПродукции,
	|	ВЫБОР
	|		КОГДА &ПоЗакупочнымЦенам
	|				И НЕ Состав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЗакупочныеЦены.Цена, 0) * Состав.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА Состав.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|						ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|					ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) * Состав.Коэффициент
	|				КОНЕЦ / ЕСТЬNULL(ТаблицаПорядковОкругления.Значение, 0.01) КАК ЧИСЛО(15, 0))) * ЕСТЬNULL(ТаблицаПорядковОкругления.Значение, 0.01)
	|	КОНЕЦ КАК УчетнаяЦена,
	|	0 КАК Стоимость
	|ИЗ
	|	Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОбработки,
	|				ВидЦен = &ВидЦен
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Состав.Номенклатура,
	|							Состав.Характеристика
	|						ИЗ
	|							Состав
	|						ГДЕ
	|							(НЕ &ПоЗакупочнымЦенам
	|								ИЛИ Состав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)))) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПорядковОкругления КАК ТаблицаПорядковОкругления
	|			ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления = ТаблицаПорядковОкругления.Порядок
	|		ПО Состав.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Состав.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И (НЕ &ПоЗакупочнымЦенам
	|				ИЛИ Состав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Закупки.Номенклатура КАК Номенклатура,
	|			Закупки.Характеристика КАК Характеристика,
	|			МИНИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА Закупки.Количество = 0
	|							ТОГДА 0
	|						ИНАЧЕ Закупки.Сумма * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / Закупки.Количество
	|					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Закупки.Номенклатура КАК Номенклатура,
	|				Закупки.Характеристика КАК Характеристика,
	|				МАКСИМУМ(Закупки.Период) КАК Период
	|			ИЗ
	|				РегистрНакопления.Закупки КАК Закупки
	|			ГДЕ
	|				Закупки.Период < &ДатаОбработки
	|				И (Закупки.Номенклатура, Закупки.Характеристика) В
	|						(ВЫБРАТЬ
	|							Состав.Номенклатура,
	|							Состав.Характеристика
	|						ИЗ
	|							Состав КАК Состав
	|						ГДЕ
	|							&ПоЗакупочнымЦенам
	|							И НЕ Состав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Закупки.Номенклатура,
	|				Закупки.Характеристика) КАК ПоследниеЗакупки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|				ПО (Закупки.Номенклатура = ПоследниеЗакупки.Номенклатура)
	|					И (Закупки.Характеристика = ПоследниеЗакупки.Характеристика)
	|					И (Закупки.Период = ПоследниеЗакупки.Период),
	|			РегистрСведений.КурсыВалют.СрезПоследних(
	|					&ДатаОбработки,
	|					Валюта В
	|						(ВЫБРАТЬ
	|							ВалютаУчета.Значение
	|						ИЗ
	|							Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Закупки.Номенклатура,
	|			Закупки.Характеристика) КАК ЗакупочныеЦены
	|		ПО Состав.Номенклатура = ЗакупочныеЦены.Номенклатура
	|			И Состав.Характеристика = ЗакупочныеЦены.Характеристика
	|			И (&ПоЗакупочнымЦенам)
	|			И (НЕ Состав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))");
	
	Запрос.Текст = СтрСоединить(
	ЭлементыЗапроса,
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|");
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьСоставСпецификации()

// Процедура добавляет новый узел в стек номенклатуры для разузлования.
//
// Параметры:
//  СтруктураСостава - Структура состава
//	СтекНоменклатуры - ТаблицаЗначений стек номенклатуры
//	СтекНоменклатурыСтекВходов - ТаблицаЗначений стек входов номенклатуры
//	НоваяСтрокаСтека - СтрокаТаблицыЗначений - строка стека
//	ТекСтрока     - СтрокаТаблицыЗначений - текущая строка.
//
Процедура ДобавитьУзел(СтруктураСостава, СтекНоменклатуры, СтекНоменклатурыСтекВходов, НоваяСтрокаСтека, ТекСтрока)
	
	НоваяСтрокаСтека = СтекНоменклатуры.Добавить();
	НоваяСтрокаСтека.Номенклатура	= ТекСтрока.Номенклатура;
	НоваяСтрокаСтека.Характеристика = ТекСтрока.Характеристика;
	НоваяСтрокаСтека.Спецификация	= ТекСтрока.Спецификация;
	НоваяСтрокаСтека.Уровень		= ТекСтрока.Уровень;
	
	// Инициализация вложенного стека.
	СтекНоменклатурыСтекВходов = СтекНоменклатурыСтекВходов.СкопироватьКолонки();
	НоваяСтрокаСтека.СтекВходов = СтекНоменклатурыСтекВходов;
	
	// Заполнение структуры состава.
	СтруктураСостава.Этап					= ТекСтрока.Этап;
	СтруктураСостава.Тип					= ТекСтрока.Тип;
	СтруктураСостава.ТипСтрокиСостава		= ТекСтрока.ТипСтрокиСостава;
	СтруктураСостава.Номенклатура			= ТекСтрока.Номенклатура;
	СтруктураСостава.Характеристика			= ТекСтрока.Характеристика;
	СтруктураСостава.ЕдиницаИзмерения		= ТекСтрока.ЕдиницаИзмерения;
	СтруктураСостава.Количество				= ТекСтрока.Количество / ?(ТекСтрока.КоличествоПродукции <> 0, ТекСтрока.КоличествоПродукции, 1);
	СтруктураСостава.КоличествоПродукции	= ТекСтрока.КоличествоПродукции;
	СтруктураСостава.Уровень				= НоваяСтрокаСтека.Уровень;
	СтруктураСостава.УчетнаяЦена			= ТекСтрока.УчетнаяЦена;
	СтруктураСостава.Стоимость				= СтруктураСостава.Количество * ТекСтрока.УчетнаяЦена;
		
	Если ТекСтрока.Спецификация.ПометкаУдаления Тогда
		СтруктураСостава.Спецификация = Справочники.Спецификации.ПустаяСсылка();
	Иначе
		СтруктураСостава.Спецификация = ТекСтрока.Спецификация;
	КонецЕсли;
		
КонецПроцедуры // ДобавитьУзел()

// Выполняет разузлование узла.
//
// Параметры:
//  СтруктураСостава - Структура, описывающая обрабатываемый узел
//	ТаблицаСостава - ТаблицаЗначений состава и операций
//  
Процедура ВыполнитьРазузлование(СтруктураСостава, ТаблицаСостава)
	
	НоваяСтрокаСостава = ТаблицаСостава.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаСостава, СтруктураСостава);
	НоваяСтрокаСостава.Узел				= Ложь;
	
	Если СтруктураСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел
	 ИЛИ СтруктураСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Сборка
	 ИЛИ СтруктураСостава.Уровень = 0 Тогда
			
		НоваяСтрокаСостава.Узел			= Истина;
	 
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьРазузлование()	

// Процедура разузлования.
//
// Параметры:
//  СтруктураСостава - Структура, описывающая обрабатываемый узел
//	Объект
//	ТаблицаСостава - ТаблицаЗначений состава и операций
//  
Процедура Разузлование(СтруктураСостава, ТаблицаСостава)
	
	// Инициализация стека номенклатуры
	СтекНоменклатуры = Новый ТаблицаЗначений();
	СтекНоменклатуры.Колонки.Добавить("Номенклатура");
	СтекНоменклатуры.Колонки.Добавить("Характеристика");
	СтекНоменклатуры.Колонки.Добавить("Спецификация");
	СтекНоменклатуры.Колонки.Добавить("Уровень");
	
	СтекНоменклатуры.Колонки.Добавить("СтекВходов");
	
	СтекНоменклатуры.Индексы.Добавить("Номенклатура, Характеристика, Спецификация");
	
	// Инициализация таблицы Входы
	СтекНоменклатурыСтекВходов = Новый ТаблицаЗначений();
	СтекНоменклатурыСтекВходов.Колонки.Добавить("ТипСтрокиСостава");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Этап");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Тип");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Номенклатура");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Характеристика");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("ЕдиницаИзмерения");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Количество");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("КоличествоПродукции");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Спецификация");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Уровень");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("УчетнаяЦена");
	СтекНоменклатурыСтекВходов.Колонки.Добавить("Стоимость");
	
	СтруктураСостава.Уровень = 0;
	
	// Начальное заполнение стека
	НоваяСтрокаСтека = СтекНоменклатуры.Добавить();
	НоваяСтрокаСтека.Номенклатура	= СтруктураСостава.Номенклатура;
	НоваяСтрокаСтека.Характеристика	= СтруктураСостава.Характеристика;
	НоваяСтрокаСтека.Спецификация	= СтруктураСостава.Спецификация;
	НоваяСтрокаСтека.Уровень		= СтруктураСостава.Уровень;
	
	НоваяСтрокаСтека.СтекВходов		= СтекНоменклатурыСтекВходов;
	
	ВыполнитьРазузлование(СтруктураСостава, ТаблицаСостава);
	
	// Пока есть узлы
	Пока СтекНоменклатуры.Количество() <> 0 Цикл
		
		ВыборкаНоменклатуры = ПолучитьСоставСпецификации(СтруктураСостава);
		
		Если ВыборкаНоменклатуры<>Неопределено Тогда
			
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаНоменклатуры.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				// Проверяем рекурсивный вход
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",	ВыборкаНоменклатуры.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика",	ВыборкаНоменклатуры.Характеристика);
				СтруктураПоиска.Вставить("Спецификация",	ВыборкаНоменклатуры.Спецификация);
				
				СтрокиРекурсивногоВхождения = СтекНоменклатуры.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиРекурсивногоВхождения.Количество() <> 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
						"ru = 'Обнаружено рекурсивное вхождение элемента %1 в элемент %2.'"),
						ВыборкаНоменклатуры.Номенклатура, СтруктураСостава.Номенклатура);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтруктураСостава.Объект);
					
					Продолжить;
					
				КонецЕсли;
				
				// Добавление новых узлов
				НоваяСтрокаВход = СтекНоменклатурыСтекВходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВход, ВыборкаНоменклатуры, "ТипСтрокиСостава, Этап, Тип, Номенклатура, Характеристика, ЕдиницаИзмерения, КоличествоПродукции, Спецификация");
				
				КоэффициентЕдиницыИзмерения			= ?(ТипЗнч(СтруктураСостава.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"),
				СтруктураСостава.ЕдиницаИзмерения.Коэффициент,
				1);
															
				НоваяСтрокаВход.Количество			= ВыборкаНоменклатуры.Количество * КоэффициентЕдиницыИзмерения;
				НоваяСтрокаВход.Уровень				= НоваяСтрокаСтека.Уровень + 1;
				НоваяСтрокаВход.УчетнаяЦена			= Число(ВыборкаНоменклатуры.УчетнаяЦена);
				НоваяСтрокаВход.Стоимость			= Число(ВыборкаНоменклатуры.Стоимость) * КоэффициентЕдиницыИзмерения;
				
			КонецЦикла; // ВыборкаНоменклатуры
			
		КонецЕсли; 
		
		// Конец ветви или нет?
		Если СтекНоменклатурыСтекВходов.Количество() = 0 Тогда
			
			// Удаляем из стека номенклатуру, которая не имеет продолжения
			СтекНоменклатуры.Удалить(НоваяСтрокаСтека);
			
			ФлагГотовности = Истина;
			Пока СтекНоменклатуры.Количество() <> 0 И ФлагГотовности Цикл
				
				// Получаем предыдущую строку стека номенклатуры
				ПредСтрокаСтекНоменклатуры = СтекНоменклатуры.Получить(СтекНоменклатуры.Количество() - 1);
				
				// Удаляем из стека входов.
				ПредСтрокаСтекНоменклатуры.СтекВходов.Удалить(0);
					
				Если ПредСтрокаСтекНоменклатуры.СтекВходов.Количество() = 0 Тогда
					
					// Если стек входов пустой, удаляем строку из стека номенклатуры
					СтекНоменклатуры.Удалить(ПредСтрокаСтекНоменклатуры);
					
				Иначе // следующая номенклатура из стека входов
					
					ФлагГотовности = Ложь;
					
					ТекСтрока = ПредСтрокаСтекНоменклатуры.СтекВходов.Получить(0);
					
					ДобавитьУзел(СтруктураСостава, СтекНоменклатуры, СтекНоменклатурыСтекВходов, НоваяСтрокаСтека, ТекСтрока);
					ВыполнитьРазузлование(СтруктураСостава, ТаблицаСостава);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // добавляем узлы
			
			ТекСтрока = СтекНоменклатурыСтекВходов.Получить(0);
			
			ДобавитьУзел(СтруктураСостава, СтекНоменклатуры, СтекНоменклатурыСтекВходов, НоваяСтрокаСтека, ТекСтрока);
			ВыполнитьРазузлование(СтруктураСостава, ТаблицаСостава);
			
		КонецЕсли;
		
	КонецЦикла; // СтекНоменклатуры
	
КонецПроцедуры // Разузлование() 

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли