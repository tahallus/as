#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	УстановитьПараметрОтчетаПоУмолчанию("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	ПараметрыОтчета = ОтчетыУНФ.ПараметрыФормированияОтчета(НастройкиОтчета);
	
	ЕстьОтборПоСчету = ЕстьОтборПоСчету(НастройкиОтчета);
	
	ОбработатьГруппировкуПоВалюте(НастройкиОтчета);
	
	ОтчетыУНФ.СтандартизироватьСхему(СхемаКомпоновкиДанных);
	ОтчетыУНФ.ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	МакетПодвалаОтчета     = ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиСчет   = ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	
	ПередВыводомОтчета(МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	МассивЗаголовковРесурсов = Новый Массив; 
	
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;
	
	ДокументРезультат.ФиксацияСверху = 0;
	
	МассивИтогов = Новый Массив;
	Для ПодИндекс = 0 По 5 Цикл
		МассивИтогов.Добавить(0);
	КонецЦикла;
	МассивСчетов = Новый Массив;
	
	Пока Истина Цикл
		
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			Прервать;
		Иначе
			
			Если НЕ ЕстьОтборПоСчету Тогда
				ПередВыводомЭлементаРезультата(МассивИтогов, МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, МакетГруппировкиСчет, МакетПодвалаОтчета, МассивСчетов);
			КонецЕсли;
			
			Если  Не ТаблицаЗафиксирована 
				И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				И ТипЗнч(НастройкиОтчета.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
				
				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
				
			КонецЕсли;
			
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["ОСВ"].Теги = НСТР("ru = 'Компания,ОСВ'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ОСВ"].СвязанныеПоля, "", "Обработка.ЗакрытиеМесяца", , Истина);
	
КонецПроцедуры

Процедура ОбработатьГруппировкуПоВалюте(НастройкиСКД)
	
	Если Не ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраКД = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютнаяСумма"));
	
	Если ЗначениеПараметраКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Структура = НастройкиСКД.Структура[0].Структура;
	
	Для Каждого ТекЭлементСтруктуры Из Структура Цикл
		Для Каждого ТекЭлементПолеГруппировки Из ТекЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если ТекЭлементПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Валюта") Тогда
				ТекЭлементСтруктуры.Использование = ЗначениеПараметраКД.Значение = "ВВалюте";
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураВалюта = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = СтруктураВалюта.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = ЗначениеПараметраКД.Значение = "ВВалюте";
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	СтруктураВалюта.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	СтруктураВалюта.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

Процедура УстановитьПараметрОтчетаПоУмолчанию(ИмяПараметра, Значение)
	
	ЗначениеПараметраКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ЗначениеЗаполнено(ЗначениеПараметраКД.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраКД.Значение = Значение;
	
КонецПроцедуры

Функция ЕстьОтборПоСчету(НастройкиСКД)
	
	ОтборСчет = ПолучитьЭлементОтбора(НастройкиСКД, Новый ПолеКомпоновкиДанных("Счет"), Истина);
	Если ОтборСчет = Неопределено Тогда
		ОтборСчет = ПолучитьЭлементОтбора(НастройкиСКД, Новый ПолеКомпоновкиДанных("Счет"));
	КонецЕсли;
	
	Если ОтборСчет = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОтборСчет.Использование;
	
КонецФункции

// Функция возвращает элемент отбора по полю отбора.
//
Функция ПолучитьЭлементОтбора(НастройкиКомпоновкиДанных, ПолеОтбора, ПризнакИспользования = Неопределено)
	
	Для Каждого ЭлементОтбора Из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора Тогда
			Если ПризнакИспользования = Неопределено Тогда
				Возврат ЭлементОтбора;
			Иначе
				Если ЭлементОтбора.Использование = ПризнакИспользования Тогда
					Возврат ЭлементОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЭлементОтбора()

// Получает макет подвала.
//
Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено)
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

// Процедура осуществляет корректировку макетов макета компоновки на 
// предмет ячеек, отображающих информацию о валютных суммах.
//
Процедура ПередВыводомОтчета(МакетКомпоновки) 
	
	МакетШапкиОтчета = ПолучитьМакетШапки(МакетКомпоновки,,"Подвал");
	Если МакетШапкиОтчета = Неопределено Тогда
		МакетШапкиОтчета = ПолучитьМакетШапки(МакетКомпоновки,,"Заголовок");
	КонецЕсли;
	ИндексМакетаШапки = МакетКомпоновки.Макеты.Индекс(МакетШапкиОтчета);
	
	МакетСумма = МакетШапкиОтчета.Макет[2];
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		МакетСуммаВал = МакетШапкиОтчета.Макет[3];
	КонецЕсли;
	
	МакетШапкиОтчета.Макет.Удалить(МакетСумма);
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		
		МакетШапкиОтчета.Макет.Удалить(МакетСуммаВал);
		
	КонецЕсли;
	
	МакетГруппировкиВалюта = ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Если МакетГруппировкиВалюта.Количество() > 0 Тогда
		МакетГруппировкиВалюта = МакетГруппировкиВалюта[0];
	Иначе
		МакетГруппировкиВалюта = Неопределено;
	КонецЕсли;
	
	Для н = (ИндексМакетаШапки + 1) По МакетКомпоновки.Макеты.Количество() - 1 Цикл 
		Макет = МакетКомпоновки.Макеты[н];
		Если НЕ Макет = МакетГруппировкиВалюта И ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			Макет.Макет.Удалить(Макет.Макет[1]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет подсчет итогов по счетам верхнего уровня
// и вывода итогов в макет.
//
Процедура ПередВыводомЭлементаРезультата(МассивИтогов, МакетКомпоновки, ДанныеРасшифровкиКомпоновки, ЭлементРезультата, МакетСчет, МакетПодвал, ОбработанныеСчета)
	
	// Накапливаем суммы по корневым счетам
	Если ЗначениеЗаполнено(ЭлементРезультата.Макет) Тогда
		Если МакетСчет.Найти(МакетКомпоновки.Макеты[ЭлементРезультата.Макет]) <> Неопределено Тогда
			ЗначениеСчет = ДанныеРасшифровкиКомпоновки.Элементы[ЭлементРезультата.ЗначенияПараметров.П2.Значение].ПолучитьПоля()[0].Значение;
			Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) И Не ЗначениеСчет.Забалансовый И ОбработанныеСчета.Найти(ЗначениеСчет)=Неопределено Тогда
				Для ПодИндекс = 1 По 6 Цикл
					Значение = ЭлементРезультата.ЗначенияПараметров[Строка(МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[0].Ячейки[ПодИндекс].Элементы[0].Значение)].Значение;
					МассивИтогов[ПодИндекс-1] = МассивИтогов[ПодИндекс-1] + Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 

	// Проставляем накопленные суммы в подвал отчета
	Если ЭлементРезультата.Макет = МакетПодвал.Имя Тогда
		Для ПодИндекс = 1 По 6 Цикл
			ЭлементРезультата.ЗначенияПараметров[Строка(МакетПодвал.Макет[0].Ячейки[ПодИндекс].Элементы[0].Значение)].Значение = МассивИтогов[ПодИндекс-1];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок")
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
	
	Возврат МассивМакетов;
	
КонецФункции

// Получает макет шапки.
// 
Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок")
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.Макет];
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьМакетШапки()

// Обход тела макета компоновки.
//
Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если СтрНайти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли