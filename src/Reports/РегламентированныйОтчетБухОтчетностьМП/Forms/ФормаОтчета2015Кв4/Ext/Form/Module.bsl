#Область ОписаниеПеременных

&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	мСтруктураМногострочныхРазделов   = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов   = Новый Структура;
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
	ЦветНеЗаполняется               = Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);
	
	СтруктураДанныхБаланс    = Новый Структура;
	СтруктураДанныхБалансНКО = Новый Структура;
	СтруктураДанныхОПУ       = Новый Структура;
	СтруктураДанныхОДДС      = Новый Структура;
	СтруктураДанныхОИК       = Новый Структура;
	СтруктураДанныхОЦИС      = Новый Структура;
	СтруктураДанныхДополнительныеФайлы = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации   = Параметры.ЭтоБалансНекоммерческойОрганизации;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки                = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения              = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей = ПустаяСтруктураДанныхФайла();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	ИзменитьОформлениеЭлементовСПАРКВОтчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправкаОтчетаВСПАРКОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОбработкаНавигационнойСсылкиВОтчете(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	КолонкаРазделыОтчетаСокрНаим      = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КолонкаНомерСтраницыРазделаОтчета = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ДопФайлы;
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		ВывестиИнформациюОПрикрепленномФайле("ФайлПояснительнойЗаписки");
		ВывестиИнформациюОПрикрепленномФайле("ФайлАудиторскогоЗаключения");
		ВывестиИнформациюОПрикрепленномФайле("ФайлЗаявленияСоюзаСельхозпроизводителей");
		
	ИначеЕсли СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(КолонкаРазделыОтчетаСокрНаим, КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "БалансНКО"	Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьОтправкуВСПАРКИзОтчета(Команда)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ПовторитьОтправкуВСПАРКИзОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСПАРКИзОтчета(Команда)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОтправитьВСПАРКИзОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте( , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьСведенияОбОрганизацииВРазделахНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоставПоказателей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДеревоНастроек",
		ЭтотОбъект[НастройкиСоставаПоказателейОтчета[СтруктураРеквизитовФормы.НаимТекущегоРаздела]]);
	
	ИмяФормыНастроек = Лев(ЭтотОбъект.ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".Форма.") + 6)
	                 + "НастройкаСоставаПоказателейОтчета";
	ФормаНастроек = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСоставПоказателейЗавершение", ЭтотОбъект);
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены сведения о дополнительных файлах.%1Продолжить операцию?'"), Символы.ПС);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели текущего отчета.%1Продолжить операцию?'"), Символы.ПС);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	НастройкиФормыВыбораПечати = НастройкиФормыВыбораПечати();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ВидСдачиОтчетности = 3 Тогда
		ПараметрыФормы.Вставить("КодФормыПоКНД", "0710094");
	Иначе
		ПараметрыФормы.Вставить("КодФормыПоКНД", "0710096");
	КонецЕсли;
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПараметрыФормы.Вставить("РедакцияФормы", "от 19.04.2019 № 61н");
		
	ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2018 Тогда
		ПараметрыФормы.Вставить("РедакцияФормы", "от 06.03.2018 № 41н");
		
	Иначе
		ПараметрыФормы.Вставить("РедакцияФормы", "от 06.04.2015 № 57н");
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	
	ИмяФормыВыбора = Лев(ЭтотОбъект.ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".Форма.") + 6)
	               + "ВыборПечатнойФормы"
	               + ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета > '2020-01-01', "2020", "");
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",			    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ИмяФормы), ИмяФормыОтчета(ИмяФормы),
		ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДляОтправкиВБанк(Команда)
	
	ШаблонТекстаСостояния = НСтр("ru='Подготовка отчета %1 для отправки в банк...'");
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСостояния, Заголовок);
	Состояние(ТекстСостояния);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		// У несохраненного отчета печатные формы будут сформированы при записи отчета
		СообщитьОЗавершенииПодготовкиФайловДляБанка();
		Возврат;
	КонецЕсли;
	
	ПодготовитьФайлыДляБанка();
	СообщитьОЗавершенииПодготовкиФайловДляБанка();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьОформлениеЭлементовСПАРКВОтчете() Экспорт
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначения.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРК = ОбщегоНазначения.ОбщийМодуль("ОтправкаРегОтчетовВСПАРК");
		МодульОтправкаРегОтчетовВСПАРК.ИзменитьОформлениеЭлементовСПАРКВОтчете(ЭтотОбъект);
	Иначе
		Элементы.ФормаОтправитьВСПАРКИзОтчета.Видимость = Ложь;
		Элементы.ПанельОтправкиВСПАРК.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	ТабличныйДокумент.Очистить(); // очистка необходима в случае повторного вызова процедуры "Инициализация"
	
	// При восстановлении отчета из сохраненных данных необходимо восстановить
	// значение реквизита Организация до того как будут выполняться настройки формы.
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		СписокСохранения.Свойство("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
		Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации <> Истина Тогда
			СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Ложь;
		КонецЕсли;
	КонецЕсли;
	СтруктураОтчета = СтруктураОтчета2015Кв4();
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИмяРаздела = "БалансНКО";
	Иначе
		ИмяРаздела = "Баланс";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	НастройкиОтчета = НастройкиСоставаПоказателейОтчета();
	ИнициализироватьНастройкиСоставаПоказателейОтчетов(НастройкиОтчета);
	
	Для Каждого СоставПоказателейОтчета Из НастройкиСоставаПоказателейОтчета Цикл
		КонвертироватьДеревоЗначенийВДанныеФормыДерево(ЭтотОбъект["Настройки" + СоставПоказателейОтчета.Ключ],
			НастройкиОтчета[СоставПоказателейОтчета.Ключ]);
	КонецЦикла;
	
	ИнициализироватьСвойстваРазделовОтчета();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
			
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			УстановитьФорматВывода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
			СтруктураРеквизитовФормы.ТипАдреса = ТипАдресаПоУмолчанию();
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		Элементы.ИмяФайлаПояснительнойЗаписки.Заголовок = "Пояснения";
		Элементы.ДопФайлыАЗ.Видимость = Ложь;
		Элементы.ДопФайлыФЗРС.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();
	
	ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизации();
		
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере( , , СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
		ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
	КонецЕсли;
	
	УстановитьВидСдачиОтчетностиОбъекта();
	
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда
		НомерКорректировки = 0;
	КонецЕсли;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		ЗаполнитьПримечанияКодовСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлПояснительнойЗаписки"];
	ИмяФайлаПояснительнойЗаписки = СтруктураХранения.ИмяФайла;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлАудиторскогоЗаключения"];
	ИмяФайлаАудиторскогоЗаключения = СтруктураХранения.ИмяФайла;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлЗаявленияСоюзаСельхозпроизводителей"];
	ИмяФайлаЗаявленияРевизионногоСоюза = СтруктураХранения.ИмяФайла;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетности

&НаКлиенте
Функция НастройкиФормыВыбораПечати()
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 2 ИЛИ ВидСдачиОтчетности = 3);
	ПечатьPDF417Разрешена = НЕ СтруктураРеквизитовФормы.ИП
		И (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 ИЛИ ЭтоЛиквидационнаяОтчетность);
	
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ПечатьPDF417Разрешена);
	НастройкиФормыВыбораПечати.Вставить("ВключатьКодыСтрок", Истина);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, "ПоказатьСДвухмернымШтрихкодомPDF417");
			
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			Если Результат.ВключатьКодыСтрок Тогда
				ПечататьИзФормы("ПоказатьБланк");
			Иначе
				ПечататьИзФормы("ПоказатьБланкБезКодов");
			КонецЕсли;
			
		ИначеЕсли Результат.АктивныйПункт = 3 Тогда
			Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ВидСдачиОтчетности = 3 Тогда
				ПечататьИзФормы("ПоказатьБланкКНД0710094");
			Иначе
				ПечататьИзФормы("ПоказатьБланкКНД0710096");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидПечати = ДополнительныеПараметры.ВидПечати;
	
	Печать(ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

// Формирует набор печатных бланков в СтруктураРеквизитовФормы.мПечатныеФормы
//
// Параметры:
//   ВидПечати - Строка - определяет вариант и режим печати, может принимать значения:
//     "ПоказатьБланк" - формирование бланков по формам приказа Минфина России от 02.07.2010 № 66н
//     "ПоказатьБланкКНД0710096" - формирование бланков с добавлением формы с титульным листом бланка по КНД 0710096
//     "ПоказатьБланкКНД0710094" - формирование бланков ликвидационной отчетности
//                                 с добавлением формы с титульным листом бланка по КНД 0710096
//
&НаСервере
Функция ПечатьНаСервере(ВидПечати) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ВывестиМакетВТаблДокНаСервере("БалансНКО", 0);
	Иначе
		ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	КонецЕсли;
	
	Если ВидПечати = "ПоказатьБланкКНД0710094" Тогда
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма по КНД 0710094");
		СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", "");
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		ВывестиНаПечатьКНД0710094(СтруктураПараметров);
		
		Если ВидПечати = "ПоказатьБланкКНД0710094" Тогда
			ВидПечати = "ПоказатьБланк";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПечати = "ПоказатьБланкКНД0710096" Тогда
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма по КНД 0710096");
		СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", "");
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		ВывестиНаПечатьКНД0710096(СтруктураПараметров);
		
		Если ВидПечати = "ПоказатьБланкКНД0710096" Тогда
			ВидПечати = "ПоказатьБланк";
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		ЭтоЗакладкаДополнительныхФайлов = СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы";
		Если ЭтоЗакладкаДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",	       ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтотОбъект["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ЗаполнитьСведенияОбОрганизации();
			
			ПоказатьПериод(ИмяСтраницыПанели);
			
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(ПараметрыПечати)
	
	Если ПараметрыПечати.ИмяСтраницы = "Баланс"
	 ИЛИ ПараметрыПечати.ИмяСтраницы = "БалансНКО" Тогда
		ВывестиНаПечатьБаланс(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОПУ" Тогда
		ВывестиНаПечатьОПУ(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОИК" Тогда
		ВывестиНаПечатьОИК(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОДДС" Тогда
		ВывестиНаПечатьОДДС(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОЦИС" Тогда
		ВывестиНаПечатьОЦИС(ПараметрыПечати);
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ДополнительныеФайлы" ИЛИ ПараметрыПечати.ИмяСтраницы = "" Тогда
		// Раздел не печатается.
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтотОбъект, ПараметрыПечати, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьКНД0710094(ПараметрыПечати)
	
	КодФормыПоКНД = "0710094";
	ПериодОтчетности = "90";
	
	ВывестиНаПечатьТитульныйЛистМЧБ(ПараметрыПечати, КодФормыПоКНД, ПериодОтчетности);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьКНД0710096(ПараметрыПечати)
	
	КодФормыПоКНД = "0710096";
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПериодОтчетности = 34;
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			// 94 – первый отчетный год, отличный по продолжительности от календарного.
			ПериодОтчетности = "94";
		КонецЕсли;
		
	Иначе
		ПериодОтчетности = "";
		Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 Тогда
			ПериодОтчетности = "34";
		КонецЕсли;
		
		Если ВидСдачиОтчетности = 2 Тогда
			// Промежуточная отчетность при ликвидации/реорганизации.
			ПериодОтчетности = "94";
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// Ликвидационная отчетность.
			ПериодОтчетности = "90";
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиНаПечатьТитульныйЛистМЧБ(ПараметрыПечати, КодФормыПоКНД, ПериодОтчетности);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьТитульныйЛистМЧБ(ПараметрыПечати, КодФормыПоКНД, ПериодОтчетности)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	// Подготовка данных для вывода.
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ИНН", СокрЛП(ТабличныйДокумент.Области.ОргИНН.Значение));
	ДанныеОтчета.Вставить("КПП", СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ДанныеОтчета.Вставить("НомерКорректировки",
		Формат(СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки, "ЧЦ=3; ЧН=; ЧГ="));
	
	ДанныеОтчета.Вставить("Период", ПериодОтчетности);
	
	ДанныеОтчета.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг"));
	
	ДанныеОтчета.Вставить("НаимОрг",ВРег(СокрЛП(ТабличныйДокумент.Области.ОргНазв.Значение)));
	ДанныеОтчета.Вставить("ОКВЭД",  СокрЛП(СтрЗаменить(ТабличныйДокумент.Области.ОргКодОКВЭД.Значение,".", "")));
	ДанныеОтчета.Вставить("ОКПО",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКПО.Значение));
	ДанныеОтчета.Вставить("ОКОПФ",  СокрЛП(ТабличныйДокумент.Области.ОргКодОКОПФ.Значение));
	ДанныеОтчета.Вставить("ОКФС",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКФС.Значение));
	ДанныеОтчета.Вставить("ОКЕИ",   СокрЛП(ТабличныйДокумент.Области.КодЕИ.Значение));
	
	ДанныеОтчета.Вставить("ДатаПодписи", Формат(ДатаПодписи, "ДФ=ddMMyyyy"));
	
	Если НЕ ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено Тогда
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(ТабличныйДокумент.Области.ОргБухгалтер.Значение);
		ДанныеОтчета.Вставить("ФамилияБухгалтера",  ВРег(СокрЛП(ФИОБух.Фамилия)));
		ДанныеОтчета.Вставить("ИмяБухгалтера",      ВРег(СокрЛП(ФИОБух.Имя)));
		ДанныеОтчета.Вставить("ОтчествоБухгалтера", ВРег(СокрЛП(ФИОБух.Отчество)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВФормате9Запятых) Тогда
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(
			СтруктураРеквизитовФормы.АдресВФормате9Запятых);
			
	Иначе
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(
			СтруктураРеквизитовФормы.мАдресДляВыгрузки);
			
	КонецЕсли;
	
	ДанныеОтчета.Вставить("Адрес", ВРег(СокрЛП(ТабличныйДокумент.Области.ОргПочтАдрес.Значение)));
	
	ДанныеОтчета.Вставить("Индекс",          СокрЛП(СтруктураАдреса.Индекс));
	ДанныеОтчета.Вставить("СубъектРФ",       РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ДанныеОтчета.Вставить("Район",           ВРег(СокрЛП(СтруктураАдреса.Район)));
	ДанныеОтчета.Вставить("Город",           ВРег(СокрЛП(СтруктураАдреса.Город)));
	ДанныеОтчета.Вставить("НаселенныйПункт", ВРег(СокрЛП(СтруктураАдреса.НаселенныйПункт)));
	ДанныеОтчета.Вставить("Улица",           ВРег(СокрЛП(СтруктураАдреса.Улица)));
	ДанныеОтчета.Вставить("НомерДома",       ВРег(СокрЛП(СтруктураАдреса.Дом)));
	ДанныеОтчета.Вставить("НомерКорпуса",    ВРег(СокрЛП(СтруктураАдреса.Корпус)));
	ДанныеОтчета.Вставить("НомерОфиса",      ВРег(СокрЛП(СтруктураАдреса.Квартира)));
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПечатнаяФорма = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаПечати2019Кв1_КНД" + КодФормыПоКНД);
	ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ПечатнаяФорма = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаПечати2016Кв1_КНД0710096_1");
	Иначе
		ПечатнаяФорма = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаПечати2015Кв4_КНД0710096_1");
	КонецЕсли;
	
	ПечатнаяФорма.ПолеСверху = 10;
	ПечатнаяФорма.ПолеСправа = 10;
	ПечатнаяФорма.ПолеСнизу  = 10;
	ПечатнаяФорма.ПолеСлева  = 10;
	
	КодНО = СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана);
	КПП = СокрЛП(СтруктураРеквизитовФормы.Организация.КПП);
	
	ДанныеОтчета.Вставить("ДатаУтвОтчетности",
		Формат(ТабличныйДокумент.Области.ДатаУтвОтчетности.Значение, "ДФ=ddMMyyyy"));
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Руководитель организации.
		ДанныеОтчета.Вставить("ПризнакПодписанта", "1");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(ВРег(ТабличныйДокумент.Области.ОргДиректор.Значение));
		ДанныеОтчета.Вставить("ПодписантФамилия",  ВРег(СокрЛП(ФИОРук.Фамилия)));
		ДанныеОтчета.Вставить("ПодписантИмя",      ВРег(СокрЛП(ФИОРук.Имя)));
		ДанныеОтчета.Вставить("ПодписантОтчество", ВРег(СокрЛП(ФИОРук.Отчество)));
		
		ДанныеОтчета.Вставить("ДокументПредставителя", "");
		
	Иначе
		// Уполномоченный представитель.
		ДанныеОтчета.Вставить("ПризнакПодписанта", "2");
		
		ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(ВРег(СведенияОПредставителе.ФИОПредставителя));
		ДанныеОтчета.Вставить("ПодписантФамилия",  ВРег(СокрЛП(ФИОПредставителя.Фамилия)));
		ДанныеОтчета.Вставить("ПодписантИмя",      ВРег(СокрЛП(ФИОПредставителя.Имя)));
		ДанныеОтчета.Вставить("ПодписантОтчество", ВРег(СокрЛП(ФИОПредставителя.Отчество)));
		
		ДанныеОтчета.Вставить("ДокументПредставителя", ВРег(СведенияОПредставителе.ДокументПредставителя));
		
	КонецЕсли;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет",
		ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2019-01-01' Тогда
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
			ПечатнаяФорма = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаПечати2016Кв1_КНД0710096_2");
		Иначе
			ПечатнаяФорма = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаПечати2015Кв4_КНД0710096_2");
		КонецЕсли;
		
		ПечатнаяФорма.ПолеСверху = 10;
		ПечатнаяФорма.ПолеСправа = 10;
		ПечатнаяФорма.ПолеСнизу  = 10;
		ПечатнаяФорма.ПолеСлева  = 10;
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет",
			ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета);
		СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
	КонецЕсли;
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета)
	
	Перем Индекс, ИндексСтр;
	
	Для Каждого ЭкземплярДанных Из ДанныеОтчета Цикл
		ИмяОбласти = ЭкземплярДанных.Ключ;
		Значение   = ЭкземплярДанных.Значение;
		
		Если ПечатнаяФорма.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			ПечатнаяФорма.Области[ИмяОбласти].Текст = Значение;
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		
		Пока ПечатнаяФорма.Области.Найти(ИмяОбласти + "_" + ИндексСтр) <> Неопределено Цикл
			ПечатнаяФорма.Области[ИмяОбласти + "_" + ИндексСтр].Текст = Сред(Значение, Индекс, 1);
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	
	Обл1 = ПечатнаяФорма.Области.Найти("ДатаУтвОтчетности");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Истина, Истина);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ДатаУтвОтчетностиЗаголовок");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Ложь);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Истина);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Ложь);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетности");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Истина);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетностиЗаголовок");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Ложь);
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ОрганизацииДляЗаполненияОтчета");
	Если Обл1 <> Неопределено Тогда
		Обл1.Очистить(Истина, Ложь, Ложь);
	КонецЕсли;
	
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обл.Примечание.Текст) Тогда
			Обл.Примечание.Текст = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьБаланс(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть00");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть04");
	
	ГоризонтальныеОбласти = Новый Массив;
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть14");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть01");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть02");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть03");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть04");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть05");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть06");
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть71");
		ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть72");
	Иначе
		ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть07");
	КонецЕсли;
	
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть08");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть09");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть10");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть11");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть12");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть13");
	
	Для Каждого ГоризонтальнаяОбласть Из ГоризонтальныеОбласти Цикл
		
		ВыводитьОбластьНаПечать = Истина;
		Если ГоризонтальнаяОбласть = "ОсновнаяЧасть01"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть02"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть03"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть04"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть05"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть07"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть71"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть72"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть08"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть09"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть10"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть11"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть12" Тогда
			ПроверяемаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ГоризонтальнаяОбласть);
			ЗначенияЗаполнены = Ложь;
			Для Каждого Область Из ПроверяемаяОбласть.Области Цикл
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение <> Неопределено 
				   И Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
					ЗначениеОбласти = ОкруглитьЧислоПоФормату(ЭтотОбъект, Область.Значение);
					ЗначенияЗаполнены = ЗначенияЗаполнены ИЛИ ЗначениеЗаполнено(ЗначениеОбласти);
				КонецЕсли;
			КонецЦикла;
			ВыводитьОбластьНаПечать = (ВыводитьОбластьНаПечать И ЗначенияЗаполнены);
		КонецЕсли;
		
		Если ВыводитьОбластьНаПечать Тогда
			ЭтоПервыйСтолбец = Истина;
			Для Каждого ВертикальнаяОбласть Из ВертикальныеОбласти Цикл
				ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ГоризонтальнаяОбласть + "|" + ВертикальнаяОбласть);
				Если ЭтоПервыйСтолбец Тогда
					ПечатнаяФорма.Вывести(ВыводимаяОбласть);
				Иначе
					ПечатнаяФорма.Присоединить(ВыводимаяОбласть);
				КонецЕсли;
				ЭтоПервыйСтолбец = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(17, 2).ШиринаКолонки = 58.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть15");
	УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОПУ(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть00");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть04");
	
	ГоризонтальныеОбласти = Новый Массив;
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть09");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть01");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть02");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть03");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть04");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть05");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть06");
	ГоризонтальныеОбласти.Добавить("ОсновнаяЧасть07");
	
	Для Каждого ГоризонтальнаяОбласть Из ГоризонтальныеОбласти Цикл
		ВыводитьОбластьНаПечать = Истина;
		Если ГоризонтальнаяОбласть = "ОсновнаяЧасть01"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть02"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть03"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть04"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть05"
		 ИЛИ ГоризонтальнаяОбласть = "ОсновнаяЧасть06" Тогда
			ПроверяемаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ГоризонтальнаяОбласть);
			ЗначенияЗаполнены = Ложь;
			Для Каждого Область Из ПроверяемаяОбласть.Области Цикл
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение <> Неопределено 
				   И Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
					ЗначениеОбласти = ОкруглитьЧислоПоФормату(ЭтотОбъект, Область.Значение);
					ЗначенияЗаполнены = ЗначенияЗаполнены ИЛИ ЗначениеЗаполнено(ЗначениеОбласти);
				КонецЕсли;
			КонецЦикла;
			ВыводитьОбластьНаПечать = (ВыводитьОбластьНаПечать И ЗначенияЗаполнены);
		КонецЕсли;
		
		Если ВыводитьОбластьНаПечать Тогда
			ЭтоПервыйСтолбец = Истина;
			Для Каждого ВертикальнаяОбласть Из ВертикальныеОбласти Цикл
				ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ГоризонтальнаяОбласть + "|" + ВертикальнаяОбласть);
				Если ЭтоПервыйСтолбец Тогда
					ПечатнаяФорма.Вывести(ВыводимаяОбласть);
				Иначе
					ПечатнаяФорма.Присоединить(ВыводимаяОбласть);
				КонецЕсли;
				ЭтоПервыйСтолбец = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(13, 2).ШиринаКолонки = 67.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть08");
	УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОИК(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СоставОтчета = ЭтотОбъект[НастройкиСоставаПоказателейОтчета.ОИК];
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть01");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть011", ВертикальныеОбласти);
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(14, 2).ШиринаКолонки = 49.13;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3100", ВертикальныеОбласти);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3200", ВертикальныеОбласти);
	
	ЗаполненыеПодчиненныеСтроки3210 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3211")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3212")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3213")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3214")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3215")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3216");
	Если ЗаполненыеПодчиненныеСтроки3210 И ПоказательВключенВОтчет(СоставОтчета, "Строка3210") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3210", ВертикальныеОбласти);
		Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3211") И ПоказательВключенВОтчет(СоставОтчета, "Строка3211"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3212") И ПоказательВключенВОтчет(СоставОтчета, "Строка3212"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3213") И ПоказательВключенВОтчет(СоставОтчета, "Строка3213"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3214") И ПоказательВключенВОтчет(СоставОтчета, "Строка3214"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3215") И ПоказательВключенВОтчет(СоставОтчета, "Строка3215"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3216") И ПоказательВключенВОтчет(СоставОтчета, "Строка3216")) Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле3210", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3211") И ПоказательВключенВОтчет(СоставОтчета, "Строка3211") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3211", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3212") И ПоказательВключенВОтчет(СоставОтчета, "Строка3212") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3212", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3213") И ПоказательВключенВОтчет(СоставОтчета, "Строка3213") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3213", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3214") И ПоказательВключенВОтчет(СоставОтчета, "Строка3214") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3214", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3215") И ПоказательВключенВОтчет(СоставОтчета, "Строка3215") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3215", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3216") И ПоказательВключенВОтчет(СоставОтчета, "Строка3216") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3216", ВертикальныеОбласти);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполненыеПодчиненныеСтроки3210 И ПоказательВключенВОтчет(СоставОтчета, "Строка3210") Тогда
		СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть02");
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть03", ВертикальныеОбласти);
		
		Если ПечатьБезКодов Тогда
			ПечатнаяФорма.Область(2, 2).ШиринаКолонки = 49.13;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполненыеПодчиненныеСтроки3220 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3221")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3222")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3223")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3224")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3225")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3226")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3227");
	Если ЗаполненыеПодчиненныеСтроки3220 И ПоказательВключенВОтчет(СоставОтчета, "Строка3220") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3220", ВертикальныеОбласти);
		Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3221") И ПоказательВключенВОтчет(СоставОтчета, "Строка3221"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3222") И ПоказательВключенВОтчет(СоставОтчета, "Строка3222"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3223") И ПоказательВключенВОтчет(СоставОтчета, "Строка3223"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3224") И ПоказательВключенВОтчет(СоставОтчета, "Строка3224"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3225") И ПоказательВключенВОтчет(СоставОтчета, "Строка3225"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3226") И ПоказательВключенВОтчет(СоставОтчета, "Строка3226"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3227") И ПоказательВключенВОтчет(СоставОтчета, "Строка3227")) Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле3220", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3221") И ПоказательВключенВОтчет(СоставОтчета, "Строка3221") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3221", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3222") И ПоказательВключенВОтчет(СоставОтчета, "Строка3222") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3222", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3223") И ПоказательВключенВОтчет(СоставОтчета, "Строка3223") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3223", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3224") И ПоказательВключенВОтчет(СоставОтчета, "Строка3224") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3224", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3225") И ПоказательВключенВОтчет(СоставОтчета, "Строка3225") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3225", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3226") И ПоказательВключенВОтчет(СоставОтчета, "Строка3226") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3226", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3227") И ПоказательВключенВОтчет(СоставОтчета, "Строка3227") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3227", ВертикальныеОбласти);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3230") И ПоказательВключенВОтчет(СоставОтчета, "Строка3230") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3230", ВертикальныеОбласти);
	КонецЕсли;
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3240") И ПоказательВключенВОтчет(СоставОтчета, "Строка3240") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3240", ВертикальныеОбласти);
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3200", ВертикальныеОбласти);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3300", ВертикальныеОбласти);
	
	ЗаполненыеПодчиненныеСтроки3310 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3311")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3312")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3313")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3314")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3315")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3316");
	Если ЗаполненыеПодчиненныеСтроки3310 И ПоказательВключенВОтчет(СоставОтчета, "Строка3310") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3310", ВертикальныеОбласти);
		Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3311") И ПоказательВключенВОтчет(СоставОтчета, "Строка3311"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3312") И ПоказательВключенВОтчет(СоставОтчета, "Строка3312"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3313") И ПоказательВключенВОтчет(СоставОтчета, "Строка3313"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3314") И ПоказательВключенВОтчет(СоставОтчета, "Строка3314"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3315") И ПоказательВключенВОтчет(СоставОтчета, "Строка3315"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3316") И ПоказательВключенВОтчет(СоставОтчета, "Строка3316")) Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле3310", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3311") И ПоказательВключенВОтчет(СоставОтчета, "Строка3311") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3311", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3312") И ПоказательВключенВОтчет(СоставОтчета, "Строка3312") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3312", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3313") И ПоказательВключенВОтчет(СоставОтчета, "Строка3313") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3313", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3314") И ПоказательВключенВОтчет(СоставОтчета, "Строка3314") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3314", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3315") И ПоказательВключенВОтчет(СоставОтчета, "Строка3315") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3315", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3316") И ПоказательВключенВОтчет(СоставОтчета, "Строка3316") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3316", ВертикальныеОбласти);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполненыеПодчиненныеСтроки3320 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3321")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3322")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3323")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3324")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3325")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3326")
	                              ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3327");
	Если ЗаполненыеПодчиненныеСтроки3320 И ПоказательВключенВОтчет(СоставОтчета, "Строка3320") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3320", ВертикальныеОбласти);
		Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3321") И ПоказательВключенВОтчет(СоставОтчета, "Строка3321"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3322") И ПоказательВключенВОтчет(СоставОтчета, "Строка3322"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3323") И ПоказательВключенВОтчет(СоставОтчета, "Строка3323"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3324") И ПоказательВключенВОтчет(СоставОтчета, "Строка3324"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3325") И ПоказательВключенВОтчет(СоставОтчета, "Строка3325"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3326") И ПоказательВключенВОтчет(СоставОтчета, "Строка3326"))
		 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3327") И ПоказательВключенВОтчет(СоставОтчета, "Строка3327")) Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле3320", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3321") И ПоказательВключенВОтчет(СоставОтчета, "Строка3321") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3321", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3322") И ПоказательВключенВОтчет(СоставОтчета, "Строка3322") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3322", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3323") И ПоказательВключенВОтчет(СоставОтчета, "Строка3323") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3323", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3324") И ПоказательВключенВОтчет(СоставОтчета, "Строка3324") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3324", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3325") И ПоказательВключенВОтчет(СоставОтчета, "Строка3325") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3325", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3326") И ПоказательВключенВОтчет(СоставОтчета, "Строка3326") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3326", ВертикальныеОбласти);
		КонецЕсли;
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3327") И ПоказательВключенВОтчет(СоставОтчета, "Строка3327") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3327", ВертикальныеОбласти);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3330") И ПоказательВключенВОтчет(СоставОтчета, "Строка3330") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3330", ВертикальныеОбласти);
	КонецЕсли;
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3340") И ПоказательВключенВОтчет(СоставОтчета, "Строка3340") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3340", ВертикальныеОбласти);
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3300", ВертикальныеОбласти);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ПустаяСтрока2");
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОИКРаздел2_Тело") И ПоказательВключенВОтчет(СоставОтчета, "ОИКРаздел2") Тогда
		СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть30");
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть31");
		
		ВертикальныеОбласти = Новый Массив;
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть21");
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть22");
		Если НЕ ПечатьБезКодов Тогда
			ВертикальныеОбласти.Добавить("ВертикальнаяЧасть23");
		КонецЕсли;
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть24");
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть311", ВертикальныеОбласти);
		Если ПечатьБезКодов Тогда
			ПечатнаяФорма.Область(3, 5, 4, 5).ШиринаКолонки = 39.38;
		КонецЕсли;
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3400", ВертикальныеОбласти);
		
		ЗаполненыСтроки3401 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3401")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3411")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3421")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3501");
		ЗаполненыСтроки3402 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3402")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3412")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3422")
		                  ИЛИ ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3502");
		
		Если (ЗаполненыСтроки3401 И ПоказательВключенВОтчет(СоставОтчета, "ОИКВТомЧисле3401"))
		 ИЛИ (ЗаполненыСтроки3402 И ПоказательВключенВОтчет(СоставОтчета, "ОИКВТомЧисле3402")) Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле3400", ВертикальныеОбласти);
		КонецЕсли;
		
		Если ЗаполненыСтроки3401 И ПоказательВключенВОтчет(СоставОтчета, "ОИКВТомЧисле3401") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3401", ВертикальныеОбласти);
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3401") И ПоказательВключенВОтчет(СоставОтчета, "Строка3401") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3401", ВертикальныеОбласти);
			КонецЕсли;
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3411") И ПоказательВключенВОтчет(СоставОтчета, "Строка3411"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3421") И ПоказательВключенВОтчет(СоставОтчета, "Строка3421")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3411", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3411") И ПоказательВключенВОтчет(СоставОтчета, "Строка3411") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3411", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3421") И ПоказательВключенВОтчет(СоставОтчета, "Строка3421") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3421", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3501") И ПоказательВключенВОтчет(СоставОтчета, "Строка3501") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3501", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполненыСтроки3402 И ПоказательВключенВОтчет(СоставОтчета, "ОИКВТомЧисле3402") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3402", ВертикальныеОбласти);
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3402") И ПоказательВключенВОтчет(СоставОтчета, "Строка3402") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3402", ВертикальныеОбласти);
			КонецЕсли;
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3412") И ПоказательВключенВОтчет(СоставОтчета, "Строка3412"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3422") И ПоказательВключенВОтчет(СоставОтчета, "Строка3422")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Заголовок3412", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3412") И ПоказательВключенВОтчет(СоставОтчета, "Строка3412") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3412", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3422") И ПоказательВключенВОтчет(СоставОтчета, "Строка3422") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3422", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть3502") И ПоказательВключенВОтчет(СоставОтчета, "Строка3502") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3502", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ПустаяСтрока3");
		
	КонецЕсли;
	
	Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОИКРаздел3_Тело") И ПоказательВключенВОтчет(СоставОтчета, "ОИКРаздел3") Тогда
		СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4");
		
		ВертикальныеОбласти = Новый Массив;
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть31");
		Если НЕ ПечатьБезКодов Тогда
			ВертикальныеОбласти.Добавить("ВертикальнаяЧасть32");
		КонецЕсли;
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть33");
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть41", ВертикальныеОбласти);
		Если ПечатьБезКодов Тогда
			ПечатнаяФорма.Область(3, 2).ШиринаКолонки = 49.13;
		КонецЕсли;
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ПустаяСтрока4");
		
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Ограничители4");
	УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОДДС(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СоставОтчета = ЭтотОбъект[НастройкиСоставаПоказателейОтчета.ОДДС];
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
		
	ВыводитьПодраздел41 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОДДСРаздел41_Тело") И ПоказательВключенВОтчет(СоставОтчета, "ОДДСРаздел41");
	ВыводитьПодраздел42 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОДДСРаздел42_Тело") И ПоказательВключенВОтчет(СоставОтчета, "ОДДСРаздел42");
	ВыводитьПодраздел43 = ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОДДСРаздел43_Тело") И ПоказательВключенВОтчет(СоставОтчета, "ОДДСРаздел43");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть01");
	
	Обл = ПечатнаяФорма.Области.Найти("НастройкаСоставаСтрок");
	Если Обл <> Неопределено Тогда
		Обл.Текст = "";
	КонецЕсли;
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть011", ВертикальныеОбласти);
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(13, 2).ШиринаКолонки = 62.75;
	КонецЕсли;
		
	Если ВыводитьПодраздел41 Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть41_Заголовок", ВертикальныеОбласти);
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4110") И ПоказательВключенВОтчет(СоставОтчета, "Строка4110") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4110", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4111") И ПоказательВключенВОтчет(СоставОтчета, "Строка4111"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4112") И ПоказательВключенВОтчет(СоставОтчета, "Строка4112"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4113") И ПоказательВключенВОтчет(СоставОтчета, "Строка4113"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4119") И ПоказательВключенВОтчет(СоставОтчета, "Строка4119")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4110", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4111") И ПоказательВключенВОтчет(СоставОтчета, "Строка4111") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4111", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4112") И ПоказательВключенВОтчет(СоставОтчета, "Строка4112") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4112", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4113") И ПоказательВключенВОтчет(СоставОтчета, "Строка4113") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4113", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4119") И ПоказательВключенВОтчет(СоставОтчета, "Строка4119") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4119", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4120") И ПоказательВключенВОтчет(СоставОтчета, "Строка4120") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4120", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4121") И ПоказательВключенВОтчет(СоставОтчета, "Строка4121"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4122") И ПоказательВключенВОтчет(СоставОтчета, "Строка4122"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4123") И ПоказательВключенВОтчет(СоставОтчета, "Строка4123"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4124") И ПоказательВключенВОтчет(СоставОтчета, "Строка4124"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4129") И ПоказательВключенВОтчет(СоставОтчета, "Строка4129")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4120", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4121") И ПоказательВключенВОтчет(СоставОтчета, "Строка4121") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4121", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4122") И ПоказательВключенВОтчет(СоставОтчета, "Строка4122") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4122", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4123") И ПоказательВключенВОтчет(СоставОтчета, "Строка4123") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4123", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4124") И ПоказательВключенВОтчет(СоставОтчета, "Строка4124") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4124", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4129") И ПоказательВключенВОтчет(СоставОтчета, "Строка4129") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4129", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказательВключенВОтчет(СоставОтчета, "Строка4100") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4100", ВертикальныеОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьПодраздел42 Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть42_Заголовок", ВертикальныеОбласти);
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4210") И ПоказательВключенВОтчет(СоставОтчета, "Строка4210") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4210", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4211") И ПоказательВключенВОтчет(СоставОтчета, "Строка4211"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4212") И ПоказательВключенВОтчет(СоставОтчета, "Строка4212"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4213") И ПоказательВключенВОтчет(СоставОтчета, "Строка4213"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4214") И ПоказательВключенВОтчет(СоставОтчета, "Строка4214"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4219") И ПоказательВключенВОтчет(СоставОтчета, "Строка4219")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4210", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4211") И ПоказательВключенВОтчет(СоставОтчета, "Строка4211") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4211", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4212") И ПоказательВключенВОтчет(СоставОтчета, "Строка4212") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4212", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4213") И ПоказательВключенВОтчет(СоставОтчета, "Строка4213") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4213", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4214") И ПоказательВключенВОтчет(СоставОтчета, "Строка4214") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4214", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4219") И ПоказательВключенВОтчет(СоставОтчета, "Строка4219") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4219", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4220") И ПоказательВключенВОтчет(СоставОтчета, "Строка4220") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4220", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4221") И ПоказательВключенВОтчет(СоставОтчета, "Строка4221"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4222") И ПоказательВключенВОтчет(СоставОтчета, "Строка4222"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4223") И ПоказательВключенВОтчет(СоставОтчета, "Строка4223"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4224") И ПоказательВключенВОтчет(СоставОтчета, "Строка4224"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4229") И ПоказательВключенВОтчет(СоставОтчета, "Строка4229")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4220", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4221") И ПоказательВключенВОтчет(СоставОтчета, "Строка4221") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4221", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4222") И ПоказательВключенВОтчет(СоставОтчета, "Строка4222") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4222", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4223") И ПоказательВключенВОтчет(СоставОтчета, "Строка4223") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4223", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4224") И ПоказательВключенВОтчет(СоставОтчета, "Строка4224") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4224", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4229") И ПоказательВключенВОтчет(СоставОтчета, "Строка4229") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4229", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказательВключенВОтчет(СоставОтчета, "Строка4200") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4200", ВертикальныеОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьПодраздел41 ИЛИ ВыводитьПодраздел42 Тогда
		СписокПечатныхФорм.Добавить(ПечатнаяФорма);
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть02");
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть021", ВертикальныеОбласти);
		
		Если ПечатьБезКодов Тогда
			ПечатнаяФорма.Область(2, 2).ШиринаКолонки = 62.75;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПодраздел43 Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть43_Заголовок", ВертикальныеОбласти);
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4310") И ПоказательВключенВОтчет(СоставОтчета, "Строка4310") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4310", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4311") И ПоказательВключенВОтчет(СоставОтчета, "Строка4311"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4312") И ПоказательВключенВОтчет(СоставОтчета, "Строка4312"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4313") И ПоказательВключенВОтчет(СоставОтчета, "Строка4313"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4314") И ПоказательВключенВОтчет(СоставОтчета, "Строка4314"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4319") И ПоказательВключенВОтчет(СоставОтчета, "Строка4319")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4310", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4311") И ПоказательВключенВОтчет(СоставОтчета, "Строка4311") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4311", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4312") И ПоказательВключенВОтчет(СоставОтчета, "Строка4312") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4312", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4313") И ПоказательВключенВОтчет(СоставОтчета, "Строка4313") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4313", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4314") И ПоказательВключенВОтчет(СоставОтчета, "Строка4314") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4314", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4319") И ПоказательВключенВОтчет(СоставОтчета, "Строка4319") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4319", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4320") И ПоказательВключенВОтчет(СоставОтчета, "Строка4320") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4320", ВертикальныеОбласти);
			Если (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4321") И ПоказательВключенВОтчет(СоставОтчета, "Строка4321"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4322") И ПоказательВключенВОтчет(СоставОтчета, "Строка4322"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4323") И ПоказательВключенВОтчет(СоставОтчета, "Строка4323"))
			 ИЛИ (ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4329") И ПоказательВключенВОтчет(СоставОтчета, "Строка4329")) Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ВТомЧисле4320", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4321") И ПоказательВключенВОтчет(СоставОтчета, "Строка4321") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4321", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4322") И ПоказательВключенВОтчет(СоставОтчета, "Строка4322") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4322", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4323") И ПоказательВключенВОтчет(СоставОтчета, "Строка4323") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4323", ВертикальныеОбласти);
			КонецЕсли;
			Если ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, "ОсновнаяЧасть4329") И ПоказательВключенВОтчет(СоставОтчета, "Строка4329") Тогда
				ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4329", ВертикальныеОбласти);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказательВключенВОтчет(СоставОтчета, "Строка4300") Тогда
			ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4300", ВертикальныеОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4400", ВертикальныеОбласти);
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4450", ВертикальныеОбласти);
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4500", ВертикальныеОбласти);
	
	Если ПоказательВключенВОтчет(СоставОтчета, "Строка4490") Тогда
		ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть4490", ВертикальныеОбласти);
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ПустаяСтрока2");
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "Ограничители2");
	УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьОЦИС(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент;
	
	ПечатьБезКодов = (ПараметрыПечати.ВидПечати = "ПоказатьБланкБезКодов");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть1");
	
	ВертикальныеОбласти = Новый Массив;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть01");
	Если НЕ ПечатьБезКодов Тогда
		ВертикальныеОбласти.Добавить("ВертикальнаяЧасть02");
	КонецЕсли;
	ВертикальныеОбласти.Добавить("ВертикальнаяЧасть03");
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть2", ВертикальныеОбласти);
	
	Если ПечатьБезКодов Тогда
		ПечатнаяФорма.Область(13, 2).ШиринаКолонки = 67.25;
	КонецЕсли;
	
	ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, "ОсновнаяЧасть3");
	
	УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция МакетОтчета(ИмяРаздела)
	
	ИмяМакетаОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))
	                + "_" + ИмяРаздела;
	МакетОтчета = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаОтчета);
	
	ИсправитьМакетПоПериодуОтчетности(МакетОтчета, ИмяРаздела);
	
	Возврат МакетОтчета;
	
КонецФункции

&НаСервере
Процедура ИсправитьМакетПоПериодуОтчетности(МакетОтчета, ИмяРаздела)
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		// Изменения по приказу Минфина от 19.04.2019 № 61н.
		ОбластьЗаголовокОргКодОКВЭД = МакетОтчета.Области.Найти("ЗаголовокОргКодОКВЭД");
		Если ОбластьЗаголовокОргКодОКВЭД <> Неопределено Тогда
			ЗаголовокОргКодОКВЭД = ОбластьЗаголовокОргКодОКВЭД.Текст;
			ЗаголовокОргКодОКВЭД = ЗаголовокОргКодОКВЭД + " 2";
			ОбластьЗаголовокОргКодОКВЭД.Текст = ЗаголовокОргКодОКВЭД;
		КонецЕсли;
		
		ОбластьКодФормыПоОКУД = МакетОтчета.Области.Найти("КодФормыПоОКУД");
		Если ОбластьКодФормыПоОКУД <> Неопределено Тогда
			Если ИмяРаздела = "ОЦИС" Тогда
				ОбластьКодФормыПоОКУД.Текст = "0710003";
			КонецЕсли;
			
			Если ИмяРаздела = "ОИК" Тогда
				ОбластьКодФормыПоОКУД.Текст = "0710004";
				
				Для Инд = 2 По 4 Цикл
					ОбластьКодСтраницыПоОКУД = МакетОтчета.Области.Найти("КодСтраницыПоОКУД" + Инд);
					ОбластьКодСтраницыПоОКУД.Текст = "Форма 0710004 с." + Инд;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИмяРаздела = "ОДДС" Тогда
				ОбластьКодФормыПоОКУД.Текст = "0710005";
			КонецЕсли;
			
		КонецЕсли;
		
		// Изменения по формату электронного представленя отчета версии 5.03
		Если ИмяРаздела = "Баланс" Тогда
			МакетОтчета.Области.ДатаУтвОтчетностиЗаголовок.Очистить(Истина, Истина, Истина);
			МакетОтчета.Области.ДатаУтвОтчетностиЗаголовок.Защита = Истина;
			
			МакетОтчета.Области.ДатаУтвОтчетности.Очистить(Истина, Истина, Истина);
			МакетОтчета.Области.ДатаУтвОтчетности.Защита = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчетОтложенногоНалогаБалансовымМетодом(Организация, КонецПериодаОтчета)
	
	УчетОтложенногоНалогаБалансовымМетодом = (КонецПериодаОтчета >= '2020-01-01')
		ИЛИ РегламентированнаяОтчетность.УчетОтложенногоНалогаБалансовымМетодом(Организация, КонецПериодаОтчета);
	
	Возврат УчетОтложенногоНалогаБалансовымМетодом;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПодсказкуОЦИС()
	
	ИмяФормыПодсказки = Лев(ЭтотОбъект.ИмяФормы, СтрНайти(ЭтотОбъект.ИмяФормы, ".Форма.") + 6)
	                  + "ПодсказкаОЦИС2015Кв4";
	ОткрытьФорму(ИмяФормыПодсказки, , ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФайлыДляБанка()
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	НачатьТранзакцию();
	
	СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПодготовкиФайловДляБанка()
	
	ШаблонТекстаПредупреждения = НСтр("ru='В информационной базе сохранены печатные формы отчета %1 для передачи в банк в составе отчетности заемщика'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаПредупреждения, Заголовок);
	
	ПоказатьПредупреждение( , ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ПолноеИмяФормы) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПолноеИмяФормы);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ПолноеИмяФормы)
	
	Форма_Имя = СтрЗаменить(ПолноеИмяФормы, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ПолноеИмяФормы)
	
	Возврат Сред(ПолноеИмяФормы, СтрНайти(ПолноеИмяФормы, ".Форма.") + 7);
	
КонецФункции

#Область ИнтерфейсОбращенияКМодулюОтчета

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьВозможностьВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета,
		ПараметрыВыгрузки,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьДанные(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		Узел,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		мДанныеОтчета,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПараметрыВыгрузкиОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьДанными(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ПараметрыВыгрузки,
		ДеревоВыгрузки,
		ЭтотОбъект,
		мДанныеОтчета,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПолучитьСписокВычитаемыхПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция НазваниеОПУ()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НазваниеОПУ(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ДатаПодписи);
	
КонецФункции

&НаСервере
Функция НазваниеОЦИС()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НазваниеОЦИС(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция ТипАдресаПоУмолчанию()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ТипАдресаПоУмолчанию(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		ДатаПодписи);
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПоказатьПериод(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ТабличныйДокумент,
		СтруктураРеквизитовФормы,
		НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СведенияОбОрганизации = Неопределено)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ТабличныйДокумент,
		СтруктураРеквизитовФормы,
		ДатаПодписи,
		ВПрограммеИзмененаДатаПодписи,
		СведенияОбОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяРаздела, НастройкиРаздела, СписокНастроек)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ВосстановитьСохраненныеНастройкиСоставаПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ИмяРаздела,
		НастройкиРаздела,
		СписокНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКодЕдиницыИзмерения()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПоказатьКодЕдиницыИзмерения(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ТабличныйДокумент,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция НастройкиСоставаПоказателейОтчета()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	НастройкиРеглОтчета = ОбъектОтчета.НастройкиРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	СохрНастройкиСоставаПоказателейОтчета = Новый Структура;
	
	Для Каждого Настройки Из НастройкиРеглОтчета Цикл
		КонвертироватьДанныеФормыДеревоВДеревоЗначений(Настройки.Значение, ЭтотОбъект["Настройки" + Настройки.Ключ]);
		СохрНастройкиСоставаПоказателейОтчета.Вставить(Настройки.Ключ, Настройки.Значение);
	КонецЦикла;
	
	Возврат СохрНастройкиСоставаПоказателейОтчета;
	
КонецФункции

&НаСервере
Функция РазделыРеглОтчета()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция СтруктураСтраницОтчета()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.СтруктураСтраницОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		ДатаПодписи);
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаОбъекта(ПараметрыРеглОтчета)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНастройкиСоставаПоказателейОтчетов(НастройкиОтчета)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ИнициализироватьНастройкиСоставаПоказателейОтчетов(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		НастройкиСоставаПоказателейОтчета,
		НастройкиОтчета);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВариантыЗаполнения(ТаблицаСоставПоказателей)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьВариантыЗаполнения(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мСтруктураВариантыЗаполнения,
		ТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетностиОбъекта()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.УстановитьВидСдачиОтчетности(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ТабличныйДокумент,
		ВидСдачиОтчетности);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокумент(ПараметрыЗаписи)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ЗаписатьДокумент(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ПараметрыЗаписи)
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаСервере
Функция ПустаяСтруктураДанныхФайла()
	
	СтруктураДанныхФайла = Новый Структура;
	СтруктураДанныхФайла.Вставить("СведенияИзменены", Ложь);
	СтруктураДанныхФайла.Вставить("ХранилищеФайла");
	СтруктураДанныхФайла.Вставить("ИмяФайла");
	СтруктураДанныхФайла.Вставить("Размер");
	СтруктураДанныхФайла.Вставить("ДатаДобавления");
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

&НаСервере
Функция ПервичнаяСтруктураБухгалтерскойОтчетности()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураРаздела = Новый Структура();
		СтруктураРаздела.Вставить("ИмяСтраницы",                    "Баланс");
		СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_БалансНКО");
		СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "БалансНКО");
		СтруктураРаздела.Вставить("ИдентификаторАвтозаполнения",    "БалансНКО");
		
		СоставНастройкаОтчета.Вставить("БалансНКО", СтруктураРаздела);
	Иначе	
		СтруктураРаздела = Новый Структура();
		СтруктураРаздела.Вставить("ИмяСтраницы",                    "Баланс");
		СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_Баланс");
		СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "Баланс");
		СтруктураРаздела.Вставить("ИдентификаторАвтозаполнения",    "Баланс");
		
		СоставНастройкаОтчета.Вставить("Баланс", СтруктураРаздела);
	КонецЕсли;
	    		
	// Отчет о финансовых результатах.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОПУ");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_ОПУ");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОПУ");
	
	СоставНастройкаОтчета.Вставить("ОПУ", СтруктураРаздела);
	
	// Отчет об изменениях капитала.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_ОИК");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураРаздела);
	
	// Отчет о движении денежных средств.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_ОДДС");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураРаздела);
	
	// Отчет о целевом использовании средств.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОЦИС");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_ОЦИС");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОЦИС");
	
	СоставНастройкаОтчета.Вставить("ОЦИС", СтруктураРаздела);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСписковВыбора = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	
	Для Каждого Область Из МакетСписковВыбора.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , 4);
			ТаблСписка.Колонки.Добавить("Название",);
			
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = СокрЛП(МакетСписковВыбора.Область(НомСтр, 1).Текст);
				НовСтрока.Название = СокрЛП(МакетСписковВыбора.Область(НомСтр, 2).Текст);
			КонецЦикла;
			
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010000102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000102"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010000202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010000502", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000502"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010000702", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000702"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010007102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010007102"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010007202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010007202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010000902", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010000902"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000010001202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000010001202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000020000202", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000202"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000020000402", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000020000402"]);
	
	ИмяСписка = ?(УчетОтложенногоНалогаБалансовымМетодом(
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),
		"П000020000602_2020", "П000020000602");
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000020000602", 4, , "Выбор кода строки", КоллекцияСписковВыбора[ИмяСписка]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей,
		"П000100620102", 4, , "Выбор кода строки", КоллекцияСписковВыбора["П000100620102"]);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДискФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
				
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяУдаляемогоФайла)
	
	УдаляемыйФайл = Новый Файл(ИмяУдаляемогоФайла);
	Если УдаляемыйФайл.Существует() Тогда
		УдалитьФайлы(ИмяУдаляемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = Неопределено;
	СтруктураХранения.ИмяФайла         = Неопределено;
	СтруктураХранения.Размер           = Неопределено;
	СтруктураХранения.ДатаДобавления   = Неопределено;
	
	// Учет различий в хранении дополнительных файлов в "старой" и "новой" версии реализации.
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлЗаявленияСоюзаСельхозпроизводителей" Тогда
		ИмяФайлаЗаявленияРевизионногоСоюза = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВывестиИнформациюОПрикрепленномФайле(ВидДополнительногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюОПрикрепленномФайле(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Если Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда
		
		// Учет различий в хранении дополнительных файлов в "старой" и "новой" версии реализации.
		СтароеИмяФайла = "";
		
		Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки"
			И ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
			СтароеИмяФайла = ИмяФайлаПояснительнойЗаписки;
		ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения"
			И ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
			СтароеИмяФайла = ИмяФайлаАудиторскогоЗаключения;
		ИначеЕсли ВидДополнительногоФайла = "ФайлЗаявленияСоюзаСельхозпроизводителей"
			И ЗначениеЗаполнено(ИмяФайлаЗаявленияРевизионногоСоюза) Тогда
			СтароеИмяФайла = ИмяФайлаЗаявленияРевизионногоСоюза;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог, ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузки = ПолучитьИмяВременногоФайла();
	
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	
	Файл = Новый Файл(ФайлЗагрузки);
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресФайла;
	СтруктураХранения.ИмяФайла         = ИмяФайла;
	СтруктураХранения.Размер           = Файл.Размер();
	СтруктураХранения.ДатаДобавления   = ТекущаяДатаСеанса();
	
	Модифицированность = Истина;
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(ВидДополнительногоФайла, ЗаголовокОкнаВыбора)
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ВидДополнительногоФайла);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = ЗаголовокОкнаВыбора;
	ДиалогВыбораФайла.Фильтр = "Файл PDF (*.pdf)|*.pdf";
	
	НачатьПомещениеФайлов(ОповещениеВыбора, , ДиалогВыбораФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВидДополнительногоФайла = ДополнительныеПараметры;
	
	ОписаниеФайла = ПомещенныеФайлы[0];
	
	ПолноеИмяФайла = ОписаниеФайла.Имя;
	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	
	АдресХранения = ОписаниеФайла.Хранение;
	РазмерФайла = ПолучитьИзВременногоХранилища(АдресХранения).Размер();
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресХранения;
	СтруктураХранения.ИмяФайла         = ЭлементыИмениФайла.Имя;
	СтруктураХранения.Размер           = РазмерФайла;
	СтруктураХранения.ДатаДобавления   = ТекущаяДата();
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСПостпроверкой(ВидДополнительногоФайла)
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлСПостпроверкойЗавершение", ЭтотОбъект, ВидДополнительногоФайла);
	
	Попытка
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
		                             |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСПостпроверкойЗавершение(Результат, АдресФайла, ВыбИмяФайла, ВидДополнительногоФайла) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".DOC"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".XLS"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".RTF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			ТекстПредупреждения = НСтр(
				"ru='Файл пояснительной записки должен иметь одно из допустимых расширений: DOC, XLS, RTF, TIF, PDF, JPG!'");
			
		КонецЕсли;
		
	Иначе
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			Если ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
				ВидДопФайла = "Файл аудиторского заключения";
			Иначе
				ВидДопФайла = "Файл заявления ревизионного союза сельскохозяйственных производителей";
			КонецЕсли;
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='%1 должен иметь одно из допустимых расширений: TIF, PDF, JPG!'"), ВидДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
			
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог, ВидДополнительногоФайла);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
		                             |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлЗаявленияСоюзаСельхозпроизводителей" Тогда
		ИмяФайлаЗаявленияРевизионногоСоюза = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
	ВывестиИнформациюОПрикрепленномФайле(ВидДополнительногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВывода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения();
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоставПоказателейЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		КопироватьДанныеФормы(РезультатНастройки, ЭтотОбъект[НастройкиСоставаПоказателейОтчета[СтруктураРеквизитовФормы.НаимТекущегоРаздела]]);
		
	КонецЕсли;
	
	ПрименитьНастройкиСоставаПоказателейОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Истина;
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
	 Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
	 Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
	 Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер")) Тогда
	 
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ОргОтрасль" Тогда
				
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОПУ.Вставить("ОргОтрасль", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОПУ.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		
	ИначеЕсли Область.Имя = "ОргКодОКВЭД" Тогда
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД",	Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОПУ.Вставить("ОргКодОКВЭД", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОПУ.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
	ИначеЕсли Область.Имя = "ДатаПодписиОтчета" Тогда
		
		ДатаПодписи = Область.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
		Если СтруктураДанныхОИК.Свойство("ДатаПодписиОтчета") Тогда
			СтруктураДанныхОИК.ДатаПодписиОтчета = ДатаПодписи;
		КонецЕсли;
			
		Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			СтруктураДанныхБалансНКО.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		Иначе
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		КонецЕсли;
		
		Если СтруктураДанныхОДДС.Свойство("ДатаПодписиОтчета") Тогда
			СтруктураДанныхОДДС.ДатаПодписиОтчета = ДатаПодписи;
		КонецЕсли;
		
		Если СтруктураДанныхОИК.Свойство("ДатаПодписиОтчета") Тогда
			СтруктураДанныхОИК.ДатаПодписиОтчета = ДатаПодписи;
		КонецЕсли;
		
		Если СтруктураДанныхОПУ.Свойство("ДатаПодписиОтчета") Тогда
			СтруктураДанныхОПУ.ДатаПодписиОтчета = ДатаПодписи;
		КонецЕсли;
		
		Если СтруктураДанныхОЦИС.Свойство("ДатаПодписиОтчета") Тогда
			СтруктураДанныхОЦИС.ДатаПодписиОтчета = ДатаПодписи;
		КонецЕсли;
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргОтрасль.Значение);
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргКодОКВЭД);
		
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргКодОКВЭД);
																	 
	КонецЕсли;
	
	Если СтруктураДанныхОИК.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргКодОКВЭД);
																	 
	КонецЕсли;
		
	Если СтруктураДанныхОЦИС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргКодОКВЭД);
																	 
	КонецЕсли;
		
	Если СтруктураДанныхБалансНКО.Свойство("ОргКодОКВЭД") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБалансНКО.ОргКодОКВЭД);
																	 
	КонецЕсли;
	
	Если СтруктураДанныхОПУ.Свойство("ОргКодОКВЭД") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОПУ.ОргКодОКВЭД);
																	 
	КонецЕсли;
																	 
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргОтрасль);
		
	КонецЕсли;
		
	Если СтруктураДанныхОИК.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОЦИС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхБалансНКО.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБалансНКО.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОПУ.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОПУ.ОргОтрасль);
		
	КонецЕсли;
																 
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "НастройкаСоставаСтрок" Тогда
		ОткрытьСоставПоказателей(Неопределено);
		Модифицированность = Истина;
		
		Возврат;
		
	ИначеЕсли Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтотОбъект);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		Модифицированность = Истина;
		
		Возврат;
		
	ИначеЕсли Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2019-01-01' Тогда
			Периоды.Добавить("2", "Промежуточная при ликвидации/реорганизации");
		КонецЕсли;
		Периоды.Добавить("3", "Ликвидационная");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "ОргПочтАдрес" Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТаблицаВыбора.Очистить();
		
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;

		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
			
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;

		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Если Область.Имя = "Подсказка6200" ИЛИ Область.Имя = "Подсказка6300" Тогда
		ПоказатьПодсказкуОЦИС();
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтотОбъект, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение
				+ Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтотОбъект, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрЮР";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		
		СтруктураРеквизитовФормы.ТипАдреса = "АдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизацииВРазделахНаСервере()
	
	СведенияОбОрганизации = Новый Структура;
	
	ЗаполнитьСведенияОбОрганизации(, СведенияОбОрганизации);
	
	Если ТипЗнч(СведенияОбОрганизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногостраничностьВРазделе
			ИЛИ Лев(Раздел.ИмяСтраницы, 6) = "Баланс"
			ИЛИ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы];
		
		Если ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Пок Из СведенияОбОрганизации Цикл
			Если ДанныеРаздела.Свойство(Пок.Ключ) Тогда
				ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьНаСервере(, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс"
		 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "БалансНКО" Тогда
			
			НомерКорректировки = 0;
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
			СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
			ДатаПодписи = Неопределено;
			ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
			ВидСдачиОтчетности = 1;
			
			СтруктураДанныхОИК.ДатаПодписиОтчета    = ДатаПодписи;
			Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
				СтруктураДанныхБалансНКО.ДатаПодписиОтчета = ДатаПодписи;
			Иначе
				СтруктураДанныхБаланс.ДатаПодписиОтчета = ДатаПодписи;
			КонецЕсли;
			СтруктураДанныхОДДС.ДатаПодписиОтчета   = ДатаПодписи;
			СтруктураДанныхОИК.ДатаПодписиОтчета    = ДатаПодписи;
			СтруктураДанныхОПУ.ДатаПодписиОтчета    = ДатаПодписи;
			СтруктураДанныхОЦИС.ДатаПодписиОтчета  = ДатаПодписи;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения<> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату", "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода", "На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему", "На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваРазделовОтчета()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтрокаУровня1.ИмяСтраницы = "БалансНКО";
	Иначе
		СтрокаУровня1.ИмяСтраницы = "Баланс";
	КонецЕсли;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОПУ"; // Отчет о прибылях и убытках
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИС"; // Отчет о целевом использовании полученных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// БАЛАНС
	//
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000603", "П000010000103;П000010000203;П000010000303;П000010000403;П000010000503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000604", "П000010000104;П000010000204;П000010000304;П000010000404;П000010000504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000605", "П000010000105;П000010000205;П000010000305;П000010000405;П000010000505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001303", "П000010000703;П000010007103;П000010007203;П000010000803;П000010000903;П000010001003;П000010001103;П000010001203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001304", "П000010000704;П000010007104;П000010007204;П000010000804;П000010000904;П000010001004;П000010001104;П000010001204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010001305", "П000010000705;П000010007105;П000010007205;П000010000805;П000010000905;П000010001005;П000010001105;П000010001205");
	
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020000703", "П000020000103;П000020000203;П000020000303;П000020000403;П000020000503;П000020000603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020000704", "П000020000104;П000020000204;П000020000304;П000020000404;П000020000504;П000020000604");
	
	// ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321108", "П000100321107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321208", "П000100321205;П000100321207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321308", "П000100321305;П000100321307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321006", "П000100321606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321008", "П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П000100321107;П000100321205;П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322108", "П000100322107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322208", "П000100322205;П000100322207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322308", "П000100322305;П000100322307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322708", "П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008", "П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100324007", "П000100324006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322006", "П000100322606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008", "П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331108", "П000100331107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331208", "П000100331205;П000100331207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331308", "П000100331305;П000100331307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331006", "П000100331606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331008", "П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П000100331107;П000100331205;П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332108", "П000100332107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332208", "П000100332205;П000100332207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332308", "П000100332305;П000100332307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332708", "П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332006", "П000100332606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332008", "П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100334007", "П000100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340206", "П000100340203;П000100340204;П000100340205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341206", "П000100341203;П000100341204;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342206", "П000100342203;П000100342204;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350203", "П000100340203;П000100341203;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350204", "П000100340204;П000100341204;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350205", "П000100340205;П000100341205;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350206", "П000100350203;П000100350204;П000100350205;П000100340203;П000100341203;П000100342203;П000100340205;П000100341205;П000100342205;П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341003", "П000100341103;П000100341203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341004", "П000100341104;П000100341204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341005", "П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342003", "П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342004", "П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342005", "П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П000100341203;П000100341104;П000100341204;П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П000100342203;П000100342104;П000100342204;П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204;");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203;П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204;П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004;П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	
	// ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П000100411903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П000100411904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П000100421903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П000100421904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П000100431903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П000100431904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П000100431903;П000100432103;П000100432203;П000100432303;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П000100431904;П000100432104;П000100432204;П000100432304;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П000100431903;П000100432103;П000100432203;П000100432303;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П000100431904;П000100432104;П000100432204;П000100432304;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П000100431903;П000100432103;П000100432203;П000100432303;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П000100431904;П000100432104;П000100432204;П000100432304;П000100432904");
	
	// ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ ПОЛУЧЕННЫХ СРЕДСТВ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640003", "П000100610003;П000100620103;П000100624003;П000100625003;П000100631003;П000100632003;П000100633003;П000100635003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640004", "П000100610004;П000100620104;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620003", "П000100620103;П000100624003;П000100625003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620004", "П000100620104;П000100624004;П000100625004");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630003", "П000100631003;П000100632003;П000100633003;П000100635003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630004", "П000100631004;П000100632004;П000100633004;П000100635004");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	
	ЗначениеВДанныеФормы(СтруктураСтраницОтчета(), ЭтотОбъект["мДеревоСтраницОтчета"]);
	
	ТаблицаСоставПоказателей = ДанныеФормыВЗначение(мТаблицаСоставПоказателей, Тип("ТаблицаЗначений"));
	
	СформироватьВариантыЗаполнения(ТаблицаСоставПоказателей);
	
	ЗначениеВДанныеФормы(ТаблицаСоставПоказателей, мТаблицаСоставПоказателей);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить();
		
		ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение[0],
			ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ][0].ТаблицаВариантовЗаполнения);
		
		мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
		
		мСтруктураВариантыЗаполненияЭталон.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)
	
	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ПолеВыбораВидСдачиОтчетности = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ПолеВыбораВидСдачиОтчетности = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ПолеВыбораВидСдачиОтчетности = "Ликвидационная";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаРасшифровки;
	Перем Авторасчет;
	Перем СохраненнаяСтруктураМногострочныхЧастей;
	
	// В случае, если форма была скопирована, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если СписокСохранения.Свойство("ОкружениеСохранения")
		И СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		Для Каждого НастройкаСтраницы Из ДеревоНастройкиСтраниц.Строки Цикл
			Если НастройкаСтраницы.ИмяСтраницы = "Баланс" Тогда
				НастройкаСтраницы.ИмяСтраницы = "БалансНКО";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// Сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				Если СписокСохранения.Свойство("ОкружениеСохранения")
				   И СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации
				   И ЭлементСтруктуры.Ключ = "Баланс" Тогда
					
					мСтруктураВариантыЗаполнения.Вставить("БалансНКО", "БалансНКО");
					
					ЭтотОбъект["ТаблицаВариантыЗаполненияБалансНКО"].Очистить();
					
					Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
						ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполненияБалансНКО"].Добавить().ТаблицаВариантовЗаполнения;
						ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					КонецЦикла;
					
				Иначе
					мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
					
					ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
					
					Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
						ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
						ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать( ,
				"ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	// Флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Свойство("ОтчетностьВРосстат", ОтчетностьВРосстат);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СписокСохранения.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			ТаблЗнач = ЭлементСтруктуры.Значение.Состав;
			
			СтруктураЗнач = Новый Структура;
			МассивЗнач    = Новый Массив;
			
			Для Каждого СтрТаблЗнач Из ТаблЗнач Цикл
				СтруктураЗнач.Очистить();
				Для Каждого Колонка Из ТаблЗнач.Колонки Цикл
					СтруктураЗнач.Вставить(Колонка.Имя, СтрТаблЗнач[Колонка.Имя]);
				КонецЦикла;
				
				МассивЗнач.Добавить(СтруктураЗнач);
				
			КонецЦикла;
			
			ЭлементСтруктуры.Значение.Состав = МассивЗнач;
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента =
				СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	СписокДополнительныхФайлов = Неопределено;
	Если СписокСохранения.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов) И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки       = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения     = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		ИмяФайлаЗаявленияРевизионногоСоюза = СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
	КонецЕсли;
	
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка", ИмяФайлаПояснительнойЗаписки);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение", ИмяФайлаАудиторскогоЗаключения);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей, "Заявление союза сельхозпроизводителей",
		ИмяФайлаЗаявленияРевизионногоСоюза);
	
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.ТипАдреса);
	Если СтруктураРеквизитовФормы.ТипАдреса = Неопределено
	 ИЛИ ПустаяСтрока(СтруктураРеквизитовФормы.ТипАдреса)
	 ИЛИ СтрНайти("АдрФакт, АдрЮР, АдрПочт", СтруктураРеквизитовФормы.ТипАдреса) = 0 Тогда
		СтруктураРеквизитовФормы.ТипАдреса = ТипАдресаПоУмолчанию();
	КонецЕсли;
	
	СписокСохранения.Свойство("АдресВФормате9Запятых", СтруктураРеквизитовФормы.АдресВФормате9Запятых);
	Если СтруктураРеквизитовФормы.АдресВФормате9Запятых = Неопределено Тогда
		СтруктураРеквизитовФормы.АдресВФормате9Запятых =
			РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтруктураРеквизитовФормы.ТипАдреса)
			[СтруктураРеквизитовФормы.ТипАдреса];
	КонецЕсли;
	
	СписокСохранения.Свойство("АвторасчетПоказателей", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	// Сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// Добавление новых показателей в старые версии формы
	Если НЕ ПоказателиОтчета.ПолеТабличногоДокументаОЦИС.Свойство("П000100630003") Тогда
		ПоказателиОтчета.ПолеТабличногоДокументаОЦИС.Вставить("П000100620003", 0);
		ПоказателиОтчета.ПолеТабличногоДокументаОЦИС.Вставить("П000100620004", 0);
		ПоказателиОтчета.ПолеТабличногоДокументаОЦИС.Вставить("П000100630003", 0);
		ПоказателиОтчета.ПолеТабличногоДокументаОЦИС.Вставить("П000100630004", 0);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СохраненныеНастройкиСоставаПоказателейОтчета = Неопределено;
	Если СписокСохранения.Свойство("НастройкиСоставаПоказателейОтчета",
		СохраненныеНастройкиСоставаПоказателейОтчета) Тогда
		Для Каждого РазделОтчета Из СохраненныеНастройкиСоставаПоказателейОтчета Цикл
			ИмяРаздела = РазделОтчета.Ключ;
			НастройкиРаздела = РазделОтчета.Значение;
			Если НастройкиСоставаПоказателейОтчета.Свойство(ИмяРаздела) Тогда
				СписокНастроек = "";
				Если НастройкиРаздела.Колонки.Найти("ВключатьВОтчет") <> Неопределено Тогда
					СписокНастроек = СписокНастроек + ?(ПустаяСтрока(СписокНастроек), "", ", ") + "ВключатьВОтчет";
				КонецЕсли;
				Если НЕ ПустаяСтрока(СписокНастроек) Тогда
					ВосстановитьСохраненныеНастройкиСоставаПоказателей(ИмяРаздела, НастройкиРаздела, СписокНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СоставПоказателейОтчета Из СохраненныеНастройкиСоставаПоказателейОтчета Цикл
		ЭтотОбъект["Настройки" + СоставПоказателейОтчета.Ключ].ПолучитьЭлементы().Очистить();
		КонвертироватьДеревоЗначенийВДанныеФормыДерево(
			ЭтотОбъект["Настройки" + СоставПоказателейОтчета.Ключ], СоставПоказателейОтчета.Значение);
	КонецЦикла;
	
	СписокСохранения.Свойство("НастройкиФормыВыбораПечати", НастройкиФормыВыбораПечати);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
		   И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			Если СписокСохранения.Свойство("ОкружениеСохранения") И Раздел.ИмяСтраницы = "БалансНКО" Тогда
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + "Баланс"];
			Иначе
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИмяТекРаздела = "БалансНКО";
	Иначе
		ИмяТекРаздела = "Баланс";
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СписокСохранения.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	
	СписокСохранения.Свойство("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
	
	Если ЗначениеЗаполнено(Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок) Тогда
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	УстановитьФорматВывода(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла, ИмяДопФайлаПредыдущейВерсии)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			
			СтруктураДопФайла.Вставить("СведенияИзменены", Ложь);
			СтруктураДопФайла.ХранилищеФайла
				= ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор);
			СтруктураДопФайла.Вставить("ИмяФайла",       ЗаписьРегистраСведений.ИмяФайла);
			СтруктураДопФайла.Вставить("Размер",         ЗаписьРегистраСведений.Размер);
			СтруктураДопФайла.Вставить("ДатаДобавления", ЗаписьРегистраСведений.ДатаДобавления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВывода(Знач НаимРаздела)
	
	Перем СтруктураГруппы;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.ДелительПредставления = 1;
		СтруктураРеквизитовФормы.СтрокаФорматаПредставления =
			"ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.ДелительПредставления = 1000;
		СтруктураРеквизитовФормы.СтрокаФорматаПредставления =
			"ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.ДелительПредставления = 1000000;
		СтруктураРеквизитовФормы.СтрокаФорматаПредставления =
			"ЧЦ = 15; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
		
	КонецЕсли;
	
	ПоказатьКодЕдиницыИзмерения();
	
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если ТипДанныхПоказателя = "Е0" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ФорматируемаяОбласть.Формат = СтрЗаменить(СтруктураРеквизитовФормы.СтрокаФорматаПредставления, " ЧН=-;", "");
			
		ИначеЕсли ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.СтрокаФорматаПредставления;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект, ПараметрыОтчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
		
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
				
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		Если ВариантЗаполнения = 4 Тогда

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;

		ИначеЕсли ВариантЗаполнения = 5 Тогда

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина

		Иначе

			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрокаЧГ0(Инд);
					
				КонецЕсли;

				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				Если ВариантЗаполнения = 4 Тогда

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;

				ИначеЕсли ВариантЗаполнения = 5 Тогда

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;

				Иначе

					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					
				КонецЕсли;

				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
					
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНазванияОтчетов(ИмяТекРаздела)
	
	НазваниеОПУ = НазваниеОПУ();
	НазваниеОЦИС = НазваниеОЦИС();
	
	Если ИмяТекРаздела = "ОПУ" Тогда
		ТабличныйДокумент.Области.НазваниеОтчета.Текст = НазваниеОПУ;
	КонецЕсли;
	
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "ОПУ");
	
	Если НЕ РазделФормаОтчета = Неопределено Тогда
		РазделФормаОтчета.КолонкаРазделыОтчета = НазваниеОПУ;
	КонецЕсли;
	
	РазделОЦИС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "ОЦИС");
	
	Если НЕ РазделОЦИС = Неопределено Тогда
		РазделОЦИС.КолонкаРазделыОтчета = НазваниеОЦИС;
	КонецЕсли;
		
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "ОПУ");
	РазделФормаОтчета.Представление = НазваниеОПУ;
		
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "ОПУ");
	РазделФормаОтчета.Представление = НазваниеОПУ;
			
	РазделОЦИС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "ОЦИС");
	РазделОЦИС.Представление = НазваниеОЦИС;
	
	РазделОЦИС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "ОЦИС");
	РазделОЦИС.Представление = НазваниеОЦИС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		   И (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
		 ИЛИ (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 2
		   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль")
		   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД")))
		   И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетОтчета(Раздел.ИмяСтраницы));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
			
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль") Тогда
				ТабличныйДокумент.Области.ОргОтрасль.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргОтрасль;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД") Тогда
				ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргКодОКВЭД;
			КонецЕсли;
		
			ЗаполнитьСведенияОбОрганизации();
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		НазваниеЕдиницыИзмерения = "руб.";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб.";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		НазваниеЕдиницыИзмерения = "млн. руб.";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

#Область РасчетПоказателей

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если НЕ ЗначениеЗаполнено(ИмяСтраницыПанели) ИЛИ ИмяСтраницыПанели = "ОЦИС" Тогда
			// Синтетические показатели для выгрузки рассчитываются всегда
			РасчетНаСервере_ОЦИС_6200_6300(Форма, ОбластьИмя);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Баланс"
	 ИЛИ ИмяСтраницыПанели = "БалансНКО" Тогда
		
	 	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс"
		 ИЛИ Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "БалансНКО" Тогда
			
			Баланс = Форма.ТабличныйДокумент.Области;
			
			// Актив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000603, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000603.Значение = Баланс.П000010000103.Значение
				+ Баланс.П000010000203.Значение
				+ Баланс.П000010000303.Значение
				+ Баланс.П000010000403.Значение
				+ Баланс.П000010000503.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000604, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000604.Значение = Баланс.П000010000104.Значение
				+ Баланс.П000010000204.Значение
				+ Баланс.П000010000304.Значение
				+ Баланс.П000010000404.Значение
				+ Баланс.П000010000504.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000605, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000605.Значение = Баланс.П000010000105.Значение
				+ Баланс.П000010000205.Значение
				+ Баланс.П000010000305.Значение
				+ Баланс.П000010000405.Значение
				+ Баланс.П000010000505.Значение;
				
			КонецЕсли;
			
			// Пассив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001303, ОбластьИмя) > 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001303.Значение = Баланс.П000010007103.Значение
					+ Баланс.П000010007203.Значение
					+ Баланс.П000010000803.Значение
					+ Баланс.П000010000903.Значение
					+ Баланс.П000010001003.Значение
					+ Баланс.П000010001103.Значение
					+ Баланс.П000010001203.Значение;
					
				Иначе
					
					Баланс.П000010001303.Значение = Баланс.П000010000703.Значение
					+ Баланс.П000010000803.Значение
					+ Баланс.П000010000903.Значение
					+ Баланс.П000010001003.Значение
					+ Баланс.П000010001103.Значение
					+ Баланс.П000010001203.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001304, ОбластьИмя) > 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001304.Значение = Баланс.П000010007104.Значение
					+ Баланс.П000010007204.Значение
					+ Баланс.П000010000804.Значение
					+ Баланс.П000010000904.Значение
					+ Баланс.П000010001004.Значение
					+ Баланс.П000010001104.Значение
					+ Баланс.П000010001204.Значение;
					
				Иначе
					
					Баланс.П000010001304.Значение = Баланс.П000010000704.Значение
					+ Баланс.П000010000804.Значение
					+ Баланс.П000010000904.Значение
					+ Баланс.П000010001004.Значение
					+ Баланс.П000010001104.Значение
					+ Баланс.П000010001204.Значение;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001305, ОбластьИмя) > 0 Тогда
				
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001305.Значение = Баланс.П000010007105.Значение
					+ Баланс.П000010007205.Значение
					+ Баланс.П000010000805.Значение
					+ Баланс.П000010000905.Значение
					+ Баланс.П000010001005.Значение
					+ Баланс.П000010001105.Значение
					+ Баланс.П000010001205.Значение;
					
				Иначе
					
					Баланс.П000010001305.Значение = Баланс.П000010000705.Значение
					+ Баланс.П000010000805.Значение
					+ Баланс.П000010000905.Значение
					+ Баланс.П000010001005.Значение
					+ Баланс.П000010001105.Значение
					+ Баланс.П000010001205.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
			
			Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
				Баланс = Форма.СтруктураДанныхБалансНКО;
			Иначе
				Баланс = Форма.СтруктураДанныхБаланс;
			КонецЕсли;
						
			// Актив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000603, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000603 = Баланс.П000010000103
				+ Баланс.П000010000203
				+ Баланс.П000010000303
				+ Баланс.П000010000403
				+ Баланс.П000010000503;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000604, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000604 = Баланс.П000010000104
				+ Баланс.П000010000204
				+ Баланс.П000010000304
				+ Баланс.П000010000404
				+ Баланс.П000010000504;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000605, ОбластьИмя) > 0 Тогда
				
				Баланс.П000010000605 = Баланс.П000010000105
				+ Баланс.П000010000205
				+ Баланс.П000010000305
				+ Баланс.П000010000405
				+ Баланс.П000010000505;
				
			КонецЕсли;
			
			// Пассив
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001303, ОбластьИмя) > 0 Тогда
												
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001303 = Баланс.П000010007103
					+ Баланс.П000010007203
					+ Баланс.П000010000803
					+ Баланс.П000010000903
					+ Баланс.П000010001003
					+ Баланс.П000010001103
					+ Баланс.П000010001203;
					
				Иначе
					
					Баланс.П000010001303 = Баланс.П000010000703
					+ Баланс.П000010000803
					+ Баланс.П000010000903
					+ Баланс.П000010001003
					+ Баланс.П000010001103
					+ Баланс.П000010001203;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001304, ОбластьИмя) > 0 Тогда
								
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001304 = Баланс.П000010007104
					+ Баланс.П000010007204
					+ Баланс.П000010000804
					+ Баланс.П000010000904
					+ Баланс.П000010001004
					+ Баланс.П000010001104
					+ Баланс.П000010001204;
					
				Иначе
					
					Баланс.П000010001304 = Баланс.П000010000704
					+ Баланс.П000010000804
					+ Баланс.П000010000904
					+ Баланс.П000010001004
					+ Баланс.П000010001104
					+ Баланс.П000010001204;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010001305, ОбластьИмя) > 0 Тогда
								
				Если Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					
					Баланс.П000010001305 = Баланс.П000010007105
					+ Баланс.П000010007205
					+ Баланс.П000010000805
					+ Баланс.П000010000905
					+ Баланс.П000010001005
					+ Баланс.П000010001105
					+ Баланс.П000010001205;
					
				Иначе
					
					Баланс.П000010001305 = Баланс.П000010000705
					+ Баланс.П000010000805
					+ Баланс.П000010000905
					+ Баланс.П000010001005
					+ Баланс.П000010001105
					+ Баланс.П000010001205;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОПУ" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОПУ" Тогда
			
			ОПУ = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000703, ОбластьИмя) > 0 Тогда
				
				ОПУ.П000020000703.Значение = ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000303.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000603.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000704, ОбластьИмя) > 0 Тогда
				
				ОПУ.П000020000704.Значение = ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000304.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000604.Значение);
				
			КонецЕсли;
			
		Иначе
			
			ОПУ = Форма.СтруктураДанныхОПУ;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000703, ОбластьИмя) > 0 Тогда
				
				ОПУ.П000020000703 = ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000103)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000203)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000303)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000403)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000503)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000603);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020000704, ОбластьИмя) > 0 Тогда
				
				ОПУ.П000020000704 = ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000104)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000204)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000304)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000404)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000504)
				+ ОкруглитьЧислоПоФормату(Форма, ОПУ.П000020000604);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОИК" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК" Тогда
			
			ОИК = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100310008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310006.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310007.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321108.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321107.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321208.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321207.Значение);
				
			КонецЕсли;
		
		    Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321308.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321307.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321408.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321405.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321608.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321603.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321604.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321605.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321606.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321003.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321603.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321004.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321604.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321605.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321606.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321007.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321107.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321207.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321307.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321507.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321108.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321208.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321308.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321408.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321608.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322108.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322107.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322208.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322207.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322308.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322307.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322408.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322407.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322508.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322507.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322608.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322603.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322604.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322605.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322606.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322708.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322707.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322006.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322007.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100324007.Значение = - ОкруглитьЧислоПоФормату(Форма, ОИК.П000100324006.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322003.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322603.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322004.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322604.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322605.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322606.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322007.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322107.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322207.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322307.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322407.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322507.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322607.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322707.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322108.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322208.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322308.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322408.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322508.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322608.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322708.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100320008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320006.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320007.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331108.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331107.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331208.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331207.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331308.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331307.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331408.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331405.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331608.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331603.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331604.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331605.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331606.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331003.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331603.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331004.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331604.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331605.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331606.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331007.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331107.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331207.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331307.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331507.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331108.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331208.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331308.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331408.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331608.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332108.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332107.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332208.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332207.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332308.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332307.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332408.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332407.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332508.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332507.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332608.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332603.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332604.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332605.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332606.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332607.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332708.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332707.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332003.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332403.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332503.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332603.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332004.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332404.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332504.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332604.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332305.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332405.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332505.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332605.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332606.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332007.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332107.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332207.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332307.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332407.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332507.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332607.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332707.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332108.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332208.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332308.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332408.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332508.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332608.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332708.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100334007.Значение = - ОкруглитьЧислоПоФормату(Форма, ОИК.П000100334006.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100330008.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330006.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330007.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340105.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340106.Значение)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340103.Значение)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340104.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341106.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341105.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342106.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342105.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350103.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342103.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350104.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342104.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350105.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340105.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341105.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342105.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350106.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350103.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350104.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350105.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340206.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340205.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341206.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341205.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342206.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342205.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350203, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350203.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342203.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350204, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350204.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342204.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350205, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350205.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341205.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342205.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350206.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350203.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350204.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350205.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341003.Значение = ОИК.П000100341103.Значение
				+ ОИК.П000100341203.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341004.Значение = ОИК.П000100341104.Значение
				+ ОИК.П000100341204.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341005.Значение = ОИК.П000100341105.Значение
				+ ОИК.П000100341205.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342003.Значение = ОИК.П000100342103.Значение
				+ ОИК.П000100342203.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342004.Значение = ОИК.П000100342104.Значение
				+ ОИК.П000100342204.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342005.Значение = ОИК.П000100342105.Значение
				+ ОИК.П000100342205.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340006.Значение)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340003.Значение)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340004.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341005.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342005.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350003.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342003.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350004.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342004.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350005.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341005.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342005.Значение);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350006.Значение = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350003.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350004.Значение)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350005.Значение);
				
			КонецЕсли;
			
		Иначе
			
			ОИК = Форма.СтруктураДанныхОИК;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100310008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310006)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100310007);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321108 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321107);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321208 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321207);
				
			КонецЕсли;
		
		    Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321308 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321307);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321408 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321405);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321608 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321603)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321604)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321605)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321606)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321003 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321603);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321004 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321604);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321605);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321606);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321007 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321107)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321207)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321307)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321507)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100321008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321108)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321208)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321308)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321408)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100321608);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322108 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322107);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322208 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322207);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322308 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322307);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322408 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322407);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322508 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322507);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322608 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322603)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322604)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322605)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322606)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322708 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322707);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322006)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322007);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100324007 = - ОкруглитьЧислоПоФормату(Форма, ОИК.П000100324006);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322003 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322603);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322004 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322604);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322605);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322606);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322007 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322107)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322207)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322307)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322407)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322507)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322607)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322707);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100322008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322108)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322208)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322308)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322408)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322508)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322608)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100322708);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100320008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320006)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100320007);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331108 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331107);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331208 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331207);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331308 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331307);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331408 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331405);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331608 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331603)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331604)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331605)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331606)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331003 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331603);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331004 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331604);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331605);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331606);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331007 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331107)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331207)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331307)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331507)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100331008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331108)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331208)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331308)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331408)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100331608);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332108 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332107);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332208 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332207);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332308 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332307);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332408 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332407);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332508 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332507);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332608 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332603)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332604)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332605)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332606)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332607);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332708 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332707);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332003 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332403)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332503)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332603);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332004 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332404)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332504)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332604);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332305)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332405)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332505)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332605);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332606);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332007 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332107)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332207)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332307)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332407)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332507)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332607)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332707);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100332008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332108)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332208)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332308)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332408)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332508)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332608)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100332708);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100334007 = - ОкруглитьЧислоПоФормату(Форма, ОИК.П000100334006);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100330008 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330006)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100330007);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340105 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340106)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340103)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340104);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341106 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341103)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341104)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341105);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342106 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342103)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342104)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342105);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350103 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340103)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341103)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342103);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350104 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340104)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341104)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342104);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350105 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340105)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341105)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342105);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350106 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350103)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350104)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350105);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340206 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340205);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341206 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341205);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342206 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342205);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350203, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350203 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342203);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350204, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350204 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342204);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350205, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350205 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341205)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342205);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350206, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350206 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350203)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350204)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350205);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341003 = ОИК.П000100341103
				+ ОИК.П000100341203;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341004 = ОИК.П000100341104
				+ ОИК.П000100341204;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341005 = ОИК.П000100341105
				+ ОИК.П000100341205;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342003 = ОИК.П000100342103
				+ ОИК.П000100342203;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342004 = ОИК.П000100342104
				+ ОИК.П000100342204;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342005 = ОИК.П000100342105
				+ ОИК.П000100342205;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100340005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340006)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340003)
				- ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340004);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100341006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341005);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100342006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342005);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350003 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342003);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350004 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342004);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350005 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100340005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100341005)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100342005);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
				
				ОИК.П000100350006 = ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350003)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350004)
				+ ОкруглитьЧислоПоФормату(Форма, ОИК.П000100350005);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОДДС" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС" Тогда
			
			ОДДС = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100411003.Значение = ОДДС.П000100411103.Значение
				+ ОДДС.П000100411203.Значение
				+ ОДДС.П000100411303.Значение
				+ ОДДС.П000100411903.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100411004.Значение = ОДДС.П000100411104.Значение
				+ ОДДС.П000100411204.Значение
				+ ОДДС.П000100411304.Значение
				+ ОДДС.П000100411904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100412003.Значение = ОДДС.П000100412103.Значение
				+ ОДДС.П000100412203.Значение
				+ ОДДС.П000100412303.Значение
				+ ОДДС.П000100412403.Значение
				+ ОДДС.П000100412903.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100412004.Значение = ОДДС.П000100412104.Значение
				+ ОДДС.П000100412204.Значение
				+ ОДДС.П000100412304.Значение
				+ ОДДС.П000100412404.Значение
				+ ОДДС.П000100412904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100410003.Значение = ОДДС.П000100411003.Значение
				+ ОДДС.П000100412003.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100410004.Значение = ОДДС.П000100411004.Значение
				+ ОДДС.П000100412004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100421003.Значение = ОДДС.П000100421103.Значение
				+ ОДДС.П000100421203.Значение
				+ ОДДС.П000100421303.Значение
				+ ОДДС.П000100421403.Значение
				+ ОДДС.П000100421903.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100421004.Значение = ОДДС.П000100421104.Значение
				+ ОДДС.П000100421204.Значение
				+ ОДДС.П000100421304.Значение
				+ ОДДС.П000100421404.Значение
				+ ОДДС.П000100421904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100422003.Значение = ОДДС.П000100422103.Значение
				+ ОДДС.П000100422203.Значение
				+ ОДДС.П000100422303.Значение
				+ ОДДС.П000100422403.Значение
				+ ОДДС.П000100422903.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100422004.Значение = ОДДС.П000100422104.Значение
				+ ОДДС.П000100422204.Значение
				+ ОДДС.П000100422304.Значение
				+ ОДДС.П000100422404.Значение
				+ ОДДС.П000100422904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100420003.Значение = ОДДС.П000100421003.Значение
				+ ОДДС.П000100422003.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100420004.Значение = ОДДС.П000100421004.Значение
				+ ОДДС.П000100422004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100431003.Значение = ОДДС.П000100431103.Значение
				+ ОДДС.П000100431203.Значение
				+ ОДДС.П000100431303.Значение
				+ ОДДС.П000100431403.Значение
				+ ОДДС.П000100431903.Значение;
				
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100431004.Значение = ОДДС.П000100431104.Значение
				+ ОДДС.П000100431204.Значение
				+ ОДДС.П000100431304.Значение
				+ ОДДС.П000100431404.Значение
				+ ОДДС.П000100431904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100432003.Значение = ОДДС.П000100432103.Значение
				+ ОДДС.П000100432203.Значение
				+ ОДДС.П000100432303.Значение
				+ ОДДС.П000100432903.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100432004.Значение = ОДДС.П000100432104.Значение
				+ ОДДС.П000100432204.Значение
				+ ОДДС.П000100432304.Значение
				+ ОДДС.П000100432904.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100430003.Значение = ОДДС.П000100431003.Значение
				+ ОДДС.П000100432003.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100430004.Значение = ОДДС.П000100431004.Значение
				+ ОДДС.П000100432004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100440003.Значение = ОДДС.П000100410003.Значение
				+ ОДДС.П000100420003.Значение
				+ ОДДС.П000100430003.Значение;
				
			КонецЕсли;
	
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100440004.Значение = ОДДС.П000100410004.Значение
				+ ОДДС.П000100420004.Значение
				+ ОДДС.П000100430004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100450003.Значение = ОДДС.П000100440003.Значение
				+ ОДДС.П000100445003.Значение
				+ ОДДС.П000100449003.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100450004.Значение = ОДДС.П000100440004.Значение
				+ ОДДС.П000100445004.Значение
				+ ОДДС.П000100449004.Значение;
				
			КонецЕсли;
			
		Иначе
			
			ОДДС = Форма.СтруктураДанныхОДДС;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100411003 = ОДДС.П000100411103
				+ ОДДС.П000100411203
				+ ОДДС.П000100411303
				+ ОДДС.П000100411903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100411004 = ОДДС.П000100411104
				+ ОДДС.П000100411204
				+ ОДДС.П000100411304
				+ ОДДС.П000100411904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100412003 = ОДДС.П000100412103
				+ ОДДС.П000100412203
				+ ОДДС.П000100412303
				+ ОДДС.П000100412403
				+ ОДДС.П000100412903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100412004 = ОДДС.П000100412104
				+ ОДДС.П000100412204
				+ ОДДС.П000100412304
				+ ОДДС.П000100412404
				+ ОДДС.П000100412904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100410003 = ОДДС.П000100411003
				+ ОДДС.П000100412003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100410004 = ОДДС.П000100411004
				+ ОДДС.П000100412004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100421003 = ОДДС.П000100421103
				+ ОДДС.П000100421203
				+ ОДДС.П000100421303
				+ ОДДС.П000100421403
				+ ОДДС.П000100421903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100421004 = ОДДС.П000100421104
				+ ОДДС.П000100421204
				+ ОДДС.П000100421304
				+ ОДДС.П000100421404
				+ ОДДС.П000100421904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100422003 = ОДДС.П000100422103
				+ ОДДС.П000100422203
				+ ОДДС.П000100422303
				+ ОДДС.П000100422403
				+ ОДДС.П000100422903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100422004 = ОДДС.П000100422104
				+ ОДДС.П000100422204
				+ ОДДС.П000100422304
				+ ОДДС.П000100422404
				+ ОДДС.П000100422904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100420003 = ОДДС.П000100421003
				+ ОДДС.П000100422003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100420004 = ОДДС.П000100421004
				+ ОДДС.П000100422004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100431003 = ОДДС.П000100431103
				+ ОДДС.П000100431203
				+ ОДДС.П000100431303
				+ ОДДС.П000100431403
				+ ОДДС.П000100431903;
				
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100431004 = ОДДС.П000100431104
				+ ОДДС.П000100431204
				+ ОДДС.П000100431304
				+ ОДДС.П000100431404
				+ ОДДС.П000100431904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100432003 = ОДДС.П000100432103
				+ ОДДС.П000100432203
				+ ОДДС.П000100432303
				+ ОДДС.П000100432903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100432004 = ОДДС.П000100432104
				+ ОДДС.П000100432204
				+ ОДДС.П000100432304
				+ ОДДС.П000100432904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100430003 = ОДДС.П000100431003
				+ ОДДС.П000100432003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100430004 = ОДДС.П000100431004
				+ ОДДС.П000100432004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100440003 = ОДДС.П000100410003
				+ ОДДС.П000100420003
				+ ОДДС.П000100430003;
				
			КонецЕсли;
	
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100440004 = ОДДС.П000100410004
				+ ОДДС.П000100420004
				+ ОДДС.П000100430004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100450003 = ОДДС.П000100440003
				+ ОДДС.П000100445003
				+ ОДДС.П000100449003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
				
				ОДДС.П000100450004 = ОДДС.П000100440004
				+ ОДДС.П000100445004
				+ ОДДС.П000100449004;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОЦИС" Тогда
		РасчетНаСервере_ОЦИС(Форма, ОбластьИмя);
		РасчетНаСервере_ОЦИС_6200_6300(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		Расчет(Форма, "Баланс", ОбластьИмя);
		Расчет(Форма, "ОПУ",    ОбластьИмя);
		Расчет(Форма, "ОИК",    ОбластьИмя);
		Расчет(Форма, "ОДДС",   ОбластьИмя);
		Расчет(Форма, "ОЦИС",   ОбластьИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетНаСервере_ОЦИС(Форма, ОбластьИмя)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОЦИС" Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма.СтруктураДанныхОЦИС;
	КонецЕсли;
	
	Для Графа = 3 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010064000" + Графа], ОбластьИмя) > 0 Тогда
			Строка6100 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010061000" + Графа);
			Строка6201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062010" + Графа);
			Строка6240 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062400" + Графа);
			Строка6250 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062500" + Графа);
			Строка6310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063100" + Графа);
			Строка6320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063200" + Графа);
			Строка6330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063300" + Графа);
			Строка6350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063500" + Графа);
			
			РасчетСтроки6400 = Строка6100
			                 + Строка6201 + Строка6240 + Строка6250
			                 + Строка6310 + Строка6320 + Строка6330 + Строка6350;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010064000" + Графа, РасчетСтроки6400);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетНаСервере_ОЦИС_6200_6300(Форма, ОбластьИмя)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОЦИС" Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма.СтруктураДанныхОЦИС;
	КонецЕсли;
	
	Для Графа = 3 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010062000" + Графа], ОбластьИмя) > 0 Тогда
			Строка6201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062010" + Графа);
			Строка6240 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062400" + Графа);
			Строка6250 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010062500" + Графа);
			
			РасчетСтроки6200 = Строка6201 + Строка6240 + Строка6250;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010062000" + Графа, РасчетСтроки6200);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010063000" + Графа], ОбластьИмя) > 0 Тогда
			Строка6310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063100" + Графа);
			Строка6320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063200" + Графа);
			Строка6330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063300" + Графа);
			Строка6350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010063500" + Графа);
			
			РасчетСтроки6300 = Строка6310 + Строка6320 + Строка6330 + Строка6350;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010063000" + Графа, РасчетСтроки6300);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		ЗначениеПоказателя = РазмещениеДанных.Области[ИмяПоказателя].Значение;
	Иначе
		ЗначениеПоказателя = РазмещениеДанных[ИмяПоказателя];
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя);
	
	ЗначениеПоказателя = ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РазмещениеДанных.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	Иначе
		РазмещениеДанных[ИмяПоказателя] = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПрименитьНастройкиСоставаПоказателейОтчета(ИмяРаздела = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ИмяРаздела) Тогда
		Для Каждого Раздел Из НастройкиСоставаПоказателейОтчета Цикл
			ПрименитьНастройкиСоставаПоказателейОтчета(ЭтотОбъект[Раздел.Ключ]);
		КонецЦикла;
		
	Иначе
		Настройка = ЭтотОбъект[НастройкиСоставаПоказателейОтчета[ИмяРаздела]];
		
		Для Каждого СтрокаНастройки Из Настройка.ПолучитьЭлементы() Цикл
			УстановитьЗатенениеОбластиПоказателя(СтрокаНастройки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗатенениеОбластиПоказателя(СтрокаНастройки)
	
	Если СтрокаНастройки.ВключатьВОтчет Тогда
		ЦветТекста = Новый Цвет(0, 0, 0);
	Иначе
		ЦветТекста = Новый Цвет(179, 172, 134);
	КонецЕсли;
	
	Для Каждого ОбластьЗатенения Из СтрокаНастройки.ОбластиЗатенения Цикл
		Если ЗначениеЗаполнено(ОбластьЗатенения.ПолнаяОбласть) Тогда
			ОбластьПоказателя = ТабличныйДокумент.Области[ОбластьЗатенения.ПолнаяОбласть];
		ИначеЕсли ЗначениеЗаполнено(ОбластьЗатенения.ГоризонтальнаяЧасть) Тогда
			Верх = ТабличныйДокумент.Области[ОбластьЗатенения.ГоризонтальнаяЧасть].Верх;
			Низ = ТабличныйДокумент.Области[ОбластьЗатенения.ГоризонтальнаяЧасть].Низ;
			Лево = ОбластьЗатенения.Лево;
			Право = ОбластьЗатенения.Право;
			ОбластьПоказателя = ТабличныйДокумент.Область(Верх, Лево, Низ, Право);
		КонецЕсли;
		
		ОбластьПоказателя.ЦветТекста = ЦветТекста;
		ОбластьПоказателя.ЦветРамки  = ЦветТекста;
		
	КонецЦикла;
	
	Если ?(СтрокаНастройки.Отключаемость, СтрокаНастройки.ВключатьВОтчет, Истина) Тогда
		Для Каждого ПодчиненнаяСтрока Из СтрокаНастройки.ПолучитьЭлементы() Цикл
			УстановитьЗатенениеОбластиПоказателя(ПодчиненнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = СтруктураРеквизитовФормы.СтрокаФорматаПредставления;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти = Форма.СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		СтруктураМногострочнойЧасти = Форма.СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧГ=");
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
	ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
				СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РазделыРеглОтчета = РазделыРеглОтчета();
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		РазделыРеглОтчета.БалансНКО.Данные = СтруктураДанныхБалансНКО;
		РазделыРеглОтчета.Удалить("Баланс");
	Иначе
		РазделыРеглОтчета.Баланс.Данные = СтруктураДанныхБаланс;
		РазделыРеглОтчета.Удалить("БалансНКО");
	КонецЕсли;
	РазделыРеглОтчета.ОДДС.Данные = СтруктураДанныхОДДС;
	РазделыРеглОтчета.ОИК.Данные  = СтруктураДанныхОИК;
	РазделыРеглОтчета.ОПУ.Данные  = СтруктураДанныхОПУ;
	РазделыРеглОтчета.ОЦИС.Данные = СтруктураДанныхОЦИС;
	
	СтруктураВариантыЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивВариантовЗаполненияСтраниц = Новый Массив;
		Для Каждого СтрокаТаблицыВариантовЗаполнения Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивВариантовЗаполненияСтраниц.Добавить(ДанныеФормыВЗначение(
				СтрокаТаблицыВариантовЗаполнения.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		СтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивВариантовЗаполненияСтраниц);
	КонецЦикла;
	
	СохрНастройкиСоставаПоказателейОтчета = НастройкиСоставаПоказателейОтчета();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""),
											   СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.")
											   - 1), 7)].Имя);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", СтруктураВариантыЗаполнения);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыЗаписи.Вставить("ТипАдреса", СтруктураРеквизитовФормы.ТипАдреса);
	ПараметрыЗаписи.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	ПараметрыЗаписи.Вставить("АвторасчетПоказателей", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("БалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыЗаписи.Вставить("ПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("СтруктураМногострочныхЧастей", СтруктураМногострочныхЧастей);
	ПараметрыЗаписи.Вставить("НастройкиСоставаПоказателейОтчета", СохрНастройкиСоставаПоказателейОтчета);
	ПараметрыЗаписи.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	ПараметрыЗаписи.Вставить("ОтчетностьВРосстат", ОтчетностьВРосстат);
	ПараметрыЗаписи.Вставить("НастройкиФормыВыбораПечати", НастройкиФормыВыбораПечати);
	ПараметрыЗаписи.Вставить("ИмяФайлаПояснительнойЗаписки", ИмяФайлаПояснительнойЗаписки);
	ПараметрыЗаписи.Вставить("ИмяФайлаАудиторскогоЗаключения", ИмяФайлаАудиторскогоЗаключения);
	ПараметрыЗаписи.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", ИмяФайлаЗаявленияРевизионногоСоюза);
	ПараметрыЗаписи.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	ПараметрыЗаписи.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	ПараметрыЗаписи.Вставить("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	ПараметрыЗаписи.Вставить("ВиднаПанельПроверкиАктуальностиДанных",
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость);
	ПараметрыЗаписи.Вставить("ПроверкаАктуализацииДанныхПредупреждение",
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ЗаписатьДокумент(ПараметрыЗаписи) = Ложь Тогда
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПараметрыЗаписи.Ошибки[0];
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	
	СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка");
	СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение");
	СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей,
		"Заявление союза сельхозпроизводителей");
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьПечатныеМакетыОтчетов(ДокументСДанными)
	
	ЗаписиРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
	ЗаписиРегистраСведений.Отбор.РегламентированныйОтчет.Установить(ДокументСДанными);
	ЗаписиРегистраСведений.Прочитать();
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого ЗаписьРегистраСведений Из ЗаписиРегистраСведений Цикл
		Если СтрНайти(ЗаписьРегистраСведений.ВидДополнительногоФайла, "БланкОтчета.") = 1 Тогда
			УдаляемыеЗаписи.Добавить(ЗаписьРегистраСведений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗаписьРегистраСведений Из УдаляемыеЗаписи Цикл
		ЗаписиРегистраСведений.Удалить(ЗаписьРегистраСведений);
	КонецЦикла;
	
	Для Каждого ПечатныйБланк Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ЗаписьРегистраСведений = ЗаписиРегистраСведений.Добавить();
		ЗаписьРегистраСведений.РегламентированныйОтчет = ДокументСДанными;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "БланкОтчета." + ПечатныйБланк.Представление;
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(ПечатныйБланк.Значение[0]));
		ЗаписьРегистраСведений.ИмяФайла = ПечатныйБланк.Представление + ".mxl";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ДокументСДанными.Дата;
		
	КонецЦикла;
	
	ЗаписиРегистраСведений.Записать();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьДанныеФормыДеревоВДеревоЗначений(ДеревоЗначений, Родитель)
	
	Если Родитель.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из Родитель.ПолучитьЭлементы() Цикл
		
		НоваяСтрокаДерева = ДеревоЗначений.Строки.Добавить();
		
		НоваяСтрокаДерева["Наименование"]   = ЭлементДерева["Наименование"];
		НоваяСтрокаДерева["Идентификатор"]  = ЭлементДерева["Идентификатор"];
		НоваяСтрокаДерева["Отключаемость"]  = ЭлементДерева["Отключаемость"];
		НоваяСтрокаДерева["ВключатьВОтчет"] = ЭлементДерева["ВключатьВОтчет"];
		НоваяСтрокаДерева["ОбластиЗатенения"]
			= ДанныеФормыВЗначение(ЭлементДерева["ОбластиЗатенения"], Тип("ТаблицаЗначений"));
		
		КонвертироватьДанныеФормыДеревоВДеревоЗначений(НоваяСтрокаДерева, ЭлементДерева);
		
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Процедура КонвертироватьДеревоЗначенийВДанныеФормыДерево(ДанныеФормыДерево, Родитель)
	
	Если Родитель.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Родитель.Строки Цикл
		
		НовыйЭлементДерева = ДанныеФормыДерево.ПолучитьЭлементы().Добавить();
		
		НовыйЭлементДерева["Наименование"]   = СтрокаДерева["Наименование"];
		НовыйЭлементДерева["Идентификатор"]  = СтрокаДерева["Идентификатор"];
		НовыйЭлементДерева["Отключаемость"]  = СтрокаДерева["Отключаемость"];
		НовыйЭлементДерева["ВключатьВОтчет"] = СтрокаДерева["ВключатьВОтчет"];
		
		ЗначениеВДанныеФормы(СтрокаДерева["ОбластиЗатенения"], НовыйЭлементДерева["ОбластиЗатенения"]);
		
		КонвертироватьДеревоЗначенийВДанныеФормыДерево(НовыйЭлементДерева, СтрокаДерева);
				
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Функция СтруктураОтчета2015Кв4()
	
	СоставНастройкаОтчета = ПервичнаяСтруктураБухгалтерскойОтчетности();
	
	// Бухгалтерский баланс.
	СтруктураРаздела = Новый Структура();
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		СтруктураРаздела.Вставить("ИмяСтраницы",                    "БалансНКО");
		СтруктураРаздела.Вставить("ИмяМакета",                      "ФормаОтчета2015Кв4_БалансНКО");
		СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "БалансНКО");
		СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
		СтруктураРаздела.Вставить("ИдентификаторАвтозаполнения",    "БалансНКО");
		
		СоставНастройкаОтчета.Вставить("БалансНКО", СтруктураРаздела);
		
	КонецЕсли;
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла)
	
	Если СтруктураДопФайла.СведенияИзменены = Истина
	 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		Если ЗначениеЗаполнено(СтруктураДопФайла.ХранилищеФайла) Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.ХранилищеФайла));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.Размер;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		СтруктураДопФайла.СведенияИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // обход ошибки в платформе
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс"
	 ИЛИ НаимТекущегоРаздела = "БалансНКО" Тогда
	 	СтруктураДанныхБаланс.Очистить();
		СтруктураДанныхБалансНКО.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОПУ" Тогда
		СтруктураДанныхОПУ.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОИК" Тогда
		СтруктураДанныхОИК.Очистить();
		СброситьНастройкиСоставаПоказателей("ОИК");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОДДС" Тогда
		СтруктураДанныхОДДС.Очистить();
		СброситьНастройкиСоставаПоказателей("ОДДС");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОЦИС" Тогда
		СтруктураДанныхОЦИС.Очистить();
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда
		Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			СтруктураДанныхБалансНКО.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБалансНКО.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБалансНКО.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 2 Тогда
				СтруктураДанныхБалансНКО.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБалансНКО.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда
				ОблВидОтчетности.Значение = СтруктураДанныхБалансНКО.ВидОтчетности;
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
		Иначе
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 2 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда
				ОблВидОтчетности.Значение = СтруктураДанныхБаланс.ВидОтчетности;
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Если НаимТекущегоРаздела <> "ДополнительныеФайлы" Тогда
				Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
					Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Продолжить;
					КонецЕсли;
					СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиСоставаПоказателей(ИмяРаздела)
	
	Если НастройкиСоставаПоказателейОтчета.Свойство(ИмяРаздела) Тогда
		НастройкиРаздела = ЭтотОбъект[НастройкиСоставаПоказателейОтчета[ИмяРаздела]];
		СброситьНастройкиСоставаПоказателейРаздела(НастройкиРаздела);
		Если ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			ПрименитьНастройкиСоставаПоказателейОтчета(ИмяРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");

	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если ЗначениеЗаполнено(НаимТекущегоРаздела)
		   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Неопределено И Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
	
	ЗаполнитьСведенияОбОрганизации();
	
	Если ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС" Тогда
		ПрименитьНастройкиСоставаПоказателейОтчета(ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиСоставаПоказателейРаздела(НастройкиРаздела)
	
	Для Каждого СтрокаНастройки Из НастройкиРаздела.ПолучитьЭлементы() Цикл
		СтрокаНастройки.ВключатьВОтчет = Истина;
		СброситьНастройкиСоставаПоказателейРаздела(СтрокаНастройки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
		
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВывода(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	Если ИмяТекРаздела <> "Баланс"
	   И ИмяТекРаздела <> "БалансНКО" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено Тогда
		   Если СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
		   		ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		   ИначеЕсли СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
				ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБалансНКО.ОргДиректор;
		   КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПримечанияКодовСтрок(ИмяТекРаздела);
	
	ИзменитьНазванияОтчетов(ИмяТекРаздела);
	Если ИмяТекРаздела = "Баланс" 
	 ИЛИ ИмяТекРаздела = "БалансНКО" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.Текст = "";
			ТабличныйДокумент.Области.ОрганизацииДляЗаполненияОтчета.ГиперСсылка = Ложь;
			СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримечанияКодовСтрок(НаимРаздела)
	
	ТекстПримечания = "Код строки необходимо указать по показателю,
	                  |имеющему наибольший удельный вес в составе укрупненного
	                  |(Подробнее см. Справку к отчету)";
	
	Если НаимРаздела = "Баланс"
	 ИЛИ НаимРаздела = "БалансНКО" Тогда
		
		ТабличныйДокумент.Области["П000010000102"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000202"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010000502"].Примечание.Текст = ТекстПримечания;
				
		Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ТабличныйДокумент.Области["П000010007102"].Примечание.Текст = ТекстПримечания;
			ТабличныйДокумент.Области["П000010007202"].Примечание.Текст = ТекстПримечания;
		Иначе
			ТабличныйДокумент.Области["П000010000702"].Примечание.Текст = ТекстПримечания;
		КонецЕсли;
		
		ТабличныйДокумент.Области["П000010000902"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000010001202"].Примечание.Текст = ТекстПримечания;
		
	ИначеЕсли НаимРаздела = "ОПУ" Тогда
		
		ТабличныйДокумент.Области["П000020000202"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000020000402"].Примечание.Текст = ТекстПримечания;
		ТабличныйДокумент.Области["П000020000602"].Примечание.Текст = ТекстПримечания;
		
	ИначеЕсли НаимРаздела = "ОЦИС" Тогда
		
		ТабличныйДокумент.Области["П000100620102"].Примечание.Текст = ТекстПримечания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)

	Перем Кодификаторы;
	Перем Заголовки;
	
	Если НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб")
				   И СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок)
				   И МаксимальноеКоличествоСтрок <> 0 Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = СтрокаЧГ0(Кодификатор.Код + Инд - 1);
				КонецЦикла;
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрокаЧГ0(Инд)];
				ОбластьСКодом.Текст = СтрокаЧГ0(Кодификаторы.Код + Инд - 1);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Если в описании структуры встречаются поля с датами, то производится их заполнение
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	КонецЕсли;
	
	ДоступныеЕдиницыИзмерения = Новый Массив;
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1);
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000);
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2019-01-01' Тогда
		ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("ДоступныеЕдиницыИзмерения", ДоступныеЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ФормаНастройкиОтчета = ПолучитьФорму(Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6) + ".НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
	 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			// Ранее запомненный раздел
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
			   И НЕ НомерСтраницыРазделаОтчета = Неопределено 
			   И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
					НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	
	РезультатВыгрузки = УниверсальнаяВыгрузкаОбъекта(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
		
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
		
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Форма.СтруктураРеквизитовФормы.ДелительПредставления, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Форма.СтруктураРеквизитовФормы.ДелительПредставления;

	Возврат ОкругленноеЧисло;
	
КонецФункции

&НаСервере
Функция ОбластьОтчетаЗаполнена(ИсходныйТабличныйДокумент, ИмяОбласти)
	
	ЗначенияЗаполнены = Ложь;
	
	ПроверяемаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	Для Каждого Область Из ПроверяемаяОбласть.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение <> Неопределено 
		   И Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
			ЗначениеОбласти = ОкруглитьЧислоПоФормату(ЭтотОбъект, Область.Значение);
			ЗначенияЗаполнены = ЗначенияЗаполнены ИЛИ ЗначениеЗаполнено(ЗначениеОбласти);
			
			Если ЗначенияЗаполнены Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияЗаполнены;
	
КонецФункции

&НаСервере
Функция ПоказательВключенВОтчет(СоставОтчета, ИдентификаторПоказателя)
	
	СтрокаПодраздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(СоставОтчета.ПолучитьЭлементы(), "Идентификатор", ИдентификаторПоказателя);
	
	Если СтрокаПодраздела <> Неопределено И СтрокаПодраздела.Отключаемость Тогда
		Возврат СтрокаПодраздела.ВключатьВОтчет;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВывестиОбластьМакета(ПечатнаяФорма, ИсходныйТабличныйДокумент, ИмяОбласти, ВертикальныеОбласти = Неопределено)
	
	Если ВертикальныеОбласти = Неопределено Тогда
		ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
		ПечатнаяФорма.Вывести(ВыводимаяОбласть);
	Иначе
		ЭтоПервыйСтолбец = Истина;
		Для Каждого ВертикальнаяОбласть Из ВертикальныеОбласти Цикл
			ВыводимаяОбласть = ИсходныйТабличныйДокумент.ПолучитьОбласть(ИмяОбласти + "|" + ВертикальнаяОбласть);
			Если ЭтоПервыйСтолбец Тогда
				ПечатнаяФорма.Вывести(ВыводимаяОбласть);
			Иначе
				ПечатнаяФорма.Присоединить(ВыводимаяОбласть);
			КонецЕсли;
			ЭтоПервыйСтолбец = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	РезультатПроверкиАктуализацииДанныхУчета = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРезультатПроверкиАктуализацииДанныхУчета(
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		РезультатПроверкиАктуализацииДанныхУчета);
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	Если НЕ РезультатПроверкиАктуализацииДанныхУчета = Неопределено
	   И РезультатПроверкиАктуализацииДанныхУчета.ТребуетсяАктуализация Тогда
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок = Новый Массив;
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='Данные учета неактуальны с '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(Формат(РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности, "ДЛФ=Д"), Новый Шрифт(, , Истина)));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='. Рекомендуется выполнить '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"), , , , "ОткрытьФормуЗакрытияМесяца"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru=' и автозаполнить отчет повторно.'"));
		
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок =
		Новый ФорматированнаяСтрока(ПроверкаАктуализацииДанныхПредупреждениеЗаголовок);
		
		СтруктураРеквизитовФормы.ДатаАктуальностиДанных = РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности;
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",            СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ЭтоБалансНКО", 				 СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс", 			 Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",    			 Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",    			 Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",   			 Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОЦИС",   			 Ложь);
	
	Для Каждого Элемент Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если Элемент.ПоказатьСтраницу Тогда
			
			Если Элемент.ИмяСтраницы = "Баланс"
			 ИЛИ Элемент.ИмяСтраницы = "БалансНКО" Тогда
				
				ПараметрыОтчета.ЗаполнятьБаланс = Истина;
				
			ИначеЕсли Элемент.ИмяСтраницы = "ОПУ" Тогда
				
				ПараметрыОтчета.ЗаполнятьОФР = Истина;
				
			ИначеЕсли Элемент.ИмяСтраницы = "ОИК" Тогда
				
				ПараметрыОтчета.ЗаполнятьОИК = Истина;
				
			ИначеЕсли Элемент.ИмяСтраницы = "ОДДС" Тогда
				
				ПараметрыОтчета.ЗаполнятьОДДС = Истина;
				
			ИначеЕсли Элемент.ИмяСтраницы = "ОЦИС" Тогда
				
				ПараметрыОтчета.ЗаполнятьОЦИС = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",    СтруктураДанныхБаланс);
	Контейнер.Вставить("БалансНКО", СтруктураДанныхБалансНКО);
	Контейнер.Вставить("ОДДС",      СтруктураДанныхОДДС);
	Контейнер.Вставить("ОИК",       СтруктураДанныхОИК);
	Контейнер.Вставить("ОПУ",       СтруктураДанныхОПУ);
	Контейнер.Вставить("ОЦИС",      СтруктураДанныхОЦИС);
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			Для Каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
			МассивСтрокВЗ_1 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
			ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
			МассивСтрокВЗ_2 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
			
			ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
			
			Для Каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
				ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
			КонецЦикла;
			Для Каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
				ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
					= ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуЗакрытияМесяца" Тогда
		
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуЗакрытияМесяца(
														   СтруктураРеквизитовФормы.Организация,
														   СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	КонецЕсли;
													   
КонецПроцедуры

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, 0);
	СтруктураРезультата.Вставить("СтруктураОшибок"				, Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"		, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	СформироватьСтруктуруДанныхКС();
	СформироватьСлужебныеДанные();
	ВидимыеРазделы = ВидимыеРазделы();

	Если ВидимыеРазделы.Баланс Тогда
	
		// Проверки Бухгалтерского баланса
		ПроверкаКС_01_01(СтруктураРезультата);
		ПроверкаКС_01_02(СтруктураРезультата);
		ПроверкаКС_01_03(СтруктураРезультата);
		ПроверкаКС_02_01(СтруктураРезультата);
		ПроверкаКС_02_02(СтруктураРезультата);
		ПроверкаКС_02_03(СтруктураРезультата);
		
		Если НЕ ДанныеКС.НКО Тогда
			ПроверкаКС_03_01(СтруктураРезультата);
			ПроверкаКС_03_02(СтруктураРезультата);
			ПроверкаКС_03_03(СтруктураРезультата);
		Иначе
			ПроверкаКС_03_04(СтруктураРезультата);
			ПроверкаКС_03_05(СтруктураРезультата);
			ПроверкаКС_03_06(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_03_07(СтруктураРезультата);
		
	КонецЕсли;

	Если ВидимыеРазделы.ОПУ Тогда
	
		// Проверки Отчета о прибылях и убытках
		ПроверкаКС_04_01(СтруктураРезультата);
		ПроверкаКС_04_02(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОИК Тогда
	
		// Проверки Отчета об изменениях капитала
		ПроверкаКС_05_01(СтруктураРезультата);
		ПроверкаКС_05_02(СтруктураРезультата);
		ПроверкаКС_06_00(СтруктураРезультата);
		ПроверкаКС_07_01(СтруктураРезультата);
		ПроверкаКС_07_02(СтруктураРезультата);
		ПроверкаКС_08_01(СтруктураРезультата);
		ПроверкаКС_08_02(СтруктураРезультата);
		ПроверкаКС_08_03(СтруктураРезультата);
		ПроверкаКС_08_04(СтруктураРезультата);
		ПроверкаКС_09_01(СтруктураРезультата);
		ПроверкаКС_09_02(СтруктураРезультата);
		ПроверкаКС_09_03(СтруктураРезультата);
		ПроверкаКС_09_04(СтруктураРезультата);
		ПроверкаКС_10_01(СтруктураРезультата);
		ПроверкаКС_10_02(СтруктураРезультата);
		ПроверкаКС_11_00(СтруктураРезультата);
		ПроверкаКС_12_01(СтруктураРезультата);
		ПроверкаКС_12_02(СтруктураРезультата);
		ПроверкаКС_13_01(СтруктураРезультата);
		ПроверкаКС_13_02(СтруктураРезультата);
		ПроверкаКС_13_03(СтруктураРезультата);
		ПроверкаКС_13_04(СтруктураРезультата);
		ПроверкаКС_14_01(СтруктураРезультата);
		ПроверкаКС_14_02(СтруктураРезультата);
		ПроверкаКС_14_03(СтруктураРезультата);
		ПроверкаКС_14_04(СтруктураРезультата);
		
	КонецЕсли;

	Если ВидимыеРазделы.ОДДС Тогда
	
		// Проверки Отчета о движении денежных средств
		ПроверкаКС_15_01(СтруктураРезультата);
		ПроверкаКС_15_02(СтруктураРезультата);
		ПроверкаКС_16_01(СтруктураРезультата);
		ПроверкаКС_16_02(СтруктураРезультата);
		ПроверкаКС_17_01(СтруктураРезультата);
		ПроверкаКС_17_02(СтруктураРезультата);
		ПроверкаКС_18_01(СтруктураРезультата);
		ПроверкаКС_18_02(СтруктураРезультата);
		ПроверкаКС_19_01(СтруктураРезультата);
		ПроверкаКС_19_02(СтруктураРезультата);
		ПроверкаКС_20_01(СтруктураРезультата);
		ПроверкаКС_20_02(СтруктураРезультата);
		ПроверкаКС_21_01(СтруктураРезультата);
		ПроверкаКС_21_02(СтруктураРезультата);
		ПроверкаКС_22_01(СтруктураРезультата);
		ПроверкаКС_22_02(СтруктураРезультата);
		ПроверкаКС_23_01(СтруктураРезультата);
		ПроверкаКС_23_02(СтруктураРезультата);
		ПроверкаКС_24_01(СтруктураРезультата);
		ПроверкаКС_24_02(СтруктураРезультата);
		ПроверкаКС_25_01(СтруктураРезультата);
		ПроверкаКС_25_02(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОЦИС Тогда
	
		// Проверки Отчета о целевом использовании средств
		ПроверкаКС_26_01(СтруктураРезультата);
		ПроверкаКС_26_02(СтруктураРезультата);
		ПроверкаКС_27_01(СтруктураРезультата);
		ПроверкаКС_27_02(СтруктураРезультата);
		ПроверкаКС_28_01(СтруктураРезультата);
		ПроверкаКС_28_02(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.Баланс Тогда
	
		// Проверки Бухгалтерского баланса
		ПроверкаКС_29_01(СтруктураРезультата);
		ПроверкаКС_29_02(СтруктураРезультата);
		ПроверкаКС_29_03(СтруктураРезультата);
		ПроверкаКС_29_04(СтруктураРезультата);
		ПроверкаКС_29_05(СтруктураРезультата);
		ПроверкаКС_29_06(СтруктураРезультата);
		ПроверкаКС_29_07(СтруктураРезультата);
		ПроверкаКС_29_08(СтруктураРезультата);
		ПроверкаКС_29_09(СтруктураРезультата);
		ПроверкаКС_29_10(СтруктураРезультата);
		ПроверкаКС_29_11(СтруктураРезультата);
		ПроверкаКС_29_12(СтруктураРезультата);
		ПроверкаКС_29_13(СтруктураРезультата);
		ПроверкаКС_29_14(СтруктураРезультата);
		ПроверкаКС_29_15(СтруктураРезультата);
		
		Если ДанныеКС.НКО Тогда
		
			ПроверкаКС_29_16(СтруктураРезультата);
			ПроверкаКС_29_17(СтруктураРезультата);
			ПроверкаКС_29_18(СтруктураРезультата);
		
		КонецЕсли;
		
		ПроверкаКС_29_19(СтруктураРезультата);
		ПроверкаКС_29_20(СтруктураРезультата);
		ПроверкаКС_29_21(СтруктураРезультата);
		ПроверкаКС_29_22(СтруктураРезультата);
		ПроверкаКС_29_23(СтруктураРезультата);
		ПроверкаКС_29_24(СтруктураРезультата);
		ПроверкаКС_29_25(СтруктураРезультата);
		ПроверкаКС_29_26(СтруктураРезультата);
		ПроверкаКС_29_27(СтруктураРезультата);
		ПроверкаКС_29_28(СтруктураРезультата);
		ПроверкаКС_29_29(СтруктураРезультата);
		ПроверкаКС_29_30(СтруктураРезультата);
		ПроверкаКС_29_31(СтруктураРезультата);
		ПроверкаКС_29_32(СтруктураРезультата);
		ПроверкаКС_29_33(СтруктураРезультата);
		ПроверкаКС_29_34(СтруктураРезультата);
		ПроверкаКС_29_35(СтруктураРезультата);
		ПроверкаКС_29_36(СтруктураРезультата);
		ПроверкаКС_29_37(СтруктураРезультата);
		ПроверкаКС_29_38(СтруктураРезультата);
		ПроверкаКС_29_39(СтруктураРезультата);
	
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		КонецЕсли;
		
	КонецЕсли;

	Если ВидимыеРазделы.ОПУ Тогда
	
		// Проверки Отчета о прибылях и убытках
		ПроверкаКС_30_01(СтруктураРезультата);
		ПроверкаКС_30_02(СтруктураРезультата);
		ПроверкаКС_30_03(СтруктураРезультата);
		ПроверкаКС_30_04(СтруктураРезультата);
		ПроверкаКС_30_05(СтруктураРезультата);
		ПроверкаКС_30_06(СтруктураРезультата);
		ПроверкаКС_30_07(СтруктураРезультата);
		ПроверкаКС_30_08(СтруктураРезультата);
		ПроверкаКС_30_09(СтруктураРезультата);
		ПроверкаКС_30_10(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОИК Тогда
	
		// Проверки Отчета об изменении капитала
		ПроверкаКС_31_01(СтруктураРезультата);
		ПроверкаКС_31_02(СтруктураРезультата);
		ПроверкаКС_31_03(СтруктураРезультата);
		ПроверкаКС_31_04(СтруктураРезультата);
		ПроверкаКС_31_05(СтруктураРезультата);
		ПроверкаКС_31_06(СтруктураРезультата);
		ПроверкаКС_31_07(СтруктураРезультата);
		ПроверкаКС_31_08(СтруктураРезультата);
		ПроверкаКС_31_09(СтруктураРезультата);
		ПроверкаКС_31_10(СтруктураРезультата);
		ПроверкаКС_31_11(СтруктураРезультата);
		ПроверкаКС_31_12(СтруктураРезультата);
		ПроверкаКС_31_13(СтруктураРезультата);
		ПроверкаКС_31_14(СтруктураРезультата);
		ПроверкаКС_31_15(СтруктураРезультата);
		ПроверкаКС_31_16(СтруктураРезультата);
		ПроверкаКС_31_17(СтруктураРезультата);
		ПроверкаКС_31_18(СтруктураРезультата);
		ПроверкаКС_31_19(СтруктураРезультата);
		ПроверкаКС_31_20(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОДДС Тогда
	
		// Проверки Отчета о движении денежных средств
		ПроверкаКС_32_01(СтруктураРезультата);
		ПроверкаКС_32_02(СтруктураРезультата);
		ПроверкаКС_32_03(СтруктураРезультата);
		ПроверкаКС_32_04(СтруктураРезультата);
		ПроверкаКС_32_05(СтруктураРезультата);
		ПроверкаКС_32_06(СтруктураРезультата);
		ПроверкаКС_32_07(СтруктураРезультата);
		ПроверкаКС_32_08(СтруктураРезультата);
		ПроверкаКС_32_09(СтруктураРезультата);
		ПроверкаКС_32_10(СтруктураРезультата);
		ПроверкаКС_32_11(СтруктураРезультата);
		ПроверкаКС_32_12(СтруктураРезультата);
		ПроверкаКС_32_13(СтруктураРезультата);
		ПроверкаКС_32_14(СтруктураРезультата);
		ПроверкаКС_32_15(СтруктураРезультата);
		ПроверкаКС_32_16(СтруктураРезультата);
		ПроверкаКС_32_17(СтруктураРезультата);
		ПроверкаКС_32_18(СтруктураРезультата);
		ПроверкаКС_32_19(СтруктураРезультата);
		ПроверкаКС_32_20(СтруктураРезультата);
		ПроверкаКС_32_21(СтруктураРезультата);
		ПроверкаКС_32_22(СтруктураРезультата);
		ПроверкаКС_32_23(СтруктураРезультата);
		ПроверкаКС_32_24(СтруктураРезультата);
		ПроверкаКС_32_25(СтруктураРезультата);
		ПроверкаКС_32_26(СтруктураРезультата);
		ПроверкаКС_32_27(СтруктураРезультата);
		ПроверкаКС_32_28(СтруктураРезультата);
		ПроверкаКС_32_29(СтруктураРезультата);
		ПроверкаКС_32_30(СтруктураРезультата);
		ПроверкаКС_32_31(СтруктураРезультата);
		ПроверкаКС_32_32(СтруктураРезультата);
		ПроверкаКС_32_33(СтруктураРезультата);
		ПроверкаКС_32_34(СтруктураРезультата);
		ПроверкаКС_32_35(СтруктураРезультата);
		ПроверкаКС_32_36(СтруктураРезультата);
		ПроверкаКС_32_37(СтруктураРезультата);
		ПроверкаКС_32_38(СтруктураРезультата);
		ПроверкаКС_32_39(СтруктураРезультата);
		ПроверкаКС_32_40(СтруктураРезультата);
		ПроверкаКС_32_41(СтруктураРезультата);
		ПроверкаКС_32_42(СтруктураРезультата);
		ПроверкаКС_32_43(СтруктураРезультата);
		ПроверкаКС_32_44(СтруктураРезультата);
		ПроверкаКС_32_45(СтруктураРезультата);
		ПроверкаКС_32_46(СтруктураРезультата);
		ПроверкаКС_32_47(СтруктураРезультата);
		ПроверкаКС_32_48(СтруктураРезультата);
		ПроверкаКС_32_49(СтруктураРезультата);
		ПроверкаКС_32_50(СтруктураРезультата);
		ПроверкаКС_32_51(СтруктураРезультата);
		ПроверкаКС_32_52(СтруктураРезультата);
		ПроверкаКС_32_53(СтруктураРезультата);
		ПроверкаКС_32_54(СтруктураРезультата);
		ПроверкаКС_32_55(СтруктураРезультата);
		ПроверкаКС_32_56(СтруктураРезультата);
		ПроверкаКС_32_57(СтруктураРезультата);
		ПроверкаКС_32_58(СтруктураРезультата);
		ПроверкаКС_32_59(СтруктураРезультата);
		ПроверкаКС_32_60(СтруктураРезультата);
		ПроверкаКС_32_61(СтруктураРезультата);
		ПроверкаКС_32_62(СтруктураРезультата);
		ПроверкаКС_32_63(СтруктураРезультата);
		ПроверкаКС_32_64(СтруктураРезультата);
		ПроверкаКС_32_65(СтруктураРезультата);
		ПроверкаКС_32_66(СтруктураРезультата);
		ПроверкаКС_32_67(СтруктураРезультата);
		ПроверкаКС_32_68(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОЦИС Тогда
	
		// Проверки Отчета о целевом использовании средств
		ПроверкаКС_33_01(СтруктураРезультата);
		ПроверкаКС_33_02(СтруктураРезультата);
		ПроверкаКС_33_03(СтруктураРезультата);
		ПроверкаКС_33_04(СтруктураРезультата);
		ПроверкаКС_33_05(СтруктураРезультата);
		ПроверкаКС_33_06(СтруктураРезультата);
		ПроверкаКС_33_07(СтруктураРезультата);
		ПроверкаКС_33_08(СтруктураРезультата);
		ПроверкаКС_33_09(СтруктураРезультата);
		ПроверкаКС_33_10(СтруктураРезультата);
		ПроверкаКС_33_11(СтруктураРезультата);
		ПроверкаКС_33_12(СтруктураРезультата);
		ПроверкаКС_33_13(СтруктураРезультата);
		ПроверкаКС_33_14(СтруктураРезультата);
		
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы" , СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Бухгалтерского_баланса

&НаСервере
Процедура ПроверкаКС_01_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.3 = стр.(1150 + 1170 + 1210 + 1250 + 1230) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 1.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.4 = стр.(1150 + 1170 + 1210 + 1250 + 1230) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.5 = стр.(1150 + 1170 + 1210 + 1250 + 1230) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1600"		, "П00001000060" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1150"		, "П00001000010" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1170"		, "П00001000020" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1210"		, "П00001000030" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1250"		, "П00001000040" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1230"		, "П00001000050" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф1);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1600.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1600.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф1П1600.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 2.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.3 = стр.1700 гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 2.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.4 = стр.1700 гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 2.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1600 гр.5 = стр.1700 гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1600"		, "П00001000060" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1700"		, "П00001000130" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф1);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1600.Значение, Показатели.Ф1П1700.Значение, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф1П1600.Значение, 
		Показатели.Ф1П1700.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.3 = стр.(1300 + 1410 + 1450 + 1510 + 1520 + 1550) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.4 = стр.(1300 + 1410 + 1450 + 1510 + 1520 + 1550) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.5 = стр.(1300 + 1410 + 1450 + 1510 + 1520 + 1550) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.3 = стр.(1350 + 1360 + 1410 + 1450 + 1510 + 1520 + 1550) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.4 = стр.(1350 + 1360 + 1410 + 1450 + 1510 + 1520 + 1550) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение валюты баланса в стр.1700 гр.5 = стр.(1350 + 1360 + 1410 + 1450 + 1510 + 1520 + 1550) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма валюты баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	
	ИменаПоказателей.Вставить("Ф1П1700"		, "П00001000130" + Настройки.Графа);
	
	Если НЕ ДанныеКС.НКО Тогда
		ИменаПоказателей.Вставить("Ф1П1300"	, "П00001000070" + Настройки.Графа);
	Иначе
		ИменаПоказателей.Вставить("Ф1П1350"	, "П00001000710" + Настройки.Графа);
		ИменаПоказателей.Вставить("Ф1П1360"	, "П00001000720" + Настройки.Графа);
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф1П1410"		, "П00001000080" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1450"		, "П00001000090" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1510"		, "П00001000100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1520"		, "П00001000110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1550"		, "П00001000120" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф1);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1700.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1700.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф1П1700.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.7.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='с 2019 года'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 3.7.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода ОКВЭД2 Бухгалтерского баланса = коду ОКВЭД2, указанному в свойствах организации'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно неправильно указан код ОКВЭД2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеКС.ГодОтчета < 2019 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьФормулу(Настройки);
	КодОКВЭДБаланса						= СокрЛП(ДанныеКС.Ф1.ОргКодОКВЭД);
	КодОКВЭДБалансаСтр					= ?(ЗначениеЗаполнено(КодОКВЭДБаланса), КодОКВЭДБаланса, "(...)");
	КодОКВЭДОрганизации					= СокрЛП(СтруктураРеквизитовФормы.ОКВЭД2);
	КодОКВЭДОрганизацииСтр				= ?(ЗначениеЗаполнено(КодОКВЭДОрганизации), КодОКВЭДОрганизации, "(...)");
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	НоваяСтрока.ПредставлениеПоказателя = "Код ОКВЭД2 Бухгалтерского баланса";
	НоваяСтрока.ЗначениеПоказателя		= КодОКВЭДБалансаСтр;
	НоваяСтрока.ИмяПоказателя			= "ОргКодОКВЭД";
	НоваяСтрока.ИмяСтраницы				= ДанныеКС.РазделыПоказателей.Ф1;
	НоваяСтрока.Страница				= 1;
	НоваяСтрока.СсылкаНаДокументРО		= СтруктураРеквизитовФормы.мСохраненныйДок;
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	НоваяСтрока.ПредставлениеПоказателя = "Код ОКВЭД2 Организации";
	НоваяСтрока.ЗначениеПоказателя		= КодОКВЭДОрганизацииСтр;
	
	Настройки.ЭтоОшибка = ЗначениеЗаполнено(КодОКВЭДОрганизации) И НЕ КодОКВЭДБаланса = КодОКВЭДОрганизации;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", КодОКВЭДБалансаСтр);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", КодОКВЭДОрганизацииСтр);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_прибылях_и_убытках

&НаСервере
Процедура ПроверкаКС_04_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 4.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение чистой прибыли в стр.2400 гр.3 = стр.(2110 - 2120 - 2330 + 2340 - 2350 + 2410) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма чистой прибыли'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 4.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение чистой прибыли в стр.2400 гр.4 = стр.(2110 - 2120 - 2330 + 2340 - 2350 + 2410) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма чистой прибыли'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2400"		, "П00002000070" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2110"		, "П00002000010" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2120"		, "П00002000020" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2330"		, "П00002000030" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2340"		, "П00002000040" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2350"		, "П00002000050" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2410"		, "П00002000060" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф2);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф2П2400.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_об_изменениях_капитала

&НаСервере
Процедура ПроверкаКС_05_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 5.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение уставного капитала в стр.3200 гр.3 = стр.(3100 + 3210 - 3220) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100320003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100310003");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321003");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_05_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 5.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение собственных акций в стр.3200 гр.4 = стр.(3100 + 3210 - 3220) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма собственных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100320004");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100310004");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321004");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_06_00(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение добавочного капитала в стр.3200 гр.5 = стр.(3100 + 3210 - 3220 + 3230) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100320005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100310005");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321005");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322005");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100323005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 7.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение резервного капитала в стр.3200 гр.6 = стр.(3100 + 3210 - 3220 + 3230 + 3240) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100320006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100310006");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321006");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322006");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100323006");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100324006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 7.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение прибыли / убытка в стр.3200 гр.7 = стр.(3100 + 3210 - 3220 + 3230 + 3240) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма прибыли / убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100320007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100310007");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321007");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322007");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100323007");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100324007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 8.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3210 гр.3 >= стр.(3214 + 3215 + 3216) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100321003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100321403");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321503");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100321603");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 8.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3210 гр.5 >= стр.(3212 + 3213 + 3214 + 3215 + 3216) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100321005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100321205");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321305");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100321405");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100321505");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100321605");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 8.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3210 гр.6 >= стр.3216 гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100321006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100321606");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 8.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3210 гр.7 >= стр.(3211 + 3212 + 3213 + 3215 + 3216) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100321007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100321107");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100321207");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100321307");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100321507");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100321607");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 9.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3220 гр.3 >= модуля стр.(3224 + 3225 + 3226) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100322003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100322403");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100322503");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322603");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 9.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3220 гр.5 >= модуля стр.(3222 + 3223 + 3224 '") +
		НСтр("ru='+ 3225 + 3226) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100322005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100322205");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100322305");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322405");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100322505");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100322605");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 9.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3220 гр.6 >= модуля стр.3226 гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100322006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100322606");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 9.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3220 гр.7 >= модуля стр.(3221 + 3222 + 3223 + 3224 '") +
		НСтр("ru='+ 3225 + 3226 + 3227) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100322007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100322107");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100322207");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100322307");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100322407");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100322507");
	ИменаПоказателей.Вставить("Ф3П0007"		, "П000100322607");
	ИменаПоказателей.Вставить("Ф3П0008"		, "П000100322707");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 10.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение уставного капитала в стр.3300 гр.3 = стр.(3200 + 3310 - 3320) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100330003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100320003");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331003");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='10.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 10.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение собственных акций в стр.3300 гр.4 = стр.(3200 + 3310 - 3320) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма собственных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100330004");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100320004");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331004");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_00(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение добавочного капитала в стр.3300 гр.5 = стр.(3200 + 3310 - 3320 + 3330) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100330005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100320005");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331005");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332005");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100333005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='12.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 12.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение резервного капитала в стр.3300 гр.6 = стр.(3200 + 3310 - 3320 + 3330 + 3340) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100330006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100320006");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331006");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332006");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100333006");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100334006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='12.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 12.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение прибыли / убытка в стр.3300 гр.7 = стр.(3200 + 3310 - 3320 + 3330 + 3340) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма прибыли / убытка'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100330007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100320007");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331007");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332007");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100333007");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100334007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф3);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П0001.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П0001.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф3П0001.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='13.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 13.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3310 гр.3 >= стр.(3314 + 3315 + 3316) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100331003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100331403");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331503");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100331603");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='13.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 13.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3310 гр.5 >= стр.(3312 + 3313 + 3314 + 3315 + 3316) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100331005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100331205");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331305");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100331405");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100331505");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100331605");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='13.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 13.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3310 гр.6 >= стр.3316 гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100331006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100331606");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='13.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 13.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение увеличения капитала в стр.3310 гр.7 >= стр.(3311 + 3312 + 3313 + 3315 + 3316) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100331007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100331107");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100331207");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100331307");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100331507");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100331607");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_14_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='14.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 14.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3320 гр.3 >= модуля стр.(3324 + 3325 + 3326) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100332003");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100332403");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100332503");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332603");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_14_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='14.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 14.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3320 гр.5 >= модуля стр.(3322 + 3323 + 3324 '") +
		НСтр("ru='+ 3325 + 3326) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100332005");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100332205");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100332305");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332405");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100332505");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100332605");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_14_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='14.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 14.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3320 гр.6 >= модуля стр.3326 гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100332006");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100332606");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_14_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='14.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 14.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Модуль значения уменьшения капитала в стр.3320 гр.7 >= модуля стр.(3321 + 3322 + 3323 + 3324 '") +
		НСтр("ru='+ 3325 + 3326 + 3327) гр.7'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001"		, "П000100332007");
	ИменаПоказателей.Вставить("Ф3П0002"		, "П000100332107");
	ИменаПоказателей.Вставить("Ф3П0003"		, "П000100332207");
	ИменаПоказателей.Вставить("Ф3П0004"		, "П000100332307");
	ИменаПоказателей.Вставить("Ф3П0005"		, "П000100332407");
	ИменаПоказателей.Вставить("Ф3П0006"		, "П000100332507");
	ИменаПоказателей.Вставить("Ф3П0007"		, "П000100332607");
	ИменаПоказателей.Вставить("Ф3П0008"		, "П000100332707");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_14_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_14_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф3);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П0001.Значение;
	РасчетнаяСуммаМодуль = ?(РасчетнаяСумма < 0, - РасчетнаяСумма, РасчетнаяСумма);
	Показатели.Ф3П0001.Значение = ?(Показатели.Ф3П0001.Значение < 0, - Показатели.Ф3П0001.Значение, 
		Показатели.Ф3П0001.Значение);
		
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П0001.Значение, РасчетнаяСуммаМодуль, Настройки, 2);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф3П0001.Значение, РасчетнаяСуммаМодуль);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_движении_денежных_средств

&НаСервере
Процедура ПроверкаКС_15_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='15.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 15.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4100 гр.3 = стр.(4110 - 4120) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100410003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100411003");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100412003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='15.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 15.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4100 гр.4 = стр.(4110 - 4120) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100410004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100411004");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100412004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='16.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 16.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4110 гр.3 = стр.(4111 + 4112 + 4113 + 4119) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100411003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100411103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100411203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100411303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100411903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='16.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 16.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4110 гр.4 = стр.(4111 + 4112 + 4113 + 4119) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100411004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100411104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100411204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100411304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100411904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_17_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='17.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 17.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4120 гр.3 = стр.(4121 + 4122 + 4123 + 4124 + 4129) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100412003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100412103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100412203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100412303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100412403");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100412903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_17_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='17.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 17.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4120 гр.4 = стр.(4121 + 4122 + 4123 + 4124 + 4129) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100412004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100412104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100412204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100412304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100412404");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100412904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_18_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='18.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 18.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4200 гр.3 = стр.(4210 - 4220) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100420003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100421003");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100422003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_18_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='18.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 18.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4200 гр.4 = стр.(4210 - 4220) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100420004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100421004");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100422004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_19_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='19.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 19.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4210 гр.3 = стр.(4211 + 4212 + 4213 + 4214 + 4219) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100421003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100421103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100421203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100421303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100421403");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100421903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_19_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='19.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 19.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4210 гр.4 = стр.(4211 + 4212 + 4213 + 4214 + 4219) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100421004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100421104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100421204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100421304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100421404");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100421904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_20_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='20.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 20.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4220 гр.3 = стр.(4221 + 4222 + 4223 + 4224 + 4229) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100422003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100422103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100422203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100422303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100422403");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100422903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_20_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='20.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 20.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4220 гр.4 = стр.(4221 + 4222 + 4223 + 4224 + 4229) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100422004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100422104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100422204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100422304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100422404");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100422904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_21_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='21.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 21.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4300 гр.3 = стр.(4310 - 4320) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100430003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100431003");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100432003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_21_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='21.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 21.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4300 гр.4 = стр.(4310 - 4320) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100430004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100431004");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100432004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_22_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='22.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 22.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4310 гр.3 = стр.(4311 + 4312 + 4313 + 4314 + 4319) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100431003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100431103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100431203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100431303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100431403");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100431903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_22_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='22.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 22.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступлений в стр.4310 гр.4 = стр.(4311 + 4312 + 4313 + 4314 + 4319) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100431004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100431104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100431204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100431304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100431404");
	ИменаПоказателей.Вставить("Ф4П0006"		, "П000100431904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_23_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='23.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 23.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4320 гр.3 = стр.(4321 + 4322 + 4323 + 4329) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100432003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100432103");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100432203");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100432303");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100432903");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_23_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='23.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 23.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение платежей в стр.4320 гр.4 = стр.(4321 + 4322 + 4323 + 4329) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100432004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100432104");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100432204");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100432304");
	ИменаПоказателей.Вставить("Ф4П0005"		, "П000100432904");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_24_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='24.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 24.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4400 гр.3 = стр.(4100 + 4200 + 4300) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100440003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100410003");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100420003");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100430003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_24_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='24.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 24.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение сальдо денежных потоков в стр.4400 гр.4 = стр.(4100 + 4200 + 4300) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100440004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100410004");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100420004");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100430004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_25_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='25.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 25.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка денежных средств в стр.4500 гр.3 = стр.(4400 + 4450 + 4490) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный остаток денежных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100450003");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100440003");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100445003");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100449003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_25_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='25.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 25.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка денежных средств в стр.4500 гр.4 = стр.(4400 + 4450 + 4490) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный остаток денежных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001"		, "П000100450004");
	ИменаПоказателей.Вставить("Ф4П0002"		, "П000100440004");
	ИменаПоказателей.Вставить("Ф4П0003"		, "П000100445004");
	ИменаПоказателей.Вставить("Ф4П0004"		, "П000100449004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_25_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_25_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф4);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П0001.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П0001.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф4П0001.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_целевом_использовании_средств

&НаСервере
Процедура ПроверкаКС_26_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='26.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена из-за отсутствия стр.6200'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 26.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступивших средств в стр.6200 гр.3 = стр.(6220 + 6240 + 6250) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступивших средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_26_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='26.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена из-за отсутствия стр.6200'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 26.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение поступивших средств в стр.6200 гр.4 = стр.(6220 + 6240 + 6250) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма поступивших средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_27_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='27.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена из-за отсутствия стр.6300'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 27.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение использованных средств в стр.6300 гр.3 = стр.(6310 + 6320 + 6330 + 6350) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма использованных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_27_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='27.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена из-за отсутствия стр.6300'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 27.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение использованных средств в стр.6300 гр.4 = стр.(6310 + 6320 + 6330 + 6350) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма использованных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='28.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 28.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка средств в стр.6400 гр.3 = стр.(6100 + 6220 + 6240 + 6250 - 6310 - 6320 '") +
		НСтр("ru='- 6330 - 6350) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма остатка средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='28.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 28.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка средств в стр.6400 гр.4 = стр.(6100 + 6220 + 6240 + 6250 - 6310 - 6320 '") +
		НСтр("ru='- 6330 - 6350) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма остатка средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru='4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6400"		, "П00010064000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6100"		, "П00010061000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6220"		, "П00010062010" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6240"		, "П00010062400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6250"		, "П00010062500" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6310"		, "П00010063100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6320"		, "П00010063200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6330"		, "П00010063300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6350"		, "П00010063500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф5);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф5П6400.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Бухгалтерского_баланса

&НаСервере
Процедура ПроверкаКС_29_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1150 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000103");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1150 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000104");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1150 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000105");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1170 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000203");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1170 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000204");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1170 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000205");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1210 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000303");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1210 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000304");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1210 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000305");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1250 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000403");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1250 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000404");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1250 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000405");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1230 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000503");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1230 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000504");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1230 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000505");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1360 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеКС.НКО Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000010007203");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1360 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеКС.НКО Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000010007204");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1360 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеКС.НКО Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000010007205");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1410 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000803");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1410 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000804");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1410 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000805");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1450 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000903");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1450 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000904");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1450 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000905");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1510 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001003");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1510 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001004");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1510 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001005");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1520 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001103");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1520 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001104");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1520 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001105");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1550 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001203");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1550 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001204");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_33(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1550 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001205");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_34(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1600 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000603");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_35(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1600 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000604");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_36(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1600 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000010000605");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_37(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1700 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001303");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_38(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1700 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001304");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_39(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='29.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Бухгалтерского баланса (КС 29.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.1700 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000010001305");
	ПроверкаКС_29_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф1);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_прибылях_и_убытках

&НаСервере
Процедура ПроверкаКС_30_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2110 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2110");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000103");
	ПроверкаКС_30_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2110 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2110");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000104");
	ПроверкаКС_30_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2120 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2120");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000203");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2120 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2120");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000204");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2330 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2330");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000303");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2330 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2330");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000304");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2340 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2340");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000403");
	ПроверкаКС_30_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2340 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2340");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000404");
	ПроверкаКС_30_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2350 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2350");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000503");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='30.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о прибылях и убытках'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о прибылях и убытках (КС 30.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.2350 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2350");
	Настройки.Вставить("ИмяПоказателя"		, "П000020000504");
	ПроверкаКС_30_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф2);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф2);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение > 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_об_изменениях_капитала

&НаСервере
Процедура ПроверкаКС_31_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3200 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100320003");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3200 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100320004");
	ПроверкаКС_31_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3200 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100320005");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3200 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100320006");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3300 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100330003");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3300 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100330004");
	ПроверкаКС_31_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3300 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100330005");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3300 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100330006");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3310 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331003");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3310 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331005");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3310 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331006");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3312 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331205");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3313 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331305");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3314 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331403");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3314 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331405");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3315 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331503");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3315 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331505");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3316 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331603");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3316 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331605");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='31.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета об изменениях капитала (КС 31.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.3316 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100331606");
	ПроверкаКС_31_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф3);
	
	Настройки.ЭтоОшибка = Показатели.Ф3П0001.Значение < 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф3П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф3);
	
	Настройки.ЭтоОшибка = Показатели.Ф3П0001.Значение > 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф3П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_движении_денежных_средств

&НаСервере
Процедура ПроверкаКС_32_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4110 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411003");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4110 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411004");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4111 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411103");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4111 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411104");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4112 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411203");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4112 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411204");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4113 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411303");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4113 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411304");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4119 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411903");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4119 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100411904");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4120 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412003");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4120 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412004");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4121 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412103");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4121 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412104");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4122 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412203");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4122 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412204");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4123 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412303");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4123 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412304");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4124 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412403");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4124 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412404");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4129 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412903");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4129 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100412904");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4210 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421003");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4210 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421004");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4211 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421103");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4211 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421104");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4212 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421203");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4212 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421204");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4213 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421303");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4213 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421304");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4214 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421403");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4214 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421404");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_33(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4219 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421903");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_34(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4219 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100421904");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_35(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4220 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422003");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_36(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4220 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422004");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_37(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4221 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422103");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_38(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4221 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422104");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_39(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4222 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422203");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_40(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4222 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422204");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_41(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4223 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422303");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_42(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4223 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422304");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_43(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.43)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4224 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422403");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_44(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.44)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4224 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422404");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_45(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.45)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4229 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422903");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_46(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.46)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4229 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100422904");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_47(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.47)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4310 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431003");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_48(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.48)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4310 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431004");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_49(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.49)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4311 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431103");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_50(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.50)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4311 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431104");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_51(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.51)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4312 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431203");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_52(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.52)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4312 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431204");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_53(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.53'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.53)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4313 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431303");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_54(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.54'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.54)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4313 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431304");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_55(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.55'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.55)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4314 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431403");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_56(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.56'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.56)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4314 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431404");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_57(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.57'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.57)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4319 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431903");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_58(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.58'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.58)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4319 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100431904");
	ПроверкаКС_32_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_59(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.59'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4320 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432003");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_60(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.60'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.60)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4320 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432004");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_61(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.61'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.61)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4321 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432103");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_62(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.62'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.62)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4321 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432104");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_63(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.63'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.63)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4322 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432203");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_64(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.64'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.64)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4322 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432204");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_65(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.65'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.65)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4323 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432303");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_66(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.66'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.66)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4323 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432304");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_67(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.67'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.67)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4329 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432903");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_68(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='32.68'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о движении денежных средств (КС 32.68)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.4329 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100432904");
	ПроверкаКС_32_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф4);
	
	Настройки.ЭтоОшибка = Показатели.Ф4П0001.Значение < 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф4П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф4);
	
	Настройки.ЭтоОшибка = Показатели.Ф4П0001.Значение > 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф4П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_целевом_использовании_средств

&НаСервере
Процедура ПроверкаКС_33_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6220 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100620103");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6220 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100620104");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6240 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100624003");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6240 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100624004");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6250 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100625003");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6250 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100625004");
	ПроверкаКС_33_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6310 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100631003");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6310 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100631004");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6320 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100632003");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6320 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100632004");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6330 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100633003");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6330 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100633004");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6350 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100635003");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='33.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Отчета о целевом использовании средств (КС 33.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение в стр.6350 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИмяПоказателя"		, "П000100635004");
	ПроверкаКС_33_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф5);
	
	Настройки.ЭтоОшибка = Показатели.Ф5П0001.Значение < 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф5П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П0001", Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Ф5);
	
	Настройки.ЭтоОшибка = Показатели.Ф5П0001.Значение > 0;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Ф5П0001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСтруктуруДанныхКС()
	
	ДанныеКС.Вставить("УчитыватьПогрешность", 
		СтруктураРеквизитовФормы.ДелительПредставления = 1000 И СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0);
	ДанныеКС.Вставить("Погрешность"	, 4 * СтруктураРеквизитовФормы.ДелительПредставления);
	ДанныеКС.Вставить("НКО"			, СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ДанныеКС.Вставить("ГодОтчета"	, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	СтруктураРазделов = Новый Структура;
	СтруктураРазделов.Вставить("Ф1"	, ?(ДанныеКС.НКО, "СтруктураДанныхБалансНКО", "СтруктураДанныхБаланс"));
	СтруктураРазделов.Вставить("Ф2"	, "СтруктураДанныхОПУ");
	СтруктураРазделов.Вставить("Ф3"	, "СтруктураДанныхОИК");
	СтруктураРазделов.Вставить("Ф4"	, "СтруктураДанныхОДДС");
	СтруктураРазделов.Вставить("Ф5"	, "СтруктураДанныхОЦИС");
	
	Для Каждого Раздел Из СтруктураРазделов Цикл
		ДанныеКС.Вставить(Раздел.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭтотОбъект[Раздел.Значение]));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Ф1", "Бухгалтерского баланса");
	ПредставлениеРазделов.Вставить("Ф2", "Отчета о прибылях и убытках");
	ПредставлениеРазделов.Вставить("Ф3", "Отчета об изменениях капитала");
	ПредставлениеРазделов.Вставить("Ф4", "Отчета о движении денежных средств");
	ПредставлениеРазделов.Вставить("Ф5", "Отчета о целевом использовании средств");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Ф1", 
		?(ДанныеКС.НКО, "БалансНКО", "Баланс"));
	РазделыПоказателей.Вставить("Ф2", "ОПУ");
	РазделыПоказателей.Вставить("Ф3", "ОИК");
	РазделыПоказателей.Вставить("Ф4", "ОДДС");
	РазделыПоказателей.Вставить("Ф5", "ОЦИС");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	МногостраничныеРазделы = Новый Массив;
	ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Ф1");
	ЦелочисленныеРазделы.Добавить("Ф2");
	ЦелочисленныеРазделы.Добавить("Ф3");
	ЦелочисленныеРазделы.Добавить("Ф4");
	ЦелочисленныеРазделы.Добавить("Ф5");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	Исключения = Новый Соответствие;
	
	Исключения.Вставить("П000100620103", "Графа 3 Строка 6220");
	Исключения.Вставить("П000100620104", "Графа 4 Строка 6220");
	
	ДанныеКС.Вставить("Исключения", Исключения);
	
КонецПроцедуры

&НаСервере
Функция ВидимыеРазделы()
	
	СтрокаРазделов = ?(ДанныеКС.НКО, "БалансНКО", "Баланс") + ", ОПУ, ОИК, ОДДС, ОЦИС";
	
	ДеревоРазделов = РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ДеревоЗначений"));
	ВидимыеРазделы = Новый Структура(СтрокаРазделов);
	
	Для Каждого Элемент Из ВидимыеРазделы Цикл
		РезультатПоиска = ДеревоРазделов.Строки.Найти(Элемент.Ключ, "ИмяСтраницы");
		ВидимыеРазделы[Элемент.Ключ] = 
			?(НЕ РезультатПоиска = Неопределено И РезультатПоиска.ПоказатьСтраницу = 1, Истина, Ложь);
	КонецЦикла;
	
	ВидимыеРазделы.Вставить("Баланс", ВидимыеРазделы[?(ДанныеКС.НКО, "БалансНКО", "Баланс")]);
	
	Возврат ВидимыеРазделы;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для Каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 2);
		ИндексДополнения		= Сред(Элемент.Ключ, 3, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 9, 1);
		Если ИндексРаздела = "Ф1" ИЛИ ИндексРаздела = "Ф2" Тогда
			ПодстрокаСтроки			= Сред(Элемент.Ключ, 4, 4);
		Иначе
			ПодстрокаСтроки			= Сред(Элемент.Значение, 8, 4);
		КонецЕсли;
		ПодстрокаГрафы			= Сред(Элемент.Значение, 13,1);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		ПредставлениеИсключения = ДанныеКС.Исключения.Получить(Элемент.Значение);
		
		Если НЕ ПредставлениеИсключения = Неопределено Тогда
			МассивПредставления.Добавить(ПредставлениеИсключения);
		ИначеЕсли ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Многостраничный			= НЕ ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.СсылкаНаДокументРО		= ?(Лев(Показатель.ИмяПоказателя, 7) = Лев(Показатель.Синоним, 7), 
		Неопределено, НоваяСтрока.СсылкаНаДокументРО);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ЗначениеЗаполнено(НомерСтроки) И Сред(Показатель.ИмяПоказателя, 14, 1) = "_" Тогда
		Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
	КонецЕсли;
	
	Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
		Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
		
		Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
			Показатель.Значение = ОкруглитьЧислоПоФормату(ЭтотОбъект, ЗначениеВИсточнике);
			Показатель.Итог = Показатель.Итог + Показатель.Значение;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
			Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
			Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для Каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")";
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для Каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для Каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РавенствоНеВыполнено(Знач ЛевоеЗначение, Знач ПравоеЗначение, Настройки, КодСравнения = 1)
	
	Если ДанныеКС.УчитыватьПогрешность Тогда
		
		ПравоеЗначениеМин = ПравоеЗначение - ДанныеКС.Погрешность;
		ПравоеЗначениеМак = ПравоеЗначение + ДанныеКС.Погрешность;
		
		Если КодСравнения = 1 Тогда
			// равно
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (± " + ДанныеКС.Погрешность + ")";
			Возврат НЕ (ПравоеЗначениеМин <= ЛевоеЗначение И ЛевоеЗначение <= ПравоеЗначениеМак);
		ИначеЕсли КодСравнения = 2 Тогда
			// больше или равно
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (- " + ДанныеКС.Погрешность + ")";
			Возврат ЛевоеЗначение < ПравоеЗначениеМин;
		ИначеЕсли КодСравнения = 3 Тогда
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (+ " + ДанныеКС.Погрешность + ")";
			// меньше или равно
			Возврат ЛевоеЗначение > ПравоеЗначениеМак;
		КонецЕсли;
	
	Иначе
	
		Если КодСравнения = 1 Тогда
			// равно
			Возврат НЕ ЛевоеЗначение = ПравоеЗначение;
		ИначеЕсли КодСравнения = 2 Тогда
			// больше или равно
			Возврат ЛевоеЗначение < ПравоеЗначение;
		ИначеЕсли КодСравнения = 3 Тогда
			// меньше или равно
			Возврат ЛевоеЗначение > ПравоеЗначение;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	УдалитьФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьФорму61н(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ДобавитьФайл("ФайлПояснительнойЗаписки", НСтр("ru='Выбор файла пояснений'"));
	Иначе
		ДобавитьФайлСПостпроверкой("ФайлПояснительнойЗаписки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	УдалитьФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлСПостпроверкой("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлСПостпроверкой("ФайлЗаявленияСоюзаСельхозпроизводителей");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаОчистка(Элемент, СтандартнаяОбработка)
	УдалитьФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
		УдалитьФайл("ФайлПояснительнойЗаписки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
		УдалитьФайл("ФайлАудиторскогоЗаключения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаЗаявленияРевизионногоСоюза) Тогда
		УдалитьФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область БлокВариантЗаполнения

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				Элементы.ВариантЗаполнения.Доступность = Истина;
				Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			Элементы.ВариантЗаполнения.Доступность = Истина;
			Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для Каждого ТекСтрока Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML();
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользоватьФорму61н(ДатаДействияФормы)
	
	Возврат (ДатаДействияФормы >= '2019-01-01');
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
