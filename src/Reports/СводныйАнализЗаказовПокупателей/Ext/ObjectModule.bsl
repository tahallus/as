#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ОбновитьВидимостьОтбораОрганизация(Форма.Отчет.КомпоновщикНастроек);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	// Отключение итогов многовалютного отчета
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если НЕ ПараметрПериод.Использование Тогда
		НачалоПериода = '0001-01-01';
		КонецПериода = '0001-01-01';
	Иначе
		НачалоПериода = ПараметрПериод.Значение.ДатаНачала;
		КонецПериода = ПараметрПериод.Значение.ДатаОкончания;
	КонецЕсли;
	Если ЕстьЗаказыНеВВалютеУчета(НачалоПериода, КонецПериода) Тогда
		ПоляРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("СуммаДокумента, Оплачено, ОсталосьОплатить");
		Для каждого ИмяПоля Из ПоляРесурсов Цикл
			ОтключитьИтоги(ИмяПоля);
		КонецЦикла; 
	КонецЕсли; 
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Заказы,Контрагенты,Покупатели,Номенклатура,Отгрузки,Оплаты,Продажи,CRM'");
	НастройкиВариантов["ВыполнениеИОплатаЗаказНарядов"].Теги = НСтр("ru = 'Заказы,Контрагенты,Покупатели,Номенклатура,Отгрузки,Оплаты,Работы'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	Для Каждого НастройкиТекВарианта Из НастройкиВариантов Цикл
		ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиТекВарианта.Значение.СвязанныеПоля, "Контрагент", "Справочник.Контрагенты");
		ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиТекВарианта.Значение.СвязанныеПоля, "Номенклатура", "Справочник.Номенклатура");
		ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиТекВарианта.Значение.СвязанныеПоля, "ЗаказПокупателя", "Документ.ЗаказПокупателя");
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЗаказыНеВВалютеУчета(НачалоПериода, КонецПериода)
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Константа.ВалютаУчета КАК ВалютаУчета
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.ВалютаДокумента <> ВалютаУчета.Значение";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕЖДУ &НачалоПериода И &КонецПериода", ">= &НачалоПериода");
	КонецЕсли;
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОтключитьИтоги(ИмяПоля)
	Перем ПолеБезИтога, ПолеСИтогом;
	
	Для каждого Поле Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Если НРег(Поле.ПутьКДанным) <> НРег(СокрЛП(ИмяПоля)) Тогда
			Продолжить;
		КонецЕсли;
		Если Поле.Выражение = "0" Тогда
			ПолеБезИтога = Поле;
		Иначе
			ПолеСИтогом = Поле;
		КонецЕсли; 
	КонецЦикла;
	
	// Найдены оба поля
	Если ПолеБезИтога <> Неопределено И ПолеСИтогом <> Неопределено Тогда
		
		ИменаГруппировок = Новый Массив;
		Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Для каждого Поле Из Набор.Поля Цикл
				Если Поле.ОграничениеИспользования.Группировка Тогда
					Продолжить;
				КонецЕсли; 
				ИменаГруппировок.Добавить(Поле.ПутьКДанным);
				Если Поле.ТипЗначения.Типы().Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				Тип = Поле.ТипЗначения.Типы().Получить(0);
				Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
					// Это справочник
					МетаданныеСправочника = Метаданные.НайтиПоТипу(Тип);
					Если МетаданныеСправочника <> Неопределено И МетаданныеСправочника.Иерархический Тогда
						ИменаГруппировок.Добавить(СтрШаблон("%1 Иерархия", Поле.ПутьКДанным));
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;  
		КонецЦикла;
		ИменаГруппировок.Добавить("ОбщийИтог");
		
		ПолеБезИтога.Группировки.Очистить();
		ПолеСИтогом.Группировки.Очистить();
		Для каждого ИмяГруппировки Из ИменаГруппировок Цикл
			Если ИмяГруппировки = "ЗаказПокупателя" Тогда
				ПолеСИтогом.Группировки.Добавить(ИмяГруппировки);
			Иначе
				ПолеБезИтога.Группировки.Добавить(ИмяГруппировки);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли