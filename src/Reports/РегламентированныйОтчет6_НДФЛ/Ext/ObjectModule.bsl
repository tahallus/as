#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#Область ПеременныеКонтрольныхСоотношений

Перем ДанныеКС;

Перем Документирование;

Перем ТаблицаОписаний;

Перем СчетчикФормулДляРасшифровок;

Перем СписокРасшифровкиПоказателей;

Перем СписокРасшифровкиформулы;

Перем ПараметрыКС;

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	// Особая обработка: групповое автоформирование для выбранных налоговых органов.
	Если ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		
		ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
		
		КПП   = ПараметрыАвтоФормирования.КПП;
		КодНО = ПараметрыАвтоФормирования.НалоговыйОрган;
		
		ОКТМО = СокрЛП(ПараметрыАвтоФормирования.ОКТМО);
		Если НЕ ИП Тогда
			ОКТМО = ?(СтрДлина(ОКТМО) > 8, Лев(ОКТМО, 8), ОКТМО);
		КонецЕсли;
		ПараметрыАвтоФормирования.Вставить("ОКТМО", ОКТМО);
		
		РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
		
		СтатусПроверки = Истина;
		
		Если НЕ ИП Тогда
			
			Если НЕ ЗначениеЗаполнено(КПП) Тогда
				РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан КПП'",
				СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
				РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. КПП указан некорректно'",
				СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КодНО) Тогда
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан код налогового органа'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ СтрДлина(КодНО) = 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. код налогового органа указан некорректно'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан ОКТМО'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ СтрДлина(ОКТМО) = 11 И НЕ СтрДлина(ОКТМО) = 8 Тогда
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. ОКТМО указан некорректно'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ СтатусПроверки Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ПодготовленныйРеглОтчет = ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет);
	
	РазделыОтчета       = ПодготовленныйРеглОтчет.РазделыОтчета;
	ДанныеРеглОтчета    = ПодготовленныйРеглОтчет.ДанныеРеглОтчета;
	ДеревоСтраницОтчета = ПодготовленныйРеглОтчет.ДеревоСтраницОтчета;
	
	Если НЕ ПараметрыАвтоформирования.Свойство("СсылкаНаСохрРеглОтчет") Тогда
		ПараметрыАвтоформирования.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	КонецЕсли;
	Если НЕ ПараметрыАвтоформирования.Свойство("Ошибки") Тогда
		ПараметрыАвтоформирования.Вставить("Ошибки", Неопределено);
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ИмяФормы);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет)
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ПараметрыАвтоФормирования.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьКодОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
	ДанныеРеглОтчета.СтруктураРеквизитовФормы, ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	
	СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
	
	ИнициализироватьОбычныеРазделы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
	ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов, СтруктураДанныхРазделов);
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	
	РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.Период = Формат(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КодОтчетногоПериода[
	"НеЗаполненКодФормыРеорганизации_" + Месяц(ПараметрыАвтоформирования.ДатаОкончания)], "ЧЦ=2; ЧВН=");
	РазделыОтчета.Титульный.ОтчетГод = Формат(ПараметрыАвтоформирования.ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = Организация;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, СтруктураДанныхРазделов);
	
	// Особая обработка: групповое автоформирование для выбранных налоговых органов.
	Если ПараметрыАвтоФормирования.Свойство("РегистрацияВНалоговомОргане") Тогда
		
		Если НЕ ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП
			И Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация)
			И НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
			
			РегистрацияВНалоговомОрганеВладелец = ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане.Владелец;
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеВладелец) Тогда
				
				РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка
				= Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистрацияВНалоговомОрганеВладелец));
				
				Если РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка Тогда
					
					РегистрацияВНалоговомОрганеВладелецЕстьРеквизитРегистрацияВНалоговомОргане
					= РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено;
					
					Если РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане")
						<> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОрганеВладелец,
						"РегистрацияВНалоговомОргане")) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
						И РегистрацияВНалоговомОрганеВладелец.РегистрацияВНалоговомОргане
						<> ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане Тогда
						
						СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "220";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
	ДанныеРеглОтчета.ДатаПодписи, РазделыОтчета.Титульный);
	
	// Особая обработка: групповое автоформирование для выбранных налоговых органов.
	Если ПараметрыАвтоФормирования.Свойство("НалоговыйОрган")
		И ПараметрыАвтоФормирования.Свойство("КПП")
		И ПараметрыАвтоФормирования.Свойство("ОКТМО") Тогда
		
		РазделыОтчета.Титульный.НалоговыйОрган = ПараметрыАвтоФормирования.НалоговыйОрган;
		РазделыОтчета.Титульный.КПП            = ПараметрыАвтоФормирования.КПП;
		РазделыОтчета.Титульный.ОКТМО          = ПараметрыАвтоФормирования.ОКТМО;
		
		ЗаполнитьСведенияОПодписантах(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
		РазделыОтчета.Титульный, ДанныеРеглОтчета.ДатаПодписи);
		
	КонецЕсли;
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ИзменитьНастройкиРазделов(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, Новый УникальныйИдентификатор,
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ВозможныеКодыПериода_Приложение1 = КодыОтчетногоПериодаПриКоторыхМожетБытьЗаполненоПриложение1();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("ЗаполнятьПриложение1",
		ВозможныеКодыПериода_Приложение1.Найти(СокрЛП(РазделыОтчета.Титульный.Период)) <> Неопределено);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	
	Для Каждого Раздел Из ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов Цикл
		
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы,
										  Контейнер,
										  ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ПараметрыАвтоформирования.ИсточникОтчета,
																	ИмяФормы,
																	ПараметрыОтчета,
																	Контейнер);
		
		РассчитатьИтоги(ИмяФормы,
						Контейнер,
						ДанныеРеглОтчета.СтруктураРеквизитовФормы,
						ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
	ПодготовленныйРеглОтчет = Новый Структура;
	ПодготовленныйРеглОтчет.Вставить("РазделыОтчета",       РазделыОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДанныеРеглОтчета",    ДанныеРеглОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	Возврат ПодготовленныйРеглОтчет;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "6-НДФЛ (с 2021 года)");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М6");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КодОтчетногоПериода");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1 = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР1М2 = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппыП1М1 = "П000П1М1";
	СтруктураРеквизитовФормы.мИдГруппыП1М2 = "П000П1М2";
	СтруктураРеквизитовФормы.мИдГруппыП1М3 = "П000П1М3";
	СтруктураРеквизитовФормы.мИдГруппыП1М4 = "П000П1М4";
	СтруктураРеквизитовФормы.мИдГруппыП1М5 = "П000П1М5";
	СтруктураРеквизитовФормы.мИдГруппыП1М6 = "П000П1М6";
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М102101");
	ИменаГраф.Добавить("П00001М102201");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М203101");
	ИменаГраф.Добавить("П00001М203201");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М100001");
	ИменаГраф.Добавить("П000П1М100002");
	ИменаГраф.Добавить("П000П1М100003");
	ИменаГраф.Добавить("П000П1М100004");
	ИменаГраф.Добавить("П000П1М100005");
	ИменаГраф.Добавить("П000П1М100006");
	ИменаГраф.Добавить("П000П1М100007");
	ИменаГраф.Добавить("П000П1М100008");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М2);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М3);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М4);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М5);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М200001");
	ИменаГраф.Добавить("П000П1М200002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М3.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М300001");
	ИменаГраф.Добавить("П000П1М300002");
	ИменаГраф.Добавить("П000П1М300003");
	ИменаГраф.Добавить("П000П1М300004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М3, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М4.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М400001");
	ИменаГраф.Добавить("П000П1М400002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М4, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М5.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М500001");
	ИменаГраф.Добавить("П000П1М500002");
	ИменаГраф.Добавить("П000П1М500003");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М6);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М5, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000П1М6.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000П1М600004");
	ИменаГраф.Добавить("П000П1М600005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М6, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 2, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
 										 СтруктураРеквизитовФормы,
							 			 СтруктураМногоуровневыхРазделов,
								 		 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
				
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции	

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "120";
	Иначе
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "214";
		Если РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
			<> СтруктураРеквизитовФормы.Организация Тогда
			СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "220";
		ИначеЕсли РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(
			СтруктураРеквизитовФормы.Организация) Тогда
			СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "335";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОтчетногоПериода(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода = Новый Структура;
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_3",  51);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_6",  52);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_9",  53);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_12", 90);
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_3",  21);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_6",  31);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_9",  33);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_12", 34);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, КодНО, ОКТМО, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
									СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
			Иначе
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
		КонецЕсли;
		
		ОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
		
		Если НЕ СтруктураРеквизитовФормы.ИП Тогда
			ОКТМО = ?(СтрДлина(ОКТМО) > 8, Лев(ОКТМО, 8), ОКТМО);
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
			СтруктураДанныхТитульный.Области.ОКТМО.Значение = ОКТМО;
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
			СтруктураДанныхТитульный.ОКТМО = ОКТМО;
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(НаименованиеОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  СтруктураДанныхТитульный,
								  ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП = СокрЛП(СтруктураДанныхТитульный.КПП);
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Подписант - представитель.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ОргУп.Значение        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ОргУп        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы",                 ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",         ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",              ПараметрыЗаписи.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",            ПараметрыЗаписи.ФлПодсчетСтраниц);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	Возврат;
	
КонецПроцедуры

Процедура РассчитатьИтоги(ИмяФормы, Контейнер, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	
	// Приложение 1.
	
	ИмяРаздела = "Приложение1";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	ИмяГруппыМнЧП1М1 = СтруктураРеквизитовФормы.мИдГруппыП1М1;
	ИмяГруппыМнЧП1М2 = СтруктураРеквизитовФормы.мИдГруппыП1М2;
	ИмяГруппыМнЧП1М5 = СтруктураРеквизитовФормы.мИдГруппыП1М5;
	ИмяГруппыМнЧП1М6 = СтруктураРеквизитовФормы.мИдГруппыП1М6;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДеревоМнЧП1М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М1];
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧП1М1.Строки Цикл
			
			СуммаДоходов = 0;
			СуммаВычетов = 0;
			
			ДеревоМнЧП1М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М2];
			Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП1М2.Строки Цикл
				Вычет_Раздел3 = СтрокаПодчМнЧ.Данные["П000П1М200002"];
				СуммаВычетов = СуммаВычетов + Вычет_Раздел3;
			КонецЦикла;
			
			ДеревоМнЧП1М5 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М5];
			Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП1М5.Строки Цикл
				
				Доход_Приложение = СтрокаПодчМнЧ.Данные["П000П1М500003"];
				СуммаДоходов = СуммаДоходов + Доход_Приложение;
				
				ДеревоМнЧП1М6 = СтрокаПодчМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП1М6];
				Для каждого СтрокаПодчПодчМнЧ Из ДеревоМнЧП1М6.Строки Цикл
					Вычет_Приложение = СтрокаПодчПодчМнЧ.Данные["П000П1М600005"];
					СуммаВычетов = СуммаВычетов + Вычет_Приложение;
				КонецЦикла;
				
			КонецЦикла;
			
			// Общая сумма дохода.
			СтрокаМнЧ.Данные.Вставить("П000П1М100002", Макс(0, СуммаДоходов));
			
			// Налоговая база.
			СтрокаМнЧ.Данные.Вставить("П000П1М100003", Макс(0, СтрокаМнЧ.Данные["П000П1М100002"] - СуммаВычетов));
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 1.
	//
	ИмяРаздела = "Раздел1";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	ИмяГруппыР1М1 = СтруктураРеквизитовФормы.мИдГруппыР1М1;
	ИмяГруппыР1М2 = СтруктураРеквизитовФормы.мИдГруппыР1М2;
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		Данные = Ветка.Данные;
		
		ДеревоР1М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыР1М1];
		ДеревоР1М2 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыР1М2];
		
		Сумма020 = 0;
		Для каждого СтрокаР1М1 Из ДеревоР1М1.Строки Цикл
			Сумма020 = Сумма020 + СтрокаР1М1.Данные["П00001М102201"];
		КонецЦикла;
		Данные.Вставить("П000010002001", Сумма020);
		
		Сумма030 = 0;
		Для каждого СтрокаР1М2 Из ДеревоР1М2.Строки Цикл
			Сумма030 = Сумма030 + СтрокаР1М2.Данные["П00001М203201"];
		КонецЦикла;
		Данные.Вставить("П000010003001", Сумма030);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = СтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	Возврат ИмяГлРаздела;
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
				ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
			
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
	
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Процедура ИзменитьНастройкиРазделов(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета)
	
	КодПериода = СокрЛП(РазделыОтчета.Титульный.Период);
	
	ВозможныеКодыПериода_Приложение1 = КодыОтчетногоПериодаПриКоторыхМожетБытьЗаполненоПриложение1();
	
	Если ВозможныеКодыПериода_Приложение1.Найти(КодПериода) <> Неопределено Тогда
		
		ИзменитьНастройкиРазделаВДеревеРазделов(ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Приложение1", 1);
		
	Иначе
		
		ИзменитьНастройкиРазделаВДеревеРазделов(ИмяФормы, ДанныеРеглОтчета.ДеревоСтраницОтчета, "Приложение1", 0);
		
		ИнициализироватьМногоуровневыйРаздел(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов, "Приложение1");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьНастройкиРазделаВДеревеРазделов(ИмяФормы,
												  ДеревоСтраницОтчета,
												  ИмяРаздела,
												  ВариантНастроек)
	
	Для Каждого СтраницаНастроек Из ДеревоСтраницОтчета.Строки Цикл
		
		Если СтраницаНастроек.ИмяСтраницы = ИмяРаздела Тогда
			
			СтраницаНастроек.ПоказатьСтраницу = ВариантНастроек;
			СтраницаНастроек.ВыводНаПечать    = ВариантНастроек;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "6_НДФЛ");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		
	КонецЦикла;
	
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
		
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
														  СохраненныеДанныеОтчета,
														  СтруктураРеквизитовФормы,
														  СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
									СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИндивидуальныйПредприниматель);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи", Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ОКТМО", СокрЛП(Титульный.ОКТМО));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ6.2");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "NO_NDFL6.2"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки501");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Месяц = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	Если Месяц = 3 Тогда
		ВозможныеКодыПериода = СтрРазделить("21,51", ",", Ложь);
	ИначеЕсли Месяц = 6 Тогда
		ВозможныеКодыПериода = СтрРазделить("31,52", ",", Ложь);
	ИначеЕсли Месяц = 9 Тогда
		ВозможныеКодыПериода = СтрРазделить("33,53", ",", Ложь);
	ИначеЕсли Месяц = 12 Тогда
		ВозможныеКодыПериода = СтрРазделить("34,90", ",", Ложь);
	Иначе
		ВозможныеКодыПериода = СтрРазделить("21,31,33,34,51,52,53,90", ",", Ложь);
	КонецЕсли;
	ВозможныеКодыМестаПредставления   = СтрРазделить("120,121,122,124,214,215,220,223,320,335", ",", Ложь);
	ВозможныеКодыФормыРеорганизции    = СтрРазделить("0,1,2,3,4,5,6,7,9", ",", Ложь);
	ВозможныеСтатусыНалогоплательщика = СтрРазделить("1,2,3,4,5,6", ",", Ложь);
	ВозможныеКодыВидаДокУдЛичность    = СтрРазделить("21,03,07,08,10,11,12,13,14,15,18,23,24,91", ",", Ложь);
	ВозможныеКодыВидаУведомления      = СтрРазделить("1,2,3", ",", Ложь);
	ВозможныеМесяцы                   = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12", ",", Ложь);
	
	// Титульный лист.
	//
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан ИНН налогового агента", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан ИНН налогового агента, не состоящий из 10 цифр",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан КПП налогового агента", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан КПП налогового агента, не состоящий из 9 символов",
			"Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
			Если Символы56КПП = "50" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "5-й и 6-й символы в КПП налогового агента не должны быть равны 50",
				"Титульный", "КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано наименование налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		ТекстСообщения = "";
		Если НЕ ИННФЛСоответствуетТребованиям(ПараметрыВыгрузки.ИННОрг, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задан ИНН налогового агента"
			+ ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""), "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя налогового агента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код отчетного периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан некорректный код отчетного периода. Возможны значения: "
		+ СтрСоединить(ВозможныеКодыПериода, ", "), "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан код налогового органа, не состоящий из 4 цифр",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код места, по которому представляется расчет", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыМестаПредставления.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан некорректный код места, по которому представляется расчет. Возможны значения: "
		+ СтрСоединить(ВозможныеКодыМестаПредставления, ", "), "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ОКТМОДлина = СтрДлина(ПараметрыВыгрузки.ОКТМО);
	Если НЕ (ОКТМОДлина = 8 ИЛИ ОКТМОДлина = 11) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ?(ОКТМОДлина = 0, "Не задан код по ОКТМО",
		"задан код по ОКТМО, не состоящий из 8 или 11 цифр"), "Титульный", "ОКТМО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (ПараметрыВыгрузки.ЭтоЮЛ И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан код формы реорганизации (ликвидации) / код лишения полномочий (закрытия) обособленного подразделения",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан некорректный код формы реорганизации (ликвидации) / "
				+ "код лишения полномочий (закрытия) обособленного подразделения. Возможны значения: "
				+ СтрСоединить(ВозможныеКодыФормыРеорганизции, ", "), "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН "
					+ ?(ПараметрыВыгрузки.ФормРеорг = "9", "лишенного полномочий (закрытого) обособленного подразделения",
					"реорганизованной организации"), "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП "
					+ ?(ПараметрыВыгрузки.ФормРеорг = "9", "лишенного полномочий (закрытого) обособленного подразделения",
					"реорганизованной организации"), "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				Иначе
					Символы56КПП = Сред(ПараметрыВыгрузки.КППРеорг, 5, 2);
					Если Символы56КПП = "50" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "5-й и 6-й символы в КПП " + ?(ПараметрыВыгрузки.ФормРеорг = "9",
						"лишенного полномочий (закрытого) обособленного подразделения", "реорганизованной организации")
						+ " не должны быть равны 50", "Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел1",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000010001001"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": " + ?(КБКДлина = 0,
				"не задан код бюджетной классификации", "задан код бюджетной классификации, не состоящий из 20 цифр"),
				"Раздел1", "П000010001001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДолжнаБытьЗаполненаМнЧ = Ложь;
			
			ЗначПок = Окр(Данные["П000010002001"]);
			Если ЗначПок < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы
				+ ": значение в строке 020 не должно быть отрицательным", "Раздел1", "П000010002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДолжнаБытьЗаполненаМнЧ = ЗначПок > 0;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
			
			ЗаполненаМнЧ = ЗаполненаМногострочнаяЧасть(ИмяФормы, ДанныеМнЧ,
			"Раздел1", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если ДолжнаБытьЗаполненаМнЧ И НЕ ЗаполненаМнЧ Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы
				+ ": сведения о перечислении налога должны быть заполнены, если значение в строке 020 больше нуля",
				"Раздел1", "П00001М102101_1", НомерСтраницы);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ЗаполненаМнЧ Тогда
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Инд = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М102101"]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 021-022 не задан срок перечисления налога", "Раздел1", "П00001М102101_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные["П00001М102101"]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 021-022 задан срок перечисления налога, выходящий за пределы периода с 01.01.1900 по 31.12.2099",
						"Раздел1", "П00001М102101_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если Окр(СтрокаМнЧ.Данные["П00001М102201"]) < 0 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 021-022 значение суммы налога не должно быть отрицательным",
						"Раздел1", "П00001М102201_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ДолжнаБытьЗаполненаМнЧ = Ложь;
			
			ЗначПок = Окр(Данные["П000010003001"]);
			Если ЗначПок < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы
				+ ": значение в строке 030 не должно быть отрицательным", "Раздел1", "П000010003001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДолжнаБытьЗаполненаМнЧ = ЗначПок > 0;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
			
			ЗаполненаМнЧ = ЗаполненаМногострочнаяЧасть(ИмяФормы, ДанныеМнЧ,
			"Раздел1", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если ДолжнаБытьЗаполненаМнЧ И НЕ ЗаполненаМнЧ Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы
				+ ": сведения о возврате налога должны быть заполнены, если значение в строке 030 больше нуля",
				"Раздел1", "П00001М203101_1", НомерСтраницы);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ЗаполненаМнЧ Тогда
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Инд = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М203101"]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 031-032 не задана дата возврата налога", "Раздел1", "П00001М203101_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, СтрокаМнЧ.Данные["П00001М203101"]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 031-032 задана дата возврата налога, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Раздел1", "П00001М203101_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если Окр(СтрокаМнЧ.Данные["П00001М203201"]) < 0 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 -> Страница " + НомерСтраницы + ": в строке " + Инд
						+ " группы строк 031-032 значение суммы налога не должно быть отрицательным",
						"Раздел1", "П00001М203201_" + Инд, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 1 должен быть заполнен", "Раздел1", "П000010001001", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел2",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			КБКДлина = СтрДлина(СокрЛП(Данные["П000020010501"]));
			Если НЕ КБКДлина = 20 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2 -> Страница " + НомерСтраницы + ": " + ?(КБКДлина = 0,
				"не задан код бюджетной классификации", "задан код бюджетной классификации, не состоящий из 20 цифр"),
				"Раздел2", "П000020010501", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для каждого Пок Из Данные Цикл
				Если ТипЗнч(Пок.Значение) = Тип("Число") И Пок.Значение < 0 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2 -> Страница " + НомерСтраницы + ": значение в строке "
					+ Сред(Пок.Ключ, 9, 3) + " не должно быть отрицательным", "Раздел2", Пок.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Раздел 2 должен быть заполнен", "Раздел2", "П000020010501", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Приложение 1.
	//
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		
		ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
		
		ЗаполненоПриложение1 = ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Приложение1",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ДолжноБытьЗаполненоПриложение1
		= ((ПараметрыВыгрузки.Период = "34" ИЛИ ПараметрыВыгрузки.Период = "90") И ПараметрыВыгрузки.НомКорр = "0");
		
		Если ДолжноБытьЗаполненоПриложение1 И НЕ ЗаполненоПриложение1 Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Приложение 1 должно быть заполнено в первичном расчете за налоговый период - календарный год",
			"Приложение1", "П000П10000001", "1");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЗаполненоПриложение1 Тогда
			
			ВозможныеКодыПериода_Приложение1 = КодыОтчетногоПериодаПриКоторыхМожетБытьЗаполненоПриложение1();
			
			МожетБытьЗаполненоПриложение1 = ВозможныеКодыПериода_Приложение1.Найти(ПараметрыВыгрузки.Период) <> Неопределено;
			
			Если НЕ МожетБытьЗаполненоПриложение1 Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Приложение 1 не должно быть заполнено при заданном значении кода отчетного периода. "
				+ "Возможные значения кода отчетного периода, при которых может быть заполнено Приложение 1: "
				+ СтрСоединить(ВозможныеКодыПериода_Приложение1, ", "), "Титульный", "Период");
				СтатусПроверки = Ложь;
				
			Иначе
				
				ПредставленияСтраницПриложения1СНеуникальнымиПорядковымиНомерами = Новый Массив;
				
				ТаблПорядковыхНомеров = Новый ТаблицаЗначений;
				ТаблПорядковыхНомеров.Колонки.Добавить("ПорядковыйНомер");
				ТаблПорядковыхНомеров.Колонки.Добавить("ИндексСтраницы");
				ТаблПорядковыхНомеров.Колонки.Добавить("СчетчикСтраниц");
			
				Для каждого Ветка Из ДеревоРаздела.Строки Цикл
					
					Данные = Ветка.Данные;
					НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					СтруктПарам = Новый Структура;
					СтруктПарам.Вставить("ПроверкаВыгрузкиСтраницы");
					СтруктПарам.Вставить("Фам", Данные.П000П10000004);
					СтруктПарам.Вставить("Имя", Данные.П000П10000005);
					СтруктПарам.Вставить("Отч", Данные.П000П10000006);
					СтруктПарам.Вставить("ДатаРожд", Данные.П000П10000008);
					СтруктПарам.Вставить("НомерСтраницы", НомерСтраницы);
					ПредстСтраницы
					= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
					(СтруктПарам));
					
					ПорядковыйНомер = Данные["П000П10000001"];
					Если НЕ ЗначениеЗаполнено(ПорядковыйНомер) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + ": не задан номер справки",
						"Приложение1", "П000П10000001", НомерСтраницы);
						СтатусПроверки = Ложь;
					Иначе
						НоваяСтрокаТаблПорядковыхНомеров = ТаблПорядковыхНомеров.Добавить();
						НоваяСтрокаТаблПорядковыхНомеров.ПорядковыйНомер = ПорядковыйНомер;
						НоваяСтрокаТаблПорядковыхНомеров.ИндексСтраницы = ДеревоРаздела.Строки.Индекс(Ветка);
						НоваяСтрокаТаблПорядковыхНомеров.СчетчикСтраниц = 1;
					КонецЕсли;
					
					НомКоррСвед = СокрЛП(Данные["П000П10000002"]);
					Если НЕ ЗначениеЗаполнено(НомКоррСвед) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задан номер корректировки сведений", "Приложение1", "П000П10000002", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ (СтрДлина(НомКоррСвед) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомКоррСвед)) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": задан номер корректировки сведений, не состоящий из 2 цифр",
						"Приложение1", "П000П10000002", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НомКоррСвед <> "00" И ПараметрыВыгрузки.НомКорр = "0" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": номер корректировки сведений должен принимать значение 00 при представлении первичного расчета",
						"Приложение1", "П000П10000002", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(Данные["П000П10000003"]);
					Если ЗначениеЗаполнено(ЗначПок) Тогда
						ТекстСообщения = "";
						Если НЕ ИННФЛСоответствуетТребованиям(ЗначПок, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
							+ ": неверно задан ИНН физического лица" + ?(ЗначениеЗаполнено(ТекстСообщения),
							". " + ТекстСообщения, ""), "Приложение1", "П000П10000003", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000П10000004"])) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задана фамилия физического лица", "Приложение1", "П000П10000004", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СокрЛП(Данные["П000П10000005"])) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задано имя физического лица", "Приложение1", "П000П10000005", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(Данные["П000П10000007"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задан статус налогоплательщика", "Приложение1", "П000П10000007", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеСтатусыНалогоплательщика.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": некорректно задан статус налогоплательщика. Возможны значения: " + СтрСоединить(
						ВозможныеСтатусыНалогоплательщика, ", "), "Приложение1", "П000П10000007", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = Данные["П000П10000008"];
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задана дата рождения физического лица", "Приложение1", "П000П10000008", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ " задана дата рождения физического лица, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Приложение1", "П000П10000008", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(Данные["П000П10000009"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задано гражданство (код страны) физического лица", "Приложение1", "П000П10000009", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ (СтрДлина(ЗначПок) = 3 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок)) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": задано значение гражданства (кода страны) физического лица, не состоящее из 3 цифр",
						"Приложение1", "П000П10000009", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(Данные["П000П10000010"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не задан код вида документа, удостоверяющего личность", "Приложение1", "П000П10000010", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеКодыВидаДокУдЛичность.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": некорректно задан код вида документа, удостоверяющего личность. Возможны значения: "
						+ СтрСоединить(ВозможныеКодыВидаДокУдЛичность, ", "), "Приложение1", "П000П10000010", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ (ЗначениеЗаполнено(СокрЛП(Данные["П000П10000011"]))
						ИЛИ ЗначениеЗаполнено(СокрЛП(Данные["П000П10000012"]))) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": не заданы серия и номер документа, удостоверяющего личность",
						"Приложение1", "П000П10000011", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(Данные["П000П10000011"]) + СокрЛП(Данные["П000П10000012"])) > 24 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": общее количество символов в серии и номере документа, удостоверяющего личность, превышает 24",
						"Приложение1", "П000П10000011", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Раздел 2 Приложения 1 (иерархическая многострочная часть на странице Приложения 1).
					//
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
					
					ДолжненБытьЗаполненРаздел2Приложения1 = ЗначениеЗаполнено(НомКоррСвед) И НомКоррСвед <> "99";
					
					ЗаполненРаздел2Приложения1 = ЗаполненаМногострочнаяЧасть(ИмяФормы, ДанныеМнЧ,
					"Приложение1", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
					
					Если ДолжненБытьЗаполненРаздел2Приложения1 И НЕ ЗаполненРаздел2Приложения1 Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы
						+ ": сведения о доходах и соответствующих вычетах по месяцам налогового периода должны быть заполнены при "
						+ "значении номера корректировки сведений, не равном 99", "Приложение1", "П000П1М500001_1_1", НомерСтраницы);
						СтатусПроверки = Ложь;
						
					ИначеЕсли ЗаполненРаздел2Приложения1 Тогда
						
						Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
							
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							СтавкаНалога_Стр = Формат(СтрокаМнЧ.Данные["П000П1М100001"], "ЧН=0");
							
							ПредстРаздела2 = "Сведения по ставке налога " + СтавкаНалога_Стр + "%";
							
							Если СтрокаМнЧ.Данные["П000П1М100002"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": общая сумма дохода не должна быть отрицательной",
								"Приложение1", "П000П1М100002_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100003"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": налоговая база не должна быть отрицательной",
								"Приложение1", "П000П1М100003_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100004"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": сумма налога исчисленная не должна быть отрицательной",
								"Приложение1", "П000П1М100004_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100005"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": сумма налога удержанная не должна быть отрицательной",
								"Приложение1", "П000П1М100005_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100006"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": сумма фиксированных авансовых платежей не должна быть отрицательной",
								"Приложение1", "П000П1М100006_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100007"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ":сумма налога перечисленная не должна быть отрицательной",
								"Приложение1", "П000П1М100007_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							Если СтрокаМнЧ.Данные["П000П1М100008"] < 0 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
								+ ПредстРаздела2 + ": сумма налога, излишне удержанная налоговым агентом, не должна быть отрицательной",
								"Приложение1", "П000П1М100008_" + НомерСтроки, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							// Раздел 3 Приложения 1 (2 многострочные части, подчиненные экземпляру раздела 2).
							//
							ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М2];
							
							Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
								
								ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
								НомерСтрокиПодч = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
								ПостфиксСтрокиПодч = НомерСтроки + "_" + НомерСтрокиПодч;
								
								Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаПодчМнЧ, "Приложение1",
									СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
									
									ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М200001"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений о вычетах раздела 3 не задан код вычета",
										"Приложение1", "П000П1М200001_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли НЕ (СтрДлина(ЗначПок) = 3 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок)) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений о вычетах раздела 3 задан код вычета, не состоящий из 3 цифр",
										"Приложение1", "П000П1М200001_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									ЗначПок = СтрокаПодчМнЧ.Данные["П000П1М200002"];
									Если ЗначПок = 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений о вычетах раздела 3 не задана сумма вычета",
										"Приложение1", "П000П1М200002_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли ЗначПок < 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> "
										+ ПредстРаздела2 + ": в строке " + НомерСтрокиПодч
										+ " сведений о вычетах раздела 3 сумма вычета не должна быть отрицательной",
										"Приложение1", "П000П1М200002_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М3];
							
							Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
								
								ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
								НомерСтрокиПодч = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
								ПостфиксСтрокиПодч = НомерСтроки + "_" + НомерСтрокиПодч;
								
								Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаПодчМнЧ, "Приложение1",
									СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
									
									ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М300001"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений об уведомлениях раздела 3 не задан код вида уведомления",
										"Приложение1", "П000П1М300001_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли ВозможныеКодыВидаУведомления.Найти(ЗначПок) = Неопределено Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч
										+ " сведений об уведомлениях раздела 3 некорректно задан код вида уведомления. Возможны значения: "
										+ СтрСоединить(ВозможныеКодыВидаУведомления, ", "),
										"Приложение1", "П000П1М300001_" + ПостфиксСтрокиПодч, НомерСтраницы);
									КонецЕсли;
									
									ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М300002"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений об уведомлениях раздела 3 не задан номер уведомления",
										"Приложение1", "П000П1М300002_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									ЗначПок = СтрокаПодчМнЧ.Данные["П000П1М300003"];
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений об уведомлениях раздела 3 не задана дата выдачи уведомления",
										"Приложение1", "П000П1М300003_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений об уведомлениях раздела 3 задана дата выдачи уведомления, "
										+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099",
										"Приложение1", "П000П1М300003_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М300004"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч
										+ " сведений об уведомлениях раздела 3 не задан код налогового органа, выдавшего уведомления",
										"Приложение1", "П000П1М300004_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли НЕ (СтрДлина(ЗначПок) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок)) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": в строке " + НомерСтрокиПодч + " сведений об уведомлениях раздела 3 задан код налогового органа, "
										+ "выдавшего уведомления, не состоящий из 4 цифр",
										"Приложение1", "П000П1М300004_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							// Раздел 4 Приложения 1 (многострочная часть, состоящая строго из 1 строки, подчиненная экземпляру раздела 2).
							//
							ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М4];
							
							Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
								
								ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
								НомерСтрокиПодч = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
								ПостфиксСтрокиПодч = НомерСтроки + "_" + НомерСтрокиПодч;
								
								Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаПодчМнЧ, "Приложение1",
									СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
									
									Если СтрокаПодчМнЧ.Данные["П000П1М400001"] < 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": сумма дохода, с которого не удержан налог налоговым агентом, не должна быть отрицательной",
										"Приложение1", "П000П1М400001_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									Если СтрокаПодчМнЧ.Данные["П000П1М400002"] < 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
										+ ": сумма неудержанного налога не должна быть отрицательной",
										"Приложение1", "П000П1М400002_" + ПостфиксСтрокиПодч, НомерСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							// Приложение к Приложению 1 (иерархическая многострочная часть, подчиненная экземпляру раздела 2).
							//
							ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М5];
							
							Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
								
								ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
								НомерСтрокиПодч = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
								ПостфиксСтрокиПодч = НомерСтроки + "_" + НомерСтрокиПодч;
								
								ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М500001"]);
								Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения не задан месяц",
									"Приложение1", "П000П1М500001_" + ПостфиксСтрокиПодч, НомерСтраницы);
									СтатусПроверки = Ложь;
								ИначеЕсли ВозможныеМесяцы.Найти(ЗначПок) = Неопределено Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения некорректно задан месяц. Возможны значения от 01 до 12",
									"Приложение1", "П000П1М500001_" + ПостфиксСтрокиПодч, НомерСтраницы);
								КонецЕсли;
								
								ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П000П1М500002"]);
								Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения не задан код дохода",
									"Приложение1", "П000П1М500002_" + ПостфиксСтрокиПодч, НомерСтраницы);
									СтатусПроверки = Ложь;
								ИначеЕсли НЕ (СтрДлина(ЗначПок) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок)) Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения задан код дохода, не состоящий из 4 цифр",
									"Приложение1", "П000П1М500002_" + ПостфиксСтрокиПодч, НомерСтраницы);
									СтатусПроверки = Ложь;
								КонецЕсли;
								
								Приложение_СуммаДохода = СтрокаПодчМнЧ.Данные["П000П1М500003"];
								
								Если Приложение_СуммаДохода < 0 Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения сумма дохода не должна быть отрицательной",
									"Приложение1", "П000П1М500003_" + ПостфиксСтрокиПодч, НомерСтраницы);
									СтатусПроверки = Ложь;
								КонецЕсли;
								
								ДанныеПодчМнЧ_ = СтрокаПодчМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М6];
								
								Приложение_СуммаВычетов = 0;
								
								Приложение_НетОтрицательнойСуммыВычета = Истина;
								
								Для каждого СтрокаПодчМнЧ_ Из ДанныеПодчМнЧ_.Строки Цикл
									
									ИндСтрокиПодчМнЧ_ = ДанныеПодчМнЧ_.Строки.Индекс(СтрокаПодчМнЧ_);
									НомерСтрокиПодч_ = Формат(ИндСтрокиПодчМнЧ_ + 1, "ЧГ=");
									ПостфиксСтрокиПодч_ = ПостфиксСтрокиПодч + "_" + НомерСтрокиПодч_;
									
									Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаПодчМнЧ_, "Приложение1",
										СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
										
										ЗначПок = СокрЛП(СтрокаПодчМнЧ_.Данные["П000П1М600004"]);
										Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
											СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
											+ ": в строке " + НомерСтрокиПодч + " приложения не задан код вычета",
											"Приложение1", "П000П1М600004_" + ПостфиксСтрокиПодч_, НомерСтраницы);
											СтатусПроверки = Ложь;
										ИначеЕсли НЕ (СтрДлина(ЗначПок) = 3 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок)) Тогда
											СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
											+ ": в строке " + НомерСтрокиПодч + " приложения задан код вычета, не состоящий из 3 цифр",
											"Приложение1", "П000П1М600004_" + ПостфиксСтрокиПодч_, НомерСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										
										ЗначПок = СтрокаПодчМнЧ_.Данные["П000П1М600005"];
										Если ЗначПок = 0 Тогда
											СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
											+ ": в строке " + НомерСтрокиПодч + " приложения не задана сумма вычета",
											"Приложение1", "П000П1М600005_" + ПостфиксСтрокиПодч_, НомерСтраницы);
											СтатусПроверки = Ложь;
										ИначеЕсли ЗначПок < 0 Тогда
											СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
											+ ": в строке " + НомерСтрокиПодч + " приложения сумма вычета не должна быть отрицательной",
											"Приложение1", "П000П1М600005_" + ПостфиксСтрокиПодч_, НомерСтраницы);
											СтатусПроверки = Ложь;
											
											Приложение_НетОтрицательнойСуммыВычета = Ложь;
											
										КонецЕсли;
										
										Приложение_СуммаВычетов = Приложение_СуммаВычетов + ЗначПок;
										
									КонецЕсли;
									
								КонецЦикла;
								
								Если Приложение_СуммаДохода >= 0 И Приложение_НетОтрицательнойСуммыВычета
									И Приложение_СуммаДохода < Приложение_СуммаВычетов Тогда
									
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 -> " + ПредстСтраницы + " -> " + ПредстРаздела2
									+ ": в строке " + НомерСтрокиПодч + " приложения сумма дохода не должна быть меньше суммы вычета",
									"Приложение1", "П000П1М500003_" + ПостфиксСтрокиПодч, НомерСтраницы);
									СтатусПроверки = Ложь;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблПорядНом = ТаблПорядковыхНомеров.Скопировать();
				ТаблПорядНом.Свернуть("ПорядковыйНомер", "СчетчикСтраниц");
				
				ИндексПервойСтраницыПриложения1СНеуникальнымПорядковымНомером = Неопределено;
				
				Если ТаблПорядковыхНомеров.Количество() <> ТаблПорядНом.Количество() Тогда
					
					Для каждого СтрокаТаблПорядНом Из ТаблПорядНом Цикл
						
						Если СтрокаТаблПорядНом.СчетчикСтраниц > 1 Тогда
							
							СтрокиТаблПорядковыхНомеров = ТаблПорядковыхНомеров.НайтиСтроки(
							Новый Структура("ПорядковыйНомер", СтрокаТаблПорядНом.ПорядковыйНомер));
							
							Для каждого СтрокаТаблПорядковыхНомеров Из СтрокиТаблПорядковыхНомеров Цикл
								
								Данные = ДеревоРаздела.Строки[СтрокаТаблПорядковыхНомеров.ИндексСтраницы].Данные;
								
								СтруктПарам = Новый Структура;
								СтруктПарам.Вставить("Фам", Данные.П000П10000004);
								СтруктПарам.Вставить("Имя", Данные.П000П10000005);
								СтруктПарам.Вставить("Отч", Данные.П000П10000006);
								СтруктПарам.Вставить("ДатаРожд", Данные.П000П10000008);
								СтруктПарам.Вставить("НомерСтраницы", СтрокаТаблПорядковыхНомеров.ИндексСтраницы + 1);
								ПредставленияСтраницПриложения1СНеуникальнымиПорядковымиНомерами.Добавить(
								РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
								СтруктПарам));
								
								Если ИндексПервойСтраницыПриложения1СНеуникальнымПорядковымНомером = Неопределено Тогда
									ИндексПервойСтраницыПриложения1СНеуникальнымПорядковымНомером = СтрокаТаблПорядковыхНомеров.ИндексСтраницы;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПредставленияСтраницПриложения1СНеуникальнымиПорядковымиНомерами.Количество() > 0 Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 содержит неуникальные номера справки на страницах: "
					+ СтрСоединить(ПредставленияСтраницПриложения1СНеуникальнымиПорядковымиНомерами, ", "), "Приложение1",
					"П000П10000001", Формат(ИндексПервойСтраницыПриложения1СНеуникальнымПорядковымНомером + 1, "ЧГ="));
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(ИмяФормы,
									  СтраницаРаздела,
									  ИмяРаздела,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтраницаРаздела(ИмяФормы,
								 Знач СтраницаРаздела,
								 Знач ИмяРаздела,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ДопПараметры = Неопределено)
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ИмяФормы,
											 ДеревоМнЧ,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ИмяФормы,
								ДеревоПодчРаздела,
								ИмяПодчРаздела,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов,
								ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаМногострочнаяЧасть(ИмяФормы,
									Знач ДеревоМнЧ,
									Знач ИмяРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов,
									ДопПараметры = Неопределено)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
											   СтрокаМнЧ,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
										  Знач СтрокаМнЧ,
										  Знач ИмяРаздела,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов,
										  ДопПараметры = Неопределено)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
													   СтрокаПодчМнЧ,
													   ИмяРаздела,
													   СтруктураРеквизитовФормы,
													   СтруктураМногоуровневыхРазделов,
													   ДопПараметры) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, Знач ИмяРаздела, ДопПараметры = Неопределено)
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

Функция ИННФЛСоответствуетТребованиям(Знач ИНН, ТекстСообщения)
	
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ТекстСообщения) Тогда
		
		Если ЗначениеЗаполнено(ТекстСообщения) И Прав(ТекстСообщения, 1) = "." Тогда
			ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 1);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	Возврат;
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	// Раздел 1 (немногостраничный раздел, 2 многострочные части).
	//
	ДанныеРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	ОбязНА = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ОбязНА");
	Для каждого Ветка Из ДанныеРазд.Строки Цикл
		
		ЭкзОбязНА = СкопироватьУзел(ИмяФормы, УзелРодитель, ОбязНА, УзелРодитель.Строки.Количество() - 1);
		
		// Немногострочные данные.
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные, ЭкзОбязНА);
		
		//Многострочная часть 021-022.
		СведСумНалУд = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзОбязНА, "СведСумНалУд");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзОбязНА, СведСумНалУд, ЭкзОбязНА.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СведСумНалУд);
		
		//Многострочная часть 031-032.
		СведСумНалВоз = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзОбязНА, "СведСумНалВоз");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзОбязНА, СведСумНалВоз, ЭкзОбязНА.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СведСумНалВоз);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ОбязНА);
	
	// Раздел 2 (многостраничный раздел).
	//
	ДанныеРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчСумНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчСумНал");
	Для каждого Ветка Из ДанныеРазд.Строки Цикл
		
		// Немногострочные данные.
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные,
		СкопироватьУзел(ИмяФормы, УзелРодитель, РасчСумНал, УзелРодитель.Строки.Количество() - 1));
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РасчСумНал);
	
	// Приложение 1 (многостраничный раздел, иерархическая многострочная часть).
	//
	ВозможныеКодыПериода_Приложение1 = КодыОтчетногоПериодаПриКоторыхМожетБытьЗаполненоПриложение1();
	МожетБытьЗаполненоПриложение1 = ВозможныеКодыПериода_Приложение1.Найти(ПараметрыВыгрузки.Период) <> Неопределено;
	
	Если МожетБытьЗаполненоПриложение1 Тогда
		
		ДанныеРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
		СправДох = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СправДох");
		Для каждого Ветка Из ДанныеРазд.Строки Цикл
			
			ЭкзСправДох = СкопироватьУзел(ИмяФормы, УзелРодитель, СправДох, УзелРодитель.Строки.Количество() - 1);
			
			ДанныеВетки = ОбщегоНазначения.СкопироватьРекурсивно(Ветка.Данные);
			
			// Особая обработка: конкатенация значений серии и номера документа, удостоверяющего личность.
			ДанныеВетки.Вставить("П100П10000011",
			СокрЛП(Ветка.Данные["П000П10000011"]) + " " + СокрЛП(Ветка.Данные["П000П10000012"]));
			
			// Немногострочные данные.
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, ДанныеВетки, ЭкзСправДох);
			
			// Иерархическая многострочная часть - сведения по ставке налога.
			СведДох = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСправДох, "СведДох");
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ЭкзСведДох = СкопироватьУзел(ИмяФормы, ЭкзСправДох, СведДох, ЭкзСправДох.Строки.Количество() - 1);
				
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМнЧ.Данные, ЭкзСведДох);
				
				НалВычССИ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДох, "НалВычССИ");
				
				// Многострочная часть - стандартные, социальные и имущественные налоговые вычеты.
				ПредВычССИ = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалВычССИ, "ПредВычССИ");
				ДанныеМнЧ_М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М2];
				Для каждого СтрокаМнЧ_М2 Из ДанныеМнЧ_М2.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ_М2.Данные, СкопироватьУзел(ИмяФормы, НалВычССИ, ПредВычССИ, НалВычССИ.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(ПредВычССИ);
				
				// Многострочная часть - сведения об уведомлениях.
				УведВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалВычССИ, "УведВыч");
				ДанныеМнЧ_М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М3];
				Для каждого СтрокаМнЧ_М3 Из ДанныеМнЧ_М3.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ_М3.Данные, СкопироватьУзел(ИмяФормы, НалВычССИ, УведВыч, НалВычССИ.Строки.Количество() - 1));
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(УведВыч);
				
				// Многострочная часть, состоящая из единственной строки, - сведения о неудержанном налоге.
				СумДохНеУд = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДох, "СумДохНеУд");
				ДанныеМнЧ_М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М4];
				СтрокаМнЧ_М4 = ДанныеМнЧ_М4.Строки[0];
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМнЧ_М4.Данные, СумДохНеУд);
				
				// Иерархическая многострочная часть - сведения о доходах по месяцам.
				ДохВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДох, "ДохВыч");
				СвСумДох = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохВыч, "СвСумДох");
				ДанныеМнЧ_М5 = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М5];
				Для каждого СтрокаМнЧ_М5 Из ДанныеМнЧ_М5.Строки Цикл
					
					ЭкзСвСумДох = СкопироватьУзел(ИмяФормы, ДохВыч, СвСумДох, ДохВыч.Строки.Количество() - 1);
					
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ_М5.Данные, ЭкзСвСумДох);
					
					// Многострочная часть - сведения о вычетах.
					СвСумВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСвСумДох, "СвСумВыч");
					ДанныеМнЧ_М6 = СтрокаМнЧ_М5.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М6];
					Для каждого СтрокаМнЧ_М6 Из ДанныеМнЧ_М6.Строки Цикл
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						СтрокаМнЧ_М6.Данные, СкопироватьУзел(ИмяФормы, ЭкзСвСумДох, СвСумВыч, ЭкзСвСумДох.Строки.Количество() - 1));
					КонецЦикла;
					РегламентированнаяОтчетность.УдалитьУзел(СвСумВыч);
					
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(СвСумДох);
				
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СведДох);
			
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СправДох);
		
	КонецЕсли;
	
	ДанныеРазд = Неопределено;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		ПараметрыПечати.СохраненныйОтчет.Организация);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ДанныеРазделов = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
				РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(
	ИмяФормы, СтруктураРеквизитовФормы, ДанныеРазделов.Титульный);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если СтруктураМногоуровневыхРазделов.Свойство(СтраницаОтчета.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		Иначе
			
			ВывестиНаПечатьЛист(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	СтруктураРеквизитовФормы, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
		
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
							+ НСтр("ru=' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
								КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
								"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			
			СтрИНН = СтрИНН + "--";
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
		
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда	
		
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов,
							  ТабличныйДокумент = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + Прав(СокрЛП(ИмяФормы), 7) + "_";
	
	ИмяМЧБ = ПрефиксИменМакетов + СтруктураПараметров.ИмяСтраницы;
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(ИмяМЧБ);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
		
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   ТабличныйДокумент);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
													  СтруктураПараметров,
													  ОбщиеРеквизитыРазделов,
													  СтруктураРеквизитовФормы,
													  ДанныеРазделов)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
			ДанныеМнЧ2 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
			
			СтрокМнЧ1НаЛисте = 16;
			СтрокМнЧ2НаЛисте = 4;
			
			// Определение количества листов.
			КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
			ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
			ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
			КолЛистов1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
			
			КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
			ДробКол2 = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
			ЦелКол2  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
			КолЛистов2 = ?(ДробКол2 = ЦелКол2, ЦелКол2, ЦелКол2 + 1);
			
			КолЛистовРаздела1 = Макс(КолЛистов1, КолЛистов2);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ1ДляПечати = Новый Массив;
			ИмяП00001М102101 = "П00001М102101";
			ИмяП00001М102201 = "П00001М102201";
			
			МассивДанныхМнЧ2ДляПечати = Новый Массив;
			ИмяП00001М203101 = "П00001М203101";
			ИмяП00001М203201 = "П00001М203201";
			
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				
				Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
				ДанныеМнЧ1ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
					
					НовИмяП00001М102101 = ИмяП00001М102101 + _ИндСтрокиМнЧ;
					НовИмяП00001М102201 = ИмяП00001М102201 + _ИндСтрокиМнЧ;
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102101, '00010101');
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102201, 0);
					
					Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102101,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00001М102101]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00001М102201,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00001М102201]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
				
				Приращение2КНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
				ДанныеМнЧ2ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение2КНомеру;
					
					НовИмяП00001М203101 = ИмяП00001М203101 + _ИндСтрокиМнЧ;
					НовИмяП00001М203201 = ИмяП00001М203201 + _ИндСтрокиМнЧ;
					
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203101, '00010101');
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203201, 0);
					
					Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203101,
						ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00001М203101]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00001М203201,
						ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00001М203201]);
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппыР1М1
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
						СтруктураРеквизитовФормы.мИдГруппыР1М1, ИмяОбластиПреемника);
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппыР1М2
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
						СтруктураРеквизитовФормы.мИдГруппыР1М2, ИмяОбластиПреемника);
				КонецЦикла;
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для Каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
				Для Каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
				Для Каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
					СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение1" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		СтрокМнЧ2НаЛисте = 10;
		СтрокМнЧ3НаЛисте = 3;
		СтрокМнЧ4НаЛисте = 1;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			НемногострочныеДанные = Ветка.Данные;
			
			НомерТекущейСтраницы = ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1;
			
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("Фам", НемногострочныеДанные.П000П10000004);
			СтруктПарам.Вставить("Имя", НемногострочныеДанные.П000П10000005);
			СтруктПарам.Вставить("Отч", НемногострочныеДанные.П000П10000006);
			СтруктПарам.Вставить("ДатаРожд", НемногострочныеДанные.П000П10000008);
			СтруктПарам.Вставить("НомерСтраницы", Формат(НомерТекущейСтраницы, "ЧГ="));
			ПредстСтраницы
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М2];
				ДанныеМнЧ3 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М3];
				ДанныеМнЧ4 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М4];
				
				// Определение количества листов.
				КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
				ДробКол2 = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
				ЦелКол2  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
				КолЛистов2 = ?(ДробКол2 = ЦелКол2, ЦелКол2, ЦелКол2 + 1);
				
				КолСтрокМнЧ3 = ДанныеМнЧ3.Строки.Количество();
				ДробКол3 = КолСтрокМнЧ3 / СтрокМнЧ3НаЛисте;
				ЦелКол3  = Цел(КолСтрокМнЧ3 / СтрокМнЧ3НаЛисте);
				КолЛистов3 = ?(ДробКол3 = ЦелКол3, ЦелКол3, ЦелКол3 + 1);
				
				КолСтрокМнЧ4 = 1;
				
				КолЛистовРаздела = Макс(КолЛистов2, КолЛистов3);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ2ДляПечати = Новый Массив;
				ИмяП000П1М200001 = "П000П1М200001";
				ИмяП000П1М200002 = "П000П1М200002";
				
				МассивДанныхМнЧ3ДляПечати = Новый Массив;
				ИмяП000П1М300001 = "П000П1М300001";
				ИмяП000П1М300002 = "П000П1М300002";
				ИмяП000П1М300003 = "П000П1М300003";
				ИмяП000П1М300004 = "П000П1М300004";
				
				МассивДанныхМнЧ4ДляПечати = Новый Массив;
				ИмяП000П1М400001 = "П000П1М400001";
				ИмяП000П1М400002 = "П000П1М400002";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
					ДанныеМнЧДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП000П1М200001 = ИмяП000П1М200001 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М200002 = ИмяП000П1М200002 + "_1" + _ИндСтрокиМнЧ;
						
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М200001, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М200002, 0);
						
						Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М200001, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М200001]);
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М200002, ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М200002]);
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧДляПечати);
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ3НаЛисте;
					ДанныеМнЧДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ3НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП000П1М300001 = ИмяП000П1М300001 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М300002 = ИмяП000П1М300002 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М300003 = ИмяП000П1М300003 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М300004 = ИмяП000П1М300004 + "_1" + _ИндСтрокиМнЧ;
						
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М300001, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М300002, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М300003, '00010101');
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М300004, "");
						
						Если КолСтрокМнЧ3 >= ИндСПриращением Тогда
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М300001, ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М300001]);
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М300002, ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М300002]);
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М300003, ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М300003]);
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М300004, ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М300004]);
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ3ДляПечати.Добавить(ДанныеМнЧДляПечати);
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ4НаЛисте;
					ДанныеМнЧДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ4НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП000П1М400001 = ИмяП000П1М400001 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М400002 = ИмяП000П1М400002 + "_1" + _ИндСтрокиМнЧ;
						
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М400001, 0);
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М400002, 0);
						
						Если КолСтрокМнЧ4 >= ИндСПриращением Тогда
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М400001, ДанныеМнЧ4.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М400001]);
							ДанныеМнЧДляПечати.Вставить(
							НовИмяП000П1М400002, ДанныеМнЧ4.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М400002]);
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ4ДляПечати.Добавить(ДанныеМнЧДляПечати);
					
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					
					Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыП1М2
						+ "_1" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
						СтруктураРеквизитовФормы.мИдГруппыП1М2, ИмяОбластиПреемника);
					КонецЦикла;
					
					Для Ном = 1 По СтрокМнЧ3НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыП1М3
						+ "_1" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
						СтруктураРеквизитовФормы.мИдГруппыП1М3, ИмяОбластиПреемника);
					КонецЦикла;
					
					Если НомЛиста = 1 Тогда
						
						Для Каждого Пок Из НемногострочныеДанные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						ДанныеМнЧДляПечати = СтрокаМнЧ1.Данные;
						Для Каждого Пок Из ДанныеМнЧДляПечати Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						Обл = ТабличныйДокумент.Области.Найти("П000П10000001");
						Если Обл <> Неопределено Тогда
							Обл.Значение = НемногострочныеДанные["П000П10000001"];
						КонецЕсли;
						Обл = ТабличныйДокумент.Области.Найти("П000П10000002");
						Если Обл <> Неопределено Тогда
							Обл.Значение = НемногострочныеДанные["П000П10000002"];
						КонецЕсли;
						
					КонецЕсли;
					
					ДанныеМнЧДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
					Для Каждого Пок Из ДанныеМнЧДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					ДанныеМнЧДляПечати = МассивДанныхМнЧ3ДляПечати[НомЛиста - 1];
					Для Каждого Пок Из ДанныеМнЧДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					ДанныеМнЧДляПечати = МассивДанныхМнЧ4ДляПечати[НомЛиста - 1];
					Для Каждого Пок Из ДанныеМнЧДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста", "Приложение 1. " + ПредстСтраницы);
					ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
						СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
					
				КонецЦикла;
				
				// Листы - Приложения к Приложению 1.
				//
				СтрокМнЧ5НаЛисте = 15;
				СтрокМнЧ6ВБлокеМнЧ5 = 1;
				
				МассивДанныхМнЧ5_МнЧ6 = Новый Массив;
				
				КолБлоковМнЧ5 = 0;
				ДанныеМнЧ5 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М5];
				Для каждого СтрокаМнЧ5 Из ДанныеМнЧ5.Строки Цикл
					
					ДанныеМнЧ6 = СтрокаМнЧ5.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М6];
					КолСтрокМнЧ6 = ДанныеМнЧ6.Строки.Количество();
					ДробКол = КолСтрокМнЧ6 / СтрокМнЧ6ВБлокеМнЧ5;
					ЦелКол  = Цел(КолСтрокМнЧ6 / СтрокМнЧ6ВБлокеМнЧ5);
					ТекКолБлоковМнЧ5 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					КолБлоковМнЧ5 = КолБлоковМнЧ5 + ТекКолБлоковМнЧ5;
					
					// Адаптирование данных иерархической многострочной части приложения к приложению 1 для заполнения листов.
					Для НомБлокаМнЧ5 = 1 По ТекКолБлоковМнЧ5 Цикл
						
						ДанныеМнЧ5_МнЧ6 = Новый Структура;
						
						ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500001", "");
						ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500002", "");
						ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500003", 0);
						Если НомБлокаМнЧ5 = 1 Тогда
							ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500001", СтрокаМнЧ5.Данные["П000П1М500001"]);
							ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500002", СтрокаМнЧ5.Данные["П000П1М500002"]);
							ДанныеМнЧ5_МнЧ6.Вставить("П000П1М500003", СтрокаМнЧ5.Данные["П000П1М500003"]);
						КонецЕсли;
						
						Мас_ДанныеМнЧ6 = Новый Массив;
						
						ИндСтрокиМнЧ6 = НомБлокаМнЧ5 * СтрокМнЧ6ВБлокеМнЧ5 - СтрокМнЧ6ВБлокеМнЧ5;
						Если КолСтрокМнЧ6 >= ИндСтрокиМнЧ6 + 1 Тогда
							СтрокаМнЧ6 = ДанныеМнЧ6.Строки[ИндСтрокиМнЧ6];
							Мас_ДанныеМнЧ6.Добавить(Новый Структура("П000П1М600004,П000П1М600005",
							СтрокаМнЧ6.Данные["П000П1М600004"], СтрокаМнЧ6.Данные["П000П1М600005"]));
						Иначе
							Мас_ДанныеМнЧ6.Добавить(Новый Структура("П000П1М600004,П000П1М600005", "", 0));
						КонецЕсли;
						
						ДанныеМнЧ5_МнЧ6.Вставить("Мас_ДанныеМнЧ6", Мас_ДанныеМнЧ6);
						
						МассивДанныхМнЧ5_МнЧ6.Добавить(ДанныеМнЧ5_МнЧ6);
						
					КонецЦикла;
					
				КонецЦикла;
				ДробКол = КолБлоковМнЧ5 / СтрокМнЧ5НаЛисте;
				ЦелКол  = Цел(КолБлоковМнЧ5 / СтрокМнЧ5НаЛисте);
				КолЛистовРаздела_ПоДаннымМнЧ5_МнЧ6 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				КолЛистовРаздела = Макс(КолЛистовРаздела_ПоДаннымМнЧ5_МнЧ6, 1);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧДляПечати = Новый Массив;
				
				ИмяП000П1М500001 = "П000П1М500001";
				ИмяП000П1М500002 = "П000П1М500002";
				ИмяП000П1М500003 = "П000П1М500003";
				
				ИмяП000П1М600004 = "П000П1М600004";
				ИмяП000П1М600005 = "П000П1М600005";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ДанныеМнЧДляПечати = Новый Структура;
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ5НаЛисте;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ5НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП000П1М500001 = ИмяП000П1М500001 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М500002 = ИмяП000П1М500002 + "_1" + _ИндСтрокиМнЧ;
						НовИмяП000П1М500003 = ИмяП000П1М500003 + "_1" + _ИндСтрокиМнЧ;
						
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500001, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500002, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500003, 0);
						
						Для НомСтрМнЧ6ВБлокеМнЧ5 = 1 По СтрокМнЧ6ВБлокеМнЧ5 Цикл
							
							_ИндСтрМнЧ6ВБлокеМнЧ5
							= РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомСтрМнЧ6ВБлокеМнЧ5);
							
							НовИмяП000П1М600004 = ИмяП000П1М600004 + "_1" + _ИндСтрокиМнЧ + _ИндСтрМнЧ6ВБлокеМнЧ5;
							НовИмяП000П1М600005 = ИмяП000П1М600005 + "_1" + _ИндСтрокиМнЧ + _ИндСтрМнЧ6ВБлокеМнЧ5;
							
							ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М600004, "");
							ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М600005, 0);
							
						КонецЦикла;
						
						Если МассивДанныхМнЧ5_МнЧ6.Количество() >= ИндСПриращением Тогда
							
							ДанныеМнЧ5_МнЧ6 = МассивДанныхМнЧ5_МнЧ6[ИндСПриращением - 1];
							
							ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500001, ДанныеМнЧ5_МнЧ6[ИмяП000П1М500001]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500002, ДанныеМнЧ5_МнЧ6[ИмяП000П1М500002]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М500003, ДанныеМнЧ5_МнЧ6[ИмяП000П1М500003]);
							
							Мас_ДанныеМнЧ6 = ДанныеМнЧ5_МнЧ6["Мас_ДанныеМнЧ6"];
							
							Для НомСтрМнЧ6ВБлокеМнЧ5 = 1 По СтрокМнЧ6ВБлокеМнЧ5 Цикл
								
								_ИндСтрМнЧ6ВБлокеМнЧ5
								= РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НомСтрМнЧ6ВБлокеМнЧ5);
								
								НовИмяП000П1М600004 = ИмяП000П1М600004 + "_1" + _ИндСтрокиМнЧ + _ИндСтрМнЧ6ВБлокеМнЧ5;
								НовИмяП000П1М600005 = ИмяП000П1М600005 + "_1" + _ИндСтрокиМнЧ + _ИндСтрМнЧ6ВБлокеМнЧ5;
								
								ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М600004, Мас_ДанныеМнЧ6[НомСтрМнЧ6ВБлокеМнЧ5 - 1][ИмяП000П1М600004]);
								ДанныеМнЧДляПечати.Вставить(НовИмяП000П1М600005, Мас_ДанныеМнЧ6[НомСтрМнЧ6ВБлокеМнЧ5 - 1][ИмяП000П1М600005]);
								
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					
					// Номер справки.
					Обл = ТабличныйДокумент.Области.Найти("П000П10000001");
					Если Обл <> Неопределено Тогда
						Обл.Значение = НемногострочныеДанные["П000П10000001"];
					КонецЕсли;
					
					// Ставка налога.
					Обл = ТабличныйДокумент.Области.Найти("П000П1М100001_1");
					Если Обл <> Неопределено Тогда
						Обл.Значение = СтрокаМнЧ1.Данные["П000П1М100001"];
					КонецЕсли;
					
					Для Ном = 1 По СтрокМнЧ5НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыП1М5
						+ "_1" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
						СтруктураРеквизитовФормы.мИдГруппыП1М5, ИмяОбластиПреемника);
					КонецЦикла;
					Для Ном = 1 По СтрокМнЧ5НаЛисте Цикл
						Для ПодчНом = 1 По СтрокМнЧ6ВБлокеМнЧ5 - 1 Цикл
							ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыП1М6
							+ "_1" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном)
							+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПодчНом);
							ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
							СтруктураРеквизитовФормы.мИдГруппыП1М6, ИмяОбластиПреемника);
						КонецЦикла;
					КонецЦикла;
					
					ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Приложение");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста", "Приложение 1. " + ПредстСтраницы);
					ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
						СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(
	СтрЗаменить(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы, "Приложение1_Приложение", "Приложение1"));
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Показатель.Ключ;
			
			НовСтр.Значение = Показатель.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Область.СодержитЗначение = Истина Тогда
				
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = Область.Имя;
				
				Если ПараметрыПечати.ИмяСтраницы = "Раздел2" И Область.Значение = 0
					И (Область.Имя = "П000020011003" ИЛИ Область.Имя = "П000020011103" ИЛИ Область.Имя = "П000020011203"
					ИЛИ Область.Имя = "П000020011303" ИЛИ Область.Имя = "П000020013003") Тогда
					
					НовСтр.Значение = "0";
					НовСтр.ЗначениеМЧБ = "0-----------.00";
					
				ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Приложение1" И Область.Значение = 0
					И (СтрНачинаетсяС(Область.Имя, "П000П1М100002") ИЛИ СтрНачинаетсяС(Область.Имя, "П000П1М100003")
					ИЛИ СтрНачинаетсяС(Область.Имя, "П000П1М400001")) Тогда
					
					НовСтр.Значение = "0";
					НовСтр.ЗначениеМЧБ = "0--------------.00";
					
				ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Приложение1_Приложение" И Область.Значение = 0
					И СтрНачинаетсяС(Область.Имя, "П000П1М500003")
					И (ЗначениеЗаполнено(ТабличныйДокумент.Области.Найти(СтрЗаменить(
					Область.Имя, "П000П1М500003", "П000П1М500001")).Значение)
					ИЛИ ЗначениеЗаполнено(ТабличныйДокумент.Области.Найти(СтрЗаменить(
					Область.Имя, "П000П1М500003", "П000П1М500002")).Значение)) Тогда
					
					НовСтр.Значение = "0";
					НовСтр.ЗначениеМЧБ = "0--------------.00";
					
				Иначе
					
					НовСтр.Значение = Область.Значение;
					НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, ТабличныйДокумент);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Серия и номер документа, удостоверяющего личность.
		НайденноеЗначение = Показатели.Найти("П000П10000011", "Имя");
		Если НЕ НайденноеЗначение = Неопределено Тогда
			Показатели.Удалить(НайденноеЗначение);
			СерияНомер
			= СокрЛП(ТабличныйДокумент.Области.Найти("П000П10000011").Значение) + " "
			+ СокрЛП(ТабличныйДокумент.Области.Найти("П000П10000012").Значение);
			СерияНомер = СокрЛП(СерияНомер); // обработка случая заполнения только серии или только номера
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П000П10000011";
			НовСтр.Значение = СерияНомер;
			НовСтр.ЗначениеМЧБ = СерияНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4)
									+ Сред(ДатаПодписиСтр, 3, 2)
									+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
											  + Сред(ДатаПодписиСтр, 3, 2)
											  + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
														 ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область,
										?(РезультатПоиска.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(
										ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
													 ТекАдресЗначенияОбласти.ИндексЗнакоместа,
													 ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
													 ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда // Служебное поле.
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета)
	
	ФорматОбласти = "";
	
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
		
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы, Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
			
		КонецЕсли;
		
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
		
	КонецЦикла;
	
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
		
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	
	Для Каждого Параметр Из ПараметрыФормата Цикл
		
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		
		СтрокаФормата = Сред(СтрокаФормата, 3);
		
	КонецЕсли;
	
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(ИмяФормы,
																					 Область,
																					 Знач ДробнаяЧасть,
																					 ИндексЗнакоместа = 0)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(ДробнаяЧасть) >= ИндексЗнакоместа Тогда
			ДробнаяЧасть = Сред(ДробнаяЧасть, ИндексЗнакоместа, 1);
		Иначе
			ДробнаяЧасть = ?(ЗначениеЗаполнено(ДробнаяЧасть), "0", "-");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДробнаяЧасть) Тогда
		ДробнаяЧасть = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(ДробнаяЧасть);
	Иначе
		Область.Текст = ВРЕГ(ДробнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольныеСоотношения

Функция ПроверитьКонтрольныеСоотношенияДлительнаяОперация(СтруктураПараметров) Экспорт
	
	Если НЕ СтрНайти(СтруктураПараметров.мВыбраннаяФорма, "2021Кв1") = 0 Тогда
		
		Возврат ПроверитьКонтрольныеСоотношения2021(СтруктураПараметров);
		
	Иначе
		
		Возврат Новый Структура("КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок, СтруктураОшибок", 
			0, 0, Новый Структура);
			
	КонецЕсли; 
	
КонецФункции

#Область КонтрольныеСоотношения2021

#Область КС_Управление

Функция ПроверитьКонтрольныеСоотношения2021(СтруктураПараметров)
	
	Документирование					= Ложь;
	СписокРасшифровкиПоказателей		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы			= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок			= 0;
	ПараметрыКС							= СтруктураПараметров;
	
	ДанныеКС							= Новый Структура;
	ДанныеКС.Вставить("КолОшибок"		, 0);
	ДанныеКС.Вставить("КолНеОшибок"		, 0);
	ДанныеКС.Вставить("Результат"		, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"			, Истина);
	ДанныеКС.Вставить("Отчет"			, ПараметрыКС.мСохраненныйДок.Ссылка);
	ДанныеКС.Вставить("ГодОтчета"		, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"		, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОтчета"		, ДанныеКС.Отчет.ДатаОкончания);
	ДанныеКС.Вставить("ЛимитСотрудников", 500);
	
	СформироватьТаблицыДанных();
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета();
	
	Если ДанныеКС.МесОтчета = 12 Тогда
	
		СформироватьДанныеМладшихОтчетов();
		СформироватьВременныеТаблицы();
	
	КонецЕсли;

#Область Проверки
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 2
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	
	Если ДанныеКС.МесОтчета = 12 Тогда
	
		ПроверкаКС_1_05();
		ПроверкаКС_1_06();
		ПроверкаКС_1_07();
		ПроверкаКС_1_08();
		ПроверкаКС_1_09();
		ПроверкаКС_1_10();
		ПроверкаКС_1_11();
		ПроверкаКС_1_12();
		ПроверкаКС_1_13();
		ПроверкаКС_1_14();
		ПроверкаКС_1_15();
		ПроверкаКС_1_16();
		ПроверкаКС_1_17();
		ПроверкаКС_1_18();
		ПроверкаКС_1_19();
		ПроверкаКС_1_20();
	
	КонецЕсли;

	// проверки Дополнительные
	ПроверкаКС_1_21_доп();
	ПроверкаКС_1_22_доп();
	ПроверкаКС_1_23_доп();
	ПроверкаКС_1_24_доп();
	ПроверкаКС_1_25_доп();
	
#КонецОбласти

	ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы		, СтруктураПараметров.АдресФормул);
	ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей	, СтруктураПараметров.АдресПоказателей);
	
	Возврат ОбработатьРезультат(СтруктураПараметров);
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

Функция ВыполнитьДокументированиеОбъект() Экспорт
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "6-НДФЛ (с 2021)");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2021Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();

#Область Проверки
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 2
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	
	// проверки Дополнительные
	ПроверкаКС_1_21_доп();
	ПроверкаКС_1_22_доп();
	ПроверкаКС_1_23_доп();
	ПроверкаКС_1_24_доп();
	ПроверкаКС_1_25_доп();
	
#КонецОбласти

	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

Процедура СформироватьТаблицыДанных()
	
	ТипСтрока	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока4	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(4));
	ТипСтрока2	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(2));
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ТипРО		= Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет");

	ТаблицаР02 = Новый ТаблицаЗначений;
	ТаблицаР02.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР02.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С100"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С110"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С111"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С120"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С130"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С140"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С150"		, ТипЧисло);
	ТаблицаР02.Колонки.Добавить("Р02С170"		, ТипЧисло);

	ТаблицаП01 = Новый ТаблицаЗначений;
	ТаблицаП01.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП01.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП01.Колонки.Добавить("НомерСтраницы"	, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("НомерСправки"	, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("НомерКоррект"	, ТипСтрока2);
	ТаблицаП01.Колонки.Добавить("ИНН"			, ТипСтрока);
	ТаблицаП01.Колонки.Добавить("Фамилия"		, ТипСтрока);

	ТаблицаП02 = Новый ТаблицаЗначений;
	ТаблицаП02.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП02.Колонки.Добавить("НомерСтроки1"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("Ставка"		, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("СуммаДохода2"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("НалоговаяБаза"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("СуммаНалога2"	, ТипЧисло);
	ТаблицаП02.Колонки.Добавить("СуммаФиксПл"	, ТипЧисло);

	ТаблицаП03 = Новый ТаблицаЗначений;
	ТаблицаП03.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП03.Колонки.Добавить("НомерСтроки1"	, ТипЧисло);
	ТаблицаП03.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	ТаблицаП03.Колонки.Добавить("СуммаВычета3"	, ТипЧисло);

	ТаблицаП04 = Новый ТаблицаЗначений;
	ТаблицаП04.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП04.Колонки.Добавить("НомерСтроки1"	, ТипЧисло);
	ТаблицаП04.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	ТаблицаП04.Колонки.Добавить("СуммаДохода4"	, ТипЧисло);
	ТаблицаП04.Колонки.Добавить("СуммаНалога4"	, ТипЧисло);

	ТаблицаП05 = Новый ТаблицаЗначений;
	ТаблицаП05.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП05.Колонки.Добавить("НомерСтроки1"	, ТипЧисло);
	ТаблицаП05.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	ТаблицаП05.Колонки.Добавить("Месяц"			, ТипСтрока2);
	ТаблицаП05.Колонки.Добавить("КодДохода"		, ТипСтрока4);
	ТаблицаП05.Колонки.Добавить("СуммаДохода5"	, ТипЧисло);

	ТаблицаП06 = Новый ТаблицаЗначений;
	ТаблицаП06.Колонки.Добавить("Ключ"			, ТипСтрока);
	ТаблицаП06.Колонки.Добавить("НомерСтроки1"	, ТипЧисло);
	ТаблицаП06.Колонки.Добавить("НомерСтроки2"	, ТипЧисло);
	ТаблицаП06.Колонки.Добавить("НомерСтроки3"	, ТипЧисло);
	ТаблицаП06.Колонки.Добавить("КодВычета"		, ТипСтрока4);
	ТаблицаП06.Колонки.Добавить("СуммаВычета6"	, ТипЧисло);
	
	ДанныеКС.Вставить("ТаблицаР02", ТаблицаР02);
	ДанныеКС.Вставить("ТаблицаП01", ТаблицаП01);
	ДанныеКС.Вставить("ТаблицаП02", ТаблицаП02);
	ДанныеКС.Вставить("ТаблицаП03", ТаблицаП03);
	ДанныеКС.Вставить("ТаблицаП04", ТаблицаП04);
	ДанныеКС.Вставить("ТаблицаП05", ТаблицаП05);
	ДанныеКС.Вставить("ТаблицаП06", ТаблицаП06);
	
КонецПроцедуры // СформироватьТаблицыДанных()

Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "Титульный лист");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("П01", "Приложение 1");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("П01", "Приложение1");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ПоляТитульногоЛиста = Новый Структура();
	ПоляТитульногоЛиста.Вставить("Р00С001", "Дата подписи");
	ПоляТитульногоЛиста.Вставить("Р00С002", "Отчетный год");
	ПоляТитульногоЛиста.Вставить("Р00С003", "Код формы реорганизации");
	
	ДанныеКС.Вставить("ПоляТитульногоЛиста", ПоляТитульногоЛиста);
	
	ПоляПриложения1 = Новый Структура();
	ПоляПриложения1.Вставить("П01_Фамилия"		, "Фамилия Раздел 1");
	ПоляПриложения1.Вставить("П01_ИНН"			, "ИНН Раздел 1");
	ПоляПриложения1.Вставить("П01_Ставка"		, "Ставка налога Раздел 2");
	ПоляПриложения1.Вставить("П01_СуммаДохода2"	, "Общая сумма дохода Раздел 2");
	ПоляПриложения1.Вставить("П01_НалоговаяБаза", "Налоговая база Раздел 2");
	ПоляПриложения1.Вставить("П01_СуммаНалога2"	, "Сумма налога исчисленная Раздел 2");
	ПоляПриложения1.Вставить("П01_СуммаФиксПл"	, "Сумма фиксированных авансовых платежей Раздел 2");
	ПоляПриложения1.Вставить("П01_СуммаВычета3"	, "Сумма вычета Раздел 3");
	ПоляПриложения1.Вставить("П01_СуммаДохода4"	, "Сумма дохода, с которого неудержан налог Раздел 4");
	ПоляПриложения1.Вставить("П01_СуммаНалога4"	, "Сумма неудержанного налога Раздел 4");
	ПоляПриложения1.Вставить("П01_СуммаДохода5"	, "Сумма дохода Приложение (Сведения по месяцам)");
	ПоляПриложения1.Вставить("П01_СуммаВычета6"	, "Сумма вычета Приложение (Сведения по месяцам)");
	
	ДанныеКС.Вставить("ПоляПриложения1", ПоляПриложения1);
	
	МногострочныеЧасти2 = "П000П1М2,П000П1М4,П000П1М5";
	ДанныеКС.Вставить("МногострочныеЧасти2", МногострочныеЧасти2);
	
	МногострочныеЧасти3 = "П000П1М6";
	ДанныеКС.Вставить("МногострочныеЧасти3", МногострочныеЧасти3);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
КонецПроцедуры

Процедура СформироватьДанныеОтчета()
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	СтруктураДанных = СохраненныеДанныеОтчета(ПараметрыКС.мВыбраннаяФорма, 
												ПараметрыКС.СтруктураРеквизитовФормы, 
												ПараметрыКС.мСтруктураМногоуровневыхРазделов);
	
	ДанныеКС.Вставить("Раздел0", ОбщегоНазначения.СкопироватьРекурсивно(
	СтруктураДанных.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
		
		Если Раздел.Ключ = "Приложение1" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
			Новый Структура("КорневойРаздел, Раздел, Уровень", Раздел.Ключ, Раздел.Ключ, 1),
			Новый Структура("Уровень", ""));
			ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		
		ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
		
	КонецЦикла;
	
	ЗаполнитьТаблицуРаздела2(СтруктураДанных.ДанныеМногоуровневыхРазделов.Раздел2, ДанныеКС.Отчет);
	ЗаполнитьТаблицыПриложения1(СтруктураДанных.ДанныеМногоуровневыхРазделов.Приложение1, ДанныеКС.Отчет);
	
	КоличествоСтрок021 = Новый Соответствие;
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
	
		КолвоСтрок = СтраницаРаздела.КолвоСтрокП00001М1;
		КБК = СтраницаРаздела.П000010001001;
		
		КолвоСтрокУчтенное = КоличествоСтрок021.Получить(КБК);
		КолвоСтрокУчтенное = ?(КолвоСтрокУчтенное = Неопределено, 0, КолвоСтрокУчтенное);
		
		КоличествоСтрок021.Вставить(КБК, КолвоСтрок + КолвоСтрокУчтенное);
	
	КонецЦикла; 
	ДанныеКС.Вставить("КоличествоСтрок021", КоличествоСтрок021);
	
КонецПроцедуры

Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)
									
	Если НЕ СтруктураИсточник.Данные = Неопределено И НЕ ЗначениеЗаполнено(ВходящаяМнЧасть.Уровень) Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
					МнЧасть.Значение.Строки.Количество());
				Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
					СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
						ПоказательСтроки.Значение);
				КонецЦикла;
				
				Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
					ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
						Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		
		КлючПриложения = ВходящийРаздел.Раздел;
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаПриложения Из СтруктураИсточник.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + "," +
			XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПриложения) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
			Новый Структура("КорневойРаздел, Раздел, Уровень", ВходящийРаздел.КорневойРаздел, КлючПриложения, 
			ВходящийРаздел.Уровень + 1), Новый Структура("Уровень", ""));
			ДанныеСтраницы.Вставить("РазделЗаполнен", РазделЗаполнен(ДанныеСтраницы));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, МассивСтраниц.Количество());
		СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаздела2(ДанныеРаздела, Отчет)
	
	Для каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		Если НЕ СтраницаРаздела.Данные = Неопределено Тогда
			
			НоваяСтрока 				= ДанныеКС.ТаблицаР02.Добавить();
			НоваяСтрока.Отчет 			= Отчет;
			НоваяСтрока.НомерСтраницы 	= ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			НоваяСтрока.Р02С100 		= СтраницаРаздела.Данные.П000020010001;
			НоваяСтрока.Р02С110 		= СтраницаРаздела.Данные.П000020011003;
			НоваяСтрока.Р02С111 		= СтраницаРаздела.Данные.П000020011103;
			НоваяСтрока.Р02С120 		= СтраницаРаздела.Данные.П000020012003;
			НоваяСтрока.Р02С130 		= СтраницаРаздела.Данные.П000020013003;
			НоваяСтрока.Р02С140 		= СтраницаРаздела.Данные.П000020014003;
			НоваяСтрока.Р02С150 		= СтраницаРаздела.Данные.П000020015003;
			НоваяСтрока.Р02С170 		= СтраницаРаздела.Данные.П000020017003;
		
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТаблицуРаздела2()
  
Процедура ЗаполнитьТаблицыПриложения1(ДанныеРаздела, Отчет)
	
	Для каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		Если НЕ СтраницаРаздела.Данные = Неопределено Тогда
			
			НоваяСтрока 				= ДанныеКС.ТаблицаП01.Добавить();
			НоваяСтрока.Отчет 			= Отчет;
			НоваяСтрока.НомерСтраницы 	= ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
			НоваяСтрока.НомерСправки	= СтраницаРаздела.Данные.П000П10000001;
			НоваяСтрока.НомерКоррект	= СтраницаРаздела.Данные.П000П10000002;
			НоваяСтрока.ИНН		 		= СтраницаРаздела.Данные.П000П10000003;
			НоваяСтрока.Фамилия 		= СтраницаРаздела.Данные.П000П10000004;
			
			Ключ						= "" + НоваяСтрока.НомерСправки + НоваяСтрока.НомерКоррект + НоваяСтрока.НомерСтраницы;
			НоваяСтрока.Ключ	 		= Ключ;
		
		КонецЕсли; 
		
		Если НЕ СтраницаРаздела.ДанныеМногострочныхЧастей = Неопределено Тогда
			Для каждого Раздел2 Из СтраницаРаздела.ДанныеМногострочныхЧастей.П000П1М1.Строки Цикл
				Если НЕ Раздел2.Данные = Неопределено Тогда
				
					НоваяСтрока 					= ДанныеКС.ТаблицаП02.Добавить();
					НоваяСтрока.Ключ				= Ключ;
					НоваяСтрока.Ставка				= Раздел2.Данные.П000П1М100001;
					НоваяСтрока.СуммаДохода2		= Раздел2.Данные.П000П1М100002;
					НоваяСтрока.НалоговаяБаза		= Раздел2.Данные.П000П1М100003;
					НоваяСтрока.СуммаНалога2		= Раздел2.Данные.П000П1М100004;
					НоваяСтрока.СуммаФиксПл			= Раздел2.Данные.П000П1М100006;
					
					НомерСтроки1					= СтраницаРаздела.ДанныеМногострочныхЧастей.П000П1М1.Строки.Индекс(Раздел2) + 1;
				    НоваяСтрока.НомерСтроки1		= НомерСтроки1;
				
				КонецЕсли;
				
				Если НЕ Раздел2.ДанныеМногострочныхЧастей = Неопределено Тогда
					Для каждого Раздел3 Из Раздел2.ДанныеМногострочныхЧастей.П000П1М2.Строки Цикл
						Если НЕ Раздел3.Данные = Неопределено Тогда
						
							НоваяСтрока 				= ДанныеКС.ТаблицаП03.Добавить();
							НоваяСтрока.Ключ			= Ключ;
							НоваяСтрока.НомерСтроки1	= НомерСтроки1;
						    НоваяСтрока.НомерСтроки2	= Раздел2.ДанныеМногострочныхЧастей.П000П1М2.Строки.Индекс(Раздел3) + 1;
							НоваяСтрока.СуммаВычета3	= Раздел3.Данные.П000П1М200002;
						
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Раздел4 Из Раздел2.ДанныеМногострочныхЧастей.П000П1М4.Строки Цикл
						Если НЕ Раздел4.Данные = Неопределено Тогда
						
							НоваяСтрока 				= ДанныеКС.ТаблицаП04.Добавить();
							НоваяСтрока.Ключ			= Ключ;
							НоваяСтрока.НомерСтроки1	= НомерСтроки1;
						    НоваяСтрока.НомерСтроки2	= Раздел2.ДанныеМногострочныхЧастей.П000П1М4.Строки.Индекс(Раздел4) + 1;
						    НоваяСтрока.СуммаДохода4	= Раздел4.Данные.П000П1М400001;
							НоваяСтрока.СуммаНалога4	= Раздел4.Данные.П000П1М400002;
							
						
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаДохода Из Раздел2.ДанныеМногострочныхЧастей.П000П1М5.Строки Цикл
						Если НЕ СтрокаДохода.Данные = Неопределено Тогда
						
							НоваяСтрока 				= ДанныеКС.ТаблицаП05.Добавить();
							НоваяСтрока.Ключ			= Ключ;
							НоваяСтрока.НомерСтроки1	= НомерСтроки1;
						    НоваяСтрока.Месяц			= СтрокаДохода.Данные.П000П1М500001;
							НоваяСтрока.КодДохода		= СтрокаДохода.Данные.П000П1М500002;
						    НоваяСтрока.СуммаДохода5	= СтрокаДохода.Данные.П000П1М500003;
							
							НомерСтроки2				= Раздел2.ДанныеМногострочныхЧастей.П000П1М5.Строки.Индекс(СтрокаДохода) + 1;
							НоваяСтрока.НомерСтроки2	= НомерСтроки2;
							
						КонецЕсли;
						
						Если НЕ СтрокаДохода.ДанныеМногострочныхЧастей = Неопределено Тогда
							Для каждого СтрокаРасхода Из СтрокаДохода.ДанныеМногострочныхЧастей.П000П1М6.Строки Цикл
								Если НЕ СтрокаРасхода.Данные = Неопределено Тогда
								
									НоваяСтрока 				= ДанныеКС.ТаблицаП06.Добавить();
									НоваяСтрока.Ключ			= Ключ;
									НоваяСтрока.НомерСтроки1	= НомерСтроки1;
									НоваяСтрока.НомерСтроки2	= НомерСтроки2;
								    НоваяСтрока.НомерСтроки3	= СтрокаДохода.ДанныеМногострочныхЧастей.П000П1М6.Строки.Индекс(СтрокаРасхода)+1;
									НоваяСтрока.КодВычета		= СтрокаРасхода.Данные.П000П1М600004;
									НоваяСтрока.СуммаВычета6	= СтрокаРасхода.Данные.П000П1М600005;
								
								КонецЕсли;
							КонецЦикла;
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТаблицыПриложения1()
 	
Процедура СформироватьДанныеМладшихОтчетов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"			, ПараметрыКС.СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("КПП"					, ДанныеКС.Раздел0.КПП);
	Запрос.УстановитьПараметр("ГодОтчета"			, ДанныеКС.ГодОтчета);
	Запрос.УстановитьПараметр("НомерКорректировки"	, ДанныеКС.Раздел0.НомерКорректировки);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчет6_НДФЛ""
	|	И ДокументРО.Организация = &Организация
	|	И ДокументРО.КПП = &КПП
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) = 12
	|	И ДокументРО.Вид < &НомерКорректировки
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОтчета 	= Выборка.Ссылка.ДанныеОтчета.Получить();
		Приложение1 	= ДанныеОтчета.ДанныеМногоуровневыхРазделов.Приложение1;
		ЗаполнитьТаблицыПриложения1(Приложение1, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДанныеМладшихОтчетов()

Процедура СформироватьВременныеТаблицы()
	
	ВремТаблицы		= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса	= Новый СхемаЗапроса;
	
	ИменаТаблиц		= Новый Структура;
	ИменаТаблиц.Вставить("ТаблицаР02"	, "Т_Р02");
	ИменаТаблиц.Вставить("ТаблицаП01"	, "Т_П01_Все");
	ИменаТаблиц.Вставить("ТаблицаП02"	, "Т_П02_Все");
	ИменаТаблиц.Вставить("ТаблицаП03"	, "Т_П03_Все");
	ИменаТаблиц.Вставить("ТаблицаП04"	, "Т_П04_Все");
	ИменаТаблиц.Вставить("ТаблицаП05"	, "Т_П05_Все");
	ИменаТаблиц.Вставить("ТаблицаП06"	, "Т_П06_Все");
	
	// Формирование временных таблиц с данными разделов
	Для каждого Таблица Из ИменаТаблиц Цикл
		Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
		Оператор	= Пакет.Операторы[0];
		ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&" + Таблица.Значение);
		Пакет.ТаблицаДляПомещения = "В" + Таблица.Значение;
		
		Для каждого Колонка Из ДанныеКС[Таблица.Ключ].Колонки Цикл
			ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
			Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		КонецЦикла;
	КонецЦикла;
	
	// Удаление страниц, которые были скорректированы или аннулированы
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения	= "ВТ_П01_Отбор";
	Оператор	= Пакет.Операторы[0];
	ВТ_Отбора	= Оператор.Источники.Добавить("ВТ_П01_Все");
	Оператор.ВыбираемыеПоля.Добавить("НомерСправки", 0);
	Оператор.ВыбираемыеПоля.Добавить("МАКСИМУМ(НомерКоррект)", 1);
	Пакет.Колонки[1].Псевдоним	= "НомерКоррект";
	Оператор.Группировка.Добавить("НомерСправки");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения	= "ВТ_П01";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П01_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01_Отбор");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01_Отбор", "ВТ_П01_Все.НомерСправки = ВТ_П01_Отбор.НомерСправки 
		|И ВТ_П01_Все.НомерКоррект = ВТ_П01_Отбор.НомерКоррект");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Оператор.Отбор.Добавить("НЕ ВТ_П01_Отбор.НомерКоррект = ""99""");
	Пакет.Индекс.Добавить("Ключ");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения = "ВТ_П02";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П02_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01", "ВТ_П02_Все.Ключ = ВТ_П01.Ключ");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Пакет.Индекс.Добавить("Ключ");
	Пакет.Индекс.Добавить("НомерСтроки1");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения = "ВТ_П03";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П03_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01", "ВТ_П03_Все.Ключ = ВТ_П01.Ключ");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Пакет.Индекс.Добавить("Ключ");
	Пакет.Индекс.Добавить("НомерСтроки1");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения = "ВТ_П04";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П04_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01", "ВТ_П04_Все.Ключ = ВТ_П01.Ключ");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Пакет.Индекс.Добавить("Ключ");
	Пакет.Индекс.Добавить("НомерСтроки1");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения = "ВТ_П05";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П05_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01", "ВТ_П05_Все.Ключ = ВТ_П01.Ключ");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Пакет.Индекс.Добавить("Ключ");
	Пакет.Индекс.Добавить("НомерСтроки1");
	
	Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Пакет.ТаблицаДляПомещения = "ВТ_П06";
	Оператор	= Пакет.Операторы[0];
	ВТ_Раздела	= Оператор.Источники.Добавить("ВТ_П06_Все");
	Для каждого ДоступноеПоле Из ВТ_Раздела.Источник.ДоступныеПоля Цикл
		Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
	КонецЦикла;
	ВТ_Отбор	= Оператор.Источники.Добавить("ВТ_П01");
	ВТ_Раздела.Соединения.Добавить("ВТ_П01", "ВТ_П06_Все.Ключ = ВТ_П01.Ключ");
	ВТ_Раздела.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	Пакет.Индекс.Добавить("Ключ");
	Пакет.Индекс.Добавить("НомерСтроки1");
	
	// Удаление отработавших таблиц отборов
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П01_Все";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П01_Отбор";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П02_Все";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П03_Все";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П04_Все";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П05_Все";
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "ВТ_П06_Все";
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВремТаблицы;
	
	Запрос.УстановитьПараметр("Т_Р02"			, ДанныеКС.ТаблицаР02);
	Запрос.УстановитьПараметр("Т_П01_Все"		, ДанныеКС.ТаблицаП01);
	Запрос.УстановитьПараметр("Т_П02_Все"		, ДанныеКС.ТаблицаП02);
	Запрос.УстановитьПараметр("Т_П03_Все"		, ДанныеКС.ТаблицаП03);
	Запрос.УстановитьПараметр("Т_П04_Все"		, ДанныеКС.ТаблицаП04);
	Запрос.УстановитьПараметр("Т_П05_Все"		, ДанныеКС.ТаблицаП05);
	Запрос.УстановитьПараметр("Т_П06_Все"		, ДанныеКС.ТаблицаП06);
	
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("Турборежим"				, ДанныеКС.ТаблицаП01.Количество() > ДанныеКС.ЛимитСотрудников);
	
	ДанныеКС.Вставить("ВременныеТаблицы"		, ВремТаблицы);
	ДанныеКС.ТаблицаР02.Очистить();
	ДанныеКС.ТаблицаП01.Очистить();
	ДанныеКС.ТаблицаП02.Очистить();
	ДанныеКС.ТаблицаП03.Очистить();
	ДанныеКС.ТаблицаП04.Очистить();
	ДанныеКС.ТаблицаП05.Очистить();
	ДанныеКС.ТаблицаП06.Очистить();

КонецПроцедуры
	
#КонецОбласти

#Область КС_Сервис

Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления	= Новый Массив;
		ПодстрокаРаздела	= "";
		ПодстрокаСтраницы	= "";
		
		ИндексРаздела		= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения	= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения	= Сред(Элемент.Ключ, 9, 1);
		ПодстрокаСтроки		= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы		= Сред(Элемент.Значение, 12,2);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексРаздела = "Р00" Тогда
			ДанныеКС.ПоляТитульногоЛиста.Свойство(Элемент.Ключ, ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаРаздела);
		ИначеЕсли ИндексРаздела = "П01" Тогда
			ДанныеКС.ПоляПриложения1.Свойство(Элемент.Ключ, ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаРаздела);
		Иначе
			Если ИндексДополнения = "С" Тогда
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			ИначеЕсли ИндексДополнения = "Г" Тогда
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			Иначе
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			КонецЕсли;
			МассивПредставления.Добавить(ПодстрокаРаздела);
			Если ПодстрокаДополнения = "П" Тогда
				МассивПредставления.Добавить("предыдущего отчетного периода");
			КонецЕсли;
		КонецЕсли;
		
		Представление		= СтрСоединить(МассивПредставления, " ");
		Многострочный		= СтрДлина(Элемент.Значение) = 14;
		Многострочный2		= НЕ СтрНайти(ДанныеКС.МногострочныеЧасти2, Лев(Элемент.Значение, 8)) = 0;
		Многострочный3		= НЕ СтрНайти(ДанныеКС.МногострочныеЧасти3, Лев(Элемент.Значение, 8)) = 0;
		Округление			= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Многострочный2"	, Многострочный2);
		Показатели[Элемент.Ключ].Вставить("Многострочный3"	, Многострочный3);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено,
								НомерСтроки3 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.Синоним];
		
		Показатель.Отчет	= Источник.Отчет;
		Показатель.Страница = Источник.НомерСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный3 Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомерСтроки1) + "_" + 
				XMLСтрока(Источник.НомерСтроки2) + "_" + XMLСтрока(Источник.НомерСтроки3);
		ИначеЕсли Показатель.Многострочный2 Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомерСтроки1) + "_" + 
				XMLСтрока(Источник.НомерСтроки2);
		ИначеЕсли Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомерСтроки1);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = Окр(ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено,
											НомерСтроки3 = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2, НомерСтроки3);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено,
											НомерСтроки3 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2, НомерСтроки3);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ОбработатьРезультат(СтруктураПараметров)
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураПараметров.АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураПараметров.АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено
			ИЛИ СтрНайти(Элемент.Ключ, "П00") = 0
			ИЛИ НЕ СтрНайти(Элемент.Ключ, "Колво") = 0
			Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Титульного_листа

Процедура ПроверкаКС_1_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Титульный лист'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1.2 ст.126 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата представления Расчета должна быть не позднее 1 апреля года, следующего за истекшим налоговым '") +
		НСтр("ru='периодом (для Расчета за год) и не позднее последнего дня месяца, следующего за отчетным периодом '") +
		НСтр("ru='(для Расчетов за 1 квартал, полугодие и 9 месяцев)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru='Возможно нарушение срока представления Расчета'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р00С001"		, "ДатаПодписи");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел0);
	
	УстановленныйСрок		= ?(ДанныеКС.МесОтчета = 12, Дата(Год(ДанныеКС.ДатаОтчета)+1, 4, 1), 
		КонецМесяца(ДобавитьМесяц(ДанныеКС.ДатаОтчета, 1)));
	УстановленныйСрокСтр	= Формат(УстановленныйСрок, "ДФ=dd.MM.yy; ДП=(...)");
	
	Настройки.ЭтоОшибка = ДанныеКС.Отчет.Вид = 0 И Показатели.Р00С001.Значение > УстановленныйСрок;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р00С001.ЗначениеСтр, УстановленныйСрокСтр);
		
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

Процедура ПроверкаКС_1_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма дохода в стр.110 Раздела 2 >= стр.130 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С110"		, "П000020011003");
	ИменаПоказателей.Вставить("Р02С130"		, "П000020013003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р02С110.Значение < Показатели.Р02С130.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С110.Значение,
			Показатели.Р02С130.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_1_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.140 Раздела 2 = (стр.110 - стр.130) х стр.100 Раздела 2 / 100, '") +
		НСтр("ru='с допустимой погрешностью 1 руб. х стр.120 Раздела 2 х количество стр.021 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = (%2 - %3) х %4 / 100 Итог [%5] ± (1 х %6 х %7 Итог [%8])'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С140"		, "П000020014003");
	ИменаПоказателей.Вставить("Р02С110"		, "П000020011003");
	ИменаПоказателей.Вставить("Р02С130"		, "П000020013003");
	ИменаПоказателей.Вставить("Р02С100"		, "П000020010001");
	ИменаПоказателей.Вставить("Р02С120"		, "П000020012003"); 
	ИменаПоказателей.Вставить("Р02С105"		, "П000020010501"); 
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р02С105.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		КолвоСтрок021 = ДанныеКС.КоличествоСтрок021.Получить(Показатели.Р02С105.Значение);
		КолвоСтрок021 = ?(КолвоСтрок021 = Неопределено, 0, КолвоСтрок021);
		Погрешность = Показатели.Р02С120.Значение * КолвоСтрок021;
		
		РасчетнаяСумма = Окр(Макс(0, Показатели.Р02С110.Значение - Показатели.Р02С130.Значение) * 
			Показатели.Р02С100.Значение / 100);
		Настройки.ЭтоОшибка = Показатели.Р02С140.Значение < РасчетнаяСумма - Погрешность ИЛИ 
			Показатели.Р02С140.Значение > РасчетнаяСумма + Погрешность;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, 
			Показатели.Р02С140.Значение, Показатели.Р02С110.Значение, Показатели.Р02С130.Значение, 
			Показатели.Р02С100.Значение, РасчетнаяСумма, Показатели.Р02С120.Значение, КолвоСтрок021, Погрешность);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_1_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.140 Раздела 2 >= стр.150 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С140"		, "П000020014003");
	ИменаПоказателей.Вставить("Р02С150"		, "П000020015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р02С140.Значение < Показатели.Р02С150.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С140.Значение,
			Показатели.Р02С150.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

 Процедура ПроверкаКС_1_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма дохода в стр.110 Раздела 2 по соответствующей ставке в стр.100 Раздела 2 = '") +
		НСтр("ru='сумме строк ""Общая сумма дохода"" по соответствующей ставке налога Приложения № 1 '") +
		НСтр("ru='к 6-НДФЛ, представленных по всем налогоплательщикам этим налоговым агентом '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2, ставка %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010001");
	ИменаПоказателей.Вставить("Р02С110"				, "П000020011003");
	ИменаПоказателей.Вставить("П01_СуммаДохода2"	, "П000П1М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С110 КАК Р02С110
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С110)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П02.СуммаДохода2 КАК П01_СуммаДохода2
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П01.Ключ = ВТ_П02.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ
	|	СУММА(П01_СуммаДохода2)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтавкаП01 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавкаР02.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавкаР02);
		Показатели.Р02С110.Итог = 0;
		Показатели.П01_СуммаДохода2.Итог = 0;
		
		Выборка = ВыборкаСтавкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С110.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С110, Выборка);
		КонецЦикла;
		
		Если ВыборкаСтавкаП01.НайтиСледующий(ВыборкаСтавкаР02.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаДохода2.Итог = ВыборкаСтавкаП01.П01_СуммаДохода2;
			Иначе
				Выборка = ВыборкаСтавкаП01.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
					Показатели.П01_СуммаДохода2.Дополнение = Дополнение;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода2, Выборка);
				КонецЦикла; 
			КонецЕсли;  
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С110.Итог = Показатели.П01_СуммаДохода2.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С110.Итог, 
			Показатели.П01_СуммаДохода2.Итог, Показатели.Р02С100.Значение);
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаСтавкаП01.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.6'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.210 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Средняя заработная плата >= МРОТ. Средняя заработная плата определяется по каждому работнику '") +
		НСтр("ru='на основании данных Приложений ""Сведения о доходах и соответствующих вычетах по месяцам '") +
		НСтр("ru='налогового периода"" Приложения № 1 к 6-НДФЛ, относящихся к оплате труда, представленных '") +
		НСтр("ru='налоговым агентом по соответствующим ИНН, ОКТМО, КПП за аналогичный период '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);
	
КонецПроцедуры

Процедура ПроверкаКС_1_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.7'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.210 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Средняя заработная плата >= средняя заработная плата в субъекте РФ по соответствующей отрасли '") +
		НСтр("ru='экономики. Средняя заработная плата определяется в целом по налоговому агенту '") +
		НСтр("ru='на основании данных Приложений ""Сведения о доходах и соответствующих вычетах по месяцам '") +
		НСтр("ru='налогового периода"" Приложения № 1 к 6-НДФЛ, относящихся к оплате труда, представленных '") +
		НСтр("ru='налоговым агентом по соответствующим ИНН, ОКТМО, КПП за аналогичный период '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);
	
КонецПроцедуры

Процедура ПроверкаКС_1_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.8'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма дохода в виде дивидендов в стр. 111 Раздела 2 = сумме дохода в виде дивидендов (по '") +
		НСтр("ru='коду доходов 1010) Приложения № 1 к 6-НДФЛ, представленных по всем налогоплательщикам '") +
		НСтр("ru='этим налоговым агентом '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С111"				, "П000020011103");
	ИменаПоказателей.Вставить("П01_СуммаДохода5"	, "П000П1М500003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С111 КАК Р02С111
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П05.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П05.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П05.Месяц КАК Месяц,
	|	ВТ_П05.СуммаДохода5 КАК П01_СуммаДохода5
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П05 КАК ВТ_П05
	|		ПО ВТ_П01.Ключ = ВТ_П05.Ключ
	|ГДЕ
	|	ВТ_П05.КодДохода = ""1010""
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	СУММА(П01_СуммаДохода5)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаР02 	= Результат[0].Выбрать();
	ВыборкаП01 	= Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗарегистрироватьФормулу(Настройки);
	
	Пока ВыборкаР02.Следующий() Цикл
		
		Показатели.Р02С111.Дополнение = "Страница " + ВыборкаР02.НомерСтраницы;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С111, ВыборкаР02);
	КонецЦикла;
		
	Пока ВыборкаП01.Следующий() Цикл
		Если ДанныеКС.Турборежим Тогда
			Показатели.П01_СуммаДохода5.Итог = ВыборкаП01.П01_СуммаДохода5;
		Иначе
			Выборка = ВыборкаП01.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН + " Месяц " + Выборка.Месяц;
				Показатели.П01_СуммаДохода5.Дополнение = Дополнение;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода5, Выборка);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
		
	Настройки.ЭтоОшибка = НЕ Показатели.Р02С111.Итог = Показатели.П01_СуммаДохода5.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С111.Итог, 
		Показатели.П01_СуммаДохода5.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

Процедура ПроверкаКС_1_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.9'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.140 Раздела 2 по соответствующей ставке в стр.100 Раздела 2 = '") +
		НСтр("ru='сумме строк ""Сумма налога исчисленная"" по соответствующей ставке налога Приложения № 1 '") +
		НСтр("ru='к 6-НДФЛ, представленных по всем налогоплательщикам этим налоговым агентом '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2, ставка %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010001");
	ИменаПоказателей.Вставить("Р02С140"				, "П000020014003");
	ИменаПоказателей.Вставить("П01_СуммаНалога2"	, "П000П1М100004_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С140 КАК Р02С140
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С140)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П02.СуммаНалога2 КАК П01_СуммаНалога2
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П01.Ключ = ВТ_П02.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ
	|	СУММА(П01_СуммаНалога2)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтавкаП01 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавкаР02.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавкаР02);
		Показатели.Р02С140.Итог = 0;
		Показатели.П01_СуммаНалога2.Итог = 0;
		
		Выборка = ВыборкаСтавкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С140.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С140, Выборка);
		КонецЦикла;
		
		Если ВыборкаСтавкаП01.НайтиСледующий(ВыборкаСтавкаР02.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаНалога2.Итог = ВыборкаСтавкаП01.П01_СуммаНалога2;
			Иначе
				Выборка = ВыборкаСтавкаП01.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
					Показатели.П01_СуммаНалога2.Дополнение = Дополнение;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаНалога2, Выборка);
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С140.Итог = Показатели.П01_СуммаНалога2.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С140.Итог, 
			Показатели.П01_СуммаНалога2.Итог, Показатели.Р02С100.Значение);
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаСтавкаП01.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.10'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.170 Раздела 2 по соответствующей ставке в стр.100 Раздела 2 = сумме '") +
		НСтр("ru='строк ""Сумма налога не удержанная налоговым агентом"" по соответствующей ставке налога '") +
		НСтр("ru='Приложения № 1 к 6-НДФЛ, представленных по всем налогоплательщикам этим налоговым агентом '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2, ставка %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010001");
	ИменаПоказателей.Вставить("Р02С170"				, "П000020017003");
	ИменаПоказателей.Вставить("П01_СуммаНалога4"	, "П000П1М400002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С170 КАК Р02С170
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С170)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П04.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П04.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П04.СуммаНалога4 КАК П01_СуммаНалога4
	|ИЗ
	|	ВТ_П04 КАК ВТ_П04
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П04.Ключ = ВТ_П02.Ключ
	|			И ВТ_П04.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П04.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	СУММА(П01_СуммаНалога4)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтавкаП01 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавкаР02.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавкаР02);
		Показатели.Р02С170.Итог = 0;
		Показатели.П01_СуммаНалога4.Итог = 0;
		
		Выборка = ВыборкаСтавкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С170.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С170, Выборка);
		КонецЦикла;
		
		Если ВыборкаСтавкаП01.НайтиСледующий(ВыборкаСтавкаР02.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаНалога4.Итог = ВыборкаСтавкаП01.П01_СуммаНалога4;
			Иначе
			Выборка = ВыборкаСтавкаП01.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
				Показатели.П01_СуммаНалога4.Дополнение = Дополнение;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаНалога4, Выборка);
			КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С170.Итог = Показатели.П01_СуммаНалога4.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С170.Итог, 
			Показатели.П01_СуммаНалога4.Итог, Показатели.Р02С100.Значение);
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаСтавкаП01.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_11()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.11'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год, ставка налога в Разделе 2 Приложения 1 13 или 15%'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Налоговая база"" Раздела 2 Приложения № 1 к 6-НДФЛ (при значении ставки 13%, 15%) = '") +
		НСтр("ru='стр. ""Общая сумма дохода"" Раздела 2 - сумма стр. ""Сумма вычета"" Приложения ""Сведения '") +
		НСтр("ru='о доходах и соответствующих вычетах по месяцам налогового периода"" - сумма стр. ""Сумма '") +
		НСтр("ru='вычета"" Раздела 3 '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 - %4 Итог [%5], ставка %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_Ставка"			, "П000П1М100001_");
	ИменаПоказателей.Вставить("П01_НалоговаяБаза"	, "П000П1М100003_");
	ИменаПоказателей.Вставить("П01_СуммаДохода2"	, "П000П1М100002_");
	ИменаПоказателей.Вставить("П01_СуммаВычета6"	, "П000П1М600005_");
	ИменаПоказателей.Вставить("П01_СуммаВычета3"	, "П000П1М200002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивСтавок = Новый Массив;
	МассивСтавок.Добавить(13);
	МассивСтавок.Добавить(15);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МассивСтавок", МассивСтавок);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1
	|ПОМЕСТИТЬ ВТ_Ключи
	|ИЗ
	|	ВТ_П02 КАК ВТ_П02
	|ГДЕ
	|	ВТ_П02.Ставка В(&МассивСтавок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.Ставка КАК П01_Ставка,
	|	ВТ_П02.НалоговаяБаза КАК П01_НалоговаяБаза,
	|	ВТ_П02.СуммаДохода2 КАК П01_СуммаДохода2
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_Ключи.Ключ = ВТ_П02.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П03.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П03.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П03.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П03.СуммаВычета3 КАК П01_СуммаВычета3
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П03 КАК ВТ_П03
	|		ПО ВТ_Ключи.Ключ = ВТ_П03.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П03.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	СУММА(П01_СуммаВычета3)
	|ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П06.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П06.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П06.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П06.НомерСтроки3 КАК НомерСтроки3,
	|	ВТ_П06.СуммаВычета6 КАК П01_СуммаВычета6
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П06 КАК ВТ_П06
	|		ПО ВТ_Ключи.Ключ = ВТ_П06.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П06.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2,
	|	НомерСтроки3
	|ИТОГИ
	|	СУММА(П01_СуммаВычета6)
	|ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ключи";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавка = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет3 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет6 = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавка.Следующий() Цикл
		ВыборкаСтавкаДЗ = ВыборкаСтавка.Выбрать();
		Пока ВыборкаСтавкаДЗ.Следующий() Цикл
			
			Если ДанныеКС.Турборежим Тогда
				Вычет6 = 0;
				Вычет3 = 0;
				
				Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
					ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
						Вычет6 = ВыборкаВычет6НС.П01_СуммаВычета6;
					КонецЕсли; 
				    ВыборкаВычет6НС.Сбросить();
				КонецЕсли;
				ВыборкаВычет6.Сбросить();
			
				Если ВыборкаВычет3.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
					ВыборкаВычет3НС = ВыборкаВычет3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаВычет3НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
						Вычет3 = ВыборкаВычет3НС.П01_СуммаВычета3;
					КонецЕсли; 
				    ВыборкаВычет3НС.Сбросить();
				КонецЕсли;
				ВыборкаВычет3.Сбросить();
				
				Ошибка = НЕ ВыборкаСтавкаДЗ.П01_НалоговаяБаза = ВыборкаСтавкаДЗ.П01_СуммаДохода2 - Вычет3 - Вычет6;
				
				Если НЕ Ошибка Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
		
			ЗарегистрироватьФормулу(Настройки);
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Фамилия			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_ИНН				, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Ставка			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_НалоговаяБаза	, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода2	, ВыборкаСтавкаДЗ);
			
			Показатели.П01_СуммаВычета3.Итог = 0;
			Показатели.П01_СуммаВычета6.Итог = 0;
			
			Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
				ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
					Выборка = ВыборкаВычет6НС.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета6, Выборка);
					КонецЦикла; 
				КонецЕсли; 
			    ВыборкаВычет6НС.Сбросить();
			КонецЕсли;
			ВыборкаВычет6.Сбросить();
			
			Если ВыборкаВычет3.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
				ВыборкаВычет3НС = ВыборкаВычет3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаВычет3НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
					Выборка = ВыборкаВычет3НС.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета3, Выборка);
					КонецЦикла; 
				КонецЕсли; 
			    ВыборкаВычет3НС.Сбросить();
			КонецЕсли;
			ВыборкаВычет3.Сбросить();
			
			РасчетнаяСумма = Показатели.П01_СуммаДохода2.Значение - Показатели.П01_СуммаВычета3.Итог - 
				Показатели.П01_СуммаВычета6.Итог;
			Настройки.ЭтоОшибка = НЕ Показатели.П01_НалоговаяБаза.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_НалоговаяБаза.Значение, 
				Показатели.П01_СуммаДохода2.Значение, Показатели.П01_СуммаВычета6.Итог, 
				Показатели.П01_СуммаВычета3.Итог, РасчетнаяСумма, Показатели.П01_Ставка.Значение);
			Настройки.ДопСведения = "Страница " + ВыборкаСтавкаДЗ.НомерСтраницы;
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.12'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Налоговая база"" Раздела 2 Приложения № 1 к 6-НДФЛ (при значении ставки, отличной от '") +
		НСтр("ru='13%, 15%) = стр. ""Общая сумма дохода"" Раздела 2 - сумма стр. ""Сумма вычета"" Приложения '") +
		НСтр("ru='""Сведения о доходах и соответствующих вычетах по месяцам налогового периода"" '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 Итог [%4], ставка %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налоговой базы'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_Ставка"			, "П000П1М100001_");
	ИменаПоказателей.Вставить("П01_НалоговаяБаза"	, "П000П1М100003_");
	ИменаПоказателей.Вставить("П01_СуммаДохода2"	, "П000П1М100002_");
	ИменаПоказателей.Вставить("П01_СуммаВычета6"	, "П000П1М600005_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивСтавок = Новый Массив;
	МассивСтавок.Добавить(13);
	МассивСтавок.Добавить(15);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МассивСтавок", МассивСтавок);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1
	|ПОМЕСТИТЬ ВТ_Ключи
	|ИЗ
	|	ВТ_П02 КАК ВТ_П02
	|ГДЕ
	|	НЕ ВТ_П02.Ставка В (&МассивСтавок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.Ставка КАК П01_Ставка,
	|	ВТ_П02.НалоговаяБаза КАК П01_НалоговаяБаза,
	|	ВТ_П02.СуммаДохода2 КАК П01_СуммаДохода2
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_Ключи.Ключ = ВТ_П02.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П06.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П06.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П06.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П06.НомерСтроки3 КАК НомерСтроки3,
	|	ВТ_П06.СуммаВычета6 КАК П01_СуммаВычета6
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П06 КАК ВТ_П06
	|		ПО ВТ_Ключи.Ключ = ВТ_П06.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П06.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2,
	|	НомерСтроки3
	|ИТОГИ
	|	СУММА(П01_СуммаВычета6)
	|ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ключи";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавка = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет6 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавка.Следующий() Цикл
		ВыборкаСтавкаДЗ = ВыборкаСтавка.Выбрать();
		Пока ВыборкаСтавкаДЗ.Следующий() Цикл
			
			Если ДанныеКС.Турборежим Тогда
				Вычет6 = 0;
				
				Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
					ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
						Вычет6 = ВыборкаВычет6НС.П01_СуммаВычета6;
					КонецЕсли; 
				    ВыборкаВычет6НС.Сбросить();
				КонецЕсли;
				ВыборкаВычет6.Сбросить();
			
				Ошибка = НЕ ВыборкаСтавкаДЗ.П01_НалоговаяБаза = ВыборкаСтавкаДЗ.П01_СуммаДохода2 - Вычет6;
				
				Если НЕ Ошибка Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
		
			ЗарегистрироватьФормулу(Настройки);
		
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Фамилия			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_ИНН				, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Ставка			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_НалоговаяБаза	, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода2	, ВыборкаСтавкаДЗ);
			
			Показатели.П01_СуммаВычета6.Итог = 0;
			
			Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
				ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
					Выборка = ВыборкаВычет6НС.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета6, Выборка);
					КонецЦикла; 
				КонецЕсли; 
			    ВыборкаВычет6НС.Сбросить();
			КонецЕсли;
			ВыборкаВычет6.Сбросить();
			
			РасчетнаяСумма = Показатели.П01_СуммаДохода2.Значение - Показатели.П01_СуммаВычета6.Итог;
			Настройки.ЭтоОшибка = НЕ Показатели.П01_НалоговаяБаза.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_НалоговаяБаза.Значение, 
				Показатели.П01_СуммаДохода2.Значение, Показатели.П01_СуммаВычета6.Итог, РасчетнаяСумма, 
				Показатели.П01_Ставка.Значение);
			Настройки.ДопСведения = "Страница " + ВыборкаСтавкаДЗ.НомерСтраницы;
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_13()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.13'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Сумма налога исчисленная"" Раздела 2 Приложения № 1 к 6-НДФЛ - стр. ""Налоговая база"" '") +
		НСтр("ru='х стр. ""Ставка налога"" / 100 <= 1 руб. '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 - (%2 х %3 / 100 Итог [%4]) Итог [%5]  = 0 ± 1 руб.'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_СуммаНалога2"	, "П000П1М100004_");
	ИменаПоказателей.Вставить("П01_НалоговаяБаза"	, "П000П1М100003_");
	ИменаПоказателей.Вставить("П01_Ставка"			, "П000П1М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.Ставка КАК П01_Ставка,
	|	ВТ_П02.НалоговаяБаза КАК П01_НалоговаяБаза,
	|	ВТ_П02.СуммаНалога2 КАК П01_СуммаНалога2
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П01.Ключ = ВТ_П02.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеКС.Турборежим Тогда
			РасчетнаяСуммаИтог = Выборка.П01_СуммаНалога2 - Окр(Выборка.П01_НалоговаяБаза * Выборка.П01_Ставка / 100);
		    Ошибка = НЕ (РасчетнаяСуммаИтог + 1 >= 0 И РасчетнаяСуммаИтог - 1 <= 0);
			Если НЕ Ошибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
			
		РасчетнаяСумма = Окр(Показатели.П01_НалоговаяБаза.Значение * Показатели.П01_Ставка.Значение / 100);
		РасчетнаяСуммаИтог = Показатели.П01_СуммаНалога2.Значение - РасчетнаяСумма;
		Настройки.ЭтоОшибка = НЕ (РасчетнаяСуммаИтог + 1 >= 0 И РасчетнаяСуммаИтог - 1 <= 0);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_СуммаНалога2.Значение, 
			Показатели.П01_НалоговаяБаза.Значение, Показатели.П01_Ставка.Значение, РасчетнаяСумма, РасчетнаяСуммаИтог);
		Настройки.ДопСведения = "Страница " + Выборка.НомерСтраницы;
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_14()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.14'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='(Сумма стр. ""Сумма дохода"" Приложения ""Сведения о доходах и соответствующих вычетах по месяцам '") +
		НСтр("ru='налогового периода"" - сумма стр. ""Сумма вычета"" Приложения ""Сведения о доходах и '") +
		НСтр("ru='соответствующих вычетах по месяцам налогового периода"") х стр. ""Ставка налога"" / 100 - стр. '") +
		НСтр("ru='""Сумма налога исчисленная"" Раздела 2 Приложения № 1 к 6-НДФЛ <= 1 руб., (при значении ставки, '") +
		НСтр("ru='отличной от 13%, 15%), (соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='(%1 - %2) х %3 / 100 - %4 Итог [%5] = 0 ± 1 руб.'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_СуммаДохода5"	, "П000П1М500003_");
	ИменаПоказателей.Вставить("П01_СуммаВычета6"	, "П000П1М600005_");
	ИменаПоказателей.Вставить("П01_Ставка"			, "П000П1М100001_");
	ИменаПоказателей.Вставить("П01_СуммаНалога2"	, "П000П1М100004_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	МассивСтавок = Новый Массив;
	МассивСтавок.Добавить(13);
	МассивСтавок.Добавить(15);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("МассивСтавок", МассивСтавок);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1
	|ПОМЕСТИТЬ ВТ_Ключи
	|ИЗ
	|	ВТ_П02 КАК ВТ_П02
	|ГДЕ
	|	НЕ ВТ_П02.Ставка В (&МассивСтавок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П02.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.Ставка КАК П01_Ставка,
	|	ВТ_П02.СуммаНалога2 КАК П01_СуммаНалога2
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_Ключи.Ключ = ВТ_П02.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П05.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П05.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П05.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П05.СуммаДохода5 КАК П01_СуммаДохода5
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П05 КАК ВТ_П05
	|		ПО ВТ_Ключи.Ключ = ВТ_П05.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П05.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	СУММА(П01_СуммаДохода5)
	|ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П06.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П06.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П06.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П06.НомерСтроки3 КАК НомерСтроки3,
	|	ВТ_П06.СуммаВычета6 КАК П01_СуммаВычета6
	|ИЗ
	|	ВТ_Ключи КАК ВТ_Ключи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П06 КАК ВТ_П06
	|		ПО ВТ_Ключи.Ключ = ВТ_П06.Ключ
	|			И ВТ_Ключи.НомерСтроки1 = ВТ_П06.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_Ключи.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2,
	|	НомерСтроки3
	|ИТОГИ
	|	СУММА(П01_СуммаВычета6)
	|ПО
	|	Ключ,
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ключи";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавка = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДоход5 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет6 = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавка.Следующий() Цикл
		ВыборкаСтавкаДЗ = ВыборкаСтавка.Выбрать();
		Пока ВыборкаСтавкаДЗ.Следующий() Цикл
			
			Если ДанныеКС.Турборежим Тогда
				Доход5 = 0;
				Вычет6 = 0;
				
				Если ВыборкаДоход5.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
					ВыборкаДоход5НС = ВыборкаДоход5.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаДоход5НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
						Доход5 = ВыборкаДоход5НС.П01_СуммаДохода5;
					КонецЕсли; 
				    ВыборкаДоход5НС.Сбросить();
				КонецЕсли;
				ВыборкаДоход5.Сбросить();
			
				Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
					ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
						Вычет6 = ВыборкаВычет6НС.П01_СуммаВычета6;
					КонецЕсли; 
				    ВыборкаВычет6НС.Сбросить();
				КонецЕсли;
				ВыборкаВычет6.Сбросить();
				
				РасчетнаяСумма = Окр((Доход5 - Вычет6) * ВыборкаСтавкаДЗ.П01_Ставка / 100 - ВыборкаСтавкаДЗ.П01_СуммаНалога2);
				Ошибка = НЕ (РасчетнаяСумма + 1 >= 0 И РасчетнаяСумма - 1 <= 0);
			
				Если НЕ Ошибка Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			ЗарегистрироватьФормулу(Настройки);
		
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Фамилия			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_ИНН				, ВыборкаСтавкаДЗ);
			
			Показатели.П01_СуммаДохода5.Итог = 0;
			Показатели.П01_СуммаВычета6.Итог = 0;
			
			Если ВыборкаДоход5.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
				ВыборкаДоход5НС = ВыборкаДоход5.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаДоход5НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
					Выборка = ВыборкаДоход5НС.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода5, Выборка);
					КонецЦикла; 
				КонецЕсли; 
			    ВыборкаДоход5НС.Сбросить();
			КонецЕсли;
			ВыборкаДоход5.Сбросить();
			
			Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Ключ, "Ключ") Тогда
				ВыборкаВычет6НС = ВыборкаВычет6.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаВычет6НС.НайтиСледующий(ВыборкаСтавкаДЗ.НомерСтроки1, "НомерСтроки1") Тогда
					Выборка = ВыборкаВычет6НС.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета6, Выборка);
					КонецЦикла; 
				КонецЕсли; 
			    ВыборкаВычет6НС.Сбросить();
			КонецЕсли;
			ВыборкаВычет6.Сбросить();
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Ставка			, ВыборкаСтавкаДЗ);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаНалога2	, ВыборкаСтавкаДЗ);
			
			РасчетнаяСумма = Окр((Показатели.П01_СуммаДохода5.Итог - Показатели.П01_СуммаВычета6.Итог) * 
				Показатели.П01_Ставка.Значение / 100 - Показатели.П01_СуммаНалога2.Значение);
			Настройки.ЭтоОшибка = НЕ (РасчетнаяСумма + 1 >= 0 И РасчетнаяСумма - 1 <= 0);
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_СуммаДохода5.Итог, 
				Показатели.П01_СуммаВычета6.Итог, Показатели.П01_Ставка.Значение, 
				Показатели.П01_СуммаНалога2.Значение, РасчетнаяСумма);
			Настройки.ДопСведения = "Страница " + ВыборкаСтавкаДЗ.НомерСтраницы;
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_15()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.15'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Сумма дохода, с которого не удержан налог налоговым агентом"" Раздела 4 Приложения № 1 '") +
		НСтр("ru='к 6-НДФЛ х стр. ""Ставка налога"" / 100 - стр. ""Сумма неудержанного налога"" Раздела 4 '") +
		НСтр("ru='Приложения № 1 к 6-НДФЛ <= 1 руб. '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 х %2 / 100 - %3 Итог [%4] = 0 ± 1 руб.'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_СуммаДохода4"	, "П000П1М400001_");
	ИменаПоказателей.Вставить("П01_Ставка"			, "П000П1М100001_");
	ИменаПоказателей.Вставить("П01_СуммаНалога4"	, "П000П1М400002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П01.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П04.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.Ставка КАК П01_Ставка,
	|	ВТ_П04.СуммаДохода4 КАК П01_СуммаДохода4,
	|	ВТ_П04.СуммаНалога4 КАК П01_СуммаНалога4
	|ИЗ
	|	ВТ_П04 КАК ВТ_П04
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П04.Ключ = ВТ_П02.Ключ
	|			И ВТ_П04.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П04.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеКС.Турборежим Тогда
			РасчетнаяСумма = Окр(Выборка.П01_СуммаДохода4 * Выборка.П01_Ставка / 100) - Выборка.П01_СуммаНалога4;
		    Ошибка = НЕ (РасчетнаяСумма + 1 >= 0 И РасчетнаяСумма - 1 <= 0);
			Если НЕ Ошибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
			
		РасчетнаяСумма = Окр(Показатели.П01_СуммаДохода4.Значение * Показатели.П01_Ставка.Значение / 100 -
			Показатели.П01_СуммаНалога4.Значение);
		Настройки.ЭтоОшибка = НЕ (РасчетнаяСумма + 1 >= 0 И РасчетнаяСумма - 1 <= 0);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_СуммаДохода4.Значение, 
			Показатели.П01_Ставка.Значение, Показатели.П01_СуммаНалога4.Значение, РасчетнаяСумма);
		Настройки.ДопСведения = "Страница " + Выборка.НомерСтраницы;
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_16()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.16'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Общая сумма дохода"" Раздела 2 Приложения № 1 к 6-НДФЛ = сумме стр. ""Сумма дохода"" '") +
		НСтр("ru='Приложения ""Сведения о доходах и соответствующих вычетах по месяцам налогового периода"" '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_СуммаДохода2"	, "П000П1М100002_");
	ИменаПоказателей.Вставить("П01_СуммаДохода5"	, "П000П1М500003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П01.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П05.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.СуммаДохода2 КАК П01_СуммаДохода2,
	|	ВТ_П05.СуммаДохода5 КАК П01_СуммаДохода5
	|ИЗ
	|	ВТ_П05 КАК ВТ_П05
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П05.Ключ = ВТ_П02.Ключ
	|			И ВТ_П05.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П05.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	МАКСИМУМ(Отчет),
	|	МАКСИМУМ(НомерСтраницы),
	|	МАКСИМУМ(П01_Фамилия),
	|	МАКСИМУМ(П01_ИНН),
	|	МАКСИМУМ(П01_СуммаДохода2),
	|	СУММА(П01_СуммаДохода5)
	|ПО
	|	Ключ,
	|	НомерСтроки1";
	
	
	Результат = Запрос.Выполнить();
	ВыборкаГр = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГр.Следующий() Цикл
		ВыборкаНС = ВыборкаГр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНС.Следующий() Цикл
		
			Если ДанныеКС.Турборежим Тогда
				Ошибка = НЕ ВыборкаНС.П01_СуммаДохода2 = ВыборкаНС.П01_СуммаДохода5;
				Если НЕ Ошибка Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			ЗарегистрироватьФормулу(Настройки);
		
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Фамилия			, ВыборкаНС);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_ИНН				, ВыборкаНС);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода2	, ВыборкаНС);
			
			Показатели.П01_СуммаДохода5.Итог = 0;
			
			Выборка = ВыборкаНС.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаДохода5	, Выборка);
			КонецЦикла; 
			
			Настройки.ЭтоОшибка = НЕ Показатели.П01_СуммаДохода2.Значение = Показатели.П01_СуммаДохода5.Итог;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_СуммаДохода2.Значение, 
				Показатели.П01_СуммаДохода5.Итог);
			Настройки.ДопСведения = "Страница " + ВыборкаНС.НомерСтраницы;
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_17()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.17'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Стр. ""Сумма дохода, с которого не удержан налог налоговым агентом"" Раздела 4 Приложения № 1 '") +
		НСтр("ru='к 6-НДФЛ  <= стр. ""Общая сумма дохода"" Раздела 2 Приложения № 1 к 6-НДФЛ (соотношение '") +
		НСтр("ru='применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	ИменаПоказателей.Вставить("П01_ИНН"				, "П000П10000003");
	ИменаПоказателей.Вставить("П01_СуммаДохода4"	, "П000П1М400001_");
	ИменаПоказателей.Вставить("П01_СуммаДохода2"	, "П000П1М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_П01.Ключ КАК Ключ,
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П04.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П01.ИНН КАК П01_ИНН,
	|	ВТ_П02.СуммаДохода2 КАК П01_СуммаДохода2,
	|	ВТ_П04.СуммаДохода4 КАК П01_СуммаДохода4
	|ИЗ
	|	ВТ_П04 КАК ВТ_П04
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П04.Ключ = ВТ_П02.Ключ
	|			И ВТ_П04.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П04.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДанныеКС.Турборежим Тогда
			Ошибка = Выборка.П01_СуммаДохода4 > Выборка.П01_СуммаДохода2;
			Если НЕ Ошибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Выборка);
			
		Настройки.ЭтоОшибка = Показатели.П01_СуммаДохода4.Значение > Показатели.П01_СуммаДохода2.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П01_СуммаДохода4.Значение, 
			Показатели.П01_СуммаДохода2.Значение);
		Настройки.ДопСведения = "Страница " + Выборка.НомерСтраницы;
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.18'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Количество физических лиц, получивших доход в стр.120 Раздела 2 по соответствующей ставке в стр.100 '") +
		НСтр("ru='Раздела 2 = количество Разделов 2 Приложения № 1 к 6-НДФЛ по соответствующей ставке '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2, ставка %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная количество физических лиц'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010003");
	ИменаПоказателей.Вставить("Р02С120"				, "П000020012003");
	ИменаПоказателей.Вставить("П01_Фамилия"			, "П000П10000004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С120 КАК Р02С120
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С120)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК П01_Фамилия,
	|	ВТ_П02.Ставка КАК Ставка,
	|	1 КАК КоличествоРазделов
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П01.Ключ = ВТ_П02.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ
	|	СУММА(КоличествоРазделов)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтавкаП01 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавкаР02.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавкаР02);
		Показатели.Р02С120.Итог = 0;
		КоличествоРазделов = 0;
		
		Выборка = ВыборкаСтавкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С120.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С120, Выборка);
		КонецЦикла;
		
		Если ВыборкаСтавкаП01.НайтиСледующий(ВыборкаСтавкаР02.Р02С100, "Ставка") Тогда
			КоличествоРазделов = ВыборкаСтавкаП01.КоличествоРазделов;
			Если НЕ ДанныеКС.Турборежим Тогда
				Выборка = ВыборкаСтавкаП01.Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_Фамилия, Выборка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Настройки.ЭтоОшибка = (ЗначениеЗаполнено(Показатели.Р02С120.Итог) ИЛИ КоличествоРазделов > 1
			ИЛИ ЗначениеЗаполнено(Показатели.Р02С100.Значение)) И НЕ Показатели.Р02С120.Итог = КоличествоРазделов;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С120.Итог, 
			КоличествоРазделов, Показатели.Р02С100.Значение);
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаСтавкаП01.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_19()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.19'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма вычетов в стр.130 Раздела 2 = сумма строк ""Сумма вычета"" Раздела 3 Приложения № 1 '") +
		НСтр("ru='к 6-НДФЛ + сумма стр. ""Сумма вычета"" Приложения ""Сведения о доходах и соответствующих '") +
		НСтр("ru='вычетах по месяцам налогового периода"" Приложения № 1 к 6-НДФЛ'") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 + %3 Итог [%4], ставка %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма вычетов'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010001");
	ИменаПоказателей.Вставить("Р02С130"				, "П000020013003");
	ИменаПоказателей.Вставить("П01_СуммаВычета6"	, "П000П1М600005_");
	ИменаПоказателей.Вставить("П01_СуммаВычета3"	, "П000П1М200002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С130 КАК Р02С130
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С130)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П03.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П03.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П03.СуммаВычета3 КАК П01_СуммаВычета3
	|ИЗ
	|	ВТ_П03 КАК ВТ_П03
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П03.Ключ = ВТ_П02.Ключ
	|			И ВТ_П03.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П03.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	СУММА(П01_СуммаВычета3)
	|ПО
	|	Ставка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П06.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П06.НомерСтроки2 КАК НомерСтроки2,
	|	ВТ_П06.НомерСтроки3 КАК НомерСтроки3,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П06.СуммаВычета6 КАК П01_СуммаВычета6
	|ИЗ
	|	ВТ_П06 КАК ВТ_П06
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П06.Ключ = ВТ_П02.Ключ
	|			И ВТ_П06.НомерСтроки1 = ВТ_П02.НомерСтроки1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П01 КАК ВТ_П01
	|		ПО ВТ_П06.Ключ = ВТ_П01.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы,
	|	НомерСтроки1,
	|	НомерСтроки2,
	|	НомерСтроки3
	|ИТОГИ
	|	СУММА(П01_СуммаВычета6)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавка = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет3 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВычет6 = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавка.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавка);
		Показатели.Р02С130.Итог = 0;
		Показатели.П01_СуммаВычета3.Итог = 0;
		Показатели.П01_СуммаВычета6.Итог = 0;
		
		Выборка = ВыборкаСтавка.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С130.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С130, Выборка);
		КонецЦикла;
		
		Если ВыборкаВычет3.НайтиСледующий(ВыборкаСтавка.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаВычета3.Итог = ВыборкаВычет3.П01_СуммаВычета3;
			Иначе
				Выборка = ВыборкаВычет3.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Показатели.П01_СуммаВычета3.Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета3, Выборка);
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		ВыборкаВычет3.Сбросить();
		
		Если ВыборкаВычет6.НайтиСледующий(ВыборкаСтавка.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаВычета6.Итог = ВыборкаВычет6.П01_СуммаВычета6;
			Иначе
				Выборка = ВыборкаВычет6.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Показатели.П01_СуммаВычета6.Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаВычета6, Выборка);
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		ВыборкаВычет6.Сбросить();
		
		РасчетнаяСумма = Показатели.П01_СуммаВычета3.Итог + Показатели.П01_СуммаВычета6.Итог;
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С130.Итог = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С130.Итог, 
			Показатели.П01_СуммаВычета3.Итог, Показатели.П01_СуммаВычета6.Итог, РасчетнаяСумма, Показатели.Р02С100.Значение); 
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверкаКС_1_20()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.20'"));
	Заголовки.Вставить("Условие"			, НСтр("ru='Отчет за год'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.126.1 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма авансового платежа в стр.150 Раздела 2 по соответствующей ставке в стр.100 Раздела 2 = '") +
		НСтр("ru='сумме строк ""Сумма фиксированных авансовых платежей"" Раздела 2 Приложения № 1 к 6-НДФЛ '") +
		НСтр("ru='(соотношение применяется к 6-НДФЛ за налоговый период)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2, ставка %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С100"				, "П000020010001");
	ИменаПоказателей.Вставить("Р02С150"				, "П000020015003");
	ИменаПоказателей.Вставить("П01_СуммаФиксПл"		, "П000П1М100006_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВТ_Р02.Отчет КАК Отчет,
	|	ВТ_Р02.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_Р02.Р02С100 КАК Р02С100,
	|	ВТ_Р02.Р02С150 КАК Р02С150
	|ИЗ
	|	ВТ_Р02 КАК ВТ_Р02
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтраницы
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(НомерСтраницы),
	|	СУММА(Р02С150)
	|ПО
	|	Р02С100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_П01.Отчет КАК Отчет,
	|	ВТ_П01.НомерСтраницы КАК НомерСтраницы,
	|	ВТ_П02.НомерСтроки1 КАК НомерСтроки1,
	|	ВТ_П01.Фамилия КАК Фамилия,
	|	ВТ_П01.ИНН КАК ИНН,
	|	ВТ_П02.Ставка КАК Ставка,
	|	ВТ_П02.СуммаФиксПл КАК П01_СуммаФиксПл
	|ИЗ
	|	ВТ_П01 КАК ВТ_П01
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_П02 КАК ВТ_П02
	|		ПО ВТ_П01.Ключ = ВТ_П02.Ключ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ставка,
	|	НомерСтраницы,
	|	НомерСтроки1
	|ИТОГИ
	|	СУММА(П01_СуммаФиксПл)
	|ПО
	|	Ставка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаСтавкаР02 = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтавкаП01 = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтавкаР02.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С100, ВыборкаСтавкаР02);
		Показатели.Р02С150.Итог = 0;
		Показатели.П01_СуммаФиксПл.Итог = 0;
		
		Выборка = ВыборкаСтавкаР02.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Показатели.Р02С150.Дополнение = "Страница " + Выборка.НомерСтраницы;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С150, Выборка);
		КонецЦикла;
		
		Если ВыборкаСтавкаП01.НайтиСледующий(ВыборкаСтавкаР02.Р02С100, "Ставка") Тогда
			Если ДанныеКС.Турборежим Тогда
				Показатели.П01_СуммаФиксПл.Итог = ВыборкаСтавкаП01.П01_СуммаФиксПл;
			Иначе
				Выборка = ВыборкаСтавкаП01.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Дополнение = "Фамилия " + Выборка.Фамилия + " ИНН " + Выборка.ИНН;
					Показатели.П01_СуммаФиксПл.Дополнение = Дополнение;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П01_СуммаФиксПл, Выборка);
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С150.Итог = Показатели.П01_СуммаФиксПл.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С150.Итог, 
			Показатели.П01_СуммаФиксПл.Итог, Показатели.Р02С100.Значение);
		Настройки.ДопСведения = "Ставка " + Показатели.Р02С100.Значение;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаСтавкаП01.Сбросить();
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Дополнительные

Процедура ПроверкаКС_1_21_доп()
	
	Перем Показатели;
	Перем Список;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.21.доп'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КБК в стр.010 Раздела 1 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"		, "П000010001001");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Если ПараметрыКС.СписочныеЗначения.Свойство(Показатели.Р01С010.ИмяПоказателя, Список) Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С010, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Найти(Показатели.Р01С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаКС_1_22_доп()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.22.доп'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.020 Раздела 1 = сумме всех строк 022 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П000010002001");
	ИменаПоказателей.Вставить("Р01С022"		, "П00001М102201_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
		
		Показатели.Р01С022.Итог = 0;
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М1 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С022, СтраницаРаздела, Счетчик);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р01С020.Значение = Показатели.Р01С022.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р01С020.Значение, 
			Показатели.Р01С022.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_1_23_доп()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.23.доп'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма налога в стр.030 Раздела 1 = сумме всех строк 032 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030"		, "П000010003001");
	ИменаПоказателей.Вставить("Р01С032"		, "П00001М203201_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел1 Цикл
		
		Показатели.Р01С032.Итог = 0;
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, СтраницаРаздела);
		
		Для Счетчик = 1 По СтраницаРаздела.КолвоСтрокП00001М2 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С032, СтраницаРаздела, Счетчик);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р01С030.Значение = Показатели.Р01С032.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р01С030.Значение, 
			Показатели.Р01С032.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаКС_1_24_доп()
	
	Перем Показатели;
	Перем Список;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.24.доп'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КБК в стр.105 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С105"		, "П000020010501");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Если ПараметрыКС.СписочныеЗначения.Свойство(Показатели.Р02С105.ИмяПоказателя, Список) Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С105, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Найти(Показатели.Р02С105.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С105.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаКС_1_25_доп()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.25.доп'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Проверка носит справочный характер'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма дохода в стр.110 Раздела 2 >= (стр.111 + стр.112 + стр.113) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма дохода'"));
	Настройки = ОбработатьНастройки(		, Заголовки);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С110"		, "П000020011003");
	ИменаПоказателей.Вставить("Р02С111"		, "П000020011103");
	ИменаПоказателей.Вставить("Р02С112"		, "П000020011203");
	ИменаПоказателей.Вставить("Р02С113"		, "П000020011303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р02С111.Значение + Показатели.Р02С112.Значение + Показатели.Р02С113.Значение;
		Настройки.ЭтоОшибка = Показатели.Р02С110.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р02С110.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция КодыОтчетногоПериодаПриКоторыхМожетБытьЗаполненоПриложение1() Экспорт
	
	Возврат СтрРазделить("34,51,52,53,90", ",", Ложь);
	
КонецФункции

#КонецОбласти

#КонецЕсли