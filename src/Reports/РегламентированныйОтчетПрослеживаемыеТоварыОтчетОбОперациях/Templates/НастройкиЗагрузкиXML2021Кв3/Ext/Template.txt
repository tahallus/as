// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(П.ДеревоДляЗагрузки, "МнУр"); // для определения многоуровневых разделов
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Многостраничность", Истина), Истина);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СтрокаДерева.МнУр = Истина;
			СтрокаДерева.Многостраничность = Ложь;
		КонецЦикла;
		НайденныеСтроки[0].Многостраничность = Истина;
		НайденныеСтроки[0].Обязательность = НайденныеСтроки[0].Обязательность + "П";
	КонецЕсли;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	Титульный = Неопределено;
	
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		
		Титульный.ПоМесту = П.ПараметрыОтчета.ПоМесту;
		
		Если П.ПараметрыОтчета.Свойство("КодФормРеорг") И ЗначениеЗаполнено(П.ПараметрыОтчета.КодФормРеорг) Тогда
			Титульный.КодФормыРеорганизации          = П.ПараметрыОтчета.КодФормРеорг;
			Титульный.ИННРеорганизованнойОрганизации = П.ПараметрыОтчета.ИННОргРеорг;
			Титульный.КППРеорганизованнойОрганизации = П.ПараметрыОтчета.КППОргРеорг;
		КонецЕсли;
		
	КонецЕсли;
	
	УзлыРеестрСтроки = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/ОтчетОперПрТов/ОтчетОперПрТовСтр"); // многоуровневый реестр (строки)
	
	НомСтраницы = Новый Массив(1);
	НомСтраницы[0] = 1;
	
	НомСтроки = Новый Массив(1);
	
	Для НомСтрокиУровень1 = 1 По УзлыРеестрСтроки.Количество() Цикл
		
		УзелРеестрСтрока = УзлыРеестрСтроки[НомСтрокиУровень1 - 1];
		
		НомСтроки[0] = НомСтрокиУровень1;
		
		УзлыФИО = УзлыПоXPath(УзелРеестрСтрока, "Контрагент/СведИП/ФИО");
		Если УзлыФИО.Количество() > 0 Тогда
			УзелФИО = УзлыФИО[0];
			
			УзелИННФЛ = УзлыПоXPath(УзелФИО.Родитель, "@ИННФЛ")[0];
			Если НЕ ЗначениеЗаполнено(УзелИННФЛ.Значение) Тогда
				УзелИННФЛ.Ключ = "";
			КонецЕсли;
			
			ФИОКонтрагента = "";
			
			Для Каждого СтрокаУзлаФИО Из УзелФИО.Строки Цикл
				СтрокаУзлаФИО.Ключ = "";
				СтрокаФИО = СокрЛП(СтрокаУзлаФИО.Значение);
				Если ЗначениеЗаполнено(СтрокаФИО) Тогда
					ФИОКонтрагента = ФИОКонтрагента + ?(ПустаяСтрока(ФИОКонтрагента), "",  " ") + СтрокаФИО;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ФИОКонтрагента) Тогда
				УзелФИО.Значение = ФИОКонтрагента;
				УзелФИО.Ключ = "П1000007";
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелРеестрСтрока, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, НомСтроки);
		
	КонецЦикла;
	
	Реестр = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногоуровневыхРазделов.Свойство("Реестр", Реестр);
	Если Реестр <> Неопределено Тогда
		
		ТаблДокПрототип = Новый ТабличныйДокумент;
		
		Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
		
		Если П.ПараметрыОтчета.Свойство("СтруктураМногострочныхЧастей") Тогда
			СтруктураМногострочныхЧастей = П.ПараметрыОтчета.СтруктураМногострочныхЧастей;
		Иначе
			СтруктураМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		
		ИтоговыеСуммыПоКодамОпераций = Неопределено;
		П.ДанныеОтчета.СтруктураДанныхОтчета.Свойство("ИтоговыеСуммыПоКодамОпераций", ИтоговыеСуммыПоКодамОпераций);
		Если ТипЗнч(ИтоговыеСуммыПоКодамОпераций) <> Тип("Массив") Тогда
			ИтоговыеСуммыПоКодамОпераций = Новый Массив;
		КонецЕсли;
		
		НомерПП = 0;
		ПроцентПред = 0;
		КоличествоСтрок = Реестр.Строки.Количество();
		Для НомерСтраницы = 1 По КоличествоСтрок Цикл
			Страница = Реестр.Строки[НомерСтраницы - 1];
			
			НаборДопФайлы = Рег.СоздатьМенеджерЗаписи();
			НаборДопФайлы.РегламентированныйОтчет = П.ДанныеОтчета.ДокументОтчета;
			НаборДопФайлы.ВидДополнительногоФайла = "РеестрСтраница" + Формат(НомерСтраницы, "ЧГ=");
			Если НомерСтраницы = 1 Тогда
				НаборДопФайлы.Прочитать();
				ТаблДокПрототип.Вывести(НаборДопФайлы.СодержимоеФайла.Получить());
			КонецЕсли;
			ТаблДокСтраницы = Новый ТабличныйДокумент;
			ТаблДокСтраницы.Вывести(ТаблДокПрототип);
			
			Если ИтоговыеСуммыПоКодамОпераций.Количество() < НомерСтраницы Тогда
				ИтоговыеСуммыПоКодамОпераций.Вставить(НомерСтраницы - 1, Новый Структура("КодОперации,СтоимостьИтого", "", 0));
			КонецЕсли;
			
			СтоимостьИтого = 0;
			ГруппаП10000 = Страница.ДанныеМногострочныхЧастей.П10000;
			Для Каждого СтрокаУровня1 Из ГруппаП10000.Строки Цикл
				НомерПП = НомерПП + 1;
				СтрокаУровня1.Данные.Вставить("П1000001", Формат(НомерПП, "ЧН=; ЧГ="));
				ГруппаП11000 = СтрокаУровня1.ДанныеМногострочныхЧастей.П11000;
				Для Каждого СтрокаУровня2 Из ГруппаП11000.Строки Цикл
					СтоимостьИтого = СтоимостьИтого + СтрокаУровня2.Данные["П1100013"];
				КонецЦикла;
			КонецЦикла;
			Страница.Данные.Вставить("СтоимостьИтого", СтоимостьИтого);
			
			Страница.Данные.Вставить("КодОперации", "");
			
			//Вывод немногострочных данных.
			
			//ИтоговыеСуммыПоКодамОпераций[НомерСтраницы - 1].КодОперации  = П.ПараметрыОтчета.КодОперации;
			Для Каждого ЭлСтруктуры Из Страница.Данные Цикл
				ОбластьЗнач = ТаблДокСтраницы.Области.Найти(ЭлСтруктуры.Ключ);
				Если ОбластьЗнач <> Неопределено Тогда
					ОбластьЗнач.Значение = ЭлСтруктуры.Значение;
					Если ЭлСтруктуры.Ключ = "КодОперации" Тогда
						ИтоговыеСуммыПоКодамОпераций[НомерСтраницы - 1].КодОперации = ЭлСтруктуры.Значение;
					ИначеЕсли ЭлСтруктуры.Ключ = "СтоимостьИтого" Тогда
						ИтоговыеСуммыПоКодамОпераций[НомерСтраницы - 1].СтоимостьИтого = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ВывестиМногострочныеДанныеВТабличныйДокумент(ТаблДокСтраницы, СтруктураМногострочныхЧастей, Страница);
			
			НаборДопФайлы.СодержимоеФайла = Новый ХранилищеЗначения(ТаблДокСтраницы);
			НаборДопФайлы.Записать();
			
			Процент = Мин(Окр(100 * НомерСтраницы / КоличествоСтрок), 100);
			Если ПроцентПред < Процент Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='заполнено страниц отчета %1'"), Формат(НомерСтраницы, "ЧГ="));
				ДлительныеОперации.СообщитьПрогресс(Процент, ТекстСообщения);
				ПроцентПред = Процент;
			КонецЕсли;
			
		КонецЦикла;
		
		П.ДанныеОтчета.СтруктураДанныхОтчета.Вставить("ИтоговыеСуммыПоКодамОпераций", ИтоговыеСуммыПоКодамОпераций);
		
	КонецЕсли;
	
#КонецОбласти