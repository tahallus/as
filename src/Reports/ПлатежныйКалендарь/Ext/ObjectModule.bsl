#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Деньги,План,Платежи'");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	//Инициализация
	ВнешниеНаборыДанных = ИнициализироватьВнешниеНаборыДанных();
	ДанныеМеток = ИнициализироватьДанныеМеток();
	
	Отчеты.ПлатежныйКалендарь.ВосстановитьНастройкиОтборов(ЭтотОбъект, ДанныеМеток);
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для каждого Настройка Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если Строка(Настройка.Параметр) = "Период" И Настройка.Использование Тогда
				ПериодПланирования = Настройка.Значение;
			КонецЕсли;
			
			Если Строка(Настройка.Параметр) = "Периодичность" И Настройка.Использование Тогда
				ПланироватьПоДням = (Настройка.Значение = Перечисления.Периодичность.День);
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			
			Для каждого Отбор Из Настройка.Элементы Цикл
				
				Если Отбор.Использование Тогда
					НоваяМетка = ДанныеМеток.Добавить();
					НоваяМетка.ИмяПоляОтбора = Строка(Отбор.ЛевоеЗначение);
					НоваяМетка.Метка = Отбор.ПравоеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Отчеты.ПлатежныйКалендарь.СформироватьЗапросПлатежныйКалендарь(ЭтотОбъект, ДанныеМеток);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоГруппировкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Параметры = Отчеты.ПлатежныйКалендарь.ПолучитьПараметрыГруппировокДерева(ЭтотОбъект);
		ЗаполнитьВнешниеНаборыРекурсивно(ВыборкаПоГруппировкам, ВнешниеНаборыДанных, 0, Параметры);
	КонецЦикла;
	
	УстановитьПериодВОтбореУсловногоОформления(Настройки);
	НастроитьОтображениеГруппировокОтчета(Настройки);
	
	Если НЕ ОтображатьСчетКассу Тогда
		ДополнитьНаборыПриОтсутствииСчетовКасс(ВнешниеНаборыДанных);
	КонецЕсли;
		
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Обновляем предопределенный заголовок
	ОбластьЗаголовка = ДокументРезультат.Область("R1C1");
	ШаблонПредставления = НСтр("ru = 'Платежный календарь %1'");
	ОбластьЗаголовка.Текст = СтрШаблон(ШаблонПредставления, ОбновитьПредставлениеПериода(ПериодПланирования));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьВнешниеНаборыДанных()
	
	ТаблицаОстатков = Новый ТаблицаЗначений();
	ТаблицаОстатков.Колонки.Добавить("Организация");
	ТаблицаОстатков.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаОстатков.Колонки.Добавить("Валюта");
	ТаблицаОстатков.Колонки.Добавить("Период");
	ТаблицаОстатков.Колонки.Добавить("Сумма");
	
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Организация");
	ТаблицаПлатежей.Колонки.Добавить("ТипДенежныхСредств");
	ТаблицаПлатежей.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаПлатежей.Колонки.Добавить("Статья");
	ТаблицаПлатежей.Колонки.Добавить("Контрагент");
	ТаблицаПлатежей.Колонки.Добавить("Документ");
	ТаблицаПлатежей.Колонки.Добавить("Валюта");
	ТаблицаПлатежей.Колонки.Добавить("СтатусУтвержденияПлатежа");
	ТаблицаПлатежей.Колонки.Добавить("Период");
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	
	Возврат Новый Структура("ТаблицаПлатежей,ТаблицаОстатков", ТаблицаПлатежей, ТаблицаОстатков);
	
КонецФункции

Функция ИнициализироватьДанныеМеток()
	
	ДанныеМеток = Новый ТаблицаЗначений;
	ДанныеМеток.Колонки.Добавить("Метка");
	ДанныеМеток.Колонки.Добавить("ПредставлениеМетки");
	ДанныеМеток.Колонки.Добавить("ИмяПоляОтбора");
	ДанныеМеток.Колонки.Добавить("ИмяГруппыРодителя");
	
	Возврат ДанныеМеток;
	
КонецФункции 

Процедура ЗаполнитьВнешниеНаборыРекурсивно(Выборка, ВнешниеНаборыДанных, ТекущийУровень, ПараметрыГруппировок)
	
	Пока Выборка.Следующий() Цикл
		Аналитика = ПараметрыГруппировок.Аналитика[ТекущийУровень];
		ДобавитьСтрокуТаблицНаборов(Выборка, Аналитика, ВнешниеНаборыДанных, ПараметрыГруппировок);
		Если ПараметрыГруппировок.КоличествоУровней > ТекущийУровень + 1 Тогда
			ВыборкаГрупп = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗаполнитьВнешниеНаборыРекурсивно(ВыборкаГрупп, ВнешниеНаборыДанных, ТекущийУровень+1, ПараметрыГруппировок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуТаблицНаборов(Выборка, ТипАналитики, ВнешниеНаборы, ПараметрыГруппировок)
	
	ПериодыПланирования = Новый СписокЗначений;
	
	Если ПланироватьПоДням Тогда
		
		ШагДень = 86400;
		ПериодВСекундах = ПериодПланирования.ДатаОкончания - ПериодПланирования.ДатаНачала;
		
		КоличествоПериодов = Цел(ПериодВСекундах / ШагДень);
		
		Для Итератор = 0 По КоличествоПериодов Цикл
			Период = ПериодПланирования.ДатаНачала + ШагДень * Итератор;
			ПериодыПланирования.Добавить(Период);
		КонецЦикла;
		
	Иначе
		
		Период = ПериодПланирования.ДатаНачала;
		
		Пока Период < ПериодПланирования.ДатаОкончания  Цикл
			ПериодыПланирования.Добавить(Период);
			Период = КонецНедели(Период) + 1;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Организация Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана организация>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.ТипДенежныхСредств Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран тип ДС>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран счет / касса>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана статья>'");
	Иначе
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрано>'");
	КонецЕсли;
	
	ПоНацВалюте = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаНациональная;
	ПоУправленческой = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаУправленческогоУчета;
	
	Если ВариантПересчетаСумм = ПоНацВалюте Тогда
		СуммаОстаток = Выборка.СуммаРегОстаток;
		СуммаОборот  = Выборка.СуммаРегОборот;
	ИначеЕсли ВариантПересчетаСумм = ПоУправленческой Тогда
		СуммаОстаток = Выборка.СуммаОстаток;
		СуммаОборот  = Выборка.СуммаОборот;
	Иначе // В валюте платежа
		СуммаОстаток = Выборка.СуммаВалОстаток;
		СуммаОборот  = Выборка.СуммаВалОборот;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса 
		 И Выборка.СуммаОборот = 0 И Выборка.СуммаОстаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья 
		 И Выборка.СуммаОборот = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ 
		 И (НЕ ЗначениеЗаполнено(Выборка.Документ) ИЛИ НЕ ЗначениеЗаполнено(Выборка.Период)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипАналитикиСтрокой = XMLСтрока(ТипАналитики);
	Аналитика = Выборка[ТипАналитикиСтрокой];
	
	Организация = ?(ОтображатьОрганизацию, Выборка.Организация, Справочники.Организации.ПустаяСсылка());
	СчетКасса = ?(ОтображатьСчетКассу, Выборка.БанковскийСчетКасса, Справочники.Кассы.ПустаяСсылка());
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		
		Отбор = Новый Структура("Организация,БанковскийСчетКасса,Валюта", Организация, СчетКасса, Выборка.Валюта);
		Если ВнешниеНаборы.ТаблицаОстатков.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			НоваяСтрока = ВнешниеНаборы.ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.БанковскийСчетКасса = СчетКасса;
			НоваяСтрока.Период = НачалоДня(Период.Значение);
			НоваяСтрока.Сумма = СуммаОстаток;
			
			Если ЗначениеЗаполнено(Аналитика) И ТипЗнч(Аналитика) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				НоваяСтрока.Валюта = Аналитика.ВалютаДенежныхСредств;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ Тогда
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			НоваяСтрока = ВнешниеНаборы.ТаблицаПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.БанковскийСчетКасса = СчетКасса;
			НоваяСтрока.Период = НачалоДня(Период.Значение);
			Если Выборка.Период = Период.Значение Тогда
				НоваяСтрока.Сумма = СуммаОборот;
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Отбор = Новый Структура("Организация,БанковскийСчетКасса", Организация, СчетКасса);
		СтрокиПоСчетуКассе = ВнешниеНаборы.ТаблицаОстатков.НайтиСтроки(Отбор);
		
		Для каждого СтрокаСчетКасса Из СтрокиПоСчетуКассе Цикл
			Если СтрокаСчетКасса.Период >= Выборка.Период Тогда
				СтрокаСчетКасса.Сумма = СтрокаСчетКасса.Сумма + СуммаОборот;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьОтображениеГруппировокОтчета(Настройки)
	
	ТекущаяГруппировка = Настройки.Структура[0].Строки[0];
	
	Включена = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
	Отключена = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
	
	Пока ТекущаяГруппировка.Имя <> "Документ" Цикл
		
		Если ТекущаяГруппировка.Имя = "Организация" Тогда
			ТекущаяГруппировка.Состояние = ?(ОтображатьОрганизацию, Включена, Отключена);
		КонецЕсли;
		
		Если ТекущаяГруппировка.Имя = "ТипДенежныхСредств" Тогда
			ТекущаяГруппировка.Состояние = ?(ОтображатьТипДС, Включена, Отключена);
		КонецЕсли;
		
		Если ТекущаяГруппировка.Имя = "БанковскийСчетКасса" Тогда
			ТекущаяГруппировка.Состояние = ?(ОтображатьСчетКассу, Включена, Отключена);
		КонецЕсли;
		
		Если ТекущаяГруппировка.Имя = "Статья" Тогда
			ТекущаяГруппировка.Состояние = ?(ОтображатьСтатью, Включена, Отключена);
		КонецЕсли;
		
		Если ТекущаяГруппировка.Имя = "Контрагент" Тогда
			ТекущаяГруппировка.Состояние = ?(ОтображатьКонтрагента, Включена, Отключена);
		КонецЕсли;
		
		УстановитьПериодВОтбореУсловногоОформления(ТекущаяГруппировка);
		ТекущаяГруппировка = ТекущаяГруппировка.Структура[0];
		
	КонецЦикла;
	
	Если НЕ ПланироватьПоДням Тогда
		
		Попытка
			МакетГруппировкиПериод = СхемаКомпоновкиДанных.Макеты.Макет1.Макет[0];
			ЯчейкаГруппировки = МакетГруппировкиПериод.Ячейки[0].Элементы[0];
			ЯчейкаГруппировки.Оформление.Элементы[0].Значение = "ДФ=MMMM";
		Исключение
			// Не предусмотрено
			// Если требуемый макет не найден, формирование отчета должно продолжаться
			// Формат области, который задан в макете СКД, при этом, не изменяется
		КонецПопытки;
		
	КонецЕсли; 
	
	УстановитьПериодВОтбореУсловногоОформления(ТекущаяГруппировка);
	
КонецПроцедуры

Процедура УстановитьПериодВОтбореУсловногоОформления(Настройки)
	
	Для каждого УсловноеОформлениеСКД Из Настройки.УсловноеОформление.Элементы Цикл
		Для каждого ЭлементОтбора Из УсловноеОформлениеСКД.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для каждого ЭлементОтбораГруппы Из ЭлементОтбора.Элементы Цикл
					Если Строка(ЭлементОтбораГруппы.ЛевоеЗначение) = "Период" Тогда
						ЭлементОтбораГруппы.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Период" Тогда
				ЭлементОтбора.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьПредставлениеПериода(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ (НЕ ЗначениеЗаполнено(Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		ПредставлениеПериода = НСтр("ru = 'Период: за все время'");
	Иначе
		ДатаОкончанияПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания);
		Если ДатаОкончанияПериода < Период.ДатаНачала Тогда
			ПредставлениеПериода = НСтр("ru = 'с '")+Формат(Период.ДатаНачала,"ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериода = НСтр("ru = 'за '")+НРег(ПредставлениеПериода(Период.ДатаНачала, ДатаОкончанияПериода));
		КонецЕсли; 
			КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Процедура ДополнитьНаборыПриОтсутствииСчетовКасс(ВнешниеНаборыДанных)
	
	ПериодыПланирования = Новый СписокЗначений;
	
	Если ПланироватьПоДням Тогда
		
		ШагДень = 86400;
		ПериодВСекундах = ПериодПланирования.ДатаОкончания - ПериодПланирования.ДатаНачала;
		
		КоличествоПериодов = Цел(ПериодВСекундах / ШагДень);
		
		Для Итератор = 0 По КоличествоПериодов Цикл
			Период = ПериодПланирования.ДатаНачала + ШагДень * Итератор;
			ПериодыПланирования.Добавить(Период);
		КонецЦикла;
		
	Иначе
		
		Период = ПериодПланирования.ДатаНачала;
		
		Пока Период < ПериодПланирования.ДатаОкончания  Цикл
			ПериодыПланирования.Добавить(Период);
			Период = КонецНедели(Период) + 1;
		КонецЦикла; 
		
	КонецЕсли;
	
	ПоДаннымПлатежей = ВнешниеНаборыДанных.ТаблицаПлатежей.Скопировать();
	ПоДаннымПлатежей.Свернуть("Организация,БанковскийСчетКасса");
	
	Для каждого АналитикаПлатежа Из ПоДаннымПлатежей Цикл
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			НоваяСтрока = ВнешниеНаборыДанных.ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, АналитикаПлатежа);
			НоваяСтрока.Период = НачалоДня(Период.Значение);
			НоваяСтрока.Сумма = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли