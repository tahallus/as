
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьРеквизитыФормы();
	ВосстановитьНастройкиОтборов();
	ПрочитатьРасчетныеСчетаИКассы();
	
	Элементы.СтраницыПлатежныйКалендарь.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
	Элементы.ДиаграммаПлатежногоКалендаря.Видимость = Объект.ВидДиаграммы <> Перечисления.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить;
	ИнициализироватьПустуюДиаграмму();
	
	// Тесная интеграция с подсистемами БСП.
	НастройкиОтчета = ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Внешний", Ложь);
	НастройкиОтчета.Вставить("ПолноеИмя", РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		Если НЕ НастройкиОтчета.Свойство("ВариантСсылка") Тогда
			Если Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
				НастройкиОтчета.Вставить("ВариантСсылка", Параметры.Ключ);
			Иначе
				НастройкиОтчета.Вставить("ВариантСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
			КонецЕсли; 
		КонецЕсли; 
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		УбратьКартинкиКомандРекурсивно(Элементы.ГруппаОтправить.ПодчиненныеЭлементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиОтборов();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхПлатежногоКалендаря" Тогда
		
#Если МобильныйКлиент Тогда
		ОбновитьПлатежныйКалендарьНаСервереМобильныйКлиент();
#Иначе
		ОбновитьПлатежныйКалендарьНаСервере();
#КонецЕсли
		
		// Позиционирование фокуса дерева на новом или обновленном значении
		Если ЗначениеЗаполнено(Источник) Тогда
			
			ИдентификаторСтроки = -1;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Аналитика", ИдентификаторСтроки, ДеревоПлатежей.ПолучитьЭлементы(), Источник, Ложь);
			
			Если ИдентификаторСтроки >= 0 Тогда
				
				ЭтаФорма.Элементы.ДеревоПлатежей.ТекущаяСтрока = ИдентификаторСтроки;
				АктивныйПериод = Макс(Объект.ПериодПланирования.ДатаНачала, ?(Объект.ПланироватьПоДням, Параметр.Дата, НачалоНедели(Параметр.Дата)));
				ЭтаФорма.Элементы.ДеревоПлатежей.ТекущийЭлемент = Элементы.Найти("ДеревоПлатежей" + СформироватьИмяКолонкиПоПериоду(АктивныйПериод));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодичностьПланированияПриИзменении(Элемент)
	
	ОбновитьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПлатежногоКалендаряВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КолонкаВыбраннойДаты = Элементы.Найти("ДеревоПлатежей" + СформироватьИмяКолонкиПоПериоду(ЗначениеДиаграммы.Точка.Значение));
	Элементы.ДеревоПлатежей.ТекущийЭлемент = КолонкаВыбраннойДаты;
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Аналитика", ИдентификаторСтроки, ДеревоПлатежей.ПолучитьЭлементы(), ЗначениеДиаграммы.Серия.Значение, Ложь);
	Элементы.ДеревоПлатежей.ТекущаяСтрока = ИдентификаторСтроки;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоПлатежей;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммыПриИзменении(Элемент)
	
	Если Объект.ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить") Тогда
		Элементы.ДиаграммаПлатежногоКалендаря.Видимость = Ложь;
	Иначе
		Элементы.ДиаграммаПлатежногоКалендаря.Видимость = Истина;
		ОбновитьПлатежныйКалендарь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБолееРанниеПлатежиПриИзменении(Элемент)
	
	ОбновитьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("СтатусУтвержденияПлатежа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатьяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Статья", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДенежныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("ТипДенежныхСредств", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетКассаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("БанковскийСчетКасса", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОрганизациюПриИзменении(Элемент)
	
	ПриИзмененииПараметровГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТипДСПриИзменении(Элемент)
	
	ПриИзмененииПараметровГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСчетКассуПриИзменении(Элемент)
	
	ПриИзмененииПараметровГруппировок();
	
	Если Объект.ОтображатьСчетКассу Тогда
		Элементы.ВидДиаграммы.Доступность = Истина;
	Иначе
		Элементы.ДиаграммаПлатежногоКалендаря.Видимость = Ложь;
		Элементы.ВидДиаграммы.Доступность = Ложь;
		Объект.ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСтатьюПриИзменении(Элемент)
	
	ПриИзмененииПараметровГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииПараметровГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровГруппировок()
	
	// Обновление реквизита "РазвернутьДо" в зависимости от выбранной аналитики
	ПараметрыГруппировок = ПолучитьПараметрыГруппировокДерева();
	
	Если ПараметрыГруппировок.Аналитика.Найти(Объект.РазвернутьДо) = Неопределено Тогда
		Если ПараметрыГруппировок.Аналитика.Количество() > 0 Тогда
			Объект.РазвернутьДо = ПараметрыГруппировок.Аналитика[0];
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РазвернутьДо.СписокВыбора.ЗагрузитьЗначения(ПараметрыГруппировок.Аналитика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияТекущейАналитикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элементы.ПодробнаяИнформацияТекущейАналитики.ТекущиеДанные.ПодробнаяИнформация);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДоПриИзменении(Элемент)
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВариантаПересчетаПриИзменении(Элемент)
	
	ОбновитьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВариантаПересчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрока = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПредставлениеВариантаПересчета = ВыбраннаяСтрока.Представление;
		Объект.ВариантПересчетаСумм = ВыбранноеЗначение;
		ПредставлениеВариантаПересчетаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПолучитьДанныеСтрокиМобильныйКлиент(Расшифровка, ДанныеРасшифровкиАдресВХранилище);
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежей" + "Аналитика" И Элемент.ТекущиеДанные.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ") Тогда //Переход к колонке с суммой
		Для каждого Период Из ПериодыПланирования Цикл
			Если Элемент.ТекущиеДанные[СформироватьИмяКолонкиПоПериоду(Период.Значение)] <> 0 Тогда
				
				КолонкаВыбраннойДаты = Элементы.Найти("ДеревоПлатежей" + СформироватьИмяКолонкиПоПериоду(Период.Значение));
				ЭтаФорма.Элементы.ДеревоПлатежей.ТекущийЭлемент = КолонкаВыбраннойДаты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюОткрытьОбъект.Доступность Тогда
			СписокКоманд.Добавить("ОткрытьОбъект", 			НСтр("ru = 'Открыть'"),, 				 БиблиотекаКартинок.Лупа);
		КонецЕсли;
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюГруппаИзменениеТекущегоДокумента.Доступность Тогда
			СписокКоманд.Добавить("ИзменитьДату", 			НСтр("ru = 'Изменить дату'"),, 			 БиблиотекаКартинок.ПлатежныйКалендарьИзменитьДату);
			СписокКоманд.Добавить("ИзменитьСчетКассу", 		НСтр("ru = 'Изменить счет / кассу'"),, 	 БиблиотекаКартинок.Изменить);
			СписокКоманд.Добавить("Отменить", 				НСтр("ru = 'Отменить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
			СписокКоманд.Добавить("Скопировать", 			НСтр("ru = 'Скопировать'"),, 			 БиблиотекаКартинок.СкопироватьЭлементСписка);
		КонецЕсли;
		
		СписокКоманд.Добавить("СоздатьПлатежноеПоручение",  НСтр("ru = 'Платежное поручение'"),, 	 БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьРасход", 			НСтр("ru = 'Заявка на расход денег'"),,  БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьПриход", 			НСтр("ru = 'Поступление денег (план)'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьПеремещение", 		НСтр("ru = 'Перемещение денег (план)'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюГруппаУтверждение.Доступность Тогда
			Если Элементы.ДеревоПлатежейКонтекстноеМенюУтвердить.Доступность Тогда
				СписокКоманд.Добавить("Утвердить", 			НСтр("ru = 'Утвердить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьУтвердить);
			КонецЕсли;
			Если Элементы.ДеревоПлатежейКонтекстноеМенюОтменитьУтверждение.Доступность Тогда
				СписокКоманд.Добавить("ОтменитьУтверждение",НСтр("ru = 'Отклонить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьОтклонить);
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОкончаниеВыбораИзСпискаКонтекстногоМеню", ЭтаФорма), СписокКоманд, Элемент);
		
	КонецЕсли;

	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоПлатежей

&НаКлиенте
Процедура ДеревоПлатежейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ") Тогда
			Элементы.ДеревоПлатежейКонтекстноеМенюГруппаИзменениеТекущегоДокумента.Доступность = Истина;
			Элементы.ДеревоПлатежейКонтекстноеМенюГруппаУтверждение.Доступность = ТипЗнч(ТекущиеДанные.Аналитика) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(ТекущиеДанные.Аналитика) = Тип("ДокументСсылка.ПеремещениеДСПлан");
			Элементы.ДеревоПлатежейКонтекстноеМенюУтвердить.Доступность = ТекущиеДанные.СтатусУтвержденияПлатежа = ПредопределенноеЗначение("Перечисление.СтатусыУтвержденияПлатежей.НеУтвержден");
			Элементы.ДеревоПлатежейКонтекстноеМенюОтменитьУтверждение.Доступность = НЕ Элементы.ДеревоПлатежейКонтекстноеМенюУтвердить.Доступность;
		Иначе
			Элементы.ДеревоПлатежейКонтекстноеМенюГруппаИзменениеТекущегоДокумента.Доступность = Ложь;
			Элементы.ДеревоПлатежейКонтекстноеМенюГруппаУтверждение.Доступность = Ложь;
		КонецЕсли;
		
		Если Объект.ОтображатьСчетКассу И Объект.ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.Детальная") Тогда
			ВыделитьСериюДиаграммыПриИзмененииСтрокиДерева(ТекущиеДанные);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьАктивизациюСтрокиДерева", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиДерева()
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоТекущейСтроке = Новый Структура("Аналитика,ИдентификаторСтрокиДляОтбора", ТекущиеДанные.Аналитика, ТекущиеДанные.ИдентификаторСтрокиДляОтбора);
	Элементы.ПодробнаяИнформацияТекущейАналитики.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборПоТекущейСтроке);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежей" + "Аналитика" И Элемент.ТекущиеДанные.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ") Тогда //Переход к колонке с суммой
		Для каждого Период Из ПериодыПланирования Цикл
			Если Элемент.ТекущиеДанные[СформироватьИмяКолонкиПоПериоду(Период.Значение)] <> 0 Тогда
				
				КолонкаВыбраннойДаты = Элементы.Найти("ДеревоПлатежей" + СформироватьИмяКолонкиПоПериоду(Период.Значение));
				ЭтаФорма.Элементы.ДеревоПлатежей.ТекущийЭлемент = КолонкаВыбраннойДаты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюОткрытьОбъект.Доступность Тогда
			СписокКоманд.Добавить("ОткрытьОбъект", 			НСтр("ru = 'Открыть'"),, 				 БиблиотекаКартинок.Лупа);
		КонецЕсли;
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюГруппаИзменениеТекущегоДокумента.Доступность Тогда
			СписокКоманд.Добавить("ИзменитьДату", 			НСтр("ru = 'Изменить дату'"),, 			 БиблиотекаКартинок.ПлатежныйКалендарьИзменитьДату);
			СписокКоманд.Добавить("ИзменитьСчетКассу", 		НСтр("ru = 'Изменить счет / кассу'"),, 	 БиблиотекаКартинок.Изменить);
			СписокКоманд.Добавить("Отменить", 				НСтр("ru = 'Отменить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
			СписокКоманд.Добавить("Скопировать", 			НСтр("ru = 'Скопировать'"),, 			 БиблиотекаКартинок.СкопироватьЭлементСписка);
		КонецЕсли;
		
		СписокКоманд.Добавить("СоздатьПлатежноеПоручение",  НСтр("ru = 'Платежное поручение'"),, 	 БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьРасход", 			НСтр("ru = 'Заявка на расход денег'"),,  БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьПриход", 			НСтр("ru = 'Поступление денег (план)'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокКоманд.Добавить("ДобавитьПеремещение", 		НСтр("ru = 'Перемещение денег (план)'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если Элементы.ДеревоПлатежейКонтекстноеМенюГруппаУтверждение.Доступность Тогда
			Если Элементы.ДеревоПлатежейКонтекстноеМенюУтвердить.Доступность Тогда
				СписокКоманд.Добавить("Утвердить", 			НСтр("ru = 'Утвердить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьУтвердить);
			КонецЕсли;
			Если Элементы.ДеревоПлатежейКонтекстноеМенюОтменитьУтверждение.Доступность Тогда
				СписокКоманд.Добавить("ОтменитьУтверждение",НСтр("ru = 'Отклонить'"),, 				 БиблиотекаКартинок.ПлатежныйКалендарьОтклонить);
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОкончаниеВыбораИзСпискаКонтекстногоМеню", ЭтаФорма), СписокКоманд, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораИзСпискаКонтекстногоМеню(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Значение = "ОткрытьОбъект" Тогда
		ОткрытьОбъект(Неопределено);
	ИначеЕсли Результат.Значение = "ИзменитьДату" Тогда
		ИзменитьДату(Неопределено);
	ИначеЕсли Результат.Значение = "ИзменитьСчетКассу" Тогда
		ИзменитьСчетКассу(Неопределено);
	ИначеЕсли Результат.Значение = "Отменить" Тогда
		Отменить(Неопределено);
	ИначеЕсли Результат.Значение = "СоздатьПлатежноеПоручение" Тогда
		СоздатьПлатежноеПоручение(Неопределено);
	ИначеЕсли Результат.Значение = "ДобавитьРасход" Тогда
		ДобавитьРасход(Неопределено);
	ИначеЕсли Результат.Значение = "ДобавитьПриход" Тогда
		ДобавитьПриход(Неопределено);
	ИначеЕсли Результат.Значение = "ДобавитьПеремещение" Тогда
		ДобавитьПеремещение(Неопределено);
	ИначеЕсли Результат.Значение = "Утвердить" Тогда
		Утвердить(Неопределено);
	ИначеЕсли Результат.Значение = "ОтменитьУтверждение" Тогда
		ОтменитьУтверждение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = ДеревоПлатежей.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Организация")
		 ИЛИ СтрокаДерева.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.ТипДенежныхСредств")
		 ИЛИ СтрокаДерева.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Статья")
		 ИЛИ СтрокаДерева.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Контрагент")
		 ИЛИ Поле.Имя = "ДеревоПлатежей_ПустаяКолонка"
		 ИЛИ Поле.Имя = "ДеревоПлатежей_00010101" Тогда
		 
		 ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ДеревоПлатежей.ТекущиеДанные.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ") Тогда
		ПараметрыПеретаскивания.Значение = ПолучитьДанныеЯчейки();
	Иначе
		СтандартнаяОбработка = Ложь;
		Выполнение = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущаяСтрока = Строка Тогда //Меняется дата
		
		НоваяДата = СформироватьПериодПоИмениКолонки(Поле.Имя);
		ИзменитьДатуЗавершение(НоваяДата, ПараметрыПеретаскивания.Значение);
		
	Иначе //Меняется счет
		
		СтрокаКуда = ДеревоПлатежей.НайтиПоИдентификатору(Строка);
		ИзменитьАналитикуЗавершение(СтрокаКуда, ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандКонтекстногоМенюДереваПлатежей

&НаКлиенте
Процедура ДобавитьРасход(Команда)
	
	ТипДокумента = Тип("ДокументСсылка.РасходДСПлан");
	ПараметрыЗаполненияДокумента = ПодготовитьДанныеЗаполненияДокумента(ПолучитьДанныеЯчейки(), ТипДокумента);
	ОткрытьФорму("Документ.РасходДСПлан.ФормаОбъекта", ПараметрыЗаполненияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПриход(Команда)
	
	ТипДокумента = Тип("ДокументСсылка.ПоступлениеДСПлан");
	ПараметрыЗаполненияДокумента = ПодготовитьДанныеЗаполненияДокумента(ПолучитьДанныеЯчейки(), ТипДокумента);
	ОткрытьФорму("Документ.ПоступлениеДСПлан.ФормаОбъекта", ПараметрыЗаполненияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеремещение(Команда)
	
	ТипДокумента = Тип("ДокументСсылка.ПеремещениеДСПлан");
	ПараметрыЗаполненияДокумента = ПодготовитьДанныеЗаполненияДокумента(ПолучитьДанныеЯчейки(), ТипДокумента);
	ОткрытьФорму("Документ.ПеремещениеДСПлан.ФормаОбъекта", ПараметрыЗаполненияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	
	ПараметрыЗаполненияДокумента = Новый Структура;
	ПараметрыЗаполненияДокумента.Вставить("Основание", ДанныеЯчейки.Документ);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыЗаполненияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДату(Команда)
	
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	
	Период = Объект.ПериодПланирования.ДатаНачала;
	
	Если Элементы.ДеревоПлатежей.ТекущийЭлемент <> Неопределено Тогда
		ИмяКолонки = Элементы.ДеревоПлатежей.ТекущийЭлемент.Имя;
		Если ИмяКолонки <> "ДеревоПлатежей" + "Аналитика" Тогда
			Период = СформироватьПериодПоИмениКолонки(ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
	
	ПодсказкаВвода = НСтр("ru = 'Введите новую дату'");
	ПоказатьВводДаты(Новый ОписаниеОповещения("ИзменитьДатуЗавершение", ЭтотОбъект, ДанныеЯчейки), Период, ПодсказкаВвода, ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуЗавершение(НоваяДата, ДанныеЯчейки) Экспорт
	
	Если НоваяДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = ДанныеЯчейки.Документ;
	СтрокаДерева = ДеревоПлатежей.НайтиПоИдентификатору(ДанныеЯчейки.ИдентификаторСтроки);
	СтараяДата = ДанныеЯчейки.Период;
	
	ИзмененныеРеквизиты = Новый Структура;
	ИзмененныеРеквизиты.Вставить("Дата", НоваяДата);
	ИзмененныеРеквизиты.Вставить("СтараяДата", СтараяДата);
	
	Если Объект.ОтображатьБолееРанниеПлатежи И СтараяДата = '00010101' Тогда
		ИзмененныеРеквизиты.СтараяДата = ДанныеЯчейки.ПлановаяДата;
	КонецЕсли;
	
	Если ИзменитьДанныеПланированияНаСервере(ДанныеЯчейки.Документ, ИзмененныеРеквизиты, Объект.ПланироватьПоДням) Тогда
		
		ПереместитьСуммуПоСтроке(СтараяДата, НоваяДата, СтрокаДерева, ДанныеЯчейки.Сумма);
		ПересчитатьИтогиПриИзмененииДаты(СтрокаДерева, СтараяДата, НоваяДата, ДанныеЯчейки.Сумма);
		
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда // Возможно требуется пересчитать итоги и по второй строке перемещения
			ИдентификаторСтроки = Неопределено;
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоляСИсключением("Аналитика", ИдентификаторСтроки, ДеревоПлатежей.ПолучитьЭлементы(), ДанныеЯчейки.Документ, Ложь, ДанныеЯчейки.ИдентификаторСтроки);
			Если ИдентификаторСтроки <> Неопределено Тогда
				ВтораяСтрокаПеремещения = ДеревоПлатежей.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если ВтораяСтрокаПеремещения <> Неопределено Тогда
					ПереместитьСуммуПоСтроке(СтараяДата, НоваяДата, ВтораяСтрокаПеремещения, - ДанныеЯчейки.Сумма);
					ПересчитатьИтогиПриИзмененииДаты(ВтораяСтрокаПеремещения, СтараяДата, НоваяДата, - ДанныеЯчейки.Сумма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Дата была изменена'"), ПолучитьНавигационнуюСсылку(СтрокаДерева.Аналитика), Строка(СтрокаДерева.Аналитика), БиблиотекаКартинок.ПлатежныйКалендарьИзменитьДату);
		
		Если Элементы.ДеревоПлатежей.ТекущийЭлемент = Неопределено Тогда
			КолонкаВыбраннойДаты = Элементы.Найти("ДеревоПлатежей" + СформироватьИмяКолонкиПоПериоду(НоваяДата, Объект.ПланироватьПоДням));
			ЭтаФорма.Элементы.ДеревоПлатежей.ТекущийЭлемент = КолонкаВыбраннойДаты;
		КонецЕсли;
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось изменить дату'"), ПолучитьНавигационнуюСсылку(СтрокаДерева.Аналитика), Строка(СтрокаДерева.Аналитика), БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАналитикуЗавершение(СтрокаДереваКуда, ДанныеЯчейки, ВыбранныеПараметры = Неопределено)
	
	ИзмененныеРеквизиты = Новый Структура;
	
	Если СтрокаДереваКуда = Неопределено Тогда
		Если ВыбранныеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеНовойЯчейки = ВыбранныеПараметры;
	Иначе
		ДанныеНовойЯчейки = ПолучитьДанныеЯчейки(СтрокаДереваКуда.ПолучитьИдентификатор());
	КонецЕсли;
	
	// Определяем какие реквизиты документа нужно обновлять
	ИзмененныеРеквизиты.Вставить("ТипДенежныхСредств", ДанныеНовойЯчейки.ТипДенежныхСредств);
	Если ЗначениеЗаполнено(ДанныеНовойЯчейки.БанковскийСчетКасса) Тогда
		Если ТипЗнч(ДанныеНовойЯчейки.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ИзмененныеРеквизиты.Вставить("БанковскийСчет", ДанныеНовойЯчейки.БанковскийСчетКасса);
		ИначеЕсли ТипЗнч(ДанныеНовойЯчейки.БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
			ИзмененныеРеквизиты.Вставить("Касса", ДанныеНовойЯчейки.БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ВалютныйУчетВключен Тогда
		Если СтрокаДереваКуда <> Неопределено Тогда
			ИзмененныеРеквизиты.Вставить("ВалютаДокумента", СтрокаДереваКуда.Валюта);
			НоваяСумма = ПересчитатьСуммуИзВалютыВВалюту(ДанныеЯчейки.Сумма, ДанныеЯчейки.Валюта, СтрокаДереваКуда.Валюта);
			ИзмененныеРеквизиты.Вставить("СуммаДокумента", Макс(НоваяСумма, НоваяСумма * -1));
		КонецЕсли;
	КонецЕсли;
	
	// Обновление самого документа
	Если ИзменитьДанныеПланированияНаСервере(ДанныеЯчейки.Документ, ИзмененныеРеквизиты, Объект.ПланироватьПоДням) Тогда
		
		Если СтрокаДереваКуда = Неопределено Тогда
			ОбновитьПлатежныйКалендарь();
		Иначе
			СтрокаДереваОткуда = ДеревоПлатежей.НайтиПоИдентификатору(ДанныеЯчейки.ИдентификаторСтроки);
			ПересчитатьИтогиПриИзмененииАналитики(СтрокаДереваОткуда, СтрокаДереваКуда);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Счет / касса был изменен'"), ПолучитьНавигационнуюСсылку(ДанныеЯчейки.Документ), Строка(ДанныеЯчейки.Документ), БиблиотекаКартинок.Изменить);
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось изменить счет / кассу'"), ПолучитьНавигационнуюСсылку(ДанныеЯчейки.Документ), Строка(ДанныеЯчейки.Документ), БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
	// Активизируем новую строку
	ИдентификаторСтроки = Неопределено;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Аналитика", ИдентификаторСтроки, ДеревоПлатежей.ПолучитьЭлементы(), ДанныеЯчейки.Документ, Ложь);
	Если ИдентификаторСтроки <> Неопределено Тогда
		ЭтаФорма.Элементы.ДеревоПлатежей.ТекущаяСтрока = ИдентификаторСтроки;
	ИначеЕсли СтрокаДереваКуда <> Неопределено Тогда
		Элементы.ДеревоПлатежей.ТекущаяСтрока = СтрокаДереваКуда.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСчетКассу(Команда)
	
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	
	ОткрытьФорму("Отчет.ПлатежныйКалендарь.Форма.ФормаВыбораСчетаКассы", ,ЭтаФорма,,,,Новый ОписаниеОповещения("ИзменитьСчетКассуЗавершение", ЭтотОбъект, ДанныеЯчейки), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСчетКассуЗавершение(ВыбранныеПараметры, ДанныеЯчейки) Экспорт
	
	Если ВыбранныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСчетКасса = ВыбранныеПараметры.БанковскийСчетКасса;
	
	ИдентификаторСтроки = Неопределено;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Аналитика",
																				ИдентификаторСтроки, 
																				ДеревоПлатежей.ПолучитьЭлементы(), 
																				НовыйСчетКасса, 
																				Ложь);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтрокаДереваКуда = Неопределено;
	Иначе
		СтрокаДереваКуда = ДеревоПлатежей.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	ИзменитьАналитикуЗавершение(СтрокаДереваКуда, ДанныеЯчейки, ВыбранныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Аналитика) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Аналитика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)
	
	СсылкаНаОбъект = Неопределено;
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ДанныеЯчейки.Свойство(ТекущиеДанные.ТипАналитики, СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
			
			Если ИзменитьСтатусУтвержденияДокумента(СсылкаНаОбъект, ПредопределенноеЗначение("Перечисление.СтатусыУтвержденияПлатежей.Утвержден")) Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Документ утвержден'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.ПлатежныйКалендарьУтвердить);
				ТекущиеДанные.НомерКартинкиСтроки = ?(ТекущиеДанные.НомерКартинкиСтроки = 2, 1, 3);
				ТекущиеДанные.СтатусУтвержденияПлатежа = ПредопределенноеЗначение("Перечисление.СтатусыУтвержденияПлатежей.Утвержден");
				ДеревоПлатежейПриАктивизацииСтроки(Неопределено);
			Иначе
				ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось утвердить документ'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУтверждение(Команда)
	
	СсылкаНаОбъект = Неопределено;
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ДанныеЯчейки.Свойство(ТекущиеДанные.ТипАналитики, СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
			
			Если ИзменитьСтатусУтвержденияДокумента(СсылкаНаОбъект, ПредопределенноеЗначение("Перечисление.СтатусыУтвержденияПлатежей.НеУтвержден")) Тогда
				ПоказатьОповещениеПользователя(НСтр("ru = 'Документ отклонен'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.ПлатежныйКалендарьОтклонить);
				ТекущиеДанные.НомерКартинкиСтроки = ?(ТекущиеДанные.НомерКартинкиСтроки = 1, 2, 4);
				ТекущиеДанные.СтатусУтвержденияПлатежа = ПредопределенноеЗначение("Перечисление.СтатусыУтвержденияПлатежей.НеУтвержден");
				ДеревоПлатежейПриАктивизацииСтроки(Неопределено);
			Иначе
				ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось отменить утверждение'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Планирование денег в выбранном документе будет отменено. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаОтменитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	ДанныеЯчейки = ПолучитьДанныеЯчейки();
	
	Если ДанныеЯчейки.Свойство(ТекущиеДанные.ТипАналитики, СсылкаНаОбъект) Тогда
		Если ОтменитьПланирование(СсылкаНаОбъект) Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Планирование отменено'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.ПлатежныйКалендарьОтменить);
			ПередУдалениемСтрокиДерева(ТекущиеДанные);
			ПересчитатьИтогиПриИзмененииАналитики(ТекущиеДанные, Неопределено);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось отменить планирование'"), ПолучитьНавигационнуюСсылку(СсылкаНаОбъект), Строка(СсылкаНаОбъект), БиблиотекаКартинок.Ошибка32);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ") Тогда
		
		ИмяФормыДокумента = "";
		
		Если ТипЗнч(ТекущаяСтрока.Аналитика) = Тип("ДокументСсылка.РасходДСПлан") Тогда
			ИмяФормыДокумента = "Документ.РасходДСПлан.Форма.ФормаДокумента";
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Аналитика) = Тип("ДокументСсылка.ПоступлениеДСПлан") Тогда
			ИмяФормыДокумента = "Документ.ПоступлениеДСПлан.Форма.ФормаДокумента";
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Аналитика) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
			ИмяФормыДокумента = "Документ.ПеремещениеДСПлан.Форма.ФормаДокумента";
		Иначе
			ТекстСообщения = НСтр("ru = 'Копирование данного документа в платежном календаре недоступно.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущаяСтрока.Аналитика);
		
		ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеГруппы(Команда)
	
	Для каждого СтрокаДерева Из ДеревоПлатежей.ПолучитьЭлементы() Цикл 
		Элементы.ДеревоПлатежей.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеГруппы(Команда)
	
	Для каждого СтрокаДерева Из ДеревоПлатежей.ПолучитьЭлементы() Цикл 
		Элементы.ДеревоПлатежей.Свернуть(СтрокаДерева.ПолучитьИдентификатор()); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьНаВесьЭкран(Команда)
	
	ОткрытьФорму("Отчет.ПлатежныйКалендарь.Форма.Форма", ,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчета(Команда)
	
	СохранитьНастройкиОтборов();
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ПечатнаяФорма);
	ПечатнаяФорма.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	СохранитьНастройкиОтборов();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	ПоказатьДиалогОтправкиПоПочте(ТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНастройкиОтборов();
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СохранениеОтчетаЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура СвернутьПравуюПанельНажатие(Элемент)
	
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьПравуюПанель.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПравуюПанельНажатие(Элемент)
	
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьПравуюПанель.Видимость = Не Элементы.ДекорацияРазвернутьПравуюПанель.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Объект.ПериодПланирования;
	
	Диалог.Показать(Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйПериод.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(НовыйПериод.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно выбрать неограниченный период.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Элементы.ПредставлениеПериода, "ПредставлениеПериода");
	Иначе
		
		Объект.ПериодПланирования = НовыйПериод;
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Объект.ПериодПланирования);
		
		// Если выбранный период больше месяца, рекомендуем переключить группировку по неделям
		Если ДобавитьМесяц(Объект.ПериодПланирования.ДатаНачала, 1) < (Объект.ПериодПланирования.ДатаОкончания) И Объект.ПланироватьПоДням Тогда
			ТекстСообщения = НСтр("ru = 'Выбран период больше месяца. Рекомендуется переключить вариант отображения ""По неделям""'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(Истина,  НСтр("ru = 'Переключить'"));
			Кнопки.Добавить(Ложь,  НСтр("ru = 'Не переключать'"));
			ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросИзменениеПериода", ЭтаФорма), ТекстСообщения, Кнопки);
		Иначе
			ОбновитьПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросИзменениеПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора Тогда
		Объект.ПланироватьПоДням = Ложь;
	КонецЕсли;
	
	ОбновитьПлатежныйКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьПлатежныйКалендарьНаСервереМобильныйКлиент();
	Иначе
		ОбновитьПлатежныйКалендарьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД,,, Ложь);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьПлатежныйКалендарьНаСервереМобильныйКлиент();
	Иначе
		ОбновитьПлатежныйКалендарьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	
	ИмяРеквизитаСписка = "Список";
	УдалитьМеткуОтбора(МеткаИД);
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	Отчеты.ПлатежныйКалендарь.СохранитьНастройкиОтборов(Объект, ДанныеМеток);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	Отчеты.ПлатежныйКалендарь.ВосстановитьНастройкиОтборов(Объект, ДанныеМеток);
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтаФорма);
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Объект.ПериодПланирования);
	
	СтрокаСпискаВариантов = Элементы.ПредставлениеВариантаПересчета.СписокВыбора.НайтиПоЗначению(Объект.ВариантПересчетаСумм);
	Если СтрокаСпискаВариантов <> Неопределено Тогда
		ПредставлениеВариантаПересчета = СтрокаСпискаВариантов.Представление;
	КонецЕсли;
	
	ПараметрыГруппировок = ПолучитьПараметрыГруппировокДерева();
	Для каждого Аналитика Из ПараметрыГруппировок.Аналитика Цикл
		Элементы.РазвернутьДо.СписокВыбора.Добавить(Аналитика);
	КонецЦикла;
	
	Если НЕ Объект.ОтображатьСчетКассу Тогда
		Элементы.ДиаграммаПлатежногоКалендаря.Видимость = Ложь;
		Элементы.ВидДиаграммы.Доступность = Ложь;
		Объект.ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить");
	КонецЕсли;
	
	Элементы.ОтображатьОрганизацию.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	// Инициализация валют
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	ВалютаНациональная = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	ВалютныйУчетВключен = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	// Инициализация отбора, для того, чтобы не отображались все строки до первой активизации строки дерева
	ОтборПоТекущейСтроке = Новый Структура("Аналитика,ИдентификаторСтрокиДляОтбора", Неопределено, Строка(Новый УникальныйИдентификатор));
	Элементы.ПодробнаяИнформацияТекущейАналитики.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборПоТекущейСтроке);
	
	// Представление вариантов пересчета
	Элементы.ПредставлениеВариантаПересчета.СписокВыбора.Очистить();
	Элементы.ПредставлениеВариантаПересчета.СписокВыбора.Добавить(Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаУправленческогоУчета, НСтр("ru = 'В валюте учета - '") + Строка(ВалютаУчета));
	Элементы.ПредставлениеВариантаПересчета.СписокВыбора.Добавить(Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаНациональная, 		   НСтр("ru = 'В национальной валюте - '") + Строка(ВалютаНациональная));
	Элементы.ПредставлениеВариантаПересчета.СписокВыбора.Добавить(Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаПлатежа, 			   НСтр("ru = 'В валюте платежа'"));
	
	// Стили оформления колонок формы
	СтилиОформления = Новый Структура;
	
	СтильПрошедшийДень = Новый Структура("ЦветФонаЗаголовка, ЦветТекстаЗаголовка, ЦветФона");
	СтильПрошедшийДень.ЦветФонаЗаголовка   =  ЦветаСтиля.ЦветФонаФормы;
	СтильПрошедшийДень.ЦветТекстаЗаголовка = Новый Цвет(158,158,158);
	СтильПрошедшийДень.ЦветФона 		   = Новый Цвет;
	СтилиОформления.Вставить("СтильПрошедшийДень", СтильПрошедшийДень);
	
	СтильОперативныйДень = Новый Структура("ЦветФонаЗаголовка, ЦветТекстаЗаголовка, ЦветФона");
	СтильОперативныйДень.ЦветФонаЗаголовка 	 = Новый Цвет(245,245,245);
	СтильОперативныйДень.ЦветТекстаЗаголовка = Новый Цвет(106,133,244);
	СтильОперативныйДень.ЦветФона 			 = Новый Цвет(245,245,245);
	СтилиОформления.Вставить("СтильОперативныйДень", СтильОперативныйДень);
	
	СтильДень = Новый Структура("ЦветФонаЗаголовка, ЦветТекстаЗаголовка, ЦветФона");
	СтильДень.ЦветФонаЗаголовка 	 		= ЦветаСтиля.ЦветФонаФормы;
	СтильДень.ЦветТекстаЗаголовка 			= Новый Цвет();
	СтильДень.ЦветФона 			 			= Новый Цвет();
	СтилиОформления.Вставить("СтильДень", СтильДень);
	
	СтильВыходнойДень = Новый Структура("ЦветФонаЗаголовка, ЦветФона");
	СтильВыходнойДень.ЦветФонаЗаголовка 	= Новый Цвет(255,248,250);
	СтильВыходнойДень.ЦветФона 			 	= Новый Цвет(255,248,250);
	СтилиОформления.Вставить("СтильВыходнойДень", СтильВыходнойДень);
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.ДеревоПлатежейАналитика.ЦветФонаЗаголовка = Новый Цвет();
		СтилиОформления.СтильПрошедшийДень.ЦветФонаЗаголовка = Новый Цвет();
		СтилиОформления.СтильОперативныйДень.ЦветФонаЗаголовка = Новый Цвет();
		СтилиОформления.СтильДень.ЦветФонаЗаголовка = Новый Цвет();
		СтилиОформления.СтильВыходнойДень.ЦветФонаЗаголовка = Новый Цвет();
	КонецЕсли; 
	
	ДиаграммаПлатежногоКалендаря.ШрифтПодписей = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ДиаграммаПлатежногоКалендаря.ОбластьПостроения.Шрифт = Новый Шрифт(ШрифтыСтиля.МелкийШрифтТекста, , 7);
	ЛинияНулевогоОстатка = ДиаграммаПлатежногоКалендаря.ИнформационныеЛинииЗначений.Добавить();
	ЛинияНулевогоОстатка.Значение = 0;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтчетТабличныйДокумент", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоПлатежей", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПраваяПанель", "ОтображатьЗаголовок", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРазвернуть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвернутьОтбор", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДиаграммаПлатежногоКалендаря", "РастягиватьПоВертикали", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьНетДанных", "Шрифт", ШрифтыСтиля.КрупныйШрифтТекста);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаскрытьНаВесьЭкран", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекущаяАналитика", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСвернутьРазвернуть", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСвернутьРазвернутьМобильныйКлиент", "Видимость", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПредставлениеПустойПодробнойИнформации = НСтр("ru = '<Не выбран>'");
	
	УсловноеОформление.Элементы.Очистить();
	
	// Выделение групп
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.Документ, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ДеревоПлатежей.Шрифт,,,Истина));
	
	// Выделение незаполненных значений
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.Аналитика", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежейАналитика");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ПодробнаяИнформация",  , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Комментарий, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Приход, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Расход, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.НачальныйОстаток, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.КонечныйОстаток, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.ДенежныйПоток, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПодробнаяИнформацияТекущейАналитикиПодробнаяИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", ПредставлениеПустойПодробнойИнформации);
	
	// Отображение гиперссылок в подробной информации
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ПодробнаяИнформация", , ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.Документ, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Комментарий, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.ПлановаяДата, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Просрочено, ВидСравненияКомпоновкиДанных.НеРавно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПодробнаяИнформацияТекущейАналитикиПодробнаяИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ДеревоПлатежей.Шрифт,,,,,Истина));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	
	// Цвета суммовых показателей
	
	// Приход
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Приход, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПодробнаяИнформацияТекущейАналитикиПодробнаяИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ВыполненноеЗадание);
	
	// Расход
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПодробнаяИнформацияТекущейАналитики.ВидПодробнойИнформации", Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Расход, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПодробнаяИнформацияТекущейАналитикиПодробнаяИнформация");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	// Выделение сумм платежей
	ТекущаяДатаДляСравнения = ?(Объект.ПланироватьПоДням, НачалоДня(ТекущаяДатаСеанса()), НачалоНедели(ТекущаяДатаСеанса()));
	Для каждого Период Из ПериодыПланирования Цикл
		
		КолонкаПериода = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		
		Если Период.Значение >= ТекущаяДатаДляСравнения Тогда
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.Документ, ВидСравненияКомпоновкиДанных.Равно);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей" + "." + КолонкаПериода, 0, ВидСравненияКомпоновкиДанных.Меньше);
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей" + КолонкаПериода);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.Документ, ВидСравненияКомпоновкиДанных.Равно);
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей" + "." + КолонкаПериода, 0, ВидСравненияКомпоновкиДанных.Больше);
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей" + КолонкаПериода);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ВыполненноеЗадание);
		Иначе
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей" + КолонкаПериода);
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", СтилиОформления.СтильПрошедшийДень.ЦветТекстаЗаголовка);
		КонецЕсли;
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей" + "." + КолонкаПериода, 0, ВидСравненияКомпоновкиДанных.Меньше);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей" + КолонкаПериода);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", Новый Цвет(255,191,191));
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей.ТипАналитики", Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоПлатежей" + "." + КолонкаПериода, 0, ВидСравненияКомпоновкиДанных.Больше);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоПлатежей" + КолонкаПериода);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", Новый Цвет(225,255,225));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФорму()
	
	// Удалим колонки и реквизиты периодов
	МассивУдалить = Новый Массив;
	Для каждого Элемент Из Элементы.ДеревоПлатежей.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "ДеревоПлатежей" + "_") > 0 Тогда
			МассивУдалить.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Элемент Из МассивУдалить Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	
	МассивРеквизитов = ПолучитьРеквизиты("ДеревоПлатежей");
	МассивУдалить = Новый Массив;
	
	Для каждого Реквизит Из МассивРеквизитов Цикл
		Если Найти(Реквизит.Имя,"_") > 0 Тогда
			МассивУдалить.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивУдалить.Количество()>0 Тогда
		ИзменитьРеквизиты(,МассивУдалить);
	КонецЕсли; 
	
	ПериодыПланирования.Очистить();
	
	ВременноеДеревоПлатежей = РеквизитФормыВЗначение("ДеревоПлатежей", Тип("ДеревоЗначений"));
	ВременноеДеревоПлатежей.Строки.Очистить();
	ЗначениеВРеквизитФормы(ВременноеДеревоПлатежей, "ДеревоПлатежей");
	
	ДиаграммаПлатежногоКалендаря.Очистить();
	ПодробнаяИнформацияТекущейАналитики.Очистить();
	ОтчетТабличныйДокумент.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПлатежныйКалендарь()
	
#Если МобильныйКлиент Тогда
	ОбновитьПлатежныйКалендарьНаСервереМобильныйКлиент();
#Иначе
	ОбновитьПлатежныйКалендарьНаСервере();
#КонецЕсли
	
	РазвернутьДеревоДоВыбраннойАналитики();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлатежныйКалендарьНаСервере()
	
	ОчиститьФорму();
	
	Элементы.СтраницыПлатежныйКалендарь.ТекущаяСтраница = Элементы.СтраницаДерево;
	Элементы.ДиаграммаПлатежногоКалендаря.Доступность = Истина;
	ДиаграммаПлатежногоКалендаря.Обновление = Ложь;
	
	// Определяем периоды и добавляем реквизиты
	Если Объект.ПланироватьПоДням Тогда
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		ТекущаяДата = НачалоНедели(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Если Объект.ОтображатьБолееРанниеПлатежи Тогда
		Период = '00010101';
		ПериодыПланирования.Добавить(Период);
		ДобавляемыеРеквизиты.Добавить(СоздатьРеквизитПериода(Период));
	КонецЕсли;
	
	Если Объект.ПланироватьПоДням Тогда
		
		ШагДень = 86400;
		ПериодВСекундах = Объект.ПериодПланирования.ДатаОкончания - Объект.ПериодПланирования.ДатаНачала;
		
		КоличествоПериодов = Цел(ПериодВСекундах / ШагДень);
		
		Для Итератор = 0 По КоличествоПериодов Цикл
			Период = Объект.ПериодПланирования.ДатаНачала + ШагДень * Итератор;
			ПериодыПланирования.Добавить(Период);
			ДобавляемыеРеквизиты.Добавить(СоздатьРеквизитПериода(Период));
		КонецЦикла;
		
	Иначе
		
		Период = Объект.ПериодПланирования.ДатаНачала;
		
		Пока Период < Объект.ПериодПланирования.ДатаОкончания  Цикл
			ПериодыПланирования.Добавить(Период);
			ДобавляемыеРеквизиты.Добавить(СоздатьРеквизитПериода(Период));
			Период = КонецНедели(Период) + 1;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем отображение реквизитов
	Для каждого Период Из ПериодыПланирования Цикл
		
		ЭлементыПериода = СоздатьКолонкуПериода(Период.Значение);
		
		Если Период.Значение = ТекущаяДата Тогда
			ТекущийСтиль = СтилиОформления.СтильОперативныйДень;
		ИначеЕсли Период.Значение < ТекущаяДата Тогда
			ТекущийСтиль = СтилиОформления.СтильПрошедшийДень;
		Иначе
			ТекущийСтиль = СтилиОформления.СтильДень;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ЭлементыПериода.ГруппаПериода, ТекущийСтиль);
		ЗаполнитьЗначенияСвойств(ЭлементыПериода.ЭлементПериода, ТекущийСтиль);
		
		Если Объект.ПланироватьПоДням И Период.Значение <> ТекущаяДата И ДеньНедели(Период.Значение) > 5 Тогда
			ЗаполнитьЗначенияСвойств(ЭлементыПериода.ГруппаПериода, СтилиОформления.СтильВыходнойДень);
			ЗаполнитьЗначенияСвойств(ЭлементыПериода.ЭлементПериода, СтилиОформления.СтильВыходнойДень);
		КонецЕсли;
		
		ДобавитьТочкуДиаграммы(Период.Значение);
		
	КонецЦикла; 
	
	// Служебный реквизит для пустой колонки
	ДобавитьСлужебнуюКолонкуДерева();
	
	Запрос = Отчеты.ПлатежныйКалендарь.СформироватьЗапросПлатежныйКалендарь(Объект, ДанныеМеток);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Элементы.СтраницыПлатежныйКалендарь.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
		Элементы.НадписьНетДанных.Заголовок = НСтр("ru = 'Отсутствуют данные для отображения
													|Проверьте выбранный период и установленные фильтры'");
		ИнициализироватьПустуюДиаграмму();
		Возврат;
	КонецЕсли;
	
	Если ВалютныйУчетВключен Тогда
		ЗаполнитьТаблицуКурсовВалют();
	КонецЕсли;
	
	ВременноеДеревоПлатежей = РеквизитФормыВЗначение("ДеревоПлатежей", Тип("ДеревоЗначений"));
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьДеревоПлатежейРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ВременноеДеревоПлатежей, 0, ПолучитьПараметрыГруппировокДерева());
	КонецЦикла;
	ЗначениеВРеквизитФормы(ВременноеДеревоПлатежей, "ДеревоПлатежей");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеДенежныхСредств") И Объект.ВидДиаграммы <> Перечисления.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить Тогда
		ДобавитьИнформациюОРезервахДенежныхСредствВДиаграмму();
	КонецЕсли;
	
	ДиаграммаПлатежногоКалендаря.Обновление = Истина;
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлатежныйКалендарьНаСервереМобильныйКлиент()
	
	ОчиститьФорму();
	
	Элементы.СтраницыПлатежныйКалендарь.ТекущаяСтраница = Элементы.СтраницаДерево;
	Элементы.ДиаграммаПлатежногоКалендаря.Доступность = Истина;
	ДиаграммаПлатежногоКалендаря.Обновление = Ложь;
	
	// Определяем периоды и добавляем реквизиты
	Если Объект.ПланироватьПоДням Тогда
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		ТекущаяДата = НачалоНедели(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Объект.ОтображатьБолееРанниеПлатежи Тогда
		ПериодыПланирования.Добавить('00010101');
	КонецЕсли;
	
	Если Объект.ПланироватьПоДням Тогда
		
		ШагДень = 86400;
		ПериодВСекундах = Объект.ПериодПланирования.ДатаОкончания - Объект.ПериодПланирования.ДатаНачала;
		
		КоличествоПериодов = Цел(ПериодВСекундах / ШагДень);
		
		Для Итератор = 0 По КоличествоПериодов Цикл
			Период = Объект.ПериодПланирования.ДатаНачала + ШагДень * Итератор;
			ПериодыПланирования.Добавить(Период);
		КонецЦикла;
		
	Иначе
		
		Период = Объект.ПериодПланирования.ДатаНачала;
		
		Пока Период < Объект.ПериодПланирования.ДатаОкончания  Цикл
			ПериодыПланирования.Добавить(Период);
			Период = КонецНедели(Период) + 1;
		КонецЦикла; 
		
	КонецЕсли;
	
	Для каждого Период Из ПериодыПланирования Цикл
		ДобавитьТочкуДиаграммы(Период.Значение);
	КонецЦикла; 
	
	Запрос = Отчеты.ПлатежныйКалендарь.СформироватьЗапросПлатежныйКалендарь(Объект, ДанныеМеток);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Элементы.СтраницыПлатежныйКалендарь.ТекущаяСтраница = Элементы.СтраницаНадписьНетДанных;
		Элементы.НадписьНетДанных.Заголовок = НСтр("ru = 'Отсутствуют данные для отображения'") + Символы.ПС + НСтр("ru = 'Проверьте выбранный период и установленные фильтры'");
		ИнициализироватьПустуюДиаграмму();
		Возврат;
	КонецЕсли;
	
	//Инициализация
	ТаблицаОстатков = Новый ТаблицаЗначений();
	ТаблицаОстатков.Колонки.Добавить("Организация");
	ТаблицаОстатков.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаОстатков.Колонки.Добавить("Валюта");
	ТаблицаОстатков.Колонки.Добавить("Период");
	ТаблицаОстатков.Колонки.Добавить("Сумма");
	
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Организация");
	ТаблицаПлатежей.Колонки.Добавить("ТипДенежныхСредств");
	ТаблицаПлатежей.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаПлатежей.Колонки.Добавить("Статья");
	ТаблицаПлатежей.Колонки.Добавить("Документ");
	ТаблицаПлатежей.Колонки.Добавить("Валюта");
	ТаблицаПлатежей.Колонки.Добавить("СтатусУтвержденияПлатежа");
	ТаблицаПлатежей.Колонки.Добавить("Период");
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПлатежей,ТаблицаОстатков", ТаблицаПлатежей, ТаблицаОстатков);
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьВнешниеНаборыРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ВнешниеНаборыДанных, 0, ПолучитьПараметрыГруппировокДерева());
	КонецЦикла;
	
	Если ВалютныйУчетВключен Тогда
		ЗаполнитьТаблицуКурсовВалют();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеДенежныхСредств") И Объект.ВидДиаграммы <> Перечисления.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить Тогда
		ДобавитьИнформациюОРезервахДенежныхСредствВДиаграмму();
	КонецЕсли;
	
	ДиаграммаПлатежногоКалендаря.Обновление = Истина;
	
	// Формирование варианта отчета СКД
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	ОтчетОбъект.СкомпоноватьРезультат(ОтчетТабличныйДокумент, ДанныеРасшифровки);
	
	ОтчетТабличныйДокумент.ФиксацияСлева = 0;
	
	ДанныеРасшифровкиАдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяКолонкиПоПериоду(Знач Период, ПланироватьПоДням = Истина)
	
	Период = ?(ПланироватьПоДням, Период, НачалоНедели(Период));
	Возврат Формат(Период,"ДФ=_ггггММдд; ДП=");
	
КонецФункции

&НаКлиенте
Функция СформироватьПериодПоИмениКолонки(Знач ИмяКолонки)
	
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "ДеревоПлатежей" + "_", "");
	Возврат Дата(ИмяКолонки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодробнуюИнформациюТекущейСтроки(НоваяСтрока, Выборка, ТипАналитики)
	
	Если Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаНациональная Тогда
		СуммаОстаток = Выборка.СуммаРегОстаток;
		СуммаОборот  = Выборка.СуммаРегОборот;
		Расход		 = Выборка.РасходРег;
		Приход		 = Выборка.ПриходРег;
	ИначеЕсли Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаУправленческогоУчета Тогда
		СуммаОстаток = Выборка.СуммаОстаток;
		СуммаОборот  = Выборка.СуммаОборот;
		Расход		 = Выборка.Расход;
		Приход		 = Выборка.Приход;
	Иначе // В валюте платежа
		СуммаОстаток = Выборка.СуммаВалОстаток;
		СуммаОборот  = Выборка.СуммаВалОборот;
		Расход		 = Выборка.РасходВал;
		Приход		 = Выборка.ПриходВал;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ Тогда
		
		СтрокиПоДокументу = ПодробнаяИнформацияТекущейАналитики.НайтиСтроки(Новый Структура("Аналитика", НоваяСтрока.Аналитика));
	
		Если СтрокиПоДокументу.Количество() > 0 Тогда
			НоваяСтрока.ИдентификаторСтрокиДляОтбора = СтрокиПоДокументу[0].ИдентификаторСтрокиДляОтбора;
		Иначе
			
			Если Объект.ОтображатьБолееРанниеПлатежи И Выборка.Период = '00010101' Тогда
				
				НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
				НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
				НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
				НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.ПлановаяДата;
				НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.ПлановаяДата;
				НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
				
				НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
				НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
				НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
				НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Просрочено;
				НоваяСтрокаАналитики.ПодробнаяИнформация = ОбщегоНазначения.ИнтервалВремениСтрокой(Выборка.ПлановаяДата);
				НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
				
			КонецЕсли;
			
			НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
			НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
			НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
			НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Контрагент;
			НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.Контрагент;
			НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
			
			НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
			НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
			НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
			НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Договор;
			НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.Договор;
			НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
			
			НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
			НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
			НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
			НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Основание;
			НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.Основание;
			НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
			
			НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
			НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
			НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
			НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Автор;
			НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.Автор;
			НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
			
			НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
			НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
			НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
			НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Комментарий;
			НоваяСтрокаАналитики.ПодробнаяИнформация = Выборка.Комментарий;
			НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока.Аналитика, "ДополнительныеРеквизиты") Тогда
				
				Для каждого СтрокаДопРеквизита Из НоваяСтрока.Аналитика.ДополнительныеРеквизиты Цикл
					
					НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
					НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
					НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
					НоваяСтрокаАналитики.ВидПодробнойИнформации = СтрокаДопРеквизита.Свойство;
					НоваяСтрокаАналитики.ПодробнаяИнформация = СтрокаДопРеквизита.Значение;
					НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.НачальныйОстаток;
		НоваяСтрокаАналитики.ПодробнаяИнформация = СуммаОстаток;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Приход;
		НоваяСтрокаАналитики.ПодробнаяИнформация = Приход;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Расход;
		НоваяСтрокаАналитики.ПодробнаяИнформация = Расход;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.КонечныйОстаток;
		НоваяСтрокаАналитики.ПодробнаяИнформация = СуммаОстаток + СуммаОборот;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
	Иначе
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Приход;
		НоваяСтрокаАналитики.ПодробнаяИнформация = Приход;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.Расход;
		НоваяСтрокаАналитики.ПодробнаяИнформация = Расход;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
		НоваяСтрокаАналитики = ПодробнаяИнформацияТекущейАналитики.Добавить();
		НоваяСтрокаАналитики.Аналитика = НоваяСтрока.Аналитика;
		НоваяСтрокаАналитики.ТипАналитики = НоваяСтрока.ТипАналитики;
		НоваяСтрокаАналитики.ВидПодробнойИнформации = Перечисления.ПлатежныйКалендарьВидыПодробнойИнформации.ДенежныйПоток;
		НоваяСтрокаАналитики.ПодробнаяИнформация = СуммаОборот;
		НоваяСтрокаАналитики.ИдентификаторСтрокиДляОтбора = НоваяСтрока.ИдентификаторСтрокиДляОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьСуммуИзВалютыВВалюту(Сумма, ВалютаДоПересчета, ВалютаПослеПересчета)
	
	Если ВалютаДоПересчета = ВалютаПослеПересчета Тогда
		СуммаПослеПересчета = Сумма;
	Иначе
		
		КурсДо 		   = 1;
		КратностьДо    = 1;
		КурсПосле 	   = 1;
		КратностьПосле = 1;
		
		Если ВалютаДоПересчета <> ВалютаНациональная Тогда
			МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаДоПересчета));
			Если МассивКурсКратность.Количество() > 0 Тогда
				КурсДо = МассивКурсКратность[0].Курс;
				КратностьДо = МассивКурсКратность[0].Кратность;
			КонецЕсли;
		КонецЕсли;
		
		Если ВалютаПослеПересчета <> ВалютаНациональная Тогда
			МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаПослеПересчета));
			Если МассивКурсКратность.Количество() > 0 Тогда
				КурсПосле = МассивКурсКратность[0].Курс;
				КратностьПосле = МассивКурсКратность[0].Кратность;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТекущегоКурса  = Новый Структура("Валюта, Курс, Кратность", ВалютаДоПересчета, КурсДо, КратностьДо);
		ПараметрыНовогоКурса    = Новый Структура("Валюта, Курс, Кратность", ВалютаПослеПересчета, КурсПосле, КратностьПосле);
		СуммаПослеПересчета = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		
	КонецЕсли;
	
	Возврат СуммаПослеПересчета;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыСтрокиИзВалютыВВалюту(СуммыСтроки, ВалютаДоПересчета, ВалютаПослеПересчета)
	
	Если ВалютаДоПересчета = ВалютаПослеПересчета Тогда
		Возврат;
	КонецЕсли;
		
	КурсДо 		   = 1;
	КратностьДо    = 1;
	КурсПосле 	   = 1;
	КратностьПосле = 1;
	
	Если ВалютаДоПересчета <> ВалютаНациональная Тогда
		МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаДоПересчета));
		Если МассивКурсКратность.Количество() > 0 Тогда
			КурсДо = МассивКурсКратность[0].Курс;
			КратностьДо = МассивКурсКратность[0].Кратность;
		КонецЕсли;
	КонецЕсли;
	
	Если ВалютаПослеПересчета <> ВалютаНациональная Тогда
		МассивКурсКратность = КурсыВалют.НайтиСтроки(Новый Структура("Валюта", ВалютаПослеПересчета));
		Если МассивКурсКратность.Количество() > 0 Тогда
			КурсПосле = МассивКурсКратность[0].Курс;
			КратностьПосле = МассивКурсКратность[0].Кратность;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекущегоКурса  = Новый Структура("Валюта, Курс, Кратность", ВалютаДоПересчета, КурсДо, КратностьДо);
	ПараметрыНовогоКурса    = Новый Структура("Валюта, Курс, Кратность", ВалютаПослеПересчета, КурсПосле, КратностьПосле);
		
	Для каждого СтруктураСуммы Из СуммыСтроки Цикл
		СтруктураСуммы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтруктураСуммы.Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УбратьКартинкиКомандРекурсивно(КоллекцияЭлементов)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент)=Тип("КнопкаФормы") Тогда
			Элемент.Отображение = ОтображениеКнопки.Текст;
			Элемент.Картинка = Новый Картинка;
			Команда = Команды.Найти(Элемент.ИмяКоманды);
			Если Команда<>Неопределено Тогда
				Команда.Отображение = ОтображениеКнопки.Текст;
				Команда.Картинка = Новый Картинка;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УбратьКартинкиКомандРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ДоступнаИнтерактивнаяРаботаСДиаграммой()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СтруктураВерсии = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ВерсияПриложения = ОписаниеЧисла.ПривестиЗначение(СтруктураВерсии[2]);
	
	Возврат (ВерсияПриложения > 13);
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте(ТабличныйДокумент)
	
	ШаблонПредставления = НСтр("ru = 'Платежный календарь %1'");
	ОтчетНаименованиеТекущегоВарианта = СтрШаблон(ШаблонПредставления, ПредставлениеПериода);
	
	Вложение = Новый Структура;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор);
	Вложение.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохранения(ВыбранныйФайл, ПараметрыДиалога) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПараметрыДиалога.ДиалогСохранения.ПолноеИмяФайла;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	ФорматСохранения = ПараметрыДиалога.ПараметрыСохранения.МассивФорматов[ПараметрыДиалога.ДиалогСохранения.ИндексФильтра];
	ТабличныйДокумент.Записать(ИмяФайла, ФорматСохранения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПараметрыСохраненияФайла()
	
	СтруктураФильтра = Новый Структура;
	МассивФорматов = Новый Массив;
	
	СтрокаФильтра = "";
	Шаблон = "%1|*.%2|";
	ТаблицаФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Для каждого СтрокаФормата Из ТаблицаФорматов Цикл
		СтрокаФильтра = СтрокаФильтра + СтрШаблон(Шаблон, СтрокаФормата.Представление, СтрокаФормата.Расширение);
		МассивФорматов.Добавить(СтрокаФормата.ТипФайлаТабличногоДокумента);
	КонецЦикла;
	
	СтруктураФильтра.Вставить("СтрокаФильтра", СтрокаФильтра);
	СтруктураФильтра.Вставить("МассивФорматов", МассивФорматов);
	
	Возврат СтруктураФильтра;
	
КонецФункции

#Область ПолучениеДанных

&НаСервере
Процедура ПрочитатьРасчетныеСчетаИКассы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кассы.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Кассы.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кассы.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчета.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчета.Владелец = Организации.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКасс = МассивРезультатов[0].Выбрать();
	ВыборкаСчетов = МассивРезультатов[1].Выбрать();
	
	Элементы.ОтборБанковскийСчетКасса.СписокВыбора.Очистить();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Элементы.ОтборБанковскийСчетКасса.СписокВыбора.Добавить(ВыборкаСчетов.Ссылка,,, БиблиотекаКартинок.Банк);
	КонецЦикла;
	Пока ВыборкаКасс.Следующий() Цикл
		Элементы.ОтборБанковскийСчетКасса.СписокВыбора.Добавить(ВыборкаКасс.Ссылка,,, БиблиотекаКартинок.Касса);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКурсовВалют()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	КурсыВалют.Загрузить(ТаблицаРезультатаЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнформациюОРезервахДенежныхСредствВДиаграмму()
	
	МассивАналитики = Новый Массив;
	ЦветаАналитики = Новый Соответствие;
	
	Для каждого СерияДиаграммы Из ДиаграммаПлатежногоКалендаря.Серии Цикл
		МассивАналитики.Добавить(СерияДиаграммы.Значение);
		ЦветаАналитики.Вставить(СерияДиаграммы.Значение, СерияДиаграммы.Цвет);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеснижаемыеОстаткиДенежныхСредств.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	НеснижаемыеОстаткиДенежныхСредств.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|	НеснижаемыеОстаткиДенежныхСредств.Валюта КАК Валюта,
		|	НеснижаемыеОстаткиДенежныхСредств.СуммаНеснижаемогоОстатка КАК СуммаНеснижаемогоОстатка
		|ИЗ
		|	РегистрСведений.НеснижаемыеОстаткиДенежныхСредств.СрезПоследних(, БанковскийСчетКасса В (&МассивАналитики)) КАК НеснижаемыеОстаткиДенежныхСредств";
	
	Запрос.УстановитьПараметр("МассивАналитики", МассивАналитики);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Объект.ВидДиаграммы = Перечисления.ВариантыДиаграммыПлатежныйКалендарь.Сводная Тогда
			АналитикаСерии = НСтр("ru = 'Неснижаемый остаток - сводно (по всем счетам / кассам)'");
		Иначе
			АналитикаСерии = Строка(ВыборкаДетальныеЗаписи.БанковскийСчетКасса)+ НСтр("ru = 'Неснижаемый остаток: '");
		КонецЕсли;
		
		Подсказка = СформироватьПодсказкуЗначенияДиаграммы(Объект.ВидДиаграммы, ВыборкаДетальныеЗаписи.БанковскийСчетКасса, ВыборкаДетальныеЗаписи.СуммаНеснижаемогоОстатка, Истина);
		ТекущаяСерия = ДиаграммаПлатежногоКалендаря.УстановитьСерию(АналитикаСерии);
		ЦветСерии = ЦветаАналитики.Получить(ВыборкаДетальныеЗаписи.БанковскийСчетКасса);
		Если ЦветСерии <> Неопределено Тогда
			ТекущаяСерия.Цвет = ЦветСерии;
		КонецЕсли;
		
		ТекущаяСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 2);
		ТекущаяСерия.Маркер = ТипМаркераДиаграммы.Нет;
		
		Для каждого Период Из ПериодыПланирования Цикл
			ТекущаяТочка = ДиаграммаПлатежногоКалендаря.УстановитьТочку(Период.Значение);
			ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, ВыборкаДетальныеЗаписи.СуммаНеснижаемогоОстатка, ,Подсказка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомПлатежей

&НаСервере
Функция ПолучитьПараметрыГруппировокДерева()
	
	Возврат Отчеты.ПлатежныйКалендарь.ПолучитьПараметрыГруппировокДерева(Объект);
	
КонецФункции

&НаСервере
Функция СоздатьРеквизитПериода(Период)
	
	ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
	Возврат Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)), "ДеревоПлатежей");
	
КонецФункции

&НаСервере
Функция СоздатьКолонкуПериода(Период)

	ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
	КонецНеделиПериода = Мин(КонецНедели(Период), Объект.ПериодПланирования.ДатаОкончания);
	
	НоваяГруппа = Элементы.Добавить("ДеревоПлатежей" + ИмяКолонки + "Группа", Тип("ГруппаФормы"), Элементы.ДеревоПлатежей);
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.ОтображатьВШапке = Истина;
	
	Если Объект.ПланироватьПоДням Тогда
		Если Объект.ОтображатьБолееРанниеПлатежи И Период =  '00010101' Тогда
			НоваяГруппа.Заголовок = "";
		Иначе
			НоваяГруппа.Заголовок = Формат(Период, "ДФ=ddd");
		КонецЕсли;
	Иначе
		Если Объект.ОтображатьБолееРанниеПлатежи И Период =  '00010101' Тогда
			НоваяГруппа.Заголовок = "";
		Иначе
			Если Месяц(Период) = Месяц(КонецНеделиПериода) Тогда
				НоваяГруппа.Заголовок = Формат(Период, "ДФ=MMMM");
			Иначе
				НоваяГруппа.Заголовок = Формат(Период, "ДФ=MMMM") + " / " + Формат(КонецНеделиПериода, "ДФ=MMMM");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	НовыйЭлемент = Элементы.Добавить("ДеревоПлатежей" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ДеревоПлатежей" + "." + ИмяКолонки;
	НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.КрупныйШрифтТекста,,,Истина);
	
	Если Объект.ОтображатьБолееРанниеПлатежи И Период =  '00010101' Тогда
		НовыйЭлемент.Заголовок = НСтр("ru = 'Ранее'");
	Иначе
		Если Объект.ПланироватьПоДням Тогда
			НовыйЭлемент.Заголовок = Формат(Период, "ДФ=dd");
		Иначе
			НовыйЭлемент.Заголовок = Формат(Период, "ДФ=dd") + " - " + Формат(КонецНеделиПериода, "ДФ=dd");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПланироватьПоДням Тогда
		НовыйЭлемент.Ширина = 8;
	Иначе
		НовыйЭлемент.Ширина = 10;
	КонецЕсли;
	
	Возврат Новый Структура("ГруппаПериода, ЭлементПериода", НоваяГруппа, НовыйЭлемент);
	
КонецФункции

&НаСервере
Процедура ДобавитьСлужебнуюКолонкуДерева()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("_ПустаяКолонка", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)), "ДеревоПлатежей"));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НовыйЭлемент = Элементы.Добавить("ДеревоПлатежей" + "_ПустаяКолонка", Тип("ПолеФормы"), Элементы.ДеревоПлатежей);
	НовыйЭлемент.ПутьКДанным = "ДеревоПлатежей._ПустаяКолонка";
	НовыйЭлемент.Заголовок = " ";
	
	#Если НЕ ВебКлиент Тогда
	НовыйЭлемент.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПлатежейРекурсивно(Выборка, Родитель, ТекущийУровень, ПараметрыГруппировок)
	
	Пока Выборка.Следующий() Цикл
		ТекущаяГруппировка = ДобавитьЭлементДерева(Выборка, ПараметрыГруппировок.Аналитика[ТекущийУровень], Родитель, ПараметрыГруппировок);
		Если ПараметрыГруппировок.КоличествоУровней > ТекущийУровень + 1 Тогда
			ЗаполнитьДеревоПлатежейРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ТекущаяГруппировка, ТекущийУровень + 1, ПараметрыГруппировок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементДерева(Выборка, ТипАналитики, Родитель, ПараметрыГруппировок)
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Организация Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана организация>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.ТипДенежныхСредств Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран тип ДС>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран счет / касса>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана статья>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Контрагент Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран контрагент>'");
	Иначе
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрано>'");
	КонецЕсли;
	
	Если Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаНациональная Тогда
		СуммаОстаток = Выборка.СуммаРегОстаток;
		СуммаОборот  = Выборка.СуммаРегОборот;
	ИначеЕсли Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаУправленческогоУчета Тогда
		СуммаОстаток = Выборка.СуммаОстаток;
		СуммаОборот  = Выборка.СуммаОборот;
	Иначе // В валюте платежа
		СуммаОстаток = Выборка.СуммаВалОстаток;
		СуммаОборот  = Выборка.СуммаВалОборот;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса И Выборка.СуммаОборот = 0 И Выборка.СуммаОстаток = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья И Выборка.СуммаОборот = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Контрагент И Выборка.СуммаОборот = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ И НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипАналитикиСтрокой = XMLСтрока(ТипАналитики);
	Аналитика = Выборка[ТипАналитикиСтрокой];
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ И ТипЗнч(Аналитика) <> Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		
		МассивАналитики = Родитель.Строки.НайтиСтроки(Новый Структура("Аналитика", Аналитика), Истина);
		
		Если МассивАналитики.Количество() > 0 Тогда
			НоваяСтрока = МассивАналитики[0];
		Иначе
			НоваяСтрока = Родитель.Строки.Добавить();
		КонецЕсли;
		
	Иначе
		 НоваяСтрока = Родитель.Строки.Добавить();
	КонецЕсли;
	
	НоваяСтрока.НомерКартинкиСтроки = 0;
	НоваяСтрока.Аналитика = Аналитика;
	НоваяСтрока.ТипАналитики = ТипАналитики;
	НоваяСтрока.СтатусУтвержденияПлатежа = Выборка.СтатусУтвержденияПлатежа;
	НоваяСтрока.ИдентификаторСтрокиДляОтбора = Строка(Новый УникальныйИдентификатор);
	Если ЗначениеЗаполнено(НоваяСтрока.Аналитика) И ТипЗнч(НоваяСтрока.Аналитика) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		НоваяСтрока.Валюта = НоваяСтрока.Аналитика.ВалютаДенежныхСредств;
	Иначе
		НоваяСтрока.Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Если Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаПлатежа И НоваяСтрока.ТипАналитики = ПараметрыГруппировок.Аналитика[0] Тогда
		НоваяСтрока.ПредставлениеАналитики = СтрШаблон("%1 - %2", Выборка.Валюта, ?(ЗначениеЗаполнено(НоваяСтрока.Аналитика), НоваяСтрока.Аналитика, ПредставлениеПустойАналитики));
	Иначе
		НоваяСтрока.ПредставлениеАналитики = ?(ЗначениеЗаполнено(НоваяСтрока.Аналитика), НоваяСтрока.Аналитика, ПредставлениеПустойАналитики);
	КонецЕсли;
	
	ЗаполнитьПодробнуюИнформациюТекущейСтроки(НоваяСтрока, Выборка, ТипАналитики);
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		
		Для каждого Период Из ПериодыПланирования Цикл
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(НачалоДня(Период.Значение));
			НоваяСтрока[ИмяКолонки] = СуммаОстаток;
		КонецЦикла;
		
		СерияОстатокПоТекущемуСчету = ДобавитьСериюДиаграммы(НоваяСтрока.Аналитика);
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			ОстатокПоПериоду = СуммаОстаток;
			ТекущаяТочка = ДиаграммаПлатежногоКалендаря.УстановитьТочку(Период.Значение);
			
			Если Объект.ВидДиаграммы = Перечисления.ВариантыДиаграммыПлатежныйКалендарь.Сводная Тогда
				ЗначениеТочки = ДиаграммаПлатежногоКалендаря.ПолучитьЗначение(ТекущаяТочка, СерияОстатокПоТекущемуСчету);
				ОстатокПоПериоду = ОстатокПоПериоду + ?(ЗначениеТочки.Значение <> Неопределено, ЗначениеТочки.Значение, 0);
			КонецЕсли;
			
			Подсказка = СформироватьПодсказкуЗначенияДиаграммы(Объект.ВидДиаграммы, НоваяСтрока.Аналитика, ОстатокПоПериоду);
			ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ТекущаяТочка, СерияОстатокПоТекущемуСчету, ОстатокПоПериоду, ,Подсказка);
			
		КонецЦикла;
		
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ Тогда
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(НачалоДня(Выборка.Период));
		НоваяСтрока[ИмяКолонки] = СуммаОборот;
		
		Если Объект.ОтображатьБолееРанниеПлатежи И Выборка.Период = '00010101' Тогда
			НоваяСтрока.ПлановаяДата = Выборка.ПлановаяДата;
		КонецЕсли;
		
		СтрокаРодитель = НоваяСтрока.Родитель;
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			Если СтрокаРодитель.ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
				
				ИндексНачалаПересчета = ПериодыПланирования.Индекс(ПериодыПланирования.НайтиПоЗначению(НачалоДня(Выборка.Период)));
				
				Если ИндексНачалаПересчета <> -1 Тогда
					
					Для Итератор = ИндексНачалаПересчета По ПериодыПланирования.Количество() - 1 Цикл
						
						ТекущийПериод = ПериодыПланирования.Получить(Итератор).Значение;
						ИмяТекущейКолонки = СформироватьИмяКолонкиПоПериоду(ТекущийПериод);
						
						СтрокаРодитель[ИмяТекущейКолонки] = СтрокаРодитель[ИмяТекущейКолонки] + СуммаОборот;
						
						ОбновитьДиаграммуПриИзмененииДерева(ДиаграммаПлатежногоКалендаря, Объект.ВидДиаграммы, ТекущийПериод, СтрокаРодитель.Аналитика, СтрокаРодитель[ИмяТекущейКолонки]);
						
					КонецЦикла; 
					
				КонецЕсли;
				
			Иначе
				СтрокаРодитель[ИмяКолонки] = СтрокаРодитель[ИмяКолонки] + СуммаОборот;
			КонецЕсли;
			
			СтрокаРодитель = СтрокаРодитель.Родитель;
			
		КонецЦикла;
		
		Если Выборка.СуммаОборот < 0 Тогда
			НоваяСтрока.НомерКартинкиСтроки = ?(Выборка.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден, 3, 4);
		Иначе
			НоваяСтрока.НомерКартинкиСтроки = ?(Выборка.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден, 1, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеЯчейки(ИдентификаторСтроки = Неопределено)
	
	РеквизитыАналитики = Новый Соответствие;
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.БанковскийСчетКасса"), "БанковскийСчетКасса");
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ"), 		   "Документ");
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Организация"), 		   "Организация");
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Статья"), 			   "Статья");
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Контрагент"), 		   "Контрагент");
	РеквизитыАналитики.Вставить(ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.ТипДенежныхСредств"),  "ТипДенежныхСредств");
	
	ДанныеЯчейки = Новый Структура("Организация,ТипДенежныхСредств,БанковскийСчетКасса,Статья,Контрагент,Документ,Валюта,СуммыВСтроке,ИдентификаторСтроки");
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
		ДанныеЯчейки.ИдентификаторСтроки = Элементы.ДеревоПлатежей.ТекущаяСтрока;
	Иначе
		ТекущиеДанные = ДеревоПлатежей.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеЯчейки.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат ДанныеЯчейки;
	КонецЕсли;
	
	// Необходимо подняться вверх по узлам дерева и получить всю аналитику
	СтрокаДерева = ТекущиеДанные;
	Пока СтрокаДерева <> Неопределено Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Аналитика) Тогда
			
			АналитикаСтрокой = РеквизитыАналитики.Получить(СтрокаДерева.ТипАналитики);
			
			Если АналитикаСтрокой <> Неопределено Тогда
				ДанныеЯчейки[АналитикаСтрокой] = СтрокаДерева.Аналитика;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЯчейки.ТипДенежныхСредств) И ЗначениеЗаполнено(ДанныеЯчейки.БанковскийСчетКасса) Тогда
		ДанныеЯчейки.ТипДенежныхСредств = ?(ТипЗнч(ДанныеЯчейки.БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы"), 
											ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"), 
											ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
	КонецЕсли;
	
	СуммыВСтроке = Новый Массив;
	
	Для каждого Период Из ПериодыПланирования Цикл
		
		ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период.Значение);
		
		Если ЗначениеЗаполнено(ТекущиеДанные[ИмяКолонки]) Тогда
			СуммыВСтроке.Добавить(Новый Структура("Период, Сумма", Период.Значение, ТекущиеДанные[ИмяКолонки]));
		КонецЕсли;
		
		ДанныеЯчейки.Вставить("СуммыВСтроке", СуммыВСтроке);
		
	КонецЦикла;
	
	Если Элементы.ДеревоПлатежей.ТекущийЭлемент <> Неопределено И ИдентификаторСтроки = Неопределено Тогда
		ИмяКолонки = Элементы.ДеревоПлатежей.ТекущийЭлемент.Имя;
		Если ИмяКолонки = "ДеревоПлатежейАналитика" ИЛИ ИмяКолонки = "ДеревоПлатежей_ПустаяКолонка" Тогда
			ДанныеЯчейки.Вставить("Период", ОбщегоНазначенияКлиент.ДатаСеанса());
			ДанныеЯчейки.Вставить("Сумма",  0);
		Иначе
			ДанныеЯчейки.Вставить("Период", СформироватьПериодПоИмениКолонки(ИмяКолонки));
			ДанныеЯчейки.Вставить("Сумма",  ТекущиеДанные[СформироватьИмяКолонкиПоПериоду(ДанныеЯчейки.Период)]);
		КонецЕсли;
	КонецЕсли;
	ДанныеЯчейки.Вставить("ПлановаяДата", ТекущиеДанные.ПлановаяДата);
	ДанныеЯчейки.Вставить("Валюта", ТекущиеДанные.Валюта);
	
	Возврат ДанныеЯчейки;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииДаты(СтрокаДерева, СтараяДата, Знач НоваяДата, СуммаЯчейки)
	
	Если НЕ Объект.ПланироватьПоДням Тогда
		НоваяДата = ?(НоваяДата = Объект.ПериодПланирования.ДатаНачала, Объект.ПериодПланирования.ДатаНачала, НачалоНедели(НоваяДата));
	КонецЕсли;
	
	РазницаСумм = ?(СтараяДата < НоваяДата, СуммаЯчейки * -1, СуммаЯчейки);
	
	ЭлементРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока ЭлементРодитель <> Неопределено Цикл
		
		Если ЭлементРодитель.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.БанковскийСчетКасса") Тогда //Считаем остатки
		
			МинимальныйПериод = ПериодыПланирования.НайтиПоЗначению(Мин(СтараяДата, НоваяДата));
			ИндексНачалаПересчета = ?(МинимальныйПериод = Неопределено, 0, ПериодыПланирования.Индекс(МинимальныйПериод));
			
			МаксимальныйПериод = ПериодыПланирования.НайтиПоЗначению(Макс(СтараяДата, НоваяДата));
			ИндексОкончанияПересчета = ?(МаксимальныйПериод = Неопределено, ПериодыПланирования.Количество() - 1, ПериодыПланирования.Индекс(МаксимальныйПериод) - 1);
			
			Для Итератор = ИндексНачалаПересчета По ИндексОкончанияПересчета Цикл
				
				ТекущийПериод = ПериодыПланирования.Получить(Итератор).Значение;
				ИмяТекущейКолонки = СформироватьИмяКолонкиПоПериоду(ТекущийПериод);
				
				ЭлементРодитель[ИмяТекущейКолонки]  = ЭлементРодитель[ИмяТекущейКолонки] + РазницаСумм;
				
				ОбновитьДиаграммуПриИзмененииДерева(ДиаграммаПлатежногоКалендаря, Объект.ВидДиаграммы, ТекущийПериод, ЭлементРодитель.Аналитика, ЭлементРодитель[ИмяТекущейКолонки]);
				
			КонецЦикла;
			
		Иначе // Считаем обороты
			
			ИмяКолонкиДо = СформироватьИмяКолонкиПоПериоду(СтараяДата);
			ЭлементРодитель[ИмяКолонкиДо]  = ЭлементРодитель[ИмяКолонкиДо] - СуммаЯчейки;
			
			Если ПериодыПланирования.НайтиПоЗначению(НоваяДата) <> Неопределено Тогда
				ИмяКолонкиПосле = СформироватьИмяКолонкиПоПериоду(НоваяДата);
				ЭлементРодитель[ИмяКолонкиПосле]  = ЭлементРодитель[ИмяКолонкиПосле] + СуммаЯчейки;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементРодитель = ЭлементРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Если ПериодыПланирования.НайтиПоЗначению(НоваяДата) = Неопределено Тогда
		ПередУдалениемСтрокиДерева(СтрокаДерева);
		СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииАналитики(СтрокаДереваОткуда, СтрокаДереваКуда)
	
	Если СтрокаДереваОткуда = Неопределено ИЛИ НЕ Объект.ОтображатьСчетКассу Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьДанныеЯчейки(СтрокаДереваОткуда.ПолучитьИдентификатор());
	АналитикаДокумент  = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.Документ");
	ПересчитыватьСуммы = ВалютныйУчетВключен И Объект.ВариантПересчетаСумм = ПредопределенноеЗначение("Перечисление.ПлатежныйКалендарьВариантыПересчета.ВалютаПлатежа");
	
	СтарыйСчетКасса   = Неопределено;
	СтараяСтатья      = Неопределено;
	СтарыйРодитель    = Неопределено;
	СтарыйКонтрагент  = Неопределено;
	НовыйСчетКасса    = Неопределено;
	НоваяСтатья       = Неопределено;
	НовыйРодитель     = Неопределено;
	НоваяСтрокаДерева = Неопределено;
	
	// Данные старой строки
	Если Объект.ОтображатьСтатью И Объект.ОтображатьКонтрагента Тогда
		СтарыйКонтрагент = СтрокаДереваОткуда.ПолучитьРодителя();
		СтараяСтатья     = СтарыйКонтрагент.ПолучитьРодителя();
		СтарыйСчетКасса  = СтараяСтатья.ПолучитьРодителя();
		СтарыйРодитель   = СтарыйКонтрагент
	ИначеЕсли Объект.ОтображатьСтатью Тогда
		СтараяСтатья    = СтрокаДереваОткуда.ПолучитьРодителя();
		СтарыйСчетКасса = СтараяСтатья.ПолучитьРодителя();
		СтарыйРодитель  = СтараяСтатья;
	ИначеЕсли Объект.ОтображатьКонтрагента Тогда
		СтарыйКонтрагент = СтрокаДереваОткуда.ПолучитьРодителя();
		СтарыйСчетКасса  = СтарыйКонтрагент.ПолучитьРодителя();
		СтарыйРодитель   = СтарыйКонтрагент;
	Иначе
		СтарыйСчетКасса  = СтрокаДереваОткуда.ПолучитьРодителя();
		СтарыйРодитель   = СтарыйСчетКасса;
	КонецЕсли;
	
	ПересчитатьИтогиПоСтрокеДерева(СтарыйРодитель, ДанныеСтроки.СуммыВСтроке, Истина);
	
	// Данные новой строки
	Если СтрокаДереваКуда <> Неопределено Тогда
		
		Если СтрокаДереваКуда.ТипАналитики = АналитикаДокумент Тогда // Перетащили на документ
			Если Объект.ОтображатьСтатью И Объект.ОтображатьКонтрагента Тогда
				НовыйСчетКасса = СтрокаДереваКуда.ПолучитьРодителя().ПолучитьРодителя().ПолучитьРодителя();
			ИначеЕсли Объект.ОтображатьСтатью ИЛИ Объект.ОтображатьКонтрагента Тогда
				НовыйСчетКасса = СтрокаДереваКуда.ПолучитьРодителя().ПолучитьРодителя();
			Иначе
				НовыйСчетКасса = СтрокаДереваКуда.ПолучитьРодителя();
			КонецЕсли;
		Иначе // Перетащили сразу на счет или кассу
			НовыйСчетКасса = СтрокаДереваКуда;
		КонецЕсли;
		
		НовыйРодитель = НовыйСчетКасса;
		
		Если Объект.ОтображатьСтатью Тогда
			Для каждого Статья Из НовыйСчетКасса.ПолучитьЭлементы() Цикл
				Если Статья.Аналитика = СтараяСтатья.Аналитика Тогда
					НоваяСтатья = Статья;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НоваяСтатья = Неопределено Тогда
				НоваяСтатья = НовыйСчетКасса.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтатья, СтараяСтатья,"Аналитика,НомерКартинкиСтроки,ПредставлениеАналитики,ТипАналитики");
				НоваяСтатья.Валюта = НовыйСчетКасса.Валюта;
			КонецЕсли;
			НовыйРодитель = НоваяСтатья;
		КонецЕсли;
		
		Если Объект.ОтображатьКонтрагента Тогда
			Для каждого Контрагент Из НовыйРодитель.ПолучитьЭлементы() Цикл
				Если Контрагент.Аналитика = СтарыйКонтрагент.Аналитика Тогда
					НовыйКонтрагент = Контрагент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НовыйКонтрагент = Неопределено Тогда
				НовыйКонтрагент = НовыйРодитель.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовыйКонтрагент, СтарыйКонтрагент,"Аналитика,НомерКартинкиСтроки,ПредставлениеАналитики,ТипАналитики");
				НовыйКонтрагент.Валюта = СтарыйКонтрагент.Валюта;
			КонецЕсли;
			НовыйРодитель = НовыйКонтрагент;
		КонецЕсли;
		
		Если НовыйРодитель <> Неопределено Тогда
			НоваяСтрокаДерева = НовыйРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДереваОткуда);
			Если ПересчитыватьСуммы Тогда
				ПересчитатьСуммыСтрокиИзВалютыВВалюту(ДанныеСтроки.СуммыВСтроке, СтрокаДереваОткуда.Валюта, НовыйСчетКасса.Валюта);
				НоваяСтрокаДерева.Валюта = НовыйСчетКасса.Валюта;
				Для каждого СтруктураСуммы Из ДанныеСтроки.СуммыВСтроке Цикл
					ИмяКолонки = СформироватьИмяКолонкиПоПериоду(СтруктураСуммы.Период);
					НоваяСтрокаДерева[ИмяКолонки] = СтруктураСуммы.Сумма;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьИтогиПоСтрокеДерева(НовыйРодитель, ДанныеСтроки.СуммыВСтроке, Ложь);
	
	СтарыйРодитель.ПолучитьЭлементы().Удалить(СтрокаДереваОткуда);
	
	Если Объект.ОтображатьКонтрагента И СтарыйКонтрагент.ПолучитьЭлементы().Количество() = 0 Тогда
		ПередУдалениемСтрокиДерева(СтарыйКонтрагент);
		СтарыйКонтрагент.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтарыйКонтрагент);
	КонецЕсли;
	
	Если Объект.ОтображатьСтатью И СтараяСтатья.ПолучитьЭлементы().Количество() = 0 Тогда
		ПередУдалениемСтрокиДерева(СтараяСтатья);
		СтараяСтатья.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтараяСтатья);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПоСтрокеДерева(Знач ЭлементРодитель, СуммыСтроки, ИсходнаяСтрока)
	
	Пока ЭлементРодитель <> Неопределено Цикл
		Для Каждого СуммаВСтроке Из СуммыСтроки Цикл
			Если ЭлементРодитель.ТипАналитики = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.БанковскийСчетКасса") Тогда
				
				ИндексНачалаПересчета = ПериодыПланирования.Индекс(ПериодыПланирования.НайтиПоЗначению(СуммаВСтроке.Период));
				ИндексОкончанияПересчета = ПериодыПланирования.Количество() - 1;
				
				Для Итератор = ИндексНачалаПересчета По ИндексОкончанияПересчета Цикл
					
					ТекущийПериод = ПериодыПланирования.Получить(Итератор).Значение;
					ИмяТекущейКолонки = СформироватьИмяКолонкиПоПериоду(ТекущийПериод);
					
					ЭлементРодитель[ИмяТекущейКолонки]  = ЭлементРодитель[ИмяТекущейКолонки] + ?(ИсходнаяСтрока, СуммаВСтроке.Сумма * -1,  СуммаВСтроке.Сумма);
					
					ОбновитьДиаграммуПриИзмененииДерева(ДиаграммаПлатежногоКалендаря, Объект.ВидДиаграммы, ТекущийПериод, ЭлементРодитель.Аналитика, ЭлементРодитель[ИмяТекущейКолонки]);
					
				КонецЦикла;
				
			Иначе
				ИмяКолонки = СформироватьИмяКолонкиПоПериоду(СуммаВСтроке.Период);
				ЭлементРодитель[ИмяКолонки] = ЭлементРодитель[ИмяКолонки] + ?(ИсходнаяСтрока, СуммаВСтроке.Сумма * -1,  СуммаВСтроке.Сумма);
			КонецЕсли;
		КонецЦикла;
		ЭлементРодитель = ЭлементРодитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДоВыбраннойАналитики()
	
	ТекущийУровень = ДеревоПлатежей.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ТекущийУровень Цикл
		РазвернутьЭлементыДереваРекурсивно(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭлементыДереваРекурсивно(СтрокаДереваРодитель)
	
	ТекущийУровень = СтрокаДереваРодитель.ПолучитьЭлементы();
	
	Если ТекущийУровень.Количество() > 0 И СтрокаДереваРодитель.ТипАналитики <> Объект.РазвернутьДо Тогда
		
		Для каждого СтрокаДерева Из ТекущийУровень Цикл 
			Элементы.ДеревоПлатежей.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
			РазвернутьЭлементыДереваРекурсивно(СтрокаДерева)
		КонецЦикла;
	
	ИначеЕсли СтрокаДереваРодитель.ТипАналитики = Объект.РазвернутьДо Тогда
		Элементы.ДеревоПлатежей.Свернуть(СтрокаДереваРодитель.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоляСИсключением(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск, ИдентификаторСтрокиИсключение)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = КлючСтроки И НЕ СтрокаДерева.ПолучитьИдентификатор() = ИдентификаторСтрокиИсключение Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоляСИсключением(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск, ИдентификаторСтрокиИсключение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСуммуПоСтроке(СтараяДата, НоваяДата, СтрокаДерева, Сумма)
	
	КолонкаСтарогоПериода = СформироватьИмяКолонкиПоПериоду(СтараяДата);
	СтрокаДерева[КолонкаСтарогоПериода] = 0;
	
	ДатаДляНовойКолонки = ?(Объект.ПланироватьПоДням, НоваяДата, ?(НоваяДата = Объект.ПериодПланирования.ДатаНачала, Объект.ПериодПланирования.ДатаНачала, НачалоНедели(НоваяДата)));
	
	Если ПериодыПланирования.НайтиПоЗначению(ДатаДляНовойКолонки) <> Неопределено Тогда
		КолонкаНовогоПериода = СформироватьИмяКолонкиПоПериоду(ДатаДляНовойКолонки);
		СтрокаДерева[КолонкаНовогоПериода] = Сумма;
		ЭтаФорма.Элементы.ДеревоПлатежей.ТекущийЭлемент = "ДеревоПлатежей" + КолонкаНовогоПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемСтрокиДерева(СтрокаДерева)
	
	СтрокиПодробнойИнформации = ПодробнаяИнформацияТекущейАналитики.НайтиСтроки(Новый Структура("Аналитика,ИдентификаторСтрокиДляОтбора", СтрокаДерева.Аналитика, СтрокаДерева.ИдентификаторСтрокиДляОтбора));
	
	Для Каждого СтрокаИнформации Из СтрокиПодробнойИнформации Цикл
		ПодробнаяИнформацияТекущейАналитики.Удалить(СтрокаИнформации);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСДокументами

&НаКлиенте
Функция ПодготовитьДанныеЗаполненияДокумента(ДанныеЯчейки, ТипСоздаваемогоДокумента)
	
	ТипОснования = ТипЗнч(ДанныеЯчейки.Документ);
	
	Если ТипСоздаваемогоДокумента = Тип("ДокументСсылка.РасходДСПлан") Тогда
		ИспользоватьОснование = ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика");
	ИначеЕсли ТипСоздаваемогоДокумента = Тип("ДокументСсылка.ПоступлениеДСПлан") Тогда
		ИспользоватьОснование = ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя");
	Иначе
		 ИспользоватьОснование = Ложь;
	КонецЕсли; 
	
	ПараметрыЗаполненияДокумента = Новый Структура;
	
	Если ИспользоватьОснование Тогда
		
		ПараметрыЗаполненияДокумента.Вставить("Основание", ДанныеЯчейки.Документ);
		
	Иначе
		
		СтруктураЗаполнения = Новый Структура;
		
		Если ЗначениеЗаполнено(ДанныеЯчейки.БанковскийСчетКасса) Тогда
			Если ТипЗнч(ДанныеЯчейки.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				СтруктураЗаполнения.Вставить("БанковскийСчет", ДанныеЯчейки.БанковскийСчетКасса);
			ИначеЕсли ТипЗнч(ДанныеЯчейки.БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
				СтруктураЗаполнения.Вставить("Касса", ДанныеЯчейки.БанковскийСчетКасса);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЯчейки.Организация) Тогда
			 СтруктураЗаполнения.Вставить("Организация", ДанныеЯчейки.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЯчейки.Статья) Тогда
			 СтруктураЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеЯчейки.Статья);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЯчейки.ТипДенежныхСредств) Тогда
			 СтруктураЗаполнения.Вставить("ТипДенежныхСредств", ДанныеЯчейки.ТипДенежныхСредств);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЯчейки.Период) Тогда
			 СтруктураЗаполнения.Вставить("Дата", ДанныеЯчейки.Период);
		КонецЕсли;
		
		ПараметрыЗаполненияДокумента.Вставить("Основание", СтруктураЗаполнения);
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполненияДокумента;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ИзменитьДанныеПланированияНаСервере(ДокументПланирования, ИзмененныеРеквизиты, ПланироватьПоДням)
	
	ДокументОбъект = ДокументПланирования.ПолучитьОбъект();
	
	Если 	 ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.РасходДСПлан")
		 ИЛИ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПоступлениеДСПлан")
		 ИЛИ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ИзмененныеРеквизиты);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ru='ПлатежныйКалендарь.ИзменитьДанныеПланирования'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ЗаказПокупателя")
		  ИЛИ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.СчетНаОплату")
		  ИЛИ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ЗаказПоставщику")
		  ИЛИ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "РезервироватьДенежныеСредства") И ДокументОбъект.РезервироватьДенежныеСредства Тогда
			ТекстСообщения = НСтр("ru = 'Счета и заказы, под которые зарезервированы денежные средства, необходимо изменять из формы самого документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			
			НаборЗаписей = РегистрыНакопления.ПлатежныйКалендарь.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументПланирования);
			НаборЗаписей.Прочитать();
			
			Если ИзмененныеРеквизиты.Свойство("Дата") Тогда
				
				Для каждого СтрокаПлатежныйКалендарь Из ДокументОбъект.ПлатежныйКалендарь Цикл
					Если ПланироватьПоДням Тогда
						ЭтоИзменяемыйПериод = СтрокаПлатежныйКалендарь.ДатаОплаты = ИзмененныеРеквизиты.СтараяДата;
					Иначе
						ЭтоИзменяемыйПериод = НачалоНедели(СтрокаПлатежныйКалендарь.ДатаОплаты) = ИзмененныеРеквизиты.СтараяДата ИЛИ КонецНедели(СтрокаПлатежныйКалендарь.ДатаОплаты) = КонецНедели(ИзмененныеРеквизиты.СтараяДата);
					КонецЕсли;
					Если ЭтоИзменяемыйПериод Тогда
						СтрокаПлатежныйКалендарь.ДатаОплаты = ИзмененныеРеквизиты.Дата;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Запись Из НаборЗаписей Цикл
					Если ПланироватьПоДням Тогда
						ЭтоИзменяемыйПериод = Запись.Период = ИзмененныеРеквизиты.СтараяДата;
					Иначе
						ЭтоИзменяемыйПериод = НачалоНедели(Запись.Период) = ИзмененныеРеквизиты.СтараяДата ИЛИ КонецНедели(Запись.Период) = КонецНедели(ИзмененныеРеквизиты.СтараяДата);
					КонецЕсли;
					Если ЭтоИзменяемыйПериод Тогда
						Запись.Период = ИзмененныеРеквизиты.Дата;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				ДокументОбъект.ТипДенежныхСредств = ИзмененныеРеквизиты.ТипДенежныхСредств;
				
				Если ДокументОбъект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
					ДокументОбъект.БанковскийСчет = ИзмененныеРеквизиты.БанковскийСчет;
					ДокументОбъект.Касса = Справочники.Кассы.ПустаяСсылка();
					БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
				ИначеЕсли ДокументОбъект.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
					ДокументОбъект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
					ДокументОбъект.Касса = ИзмененныеРеквизиты.Касса;
					БанковскийСчетКасса = ДокументОбъект.Касса;
				Иначе
					ДокументОбъект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
					ДокументОбъект.Касса = Справочники.Кассы.ПустаяСсылка();
					БанковскийСчетКасса = Неопределено;
				КонецЕсли;
				
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.БанковскийСчетКасса = БанковскийСчетКасса;
					Запись.ТипДенежныхСредств = ИзмененныеРеквизиты.ТипДенежныхСредств;
				КонецЦикла;
				
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				НаборЗаписей.Записать();
				ДокументОбъект.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("ru='ПлатежныйКалендарь.ИзменитьДанныеПланирования'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьСтатусУтвержденияДокумента(СсылкаНаДокумент, СтатусУтверждения)
	
	Если СтатусУтверждения <> СсылкаНаДокумент.СтатусУтвержденияПлатежа Тогда
		
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.СтатусУтвержденияПлатежа = СтатусУтверждения;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ru='ПлатежныйКалендарь.ИзменитьСтатусУтвержденияДокумента'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтменитьПланирование(СсылкаНаДокумент)
	
	ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеДСПлан") ИЛИ ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеДСПлан") Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	Иначе // По заказам и счетам необходимо удалить движения без перепроведения
			
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "РезервироватьДенежныеСредства") И ДокументОбъект.РезервироватьДенежныеСредства Тогда
			ТекстСообщения = НСтр("ru = 'Счета и заказы, под которые зарезервированы денежные средства, необходимо отменять из формы самого документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			
			НаборЗаписей = РегистрыНакопления.ПлатежныйКалендарь.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
			ДокументОбъект.ЗапланироватьОплату = Ложь;
			ДокументОбъект.ПлатежныйКалендарь.Очистить();
			
			НачатьТранзакцию();
			
			Попытка
				НаборЗаписей.Записать();
				ДокументОбъект.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("ru='ПлатежныйКалендарь.ОтменитьПланирование'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область Диаграмма

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПодсказкуЗначенияДиаграммы(ВидДиаграммы, Аналитика, Сумма, ЭтоНеснижаемыйОстаток = Ложь)
	
	Если ЭтоНеснижаемыйОстаток Тогда
		НадписьОстаток = НСтр("ru = 'Неснижаемый остаток: '");
	Иначе
		НадписьОстаток = НСтр("ru = 'Остаток: '");
	КонецЕсли;
	
	Если ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.Сводная") Тогда
		АналитикаСтрокой = НСтр("ru = 'Сводно (по всем счетам / кассам)'");
	Иначе
		АналитикаСтрокой = ?(ЗначениеЗаполнено(Аналитика), Символы.НПП + Строка(Аналитика), НСтр("ru = '<Не выбран счет / касса>'"));
	КонецЕсли;
	
	АналитикаСтрокой = СтрЗаменить(АналитикаСтрокой, " ", Символы.НПП);
	АналитикаСтрокой = АналитикаСтрокой + Символы.ПС;
	
	Если ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.Сводная") Тогда
		СтрокаИконка = "";
	ИначеЕсли ТипЗнч(Аналитика) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтрокаИконка = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Банк);
	ИначеЕсли ТипЗнч(Аналитика) = Тип("СправочникСсылка.Кассы") Тогда
		СтрокаИконка = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Касса);
	Иначе
		СтрокаИконка = "";
	КонецЕсли;
	
	СтрокаСумма = Формат(Сумма, "ЧДЦ=2; ЧН=");
	
	Если Сумма >= 0 Тогда
		СтрокаСумма = Новый ФорматированнаяСтрока(СтрокаСумма, Новый Шрифт(,,Истина));
	Иначе
		СтрокаСумма = Новый ФорматированнаяСтрока(СтрокаСумма, Новый Шрифт(,,Истина), WebЦвета.Красный);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрокаИконка, АналитикаСтрокой, НадписьОстаток, СтрокаСумма);
	
КонецФункции

&НаСервере
Процедура ДобавитьТочкуДиаграммы(Период)
	
	Если Объект.ПланироватьПоДням Тогда
		ФорматПодписи = "ДФ=dd.MM; ДП=Ранее";
	Иначе
		ФорматПодписи = "ДФ=dd.MM.yy; ДП=Ранее"
	КонецЕсли;
	
	ТочкаДиаграммы = ДиаграммаПлатежногоКалендаря.Точки.Добавить(Формат(Период, ФорматПодписи));
	ТочкаДиаграммы.Значение = Период;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСериюДиаграммы(Аналитика)
	
	МассивЦветов = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	
	Если Объект.ВидДиаграммы = Перечисления.ВариантыДиаграммыПлатежныйКалендарь.Сводная Тогда
		ЗначениеСводнойСерии = НСтр("ru = 'Сводно (по всем счетам / кассам)'");
		НоваяСерия = ДиаграммаПлатежногоКалендаря.УстановитьСерию(ЗначениеСводнойСерии);
		НоваяСерия.Расшифровка = ЗначениеСводнойСерии;
	Иначе
		НоваяСерия = ДиаграммаПлатежногоКалендаря.Серии.Добавить(Аналитика);
		НоваяСерия.Значение = Аналитика;
		НоваяСерия.Расшифровка = Аналитика;
	КонецЕсли;
	
	Если ДиаграммаПлатежногоКалендаря.КоличествоСерий <= МассивЦветов.Количество()-1 Тогда
		ИндексЦвета = ДиаграммаПлатежногоКалендаря.КоличествоСерий;
	Иначе
		ИндексЦвета = ДиаграммаПлатежногоКалендаря.КоличествоСерий % (МассивЦветов.Количество()-1);
	КонецЕсли; 
	
	НоваяСерия.Цвет = МассивЦветов.Получить(ИндексЦвета);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НоваяСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	Иначе
		НоваяСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	КонецЕсли;
	
	НоваяСерия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Возврат НоваяСерия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДиаграммуПриИзмененииДерева(ДиаграммаПлатежногоКалендаря, ВидДиаграммы, Период, Аналитика, Сумма)
	
	Если ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.НеВыводить") Тогда
		Возврат;
	ИначеЕсли ВидДиаграммы = ПредопределенноеЗначение("Перечисление.ВариантыДиаграммыПлатежныйКалендарь.Сводная") Тогда
		АналитикаСерии = НСтр("ru = 'Сводно (по всем счетам / кассам)'");
	Иначе
		АналитикаСерии = Аналитика;
	КонецЕсли;
	
	Подсказка = СформироватьПодсказкуЗначенияДиаграммы(ВидДиаграммы, АналитикаСерии, Сумма);
	ТекущаяСерия = ДиаграммаПлатежногоКалендаря.УстановитьСерию(АналитикаСерии);
	ТекущаяТочка = ДиаграммаПлатежногоКалендаря.УстановитьТочку(Период);
	
	ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, Сумма, ,Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСериюДиаграммыПриИзмененииСтрокиДерева(Знач ТекущиеДанные)
	
	ТипАналитикиСчетКасса = ПредопределенноеЗначение("Перечисление.АналитикаПлатежногоКалендаря.БанковскийСчетКасса");
	Пока ТекущиеДанные <> Неопределено Цикл
		Если ТекущиеДанные.ТипАналитики = ТипАналитикиСчетКасса Тогда
			Прервать;
		Иначе
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступнаИнтерактивнаяРаботаСДиаграммой() Тогда
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.ДиаграммаПлатежногоКалендаря.УстановитьВыделенныеЭлементы(Новый Массив);
		Иначе
			Если ТекущиеДанные.Аналитика <> ТекущийСчетКасса Тогда
				ТекущийСчетКасса = ТекущиеДанные.Аналитика;
				МассивСерий = Новый Массив;
				МассивСерий.Добавить(ДиаграммаПлатежногоКалендаря.УстановитьСерию(ТекущийСчетКасса));
				Элементы.ДиаграммаПлатежногоКалендаря.УстановитьВыделенныеЭлементы(МассивСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПустуюДиаграмму()
	
	Если НЕ Элементы.ДиаграммаПлатежногоКалендаря.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДиаграммаПлатежногоКалендаря.Доступность = Ложь;
	
	ДиаграммаПлатежногоКалендаря.Обновление = Ложь;
	ДиаграммаПлатежногоКалендаря.Очистить();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ТекДатаСеанса = ТекущаяДатаСеанса();
	КоличествоТочек = 5;
	
	Серия1 = ДиаграммаПлатежногоКалендаря.Серии.Добавить("ПерваяСерия");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	Серия1.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	Серия1.Маркер = ТипМаркераДиаграммы.Круг;

	Серия2 = ДиаграммаПлатежногоКалендаря.Серии.Добавить("ВтораяСерия");
	Серия2.Цвет = Новый Цвет(220, 220, 220);
	Серия2.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	Серия2.Маркер = ТипМаркераДиаграммы.Круг;
	
	Для Итератор = 0 По КоличествоТочек Цикл
		
		ТекущийПериод = ТекДатаСеанса - 86400 * Итератор;
		ДобавитьТочкуДиаграммы(ТекущийПериод);
		ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ДиаграммаПлатежногоКалендаря.УстановитьТочку(ТекущийПериод), Серия1, ГСЧ.СлучайноеЧисло(),, " ");
		ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ДиаграммаПлатежногоКалендаря.УстановитьТочку(ТекущийПериод), Серия2, ГСЧ.СлучайноеЧисло(),, " ");
		
	КонецЦикла;
	
	ДиаграммаПлатежногоКалендаря.Обновление = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ТаблицаПлатежейСКД

&НаСервере
Процедура ЗаполнитьВнешниеНаборыРекурсивно(Выборка, ВнешниеНаборыДанных, ТекущийУровень, ПараметрыГруппировок)
	
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуТаблицНаборов(Выборка, ПараметрыГруппировок.Аналитика[ТекущийУровень], ВнешниеНаборыДанных, ПараметрыГруппировок);
		Если ПараметрыГруппировок.КоличествоУровней > ТекущийУровень + 1 Тогда
			ЗаполнитьВнешниеНаборыРекурсивно(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ВнешниеНаборыДанных, ТекущийУровень + 1, ПараметрыГруппировок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицНаборов(Выборка, ТипАналитики, ВнешниеНаборы, ПараметрыГруппировок)
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Организация Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана организация>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.ТипДенежныхСредств Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран тип ДС>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбран счет / касса>'");
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья Тогда
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрана статья>'");
	Иначе
		ПредставлениеПустойАналитики = НСтр("ru = '<Не выбрано>'");
	КонецЕсли;
	
	Если Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаНациональная Тогда
		СуммаОстаток = Выборка.СуммаРегОстаток;
		СуммаОборот  = Выборка.СуммаРегОборот;
	ИначеЕсли Объект.ВариантПересчетаСумм = Перечисления.ПлатежныйКалендарьВариантыПересчета.ВалютаУправленческогоУчета Тогда
		СуммаОстаток = Выборка.СуммаОстаток;
		СуммаОборот  = Выборка.СуммаОборот;
	Иначе // В валюте платежа
		СуммаОстаток = Выборка.СуммаВалОстаток;
		СуммаОборот  = Выборка.СуммаВалОборот;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса И Выборка.СуммаОборот = 0 И Выборка.СуммаОстаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Статья И Выборка.СуммаОборот = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ И (НЕ ЗначениеЗаполнено(Выборка.Документ) ИЛИ НЕ ЗначениеЗаполнено(Выборка.Период)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипАналитикиСтрокой = XMLСтрока(ТипАналитики);
	Аналитика = Выборка[ТипАналитикиСтрокой];
	
	Если ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.БанковскийСчетКасса Тогда
		
		Если ВнешниеНаборы.ТаблицаОстатков.НайтиСтроки(Новый Структура("БанковскийСчетКасса,Валюта", Аналитика, Выборка.Валюта)).Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			НоваяСтрока = ВнешниеНаборы.ТаблицаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = НачалоДня(Период.Значение);
			НоваяСтрока.Сумма = СуммаОстаток;
			
			Если ЗначениеЗаполнено(Аналитика) И ТипЗнч(Аналитика) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				НоваяСтрока.Валюта = Аналитика.ВалютаДенежныхСредств;
			КонецЕсли;
			
		КонецЦикла;
		
		СерияОстатокПоТекущемуСчету = ДобавитьСериюДиаграммы(Аналитика);
		
		Для каждого Период Из ПериодыПланирования Цикл
			ТекущаяТочка = ДиаграммаПлатежногоКалендаря.УстановитьТочку(Период.Значение);
			Подсказка = СформироватьПодсказкуЗначенияДиаграммы(Объект.ВидДиаграммы, Аналитика, СуммаОстаток);
			ДиаграммаПлатежногоКалендаря.УстановитьЗначение(ТекущаяТочка, СерияОстатокПоТекущемуСчету, СуммаОстаток, ,Подсказка);
		КонецЦикла;
		
	ИначеЕсли ТипАналитики = Перечисления.АналитикаПлатежногоКалендаря.Документ Тогда
		
		Для каждого Период Из ПериодыПланирования Цикл
			
			НоваяСтрока = ВнешниеНаборы.ТаблицаПлатежей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = НачалоДня(Период.Значение);
			Если Выборка.Период = Период.Значение Тогда
				НоваяСтрока.Сумма = СуммаОборот;
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиПоСчетуКассе = ВнешниеНаборы.ТаблицаОстатков.НайтиСтроки(Новый Структура("БанковскийСчетКасса", Выборка.БанковскийСчетКасса));
		
		Для каждого СтрокаСчетКасса Из СтрокиПоСчетуКассе Цикл
			Если СтрокаСчетКасса.Период >= Выборка.Период Тогда
				СтрокаСчетКасса.Сумма = СтрокаСчетКасса.Сумма + СуммаОборот;
				ОбновитьДиаграммуПриИзмененииДерева(ДиаграммаПлатежногоКалендаря, Объект.ВидДиаграммы, СтрокаСчетКасса.Период, Выборка.БанковскийСчетКасса, СтрокаСчетКасса.Сумма);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтрокиМобильныйКлиент(Расшифровка, ДанныеРасшифровкиАдресВХранилище)
	
	ДанныеРасшифровкиИзХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиАдресВХранилище);
	
	ДанныеРасшифровки = ПолучитьДанныеСтрокиРекурсивно(ДанныеРасшифровкиИзХранилища, Расшифровка);
	ПоместитьВоВременноеХранилище(ДанныеРасшифровкиИзХранилища, ДанныеРасшифровкиАдресВХранилище);
	
	Возврат ДанныеРасшифровки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтрокиРекурсивно(Знач ДанныеРасшифровки, Расшифровка, СтруктураСтроки = Неопределено)
	
	ТекущееПоле = ДанныеРасшифровки.Элементы[Расшифровка];
	
	Если СтруктураСтроки = Неопределено Тогда 
		СтруктураСтроки = Новый Структура; 
	КонецЕсли; 
	
	ТекущееПоле = ДанныеРасшифровки.Элементы[Расшифровка];
	
	Если ТипЗнч(ТекущееПоле) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля")  Тогда 
		Для каждого ПолеРасшифровки Из ТекущееПоле.ПолучитьПоля() Цикл 
			Если НЕ Найти(ПолеРасшифровки.Поле,".") > 0 Тогда 
				СтруктураСтроки.Вставить(ПолеРасшифровки.Поле, ПолеРасшифровки.Значение); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Родитель Из ТекущееПоле.ПолучитьРодителей() Цикл 
		ПолучитьДанныеСтрокиРекурсивно(ДанныеРасшифровки, Родитель.Идентификатор, СтруктураСтроки);    
	КонецЦикла;
	
	Возврат СтруктураСтроки; 
	
КонецФункции

&НаСервере
Процедура СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	ОтчетОбъект.СкомпоноватьРезультат(ТабличныйДокумент, Новый ДанныеРасшифровкиКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеОтчетаЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено Тогда
		ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохранения.МножественныйВыбор = Ложь;
		
		ПараметрыСохранения = СформироватьПараметрыСохраненияФайла();
		
		ПараметрыДиалога = Новый Структура;
		ПараметрыДиалога.Вставить("ПараметрыСохранения", ПараметрыСохранения);
		ПараметрыДиалога.Вставить("ДиалогСохранения", ДиалогСохранения);
		
		ДиалогСохранения.Фильтр = ПараметрыСохранения.СтрокаФильтра;
		ДиалогСохранения.Показать(Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохранения", ЭтотОбъект, ПараметрыДиалога));
	Иначе
		АдресФайла = ПолучитьАдресСохраняемогоОтчета();
		ИмяФайла = СтрШаблон(НСтр("ru = 'Платежный календарь %1%2'"), СтрЗаменить(ПредставлениеПериода,".",""),".xlsx");
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресФайла, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСохраняемогоОтчета()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти
 
