#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	НастройкиОтчета = Форма.Отчет.КомпоновщикНастроек.Настройки;
	ОтчетыУНФ.ОбновитьВидимостьПараметраОрганизация(НастройкиОтчета);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	ОбработатьВыводЗаголовка();
	
	УстановитьПериодПоУмолчанию();
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
	УдалитьПустыеСтроки(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Главное,Компания,Баланс'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "", "Обработка.ЗакрытиеМесяца", , Истина);
	
КонецПроцедуры

Процедура ОбработатьВыводЗаголовка()
	
	ПараметрВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВыводитьЗаголовок");
	
	Если ПараметрВыводитьЗаголовок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура[0].Использование = ПараметрВыводитьЗаголовок.Значение;
	
КонецПроцедуры

Процедура УстановитьПериодПоУмолчанию()
	
	СтПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	УстановитьДатуНачала(СтПериод);
	УстановитьДатуОкончания(СтПериод);
	
КонецПроцедуры

Процедура УстановитьДатуНачала(СтПериод)
	
	Если ЗначениеЗаполнено(СтПериод.Значение.ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Управленческий.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Управленческий КАК Управленческий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	СтПериод.Значение.ДатаНачала = Выборка.Период;
	
КонецПроцедуры

Процедура УстановитьДатуОкончания(СтПериод);

	Если ЗначениеЗаполнено(СтПериод.Значение.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	СтПериод.Значение.ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(ТабличныйДокумент)
	
	МассивПустыхСтрок = Новый Массив;
	
	Для ИндексСтроки = 5 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		ЭтоПустаяСтрока = Истина;
		
		Для ИндексКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			Если ЗначениеЗаполнено(ТабличныйДокумент.Область(ИндексСтроки, ИндексКолонки).Текст) Тогда
				ЭтоПустаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПустаяСтрока Тогда
			МассивПустыхСтрок.Вставить(0, ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивПустыхСтрок Цикл
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(ТекЭлемент,, ТекЭлемент), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("Организация");
Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ИскомыйПараметр);
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.Организации.ОсновнаяОрганизация;
		Параметр.Использование = Истина;
	КонецЕсли;
ИначеЕсли Константы.УчетПоКомпании.Получить() Тогда
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ИскомыйПараметр);
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Константы.Компания.Получить();
		Параметр.Использование = Истина;
	КонецЕсли;
КонецЕсли;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли