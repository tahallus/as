#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["ВоронкаПродажОбщая"].Теги = НСтр("ru = 'CRM,Заказы,Контрагенты,Менеджеры,Покупатели,Подразделения,Продажи'");
	НастройкиВариантов["ВоронкаПродажПоЛидам"].ИмяМакетаОбразца = "ОбразецВоронкаПродажПоЛидам";
	НастройкиВариантов["ВоронкаПродажПоПокупателям"].ИмяМакетаОбразца = "ОбразецВоронкаПродажПоПокупателям";
	НастройкиВариантов["ВоронкаПродаж"].ИмяМакетаОбразца = "ОбразецВоронкаПродажПоЗаказам";
	
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	МакетОтчета = ПолучитьМакет("ТД_ВоронкаПродаж");
	
	Если НеУстановленыОбязательныеФильтры(КомпоновщикНастроек.Настройки, ДокументРезультат, МакетОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Заполнение данных расшифровки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновкиДанных.ТребуемаяАктуальностьДанных = ТребуемаяАктуальностьДанных.Авто;
	
	ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронки(КомпоновщикНастроек.Настройки);
	ВариантВоронки = Отчеты.ВоронкаПродаж.ВариантВоронки(КомпоновщикНастроек.Настройки);
	
	Если ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоЗаказам() Тогда
		ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Заказ");
		ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЗаказы);
	КонецЕсли;
	
	Если ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоЛидам() Тогда
		ВывестиВоронкуПоЛидам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Лид");
		ВывестиЛегендуПотерьПоЛидам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЛиды);
		ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЗаказы);
	КонецЕсли;
	
	Если ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоПокупателям() Тогда
		ВывестиВоронкуПоПокупателям(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Покупатель");
		ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЗаказы);
	КонецЕсли;
	
	Если ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиОбщая() Тогда
		
		ТекстЗапросаПоИсточникам = ТекстЗапросаИсточникиОбщие(КомпоновщикНастроек.Настройки);
		МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыОбщейВоронкиПродаж(КомпоновщикНастроек.Настройки);
		ВывестиОбщуюТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, КомпоновщикНастроек.Настройки,ДанныеРасшифровки, МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам);

		Если ВариантВоронки <> ВариантВоронкиПоЗаказам() Тогда
			ВывестиОбщуюВоронку(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки);
			Возврат;
		КонецЕсли;
				
		ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
		ДокументРезультат.Вывести(ОбластьШапка);
		
		ВывестиВоронкуПоЛидам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Общая");
		ВывестиВоронкуПоПокупателям(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Общая");
		ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Общая");
		
		ВывестиЛегендуПотерьПоЛидам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЛиды);
		ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЗаказы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	СтруктураВарианта = НастройкиВариантов["ВоронкаПродажОбщая"];
	ОтчетыУНФ.ДобавитьОписаниеПривязки(СтруктураВарианта.СвязанныеПоля, "ИсточникПривлечения", "Справочник.ИсточникиПривлеченияПокупателей",,, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДетализациюГруппировки(ОбластьГруппировка, ВыборкаВоронкаПродаж, КоличествоЗаказов = Неопределено)
	
	ОбластьГруппировка.Параметры.Количество = ВыборкаВоронкаПродаж.ИтогВсего;
	
	Если ЗначениеЗаполнено(ВыборкаВоронкаПродаж.ИтогУспешные)
		И ЗначениеЗаполнено(ВыборкаВоронкаПродаж.ИтогВсего) Тогда
		ОбластьГруппировка.Параметры.Конверсия = СтрШаблон("%1%%",
		Формат(ВыборкаВоронкаПродаж.ИтогУспешные / ВыборкаВоронкаПродаж.ИтогВсего * 100, "ЧЦ=3"));
	Иначе
		ОбластьГруппировка.Параметры.Конверсия = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаВоронкаПродаж.Длительность) Тогда
		ОбластьГруппировка.Параметры.Длительность = Окр(ВыборкаВоронкаПродаж.Длительность / 60 / 60, 2);
	Иначе 
		ОбластьГруппировка.Параметры.Длительность = 0;
	КонецЕсли;
	
	ОбластьГруппировка.Параметры.СуммаДокумента = Формат(ВыборкаВоронкаПродаж.ИтогСуммаУспешных, "ЧЦ=15; ЧДЦ=2");
	
	Если НЕ ЗначениеЗаполнено(КоличествоЗаказов) Тогда
		КоличествоЗаказов = ВыборкаВоронкаПродаж.ИтогВсего;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаВоронкаПродаж.ИтогУспешные) Тогда
		ОбластьГруппировка.Параметры.СреднийЧек = Формат(Окр(ВыборкаВоронкаПродаж.ИтогСуммаУспешных,2)/ ВыборкаВоронкаПродаж.ИтогУспешные, "ЧЦ=15; ЧДЦ=2");
	Иначе
		ОбластьГруппировка.Параметры.СреднийЧек = 0;
	КонецЕсли;
	
	ОбластьГруппировка.Параметры.Потери = ВыборкаВоронкаПродаж.ИтогОтмененные;
	ОбластьГруппировка.Параметры.СуммаПотерь = Формат(ВыборкаВоронкаПродаж.ИтогСуммаОтмененных, "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

Функция ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД)
	
	ВариантыВоронки = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(
	Новый ПараметрКомпоновкиДанных("ВариантВоронки")).ДоступныеЗначения;
	
	Возврат НРег(ВариантыВоронки.НайтиПоЗначению(ВариантВоронки).Представление);
	
КонецФункции

Функция ПредставлениеГруппировки(ВариантВоронки, Выборка)
	
	КомпонентыПредставления = Новый Массив;
	
	Если ВариантВоронки = ВариантВоронкиПоПокупателям() Тогда
		ЗаголовокПоля = НСтр("ru = 'Покупатель'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Менеджер'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоПодразделениям() Тогда
		ЗаголовокПоля = НСтр("ru = 'Подразделение'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоЛидам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Лид'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоИсточникам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Источник привлечения'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокПоля) Тогда
		КомпонентыПредставления.Добавить(СтрШаблон("%1: %2", ЗаголовокПоля, Выборка.ПолеГруппировки));
	КонецЕсли;
		
	Возврат СтрСоединить(КомпонентыПредставления, ", ");
	
КонецФункции

Функция ПредставлениеВидЗаказа(ВидЗаказа)
	
	Если ТипЗнч(ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказовПокупателей") И ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
		Возврат  СтрШаблон("%1: %2", НСтр("ru = 'Вид'"), ВидЗаказа);
	КонецЕсли;
	
	Если ТипЗнч(ВидЗаказа) = Тип("СправочникСсылка.ВидыЗаказНарядов") И ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
		Возврат  СтрШаблон("%1: %2", НСтр("ru = 'Вид'"), ВидЗаказа);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПредставлениеВидОперации(ВидОперации)
	
	Если ВидОперации = "ЗаказПокупателя" Тогда
		Возврат НСтр("ru = 'Заказы покупателей'");
	КонецЕсли;
	
	Если ВидОперации = "ЗаказНаряд" Тогда
		Возврат НСтр("ru = 'Заказ-наряды'");
	КонецЕсли;
	
КонецФункции

Функция ДанныеПоПотерям(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если Результат[ТекСтр.ПолеГруппировки] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки] = Новый Соответствие;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа] = Новый Структура;
		КонецЕсли;
		
		Если НЕ Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Свойство("Состояния") Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Вставить("Состояния", Новый Соответствие);
		КонецЕсли;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены] = Новый Структура;
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Вставить("Потери", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Вставить("СуммаПотерь", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Вставить("Причины", Новый Соответствие);
		КонецЕсли;
		
	
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Потери = Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Потери + 1;
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].СуммаПотерь = Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].СуммаПотерь + ТекСтр.СуммаДокумента;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = 0;
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Результат[ТекСтр.ПолеГруппировки][ТекСтр.ВидЗаказа].Состояния[ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветаГрадиентаПричин(Знач ТаблицаПотерь, ОбъектВоронки)
	
	Результат = Новый Соответствие;
	Диаграмма = Новый Диаграмма;
	
	Если ОбъектВоронки = "Лид" Тогда
		Диаграмма.ПалитраЦветов = ПалитраЦветовДиаграммы.Теплая;
	ИначеЕсли ОбъектВоронки = "Заказ" Тогда
		Диаграмма.ПалитраЦветов = ПалитраЦветовДиаграммы.Мягкая;
	Иначе
		Диаграмма.ПалитраЦветов = ПалитраЦветовДиаграммы.Авто;
	КонецЕсли;
	
	
	Палитра = Диаграмма.ПолучитьПалитру();
	
	ИндексЦвета = 0;
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если ИндексЦвета > Палитра.ВГраница() Тогда
			ИндексЦвета = 0;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат.Вставить(ТекСтр.ПричинаОтмены, Палитра[ИндексЦвета]);
			ИндексЦвета = ИндексЦвета + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

Функция ПредставлениеПроцентов(Проценты, ОтображатьЗаголовок = Истина)
	
	Если ТипЗнч(Проценты) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Окр(Проценты) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев("████████████████████", Проценты * 0.2)
	+ Символы.НПП
	+ ?(ОтображатьЗаголовок, Формат(Проценты, "ЧЦ=3; ЧН=") + "%", "");
	
КонецФункции

Функция ПредставлениеПроцентовИсточник(Проценты, ОтображатьЗаголовок = Истина)
	
	Если ТипЗнч(Проценты) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Окр(Проценты) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев("████████████", Проценты * 0.2)
	+ Символы.НПП
	+ ?(ОтображатьЗаголовок, Формат(Проценты, "ЧЦ=3; ЧН=") + "%", "");
	
КонецФункции

Процедура ЗаполнитьПотери(Знач ОбластьСостояние, Знач ВыборкаВоронкаПродажСостояние, Знач ДанныеПоПотерям, Знач КоличествоСостоянийПоВидуЗаказа, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПотериПоВидуЗаказа = ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки][ВыборкаВоронкаПродажСостояние.ВидЗаказа];
	Если ПотериПоВидуЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПотериПоВидуЗаказаИСостоянию = ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки][ВыборкаВоронкаПродажСостояние.ВидЗаказа].Состояния[ВыборкаВоронкаПродажСостояние.Состояние];
	Если ПотериПоВидуЗаказаИСостоянию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиГрадиента = Новый ТаблицаЗначений;
	ОбластиГрадиента.Колонки.Добавить("Причина", Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказа"));
	ОбластиГрадиента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ОбластиГрадиента.Колонки.Добавить("ПриведенноеКоличество", Новый ОписаниеТипов("Число"));
	
	ПустаяОбластьГрадиента = ОбластиГрадиента.Добавить();
	ПустаяОбластьГрадиента.Количество = КоличествоСостоянийПоВидуЗаказа - ПотериПоВидуЗаказаИСостоянию.Потери;
	
	Для Каждого ТекПричина Из ПотериПоВидуЗаказаИСостоянию.Причины Цикл
		НоваяОбласть = ОбластиГрадиента.Добавить();
		НоваяОбласть.Причина = ТекПричина.Ключ;
		НоваяОбласть.Количество = ТекПричина.Значение;
	КонецЦикла;
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		ТекПричина.ПриведенноеКоличество = Окр(ТекПричина.Количество / ОбластиГрадиента.Итог("Количество") * КоличествоЯчеекГрадиентаПотерь());
	КонецЦикла;
	
	Если ОбластиГрадиента.Итог("ПриведенноеКоличество") <> КоличествоЯчеекГрадиентаПотерь() Тогда
		СуммаВсехКромеПервой = ОбластиГрадиента.Итог("ПриведенноеКоличество") - ОбластиГрадиента[0].ПриведенноеКоличество;
		ОбластиГрадиента[0].ПриведенноеКоличество = КоличествоЯчеекГрадиентаПотерь() - СуммаВсехКромеПервой;
	КонецЕсли;
	
	ТекПозиция = НачалоОтображенияГрадиентаПотерь();
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл

		Если ЗначениеЗаполнено(ТекПричина.Причина)
			И ЗначениеЗаполнено(ТекПричина.ПриведенноеКоличество) Тогда
			
			ОбластьПокраски = СтрШаблон(
			"R1C%1:R1C%2",
			Формат(ТекПозиция, "ЧГ="),
			Формат(ТекПозиция + ТекПричина.ПриведенноеКоличество - 1, "ЧГ="));
			
			ОбластьСостояние.Область(ОбластьПокраски).ЦветФона = ЦветаГрадиента[ТекПричина.Причина];
			
		КонецЕсли;

		ТекПозиция = ТекПозиция + ТекПричина.ПриведенноеКоличество;
	
	КонецЦикла;
	
	ПроцентПотерь = Окр(ПотериПоВидуЗаказаИСостоянию.Потери / КоличествоСостоянийПоВидуЗаказа * 100);
	
	ОбластьСостояние.Параметры.Потери = СтрШаблон("%1 (%2%%)",
	ПотериПоВидуЗаказаИСостоянию.Потери,
	ПроцентПотерь);
	
	ОбластьСостояние.Параметры.СуммаПотерь = ПотериПоВидуЗаказаИСостоянию.СуммаПотерь;
	
КонецПроцедуры

Процедура ВывестиЛегендуПотерь(Знач ДокументРезультат, Знач МакетОтчета, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(ЦветаГрадиента) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("ЛегендаЗаказы"));
	
	Для Каждого ТекЦвет Из ЦветаГрадиента Цикл
		
		ОбластьПричина = МакетОтчета.ПолучитьОбласть("СтрокаПричина");
		ОбластьПричина.Параметры.ПричинаОтмены = ТекЦвет.Ключ;
		ОбластьПричина.Область("R1C23:R1C27").ЦветФона = ТекЦвет.Значение;
		
		ДокументРезультат.Вывести(ОбластьПричина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НачалоОтображенияГрадиентаПотерь()
	
	Возврат 23;
	
КонецФункции

Функция КоличествоЯчеекГрадиентаПотерь()
	
	Возврат 50;
	
КонецФункции

Функция НетДанныхВОбщейТаблицеИсточников(Выборка)
	
	Возврат НЕ ЗначениеЗаполнено(Выборка.КоличествоЛидовФакт) 
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоЛидовПлан)
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоПокупателейФакт) 
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоПокупателейПлан)
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоЗаказовПлан)
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоЗаказовФакт)
		И НЕ ЗначениеЗаполнено(Выборка.РасходыФакт);
		
КонецФункции

Функция НетДанныхВТаблицеИсточников(Выборка)
	
	Возврат НЕ ЗначениеЗаполнено(Выборка.КоличествоФакт) 
		И НЕ ЗначениеЗаполнено(Выборка.КоличествоПлан)
		И НЕ ЗначениеЗаполнено(Выборка.РасходыФакт)
		И НЕ ЗначениеЗаполнено(Выборка.РасходыПлан);
		
КонецФункции

Функция ДанныеПоПотерямЛиды(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если Результат[ТекСтр.ПолеГруппировки] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки] = Новый Соответствие;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Новый Структура;
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Потери", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Причины", Новый Соответствие);
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери + 1;

		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = 0;
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПотериЛиды(Знач ОбластьСостояние, Знач ВыборкаВоронкаПродажСостояние, Знач ДанныеПоПотерям, Знач КоличествоСостоянийПоВидуЗаказа, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПотериПоВидуЗаказаИСостоянию = ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки][ВыборкаВоронкаПродажСостояние.Состояние];
	Если ПотериПоВидуЗаказаИСостоянию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиГрадиента = Новый ТаблицаЗначений;
	ОбластиГрадиента.Колонки.Добавить("Причина", Новый ОписаниеТипов("СправочникСсылка.ПричиныНеуспешногоЗавершенияРаботыСЛидом"));
	ОбластиГрадиента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ОбластиГрадиента.Колонки.Добавить("ПриведенноеКоличество", Новый ОписаниеТипов("Число"));
	
	ПустаяОбластьГрадиента = ОбластиГрадиента.Добавить();
	ПустаяОбластьГрадиента.Количество = КоличествоСостоянийПоВидуЗаказа - ПотериПоВидуЗаказаИСостоянию.Потери;
	
	Для Каждого ТекПричина Из ПотериПоВидуЗаказаИСостоянию.Причины Цикл
		НоваяОбласть = ОбластиГрадиента.Добавить();
		НоваяОбласть.Причина = ТекПричина.Ключ;
		НоваяОбласть.Количество = ТекПричина.Значение;
	КонецЦикла;
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		ТекПричина.ПриведенноеКоличество = Окр(ТекПричина.Количество / ОбластиГрадиента.Итог("Количество") * КоличествоЯчеекГрадиентаПотерь());
	КонецЦикла;
	
	Если ОбластиГрадиента.Итог("ПриведенноеКоличество") <> КоличествоЯчеекГрадиентаПотерь() Тогда
		СуммаВсехКромеПервой = ОбластиГрадиента.Итог("ПриведенноеКоличество") - ОбластиГрадиента[0].ПриведенноеКоличество;
		ОбластиГрадиента[0].ПриведенноеКоличество = КоличествоЯчеекГрадиентаПотерь() - СуммаВсехКромеПервой;
	КонецЕсли;
	
	ТекПозиция = НачалоОтображенияГрадиентаПотерь();
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		
		Если ЗначениеЗаполнено(ТекПричина.Причина)
			И ЗначениеЗаполнено(ТекПричина.ПриведенноеКоличество) Тогда
			
			ОбластьПокраски = СтрШаблон(
			"R1C%1:R1C%2",
			Формат(ТекПозиция, "ЧГ="),
			Формат(ТекПозиция + ТекПричина.ПриведенноеКоличество - 1, "ЧГ="));
			
			ОбластьСостояние.Область(ОбластьПокраски).ЦветФона = ЦветаГрадиента[ТекПричина.Причина];
			
		КонецЕсли;
		
		ТекПозиция = ТекПозиция + ТекПричина.ПриведенноеКоличество;
		
	КонецЦикла;
	
	ПроцентПотерь = Окр(ПотериПоВидуЗаказаИСостоянию.Потери / КоличествоСостоянийПоВидуЗаказа * 100);
	
	ОбластьСостояние.Параметры.Потери = СтрШаблон("%1 (%2%%)",
	ПотериПоВидуЗаказаИСостоянию.Потери,
	ПроцентПотерь);
	
	
КонецПроцедуры

#Область Фильтры

Функция МенееДвухПокупателейВСправочникеКонтрагенты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Покупатель");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухЭлементовВСправочникеСотрудники()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухЛидовВСправочникеЛиды()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Лиды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Лиды КАК Лиды");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухПодразделенийВСправочникеСтруктурныеЕдиницы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеУстановленыОбязательныеФильтры(НастройкиКД, ДокументРезультат, МакетОтчета)
	
	ВариантВоронки = Отчеты.ВоронкаПродаж.ВариантВоронки(НастройкиКД);
	
	ПолеДляОбязательногоФильтра = ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки);
	Если ПолеДляОбязательногоФильтра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из НастройкиКД.Отбор.Элементы Цикл
		
		Если ТипЗнч(ТекЭлемент) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент.ЛевоеЗначение = ПолеДляОбязательногоФильтра
			И ТекЭлемент.Использование Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьТребуетсяФильтр = МакетОтчета.ПолучитьОбласть("СтрокаТребуетсяФильтр");
	ОбластьТребуетсяФильтр.Параметры.ТекстСообщения = ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД);
	
	ДокументРезультат.Вывести(ОбластьТребуетсяФильтр);
	
	Возврат Истина;
	
КонецФункции

Функция ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД)
	
	Если ВариантВоронки = ВариантВоронкиПоПокупателям() И МенееДвухПокупателейВСправочникеКонтрагенты() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по покупателям требуется, чтобы в справочнике ""Контрагенты"" было не менее двух покупателей.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоЛидам() И МенееДвухЛидовВСправочникеЛиды() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по лидам требуется, чтобы в справочнике ""Лиды"" было не менее двух лидов.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() И МенееДвухЭлементовВСправочникеСотрудники() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по менеджерам требуется, чтобы в справочнике ""Сотрудники"" было не менее двух элементов.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоПодразделениям() И МенееДвухПодразделенийВСправочникеСтруктурныеЕдиницы() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по подразделениям требуется, чтобы в справочнике ""Подразделения"" было не менее двух элементов.'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Для сравнения воронки по полю %1 установите фильтр %2.'"),
	ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД),
	НастройкиКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеДляОбязательногоФильтра).Заголовок);
	
КонецФункции

Функция ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки)
	
	Результат = Новый Соответствие;
	Результат[ВариантВоронкиПоПокупателям()] = Новый ПолеКомпоновкиДанных("Контрагент");
	Результат[ВариантВоронкиПоМенеджерам()] = Новый ПолеКомпоновкиДанных("Ответственный");
	Результат[ВариантВоронкиПоПодразделениям()] = Новый ПолеКомпоновкиДанных("СтруктурнаяЕдиницаПродажи");
	Результат[ВариантВоронкиПоЛидам()] = Новый ПолеКомпоновкиДанных("Лид");
	Результат[ВариантВоронкиПоИсточникам()] = Новый ПолеКомпоновкиДанных("ИсточникПривлечения");
	
	Возврат Результат[ВариантВоронки];
	
КонецФункции

#КонецОбласти

#Область Расшифровка

Функция ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, Выборка, ЭтоПотери)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "СуммаДокумента";
	
	ЗначениеПолеГруппировка = ЗначенияПолей.Добавить();
	ЗначениеПолеГруппировка.Поле = "ПолеГруппировки";
	ЗначениеПолеГруппировка.Значение = Выборка.ПолеГруппировки;
	
	ЗначениеВидЗаказа = ЗначенияПолей.Добавить();
	ЗначениеВидЗаказа.Поле = "ВидЗаказа";
	ЗначениеВидЗаказа.Значение = Выборка.ВидЗаказа;
	
	ЗначениеСостояние = ЗначенияПолей.Добавить();
	ЗначениеСостояние.Поле = "Состояние";
	ЗначениеСостояние.Значение = Выборка.Состояние;
	
	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = ЭтоПотери;
	
	ЗначениеОбъектВоронки = ЗначенияПолей.Добавить();
	ЗначениеОбъектВоронки.Поле = "ОбъектВоронки";
	ЗначениеОбъектВоронки.Значение = "Заказ";

	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
	
	Возврат ЭлементРасшифровки.Идентификатор;
	
КонецФункции

Функция ИдентификаторЭлементаРасшифровкиЛиды(ДанныеРасшифровки, Выборка, ЭтоПотери)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "СуммаДокумента";
	
	ЗначениеПолеГруппировка = ЗначенияПолей.Добавить();
	ЗначениеПолеГруппировка.Поле = "ПолеГруппировки";
	ЗначениеПолеГруппировка.Значение = Выборка.ПолеГруппировки;
	
	ЗначениеСостояние = ЗначенияПолей.Добавить();
	ЗначениеСостояние.Поле = "Состояние";
	ЗначениеСостояние.Значение = Выборка.Состояние;
	
	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = ЭтоПотери;
	
	ЗначениеОбъектВоронки = ЗначенияПолей.Добавить();
	ЗначениеОбъектВоронки.Поле = "ОбъектВоронки";
	ЗначениеОбъектВоронки.Значение = "Лид";
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
	
	Возврат ЭлементРасшифровки.Идентификатор;
	
КонецФункции

Функция ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки, ВидОбъекта, ЭтоДанныеПродаж, Состояние = Неопределено, ПолеГруппировки = Неопределено, Покупатели = Неопределено)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "СуммаДокумента";
	
	ЗначениеПолеДанныеПродаж = ЗначенияПолей.Добавить();
	ЗначениеПолеДанныеПродаж.Поле = "ДанныеПродаж";
	ЗначениеПолеДанныеПродаж.Значение = ЭтоДанныеПродаж;
	
	ЗначениеПолеПокупатели = ЗначенияПолей.Добавить();
	ЗначениеПолеПокупатели.Поле = "ПродажиПоПокупателям";
	ЗначениеПолеПокупатели.Значение = Покупатели;
	
	ЗначениеПолеГруппировка = ЗначенияПолей.Добавить();
	ЗначениеПолеГруппировка.Поле = "ПолеГруппировки";
	ЗначениеПолеГруппировка.Значение = ПолеГруппировки;
	
	ЗначениеСостояние = ЗначенияПолей.Добавить();
	ЗначениеСостояние.Поле = "Состояние";
	ЗначениеСостояние.Значение = Состояние;
		
	ЗначениеОбъектВоронки = ЗначенияПолей.Добавить();
	ЗначениеОбъектВоронки.Поле = "ОбъектВоронки";
	ЗначениеОбъектВоронки.Значение = "Покупатель";
	
	ЗначениеВидОбъекта = ЗначенияПолей.Добавить();
	ЗначениеВидОбъекта.Поле = "ВидОбъекта";
	ЗначениеВидОбъекта.Значение = ВидОбъекта;
	
	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = Ложь;

	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
		
	Возврат ЭлементРасшифровки.Идентификатор;
	
КонецФункции

Функция ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, Источник, ОбъектВоронки, ЭтоПоказательРасходов, ЭтоГруппа, ЭтоИтоги = Ложь, ЭтоКонверсия = Ложь)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "СуммаДокумента";

	ЗначениеИсточник = ЗначенияПолей.Добавить();
	ЗначениеИсточник.Поле = "Источник";
	ЗначениеИсточник.Значение = Источник;
	
	ЗначениеОбъектВоронки = ЗначенияПолей.Добавить();
	ЗначениеОбъектВоронки.Поле = "ОбъектВоронки";
	ЗначениеОбъектВоронки.Значение = ОбъектВоронки;
	
	ЗначениеКонверсии = ЗначенияПолей.Добавить();
	ЗначениеКонверсии.Поле = "ЭтоКонверсия";
	ЗначениеКонверсии.Значение = ЭтоКонверсия;
	
	ЗначениеЭтоПоказательРасходов = ЗначенияПолей.Добавить();
	ЗначениеЭтоПоказательРасходов.Поле = "ЭтоПоказательРасходов";
	ЗначениеЭтоПоказательРасходов.Значение = ЭтоПоказательРасходов;
	
	ЗначениеЭтоГруппа = ЗначенияПолей.Добавить();
	ЗначениеЭтоГруппа.Поле = "ЭтоГруппа";
	ЗначениеЭтоГруппа.Значение = ЭтоГруппа;
	
	ЗначениеЭтоИтоги = ЗначенияПолей.Добавить();
	ЗначениеЭтоИтоги.Поле = "ЭтоИтоги";
	ЗначениеЭтоИтоги.Значение = ЭтоИтоги;

	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = Ложь;
		
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
	
	Возврат ЭлементРасшифровки.Идентификатор
	
КонецФункции

#КонецОбласти

#Область ВыводДанных

Процедура ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, ОбъектВоронки, ПолеГруппировки = Неопределено)
	
	ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронки(КомпоновщикНастроек.Настройки);
	ЗапросВоронкаПродаж = Новый Запрос;
	ЗапросВоронкаПродаж.Текст = ТекстЗапросаВоронкиПоЗаказам(ОбъектВоронки, ПолеГруппировки, ВариантВоронки, КомпоновщикНастроек.Настройки);
	
	Если ПолеГруппировки <> Неопределено Тогда
		ЗапросВоронкаПродаж.УстановитьПараметр("ПолеГруппировки", ПолеГруппировки);
	КонецЕсли;
	
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыВоронкиПродажПоЗаказам(КомпоновщикНастроек.Настройки, ОбъектВоронки);
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.ВыполнитьПакет();
	
	ЦветСостояния = Новый Соответствие;
	ТаблицаПотерь = РезультатыЗапросаВоронкаПродаж[0].Выгрузить();
	ДанныеПоПотерям = ДанныеПоПотерям(ТаблицаПотерь);
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЗаказы", ЦветаГрадиентаПричин(ТаблицаПотерь, "Заказ"));
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	ОбластьГруппировкаВид = МакетОтчета.ПолучитьОбласть("СтрокаГруппировкаПоВиду");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");

	Если РезультатыЗапросаВоронкаПродаж[2].Пустой() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют заказы, у которых было изменено состояние в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Заказы покупателей'"), ТекстОтсутствуютДанные);
		Возврат;
	КонецЕсли;
		
	Если ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоЗаказам() Тогда;
		ТекстЗапросаПоИсточникам = ТекстЗапросаИсточникиПоЗаказам(КомпоновщикНастроек.Настройки);
		ВывестиТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, КомпоновщикНастроек.Настройки, ЗапросВоронкаПродаж.МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам, "Заказ");
		ДокументРезультат.Вывести(ОбластьШапка);
	КонецЕсли;

	ВыборкаВоронкаПродажГруппировка = РезультатыЗапросаВоронкаПродаж[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоПоПолюГруппировки = 0;
	КоличествоПоВыборке = 0;
	
	Пока ВыборкаВоронкаПродажГруппировка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ПолеГруппировки) И ВыборкаВоронкаПродажГруппировка.ПолеГруппировки <> ПолеГруппировки Тогда
			КоличествоПоПолюГруппировки = КоличествоПоПолюГруппировки + 1;
			Продолжить;
		КонецЕсли;
		
		ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, ВыборкаВоронкаПродажГруппировка);
		Если ЗначениеЗаполнено(ПредставлениеГруппировки) И ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоЗаказам() Тогда
			ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки;
			ДокументРезультат.Вывести(ОбластьГруппировка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаВоронкаПродажГруппировка.УчитыватьВВоронке) И (ОбъектВоронки = "Лид" ИЛИ ОбъектВоронки = "Покупатель") Тогда
			КоличествоПоВыборке = КоличествоПоВыборке + 1;
			Продолжить;
		КонецЕсли;
		
		ВыборкаВоронкаПродажВидОперации = ВыборкаВоронкаПродажГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВоронкаПродажВидОперации.Следующий() Цикл
						
			ОбластьЗаголовок.Параметры.Заголовок = ПредставлениеВидОперации(ВыборкаВоронкаПродажВидОперации.ГруппировкаВидОперации);
			ЗаполнитьДетализациюГруппировки(ОбластьЗаголовок, ВыборкаВоронкаПродажВидОперации);
			ДокументРезультат.Вывести(ОбластьЗаголовок);
			
			ГруппаЗаказовРаскрыта = ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиПоЗаказам() ИЛИ ВидВоронки = Отчеты.ВоронкаПродаж.ВидВоронкиОбщая();
			ДокументРезультат.НачатьГруппуСтрок(ВыборкаВоронкаПродажВидОперации.ВидОперации, ГруппаЗаказовРаскрыта);
			ДокументРезультат.Вывести(ОбластьОтступ);
			ВыборкаВоронкаПродажВидЗаказа = ВыборкаВоронкаПродажВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВоронкаПродажВидЗаказа.Следующий() Цикл
				
				ПредставлениеВидЗаказа = ПредставлениеВидЗаказа(ВыборкаВоронкаПродажВидЗаказа.ВидЗаказа);
				Если ЗначениеЗаполнено(ПредставлениеВидЗаказа) Тогда
					ОбластьГруппировкаВид.Параметры.ПредставлениеГруппировкиВид = ПредставлениеВидЗаказа(ВыборкаВоронкаПродажВидЗаказа.ВидЗаказа);
					ДокументРезультат.Вывести(ОбластьГруппировкаВид);
					ДокументРезультат.НачатьГруппуСтрок(ВыборкаВоронкаПродажВидЗаказа.ВидЗаказа);
					ДокументРезультат.Вывести(ОбластьОтступ);
				КонецЕсли;
				ВывестиДетализациюСостояние(ДокументРезультат, ВыборкаВоронкаПродажВидЗаказа, ДанныеПоПотерям, ДанныеРасшифровки, МакетОтчета, ЦветСостояния);
				Если ЗначениеЗаполнено(ПредставлениеВидЗаказа) Тогда
					ДокументРезультат.ЗакончитьГруппуСтрок();
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьОтступ);
				
			КонецЦикла;
	
			ДокументРезультат.ЗакончитьГруппуСтрок();
			ДокументРезультат.Вывести(ОбластьОтступ);
			КоличествоПоПолюГруппировки = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НетДанныхВВоронке = (ЗначениеЗаполнено(ПолеГруппировки) И КоличествоПоПолюГруппировки = ВыборкаВоронкаПродажГруппировка.Количество())
		ИЛИ КоличествоПоВыборке = ВыборкаВоронкаПродажГруппировка.Количество();
		
	Если НетДанныхВВоронке Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют заказы, у которых было изменено состояние в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета,НСтр("ru = 'Заказы покупателей'"), ТекстОтсутствуютДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВоронкуПоЛидам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, ОбъектВоронки = Неопределено, ПолеГруппировки = Неопределено)
	
	ЗапросВоронкаПродаж = Новый Запрос;
	ЗапросВоронкаПродаж.Текст = Отчеты.ВоронкаПродаж.ТекстЗапросаСУстановленнымПолемГруппировки(ТекстЗапросаВоронкиПоЛидам(), "ИсторияСостоянийЛидовСрезПоследних", КомпоновщикНастроек.Настройки, "Лид");
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыВоронкиПродажПоЛидам(КомпоновщикНастроек.Настройки);
		
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.ВыполнитьПакет();
	
	ЦветСостояния = Новый Соответствие;
	ТаблицаПотерь = РезультатыЗапросаВоронкаПродаж[0].Выгрузить();
	ДанныеПоПотерям = ДанныеПоПотерямЛиды(ТаблицаПотерь);
	ДанныеВоронкиПоЗавершеннымЛидам = РезультатыЗапросаВоронкаПродаж[2].Выгрузить();
	ПродажиПоПокупателям = РезультатыЗапросаВоронкаПродаж[3].Выгрузить();	
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЛиды", ЦветаГрадиентаПричин(ТаблицаПотерь, "Лид") );

	Если РезультатыЗапросаВоронкаПродаж[1].Пустой() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют лиды, у которых было изменено состояние в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Лиды'"), ТекстОтсутствуютДанные);
		ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЗаказы", Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ОбъектВоронки = "Лид" Тогда
		ТекстЗапросаПоИсточникам = ТекстЗапросаИсточникиПоЛидам(КомпоновщикНастроек.Настройки);
		ВывестиТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, КомпоновщикНастроек.Настройки, ЗапросВоронкаПродаж.МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам, "Лид");
		ДокументРезультат.Вывести(ОбластьШапка);
	КонецЕсли;
	
	ВыборкаВоронкаПродажГруппировка = РезультатыЗапросаВоронкаПродаж[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПолеГруппировки");

	КоличествоПоПолюГруппировки = 0;
	КоличествоПоВыборке = 0;
		
	Пока ВыборкаВоронкаПродажГруппировка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ПолеГруппировки) И ВыборкаВоронкаПродажГруппировка.ПолеГруппировки <> ПолеГруппировки Тогда
			КоличествоПоПолюГруппировки = КоличествоПоПолюГруппировки + 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаВоронкаПродажГруппировка.УчитыватьВВоронке) Тогда
			КоличествоПоВыборке = КоличествоПоВыборке + 1;
			Продолжить;
		КонецЕсли;
		
		ВыборкаВоронкаПродаж = ВыборкаВоронкаПродажГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группировка");
		
		Пока ВыборкаВоронкаПродаж.Следующий() Цикл
			
			ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, ВыборкаВоронкаПродаж);
			Если ЗначениеЗаполнено(ПредставлениеГруппировки) И ОбъектВоронки = "Лид" Тогда
				ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки;
				ДокументРезультат.Вывести(ОбластьГруппировка);
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.Заголовок = НСтр("ru = 'Лиды'");
			ЗаполнитьДетализациюГруппировки(ОбластьЗаголовок, ВыборкаВоронкаПродажГруппировка);
			ДокументРезультат.Вывести(ОбластьЗаголовок);
			ДокументРезультат.НачатьГруппуСтрок(НСтр("ru = 'Лиды'"));
			ДокументРезультат.Вывести(ОбластьОтступ);
			ВывестиДетализациюСостояниеЛиды(ДокументРезультат, ВыборкаВоронкаПродаж, ДанныеПоПотерям, ДанныеРасшифровки, МакетОтчета, ЦветСостояния);
			
			КоличествоПоПолюГруппировки = 0;
			
			Для Каждого СтрокаДанных Из ДанныеВоронкиПоЗавершеннымЛидам Цикл
				
				Если (ТипЗнч(ВыборкаВоронкаПродаж.ПолеГруппировки) <> Тип("Булево") И СтрокаДанных.ПолеГруппировки <> ВыборкаВоронкаПродаж.ПолеГруппировки)
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаДанных.ПолеГруппировки) Тогда
					Продолжить;
				КонецЕсли;
				
				ВывестиДетализациюПоПокупателям(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, "Лид", СтрокаДанных, ПродажиПоПокупателям);
				
			КонецЦикла;
			
			ДокументРезультат.ЗакончитьГруппуСтрок();
			ДокументРезультат.Вывести(ОбластьОтступ);	
			Если ОбъектВоронки <> "Лид" Тогда
				Продолжить;
			КонецЕсли;
			ГруппировкаВоронки = Неопределено;
			Если ТипЗнч(ВыборкаВоронкаПродаж.ПолеГруппировки) <> Тип("Булево") Тогда
				ГруппировкаВоронки = ВыборкаВоронкаПродаж.ПолеГруппировки;
			КонецЕсли;
			
			ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Лид", ГруппировкаВоронки);
			
		КонецЦикла;
		
		Если ОбъектВоронки = "Лид" Тогда
			ДокументРезультат.Вывести(ОбластьОтступ);
		КонецЕсли;
		
	КонецЦикла;
	
	НетДанныхВВоронке = (ЗначениеЗаполнено(ПолеГруппировки) И КоличествоПоПолюГруппировки = ВыборкаВоронкаПродажГруппировка.Количество()) 
		ИЛИ КоличествоПоВыборке = ВыборкаВоронкаПродажГруппировка.Количество();
		
	Если НетДанныхВВоронке Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют лиды, у которых было изменено состояние в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Лиды'"), ТекстОтсутствуютДанные);
		ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЗаказы", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВоронкуПоПокупателям(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, ОбъектВоронки = Неопределено, ПолеГруппировки = Неопределено)
	
	ЗапросВоронкаПродаж = Новый Запрос(ТекстЗапросаВоронкиПоПокупателям());
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыВоронкиПродажПоПокупателям(КомпоновщикНастроек.Настройки);
	
	Если ЗначениеЗаполнено(ПолеГруппировки) Тогда
		ЗапросВоронкаПродаж.УстановитьПараметр("ПолеГруппировки", ПолеГруппировки);
	КонецЕсли;
	
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.ВыполнитьПакет();
	
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	
	Если РезультатыЗапросаВоронкаПродаж[0].Пустой() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют покупатели, созданные в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Покупатели'"),ТекстОтсутствуютДанные);
		ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЗаказы", Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеВоронкиПоПокупателям = РезультатыЗапросаВоронкаПродаж[1].Выгрузить();
	ПродажиПоПокупателям = РезультатыЗапросаВоронкаПродаж[2].Выгрузить();
	
	Если ОбъектВоронки = "Покупатель" Тогда
		ТекстЗапросаПоИсточникам = ТекстЗапросаИсточникиПоПокупателям(КомпоновщикНастроек.Настройки);
		ВывестиТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, КомпоновщикНастроек.Настройки, ЗапросВоронкаПродаж.МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам, "Покупатель");
		ДокументРезультат.Вывести(ОбластьШапка);
	КонецЕсли;
	
	КоличествоПоПолюГруппировки = 0;
	
	Для Каждого СтрокаДанных Из ДанныеВоронкиПоПокупателям Цикл
		
		Если ЗначениеЗаполнено(ПолеГруппировки) И СтрокаДанных.ПолеГруппировки <> ПолеГруппировки Тогда
			КоличествоПоПолюГруппировки = КоличествоПоПолюГруппировки + 1;
			Продолжить;
		КонецЕсли;
		
		ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, СтрокаДанных);
		Если ЗначениеЗаполнено(ПредставлениеГруппировки) И ОбъектВоронки = "Покупатель" Тогда
			ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки;
			ДокументРезультат.Вывести(ОбластьГруппировка);
		КонецЕсли;
			
		ОбластьЗаголовок.Параметры.Заголовок = НСтр("ru = 'Покупатели'");
		ЗаполнитьДетализациюГруппировки(ОбластьЗаголовок,СтрокаДанных);
		
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		ДокументРезультат.НачатьГруппуСтрок(НСтр("ru = 'Покупатели'"));
		ДокументРезультат.Вывести(ОбластьОтступ);
		
		ОбластьСостояние = МакетОтчета.ПолучитьОбласть("СтрокаСостояние");
		ОбластьСостояние.Параметры.Состояние = НСтр("ru = 'Всего'");
		ОбластьСостояние.Параметры.Количество = СтрокаДанных.ИтогВсего;
		ОбластьСостояние.Область("R1C5:R1C8").ЦветТекста = Новый Цвет(128,128,128);
		ОбластьСостояние.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки,"Покупатель", Ложь, "Всего", СтрокаДанных.ПолеГруппировки);
		
		ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(100);
		ОбластьСостояние.Параметры.Конверсия = 0;
				
		ДокументРезультат.Вывести(ОбластьСостояние);
		ВывестиДетализациюПоПокупателям(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, "Покупатель", СтрокаДанных, ПродажиПоПокупателям);
		ДокументРезультат.ЗакончитьГруппуСтрок();
		ДокументРезультат.Вывести(ОбластьОтступ);
		
		КоличествоПоПолюГруппировки = 0;
		Если ОбъектВоронки <> "Покупатель" Тогда
			Продолжить;
		КонецЕсли;
		ПолеГруппировкиПоЗаказам = Неопределено;
		Если ТипЗнч(СтрокаДанных.ПолеГруппировки) <> Тип("Булево") Тогда
			ПолеГруппировкиПоЗаказам = СтрокаДанных.ПолеГруппировки;
		КонецЕсли;
		
		ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Покупатель", ПолеГруппировкиПоЗаказам);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПолеГруппировки) И КоличествоПоПолюГруппировки = ДанныеВоронкиПоПокупателям.Количество() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Отсутствуют покупатели, созданные в течение заданного периода.'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Покупатели'"), ТекстОтсутствуютДанные);
		ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиентаЗаказы", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОбщуюВоронку(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Лиды.ПолеГруппировки КАК ПолеГруппировки
	|ИЗ
	|	ВТ_Лиды КАК ВТ_Лиды
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Покупатели.ПолеГруппировки
	|ИЗ
	|	ВТ_Покупатели КАК ВТ_Покупатели
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Заказы.ПолеГруппировки
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы";

	ЗапросВоронкаПродаж = Новый Запрос(ТекстЗапроса);
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПродаж.ВременныеТаблицыОбщейВоронкиПродаж(КомпоновщикНастроек.Настройки);
	
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.Выполнить().Выбрать();
		
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");	
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	
	Если РезультатыЗапросаВоронкаПродаж.Количество() = 0 Тогда
		
		ОбластьОтсутствуютДанные = МакетОтчета.ПолучитьОбласть("СтрокаОтсутствуютДанные");
		ДокументРезультат.Вывести(ОбластьОтступ);
		ОбластьОтсутствуютДанные.Параметры.ТекстОтсутствуютДанные = 
			НСтр("ru = 'Отсутствуют лиды, покупатели и заказы, у которых было изменено состояние в течение заданного периода.'");
		ДокументРезультат.Вывести(ОбластьОтсутствуютДанные);
		Возврат;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	Пока РезультатыЗапросаВоронкаПродаж.Следующий() Цикл
		
		ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, РезультатыЗапросаВоронкаПродаж);
		Если ЗначениеЗаполнено(ПредставлениеГруппировки) Тогда
			ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки;
			ДокументРезультат.Вывести(ОбластьГруппировка);
		КонецЕсли;

		ВывестиВоронкуПоЛидам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Общая", РезультатыЗапросаВоронкаПродаж.ПолеГруппировки);
		ВывестиВоронкуПоПокупателям(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки,"Общая", РезультатыЗапросаВоронкаПродаж.ПолеГруппировки);
		ВывестиВоронкуПоЗаказам(ДокументРезультат, МакетОтчета, ВариантВоронки, ДанныеРасшифровки, "Общая", РезультатыЗапросаВоронкаПродаж.ПолеГруппировки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДетализациюПоПокупателям(ДокументРезультат, МакетОтчета, Знач ДанныеРасшифровки, ОбъектВоронки, СтрокаДанных, ПродажиПоПокупателям = Неопределено)
	
	ДокументРезультат.НачатьГруппуСтрок(НСтр("ru = 'Данные по покупателям'"), СтрокаДанных.ИтогВсего <> 0);
	ОбластьПродажиПоПокупателям = МакетОтчета.ПолучитьОбласть("ПродажиПоПокупателям");
	ОбластьПокупатели = МакетОтчета.ПолучитьОбласть("ДетализацияПоПокупателям");
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	
	ДокументРезультат.Вывести(ОбластьОтступ);
	
	МассивПокупателей = Новый Массив;
	Для Каждого Покупатель Из ПродажиПоПокупателям Цикл
		Если Покупатель.ПолеГруппировки <> СтрокаДанных.ПолеГруппировки Тогда
			Продолжить;
		КонецЕсли;
		МассивПокупателей.Добавить(Покупатель.Покупатель);
	КонецЦикла;
	
	ОбластьПродажиПоПокупателям.Параметры.Количество = СтрокаДанных.ИтогУспешные;
	ОбластьПродажиПоПокупателям.Параметры.Расшифровка = 
		ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки, ОбъектВоронки, Истина, "ПродажиПоПокупателям", СтрокаДанных.ПолеГруппировки, МассивПокупателей);

	Если ЗначениеЗаполнено(СтрокаДанных.ИтогУспешные)
		И ЗначениеЗаполнено(СтрокаДанных.ИтогВсего) Тогда
		Проценты = Окр(СтрокаДанных.ИтогУспешные / СтрокаДанных.ИтогВсего * 100);
		ОбластьПродажиПоПокупателям.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
	Иначе
		ОбластьПродажиПоПокупателям.Параметры.ПредставлениеПроцентов = 0;
	КонецЕсли;
	
	ОбластьПродажиПоПокупателям.Параметры.Выручка = Формат(СтрокаДанных.Выручка, "ЧЦ=15; ЧДЦ=2");
	ОбластьПродажиПоПокупателям.Параметры.Прибыль = Формат(СтрокаДанных.Прибыль, "ЧЦ=15; ЧДЦ=2");
	
	ДокументРезультат.Вывести(ОбластьПродажиПоПокупателям);
	
	ОбластьПокупатели.Параметры.ЗаголовокДетализации = НСтр("ru = 'Ведется работа по заказам'");
	ОбластьПокупатели.Параметры.Количество = СтрокаДанных.ВедетсяРабота;
	ОбластьПокупатели.Параметры.Показатель = НСтр("ru = 'Заказы'");
	ОбластьПокупатели.Параметры.Сумма = Формат(СтрокаДанных.СуммаАктивныхЗаказов, "ЧЦ=15; ЧДЦ=2");
	
	ОбластьПокупатели.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки, ОбъектВоронки, Ложь, "ВедетсяРабота", СтрокаДанных.ПолеГруппировки);

	Если ЗначениеЗаполнено(СтрокаДанных.ВедетсяРабота)
		И ЗначениеЗаполнено(СтрокаДанных.ИтогВсего) Тогда
		Проценты = Окр(СтрокаДанных.ВедетсяРабота / СтрокаДанных.ИтогВсего * 100);
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
	Иначе
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = 0;
	КонецЕсли;

	ДокументРезультат.Вывести(ОбластьПокупатели);
	
	ОбластьПокупатели.Параметры.ЗаголовокДетализации = НСтр("ru = 'Отменили заказ'");
	ОбластьПокупатели.Параметры.Количество = СтрокаДанных.ОтменилиЗаказ;
	ОбластьПокупатели.Параметры.Показатель =  НСтр("ru = 'Потери'");
	ОбластьПокупатели.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки, ОбъектВоронки, Ложь, "ОтменилиЗаказ", СтрокаДанных.ПолеГруппировки);
	Если ЗначениеЗаполнено(СтрокаДанных.ОтменилиЗаказ)
		И ЗначениеЗаполнено(СтрокаДанных.ИтогВсего) Тогда
		Проценты = Окр(СтрокаДанных.ОтменилиЗаказ / СтрокаДанных.ИтогВсего * 100);
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
	Иначе
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = 0;
	КонецЕсли;
	ОбластьПокупатели.Параметры.Сумма = Формат(СтрокаДанных.СуммаОтмененныхЗаказов, "ЧЦ=15; ЧДЦ=2");
	
	ДокументРезультат.Вывести(ОбластьПокупатели);
	
	ОбластьПокупатели.Параметры.ЗаголовокДетализации = НСтр("ru = 'Нет продаж и заказов'");
	ОбластьПокупатели.Параметры.Количество = СтрокаДанных.НетПродажИЗаказов;
	ОбластьПокупатели.Параметры.Показатель = НСтр("ru = ''");	
	ОбластьПокупатели.Параметры.Сумма = Формат(0.00, "ЧЦ=15; ЧДЦ=2");
	
	ОбластьПокупатели.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровкиПокупатели(ДанныеРасшифровки, ОбъектВоронки, Ложь, "НетПродаж", СтрокаДанных.ПолеГруппировки);

	Если ЗначениеЗаполнено(СтрокаДанных.НетПродажИЗаказов)
		И ЗначениеЗаполнено(СтрокаДанных.ИтогВсего) Тогда
		Проценты = Окр(СтрокаДанных.НетПродажИЗаказов / СтрокаДанных.ИтогВсего * 100);
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
	Иначе
		ОбластьПокупатели.Параметры.ПредставлениеПроцентов = 0;
	КонецЕсли;

	ДокументРезультат.Вывести(ОбластьПокупатели);
	
	ДокументРезультат.ЗакончитьГруппуСтрок();
				
КонецПроцедуры

Процедура ВывестиДетализациюСостояние(Знач ДокументРезультат, Знач ВыборкаВоронкаПродажВидЗаказа, Знач ДанныеПоПотерям, Знач ДанныеРасшифровки, Знач МакетОтчета, Знач ЦветСостояния)
	
	КоличествоСостоянийПоВидуЗаказа = Неопределено;
	КоличествоПредыдущейСтроки = Неопределено;
	
	ВыборкаВоронкаПродажПорядок = ВыборкаВоронкаПродажВидЗаказа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажПорядок.Следующий() Цикл
		
		ВыборкаВоронкаПродажСостояние = ВыборкаВоронкаПродажПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВоронкаПродажСостояние.Следующий() Цикл
			
			ОбластьСостояние = МакетОтчета.ПолучитьОбласть("СтрокаСостояние");
			
			ОбластьСостояние.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Ложь);
			ОбластьСостояние.Параметры.РасшифровкаПотери = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Истина);
			
			ОбластьСостояние.Параметры.Состояние = ВыборкаВоронкаПродажСостояние.Состояние;
			ОбластьСостояние.Параметры.Количество = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке)
				И ЗначениеЗаполнено(КоличествоПредыдущейСтроки) Тогда
				ОбластьСостояние.Параметры.Конверсия = СтрШаблон("%1%%",
				Формат(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоПредыдущейСтроки * 100, "ЧЦ=3"));
			КонецЕсли;
			
			КоличествоПредыдущейСтроки = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.Длительность) Тогда
				ОбластьСостояние.Параметры.Длительность = Окр(ВыборкаВоронкаПродажСостояние.Длительность / 60 / 60, 2);
			КонецЕсли;
			
			ОбластьСостояние.Параметры.СуммаДокумента = Формат(ВыборкаВоронкаПродажСостояние.СуммаДокумента, "ЧЦ=15; ЧДЦ=2");
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке) Тогда
				ОбластьСостояние.Параметры.СреднийЧек = Формат(Окр(ВыборкаВоронкаПродажСостояние.СуммаДокумента,2)/ ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке, "ЧЦ=15; ЧДЦ=2");
			Иначе
				ОбластьСостояние.Параметры.СреднийЧек = 0;
			КонецЕсли;
			
			Если ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = Неопределено Тогда
				ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = ВыборкаВоронкаПродажСостояние.Состояние.Цвет.Получить();
			КонецЕсли;
			
			Если ТипЗнч(ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние]) = Тип("Цвет") Тогда
				ОбластьСостояние.Область("R1C5:R1C8").ЦветТекста = ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние];
			Иначе
				ОбластьСостояние.Область("R1C5:R1C8").ЦветТекста = Новый Цвет;
			КонецЕсли;
			
			Если КоличествоСостоянийПоВидуЗаказа = Неопределено Тогда
				КоличествоСостоянийПоВидуЗаказа = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(100);
			Иначе
				Если ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
					Проценты = Окр(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоСостоянийПоВидуЗаказа * 100);
				Иначе
					Проценты = 0;
				КонецЕсли;
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
			КонецЕсли;
			
			ЗаполнитьПотери(ОбластьСостояние, ВыборкаВоронкаПродажСостояние, ДанныеПоПотерям, КоличествоСостоянийПоВидуЗаказа, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЗаказы);
			
			ДокументРезультат.Вывести(ОбластьСостояние);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДетализациюСостояниеЛиды(Знач ДокументРезультат, Знач ВыборкаВоронкаПродажВидЗаказа, Знач ДанныеПоПотерям, Знач ДанныеРасшифровки, Знач МакетОтчета, Знач ЦветСостояния)
	
	КоличествоСостоянийПоВидуЗаказа = Неопределено;
	КоличествоПредыдущейСтроки = Неопределено;
	
	ВыборкаВоронкаПродажПорядок = ВыборкаВоронкаПродажВидЗаказа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажПорядок.Следующий() Цикл
		
		ВыборкаВоронкаПродажСостояние = ВыборкаВоронкаПродажПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВоронкаПродажСостояние.Следующий() Цикл
			
			ОбластьСостояние = МакетОтчета.ПолучитьОбласть("СтрокаСостояние");
			
			ОбластьСостояние.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровкиЛиды(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Ложь);
			ОбластьСостояние.Параметры.РасшифровкаПотери = ИдентификаторЭлементаРасшифровкиЛиды(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Истина);
			
			Если ВыборкаВоронкаПродажСостояние.Состояние = Справочники.СостоянияЛидов.Завершен Тогда
				ОбластьСостояние.Параметры.Состояние = НСтр("ru = 'Переведены в покупателей'");
			Иначе
				ОбластьСостояние.Параметры.Состояние = ВыборкаВоронкаПродажСостояние.Состояние;
			КонецЕсли;
			
			ОбластьСостояние.Параметры.Количество = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке)
				И ЗначениеЗаполнено(КоличествоПредыдущейСтроки) Тогда
				ОбластьСостояние.Параметры.Конверсия = СтрШаблон("%1%%",
				Формат(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоПредыдущейСтроки * 100, "ЧЦ=3"));
			КонецЕсли;
			
			КоличествоПредыдущейСтроки = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.Длительность) Тогда
				ОбластьСостояние.Параметры.Длительность = Окр(ВыборкаВоронкаПродажСостояние.Длительность / 60 / 60, 2);
			КонецЕсли;
			
			
			Если ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = Неопределено Тогда
				ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = ВыборкаВоронкаПродажСостояние.Состояние.Цвет.Получить();
			КонецЕсли;
			
			Если ТипЗнч(ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние]) = Тип("Цвет") Тогда
				ОбластьСостояние.Область("R1C5:R1C8").ЦветТекста = ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние];
			Иначе
				ОбластьСостояние.Область("R1C5:R1C8").ЦветТекста = Новый Цвет;
			КонецЕсли;
			
			Если КоличествоСостоянийПоВидуЗаказа = Неопределено Тогда
				КоличествоСостоянийПоВидуЗаказа = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(100);
			Иначе
				
				Если ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
					Проценты = Окр(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоСостоянийПоВидуЗаказа * 100);
				Иначе
					Проценты = 0;
				КонецЕсли;
				
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
			КонецЕсли;
			
			ЗаполнитьПотериЛиды(ОбластьСостояние, ВыборкаВоронкаПродажСостояние, ДанныеПоПотерям, КоличествоСостоянийПоВидуЗаказа, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиентаЛиды);
			
			ДокументРезультат.Вывести(ОбластьСостояние);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиЛегендуПотерьПоЛидам(Знач ДокументРезультат, Знач МакетОтчета, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(ЦветаГрадиента) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("ЛегендаЛиды"));
	
	Для Каждого ТекЦвет Из ЦветаГрадиента Цикл
		ОбластьПричина = МакетОтчета.ПолучитьОбласть("СтрокаПричина");
		ОбластьПричина.Параметры.ПричинаОтмены = ТекЦвет.Ключ;
		ОбластьПричина.Область("R1C23:R1C27").ЦветФона = ТекЦвет.Значение;
		ДокументРезультат.Вывести(ОбластьПричина);
	КонецЦикла;
	
	ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("СтрокаОтступ"));
	
КонецПроцедуры

Процедура ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, Заголовок, ТекстОтсутствуютДанные, ГруппаРазвернута = Истина)
	
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
		ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	
		ОбластьЗаголовок.Параметры.Заголовок = Заголовок;
		ОбластьЗаголовок.Параметры.Количество = Строка("0");
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		ДокументРезультат.НачатьГруппуСтрок(Заголовок, ГруппаРазвернута);
		
		ДокументРезультат.Вывести(ОбластьОтступ);
		ОбластьОтсутствуютДанные = МакетОтчета.ПолучитьОбласть("СтрокаОтсутствуютДанные");
		ОбластьОтсутствуютДанные.Параметры.ТекстОтсутствуютДанные = ТекстОтсутствуютДанные;
		ДокументРезультат.Вывести(ОбластьОтсутствуютДанные);
		ДокументРезультат.Вывести(ОбластьОтступ);
		ДокументРезультат.ЗакончитьГруппуСтрок();
		ДокументРезультат.Вывести(ОбластьОтступ);
		
КонецПроцедуры

Процедура ВывестиТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, ДанныеРасшифровки, НастройкиКД, МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам, ОбъектВоронки)
	
	ПравоПросмотраРасходов = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РасходыНаИсточникиПривлечения);
	
	Если НЕ ПравоПросмотраРасходов Тогда
		ОбластьШапкаИсточник = МакетОтчета.ПолучитьОбласть("ОбластьШапкаИсточник");
		ОбластьСтрокаИсточник = МакетОтчета.ПолучитьОбласть("ОбластьСтрокаИсточник");
	Иначе
		ОбластьШапкаИсточник = МакетОтчета.ПолучитьОбласть("СтрокаШапкаИсточник");
		ОбластьСтрокаИсточник = МакетОтчета.ПолучитьОбласть("СтрокаИсточник");
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоИсточникам;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НастройкиКД.ПараметрыДанных.Элементы.Найти("СтПериод").Значение.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", НастройкиКД.ПараметрыДанных.Элементы.Найти("СтПериод").Значение.ДатаОкончания);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Данные отсутствуют'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Источники привлечения'"), ТекстОтсутствуютДанные, Ложь);
		Возврат;
	КонецЕсли;
		
	ВыборкаТаблицаПоИсточникамОбщая = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаПоИсточникамОбщая.Следующий() Цикл
		
		Если НетДанныхВТаблицеИсточников(ВыборкаТаблицаПоИсточникамОбщая) Тогда
			ТекстОтсутствуютДанные = НСтр("ru = 'Данные отсутствуют'");
			ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Источники привлечения'"), ТекстОтсутствуютДанные, Ложь);
			Возврат;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заголовок = НСтр("ru = 'Источники привлечения'");
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		ДокументРезультат.НачатьГруппуСтрок(НСтр("ru = 'Источники привлечения'"), Ложь);
		ДокументРезультат.Вывести(ОбластьОтступ);
		ДокументРезультат.Вывести(ОбластьШапкаИсточник);
		ОбщееКоличество = ВыборкаТаблицаПоИсточникамОбщая.КоличествоФакт;
		ВыборкаТаблицаПоИсточникамГруппа = ВыборкаТаблицаПоИсточникамОбщая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТаблицаПоИсточникамГруппа.Следующий() Цикл
			
			Если НетДанныхВТаблицеИсточников(ВыборкаТаблицаПоИсточникамГруппа) Тогда
				 Продолжить;
			КонецЕсли;
			
			ВывестиДетализациюПоГруппе(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамГруппа, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов);
			
			ВыборкаТаблицаПоИсточникамИсточник = ВыборкаТаблицаПоИсточникамГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДокументРезультат.НачатьГруппуСтрок(ВыборкаТаблицаПоИсточникамГруппа.Родитель, Ложь);
			
			Пока ВыборкаТаблицаПоИсточникамИсточник.Следующий() Цикл
				
				Если НетДанныхВТаблицеИсточников(ВыборкаТаблицаПоИсточникамИсточник) Тогда
					Продолжить;
				КонецЕсли;
				ВывестиДетализациюПоИсточнику(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов);
				
			КонецЦикла;
			ДокументРезультат.ЗакончитьГруппуСтрок();
		КонецЦикла;
		
		ВывестиИтогиПоИсточнику(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ВыборкаТаблицаПоИсточникамОбщая, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов);
		ДокументРезультат.Вывести(ОбластьСтрокаИсточник);
		
	КонецЦикла;
	
	ДокументРезультат.Вывести(ОбластьОтступ);
	ДокументРезультат.ЗакончитьГруппуСтрок();
	ДокументРезультат.Вывести(ОбластьОтступ);

КонецПроцедуры

Процедура ВывестиДетализациюПоГруппе(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамГруппа, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов)
	
	ИсточникПривлеченияРодитель = ВыборкаТаблицаПоИсточникамГруппа.Родитель;
	Если НЕ ЗначениеЗаполнено(ИсточникПривлеченияРодитель) Тогда
		ИсточникПривлеченияРодитель = НСтр("ru = '<Нет группы>'");
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточник = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель, ОбъектВоронки, Ложь, Истина);
		
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникКонверсия = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель, ОбъектВоронки, Ложь, Истина, Ложь, Истина);
	
	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель, ОбъектВоронки, Истина, Истина);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.Источник = ИсточникПривлеченияРодитель;
	ОбластьСтрокаИсточник.Параметры.КоличествоФакт = ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт;
	ОбластьСтрокаИсточник.Параметры.Конверсия = ВыборкаТаблицаПоИсточникамГруппа.Конверсия;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт) 
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.Конверсия) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамГруппа.Конверсия 
		/  ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПлан = ВыборкаТаблицаПоИсточникамГруппа.КоличествоПлан;
	
	Если ЗначениеЗаполнено(ОбщееКоличество) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт) Тогда
		Проценты = Окр(ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт / ОбщееКоличество * 100);
	Иначе
		Проценты = 0;
	КонецЕсли;
	ОбластьСтрокаИсточник.Область("R1C6:R1C8").ЦветТекста = Новый Цвет(128,128,128);
	ОбластьСтрокаИсточник.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентовИсточник(Проценты);
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамГруппа.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамГруппа.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамГруппа.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамГруппа.РасходыФакт, "ЧЦ=15; ЧДЦ=2");
		
		Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоПлан) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.РасходыПлан)  Тогда
			ОбластьСтрокаИсточник.Параметры.СтоимостьПлан = Окр(ВыборкаТаблицаПоИсточникамГруппа.РасходыПлан / ВыборкаТаблицаПоИсточникамГруппа.КоличествоПлан, 2);
		Иначе
			ОбластьСтрокаИсточник.Параметры.СтоимостьПлан = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.РасходыФакт) Тогда
			ОбластьСтрокаИсточник.Параметры.СтоимостьФакт = Окр(ВыборкаТаблицаПоИсточникамГруппа.РасходыФакт / ВыборкаТаблицаПоИсточникамГруппа.КоличествоФакт, 2);
		Иначе
			ОбластьСтрокаИсточник.Параметры.СтоимостьФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтрокаИсточник);

КонецПроцедуры

Процедура ВывестиДетализациюПоГруппеОбщая(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамГруппа, ПравоПросмотраРасходов)
	
	ИсточникПривлеченияРодитель = ВыборкаТаблицаПоИсточникамГруппа.Родитель;
	Если НЕ ЗначениеЗаполнено(ИсточникПривлеченияРодитель) Тогда
		ИсточникПривлеченияРодитель = НСтр("ru = '<Нет группы>'");
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Лид", Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Лид", Ложь, Истина, Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Покупатель", Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Покупатель", Ложь, Истина, Ложь, Истина);

	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Заказ", Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Заказ", Ложь, Истина, Ложь, Истина);
	
	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамГруппа.Родитель,"Общая", Истина, Истина);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.Источник = ИсточникПривлеченияРодитель;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовПлан = ВыборкаТаблицаПоИсточникамГруппа.КоличествоЛидовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовФакт = ВыборкаТаблицаПоИсточникамГруппа.КоличествоЛидовФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияЛиды = ВыборкаТаблицаПоИсточникамГруппа.КонверсияЛиды;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоЛидовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КонверсияЛиды) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамГруппа.КонверсияЛиды 
		/ ВыборкаТаблицаПоИсточникамГруппа.КоличествоЛидовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейПлан = ВыборкаТаблицаПоИсточникамГруппа.КоличествоПокупателейПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейФакт = ВыборкаТаблицаПоИсточникамГруппа.КоличествоПокупателейФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияПокупатели = ВыборкаТаблицаПоИсточникамГруппа.КонверсияПокупатели;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоПокупателейФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КонверсияПокупатели) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамГруппа.КонверсияПокупатели 
		/ ВыборкаТаблицаПоИсточникамГруппа.КоличествоПокупателейФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовПлан = ВыборкаТаблицаПоИсточникамГруппа.КоличествоЗаказовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовФакт = ВыборкаТаблицаПоИсточникамГруппа.КоличествоЗаказовФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияЗаказы = ВыборкаТаблицаПоИсточникамГруппа.КонверсияЗаказы;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КоличествоЗаказовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамГруппа.КонверсияЗаказы) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамГруппа.КонверсияЗаказы 
		/ ВыборкаТаблицаПоИсточникамГруппа.КоличествоЗаказовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = 0;
	КонецЕсли;
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамГруппа.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамГруппа.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамГруппа.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамГруппа.РасходыФакт, "ЧЦ=15; ЧДЦ=2");
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтрокаИсточник);
	
КонецПроцедуры

Процедура ВывестиДетализациюПоИсточникуОбщая(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ПравоПросмотраРасходов)
	
	ИсточникПривлечения = ВыборкаТаблицаПоИсточникамИсточник.Ссылка;
	Если НЕ ЗначениеЗаполнено(ИсточникПривлечения) Тогда
		ИсточникПривлечения = НСтр("ru = '<Не указан>'");
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.Источник = ИсточникПривлечения;
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Лид", Ложь, Ложь);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Лид", Ложь, Ложь, Ложь, Истина);

	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Покупатель", Ложь, Ложь);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Покупатель", Ложь, Ложь, Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Заказ", Ложь, Ложь);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,"Заказ", Ложь, Ложь, Ложь, Истина);

	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка, "Общая", Истина, Ложь);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовПлан = ВыборкаТаблицаПоИсточникамИсточник.КоличествоЛидовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовФакт = ВыборкаТаблицаПоИсточникамИсточник.КоличествоЛидовФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияЛиды = ВыборкаТаблицаПоИсточникамИсточник.КонверсияЛиды;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоЛидовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КонверсияЛиды) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамИсточник.КонверсияЛиды 
		/ ВыборкаТаблицаПоИсточникамИсточник.КоличествоЛидовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейПлан = ВыборкаТаблицаПоИсточникамИсточник.КоличествоПокупателейПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейФакт = ВыборкаТаблицаПоИсточникамИсточник.КоличествоПокупателейФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияПокупатели = ВыборкаТаблицаПоИсточникамИсточник.КонверсияПокупатели;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоПокупателейФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КонверсияПокупатели) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамИсточник.КонверсияПокупатели 
		/ ВыборкаТаблицаПоИсточникамИсточник.КоличествоПокупателейФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовПлан = ВыборкаТаблицаПоИсточникамИсточник.КоличествоЗаказовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовФакт = ВыборкаТаблицаПоИсточникамИсточник.КоличествоЗаказовФакт;
	ОбластьСтрокаИсточник.Параметры.КонверсияЗаказы = ВыборкаТаблицаПоИсточникамИсточник.КонверсияЗаказы;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоЗаказовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КонверсияЗаказы) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамИсточник.КонверсияЗаказы 
		/ ВыборкаТаблицаПоИсточникамИсточник.КоличествоЗаказовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = 0;
	КонецЕсли;
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамИсточник.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамИсточник.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамИсточник.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамИсточник.РасходыФакт, "ЧЦ=15; ЧДЦ=2");	
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтрокаИсточник);
	
КонецПроцедуры

Процедура ВывестиДетализациюПоИсточнику(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов)
	
	ИсточникПривлечения = ВыборкаТаблицаПоИсточникамИсточник.Ссылка;
	Если НЕ ЗначениеЗаполнено(ИсточникПривлечения) Тогда
		ИсточникПривлечения = НСтр("ru = '<Не указан>'");
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточник = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,ОбъектВоронки, Ложь, Ложь);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникКонверсия = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка, ОбъектВоронки, Ложь, Ложь, Ложь, Истина);
		
	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,ОбъектВоронки, Истина, Ложь);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.Источник = ИсточникПривлечения;
	ОбластьСтрокаИсточник.Параметры.КоличествоФакт = ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт;
	ОбластьСтрокаИсточник.Параметры.Конверсия = ВыборкаТаблицаПоИсточникамИсточник.Конверсия;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.Конверсия) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамИсточник.Конверсия 
		/ ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПлан = ВыборкаТаблицаПоИсточникамИсточник.КоличествоПлан;
	
	Если ЗначениеЗаполнено(ОбщееКоличество) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт) Тогда
		Проценты = Окр(ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт / ОбщееКоличество * 100);
	Иначе
		Проценты = 0;
	КонецЕсли;
	ОбластьСтрокаИсточник.Область("R1C6:R1C8").ЦветТекста = Новый Цвет(128,128,128);
	ОбластьСтрокаИсточник.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентовИсточник(Проценты);
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамИсточник.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамИсточник.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамИсточник.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамИсточник.РасходыФакт, "ЧЦ=15; ЧДЦ=2");
		
		Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоПлан) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.РасходыПлан) Тогда
			ОбластьСтрокаИсточник.Параметры.СтоимостьПлан = Окр(ВыборкаТаблицаПоИсточникамИсточник.РасходыПлан / ВыборкаТаблицаПоИсточникамИсточник.КоличествоПлан,2);
		Иначе
			ОбластьСтрокаИсточник.Параметры.СтоимостьПлан = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт) И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамИсточник.РасходыФакт) Тогда
			ОбластьСтрокаИсточник.Параметры.СтоимостьФакт = Окр(ВыборкаТаблицаПоИсточникамИсточник.РасходыФакт / ВыборкаТаблицаПоИсточникамИсточник.КоличествоФакт,2);
		Иначе
			ОбластьСтрокаИсточник.Параметры.СтоимостьФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтрокаИсточник);
				
КонецПроцедуры

Процедура ВывестиИтогиПоИсточникуОбщие(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамОбщая, ПравоПросмотраРасходов)
	
	ОбластьСтрокаИсточник.Параметры.Источник = НСтр("ru = 'Итого'");
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Лид", Ложь, Истина, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЛиды = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Лид", Ложь, Истина, Истина, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Покупатель", Ложь, Истина, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияПокупатели = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Покупатель", Ложь, Истина, Истина, Истина);

	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Заказ", Ложь, Истина, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаКонверсияЗаказы = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка,"Заказ", Ложь, Истина, Истина, Истина);
	
	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамОбщая.Ссылка, "Общая", Истина, Истина, Истина);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовПлан = ВыборкаТаблицаПоИсточникамОбщая.КоличествоЛидовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЛидовФакт = ВыборкаТаблицаПоИсточникамОбщая.КоличествоЛидовФакт;
	
	ОбластьСтрокаИсточник.Параметры.КонверсияЛиды = ВыборкаТаблицаПоИсточникамОбщая.КонверсияЛиды;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КоличествоЛидовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КонверсияЛиды) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамОбщая.КонверсияЛиды 
		/ ВыборкаТаблицаПоИсточникамОбщая.КоличествоЛидовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЛидыПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейПлан = ВыборкаТаблицаПоИсточникамОбщая.КоличествоПокупателейПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоПокупателейФакт = ВыборкаТаблицаПоИсточникамОбщая.КоличествоПокупателейФакт;
	
	ОбластьСтрокаИсточник.Параметры.КонверсияПокупатели = ВыборкаТаблицаПоИсточникамОбщая.КонверсияПокупатели;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КоличествоПокупателейФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КонверсияПокупатели) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамОбщая.КонверсияПокупатели 
		/ ВыборкаТаблицаПоИсточникамОбщая.КоличествоПокупателейФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПокупателиПроцент = 0;
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовПлан = ВыборкаТаблицаПоИсточникамОбщая.КоличествоЗаказовПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоЗаказовФакт = ВыборкаТаблицаПоИсточникамОбщая.КоличествоЗаказовФакт;
	
	ОбластьСтрокаИсточник.Параметры.КонверсияЗаказы = ВыборкаТаблицаПоИсточникамОбщая.КонверсияЗаказы;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КоличествоЗаказовФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КонверсияЗаказы) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамОбщая.КонверсияЗаказы 
		/ ВыборкаТаблицаПоИсточникамОбщая.КоличествоЗаказовФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияЗаказыПроцент = 0;
	КонецЕсли;
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамОбщая.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамОбщая.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамОбщая.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамОбщая.РасходыФакт, "ЧЦ=15; ЧДЦ=2");
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтрокаИсточник);
	
КонецПроцедуры

Процедура ВывестиОбщуюТаблицуПоИсточникам(ДокументРезультат, МакетОтчета, НастройкиКД, ДанныеРасшифровки, МенеджерВременныхТаблиц, ТекстЗапросаПоИсточникам)
	
	ПравоПросмотраРасходов = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РасходыНаИсточникиПривлечения);
	
	Если НЕ ПравоПросмотраРасходов Тогда
		ОбластьШапкаИсточник = МакетОтчета.ПолучитьОбласть("ОбластьШапкаИсточникОбщая");
		ОбластьСтрокаИсточник = МакетОтчета.ПолучитьОбласть("ОбластьСтрокаИсточникОбщая");
	Иначе
		ОбластьШапкаИсточник = МакетОтчета.ПолучитьОбласть("СтрокаШапкаИсточникОбщая");
		ОбластьСтрокаИсточник = МакетОтчета.ПолучитьОбласть("СтрокаИсточникОбщая");
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("СтрокаЗаголовок");
	ОбластьОтступ = МакетОтчета.ПолучитьОбласть("СтрокаОтступ");
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоИсточникам;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НастройкиКД.ПараметрыДанных.Элементы.Найти("СтПериод").Значение.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", НастройкиКД.ПараметрыДанных.Элементы.Найти("СтПериод").Значение.ДатаОкончания);

	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		ТекстОтсутствуютДанные = НСтр("ru = 'Данные отсутствуют'");
		ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Источники привлечения'"), ТекстОтсутствуютДанные, Ложь);
		Возврат;
	КонецЕсли;
		
	ВыборкаТаблицаПоИсточникамОбщая = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаПоИсточникамОбщая.Следующий() Цикл
		
		ВыборкаТаблицаПоИсточникамГруппа = ВыборкаТаблицаПоИсточникамОбщая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НетДанныхВОбщейТаблицеИсточников(ВыборкаТаблицаПоИсточникамОбщая) Тогда
			ТекстОтсутствуютДанные = НСтр("ru = 'Данные отсутствуют'");
			ВывестиОбластьОтсутствуютДанные(ДокументРезультат, МакетОтчета, НСтр("ru = 'Источники привлечения'"), ТекстОтсутствуютДанные, Ложь);
			Возврат;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заголовок = НСтр("ru = 'Источники привлечения'");
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		ДокументРезультат.НачатьГруппуСтрок( НСтр("ru = 'Источники привлечения'"), Ложь);
		
		ДокументРезультат.Вывести(ОбластьОтступ);
		ДокументРезультат.Вывести(ОбластьШапкаИсточник);

		Пока ВыборкаТаблицаПоИсточникамГруппа.Следующий() Цикл
			
			Если НетДанныхВОбщейТаблицеИсточников(ВыборкаТаблицаПоИсточникамГруппа) Тогда
				Продолжить;				
			КонецЕсли;
						
			ВывестиДетализациюПоГруппеОбщая(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамГруппа, ПравоПросмотраРасходов);
			ВыборкаТаблицаПоИсточникамИсточник = ВыборкаТаблицаПоИсточникамГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДокументРезультат.НачатьГруппуСтрок(ВыборкаТаблицаПоИсточникамГруппа.Родитель, Ложь);
			
			Пока ВыборкаТаблицаПоИсточникамИсточник.Следующий() Цикл
				
				Если НетДанныхВОбщейТаблицеИсточников(ВыборкаТаблицаПоИсточникамИсточник) Тогда
					Продолжить;				
				КонецЕсли;
			
				ВывестиДетализациюПоИсточникуОбщая(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ПравоПросмотраРасходов);
			КонецЦикла;
			
			ДокументРезультат.ЗакончитьГруппуСтрок();
			
		КонецЦикла;
		
		ВывестиИтогиПоИсточникуОбщие(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамОбщая, ПравоПросмотраРасходов)

	КонецЦикла;
	
	ДокументРезультат.Вывести(ОбластьОтступ);
	ДокументРезультат.ЗакончитьГруппуСтрок();
	
	ДокументРезультат.Вывести(ОбластьОтступ);

КонецПроцедуры

Процедура ВывестиИтогиПоИсточнику(ОбластьСтрокаИсточник, ДанныеРасшифровки, ДокументРезультат, ВыборкаТаблицаПоИсточникамИсточник, ВыборкаТаблицаПоИсточникамОбщая, ОбъектВоронки, ОбщееКоличество, ПравоПросмотраРасходов)
	
	ОбластьСтрокаИсточник.Параметры.Источник = НСтр("ru = 'Итого'");
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточник = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,ОбъектВоронки, Ложь, Ложь, Истина);
	
	ОбластьСтрокаИсточник.Параметры.РасшифровкаИсточникКонверсия = 
	ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка, ОбъектВоронки, Ложь, Ложь, Истина, Истина);
		
	Если ПравоПросмотраРасходов Тогда
		ОбластьСтрокаИсточник.Параметры.РасшифровкаРасходы = 
		ИдентификаторЭлементаРасшифровкиИсточникПривлечения(ДанныеРасшифровки, ВыборкаТаблицаПоИсточникамИсточник.Ссылка,ОбъектВоронки, Истина, Ложь, Истина);
	КонецЕсли;
	
	ОбластьСтрокаИсточник.Параметры.КоличествоПлан = ВыборкаТаблицаПоИсточникамОбщая.КоличествоПлан;
	ОбластьСтрокаИсточник.Параметры.КоличествоФакт = ВыборкаТаблицаПоИсточникамОбщая.КоличествоФакт;
	ОбластьСтрокаИсточник.Параметры.Конверсия = ВыборкаТаблицаПоИсточникамОбщая.Конверсия;
	ОбластьСтрокаИсточник.Параметры.ПредставлениеПроцентов = 0;
	
	Если ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.КоличествоФакт)
		И ЗначениеЗаполнено(ВыборкаТаблицаПоИсточникамОбщая.Конверсия) Тогда
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = Строка(Окр(ВыборкаТаблицаПоИсточникамОбщая.Конверсия 
		/ ВыборкаТаблицаПоИсточникамОбщая.КоличествоФакт * 100)) + "%";
	Иначе
		ОбластьСтрокаИсточник.Параметры.КонверсияПроцент = 0;
	КонецЕсли;
	
	Если ПравоПросмотраРасходов Тогда
		
		ОбластьСтрокаИсточник.Параметры.РасходыПлан    = Формат(ВыборкаТаблицаПоИсточникамОбщая.РасходыПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиПлан    = Формат(ВыборкаТаблицаПоИсточникамОбщая.ВыручкаПлан, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.ПродажиФакт    = Формат(ВыборкаТаблицаПоИсточникамОбщая.ВыручкаФакт, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрокаИсточник.Параметры.РасходыФакт    = Формат(ВыборкаТаблицаПоИсточникамОбщая.РасходыФакт, "ЧЦ=15; ЧДЦ=2");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Запросы

Функция ТекстЗапросаИсточникиПоЛидам(НастройкиКД)
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов) КАК ПлановоеКоличествоЛидов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей) КАК ПлановоеКоличествоПокупателей,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов) КАК ПлановоеКоличествоЗаказов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяСумма) КАК РасходПлан,
	|	СУММА(РасходыНаИсточникиПривлечения.ФактическаяСумма) КАК РасходФакт,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяВыручка) КАК ВыручкаПлан
	|ПОМЕСТИТЬ ВТ_РасходыНаИсточникиПривлечения
	|ИЗ
	|	РегистрСведений.РасходыНаИсточникиПривлечения КАК РасходыНаИсточникиПривлечения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыНаИсточникиПривлечения.ДатаНачала >= &НачалоПериода
	|						ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания <= &НачалоПериода
	|			ИНАЧЕ РасходыНаИсточникиПривлечения.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|					ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И &ФильтрПоИсточнику
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Лиды.ИсточникПривлечения КАК ИсточникПривлечения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Лиды.Лид) КАК КоличествоЛидов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ВТ_Лиды.Лид.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя)
	|				ТОГДА ВТ_Лиды.Лид
	|		КОНЕЦ) КАК КонверсияЛиды
	|ПОМЕСТИТЬ ВТ_ЛидыПоИсточникам
	|ИЗ
	|	ВТ_Лиды КАК ВТ_Лиды
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Лиды.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК Выручка,
	|	КОЛИЧЕСТВО(ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК Покупатель
	|ПОМЕСТИТЬ ВТ_ДанныеВоронкиПоПокупателямВыручка
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиПривлечения.Родитель КАК Родитель,
	|	ИсточникиПривлечения.Ссылка КАК Ссылка,
	|	РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов КАК КоличествоПлан,
	|	ВТ_ЛидыПоИсточникам.КоличествоЛидов КАК КоличествоФакт,
	|	ВТ_ЛидыПоИсточникам.КонверсияЛиды КАК Конверсия,
	|	РасходыНаИсточникиПривлечения.РасходПлан КАК РасходыПлан,
	|	РасходыНаИсточникиПривлечения.РасходФакт КАК РасходыФакт,
	|	РасходыНаИсточникиПривлечения.ВыручкаПлан КАК ВыручкаПлан,
	|	МАКСИМУМ(ВТ_ДанныеВоронкиПоПокупателямВыручка.Выручка) КАК ВыручкаФакт
	|ИЗ
	|	Справочник.ИсточникиПривлеченияПокупателей КАК ИсточникиПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеВоронкиПоПокупателямВыручка КАК ВТ_ДанныеВоронкиПоПокупателямВыручка
	|		ПО (ВТ_ДанныеВоронкиПоПокупателямВыручка.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыНаИсточникиПривлечения КАК РасходыНаИсточникиПривлечения
	|		ПО (РасходыНаИсточникиПривлечения.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЛидыПоИсточникам КАК ВТ_ЛидыПоИсточникам
	|		ПО (ВТ_ЛидыПоИсточникам.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|ГДЕ
	|	ИсточникиПривлечения.ЭтоГруппа = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиПривлечения.Родитель,
	|	ИсточникиПривлечения.Ссылка,
	|	ВТ_ЛидыПоИсточникам.КоличествоЛидов,
	|	ВТ_ЛидыПоИсточникам.КонверсияЛиды,
	|	РасходыНаИсточникиПривлечения.РасходПлан,
	|	РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов,
	|	РасходыНаИсточникиПривлечения.РасходФакт,
	|	РасходыНаИсточникиПривлечения.ВыручкаПлан
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоФакт УБЫВ,
	|	КоличествоПлан УБЫВ
	|ИТОГИ
	|	СУММА(КоличествоПлан),
	|	СУММА(КоличествоФакт),
	|	СУММА(Конверсия),
	|	СУММА(РасходыПлан),
	|	СУММА(РасходыФакт),
	|	СУММА(ВыручкаПлан),
	|	СУММА(ВыручкаФакт)
	|ПО
	|	ОБЩИЕ,
	|	Родитель";
	
	
	Для Каждого ТекЭлементОтбора Из НастройкиКД.Отбор.Элементы Цикл
		
		КомпонентыПути = СтрРазделить(ТекЭлементОтбора.ЛевоеЗначение, ".");
		Если КомпонентыПути.Найти("ИсточникПривлечения") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, 
			"&ФильтрПоИсточнику", 
			"РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_Лиды.ИсточникПривлечения ИЗ ВТ_Лиды)");
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "&ФильтрПоИсточнику", "ИСТИНА");
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаИсточникиПоПокупателям(НастройкиКД)
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов) КАК ПлановоеКоличествоЛидов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей) КАК ПлановоеКоличествоПокупателей,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов) КАК ПлановоеКоличествоЗаказов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяСумма) КАК РасходПлан,
	|	СУММА(РасходыНаИсточникиПривлечения.ФактическаяСумма) КАК РасходФакт,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяВыручка) КАК ВыручкаПлан
	|ПОМЕСТИТЬ ВТ_РасходыНаИсточникиПривлечения
	|ИЗ
	|	РегистрСведений.РасходыНаИсточникиПривлечения КАК РасходыНаИсточникиПривлечения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыНаИсточникиПривлечения.ДатаНачала >= &НачалоПериода
	|						ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания <= &НачалоПериода
	|			ИНАЧЕ РасходыНаИсточникиПривлечения.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|					ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И &ФильтрПоИсточнику
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиПривлечения.Родитель КАК Родитель,
	|	ИсточникиПривлечения.Ссылка КАК Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей КАК КоличествоПлан,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК КоличествоФакт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|					И НЕ ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.Покупатель
	|		КОНЕЦ) КАК Конверсия,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан КАК РасходыПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт КАК РасходыФакт,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан КАК ВыручкаПлан,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК ВыручкаФакт
	|ИЗ
	|	Справочник.ИсточникиПривлеченияПокупателей КАК ИсточникиПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|		ПО ИсточникиПривлечения.Ссылка = ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыНаИсточникиПривлечения КАК ВТ_РасходыНаИсточникиПривлечения
	|		ПО (ВТ_РасходыНаИсточникиПривлечения.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиПривлечения.Родитель,
	|	ИсточникиПривлечения.Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоФакт УБЫВ,
	|	КоличествоПлан УБЫВ
	|ИТОГИ
	|	СУММА(КоличествоПлан),
	|	СУММА(КоличествоФакт),
	|	СУММА(Конверсия),
	|	СУММА(РасходыПлан),
	|	СУММА(РасходыФакт),
	|	СУММА(ВыручкаПлан),
	|	СУММА(ВыручкаФакт)
	|ПО
	|	ОБЩИЕ,
	|	Родитель";
	
	Для Каждого ТекЭлементОтбора Из НастройкиКД.Отбор.Элементы Цикл
		
		КомпонентыПути = СтрРазделить(ТекЭлементОтбора.ЛевоеЗначение, ".");
		Если КомпонентыПути.Найти("ИсточникПривлечения") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, 
			"&ФильтрПоИсточнику", 
			"РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения ИЗ ВТ_ДанныеВоронкиПоПокупателям)");
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "&ФильтрПоИсточнику", "ИСТИНА");
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаИсточникиОбщие(НастройкиКД)
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Покупатели.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_Покупатели.Покупатель КАК Покупатель,
	|	ВТ_Покупатели.ИсточникПривлеченияПокупателя КАК ИсточникПривлеченияПокупателя,
	|	ВТ_Покупатели.ИсточникПривлеченияПокупателя.Родитель КАК ИсточникПривлеченияГруппа,
	|	МАКСИМУМ(ПродажиОбороты.СуммаОборот) КАК Выручка,
	|	МАКСИМУМ(ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот) КАК Прибыль
	|ПОМЕСТИТЬ ВТ_ДанныеВоронкиПоПокупателям
	|ИЗ
	|	ВТ_Покупатели КАК ВТ_Покупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты
	|		ПО ВТ_Покупатели.Покупатель = ПродажиОбороты.Контрагент
	|ГДЕ
	|	НЕ ВТ_Покупатели.Покупатель ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Покупатели.ПолеГруппировки,
	|	ВТ_Покупатели.Покупатель,
	|	ВТ_Покупатели.ИсточникПривлеченияПокупателя.Родитель,
	|	ВТ_Покупатели.ИсточникПривлеченияПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов) КАК ПлановоеКоличествоЛидов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей) КАК ПлановоеКоличествоПокупателей,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов) КАК ПлановоеКоличествоЗаказов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяСумма) КАК РасходПлан,
	|	СУММА(РасходыНаИсточникиПривлечения.ФактическаяСумма) КАК РасходФакт,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяВыручка) КАК ВыручкаПлан
	|ПОМЕСТИТЬ ВТ_РасходыНаИсточникиПривлечения
	|ИЗ
	|	РегистрСведений.РасходыНаИсточникиПривлечения КАК РасходыНаИсточникиПривлечения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыНаИсточникиПривлечения.ДатаНачала >= &НачалоПериода
	|						ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания <= &НачалоПериода
	|			ИНАЧЕ РасходыНаИсточникиПривлечения.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|					ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И &ФильтрПоИсточнику
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Лиды.ИсточникПривлеченияЛида КАК ИсточникПривлеченияЛида,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Лиды.Лид) КАК КоличествоЛидов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ВТ_Лиды.ВариантЗавершенияЛида = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя)
	|				ТОГДА ВТ_Лиды.Лид
	|		КОНЕЦ) КАК КонверсияЛиды
	|ПОМЕСТИТЬ ВТ_ИсточникиЛиды
	|ИЗ
	|	ВТ_Лиды КАК ВТ_Лиды
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Лиды.ИсточникПривлеченияЛида
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлеченияПокупателя КАК ИсточникПривлечения,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК Выручка,
	|	КОЛИЧЕСТВО(ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК Покупатель
	|ПОМЕСТИТЬ ВТ_ДанныеВоронкиПоПокупателямВыручка
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлеченияПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.ИсточникПривлеченияЗаказа КАК ИсточникПривлеченияЗаказа,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Заказы.Заказ) КАК КоличествоЗаказов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Заказы.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Успешно)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КонверсияЗаказы
	|ПОМЕСТИТЬ ВТ_ИсточникиЗаказы
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Заказы.ИсточникПривлеченияЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиПривлечения.Родитель КАК Родитель,
	|	ИсточникиПривлечения.Ссылка КАК Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов КАК КоличествоЛидовПлан,
	|	ВТ_ИсточникиЛиды.КоличествоЛидов КАК КоличествоЛидовФакт,
	|	ВТ_ИсточникиЛиды.КонверсияЛиды КАК КонверсияЛиды,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей КАК КоличествоПокупателейПлан,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК КоличествоПокупателейФакт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|					И НЕ ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.Покупатель
	|		КОНЕЦ) КАК КонверсияПокупатели,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов КАК КоличествоЗаказовПлан,
	|	ВТ_ИсточникиЗаказы.КоличествоЗаказов КАК КоличествоЗаказовФакт,
	|	ВТ_ИсточникиЗаказы.КонверсияЗаказы КАК КонверсияЗаказы,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан КАК РасходыПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт КАК РасходыФакт,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан КАК ВыручкаПлан,
	|	ВТ_ДанныеВоронкиПоПокупателямВыручка.Выручка КАК ВыручкаФакт
	|ИЗ
	|	Справочник.ИсточникиПривлеченияПокупателей КАК ИсточникиПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсточникиЛиды КАК ВТ_ИсточникиЛиды
	|		ПО (ВТ_ИсточникиЛиды.ИсточникПривлеченияЛида = ИсточникиПривлечения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсточникиЗаказы КАК ВТ_ИсточникиЗаказы
	|		ПО (ВТ_ИсточникиЗаказы.ИсточникПривлеченияЗаказа = ИсточникиПривлечения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|		ПО ИсточникиПривлечения.Ссылка = ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлеченияПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеВоронкиПоПокупателямВыручка КАК ВТ_ДанныеВоронкиПоПокупателямВыручка
	|		ПО (ВТ_ДанныеВоронкиПоПокупателямВыручка.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыНаИсточникиПривлечения КАК ВТ_РасходыНаИсточникиПривлечения
	|		ПО (ВТ_РасходыНаИсточникиПривлечения.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиПривлечения.Родитель,
	|	ИсточникиПривлечения.Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов,
	|	ВТ_ИсточникиЛиды.КоличествоЛидов,
	|	ВТ_ИсточникиЛиды.КонверсияЛиды,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан,
	|	ВТ_ДанныеВоронкиПоПокупателямВыручка.Выручка,
	|	ВТ_ИсточникиЗаказы.КоличествоЗаказов,
	|	ВТ_ИсточникиЗаказы.КонверсияЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоЛидовФакт УБЫВ,
	|	КоличествоЛидовПлан УБЫВ,
	|	КоличествоПокупателейФакт УБЫВ,
	|	КоличествоПокупателейПлан УБЫВ
	|ИТОГИ
	|	СУММА(КоличествоЛидовПлан),
	|	СУММА(КоличествоЛидовФакт),
	|	СУММА(КонверсияЛиды),
	|	СУММА(КоличествоПокупателейПлан),
	|	СУММА(КоличествоПокупателейФакт),
	|	СУММА(КонверсияПокупатели),
	|	СУММА(КоличествоЗаказовПлан),
	|	СУММА(КоличествоЗаказовФакт),
	|	СУММА(КонверсияЗаказы),
	|	СУММА(РасходыПлан),
	|	СУММА(РасходыФакт),
	|	СУММА(ВыручкаПлан),
	|	СУММА(ВыручкаФакт)
	|ПО
	|	ОБЩИЕ,
	|	Родитель";
	
	Для Каждого ТекЭлементОтбора Из НастройкиКД.Отбор.Элементы Цикл
		
		КомпонентыПути = СтрРазделить(ТекЭлементОтбора.ЛевоеЗначение, ".");
		Если КомпонентыПути.Найти("ИсточникПривлечения") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = СтрЗаменить(Текст, 
		"&ФильтрПоИсточнику", 
		"РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_Заказы.ИсточникПривлеченияЗаказа ИЗ ВТ_Заказы) 
		|ИЛИ РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_Лиды.ИсточникПривлеченияЛида ИЗ ВТ_Лиды)
		|ИЛИ РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлеченияПокупателя ИЗ ВТ_ДанныеВоронкиПоПокупателям)");
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, "&ФильтрПоИсточнику", "ИСТИНА");
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаИсточникиПоЗаказам(НастройкиКД)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Заказы.ИсточникПривлечения.Родитель КАК ИсточникПривлеченияРодитель,
	|	ВТ_Заказы.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка
	|ПОМЕСТИТЬ ВТ_ВыручкаПоЗаказам
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты КАК ПродажиОбороты
	|		ПО ВТ_Заказы.Заказ = ПродажиОбороты.ЗаказПокупателя
	|ГДЕ
	|	НЕ ВТ_Заказы.Заказ ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Заказы.ИсточникПривлечения.Родитель,
	|	ВТ_Заказы.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения КАК ИсточникПривлечения,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЛидов) КАК ПлановоеКоличествоЛидов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоПокупателей) КАК ПлановоеКоличествоПокупателей,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов) КАК ПлановоеКоличествоЗаказов,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяСумма) КАК РасходПлан,
	|	СУММА(РасходыНаИсточникиПривлечения.ФактическаяСумма) КАК РасходФакт,
	|	СУММА(РасходыНаИсточникиПривлечения.ПлановаяВыручка) КАК ВыручкаПлан
	|ПОМЕСТИТЬ ВТ_РасходыНаИсточникиПривлечения
	|ИЗ
	|	РегистрСведений.РасходыНаИсточникиПривлечения КАК РасходыНаИсточникиПривлечения
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РасходыНаИсточникиПривлечения.ДатаНачала >= &НачалоПериода
	|						ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания <= &НачалоПериода
	|			ИНАЧЕ РасходыНаИсточникиПривлечения.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода
	|					ИЛИ РасходыНаИсточникиПривлечения.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И &ФильтрПоИсточникам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыНаИсточникиПривлечения.ИсточникПривлечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиПривлечения.Родитель КАК Родитель,
	|	ИсточникиПривлечения.Ссылка КАК Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов КАК КоличествоПлан,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Заказы.Заказ) КАК КоличествоФакт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ВТ_Заказы.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Успешно)
	|				ТОГДА ВТ_Заказы.Заказ
	|		КОНЕЦ) КАК Конверсия,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан КАК РасходыПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт КАК РасходыФакт,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан КАК ВыручкаПлан,
	|	ВТ_ВыручкаПоЗаказам.Выручка КАК ВыручкаФакт
	|ИЗ
	|	Справочник.ИсточникиПривлеченияПокупателей КАК ИсточникиПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО ИсточникиПривлечения.Ссылка = ВТ_Заказы.ИсточникПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыручкаПоЗаказам КАК ВТ_ВыручкаПоЗаказам
	|		ПО ИсточникиПривлечения.Ссылка = ВТ_ВыручкаПоЗаказам.ИсточникПривлечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыНаИсточникиПривлечения КАК ВТ_РасходыНаИсточникиПривлечения
	|		ПО (ВТ_РасходыНаИсточникиПривлечения.ИсточникПривлечения = ИсточникиПривлечения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиПривлечения.Родитель,
	|	ИсточникиПривлечения.Ссылка,
	|	ВТ_РасходыНаИсточникиПривлечения.ПлановоеКоличествоЗаказов,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходПлан,
	|	ВТ_РасходыНаИсточникиПривлечения.ВыручкаПлан,
	|	ВТ_ВыручкаПоЗаказам.Выручка,
	|	ВТ_РасходыНаИсточникиПривлечения.РасходФакт
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоФакт УБЫВ,
	|	КоличествоПлан УБЫВ
	|ИТОГИ
	|	СУММА(КоличествоПлан),
	|	СУММА(КоличествоФакт),
	|	СУММА(Конверсия),
	|	СУММА(РасходыПлан),
	|	СУММА(РасходыФакт),
	|	СУММА(ВыручкаПлан),
	|	СУММА(ВыручкаФакт)
	|ПО
	|	ОБЩИЕ,
	|	Родитель";
	
	Для Каждого ТекЭлементОтбора Из НастройкиКД.Отбор.Элементы Цикл
		
		КомпонентыПути = СтрРазделить(ТекЭлементОтбора.ЛевоеЗначение, ".");
		Если КомпонентыПути.Найти("ИсточникПривлечения") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ФильтрПоИсточникам", 
		"РасходыНаИсточникиПривлечения.ИсточникПривлечения В (ВЫБРАТЬ ВТ_Заказы.ИсточникПривлечения ИЗ ВТ_Заказы)");
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФильтрПоИсточникам", "ИСТИНА");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВоронкиПоЗаказам(ОбъектВоронки, ПолеГруппировки, ВариантВоронки, НастройкиКД)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ПолеГруппировкиЗаказы КАК ПолеГруппировки,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ КАК Заказ,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ.ВидЗаказа КАК ВидЗаказа,
	|	ИсторияСостоянийЗаказовСрезПоследних.Состояние КАК СостояниеОтмены,
	|	ИсторияСостоянийЗаказовСрезПоследних.Заказ.ПричинаОтмены КАК ПричинаОтмены,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.СуммаДокумента, 0) КАК СуммаДокумента,
	|	1 КАК Потеря
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийЗаказов.СрезПоследних(
	|			,
	|			Заказ.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
	|				И Заказ В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Заказы.Заказ
	|					ИЗ
	|						ВТ_Заказы)) КАК ИсторияСостоянийЗаказовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
	|		ПО (СвязиКонтрагентЛид.Контрагент = ИсторияСостоянийЗаказовСрезПоследних.Заказ.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж
	|		ПО (ВТ_ДанныеВоронкиПродаж.Состояние = ИсторияСостоянийЗаказовСрезПоследних.Состояние)
	|			И ИсторияСостоянийЗаказовСрезПоследних.Заказ = ВТ_ДанныеВоронкиПродаж.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПродаж.ГруппировкаВидОперации КАК ГруппировкаВидОперации,
	|	ВТ_ДанныеВоронкиПродаж.Порядок КАК Порядок,
	|	ВТ_ДанныеВоронкиПродаж.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПродаж.ВидЗаказа КАК ВидЗаказа,
	|	ВТ_ДанныеВоронкиПродаж.ВидОперации КАК ВидОперации,
	|	ВТ_ДанныеВоронкиПродаж.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Длительность <> 0
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.Длительность
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Длительность,
	|	ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК УчитыватьВВоронке,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.СуммаДокумента, 0) * ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК СуммаДокумента,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.СуммаДокумента, 0) КАК ИтогСуммаДокумента,
	|	ВТ_ДанныеВоронкиПродаж.Успешные КАК ИтогУспешные,
	|	ВТ_ДанныеВоронкиПродаж.Отмененные КАК ИтогОтмененные,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Порядок = 1
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИтогВсего,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|				ИЛИ ВТ_ДанныеВоронкиПродаж.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.СуммаДокумента * ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИтогСуммаУспешных,
	|	ВТ_ДанныеВоронкиПродаж.СуммаОтмененных КАК ИтогСуммаОтмененных
	|ИЗ
	|	ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж
	|ГДЕ
	|	&ФильтрПолеГруппировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеГруппировки,
	|	ВидЗаказа,
	|	Порядок,
	|	Состояние
	|ИТОГИ
	|	СРЕДНЕЕ(Длительность),
	|	СУММА(УчитыватьВВоронке),
	|	СУММА(СуммаДокумента),
	|	СУММА(ИтогСуммаДокумента),
	|	СУММА(ИтогУспешные),
	|	СУММА(ИтогОтмененные),
	|	СУММА(ИтогВсего),
	|	СУММА(ИтогСуммаУспешных),
	|	СУММА(ИтогСуммаОтмененных)
	|ПО
	|	ПолеГруппировки,
	|	ГруппировкаВидОперации,
	|	ВидЗаказа,
	|	Порядок,
	|	Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеВоронкиПродаж.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж";
	
	Если ОбъектВоронки = "Лид" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_Заказы","ВТ_Лиды");
	ИначеЕсли ОбъектВоронки = "Покупатель" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_Заказы","ВТ_Покупатели");
	КонецЕсли;
	
	Если ОбъектВоронки = "Лид" И ВариантВоронки <> ВариантВоронкиПоЗаказам() Тогда
		ТекстЗапроса = Отчеты.ВоронкаПродаж.ТекстЗапросаСУстановленнымПолемГруппировки(ТекстЗапроса, "СвязиКонтрагентЛид", НастройкиКД, "Заказ");
	Иначе
		ТекстЗапроса = Отчеты.ВоронкаПродаж.ТекстЗапросаСУстановленнымПолемГруппировки(ТекстЗапроса, "ИсторияСостоянийЗаказовСрезПоследних", НастройкиКД, "Заказ");
	КонецЕсли;
	
	Если ПолеГруппировки <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФильтрПолеГруппировки","ВТ_ДанныеВоронкиПродаж.ПолеГруппировки = &ПолеГруппировки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ФильтрПолеГруппировки","ИСТИНА");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВоронкиПоЛидам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ПолеГруппировкиЛиды КАК ПолеГруппировки,
	|	ИсторияСостоянийЛидовСрезПоследних.Лид КАК Лид,
	|	ИсторияСостоянийЛидовСрезПоследних.Состояние КАК СостояниеОтмены,
	|	ИсторияСостоянийЛидовСрезПоследних.Лид.ПричинаНеуспешногоЗавершенияРаботы КАК ПричинаОтмены,
	|	1 КАК Потеря
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийЛидов.СрезПоследних(
	|			,
	|			Лид.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
	|				И Лид В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_Лиды.Лид
	|					ИЗ
	|						ВТ_Лиды)) КАК ИсторияСостоянийЛидовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПродаж.Порядок КАК Порядок,
	|	ВТ_ДанныеВоронкиПродаж.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПродаж.Состояние КАК Состояние,
	|	ВТ_ДанныеВоронкиПродаж.ИсточникПривлечения КАК ИсточникПривлечения,
	|	ВТ_ДанныеВоронкиПродаж.ИсточникПривлечения.Родитель КАК ИсточникПривлеченияРодитель,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Длительность <> 0
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.Длительность
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Длительность,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Состояние <> 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группировка,
	|	ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК УчитыватьВВоронке,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.ИтогСуммаДокумента, 0) * ВТ_ДанныеВоронкиПродаж.ИтогВсего КАК ИтогСуммаДокумента,
	|	ВТ_ДанныеВоронкиПродаж.ИтогУспешные КАК ИтогУспешные,
	|	ВТ_ДанныеВоронкиПродаж.ИтогОтмененные КАК ИтогОтмененные,
	|	ВТ_ДанныеВоронкиПродаж.ИтогВсего КАК ИтогВсего,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.ИтогСуммаУспешных, 0) КАК ИтогСуммаУспешных,
	|	ЕСТЬNULL(ВТ_ДанныеВоронкиПродаж.ИтогСуммаОтмененных, 0) КАК ИтогСуммаОтмененных
	|ИЗ
	|	ВТ_ДанныеВоронкиПродажЛиды КАК ВТ_ДанныеВоронкиПродаж
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеГруппировки,
	|	Порядок,
	|	Состояние,
	|	ИтогВсего УБЫВ
	|ИТОГИ
	|	СРЕДНЕЕ(Длительность),
	|	СУММА(УчитыватьВВоронке),
	|	СУММА(ИтогСуммаДокумента),
	|	СУММА(ИтогУспешные),
	|	СУММА(ИтогОтмененные),
	|	СУММА(ИтогВсего),
	|	СУММА(ИтогСуммаУспешных),
	|	СУММА(ИтогСуммаОтмененных)
	|ПО
	|	ИсточникПривлечения,
	|	ИсточникПривлеченияРодитель,
	|	ПолеГруппировки,
	|	Группировка,
	|	Порядок,
	|	Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки КАК ПолеГруппировки,
	|	КОЛИЧЕСТВО(ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК ИтогВсего,
	|	0 КАК Длительность,
	|	0 КАК ИтогСуммаУспешных,
	|	0 КАК ИтогОтмененные,
	|	0 КАК ИтогСуммаОтмененных,
	|	0 КАК ИтогСуммаДокумента,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК Выручка,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Прибыль) КАК Прибыль,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ(ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|						И ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИтогУспешные,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоАктивныхЗаказов > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВедетсяРабота,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоАктивныхЗаказов > 0
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.СуммаАктивныхЗаказов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаАктивныхЗаказов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоОтмененныхЗаказов > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтменилиЗаказ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоОтмененныхЗаказов > 0
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.СуммаОтмененныхЗаказов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОтмененныхЗаказов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|					И ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL
	|					И ВТ_ДанныеВоронкиПоПокупателям.КоличествоЗаказов = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НетПродажИЗаказов
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения КАК ИсточникПривлечения,
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения.Родитель КАК ИсточникПривлеченияРодитель,
	|	ВТ_ДанныеВоронкиПоПокупателям.Покупатель КАК Покупатель,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК Выручка,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Прибыль) КАК Прибыль
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|ГДЕ
	|	НЕ ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|	И НЕ ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВоронкиПоПокупателям.Покупатель,
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения.Родитель,
	|	ВТ_ДанныеВоронкиПоПокупателям.ИсточникПривлечения";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВоронкиПоПокупателям()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Покупатели.Покупатель КАК Покупатель
	|ИЗ
	|	ВТ_Покупатели КАК ВТ_Покупатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки КАК ПолеГруппировки,
	|	КОЛИЧЕСТВО(ВТ_ДанныеВоронкиПоПокупателям.Покупатель) КАК ИтогВсего,
	|	0 КАК Длительность,
	|	0 КАК ИтогСуммаУспешных,
	|	0 КАК ИтогОтмененные,
	|	0 КАК ИтогСуммаОтмененных,
	|	0 КАК ИтогСуммаДокумента,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Выручка) КАК Выручка,
	|	СУММА(ВТ_ДанныеВоронкиПоПокупателям.Прибыль) КАК Прибыль,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ(ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|						И ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИтогУспешные,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоАктивныхЗаказов > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВедетсяРабота,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоАктивныхЗаказов > 0
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.СуммаАктивныхЗаказов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаАктивныхЗаказов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоОтмененныхЗаказов > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтменилиЗаказ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.КоличествоОтмененныхЗаказов > 0
	|				ТОГДА ВТ_ДанныеВоронкиПоПокупателям.СуммаОтмененныхЗаказов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОтмененныхЗаказов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|					И ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL
	|					И ВТ_ДанныеВоронкиПоПокупателям.КоличествоЗаказов = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НетПродажИЗаказов
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПоПокупателям.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПоПокупателям.Покупатель КАК Покупатель
	|ИЗ
	|	ВТ_ДанныеВоронкиПоПокупателям КАК ВТ_ДанныеВоронкиПоПокупателям
	|ГДЕ
	|	НЕ ВТ_ДанныеВоронкиПоПокупателям.Выручка ЕСТЬ NULL
	|	И НЕ ВТ_ДанныеВоронкиПоПокупателям.Прибыль ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВариантыВоронки

Функция ВариантВоронкиПоПокупателям()
	
	Возврат "ПоПокупателям"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоМенеджерам()
	
	Возврат "ПоМенеджерам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоЛидам()
	
	Возврат "ПоЛидам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоИсточникам()
	
	Возврат "ПоИсточникам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоПодразделениям()
	
	Возврат "ПоПодразделениям"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоЗаказам()
	
	Возврат "ПоЗаказам"; // Не локализуется
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли