#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Вызывается при работе в модели сервиса для получения сведений о предопределенных вариантах отчета.
//
// Возвращаемое значение:
//  Массив из Структура:
//    * Имя           - Строка - имя варианта отчета; например, "Основной";
//    * Представление - Строка - имя варианта отчета; например, НСтр("ru = 'Динамика изменений файлов'").
//
Функция ВариантыНастроек() Экспорт 
	
	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Имя, Представление", "Основной", 
		НСтр("ru = 'Анализ бизнеса'")));
	Возврат Результат;
	
КонецФункции

// Параметры:
//   Настройки - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.Настройки.
//   НастройкиОтчета - см. ВариантыОтчетов.ОписаниеОтчета.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализБизнеса, "Основной");
	Вариант.Описание = НСтр("ru = 'Сводный отчет для руководителя. Отображает состояние компании в трех разрезах: Доходы и расходы, Денежный поток и Баланс.'");
	Вариант.Размещение.Вставить(ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы(), "Важный");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

// Сохраняет установленные настройки отборов переданного отчета
//
// Параметры:
//  Объект - ОбработкаОбъект.АнализБизнеса - объект отчета, настройки которого необходимо сохранить.
//  ДанныеМеток - ТаблицаЗначений - таблица, которая содержит данные установленных отборов отчета.
//
Процедура СохранитьНастройкиОтборов(Объект, ДанныеМеток) Экспорт
	
	ИмяКлючаОбъекта = ПолучитьКлючОбъекта();
	
	ТаблицаДанныеМеток = ДанныеМеток.Выгрузить();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДанныеМеток", 		     ТаблицаДанныеМеток);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПериодОтчета", 		     Объект.ПериодОтчета);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПланФакт", 			     Объект.ПланФакт);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_СценарийПланирования",   Объект.СценарийПланирования);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_Периодичность", 	     Объект.Периодичность);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОткрытаяВкладка", 	     Объект.Периодичность);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПоказыватьПустыеСтроки", Объект.ПоказыватьПустыеСтроки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_Группировка",			 Объект.Группировка);
	
	
КонецПроцедуры

// Восстанавливает установленные настройки отборов переданного отчета
//
// Параметры:
//  Объект - ОбработкаОбъект.АнализБизнеса - объект отчета, настройки которого необходимо восстановить.
//  ДанныеМеток - ТаблицаЗначений - таблица, в которую будут помещены данные установленных отборов отчета.
//
Процедура ВосстановитьНастройкиОтборов(Объект, ДанныеМеток) Экспорт
	
	// Инициализация по умолчанию
	Объект.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие; 
	Объект.Периодичность 		= Перечисления.Периодичность.Месяц;
	Объект.ПланФакт 			= Перечисления.ПланФакт.Факт;
	Объект.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
	
	// Восстановление настроек
	ИмяКлючаОбъекта = ПолучитьКлючОбъекта();
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ДанныеМеток");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Если ТипЗнч(ДанныеМеток) = Тип("ДанныеФормыКоллекция") Тогда
			ДанныеМеток.Загрузить(СохраненноеЗначение);
		Иначе
			ДанныеМеток = СохраненноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПериодОтчета");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Объект.ПериодОтчета = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПланФакт");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Объект.ПланФакт = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_СценарийПланирования");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Объект.СценарийПланирования = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_Периодичность");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Объект.Периодичность = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_Группировка");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Объект.Группировка = СохраненноеЗначение;
	Иначе
		Объект.Группировка = Перечисления.ГруппировкаАнализаБизнеса.Показатели;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ПоказыватьПустыеСтроки");
	Если СохраненноеЗначение <> Неопределено Тогда
		Объект.ПоказыватьПустыеСтроки = СохраненноеЗначение;
	Иначе
		Объект.ПоказыватьПустыеСтроки = Истина;
	КонецЕсли;
	
	ВыровнятьПериодПоПериодичности(Объект);
	
КонецПроцедуры

// Сохраняет переданные настройки формы: Активная гиперссылка и подсказки
//
// Параметры:
//  СтруктураНастроек - Структура - Настройки для сохранения.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек) Экспорт
	
	ИмяКлючаОбъекта = ПолучитьКлючОбъекта();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_АктивнаяГиперссылка", 		  СтруктураНастроек.АктивнаяГиперссылка);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтображатьПодсказкуПроверки", СтруктураНастроек.ОтображатьПодсказкуПроверки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтображатьПодсказкуЦели", 	  СтруктураНастроек.ОтображатьПодсказкуЦели);
	
КонецПроцедуры

// Заполняет передаваемую структуру настройками формы: Активная гиперссылка и подсказки
//
// Параметры:
//  СтруктураНастроек - Структура - Настройки для восстановления.
//
Процедура ВосстановитьНастройкиФормы(СтруктураНастроек) Экспорт
	
	// Восстановление настроек
	ИмяКлючаОбъекта = ПолучитьКлючОбъекта();
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_АктивнаяГиперссылка");
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		СтруктураНастроек.АктивнаяГиперссылка = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтображатьПодсказкуПроверки");
	Если СохраненноеЗначение <> Неопределено Тогда
		СтруктураНастроек.ОтображатьПодсказкуПроверки = СохраненноеЗначение;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ОтображатьПодсказкуЦели");
	Если СохраненноеЗначение  <> Неопределено Тогда
		СтруктураНастроек.ОтображатьПодсказкуЦели = СохраненноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует пустую структуру с настройками формы: Активная гиперссылка и подсказки
//
//
Функция ИнициализироватьНастройкиФормы() Экспорт
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("АктивнаяГиперссылка", 		   "");
	НастройкиФормы.Вставить("ОтображатьПодсказкуПроверки", Истина);
	НастройкиФормы.Вставить("ОтображатьПодсказкуЦели", 	   Истина);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Формирует отчет "АнализБизнеса" по переданным параметрам
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - табличный документ, в который будет помещен отчет.
//  ДанныеОтчета - Структура - параметры необходимые для формирования отчета.
//
Процедура СформироватьОтчет(ДокументРезультат, ДанныеОтчета) Экспорт
	
	ДокументРезультат.Очистить();
	
	Области = ИнициализироватьОбластиОтчета(ДанныеОтчета);
	
	// Вывод заголовка отчета
	Если ДанныеОтчета.ЭтоВыводНаПечать Тогда
		Области.ЗаголовокОтчета.Параметры.ВидОтчета = ДанныеОтчета.ВидОтчетаОтбор;
		Области.ЗаголовокОтчета.Параметры.ПредставлениеПериода = ПредставлениеПериода(ДанныеОтчета.ПериодОтчета.ДатаНачала, ДанныеОтчета.ПериодОтчета.ДатаОкончания);
		ДокументРезультат.Вывести(Области.ЗаголовокОтчета);
	КонецЕсли;
	
	// Вывод шапки отчета
	ДокументРезультат.Вывести(Области.ШапкаПоказатели);
	ДокументРезультат.Присоединить(Области.ШапкаИтого);
	
	Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
		
		Если ЭтоАктивныйПериод(Период, ДанныеОтчета.АктивныйПериод, ДанныеОтчета.Периодичность) Тогда
			ОбластьШапкаТекущийПериод = Области.ШапкаАктивныйПериод;
		Иначе
			ОбластьШапкаТекущийПериод = Области.ШапкаПериод;
		КонецЕсли;
		
		ПараметрыОбласти = Новый Структура("Период, ПланФакт");
		ПараметрыОбласти.Период = ПоказателиБизнесаФормы.ЗаголовокКолонки(Период, ДанныеОтчета.Периодичность);
		ПараметрыОбласти.ПланФакт = ?(Период < ДанныеОтчета.АктивныйПериод, НСтр("ru = 'ФАКТ'"), НСтр("ru = 'ПЛАН'"));
		
		ОбластьШапкаТекущийПериод.Параметры.Заполнить(ПараметрыОбласти);
		ДокументРезультат.Присоединить(ОбластьШапкаТекущийПериод);
		
	КонецЦикла;
	
	ЗагрузитьПоказателиОтчетов(ДанныеОтчета, ДанныеОтчета.ВидОтчетаОтбор,,Истина);
	
	ИмяКолонкиИтог = "Итого";
	
	Если ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток
		ИЛИ ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы Тогда
		ВывестиОтчет(ДанныеОтчета, ДокументРезультат, Области);
		Возврат;
	КонецЕсли;
	
	Для каждого ВидОтчета Из ДанныеОтчета.ВидыОтчетов Цикл
		
		Если ВидОтчета.Значение <> ДанныеОтчета.ВидОтчетаОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПоказателейДляПересчета = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ВидОтчета.Значение, ДанныеОтчета.ПланФакт, ДанныеОтчета.Периодичность);
		ДобавитьПараметрыМетокВЗапрос(Запрос, ВидОтчета.Значение, ДанныеОтчета.ПланФакт, ДанныеОтчета.ДанныеМеток);
		
		Запрос.УстановитьПараметр("НачалоПериода", ДанныеОтчета.ПериодОтчета.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода",  ДанныеОтчета.ПериодОтчета.ДатаОкончания);
		
		Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.Факт Тогда
			Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
		Иначе
			Запрос.УстановитьПараметр("СценарийПланирования", ДанныеОтчета.СценарийПланирования);
		КонецЕсли;
		
		ВыборкаСуммПоказателей = Запрос.Выполнить().Выбрать();
		
		// Обработка данных
		Если ВидОтчета.Значение = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс") Тогда
			
			Пока ВыборкаСуммПоказателей.Следующий() Цикл
				
				СтрокаДерева = ПолучитьСтрокуДереваПоПоказателю(ВидОтчета.Значение, ВыборкаСуммПоказателей.Показатель, ДанныеОтчета);
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьСуммыВСтрокеДерева(СтрокаДерева, ВыборкаСуммПоказателей, ДанныеОтчета);
				ОбновитьИтогиРодителей(СтрокаДерева, ВыборкаСуммПоказателей, МассивПоказателейДляПересчета, ДанныеОтчета);
				МассивПоказателейДляПересчета.Добавить(ВыборкаСуммПоказателей.ИдентификаторПоказателя);
				
			КонецЦикла;
			
		Иначе
			Если ДанныеОтчета.ПланФакт <> Перечисления.ПланФакт.ПланФакт Тогда
				
				Пока ВыборкаСуммПоказателей.Следующий() Цикл
				
					СтрокаДерева = ПолучитьСтрокуДереваПоПоказателю(ВидОтчета.Значение, ВыборкаСуммПоказателей.Показатель, ДанныеОтчета);
					Если СтрокаДерева = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = СформироватьИмяКолонкиПоПериоду(ВыборкаСуммПоказателей.Период);
					СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.Сумма;
					СтрокаДерева[ИмяКолонкиИтог] = СтрокаДерева[ИмяКолонкиИтог] + ВыборкаСуммПоказателей.Сумма;
					
					РодительСтроки = СтрокаДерева.Родитель;
					Пока РодительСтроки <> Неопределено Цикл
						РодительСтроки[ИмяКолонки] = РодительСтроки[ИмяКолонки] + ВыборкаСуммПоказателей.Сумма;
						РодительСтроки[ИмяКолонкиИтог] = РодительСтроки[ИмяКолонкиИтог] + ВыборкаСуммПоказателей.Сумма;
						РодительСтроки = РодительСтроки.Родитель;
					КонецЦикла;
					
					МассивПоказателейДляПересчета.Добавить(ВыборкаСуммПоказателей.ИдентификаторПоказателя);
					
				КонецЦикла;
				
			Иначе
				
				Пока ВыборкаСуммПоказателей.Следующий() Цикл
				
					СтрокаДерева = ПолучитьСтрокуДереваПоПоказателю(ВидОтчета.Значение, ВыборкаСуммПоказателей.Показатель, ДанныеОтчета);
					Если СтрокаДерева = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = СформироватьИмяКолонкиПоПериоду(ВыборкаСуммПоказателей.Период);
					
					Если ВыборкаСуммПоказателей.Период < ДанныеОтчета.АктивныйПериод Тогда // Факт
						СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаФакт;
					ИначеЕсли ВыборкаСуммПоказателей.Период > ДанныеОтчета.АктивныйПериод Тогда // План
						СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаПлан;
					Иначе // План-Факт
						СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаФакт;
						СтрокаДерева[ИмяКолонки+"План"] = СтрокаДерева[ИмяКолонки+"План"] + ВыборкаСуммПоказателей.СуммаПлан;
					КонецЕсли;
					
					СтрокаДерева["ИтогоФакт"] = СтрокаДерева["ИтогоФакт"] + ВыборкаСуммПоказателей.СуммаФакт;
					СтрокаДерева["ИтогоПлан"] = СтрокаДерева["ИтогоПлан"] + ВыборкаСуммПоказателей.СуммаПлан;
					
					РодительСтроки = СтрокаДерева.Родитель;
					Пока РодительСтроки <> Неопределено Цикл
						РодительСтроки[ИмяКолонки] = РодительСтроки[ИмяКолонки] + СтрокаДерева[ИмяКолонки];
						Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт И ВыборкаСуммПоказателей.Период = ДанныеОтчета.АктивныйПериод Тогда
							РодительСтроки[ИмяКолонки+"План"] = РодительСтроки[ИмяКолонки+"План"] + СтрокаДерева[ИмяКолонки+"План"];
						КонецЕсли;
						РодительСтроки["ИтогоФакт"] = РодительСтроки["ИтогоФакт"] + ВыборкаСуммПоказателей.СуммаФакт;
						РодительСтроки["ИтогоПлан"] = РодительСтроки["ИтогоПлан"] + ВыборкаСуммПоказателей.СуммаПлан;
						РодительСтроки = РодительСтроки.Родитель;
					КонецЦикла;
					
					МассивПоказателейДляПересчета.Добавить(ВыборкаСуммПоказателей.ИдентификаторПоказателя);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем зависимые элементы
		МассивПоказателейДляПересчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляПересчета);
		Для каждого ИдентификаторПоказателя Из МассивПоказателейДляПересчета Цикл
			ЗависимыеЭлементы = ПолучитьЗависимыеЭлементыПоказателя(ИдентификаторПоказателя, ДанныеОтчета.СоответствиеЗависимыхЭлементов);
			Если ЗависимыеЭлементы.Количество() > 0 Тогда
				Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
					ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
					ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, ИмяКолонки, ДанныеОтчета);
					Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт И Период = ДанныеОтчета.АктивныйПериод Тогда
						ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, ИмяКолонки+"План", ДанныеОтчета);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
					ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, "ИтогоПлан", ДанныеОтчета);
					ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, "ИтогоФакт", ДанныеОтчета);
				Иначе
					ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, ИмяКолонкиИтог, ДанныеОтчета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
	Если ДанныеОтчета.ВидОтчетаОтбор = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейДоходыРасходы;
	ИначеЕсли ДанныеОтчета.ВидОтчетаОтбор = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейДенежныйПоток;
	Иначе // Баланс
		ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейБаланс;
	КонецЕсли;
	
	Если НЕ ДанныеОтчета.ПоказыватьПустыеСтроки Тогда
		УдалитьПустыеСтрокиДереваРекурсивно(ДеревоПоказателей, ДанныеОтчета);
	КонецЕсли;
	
	ДокументРезультат.НачатьАвтоГруппировкуСтрок();
	ВывестиДеревоРекурсивно(ДокументРезультат, Области, ДанныеОтчета, ДеревоПоказателей.Строки, 0);
	ДокументРезультат.ЗакончитьАвтоГруппировкуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКлючОбъекта()
	
	Возврат "АнализБизнесаОтчет"; // Не локализуется
	
КонецФункции

Процедура ЗагрузитьПоказателиОтчетов(ДанныеОтчета, ВидОтчетаОтбор = Неопределено, ЗаполнятьДиаграммы = Ложь, ЗаполнятьИдентификаторыСтрок = Ложь)
	
	ВременноеСоответствиеЗависимыхЭлементов 	= Новый Соответствие;
	ВременныеИдентификаторыПоказателей 			= Новый Соответствие;
	ВременныеИдентификаторыПоказателейДляФормул = Новый Соответствие;
	
	Для каждого ВидОтчета Из ДанныеОтчета.ВидыОтчетов Цикл
		
		Если ЗначениеЗаполнено(ВидОтчетаОтбор) И ВидОтчета.Значение <> ВидОтчетаОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ПоказателиБизнеса.ВыборкаДереваПоказателей(ВидОтчета.Значение);
		ИмяДерева = "ДеревоПоказателей" + ВидОтчета.Представление;
		ВременноеДеревоПоказателей = ДанныеОтчета[ИмяДерева];
		ВременноеДеревоПоказателей.Строки.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаРодителя = Неопределено;
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				СтрокаРодителя = ВременноеДеревоПоказателей.Строки.Найти(Выборка.Родитель, "Показатель", Истина);
			КонецЕсли;
			
			НоваяСтрока = ?(СтрокаРодителя = Неопределено, ВременноеДеревоПоказателей.Строки.Добавить(), СтрокаРодителя.Строки.Добавить());
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ЭтоВерхнийУровеньИерархии = НЕ ЗначениеЗаполнено(Выборка.Родитель);
			
			// Зависимые показатели
			Если ЗаполнятьИдентификаторыСтрок Тогда
				
				Если Выборка.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула 
					И ЗначениеЗаполнено(СокрЛП(Выборка.СтрокаФормулы)) Тогда
					
					Операнды = Новый Массив;
					ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(Выборка.СтрокаФормулы, Операнды);
					
					Для каждого Операнд Из Операнды Цикл
						
						ЗависимыеЭлементыОперанда = ВременноеСоответствиеЗависимыхЭлементов.Получить(Операнд);
						Если ЗависимыеЭлементыОперанда = Неопределено Тогда
							ЗависимыеЭлементыОперанда = Новый Массив;
						КонецЕсли;
						
						ЗависимыеЭлементыОперанда.Добавить(Выборка.ИдентификаторПоказателя);
						ВременноеСоответствиеЗависимыхЭлементов.Вставить(Операнд, ЗависимыеЭлементыОперанда);
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ВременноеДеревоПоказателей.Строки.Сортировать("Порядок", Истина);
		////////ЗначениеВДанныеФормы(ВременноеДеревоПоказателей, Форма[ИмяДерева]);
		
	КонецЦикла;
	
	// Заполнение служебных соответствий, которые хранятся в реквизитах формы
	Если ЗаполнятьИдентификаторыСтрок Тогда
		
		Для каждого ВидОтчета Из ДанныеОтчета.ВидыОтчетов Цикл
			ИмяДерева = "ДеревоПоказателей" + ВидОтчета.Представление;
			//ЗаполнитьИдентификаторыПоказателейРекурсивно(Форма[ИмяДерева].Строки, ВременныеИдентификаторыПоказателей);
			ЗаполнитьИдентификаторыПоказателейДляФормулРекурсивно(ДанныеОтчета[ИмяДерева].Строки, ВременныеИдентификаторыПоказателейДляФормул);
		КонецЦикла;
		
		ДанныеОтчета.ИдентификаторыПоказателейДляФормул   = Новый ФиксированноеСоответствие(ВременныеИдентификаторыПоказателейДляФормул);
		ДанныеОтчета.СоответствиеЗависимыхЭлементов       = Новый ФиксированноеСоответствие(ВременноеСоответствиеЗависимыхЭлементов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОтчет(ДанныеОтчета, ДокументРезультат, Области)
	
	ИмяКолонкиИтог = "Итого";
	
	МассивПоказателейДляПересчета = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ДанныеОтчета.ВидОтчетаОтбор, ДанныеОтчета.ПланФакт, ДанныеОтчета.Периодичность);
	
	ДобавитьПараметрыМетокВЗапрос(Запрос, ДанныеОтчета.ВидОтчетаОтбор, ДанныеОтчета.ПланФакт, ДанныеОтчета.ДанныеМеток);
	
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеОтчета.ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  ДанныеОтчета.ПериодОтчета.ДатаОкончания);
	
	Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.Факт Тогда
		Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Иначе
		Запрос.УстановитьПараметр("СценарийПланирования", ДанныеОтчета.СценарийПланирования);
	КонецЕсли;
	
	ИтоговоеДерево = ДанныеОтчета.ДеревоПоказателейДенежныйПоток.Скопировать();
	ИтоговоеДерево.Строки.Очистить();
	
	Если ДанныеОтчета.ГруппировкаАнализаБизнеса <> Перечисления.ГруппировкаАнализаБизнеса.Показатели Тогда
		
		НомерЗапроса = 0;
		ПолеПроект = "Проект"; // Не локализуется
		
		Если ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
			ИмяТаблицы = "ДвиженияДенежныхСредствОбороты."; // Не локализуется
			ПолеПодразделение = "Подразделение"; // Не локализуется
			
		Иначе
			ИмяТаблицы = "ДоходыИРасходыОбороты."; // Не локализуется
			ПолеПодразделение = "СтруктурнаяЕдиница"; // Не локализуется
		КонецЕсли;
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		
		ИмяПоля = ?(ДанныеОтчета.ГруппировкаАнализаБизнеса = Перечисления.ГруппировкаАнализаБизнеса.Проекты, ПолеПроект, ПолеПодразделение);
		
		Для каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
			ОператорыЗапроса.ВыбираемыеПоля.Добавить(ИмяТаблицы + ИмяПоля);
			ОператорыЗапроса.Группировка.Добавить(ИмяТаблицы + ИмяПоля);
		КонецЦикла;
		
		КолонкаАналитики =  ПакетЗапроса.Колонки.Найти(ИмяПоля);
		КолонкаАналитики.Псевдоним = "Аналитика"; // Не локализуется
		
		ИтогиПоАналитике = ПакетЗапроса.КонтрольныеТочкиИтогов.Добавить("Аналитика");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		ВыборкаАналитика = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаАналитика.Следующий() Цикл
			НоваяСтрока = ИтоговоеДерево.Строки.Добавить();
			
			Если ДанныеОтчета.ГруппировкаАнализаБизнеса = Перечисления.ГруппировкаАнализаБизнеса.Проекты Тогда
				ПредставлениеПустого = НСтр("ru = '<Без проекта>'")
			Иначе
				ПредставлениеПустого = НСтр("ru = '<Без подразделения>'");
			КонецЕсли;
			
			НоваяСтрока.Представление = ?(ЗначениеЗаполнено(ВыборкаАналитика.Аналитика), Строка(ВыборкаАналитика.Аналитика), ПредставлениеПустого);
			НоваяСтрока.Аналитика = ВыборкаАналитика.Аналитика;
			НоваяСтрока.ЭтоПроцент = Ложь;
			ЗаполнитьДеревоПоказателей(ДанныеОтчета, ВыборкаАналитика.Выбрать(), НоваяСтрока.Строки, ВыборкаАналитика.Аналитика);
		КонецЦикла;
		
	Иначе
		ЗаполнитьДеревоПоказателей(ДанныеОтчета, Запрос.Выполнить().Выбрать(), ИтоговоеДерево.Строки);
	КонецЕсли;
	
	Если НЕ ДанныеОтчета.ПоказыватьПустыеСтроки Тогда
		УдалитьПустыеСтрокиДереваРекурсивно(ИтоговоеДерево, ДанныеОтчета);
	КонецЕсли;
	
	ДокументРезультат.НачатьАвтоГруппировкуСтрок();
	ВывестиДеревоРекурсивно(ДокументРезультат, Области, ДанныеОтчета, ИтоговоеДерево.Строки, 0);
	ДокументРезультат.ЗакончитьАвтоГруппировкуСтрок();
	
КонецПроцедуры

Процедура ДобавитьПараметрыМетокВЗапрос(Запрос, ВидОтчета, ПланФакт, ДанныеМеток)
	
	Если ДанныеМеток = Неопределено ИЛИ ДанныеМеток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация
	ПараметрыЗапроса = Новый Структура;
	СхемаЗапроса     = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	НомерПакета      = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	Запрос.Текст 	 = СхемаЗапроса.ПолучитьТекстЗапроса();
	ПакетЗапроса 	 = СхемаЗапроса.ПакетЗапросов[НомерПакета];
	
	Если ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы Тогда
		
		Отбор = ПакетЗапроса.Операторы[0].Отбор;
		ИмяТаблицы = ПакетЗапроса.Операторы[0].Источники[0].Источник.Псевдоним;
		МассивОтборов = Новый Массив;
		
		Для каждого СтрокаМетки Из ДанныеМеток Цикл
			
			Если СтрокаМетки.ИмяПоляОтбора = "Подразделение" Тогда // Не локализуется
				ИмяИзмерения = "СтруктурнаяЕдиница";
			Иначе
				ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
			КонецЕсли;
			
			СтрокаОтбора = СтрШаблон("%1.%2 В (&%3)", ИмяТаблицы, ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
			
			Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
				МассивОтборов.Добавить(СтрокаОтбора);
			КонецЕсли;
			
			Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
				ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
			КонецЕсли;
			
			ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
			
		КонецЦикла;
		
		Для каждого СтрокаОтбора Из МассивОтборов Цикл
			Отбор.Добавить(СтрокаОтбора);
		КонецЦикла;
		
	Иначе
	
		Для каждого ОператорыЗапроса Из ПакетЗапроса.Операторы Цикл
			
			ИсточникДанных = Неопределено;
			
			Для каждого Элемент Из ОператорыЗапроса.Источники Цикл
				
				Если СтрНайти(Элемент.Источник.ИмяТаблицы, "РегистрНакопления") <> 0 
					ИЛИ СтрНайти(Элемент.Источник.ИмяТаблицы, "Управленческий") <> 0 Тогда // Не локализуется
					ИсточникДанных = Элемент.Источник;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ИсточникДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.Баланс Тогда
				Отбор = ИсточникДанных.Параметры.Получить(5);
			Иначе
				Отбор = ИсточникДанных.Параметры.Получить(3);
			КонецЕсли;
			
			МассивОтборов = Новый Массив;
			
			Для каждого СтрокаМетки Из ДанныеМеток Цикл
				
				// Для Баланса отбор только по организации
				Если ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.Баланс И СтрокаМетки.ИмяПоляОтбора <> "Организация" Тогда // Не локализуется
					Продолжить;
				КонецЕсли;
				
				Если ИсточникДанных.ДоступныеПоля.Найти(СтрокаМетки.ИмяПоляОтбора) = Неопределено Тогда
					ИмяИзмерения = "СтруктурнаяЕдиница";
				Иначе
					ИмяИзмерения = СтрокаМетки.ИмяПоляОтбора;
				КонецЕсли;
				
				СтрокаОтбора = СтрШаблон("%1 В (&%2)", ИмяИзмерения, СтрокаМетки.ИмяПоляОтбора);
				
				Если МассивОтборов.Найти(СтрокаОтбора) = Неопределено Тогда
					МассивОтборов.Добавить(СтрокаОтбора);
				КонецЕсли;
				
				Если НЕ ПараметрыЗапроса.Свойство(СтрокаМетки.ИмяПоляОтбора) Тогда
					ПараметрыЗапроса.Вставить(СтрокаМетки.ИмяПоляОтбора, Новый Массив);
				КонецЕсли;
				
				ПараметрыЗапроса[СтрокаМетки.ИмяПоляОтбора].Добавить(СтрокаМетки.Метка);
				
			КонецЦикла;
			
			ИтоговыйОтбор = Строка(Отбор.Выражение);
			Если ЗначениеЗаполнено(ИтоговыйОтбор) Тогда
				ИтоговыйОтбор = "( " + ИтоговыйОтбор + ") ";
			КонецЕсли;
			Для каждого СтрокаОтбора Из МассивОтборов Цикл
				ИтоговыйОтбор = ИтоговыйОтбор + ?(ЗначениеЗаполнено(ИтоговыйОтбор)," И ", "") + СтрокаОтбора;
			КонецЦикла;
			
			Отбор.Выражение = Новый ВыражениеСхемыЗапроса(ИтоговыйОтбор);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДеревоПоказателейРекурсивно(Приемник, Источник, Аналитика)
	
	Для каждого СтрокаИсточника Из Источник Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.Аналитика = Аналитика;
		
		Если СтрокаИсточника.Строки.Количество() > 0 Тогда
			СкопироватьДеревоПоказателейРекурсивно(НоваяСтрока.Строки, СтрокаИсточника.Строки, Аналитика);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПоказателей(ДанныеОтчета, Выборка, ИтоговоеДерево, Аналитика = Неопределено)
	
	ИмяКолонкиИтог = "Итого";
	МассивПоказателейДляПересчета = Новый Массив;
	
	Если ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
		ИсходноеДерево = ДанныеОтчета.ДеревоПоказателейДенежныйПоток.Строки;
	Иначе
		ИсходноеДерево = ДанныеОтчета.ДеревоПоказателейДоходыРасходы.Строки;
	КонецЕсли;
	
	// Добавляем показатели
	СкопироватьДеревоПоказателейРекурсивно(ИтоговоеДерево, ИсходноеДерево, Аналитика);
	
	Если ДанныеОтчета.ПланФакт <> Перечисления.ПланФакт.ПланФакт Тогда
		
		Пока Выборка.Следующий() Цикл
		
			СтрокаДерева = ИтоговоеДерево.Найти(Выборка.Показатель, "Показатель", Истина);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Выборка.Период);
			
			СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + Выборка.Сумма;
			СтрокаДерева[ИмяКолонкиИтог] = СтрокаДерева[ИмяКолонкиИтог] + Выборка.Сумма;
			
			РодительСтроки = СтрокаДерева.Родитель;
			Пока РодительСтроки <> Неопределено Цикл
				РодительСтроки[ИмяКолонки] = РодительСтроки[ИмяКолонки] + Выборка.Сумма;
				РодительСтроки[ИмяКолонкиИтог] = РодительСтроки[ИмяКолонкиИтог] + Выборка.Сумма;
				РодительСтроки = РодительСтроки.Родитель;
			КонецЦикла;
			
			МассивПоказателейДляПересчета.Добавить(Выборка.ИдентификаторПоказателя);
			
		КонецЦикла;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаДерева = ИтоговоеДерево.Найти(Выборка.Показатель, "Показатель", Истина);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Выборка.Период);
			
			Если Выборка.Период < ДанныеОтчета.АктивныйПериод Тогда // Факт
				СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + Выборка.СуммаФакт;
			ИначеЕсли Выборка.Период > ДанныеОтчета.АктивныйПериод Тогда // План
				СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + Выборка.СуммаПлан;
			Иначе // План-Факт
				СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + Выборка.СуммаФакт;
				СтрокаДерева[ИмяКолонки+"План"] = СтрокаДерева[ИмяКолонки+"План"] + Выборка.СуммаПлан;
			КонецЕсли;
			
			СтрокаДерева["ИтогоФакт"] = СтрокаДерева["ИтогоФакт"] + Выборка.СуммаФакт;
			СтрокаДерева["ИтогоПлан"] = СтрокаДерева["ИтогоПлан"] + Выборка.СуммаПлан;
			
			РодительСтроки = СтрокаДерева.Родитель;
			Пока РодительСтроки <> Неопределено Цикл
				РодительСтроки[ИмяКолонки] = РодительСтроки[ИмяКолонки] + СтрокаДерева[ИмяКолонки];
				Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт И Выборка.Период = ДанныеОтчета.АктивныйПериод Тогда
					РодительСтроки[ИмяКолонки+"План"] = РодительСтроки[ИмяКолонки+"План"] + СтрокаДерева[ИмяКолонки+"План"];
				КонецЕсли;
				РодительСтроки["ИтогоФакт"] = РодительСтроки["ИтогоФакт"] + Выборка.СуммаФакт;
				РодительСтроки["ИтогоПлан"] = РодительСтроки["ИтогоПлан"] + Выборка.СуммаПлан;
				РодительСтроки = РодительСтроки.Родитель;
			КонецЦикла;
			
			МассивПоказателейДляПересчета.Добавить(Выборка.ИдентификаторПоказателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВременныеИдентификаторыПоказателейДляФормул = Новый Соответствие;
	ЗаполнитьИдентификаторыПоказателейДляФормулРекурсивно(ИтоговоеДерево, ВременныеИдентификаторыПоказателейДляФормул);
	
	Для каждого КлючЗначение Из ВременныеИдентификаторыПоказателейДляФормул Цикл
		МассивПоказателейДляПересчета.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Пересчитываем зависимые элементы
	МассивПоказателейДляПересчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляПересчета);
	Для каждого ИдентификаторПоказателя Из МассивПоказателейДляПересчета Цикл
		ЗависимыеЭлементы = ПолучитьЗависимыеЭлементыПоказателя(ИдентификаторПоказателя, ДанныеОтчета.СоответствиеЗависимыхЭлементов);
		Если ЗависимыеЭлементы.Количество() > 0 Тогда
			Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
				ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
				ОбновитьЗависимыеЭлементыПоФормуле(ДанныеОтчета.ВидОтчетаОтбор, ИдентификаторПоказателя, ИмяКолонки, ДанныеОтчета, ИтоговоеДерево, ВременныеИдентификаторыПоказателейДляФормул);
				Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт И Период = ДанныеОтчета.АктивныйПериод Тогда
					ОбновитьЗависимыеЭлементыПоФормуле(ДанныеОтчета.ВидОтчетаОтбор, ИдентификаторПоказателя, ИмяКолонки+"План", ДанныеОтчета);
				КонецЕсли;
			КонецЦикла;
			Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
				ОбновитьЗависимыеЭлементыПоФормуле(ДанныеОтчета.ВидОтчетаОтбор, ИдентификаторПоказателя, "ИтогоПлан", ДанныеОтчета, ИтоговоеДерево, ВременныеИдентификаторыПоказателейДляФормул);
				ОбновитьЗависимыеЭлементыПоФормуле(ДанныеОтчета.ВидОтчетаОтбор, ИдентификаторПоказателя, "ИтогоФакт", ДанныеОтчета, ИтоговоеДерево, ВременныеИдентификаторыПоказателейДляФормул);
			Иначе
				ОбновитьЗависимыеЭлементыПоФормуле(ДанныеОтчета.ВидОтчетаОтбор, ИдентификаторПоказателя, ИмяКолонкиИтог, ДанныеОтчета, ИтоговоеДерево, ВременныеИдентификаторыПоказателейДляФормул);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыровнятьПериодПоПериодичности(Объект)
	
	Если Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		Объект.ПериодОтчета.ДатаНачала 	  = НачалоМесяца(Объект.ПериодОтчета.ДатаНачала);
		Объект.ПериодОтчета.ДатаОкончания = КонецМесяца(Объект.ПериодОтчета.ДатаОкончания);
		
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		Объект.ПериодОтчета.ДатаНачала 	  = НачалоКвартала(Объект.ПериодОтчета.ДатаНачала);
		Объект.ПериодОтчета.ДатаОкончания = КонецКвартала(Объект.ПериодОтчета.ДатаОкончания);
		
	ИначеЕсли Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		МесяцДатыНачала = Месяц(Объект.ПериодОтчета.ДатаНачала);
		
		Объект.ПериодОтчета.ДатаНачала = НачалоГода(Объект.ПериодОтчета.ДатаНачала);
		
		Если МесяцДатыНачала > 6 Тогда
			
			Объект.ПериодОтчета.ДатаНачала = ДобавитьМесяц(Объект.ПериодОтчета.ДатаНачала, 6);
			
		КонецЕсли;
		
		МесяцДатыОкончания = Месяц(Объект.ПериодОтчета.ДатаОкончания);
		
		Объект.ПериодОтчета.ДатаОкончания = КонецГода(Объект.ПериодОтчета.ДатаОкончания);
		
		Если МесяцДатыОкончания < 6 Тогда
			
			Объект.ПериодОтчета.ДатаОкончания = ДобавитьМесяц(Объект.ПериодОтчета.ДатаОкончания, -6);
			
		КонецЕсли;
		
	Иначе // Год
		
		Объект.ПериодОтчета.ДатаНачала 	  = НачалоГода(Объект.ПериодОтчета.ДатаНачала);
		Объект.ПериодОтчета.ДатаОкончания = КонецГода(Объект.ПериодОтчета.ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьОбластиОтчета(ДанныеОтчета)
	
	Макет = ПолучитьМакет("МакетПечатнаяФормаОтчета");
	
	Области = Новый Структура;
	Области.Вставить("ЗаголовокОтчета",     Макет.ПолучитьОбласть("ЗаголовокОтчета"));
	Области.Вставить("ШапкаПоказатели",     Макет.ПолучитьОбласть("ШапкаОтчета|Показатели"));
	Области.Вставить("ДоходПоказатель",     Макет.ПолучитьОбласть("Доход|Показатели"));
	Области.Вставить("РасходПоказатель",    Макет.ПолучитьОбласть("Расход|Показатели"));
	Области.Вставить("ГруппаПоказатель",    Макет.ПолучитьОбласть("Группа|Показатели"));
	Области.Вставить("ФормулаПоказатель",   Макет.ПолучитьОбласть("Формула|Показатели"));
	Области.Вставить("АналитикаПоказатель", Макет.ПолучитьОбласть("Аналитика|Показатели"));
	Области.Вставить("СуммаДоход",   	    Макет.ПолучитьОбласть("Доход|Период"));
	Области.Вставить("СуммаРасход",   	    Макет.ПолучитьОбласть("Расход|Период"));
	Области.Вставить("СуммаГруппа",   	    Макет.ПолучитьОбласть("Группа|Период"));
	Области.Вставить("СуммаФормула",   	    Макет.ПолучитьОбласть("Формула|Период"));
	Области.Вставить("СуммаАналитика",   	Макет.ПолучитьОбласть("Аналитика|Период"));
	
	Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
		Области.Вставить("ШапкаИтого",  				Макет.ПолучитьОбласть("ШапкаОтчета|ИтогоПланФакт"));
		Области.Вставить("ШапкаАктивныйПериод",			Макет.ПолучитьОбласть("ШапкаОтчета|АктивныйПериодПланФакт"));
		Области.Вставить("ШапкаИтого",  				Макет.ПолучитьОбласть("ШапкаОтчета|ИтогоПланФакт"));
		Области.Вставить("ШапкаПериод",  				Макет.ПолучитьОбласть("ШапкаОтчета|ПериодПланФакт"));
		Области.Вставить("ДоходИтого",  				Макет.ПолучитьОбласть("Доход|ИтогоФакт"));
		Области.Вставить("РасходИтого",  				Макет.ПолучитьОбласть("Расход|ИтогоФакт"));
		Области.Вставить("ГруппаИтого",  				Макет.ПолучитьОбласть("Группа|ИтогоФакт"));
		Области.Вставить("ФормулаИтого",  				Макет.ПолучитьОбласть("Формула|ИтогоФакт"));
		Области.Вставить("АналитикаИтого",  			Макет.ПолучитьОбласть("Аналитика|ИтогоФакт"));
		Области.Вставить("ДоходАктивныйПериод",			Макет.ПолучитьОбласть("Доход|АктивныйПериодФакт"));
		Области.Вставить("РасходАктивныйПериод",		Макет.ПолучитьОбласть("Расход|АктивныйПериодФакт"));
		Области.Вставить("ГруппаАктивныйПериод",		Макет.ПолучитьОбласть("Группа|АктивныйПериодФакт"));
		Области.Вставить("ФормулаАктивныйПериод",		Макет.ПолучитьОбласть("Формула|АктивныйПериодФакт"));
		Области.Вставить("АналитикаАктивныйПериод",		Макет.ПолучитьОбласть("Аналитика|АктивныйПериодФакт"));
	Иначе
		Области.Вставить("ШапкаИтого", 			    Макет.ПолучитьОбласть("ШапкаОтчета|Итого"));
		Области.Вставить("ШапкаАктивныйПериод",     Макет.ПолучитьОбласть("ШапкаОтчета|АктивныйПериод"));
		Области.Вставить("ШапкаИтого",  		    Макет.ПолучитьОбласть("ШапкаОтчета|Итого"));
		Области.Вставить("ШапкаПериод",  		    Макет.ПолучитьОбласть("ШапкаОтчета|Период"));
		Области.Вставить("ДоходИтого",  		    Макет.ПолучитьОбласть("Доход|Итого"));
		Области.Вставить("РасходИтого",  		    Макет.ПолучитьОбласть("Расход|Итого"));
		Области.Вставить("ГруппаИтого",  		    Макет.ПолучитьОбласть("Группа|Итого"));
		Области.Вставить("ФормулаИтого",  		    Макет.ПолучитьОбласть("Формула|Итого"));
		Области.Вставить("АналитикаИтого",  		Макет.ПолучитьОбласть("Аналитика|Итого"));
		Области.Вставить("ДоходАктивныйПериод",     Макет.ПолучитьОбласть("Доход|АктивныйПериод"));
		Области.Вставить("РасходАктивныйПериод",    Макет.ПолучитьОбласть("Расход|АктивныйПериод"));
		Области.Вставить("ГруппаАктивныйПериод",    Макет.ПолучитьОбласть("Группа|АктивныйПериод"));
		Области.Вставить("ФормулаАктивныйПериод",   Макет.ПолучитьОбласть("Формула|АктивныйПериод"));
		Области.Вставить("АналитикаАктивныйПериод", Макет.ПолучитьОбласть("Аналитика|АктивныйПериод"));
	КонецЕсли;
	
	Области.Вставить("ДоходИтогоПлан",  			Макет.ПолучитьОбласть("Доход|ИтогоПлан"));
	Области.Вставить("РасходИтогоПлан",  			Макет.ПолучитьОбласть("Расход|ИтогоПлан"));
	Области.Вставить("ГруппаИтогоПлан",  			Макет.ПолучитьОбласть("Группа|ИтогоПлан"));
	Области.Вставить("ФормулаИтогоПлан",  			Макет.ПолучитьОбласть("Формула|ИтогоПлан"));
	Области.Вставить("АналитикаИтогоПлан",			Макет.ПолучитьОбласть("Аналитика|ИтогоПлан"));
	Области.Вставить("ДоходАктивныйПериодПлан",		Макет.ПолучитьОбласть("Доход|АктивныйПериодПлан"));
	Области.Вставить("РасходАктивныйПериодПлан",	Макет.ПолучитьОбласть("Расход|АктивныйПериодПлан"));
	Области.Вставить("ГруппаАктивныйПериодПлан",	Макет.ПолучитьОбласть("Группа|АктивныйПериодПлан"));
	Области.Вставить("ФормулаАктивныйПериодПлан",   Макет.ПолучитьОбласть("Формула|АктивныйПериодПлан"));
	Области.Вставить("АналитикаАктивныйПериодПлан", Макет.ПолучитьОбласть("Аналитика|АктивныйПериодПлан"));
	
	Возврат Области;
	
КонецФункции

Процедура ЗаполнитьСуммыВСтрокеДерева(СтрокаДерева, ВыборкаСуммПоказателей, ДанныеОтчета)
	
	ИмяКолонки = СформироватьИмяКолонкиПоПериоду(ВыборкаСуммПоказателей.Период);
	ИмяКолонкиИтогФакт = "ИтогоФакт"; // Не локализуется
	ИмяКолонкиИтогПлан = "ИтогоПлан"; // Не локализуется
	
	Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.Факт Тогда
		ИмяКолонкиИтог = "ИтогоФакт"; // Не локализуется
	Иначе
		ИмяКолонкиИтог = "ИтогоПлан"; // Не локализуется
	КонецЕсли;
	ИмяКолонкиИтог = "Итого";
	ЭтоПланФакт = (ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт);
	
	Если ЭтоПланФакт Тогда
		Если ВыборкаСуммПоказателей.Период < ДанныеОтчета.АктивныйПериод Тогда // Факт
			СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаФакт;
		ИначеЕсли ВыборкаСуммПоказателей.Период > ДанныеОтчета.АктивныйПериод Тогда // План
			СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаПлан;
		Иначе // План-Факт
			СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ВыборкаСуммПоказателей.СуммаФакт;
			СтрокаДерева[ИмяКолонки+"План"] = СтрокаДерева[ИмяКолонки+"План"] + ВыборкаСуммПоказателей.СуммаПлан;
		КонецЕсли;
	Иначе
		СтрокаДерева[ИмяКолонки] = ВыборкаСуммПоказателей.Сумма;
	КонецЕсли;
	
	Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
		
		Если Период > ВыборкаСуммПоказателей.Период Тогда
			ИмяКолонкиБудущегоПериода = СформироватьИмяКолонкиПоПериоду(Период);
			Если ЭтоПланФакт Тогда
				Если Период < ДанныеОтчета.АктивныйПериод Тогда // Факт
					СтрокаДерева[ИмяКолонкиБудущегоПериода] = СтрокаДерева[ИмяКолонкиБудущегоПериода] + ВыборкаСуммПоказателей.СуммаФакт;
				ИначеЕсли Период > ДанныеОтчета.АктивныйПериод Тогда // План
					СтрокаДерева[ИмяКолонкиБудущегоПериода] = СтрокаДерева[ИмяКолонкиБудущегоПериода] + ВыборкаСуммПоказателей.СуммаПлан;
				Иначе // План-Факт
					СтрокаДерева[ИмяКолонкиБудущегоПериода] = СтрокаДерева[ИмяКолонкиБудущегоПериода] + ВыборкаСуммПоказателей.СуммаФакт;
					СтрокаДерева[ИмяКолонкиБудущегоПериода+"План"] = СтрокаДерева[ИмяКолонкиБудущегоПериода+"План"] + ВыборкаСуммПоказателей.СуммаПлан;
				КонецЕсли;
			Иначе
				СтрокаДерева[ИмяКолонкиБудущегоПериода] = ВыборкаСуммПоказателей.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыборкаСуммПоказателей.Период = ДанныеОтчета.ПериодОтчета.ДатаНачала Тогда
		
		Если ЭтоПланФакт Тогда
			СтрокаДерева[ИмяКолонкиИтогФакт] = СтрокаДерева[ИмяКолонкиИтогФакт] + ВыборкаСуммПоказателей.СуммаНачальныйОстатокФакт;
			СтрокаДерева[ИмяКолонкиИтогПлан] = СтрокаДерева[ИмяКолонкиИтогПлан] + ВыборкаСуммПоказателей.СуммаНачальныйОстатокПлан;
		Иначе
			СтрокаДерева[ИмяКолонкиИтог] = СтрокаДерева[ИмяКолонкиИтог] + ВыборкаСуммПоказателей.СуммаНачальныйОстаток;
		КонецЕсли;
		
		РодительСтроки = СтрокаДерева.Родитель;
		Пока РодительСтроки <> Неопределено Цикл
			ЭлементыРодителя = РодительСтроки.Строки;
			СуммаПодчиненныхПлан = 0;
			СуммаПодчиненныхФакт = 0;
			СуммаПодчиненных = 0;
			Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
				Если ЭтоПланФакт Тогда
					СуммаПодчиненныхФакт = СуммаПодчиненныхФакт + ЭлементРодителя[ИмяКолонкиИтогФакт];
					СуммаПодчиненныхПлан = СуммаПодчиненныхПлан + ЭлементРодителя[ИмяКолонкиИтогПлан];
				Иначе
					СуммаПодчиненных = СуммаПодчиненных + ЭлементРодителя[ИмяКолонкиИтог];
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоПланФакт Тогда
				РодительСтроки[ИмяКолонкиИтогФакт] = СуммаПодчиненныхФакт;
				РодительСтроки[ИмяКолонкиИтогПлан] = СуммаПодчиненныхПлан;
			Иначе
				РодительСтроки[ИмяКолонкиИтог] = СуммаПодчиненных;
			КонецЕсли;
			РодительСтроки = РодительСтроки.Родитель;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИтогиРодителей(СтрокаДерева, ВыборкаСуммПоказателей, МассивПоказателейДляПересчета, ДанныеОтчета)
	
	РодительСтроки = СтрокаДерева.Родитель;
	
	Пока РодительСтроки <> Неопределено Цикл
		ЭлементыРодителя = РодительСтроки.Строки;
		Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
			Если Период >= ВыборкаСуммПоказателей.Период Тогда
				СуммаПодчиненных = 0;
				ИмяКолонкиБудущегоПериода = СформироватьИмяКолонкиПоПериоду(Период);
				Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
					СуммаПодчиненных = СуммаПодчиненных + ЭлементРодителя[ИмяКолонкиБудущегоПериода];
				КонецЦикла;
				РодительСтроки[ИмяКолонкиБудущегоПериода] = СуммаПодчиненных;
			КонецЕсли;
		КонецЦикла;
		МассивПоказателейДляПересчета.Добавить(РодительСтроки.ИдентификаторПоказателя);
		РодительСтроки = РодительСтроки.Родитель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДеревоРекурсивно(ДокументРезультат, Области, ДанныеОтчета, Строки, Уровень)
	
	Для каждого ТекущаяСтрока Из Строки Цикл
		
		Если ТекущаяСтрока.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
			Показатель = Области.ДоходПоказатель;
			Итого = Области.ДоходИтого;
			ИтогоПлан = Области.ДоходИтогоПлан;
			Сумма = Области.СуммаДоход;
			СуммаАктивныйПериод = Области.ДоходАктивныйПериод;
			СуммаАктивныйПериодПлан = Области.ДоходАктивныйПериодПлан;
		ИначеЕсли ТекущаяСтрока.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход Тогда
			Показатель = Области.РасходПоказатель;
			Итого = Области.РасходИтого;
			ИтогоПлан = Области.РасходИтогоПлан;
			Сумма = Области.СуммаРасход;
			СуммаАктивныйПериод = Области.РасходАктивныйПериод;
			СуммаАктивныйПериодПлан = Области.РасходАктивныйПериодПлан;
		ИначеЕсли ТекущаяСтрока.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
			Показатель = Области.ГруппаПоказатель;
			Итого = Области.ГруппаИтого;
			ИтогоПлан = Области.ГруппаИтогоПлан;
			Сумма = Области.СуммаГруппа;
			СуммаАктивныйПериод = Области.ГруппаАктивныйПериод;
			СуммаАктивныйПериодПлан = Области.ГруппаАктивныйПериодПлан;
		ИначеЕсли ТекущаяСтрока.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
			Показатель = Области.ФормулаПоказатель;
			Итого = Области.ФормулаИтого;
			ИтогоПлан = Области.ФормулаИтогоПлан;
			Сумма = Области.СуммаФормула;
			СуммаАктивныйПериод = Области.ФормулаАктивныйПериод;
			СуммаАктивныйПериодПлан = Области.ФормулаАктивныйПериодПлан;
		Иначе // Аналитика
			Показатель = Области.АналитикаПоказатель;
			Итого = Области.АналитикаИтого;
			ИтогоПлан = Области.АналитикаИтогоПлан;
			Сумма = Области.СуммаАналитика;
			СуммаАктивныйПериод = Области.АналитикаАктивныйПериод;
			СуммаАктивныйПериодПлан = Области.АналитикаАктивныйПериодПлан;
		КонецЕсли;
		
		Если ТекущаяСтрока.ЭтоПроцент Тогда
			СуммаАктивныйПериод.ТекущаяОбласть.Формат = "ЧДЦ=0; ЧФ='Ч %'";
			СуммаАктивныйПериодПлан.ТекущаяОбласть.Формат = "ЧДЦ=0; ЧФ='Ч %'";
			Сумма.ТекущаяОбласть.Формат = "ЧДЦ=0; ЧФ='Ч %'"; 
			Итого.ТекущаяОбласть.Формат = "ЧДЦ=0; ЧФ='Ч %'";
			ИтогоПлан.ТекущаяОбласть.Формат = "ЧДЦ=0; ЧФ='Ч %'";
		Иначе
			СуммаАктивныйПериод.ТекущаяОбласть.Формат = "ЧДЦ=2";
			СуммаАктивныйПериодПлан.ТекущаяОбласть.Формат = "ЧДЦ=2";
			Сумма.ТекущаяОбласть.Формат = "ЧДЦ=2";
			Итого.ТекущаяОбласть.Формат = "ЧДЦ=2";
			ИтогоПлан.ТекущаяОбласть.Формат = "ЧДЦ=2";
		КонецЕсли;
		
		Показатель.Параметры.Заполнить(ТекущаяСтрока);
		ДокументРезультат.Вывести(Показатель, Уровень);
		
		// Итоги и периоды
		Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
			
			ИтогоПлан.Параметры.Сумма = ТекущаяСтрока.ИтогоПлан;
			ИтогоПлан.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Истина, Истина);
			ДокументРезультат.Присоединить(ИтогоПлан);
			
			Итого.Параметры.Сумма = ТекущаяСтрока.ИтогоФакт;
			Итого.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Истина, Ложь);
			ДокументРезультат.Присоединить(Итого);
			
		Иначе
			
			Итого.Параметры.Сумма = ТекущаяСтрока.Итого;
			Итого.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Истина, Ложь);
			ДокументРезультат.Присоединить(Итого);
			
		КонецЕсли;
		
		Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
			
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
			
			Если ЭтоАктивныйПериод(Период, ДанныеОтчета.АктивныйПериод, ДанныеОтчета.Периодичность) Тогда
				
				Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
					
					СуммаАктивныйПериодПлан.Параметры.Сумма = ТекущаяСтрока[ИмяКолонки+"План"];
					СуммаАктивныйПериодПлан.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Ложь, Истина, Период);
					ДокументРезультат.Присоединить(СуммаАктивныйПериодПлан);
					
					СуммаАктивныйПериод.Параметры.Сумма = ТекущаяСтрока[ИмяКолонки];
					СуммаАктивныйПериод.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Ложь, Ложь, Период);
					ДокументРезультат.Присоединить(СуммаАктивныйПериод);
					
				Иначе
					
					СуммаАктивныйПериод.Параметры.Сумма = ТекущаяСтрока[ИмяКолонки];
					СуммаАктивныйПериод.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Ложь, Ложь, Период);
					ДокументРезультат.Присоединить(СуммаАктивныйПериод);
					
				КонецЕсли;
				
			Иначе
				
				Сумма.Параметры.Сумма = ТекущаяСтрока[ИмяКолонки];
				Сумма.Параметры.ДанныеЯчейки = ДанныеЯчейки(ТекущаяСтрока, Ложь, Ложь, Период);
				ДокументРезультат.Присоединить(Сумма);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиДеревоРекурсивно(ДокументРезультат, Области, ДанныеОтчета, ТекущаяСтрока.Строки, Уровень+1);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЯчейки(ТекущаяСтрока, ЭтоИтоги, ЭтоПлан, Период = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТипПоказателя)
		ИЛИ ТекущаяСтрока.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЯчейки = Новый Структура;
	ДанныеЯчейки.Вставить("ЭтоИтоги", ЭтоИтоги);
	ДанныеЯчейки.Вставить("ЭтоПлан", ЭтоПлан);
	ДанныеЯчейки.Вставить("Период", Период);
	ДанныеЯчейки.Вставить("Показатель", ТекущаяСтрока.Показатель);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Аналитика") Тогда
		ДанныеЯчейки.Вставить("Аналитика", ТекущаяСтрока.Аналитика);
	Иначе
		ДанныеЯчейки.Вставить("Аналитика", Неопределено);
	КонецЕсли;
	
	Возврат ДанныеЯчейки;
	
КонецФункции

Функция ЭтоАктивныйПериод(Период, АктивныйПериод, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПериодСУчетомПериодичности = НачалоМесяца(АктивныйПериод);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ПериодСУчетомПериодичности = НачалоКвартала(АктивныйПериод);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		МесяцПериода = Месяц(АктивныйПериод);
		ПериодСУчетомПериодичности = НачалоГода(АктивныйПериод);
		Если МесяцПериода > 6 Тогда
			ПериодСУчетомПериодичности = ДобавитьМесяц(ПериодСУчетомПериодичности, 6);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ПериодСУчетомПериодичности = НачалоГода(АктивныйПериод);
	Иначе // Другая периодичность не поддерживаются
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Период = ПериодСУчетомПериодичности;
	
КонецФункции

Процедура ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторПоказателя, ИмяКолонки, ДанныеОтчета, ТекущееДерево = Неопределено, ИдентификаторыПоказателей = Неопределено)
	
	// Ищем зависимые
	ЗависимыеЭлементы = ПолучитьЗависимыеЭлементыПоказателя(ИдентификаторПоказателя, ДанныеОтчета.СоответствиеЗависимыхЭлементов);
	
	Если ТекущееДерево <> Неопределено Тогда
		ДеревоПоказателей = ТекущееДерево;
	Иначе
		
		Если ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейДоходыРасходы;
		ИначеЕсли ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
			ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейДенежныйПоток;
		Иначе // Баланс
			ДеревоПоказателей = ДанныеОтчета.ДеревоПоказателейБаланс;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИдентификаторыПоказателей = Неопределено Тогда
		ИдентификаторыПоказателейДляФормул = ДанныеОтчета.ИдентификаторыПоказателейДляФормул;
	Иначе
		ИдентификаторыПоказателейДляФормул = ИдентификаторыПоказателей;
	КонецЕсли;
	
	Для каждого ИдентификаторФормулы Из ЗависимыеЭлементы Цикл
		
		СтрокаРасчетногоПоказателя = ИдентификаторыПоказателейДляФормул.Получить(ИдентификаторФормулы);
		Если СтрокаРасчетногоПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Формула = СтрокаРасчетногоПоказателя.СтрокаФормулы;
		
		Идентификаторы = Новый Массив;
		СоответствиеОперандов = Новый Соответствие;
		
		ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(Формула, Идентификаторы);
		
		Для каждого Идентификатор Из Идентификаторы Цикл
			СтрокаПоказателя = ИдентификаторыПоказателейДляФормул.Получить(Идентификатор);
			Если СтрокаПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеОперанда = СтрокаПоказателя[ИмяКолонки] ;
			Операнд = "[" + Идентификатор + "]";
			ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, ЗначениеОперанда);
		КонецЦикла;
		
		Результат = Неопределено;
		ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандов, Результат); 
		
		Если НЕ Результат.ОшибкаРасчета Тогда
			СтрокаРасчетногоПоказателя[ИмяКолонки] = Результат.Сумма;
			ОбновитьЗависимыеЭлементыПоФормуле(ВидОтчета, ИдентификаторФормулы, ИмяКолонки, ДанныеОтчета, ДеревоПоказателей, ИдентификаторыПоказателейДляФормул);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗависимыеЭлементыПоказателя(Показатель, СоответствиеЗависимыхЭлементов)
	
	ЗависимыеЭлементы = СоответствиеЗависимыхЭлементов.Получить(Показатель);
	Возврат ?(ЗависимыеЭлементы <> Неопределено, ЗависимыеЭлементы, Новый Массив);
	
КонецФункции

Функция ПолучитьСтрокуДереваПоПоказателю(ВидОтчета, Показатель, ДанныеОтчета)
	
	Если ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		СтрокаДерева = ДанныеОтчета.ДеревоПоказателейДоходыРасходы.Строки.Найти(Показатель, "Показатель", Истина);
	ИначеЕсли ВидОтчета = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток") Тогда
		СтрокаДерева = ДанныеОтчета.ДеревоПоказателейДенежныйПоток.Строки.Найти(Показатель, "Показатель", Истина);
	Иначе // Баланс
		СтрокаДерева = ДанныеОтчета.ДеревоПоказателейБаланс.Строки.Найти(Показатель, "Показатель", Истина);
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

Функция СформироватьИмяКолонкиПоПериоду(Знач Период)
	
	Возврат Формат(Период,"ДФ=_ггггММдд");
	
КонецФункции

Процедура ЗаполнитьИдентификаторыПоказателейРекурсивно(Показатели, ВременныеИдентификаторыПоказателей)
	
	Для каждого СтрокаПоказателя Из Показатели Цикл
		
		ВременныеИдентификаторыПоказателей.Вставить(СтрокаПоказателя.Показатель, СтрокаПоказателя.ПолучитьИдентификатор());
		ПодчиненныеЭлементыПоказателя = СтрокаПоказателя.Строки;
		
		Если ПодчиненныеЭлементыПоказателя.Количество() <> 0 Тогда
			ЗаполнитьИдентификаторыПоказателейРекурсивно(ПодчиненныеЭлементыПоказателя, ВременныеИдентификаторыПоказателей)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыПоказателейДляФормулРекурсивно(Показатели, ВременныеИдентификаторыПоказателей)
	
	Для каждого СтрокаПоказателя Из Показатели Цикл
		
		ВременныеИдентификаторыПоказателей.Вставить(СтрокаПоказателя.ИдентификаторПоказателя, СтрокаПоказателя);
		ПодчиненныеЭлементыПоказателя = СтрокаПоказателя.Строки;
		
		Если ПодчиненныеЭлементыПоказателя.Количество() <> 0 Тогда
			ЗаполнитьИдентификаторыПоказателейДляФормулРекурсивно(ПодчиненныеЭлементыПоказателя, ВременныеИдентификаторыПоказателей)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПустыеСтрокиДереваРекурсивно(Дерево, ДанныеОтчета)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если Дерево.Строки.Количество() > 0 Тогда
			УдалитьПустыеСтрокиДереваРекурсивно(СтрокаДерева, ДанныеОтчета);
		КонецЕсли;
		
		Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
			Если СтрокаДерева.Строки.Количество() = 0 И СтрокаДерева.ИтогоПлан = 0 И СтрокаДерева.ИтогоФакт = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаДерева);
			КонецЕсли;
		Иначе
			Если СтрокаДерева.Строки.Количество() = 0 И СтрокаДерева.Итого = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Дерево.Строки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли