
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Временное сообщение для отложенного обработчика обновления во фреше
	Элементы.ГруппаАктуальностьДанных.Видимость = НЕ Константы.РегистрДвиженияДенежныхСредствЗаполнен.Получить();
	
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	
	ВосстановитьНастройкиФормыИОтборов();
	
	ПоказателиБизнесаФормы.ИнициализироватьСлужебныеРеквизитыФормы(ЭтаФорма);
	
	АктивныйПериод = ТекущаяДатаСеанса();
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		Для каждого КлючИЗначение Из Параметры.Отбор Цикл
			Если КлючИЗначение.Ключ = "НачалоПериода" Тогда
				Отчет.ПериодОтчета = Новый СтандартныйПериод(НачалоГода(КлючИЗначение.Значение), КонецГода(КлючИЗначение.Значение));
				Отчет.Периодичность = Перечисления.Периодичность.Месяц;
				АктивныйПериод = КлючИЗначение.Значение;
			ИначеЕсли КлючИЗначение.Ключ = "КонецПериода" Тогда
				Если Год(КлючИЗначение.Значение) = Год(ТекущаяДатаСеанса()) Тогда
					Отчет.ПериодОтчета.ДатаОкончания = КонецМесяца(АктивныйПериод);
				Иначе
					Отчет.ПериодОтчета.ДатаОкончания = КонецГода(КлючИЗначение.Значение);
				КонецЕсли; 
			ИначеЕсли КлючИЗначение.Ключ = "Организация" Тогда 
				ОтборОрганизация = КлючИЗначение.Значение;
			ИначеЕсли КлючИЗначение.Ключ = "СценарийПланирования" Тогда 
				Отчет.СценарийПланирования = КлючИЗначение.Значение;
			КонецЕсли; 
		КонецЦикла;
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Отчет.ПериодОтчета);
	КонецЕсли;
	
	Если Отчет.Периодичность = Перечисления.Периодичность.Месяц Тогда
		АктивныйПериод = НачалоМесяца(АктивныйПериод);
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Квартал Тогда
		АктивныйПериод = НачалоКвартала(АктивныйПериод);
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		МесяцПериода = Месяц(АктивныйПериод);
		АктивныйПериод = НачалоГода(АктивныйПериод);
		Если МесяцПериода >= 6 Тогда
			АктивныйПериод = ДобавитьМесяц(АктивныйПериод, 6);
		КонецЕсли;
	ИначеЕсли Отчет.Периодичность = Перечисления.Периодичность.Год Тогда
		АктивныйПериод = НачалоГода(АктивныйПериод);
	КонецЕсли;
	
	ПредставлениеАктивногоПериода = ПоказателиБизнесаФормы.ЗаголовокКолонки(АктивныйПериод, Отчет.Периодичность);
	
	// Тесная интеграция с подсистемами БСП.
	НастройкиОтчета = ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Внешний", Ложь);
	НастройкиОтчета.Вставить("ПолноеИмя", РеквизитФормыВЗначение("Отчет").Метаданные().ПолноеИмя());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		Если НЕ НастройкиОтчета.Свойство("ВариантСсылка") Тогда
			Если Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
				НастройкиОтчета.Вставить("ВариантСсылка", Параметры.Ключ);
			Иначе
				НастройкиОтчета.Вставить("ВариантСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
			КонецЕсли; 
		КонецЕсли; 
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		УбратьКартинкиКомандРекурсивно(Элементы.ГруппаОтправить.ПодчиненныеЭлементы);
	КонецЕсли;
	
	ОбновитьОтчеты();
	ОбновитьКарточки();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьЭлементыФормыМобильныйКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

#Если МобильныйКлиент Тогда
	ДекорацияВидОтчетаНажатие(Элементы.ДекорацияДоходыРасходы);
#Иначе
	Если ЗначениеЗаполнено(АктивнаяГиперссылка) Тогда
		ДекорацияВидОтчетаНажатие(Элементы[АктивнаяГиперссылка]);
	Иначе
		ДекорацияВидОтчетаНажатие(Элементы.ДекорацияДоходыРасходы);
	КонецЕсли;
#КонецЕсли
	
	ОбновитьОтображениеЭлементовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиФормыИОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПоказателяФинансовыхОтчетов"  Тогда
		
		ОбновитьОтчеты();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытиеФормыБюджета" Тогда
		
		Отчет.ПериодОтчета.ДатаНачала = Параметр.НачалоПериода;
		Отчет.ПериодОтчета.ДатаОкончания = Параметр.КонецПериода;
		Отчет.СценарийПланирования = Параметр.СценарийПланирования;
		Отчет.Периодичность = Параметр.Периодичность;
		
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Отчет.ПериодОтчета);
		
		ОбновитьОтчеты();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКарточкиАнализаБизнеса" Тогда
		
		Если НЕ Параметр.Свойство("ВидКарточки") ИЛИ НЕ Параметр.Свойство("Ссылка") 
			ИЛИ НЕ ЗначениеЗаполнено(Параметр.ВидКарточки) ИЛИ Параметр.Ссылка.Пустая() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ИмяТаблицы = ?(Параметр.ВидКарточки = ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.Цель"), "СписокЦелей", "СписокПроверок");
		СтрокиКарточки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("Ссылка", Параметр.Ссылка));
		
		Если СтрокиКарточки.Количество() = 0 Тогда // Добавили новую
			
			ДобавитьКарточкуНаФорму(Параметр.ВидКарточки, Параметр.Ссылка);
			
		Иначе // Обновляем отображение
			
			СтрокаКарточки = СтрокиКарточки[0];
			ДанныеКарточки = ПолучитьДанныеКарточкиНаСервере(Параметр.Ссылка);
			Если ДанныеКарточки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКарточки, ДанныеКарточки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКарточкуНаФорму(ВидКарточки, Ссылка)
	
	ИмяТаблицы = ?(ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель, "СписокЦелей", "СписокПроверок");
	ЭлементДобавить = ?(ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель, Элементы.ДобавитьКарточкуЦели,  Элементы.ДобавитьПроверку);
	ДанныеКарточки = ПолучитьДанныеКарточкиНаСервере(Ссылка);
	
	ПараметрыЭлемента = Справочники.КарточкиАнализаБизнеса.СформироватьПараметрыЭлементаКарточки(ВидКарточки);
	ПараметрыЭлемента.РодительЭлемента = НайтиИлиДобавитьГруппуКарточек(ВидКарточки);
	
	НомерСтроки = ЭтаФорма[ИмяТаблицы].Количество();
	СтрокаКарточки = ЭтаФорма[ИмяТаблицы].Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаКарточки, ДанныеКарточки);
	СтрокаКарточки.SVG = СформироватьSVGПоСтроке(СтрокаКарточки.СтрокаSVG);
	
	ПараметрыЭлемента.ИмяЭлемента = ИмяТаблицы + "_" + НомерСтроки;
	ПараметрыЭлемента.ПутьКДанным = СтрШаблон(ПараметрыЭлемента.ШаблонПутьКДанным, ИмяТаблицы, НомерСтроки);
	
	СформироватьЭлементКарточки(ПараметрыЭлемента);
	СформироватьЭлементУдалитьКарточку(ПараметрыЭлемента);
	Элементы[ПараметрыЭлемента.ИмяЭлемента + "_Удалить"].Видимость = Истина;
	
	РодительЭлементаДобавить = НайтиИлиДобавитьГруппуКарточек(ВидКарточки);
	Элементы.Переместить(ЭлементДобавить, РодительЭлементаДобавить);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКарточкиНаСервере(Ссылка)
	
	ДанныеКарточки = Справочники.КарточкиАнализаБизнеса.ПолучитьДанныеКарточки(Ссылка);
	Если ДанныеКарточки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МодифицироватьТекстSVGПоРежимуРедактирования(ДанныеКарточки.СтрокаSVG, РежимРедактирования);
	
	ДанныеКарточки.Вставить("SVG", СформироватьSVGПоСтроке(ДанныеКарточки.СтрокаSVG));
	Возврат ДанныеКарточки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ПереключениеСтраниц

&НаКлиенте
Процедура ДекорацияВидОтчетаНажатие(Элемент)
	
	АктивнаяГиперссылка = Элемент.Имя;
	
	Если Элемент.Имя = "ДекорацияАссистент" Тогда
		Элементы.ГруппаВариантыОтчетов.ТекущаяСтраница = Элементы.ГруппаАссистент;
		ВыбранныйОтчет = Неопределено;
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Истина);
		Элементы.ГруппаСвернутьРазвернуть.Видимость = Ложь;
		Элементы.ГруппаПраваяПанель.Видимость = Ложь;
		Элементы.ВключитьРежимРедактирования.Видимость = Истина;
		Элементы.ПечатьОтчета.Видимость = Ложь;
		Элементы.ГруппаОтправить.Видимость = Ложь;
		Элементы.ГруппаОтправитьЕще.Видимость = Ложь;
		Элементы.СохранитьОтчет.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияАссистент.Шрифт = Новый Шрифт(Элементы.ДекорацияАссистент.Шрифт,,,Ложь);
		Элементы.ГруппаСвернутьРазвернуть.Видимость = Истина;
		Элементы.ГруппаПраваяПанель.Видимость = Истина;
		Элементы.ВключитьРежимРедактирования.Видимость = Ложь;
		Элементы.ПечатьОтчета.Видимость = Истина;
		Элементы.ГруппаОтправить.Видимость = Истина;
		Элементы.ГруппаОтправитьЕще.Видимость = Истина;
		Элементы.СохранитьОтчет.Видимость = Истина;
	КонецЕсли;
	
	Если Элемент.Имя = "ДекорацияДоходыРасходы" Тогда
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы");
	ИначеЕсли Элемент.Имя = "ДекорацияДенежныйПоток" Тогда
		ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток");
	Иначе // Баланс
		ВыбранныйОтчет =  ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс");
	КонецЕсли;
	
	Если ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток")
		ИЛИ ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы") Тогда
		
		Элементы.ГруппаОтборПроект.Видимость = Истина;
		Элементы.ГруппаОтборПодразделение.Видимость = Истина;
		Элементы.Группировка.Видимость = Истина;
		
	Иначе // Баланс
		
		Элементы.ГруппаОтборПроект.Видимость = Ложь;
		Элементы.ГруппаОтборПодразделение.Видимость = Ложь;
		Элементы.Группировка.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СвернутьРазвернутьДоходыРасходы.Видимость = ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДоходыРасходы");
	Элементы.СвернутьРазвернутьДенежныйПоток.Видимость = ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.ДенежныйПоток");
	Элементы.СвернутьРазвернутьБаланс.Видимость 	   = ВыбранныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс");
	
	ПереключитьСтраницу(Элементы, ВидыОтчетов, Элемент.Имя);
	
	Если РазделениеВключено Тогда
		КлючеваяОперация = "АнализБизнеса" + СтрЗаменить(Элемент.Имя, "Декорация", ""); // Не локализуется
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	Иначе
		СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "Нажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ВидыОтчетов, АктивнаяСтраница)
	
	Для каждого ВидОтчета Из ВидыОтчетов Цикл
		
		ИмяДекорации = "Декорация" + ВидОтчета.Представление;
		ИмяГруппы = "ГруппаДерево" + ВидОтчета.Представление;
		
		Если ИмяДекорации = АктивнаяСтраница Тогда
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Истина);
			Элементы.ГруппаВариантыОтчетов.ТекущаяСтраница = Элементы[ИмяГруппы];
		Иначе
			Элементы[ИмяДекорации].Шрифт = Новый Шрифт(Элементы[ИмяДекорации].Шрифт,,,Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваяПанель

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ВыровнятьПериодПоПериодичности();
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	
	Отчет.Периодичность = ПолучитьПериодичностьСценария(Отчет.СценарийПланирования);
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПриИзменении(Элемент)
	
	Если Отчет.ПланФакт =  ПредопределенноеЗначение("Перечисление.ПланФакт.Факт") Тогда
		Отчет.СценарийПланирования = ПредопределенноеЗначение("Справочник.СценарииПланирования.Фактический");
		Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	Иначе
		Если Отчет.СценарийПланирования = ПредопределенноеЗначение("Справочник.СценарииПланирования.Фактический") Тогда
			Отчет.СценарийПланирования = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
			Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Отчет.ПланФакт <> ПредопределенноеЗначение("Перечисление.ПланФакт.Факт") Тогда
		
		Если НЕ БюджетированиеИспользуется() Тогда
			ТекстВопроса = НСтр("ru = 'Анализировать план можно только после включения настройки ""Бюджетирование"". Использовать бюджетирование?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогВключенияБюджетированияПродолжение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			Если БюджетыНеСозданы() Тогда
				ОткрытьДиалогСозданияБюджета();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОтображениеЭлементовНаКлиенте();
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	ОбновитьОтчеты();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПустыеСтрокиПриИзменении(Элемент)
	ОбновитьОтчеты();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПравуюПанельНажатие(Элемент)
	
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьПравуюПанель.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПравуюПанельНажатие(Элемент)
	
	Элементы.ГруппаСтраницы.Видимость = Не Элементы.ГруппаСтраницы.Видимость;
	Элементы.ДекорацияРазвернутьПравуюПанель.Видимость = Не Элементы.ДекорацияРазвернутьПравуюПанель.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивныйПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеАктивногоПериода = ПолучитьПредставлениеПериода(ВыбранноеЗначение, Отчет.Периодичность);
	АктивныйПериод = ВыбранноеЗначение;
	
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Отчет.ПериодОтчета;
	
	Диалог.Показать(Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйПериод.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(НовыйПериод.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно выбрать неограниченный период.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Элементы.ПредставлениеПериода, "ПредставлениеПериода");
	Иначе
		
		Отчет.ПериодОтчета = НовыйПериод;
		
		ВыровнятьПериодПоПериодичности();
		
		ОбновитьОтчеты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтбор("Подразделение", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтбор(ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Неопределено, МеткаИД,,, Ложь);
	
	ОбновитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	
	ИмяРеквизитаСписка = "Список";
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияКарточекАнализаБизнеса

&НаКлиенте
Процедура Подключаемый_КарточкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидКарточки = Неопределено;
	Значение = ПредопределенноеЗначение("Справочник.КарточкиАнализаБизнеса.ПустаяСсылка");
	
	Если Элемент.Имя = "ДобавитьКарточкуЦели" Тогда
		ВидКарточки = ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.Цель");
	ИначеЕсли Элемент.Имя = "ДобавитьПроверку" Тогда
		ВидКарточки = ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.КонтрольПоказателей");
	Иначе
		
		ПараметрыЭлемента = СформироватьПараметрыЭлементаПоИмени(Элемент.Имя);
		
		// Параметры не получены
		Если НЕ ЗначениеЗаполнено(ПараметрыЭлемента.ИмяТаблицы) ИЛИ ПараметрыЭлемента.ИндексСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаЭлемента = ЭтаФорма[ПараметрыЭлемента.ИмяТаблицы].Получить(ПараметрыЭлемента.ИндексСтроки);
		
		// Строка не найдена
		Если СтрокаЭлемента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтрокаЭлемента.Ссылка;
		
	КонецЕсли;
	
	ОткрытьФормуЭлементаПоЗначению(Значение, ВидКарточки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьКарточкуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЭлемента = СформироватьПараметрыЭлементаПоИмени(Элемент.Имя);
	
	// Параметры не получены
	Если НЕ ЗначениеЗаполнено(ПараметрыЭлемента.ИмяТаблицы) ИЛИ ПараметрыЭлемента.ИндексСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКУдалению = ЭтаФорма[ПараметрыЭлемента.ИмяТаблицы];
	СсылкаДляПометкиНаУдаление = ТаблицаКУдалению[ПараметрыЭлемента.ИндексСтроки].Ссылка;
	ТаблицаКУдалению.Удалить(ПараметрыЭлемента.ИндексСтроки);
	
	КоличествоПослеУдаленияСтроки = ТаблицаКУдалению.Количество();
	ИмяУдаляемогоЭлемента = ПараметрыЭлемента.ИмяТаблицы + "_" + КоличествоПослеУдаленияСтроки;
	
	МассивЭлементовДляУдаления = Новый Массив;
	МассивЭлементовДляУдаления.Добавить(ИмяУдаляемогоЭлемента);
	МассивЭлементовДляУдаления.Добавить(ИмяУдаляемогоЭлемента + "_Удалить");
	
	УдалитьЭлементыНаСервере(ПараметрыЭлемента.ИмяТаблицы, МассивЭлементовДляУдаления, СсылкаДляПометкиНаУдаление);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуЦелиНажатие(Элемент)
	
	ОтображатьПодсказкуЦели = Ложь;
	Элементы.ГруппаПодсказкаЦели.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуПроверкиНажатие(Элемент)
	
	ОтображатьПодсказкуПроверки = Ложь;
	Элементы.ГруппаПодсказкаПроверки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныйПотокТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ОбработатьРасшифровкуЯчейки(Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыРасходыТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ОбработатьРасшифровкуЯчейки(Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура БалансТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ОбработатьРасшифровкуЯчейки(Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДанныеНеактуальныЗакрытьНажатие(Элемент)
	Элементы.ГруппаАктуальностьДанных.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьОтчеты();
	ОбновитьКарточки();
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьНаВесьЭкран(Команда)
	
	СохранитьНастройкиФормыИОтборов();
	ОткрытьФорму("Отчет.АнализБизнеса.Форма.Форма", ,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРедактирования(Команда)
	
	РежимРедактирования = НЕ РежимРедактирования;
	
	Если РежимРедактирования Тогда
		Элементы.ДекорацияЦели.Видимость = Истина;
		Элементы.ПоказателиДекорация.Видимость = Истина;;
		Элементы.ВключитьРежимРедактирования.ЦветФона = Новый Цвет(160,160,160);
	Иначе
		Элементы.ВключитьРежимРедактирования.ЦветФона = Новый Цвет;
		Элементы.ДекорацияЦели.Видимость = СписокЦелей.Количество() <> 0 ИЛИ ОтображатьПодсказкуЦели;
		Элементы.ПоказателиДекорация.Видимость = СписокПроверок.Количество() <> 0 ИЛИ ОтображатьПодсказкуПроверки;
	КонецЕсли;
	
	ВключитьРежимРедактированияКарточек(ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.Цель"));
	ВключитьРежимРедактированияКарточек(ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.КонтрольПоказателей"));
	
	ОбновитьSVGНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчета(Команда)
	
	СохранитьНастройкиФормыИОтборов();
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ПечатнаяФорма);
	ПечатнаяФорма.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	СохранитьНастройкиФормыИОтборов();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	ПоказатьДиалогОтправкиПоПочте(ТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНастройкиФормыИОтборов();
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СохранениеОтчетаЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройкиФормыИОтборов()
	
	НастройкиФормы = Отчеты.АнализБизнеса.ИнициализироватьНастройкиФормы();
	Отчеты.АнализБизнеса.ВосстановитьНастройкиФормы(НастройкиФормы);
	
	АктивнаяГиперссылка = НастройкиФормы.АктивнаяГиперссылка;
	
	ОтображатьПодсказкуПроверки = НастройкиФормы.ОтображатьПодсказкуПроверки;
	ОтображатьПодсказкуЦели = НастройкиФормы.ОтображатьПодсказкуЦели;
	Отчеты.АнализБизнеса.ВосстановитьНастройкиОтборов(Отчет, ДанныеМеток);
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтаФорма);
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Отчет.ПериодОтчета);
	
	ИспользоватьПроекты = ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям");
	
	Если ИспользоватьПроекты Тогда
		Элементы.Группировка.СписокВыбора.Добавить(Перечисления.ГруппировкаАнализаБизнеса.Проекты);
	КонецЕсли;
	
	Если ИспользоватьПодразделения Тогда
		Элементы.Группировка.СписокВыбора.Добавить(Перечисления.ГруппировкаАнализаБизнеса.Подразделения);
	КонецЕсли;
	
	Если НЕ ИспользоватьПроекты И НЕ ИспользоватьПодразделения Тогда
		Отчет.Группировка = Перечисления.ГруппировкаАнализаБизнеса.Показатели;
		Элементы.ГруппаВариант.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьОтображениеЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыИОтборов()
	
	НастройкиФормы = Отчеты.АнализБизнеса.ИнициализироватьНастройкиФормы();
	НастройкиФормы.АктивнаяГиперссылка 		   = АктивнаяГиперссылка;
	НастройкиФормы.ОтображатьПодсказкуПроверки = ОтображатьПодсказкуПроверки;
	НастройкиФормы.ОтображатьПодсказкуЦели 	   = ОтображатьПодсказкуЦели;
	
	Отчеты.АнализБизнеса.СохранитьНастройкиФормы(НастройкиФормы);
	Отчеты.АнализБизнеса.СохранитьНастройкиОтборов(Отчет, ДанныеМеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовНаКлиенте()
	
	АнализироватьФакт = (Отчет.ПланФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.Факт"));
	Элементы.СценарийПланирования.Доступность = НЕ АнализироватьФакт;
	Элементы.Периодичность.Доступность = АнализироватьФакт;
	Элементы.АктивныйПериод.Видимость = Отчет.ПланФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.ПланФакт");
	
	Элементы.ГруппаПодсказкаЦели.Видимость = ОтображатьПодсказкуЦели;
	Элементы.ГруппаПодсказкаПроверки.Видимость = ОтображатьПодсказкуПроверки;
	
	Элементы.ДекорацияЦели.Видимость = СписокЦелей.Количество() <> 0 ИЛИ ОтображатьПодсказкуЦели;
	Элементы.ПоказателиДекорация.Видимость = СписокПроверок.Количество() <> 0 ИЛИ ОтображатьПодсказкуПроверки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеЭлементов()
	
	АнализироватьФакт = (Отчет.ПланФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.Факт"));
	Элементы.СценарийПланирования.Доступность = НЕ АнализироватьФакт;
	Элементы.Периодичность.Доступность = АнализироватьФакт;
	Элементы.АктивныйПериод.Видимость = Отчет.ПланФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.ПланФакт");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчеты()
	
	ПоказателиБизнесаФормы.ЗаполнитьСписокПериодов(ПериодыПланирования, Отчет.ПериодОтчета, Отчет.Периодичность);
	ЗаполнитьСписокАктивныхПериодов(ПериодыПланирования, Отчет.Периодичность); 
	
	Если ЗначениеЗаполнено(Отчет.СценарийПланирования) Тогда
		ДанныеОтчета = ИнициализироватьДанныеОтчета();
		ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы;
		Отчеты.АнализБизнеса.СформироватьОтчет(ДоходыРасходыТабличныйДокумент, ДанныеОтчета);
		
		ДанныеОтчета = ИнициализироватьДанныеОтчета();
		ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток;
		Отчеты.АнализБизнеса.СформироватьОтчет(ДенежныйПотокТабличныйДокумент, ДанныеОтчета);
		
		ДанныеОтчета = ИнициализироватьДанныеОтчета();
		ДанныеОтчета.ВидОтчетаОтбор = Перечисления.ВидыФинансовыхОтчетов.Баланс;
		Отчеты.АнализБизнеса.СформироватьОтчет(БалансТабличныйДокумент, ДанныеОтчета);
	Иначе
		ТекущийЭлемент = Элементы.СценарийПланирования;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьДанныеОтчета()
	
	ДанныеОтчета = Новый Структура("ВидОтчетаОтбор,ПериодОтчета,ПланФакт,Периодичность,СценарийПланирования");
	ДанныеОтчета.Вставить("ДанныеМеток", ДанныеМеток.Выгрузить());
	
	ДанныеОтчета.Вставить("ВидОтчетаОтбор", Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы);
		
	ДанныеОтчета.Вставить("СценарийПланирования", Отчет.СценарийПланирования);
	ДанныеОтчета.Вставить("ПериодОтчета", Отчет.ПериодОтчета);
	ДанныеОтчета.Вставить("ПланФакт", Отчет.ПланФакт);
	ДанныеОтчета.Вставить("Периодичность", Отчет.Периодичность);
	
	ДанныеОтчета.Вставить("ГруппировкаАнализаБизнеса", Отчет.Группировка);
	
	ДанныеОтчета.Вставить("АктивныйПериод", АктивныйПериод);
	
	ДанныеОтчета.Вставить("ПериодыПланирования", Новый Массив);
	ПоказателиБизнесаФормы.ЗаполнитьСписокПериодов(ДанныеОтчета.ПериодыПланирования, ДанныеОтчета.ПериодОтчета, ДанныеОтчета.Периодичность);
	
	ВидыОтчетов = Новый СписокЗначений;
	ВидыОтчетов.Добавить(Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы, "ДоходыРасходы");
	ВидыОтчетов.Добавить(Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток, "ДенежныйПоток");
	ВидыОтчетов.Добавить(Перечисления.ВидыФинансовыхОтчетов.Баланс, 		"Баланс");
	
	ДанныеОтчета.Вставить("ВидыОтчетов", ВидыОтчетов);
	
	ДанныеОтчета.Вставить("ИдентификаторыПоказателей", Новый Соответствие);
	ДанныеОтчета.Вставить("ИдентификаторыПоказателейДляФормул", Новый Соответствие);
	ДанныеОтчета.Вставить("ВременноеСоответствиеЗависимыхЭлементов", Новый Соответствие);
	ДанныеОтчета.Вставить("СоответствиеЗависимыхЭлементов", Новый Соответствие);
	
	ДанныеОтчета.Вставить("ЭтоВыводНаПечать", Ложь);
	ДанныеОтчета.Вставить("ПоказыватьПустыеСтроки", Отчет.ПоказыватьПустыеСтроки);
	
	ИнициализироватьДеревьяОтчета(ДанныеОтчета);
	
	Возврат ДанныеОтчета;
	
КонецФункции

Процедура ИнициализироватьДеревьяОтчета(ДанныеОтчета)
	
	МассивИменДеревьев = ПоказателиБизнесаФормы.ИменаДеревьевФормы();
	
	Для каждого ИмяДерева Из МассивИменДеревьев Цикл
		
		Дерево = Новый ДеревоЗначений;
		
		Дерево.Колонки.Добавить("Показатель");
		Дерево.Колонки.Добавить("Порядок");
		Дерево.Колонки.Добавить("Представление");
		Дерево.Колонки.Добавить("ЭтоВерхнийУровеньИерархии");
		Дерево.Колонки.Добавить("ТипПоказателя");
		Дерево.Колонки.Добавить("НомерКартинкиСтроки");
		Дерево.Колонки.Добавить("ИдентификаторПоказателя");
		Дерево.Колонки.Добавить("ОписаниеПоказателя");
		Дерево.Колонки.Добавить("СтрокаФормулы");
		Дерево.Колонки.Добавить("ЭтоПроцент");
		Дерево.Колонки.Добавить("Аналитика");
		
		Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт Тогда
			Дерево.Колонки.Добавить("ИтогоПлан", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
			Дерево.Колонки.Добавить("ИтогоФакт", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
		Иначе
			Дерево.Колонки.Добавить("Итого", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
		
		Для каждого Период Из ДанныеОтчета.ПериодыПланирования Цикл
			ИмяКолонки = СформироватьИмяКолонкиПоПериоду(Период);
			Дерево.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
			Если ДанныеОтчета.ПланФакт = Перечисления.ПланФакт.ПланФакт И ЭтоАктивныйПериод(Период, ДанныеОтчета.АктивныйПериод, ДанныеОтчета.Периодичность) Тогда
				ИмяКолонки = ИмяКолонки + "План";
				Дерево.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОтчета.Вставить(ИмяДерева, Дерево);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьИмяКолонкиПоПериоду(Знач Период)
	
	Возврат Формат(Период,"ДФ=_ггггММдд");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокАктивныхПериодов(ПериодыПланирования, Периодичность)
	
	Элементы.АктивныйПериод.СписокВыбора.Очистить();
	
	Для каждого Период Из ПериодыПланирования Цикл
		Если Период.Значение > НачалоМесяца(ТекущаяДатаСеанса()) Тогда
			Прервать;
		КонецЕсли;
		ПериодПредставление = ПоказателиБизнесаФормы.ЗаголовокКолонки(Период.Значение, Периодичность);
		Элементы.АктивныйПериод.СписокВыбора.Добавить(Период.Значение, ПериодПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПериодичностьСценария(СценарийПланирования)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СценарийПланирования, "Периодичность");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоАктивныйПериод(Период, АктивныйПериод, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПериодСУчетомПериодичности = НачалоМесяца(АктивныйПериод);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ПериодСУчетомПериодичности = НачалоКвартала(АктивныйПериод);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		МесяцПериода = Месяц(АктивныйПериод);
		ПериодСУчетомПериодичности = НачалоГода(АктивныйПериод);
		Если МесяцПериода > 6 Тогда
			ПериодСУчетомПериодичности = ДобавитьМесяц(ПериодСУчетомПериодичности, 6);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ПериодСУчетомПериодичности = НачалоГода(АктивныйПериод);
	Иначе // Другая периодичность не поддерживаются
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Период = ПериодСУчетомПериодичности;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(ВыбранныйПериод, Периодичность)
	Возврат ПоказателиБизнесаФормы.ЗаголовокКолонки(ВыбранныйПериод, Периодичность);
КонецФункции

&НаСервере
Процедура ОбновитьКарточки()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	//Очистка формы
	Пока Элементы.ГруппаКарточкиЦели.ПодчиненныеЭлементы.Количество() <> 0 Цикл
		Элементы.Удалить(Элементы.ГруппаКарточкиЦели.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
	Пока Элементы.ГруппаКарточкиПроверки.ПодчиненныеЭлементы.Количество() <> 0 Цикл
		Элементы.Удалить(Элементы.ГруппаКарточкиПроверки.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
	СписокПроверок.Очистить();
	СписокЦелей.Очистить();
	
	СформироватьКарточкиАнализаБизнеса(Перечисления.ВидыКарточекАнализаБизнеса.Цель);
	СформироватьКарточкиАнализаБизнеса(Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БюджетыНеСозданы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бюджет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Бюджет КАК Бюджет
		|ГДЕ
		|	Бюджет.Проведен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();

КонецФункции

&НаКлиенте
Процедура ДиалогСозданияБюджетаПродолжение(Выбор, ДополнительныеПараметры) Экспорт
	
	Если Выбор = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Документ.Бюджет.Форма.ФормаДокумента",,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВключенияБюджетированияПродолжение(Выбор, ДополнительныеПараметры) Экспорт
	
	Если Выбор = КодВозвратаДиалога.Да Тогда
		ВключитьОпциюБюджетирование();
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОткрытьДиалогСозданияБюджета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БюджетированиеИспользуется()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование");
КонецФункции

&НаСервереБезКонтекста
Процедура ВключитьОпциюБюджетирование()
	Константы.ФункциональнаяОпцияИспользоватьБюджетирование.Установить(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогСозданияБюджета()
	
	ТекстВопроса = НСтр("ru = 'Не найдено ни одного бюджета. Создать новый?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогСозданияБюджетаПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыровнятьПериодПоПериодичности()
	
	ДатаНачала = Отчет.ПериодОтчета.ДатаНачала;
	ДатаОкончания = Отчет.ПериодОтчета.ДатаОкончания;
		
	Если Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ДатаНачала 	  = НачалоМесяца(ДатаНачала);
		ДатаОкончания = КонецМесяца(ДатаОкончания);
		
	ИначеЕсли Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ДатаНачала 	  = НачалоКвартала(ДатаНачала);
		ДатаОкончания = КонецКвартала(ДатаОкончания);
		
	ИначеЕсли Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		МесяцДатыНачала = Месяц(ДатаНачала);
		
		ДатаНачала = НачалоГода(ДатаНачала);
		
		Если МесяцДатыНачала > 6 Тогда
			
			ДатаНачала = ДобавитьМесяц(ДатаНачала, 6);
			
		КонецЕсли;
		
		МесяцДатыОкончания = Месяц(ДатаОкончания);
		
		ДатаОкончания = КонецГода(ДатаОкончания);
		
		Если МесяцДатыОкончания < 6 Тогда
			
			ДатаОкончания = ДобавитьМесяц(ДатаОкончания, -6);
			
		КонецЕсли;
		
	Иначе // Год
		
		ДатаНачала 	  = НачалоГода(ДатаНачала);
		ДатаОкончания = КонецГода(ДатаОкончания);
		
	КонецЕсли;
	
	Если Отчет.ПериодОтчета.ДатаНачала <> ДатаНачала ИЛИ Отчет.ПериодОтчета.ДатаОкончания <> ДатаОкончания Тогда
		
		Отчет.ПериодОтчета.ДатаНачала = ДатаНачала;
		Отчет.ПериодОтчета.ДатаОкончания = ДатаОкончания;
		
		ТекстСообщения = НСтр("ru = 'Период был изменен по периодичности'");
		ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.ПлатежныйКалендарьИзменитьДату);
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Отчет.ПериодОтчета);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыМобильныйКлиент()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыВариантовОтчета", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАссистент", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВариантыОтчетов", "ОтображениеСтраниц", ОтображениеСтраницФормы.ЗакладкиСверху);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаОтбор", "Ширина", 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаОтбор", "РастягиватьПоГоризонтали", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПраваяПанель", "ОтображатьЗаголовок", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРазвернуть", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвернутьОтбор", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаскрытьНаВесьЭкран", "Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровкуЯчейки(Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранныйОтчет =  ПредопределенноеЗначение("Перечисление.ВидыФинансовыхОтчетов.Баланс") Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЯчейки = Новый Структура;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Показатель",     Расшифровка.Показатель);
		ПараметрыОткрытия.Вставить("Аналитика",      Расшифровка.Аналитика);
		ПараметрыОткрытия.Вставить("Периодичность",  Отчет.Периодичность);
		ПараметрыОткрытия.Вставить("Группировка",    Отчет.Группировка);
		ПараметрыОткрытия.Вставить("ВыбранныйОтчет", ВыбранныйОтчет);
		ПараметрыОткрытия.Вставить("ДанныеМеток",    ДанныеМеток);
		
		ЗаполнитьПериодРасшифровкиПоТекущийКолонке(Расшифровка, ПараметрыОткрытия);
		ЗаполнитьСценарийПланированияПоТекущийКолонке(Расшифровка, ПараметрыОткрытия);
		
		ПараметрыЯчейки.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
		
		ОткрытьФорму("Отчет.АнализБизнеса.Форма.ФормаРасшифровкиЗначения", ПараметрыЯчейки, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПериодРасшифровкиПоТекущийКолонке(Расшифровка, СтруктураПараметров)
	
	Если Расшифровка.ЭтоИтоги Тогда // Колонка итогов
		СтруктураПараметров.Вставить("НачалоПериода", Отчет.ПериодОтчета.ДатаНачала);
		СтруктураПараметров.Вставить("КонецПериода", Отчет.ПериодОтчета.ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	НачалоПериода = Расшифровка.Период;
	
	Если Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		КонецПериода = КонецМесяца(НачалоПериода);
	ИначеЕсли Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		КонецПериода = КонецКвартала(НачалоПериода);
	ИначеЕсли Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		Если Месяц(НачалоПериода) = 1 Тогда
			КонецПериода = КонецМесяца(ДобавитьМесяц(НачалоПериода, 6));
		Иначе
			КонецПериода = КонецГода(НачалоПериода);
		КонецЕсли;
		
	ИначеЕсли Отчет.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		КонецПериода = КонецГода(НачалоПериода);
	Иначе
		КонецПериода = НачалоПериода;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода", КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСценарийПланированияПоТекущийКолонке(Расшифровка, СтруктураПараметров)
	
	СценарийПланирования = Отчет.СценарийПланирования;
	
	Если Отчет.ПланФакт = ПредопределенноеЗначение("Перечисление.ПланФакт.ПланФакт") Тогда
		
		Если СтруктураПараметров.НачалоПериода <= АктивныйПериод И Расшифровка.ЭтоПлан = Ложь Тогда
			СценарийПланирования = ПредопределенноеЗначение("Справочник.СценарииПланирования.Фактический");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СценарийПланирования", СценарийПланирования);
	
КонецПроцедуры

#Область КарточкиАнализаБизнеса

&НаСервере
Функция ПолучитьВыборкуЦелей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦелиБизнеса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КарточкиАнализаБизнеса КАК ЦелиБизнеса
		|ГДЕ
		|	НЕ ЦелиБизнеса.ПометкаУдаления
		|	И ЦелиБизнеса.ВидКарточки = ЗНАЧЕНИЕ(Перечисление.ВидыКарточекАнализаБизнеса.Цель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦелиБизнеса.Наименование";
	
	ВыборкаЦелей = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаЦелей;
	
КонецФункции

&НаСервере
Функция ПолучитьВыборкуПроверок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиАнализаБизнеса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КарточкиАнализаБизнеса КАК КарточкиАнализаБизнеса
		|ГДЕ
		|	НЕ КарточкиАнализаБизнеса.ПометкаУдаления
		|	И КарточкиАнализаБизнеса.ВидКарточки = ЗНАЧЕНИЕ(Перечисление.ВидыКарточекАнализаБизнеса.КонтрольПоказателей)";
	
	ВыборкаПроверок = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаПроверок;
	
КонецФункции

&НаКлиенте
Процедура ВключитьРежимРедактированияКарточек(ВидКарточки)
	
	Если ВидКарточки = ПредопределенноеЗначение("Перечисление.ВидыКарточекАнализаБизнеса.Цель") Тогда
		ИмяТаблицы = "СписокЦелей"; // Не локализуется
		Элементы.ДобавитьКарточкуЦели.Видимость = РежимРедактирования;
	Иначе // Проверки
		ИмяТаблицы = "СписокПроверок"; // Не локализуется
		Элементы.ДобавитьПроверку.Видимость = РежимРедактирования;
	КонецЕсли;
	
	ТаблицаКарточек = ЭтаФорма[ИмяТаблицы];
	
	Для каждого СтрокаКарточки Из ТаблицаКарточек Цикл
		
		НомерСтроки = ТаблицаКарточек.Индекс(СтрокаКарточки);
		ИмяЭлементаУдаления = ИмяТаблицы + "_" + НомерСтроки +"_Удалить";
		Элементы[ИмяЭлементаУдаления].Видимость = РежимРедактирования;
		
		МодифицироватьТекстSVGПоРежимуРедактирования(СтрокаКарточки.СтрокаSVG, РежимРедактирования);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МодифицироватьТекстSVGПоРежимуРедактирования(Текст, РежимРедактирования)
	
	РедактированиеВключено  = "<g transform=""rotate(-3) translate(0 3)"">"; // Не локализуется
	РедактированиеВыключено = "<g transform=""rotate(0) translate(0 0)"">"; // Не локализуется
	
	Если РежимРедактирования Тогда
		Текст = СтрЗаменить(Текст, РедактированиеВыключено, РедактированиеВключено);
	Иначе
		Текст = СтрЗаменить(Текст, РедактированиеВключено, РедактированиеВыключено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьSVGНаСервере()
	
	Для каждого СтрокаЦели Из СписокЦелей Цикл
		СтрокаЦели.SVG = СформироватьSVGПоСтроке(СтрокаЦели.СтрокаSVG);
	КонецЦикла;
	
	Для каждого СтрокаПроверки Из СписокПроверок Цикл
		СтрокаПроверки.SVG = СформироватьSVGПоСтроке(СтрокаПроверки.СтрокаSVG);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементКарточки(ПараметрыЭлемента)
	
	НовыйЭлемент = Элементы.Добавить(ПараметрыЭлемента.ИмяЭлемента, Тип("ПолеФормы"), ПараметрыЭлемента.РодительЭлемента);
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПараметрыЭлемента);
	
	Если ЗначениеЗаполнено(ПараметрыЭлемента.Действие) Тогда
		НовыйЭлемент.УстановитьДействие("Нажатие", ПараметрыЭлемента.Действие);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементУдалитьКарточку(ПараметрыЭлемента)
	
	НовыйЭлемент = Элементы.Добавить(ПараметрыЭлемента.ИмяЭлемента + "_Удалить", Тип("ДекорацияФормы"), ПараметрыЭлемента.РодительЭлемента);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = БиблиотекаКартинок.Закрыть;
	НовыйЭлемент.Гиперссылка = Истина;
	НовыйЭлемент.Видимость = Ложь;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_УдалитьКарточкуНажатие");
	
КонецПроцедуры

&НаСервере
Функция СформироватьSVGПоСтроке(ШаблонSVG)
	
	ИмяВременногоФайлаSVG = ПолучитьИмяВременногоФайла();
	ФайлКартинки = Новый ЗаписьТекста(ИмяВременногоФайлаSVG);
	ФайлКартинки.Записать(ШаблонSVG);
	ФайлКартинки.Закрыть();
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайлаSVG);
	УдалитьФайлы(ИмяВременногоФайлаSVG);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НайтиИлиДобавитьГруппуКарточек(ВидКарточки)
	
	Если ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель Тогда
		РодительГруппы = Элементы.ГруппаКарточкиЦели;
		ИмяГруппы = "ГруппаЦели"; // Не локализуется
		КоличествоКарточекВГруппе = 4;
	Иначе // Проверки
		РодительГруппы = Элементы.ГруппаКарточкиПроверки;
		ИмяГруппы = "ГруппаПроверки"; // Не локализуется
		КоличествоКарточекВГруппе = 8;
	КонецЕсли;
	
	НомерГруппы = 0;
	ПоследняяСозданнаяГруппа = Неопределено;
	
	Пока Элементы.Найти(ИмяГруппы + НомерГруппы) <> Неопределено Цикл
		ПоследняяСозданнаяГруппа = Элементы.Найти(ИмяГруппы + НомерГруппы);
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла; 
	
	Если ПоследняяСозданнаяГруппа <> Неопределено И
		ПоследняяСозданнаяГруппа.ПодчиненныеЭлементы.Количество() < КоличествоКарточекВГруппе Тогда
		Возврат ПоследняяСозданнаяГруппа;
	КонецЕсли;
	
	НоваяГруппа = Элементы.Добавить(ИмяГруппы + НомерГруппы, Тип("ГруппаФормы"), РодительГруппы);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	
	Возврат НоваяГруппа;
	
КонецФункции
 
&НаСервере
Процедура СформироватьКарточкиАнализаБизнеса(ВидКарточки)
	
	Если ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель Тогда
		ИмяТаблицы = "СписокЦелей"; // Не локализуется
		ВыборкаКарточек = ПолучитьВыборкуЦелей();
	Иначе // Проверки
		ИмяТаблицы = "СписокПроверок"; // Не локализуется
		ВыборкаКарточек = ПолучитьВыборкуПроверок();
	КонецЕсли;
	
	ПараметрыЭлемента = Справочники.КарточкиАнализаБизнеса.СформироватьПараметрыЭлементаКарточки(ВидКарточки);
	
	НомерСтроки = 0;
	ЭтаФорма[ИмяТаблицы].Очистить();
	
	Пока ВыборкаКарточек.Следующий() Цикл
		
		ДанныеКарточки = Справочники.КарточкиАнализаБизнеса.ПолучитьДанныеКарточки(ВыборкаКарточек.Ссылка);
		Если ДанныеКарточки = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаКарточки = ЭтаФорма[ИмяТаблицы].Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКарточки, ДанныеКарточки);
		СтрокаКарточки.SVG = СформироватьSVGПоСтроке(СтрокаКарточки.СтрокаSVG);
		
		ПараметрыЭлемента.РодительЭлемента = НайтиИлиДобавитьГруппуКарточек(ВидКарточки);
		ПараметрыЭлемента.ИмяЭлемента = ИмяТаблицы + "_" + НомерСтроки;
		ПараметрыЭлемента.ПутьКДанным = СтрШаблон(ПараметрыЭлемента.ШаблонПутьКДанным, ИмяТаблицы, НомерСтроки);
		
		СформироватьЭлементКарточки(ПараметрыЭлемента);
		СформироватьЭлементУдалитьКарточку(ПараметрыЭлемента);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПараметрыЭлемента.РодительЭлемента = НайтиИлиДобавитьГруппуКарточек(ВидКарточки);
	
	Если ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель Тогда
		ДобавитьКарточкуЦелиSVG = СформироватьSVGПоСтроке(АнализБизнесаПовтИсп.ШаблонДобавитьЦель());
		ПараметрыЭлемента.Видимость = Ложь;
		ПараметрыЭлемента.ИмяЭлемента = "ДобавитьКарточкуЦели";
		ПараметрыЭлемента.ПутьКДанным = "ДобавитьКарточкуЦелиSVG";
		СформироватьЭлементКарточки(ПараметрыЭлемента);
	Иначе // Проверки
		ДобавитьПроверкуSVG = СформироватьSVGПоСтроке(АнализБизнесаПовтИсп.ШаблонДобавитьПроверку());
		ПараметрыЭлемента.Видимость = Ложь;
		ПараметрыЭлемента.ИмяЭлемента = "ДобавитьПроверку";
		ПараметрыЭлемента.ПутьКДанным = "ДобавитьПроверкуSVG";
		СформироватьЭлементКарточки(ПараметрыЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПараметрыЭлементаПоИмени(ИмяЭлемента)
	
	ПараметрыЭлемента = Новый Структура("ИмяТаблицы, ИндексСтроки");
	
	ПараметрыЭлемента.ИмяТаблицы = Лев(ИмяЭлемента, СтрНайти(ИмяЭлемента, "_")-1);
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "_");
	Если МассивПодстрок.Количество() >= 2 Тогда
		ПараметрыЭлемента.ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивПодстрок[1]);
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЭлементаПоЗначению(Значение, ВидКарточки)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Значение);
	Если ВидКарточки <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ВидКарточки", ВидКарточки);
	КонецЕсли;
			
	Если РежимРедактирования ИЛИ Значение.Пустая() Тогда
		ИмяФормыЭлемента = "Справочник.КарточкиАнализаБизнеса.Форма.ФормаРедактированияЭлемента"; // Не локализуется
	Иначе
		ИмяФормыЭлемента = "Справочник.КарточкиАнализаБизнеса.Форма.ФормаЭлемента"; // Не локализуется
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыЭлемента, ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыНаСервере(ИмяТаблицы, МассивЭлементовДляУдаления, СсылкаДляПометкиНаУдаление)
	
	Для каждого ИмяЭлемента Из МассивЭлементовДляУдаления Цикл
		Элементы.Удалить(Элементы[ИмяЭлемента]);
	КонецЦикла;
	
	ИмяГруппы = ?(ИмяТаблицы = "СписокЦелей", "ГруппаЦели", "ГруппаПроверки");
	
	НомерГруппы = 0;
	ТекущаяГруппа = Элементы.Найти(ИмяГруппы + НомерГруппы);
	Пока ТекущаяГруппа <> Неопределено Цикл
		Если ТекущаяГруппа.ПодчиненныеЭлементы.Количество() = 0 Тогда
			Элементы.Удалить(ТекущаяГруппа);
		КонецЕсли;
		НомерГруппы = НомерГруппы + 1;
		ТекущаяГруппа = Элементы.Найти(ИмяГруппы + НомерГруппы);
	КонецЦикла;
	
	КарточкаОбъект = СсылкаДляПометкиНаУдаление.ПолучитьОбъект();
	КарточкаОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ПечатьИСохранение

&НаСервереБезКонтекста
Функция СформироватьПараметрыСохраненияФайла()
	
	СтруктураФильтра = Новый Структура;
	МассивФорматов = Новый Массив;
	
	СтрокаФильтра = "";
	Шаблон = "%1|*.%2|";
	ТаблицаФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Для каждого СтрокаФормата Из ТаблицаФорматов Цикл
		СтрокаФильтра = СтрокаФильтра + СтрШаблон(Шаблон, СтрокаФормата.Представление, СтрокаФормата.Расширение);
		МассивФорматов.Добавить(СтрокаФормата.ТипФайлаТабличногоДокумента);
	КонецЦикла;
	
	СтруктураФильтра.Вставить("СтрокаФильтра", СтрокаФильтра);
	СтруктураФильтра.Вставить("МассивФорматов", МассивФорматов);
	
	Возврат СтруктураФильтра;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохранения(ВыбранныйФайл, ПараметрыДиалога) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПараметрыДиалога.ДиалогСохранения.ПолноеИмяФайла;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	ФорматСохранения = ПараметрыДиалога.ПараметрыСохранения.МассивФорматов[ПараметрыДиалога.ДиалогСохранения.ИндексФильтра];
	ТабличныйДокумент.Записать(ИмяФайла, ФорматСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте(ТабличныйДокумент)
	
	ШаблонПредставления = НСтр("ru = 'Анализ бизнеса %1'");
	ОтчетНаименованиеТекущегоВарианта = СтрШаблон(ШаблонПредставления, ПредставлениеПериода);
	
	Вложение = Новый Структура;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор);
	Вложение.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.СкомпоноватьРезультат(ТабличныйДокумент, Новый ДанныеРасшифровкиКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресСохраняемогоОтчета()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьПечатнуюФормуНаСервере(ТабличныйДокумент);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СохранениеОтчетаЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохранения.МножественныйВыбор = Ложь;
		
		ПараметрыСохранения = СформироватьПараметрыСохраненияФайла();
		
		ПараметрыДиалога = Новый Структура;
		ПараметрыДиалога.Вставить("ПараметрыСохранения", ПараметрыСохранения);
		ПараметрыДиалога.Вставить("ДиалогСохранения", ДиалогСохранения);
		
		ДиалогСохранения.Фильтр = ПараметрыСохранения.СтрокаФильтра;
		ДиалогСохранения.Показать(Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохранения", ЭтотОбъект, ПараметрыДиалога));
	Иначе
		АдресФайла = ПолучитьАдресСохраняемогоОтчета();
		ИмяФайла = Строка(ВыбранныйОтчет) + " " + СтрЗаменить(ПредставлениеПериода,".","") + ".xlsx";
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресФайла, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УбратьКартинкиКомандРекурсивно(КоллекцияЭлементов)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент)=Тип("КнопкаФормы") Тогда
			Элемент.Отображение = ОтображениеКнопки.Текст;
			Элемент.Картинка = Новый Картинка;
			Команда = Команды.Найти(Элемент.ИмяКоманды);
			Если Команда<>Неопределено Тогда
				Команда.Отображение = ОтображениеКнопки.Текст;
				Команда.Картинка = Новый Картинка;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УбратьКартинкиКомандРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
