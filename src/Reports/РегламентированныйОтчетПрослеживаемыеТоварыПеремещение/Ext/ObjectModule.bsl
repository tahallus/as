#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ПодготовленныйРеглОтчет = ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет);
	
	РазделыОтчета       = ПодготовленныйРеглОтчет.РазделыОтчета;
	ДанныеРеглОтчета    = ПодготовленныйРеглОтчет.ДанныеРеглОтчета;
	ДеревоСтраницОтчета = ПодготовленныйРеглОтчет.ДеревоСтраницОтчета;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет)
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
	
	РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	
	РазделыОтчета.Титульный.КПП            = ПараметрыАвтоформирования.Организация.КПП;
	РазделыОтчета.Титульный.НалоговыйОрган = ПараметрыАвтоформирования.Организация.КодНалоговогоОргана;
	
	РазделыОтчета.Титульный.ДатаУведомления = ПараметрыАвтоформирования.ДатаОкончания;
	
	РазделыОтчета.Титульный.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи,
								   РазделыОтчета.Титульный);
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПодготовленныйРеглОтчет = Новый Структура;
	ПодготовленныйРеглОтчет.Вставить("РазделыОтчета",       РазделыОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДанныеРеглОтчета",    ДанныеРеглОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	Возврат ПодготовленныйРеглОтчет;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв3") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/07/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Уведомление о перемещении товаров, подлежащих прослеживаемости");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М3");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ТипКоличествоПрослеживаемогоТовара");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1 = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР1М2 = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппыР1М3 = "П00001М3";
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М100001");
	ИменаГраф.Добавить("П00001М100002");
	ИменаГраф.Добавить("П00001М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М200001");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М3.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М300001");
	ИменаГраф.Добавить("П00001М300002");
	ИменаГраф.Добавить("П00001М300003");
	ИменаГраф.Добавить("П00001М300004");
	ИменаГраф.Добавить("П00001М300005");
	ИменаГраф.Добавить("П00001М300006");
	ИменаГраф.Добавить("П00001М300007");
	ИменаГраф.Добавить("П00001М300008");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М3, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М2);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М3);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
 										 СтруктураРеквизитовФормы,
							 			 СтруктураМногоуровневыхРазделов,
								 		 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
				
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));	
		
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Сведения о перемещении";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции	

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  СтруктураДанныхТитульный,
								  ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП = СокрЛП(СтруктураДанныхТитульный.КПП);
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИО");
			Подписант = СокрЛП(СведенияОбОрганизации.ФИО);
		КонецЕсли;
	Иначе
		// Подписант - представитель.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Подписант);
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение    = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргУп.Значение     = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
		
		СтруктураДанныхТитульный.Области.ОргПодписантФамилия.Значение  = ФИОПодписанта.Фамилия;
		СтруктураДанныхТитульный.Области.ОргПодписантИмя.Значение      = ФИОПодписанта.Имя;
		СтруктураДанныхТитульный.Области.ОргПодписантОтчество.Значение = ФИОПодписанта.Отчество;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп    = ТипПодписанта;
		СтруктураДанныхТитульный.ОргУп     = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред = ДокументПредставителя;
		
		СтруктураДанныхТитульный.ОргПодписантФамилия  = ФИОПодписанта.Фамилия;
		СтруктураДанныхТитульный.ОргПодписантИмя      = ФИОПодписанта.Имя;
		СтруктураДанныхТитульный.ОргПодписантОтчество = ФИОПодписанта.Отчество;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	
	// "ДатаНачала" устанавливается равной "ДатаОкончания", т.к. у уведомления нет периода.
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаОкончания;
	
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.День;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
															   ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы",                 ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",         ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",              ПараметрыЗаписи.Автозаполнение);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",            ПараметрыЗаписи.ФлПодсчетСтраниц);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
		
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов");
	
	СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  ДанныеРеглОтчета.СтруктураРеквизитовФормы,
										  ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	
	ИнициализироватьОбычныеРазделы(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
								   СтруктураДанныхРазделов);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
	
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, СтруктураДанныхРазделов);
	
	РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, Новый УникальныйИдентификатор,
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаУведомления",         ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	
	Для Каждого Раздел Из ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов Цикл
		
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы,
										  Контейнер,
										  ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета,
																	ИмяФормыОтчета,
																	ПараметрыОтчета,
																	Контейнер);
		
		РассчитатьИтоги(ИмяФормы,
						Контейнер,
						ДанныеРеглОтчета.СтруктураРеквизитовФормы,
						ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	Возврат;
	
КонецПроцедуры

Процедура РассчитатьИтоги(ИмяФормы, Контейнер, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	
	ИмяРаздела = "Раздел1";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР1М3;
	СтруктураГруппыМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
	ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		
		СтоимостьИтого = 0;
		
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			СтоимостьИтого = СтоимостьИтого + Окр(СтрокаМнЧ.Данные["П00001М300008"], 2);
		КонецЦикла;
		
		Ветка.Данные.Вставить("СтоимостьИтого", СтоимостьИтого);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = СтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	Возврат ИмяГлРаздела;
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
				ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
			
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
	
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем СтруктураКонтейнераДанных;
	
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	Если Параметры.Свойство("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных) Тогда
		
		ИмяФормы = СтруктураКонтейнераДанных.ВыбраннаяФорма;
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		
		СтруктураРеквизитовФормы.Вставить("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных);
		СтруктураРеквизитовФормы.Вставить("Организация", СтруктураКонтейнераДанных.Организация);
		СтруктураРеквизитовФормы.Вставить("ИП", ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация)
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураКонтейнераДанных.Организация));
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
		
		ИнициализироватьОбычныеРазделы(ИмяФормы, СтруктураРеквизитовФормы,
		СтруктураМногоуровневыхРазделов, СтруктураДанныхРазделов);
		
		ДанныеОтчета = Новый Структура;
		ДанныеОтчета.Вставить("Титульный", СтруктураДанныхРазделов.СтруктураДанныхТитульный);
		
		Если ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация) Тогда
			
			ЗаполнитьСведенияОбОрганизации(ИмяФормы, СтруктураРеквизитовФормы,
			СтруктураКонтейнераДанных.ДатаПодписи, ДанныеОтчета.Титульный);
			
			ЗначПоУмолчанию_НалоговыйОрган = ДанныеОтчета.Титульный.НалоговыйОрган;
			ЗначПоУмолчанию_КПП            = ДанныеОтчета.Титульный.КПП;
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И НЕ (ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган)
				И ЗначениеЗаполнено(СтруктураКонтейнераДанных.КПП)) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				ДанныеОтчета.Титульный.КПП            = ЗначПоУмолчанию_КПП;
				
			ИначеЕсли СтруктураРеквизитовФормы.ИП
				И НЕ ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				
			Иначе
				
				ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы,
				ДанныеОтчета.Титульный, СтруктураКонтейнераДанных.ДатаПодписи);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
		КонецЕсли;
		
	Иначе
		
		ИмяФормы = Параметры.ВыбраннаяФорма;
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.СохраненныйОтчет;
		
		СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ПрослеживаемыеТоварыПеремещение");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
											СтруктураРеквизитовФормы,
											СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
		
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
		
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
														  СохраненныеДанныеОтчета,
														  СтруктураРеквизитовФормы,
														  СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		
		ИндивидуальныйПредприниматель = СтруктураРеквизитовФормы.ИП;
		ПараметрыВыгрузки.Вставить("НомКорр", Строка(Титульный.НомерКорректировки));
		ПараметрыВыгрузки.Вставить("КодНОПосредника",
		?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	Иначе
		
		ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
										СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
		ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
		ПараметрыВыгрузки.Вставить("КодНОПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИндивидуальныйПредприниматель);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("НомУвед",  СокрЛП(Титульный.НомерУведомления));
	ПараметрыВыгрузки.Вставить("ДатаУведомления", Титульный.ДатаУведомления);
	ПараметрыВыгрузки.Вставить("ДатаУвед", Формат(Титульный.ДатаУведомления, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИНН",     СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  СокрЛП(Титульный.ОргПодписантФамилия));
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      СокрЛП(Титульный.ОргПодписантИмя));
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", СокрЛП(Титульный.ОргПодписантОтчество));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "УведВывозТов");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "ON_UVVIOZTOV"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки502");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
								  	 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
								 	 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан ИНН организации, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан КПП организации, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ВозможныеКодыФормыРеорганизции = Новый Массив;
		ВозможныеКодыФормыРеорганизции.Добавить("1");
		ВозможныеКодыФормыРеорганизции.Добавить("2");
		ВозможныеКодыФормыРеорганизции.Добавить("3");
		ВозможныеКодыФормыРеорганизции.Добавить("5");
		ВозможныеКодыФормыРеорганизции.Добавить("6");
		ВозможныеКодыФормыРеорганизции.Добавить("0");
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации)",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Задано некорректное значение кода формы реорганизации (ликвидации). Возможны значения: 0, 1, 2, 3, 5, 6",
					"Титульный", "КодФормыРеорганизации");
					СтатусПроверки = Ложь;
				Иначе
					ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
					Если ДлинаИННРеорг <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
						+ " задан ИНН реорганизованной организации", "Титульный", "ИННРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
					ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
					Если ДлинаКППРеорг <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
						+ " задан КПП реорганизованной организации", "Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан ИНН индивидуального предпринимателя", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 12 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан ИНН индивидуального предпринимателя, не состоящий из 12 цифр",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НомУвед) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан номер уведомления", "Титульный", "НомерУведомления");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан код налогового органа, не состоящий из 4 цифр",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта", "Титульный", "ОргПодписантИмя");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя продавца",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1.
	//
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		
		ДеревоРаздела = СтруктураРеквизитовФормы.СтруктураКонтейнераДанных.Раздел1;
		
	Иначе
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов.Раздел1;
		
	КонецЕсли;
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		Данные = СтраницаРаздела.Данные;
		НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
		
		ПредстСтраницы = "Сведения о перемещении -> Страница " + НомерСтраницы;
		
		ЭтоФЛ = ЗначениеЗаполнено(Данные["П000010000100"]);
		
		Если ЭтоФЛ Тогда
			Если НЕ ЗначениеЗаполнено(Данные["П000010000300"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
				+ ": не задана фамилия физического лица - покупателя государства-члена ЕАЭС",
				"Раздел1", "П000010000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Данные["П000010000400"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
				+ ": не задано имя физического лица - покупателя государства-члена ЕАЭС",
				"Раздел1", "П000010000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Данные["П000010000200"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
				+ ": не задано наименование организации - покупателя государства-члена ЕАЭС",
				"Раздел1", "П000010000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Данные["П000010000600"]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
			+ ": не задан код государства-члена ЕАЭС покупателя (ОКСМ)",
			"Раздел1", "П000010000600", НомерСтраницы);
			СтатусПроверки = Ложь;
		Иначе
			ЗначПокДлина = СтрДлина(СокрЛП(Данные["П000010000600"]));
			Если ЗначПокДлина <> 3 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
				+ ": задан код государства-члена ЕАЭС покупателя (ОКСМ), не состоящий из 3 цифр",
				"Раздел1", "П000010000600", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Данные["П000010000700"]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
			+ ": не задан идентификационный код (номер) покупателя государства-члена ЕАЭС",
			"Раздел1", "П000010000700", НомерСтраницы);
			СтатусПроверки = Ложь;
		Иначе
			ЗначПокДлина = СтрДлина(СокрЛП(Данные["П000010000700"]));
			Если ЗначПокДлина < 8 ИЛИ ЗначПокДлина > 14 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы
				+ ": задан идентификационный код (номер) покупателя государства-члена ЕАЭС, не состоящий из 8-14 цифр",
				"Раздел1", "П000010000700", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Данные["П000010000800"]) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + ": не задан адрес покупателя государства-члена ЕАЭС",
			"Раздел1", "П000010000800", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М100001"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " сведений о сопроводительном документе не задан вид документа",
				"Раздел1", "П00001М100001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрРазделить("1,2,3", ",", Ложь).Найти(СокрЛП(СтрокаМнЧ.Данные["П00001М100001"])) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " сведений о сопроводительном документе некорректно задан вид документа. Возможны значения: 1, 2, 3",
				"Раздел1", "П00001М100001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М100002"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " сведений о сопроводительном документе не задан номер документа",
				"Раздел1", "П00001М100002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М100003"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " сведений о сопроводительном документе не задана дата документа",
				"Раздел1", "П00001М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы,
				СтрокаМнЧ.Данные["П00001М100003"], , ПараметрыВыгрузки.ДатаУведомления) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " сведений о сопроводительном документе задана дата документа, выходящая за пределы периода с 01.01.1900 по "
				+ Формат(ПараметрыВыгрузки.ДатаУведомления, "ДФ=дд.ММ.гггг"),
				"Раздел1", "П00001М100003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М3];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомерСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			Если СтрокаМнЧ.Данные["П00001М300001"] = 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " не задан порядковый номер товара в соответствии с сопроводительным документом",
				"Раздел1", "П00001М300001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрокаМнЧ.Данные["П00001М300001"] < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " порядковый номер товара в соответствии с сопроводительным документом не должен быть отрицательным",
				"Раздел1", "П00001М300001_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М300002"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " не задано наименование товара в соответствии с сопроводительным документом",
				"Раздел1", "П00001М300002_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если СтрокаМнЧ.Данные["П00001М300003"] < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " количество товара в соответствии с сопроводительным документом не должно быть отрицательным",
				"Раздел1", "П00001М300003_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М300004"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " не задан код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ)",
				"Раздел1", "П00001М300004_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ЗначПокДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М300004"]));
				Если ЗначПокДлина <> 3 И ЗначПокДлина <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
					+ " задан код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ),"
					+ " не состоящий из 3-4 цифр", "Раздел1", "П00001М300004_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М300005"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " не задан регистрационный номер партии товара, подлежащего прослеживаемости",
				"Раздел1", "П00001М300005_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00001М300006"]) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " не задан код количественной единицы изменения товара (по ОКЕИ)",
				"Раздел1", "П00001М300006_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ЗначПокДлина = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М300006"]));
				Если ЗначПокДлина <> 3 И ЗначПокДлина <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
					+ " задан код количественной единицы изменения товара (по ОКЕИ), не состоящий из 3 или 4 цифр",
					"Раздел1", "П00001М300006_" + НомерСтроки, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаМнЧ.Данные["П00001М300007"] < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " количество товара, подлежащего прослеживаемости, в единице количественного учета товара"
				+ " не должно быть отрицательным", "Раздел1", "П00001М300007_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если СтрокаМнЧ.Данные["П00001М300008"] < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ПредстСтраницы + " -> в строке " + НомерСтроки
				+ " стоимость товаров (без НДС) не должна быть отрицательной",
				"Раздел1", "П00001М300008_" + НомерСтроки, НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	Возврат;
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИНН) + СокрЛП(ПараметрыВыгрузки.КПП);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИНН);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодНОПосредника),
				ПараметрыВыгрузки.КодНОПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	// Раздел 1.
	//
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		
		ДеревоРаздела = СтруктураРеквизитовФормы.СтруктураКонтейнераДанных.Раздел1;
	Иначе
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов);
		ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
		
	КонецЕсли;
	
	УзелРодитель_Родитель = УзелРодитель.Родитель;
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзУзелРодитель = СкопироватьУзел(ИмяФормы,
		УзелРодитель_Родитель, УзелРодитель, УзелРодитель_Родитель.Строки.Количество() - 1);
		
		СвЛицПрд = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУзелРодитель, "СвЛицПрд");
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные, СвЛицПрд);
		
		Если ЗначениеЗаполнено(Ветка.Данные["П000010000100"]) Тогда // покупатель - физическое лицо
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, СвЛицПрд, "НаимОрг"));
		Иначе // покупатель - юридическое лицо
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, СвЛицПрд, "ФИО"));
		Конецесли;
		
		СвСопрДок = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУзелРодитель, "СвСопрДок");
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, СтрокаМнЧ.Данные,
			СкопироватьУзел(ИмяФормы, ЭкзУзелРодитель, СвСопрДок, ЭкзУзелРодитель.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СвСопрДок);
		
		СвПунктНазн = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУзелРодитель, "СвПунктНазн");
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ВывестиПоказательВXML(ИмяФормы, СкопироватьУзел(ИмяФормы,
			ЭкзУзелРодитель, СвПунктНазн, ЭкзУзелРодитель.Строки.Количество() - 1), СтрокаМнЧ.Данные["П00001М200001"]);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(СвПунктНазн);
		
		УведВывозТовСтр = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУзелРодитель, "УведВывозТовСтр");
		ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М3];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, СтрокаМнЧ.Данные,
			СкопироватьУзел(ИмяФормы, ЭкзУзелРодитель, УведВывозТовСтр, ЭкзУзелРодитель.Строки.Количество() - 1));
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(УведВывозТовСтр);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(УзелРодитель);
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
						  СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
						  ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	Перем СтруктураКонтейнераДанных;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если ПараметрыПечати.Свойство("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных) Тогда
		
		ВидПечати = "";
		
		ИмяФормы = СтруктураКонтейнераДанных.ВыбраннаяФорма;
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		
		СтруктураРеквизитовФормы.Вставить("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных);
		СтруктураРеквизитовФормы.Вставить("Организация", СтруктураКонтейнераДанных.Организация);
		СтруктураРеквизитовФормы.Вставить("ИП", ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация)
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураКонтейнераДанных.Организация));
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
		
		ИнициализироватьОбычныеРазделы(ИмяФормы, СтруктураРеквизитовФормы,
		СтруктураМногоуровневыхРазделов, СтруктураДанныхРазделов);
		
		ДанныеОтчета = Новый Структура;
		ДанныеОтчета.Вставить("Титульный", СтруктураДанныхРазделов.СтруктураДанныхТитульный);
		
		Если ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация) Тогда
			
			ЗаполнитьСведенияОбОрганизации(ИмяФормы, СтруктураРеквизитовФормы,
			СтруктураКонтейнераДанных.ДатаПодписи, ДанныеОтчета.Титульный);
			
			ЗначПоУмолчанию_НалоговыйОрган = ДанныеОтчета.Титульный.НалоговыйОрган;
			ЗначПоУмолчанию_КПП            = ДанныеОтчета.Титульный.КПП;
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И НЕ (ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган)
				И ЗначениеЗаполнено(СтруктураКонтейнераДанных.КПП)) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				ДанныеОтчета.Титульный.КПП            = ЗначПоУмолчанию_КПП;
				
			ИначеЕсли СтруктураРеквизитовФормы.ИП
				И НЕ ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				
			Иначе
				
				ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы,
				ДанныеОтчета.Титульный, СтруктураКонтейнераДанных.ДатаПодписи);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
		КонецЕсли;
		
		ДанныеРазделов = ДанныеОтчета;
		
	Иначе
		
		ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
		
		Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
			СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
			ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
			ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
			СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
															ПараметрыПечати.СохраненныйОтчет.Организация);
		КонецЕсли;
		
		Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
			ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												  СтруктураРеквизитовФормы,
												  СтруктураМногоуровневыхРазделов);
		КонецЕсли;
		
		Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
			
			ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
			
			ПечатныйБланкФормируетсяВФорматеPDF = Истина;
			
		КонецЕсли;
		
		Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
			ВидПечати = "";
		КонецЕсли;
		
		Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
			
			ДанныеРазделов = Новый Структура;
			
			СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
													СтруктураРеквизитовФормы,
													СтруктураМногоуровневыхРазделов);
			
			ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
			
			Для Каждого Раздел Из ПоказателиОтчета Цикл
				
				ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
					РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
				
			КонецЦикла;
			
			Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
				
				Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
					
					РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Уведомление о перемещении");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Раздел1");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "");
	Структурапараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	СтруктураРеквизитовФормы, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если ПараметрыПечати.Свойство("СтруктураКонтейнераДанных") Тогда
		
		АдресаПечатныхБланков = "";
		
		Если СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Количество() > 0 Тогда
			АдресаПечатныхБланков = Новый Массив;
			Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
				АдресаПечатныхБланков.Добавить(Лист.Значение[0]);
			КонецЦикла;
		КонецЕсли;
		
		Возврат АдресаПечатныхБланков;
		
	КонецЕсли;
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
		
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета + НСтр("ru=', от '")
	+ ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ФП = Истина")
	+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка",    АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка", ИмяФайлаПечатногоБланка);
	
	Возврат ПечатныйБланк;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, СтруктураРеквизитовФормы, ДанныеРазделов)
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПечатныйБланк2021Кв3");
	
	ПечФорма = Макет.Получитьобласть("Титул");
	ПечФорма.ПолеСверху = 5;
	ПечФорма.ПолеСправа = 5;
	ПечФорма.ПолеСнизу  = 5;
	ПечФорма.ПолеСлева  = 5;
	ПечФорма.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ПечФорма.Автомасштаб = Истина;
	
	ПечФорма.Параметры.Заполнить(ДанныеРазделов.Титульный);
	
	Если ЗначениеЗаполнено(ДанныеРазделов.Титульный.ИННРеорганизованнойОрганизации)
		ИЛИ ЗначениеЗаполнено(ДанныеРазделов.Титульный.КППРеорганизованнойОрганизации) Тогда
		ПечФорма.Параметры.ИННКППРеорганизованнойОрганизации
		= СокрЛП(ДанныеРазделов.Титульный.ИННРеорганизованнойОрганизации) + "/"
		+ СокрЛП(ДанныеРазделов.Титульный.КППРеорганизованнойОрганизации);
	КонецЕсли;
	
	Контрагент             = Макет.Получитьобласть("Контрагент");
	СтрокаСопрДокумент     = Макет.Получитьобласть("СтрокаСопрДокумент");
	СведОПунктахНазначения = Макет.Получитьобласть("СведОПунктахНазначения");
	Шапка                  = Макет.Получитьобласть("Шапка");
	ПодШапка               = Макет.Получитьобласть("ПодШапка");
	СтрокаДокумент         = Макет.Получитьобласть("СтрокаДокумент");
	Подвал                 = Макет.Получитьобласть("Подвал");
	
	МассивПроверки = Новый Массив;
	
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		ДеревоРаздела = СтруктураРеквизитовФормы.СтруктураКонтейнераДанных.Раздел1;
	Иначе
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	КонецЕсли;
	
	НомерСтраницы = 0;
	
	Для каждого Страница Из ДеревоРаздела.Строки Цикл
		
		ЭтоПерваяСтраница = ДеревоРаздела.Строки.Индекс(Страница) = 0;
		
		Если НЕ ЭтоПерваяСтраница Тогда
			ПечФорма.Очистить();
		КонецЕсли;
		
		Для ИндПарам = 0 По Контрагент.Параметры.Количество() - 1 Цикл
			Контрагент.Параметры[ИндПарам] = Неопределено;
		КонецЦикла;
		
		Контрагент.Параметры.Заполнить(Страница.Данные);
		
		Если ЗначениеЗаполнено(Страница.Данные["П000010000100"]) Тогда
			Фам = СокрЛП(Страница.Данные["П000010000300"]);
			Имя = СокрЛП(Страница.Данные["П000010000400"]);
			Отч = СокрЛП(Страница.Данные["П000010000500"]);
			НаимЛицаПередПраво = "";
			Если ЗначениеЗаполнено(Фам) Тогда
				НаимЛицаПередПраво = Фам;
			КонецЕсли;
			Если ЗначениеЗаполнено(Имя) Тогда
				НаимЛицаПередПраво = ?(ЗначениеЗаполнено(НаимЛицаПередПраво), НаимЛицаПередПраво + " " + Имя, Имя);
			КонецЕсли;
			Если ЗначениеЗаполнено(Отч) Тогда
				НаимЛицаПередПраво = ?(ЗначениеЗаполнено(НаимЛицаПередПраво), НаимЛицаПередПраво + " " + Отч, Отч);
			КонецЕсли;
		Иначе
			НаимЛицаПередПраво = СокрЛП(Страница.Данные["П000010000200"])
		КонецЕсли;
		Контрагент.Параметры.НаимЛицаПередПраво = НаимЛицаПередПраво;
		
		МассивПроверки.Очистить();
		МассивПроверки.Добавить(Контрагент);
		
		Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
			СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма.Очистить();
			
		КонецЕсли;
		
		ПечФорма.Вывести(Контрагент);
		
		ДеревоМнЧ = Страница.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			Для ИндПарам = 0 По СтрокаСопрДокумент.Параметры.Количество() - 1 Цикл
				СтрокаСопрДокумент.Параметры[ИндПарам] = Неопределено;
			КонецЦикла;
			
			СтрокаСопрДокумент.Параметры.Заполнить(СтрокаМнЧ.Данные);
			
			МассивПроверки.Очистить();
			МассивПроверки.Добавить(СтрокаСопрДокумент);
			
			Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
				СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ПечФорма.Очистить();
				
			КонецЕсли;
			
			ПечФорма.Вывести(СтрокаСопрДокумент);
			ПечФормаСтрокаСопрДокумент = ПечФорма.Область("СтрокаСопрДокумент");
			ПечФормаСтрокаСопрДокумент.Имя = "_" + Формат(ПечФормаСтрокаСопрДокумент.Верх, "ЧГ=");
			
		КонецЦикла;
		
		Для ИндПарам = 0 По СведОПунктахНазначения.Параметры.Количество() - 1 Цикл
			СведОПунктахНазначения.Параметры[ИндПарам] = Неопределено;
		КонецЦикла;
		
		ДеревоМнЧ = Страница.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		ПунктыНазначения = Новый Массив;
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			ПунктНазначения = СокрЛП(СтрокаМнЧ.Данные["П00001М200001"]);
			Если ЗначениеЗаполнено(ПунктНазначения) Тогда
				ПунктыНазначения.Добавить(ПунктНазначения);
			КонецЕсли;
		КонецЦикла;
		СведОПунктахНазначения.Параметры.ПунктыНазначения = СтрСоединить(ПунктыНазначения, "; ");
		
		МассивПроверки.Очистить();
		МассивПроверки.Добавить(СведОПунктахНазначения);
		
		Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
			СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма.Очистить();
			
		КонецЕсли;
		
		ПечФорма.Вывести(СведОПунктахНазначения);
		
		МассивПроверки.Очистить();
		МассивПроверки.Добавить(Шапка);
		МассивПроверки.Добавить(ПодШапка);
		
		Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
			РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
			СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
			
			ПечФорма.Очистить();
			
		КонецЕсли;
		
		ПечФорма.Вывести(Шапка);
		ПечФорма.Вывести(ПодШапка);
		
		ДеревоМнЧ = Страница.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М3];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			
			Для ИндПарам = 0 По СтрокаДокумент.Параметры.Количество() - 1 Цикл
				СтрокаДокумент.Параметры[ИндПарам] = Неопределено;
			КонецЦикла;
			
			СтрокаДокумент.Параметры.Заполнить(СтрокаМнЧ.Данные);
			
			МассивПроверки.Очистить();
			МассивПроверки.Добавить(СтрокаДокумент);
			
			ЭтоПоследняяСтрока = (ДеревоРаздела.Строки.Индекс(Страница) = ДеревоРаздела.Строки.Количество() - 1)
			И (ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) = ДеревоМнЧ.Строки.Количество() - 1);
			
			Если ЭтоПоследняяСтрока Тогда
				
				Подвал.Параметры.Заполнить(ДанныеРазделов.Титульный);
				
				МассивПроверки.Добавить(Подвал);
				
			КонецЕсли;
			
			Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
				СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ПечФорма.Очистить();
				
				ПечФорма.Вывести(ПодШапка);
				
			КонецЕсли;
			
			ПечФорма.Вывести(СтрокаДокумент);
			ПечФормаСтрокаДокумент = ПечФорма.Область("СтрокаДокумент");
			ПечФормаСтрокаДокумент.Имя = "_" + Формат(ПечФормаСтрокаДокумент.Верх, "ЧГ=");
			
			Если ЭтоПоследняяСтрока Тогда
				
				ПечФорма.Вывести(Подвал);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
		СтруктураПараметров.Вставить("НомерСтраницы", НомерСтраницы);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
		СтруктураПараметров, ПечФорма, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция СтруктураКонтейнераДанных(Параметры) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	ИмяФормы = Параметры.ВыбраннаяФорма;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("НаименованиеОтчета", "Уведомление о перемещении товаров, подлежащих прослеживаемости");
	Контейнер.Вставить("ИсточникОтчета",        Параметры.ИсточникОтчета);
	Контейнер.Вставить("ВыбраннаяФорма",        Параметры.ВыбраннаяФорма);
	Контейнер.Вставить("ВерсияФормата",         Параметры.ВерсияФормата);
	Контейнер.Вставить("СсылкаНаВнешнийОбъект", Параметры.СсылкаНаВнешнийОбъект);
	
	Если Параметры.ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыПеремещение"
		И Параметры.ВыбраннаяФорма = "ФормаОтчета2021Кв3" И Параметры.ВерсияФормата = "5.01" Тогда
		
		// Ссылка на элемент справочника "Организации" (СправочникСсылка.Организации).
		Контейнер.Вставить("Организация");
		
		// Дата подписи (Дата).
		Контейнер.Вставить("ДатаПодписи", '00010101');
		
		// Номер уведомления (Строка: 1 - 255 символов).
		Контейнер.Вставить("НомерУведомления", "");
		
		// Дата уведомления (Дата).
		Контейнер.Вставить("ДатаУведомления", '00010101');
		
		// № корректировки (Число: 0 - 999).
		Контейнер.Вставить("НомерКорректировки", 0);
		
		// Код налогового органа (Строка: строго 4 цифры).
		// Если не заполнен, определяется автоматически по сведениям об организации.
		Контейнер.Вставить("НалоговыйОрган", "");
		
		// КПП (Строка: строго 9 символов).
		// Если не заполнен, определяется автоматически по сведениям об организации.
		Контейнер.Вставить("КПП", "");
		
		// Форма реорганизации (ликвидации) (код) (Строка: 1 цифра).
		Контейнер.Вставить("КодФормыРеорганизации", "");
		
		// ИНН реорганизованной организации (Строка: строго 10 цифр).
		// Обязателен, если КодФормыРеорганизации равен "1", "2", "3", "5", "6"; иначе не заполняется.
		Контейнер.Вставить("ИННРеорганизованнойОрганизации", "");
		
		// КПП реорганизованной организации (Строка: строго 9 символов).
		// Обязателен, если КодФормыРеорганизации равен "1", "2", "3", "5", "6"; иначе не заполняется.
		Контейнер.Вставить("КППРеорганизованнойОрганизации", "");
		
		// Раздел1 - Дерево значений - по умолчанию инициализируется единственной строкой (соответствует странице раздела
		// "Сведения о перемещении" экранной формы отчета).
		// Каждая строка дерева значений Раздел1 содержит:
		//   1) в колонке "Данные" - Структура - показатели:
		//      П000010000100 - Строка - признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
		//      П000010000200 - Строка - наименование организации (1 - 1000 символов).
		//                               Заполняется, если признак физического лица не заполнен; иначе не заполняется.
		//      П000010000300 - Строка - фамилия физического лица (1 - 60 символов).
		//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
		//      П000010000400 - Строка - имя физического лица (1 - 60 символов).
		//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
		//      П000010000500 - Строка - отчество физического лица (1 - 60 символов).
		//                               Заполняется (при наличии), если признак физического лица заполнен;
		//                               иначе не заполняется.
		//      П000010000600 - Строка - код государства-члена ЕАЭС покупателя (ОКСМ) (3 цифры).
		//      П000010000700 - Строка - идентификационный код (номер) покупателя государства-члена ЕАЭС (8 - 14 символов).
		//      П000010000800 - Строка - адрес покупателя государства-члена ЕАЭС (1 - 1000 символов).
		//   2) в колонке "ДанныеМногострочныхЧастей" - Структура - множественные данные (многострочные части на странице
		//                                                          раздела "Сведения о перемещении" экранной формы отчета):
		//   2.1) П00001М1 - Дерево значений - по умолчанию инициализируется единственной строкой (соответствует строке
		//                                     многострочной части по графам 1 - 3 таблицы "Сведения о сопроводительном
		//                                     документе" экранной формы отчета).
		//        Каждая строка дерева значений П00001М1 содержит:
		//          2.1.1) в колонке "Данные" - Структура - показатели:
		//                 П00001М100001 - Строка - графа 1 (1 символ). Возможны значения: 1, 2, 3.
		//                 П00001М100002 - Строка - графа 2 (1 - 255 символов).
		//                 П00001М100003 - Дата   - графа 3.
		//          2.1.2) в колонке "ДанныеМногострочныхЧастей" - Структура - пустую структуру.
		//   2.2) П00001М2 - Дерево значений - по умолчанию инициализируется единственной строкой (соответствует строке
		//                                     многострочной части таблицы "Сведения о пунктах назначения товара, подлежащего
		//                                     прослеживаемости, на территории государств-членов ЕАЭС в соответствии с
		//                                     сопроводительным документом" экранной формы отчета).
		//        Каждая строка дерева значений П00001М2 содержит:
		//          2.2.1) в колонке "Данные" - Структура - показатель:
		//                 П00001М200001 - Строка - графа 1 (1 - 255 символов).
		//          2.2.2) в колонке "ДанныеМногострочныхЧастей" - Структура - пустую структуру.
		//   2.3) П00001М3 - Дерево значений - по умолчанию инициализируется единственной строкой (соответствует строке
		//                                     многострочной части по графам 1 - 8 таблицы экранной формы отчета).
		//        Каждая строка дерева значений П00001М3 содержит:
		//          2.3.1) в колонке "Данные" - Структура - показатели:
		//                 П00001М300001 - Число  - графа 1 (0 - 9999).
		//                 П00001М300002 - Строка - графа 2 (1 - 255 символов).
		//                 П00001М300003 - Число  - графа 3 (0 - 9999999999999.999999).
		//                 П00001М300004 - Строка - графа 4 (3 - 4 цифры).
		//                 П00001М300005 - Строка - графа 5 (1 - 29 смволов).
		//                 П00001М300006 - Строка - графа 6 (3 - 4 цифры).
		//                 П00001М300007 - Число  - графа 7 (0 - 999999999999999.99999999999).
		//                 П00001М300008 - Число  - графа 8 (0 - 99999999999999999.99).
		//          2.3.2) в колонке "ДанныеМногострочныхЧастей" - Структура - пустую структуру.
		//
		Контейнер.Вставить("Раздел1", ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]));
		
		Возврат Контейнер;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли