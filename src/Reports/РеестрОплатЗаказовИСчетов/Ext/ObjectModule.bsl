#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаОстатки", ТаблицаОстатки());
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
	"ВнешниеНаборыДанных",
	ПоместитьВоВременноеХранилище(ВнешниеНаборыДанных));
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(
	КомпоновщикНастроек,
	СхемаКомпоновкиДанных,
	ДокументРезультат,
	ДанныеРасшифровки,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Деньги,Контрагенты,Покупатели,Заказы,Счета,Оплаты'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "Контрагент",
	"Справочник.Контрагенты",,, Истина);
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "СчетНаОплату",
	"Документ.ЗаказПокупателя",,, Истина);
	
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "СчетНаОплату",
	"Документ.СчетНаОплату",,, Истина);
	
КонецПроцедуры

Функция ТаблицаОстатки()
	
	ПериодОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	ПоСчетам = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПоСчетам");
	СписокДокументов = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СписокДокументов");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодОтчета.Значение.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодОтчета.Значение.ДатаОкончания);
	Запрос.УстановитьПараметр("ПоСчетам", ПоСчетам.Значение = "ПоСчетам");
	
	Если УстановленПериодЗаВсеВремя(ПериодОтчета) Тогда
		Запрос.Текст = ТекстЗапросаСуммаКОплатеОсталосьОплатить(Ложь);
	Иначе
		Запрос.Текст = СтрШаблон(
		"%1
		|;
		|%2",
		ТекстЗапросаСчетаНаОплату(),
		ТекстЗапросаСуммаКОплатеОсталосьОплатить(Истина));
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция УстановленПериодЗаВсеВремя(ПериодОтчета)
	
	Если ЗначениеЗаполнено(ПериодОтчета.Значение.ДатаНачала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодОтчета.Значение.ДатаОкончания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаСуммаКОплатеОсталосьОплатить(ОтбиратьПоСчетамНаОплату)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетовИЗаказовОбороты.Организация КАК Организация,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаСчета,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК ОсталосьОплатить
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
	|			,
	|			,
	|			,
	|			ВЫБОР
	|					КОГДА &ПоСчетам
	|						ТОГДА СчетНаОплату ССЫЛКА Документ.СчетНаОплату
	|					ИНАЧЕ СчетНаОплату ССЫЛКА Документ.ЗаказПокупателя
	|				КОНЕЦ
	|				И &ОтборСчетаНаОплату) КАК ОплатаСчетовИЗаказовОбороты";
	
	Если ОтбиратьПоСчетамНаОплату Тогда
		Результат = СтрЗаменить(ТекстЗапроса, "И &ОтборСчетаНаОплату",
		"И СчетНаОплату В (ВЫБРАТЬ ВТ_СчетаНаОплату.СчетНаОплату ИЗ ВТ_СчетаНаОплату)");
	Иначе
		Результат = СтрЗаменить(ТекстЗапроса, "И &ОтборСчетаНаОплату", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСчетаНаОплату()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаСчетовИЗаказов.СчетНаОплату КАК СчетНаОплату
	|ПОМЕСТИТЬ ВТ_СчетаНаОплату
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ОплатаСчетовИЗаказов.Период >= &НачалоПериода
	|			ИНАЧЕ ОплатаСчетовИЗаказов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПоСчетам
	|				ТОГДА ОплатаСчетовИЗаказов.СчетНаОплату ССЫЛКА Документ.СчетНаОплату
	|			ИНАЧЕ ОплатаСчетовИЗаказов.СчетНаОплату ССЫЛКА Документ.ЗаказПокупателя
	|		КОНЕЦ";
	
КонецФункции

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли