#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["ВоронкаПоЛидам"].Теги = НСтр("ru = 'Лиды,CRM'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	МакетОтчета = ПолучитьМакет("ТД_Лиды");
	
	Если НеУстановленыОбязательныеФильтры(КомпоновщикНастроек.Настройки, ДокументРезультат, МакетОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ВариантВоронки = Отчеты.ВоронкаПоЛидам.ВариантВоронки(КомпоновщикНастроек.Настройки);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПолеГруппировки КАК ПолеГруппировки,
	|	ИсторияСостоянийЛидовСрезПоследних.Лид КАК Лид,
	|	ИсторияСостоянийЛидовСрезПоследних.Состояние КАК СостояниеОтмены,
	|	ИсторияСостоянийЛидовСрезПоследних.Лид.ПричинаНеуспешногоЗавершенияРаботы КАК ПричинаОтмены,
	|	1 КАК Потеря
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийЛидов.СрезПоследних(
	|			,
	|			Лид.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
	|				И Лид В
	|					(ВЫБРАТЬ
	|						ВТ_Лиды.Лид
	|					ИЗ
	|						ВТ_Лиды)) КАК ИсторияСостоянийЛидовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВоронкиПродаж.Порядок КАК Порядок,
	|	ВТ_ДанныеВоронкиПродаж.ПолеГруппировки КАК ПолеГруппировки,
	|	ВТ_ДанныеВоронкиПродаж.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Длительность <> 0
	|			ТОГДА ВТ_ДанныеВоронкиПродаж.Длительность
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Длительность,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеВоронкиПродаж.Состояние <> 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группировка,
	|	ВТ_ДанныеВоронкиПродаж.УчитыватьВВоронке КАК УчитыватьВВоронке
	|ИЗ
	|	ВТ_ДанныеВоронкиПродаж КАК ВТ_ДанныеВоронкиПродаж
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеГруппировки,
	|	Порядок,
	|	Состояние
	|ИТОГИ
	|	СРЕДНЕЕ(Длительность),
	|	СУММА(УчитыватьВВоронке)
	|ПО
	|	ПолеГруппировки,
	|	Группировка,
	|	Порядок,
	|	Состояние";
	
	ЗапросВоронкаПродаж = Новый Запрос;
	ЗапросВоронкаПродаж.Текст = Отчеты.ВоронкаПоЛидам.ТекстЗапросаСУстановленнымПолемГруппировки(ТекстЗапроса, "ИсторияСостоянийЛидовСрезПоследних", КомпоновщикНастроек.Настройки);
	ЗапросВоронкаПродаж.МенеджерВременныхТаблиц = Отчеты.ВоронкаПоЛидам.ВременныеТаблицыВоронкиПродаж(КомпоновщикНастроек.Настройки);
	
	РезультатыЗапросаВоронкаПродаж = ЗапросВоронкаПродаж.ВыполнитьПакет();
	
	Если РезультатыЗапросаВоронкаПродаж[1].Пустой() Тогда
		ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("СтрокаОтсутствуютДанные"));
		Возврат;
	КонецЕсли;
	
	ОбластьГруппировка = МакетОтчета.ПолучитьОбласть("СтрокаГруппировка");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	
	ЦветСостояния = Новый Соответствие;
	ТаблицаПотерь = РезультатыЗапросаВоронкаПродаж[0].Выгрузить();
	ДанныеПоПотерям = ДанныеПоПотерям(ТаблицаПотерь);
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("ЦветаГрадиента", ЦветаГрадиентаПричин(ТаблицаПотерь));
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	
	ВыборкаВоронкаПродажГруппировка = РезультатыЗапросаВоронкаПродаж[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажГруппировка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаВоронкаПродажГруппировка.УчитыватьВВоронке) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВоронкаПродажВидЗаказа = ВыборкаВоронкаПродажГруппировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВоронкаПродажВидЗаказа.Следующий() Цикл
			
			ОбластьГруппировка.Параметры.ПредставлениеГруппировки = ПредставлениеГруппировки(ВариантВоронки, ВыборкаВоронкаПродажВидЗаказа);
			
			Если ВариантВоронки = ВариантВоронкиПоЛидам() Тогда
				ВывестиДетализациюСостояние(ДокументРезультат, ВыборкаВоронкаПродажВидЗаказа, ДанныеПоПотерям, ДанныеРасшифровки, МакетОтчета, ЦветСостояния);
			Иначе
				ДокументРезультат.Вывести(ОбластьГруппировка);
				ВывестиДетализациюСостояние(ДокументРезультат, ВыборкаВоронкаПродажВидЗаказа, ДанныеПоПотерям, ДанныеРасшифровки, МакетОтчета, ЦветСостояния);
			КонецЕсли;	
		КонецЦикла;
				
	КонецЦикла;
	
	
	ВывестиЛегендуПотерь(ДокументРезультат, МакетОтчета, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиента);
	
КонецПроцедуры

Процедура ВывестиДетализациюСостояние(Знач ДокументРезультат, Знач ВыборкаВоронкаПродажВидЗаказа, Знач ДанныеПоПотерям, Знач ДанныеРасшифровки, Знач МакетОтчета, Знач ЦветСостояния)
	
	КоличествоСостоянийПоВидуЗаказа = Неопределено;
	КоличествоПредыдущейСтроки = Неопределено;
	
	ВыборкаВоронкаПродажПорядок = ВыборкаВоронкаПродажВидЗаказа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВоронкаПродажПорядок.Следующий() Цикл
		
		ВыборкаВоронкаПродажСостояние = ВыборкаВоронкаПродажПорядок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВоронкаПродажСостояние.Следующий() Цикл
			
			ОбластьСостояние = МакетОтчета.ПолучитьОбласть("СтрокаСостояние");
			
			ОбластьСостояние.Параметры.Расшифровка = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Ложь);
			ОбластьСостояние.Параметры.РасшифровкаПотери = ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, ВыборкаВоронкаПродажСостояние, Истина);
			
			ОбластьСостояние.Параметры.Состояние = ВыборкаВоронкаПродажСостояние.Состояние;
			ОбластьСостояние.Параметры.Количество = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке)
				И ЗначениеЗаполнено(КоличествоПредыдущейСтроки) Тогда
				ОбластьСостояние.Параметры.Конверсия = СтрШаблон("%1%%",
				Формат(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоПредыдущейСтроки * 100, "ЧЦ=3"));
			КонецЕсли;
			
			КоличествоПредыдущейСтроки = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
			
			Если ЗначениеЗаполнено(ВыборкаВоронкаПродажСостояние.Длительность) Тогда
				ОбластьСостояние.Параметры.Длительность = Окр(ВыборкаВоронкаПродажСостояние.Длительность / 60 / 60, 2);
			КонецЕсли;
			
			
			Если ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = Неопределено Тогда
				ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние] = ВыборкаВоронкаПродажСостояние.Состояние.Цвет.Получить();
			КонецЕсли;
			
			Если ТипЗнч(ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние]) = Тип("Цвет") Тогда
				ОбластьСостояние.Область("R1C3:R1C3").ЦветТекста = ЦветСостояния[ВыборкаВоронкаПродажСостояние.Состояние];
			Иначе
				ОбластьСостояние.Область("R1C3:R1C3").ЦветТекста = Новый Цвет;
			КонецЕсли;
			
			Если КоличествоСостоянийПоВидуЗаказа = Неопределено Тогда
				КоличествоСостоянийПоВидуЗаказа = ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке;
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(100);
			Иначе
				Проценты = Окр(ВыборкаВоронкаПродажСостояние.УчитыватьВВоронке / КоличествоСостоянийПоВидуЗаказа * 100);
				ОбластьСостояние.Параметры.ПредставлениеПроцентов = ПредставлениеПроцентов(Проценты);
			КонецЕсли;
			
			ЗаполнитьПотери(ОбластьСостояние, ВыборкаВоронкаПродажСостояние, ДанныеПоПотерям, КоличествоСостоянийПоВидуЗаказа, ДанныеРасшифровки.Настройки.ДополнительныеСвойства.ЦветаГрадиента);
			
			ДокументРезультат.Вывести(ОбластьСостояние);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеУстановленыОбязательныеФильтры(НастройкиКД, ДокументРезультат, МакетОтчета)
	
	ВариантВоронки = Отчеты.ВоронкаПоЛидам.ВариантВоронки(НастройкиКД);
	
	ПолеДляОбязательногоФильтра = ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки);
	Если ПолеДляОбязательногоФильтра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из НастройкиКД.Отбор.Элементы Цикл
		
		Если ТекЭлемент.ЛевоеЗначение = ПолеДляОбязательногоФильтра
			И ТекЭлемент.Использование Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьТребуетсяФильтр = МакетОтчета.ПолучитьОбласть("СтрокаТребуетсяФильтр");
	ОбластьТребуетсяФильтр.Параметры.ТекстСообщения = ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД);
	
	ДокументРезультат.Вывести(ОбластьТребуетсяФильтр);
	
	Возврат Истина;
	
КонецФункции

Функция ТекстСообщенияТребуетсяФильтр(ВариантВоронки, ПолеДляОбязательногоФильтра, НастройкиКД)
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() И МенееДвухЭлементовВСправочникеСотрудники() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по менеджерам требуется, чтобы в справочнике ""Сотрудники"" было не менее двух элементов.'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоИсточникам() И МенееДвухИсточниковВСправочникеИсточникиПривлеченияПокупателей() Тогда
		Возврат НСтр("ru = 'Для формирования воронки по подразделениям требуется, чтобы в справочнике ""Источники привлечения покупателей"" было не менее двух элементов.'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Для формирования воронки %1 установите фильтр %2.'"),
	ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД),
	НастройкиКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеДляОбязательногоФильтра).Заголовок);
	
КонецФункции

Функция ПредставлениеВариантаВоронки(ВариантВоронки, НастройкиКД)
	
	ВариантыВоронки = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(
	Новый ПараметрКомпоновкиДанных("ВариантВоронки")).ДоступныеЗначения;
	
	Возврат НРег(ВариантыВоронки.НайтиПоЗначению(ВариантВоронки).Представление);
	
КонецФункции

Функция МенееДвухЭлементовВСправочникеСотрудники()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МенееДвухИсточниковВСправочникеИсточникиПривлеченияПокупателей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ИсточникиПривлеченияПокупателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиПривлеченияПокупателей КАК ИсточникиПривлеченияПокупателей");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбязательныйФильтрПолеКомпоновкиДанных(ВариантВоронки)
	
	Результат = Новый Соответствие;
	Результат[ВариантВоронкиПоМенеджерам()] = Новый ПолеКомпоновкиДанных("Ответственный");
	Результат[ВариантВоронкиПоИсточникам()] = Новый ПолеКомпоновкиДанных("ИсточникПривлечения");
	
	Возврат Результат[ВариантВоронки];
	
КонецФункции

Функция ПредставлениеГруппировки(ВариантВоронки, Выборка)
	
	КомпонентыПредставления = Новый Массив;
	
	
	Если ВариантВоронки = ВариантВоронкиПоМенеджерам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Менеджер'");
	КонецЕсли;
	
	Если ВариантВоронки = ВариантВоронкиПоИсточникам() Тогда
		ЗаголовокПоля = НСтр("ru = 'Источник'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокПоля) Тогда
		КомпонентыПредставления.Добавить(СтрШаблон("%1: %2", ЗаголовокПоля, Выборка.ПолеГруппировки));
	КонецЕсли;
	
	Возврат СтрСоединить(КомпонентыПредставления);
КонецФункции

Функция ВариантВоронкиПоМенеджерам()
	
	Возврат "ПоМенеджерам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоИсточникам()
	
	Возврат "ПоИсточникам"; // Не локализуется
	
КонецФункции

Функция ВариантВоронкиПоЛидам()
	
	Возврат "ПоЛидам"; // Не локализуется
	
КонецФункции

Функция ДанныеПоПотерям(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если Результат[ТекСтр.ПолеГруппировки] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки] = Новый Соответствие;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены] = Новый Структура;
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Потери", 0);
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Вставить("Причины", Новый Соответствие);
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Потери + 1;

		
		Если Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = 0;
		КонецЕсли;
		
		Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] = Результат[ТекСтр.ПолеГруппировки][ТекСтр.СостояниеОтмены].Причины[ТекСтр.ПричинаОтмены] + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЦветаГрадиентаПричин(Знач ТаблицаПотерь)
	
	Результат = Новый Соответствие;
	Диаграмма = Новый Диаграмма;
	Палитра = Диаграмма.ПолучитьПалитру();
 
	ИндексЦвета = 0;
	Для Каждого ТекСтр Из ТаблицаПотерь Цикл
		
		Если ИндексЦвета > Палитра.ВГраница() Тогда
			ИндексЦвета = 0;
		КонецЕсли;
		
		Если Результат[ТекСтр.ПричинаОтмены] = Неопределено Тогда
			Результат.Вставить(ТекСтр.ПричинаОтмены, Палитра[ИндексЦвета]);
			ИндексЦвета = ИндексЦвета + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

Функция ПредставлениеПроцентов(Проценты, ОтображатьЗаголовок = Истина)
	
	Если ТипЗнч(Проценты) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Окр(Проценты) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев("████████████████████", Проценты * 0.2)
	+ Символы.НПП
	+ ?(ОтображатьЗаголовок, Формат(Проценты, "ЧЦ=3; ЧН=") + "%", "");
	
КонецФункции

Процедура ЗаполнитьПотери(Знач ОбластьСостояние, Знач ВыборкаВоронкаПродажСостояние, Знач ДанныеПоПотерям, Знач КоличествоСостоянийПоВидуЗаказа, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(КоличествоСостоянийПоВидуЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПотериПоВидуЗаказаИСостоянию = ДанныеПоПотерям[ВыборкаВоронкаПродажСостояние.ПолеГруппировки][ВыборкаВоронкаПродажСостояние.Состояние];
	Если ПотериПоВидуЗаказаИСостоянию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиГрадиента = Новый ТаблицаЗначений;
	ОбластиГрадиента.Колонки.Добавить("Причина", Новый ОписаниеТипов("СправочникСсылка.ПричиныНеуспешногоЗавершенияРаботыСЛидом"));
	ОбластиГрадиента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ОбластиГрадиента.Колонки.Добавить("ПриведенноеКоличество", Новый ОписаниеТипов("Число"));
	
	ПустаяОбластьГрадиента = ОбластиГрадиента.Добавить();
	ПустаяОбластьГрадиента.Количество = КоличествоСостоянийПоВидуЗаказа - ПотериПоВидуЗаказаИСостоянию.Потери;
	
	Для Каждого ТекПричина Из ПотериПоВидуЗаказаИСостоянию.Причины Цикл
		НоваяОбласть = ОбластиГрадиента.Добавить();
		НоваяОбласть.Причина = ТекПричина.Ключ;
		НоваяОбласть.Количество = ТекПричина.Значение;
	КонецЦикла;
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		ТекПричина.ПриведенноеКоличество = Окр(ТекПричина.Количество / ОбластиГрадиента.Итог("Количество") * КоличествоЯчеекГрадиентаПотерь());
	КонецЦикла;
	
	Если ОбластиГрадиента.Итог("ПриведенноеКоличество") <> КоличествоЯчеекГрадиентаПотерь() Тогда
		СуммаВсехКромеПервой = ОбластиГрадиента.Итог("ПриведенноеКоличество") - ОбластиГрадиента[0].ПриведенноеКоличество;
		ОбластиГрадиента[0].ПриведенноеКоличество = КоличествоЯчеекГрадиентаПотерь() - СуммаВсехКромеПервой;
	КонецЕсли;
	
	ТекПозиция = НачалоОтображенияГрадиентаПотерь();
	
	Для Каждого ТекПричина Из ОбластиГрадиента Цикл
		
		Если ЗначениеЗаполнено(ТекПричина.Причина)
			И ЗначениеЗаполнено(ТекПричина.ПриведенноеКоличество) Тогда
			
			ОбластьПокраски = СтрШаблон(
			"R1C%1:R1C%2",
			Формат(ТекПозиция, "ЧГ="),
			Формат(ТекПозиция + ТекПричина.ПриведенноеКоличество - 1, "ЧГ="));
			
			ОбластьСостояние.Область(ОбластьПокраски).ЦветФона = ЦветаГрадиента[ТекПричина.Причина];
			
		КонецЕсли;
		
		ТекПозиция = ТекПозиция + ТекПричина.ПриведенноеКоличество;
		
	КонецЦикла;
	
	ПроцентПотерь = Окр(ПотериПоВидуЗаказаИСостоянию.Потери / КоличествоСостоянийПоВидуЗаказа * 100);
	
	ОбластьСостояние.Параметры.Потери = СтрШаблон("%1 (%2%%)",
	ПотериПоВидуЗаказаИСостоянию.Потери,
	ПроцентПотерь);
	
	
КонецПроцедуры

Процедура ВывестиЛегендуПотерь(Знач ДокументРезультат, Знач МакетОтчета, Знач ЦветаГрадиента)
	
	Если Не ЗначениеЗаполнено(ЦветаГрадиента) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Вывести(МакетОтчета.ПолучитьОбласть("Легенда"));
	
	Для Каждого ТекЦвет Из ЦветаГрадиента Цикл
		ОбластьПричина = МакетОтчета.ПолучитьОбласть("СтрокаПричина");
		ОбластьПричина.Параметры.ПричинаОтмены = ТекЦвет.Ключ;
		ОбластьПричина.Область("R1C8:R1C12").ЦветФона = ТекЦвет.Значение;
		ДокументРезультат.Вывести(ОбластьПричина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НачалоОтображенияГрадиентаПотерь()
	
	Возврат 7;
	
КонецФункции

Функция КоличествоЯчеекГрадиентаПотерь()
	
	Возврат 50;
	
КонецФункции

Функция ИдентификаторЭлементаРасшифровки(ДанныеРасшифровки, Выборка, ЭтоПотери)
	
	ЗначенияПолей = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	
	ЗначениеПоле = ЗначенияПолей.Добавить();
	ЗначениеПоле.Поле = "КоличествоЛидов";
	
	ЗначениеПолеГруппировка = ЗначенияПолей.Добавить();
	ЗначениеПолеГруппировка.Поле = "ПолеГруппировки";
	ЗначениеПолеГруппировка.Значение = Выборка.ПолеГруппировки;
	
	ЗначениеСостояние = ЗначенияПолей.Добавить();
	ЗначениеСостояние.Поле = "Состояние";
	ЗначениеСостояние.Значение = Выборка.Состояние;
	
	ЗначениеЭтоПотери = ЗначенияПолей.Добавить();
	ЗначениеЭтоПотери.Поле = "ЭтоПотери";
	ЗначениеЭтоПотери.Значение = ЭтоПотери;
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"),, ЗначенияПолей);
	ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать;
	
	Возврат ЭлементРасшифровки.Идентификатор;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли