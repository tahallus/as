
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Параметры.ТипКИ) Тогда
		МассивТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.ТипКИ, ",", , Истина);
		Для Каждого ИмяТипа Из МассивТипов Цикл
			Если ВРег(ИмяТипа) = ВРег("АдресЭлектроннойПочты") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ИначеЕсли ВРег(ИмяТипа) = ВРег("Телефон") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			ИначеЕсли ВРег(ИмяТипа) = ВРег("Адрес") Тогда
				ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипыКИ.Количество() = 0 Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	СписокКонтрагенты.Параметры.УстановитьЗначениеПараметра("ТипыКИ", ТипыКИ);
	СписокКонтакты.Параметры.УстановитьЗначениеПараметра("ТипыКИ", ТипыКИ);
	СписокЛиды.Параметры.УстановитьЗначениеПараметра("ТипыКИ", ТипыКИ);
	
	Если НЕ Параметры.ТекущийКонтрагент.Пустая() Тогда
		Элементы.СписокКонтрагенты.ТекущаяСтрока = Параметры.ТекущийКонтрагент;
	КонецЕсли;
	
	Если НЕ Параметры.ТекущийКонтакт.Пустая() Тогда
		Элементы.СписокКонтакты.ТекущаяСтрока = Параметры.ТекущийКонтакт;
	КонецЕсли;
	
	Если НЕ Параметры.ТекущийЛид.Пустая() Тогда
		Элементы.СписокЛиды.ТекущаяСтрока = Параметры.ТекущийЛид;
	КонецЕсли;
	
	КлассификацияКонтактов.ОбновитьЗначенияОтбораПериодов(СправочникКонтрагентыОтборСозданы);
	КлассификацияКонтактов.ОбновитьЗначенияОтбораПериодов(СправочникКонтактыОтборСозданы);
	КлассификацияКонтактов.ОбновитьЗначенияОтбораПериодов(СправочникЛидыОтборСозданы);
	
	КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, Элементы.СправочникКонтрагентыЗначенияОтбораТеги, 45, "СправочникКонтрагенты");
	КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, Элементы.СправочникКонтактыЗначенияОтбораТеги, 45, "СправочникКонтакты");
	КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, Элементы.СправочникЛидыЗначенияОтбораТеги, 45, "СправочникЛиды");
	
	КлассификацияКонтактов.ОбновитьЗначенияОтбораСегментов(ЭтотОбъект, Элементы.СправочникКонтрагентыЗначенияОтбораСегменты, 45, "СправочникКонтрагенты");
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УникальныйИдентификаторВладельца = ВладелецФормы.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПустаяСтрока(АдресВХранилище) И ВыбранныеАдресаты.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Выбранные адресаты не перенесены.'");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Перенести отмеченных адресатов?'");
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемПереносПредложен", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, НСтр("ru = 'Адресная книга'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПослеЗаписиТега" Или ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		ОбновитьПанельЗначенийОтборовСервер(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура СписокКонтрагентыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыполнитьПеренос(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛидыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыполнитьПеренос(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыполнитьПеренос(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИД Из Элемент.ВыделенныеСтроки Цикл
		СтрокаАдресата = ВыбранныеАдресаты.НайтиПоИдентификатору(ИД);
		Если НЕ ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		ВыполнитьПеренос(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПометкаПриИзменении(Элемент)
	
	УстановитьПометкуПодчиненныхРекурсивно(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка, Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьЭлементы());
	Если Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка И ТипЗнч(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Родитель = Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьРодителя();
		Родитель.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область СправочникКонтрагентыВариантыПериода

&НаКлиенте
Процедура СправочникКонтрагентыОтборПериодНажатие(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСозданыСегодняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", "Сегодня", Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСозданыЗа3ДняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", "3Дня", Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСозданыЗаНеделюНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", "Неделя", Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСозданыЗаМесяцНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", "Месяц", Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСозданыПриИзменении(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", "ПроизвольныйПериод", Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

#КонецОбласти

#Область СправочникКонтактыВариантыПериода

&НаКлиенте
Процедура СправочникКонтактыОтборПериодНажатие(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборСозданыСегодняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтакты", "Сегодня", Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборСозданыЗа3ДняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтакты", "3Дня", Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборСозданыЗаНеделюНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтакты", "Неделя", Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборСозданыЗаМесяцНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтакты", "Месяц", Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокКонтакты", "ПроизвольныйПериод", Элемент, "СправочникКонтакты");
	
КонецПроцедуры

#КонецОбласти

#Область СправочникЛидыВариантыПериода

&НаКлиенте
Процедура СправочникЛидыОтборПериодНажатие(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборСозданыСегодняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокЛиды", "Сегодня", Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборСозданыЗа3ДняНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокЛиды", "3Дня", Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборСозданыЗаНеделюНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокЛиды", "Неделя", Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборСозданыЗаМесяцНажатие(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокЛиды", "Месяц", Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	Пометка = КлассификацияКонтактовКлиент.СозданыОтборНажатие(ЭтотОбъект, "СписокЛиды", "ПроизвольныйПериод", Элемент, "СправочникЛиды");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СправочникКонтрагентыОтборТеги(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтрагентыОтборСегменты(Команда)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда, "СправочникКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникКонтактыОтборТегиНажатие(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникКонтакты");
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникЛидыОтборТегиНажатие(Элемент)
	
	КлассификацияКонтактовКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент, "СправочникЛиды");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СправочникКонтрагентыТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ТипКонтактов = Тип("СправочникСсылка.Контрагенты");
	Пометка = КлассификацияКонтактовКлиент.ТегОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", Элемент, "СправочникКонтрагенты", ТипКонтактов, СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СправочникКонтрагентыСегментОтборНажатие(Элемент, СтандартнаяОбработка)
	
	Пометка = КлассификацияКонтактовКлиент.СегментОтборНажатие(ЭтотОбъект, "СписокКонтрагенты", Элемент, "СправочникКонтрагенты", СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СправочникКонтактыТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ТипКонтактов = Тип("СправочникСсылка.КонтактныеЛица");
	Пометка = КлассификацияКонтактовКлиент.ТегОтборНажатие(ЭтотОбъект, "СписокКонтакты", Элемент, "СправочникКонтакты", ТипКонтактов, СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СправочникЛидыТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ТипКонтактов = Тип("СправочникСсылка.Лиды");
	Пометка = КлассификацияКонтактовКлиент.ТегОтборНажатие(ЭтотОбъект, "СписокЛиды", Элемент, "СправочникЛиды", ТипКонтактов, СтандартнаяОбработка);
	Если НЕ Пометка = Неопределено Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	АдресВХранилище = "ЗакрытьБезПереноса";
	Закрыть(АдресВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранные(Команда)
	
	Если Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникКонтрагенты Тогда
		ТекущаяТаблица = Элементы.СписокКонтрагенты;
	ИначеЕсли Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникКонтакты Тогда
		ТекущаяТаблица = Элементы.СписокКонтакты;
	ИначеЕсли Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникЛиды Тогда
		ТекущаяТаблица = Элементы.СписокЛиды;
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыполнитьПеренос(ТекущаяТаблица.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзВыбранных(Команда)
	
	Для Каждого ИД Из Элементы.ВыбранныеАдресаты.ВыделенныеСтроки Цикл
		СтрокаАдресата = ВыбранныеАдресаты.НайтиПоИдентификатору(ИД);
		Если ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.КонтактныеЛица")
			ИЛИ ТипЗнч(СтрокаАдресата.Значение) = Тип("СправочникСсылка.Лиды") Тогда
			СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
			Для каждого Строка Из СтрокиПервыйУровень Цикл
				Если Строка.Значение = СтрокаАдресата.Значение Тогда
					СтрокиПервыйУровень.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКонтрагентов(Команда)
	
	ИзменитьПометкиКонтрагентов(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиКонтрагентов(Команда)
	
	ИзменитьПометкиКонтрагентов(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиКонтактныхЛиц(Команда)
	
	ИзменитьПометкиКонтактныхЛиц(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиКонтактныхЛиц(Команда)
	
	ИзменитьПометкиКонтактныхЛиц(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыИнтерактивныхДействий

&НаКлиенте
Процедура ПередЗакрытиемПереносПредложен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		АдресВХранилище = АдресВыбранныхАдресатовВоВременномХранилище();
		Закрыть(АдресВХранилище);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		АдресВХранилище = "ЗакрытьБезПереноса";
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереносЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НеПоказыватьВопросВыбораГруппы = РезультатВыбора.БольшеНеЗадаватьЭтотВопрос;
	
	Если РезультатВыбора.Значение = КодВозвратаДиалога.Да Тогда
		ДобавитьВыбранныхКонтрагентов(ДополнительныеПараметры.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ВыполнитьПеренос(знач Контрагенты)
	
	Если Контрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПоказыватьВопросВыбораГруппы = Ложь Тогда
		
		Если Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникКонтрагенты Тогда
			ТекущаяТаблица = Элементы.СписокКонтрагенты;
		ИначеЕсли Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникКонтакты Тогда
			ТекущаяТаблица = Элементы.СписокКонтакты;
		ИначеЕсли Элементы.Справочники.ТекущаяСтраница = Элементы.СправочникЛиды Тогда
			ТекущаяТаблица = Элементы.СписокЛиды;
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из ТекущаяТаблица.ВыделенныеСтроки Цикл
			Данные = ТекущаяТаблица.ДанныеСтроки(ВыделеннаяСтрока);
			Если ВыделеннаяСтрока.Пустая() Или Данные.ЭтоГруппа Тогда
				ПараметрыВопроса = Новый Структура;
				ПараметрыВопроса.Вставить("Заголовок", НСтр("ru = 'Подтверждение выбора группы'"));
				ПараметрыВопроса.Вставить("ТекстСообщения", НСтр("ru = 'Выбрать всех контрагентов группы?'"));
				ПараметрыВопроса.Вставить("Кнопки", "РежимДиалогаВопрос.ДаНет");
				ПараметрыВопроса.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПереносЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", Элементы.СписокКонтрагенты.ВыделенныеСтроки));
				ОткрытьФорму("ОбщаяФорма.Вопрос", ПараметрыВопроса, ЭтотОбъект,,,, ОписаниеОповещения);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Контрагенты[0]) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДобавитьВыбранныхКонтрагентов(Контрагенты);
	ИначеЕсли ТипЗнч(Контрагенты[0]) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ДобавитьВыбранныхКонтактов(Контрагенты);
	ИначеЕсли ТипЗнч(Контрагенты[0]) = Тип("СправочникСсылка.Лиды") Тогда
		ДобавитьВыбранныхЛидов(Контрагенты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтрагентов(знач Контрагенты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтрагентыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И КонтрагентыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	Контрагенты.КонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """""""") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки,
	|	Контрагенты.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО Контрагенты.Ссылка = втКИКонтрагентов.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление,
	|	втКИКонтрагентов.Порядок
	|ИТОГИ
	|	МАКСИМУМ(ОсновноеКонтактноеЛицо)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактныхЛиц
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Представление КАК КонтактноеЛицоПредставление,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Представление, """""""") КАК ЗначениеКИ,
	|	втКИКонтактныхЛиц.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактныхЛиц КАК втКИКонтактныхЛиц
	|		ПО (КонтактныеЛица.Ссылка = втКИКонтактныхЛиц.Ссылка)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|	И КонтактныеЛица.Недействителен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактноеЛицоПредставление,
	|	втКИКонтактныхЛиц.Порядок
	|ИТОГИ
	|	МАКСИМУМ(Контрагент)
	|ПО
	|	КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтрагентов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактныхЛиц = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контрагент");
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		Если СписокКонтрагенты.Отбор.Элементы.Количество() > 0 Тогда
			КонтрагентПодходитПоОтбору = Истина;
			Для Каждого ЭлементОтбора Из СписокКонтрагенты.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.Представление = "ОтборПериод" Тогда
					
					Если ВыборкаКонтрагентов.ДатаСоздания < ЭлементОтбора.Элементы[0].ПравоеЗначение
						Или ВыборкаКонтрагентов.ДатаСоздания > ЭлементОтбора.Элементы[1].ПравоеЗначение Тогда
						
						КонтрагентПодходитПоОтбору = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение[0].Значение.Найти(ВыборкаКонтрагентов.Контрагент) = Неопределено Тогда
						КонтрагентПодходитПоОтбору = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не КонтрагентПодходитПоОтбору Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КонтрагентЕстьВВыбранных = Ложь;
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
			Если СтрокаПервыйУровень.Значение = ВыборкаКонтрагентов.Контрагент Тогда
				КонтрагентЕстьВВыбранных = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КонтрагентЕстьВВыбранных Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаКонтрагентов.Контрагент;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаКонтрагентов.КонтрагентПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 1;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
		Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
			
			Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Контрагентов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Контрагентов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтактныхЛиц.Сбросить();
		Отбор.Контрагент = ВыборкаКонтрагентов.Контрагент;
		Пока ВыборкаКонтактныхЛиц.НайтиСледующий(Отбор) Цикл
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Ложь;
			СтрокаВторойУровень.Значение = ВыборкаКонтактныхЛиц.КонтактноеЛицо;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтактныхЛиц.КонтактноеЛицоПредставление;
			СтрокаВторойУровень.ИндексКартинки = 2;
			
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			
			ВыборкаКИ_КонтактныхЛиц = ВыборкаКонтактныхЛиц.Выбрать();
			Пока ВыборкаКИ_КонтактныхЛиц.Следующий() Цикл
				
				Если ВыборкаКИ_КонтактныхЛиц.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = Ложь;
				СтрокаТретийУровень.Значение = ВыборкаКИ_КонтактныхЛиц.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКИ_КонтактныхЛиц.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКИ_КонтактныхЛиц.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтактов(знач Контакты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактов
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Контакт,
	|	КонтактныеЛица.Представление КАК КонтактПредставление,
	|	ЕСТЬNULL(втКИКонтактов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактов.Представление, """""""") КАК ЗначениеКИ,
	|	втКИКонтактов.ИндексКартинки КАК ИндексКартинки,
	|	КонтактныеЛица.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактов КАК втКИКонтактов
	|		ПО КонтактныеЛица.Ссылка = втКИКонтактов.Ссылка
	|ГДЕ
	|	КонтактныеЛица.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактПредставление,
	|	втКИКонтактов.Порядок
	|ИТОГИ ПО
	|	Контакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контрагент = КонтрагентыЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И КонтрагентыЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиКонтрагентКонтакт.Контакт КАК Контакт,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """""""") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СвязиКонтрагентКонтакт.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО (Контрагенты.Ссылка = втКИКонтрагентов.Ссылка)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление,
	|	втКИКонтрагентов.Порядок
	|ИТОГИ
	|	МАКСИМУМ(Контакт)
	|ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("Контакты", Контакты);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтактов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтрагентов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контакт");
	
	Пока ВыборкаКонтактов.Следующий() Цикл
		
		Если СписокКонтакты.Отбор.Элементы.Количество() > 0 Тогда
			КонтактПодходитПоОтбору = Истина;
			Для Каждого ЭлементОтбора Из СписокКонтакты.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.Представление = "ОтборПериод" Тогда
					
					Если ВыборкаКонтактов.ДатаСоздания < ЭлементОтбора.Элементы[0].ПравоеЗначение
						Или ВыборкаКонтактов.ДатаСоздания > ЭлементОтбора.Элементы[1].ПравоеЗначение Тогда
						
						КонтактПодходитПоОтбору = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение[0].Значение.Найти(ВыборкаКонтактов.Контакт) = Неопределено Тогда
						КонтактПодходитПоОтбору = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не КонтактПодходитПоОтбору Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КонтактЕстьВВыбранных = Ложь;
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
			Если СтрокаПервыйУровень.Значение = ВыборкаКонтактов.Контакт Тогда
				КонтактЕстьВВыбранных = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КонтактЕстьВВыбранных Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаКонтактов.Контакт;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаКонтактов.КонтактПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 2;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Контактов = ВыборкаКонтактов.Выбрать();
		Пока ВыборкаКИ_Контактов.Следующий() Цикл
			
			Если ВыборкаКИ_Контактов.ВидКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Контактов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контактов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Контактов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтрагентов.Сбросить();
		Отбор.Контакт = ВыборкаКонтактов.Контакт;
		Пока ВыборкаКонтрагентов.НайтиСледующий(Отбор) Цикл
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Ложь;
			СтрокаВторойУровень.Значение = ВыборкаКонтрагентов.Контрагент;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтрагентов.КонтрагентПредставление;
			СтрокаВторойУровень.ИндексКартинки = 1;
			
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			
			ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
				
				Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = Ложь;
				СтрокаТретийУровень.Значение = ВыборкаКИ_Контрагентов.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКИ_Контрагентов.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхЛидов(знач Лиды)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ЛидыКонтактнаяИнформация.Вид КАК Вид,
	|	ЛидыКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ЛидыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИЛидов
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И ЛидыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	Лиды.Представление КАК ЛидПредставление,
	|	ЕСТЬNULL(втКИЛидов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИЛидов.Представление, """") КАК ЗначениеКИ,
	|	втКИЛидов.ИндексКартинки КАК ИндексКартинки,
	|	Лиды.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИЛидов КАК втКИЛидов
	|		ПО Лиды.Ссылка = втКИЛидов.Ссылка
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И Лиды.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛидПредставление,
	|	втКИЛидов.Порядок
	|ИТОГИ ПО
	|	Лид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактыЛидовКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактыЛидовКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактыЛидовКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактыЛидовКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактовЛида
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов.КонтактнаяИнформация КАК КонтактыЛидовКонтактнаяИнформация
	|		ПО (КонтактыЛидов.Ссылка = КонтактыЛидовКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидовКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	КонтактыЛидов.Ссылка КАК КонтактЛида,
	|	КонтактыЛидов.Представление КАК КонтактЛидаПредставление,
	|	ЕСТЬNULL(втКИКонтактовЛида.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактовЛида.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтактовЛида.ИндексКартинки КАК ИндексКартинки,
	|	втКИКонтактовЛида.Порядок КАК Порядок
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактовЛида КАК втКИКонтактовЛида
	|		ПО (КонтактыЛидов.Ссылка = втКИКонтактовЛида.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактЛидаПредставление,
	|	втКИКонтактовЛида.Порядок
	|ИТОГИ ПО
	|	Лид";
	
	Запрос.УстановитьПараметр("Лиды", Лиды);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЛидов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактовЛидов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Лид");
	
	Пока ВыборкаЛидов.Следующий() Цикл
		
		Если СписокЛиды.Отбор.Элементы.Количество() > 0 Тогда
			ЛидПодходитПоОтбору = Истина;
			Для Каждого ЭлементОтбора Из СписокЛиды.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.Представление = "ОтборПериод" Тогда
					
					Если ВыборкаЛидов.ДатаСоздания < ЭлементОтбора.Элементы[0].ПравоеЗначение
						Или ВыборкаЛидов.ДатаСоздания > ЭлементОтбора.Элементы[1].ПравоеЗначение Тогда
						
						ЛидПодходитПоОтбору = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЭлементОтбора.Использование = Истина
					И ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение[0].Значение.Найти(ВыборкаЛидов.Лид) = Неопределено Тогда
						ЛидПодходитПоОтбору = Ложь;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЛидПодходитПоОтбору Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЛидЕстьВВыбранных = Ложь;
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
			Если СтрокаПервыйУровень.Значение = ВыборкаЛидов.Лид Тогда
				ЛидЕстьВВыбранных = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЛидЕстьВВыбранных Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаЛидов.Лид;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаЛидов.ЛидПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 1;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Лидов = ВыборкаЛидов.Выбрать();
		КИЛидаНезаполнено = Ложь;
		НетКонтактовЛида  = Истина;
		
		Пока ВыборкаКИ_Лидов.Следующий() Цикл
			
			Если ВыборкаКИ_Лидов.ВидКИ = Неопределено Тогда
				КИЛидаНезаполнено = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Лидов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Лидов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Лидов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтактовЛидов.Сбросить();
		Отбор.Лид = ВыборкаЛидов.Лид;
		Пока ВыборкаКонтактовЛидов.НайтиСледующий(Отбор) Цикл
			
			ВыборкаКонтактовЛида = ВыборкаКонтактовЛидов.Выбрать();
			ТекущийКонтакт = Справочники.КонтактыЛидов.ПустаяСсылка();
			
			Пока ВыборкаКонтактовЛида.Следующий() Цикл
							
				Если ТекущийКонтакт <> ВыборкаКонтактовЛида.КонтактЛида Тогда
					ТекущийКонтакт = ВыборкаКонтактовЛида.КонтактЛида ;
					НетКонтактовЛида = Ложь;
					СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
					СтрокаВторойУровень.Пометка = Ложь;
					СтрокаВторойУровень.Значение = ВыборкаКонтактовЛида.КонтактЛида ;
					СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтактовЛида.КонтактЛидаПредставление;
					СтрокаВторойУровень.ИндексКартинки = 2;
				КонецЕсли;
				
				Если ВыборкаКонтактовЛида.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаВторойУровень.Пометка = Ложь;
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = СтрокаВторойУровень.Пометка;
				СтрокаТретийУровень.Значение = ВыборкаКонтактовЛида.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКонтактовЛида.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКонтактовЛида.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НетКонтактовЛида И КИЛидаНезаполнено Тогда
			СтрокаПервыйУровень.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуПодчиненныхРекурсивно(Пометка, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Пометка = Пометка;
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтрокиДерева.Количество() > 0 Тогда
			УстановитьПометкуПодчиненныхРекурсивно(Пометка, ПодчиненныеСтрокиДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиКонтрагентов(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокаПервыйУровень.Пометка = Пометка;
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиКонтактныхЛиц(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.КонтактныеЛица")
				И ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.КонтактыЛидов") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
				СтрокаТретийУровень.Пометка = Пометка;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресВыбранныхАдресатовВоВременномХранилище()
	
	ТаблицаАдресатов = ПреобразоватьДеревоАдресатовВТаблицуЗначений(ВыбранныеАдресаты);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресатов, УникальныйИдентификаторВладельца);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьДеревоАдресатовВТаблицуЗначений(Дерево)
	
	ТаблицаАдресатов = Новый ТаблицаЗначений;
	ТаблицаАдресатов.Колонки.Добавить("Контакт", Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.КонтактныеЛица,СправочникСсылка.Лиды,Строка,СправочникСсылка.КонтактыЛидов"));
	ТаблицаАдресатов.Колонки.Добавить("КакСвязаться", Новый ОписаниеТипов("Строка"));
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		
		Если СтрокаПервыйУровень.Пометка Тогда
			НоваяСтрокаКонтрагент = ТаблицаАдресатов.Добавить();
			НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
		КонецЕсли;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			
			Если СтрокаПервыйУровень.Пометка И ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаВторойУровень.Пометка Тогда
				
				Если НоваяСтрокаКонтрагент = Неопределено Тогда
					НоваяСтрокаКонтрагент = ТаблицаАдресатов.Добавить();
				КонецЕсли;
				
				НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
				НоваяСтрокаКонтрагент.КакСвязаться = СтрокаВторойУровень.ПредставлениеЗначения;
				НоваяСтрокаКонтрагент = Неопределено;
				
			ИначеЕсли (ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.Контрагенты")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.КонтактныеЛица")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.Лиды")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.КонтактыЛидов"))
				И СтрокаВторойУровень.Пометка Тогда
				
				НоваяСтрокаКонтактноеЛицо = ТаблицаАдресатов.Добавить();
				НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
				
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				
				Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
					
					Если ТипЗнч(СтрокаТретийУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаТретийУровень.Пометка Тогда
						
						Если НоваяСтрокаКонтактноеЛицо = Неопределено Тогда
							НоваяСтрокаКонтактноеЛицо = ТаблицаАдресатов.Добавить();
						КонецЕсли;
						
						НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
						НоваяСтрокаКонтактноеЛицо.КакСвязаться = СтрокаТретийУровень.ПредставлениеЗначения;
						НоваяСтрокаКонтактноеЛицо = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаАдресатов;
	
КонецФункции

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	
	КлассификацияКонтактов.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельЗначенийОтборовСервер(ИмяСобытия)
	
	Если ИмяСобытия = "ПослеЗаписиТега" Тогда
		КлассификацияКонтактов.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, 45);
	ИначеЕсли ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		КлассификацияКонтактов.ОбновитьЗначенияОтбораСегментов(ЭтотОбъект, 45);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКнопкиПереноса", "Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти