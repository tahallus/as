
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ЭтоМобильныйКлиент Тогда
		НастроитьФормуПодМобильноеПриложение();
	КонецЕсли;
	
	УстановитьСсылкиНаМаркетплейсы();
	УстановитьНастройкиКатегорийДляЭлементов();
	УстановитьНастройкиСценариевДляЭлементов();
	
	УстановитьНастройкиВесаПриложений_ПоУмолчанию();
	УстановитьНастройкиВесаПриложений_ПоКатегории();
	УстановитьНастройкиВесаПриложений_ПоСценарию();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокТеговКатегорияПриИзменении(Элемент)
	Если Не ПустаяСтрока(СписокТеговКатегория) Тогда
		ПрикрепитьТегНаСервере("Категория", СписокТеговКатегория);
		СписокТеговКатегория = "";
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговКатегорияОбработкаНавигационнойСсылки(Элемент,
															НавигационнаяСсылкаФорматированнойСтроки,
															СтандартнаяОбработка)
															
	ОблакоТеговОбработкаНавигационнойСсылкиНаСервере("Категория",
													 НавигационнаяСсылкаФорматированнойСтроки,
													 СтандартнаяОбработка);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТеговСценарийПриИзменении(Элемент)
	Если Не ПустаяСтрока(СписокТеговСценарий) Тогда
		ПрикрепитьТегНаСервере("Сценарий", СписокТеговСценарий);
		СписокТеговСценарий = "";
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговСценарийОбработкаНавигационнойСсылки(Элемент,
														НавигационнаяСсылкаФорматированнойСтроки,
														СтандартнаяОбработка)
														
	ОблакоТеговОбработкаНавигационнойСсылкиНаСервере("Сценарий",
													 НавигационнаяСсылкаФорматированнойСтроки,
													 СтандартнаяОбработка);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТегов_МКОбработкаНавигационнойСсылки(Элемент,
													 НавигационнаяСсылкаФорматированнойСтроки,
													 СтандартнаяОбработка)
													 
	ОблакоТеговОбработкаНавигационнойСсылкиНаСервере(Неопределено,
													 НавигационнаяСсылкаФорматированнойСтроки,
													 СтандартнаяОбработка);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПоКатегории(Команда)
	ПрикрепитьТегНаСервере("Категория", Команда.Имя);
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПоСценарию(Команда)
	ПрикрепитьТегНаСервере("Сценарий", Команда.Имя);
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВКонструкторНажатие(Элемент)
	Попытка
		СсылкаНаКонструктор = ПолучитьСсылкуНаКонструктор();
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаКонструктор);
		ОткрытьФорму("Справочник.НастройкиПубликацииМЛК.Форма.КонструкторМобильногоПриложения", ПараметрыФормы);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Форма конструктора не найдена'");
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаКонструктор()
	Возврат Справочники.НастройкиПубликацииМЛК.ПолучитьНастройкиПубликацииМЛК();
КонецФункции

&НаКлиенте
Процедура ДобавитьВФильтрКатегория(Команда)
	
	СписокКатегорий = Новый СписокЗначений;
	Для Каждого ТекЭлемент Из ДоступныеКатегории Цикл
		СписокКатегорий.Добавить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ДобавитьВФильтрКатегория_Завершение", ЭтотОбъект), СписокКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВФильтрСценарий(Команда)
	
	СписокСценариев = Новый СписокЗначений;
	Для Каждого ТекЭлемент Из ДоступныеСценарии Цикл
		СписокСценариев.Добавить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ДобавитьВФильтрСценарий_Завершение", ЭтотОбъект), СписокСценариев);

КонецПроцедуры

// ССЫЛКИ НА МАРКЕТПЛЕЙСЫ

&НаКлиенте
Процедура УНФ_МК_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УНФ_МК_ASНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УНФ12_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УНФ12_ASНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УНФ20_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УНФ20_ASНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗАК_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗАК_ASНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура МКс_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КЛД_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПЦ_GPНажатие(Элемент)
	ОткрытьСсылкуНаРесурс(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФормуПодМобильноеПриложение()
	
	ИдентификаторыПриложений = Новый Структура;
	ИдентификаторыПриложений.Вставить("Группа_УНФ_МК", 	1);
	ИдентификаторыПриложений.Вставить("Группа_УНФ12", 	2);
	ИдентификаторыПриложений.Вставить("Группа_УНФ20", 	3);
	ИдентификаторыПриложений.Вставить("Группа_ЗАК", 	4);
	ИдентификаторыПриложений.Вставить("Группа_МКс", 	5);
	ИдентификаторыПриложений.Вставить("Группа_КЛД",		6);
	ИдентификаторыПриложений.Вставить("Группа_ПЦ", 		7);
	ИдентификаторыПриложений.Вставить("Группа_КК", 		8);
	
	Элементы.ПерейтиВКонструктор.Видимость 	 = Ложь;
	Элементы.Разделитель_Заголовок.Видимость = Ложь;
	
	Элементы.Группа_Отбор.Видимость 		 = Ложь;
	Элементы.Группа_Отбор_МК.Видимость 		 = Истина;
	
	Элементы.Заголовок.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;

	Для Каждого ТекID Из ИдентификаторыПриложений Цикл
		
		ИмяГруппы 	= ТекID.Ключ;
		НомерГруппы = ТекID.Значение;
		
		ГруппаКолонки = Элементы["ГруппаКолонки" + НомерГруппы];
		Колонка1 = Элементы["Группа" + НомерГруппы + "Колонка1"];
		Колонка2 = Элементы["Группа" + НомерГруппы + "Колонка2"];
		Колонка3 = Элементы["Группа" + НомерГруппы + "Колонка3"];
		
		Логотип  = Элементы["Логотип" + НомерГруппы];
		
		ГруппаКатегорииСценарии = Элементы["ГруппаКатегорииСценарии" + НомерГруппы];
		ГруппаСценарии 			= Элементы["ГруппаСценарии" + НомерГруппы];
		ГруппаТеги 				= Элементы["ГруппаТеги" + НомерГруппы];
		РазделительГрупп 		= Элементы["Разделитель_" + ИмяГруппы];
		ГруппаМаркетплейсы 		= Элементы["ГруппаМаркетплейсы" + НомерГруппы];
		ГруппаПодробнее 		= Элементы["ГруппаПодробнее" + НомерГруппы];
		КраткоеОписание 		= Элементы["КраткоеОписание" + НомерГруппы];
		РодительскаяГруппа		= Элементы[ИмяГруппы];
		
		ГруппаКраткоеОписаниеМобильныйКлиент = Элементы["Группа_КраткоеОписаниеМобильныйКлиент" + НомерГруппы];
		ЗаголовокМобильныйКлиент 			 = Элементы["ЗаголовокМобильныйКлиент" + НомерГруппы];
		
		Группа_ШапкаПолногоОписания_МобильныйКлиент = Элементы["Группа_ШапкаПолногоОписания_МобильныйКлиент" + НомерГруппы];
		ШапкаПолногоОписания_Заголовок 				= Элементы["ШапкаПолногоОписания_Заголовок" + НомерГруппы];
		ШапкаПолногоОписания_Логотип  				= Элементы["ШапкаПолногоОписания_Логотип" + НомерГруппы];
	
		// Перенесем заголовок
		ЗаголовокМобильныйКлиент.Заголовок 		 = Колонка2.Заголовок;
		ШапкаПолногоОписания_Заголовок.Заголовок = Колонка2.Заголовок;
		
		// Колонки расположим вертикально - получим строки
		ГруппаКолонки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// Категории и сценарии расположим друг под другом
		ГруппаКатегорииСценарии.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// Кнопки маркетплейсов расположим горизонтально, выравнивание по центру
		ГруппаМаркетплейсы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаМаркетплейсы.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		
		// Рядом с логотипом расположим мобильное описание
		Колонка1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// Кнопки маркетплейсов и КатегорииСценарии перенесем в группу Подробнее
		ГруппаПодробнее.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		Элементы.Переместить(Колонка3, ГруппаПодробнее);
		Элементы.Переместить(ГруппаМаркетплейсы, Группа_ШапкаПолногоОписания_МобильныйКлиент);
		
		// Уберем установленную ширину элементов
		Колонка1.Ширина 		= 0;
		Колонка2.Ширина 		= 0;
		Колонка3.Ширина 		= 0;
		ГруппаСценарии.Ширина 	= 0;
		ГруппаТеги.Ширина 		= 0;
		РазделительГрупп.Ширина = 0;
		
		// Растянем по горизонтали элементы
		РодительскаяГруппа.РастягиватьПоГоризонтали = Истина;
		РазделительГрупп.РастягиватьПоГоризонтали 	= Истина;
		Колонка1.РастягиватьПоГоризонтали			= Истина;
		ГруппаМаркетплейсы.РастягиватьПоГоризонтали = Истина;
		
		// Скроем QR-код
		Элементы["ГруппаСсылки" + НомерГруппы].Видимость = Ложь;
		
		// Скроем заголовки групп, где они не требуются
		Колонка1.ОтображатьЗаголовок = Ложь;
		Колонка2.ОтображатьЗаголовок = Ложь;
		Колонка3.ОтображатьЗаголовок = Ложь;
		ГруппаМаркетплейсы.ОтображатьЗаголовок = Ложь;
		
		Колонка3.Отображение				= ОтображениеОбычнойГруппы.СлабоеВыделение;
		ГруппаКатегорииСценарии.Отображение	= ОтображениеОбычнойГруппы.СлабоеВыделение;
		ГруппаСценарии.Отображение			= ОтображениеОбычнойГруппы.СлабоеВыделение;
		ГруппаТеги.Отображение				= ОтображениеОбычнойГруппы.СлабоеВыделение;
		ГруппаМаркетплейсы.Отображение		= ОтображениеОбычнойГруппы.Нет;
				
		// Переключим описание на мобильный вариант
		КраткоеОписание.Видимость = Ложь;
		ГруппаКраткоеОписаниеМобильныйКлиент.Видимость = Истина;
		Группа_ШапкаПолногоОписания_МобильныйКлиент.Видимость = Истина;
		
		// Уменьшим размер логотипа
		Логотип.Ширина = 7;
		Логотип.Высота = 2;
		
		ШапкаПолногоОписания_Логотип.Ширина = 8;
		ШапкаПолногоОписания_Логотип.Высота = 3;
		
	КонецЦикла;

КонецПроцедуры

// Устанавливает URL для каждого приложения
//
&НаСервере
Процедура УстановитьСсылкиНаМаркетплейсы()
	
	СсылкиНаМаркетплейсы = Новый Структура;
	
	// Мобильный клиент
	СсылкиНаМаркетплейсы.Вставить("УНФ_МК_GP", "https://play.google.com/store/apps/details?id=com.e1c.SmallBusiness");
	СсылкиНаМаркетплейсы.Вставить("УНФ_МК_AS", "https://apps.apple.com/ru/app/1%D1%81-%D1%83%D0%BD%D1%84-%D0%B2-%D0%BE"
												+ "%D0%B1%D0%BB%D0%B0%D0%BA%D0%B5/id1440287699");
	
	// УНФ 1.2
	СсылкиНаМаркетплейсы.Вставить("УНФ12_GP", "https://play.google.com/store/apps/details?id="
												+ "com.e1c.MobileSmallBusiness");
	СсылкиНаМаркетплейсы.Вставить("УНФ12_AS", "https://apps.apple.com/ru/app/1%D1%81-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0"
												+ "%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B0%D1%88%D0%B5%D0%B9-%D1%84%D"
												+ "0%B8%D1%80%D0%BC%D0%BE%D0%B9/id590223043");
	
	// УНФ 2.0
	СсылкиНаМаркетплейсы.Вставить("УНФ20_GP",	"https://play.google.com/store/apps/details?id="
												+ "com.e1c.SmallBusinessMobile");
	СсылкиНаМаркетплейсы.Вставить("УНФ20_AS",	"https://apps.apple.com/ru/app/1%D1%81-%D1%83%D0%BD%D1%84-%D0%BD%D0%B0"
												+ "-%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE%D0%BC-2-0/id1459657913");
	
	// Заказы
	СсылкиНаМаркетплейсы.Вставить("ЗАК_GP",		"https://play.google.com/store/apps/details?id=com.e1c.mobile.orders");
	СсылкиНаМаркетплейсы.Вставить("ЗАК_AS",		"https://apps.apple.com/ru/app/1%D1%81-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7%D"
												+ "1%8B/id554982652");
	
	// Мобильная касса
	СсылкиНаМаркетплейсы.Вставить("МКс_GP",		"https://play.google.com/store/apps/details?id="
												+ "com.e1c.mobilecashboxmarket");
	
	//Кладовщик
	СсылкиНаМаркетплейсы.Вставить("КЛД_GP",		"https://play.google.com/store/apps/details?id="
												+ "com.e1c.storekeeper.market&hl=ru");
	
	// Проверка ценников
	СсылкиНаМаркетплейсы.Вставить("ПЦ_GP",		"https://play.google.com/store/apps/details?id="
												+ "com.e1c.CheckPriceTag");
	
	// Кабинет клиента
	СсылкиНаМаркетплейсы.Вставить("КК_GP",		"https://play.google.com/store/apps/details?id="
												+ "com.e1c.ClientCabinet");
	СсылкиНаМаркетплейсы.Вставить("КК_AS",		"https://apps.apple.com/ru/app/%D0%BA%D0%B0%D0%B1%D0%B8%D0%BD%D0%B5%D1%8"
												+ "2-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D0%B0/id1484079649");
	
КонецПроцедуры

// Устанавливает набор категорий для каждого приложения
//
&НаСервере
Процедура УстановитьНастройкиКатегорийДляЭлементов()
	
	// Неразрывные пробелы в представлениях нужны для корректной верстки
	// BSLLS:InvalidCharacterInFile-off
	ДоступныеКатегории = Новый Структура;
	ДоступныеКатегории.Вставить("ОптоваяТорговля", 			 НСтр("ru = 'Оптовая торговля'"));
	ДоступныеКатегории.Вставить("Розница", 					 НСтр("ru = 'Розница'"));
	ДоступныеКатегории.Вставить("ИнтернетТорговля", 		 НСтр("ru = 'Интернет торговля'"));
	ДоступныеКатегории.Вставить("УслугиСервисы", 			 НСтр("ru = 'Услуги, сервисы'"));
	ДоступныеКатегории.Вставить("НачинающийПредприниматель", НСтр("ru = 'Начинающий предприниматель'"));
	ДоступныеКатегории.Вставить("МалыйБизнес", 				 НСтр("ru = 'Малый бизнес'"));
	ДоступныеКатегории.Вставить("СреднийБизнес", 			 НСтр("ru = 'Средний бизнес'"));
	ДоступныеКатегории.Вставить("Производство", 			 НСтр("ru = 'Производство'"));
	// BSLLS:InvalidCharacterInFile-on

	Элементы.СписокТеговКатегория.СписокВыбора.Очистить();
	ПолныйФильтр = "";

	Для Каждого ТекКатегория Из ДоступныеКатегории Цикл
		Элементы.СписокТеговКатегория.СписокВыбора.Добавить(ТекКатегория.Ключ, ТекКатегория.Значение);
		ПолныйФильтр = ПолныйФильтр + ?(ЗначениеЗаполнено(ПолныйФильтр), ",", "") + ТекКатегория.Ключ;
	КонецЦикла;
	
	НастройкиКатегорийЭлементов = Новый Структура;
	
	// Мобильный клиент
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "НачинающийПредприниматель", "");
	НастройкиКатегорийЭлементов.Вставить("Группа_УНФ_МК", ТекФильтр);
	
	// УНФ 1.2
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "СреднийБизнес", "");
	НастройкиКатегорийЭлементов.Вставить("Группа_УНФ12", ТекФильтр);
	
	// УНФ 2.0
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "СреднийБизнес", "");
	НастройкиКатегорийЭлементов.Вставить("Группа_УНФ20", ТекФильтр);

	// Заказы
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "Производство", "");
	НастройкиКатегорийЭлементов.Вставить("Группа_ЗАК", ТекФильтр);

	// Мобильная касса
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "УслугиСервисы", 	"");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "СреднийБизнес", 	"");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "Производство", 	"");
	НастройкиКатегорийЭлементов.Вставить("Группа_МКс", ТекФильтр);
	
	// Кладовщик
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "УслугиСервисы", 	"");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "Производство", 	"");
	НастройкиКатегорийЭлементов.Вставить("Группа_КЛД", ТекФильтр);

	// Проверка ценников
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ОптоваяТорговля",  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "ИнтернетТорговля", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "УслугиСервисы", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "СреднийБизнес", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "Производство", 	  "");
	НастройкиКатегорийЭлементов.Вставить("Группа_ПЦ", ТекФильтр);
	
	// Кабинет клиента
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "Производство",  "");
	НастройкиКатегорийЭлементов.Вставить("Группа_КК", ТекФильтр);
	
КонецПроцедуры

// Устанавливает набор сценариев для каждого приложения
//
&НаСервере
Процедура УстановитьНастройкиСценариевДляЭлементов()
	
	// Неразрывные пробелы в представлениях нужны для корректной верстки
	// BSLLS:InvalidCharacterInFile-off
	ДоступныеСценарии = Новый Структура;
	
	Если ЭтоМобильныйКлиент Тогда
		ПолноценныйУчетПредставление 		= НСтр("ru = 'Все функции «большого» УНФ'");
		РозничнаяТочкаПредставление 		= НСтр("ru = 'Для розничной точки'");
		РМ_ТоргПредставителяПредставление 	= НСтр("ru = 'РМ торгового представителя'");
	Иначе
		ПолноценныйУчетПредставление 		= НСтр("ru = 'Доступ ко всем функциям «большого» УНФ'");
		РозничнаяТочкаПредставление 		= НСтр("ru = 'Автоматизация розничной точки'");
		РМ_ТоргПредставителяПредставление 	= НСтр("ru = 'Рабочее место торгового представителя'");
	КонецЕсли;
	
	ДоступныеСценарии.Вставить("ПолноценныйУчет",		ПолноценныйУчетПредставление);
	ДоступныеСценарии.Вставить("УчетВМикроБизнесе",		НСтр("ru = 'Учет в микро-бизнесе'"));
	ДоступныеСценарии.Вставить("РозничнаяТочка", 		РозничнаяТочкаПредставление);
	ДоступныеСценарии.Вставить("НовыйКаналПродаж",		НСтр("ru = 'Новый канал продаж'"));
	ДоступныеСценарии.Вставить("РМ_Кладовщика", 		НСтр("ru = 'Рабочее место кладовщика'"));
	ДоступныеСценарии.Вставить("РМ_Кассира", 			НСтр("ru = 'Рабочее место кассира'"));
	ДоступныеСценарии.Вставить("РМ_Курьера", 			НСтр("ru = 'Рабочее место курьера'"));
	ДоступныеСценарии.Вставить("РМ_ТоргПредставителя", 	РМ_ТоргПредставителяПредставление);
	// BSLLS:InvalidCharacterInFile-on
	
	Элементы.СписокТеговСценарий.СписокВыбора.Очистить();
	ПолныйФильтр = "";

	Для Каждого ТекСценарий Из ДоступныеСценарии Цикл
		Элементы.СписокТеговСценарий.СписокВыбора.Добавить(ТекСценарий.Ключ, ТекСценарий.Значение);
		ПолныйФильтр = ПолныйФильтр + ?(ЗначениеЗаполнено(ПолныйФильтр), ",", "") + ТекСценарий.Ключ;
	КонецЦикла;
	
	НастройкиСценариевЭлементов = Новый Структура;
	
	// Мобильный клиент
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "УчетВМикроБизнесе", "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  "");
	НастройкиСценариевЭлементов.Вставить("Группа_УНФ_МК", ТекФильтр);
	
	// УНФ 1.2
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет",  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж", "");
	НастройкиСценариевЭлементов.Вставить("Группа_УНФ12", ТекФильтр);
	
	// УНФ 2.0
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кассира", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кладовщика",     	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_ТоргПредставителя", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Курьера", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  	  "");
	НастройкиСценариевЭлементов.Вставить("Группа_УНФ20", ТекФильтр);

	// Заказы
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет",   "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "УчетВМикроБизнесе", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РозничнаяТочка",    "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кладовщика",     "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кассира", 	   "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  "");
	НастройкиСценариевЭлементов.Вставить("Группа_ЗАК", ТекФильтр);

	// Мобильная касса
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет",   "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "УчетВМикроБизнесе", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кладовщика",     "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  "");
	НастройкиСценариевЭлементов.Вставить("Группа_МКс", ТекФильтр);
	
	// Кладовщик
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "УчетВМикроБизнесе",    "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РозничнаяТочка", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кассира", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_ТоргПредставителя", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Курьера", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  	  "");
	НастройкиСценариевЭлементов.Вставить("Группа_КЛД", ТекФильтр);

	// Проверка ценников
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "УчетВМикроБизнесе", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кассира", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_ТоргПредставителя", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Курьера", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "НовыйКаналПродаж",  	  "");
	НастройкиСценариевЭлементов.Вставить("Группа_ПЦ", ТекФильтр);
	
	// Кабинет клиента
	ТекФильтр = СтрЗаменить(ПолныйФильтр, "ПолноценныйУчет", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр, 	  "УчетВМикроБизнесе", 	  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РозничнаяТочка",		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кладовщика", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Кассира", 		  "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_ТоргПредставителя", "");
	ТекФильтр = СтрЗаменить(ТекФильтр,	  "РМ_Курьера", 		  "");
	НастройкиСценариевЭлементов.Вставить("Группа_КК", ТекФильтр);
	
КонецПроцедуры

// Устанавливает значение веса приложений по умолчанию
//
&НаСервере
Процедура УстановитьНастройкиВесаПриложений_ПоУмолчанию()
	ВесЭлементовПоУмолчанию = Новый Структура;
	ВесЭлементовПоУмолчанию.Вставить("Группа_УНФ_МК", 	8);
	ВесЭлементовПоУмолчанию.Вставить("Группа_УНФ12", 	7);
	ВесЭлементовПоУмолчанию.Вставить("Группа_УНФ20", 	6);
	ВесЭлементовПоУмолчанию.Вставить("Группа_ЗАК", 		5);
	ВесЭлементовПоУмолчанию.Вставить("Группа_МКс", 		4);
	ВесЭлементовПоУмолчанию.Вставить("Группа_КЛД",		3);
	ВесЭлементовПоУмолчанию.Вставить("Группа_ПЦ", 		2);
	ВесЭлементовПоУмолчанию.Вставить("Группа_КК", 		1);
КонецПроцедуры

// Устанавливает значение веса приложений в зависимости от категории
//
&НаСервере
Процедура УстановитьНастройкиВесаПриложений_ПоКатегории()
	ВесЭлементовПоКатегории = Новый Структура;
	
	// Оптовая торговля
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	7);
	НастройкиВеса.Вставить("Группа_УНФ20", 	6);
	НастройкиВеса.Вставить("Группа_ЗАК", 	5);
	НастройкиВеса.Вставить("Группа_МКс", 	2);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	4);
	ВесЭлементовПоКатегории.Вставить("ОптоваяТорговля", НастройкиВеса);
	
	// Розница
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 6);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	5);
	НастройкиВеса.Вставить("Группа_ЗАК", 	3);
	НастройкиВеса.Вставить("Группа_МКс", 	8);
	НастройкиВеса.Вставить("Группа_КЛД",	2);
	НастройкиВеса.Вставить("Группа_ПЦ", 	7);
	НастройкиВеса.Вставить("Группа_КК", 	4);
	ВесЭлементовПоКатегории.Вставить("Розница", НастройкиВеса);
	
	// Интернет торговля
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	6);
	НастройкиВеса.Вставить("Группа_ЗАК", 	4);
	НастройкиВеса.Вставить("Группа_МКс", 	5);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	2);
	НастройкиВеса.Вставить("Группа_КК", 	7);
	ВесЭлементовПоКатегории.Вставить("ИнтернетТорговля", НастройкиВеса);
	
	// Услуги, сервисы
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	7);
	НастройкиВеса.Вставить("Группа_ЗАК", 	5);
	НастройкиВеса.Вставить("Группа_МКс", 	4);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	2);
	НастройкиВеса.Вставить("Группа_КК", 	6);
	ВесЭлементовПоКатегории.Вставить("УслугиСервисы", НастройкиВеса);
	
	// НачинающийПредприниматель
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 7);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	8);
	НастройкиВеса.Вставить("Группа_ЗАК", 	4);
	НастройкиВеса.Вставить("Группа_МКс", 	5);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	2);
	НастройкиВеса.Вставить("Группа_КК", 	6);
	ВесЭлементовПоКатегории.Вставить("НачинающийПредприниматель", НастройкиВеса);
	
	// Малый бизнес
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	7);
	НастройкиВеса.Вставить("Группа_ЗАК", 	4);
	НастройкиВеса.Вставить("Группа_МКс", 	5);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	2);
	НастройкиВеса.Вставить("Группа_КК", 	6);
	ВесЭлементовПоКатегории.Вставить("МалыйБизнес", НастройкиВеса);
	
	// Средний бизнес
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	7);
	НастройкиВеса.Вставить("Группа_ЗАК", 	4);
	НастройкиВеса.Вставить("Группа_МКс", 	5);
	НастройкиВеса.Вставить("Группа_КЛД",	3);
	НастройкиВеса.Вставить("Группа_ПЦ", 	2);
	НастройкиВеса.Вставить("Группа_КК", 	6);
	ВесЭлементовПоКатегории.Вставить("СреднийБизнес", НастройкиВеса);
	
	// Производство
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	1);
	НастройкиВеса.Вставить("Группа_УНФ20", 	7);
	НастройкиВеса.Вставить("Группа_ЗАК", 	6);
	НастройкиВеса.Вставить("Группа_МКс", 	5);
	НастройкиВеса.Вставить("Группа_КЛД",	4);
	НастройкиВеса.Вставить("Группа_ПЦ", 	3);
	НастройкиВеса.Вставить("Группа_КК", 	2);
	ВесЭлементовПоКатегории.Вставить("Производство", НастройкиВеса);
КонецПроцедуры

// Устанавливает значение веса приложений в зависимости от сценария автоматизации
//
&НаСервере
Процедура УстановитьНастройкиВесаПриложений_ПоСценарию()
	ВесЭлементовПоСценарию = Новый Структура;
	
	// Полноценный учет
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 8);
	НастройкиВеса.Вставить("Группа_УНФ12", 	0);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	0);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("ПолноценныйУчет", НастройкиВеса);
	
	// Учет в микро бизнесе
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 0);
	НастройкиВеса.Вставить("Группа_УНФ12", 	7);
	НастройкиВеса.Вставить("Группа_УНФ20", 	8);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	0);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("УчетВМикроБизнесе", НастройкиВеса);
	
	// Розничная точка
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 6);
	НастройкиВеса.Вставить("Группа_УНФ12", 	4);
	НастройкиВеса.Вставить("Группа_УНФ20", 	5);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	8);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	7);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("РозничнаяТочка", НастройкиВеса);
	
	// Новый канал продаж
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 0);
	НастройкиВеса.Вставить("Группа_УНФ12", 	0);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	0);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	8);
	ВесЭлементовПоСценарию.Вставить("НовыйКаналПродаж", НастройкиВеса);
	
	// РМ кладовщика
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 6);
	НастройкиВеса.Вставить("Группа_УНФ12", 	5);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	0);
	НастройкиВеса.Вставить("Группа_КЛД",	8);
	НастройкиВеса.Вставить("Группа_ПЦ", 	7);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("РМ_Кладовщика", НастройкиВеса);
	
	// РМ_Кассира
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 0);
	НастройкиВеса.Вставить("Группа_УНФ12", 	0);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	0);
	НастройкиВеса.Вставить("Группа_МКс", 	8);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("РМ_Кассира", НастройкиВеса);
	
	// РМ торгового представителя
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 6);
	НастройкиВеса.Вставить("Группа_УНФ12", 	5);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	8);
	НастройкиВеса.Вставить("Группа_МКс", 	7);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("РМ_ТоргПредставителя", НастройкиВеса);
	
	// РМ курьера
	НастройкиВеса = Новый Структура;
	НастройкиВеса.Вставить("Группа_УНФ_МК", 6);
	НастройкиВеса.Вставить("Группа_УНФ12", 	5);
	НастройкиВеса.Вставить("Группа_УНФ20", 	0);
	НастройкиВеса.Вставить("Группа_ЗАК", 	8);
	НастройкиВеса.Вставить("Группа_МКс", 	7);
	НастройкиВеса.Вставить("Группа_КЛД",	0);
	НастройкиВеса.Вставить("Группа_ПЦ", 	0);
	НастройкиВеса.Вставить("Группа_КК", 	0);
	ВесЭлементовПоСценарию.Вставить("РМ_Курьера", НастройкиВеса);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаРесурс(КлючРесурса)
	
	ТекстОшибки = "";
	
	Если СсылкиНаМаркетплейсы.Свойство(КлючРесурса) Тогда
		
		СсылкаНаРесурс = СсылкиНаМаркетплейсы[КлючРесурса];
		Если ЗначениеЗаполнено(СсылкаНаРесурс) Тогда
			
			Попытка
				ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаРесурс, Новый ОписаниеОповещения());
			Исключение
				ТекстОшибки = ТекстОшибки + СтрШаблон(НСтр("ru = 'Ошибка при открытии ссылки: %1'"), ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Ошибка при открытии ссылки: не назначена ссылка.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	// Позволяет скрыть приложения вне зависимости от фильтра
	ПредопределеннаяВидимостьПриложений = Новый Структура;
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_УНФ_МК", 	Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_УНФ12", 	Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_УНФ20", 	Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_ЗАК", 		Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_МКс", 		Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_КЛД",		Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_ПЦ", 		Истина);
	ПредопределеннаяВидимостьПриложений.Вставить("Группа_КК", 		Истина);
	
	ОтображаемыеКатегории = ВыбранныеТеги("ВыбранныеТегиКатегория");
	ОтображаемыеСценарии  = ВыбранныеТеги("ВыбранныеТегиСценарий");
	
	// В него будем сохранять отображаемые приложения,
	// чтобы потом правильно сортировать их.
	ОтображаемыеЭлементы = Новый ТаблицаЗначений;
	ОтображаемыеЭлементы.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Строка", ,
														 Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ОтображаемыеЭлементы.Колонки.Добавить("Вес", 		 Новый ОписаниеТипов("Число",
														 Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой)));
	
	Для Каждого ТекЭлемент Из НастройкиКатегорийЭлементов Цикл
		
		ПредопределеннаяВидимость	= Истина;
		Если ПредопределеннаяВидимостьПриложений.Свойство(ТекЭлемент.Ключ) Тогда
			ПредопределеннаяВидимость = ПредопределеннаяВидимостьПриложений[ТекЭлемент.Ключ];
		КонецЕсли;
		
		ВидимостьПоКатегории = ОпределитьВидимостьПоКатегории(ТекЭлемент.Значение, ОтображаемыеКатегории);
		ВидимостьПоСценарию  = ОпределитьВидимостьПоСценарию(ТекЭлемент.Ключ, ОтображаемыеСценарии);
		
		ОтображатьЭлемент = (ПредопределеннаяВидимость И ВидимостьПоКатегории И ВидимостьПоСценарию);
		
		Элементы[ТекЭлемент.Ключ].Видимость = ОтображатьЭлемент;
		
		Разделитель = Элементы.Найти("Разделитель_" + ТекЭлемент.Ключ);
		Если Не Разделитель = Неопределено Тогда
			Разделитель.Видимость = ОтображатьЭлемент;
		КонецЕсли;
		
		// Если элемент отображается, для него требуется рассчитать порядок сортировки
		Если ОтображатьЭлемент Тогда
			НовСтрока = ОтображаемыеЭлементы.Добавить();
			НовСтрока.ИмяЭлемента = ТекЭлемент.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображаемыеЭлементы.Количество() > 0 Тогда
		СортироватьСписокПриложений(ОтображаемыеЭлементы, ОтображаемыеКатегории, ОтображаемыеСценарии);
	КонецЕсли;
	
КонецПроцедуры

// Получает массив выбранных категорий или сценариев
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита формы, в котором хранится список тегов: ВыбранныеТегиКатегория или ВыбранныеТегиСценарий
// 
// Возвращаемое значение:
//  Массив - выбранные категории/сценарии
//
&НаСервере
Функция ВыбранныеТеги(ИмяРеквизита)
	Результат = Новый Массив;
	
	Для Каждого ТекСтрока Из ЭтотОбъект[ИмяРеквизита] Цикл
		Результат.Добавить(ТекСтрока.Тег);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает признак необходимости отобразить/скрыть элемент по категории
//
// Параметры:
//  КатегорииЭлемента		 - Строка - содержит список категорий элемента через запятую
//  ОтображаемыеКатегории	 - Массив - состоит из категорий, которые нужно отобразить
// 
// Возвращаемое значение:
// Булево - видимость элемента
//
&НаСервере
Функция ОпределитьВидимостьПоКатегории(КатегорииЭлемента, ОтображаемыеКатегории)
	ВидимостьПоКатегории = Ложь;
	
	Если ОтображаемыеКатегории.Количество() = 0 Тогда
		
		// Фильтр не установлен - отобразим все
		ВидимостьПоКатегории = Истина;
		
	Иначе
		
		Для Каждого ТекКатегория Из ОтображаемыеКатегории Цикл
			Если СтрНайти(КатегорииЭлемента, ТекКатегория) Тогда
				ВидимостьПоКатегории = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВидимостьПоКатегории;
КонецФункции

// Возвращает признак необходимости отобразить/скрыть элемент по сценарию автоматизации
//
// Параметры:
//  ИмяЭлемента		 		 - Строка - содержит имя текущего элемента, с которым работаем
//  ОтображаемыеСценарии	 - Массив - состоит из сценариев, которые нужно отобразить
// 
// Возвращаемое значение:
// Булево - видимость элемента
//
&НаСервере
Функция ОпределитьВидимостьПоСценарию(ИмяЭлемента, ОтображаемыеСценарии)
	ВидимостьПоСценарию = Ложь;
	
	// Для текущего элемента (группы) получим настройки сценариев автоматизации
	НастройкаСценария = Неопределено;
	Если НастройкиСценариевЭлементов.Свойство(ИмяЭлемента, НастройкаСценария)
		И НастройкаСценария <> Неопределено Тогда
		
		Если ОтображаемыеСценарии.Количество() = 0 Тогда
			
			// Фильтр не установлен - отобразим все
			ВидимостьПоСценарию = Истина;
			
		Иначе
			
			Для Каждого ТекСценарий Из ОтображаемыеСценарии Цикл
				Если СтрНайти(НастройкаСценария, ТекСценарий) Тогда
					ВидимостьПоСценарию = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидимостьПоСценарию;
КонецФункции

// Рассчитывает вес каждого приложения и сортирует по релевантности
//
// Параметры:
//  ОтображаемыеЭлементы - ТаблицаЗначений 
//		* ИмяЭлемента 	- Строка - содержит имена элементов (приложений), которые отображаются на форме
//		* Вес 			- Число  - содержит вес элементов (приложений)
//
//  ОтображаемыеКатегории - Массив - содержит имена отображаемых категорий
//  ОтображаемыеСценарии  - Массив - содержит имена отображаемых сценариев
//
&НаСервере
Процедура СортироватьСписокПриложений(ОтображаемыеЭлементы, ОтображаемыеКатегории, ОтображаемыеСценарии)
	
	ЗаполнитьВесОтображаемыхЭлементов(ОтображаемыеЭлементы, ОтображаемыеКатегории, ОтображаемыеСценарии);
	
	ОтображаемыеЭлементы.Сортировать("Вес Убыв");
	
	Для Каждого ТекЭлемент Из ОтображаемыеЭлементы Цикл
		ИмяЭлемента    = ТекЭлемент.ИмяЭлемента;
		ИмяРазделителя = "Разделитель_" + ТекЭлемент.ИмяЭлемента;
		
		Элементы.Переместить(Элементы[ИмяЭлемента],    Элементы[ИмяЭлемента].Родитель);
		Элементы.Переместить(Элементы[ИмяРазделителя], Элементы[ИмяРазделителя].Родитель);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесОтображаемыхЭлементов(ОтображаемыеЭлементы, ОтображаемыеКатегории, ОтображаемыеСценарии)
	
	ПрименитьНастройкиПоУмолчанию = (ОтображаемыеКатегории.Количество() = 0 И ОтображаемыеСценарии.Количество() = 0);
	
	Для Каждого ТекЭлемент Из ОтображаемыеЭлементы Цикл
		Если ПрименитьНастройкиПоУмолчанию Тогда
			ЗаполнитьВесЭлементаПоУмолчанию(ТекЭлемент);
		Иначе
			ЗаполнитьВесЭлементаПоКатегории(ТекЭлемент, ОтображаемыеКатегории);
			ЗаполнитьВесЭлементаПоСценарию(ТекЭлемент, ОтображаемыеСценарии)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесЭлементаПоУмолчанию(ТекЭлемент)
	Если ВесЭлементовПоУмолчанию.Свойство(ТекЭлемент.ИмяЭлемента) Тогда
		ТекЭлемент.Вес = ТекЭлемент.Вес + ВесЭлементовПоУмолчанию[ТекЭлемент.ИмяЭлемента];
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесЭлементаПоКатегории(ТекЭлемент, ОтображаемыеКатегории)
	Для Каждого ТекКатегория Из ОтображаемыеКатегории Цикл
		
		Если ВесЭлементовПоКатегории.Свойство(ТекКатегория) Тогда
			НастройкиВеса = ВесЭлементовПоКатегории[ТекКатегория];
			Если НастройкиВеса.Свойство(ТекЭлемент.ИмяЭлемента) Тогда
				ТекЭлемент.Вес = ТекЭлемент.Вес + НастройкиВеса[ТекЭлемент.ИмяЭлемента];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВесЭлементаПоСценарию(ТекЭлемент, ОтображаемыеСценарии)
	Для Каждого ТекСценарий Из ОтображаемыеСценарии Цикл
		
		Если ВесЭлементовПоСценарию.Свойство(ТекСценарий) Тогда
			НастройкиВеса = ВесЭлементовПоСценарию[ТекСценарий];
			Если НастройкиВеса.Свойство(ТекЭлемент.ИмяЭлемента) Тогда
				ТекЭлемент.Вес = ТекЭлемент.Вес + НастройкиВеса[ТекЭлемент.ИмяЭлемента];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
	
&НаСервере
Процедура ПрикрепитьТегНаСервере(ИмяФильтра, Тег, ТегПредставление = Неопределено) 
	
	Если ЭтотОбъект["ВыбранныеТеги" + ИмяФильтра].НайтиСтроки(Новый Структура("Тег", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Из команд представление не передается
	Если ТегПредставление = Неопределено Тогда
		Если ИмяФильтра = "Категория" Тогда
			ТегПредставление = ДоступныеКатегории[Тег];
		ИначеЕсли ИмяФильтра = "Сценарий" Тогда
			ТегПредставление = ДоступныеСценарии[Тег];
		Иначе
			ВызватьИсключение "Неверное значение фильтра";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТегов = ЭтотОбъект["ВыбранныеТеги" + ИмяФильтра].Добавить();
	НавигационнаяСсылкаФС = ИмяФильтра + "_Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Тег = Тег;
	СтрокаТегов.ТегПредставление = ФорматированнаяСтрокаПредставленияТега(ТегПредставление, НавигационнаяСсылкаФС);
	
	Если ЭтоМобильныйКлиент Тогда
		ОбновитьЭлементыТегов_МобильныйКлиент();
	Иначе
		ОбновитьЭлементыТегов(ИмяФильтра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТегов_МобильныйКлиент()
	
	МассивТегов = Новый Массив;
	
	МассивТегов_Категория = ТекущийМассивТегов("ВыбранныеТегиКатегория");
	Для Каждого ТекЭлемент Из МассивТегов_Категория Цикл
		МассивТегов.Добавить(ТекЭлемент);
	КонецЦикла;
	
	МассивТегов_Сценарий = ТекущийМассивТегов("ВыбранныеТегиСценарий");
	Для Каждого ТекЭлемент Из МассивТегов_Сценарий Цикл
		МассивТегов.Добавить(ТекЭлемент);
	КонецЦикла;
	
	Индекс = МассивТегов.Количество() - 1;
	Пока Индекс > 0 Цикл
		МассивТегов.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы["ОблакоТегов_МК"].Заголовок = ?(МассивТегов.Количество() = 0,
												НСтр("ru = '(все)'"),
												Новый ФорматированнаяСтрока(МассивТегов));
	
КонецПроцедуры

&НаСервере
Функция ТекущийМассивТегов(ГруппаТегов)
	Возврат ЭтотОбъект[ГруппаТегов].Выгрузить(, "ТегПредставление").ВыгрузитьКолонку("ТегПредставление");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыТегов(ИмяФильтра)
	
	ФС = ТекущийМассивТегов("ВыбранныеТеги" + ИмяФильтра);
	
	Индекс = ФС.Количество() - 1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы["ОблакоТегов" + ИмяФильтра].Заголовок = Новый ФорматированнаяСтрока(ФС);
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, НавигационнаяСсылкаФС)
	
	Цвет  = ЦветаСтиля.ЦветТекстаКнопки;
	Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
	Разделитель = Символы.НПП;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='<span style=""font:ВажнаяНадписьШрифт"">%1</span>%2<a href = %3><img src=""Очистить""></a>'"),
				НаименованиеТега,
				Разделитель,
				НавигационнаяСсылкаФС);
КонецФункции

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиНаСервере(ИмяФильтра,
														   НавигационнаяСсылкаФорматированнойСтроки,
														   СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Разделитель = "_Тег_";
	
	ПозицияРазделителя = СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, Разделитель);
	
	Если ИмяФильтра = Неопределено Тогда
		ИмяФильтра = Лев(НавигационнаяСсылкаФорматированнойСтроки, ПозицияРазделителя - 1);
	КонецЕсли;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, ПозицияРазделителя + СтрДлина(Разделитель));
	СтрокаТегов = ЭтотОбъект["ВыбранныеТеги" + ИмяФильтра].НайтиПоИдентификатору(ТегИД);
	
	ЭтотОбъект["ВыбранныеТеги" + ИмяФильтра].Удалить(СтрокаТегов);
	
	Если ЭтоМобильныйКлиент Тогда
		ОбновитьЭлементыТегов_МобильныйКлиент();
	Иначе
		ОбновитьЭлементыТегов(ИмяФильтра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВФильтрКатегория_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если Не ПустаяСтрока(ВыбранныйЭлемент.Значение) Тогда
		ПрикрепитьТегНаСервере("Категория", ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьВФильтрСценарий_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если Не ПустаяСтрока(ВыбранныйЭлемент.Значение) Тогда
		ПрикрепитьТегНаСервере("Сценарий", ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюКЛДНажатие(Элемент)
	
	НастроитьСинхронизациюКЛДСервер();
	ОткрытьФорму("ПланОбмена.ОбменСМобильнымиПриложениями.Форма.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСинхронизациюКЛДСервер()
	
	ИспользоватьОбменСМобильнымиПриложениями = Константы.ИспользоватьОбменСМобильнымиПриложениями.Получить();
	
	Если НЕ ИспользоватьОбменСМобильнымиПриложениями Тогда
		Константы.ИспользоватьОбменСМобильнымиПриложениями.Установить(Истина);
	КонецЕсли;
	Справочники.МобильныеПриложения.ОбновитьПоставляемыеПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюПЦНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.МастерПодключенияПроверкаЦенников");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияКЛДНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/db/metod81#content:7761:hdoc");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПЦНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/db/metod81#content:7762:hdoc");
	
КонецПроцедуры
 
&НаКлиенте
Процедура НастроитьСинхронизациюЗАКНажатие(Элемент)
	
	НастроитьСинхронизациюЗАКСервер();
	ОткрытьФорму("ПланОбмена.ОбменСМобильнымиПриложениями.Форма.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСинхронизациюЗАКСервер()
	
	ИспользоватьОбменСМобильнымиПриложениями = Константы.ИспользоватьОбменСМобильнымиПриложениями.Получить();
	
	Если НЕ ИспользоватьОбменСМобильнымиПриложениями Тогда
		Константы.ИспользоватьОбменСМобильнымиПриложениями.Установить(Истина);
	КонецЕсли;
	Справочники.МобильныеПриложения.ОбновитьПоставляемыеПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияЗАКНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/db/metod81#content:7818:hdoc");
	
КонецПроцедуры

#КонецОбласти