
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняемаяКоманда;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПараметрыФормы();
	АдресПустойКартинки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПросмотрНедоступен, УникальныйИдентификатор);
	Параметры.Свойство("Ссылка", ПоОбъекту);
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		// Контекстное открытие
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПоОбъекту)) И ТипЗнч(ПоОбъекту) <> Тип("Структура") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ПоОбъекту) = Тип("Структура") Тогда
			ТекущийРазделСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПоОбъекту.Контекст));
		Иначе
			ТекущийРазделСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПоОбъекту));
		КонецЕсли;
	Иначе
		Если НЕ Параметры.Свойство("ПутьКПодсистеме") 
			ИЛИ НЕ ЗначениеЗаполнено(Параметры.ПутьКПодсистеме) 
			ИЛИ ТипЗнч(Параметры.ПутьКПодсистеме) <> Тип("Строка") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	ПараметрыКлиента = ВариантыОтчетов.ПараметрыКлиента();
	КэшЗначений.Вставить("ВыполнятьЗамеры", ПараметрыКлиента.ВыполнятьЗамеры);
	Если ПараметрыКлиента.ВыполнятьЗамеры Тогда
		КэшЗначений.Вставить("ПрефиксЗамеров", ПараметрыКлиента.ПрефиксЗамеров);
	КонецЕсли;
	Если Параметры.Свойство("ПутьКПодсистеме") Тогда
		КэшЗначений.Вставить("ПутьКПодсистеме", Параметры.ПутьКПодсистеме);
	Иначе
		КэшЗначений.Вставить("ПутьКПодсистеме", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		// Отчеты по объекту
		Раздел = РазделВсеОтчеты();
		Элементы.Раздел.Видимость = Ложь;
	ИначеЕсли ПустаяСтрока(КэшЗначений.ПутьКПодсистеме) Тогда
		// Без отбора открываются избранные отчеты
		// Полный список отчетов недоступен
		Раздел = РазделИзбранные();
		ОбновитьРазделИзбранное();
		Элементы.Раздел.СписокВыбора.Удалить(Элементы.Раздел.СписокВыбора.НайтиПоЗначению(РазделВсеОтчеты())); 
	Иначе
		Раздел = РазделВсеОтчеты();
	КонецЕсли;
	Если КэшЗначений.ЕстьВнешниеОтчеты Тогда
		Элемент = Элементы.Раздел.СписокВыбора.НайтиПоЗначению("Внешние");
		Если Элемент = Неопределено Тогда
			Элементы.Раздел.СписокВыбора.Добавить("Внешние", НСтр("ru = 'Внешние'"));
		КонецЕсли; 
	Иначе
		Элемент = Элементы.Раздел.СписокВыбора.НайтиПоЗначению("Внешние");
		Если Элемент <> Неопределено Тогда
			Элементы.Раздел.СписокВыбора.Удалить(Элемент);
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОпределитьПоведениеВМобильномКлиенте();
	Иначе
		ЗагрузитьНастройки();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
	// Заполнение панели
	ЗаполнитьПодсистемы(Параметры);
	
	СлужебныеОтчеты.Очистить();
	СлужебныеОтчеты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СлужебныйОтчетДобавлениеВПанельОтчетов));
	РазвернутьОтчетыДоВариантов(СлужебныеОтчеты);
	
	Если Не ПустаяСтрока(Параметры.Теги) Тогда
		ТегиПоУмолчанию = СтрРазделить(Параметры.Теги, ",", Ложь);
		Для каждого Тег Из ТегиПоУмолчанию Цикл
			Стр = НаложенныеФильтры.Добавить();
			Стр.Значение = Тег;
			Стр.Заголовок = Тег;
			Стр.Пользовательский = Истина;
		КонецЦикла;
		ОбновитьОтображениеОтметокФильтров();
	КонецЕсли;
	
	ПараметрыЭкрана = ПолучитьИнформациюЭкрановКлиента();
	Если ЗначениеЗаполнено(ПараметрыЭкрана) Тогда
		ШиринаЭкрана = ПараметрыЭкрана[0].Ширина;
		ВысотаЭкрана = ПараметрыЭкрана[0].Высота;
	КонецЕсли;
	ДлительнаяОперация = ЗапуститьФоновоеЗаданиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	ОбновитьЗаголовок();
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
		ИзменитьДоступностьЭлементовПриФормировании(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыОтчетов")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов")
		Тогда
		ОбновитьОтображениеВарианта(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ОбновитьОтображениеВарианта(ВыбранноеЗначение.Вариант);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = НайтиТегиОтчеты(Текст, ЗначениеЗаполнено(ПоОбъекту));
	СтандартнаяОбработка = ДанныеВыбора.Количество() = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаПоиска = "";
		Если СлужебныеОтчеты.НайтиПоЗначению(ВыбранноеЗначение) <> Неопределено Тогда
			ОткрытьСлужебныйОтчет(ВыбранноеЗначение);
		Иначе
			ОткрытьОтчет(ВыбранноеЗначение);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда 
		СтандартнаяОбработка = Ложь;
		СтрокаПоиска = "";
		ОткрытьДополнительныйОтчет(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли; 
	Стр = НаложенныеФильтры.Добавить();
	Стр.Значение = СтрокаПоиска;
	Стр.Заголовок = СтрокаПоиска;
	Стр.Пользовательский = Истина;
	СтрокаПоиска = "";
	Если (Раздел = РазделИзбранные() И Избранное.Количество() = 0)
		ИЛИ (Раздел  = РазделПоследние() И История.Количество() = 0) Тогда
		Раздел = РазделВсеОтчеты();
	КонецЕсли;
	Если Раздел = РазделВнешние() Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Внешний", Истина);
		Если СписокОтчетов.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
			Раздел = РазделВсеОтчеты();
		КонецЕсли;
	КонецЕсли;
	ОбновитьОтображениеОтметокФильтров();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	ОбновитьСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделПриИзменении(Элемент)
	
	ОбновитьСписок(Истина);
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПодсказкиПриИзменении(Элемент)
	
	ПоказыватьПодсказкиПриИзмененииСервер();
	ОбновитьСписок(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьПодсказкиПриИзмененииСервер()

	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("ФормаСпискаОтчетов", "ПоказыватьПодсказки", ПоказыватьПодсказки);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", НавигационнаяСсылкаФорматированнойСтроки);
	Строки = НаложенныеФильтры.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого Стр Из Строки Цикл
		НаложенныеФильтры.Удалить(Стр);
	КонецЦикла; 
	ОбновитьОтображениеОтметокФильтров();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	ОбновитьСписок(Истина);
	
КонецПроцедуры

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_ПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтрНайти(Элемент.Имя, "Образец_") > 0 Тогда
		УИД = СтрЗаменить(Элемент.Имя, "Образец_", "");
	ИначеЕсли СтрНайти(Элемент.Имя, "Наименование_") > 0 Тогда
		УИД = СтрЗаменить(Элемент.Имя, "Наименование_", "");
	Иначе
		Возврат;
	КонецЕсли;
	Если СтрНайти(УИД, "_") > 0 Тогда
		// Отсечение суффиксов подсистем
		УИД = Лев(УИД, СтрНайти(УИД, "_") - 1);	
	КонецЕсли;
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(УИД);
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	Если СлужебныеОтчеты.НайтиПоЗначению(ДанныеОтчета.Вариант) <> Неопределено Тогда
		ОткрытьСлужебныйОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		ОткрытьОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
		ОткрытьДополнительныйОтчет(ДанныеОтчета.Вариант);
	КонецЕсли; 
	
КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы
//
&НаКлиенте
Процедура Подключаемый_ВидимостьВариантаПриИзменении(Элемент)
	
	Флажок = Элемент;
	
	УИД = СтрЗаменить(Элемент.Имя, "Видимость_", "");
	ИмяЭлемента = ИмяРеквизита(УИД, "Наименование_");
	Вариант = НайтиВариантПоИмениЭлемента(ИмяЭлемента);
	Если Вариант = Неопределено Или Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Показать = Вариант.Видимость;
	
	ПоказатьСкрытьВариант(Вариант, Элемент, Показать);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРежимСписок(Команда)
	
	УстановитьРежимСписокНаСервере();
	УправлениеФормой(ЭтотОбъект);
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	ОбновитьСписок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимКартинки(Команда)
	
	УстановитьРежимКартинкиНаСервере();
	УправлениеФормой(ЭтотОбъект);
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	ОбновитьСписок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Избранное(Команда)
	
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(Команда.Имя, "Избранное_", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	Добавлен = Неопределено;
	ДобавитьУдалитьИзИзбранного(ДанныеОтчета.Вариант, Команда.Имя, Добавлен);
	Если Добавлен = Истина Тогда
		Состояние(НСтр("ru = 'Отчет добавлен в избранное'"),,, БиблиотекаКартинок.БольшаяЖелтаяЗвезда);
	ИначеЕсли Добавлен = Ложь Тогда
		Состояние(НСтр("ru = 'Отчет удален из избранного'"),,, БиблиотекаКартинок.БольшаяСераяЗвезда);
	КонецЕсли;
	ОбновитьИнтерфейс();
	Если Добавлен = Ложь И Раздел = РазделИзбранные() Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.1, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаОтчета(Команда)
	
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(Команда.Имя, "НастройкиОтчета_", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючОбъекта", ДанныеОтчета.Отчет);
	ПараметрыОткрытия.Вставить("Вариант", ДанныеОтчета.Вариант);
	ПараметрыОткрытия.Вставить("КлючТекущихНастроек", ДанныеОтчета.КлючВарианта);
	ПараметрыОткрытия.Вставить("РежимНастройки", Истина);
	Форма = ОткрытьФорму("ОбщаяФорма.СохранениеВариантаОтчетаУНФ", ПараметрыОткрытия, ЭтаФорма);
	Если Форма = Неопределено Тогда
		Состояние(НСтр("ru = 'Нет права редактирования настроек выбранного отчета'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьОтчет(Команда)
	
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(Команда.Имя, "УдалитьОтчет_", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вариант", ДанныеОтчета.Вариант);
	ПараметрыОткрытия.Вставить("РежимНастройки", Истина);
	ПараметрыОткрытия.Вставить("КлючОбъекта", ДанныеОтчета.Отчет);
	ПараметрыОткрытия.Вставить("КлючТекущихНастроек", ДанныеОтчета.КлючВарианта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеУдаленияОтчета", ЭтотОбъект, ПараметрыОткрытия);
	
	ПоказатьВопрос(
	ОписаниеОповещения,
	СтрШаблон(НСтр("ru = 'Удалить отчет ""%1""?'"), ДанныеОтчета.Наименование),
	РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеУдаленияОтчета(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтчетНаСервере(Параметры.Вариант);
	ОбновитьСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	РежимНастройки = Не РежимНастройки;
	УправлениеФормой(ЭтотОбъект);
	ОбновитьСписок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЕще(Команда)
	
	Если Не ЗначениеЗаполнено(КоличествоОтображаемыхОтчетов) Тогда
		Возврат;
	КонецЕсли;
	
	УИД = ПоследнийОтображенныйОтчет();
	Если ИспользуетсяРежимКартинки() И УИД <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяРеквизита(УИД, "Образец_")];
	КонецЕсли;
	КоличествоОтображаемыхОтчетов = 0;
	
	ОбновитьПараметрыЭкрана();
	ОбновитьЭлементыНаФорме(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОтчеты(Команда)
	
	ФормаПараметры = Новый Структура;
	ЭлементыСтрокиПоиска = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ЭлементыСтрокиПоиска.Добавить(СтрокаПоиска);	
	КонецЕсли;
	Для каждого СтрокаФильтр Из НаложенныеФильтры Цикл
		ЭлементыСтрокиПоиска.Добавить(СтрокаФильтр.Значение);
	КонецЦикла;
	ФормаПараметры.Вставить("СтрокаПоиска", СтрСоединить(ЭлементыСтрокиПоиска, " "));
	Если ЗначениеЗаполнено(ФормаПараметры.СтрокаПоиска) Тогда
		// Спозиционироваться на корне дерева.
		РазделСсылка = ПредопределенноеЗначение("Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка");
	Иначе
		РазделСсылка = ТекущийРазделСсылка;
	КонецЕсли;
	ФормаПараметры.Вставить("РазделСсылка", РазделСсылка);
	
	Если КэшЗначений.ВыполнятьЗамеры Тогда
		Замер = НачатьЗамер("СписокОтчетов.Открытие");
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаСписка", ФормаПараметры, , "ВариантыОтчетов.ВсеОтчеты");
	
	Если КэшЗначений.ВыполнятьЗамеры Тогда
		ЗакончитьЗамер(Замер);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Настроить", "Пометка", Форма.РежимНастройки);		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаСписок", "Видимость", Форма.Режим = РежимСписок());		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаКартинки", "Видимость", Форма.Режим = РежимКартинки());		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СсылкаВсеОтчеты", "Видимость", НЕ ЗначениеЗаполнено(Форма.ПоОбъекту) 
		И (Форма.Режим = РежимСписок() ИЛИ Форма.КоличествоОтображаемыхОтчетов = 0));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаНастройки", "Видимость", Форма.РежимНастройки И Форма.Режим = РежимСписок());		
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПоведениеВМобильномКлиенте()
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Режим", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ОписаниеМобильногоПриложения", "Видимость", Ложь); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СтрокаПоиска", "ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СтрокаПоиска", "КнопкаВыпадающегоСписка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаКоманднаяПанельПравая", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ОписаниеМобильногоПриложения", "Видимость", Ложь);
	Элементы.Переместить(Элементы.ПоказыватьПодсказки, Элементы.ВерхняяПанельМобильныйКлиент);
	
КонецПроцедуры

#Область ОтображениеСпискаОтчетов

&НаКлиенте
Процедура ОбновитьСписок(ПерезаполнитьТаблицу)
	
	Если ПерезаполнитьТаблицу Тогда
		ЗапуститьФоновоеЗадание();
	Иначе
		ОбновитьПараметрыЭкрана();
		ОбновитьЭлементыНаФорме(Истина);
	КонецЕсли;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыЭкрана()
	
	ПараметрыЭкрана = ПолучитьИнформациюЭкрановКлиента();
	Если ЗначениеЗаполнено(ПараметрыЭкрана) Тогда
		ШиринаЭкрана = ПараметрыЭкрана[0].Ширина;
		ВысотаЭкрана = ПараметрыЭкрана[0].Высота;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыНаФорме(УдалятьРеквизиты)
	
	ИзменитьРеквизитыФормы(УдалятьРеквизиты);
	УстановитьВидимостьКнопкиПоказатьЕще();
	Если Режим = РежимКартинки() Тогда
		Если УдалятьРеквизиты ИЛИ ТипЗнч(ВариантОтчетаПоИмениЭлемента) <> Тип("ФиксированноеСоответствие") Тогда
			ВариантОтчетаПоИмениЭлемента = Новый Структура;
		Иначе
			ВариантОтчетаПоИмениЭлемента = Новый Структура(ВариантОтчетаПоИмениЭлемента);
		КонецЕсли;
		ОбновитьЭлементыНаФормеКартинки();
		ВариантОтчетаПоИмениЭлемента = Новый ФиксированнаяСтруктура(ВариантОтчетаПоИмениЭлемента);
	Иначе
		ОбновитьЭлементыНаФормеСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыФормы(УдалятьРеквизиты)
	
	УдаляемыеРеквизиты = Новый Массив;
	Если УдалятьРеквизиты Тогда
		УдалитьЭлементыРекурсивно(Элементы.ГруппаСписокОтчетов, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СГруппойКолонка1, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СГруппойКолонка2, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СГруппойКолонка3, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СмТакжеКолонка1, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СмТакжеКолонка2, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.СмТакжеКолонка3, УдаляемыеРеквизиты);
		УдалитьЭлементыРекурсивно(Элементы.ГруппаНетОтчетов, УдаляемыеРеквизиты);
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Выведено = 0;
	Для каждого Стр Из СписокОтчетов Цикл
		
		Если Не ИспользуетсяРежимКартинки() Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ Стр.Видимость И НЕ РежимНастройки Тогда
			Продолжить;
		КонецЕсли;
		Если Выведено >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		Выведено = Выведено + 1;
		
		Если НЕ УдалятьРеквизиты
			И Элементы.Найти(ИмяРеквизита(Стр.УИД, "Образец_")) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита(Стр.УИД, "Образец_"), 
			Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0))));
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0
		Или УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, РеквизитыКУдалению)
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			УдалитьЭлементыРекурсивно(Элемент, РеквизитыКУдалению);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			
			Если СтрНайти(Элемент.ПутьКДанным, ".") = 0 Тогда
				РеквизитыКУдалению.Добавить(Элемент.ПутьКДанным);
				Значение = ЭтаФорма[Элемент.ПутьКДанным];
				Если ТипЗнч(Значение) = Тип("Строка")
					И ЭтоАдресВременногоХранилища(Значение)
					И Значение <> АдресПустойКартинки Тогда
					ПоместитьВоВременноеХранилище(Неопределено, Значение);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") 
			Или ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
			Для каждого Кнопка Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				ЭлементыКУдалению.Добавить(Кнопка);
				Команды.Удалить(Команды[Кнопка.ИмяКоманды]);
			КонецЦикла;
		КонецЕсли;
		
		ЭлементыКУдалению.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИмяРеквизита(Идентификатор, Префикс)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		Возврат СтрШаблон("%1%2", Префикс, Формат(Идентификатор, "ЧГ=0"));
	Иначе
		Возврат СтрШаблон("%1%2", Префикс, Идентификатор);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьВариант(Вариант, Элемент, Показать)
	
	Если Режим = РежимКартинки() Тогда
		Если Показать Тогда
			Элемент.ЦветТекста = КэшЗначений.ГруппаВариантовОтчетовЦвет;
			Если Вариант.Важный Тогда
				Элемент.Шрифт = КэшЗначений.ВариантОтчетаВажныйШрифт;
			КонецЕсли;
		Иначе
			Элемент.ЦветТекста = КэшЗначений.СкрытыйВариантОтчетаЦвет;
			Если Вариант.Важный Тогда
				Элемент.Шрифт = КэшЗначений.ВариантОтчетаОбычныйШрифт;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показать Тогда
			Элемент.ЦветТекста = КэшЗначений.ЦветВидимыхВариантов;
			Если Вариант.Важный Тогда
				Элемент.Шрифт = КэшЗначений.ВажнаяНадписьШрифт;
			КонецЕсли;
		Иначе
			Элемент.ЦветТекста = КэшЗначений.ЦветСкрытыхВариантов;
			Если Вариант.Важный Тогда
				Элемент.Шрифт = КэшЗначений.ОбычныйШрифтТекста;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СохранитьПользовательскиеНастройки(Вариант.Вариант, Вариант.Подсистема, Вариант.Видимость, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьПользовательскиеНастройки(Вариант, Подсистема, Видимость, БыстрыйДоступ)
	
	ПакетНастроек = Новый ТаблицаЗначений;
	ПакетНастроек.Добавить();
	Измерения = Новый Структура;
	Измерения.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());
	Измерения.Вставить("Вариант", Вариант);
	Измерения.Вставить("Подсистема", Подсистема);
	Ресурсы = Новый Структура;
	Ресурсы.Вставить("Видимость", Видимость);
	Ресурсы.Вставить("БыстрыйДоступ", БыстрыйДоступ);
	РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьПакетНастроек(ПакетНастроек, Измерения, Ресурсы, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиВариантПоИмениЭлемента(НадписьИмя) 
	
	Идентификатор = ВариантОтчетаПоИмениЭлемента[НадписьИмя];
	Если Идентификатор <> Неопределено Тогда
		Возврат СписокОтчетов.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

#Область РежимСписок

&НаСервере
Процедура УстановитьРежимСписокНаСервере()
	
	Режим = РежимСписок();
	
	Элементы.РежимСписок.Пометка = Истина;
	Элементы.РежимКартинки.Пометка = Ложь;
	КоличествоОтображаемыхОтчетов = 0;
	
	ХранилищеСистемныхНастроек.Сохранить("ФормаСпискаОтчетов", "Режим", Режим);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыНаФормеСписок()
	
	ВывестиВариантыРаздела(ТекущийРазделСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("ИмяГруппы", "");
	ПараметрыЗаполнения.Вставить("ДобавляемыеРеквизиты", Новый Массив);
	ПараметрыЗаполнения.Вставить("ДобавленоПустыхДекораций", 0);
	ПараметрыЗаполнения.Вставить("ВыведеноЭлементовВариантов", 0);
	ПараметрыЗаполнения.Вставить("ПоискВариантов", Новый Структура);
	
	ШаблонГруппыВарианта = Новый Структура(
		"Вид, РастягиватьПоГоризонтали,
		|Отображение, Группировка, 
		|ОтображатьЗаголовок");
	ШаблонГруппыВарианта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ШаблонГруппыВарианта.РастягиватьПоГоризонтали = Истина;
	ШаблонГруппыВарианта.Отображение = ОтображениеОбычнойГруппы.Нет;
	ШаблонГруппыВарианта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ШаблонГруппыВарианта.ОтображатьЗаголовок = Ложь;
	
	ШаблонКартинкиОтступа = Новый Структура(
		"Вид, Ширина, Высота,
		|РастягиватьПоГоризонтали, РастягиватьПоВертикали");
	ШаблонКартинкиОтступа.Вид = ВидДекорацииФормы.Картинка;
	ШаблонКартинкиОтступа.Ширина = 1;
	ШаблонКартинкиОтступа.Высота = 1;
	ШаблонКартинкиОтступа.РастягиватьПоГоризонтали = Ложь;
	ШаблонКартинкиОтступа.РастягиватьПоВертикали = Ложь;
	
	// Шаблоны заполнения создаваемых элементов управления.
	ШаблонНадписиВарианта = Новый Структура(
		"Вид, Гиперссылка, ЦветТекста,
		|РастягиватьПоВертикали, Высота,
		|РастягиватьПоГоризонтали, АвтоМаксимальнаяШирина, МаксимальнаяШирина");
	ШаблонНадписиВарианта.Вид = ВидДекорацииФормы.Надпись;
	ШаблонНадписиВарианта.Гиперссылка = Истина;
	ШаблонНадписиВарианта.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	ШаблонНадписиВарианта.РастягиватьПоВертикали = Ложь;
	ШаблонНадписиВарианта.Высота = 1;
	ШаблонНадписиВарианта.РастягиватьПоГоризонтали = Истина;
	ШаблонНадписиВарианта.АвтоМаксимальнаяШирина = Ложь;
	ШаблонНадписиВарианта.МаксимальнаяШирина = 0;
	
	ПараметрыЗаполнения.Вставить("Шаблоны", Новый Структура);
	ПараметрыЗаполнения.Шаблоны.Вставить("ГруппаВарианта", ШаблонГруппыВарианта);
	ПараметрыЗаполнения.Шаблоны.Вставить("КартинкаОтступа", ШаблонКартинкиОтступа);
	ПараметрыЗаполнения.Шаблоны.Вставить("НадписьВарианта", ШаблонНадписиВарианта);
	
	Если РежимНастройки Тогда
		ПараметрыЗаполнения.Вставить("КонтекстноеМеню", Новый Структура("Изменить"));
		ПараметрыЗаполнения.КонтекстноеМеню.Изменить                  = Новый Структура("Видимость", Истина);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ГруппыВажности", Новый Массив);
	ПараметрыЗаполнения.ГруппыВажности.Добавить("СГруппой");
	ПараметрыЗаполнения.ГруппыВажности.Добавить("СмТакже");
	
	Для Каждого ИмяГруппы Из ПараметрыЗаполнения.ГруппыВажности Цикл
		ПараметрыЗаполнения.Вставить(ИмяГруппы, Новый Структура("Отбор, Варианты, Количество"));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВариантыРаздела(Раздел)
	
	ОтборПоРазделу = Новый Структура("Раздел", Раздел);
	ВариантыРаздела = СписокОтчетов.Выгрузить().Скопировать(ОтборПоРазделу);
	
	ПараметрыЗаполнения = Новый Структура;
	ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения);
	ПараметрыЗаполнения.Вставить("Префикс", "");
	ПараметрыЗаполнения.Вставить("ВыводятсяВариантыТекущегоРаздела", Раздел = ТекущийРазделСсылка);
	ПараметрыЗаполнения.Вставить("ВариантыРаздела",    ВариантыРаздела);
	ПараметрыЗаполнения.Вставить("ВариантыКоличество", ВариантыРаздела.Количество());
	Если ПараметрыЗаполнения.ВариантыКоличество = 0 Тогда
		ПоказатьНадписьДляПустогоСписка();
		Элементы["СГруппойПодвал"].Видимость      = Ложь;
		Элементы["СмТакжеЗаголовок"].Видимость    = Ложь;
		Элементы["СмТакжеПодвал"].Видимость       = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		ПодсистемыРаздела = ПодсистемыПрограммы.Выгрузить();
	Иначе
		ОтборПоРазделу = Новый Структура("РазделСсылка", Раздел);
		ПодсистемыРаздела = ПодсистемыПрограммы.Выгрузить().Скопировать(ОтборПоРазделу);
		ПодсистемыРаздела.Сортировать("Приоритет ВОЗР"); // Сортировка по иерархии
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("РазделСсылка",      Раздел);
	ПараметрыЗаполнения.Вставить("ПодсистемыРаздела", ПодсистемыРаздела);
	
	Для Каждого ИмяГруппы Из ПараметрыЗаполнения.ГруппыВажности Цикл
		ПараметрыЗаполнения.Вставить("ИмяГруппы", ИмяГруппы);
		ПараметрыЗаполнения.Вставить(ИмяГруппы, Новый Структура);
		ВывестиВариантыСГруппой(ПараметрыЗаполнения);
	КонецЦикла;
	
	ЕстьВариантыСГруппой  = (ПараметрыЗаполнения.СГруппой.Количество > 0);
	ЕстьВариантыСмТакже   = (ПараметрыЗаполнения.СмТакже.Количество > 0);
	
	Элементы[ПараметрыЗаполнения.Префикс + "СГруппойПодвал"].Видимость   = ЕстьВариантыСГруппой;
	Элементы[ПараметрыЗаполнения.Префикс + "СмТакжеЗаголовок"].Видимость = ЕстьВариантыСмТакже;
	Элементы[ПараметрыЗаполнения.Префикс + "СмТакжеПодвал"].Видимость    = ЕстьВариантыСмТакже;
	
	ВариантОтчетаПоИмениЭлемента = Новый ФиксированнаяСтруктура(ПараметрыЗаполнения.ПоискВариантов);
	
КонецПроцедуры

&НаСервере
Функция ВариантыГруппы(ИмяГруппы, Раздел)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Раздел", Раздел);
	СтруктураОтбора.Вставить("СмТакже", ИмяГруппы = "СмТакже");
	Если НЕ РежимНастройки Тогда
		СтруктураОтбора.Вставить("Видимость", Истина);	
	КонецЕсли;
	ВариантыСОтбором = СписокОтчетов.Выгрузить(СтруктураОтбора);
	Возврат ВариантыСОтбором;
	
КонецФункции

&НаСервере
Процедура ВывестиВариантыСГруппой(ПараметрыЗаполнения)
	
	Варианты = ВариантыГруппы(ПараметрыЗаполнения.ИмяГруппы, ПараметрыЗаполнения.РазделСсылка);
	ПараметрыГруппы = ПараметрыЗаполнения[ПараметрыЗаполнения.ИмяГруппы];
	КоличествоВариантов = Варианты.Количество();
	ПараметрыГруппы.Вставить("Количество", КоличествоВариантов);
	Если КоличествоВариантов = 0 И Не (РежимНастройки И ПараметрыЗаполнения.ИмяГруппы = "СГруппой") Тогда
		Возврат;
	КонецЕсли;
	
	// Базовые свойства группы 2 уровня.
	ГруппаУровня2Имя = ПараметрыЗаполнения.ИмяГруппы;
	ГруппаУровня2 = Элементы.Найти(ПараметрыЗаполнения.Префикс + ГруппаУровня2Имя);
	
	ВыводБезГрупп = (ГруппаУровня2Имя = "СмТакже" ИЛИ Раздел <> РазделВсеОтчеты() ИЛИ ЗначениеЗаполнено(ПоОбъекту));
	
	// Сортировка вариантов (есть группы и важные).
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		Варианты.Сортировать("Важный УБЫВ, Порядок ВОЗР");
	Иначе
		Варианты.Сортировать("ПодсистемаПриоритет ВОЗР, Важный УБЫВ, Порядок ВОЗР");
	КонецЕсли;
	
	ДеревоРаспределения = ДеревоРаспределения();
	
	Для Каждого Подсистема Из ПараметрыЗаполнения.ПодсистемыРаздела Цикл
		
		СтрокаРодителя = ДеревоРаспределения.Строки.Найти(Подсистема.РодительСсылка, "ПодсистемаСсылка", Истина);
		Если СтрокаРодителя = Неопределено Тогда
			СтрокаДерева = ДеревоРаспределения.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаРодителя.Строки.Добавить();
		КонецЕсли;
		
		СтрокаДерева.Подсистема = Подсистема;
		СтрокаДерева.ПодсистемаСсылка = Подсистема.Ссылка;
		
		Если ВыводБезГрупп Тогда
			Если Подсистема.Ссылка = ПараметрыЗаполнения.РазделСсылка Тогда
				Для Каждого Вариант Из Варианты Цикл
					СтрокаДерева.Варианты.Добавить(Вариант);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокаДерева.Варианты = Варианты.НайтиСтроки(Новый Структура("Подсистема", Подсистема.Ссылка));
		КонецЕсли;
		СтрокаДерева.КоличествоВариантов = СтрокаДерева.Варианты.Количество();
		
		ЕстьВарианты = СтрокаДерева.КоличествоВариантов > 0;
		Если Не ЕстьВарианты Тогда
			СтрокаДерева.КоличествоПустыхСтрок = -1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вычисление колонки расположения и необходимости переноса каждой подсистемы на основе данных по количеству.
	ДеревоРаспределения.Колонки.Добавить("ГруппаФормы");
	ДеревоРаспределения.Колонки.Добавить("НачатВывод", Новый ОписаниеТипов("Булево"));
	
	КорневаяСтрока = ДеревоРаспределения.Строки[0];
	КоличествоСтрок = КоличествоВариантов + КорневаяСтрока.ВсегоВложенныхВариантов + КорневаяСтрока.ВсегоВложенныхПодсистем + Макс(КорневаяСтрока.ВсегоВложенныхПустыхСтрок - 2, 0);
	
	КоличествоКолонок = ГруппаУровня2.ПодчиненныеЭлементы.Количество();
	Если ПоказыватьПодсказки Тогда
		КоличествоКолонок = 2;	
	КонецЕсли;
	// Количество вариантов для вывода в одной колонке.
	ГруппаУровня3Отсечка = Макс(Цел(КоличествоСтрок / КоличествоКолонок), 2);
	
	ПорядокВывода = ПорядокВывода();
	
	Рекурсия = Новый Структура;
	Рекурсия.Вставить("ВсегоОсталосьВывести", КоличествоСтрок);
	Рекурсия.Вставить("СвободноКолонок", КоличествоКолонок - 1);
	Рекурсия.Вставить("КоличествоКолонок", КоличествоКолонок);
	Рекурсия.Вставить("ГруппаУровня3Отсечка", ГруппаУровня3Отсечка);
	Рекурсия.Вставить("НомерТекущейКолонки", 1);
	Рекурсия.Вставить("ЭтоПоследняяКолонка", Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок Или КоличествоСтрок <= 6);
	Рекурсия.Вставить("СвободноСтрок", ГруппаУровня3Отсечка);
	Рекурсия.Вставить("НачатВыводВТекущейКолонке", Ложь);
	
	ЗаполнитьПорядокВывода(ПорядокВывода, Неопределено, КорневаяСтрока, Рекурсия, ПараметрыЗаполнения);
	
	// Вывод в форму
	НомерТекущейКолонки = 0;
	Для Каждого СтрокаПорядкаВывода Из ПорядокВывода Цикл
		
		Если НомерТекущейКолонки <> СтрокаПорядкаВывода.НомерКолонки Тогда
			НомерТекущейКолонки = СтрокаПорядкаВывода.НомерКолонки;
			ТекущийУровеньВложенности = 0;
			ТекущаяГруппа = ГруппаУровня2.ПодчиненныеЭлементы.Получить(НомерТекущейКолонки - 1);
			ТекущиеГруппыПоУровнямВложенности = Новый Соответствие;
			ТекущиеГруппыПоУровнямВложенности.Вставить(0, ТекущаяГруппа);
		КонецЕсли;
		
		Если СтрокаПорядкаВывода.ЭтоПодсистема Тогда
			
			Если СтрокаПорядкаВывода.ПодсистемаСсылка = ПараметрыЗаполнения.РазделСсылка Тогда
				ТекущийУровеньВложенности = 0;
				ТекущаяГруппа = ТекущиеГруппыПоУровнямВложенности.Получить(ТекущийУровеньВложенности);
			Иначе
				ТекущийУровеньВложенности = 1;
				ВГруппу = ТекущиеГруппыПоУровнямВложенности.Получить(ТекущийУровеньВложенности - 1);
				ТекущаяГруппа = ДобавитьГруппуПодсистемы(ПараметрыЗаполнения, СтрокаПорядкаВывода, ВГруппу);
				ТекущиеГруппыПоУровнямВложенности.Вставить(ТекущийУровеньВложенности, ТекущаяГруппа);
			КонецЕсли;
			
		ИначеЕсли СтрокаПорядкаВывода.ЭтоВариант Тогда
			
			ВГруппу = ТекущиеГруппыПоУровнямВложенности.Получить(ТекущийУровеньВложенности);
			ДобавитьЭлементыВариантаОтчета(ПараметрыЗаполнения, СтрокаПорядкаВывода.Вариант, ТекущаяГруппа, ТекущийУровеньВложенности + 1);
			
		ИначеЕсли СтрокаПорядкаВывода.ЭтоПустаяСтрока Тогда
			
			ВГруппу = ТекущиеГруппыПоУровнямВложенности.Получить(ТекущийУровеньВложенности);
			ДобавитьПустуюДекорацию(ПараметрыЗаполнения, ВГруппу);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерКолонки = 3 По ГруппаУровня2.ПодчиненныеЭлементы.Количество() Цикл
		Найденные = ПорядокВывода.НайтиСтроки(Новый Структура("НомерКолонки, ЭтоПодсистема", НомерКолонки, Ложь));
		Если Найденные.Количество() = 0 Тогда
			ГруппаУровня3 = ГруппаУровня2.ПодчиненныеЭлементы.Получить(НомерКолонки - 1);
			ДобавитьПустуюДекорацию(ПараметрыЗаполнения, ГруппаУровня3);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуПодсистемы(ПараметрыЗаполнения, СтрокаПорядкаВывода, ВГруппу)
	Подсистема = СтрокаПорядкаВывода.Подсистема;
	СтрокаДерева = СтрокаПорядкаВывода.СтрокаДерева;
	Если СтрокаДерева.КоличествоВариантов = 0
		И СтрокаДерева.ВсегоВложенныхВариантов = 0
		И Не (РежимНастройки И ПараметрыЗаполнения.ИмяГруппы = "СГруппой") Тогда
		Возврат ВГруппу;
	КонецЕсли;
	ПодсистемаПредставление = Подсистема.Представление;
	
	Подсистема.НомерЭлемента = Подсистема.НомерЭлемента + 1;
	ГруппаПодсистемыИмя = Подсистема.ИмяЭлемента + "_" + Формат(Подсистема.НомерЭлемента, "ЧГ=0");
	
	ШрифтЗаголовка = ШрифтыСтиля.ГруппаВариантовОтчетовВажнаяШрифт;
	ОтображениеГруппыПодсистемы = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	
	ГруппаПодсистемы = Элементы.Вставить(ГруппаПодсистемыИмя, Тип("ГруппаФормы"), ВГруппу);
	ГруппаПодсистемы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПодсистемы.РастягиватьПоГоризонтали = Истина;
	ГруппаПодсистемы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПодсистемы.Отображение = ОтображениеГруппыПодсистемы;
	
	Если СтрокаПорядкаВывода.ЭтоПродолжение Тогда
		ПодсистемаПредставление = ПодсистемаПредставление + " " + НСтр("ru = '(продолжение)'");
	КонецЕсли;
	
	ГруппаПодсистемы.ОтображатьЗаголовок = Истина;
	ГруппаПодсистемы.Заголовок = ПодсистемаПредставление;
	
	СтрокаДерева.ГруппаФормы = ГруппаПодсистемы;
	
	Возврат ГруппаПодсистемы;
КонецФункции

&НаСервере
Функция ДобавитьПустуюДекорацию(ПараметрыЗаполнения, ВГруппу)
	
	ПараметрыЗаполнения.ДобавленоПустыхДекораций = ПараметрыЗаполнения.ДобавленоПустыхДекораций + 1;
	ДекорацияИмя = ИмяРеквизита(ПараметрыЗаполнения.ДобавленоПустыхДекораций, "ПустаяДекорация_");
	
	Декорация = Элементы.Вставить(ДекорацияИмя, Тип("ДекорацияФормы"), ВГруппу);
	Декорация.Вид = ВидДекорацииФормы.Надпись;
	Декорация.Заголовок = " ";
	Декорация.РастягиватьПоГоризонтали = Истина;
	
	Возврат Декорация;
	
КонецФункции

&НаСервере
Функция ДеревоРаспределения()
	
	ОписаниеПризнака = Новый ОписаниеТипов("Булево");
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ОписаниеМассива = Новый ОписаниеТипов("Массив");
	
	ОписаниеИдентификатора = Новый ОписаниеТипов(
		"СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений");
	
	ДеревоРаспределения = Новый ДеревоЗначений;
	
	ДеревоРаспределения.Колонки.Добавить("Подсистема");
	ДеревоРаспределения.Колонки.Добавить("ПодсистемаСсылка", ОписаниеИдентификатора);
	ДеревоРаспределения.Колонки.Добавить("Варианты", ОписаниеМассива);
	ДеревоРаспределения.Колонки.Добавить("КоличествоВариантов", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("КоличествоПустыхСтрок", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхВариантов", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхПодсистем", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхПустыхСтрок", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("УровеньВложенности", ОписаниеЧисла);
	ДеревоРаспределения.Колонки.Добавить("ВерхнийУровень", ОписаниеПризнака);
	
	Возврат ДеревоРаспределения;
	
КонецФункции

&НаСервере
Функция ПорядокВывода()
	
	ОписаниеПризнака = Новый ОписаниеТипов("Булево");
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	
	ОписаниеИдентификатора = Новый ОписаниеТипов(
		"СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений");
	
	ПорядокВывода = Новый ТаблицаЗначений;
	
	ПорядокВывода.Колонки.Добавить("НомерКолонки", ОписаниеЧисла);
	ПорядокВывода.Колонки.Добавить("ЭтоПодсистема", ОписаниеПризнака);
	ПорядокВывода.Колонки.Добавить("ЭтоПродолжение", ОписаниеПризнака);
	ПорядокВывода.Колонки.Добавить("ЭтоВариант", ОписаниеПризнака);
	ПорядокВывода.Колонки.Добавить("ЭтоПустаяСтрока", ОписаниеПризнака);
	ПорядокВывода.Колонки.Добавить("СтрокаДерева");
	ПорядокВывода.Колонки.Добавить("Подсистема");
	ПорядокВывода.Колонки.Добавить("ПодсистемаСсылка", ОписаниеИдентификатора);
	ПорядокВывода.Колонки.Добавить("ПодсистемаПриоритет", ОписаниеСтроки);
	ПорядокВывода.Колонки.Добавить("Вариант");
	ПорядокВывода.Колонки.Добавить("ВариантСсылка");
	ПорядокВывода.Колонки.Добавить("УровеньВложенности", ОписаниеЧисла);
	
	Возврат ПорядокВывода;
	
КонецФункции

&НаСервере
Функция ДобавитьЭлементыВариантаОтчета(ПараметрыЗаполнения, Вариант, ВГруппу, УровеньВложенности = 0)
	
	// Уникальное имя добавляемого элемента.
	НадписьИмя = ИмяРеквизита(Вариант.УИД, "Наименование_");
	Если ЗначениеЗаполнено(Вариант.Подсистема) Тогда
		НадписьИмя = НадписьИмя
			+ "_Подсистема_"
			+ ОтчетыСервер.ПривестиИдентификаторКИмени(Вариант.Подсистема.УникальныйИдентификатор());
	КонецЕсли;
	
	Если РежимНастройки Тогда
		ГруппаВариантаИмя = "Группа_" + НадписьИмя;
		ГруппаВарианта = Элементы.Вставить(ГруппаВариантаИмя, Тип("ГруппаФормы"), ВГруппу);
		ЗаполнитьЗначенияСвойств(ГруппаВарианта, ПараметрыЗаполнения.Шаблоны.ГруппаВарианта);
	Иначе
		ГруппаВарианта = ВГруппу;
	КонецЕсли;
	
	// Добавление флажка
	Если РежимНастройки Тогда
		ФлажокИмя = ИмяРеквизита(Вариант.УИД, "Видимость_");
		Если ЗначениеЗаполнено(Вариант.Подсистема) Тогда
			ФлажокИмя = ФлажокИмя
				+ "_Подсистема_"
				+ ОтчетыСервер.ПривестиИдентификаторКИмени(Вариант.Подсистема.УникальныйИдентификатор());
		КонецЕсли;
		Флажок = Элементы.Вставить(ФлажокИмя, Тип("ПолеФормы"), ГруппаВарианта);
		Флажок.ПутьКДанным = СтрШаблон("СписокОтчетов[%1].Видимость", Формат(Вариант.ИндексСтроки, "ЧГ=0"));
		Флажок.Вид = ВидПоляФормы.ПолеФлажка;
		Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Флажок.УстановитьДействие("ПриИзменении", "Подключаемый_ВидимостьВариантаПриИзменении");
	КонецЕсли;
	
	// Добавление надписи-гиперссылки варианта отчета.
	Надпись = Элементы.Вставить(НадписьИмя, Тип("ДекорацияФормы"), ГруппаВарианта);
	ЗаполнитьЗначенияСвойств(Надпись, ПараметрыЗаполнения.Шаблоны.НадписьВарианта);
	Надпись.Заголовок = СокрЛП(Вариант.Наименование);
	Если ЗначениеЗаполнено(Вариант.Описание) Тогда
		Надпись.Подсказка = СокрЛП(Вариант.Описание);
	КонецЕсли;
	Если ЗначениеЗаполнено(Вариант.Автор) Тогда
		Надпись.Подсказка = СокрЛ(Надпись.Подсказка + Символы.ПС) + НСтр("ru = 'Автор:'") + " " + СокрЛП(Строка(Вариант.Автор));
	КонецЕсли;
	Надпись.УстановитьДействие("Нажатие", "Подключаемый_ПредставлениеНажатие");
	Если Не Вариант.Видимость Тогда
		Надпись.ЦветТекста = ЦветаСтиля.СкрытыйВариантОтчетаЦвет;
	КонецЕсли;
	Если Вариант.Важный И НЕ Вариант.СмТакже Тогда
		Надпись.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	КонецЕсли;
	Надпись.АвтоМаксимальнаяШирина = Ложь;
	
	СоставПодсказки = Новый Массив;
	ОпределитьСоставПодсказкиВарианта(ПараметрыЗаполнения, Вариант, СоставПодсказки, Надпись);
	ВывестиПодсказкуВарианта(Надпись, СоставПодсказки);
	
	Если РежимНастройки Тогда
		Для Каждого КлючИЗначение Из ПараметрыЗаполнения.КонтекстноеМеню Цикл
			Если КлючИЗначение.Ключ = "Изменить" И КлючИЗначение.Значение.Видимость Тогда
				ДобавитьКомандуНастройкиОтчета(Надпись.КонтекстноеМеню, Вариант);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	ПараметрыЗаполнения.ПоискВариантов.Вставить(НадписьИмя, СписокОтчетов[Вариант.ИндексСтроки].ПолучитьИдентификатор());
	
	Возврат Надпись;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПорядокВывода(ПорядокВывода, СтрокаРодителя, СтрокаДерева, Рекурсия, ПараметрыЗаполнения)
	
	Если Не Рекурсия.ЭтоПоследняяКолонка И Рекурсия.СвободноСтрок <= 0 Тогда // текущая колонка исчерпана
		// Переход к новой колонке.
		Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1; // Пустая группа, которую не надо выводить.
		Рекурсия.НомерТекущейКолонки = Рекурсия.НомерТекущейКолонки + 1;
		Рекурсия.ЭтоПоследняяКолонка = (Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок);
		СвободноКолонок = Рекурсия.КоличествоКолонок - Рекурсия.НомерТекущейКолонки + 1;
		// Количество вариантов для вывода в одной колонке.
		Рекурсия.ГруппаУровня3Отсечка = Макс(Цел(Рекурсия.ВсегоОсталосьВывести / СвободноКолонок), 2);
		Рекурсия.СвободноСтрок = Рекурсия.ГруппаУровня3Отсечка; // Количество вариантов для вывода в одной колонке.
		
		// Вывод иерархии / Повтор иерархии с добавкой "(продолжение)" если вывод строк текущего родителя уже был начат в
		// предыдущей колонке.
		ТекущийРодитель = СтрокаРодителя;
		Пока ТекущийРодитель <> Неопределено И ТекущийРодитель.ПодсистемаСсылка <> ПараметрыЗаполнения.РазделСсылка Цикл
			
			// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
			ВывестиПодсистему = ПорядокВывода.Добавить();
			ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
			ВывестиПодсистему.ЭтоПодсистема       = Истина;
			ВывестиПодсистему.ЭтоПродолжение      = СтрокаРодителя.НачатВывод;
			ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
			ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
			ЗаполнитьЗначенияСвойств(ВывестиПодсистему, ТекущийРодитель, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
			
			ТекущийРодитель = ТекущийРодитель.Родитель;
		КонецЦикла;
		
		Рекурсия.НачатВыводВТекущейКолонке = Ложь;
		
	КонецЕсли;
	
	Если (СтрокаДерева.КоличествоВариантов > 0 Или СтрокаДерева.ВсегоВложенныхВариантов > 0) И Рекурсия.НачатВыводВТекущейКолонке И СтрокаРодителя.НачатВывод Тогда
		// Вывод пустой строки.
		Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
		ВывестиПустуюСтроку = ПорядокВывода.Добавить();
		ВывестиПустуюСтроку.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
		ВывестиПустуюСтроку.ЭтоПустаяСтрока     = Истина;
		ВывестиПустуюСтроку.СтрокаДерева        = СтрокаДерева;
		ВывестиПустуюСтроку.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
		ЗаполнитьЗначенияСвойств(ВывестиПустуюСтроку, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
		
		// Учет строк, занятых пустой строкой.
		Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
	КонецЕсли;
	
	// Вывод группы.
	Если СтрокаРодителя <> Неопределено Тогда
		ВывестиПодсистему = ПорядокВывода.Добавить();
		ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
		ВывестиПодсистему.ЭтоПодсистема       = Истина;
		ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
		ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
		ЗаполнитьЗначенияСвойств(ВывестиПодсистему, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
	КонецЕсли;
	
	Если СтрокаДерева.КоличествоВариантов > 0 Тогда
		
		// Учет строки, занятой группой.
		Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
		Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
		
		СтрокаДерева.НачатВывод = Истина;
		Рекурсия.НачатВыводВТекущейКолонке = Истина;
		
		Если Рекурсия.ЭтоПоследняяКолонка
			Или СтрокаРодителя <> Неопределено
			И (СтрокаДерева.КоличествоВариантов <= 5
			Или СтрокаДерева.КоличествоВариантов - 2 <= Рекурсия.СвободноСтрок + 2) Тогда
			
			// Вывод всех в текущую колонку.
			ВозможноПродолжение = Ложь;
			КоличествоВТекущуюКолонку = СтрокаДерева.КоличествоВариантов;
			
		Иначе
			
			// Частичный вывод в текущую колонку с продолжением в следующей.
			ВозможноПродолжение = Истина;
			КоличествоВТекущуюКолонку = Макс(Рекурсия.СвободноСтрок + 2, 3);
			
		КонецЕсли;
		
		// Регистрация вариантов в текущей колонке / Довывод вариантов в новой колонке.
		ВариантовВыведено = 0;
		ВидимыхВариантов = 0;
		Для Каждого Вариант Из СтрокаДерева.Варианты Цикл
			// СтрокаДерева.Варианты - это результат поиска по таблице значений.
			// Код рассчитан на то, что сортировка результата поиска не отличается от сортировки строк.
			// Если это не так, то исходную таблицу необходимо скопировать
			// с фильтром по подсистеме и отсортировать по наименованию.
			
			Если ВозможноПродолжение
				И Не Рекурсия.ЭтоПоследняяКолонка
				И ВариантовВыведено >= КоличествоВТекущуюКолонку Тогда
				// Переход к новой колонке.
				Рекурсия.НомерТекущейКолонки = Рекурсия.НомерТекущейКолонки + 1;
				Рекурсия.ЭтоПоследняяКолонка = (Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок);
				СвободноКолонок = Рекурсия.КоличествоКолонок - Рекурсия.НомерТекущейКолонки + 1;
				// Количество вариантов для вывода в одной колонке.
				Рекурсия.ГруппаУровня3Отсечка = Макс(Цел(Рекурсия.ВсегоОсталосьВывести / СвободноКолонок), 2);
				Рекурсия.СвободноСтрок = Рекурсия.ГруппаУровня3Отсечка; // Количество вариантов для вывода в одной колонке.
				
				Если Рекурсия.ЭтоПоследняяКолонка Тогда
					КоличествоВТекущуюКолонку = -1;
				Иначе
					КоличествоВТекущуюКолонку = Макс(Мин(Рекурсия.СвободноСтрок, СтрокаДерева.КоличествоВариантов - ВариантовВыведено), 3);
				КонецЕсли;
				ВариантовВыведено = 0;
				
				// Повтор иерархии с добавкой "(продолжение)".
				ТекущийРодитель = СтрокаРодителя;
				Пока ТекущийРодитель <> Неопределено И ТекущийРодитель.ПодсистемаСсылка <> ПараметрыЗаполнения.РазделСсылка Цикл
					
					// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
					ВывестиПодсистему = ПорядокВывода.Добавить();
					ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
					ВывестиПодсистему.ЭтоПодсистема       = Истина;
					ВывестиПодсистему.ЭтоПродолжение      = Истина;
					ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
					ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
					ЗаполнитьЗначенияСвойств(ВывестиПодсистему, ТекущийРодитель, "Подсистема, ПодсистемаСсылка");
					
					ТекущийРодитель = ТекущийРодитель.Родитель;
				КонецЦикла;
				
				// Вывод группы с добавкой "(продолжение)".
				// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
				ВывестиПодсистему = ПорядокВывода.Добавить();
				ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
				ВывестиПодсистему.ЭтоПодсистема       = Истина;
				ВывестиПодсистему.ЭтоПродолжение      = Истина;
				ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
				ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
				ЗаполнитьЗначенияСвойств(ВывестиПодсистему, СтрокаДерева, "Подсистема, ПодсистемаСсылка");
				
				// Учет строки, занятой группой.
				Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
			КонецЕсли;
			
			Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
			ВывестиВариант = ПорядокВывода.Добавить();
			ВывестиВариант.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
			ВывестиВариант.ЭтоВариант          = Истина;
			ВывестиВариант.СтрокаДерева        = СтрокаДерева;
			ВывестиВариант.Вариант             = Вариант;
			ВывестиВариант.ВариантСсылка       = Вариант.Вариант;
			ВывестиВариант.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
			ЗаполнитьЗначенияСвойств(ВывестиВариант, СтрокаДерева, "Подсистема, ПодсистемаСсылка");
			
			ВариантовВыведено = ВариантовВыведено + 1;
			Если Вариант.Видимость Тогда
				ВидимыхВариантов = ВидимыхВариантов + 1;
			КонецЕсли;
			
			// Учет строк, занятых вариантами.
			Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
		КонецЦикла;
		
		Если ВидимыхВариантов > 0 Тогда
			ПодсистемаФормы = НайтиПодсистемуПоСсылке(ЭтотОбъект, СтрокаДерева.ПодсистемаСсылка);
			ПодсистемаФормы.ВидимыхВариантов = ПодсистемаФормы.ВидимыхВариантов + ВидимыхВариантов;
			Пока ПодсистемаФормы.Ссылка <> ПодсистемаФормы.РазделСсылка Цикл
				ПодсистемаФормы = НайтиПодсистемуПоСсылке(ЭтотОбъект, ПодсистемаФормы.РазделСсылка);
				ПодсистемаФормы.ВидимыхВариантов = ПодсистемаФормы.ВидимыхВариантов + ВидимыхВариантов;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Регистрация вложенных строк.
	Для Каждого СтрокаПодчиненного Из СтрокаДерева.Строки Цикл
		ЗаполнитьПорядокВывода(ПорядокВывода, СтрокаДерева, СтрокаПодчиненного, Рекурсия, ПараметрыЗаполнения);
		// Проброс НачатВывод из нижнего уровня.
		Если СтрокаПодчиненного.НачатВывод Тогда
			СтрокаДерева.НачатВывод = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСоставПодсказкиВарианта(ПараметрыЗаполнения, Вариант, СоставПодсказки, Надпись)
	Если ПоказыватьПодсказки Тогда
		СоставПодсказки.Добавить(СокрЛП(Надпись.Подсказка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиПодсказкуВарианта(Надпись, СоставПодсказки)
	Если СоставПодсказки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Надпись.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Подсказка = Надпись.РасширеннаяПодсказка;
	Подсказка.Заголовок                = Новый ФорматированнаяСтрока(СоставПодсказки);
	Подсказка.ЦветТекста               = ЦветаСтиля.ПоясняющийТекст;
	Подсказка.АвтоМаксимальнаяВысота   = Ложь;
	Подсказка.МаксимальнаяВысота       = 3;
	Подсказка.РастягиватьПоГоризонтали = Истина;
	Подсказка.АвтоМаксимальнаяШирина   = Ложь;
	Подсказка.МаксимальнаяШирина       = 0;
КонецПроцедуры

#КонецОбласти

#Область РежимКартинки

&НаСервере
Функция ИспользуетсяРежимКартинки()
	
	// Предотвращение OutOfMemoryError при отключении отбора в списке отчетов в режиме картинки.
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Режим) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Режим = РежимКартинки();
	
КонецФункции

&НаСервере
Процедура УстановитьРежимКартинкиНаСервере()
	
	Режим = РежимКартинки();
	
	Элементы.РежимКартинки.Пометка = Истина;
	Элементы.РежимСписок.Пометка = Ложь;
	
	ХранилищеСистемныхНастроек.Сохранить("ФормаСпискаОтчетов", "Режим", Режим);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыНаФормеКартинки()
	
	Если КоличествоОтчетов() = 0 Тогда
		ПоказатьНадписьДляПустогоСписка();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьАдресаКартинок();
	
	Колонка = 0;
	
	УдалитьПодчиненныеЭлементыПоследнейГруппы(Колонка);
	
	ПолныеПраваНаВарианты = ВариантыОтчетов.ПолныеПраваНаВарианты();
	
	Выведено = 0;
	Для Каждого Стр Из СписокОтчетов Цикл
		
		Если Выведено >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ Элементы.Найти(ИмяРеквизита(Стр.УИД, "ГруппаОтчета")) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Стр.Видимость И НЕ РежимНастройки Тогда
			Продолжить;
		КонецЕсли;
		
		Выведено = Выведено + 1;
		
		ГруппаГоризонтальная = НоваяГруппаДляДобавления(Колонка);
		ГруппаСРазделителем = НоваяГруппаСРазделителем(ГруппаГоризонтальная, Стр.УИД);
		ГруппаОтчета = НоваяГруппаОтчета(ГруппаСРазделителем, Стр);
		ПредставлениеОтчета = НовоеПредставлениеОтчета(ГруппаОтчета, Стр);
		ДобавитьКомандуИзбранное(ПредставлениеОтчета.КонтекстноеМеню, Стр);
		Если РежимНастройки Тогда
			ДобавитьКомандуНастройкиОтчета(ПредставлениеОтчета.КонтекстноеМеню, Стр);
			ДобавитьКомандуУдалитьОтчет(ПредставлениеОтчета.КонтекстноеМеню, Стр, ПолныеПраваНаВарианты);
		КонецЕсли;
		
		Колонка = Колонка + 1;
		Если Колонка >= КоличествоОтчетовВСтроке() Тогда
			Колонка = 0;
		КонецЕсли;
		
		Если КэшЗначений.ЭтоМобильныйКлиент Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка <> 0 Тогда
			ИмяДекорация = ИмяРеквизита(Стр.УИД, "ДекорацияОтступ_");
			ДекорацияОтступ = Элементы.Добавить(ИмяДекорация, Тип("ДекорацияФормы"), ГруппаСРазделителем);
			ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияОтступ.РастягиватьПоГоризонтали = Ложь;
			ДекорацияОтступ.Ширина = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока Колонка > 0 Цикл
		
		ИдентификаторЗаглушки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		
		ГруппаЗаглушка = Элементы.Добавить("ГруппаЗаглушка" + ИдентификаторЗаглушки, Тип("ГруппаФормы"), НоваяГруппаСРазделителем(ГруппаГоризонтальная, ИдентификаторЗаглушки));
		ГруппаЗаглушка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаглушка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаглушка.ОтображатьЗаголовок = Ложь;
		ГруппаЗаглушка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
		ДекорацияОтступ = Элементы.Добавить("ДекорацияРазделитель" + ИдентификаторЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаглушка);
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = ШиринаПредставленияОтчета();
		Колонка = Колонка + 1;
		Если Колонка >= КоличествоОтчетовВСтроке() Тогда
			Колонка = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьКоличествоОтображаемыхОтчетов()

	Если Режим <> РежимКартинки() Тогда
		КоличествоОтображаемыхОтчетов = 0;
		Возврат;
	КонецЕсли;
	
	Если Раздел = РазделПоследние()
		Или Раздел = РазделИзбранные()
		Или ЕстьПользовательскиеФильтры() Тогда
		КоличествоОтображаемыхОтчетов = 21;
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Важный", Истина);
	Если НЕ РежимНастройки Тогда
		СтруктураОтбора.Вставить("Видимость", Истина);
	КонецЕсли;
	РекомендуемыеОтчеты = СписокОтчетов.НайтиСтроки(СтруктураОтбора);
	КоличествоОтображаемыхОтчетов = Мин(РекомендуемыеОтчеты.Количество(), 21);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементыПоследнейГруппы(Колонка)
	
	Если Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяГруппа = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы[Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество() - 1];
	
	// Удаляем заглушки
	МассивКУдалению = Новый Массив;
	Для Каждого ЭлементГруппы Из ПоследняяГруппа.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(ЭлементГруппы.ПодчиненныеЭлементы[0].Имя, "ГруппаЗаглушка") Тогда
			МассивКУдалению.Добавить(ЭлементГруппы.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0]);
			МассивКУдалению.Добавить(ЭлементГруппы.ПодчиненныеЭлементы[0]);
			МассивКУдалению.Добавить(ЭлементГруппы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКУдалению Из МассивКУдалению Цикл
		Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	// Определяем количество элементов в последней группе
	Колонка = ПоследняяГруппа.ПодчиненныеЭлементы.Количество();
	Если Колонка >= КоличествоОтчетовВСтроке() Тогда
		Колонка = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШиринаПредставленияОтчета()
	
	Возврат 30;
	
КонецФункции

&НаСервере
Функция КоличествоОтчетовВСтроке()
	
	Если КэшЗначений.ЭтоМобильныйКлиент Тогда
		Возврат 1;
	Иначе
		Возврат 3;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКнопкиПоказатьЕще()
	
	ВидимостьКнопкиЕще = (КоличествоОтчетов() > КоличествоОтображаемыхОтчетов 
		И КоличествоОтображаемыхОтчетов <> 0);
	
	Если Элементы.ПоказатьЕщеОтчеты.Видимость <> ВидимостьКнопкиЕще Тогда
		Элементы.ПоказатьЕщеОтчеты.Видимость = ВидимостьКнопкиЕще;
	КонецЕсли;
	Если ВидимостьКнопкиЕще И Элементы.СсылкаВсеОтчеты.Видимость Тогда
		Элементы.СсылкаВсеОтчеты.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНадписьДляПустогоСписка()
	
	ДекорацияНадпись = Элементы.Добавить("НадписьПустойСписок", Тип("ДекорацияФормы"), Элементы.ГруппаНетОтчетов);
	ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияНадпись.Заголовок = ТекстПодсказкиДляПустогоСписка();
	ДекорацияНадпись.РастягиватьПоГоризонтали = Истина;
	ДекорацияНадпись.РастягиватьПоВертикали = Истина;
	ДекорацияНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияНадпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	ДекорацияНадпись.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ДекорацияНадпись.Шрифт = ШрифтыСтиля.ГруппаВариантовОтчетовОбычнаяШрифт;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаКартинок()
	
	Если Не ИспользуетсяРежимКартинки() Тогда
		Возврат;
	КонецЕсли;
	
	Выведено = 0;
	Для каждого Стр Из СписокОтчетов Цикл
		
		Если НЕ Стр.Видимость И НЕ РежимНастройки Тогда
			Продолжить;
		КонецЕсли;
		Если Выведено >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		Выведено = Выведено + 1;
		
		ИмяРеквизитаОбразец = ИмяРеквизита(Стр.УИД, "Образец_");
		Если ТипЗнч(Стр.Образец) = Тип("Картинка") И НЕ Стр.Образец.Вид = ВидКартинки.Пустая Тогда
			Если ЭтоАдресВременногоХранилища(ЭтаФорма[ИмяРеквизитаОбразец]) И НЕ ЭтаФорма[ИмяРеквизитаОбразец] = АдресПустойКартинки Тогда
				ЭтаФорма[ИмяРеквизитаОбразец] = ПоместитьВоВременноеХранилище(Стр.Образец, ЭтаФорма[ИмяРеквизитаОбразец]);
			Иначе
				ЭтаФорма[ИмяРеквизитаОбразец] = ПоместитьВоВременноеХранилище(Стр.Образец, УникальныйИдентификатор);
			КонецЕсли; 
		Иначе
			ЭтаФорма[ИмяРеквизитаОбразец] = АдресПустойКартинки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НоваяГруппаДляДобавления(Знач Колонка)
	
	Если Колонка = 0 Тогда
		ИндексГруппы = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество();
		ГруппаГоризонтальная = Элементы.Добавить("ГруппаГоризонтальная" + ИндексГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСписокОтчетов);
		ГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаГоризонтальная.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
		ГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаГоризонтальная.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
		ГруппаГоризонтальная.РастягиватьПоВертикали = Ложь;
		ГруппаГоризонтальная.Объединенная = Ложь;
	Иначе
		ГруппаГоризонтальная = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы[Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество()-1];
	КонецЕсли;
	
	Возврат ГруппаГоризонтальная;
	
КонецФункции

&НаСервере
Функция НоваяГруппаСРазделителем(Знач ГруппаГоризонтальная, Знач ИдентификаторГруппы)
	
	ГруппаСРазделителем = Элементы.Добавить("ГруппаСРазделителем" + ИдентификаторГруппы, Тип("ГруппаФормы"), ГруппаГоризонтальная);
	ГруппаСРазделителем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСРазделителем.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСРазделителем.ОтображатьЗаголовок = Ложь;
	ГруппаСРазделителем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	Возврат ГруппаСРазделителем;
	
КонецФункции

&НаСервере
Функция НоваяГруппаОтчета(Знач ГруппаСРазделителем, Знач Стр)
	
	ИндексСтроки = СписокОтчетов.Индекс(Стр);
	
	ГруппаОтчета = Элементы.Добавить(ИмяРеквизита(Стр.УИД, "ГруппаОтчета"), Тип("ГруппаФормы"), ГруппаСРазделителем);
	ГруппаОтчета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтчета.Отображение = ОтображениеОбычнойГруппы.Нет;
	Если Стр.Важный И Стр.Видимость Тогда
		ГруппаОтчета.ШрифтЗаголовка = ШрифтыСтиля.ВариантОтчетаВажныйШрифт;
	Иначе
		ГруппаОтчета.ШрифтЗаголовка = ШрифтыСтиля.ВариантОтчетаОбычныйШрифт;
	КонецЕсли;
	ГруппаОтчета.ОтображатьЗаголовок = Ложь;
	ГруппаОтчета.РастягиватьПоГоризонтали = Истина;
	ГруппаОтчета.РастягиватьПоВертикали = Ложь;
	ГруппаОтчета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаОтчета.Ширина = ШиринаПредставленияОтчета();
	ГруппаОтчета.Высота = Окр(25 / КоличествоОтчетовВСтроке() * ?(ШиринаЭкрана = 0, 1, (ШиринаЭкрана - 160) / 1209));
	
	ГруппаЗаголовок = Элементы.Добавить(ИмяРеквизита(Стр.УИД, "ГруппаЗаголовок"), Тип("ГруппаФормы"), ГруппаОтчета);
	ГруппаЗаголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗаголовок.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЗаголовок.ОтображатьЗаголовок = Ложь;
	ГруппаЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЗаголовок.Объединенная = Истина;
	ГруппаЗаголовок.ОтображатьОтступСлева = Ложь;
	Если РежимНастройки Тогда
		ОтметкаВидимости = Элементы.Добавить(ИмяРеквизита(Стр.УИД, "Видимость_"), Тип("ПолеФормы"), ГруппаЗаголовок);
		ОтметкаВидимости.ПутьКДанным = СтрШаблон("СписокОтчетов[%1].Видимость", Формат(ИндексСтроки, "ЧГ=0"));
		ОтметкаВидимости.Вид = ВидПоляФормы.ПолеФлажка;
		ОтметкаВидимости.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ОтметкаВидимости.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		ОтметкаВидимости.УстановитьДействие("ПриИзменении", "Подключаемый_ВидимостьВариантаПриИзменении");
	КонецЕсли;
	ПредставлениеОтчета = Элементы.Добавить(ИмяРеквизита(Стр.УИД, "Наименование_"), Тип("ПолеФормы"), ГруппаЗаголовок);
	ПредставлениеОтчета.ПутьКДанным = СтрШаблон("СписокОтчетов[%1].Наименование", Формат(ИндексСтроки, "ЧГ=0"));
	ПредставлениеОтчета.Вид = ВидПоляФормы.ПолеНадписи;
	ПредставлениеОтчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПредставлениеОтчета.Шрифт = ГруппаОтчета.ШрифтЗаголовка;
	Если Стр.Видимость Тогда
		ПредставлениеОтчета.ЦветТекста = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	Иначе
		ПредставлениеОтчета.ЦветТекста = ЦветаСтиля.СкрытыйВариантОтчетаЦвет;
	КонецЕсли;
	ПредставлениеОтчета.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	ПредставлениеОтчета.Высота = 1;
	ПредставлениеОтчета.РастягиватьПоГоризонтали = Истина;
	ПредставлениеОтчета.РастягиватьПоВертикали = Ложь;
	
	ВариантОтчетаПоИмениЭлемента.Вставить(ПредставлениеОтчета.Имя, Стр.ПолучитьИдентификатор());
	
	Возврат ГруппаОтчета;

КонецФункции

&НаСервере
Функция НовоеПредставлениеОтчета(Знач ГруппаОтчета, Знач Стр)
	
	ПредставлениеОтчета = Элементы.Добавить(ИмяРеквизита(Стр.УИД, "Образец_"), Тип("ПолеФормы"), ГруппаОтчета);
	ПредставлениеОтчета.ПутьКДанным = ПредставлениеОтчета.Имя;
	ПредставлениеОтчета.Вид = ВидПоляФормы.ПолеКартинки;
	ПредставлениеОтчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПредставлениеОтчета.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПредставлениеОтчета.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	ПредставлениеОтчета.ЦветРамки = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки;
	ПредставлениеОтчета.РастягиватьПоВертикали = Ложь;
	ПредставлениеОтчета.РастягиватьПоГоризонтали = Истина;
	ПредставлениеОтчета.Гиперссылка = Истина;
	ПредставлениеОтчета.Ширина = ШиринаПредставленияОтчета();
	ПредставлениеОтчета.Высота = Окр(25 / КоличествоОтчетовВСтроке() * ?(ШиринаЭкрана = 0, 1, (ШиринаЭкрана - 160) / 1209));
	ПредставлениеОтчета.УстановитьДействие("Нажатие", "Подключаемый_ПредставлениеНажатие");
	ПредставлениеОтчета.Подсказка = Стр.Описание;
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеВарианта(Вариант)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вариант", Вариант);
	
	Строки = СписокОтчетов.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество() = 0 Тогда
		Возврат;
	Иначе
		Стр = Строки[0];
	КонецЕсли;
	
	ОбновитьОтображениеМиниатюры(Стр);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуИзбранное(КонтекстноеМеню, Знач Стр)
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ИмяРеквизита(Стр.УИД, "Избранное_");
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "Подключаемый_Избранное";
	ОбновитьКомандуИзбранное(ИмяКоманды, Избранное.НайтиПоЗначению(Стр.Вариант) = Неопределено);
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандуИзбранное(ИмяКоманды, НеВИзбранном)
	
	Команда = Команды.Найти(ИмяКоманды);
	Если НеВИзбранном Тогда
		Команда.Заголовок = НСтр("ru = 'В избранное'");
		Команда.Картинка = БиблиотекаКартинок.БольшаяСераяЗвезда;
	Иначе
		Команда.Заголовок = НСтр("ru = 'Удалить из избранного'");
		Команда.Картинка = БиблиотекаКартинок.БольшаяЖелтаяЗвезда;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуНастройкиОтчета(КонтекстноеМеню, Знач Стр)
	
	ИмяКоманды = ИмяРеквизита(Стр.УИД, "НастройкиОтчета_");
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Изменить'");
	Команда.Картинка = БиблиотекаКартинок.Изменить;
	Команда.Подсказка = НСтр("ru = 'Открыть карточку варианта отчета.'");
	Команда.Действие = "Подключаемый_НастройкаОтчета";
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьОтчет(КонтекстноеМеню, Стр, ПолныеПраваНаВарианты)
	
	Если Не Стр.Пользовательский Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Стр.АвторТекущийПользователь
		И Не ПолныеПраваНаВарианты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ИмяРеквизита(Стр.УИД, "УдалитьОтчет_");
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Удалить'");
	Команда.Картинка = БиблиотекаКартинок.Удалить;
	Команда.Подсказка = НСтр("ru = 'Удалить пользовательский вариант отчета.'");
	Команда.Действие = "Подключаемый_УдалитьОтчет";
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Функция ТекстПодсказкиДляПустогоСписка()
	
	ТекстПодсказки = "";
	
	Если ЕстьПользовательскиеФильтры() Тогда
		
		ТекстПодсказки = НСтр("ru = 'Не найдены отчеты, отвечающие отбору.'");
		
	ИначеЕсли Раздел = РазделВсеОтчеты()
		Или Раздел = РазделВнешние() Тогда
		
		ТекстПодсказки = НСтр("ru = 'В панели отчетов этого раздела не размещено ни одного отчета.'");
		
	ИначеЕсли Раздел = РазделИзбранные() Тогда
		
		ТекстПодсказки = НСтр("ru = 'Пока ни один отчет не добавлен в избранное.'");
		
	ИначеЕсли Раздел = РазделПоследние() Тогда
		
		ТекстПодсказки = НСтр("ru = 'В этот список автоматически добавляются последние использованные отчеты. Список пока пуст.'");
		
	КонецЕсли;
	
	Если СписокОтчетов.Количество() > 0 Тогда
			
		ТекстПодсказки = ТекстПодсказки + Символы.ПС 
			+ НСтр("ru = 'Некоторые отчеты скрыты. Изменить их видимость можно в режиме настройки.'");
		
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеМиниатюры(Стр)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Стр.Вариант, "Наименование,Описание");
	ЗаполнитьЗначенияСвойств(Стр, СтруктураРеквизитов);
	Если Режим = РежимКартинки() Тогда
		ИмяРеквизитаОбразец = ИмяРеквизита(Стр.УИД, "Образец_");
		Если ЭтоАдресВременногоХранилища(ЭтаФорма[ИмяРеквизитаОбразец])
			И НЕ ЭтаФорма[ИмяРеквизитаОбразец] = АдресПустойКартинки Тогда
			ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма[ИмяРеквизитаОбразец]);
		КонецЕсли;
		Образец = ОтчетыУНФ.ОбразецВарианта(Стр.Вариант);
		Если Образец <> Неопределено Тогда
			ЭтаФорма[ИмяРеквизитаОбразец] = ПоместитьВоВременноеХранилище(Образец, УникальныйИдентификатор);
		Иначе
			ЭтаФорма[ИмяРеквизитаОбразец] = АдресПустойКартинки;
		КонецЕсли;
		Элементы[ИмяРеквизитаОбразец].Подсказка = СтруктураРеквизитов.Описание;
	Иначе
		НадписьИмя = ИмяРеквизита(Стр.УИД, "Наименование_");
		Если ЗначениеЗаполнено(Стр.Подсистема) Тогда
			НадписьИмя = НадписьИмя
				+ "_Подсистема_"
				+ ОтчетыСервер.ПривестиИдентификаторКИмени(Стр.Подсистема.УникальныйИдентификатор());
		КонецЕсли;
		Надпись = Элементы[НадписьИмя];
		Подсказка = Надпись.РасширеннаяПодсказка;
		Подсказка.Заголовок = СтруктураРеквизитов.Описание;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	ОбновитьПараметрыЭкрана();
	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
	Если РезультатФоновогоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		ИзменитьДоступностьЭлементовПриФормировании(Ложь);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Ошибка" Тогда 
		ИзменитьДоступностьЭлементовПриФормировании(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	СписокОтчетов.Очистить();
	Если Раздел = РазделПоследние() Тогда
		ОбновитьИсторию();
	КонецЕсли;
	ОбновитьРазделИзбранное();
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СписокОтчетов", СписокОтчетов.Выгрузить());
	ПараметрыПроцедуры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПроцедуры.Вставить("ТекущийРаздел", ТекущийРазделСсылка);
	ПараметрыПроцедуры.Вставить("ПодсистемыПрограммы", ПодсистемыПрограммы.Выгрузить());
	ПараметрыПроцедуры.Вставить("Раздел", Раздел);
	ПараметрыПроцедуры.Вставить("ПоОбъекту", ПоОбъекту);
	ПараметрыПроцедуры.Вставить("История", История.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("Избранное", Избранное.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("СоответствиеОтчетов", ОбщегоНазначения.СкопироватьРекурсивно(КэшЗначений.СоответствиеОтчетов));
	ПараметрыПроцедуры.Вставить("НаложенныеФильтры", НаложенныеФильтры.Выгрузить());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьНеВФоне = (ВариантыОтчетов.ПредставленияЗаполнены() = "Заполнены");
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"ОтчетыУНФ.СформироватьСписокОтчетов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ФоновоеЗаданиеВыполненоСервер(РезультатФоновогоЗадания.АдресРезультата);
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	ФоновоеЗаданиеЗапущено = Ложь;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда
		ОбновитьПараметрыЭкрана();
		ФоновоеЗаданиеВыполненоСервер(Результат.АдресРезультата);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	ИзменитьДоступностьЭлементовПриФормировании(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовПриФормировании(Доступны)
	
	Элементы.ГруппаОжидание.Видимость = НЕ Доступны;
	Элементы.ГруппаВсеЭлементы.Видимость = Доступны;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки = "";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + ПодробноеПредставлениеОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеВыполненоСервер(АдресРезультата)
	
	СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(СтруктураРезультат) = Тип("Структура") Тогда
		СписокОтчетов.Загрузить(СтруктураРезультат.СписокОтчетов);
		СтруктураРезультат.Свойство("СвязанныеПоля", СвязанныеПоля);
	КонецЕсли;
	ОграничитьКоличествоОтображаемыхОтчетов();
	ОбновитьЭлементыНаФорме(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Фильтры

&НаСервере
Процедура ОбновитьОтображениеОтметокФильтров()
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если ПустаяСтрока(Стр.ИмяКнопки) Тогда
			Стр.ИмяКнопки = "ОтметкаФильтра" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		КонецЕсли; 
		Если Стр.Представление = Неопределено Тогда
			Стр.Представление = ПредставлениеОтметки(Стр);	
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставленияФильтров = НаложенныеФильтры.Выгрузить(, "Представление").ВыгрузитьКолонку("Представление");
	
	Индекс = ПредставленияФильтров.Количество() - 1;
	Пока Индекс > 0 Цикл
		ПредставленияФильтров.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоТегов.Заголовок	= Новый ФорматированнаяСтрока(ПредставленияФильтров); // АПК:1356 Используется локализованный массив форматированных строк
	Элементы.ОблакоТегов.Видимость	= ПредставленияФильтров.Количество() > 0;
		
КонецПроцедуры

&НаСервере
Функция ПредставлениеОтметки(Стр)

	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Стр.Заголовок + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , Стр.ИмяКнопки));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС); // АПК:1356 Используется локализованное представление + картинка
	
КонецФункции

&НаСервере
Функция ЕстьПользовательскиеФильтры()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пользовательский", Истина);
	
	Возврат НаложенныеФильтры.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ЦветСкрытыхВариантов", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	КэшЗначений.Вставить("ЦветВидимыхВариантов", ЦветаСтиля.ГиперссылкаЦвет);
	КэшЗначений.Вставить("ГруппаВариантовОтчетовЦвет", ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	КэшЗначений.Вставить("СкрытыйВариантОтчетаЦвет", ЦветаСтиля.СкрытыйВариантОтчетаЦвет);
	
	КэшЗначений.Вставить("ОбычныйШрифтТекста", ШрифтыСтиля.ОбычныйШрифтТекста);
	КэшЗначений.Вставить("ВажнаяНадписьШрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	КэшЗначений.Вставить("ВариантОтчетаВажныйШрифт", ШрифтыСтиля.ВариантОтчетаВажныйШрифт);
	КэшЗначений.Вставить("ВариантОтчетаОбычныйШрифт", ШрифтыСтиля.ВариантОтчетаОбычныйШрифт);
		
	СоответствиеОтчетов = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка,
	|	ИдентификаторыОбъектовМетаданных.Имя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя ПОДОБНО ""Отчет.%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.Ссылка,
	|	ИдентификаторыОбъектовРасширений.Имя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя ПОДОБНО ""Отчет.%""";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеОтчетов.Вставить(Выборка.Ссылка, Выборка.Имя);
	КонецЦикла;
	КэшЗначений.Вставить("СоответствиеОтчетов", Новый ФиксированноеСоответствие(СоответствиеОтчетов));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки";
	КэшЗначений.Вставить("ЕстьВнешниеОтчеты", НЕ Запрос.Выполнить().Пустой());
	
	ВариантИнтерфейса = ТекущийВариантИнтерфейсаКлиентскогоПриложения();
	КэшЗначений.Вставить("ВариантИнтерфейса", ВариантИнтерфейса);
	КэшЗначений.Вставить("ЭтоМобильныйКлиент", ОбщегоНазначения.ЭтоМобильныйКлиент());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсистемы(Параметры)
	
	ПодсистемыПрограммы.Очистить();
	ПодсистемыПоСсылке = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		
		РеквизитыПодсистемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийРазделСсылка, 
			"Ссылка, Синоним, Имя, ПолноеИмя", Истина);
		СтрокаТаблицы = ПодсистемыПрограммы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РеквизитыПодсистемы);
		СтрокаТаблицы.Представление = РеквизитыПодсистемы.Синоним;
		СтрокаТаблицы.ИмяЭлемента = СтрЗаменить(РеквизитыПодсистемы.ПолноеИмя, ".", "_");
		СтрокаТаблицы.НомерЭлемента  = 0;
		СтрокаТаблицы.РазделСсылка   = ТекущийРазделСсылка;
		ПодсистемыПоСсылке[СтрокаТаблицы.Ссылка] = СтрокаТаблицы.ПолучитьИдентификатор();
		
	Иначе
		
		Если КэшЗначений.ПутьКПодсистеме = ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы() Тогда
			ТекущийРазделПолноеИмя = ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы();
		Иначе
			ТекущийРазделПолноеИмя = "Подсистема." + СтрЗаменить(КэшЗначений.ПутьКПодсистеме, ".", ".Подсистема.");
		КонецЕсли;  
		
		ВсеПодсистемы = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
		ВсеРазделы = ВсеПодсистемы.Строки[0].Строки;
		
		Для Каждого СтрокаРаздел Из ВсеРазделы Цикл
			СтрокаТаблицы = ПодсистемыПрограммы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРаздел);
			СтрокаТаблицы.ИмяЭлемента    = СтрЗаменить(СтрокаРаздел.ПолноеИмя, ".", "_");
			СтрокаТаблицы.НомерЭлемента  = 0;
			СтрокаТаблицы.РазделСсылка   = СтрокаРаздел.Ссылка;
			
			ПодсистемыПоСсылке[СтрокаТаблицы.Ссылка] = СтрокаТаблицы.ПолучитьИдентификатор();
			
			Если СтрокаРаздел.ПолноеИмя = ТекущийРазделПолноеИмя Тогда
				ТекущийРазделСсылка = СтрокаРаздел.Ссылка;
			КонецЕсли;
			
			Найденные = СтрокаРаздел.Строки.НайтиСтроки(Новый Структура("РазделСсылка", СтрокаРаздел.Ссылка), Истина);
			Для Каждого СтрокаДерева Из Найденные Цикл
				СтрокаТаблицы = ПодсистемыПрограммы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
				СтрокаТаблицы.ИмяЭлемента    = СтрЗаменить(СтрокаТаблицы.ПолноеИмя, ".", "_");
				СтрокаТаблицы.НомерЭлемента  = 0;
				СтрокаТаблицы.РодительСсылка = СтрокаДерева.Родитель.Ссылка;
				СтрокаТаблицы.РазделСсылка   = СтрокаРаздел.Ссылка;
				
				ПодсистемыПоСсылке[СтрокаТаблицы.Ссылка] = СтрокаТаблицы.ПолучитьИдентификатор();
				Если СтрокаДерева.ПолноеИмя = ТекущийРазделПолноеИмя Тогда
					ТекущийРазделСсылка = СтрокаДерева.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТекущийРазделСсылка = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для панели отчетов указан несуществующий раздел ""%1"" (см. ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов).'"),
			КэшЗначений.ПутьКПодсистеме);
	КонецЕсли;
	
	КэшЗначений.Вставить("НаименованиеРаздела", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРазделСсылка, 
		"Синоним", Истина));

	КлючНазначенияИспользования = "Раздел_" + Строка(ТекущийРазделСсылка.УникальныйИдентификатор());
	ПодсистемаПоСсылке = Новый ФиксированноеСоответствие(ПодсистемыПоСсылке);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсторию()
	
	История.Очистить();
	СохраненнаяИстория = ХранилищеСистемныхНастроек.Загрузить("СписокОтчетов", "История");
	Если ТипЗнч(СохраненнаяИстория)=Тип("Массив") Тогда
		// Очищаем пустые строки и восстанавливаем историю
		УдалитьБитыеСсылки(СохраненнаяИстория); 
		История.ЗагрузитьЗначения(СохраненнаяИстория);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоОтчетов()

	Если РежимНастройки Тогда
		Возврат СписокОтчетов.Количество();
	КонецЕсли;                             
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Видимость", Истина);
	Возврат СписокОтчетов.НайтиСтроки(СтруктураОтбора).Количество();
	
КонецФункции

&НаСервере
Функция ВариантСсылкаИзНавигационнойСсылкиИзбранного(СтрНавигационнаяСсылка)
	
	Если Не СтрНачинаетсяС(СтрНавигационнаяСсылка, "e1cib/app/Отчет.") <> 0 Тогда
		Возврат СсылкаИзНавигационнойСсылки(СтрНавигационнаяСсылка);
	КонецЕсли;
	
	ПолноеИмяОбъекта = СтрЗаменить(СтрНавигационнаяСсылка, "e1cib/app/", "");
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	
	Возврат Справочники.ВариантыОтчетов.НайтиПоРеквизиту("Отчет", ИдентификаторОМ);
	
КонецФункции

&НаСервере
Функция СсылкаИзНавигационнойСсылки(СтрНавигационнаяСсылка)
	
	МенеджерВариантов = Неопределено;
	
	Если СтрНайти(СтрНавигационнаяСсылка, "Справочник.ВариантыОтчетов") <> 0 Тогда
		МенеджерВариантов = Справочники.ВариантыОтчетов;
	ИначеЕсли СтрНайти(СтрНавигационнаяСсылка, "Справочник.ВариантыДополнительныхОтчетов") <> 0 Тогда
		МенеджерВариантов = Справочники.ВариантыДополнительныхОтчетов;
	КонецЕсли;
	
	Если МенеджерВариантов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Позиция = СтрНайти(СтрНавигационнаяСсылка, "?ref=");
	Если Позиция = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УИДСсылки = Сред(СтрНавигационнаяСсылка, Позиция + 5, 32);
	УИДСтрока = СтрШаблон("%1-%2-%3-%4-%5", Прав(УИДСсылки, 8), Сред(УИДСсылки, 21, 4), Сред(УИДСсылки, 17, 4), Лев(УИДСсылки, 4), Сред(УИДСсылки, 5, 12));
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УИДСтрока) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерВариантов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСтрока));
	
КонецФункции

&НаСервере
Процедура ДобавитьУдалитьИзИзбранного(Вариант, ИмяКоманды, Добавление)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Вариант);
	
	Добавление = Истина;
	
	ИзбранноеРаботыПользователя = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если ИзбранноеРаботыПользователя = Неопределено Тогда
		ИзбранноеРаботыПользователя = Новый ИзбранноеРаботыПользователя;
	КонецЕсли;
	
	Для каждого Элемент Из ИзбранноеРаботыПользователя Цикл
		Если Элемент.НавигационнаяСсылка <> НавигационнаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		Добавление = Ложь;
		НайденныйЭлемент = Элемент;
	КонецЦикла;
	
	Если Добавление Тогда
		Элемент = Новый ЭлементИзбранногоРаботыПользователя;
		Элемент.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Вариант);
		ИзбранноеРаботыПользователя.Добавить(Элемент);
	Иначе
		ИзбранноеРаботыПользователя.Удалить(ИзбранноеРаботыПользователя.Индекс(НайденныйЭлемент));
	КонецЕсли;
	ОбновитьКомандуИзбранное(ИмяКоманды, НЕ Добавление);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", ИзбранноеРаботыПользователя);
	
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьРазделИзбранное()
	
	Избранное.Очистить();
	ИзбранноеРаботыПользователя = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если ИзбранноеРаботыПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из ИзбранноеРаботыПользователя Цикл
		Вариант = ВариантСсылкаИзНавигационнойСсылкиИзбранного(Элемент.НавигационнаяСсылка);
		Если ЗначениеЗаполнено(Вариант) Тогда
			Избранное.Добавить(Вариант);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(ПоОбъекту) И ТипЗнч(ПоОбъекту) = Тип("Структура") И ПоОбъекту.Свойство("Контекст") Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Отчеты по: %1'"), ПоОбъекту.Контекст);
		
	ИначеЕсли ЗначениеЗаполнено(ПоОбъекту) Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Отчеты по: %1'"), ПоОбъекту);
		
	ИначеЕсли Раздел = РазделВсеОтчеты() 
		И КэшЗначений.ПутьКПодсистеме = ВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы() Тогда
		
		Заголовок = НСтр("ru = 'Все отчеты (Главное)'");
		
	ИначеЕсли Раздел = РазделВсеОтчеты() И ЗначениеЗаполнено(ТекущийРазделСсылка) Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Все отчеты (%1)'"), КэшЗначений.НаименованиеРаздела);
		
	ИначеЕсли Раздел = РазделВсеОтчеты() Тогда
		
		Заголовок = НСтр("ru = 'Все отчеты'");
		
	ИначеЕсли Раздел = РазделИзбранные() Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Избранные отчеты (%1)'"), КэшЗначений.НаименованиеРаздела);
		
	ИначеЕсли Раздел = РазделПоследние() Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Последние отчеты (%1)'"), КэшЗначений.НаименованиеРаздела);
		
	ИначеЕсли Раздел = РазделВнешние() Тогда
		
		Заголовок = НСтр("ru = 'Внешние отчеты'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьБитыеСсылки(Массив)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Ссылка В(&Ссылки)
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Ссылка В(&Ссылки)
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления";
	МассивНайденных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Количество = Массив.Количество();
	Для ии = 0 По Количество - 1 Цикл
		Индекс = Количество - 1 - ии;
		Отчет = Массив[Индекс];
		Если МассивНайденных.Найти(Отчет)=Неопределено Тогда
			Массив.Удалить(Индекс);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция НайтиТегиОтчеты(Текст, КонтекстноеОткрытие)
	
	Список = Новый СписокЗначений;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Список;
	КонецЕсли; 
	ОтчетыПользователя = ВариантыОтчетов.ОтчетыТекущегоПользователя();
	ОтключенныеПредопределенныеВарианты = ОтчетыУНФПовтИсп.ПредопределенныеВариантыНедоступныеПоФО();
	ОтключенныеВарианты = ОтчетыУНФПовтИсп.ВариантыНедоступныеПоФО();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("КонтекстноеОткрытие", КонтекстноеОткрытие);
	Запрос.УстановитьПараметр("ОтчетыПользователя", ОтчетыПользователя);
	Запрос.УстановитьПараметр("ОтключенныеПредопределенныеВарианты", ОтключенныеПредопределенныеВарианты);
	Запрос.УстановитьПараметр("ОтключенныеВарианты", ОтключенныеВарианты);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	1 КАК Порядок,
	|	ТегиОтчетов.Ссылка КАК Ссылка,
	|	ТегиОтчетов.Наименование КАК Представление
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование ПОДОБНО &Текст + ""%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	2,
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО (НастройкиВариантовОтчетовУНФ.Вариант = ВариантыОтчетов.Ссылка)
	|ГДЕ
	|	ВариантыОтчетов.Наименование ПОДОБНО ""%"" + &Текст + ""%""
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
	|	И НЕ ВариантыОтчетов.Ссылка В (&ОтключенныеВарианты)
	|	И (ВариантыОтчетов.ТолькоДляАвтора
	|				И ВариантыОтчетов.Автор = &Пользователь
	|			ИЛИ ВариантыОтчетов.Автор В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
	|			ИЛИ ВариантыОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					НастройкиВариантовОтчетов.Вариант
	|				ИЗ
	|					РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|				ГДЕ
	|					НастройкиВариантовОтчетов.Пользователь = &Пользователь
	|					И НастройкиВариантовОтчетов.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка))
	|					И НастройкиВариантовОтчетов.Видимость))
	|	И (ВариантыОтчетов.ПредопределенныйВариант.Включен
	|			ИЛИ ВариантыОтчетов.Пользовательский
	|			ИЛИ &КонтекстноеОткрытие
	|			ИЛИ ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	2,
	|	ВариантыДополнительныхОтчетов.Ссылка,
	|	ВариантыДополнительныхОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Наименование ПОДОБНО ""%"" + &Текст + ""%""
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|	И (НЕ ВариантыДополнительныхОтчетов.ТолькоДляАвтора
	|			ИЛИ ВариантыДополнительныхОтчетов.Автор = &Пользователь)
	|	И НЕ &КонтекстноеОткрытие
	|	И НЕ ВариантыДополнительныхОтчетов.Контекстный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|АВТОУПОРЯДОЧИВАНИЕ";
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьТочноеСовпадение = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Текст=Выборка.Представление Тогда
			ЕстьТочноеСовпадение = Истина;
		КонецЕсли; 
		Список.Добавить(Выборка.Ссылка, 
		СформироватьПредставлениеЭлементаСписка(Выборка.Представление, Текст),, 
		?(Выборка.Порядок=2, БиблиотекаКартинок.Отчет, БиблиотекаКартинок.Тег)); 
	КонецЦикла;
	Если НЕ ЕстьТочноеСовпадение Тогда
		Список.Вставить(0, Текст, """"+Текст+"""");
	КонецЕсли; 
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеЭлементаСписка(Представление, Текст)
	
	Позиция = Найти(НРег(Представление), НРег(Текст));
	Если Позиция>0 Тогда
		ТекстДо = Лев(Представление, Позиция-1);
		ТекстЦентр = Сред(Представление, Позиция, СтрДлина(Текст));
		ТекстПосле = Сред(Представление, Позиция+СтрДлина(Текст));
		ВыделенныйТекст = Новый ФорматированнаяСтрока(ТекстЦентр, Новый Шрифт(Новый Шрифт,,, Истина), WebЦвета.ЗеленыйЛес);
		РезультатФункции = Новый ФорматированнаяСтрока(ТекстДо, ВыделенныйТекст, ТекстПосле);
	Иначе
		РезультатФункции = Представление;
	КонецЕсли; 
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазвернутьОтчетыДоВариантов(СписокИдентификаторовОтчетов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", СписокИдентификаторовОтчетов.ВыгрузитьЗначения());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет В(&Отчеты)";
	СписокИдентификаторовОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСлужебныйОтчет(Вариант)
	
	ОтчетыУНФВызовСервера.ДобавитьОтчетВИсторию(Вариант);
	
	ДанныеОтчета = ДанныеОтчетаПоВарианту(Вариант);
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.КлючВарианта) ИЛИ НЕ ЗначениеЗаполнено(ДанныеОтчета.ИмяОтчета) Тогда
		// Для случая, когда отчет открыт из строки поиска и его описание не хранится в таблице следует получить данные отчета
		// из БД
		ДанныеОтчета = ДанныеОтчетаПоВариантуИзБД(Вариант);
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("КлючВарианта", ДанныеОтчета.КлючВарианта);
	ОткрытьФорму("Отчет."+ДанныеОтчета.ИмяОтчета+".Форма", СтруктураОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Вариант)
	
	ОтчетыУНФВызовСервера.ДобавитьОтчетВИсторию(Вариант);
	
	ПараметрыОткрытия = Новый Структура;
	Если НЕ СвязанныеПоля = Неопределено Тогда
		ОписаниеСвязи = СвязанныеПоля.Получить(Вариант);
		Если ОписаниеСвязи = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
		Если ТипЗнч(ПоОбъекту) = Тип("Структура") Тогда
			Для каждого КлючИЗначение Из ПоОбъекту Цикл
				Если КлючИЗначение.Ключ = "Контекст" Тогда
					Продолжить;
				КонецЕсли; 
				ПараметрыОткрытия.Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла; 
		Иначе
			ПараметрыОткрытия.Вставить("Контекст", ПоОбъекту);
			Если ОписаниеСвязи.СложныйАлгоритм Тогда
				ПараметрыОткрытия.Вставить("СложныйАлгоритм", ОписаниеСвязи.СложныйАлгоритм);
				ПараметрыОткрытия.Вставить("ПолеСвязи", ОписаниеСвязи.Поле);
				Отказ = Ложь;
				ДобавитьОтборыСложногоКонтекстногоОткрытия(Вариант, ПараметрыОткрытия, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			Иначе
				ПараметрыОткрытия.Отбор.Вставить(ОписаниеСвязи.Поле, ПоОбъекту);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОтборыСложногоКонтекстногоОткрытия(Вариант, ПараметрыОткрытия, Отказ);
	
	Отчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вариант, "Отчет");
	Если НЕ ЗначениеЗаполнено(Отчет) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сложные алгоритмы контекстного открытия доступны только для встроенных отчетов.
                  |Для решения вопроса обратитесь к администратору.'"));
		Возврат;
	КонецЕсли;  
	ПолноеИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет, "ПолноеИмя");
	ОтчетОбъект = Новый(СтрЗаменить(ПолноеИмя, "Отчет.", "ОтчетОбъект."));
	Попытка
		ОтчетОбъект.ПриКонтекстномОткрытии(ПараметрыОткрытия.Контекст, ПараметрыОткрытия.ПолеСвязи, ПараметрыОткрытия.Отбор, 
			Отказ);	
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Ошибка вызова интерфейса контекстного открытия отчета.
                  |Для решения вопроса обратитесь к администратору.'"));
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныйОтчет(Вариант)
	
	СуществующийЭлемент = История.НайтиПоЗначению(Вариант);
	Если НЕ СуществующийЭлемент=Неопределено Тогда
		История.Удалить(СуществующийЭлемент);
	КонецЕсли; 
	История.Вставить(0, Вариант);
	
	ВыполняемаяКоманда = ДанныеКомандыВнешнегоОтчета(Вариант);
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		ВыполняемаяКоманда.ОбъектыНазначения = Новый Массив;
		ВыполняемаяКоманда.ОбъектыНазначения.Добавить(ПоОбъекту);
	КонецЕсли;
	
	Если ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы") Тогда
		
		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеФормыОбработки(ВыполняемаяКоманда, ВладелецФормы, ВыполняемаяКоманда.ОбъектыНазначения);
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода") Тогда
		
		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКлиентскийМетодОбработки(ВыполняемаяКоманда, ВладелецФормы, ВыполняемаяКоманда.ОбъектыНазначения);
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода")
		Или ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме") Тогда
		
		ПараметрыВызоваСервера = Новый Структура;
		ПараметрыВызоваСервера.Вставить("ДополнительнаяОбработкаСсылка", ВыполняемаяКоманда.Ссылка);
		ПараметрыВызоваСервера.Вставить("ИдентификаторКоманды", ВыполняемаяКоманда.Идентификатор);
		ПараметрыВызоваСервера.Вставить("ОбъектыНазначения", ВыполняемаяКоманда.ОбъектыНазначения);
		
		РезультатФоновогоЗадания = ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера);
		
		Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			ПоказатьРезультатВыполненияОбработки();
		Иначе
			Если ВыполняемаяКоманда.ПоказыватьОповещение Тогда
				Состояние(НСтр("ru = 'Выполняется команда...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
			КонецЕсли;
			Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеОткрытиеОтчетаВыполнено", ЭтотОбъект, Истина);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"ДополнительныеОтчетыИОбработки.ВыполнитьКоманду",
		ПараметрыВызоваСервера,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатВыполненияОбработки()
	
	Если НЕ ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресХранилища) Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	// Добавление оповещения в результат выполнения (если требуется).
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	
	// Показать всплывающее оповещение.
	Если ВыполняемаяКоманда.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Команда выполнена'"),, ВыполняемаяКоманда.Представление);
	КонецЕсли;
	
	// Обновить форму владельца
	Попытка
		ВладелецФормы.Прочитать();
	Исключение
		// Действие не требуется.
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеОткрытиеОтчетаВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ПоказатьРезультатВыполненияОбработки();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(ИнформацияОбОшибке());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеКомандыВнешнегоОтчета(Вариант)
	
	ВыполняемаяКоманда = Новый Структура(
		"Ссылка, Представление, 
		|Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
		|Модификатор, ОбъектыНазначения, ЭтоОтчет, Вид");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска,
	|	ДополнительныеОтчетыИОбработкиКоманды.Представление,
	|	ДополнительныеОтчетыИОбработкиКоманды.ПоказыватьОповещение,
	|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид КАК Вид
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ПО ВариантыДополнительныхОтчетов.Отчет = ДополнительныеОтчетыИОбработкиКоманды.Ссылка
	|			И ВариантыДополнительныхОтчетов.ИдентификаторКоманды = ДополнительныеОтчетыИОбработкиКоманды.Идентификатор
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Ссылка = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		ЗаполнитьЗначенияСвойств(ВыполняемаяКоманда, Выборка);
		ВыполняемаяКоманда.ЭтоОтчет = Истина;
	КонецЕсли; 
	Возврат ВыполняемаяКоманда;
	
КонецФункции

&НаСервере
Процедура УдалитьОтчетНаСервере(Вариант)
	
	Вариант.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОтчетаПоИдентификатору(УИД)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	НайденныеСтроки = СписокОтчетов.НайтиСтроки(Новый Структура("УИД", УИД));
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, НайденныеСтроки[0]);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеОтчетаПоВарианту(Вариант)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	НайденныеСтроки = СписокОтчетов.НайтиСтроки(Новый Структура("Вариант", Вариант));
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, НайденныеСтроки[0]);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеОтчетаПоВариантуИзБД(Вариант)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Вариант,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Ссылка = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Режим = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("ФормаСпискаОтчетов", "Режим", РежимСписок());
	Элементы.РежимКартинки.Пометка = ИспользуетсяРежимКартинки();
	Элементы.РежимСписок.Пометка = Не Элементы.РежимКартинки.Пометка;
	
	ПоказыватьПодсказки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("ФормаСпискаОтчетов", "ПоказыватьПодсказки", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПодсистемуПоСсылке(Форма, Ссылка)
	Идентификатор = Форма.ПодсистемаПоСсылке[Ссылка];
	Если Идентификатор <> Неопределено Тогда
		Возврат Форма.ПодсистемыПрограммы.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	Найденные = Форма.ПодсистемыПрограммы.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
	Если Найденные.Количество() = 1 Тогда
		Возврат Найденные[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПоследнийОтображенныйОтчет()
	
	Для каждого СтрокаОтчета Из СписокОтчетов Цикл
		Если НЕ СтрокаОтчета.Видимость И НЕ РежимНастройки Тогда
			Продолжить;	
		КонецЕсли;     
		КоличествоОтображаемыхОтчетов = КоличествоОтображаемыхОтчетов - 1;
		Если КоличествоОтображаемыхОтчетов = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;      
	Если КоличествоОтображаемыхОтчетов = 0 И СтрокаОтчета <> Неопределено Тогда
		Возврат СтрокаОтчета.УИД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ЗамерПроизводительности

&НаКлиенте
Функция НачатьЗамер(Событие, Комментарий = Неопределено)
	
	Если Комментарий = Неопределено Тогда
		Комментарий = КэшЗначений.ПрефиксЗамеров;
	КонецЕсли;
	
	Замер = Новый Структура("Имя, Идентификатор, МодульОценкаПроизводительностиКлиент");
	Если Событие = "СписокОтчетов.Открытие" Или Событие = "ПанельОтчетов.Открытие" Тогда
		Замер.Имя = Событие;
		Комментарий = Комментарий + "; " + НСтр("ru = 'Из панели отчетов:'") + " " + КэшЗначений.ПутьКПодсистеме;
	Иначе
		Если РежимНастройки Или Событие = "ВыходИзРежимаНастройки" Тогда
			Замер.Имя = "ПанельОтчетов.РежимНастройки";
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
			Замер.Имя = "ПанельОтчетов.Поиск"; // Сам по себе поиск интересен только в режиме просмотра.
		КонецЕсли;
		Комментарий = Комментарий + "; " + КэшЗначений.ПутьКПодсистеме;
		Комментарий = Комментарий + "; " + НСтр("ru = 'Подсказки:'") + " " + Строка(ПоказыватьПодсказки);
	КонецЕсли;
	
	Если Замер.Имя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Комментарий = Комментарий
			+ "; " + НСтр("ru = 'Поиск:'") + " " + Строка(СтрокаПоиска)
			+ "; " + НСтр("ru = 'Во всех разделах:'") + " " + Строка(ИскатьВоВсехРазделах);
	Иначе
		Комментарий = Комментарий + "; " + НСтр("ru = 'Без поиска'");
	КонецЕсли;
	
	Если Событие = "ВыходИзРежимаНастройки" Тогда
		Комментарий = Комментарий + "; " + НСтр("ru = 'Выход из режима настройки'");
	КонецЕсли;
	Замер.МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
	Замер.Идентификатор = Замер.МодульОценкаПроизводительностиКлиент.ЗамерВремени(Замер.Имя);
	Замер.МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер.Идентификатор, Комментарий);
	
	Возврат Замер;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьЗамер(Замер)
	Если Замер <> Неопределено Тогда
		Замер.МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Замер.Идентификатор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтрокиКонстанты

&НаКлиентеНаСервереБезКонтекста
Функция РежимКартинки()

	Возврат "РежимКартинки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимСписок()

	Возврат "РежимСписок";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделВсеОтчеты()
	
	Возврат "ВсеОтчеты";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделИзбранные()
	
	Возврат "Избранные";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделПоследние()
	
	Возврат "Последние";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделВнешние()
	
	Возврат "Внешние";
	
КонецФункции

#КонецОбласти

#КонецОбласти
