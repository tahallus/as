#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОбработатьПереданныеПараметры();
	
	Элементы.ДанныеДляУточненияИдентификаторПроисхожденияВЕТИС.Заголовок = ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий(ПараметрыУказанияСерий, Метаданные.ОбщиеФормы.УточнениеСоставаУпаковкиИС, ЭтотОбъект);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	ВывестиПоясняющийТекст();
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ДанныеДляУточненияХарактеристика", "Элементы.ДанныеДляУточнения.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ДанныеДляУточненияСерия", "Элементы.ДанныеДляУточнения.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ДанныеДляУточненияСерия", "Элементы.ДанныеДляУточнения.ТекущиеДанные.Характеристика");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СопоставитьВыделенные(Команда)
	
	Если Элементы.ДанныеДокумента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьТекущиеНаСервере(Элементы.ДанныеДокумента.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеДляУточненияПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.ГруппаДанныеДокумента.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДанныеДляУточнения.ВыделенныеСтроки;
	Отбор = Новый Структура;
	ДопустимОбщийВыбор = Истина;
	Для Счетчик=1 По ВыделенныеСтроки.Количество() Цикл
		Строка = ДанныеДляУточнения.НайтиПоИдентификатору(ВыделенныеСтроки[Счетчик-1]);
		ДопустимОбщийВыбор = ДопустимОбщийВыбор И ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, "Номенклатура");
		ДопустимОбщийВыбор = ДопустимОбщийВыбор И ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, "Характеристика");
		ДопустимОбщийВыбор = ДопустимОбщийВыбор И ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, "Серия");
		ДопустимОбщийВыбор = ДопустимОбщийВыбор И ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, "ИдентификаторПроисхожденияВЕТИС");
		ДопустимОбщийВыбор = ДопустимОбщийВыбор И ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, "СрокГодности");
	КонецЦикла;
	
	Если Не ДопустимОбщийВыбор Тогда
		Отбор = Новый Структура("Выбрать", Неопределено);
	КонецЕсли;
		
	Если Отбор.Количество() Тогда
		Элементы.ДанныеДокумента.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.ДанныеДокумента.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясняющийТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, КодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляУточненияНоменклатураПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ТекущиеДанные = Элементы.ДанныеДляУточнения.ТекущиеДанные;
		ТекущиеДанныеСтруктурой = Новый Структура("Номенклатура,Характеристика,Серия,ХарактеристикиИспользуются,
		|   СтатусУказанияСерий,ТипНоменклатуры,Склад,Количество");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеСтруктурой, ТекущиеДанные);
		ТекущиеДанныеСтруктурой.Склад = Склад;
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиентПереопределяемый");
		Модуль.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущиеДанныеСтруктурой, Неопределено, ПараметрыУказанияСерий);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущиеДанныеСтруктурой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляУточненияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект, ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, Элементы.ДанныеДляУточнения.ТекущиеДанные);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляУточненияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(КодМаркировки) Тогда
		ВидыПродукцииПоКодуМаркировкиОстатков(ВидыПродукции, КодМаркировки, ПараметрыСканирования.Организация);
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, ВидыПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляУточненияИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеДляУточнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПВЕТИСКлиент");
	ПараметрыОткрытия = Модуль.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ТекущиеДанные);
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация = ПараметрыСканирования.Организация;
	Модуль.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"ДанныеДляУточненияХарактеристика", "ДанныеДляУточнения.ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект,
		"ДанныеДляУточненияСерия", "ДанныеДляУточнения.СтатусУказанияСерий", "ДанныеДляУточнения.ТипНоменклатуры");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДляУточненияНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДанныеДляУточненияНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДанныеДляУточнения.ПредставлениеНоменклатуры"));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры()
	
	АдресДереваУпаковок    = Параметры.АдресДереваУпаковок;
	КодМаркировки          = Параметры.КодМаркировки;
	ПараметрыСканирования  = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ПараметрыСканирования);
	ПараметрыУказанияСерий = ПараметрыСканирования.ПараметрыУказанияСерий;
	Склад                  = ПараметрыСканирования.Склад;
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(АдресДереваУпаковок);
	Упаковка = НайтиСтрокуДереваПоКодуМаркировки(ДеревоУпаковок, КодМаркировки);
	ЗаполнитьТребующиеУточненияДанныеУпаковки(Упаковка);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ДанныеДляУточнения);
	
	ОбработатьРежимВыбораИзДокумента();
	
	Если Не (ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС") И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС) Тогда
		Элементы.ДанныеДляУточненияИдентификаторПроисхожденияВЕТИС.Видимость = Ложь;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") И ПараметрыСканирования.ЗаполнятьСрокГодности) Тогда
		Элементы.ДанныеДляУточненияСрокГодности.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
		Элементы.ДанныеДляУточненияНоменклатура.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоясняющийТекст()
	
	Элементы.ПоясняющийТекст.Высота = 2;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обработка кода упаковки:'"),, ЦветаСтиля.ПоясняющийТекст));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(КодМаркировки, Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, "СкопироватьКодМаркировкиВБуферОбмена"));
	МассивСтрок.Добавить(". ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Требуется уточнить коды маркировки.'"),, ЦветаСтиля.ПоясняющийТекст));
	
	ПоясняющийТекст = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРежимВыбораИзДокумента()
	
	Колонки = Новый Массив;
	
	Если Параметры.ДанныеДокумента.Количество() Тогда
		
		Элемент = Параметры.ДанныеДокумента[0];
		// Настроим колонки таблицы выбора
		Для Каждого Колонка Из ДанныеДокумента.Выгрузить().Колонки Цикл
			Если Элементы.Найти("ДанныеДокумента"+Колонка.Имя)=Неопределено Тогда
			ИначеЕсли Не Элемент.Свойство(Колонка.Имя) Тогда
				Элементы["ДанныеДокумента"+Колонка.Имя].Видимость = Ложь;
			Иначе
				Колонки.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		// Загрузим данные документа для выбора
		Для Каждого ВариантВыбора Из Параметры.ДанныеДокумента Цикл
			НоваяСтрока = ДанныеДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантВыбора);
		КонецЦикла;
		
		ТаблицаДанныеДокумента = ДанныеДокумента.Выгрузить();
		ТаблицаДанныеДокумента.Свернуть("Номенклатура,Характеристика,Серия,ИдентификаторПроисхожденияВЕТИС,СрокГодности","Количество");
		ДанныеДокумента.Загрузить(ТаблицаДанныеДокумента);
		Для Каждого СтрокаДанныеДокумента Из ДанныеДокумента Цикл
			ЭтоПустаяСтрока = Истина;
			Для Каждого ВидимаяКолонка Из Колонки Цикл
				ЭтоПустаяСтрока = ЭтоПустаяСтрока И Не ЗначениеЗаполнено(СтрокаДанныеДокумента[ВидимаяКолонка]);
			КонецЦикла;
			Если ЭтоПустаяСтрока Тогда
				СтрокаДанныеДокумента.ПредставлениеПустого = НСтр("ru = '<указание не требуется>'");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Элементы.ГруппаДанныеДокумента.Видимость = Ложь;
		Элементы.ДекорацияСценарийРаботы.Видимость = Ложь;
		Элементы.КоманднаяПанельУточнитьПоДаннымДокумента.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТребующиеУточненияДанныеУпаковки(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		ТребуетсяУточнение = Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура);
		
		Если Не ТребуетсяУточнение
				И Не ЗначениеЗаполнено(СтрокаДерева.Серия)
				И ПараметрыУказанияСерий <> Неопределено Тогда
			ДанныеДляРасчетаСерии = Новый Структура("Склад, Номенклатура, Характеристика", Склад, СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика);
			ИнтеграцияИСПереопределяемый.ПриОпределенииНеобходимостиВыбораСерии(
				ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяУточнение, ПараметрыСканирования.КэшированныеЗначения);
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
				И ПараметрыСканирования.ЗаполнятьСрокГодности
				И Не ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
			ТребуетсяУточнение = Истина;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
				И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
				И Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС) Тогда
			ТребуетсяУточнение = Истина;
		КонецЕсли;
		
		Если ТребуетсяУточнение Тогда
			НоваяСтрока = ДанныеДляУточнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") И ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
				НоваяСтрока.СрокГодности = СтрокаДерева.ГоденДо;
			КонецЕсли;
			НоваяСтрока.НомерСтроки = ДанныеДляУточнения.Количество();
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			ЗаполнитьТребующиеУточненияДанныеУпаковки(ВложеннаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьРеквизитВыделенныхСтрок(Строка, Отбор, ИмяРеквизита, ДополнитьОтбор = Истина)
	Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
		Если Не Отбор.Свойство(ИмяРеквизита) Тогда
			Если ДополнитьОтбор Тогда
				Отбор.Вставить(ИмяРеквизита, Строка[ИмяРеквизита]);
			КонецЕсли;
		ИначеЕсли Строка[ИмяРеквизита] <> Отбор[ИмяРеквизита] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция НайтиСтрокуДереваПоКодуМаркировки(ДеревоУпаковок, КодМаркировки)
	
	Возврат ДеревоУпаковок.Строки.Найти(КодМаркировки, "ШтрихКод", Истина);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВидыПродукцииПоКодуМаркировкиОстатков(ВидыПродукции, КодМаркировки, Организация)
	
	Если ВидыПродукции.Количество() = 1
		Или Не ЗначениеЗаполнено(КодМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		ВидыПродукцииКодаМаркировки = Модуль.ВидыПродукцииПоКодуМаркировкиОстатков(КодМаркировки, Организация);
		Если ВидыПродукцииКодаМаркировки <> Неопределено Тогда
			ВидыПродукции = ИнтеграцияИС.ПересечениеМассивов(ВидыПродукции, ВидыПродукцииКодаМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьТекущиеНаСервере(СтрокаДанныеДокумента)
	
	ТекущиеДанные = ДанныеДокумента.НайтиПоИдентификатору(СтрокаДанныеДокумента);
	КэшированныеЗначения = Неопределено;
	Для Каждого Идентификатор Из Элементы.ДанныеДляУточнения.ВыделенныеСтроки Цикл
		СтрокаТаблицы = ДанныеДляУточнения.НайтиПоИдентификатору(Идентификатор);
		ТребуетсяВызовПриИзмененииНоменклатуры = (СтрокаТаблицы.Номенклатура <> ТекущиеДанные.Номенклатура);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущиеДанные);
		Если ТребуетсяВызовПриИзмененииНоменклатуры
			И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМППереопределяемый");
			Модуль.ПриИзмененииНоменклатуры(ЭтотОбъект, СтрокаТаблицы, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИдентификатораПроисхожденияВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДанныеДляУточнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Результат;
	Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		СрокГодности = СрокГодностиПоИдентификаторуПроисхожденияВЕТИС(Результат);
		Если ЗначениеЗаполнено(СрокГодности) Тогда
			ТекущиеДанные.СрокГодности = СрокГодности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокГодностиПоИдентификаторуПроисхожденияВЕТИС(ИдентификаторПроисхождения)
	
	ИдентификаторыПроисхождения = Новый Массив;
	ИдентификаторыПроисхождения.Добавить(ИдентификаторПроисхождения);
	Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
	ДанныеИдентификаторов = Модуль.ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения);
	Если ДанныеИдентификаторов.Получить(ИдентификаторПроисхождения) <> Неопределено Тогда
		Возврат ДанныеИдентификаторов.Получить(ИдентификаторПроисхождения).СрокГодности;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ЗавершениеОбработки

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбновитьИзмененныеОбъекты() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(КодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	Отказ = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДанныеДляУточнения Цикл
		
		Индекс = ДанныеДляУточнения.Индекс(СтрокаТаблицы) + 1;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Требуется уточнение номенклатуры кода маркировки'"),,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеДляУточнения", Индекс, "Номенклатура"),,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Характеристика)
			И СтрокаТаблицы.ХарактеристикиИспользуются Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Требуется уточнение характеристики номенклатуры'"),,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеДляУточнения", Индекс, "Характеристика"),,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Серия)
			И ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтрокаТаблицы.СтатусУказанияСерий) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Требуется уточнение серии номенклатуры'"),,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеДляУточнения", Индекс, "Серия"),,
				Отказ);
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
				И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторПроисхожденияВЕТИС) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Требуется уточнение идентификатора происхождения ВетИС'"),,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеДляУточнения", Индекс, "ИдентификаторПроисхожденияВЕТИС"),,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") И ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СрокГодности) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Требуется уточнение срока годности'"),,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеДляУточнения", Индекс, "СрокГодности"),,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Функция ОбновитьИзмененныеОбъекты()
	
	Отказ = ОбновитьЗаполненныеШтрихкодыУпаковок();
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьДанныеУпаковокПоАдресуДереваУпаковок();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбновитьЗаполненныеШтрихкодыУпаковок()
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(АдресДереваУпаковок);
	Для Каждого СтрокаРезультат Из ДанныеДляУточнения Цикл
		СтрокаДерева = НайтиСтрокуДереваПоКодуМаркировки(ДеревоУпаковок, СтрокаРезультат.Штрихкод);
		Если (СтрокаДерева.Номенклатура <> СтрокаРезультат.Номенклатура
				Или СтрокаДерева.Характеристика <> СтрокаРезультат.Характеристика
				Или СтрокаДерева.Серия <> СтрокаРезультат.Серия)
			И ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
			
			ИсходныеРеквизиты = Новый Структура("Номенклатура,Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(ИсходныеРеквизиты, СтрокаДерева);
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаРезультат);
			
			НачатьТранзакцию();
			Попытка
				ШтрихкодированиеИС.ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(СтрокаДерева, Неопределено, ПараметрыСканирования);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Запись штрихкода упаковки'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				Возврат Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеУпаковокПоАдресуДереваУпаковок()
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(АдресДереваУпаковок);
	
	ГруппыКПересортировке = Новый Соответствие;
	
	Для Каждого СтрокаРезультат Из ДанныеДляУточнения Цикл
		СтрокаДерева = НайтиСтрокуДереваПоКодуМаркировки(ДеревоУпаковок, СтрокаРезультат.Штрихкод);
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаРезультат);
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") И ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
			СтрокаДерева.ГоденДо = СтрокаРезультат.СрокГодности;
		КонецЕсли;
		ГруппыКПересортировке.Вставить(СтрокаДерева.Родитель);
	КонецЦикла;
	
	Для Каждого Группа Из ГруппыКПересортировке Цикл
		Группа.Ключ.Строки.Сортировать("Номенклатура,Характеристика,Серия,Штрихкод");
	КонецЦикла;
	
	Если (ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
			И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС)
		Или (ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
			И ПараметрыСканирования.ЗаполнятьСрокГодности) Тогда
		СтрокаДерева = НайтиСтрокуДереваПоКодуМаркировки(ДеревоУпаковок, КодМаркировки);
		ЗаполнитьСрокиГодностиВУпаковках(СтрокаДерева);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДеревоУпаковок, АдресДереваУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокиГодностиВУпаковках(СтрокаДерева)
	
	Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
		ЗаполнитьСрокиГодностиВУпаковках(ВложеннаяСтрока);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеДанные = Новый Структура("Заполнено,ИдентификаторПроисхожденияВЕТИС,ГоденДо");
	
	ЭлементДляПроверки = Новый Структура("ИдентификаторПроисхожденияВЕТИС,ГоденДо");
	
	Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
		Если ОбщиеДанные.Заполнено = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбщиеДанные, ВложеннаяСтрока);
			ОбщиеДанные.Заполнено = Истина;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭлементДляПроверки, ВложеннаяСтрока);
			ОбщиеДанные.Заполнено = ОбщиеДанные.Заполнено
				И ОбщиеДанные.ИдентификаторПроисхожденияВЕТИС = ЭлементДляПроверки.ИдентификаторПроисхожденияВЕТИС
				И ОбщиеДанные.ГоденДо = ЭлементДляПроверки.ГоденДо;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщиеДанные.Заполнено = Истина Тогда
		ЗаполнитьЗначенияСвойств(ЭлементДляПроверки, ОбщиеДанные);
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ЭлементДляПроверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти