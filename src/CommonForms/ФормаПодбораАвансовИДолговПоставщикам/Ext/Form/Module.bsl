
&НаКлиенте
Процедура ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока)
	
	Если ИмяТЧ = "Дебитор"
		И ВидОперации = ВидОперацииЗачетАвансовПоставщику
		И НЕ ТекущаяСтрока.ПризнакАванса Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Можно подобрать только авансовые платежи'"));
		Возврат;
	ИначеЕсли ИмяТЧ = "Кредитор"
		И ВидОперации = ВидОперацииЗачетАвансовПоставщику
		И ТекущаяСтрока.ПризнакАванса Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Можно подобрать только строку с долгом, а не с авансом'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Документ, Заказ", ТекущаяСтрока.Документ, ТекущаяСтрока.Заказ);
	Строки = СписокОтобранныеАвансыИДолги.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() > 0 Тогда
		НоваяСтрока = Строки[0];
		СуммаРасчетов = СуммаРасчетов + НоваяСтрока.СуммаРасчетов;
	Иначе
		НоваяСтрока = СписокОтобранныеАвансыИДолги.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока.СуммаРасчетов = СуммаРасчетов;
	
	НоваяСтрока.Курс = ?(НоваяСтрока.Курс = 0, 1, НоваяСтрока.Курс);
	НоваяСтрока.Кратность = ?(НоваяСтрока.Кратность = 0, 1, НоваяСтрока.Кратность);
	
	НоваяСтрока.Курс = ?(
		НоваяСтрока.СуммаРасчетов = 0,
		1,
		ТекущаяСтрока.СуммаУчета / ТекущаяСтрока.СуммаРасчетов * КурсВалютаУчета
	);
	
	Если НЕ УчетВалютныхОпераций Тогда
		НоваяСтрока.СуммаУчета = ТекущаяСтрока.СуммаРасчетов;
	ИначеЕсли ЗапрашиватьСумму ИЛИ Строки.Количество() > 0 Тогда
		НоваяСтрока.СуммаУчета = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаРасчетов,
			НоваяСтрока.Курс,
			КурсВалютаУчета,
			НоваяСтрока.Кратность,
			КратностьВалютаУчета
		);
	КонецЕсли;
	
	Элементы.СписокОтобранныеАвансыИДолги.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	РассчитатьСуммыИтог();
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ)
	
	// Проверка заполненности реквизитов.
	НомерСтроки = 0;
		
	Для каждого СтрокаСписокОтобранныеАвансыИДолги Из СписокОтобранныеАвансыИДолги Цикл
		НомерСтроки = НомерСтроки + 1;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Курс) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Курс"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Кратность) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Кратность"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма расчетов"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаУчета) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма учета"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура рассчитывает итоговые суммы.
//
&НаКлиенте
Процедура РассчитатьСуммыИтог()
	
	СуммаУчетаИтог = 0;
	
	Для каждого ТекСтрока Из СписокОтобранныеАвансыИДолги Цикл
		СуммаУчетаИтог = СуммаУчетаИтог + ТекСтрока.СуммаУчета;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммыИтог()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенные значения
	ВидОперацииЗачетАвансовПоставщику = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику;
	
	// Фильтр по типу расчетов
	ТипРасчета = Перечисления.ТипыРасчетов.ПустаяСсылка();
	Элементы.СписокТиповРасчета.СписокВыбора.Добавить(Перечисления.ТипыРасчетов.ПустаяСсылка(), НСтр("ru = 'Долги + Авансы'"));
	Элементы.СписокТиповРасчета.СписокВыбора.Добавить(Перечисления.ТипыРасчетов.Аванс, НСтр("ru = 'Авансы'"));
	Элементы.СписокТиповРасчета.СписокВыбора.Добавить(Перечисления.ТипыРасчетов.Долг, НСтр("ru = 'Долги'"));
	
	Компания = Параметры.Компания;
	Контрагент = Параметры.Контрагент;
	Ссылка = Параметры.Ссылка;
	Дата = Параметры.Дата;
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	Если Параметры.Свойство("ДебиторСуммаУчетаИтог") И Параметры.Свойство("ВидОперации") И Параметры.Свойство("ИмяТЧ")
		И 
		(	Параметры.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику
			ИЛИ 
			Параметры.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику)
		Тогда
		
		СуммаУчетаИтогВДокументе = Параметры.ДебиторСуммаУчетаИтог;
		ВидОперации = Параметры.ВидОперации;
		ИмяТЧ = Параметры.ИмяТЧ;
		Элементы.СуммаУчетаИтогВДокументе.Видимость = Истина;
		
		Если Параметры.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику Тогда
			Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьДолгами.Видимость = (Параметры.ИмяТЧ = "Кредитор");
			Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьАвансами.Видимость = (Параметры.ИмяТЧ = "Дебитор");
		Иначе
			Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьДолгами.Видимость = Истина;
			Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьАвансами.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		СуммаУчетаИтогВДокументе = 0;
		Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьДолгами.Видимость = Ложь;
		Элементы.СуммаУчетаИтогВДокументе.Видимость = Ложь;
		Если Параметры.Свойство("ВидОперации") Тогда
			ВидОперации = Параметры.ВидОперации;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику;
		КонецЕсли;
		ИмяТЧ = "";
		
		Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьДолгами.Видимость = Истина;
		Элементы.СписокОтобранныеАвансыИДолгиЗаполнитьАвансами.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.СписокАвансовДолговДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	Элементы.СписокАвансовДолговЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.СписокАвансовДолговДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	Элементы.СписокОтобранныеАвансыИДолгиДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	Элементы.СписокОтобранныеАвансыИДолгиЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.СписокОтобранныеАвансыИДолгиДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	
	АдресСписокОтобранныеАвансыИДолгиВХранилище = Параметры.АдресДебиторВХранилище;
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ВалютаИтогов = ВалютаУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаУчета));
	КурсВалютаУчета = СтруктураПоВалюте.Курс;
	КратностьВалютаУчета = СтруктураПоВалюте.Кратность;
	
	СтрокаКолонок =
		"Договор,
		|Документ,
		|Заказ,
		|СуммаУчета,
		|Курс,
		|Кратность,
		|СуммаРасчетов,
		|ПризнакАванса";
	
	СписокОтобранныеАвансыИДолги.Загрузить(ПолучитьИзВременногоХранилища(АдресСписокОтобранныеАвансыИДолгиВХранилище));
	
	Элементы.СписокАвансовДолговСуммаУчета.Видимость = УчетВалютныхОпераций;
	
	ЗаполнитьАвансыИДолги();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// МобильныйКлиент
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтаФорма,,,,,Истина);
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммыИтог();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки ОК.
//
&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеРеквизитовФормы(Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьПодборВХранилище();
		Закрыть(КодВозвратаДиалога.OK);
	КонецЕсли;
	
КонецПроцедуры // ОК()

// Процедура - обработчик нажатия кнопки Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик нажатия кнопки ЗапрашиватьСумму.
//
&НаКлиенте
Процедура ЗапрашиватьСумму(Команда)
	
	ЗапрашиватьСумму = НЕ ЗапрашиватьСумму;
	Элементы.ЗапрашиватьСумму.Пометка = ЗапрашиватьСумму;
	
КонецПроцедуры // ЗапрашиватьСумму()

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ЗаписатьПодборВХранилище()
	
	СписокОтобранныеАвансыИДолгиВХранилище = СписокОтобранныеАвансыИДолги.Выгрузить(, СтрокаКолонок);
	ПоместитьВоВременноеХранилище(СписокОтобранныеАвансыИДолгиВХранилище, АдресСписокОтобранныеАвансыИДолгиВХранилище);
	
КонецПроцедуры // ЗаписатьПодборВХранилище()

// Получает набор данных с сервера для процедуры СписокОтобранныеАвансыИДолгиДокументПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СуммаРасчетов", Документ.РасшифровкаПлатежа.Итог("СуммаРасчетов"));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

// Добавляет строку в отобранные.
//
&НаКлиенте
Процедура ДобавитьСтрокуВОтобранные(ТекущаяСтрока)
	
	СуммаРасчетов = ТекущаяСтрока.СуммаРасчетов;
	Если ЗапрашиватьСумму Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока, СуммаРасчетов", ТекущаяСтрока, СуммаРасчетов));
		ПоказатьВводЧисла(ОписаниеОповещения, СуммаРасчетов, НСтр("ru = 'Введите сумму расчетов'"));
		
	Иначе
		
		ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВОтобранные()

// Процедура помещает результаты выбора в подбор.
//
&НаКлиенте
Процедура СписокАвансовВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	
КонецПроцедуры // СписокАвансовВыборЗначения()

// Процедура - обработчик события ПриНачалеРедактирования табличной части СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		РассчитатьСуммыИтог();
		ЗаполнитьАвансыИДолги();
	КонецЕсли;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода СуммаРасчетов табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Курс табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Кратность табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаУчета табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает курс и кратность.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаУчета
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсВалютаУчета
	);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Документ табличной части
// СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ);
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиДокументПриИзменении()

// Процедура - обработчик события НачалоПеретаскивания списка СписокАвансов.
//
&НаКлиенте
Процедура СписокАвансовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Договор", ТекущиеДанные.Договор);
	Структура.Вставить("Документ", ТекущиеДанные.Документ);
	Структура.Вставить("Заказ", ТекущиеДанные.Заказ);
	Структура.Вставить("СуммаРасчетов", ТекущиеДанные.СуммаРасчетов);
	Структура.Вставить("ПризнакАванса", ТекущиеДанные.ПризнакАванса);
	
	Если ТекущиеДанные.Свойство("СуммаУчета") Тогда
		Структура.Вставить("СуммаУчета", ТекущиеДанные.СуммаУчета);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // СписокАвансовНачалоПеретаскивания()

// Процедура - обработчик события ПроверкаПеретаскивания списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания()

// Процедура - обработчик события Перетаскивание списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ПараметрыПеретаскивания.Значение;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПеретаскивание()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриИзменении(Элемент)
	
	РассчитатьСуммыИтог();
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриИзменении()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолгиДоговор.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиДоговорПриИзменении()

// Процедура рассчитывает сумму учета.
//
&НаКлиенте
Процедура РассчитатьСуммуУчета(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс      = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаУчета = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов, СтрокаТабличнойЧасти.Курс, КурсВалютаУчета, СтрокаТабличнойЧасти.Кратность,
		КратностьВалютаУчета);
	
КонецПроцедуры // РассчитатьСуммуУчета()

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет список авансов.
//
&НаСервере
Процедура ЗаполнитьАвансыИДолги()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтобранныеАвансыИДолги.ПризнакАванса КАК ПризнакАванса,
	|	ВЫРАЗИТЬ(ОтобранныеАвансыИДолги.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ОтобранныеАвансыИДолги.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ОтобранныеАвансыИДолги.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ОтобранныеАвансыИДолги.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ОтобранныеАвансыИДолги.СуммаРасчетов КАК СуммаРасчетов,
	|	ОтобранныеАвансыИДолги.СуммаУчета КАК СуммаУчета
	|ПОМЕСТИТЬ ТаблицаОтобранныеАвансыИДолги
	|ИЗ
	|	&ТаблицаОтобранныеАвансыИДолги КАК ОтобранныеАвансыИДолги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакАванса,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
	|		ИНАЧЕ РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаОстаток,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|		ИНАЧЕ РасчетыСПоставщикамиОстатки.СуммаВалОстаток
	|	КОНЕЦ КАК СуммаВалОстаток,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВременнаяТаблица_РасчетыСПоставщикамиОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И (&БезОтбораПоДоговору
	|					ИЛИ Договор В (&МассивДоговоров))) КАК РасчетыСПоставщикамиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|	ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|	ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|	КОНЕЦ,
	|	ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов,
	|	ДвиженияДокументаРасчетыСПоставщиками.Договор.ВалютаРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|ГДЕ
	|	ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|	И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|	И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|	И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|	И (&БезОтбораПоДоговору
	|			ИЛИ ДвиженияДокументаРасчетыСПоставщиками.Договор В (&МассивДоговоров))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ПризнакАванса КАК ПризнакАванса,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаУчета,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаРасчетов,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.Документ.Автор КАК Автор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ПризнакАванса КАК ПризнакАванса,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.СуммаВалОстаток КАК СуммаВалОстаток,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов
	|	ИЗ
	|		ВременнаяТаблица_РасчетыСПоставщикамиОстатки КАК ВременнаяТаблица_РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтобранныеАвансыИДолги.Договор,
	|		ОтобранныеАвансыИДолги.Документ,
	|		ОтобранныеАвансыИДолги.Заказ,
	|		ОтобранныеАвансыИДолги.ПризнакАванса,
	|		-ОтобранныеАвансыИДолги.СуммаУчета,
	|		-ОтобранныеАвансыИДолги.СуммаРасчетов,
	|		ВЫБОР
	|			КОГДА ОтобранныеАвансыИДолги.ПризнакАванса
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		КОНЕЦ,
	|		ОтобранныеАвансыИДолги.Договор.ВалютаРасчетов
	|	ИЗ
	|		ТаблицаОтобранныеАвансыИДолги КАК ОтобранныеАвансыИДолги) КАК РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	(&БезОтбораПоТипуРасчетов
	|			ИЛИ РасчетыСПоставщикамиОстатки.ТипРасчетов = &ТипРасчетов)
	|	И (&БезОтбораПоАвтору
	|			ИЛИ РасчетыСПоставщикамиОстатки.Документ.Автор В (&МассивАвторов))
	|	И (&БезОтбораПоПериоду
	|			ИЛИ РасчетыСПоставщикамиОстатки.Документ.Дата >= &ДатаНачала
	|				И РасчетыСПоставщикамиОстатки.Документ.Дата <= &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Договор,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ПризнакАванса,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	РасчетыСПоставщикамиОстатки.Документ.Автор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) > 0
	|		ИЛИ СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВременнаяТаблица_РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютСрезПоследних.Курс * КурсыВалютыИтоговСрезПоследних.Кратность / (КурсыВалютСрезПоследних.Кратность * КурсыВалютыИтоговСрезПоследних.Курс)) КАК СуммаВалОстатокВВалИтогов,
	|	СУММА(ВЫБОР
	|			КОГДА ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ПризнакАванса
	|				ТОГДА ВременнаяТаблица_РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютСрезПоследних.Курс * КурсыВалютыИтоговСрезПоследних.Кратность / (КурсыВалютСрезПоследних.Кратность * КурсыВалютыИтоговСрезПоследних.Курс)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИтогАванс,
	|	СУММА(ВЫБОР
	|			КОГДА ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ПризнакАванса
	|				ТОГДА 0
	|			ИНАЧЕ ВременнаяТаблица_РасчетыСПоставщикамиОстатки.СуммаВалОстаток * КурсыВалютСрезПоследних.Курс * КурсыВалютыИтоговСрезПоследних.Кратность / (КурсыВалютСрезПоследних.Кратность * КурсыВалютыИтоговСрезПоследних.Курс)
	|		КОНЕЦ) КАК ИтогДолг
	|ИЗ
	|	ВременнаяТаблица_РасчетыСПоставщикамиОстатки КАК ВременнаяТаблица_РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ВременнаяТаблица_РасчетыСПоставщикамиОстатки.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаИтогов) КАК КурсыВалютыИтоговСрезПоследних
	|ГДЕ
	|	(&БезОтбораПоАвтору
	|			ИЛИ ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Документ.Автор В (&МассивАвторов))
	|	И (&БезОтбораПоПериоду
	|			ИЛИ ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Документ.Дата >= &ДатаНачала
	|				И ВременнаяТаблица_РасчетыСПоставщикамиОстатки.Документ.Дата <= &ДатаОкончания)";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаОтобранныеАвансыИДолги", СписокОтобранныеАвансыИДолги.Выгрузить());
	Запрос.УстановитьПараметр("БезОтбораПоТипуРасчетов", ТипРасчета.Пустая());
	Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчета);
	Запрос.УстановитьПараметр("ВалютаИтогов", ВалютаИтогов);
	
	// Отбор по договору и автору (
	МассивДоговоров = Новый Массив;
	МассивАвторов = Новый Массив;
	Для Каждого ТекущаяСтрока Из ДанныеМеток Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Метка) Тогда
			Если ТекущаяСтрока.ИмяПоляОтбора = "Автор" Тогда
				МассивАвторов.Добавить(ТекущаяСтрока.Метка);
			ИначеЕсли ТекущаяСтрока.ИмяПоляОтбора = "Договор" Тогда
				МассивДоговоров.Добавить(ТекущаяСтрока.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("БезОтбораПоДоговору", МассивДоговоров.Количество() = 0);
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	
	Запрос.УстановитьПараметр("БезОтбораПоАвтору", МассивАвторов.Количество() = 0);
	Запрос.УстановитьПараметр("МассивАвторов", МассивАвторов);
	// ) Отбор по договору и автору
	
	// Отбор по периоду (
	Запрос.УстановитьПараметр("БезОтбораПоПериоду", ОтборПериод.ДатаНачала = '00010101' И ОтборПериод.ДатаОкончания = '00010101');
	Запрос.УстановитьПараметр("ДатаНачала", ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ОтборПериод.ДатаОкончания <> '00010101', ОтборПериод.ДатаОкончания, '39991231'));
	// ) Отбор по периоду
	
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СписокАвансовДолгов.Загрузить(МассивРезультатов[2].Выгрузить());
	
	ВыборкаИтогов = МассивРезультатов[3].Выбрать();
	Если ВыборкаИтогов.Следующий() Тогда
		ИтогАванс = ВыборкаИтогов.ИтогАванс;
		ИтогДолг = ВыборкаИтогов.ИтогДолг;
	Иначе
		ИтогАванс = 0;
		ИтогДолг = 0;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвансыИДолги()

// Процедура заполняет расшифровку платежа.
//
&НаСервере
Функция ЗаполнитьРасшифровкуПлатежа(ТолькоДолги)
	
	// Заполнение расшифровки расчетов по умолчанию.
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток * ВЫБОР
	|			КОГДА &ТолькоДолги
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаУчета,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток * ВЫБОР
	|			КОГДА &ТолькоДолги
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаРасчетов,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|		РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И ТипРасчетов = &ТипРасчетов) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Организация,
	|		ДвиженияДокументаРасчетыСПоставщиками.Контрагент,
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = &ТипРасчетов) КАК РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	(&ТолькоДолги
	|				И РасчетыСПоставщикамиОстатки.СуммаВалОстаток > 0
	|			ИЛИ НЕ &ТолькоДолги
	|				И РасчетыСПоставщикамиОстатки.СуммаВалОстаток < 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Организация,
	|	РасчетыСПоставщикамиОстатки.Договор,
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ТипРасчетов,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
	|	КурсыВалютДокумента.Курс,
	|	КурсыВалютДокумента.Кратность,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипРасчетов", ?(ТолькоДолги, Перечисления.ТипыРасчетов.Долг, Перечисления.ТипыРасчетов.Аванс));
	Запрос.УстановитьПараметр("ТолькоДолги", ТолькоДолги);
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации, ИмяТЧ);
	Если Контрагент.ВестиРасчетыПоДоговорам
	   И НуженОтборПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации, ИмяТЧ));
	КонецЕсли;
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
		Контрагент,
		Компания,
		СписокВидовДоговоров
	);
	
	СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		Дата,
		Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
	);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	СписокОтобранныеАвансыИДолги.Очистить();
	
	МассивОперацийВзаимозачета = Новый Массив;
	МассивОперацийВзаимозачета.Добавить(Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику);
	МассивОперацийВзаимозачета.Добавить(Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя);
	МассивОперацийВзаимозачета.Добавить(Перечисления.ВидыОперацийВзаимозачет.Взаимозачет);
	МассивОперацийВзаимозачета.Добавить(Перечисления.ВидыОперацийВзаимозачет.ПрочийВзаимозачет);
	
	Если СуммаУчетаИтогВДокументе = 0 И МассивОперацийВзаимозачета.Найти(ВидОперации) <> Неопределено Тогда
		СуммаОсталосьРаспределить = Мин(ИтогАванс, ИтогДолг);
	Иначе
		СуммаОсталосьРаспределить = СуммаУчетаИтогВДокументе;
	КонецЕсли;
	Если СуммаОсталосьРаспределить = 0 И ВидОперации <> Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику Тогда
		Если ТолькоДолги Тогда
			СуммаОсталосьРаспределить = ИтогДолг;
		Иначе
			СуммаОсталосьРаспределить = ИтогАванс;
		КонецЕсли;
	КонецЕсли;
	Если СуммаОсталосьРаспределить = 0 И ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику Тогда
		ТекстСообщения = РасчетыРаботаСФормамиВызовСервера.ПроверитьСуммуДолгаИАвансаВывестиСообщение(ТолькоДолги, ИтогАванс, ИтогДолг);
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Возврат ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаУчета));
	
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			НоваяСтрока = СписокОтобранныеАвансыИДолги.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			Если ВыборкаРезультатаЗапроса.СуммаУчета <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаУчета;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					СуммаОсталосьРаспределить,
					ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
					ВыборкаРезультатаЗапроса.Кратность
				);
				
				НоваяСтрока.СуммаУчета = СуммаОсталосьРаспределить;
				
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			НоваяСтрока.ПризнакАванса = НЕ ТолькоДолги;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику Тогда
			
			СуммаОсталосьРаспределить = 0;
			
		Иначе
			
			НоваяСтрока = СписокОтобранныеАвансыИДолги.Добавить();
			
			НоваяСтрока.Договор = ДоговорПоУмолчанию;
			НоваяСтрока.Курс = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс
			);
			НоваяСтрока.Кратность = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
			);
			НоваяСтрока.СуммаРасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СуммаОсталосьРаспределить,
				Курс,
				НоваяСтрока.Курс,
				Кратность,
				НоваяСтрока.Кратность
			);
			НоваяСтрока.ПризнакАванса = Истина;
			НоваяСтрока.СуммаУчета = СуммаОсталосьРаспределить;
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ЗаполнитьРасшифровкуПлатежа()

#Область ОбработчикиКомандЭлементовФормы

&НаКлиенте
Процедура ЗаполнитьДолгами(Команда)
	
	Сообщение = ЗаполнитьРасшифровкуПлатежа(Истина);
	Если Сообщение <> "" Тогда
		ПоказатьПредупреждение(Неопределено, Сообщение);
	КонецЕсли;
	РассчитатьСуммыИтог();
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвансами(Команда)
	
	Сообщение = ЗаполнитьРасшифровкуПлатежа(Ложь);
	Если Сообщение <> "" Тогда
		ПоказатьПредупреждение(Неопределено, Сообщение);
	КонецЕсли;
	РассчитатьСуммыИтог();
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипРасчетовЧислоПриИзменении(Элемент)
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;

	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Договор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата ввода суммы зачета аванса поставщика
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаРасчетов = РезультатЗакрытия;
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);	
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	УдалитьМеткуОтбораСервер(МеткаИД);

КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбораСервер(МеткаИД) Экспорт
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = РаботаСОтборами.ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов, "ДанныеМеток");
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаВыбратьПериод() Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ОтборПериод;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(НовыйПериод, Параметры) Экспорт
	
	Если НовыйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйПериод)=Тип("СтандартныйПериод") Тогда
		ОтборПериод = НовыйПериод;
	ИначеЕсли ТипЗнч(НовыйПериод)=Тип("Дата") Тогда
		ОтборПериод.ДатаОкончания = НовыйПериод;
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПредставлениеПериодаВыбратьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

#КонецОбласти
