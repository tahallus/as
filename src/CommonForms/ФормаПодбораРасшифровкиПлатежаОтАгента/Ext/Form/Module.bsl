&НаСервере
Процедура ЗаполнитьОтобранныеДолги(АдресРасшифровкаПлатежаВХранилище)
	
	ОтобранныеДолгиТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтобранныеДолги.Документ,
	|	ВЫБОР
	|		КОГДА ОтобранныеДолги.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ОтобранныеДолги.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ОтобранныеДолги.УдержаноАгентом,
	|	ОтобранныеДолги.ПолученоОтКлиента
	|ПОМЕСТИТЬ ТаблицаОтобранныеДолги
	|ИЗ
	|	&ТаблицаОтобранныеДолги КАК ОтобранныеДолги
	|ГДЕ
	|	ОтобранныеДолги.Документ <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОтобранныеДолги.Документ,
	|	ТаблицаОтобранныеДолги.Заказ,
	|	ТаблицаОтобранныеДолги.ПолученоОтКлиента,
	|	ТаблицаОтобранныеДолги.Документ.Контрагент КАК Контрагент,
	|	ТаблицаОтобранныеДолги.Документ.Договор КАК Договор,
	|	ТаблицаОтобранныеДолги.УдержаноАгентом КАК УдержаноАгентом
	|ИЗ
	|	ТаблицаОтобранныеДолги КАК ТаблицаОтобранныеДолги";
	
	Запрос.УстановитьПараметр("ТаблицаОтобранныеДолги", ОтобранныеДолгиТаблицаЗначений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтобранныеДолги.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период = Параметры.Дата;
	Компания = Параметры.Компания;
	Контрагент = Параметры.Контрагент;
	ВалютаДенежныхСредств = Параметры.ВалютаДенежныхСредств;
	Ссылка = Параметры.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя; //Параметры.ВидОперации;
	СуммаДокумента = Параметры.СуммаДокумента;
	
	//Элементы.ОтобранныеДолгиДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	//Элементы.ОтобранныеДолгиДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	//Элементы.ОтобранныеДолгиЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	
	//Элементы.СписокДолговДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	//Элементы.СписокДолговДокумент.Видимость = Контрагент.ВестиРасчетыПоДокументам;
	//Элементы.СписокДолговЗаказ.Видимость = Контрагент.ВестиРасчетыПоЗаказам;
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	АдресРасшифровкаПлатежаВХранилище = Параметры.АдресРасшифровкаПлатежаВХранилище;
	ЗаполнитьОтобранныеДолги(АдресРасшифровкаПлатежаВХранилище);
	
	// Удаление строк с незаполненной суммой.
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого ТекСтрока Из ОтобранныеДолги Цикл
		Если ТекСтрока.ПолученоОтКлиента = 0 Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекЭлемент Из МассивСтрокДляУдаления Цикл
		ОтобранныеДолги.Удалить(ТекЭлемент);
	КонецЦикла;
	
	ФункциональнаяУчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	Элементы.Итоги.Видимость = НЕ УчетВалютныхОпераций;
	
	ЗаполнитьДолги();
	
	// Заполним заголовки команд данными о сумме документа
	СуммаИВалютаТекст = "" + СуммаДокумента + " " + ВалютаДенежныхСредств;
	Элементы.ОтобранныеДолгиЗаполнитьАвтоматическиСуммуПлатежа.Заголовок = НСтр("ru = '""Получено от клиента"" ('") + СуммаИВалютаТекст + ")";
	Элементы.ОтобранныеДолгиЗаполнитьАвтоматическиСуммуПлатежаИУдержано.Заголовок = НСтр("ru = '""Получено от клиента"" и ""Удержано"" ('") + СуммаИВалютаТекст + ")";
	
	УчитыватьСебестоимостьДоставки = Истина; // Может быть изменено при восстановлении настроек.
	Элементы.УчитыватьСебестоимостьДоставки.Пометка = Истина;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммаИтог();
	
КонецПроцедуры // ПриОткрытии()

// Процедура рассчитывает итоговую сумму.
//
&НаКлиенте
Процедура РассчитатьСуммаИтог()
	
	СуммаИтог = 0;
	УдержаноИтог = 0;
	СуммаПолученоОтКлиента = 0;
	
	Для каждого ТекСтрока Из ОтобранныеДолги Цикл
		СуммаПолученоОтКлиента = СуммаПолученоОтКлиента + ТекСтрока.ПолученоОтКлиента;
		УдержаноИтог = УдержаноИтог + ТекСтрока.УдержаноАгентом;
	КонецЦикла;
	
	СуммаИтог = СуммаПолученоОтКлиента - УдержаноИтог;
	
КонецПроцедуры // РассчитатьСуммаИтог()

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ЗаписатьПодборВХранилище()
	
	ТаблицаОтобранныеДолги = ОтобранныеДолги.Выгрузить();
	ПоместитьВоВременноеХранилище(ТаблицаОтобранныеДолги, АдресРасшифровкаПлатежаВХранилище);
	
КонецПроцедуры // ЗаписатьПодборВХранилище()

// Процедура помещает результаты выбора в подбор.
//
&НаКлиенте
Процедура СписокДолговВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	ПолученоОтКлиента = ТекущаяСтрока.ПолученоОтКлиента;
	УдержаноАгентом = ТекущаяСтрока.УдержаноАгентом;
	Если ЗапрашиватьСумму Тогда
		ВводЧислаОписаниеОповещения = Новый ОписаниеОповещения(
			"СписокДолговВыборЗначенияЗавершение",
			ЭтотОбъект,
			Новый Структура("ТекущаяСтрока, ПолученоОтКлиента, УдержаноАгентом", ТекущаяСтрока, ПолученоОтКлиента, УдержаноАгентом));
		ПоказатьВводЧисла(ВводЧислаОписаниеОповещения, ПолученоОтКлиента, "Введите сумму", , );
		Возврат;
	КонецЕсли;
	
	СписокДолговВыборЗначенияФрагмент(ПолученоОтКлиента, УдержаноАгентом, ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СписокДолговВыборЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    ПолученоОтКлиента = ?(Результат = Неопределено, ДополнительныеПараметры.ПолученоОтКлиента, Результат);
    УдержаноАгентом = ДополнительныеПараметры.УдержаноАгентом;
    
    Если НЕ (Результат <> Неопределено) Тогда
        Возврат;
    КонецЕсли;
    
    СписокДолговВыборЗначенияФрагмент(ПолученоОтКлиента, УдержаноАгентом, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура СписокДолговВыборЗначенияФрагмент(Знач ПолученоОтКлиента, Знач УдержаноАгентом, Знач ТекущаяСтрока)
    
    Перем НоваяСтрока, Строки, СтруктураПоиска;
    
    ТекущаяСтрока.ПолученоОтКлиента = ПолученоОтКлиента;
    
    СтруктураПоиска = Новый Структура("Контрагент, Договор, Документ, Заказ", ТекущаяСтрока.Контрагент, ТекущаяСтрока.Договор, ТекущаяСтрока.Документ, ТекущаяСтрока.Заказ);
    Строки = ОтобранныеДолги.НайтиСтроки(СтруктураПоиска);
    
    Если Строки.Количество() > 0 Тогда
        НоваяСтрока = Строки[0];
        НоваяСтрока.ПолученоОтКлиента = НоваяСтрока.ПолученоОтКлиента + ПолученоОтКлиента;
    Иначе
        НоваяСтрока = ОтобранныеДолги.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Если НЕ УчитыватьСебестоимостьДоставки Тогда
			НоваяСтрока.УдержаноАгентом = 0;
		КонецЕсли;
    КонецЕсли;
    
    Элементы.ОтобранныеДолги.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
    
    РассчитатьСуммаИтог();
    ЗаполнитьДолги();

КонецПроцедуры // СписокДолговВыборЗначения()

// Процедура - обработчик события НачалоПеретаскивания списка СписокДолгов.
//
&НаКлиенте
Процедура СписокДолговНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	Структура.Вставить("Документ", ТекущиеДанные.Документ);
	Структура.Вставить("Заказ", ТекущиеДанные.Заказ);
	Структура.Вставить("ПолученоОтКлиента", ТекущиеДанные.ПолученоОтКлиента);
	Структура.Вставить("УдержаноАгентом", ТекущиеДанные.УдержаноАгентом);
	Структура.Вставить("Договор", ТекущиеДанные.Договор);
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // СписокДолговНачалоПеретаскивания()

// Процедура - обработчик события ПроверкаПеретаскивания списка ОтобранныеДолги.
//
&НаКлиенте
Процедура ОтобранныеДолгиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры // ОтобранныеДолгиПроверкаПеретаскивания()

// Процедура - обработчик события ПроверкаПеретаскивания списка ОтобранныеДолги.
//
&НаКлиенте
Процедура ОтобранныеДолгиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтруктура = ПараметрыПеретаскивания.Значение;
	
	ПолученоОтКлиента = ПараметрыСтруктура.ПолученоОтКлиента;
	Если ЗапрашиватьСумму Тогда
		ПоказатьВводЧисла(Новый ОписаниеОповещения("ОтобранныеДолгиПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("ПараметрыСтруктура, ПолученоОтКлиента", ПараметрыСтруктура, ПолученоОтКлиента)), ПолученоОтКлиента, "Введите сумму", , );
        Возврат;
	КонецЕсли;
	
	ОтобранныеДолгиПеретаскиваниеФрагмент(ПараметрыСтруктура, ПолученоОтКлиента);
КонецПроцедуры

&НаКлиенте
Процедура ОтобранныеДолгиПеретаскиваниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыСтруктура = ДополнительныеПараметры.ПараметрыСтруктура;
    ПолученоОтКлиента = ?(Результат = Неопределено, ДополнительныеПараметры.ПолученоОтКлиента, Результат);
    УдержаноАгентом = ПараметрыСтруктура.УдержаноАгентом;
    
    Если НЕ (Результат <> Неопределено) Тогда
        Возврат;
    КонецЕсли;
    
    ОтобранныеДолгиПеретаскиваниеФрагмент(ПараметрыСтруктура, ПолученоОтКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ОтобранныеДолгиПеретаскиваниеФрагмент(Знач ПараметрыСтруктура, Знач ПолученоОтКлиента)
    
    Перем НоваяСтрока, Строки, СтруктураПоиска;
    
    ПараметрыСтруктура.ПолученоОтКлиента = ПолученоОтКлиента;
    
    СтруктураПоиска = Новый Структура("Контрагент, Договор, Документ, Заказ", ПараметрыСтруктура.Контрагент, ПараметрыСтруктура.Договор, ПараметрыСтруктура.Документ, ПараметрыСтруктура.Заказ);
    Строки = ОтобранныеДолги.НайтиСтроки(СтруктураПоиска);
    
    Если Строки.Количество() > 0 Тогда
        НоваяСтрока = Строки[0];
        НоваяСтрока.ПолученоОтКлиента = НоваяСтрока.ПолученоОтКлиента + ПолученоОтКлиента;
    Иначе 
        НоваяСтрока = ОтобранныеДолги.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтруктура);
		Если Не УчитыватьСебестоимостьДоставки Тогда
			НоваяСтрока.УдержаноАгентом = 0;
		КонецЕсли;
    КонецЕсли;
    
    Элементы.ОтобранныеДолги.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
    
    РассчитатьСуммаИтог();
    ЗаполнитьДолги();

КонецПроцедуры // ОтобранныеДолгиПеретаскивание()

// Процедура - обработчик нажатия кнопки ОК.
//
&НаКлиенте
Процедура ОК(Команда)
	
	ЗаписатьПодборВХранилище();
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры // ОК()

// Процедура - обработчик нажатия кнопки Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДолги();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик нажатия кнопки ЗапрашиватьСумму.
//
&НаКлиенте
Процедура ЗапрашиватьСумму(Команда)
	
	ЗапрашиватьСумму = НЕ ЗапрашиватьСумму;
	Элементы.ЗапрашиватьСумму.Пометка = ЗапрашиватьСумму;
	
КонецПроцедуры // ЗапрашиватьСумму()

// Процедура - обработчик события ПриИзменении списка ОтобранныеДолги.
//
&НаКлиенте
Процедура ОтобранныеДолгиПриИзменении(Элемент)
	
	РассчитатьСуммаИтог();
	ЗаполнитьДолги();
	
КонецПроцедуры // ОтобранныеДолгиПриИзменении()

// Процедура - обработчик события ПриНачалеРедактирования списка ОтобранныеДолги.
//
&НаКлиенте
Процедура ОтобранныеДолгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		РассчитатьСуммаИтог();
		ЗаполнитьДолги();
	КонецЕсли;
	
КонецПроцедуры // ОтобранныеАвансыПриНачалеРедактирования()

&НаСервере
Функция ТекстЗапросаЗаполнитьСуммуПлатежа()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(РасчетыСПокупателямиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	0 КАК УдержаноАгентом
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|		РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И Документ <> НЕОПРЕДЕЛЕНО
	|					И (Документ ССЫЛКА Документ.РасходнаяНакладная
	|						ИЛИ Документ ССЫЛКА Документ.ЗаказПокупателя
	|							И Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|					И Договор.ВалютаРасчетов = &НациональнаяВалюта) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Организация,
	|		ДвиженияДокументаРасчетыСПокупателями.Контрагент,
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		И ДвиженияДокументаРасчетыСПокупателями.Документ <> НЕОПРЕДЕЛЕНО
	|		И (ДвиженияДокументаРасчетыСПокупателями.Документ ССЫЛКА Документ.РасходнаяНакладная
	|				ИЛИ ДвиженияДокументаРасчетыСПокупателями.Документ ССЫЛКА Документ.ЗаказПокупателя
	|					И ДвиженияДокументаРасчетыСПокупателями.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор.ВалютаРасчетов = &НациональнаяВалюта) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Организация,
	|	РасчетыСПокупателямиОстатки.Договор,
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов,
	|	РасчетыСПокупателямиОстатки.Документ.Дата,
	|	КурсыВалютДокумента.Курс,
	|	КурсыВалютДокумента.Кратность,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	РасчетыСПокупателямиОстатки.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаЗаполнитьСуммуПлатежаИУдержано()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(РасчетыСПокупателямиОстатки.СуммаВалОстаток * КурсыВалютРасчетов.Курс * КурсыВалютДокумента.Кратность / (КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаВалДокумента,
	|	КурсыВалютДокумента.Курс КАК КурсДенежныхСредств,
	|	КурсыВалютДокумента.Кратность КАК КратностьДенежныхСредств,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	СУММА(ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.СебестоимостьДоставки, 0) * ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Курс, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Курс, 1)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Кратность, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Кратность, 1)
	|		КОНЕЦ) КАК УдержаноАгентом
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|		РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И Документ <> НЕОПРЕДЕЛЕНО
	|					И (Документ ССЫЛКА Документ.РасходнаяНакладная
	|						ИЛИ Документ ССЫЛКА Документ.ЗаказПокупателя
	|							И Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|					И Договор.ВалютаРасчетов = &НациональнаяВалюта) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Организация,
	|		ДвиженияДокументаРасчетыСПокупателями.Контрагент,
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		И ДвиженияДокументаРасчетыСПокупателями.Документ <> НЕОПРЕДЕЛЕНО
	|		И (ДвиженияДокументаРасчетыСПокупателями.Документ ССЫЛКА Документ.РасходнаяНакладная
	|				ИЛИ ДвиженияДокументаРасчетыСПокупателями.Документ ССЫЛКА Документ.ЗаказПокупателя
	|					И ДвиженияДокументаРасчетыСПокупателями.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор.ВалютаРасчетов = &НациональнаяВалюта) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Организация,
	|	РасчетыСПокупателямиОстатки.Договор,
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ТипРасчетов,
	|	РасчетыСПокупателямиОстатки.Документ.Дата,
	|	КурсыВалютДокумента.Курс,
	|	КурсыВалютДокумента.Кратность,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность,
	|	РасчетыСПокупателямиОстатки.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет расшифровку платежа.
//
&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ЗаполнятьУдержаннуюСумму)
	
	// Заполнение расшифровки расчетов по умолчанию.
	Запрос = Новый Запрос;
	Если ЗаполнятьУдержаннуюСумму Тогда
		Запрос.Текст = ТекстЗапросаЗаполнитьСуммуПлатежаИУдержано();
	Иначе
		Запрос.Текст = ТекстЗапросаЗаполнитьСуммуПлатежа();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Валюта", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации);
	Если Контрагент.ВестиРасчетыПоДоговорам
	   И НуженОтборПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации));
	КонецЕсли;
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
		Контрагент,
		Компания,
		СписокВидовДоговоров
	);
	
	СтруктураКурсВалютыДоговораПоУмолчанию = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		Период,
		Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
	);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ОтобранныеДолги.Очистить();
	
	СуммаОсталосьРаспределить = СуммаДокумента;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Период, Новый Структура("Валюта", ВалютаДенежныхСредств));
	
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		НоваяСтрока = ОтобранныеДолги.Добавить();
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			Если (ВыборкаРезультатаЗапроса.СуммаВалДокумента - ВыборкаРезультатаЗапроса.УдержаноАгентом) <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				НоваяСтрока.ПолученоОтКлиента = ВыборкаРезультатаЗапроса.СуммаВалОстаток;
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаВалДокумента + ВыборкаРезультатаЗапроса.УдержаноАгентом;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока.ПолученоОтКлиента = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
					СуммаОсталосьРаспределить,
					ВыборкаРезультатаЗапроса.КурсДенежныхСредств,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КратностьДенежныхСредств,
					ВыборкаРезультатаЗапроса.Кратность
				);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		Иначе
			НоваяСтрока.Договор = ДоговорПоУмолчанию;
			КурсВСтроке = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Курс
			);
			КратностьВСтроке = ?(
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность = 0,
				1,
				СтруктураКурсВалютыДоговораПоУмолчанию.Кратность
			);
			НоваяСтрока.ПолученоОтКлиента = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СуммаОсталосьРаспределить,
				Курс,
				КурсВСтроке,
				Кратность,
				КратностьВСтроке
			);
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

// Процедура - обработчик нажатия кнопки ЗаполнитьАвтоматически.
//
&НаКлиенте
Процедура ЗаполнитьАвтоматическиСуммуПлатежа(Команда)
	ЗаполнятьУдержаннуюСумму_Ложь = Ложь;
	ЗаполнитьАвтоматически(ЗаполнятьУдержаннуюСумму_Ложь);
КонецПроцедуры // ЗаполнитьАвтоматическиСуммуПлатежа()

&НаКлиенте
Процедура ЗаполнитьАвтоматически(ЗаполнятьУдержаннуюСумму)
	
	Если СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В документе не заполнена сумма. Автоматическое заполнение выполняется на указанную в документе сумму.'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРасшифровкуПлатежа(ЗаполнятьУдержаннуюСумму);
	РассчитатьСуммаИтог();
	ЗаполнитьДолги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматическиСуммуПлатежаИУдержано(Команда)
	ЗаполнятьУдержаннуюСумму_Истина = Истина;
	ЗаполнитьАвтоматически(ЗаполнятьУдержаннуюСумму_Истина);
КонецПроцедуры

// Процедура заполняет список долгов.
//
&НаСервере
Процедура ЗаполнитьДолги()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Организация КАК Организация,
	|	ОтобранныеДолги.Договор КАК Договор,
	|	ОтобранныеДолги.Контрагент КАК Контрагент,
	|	ОтобранныеДолги.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ОтобранныеДолги.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ОтобранныеДолги.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ОтобранныеДолги.ПолученоОтКлиента КАК ПолученоОтКлиента,
	|	ОтобранныеДолги.НомерЗаказаАгента КАК НомерЗаказаАгента,
	|	ОтобранныеДолги.УдержаноАгентом КАК УдержаноАгентом
	|ПОМЕСТИТЬ ТаблицаОтобранныеДолги
	|ИЗ
	|	&ТаблицаОтобранныеДолги КАК ОтобранныеДолги
	|ГДЕ
	|	ОтобранныеДолги.Документ <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК ПолученоОтКлиента,
	|	РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|	ВЫРАЗИТЬ(РегистрСведенийЯндексДоставка.НомерЗаказа КАК СТРОКА(1024)) КАК НомерЗаказаАгента,
	|	СУММА(РасчетыСПокупателямиОстатки.УдержаноАгентом) КАК УдержаноАгентом
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Организация КАК Организация,
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) * ВЫБОР
	|			КОГДА РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов <> &Валюта
	|				ТОГДА КурсыВалютыДС.Кратность / ВЫБОР
	|						КОГДА КурсыВалютыДС.Курс = 0
	|							ТОГДА 1
	|						ИНАЧЕ КурсыВалютыДС.Курс
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК СуммаВалОстаток,
	|		РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.СебестоимостьДоставки, 0) * ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Курс, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.Заказ.Курс
	|		КОНЕЦ / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.Заказ.Кратность, 1) = 0
	|				ТОГДА 1
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.Заказ.Кратность
	|		КОНЕЦ КАК УдержаноАгентом
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|					И Документ <> НЕОПРЕДЕЛЕНО
	|					И (Документ ССЫЛКА Документ.РасходнаяНакладная
	|						ИЛИ Документ ССЫЛКА Документ.ЗаказПокупателя
	|							И Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|					И Договор.ВалютаРасчетов = &НациональнаяВалюта) КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютыДС
	|			ПО (КурсыВалютыДС.Валюта = &Валюта)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Организация,
	|		ОтобранныеДолги.Договор,
	|		ОтобранныеДолги.Документ,
	|		ОтобранныеДолги.Заказ,
	|		-ОтобранныеДолги.ПолученоОтКлиента,
	|		ОтобранныеДолги.Контрагент,
	|		-ОтобранныеДолги.УдержаноАгентом
	|	ИЗ
	|		ТаблицаОтобранныеДолги КАК ОтобранныеДолги
	|	ГДЕ
	|		ОтобранныеДолги.Документ <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЯндексДоставка КАК РегистрСведенийЯндексДоставка
	|		ПО (РегистрСведенийЯндексДоставка.ЗаказПокупателя = РасчетыСПокупателямиОстатки.Заказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Организация,
	|	РасчетыСПокупателямиОстатки.Договор,
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.Документ.Дата,
	|	РасчетыСПокупателямиОстатки.Контрагент,
	|	ВЫРАЗИТЬ(РегистрСведенийЯндексДоставка.НомерЗаказа КАК СТРОКА(1024))
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Валюта", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ТаблицаОтобранныеДолги", ОтобранныеДолги.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	Если Контрагент.ВестиРасчетыПоДоговорам
	   И НуженОтборПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Ссылка, ВидОперации));
	КонецЕсли;
	
	СписокДолгов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьДолги()

// Процедура - обработчик события ПередНачаломДобавления списка ОтобранныеДолги.
//
&НаКлиенте
Процедура ОтобранныеДолгиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ОтобранныеДолгиПередНачаломДобавления()

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("УчитыватьСебестоимостьДоставки") <> Неопределено Тогда
		Элементы.УчитыватьСебестоимостьДоставки.Пометка =  Настройки.Получить("УчитыватьСебестоимостьДоставки");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УчитыватьСебестоимостьДоставки(Команда)
	
	УчитыватьСебестоимостьДоставки = Не УчитыватьСебестоимостьДоставки;
	Элементы.УчитыватьСебестоимостьДоставки.Пометка = УчитыватьСебестоимостьДоставки;
	
КонецПроцедуры

#КонецОбласти
