
&НаКлиенте
Процедура ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока)
	
	СтруктураПоиска = Новый Структура("Договор", ТекущаяСтрока.Договор);
	Строки = СписокОтобранныеАвансыИДолги.НайтиСтроки(СтруктураПоиска);
	
	Если Строки.Количество() > 0 Тогда
		НоваяСтрока = Строки[0];
		СуммаРасчетов = СуммаРасчетов + НоваяСтрока.СуммаРасчетов;
	Иначе
		НоваяСтрока = СписокОтобранныеАвансыИДолги.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока.СуммаРасчетов = СуммаРасчетов;
	
	НоваяСтрока.Курс = ?(НоваяСтрока.Курс = 0, 1, НоваяСтрока.Курс);
	НоваяСтрока.Кратность = ?(НоваяСтрока.Кратность = 0, 1, НоваяСтрока.Кратность);
	
	НоваяСтрока.Курс = ?(
		НоваяСтрока.СуммаРасчетов = 0,
		1,
		ТекущаяСтрока.СуммаУчета / ТекущаяСтрока.СуммаРасчетов * КурсВалютаУчета
	);
	
	Если НЕ УчетВалютныхОпераций Тогда
		НоваяСтрока.СуммаУчета = ТекущаяСтрока.СуммаРасчетов;
	ИначеЕсли ЗапрашиватьСумму ИЛИ Строки.Количество() > 0 Тогда
		НоваяСтрока.СуммаУчета = ВалютыУНФКлиентСервер.Пересчитать(
			НоваяСтрока.СуммаРасчетов, НоваяСтрока.Курс, КурсВалютаУчета, НоваяСтрока.Кратность, КратностьВалютаУчета);
	КонецЕсли;
	
	Элементы.СписокОтобранныеАвансыИДолги.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	РассчитатьСуммыИтог();
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ)
	
	// Проверка заполненности реквизитов.
	НомерСтроки = 0;
		
	Для каждого СтрокаСписокОтобранныеАвансыИДолги Из СписокОтобранныеАвансыИДолги Цикл
		НомерСтроки = НомерСтроки + 1;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Курс) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Курс"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.Кратность) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Кратность"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма расчетов"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если УчетВалютныхОпераций
		И НЕ ЗначениеЗаполнено(СтрокаСписокОтобранныеАвансыИДолги.СуммаУчета) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Сумма учета"" в строке '")
				+ Строка(НомерСтроки)
				+ НСтр("ru = ' списка ""Отобранные авансы и долги"".'");
			Сообщение.Поле = "Документ";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура рассчитывает итоговые суммы.
//
&НаКлиенте
Процедура РассчитатьСуммыИтог()
	
	СуммаУчетаИтог = 0;
	
	Для каждого ТекСтрока Из СписокОтобранныеАвансыИДолги Цикл
		СуммаУчетаИтог = СуммаУчетаИтог + ТекСтрока.СуммаУчета;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммыИтог()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Компания = Параметры.Компания;
	Контрагент = Параметры.Контрагент;
	Ссылка = Параметры.Ссылка;
	Дата = Параметры.Дата;
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СчетУчета = Параметры.СчетУчета;
	ВидПрочегоВзаимозачета = Параметры.ВидПрочегоВзаимозачета;
	
	Элементы.СписокАвансовДолговДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	Элементы.СписокОтобранныеАвансыИДолгиДоговор.Видимость = Контрагент.ВестиРасчетыПоДоговорам;
	
	АдресСписокОтобранныеАвансыИДолгиВХранилище = Параметры.АдресДебиторВХранилище;
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаУчета));
	КурсВалютаУчета = СтруктураПоВалюте.Курс;
	КратностьВалютаУчета = СтруктураПоВалюте.Кратность;
	
	СтрокаКолонок =
		"Договор,
		|СуммаУчета,
		|Курс,
		|Кратность,
		|СуммаРасчетов";
	
	СписокОтобранныеАвансыИДолги.Загрузить(ПолучитьИзВременногоХранилища(АдресСписокОтобранныеАвансыИДолгиВХранилище));
	
	Элементы.СписокАвансовДолговСуммаУчета.Видимость = УчетВалютныхОпераций;
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммыИтог();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик нажатия кнопки ОК.
//
&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеРеквизитовФормы(Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьПодборВХранилище();
		Закрыть(КодВозвратаДиалога.OK);
	КонецЕсли;
	
КонецПроцедуры // ОК()

// Процедура - обработчик нажатия кнопки Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик нажатия кнопки ЗапрашиватьСумму.
//
&НаКлиенте
Процедура ЗапрашиватьСумму(Команда)
	
	ЗапрашиватьСумму = НЕ ЗапрашиватьСумму;
	Элементы.ЗапрашиватьСумму.Пометка = ЗапрашиватьСумму;
	
КонецПроцедуры // ЗапрашиватьСумму()

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ЗаписатьПодборВХранилище()
	
	СписокОтобранныеАвансыИДолгиВХранилище = СписокОтобранныеАвансыИДолги.Выгрузить(, СтрокаКолонок);
	ПоместитьВоВременноеХранилище(СписокОтобранныеАвансыИДолгиВХранилище, АдресСписокОтобранныеАвансыИДолгиВХранилище);
	
КонецПроцедуры // ЗаписатьПодборВХранилище()

// Добавляет строку в отобранные.
//
&НаКлиенте
Процедура ДобавитьСтрокуВОтобранные(ТекущаяСтрока)
	
	СуммаРасчетов = ТекущаяСтрока.СуммаРасчетов;
	Если ЗапрашиватьСумму Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока, СуммаРасчетов", ТекущаяСтрока, СуммаРасчетов));
		ПоказатьВводЧисла(ОписаниеОповещения, СуммаРасчетов, НСтр("ru = 'Введите сумму расчетов'"));
		
	Иначе
		
		ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВОтобранные()

// Процедура помещает результаты выбора в подбор.
//
&НаКлиенте
Процедура СписокАвансовВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	
КонецПроцедуры // СписокАвансовВыборЗначения()

// Процедура - обработчик события ПриНачалеРедактирования табличной части СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		РассчитатьСуммыИтог();
		ЗаполнитьАвансыИДолги();
	КонецЕсли;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриНачалеРедактирования()

// Процедура - обработчик события ПриИзменении поля ввода СуммаРасчетов табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Курс табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Кратность табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает сумму платежа.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаУчета табличной части
// СписокОтобранныеАвансыИДолги. Рассчитывает курс и кратность.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаУчета
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * КурсВалютаУчета
	);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиСуммаПлатежаПриИзменении()

// Процедура - обработчик события НачалоПеретаскивания списка СписокАвансов.
//
&НаКлиенте
Процедура СписокАвансовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Договор", ТекущиеДанные.Договор);
	Структура.Вставить("Документ", ТекущиеДанные.Документ);
	Структура.Вставить("Заказ", ТекущиеДанные.Заказ);
	Структура.Вставить("СуммаРасчетов", ТекущиеДанные.СуммаРасчетов);
	Структура.Вставить("ПризнакАванса", ТекущиеДанные.ПризнакАванса);
	
	Если ТекущиеДанные.Свойство("СуммаУчета") Тогда
		Структура.Вставить("СуммаУчета", ТекущиеДанные.СуммаУчета);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры // СписокАвансовНачалоПеретаскивания()

// Процедура - обработчик события ПроверкаПеретаскивания списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПроверкаПеретаскивания()

// Процедура - обработчик события Перетаскивание списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ПараметрыПеретаскивания.Значение;
	ДобавитьСтрокуВОтобранные(ТекущаяСтрока);
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПеретаскивание()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолги.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиПриИзменении(Элемент)
	
	РассчитатьСуммыИтог();
	ЗаполнитьАвансыИДолги();
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиПриИзменении()

// Процедура - обработчик события ПриИзменении списка СписокОтобранныеАвансыИДолгиДоговор.
//
&НаКлиенте
Процедура СписокОтобранныеАвансыИДолгиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.СписокОтобранныеАвансыИДолги.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // СписокОтобранныеАвансыИДолгиДоговорПриИзменении()

// Процедура рассчитывает сумму учета.
//
&НаКлиенте
Процедура РассчитатьСуммуУчета(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс      = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаУчета = ВалютыУНФКлиентСервер.Пересчитать(
		СтрокаТабличнойЧасти.СуммаРасчетов, СтрокаТабличнойЧасти.Курс, КурсВалютаУчета, СтрокаТабличнойЧасти.Кратность,
		КратностьВалютаУчета);
	
КонецПроцедуры // РассчитатьСуммуУчета()

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет список авансов.
//
&НаСервере
Процедура ЗаполнитьАвансыИДолги()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Организация,
	|	ОтобранныеДолги.Договор,
	|	ОтобранныеДолги.СуммаРасчетов,
	|	ОтобранныеДолги.СуммаУчета
	|ПОМЕСТИТЬ ТаблицаОтобранныеДолги
	|ИЗ
	|	&ТаблицаОтобранныеДолги КАК ОтобранныеДолги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПрочимиКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСПрочимиКонтрагентамиОстатки.Договор КАК Договор,
	|	СУММА(РасчетыСПрочимиКонтрагентамиОстатки.СуммаВалОстаток) КАК СуммаРасчетов,
	|	СУММА(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток) КАК СуммаУчета,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПрочимиКонтрагентамиОстатки.Организация КАК Организация,
	|		РасчетыСПрочимиКонтрагентамиОстатки.Договор КАК Договор,
	|		&Множитель * ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|		&Множитель * ЕСТЬNULL(РасчетыСПрочимиКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПрочимиКонтрагентами.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И СчетУчета = &СчетУчета) КАК РасчетыСПрочимиКонтрагентамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Организация,
	|		ОтобранныеДолги.Договор,
	|		-ОтобранныеДолги.СуммаРасчетов,
	|		-ОтобранныеДолги.СуммаУчета
	|	ИЗ
	|		ТаблицаОтобранныеДолги КАК ОтобранныеДолги
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Организация,
	|		ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Договор,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПрочимиКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1 * &Множитель * ЕСТЬNULL(ДвиженияДокументаРасчетыСПрочимиКонтрагентами.СуммаВал, 0)
	|			ИНАЧЕ &Множитель * ЕСТЬNULL(ДвиженияДокументаРасчетыСПрочимиКонтрагентами.СуммаВал, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПрочимиКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1 * &Множитель * ЕСТЬNULL(ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Сумма, 0)
	|			ИНАЧЕ &Множитель * ЕСТЬNULL(ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПрочимиКонтрагентами КАК ДвиженияДокументаРасчетыСПрочимиКонтрагентами
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПрочимиКонтрагентами.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПрочимиКонтрагентами.СчетУчета = &СчетУчета) КАК РасчетыСПрочимиКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПрочимиКонтрагентамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПрочимиКонтрагентамиОстатки.Организация,
	|	РасчетыСПрочимиКонтрагентамиОстатки.Договор,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПрочимиКонтрагентамиОстатки.СуммаВалОстаток) > 0";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ТаблицаОтобранныеДолги", СписокОтобранныеАвансыИДолги.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	Запрос.УстановитьПараметр("Множитель", ?(ВидПрочегоВзаимозачета = Перечисления.ВидыПрочегоВзаимозачета.ДолгПокупателяИДолгПрочемуКонтрагенту, -1, 1));
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СписокАвансовДолгов.Загрузить(МассивРезультатовЗапроса[1].Выгрузить());
	
КонецПроцедуры // ЗаполнитьАвансыИДолги()

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата ввода суммы зачета аванса поставщика
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СуммаРасчетов = РезультатЗакрытия;
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	ДобавитьИРассчитатьСтрокуАванса(СуммаРасчетов, ТекущаяСтрока);	
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

#КонецОбласти