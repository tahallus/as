
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ТипКоманды", ТипКоманды);
	Параметры.Свойство("СпособОтправки", СпособОтправки);
		
	ЗаполнитьПолучателей(ТипКоманды, СпособОтправки);
	Если ТипКоманды = "ЭкспортВСервис" ИЛИ ТипКоманды = "ДобавлениеВАдреснуюКнигу" Тогда
		АдресныеКнигиСервиса.Загрузить(МассовыеРассылкиИнтеграция.ПолучитьАдресныеКнигиСервиса());
		ИмяСервиса = МассовыеРассылкиИнтеграция.ПредставлениеСервиса();
	КонецЕсли;
	
	ЦветТекущегоШага = ЦветаСтиля.ЦветФонаПодсказки;
	ЦветШага         = ЦветаСтиля.ЦветФонаФормы;
	
	ТекущийШаг = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияВыборРассылкиНажатие(Элемент)
	ТекущийШаг = 2;
	ПреобразоватьДеревоАдресатовВТаблицуЗначений();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыборАдреснойКнигиНажатие(Элемент)
	
	ТекущийШаг = 2;
	ПреобразоватьДеревоАдресатовВТаблицуЗначений();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПометкаПриИзменении(Элемент)
	
	УстановитьПометкуПодчиненныхРекурсивно(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка, Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьЭлементы());
	Если Элементы.ВыбранныеАдресаты.ТекущиеДанные.Пометка И ТипЗнч(Элементы.ВыбранныеАдресаты.ТекущиеДанные.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Родитель = Элементы.ВыбранныеАдресаты.ТекущиеДанные.ПолучитьРодителя();
		Родитель.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодготовкаСпискаПолучателейНажатие(Элемент)
	ТекущийШаг = 1;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура АдресныеКнигиСервисаВыбранПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура АдресныеКнигиСервисаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяКнига = Элементы.АдресныеКнигиСервиса.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяКнига.Идентификатор) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МассовыеРассылкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыборРассылкиСервер(ВыбранноеЗначение);
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура МассовыеРассылкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяРассылка = Элементы.МассовыеРассылки.ТекущиеДанные;
	Индекс = МассовыеРассылки.Индекс(ТекущаяРассылка);
	ПараметрыФормы = Новый Структура("Ключ", МассовыеРассылки[Индекс].Рассылка);
	ОткрытьФорму("Документ.МассоваяРассылка.Форма.ФормаДокумента", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура АдресныеКнигиСервисаПриАктивизацииСтроки(Элемент)
	
	Если АдресныеКнигиСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКнига = Элементы.АдресныеКнигиСервиса.ТекущиеДанные;
	Элементы.АдресныеКнигиСервисаКонтекстноеМенюУдалитьАдреснуюКнигу.Доступность = НЕ ЗначениеЗаполнено(ТекущаяКнига.Идентификатор);
КонецПроцедуры

&НаКлиенте
Процедура АдресныеКнигиСервисаПослеУдаления(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура АдресныеКнигиСервисаПередУдалением(Элемент, Отказ)
	
	ТекущаяКнига = Элементы.АдресныеКнигиСервиса.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяКнига.Идентификатор) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПометкиВерхнегоУровня(Команда)
	
	ИзменитьПометкиВерхнегоУровня(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВерхнегоУровня(Команда)
	
	ИзменитьПометкиВерхнегоУровня(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(Команда)
	
	ИзменитьПометкиПодчиненных(Истина, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиПодчиненных(Команда)
	
	ИзменитьПометкиПодчиненных(Ложь, ВыбранныеАдресаты);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из ВыбранныеАдресаты.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.ВыбранныеАдресаты.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКПервомуШагу(Команда)
	ТекущийШаг = 1;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПереходКоВторомуШагу(Команда)
	
	ТекущийШаг = 2;
	
	Если ТипКоманды <> "ДобавлениеВКнигу" Тогда
		ПреобразоватьДеревоАдресатовВТаблицуЗначений();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдреснуюКнигу(Команда)
	НоваяАдреснаяКнига = АдресныеКнигиСервиса.Добавить();
	Элементы.АдресныеКнигиСервиса.ТекущаяСтрока = НоваяАдреснаяКнига.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборАдреснойКниги(Команда)
	
	Если АдресныеКнигиСервиса.Количество() = 0 Тогда
		Закрыть();
		Возврат;
	КонецЕсли;

	ЭкспортироватьКонтактыВСервисРассылок();
	ВыбранныеАдресныеКниги = АдресныеКнигиСервиса.НайтиСтроки(Новый Структура("Выбран", Истина));
	Отбор = Новый Структура();
	Отбор.Вставить("Идентификатор", "");
	Отбор.Вставить("Наименование", "");
	НезаполненныеАдресныеКниги = АдресныеКнигиСервиса.НайтиСтроки(Отбор);
	
	Если КоличествоДобавленныхПолучателей = 0 Тогда
		Закрыть();
		Возврат;
	КонецЕсли;

	СтрокаИзменено = СтрокаСЧислом(
		НСтр("ru=';Добавлены получатели в %1 адресную книгу;;Добавлены получатели в %1 адресные книги;Добавлены получатели в %1 адресных книг;Добавлены получатели в %1 адресные книги'"),
		Строка(ВыбранныеАдресныеКниги.Количество() - НезаполненныеАдресныеКниги.Количество()),
		ВидЧисловогоЗначения.Количественное);

	ПоказатьОповещениеПользователя(
		НСтр("ru='Изменено:'"),,СтрокаИзменено,
		БиблиотекаКартинок.Информация32);
		
	Закрыть();

	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРассылку(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("СпособОтправки", СпособОтправки);
	ПараметрыФормы.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиРассылки.Черновик"));
	ПараметрыФормы.Вставить("СервисРассылкиИдентификаторАдреснойКниги", "");
	
	ОткрытьФорму("Документ.МассоваяРассылка.ФормаВыбора",ПараметрыФормы, Элементы.МассовыеРассылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьРассылку(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("СпособОтправки", СпособОтправки);
	ПараметрыФормы.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиРассылки.Черновик"));
	
	ОткрытьФорму("Документ.МассоваяРассылка.ФормаВыбора", ПараметрыФормы, Элементы.МассовыеРассылки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРассылкуИзСписка(Команда)
	ТекущаяРассылка = Элементы.МассовыеРассылки.ТекущиеДанные;
	МассовыеРассылки.Удалить(МассовыеРассылки.Индекс(ТекущаяРассылка));
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАдреснуюКнигу(Команда)
	ТекущаяКнига = Элементы.АдресныеКнигиСервиса.ТекущиеДанные;
	АдресныеКнигиСервиса.Удалить(АдресныеКнигиСервиса.Индекс(ТекущаяКнига));
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборРассылки(Команда)
	
	Если МассовыеРассылки.Количество() = 0 Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДобавитьПолучателейВРассылки();
	
	СтрокаИзменено = СтрокаСЧислом(
		НСтр("ru=';Добавлены получатели в %1 рассылку;;Добавлены получатели в %1 рассылки;Добавлены получатели %1 рассылок;Добавлены получатели в %1 рассылки'"),
		Строка(МассовыеРассылки.Количество()),
		ВидЧисловогоЗначения.Количественное);
		
	Если МассовыеРассылки.Количество() = 1 Тогда
		СсылкаНаРассылку = ПолучитьНавигационнуюСсылку(МассовыеРассылки[0].Рассылка);
	КонецЕсли;
	
	ОповещениеСпискаРассылок = Новый ОписаниеОповещения("ОткрытьСписокРассылокПоОповещению", ЭтотОбъект);
	ПоказатьОповещениеПользователя(
		НСтр("ru='Изменение: '"), ?(МассовыеРассылки.Количество() = 1, СсылкаНаРассылку, ОповещениеСпискаРассылок),
		?(МассовыеРассылки.Количество() = 1,Строка(МассовыеРассылки[0].Рассылка), СтрокаИзменено),
		БиблиотекаКартинок.Информация32);
		
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиВерхнегоУровня(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокаПервыйУровень.Пометка = Пометка;
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) <> Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометкиПодчиненных(Пометка, Дерево)
	
	СтрокиПервыйУровень = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			Если ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВторойУровень.Пометка = Пометка;
			СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
			Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
				СтрокаТретийУровень.Пометка = Пометка;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоДобавлениеВРассылку = ТипКоманды = "ДобавлениеВРассылку";
	ЭтоЭкспортВСервис      = ТипКоманды = "ЭкспортВСервис";
	ЭтоДобавлениеВКнигу    = ТипКоманды = "ДобавлениеВАдреснуюКнигу";
	
	Адресаты = ВыбранныеАдресаты.ПолучитьЭлементы();
	ЭтоДобавлениеКонтактов    = Адресаты.Количество() <> 0 И ТипЗнч(Адресаты[0].Значение) = Тип("СправочникСсылка.КонтактныеЛица");
	ЭтоДобавлениеЛидов        = Адресаты.Количество() <> 0 И ТипЗнч(Адресаты[0].Значение) = Тип("СправочникСсылка.Лиды");
	ЭтоДобавлениеКонтрагентов = Адресаты.Количество() <> 0 И ТипЗнч(Адресаты[0].Значение) = Тип("СправочникСсылка.Контрагенты");
	
	Если ЭтоДобавлениеВКнигу Тогда
		ТекущийШаг = 2;
		Элементы.ДекорацияВыборАдреснойКниги.Заголовок = НСтр("ru = 'Выбор адресной книги'");
	КонецЕсли;
	
	Элементы.ДекорацияВыборРассылки.Видимость      = ЭтоДобавлениеВРассылку;
	Элементы.ДекорацияВыборАдреснойКниги.Видимость = ЭтоЭкспортВСервис;
	Элементы.ПанельВыборШага. Видимость            = НЕ ЭтоДобавлениеВКнигу;
	
	Если ЭтоДобавлениеВРассылку ИЛИ ЭтоЭкспортВСервис И ТекущийШаг = 1 Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборПолучателей;
	КонецЕсли;
	
	Если ЭтоДобавлениеВРассылку И ТекущийШаг = 2 Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРассылки;
	КонецЕсли;
	
	Если ЭтоДобавлениеВКнигу ИЛИ (ЭтоЭкспортВСервис И ТекущийШаг = 2) Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборАдреснойКниги;
	КонецЕсли;

		
	Элементы.ПереходКоВторомуШагу.КнопкаПоУмолчанию        = ТекущийШаг = 1;
	Элементы.ЗавершитьВыборРассылки.КнопкаПоУмолчанию      = ЭтоДобавлениеВРассылку И ТекущийШаг = 2;
	Элементы.ЗавершитьВыборАдреснойКниги.КнопкаПоУмолчанию = Не ЭтоДобавлениеВРассылку И ТекущийШаг = 2;
	
	Если ТекущийШаг = 1 Тогда
		Элементы.Шаг1.ЦветФона = ЦветТекущегоШага;
		Элементы.Шаг2.ЦветФона = ЦветШага;
	Иначе
		Элементы.Шаг1.ЦветФона = ЦветШага;
		Элементы.Шаг2.ЦветФона = ЦветТекущегоШага;
	КонецЕсли;
	
	Если ЭтоДобавлениеКонтактов Тогда
		Элементы.ПодменюРодитель.Заголовок = НСтр("ru = 'Контакты'");
		Элементы.ПодменюПодчиненные.Заголовок = НСтр("ru = 'Контрагенты'");
	КонецЕсли;
	
	Если ЭтоДобавлениеКонтрагентов Тогда
		Элементы.ПодменюРодитель.Заголовок = НСтр("ru = 'Контрагенты'");
		Элементы.ПодменюПодчиненные.Заголовок = НСтр("ru = 'Контакты'");
	КонецЕсли;
	
	Если ЭтоДобавлениеЛидов Тогда
		Элементы.ПодменюРодитель.Заголовок = НСтр("ru = 'Лиды'");
		Элементы.ПодменюПодчиненные.Заголовок = НСтр("ru = 'Контакты'");
	КонецЕсли;
	
	Элементы.МассовыеРассылкиКонтекстноеМенюУдалитьРассылкуИзСписка.Доступность = МассовыеРассылки.Количество() <> 0;
	Элементы.СтрокаСостоянияВыбораРассылки.Заголовок = СтрокаСостоянияВыбораРассылки();
	Элементы.СтрокаСостоянияВыбораКниги.Заголовок = СтрокаСостоянияВыбораКниги();
	ЭтотОбъект.Заголовок = ЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателей(ТипКоманды, СпособОтправки)
	
	Если ТипКоманды = "ДобавлениеВРассылку" ИЛИ ТипКоманды = "ЭкспортВСервис" Тогда
		
		ТипКИ = ?(СпособОтправки = Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		МассивАдресатов = Новый Массив;
		Если Параметры.Свойство("Адресаты") Тогда
			МассивАдресатов = Параметры.Адресаты;
		КонецЕсли;
		
		Если  МассивАдресатов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(МассивАдресатов[0]) = Тип("СправочникСсылка.Лиды") Тогда
			ДобавитьВыбранныхЛидов(МассивАдресатов, ТипКИ);
			Возврат;
		КонецЕсли;
		
		МассивКонтактов    = Новый Массив;
		МассивКонтрагентов = Новый Массив;
		
		Для Каждого Адресат Из МассивАдресатов Цикл
			Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Контрагенты") Тогда
				МассивКонтрагентов.Добавить(Адресат);
				Продолжить;
			КонецЕсли;
			МассивКонтактов.Добавить(Адресат);
		КонецЦикла;
		
		ДобавитьВыбранныхКонтрагентов(МассивКонтрагентов, МассивКонтактов, ТипКИ);
		ДобавитьВыбранныхКонтактов(МассивКонтактов, ТипКИ);
		
	КонецЕсли;
	
	Если ТипКоманды = "ДобавлениеВАдреснуюКнигу" Тогда
		
		АдресВХранилище = "";
		Параметры.Свойство("АдресВХранилище", АдресВХранилище);
		Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПолучателей.Очистить();
		ТаблицаПолучателей.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтрагентов(Контрагенты, Контакты, ТипКИ)
	
	Если Контрагенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтрагентыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И КонтрагентыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	Контрагенты.КонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """""""""""""""") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки,
	|	Контрагенты.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО Контрагенты.Ссылка = втКИКонтрагентов.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагенты)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление,
	|	втКИКонтрагентов.Порядок
	|ИТОГИ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактныхЛиц
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СвязиКонтрагентКонтакт.Контрагент КАК Контрагент,
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Представление КАК КонтактноеЛицоПредставление,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактныхЛиц.Представление, """""""""""""""") КАК ЗначениеКИ,
	|	втКИКонтактныхЛиц.ИндексКартинки КАК ИндексКартинки,
	|	втКИКонтактныхЛиц.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактныхЛиц КАК втКИКонтактныхЛиц
	|		ПО (КонтактныеЛица.Ссылка = втКИКонтактныхЛиц.Ссылка)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент В ИЕРАРХИИ(&Контрагенты)
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактноеЛицоПредставление,
	|	втКИКонтактныхЛиц.Порядок
	|ИТОГИ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ТипыКИ", ТипКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтрагентов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактныхЛиц = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контрагент");
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаКонтрагентов.Контрагент;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаКонтрагентов.КонтрагентПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 1;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
		КИКонтрагентаНезаполнено = Ложь;
		НетКонтактовКонтрагента  = Истина;
		
		Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
			
			Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
				КИКонтрагентаНезаполнено = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Контрагентов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Контрагентов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтактныхЛиц.Сбросить();
		Отбор.Контрагент = ВыборкаКонтрагентов.Контрагент;
		Пока ВыборкаКонтактныхЛиц.НайтиСледующий(Отбор) Цикл
			
			ВыборкаКонтактовКонтрагента = ВыборкаКонтактныхЛиц.Выбрать();
			ТекущийКонтакт = Справочники.КонтактныеЛица.ПустаяСсылка();
			
			Пока ВыборкаКонтактовКонтрагента.Следующий() Цикл
				
				Если ВыборкаКонтактовКонтрагента.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущийКонтакт <> ВыборкаКонтактовКонтрагента.КонтактноеЛицо Тогда
					ТекущийКонтакт = ВыборкаКонтактовКонтрагента.КонтактноеЛицо;
					НетКонтактовКонтрагента = Ложь;
					СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
					СтрокаВторойУровень.Пометка = Ложь;
					СтрокаВторойУровень.Значение = ВыборкаКонтактовКонтрагента.КонтактноеЛицо;
					СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтактовКонтрагента.КонтактноеЛицоПредставление;
					СтрокаВторойУровень.ИндексКартинки = 2;
				КонецЕсли;
				
				СтрокаВторойУровень.Пометка = КИКонтрагентаНезаполнено И СтрокаВторойУровень.Значение = ВыборкаКонтрагентов.ОсновноеКонтактноеЛицо;
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = СтрокаВторойУровень.Пометка;
				СтрокаТретийУровень.Значение = ВыборкаКонтактовКонтрагента.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКонтактовКонтрагента.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКонтактовКонтрагента.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НетКонтактовКонтрагента И КИКонтрагентаНезаполнено Тогда
			СтрокаПервыйУровень.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхКонтактов(знач Контакты, ТипКИ)
	
	Если Контакты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактныеЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактов
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Контакт,
	|	КонтактныеЛица.Представление КАК КонтактПредставление,
	|	ЕСТЬNULL(втКИКонтактов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактов.Представление, """""""""""""""") КАК ЗначениеКИ,
	|	втКИКонтактов.ИндексКартинки КАК ИндексКартинки,
	|	КонтактныеЛица.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактов КАК втКИКонтактов
	|		ПО КонтактныеЛица.Ссылка = втКИКонтактов.Ссылка
	|ГДЕ
	|	КонтактныеЛица.Ссылка В ИЕРАРХИИ(&Контакты)
	|	И КонтактныеЛица.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактПредставление,
	|	втКИКонтактов.Порядок
	|ИТОГИ ПО
	|	Контакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтрагентыЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтрагентыЛицаКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтрагентов
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контрагент = КонтрагентыЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И КонтрагентыЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СвязиКонтрагентКонтакт.Контакт КАК Контакт,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК КонтрагентПредставление,
	|	ЕСТЬNULL(втКИКонтрагентов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтрагентов.Представление, """""""""""""""") КАК ЗначениеКИ,
	|	втКИКонтрагентов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = СвязиКонтрагентКонтакт.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтрагентов КАК втКИКонтрагентов
	|		ПО СвязиКонтрагентКонтакт.Контрагент = втКИКонтрагентов.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В ИЕРАРХИИ(&Контакты)
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентПредставление
	|ИТОГИ ПО
	|	Контакт";
	
	Запрос.УстановитьПараметр("Контакты", Контакты);
	Запрос.УстановитьПараметр("ТипыКИ", ТипКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаКонтактов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтрагентов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Контакт");
	
	Пока ВыборкаКонтактов.Следующий() Цикл
				
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();		
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаКонтактов.Контакт;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаКонтактов.КонтактПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 2;
		
		КИКонтактаНезаполнено = Ложь;
		НетКонтрагентовКонтакта  = Истина;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Контактов = ВыборкаКонтактов.Выбрать();
		Пока ВыборкаКИ_Контактов.Следующий() Цикл
			
			Если ВыборкаКИ_Контактов.ВидКИ = Неопределено Тогда
				КИКонтактаНезаполнено = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Контактов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контактов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Контактов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтрагентов.Сбросить();
		Отбор.Контакт = ВыборкаКонтактов.Контакт;
		Пока ВыборкаКонтрагентов.НайтиСледующий(Отбор) Цикл
			
			ВыборкаКИ_Контрагентов = ВыборкаКонтрагентов.Выбрать();
			ДобавленоПредставление = Ложь;
			ТекущийКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			
			Пока ВыборкаКИ_Контрагентов.Следующий() Цикл
				
				Если ВыборкаКИ_Контрагентов.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущийКонтрагент <> ВыборкаКИ_Контрагентов.Контрагент Тогда
					ТекущийКонтрагент = ВыборкаКИ_Контрагентов.Контрагент;
					НетКонтрагентовКонтакта = Ложь;
					СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
					СтрокаВторойУровень.Пометка = Ложь;
					СтрокаВторойУровень.Значение = ВыборкаКИ_Контрагентов.Контрагент;
					СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.КонтрагентПредставление;
					СтрокаВторойУровень.ИндексКартинки = 2;
				КонецЕсли;
			
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = Ложь;
				СтрокаТретийУровень.Значение = ВыборкаКИ_Контрагентов.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКИ_Контрагентов.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКИ_Контрагентов.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НетКонтрагентовКонтакта И КИКонтактаНезаполнено Тогда
			СтрокаПервыйУровень.Пометка = Ложь;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныхЛидов(знач Лиды, ТипКИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ЛидыКонтактнаяИнформация.Вид КАК Вид,
	|	ЛидыКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА ЛидыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ЛидыКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИЛидов
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И ЛидыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	Лиды.Представление КАК ЛидПредставление,
	|	ЕСТЬNULL(втКИЛидов.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИЛидов.Представление, """") КАК ЗначениеКИ,
	|	втКИЛидов.ИндексКартинки КАК ИндексКартинки,
	|	Лиды.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИЛидов КАК втКИЛидов
	|		ПО Лиды.Ссылка = втКИЛидов.Ссылка
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И Лиды.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛидПредставление,
	|	втКИЛидов.Порядок
	|ИТОГИ ПО
	|	Лид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактыЛидовКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактыЛидовКонтактнаяИнформация.Вид КАК Вид,
	|	КонтактыЛидовКонтактнаяИнформация.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			ТОГДА 0
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ТОГДА 3
	|		КОГДА КонтактыЛидовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	КонтактыЛидовКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК Порядок
	|ПОМЕСТИТЬ втКИКонтактовЛида
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов.КонтактнаяИнформация КАК КонтактыЛидовКонтактнаяИнформация
	|		ПО (КонтактыЛидов.Ссылка = КонтактыЛидовКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидовКонтактнаяИнформация.Тип В(&ТипыКИ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Лиды.Ссылка КАК Лид,
	|	КонтактыЛидов.Ссылка КАК КонтактЛида,
	|	КонтактыЛидов.Представление КАК КонтактЛидаПредставление,
	|	ЕСТЬNULL(втКИКонтактовЛида.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКИ,
	|	ЕСТЬNULL(втКИКонтактовЛида.Представление, """") КАК ЗначениеКИ,
	|	втКИКонтактовЛида.ИндексКартинки КАК ИндексКартинки,
	|	втКИКонтактовЛида.Порядок КАК Порядок
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактыЛидов КАК КонтактыЛидов
	|		ПО (КонтактыЛидов.Владелец = Лиды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИКонтактовЛида КАК втКИКонтактовЛида
	|		ПО (КонтактыЛидов.Ссылка = втКИКонтактовЛида.Ссылка)
	|ГДЕ
	|	Лиды.Ссылка В ИЕРАРХИИ(&Лиды)
	|	И КонтактыЛидов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактЛидаПредставление,
	|	втКИКонтактовЛида.Порядок
	|ИТОГИ ПО
	|	Лид";
	
	Запрос.УстановитьПараметр("Лиды", Лиды);
	Запрос.УстановитьПараметр("ТипыКИ", ТипКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаЛидов = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКонтактовЛидов = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Отбор = Новый Структура("Лид");
	
	Пока ВыборкаЛидов.Следующий() Цикл
		
		СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
		СтрокаПервыйУровень = СтрокиПервыйУровень.Добавить();
		СтрокаПервыйУровень.Пометка = Истина;
		СтрокаПервыйУровень.Значение = ВыборкаЛидов.Лид;
		СтрокаПервыйУровень.ПредставлениеЗначения = ВыборкаЛидов.ЛидПредставление;
		СтрокаПервыйУровень.ИндексКартинки = 1;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		ВыборкаКИ_Лидов = ВыборкаЛидов.Выбрать();
		КИЛидаНезаполнено = Ложь;
		НетКонтактовЛида  = Истина;
		
		Пока ВыборкаКИ_Лидов.Следующий() Цикл
			
			Если ВыборкаКИ_Лидов.ВидКИ = Неопределено Тогда
				КИЛидаНезаполнено = Истина;
				Продолжить;
			КонецЕсли;
			
			СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
			СтрокаВторойУровень.Пометка = Истина;
			СтрокаВторойУровень.Значение = ВыборкаКИ_Лидов.ВидКИ;
			СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКИ_Лидов.ЗначениеКИ;
			СтрокаВторойУровень.ИндексКартинки = ВыборкаКИ_Лидов.ИндексКартинки;
			
		КонецЦикла;
		
		ВыборкаКонтактовЛидов.Сбросить();
		Отбор.Лид = ВыборкаЛидов.Лид;
		Пока ВыборкаКонтактовЛидов.НайтиСледующий(Отбор) Цикл
			
			ВыборкаКонтактовЛида = ВыборкаКонтактовЛидов.Выбрать();
			ТекущийКонтакт = Справочники.КонтактыЛидов.ПустаяСсылка();
			
			Пока ВыборкаКонтактовЛида.Следующий() Цикл
				
				Если ВыборкаКонтактовЛида.ВидКИ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущийКонтакт <> ВыборкаКонтактовЛида.КонтактЛида Тогда
					ТекущийКонтакт = ВыборкаКонтактовЛида.КонтактЛида ;
					НетКонтактовЛида = Ложь;
					СтрокаВторойУровень = СтрокиВторойУровень.Добавить();
					СтрокаВторойУровень.Пометка = Ложь;
					СтрокаВторойУровень.Значение = ВыборкаКонтактовЛида.КонтактЛида ;
					СтрокаВторойУровень.ПредставлениеЗначения = ВыборкаКонтактовЛида.КонтактЛидаПредставление;
					СтрокаВторойУровень.ИндексКартинки = 2;
				КонецЕсли;
				
				СтрокаВторойУровень.Пометка = Ложь;
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				СтрокаТретийУровень = СтрокиТретийУровень.Добавить();
				СтрокаТретийУровень.Пометка = СтрокаВторойУровень.Пометка;
				СтрокаТретийУровень.Значение = ВыборкаКонтактовЛида.ВидКИ;
				СтрокаТретийУровень.ПредставлениеЗначения = ВыборкаКонтактовЛида.ЗначениеКИ;
				СтрокаТретийУровень.ИндексКартинки = ВыборкаКонтактовЛида.ИндексКартинки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НетКонтактовЛида И КИЛидаНезаполнено Тогда
			СтрокаПервыйУровень.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ЗаголовокФормы()
	
	Заголовок = "";
	Если ТипКоманды = "ДобавлениеВРассылку" Тогда
		Заголовок = НСтр("ru = 'Добавление в рассылку "+ Строка(СпособОтправки) +"'");
	КонецЕсли;
	
	Если ТипКоманды = "ЭкспортВСервис" ИЛИ ТипКоманды = "ДобавлениеВАдреснуюКнигу" Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Экспорт в адресную книгу %1'"), ИмяСервиса);
	КонецЕсли;
	
	Если ТипКоманды <> "ДобавлениеВАдреснуюКнигу" Тогда
		Заголовок = Заголовок + НСтр("ru = ' (Шаг "+Строка(ТекущийШаг)+"/2)'");
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

&НаКлиенте
Функция СтрокаСостоянияВыбораРассылки()
	
	Если МассовыеРассылки.Количество() = 0 Тогда
		Возврат НСтр("ru ='Не выбрано ни одной рассылки'");
	КонецЕсли;
	
	СтрокаСостояния = "";

	СтрокаПолучатели = СтрокаСЧислом(
		НСтр("ru=';Будет добавлен %1 получатель;;Будет добавлено %1 получателя;Будет добавлено %1 получателей;Будет добавлено %1 получателя'"),
		Строка(ТаблицаПолучателей.Количество()),
		ВидЧисловогоЗначения.Количественное);
		
	СтрокаРассылки = СтрокаСЧислом(
		НСтр("ru=';в %1 рассылку;;в %1 рассылки;в %1 рассылок;в %1 рассылки'"),
		Строка(МассовыеРассылки.Количество()),
		ВидЧисловогоЗначения.Количественное);
		
	СтрокаСостояния = СтрокаПолучатели + Символы.НПП + СтрокаРассылки;
	
	Возврат СтрокаСостояния;
	
КонецФункции

&НаКлиенте
Функция СтрокаСостоянияВыбораКниги()

	ВыбранныеАдресныеКниги = АдресныеКнигиСервиса.НайтиСтроки(Новый Структура("Выбран", Истина));
	Если ВыбранныеАдресныеКниги.Количество() = 0 Тогда
		Возврат НСтр("ru ='Не выбрано ни одной адресной книги'");
	КонецЕсли;
	
	СтрокаСостояния = "";
	
	СтрокаПолучатели = СтрокаСЧислом(
		НСтр("ru=';Будет добавлен %1 получатель;;Будет добавлено %1 получателя;Будет добавлено %1 получателей;Будет добавлено %1 получателя'"),
		Строка(ТаблицаПолучателей.Количество()),
		ВидЧисловогоЗначения.Количественное);
	СтрокаАдреснойКниги = СтрокаСЧислом(
		НСтр("ru=';в %1 адресную книгу;;в %1 адресные книги;в %1 адресных книг;в %1 адресные книги'"),
		Строка(ВыбранныеАдресныеКниги.Количество()),
		ВидЧисловогоЗначения.Количественное);
		
	СтрокаСостояния = СтрокаПолучатели + Символы.НПП + СтрокаАдреснойКниги;
	Возврат СтрокаСостояния;
	
КонецФункции

&НаСервере
Процедура ЭкспортироватьКонтактыВСервисРассылок()
		
	ПолучателиАдреснойКниги = ПолучателиАдреснойКниги();
	
	Если ПолучателиАдреснойКниги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ВыбранныеАдресныеКниги = АдресныеКнигиСервиса.НайтиСтроки(Новый Структура("Выбран", Истина));
	КоличествоДобавленныхПолучателей = 0;
	
	Для каждого АдреснаяКнига Из ВыбранныеАдресныеКниги Цикл
				
		Если НЕ ЗначениеЗаполнено(АдреснаяКнига.Идентификатор) Тогда
			
			Если НЕ ЗначениеЗаполнено(АдреснаяКнига.Наименование) Тогда
				Продолжить;
			КонецЕсли;

			ДанныеАдреснойКниги = МассовыеРассылкиИнтеграция.НовыйДанныеАдреснойКнигиСервиса();
			ДанныеАдреснойКниги.Наименование = АдреснаяКнига.Наименование;
			ДанныеАдреснойКниги.Получатели = ПолучателиАдреснойКниги;
			МассовыеРассылкиИнтеграция.СоздатьАдреснуюКнигуСервиса(ДанныеАдреснойКниги);
			Продолжить;
			
		КонецЕсли;
	
		ДанныеАдреснойКниги = МассовыеРассылкиИнтеграция.НовыйДанныеАдреснойКнигиСервиса();
		ДанныеАдреснойКниги.Идентификатор = АдреснаяКнига.Идентификатор;
		ДанныеАдреснойКниги.Получатели = ПолучателиАдреснойКниги;
		МассовыеРассылкиИнтеграция.ДобавитьПолучателейВАдреснуюКнигуСервиса(ДанныеАдреснойКниги);
		КоличествоДобавленныхПолучателей = ПолучателиАдреснойКниги.Количество();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучателиАдреснойКниги()
	
	ДанныеАдреснойКниги = МассовыеРассылкиИнтеграция.НовыйДанныеАдреснойКнигиСервиса();
	Для каждого Получатель Из ТаблицаПолучателей Цикл
		
		Если НЕ ЗначениеЗаполнено(Получатель.КакСвязаться) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйДанныеПолучателя = ДанныеАдреснойКниги.Получатели.Добавить();
		НовыйДанныеПолучателя.Контакт = Получатель.Контакт;
		НовыйДанныеПолучателя.Email = Получатель.КакСвязаться;
	КонецЦикла;
	
	Возврат ДанныеАдреснойКниги.Получатели;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьДеревоАдресатовВТаблицуЗначений()
	
	ТаблицаПолучателей.Очистить();
	
	СтрокиПервыйУровень = ВыбранныеАдресаты.ПолучитьЭлементы();
	Для Каждого СтрокаПервыйУровень Из СтрокиПервыйУровень Цикл
		
		Если СтрокаПервыйУровень.Пометка Тогда
			НоваяСтрокаКонтрагент = ТаблицаПолучателей.Добавить();
			НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
		КонецЕсли;
		
		СтрокиВторойУровень = СтрокаПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого СтрокаВторойУровень Из СтрокиВторойУровень Цикл
			
			Если СтрокаПервыйУровень.Пометка И ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаВторойУровень.Пометка Тогда
				
				Если НоваяСтрокаКонтрагент = Неопределено Тогда
					НоваяСтрокаКонтрагент = ТаблицаПолучателей.Добавить();
				КонецЕсли;
				
				НоваяСтрокаКонтрагент.Контакт = СтрокаПервыйУровень.Значение;
				НоваяСтрокаКонтрагент.КакСвязаться = СтрокаВторойУровень.ПредставлениеЗначения;
				НоваяСтрокаКонтрагент = Неопределено;
				
			ИначеЕсли (ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.Контрагенты")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.КонтактныеЛица")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.Лиды")
				ИЛИ ТипЗнч(СтрокаВторойУровень.Значение) = Тип("СправочникСсылка.КонтактыЛидов"))
				И СтрокаВторойУровень.Пометка Тогда
				
				НоваяСтрокаКонтактноеЛицо = ТаблицаПолучателей.Добавить();
				НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
				
				СтрокиТретийУровень = СтрокаВторойУровень.ПолучитьЭлементы();
				
				Для Каждого СтрокаТретийУровень Из СтрокиТретийУровень Цикл
					
					Если ТипЗнч(СтрокаТретийУровень.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаТретийУровень.Пометка Тогда
						
						Если НоваяСтрокаКонтактноеЛицо = Неопределено Тогда
							НоваяСтрокаКонтактноеЛицо = ТаблицаПолучателей.Добавить();
						КонецЕсли;
						
						НоваяСтрокаКонтактноеЛицо.Контакт = СтрокаВторойУровень.Значение;
						НоваяСтрокаКонтактноеЛицо.КакСвязаться = СтрокаТретийУровень.ПредставлениеЗначения;
						НоваяСтрокаКонтактноеЛицо = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НезаполненныеКонтакты = ТаблицаПолучателей.НайтиСтроки(Новый Структура("КакСвязаться", ""));
	Для Каждого Контакт Из НезаполненныеКонтакты Цикл
		ТаблицаПолучателей.Удалить(ТаблицаПолучателей.Индекс(Контакт));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуПодчиненныхРекурсивно(Пометка, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Пометка = Пометка;
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтрокиДерева.Количество() > 0 Тогда
			УстановитьПометкуПодчиненныхРекурсивно(Пометка, ПодчиненныеСтрокиДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыборРассылкиСервер(ВыбранноеЗначение)
	
	Если (ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() =0)
		ИЛИ (НЕ ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.МассоваяРассылка")) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.МассоваяРассылка") Тогда
		
		РассылкаУжеВыбрана = МассовыеРассылки.НайтиСтроки(Новый Структура("Рассылка", ВыбранноеЗначение));
		Если РассылкаУжеВыбрана.Количество() <> 0 Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = МассовыеРассылки.Добавить();
		НоваяСтрока.Рассылка = ВыбранноеЗначение;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого Рассылка Из ВыбранноеЗначение Цикл
			РассылкаУжеВыбрана = МассовыеРассылки.НайтиСтроки(Новый Структура("Рассылка", Рассылка));
			Если РассылкаУжеВыбрана.Количество() <> 0 Тогда
				Возврат;
			КонецЕсли;
			
			НоваяСтрока = МассовыеРассылки.Добавить();
			НоваяСтрока.Рассылка = Рассылка;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателейВРассылки()
	
	КоличествоДобавленныхПолучателей = 0;
	Для Каждого Рассылка Из МассовыеРассылки Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбъектРассылка = Рассылка.Рассылка.ПолучитьОбъект();
			ОбъектРассылка.Заблокировать();
			Для Каждого Адресат Из ТаблицаПолучателей Цикл
				
				Отбор = Новый Структура();
				Отбор.Вставить("Контакт", Адресат.Контакт);
				Отбор.Вставить("КакСвязаться", Адресат.КакСвязаться);
				
				АдресатУжеДобавлен = ОбъектРассылка.Получатели.НайтиСтроки(Отбор);
				Если АдресатУжеДобавлен.Количество() <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйПолучатель = ОбъектРассылка.Получатели.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПолучатель, Адресат);
				КоличествоДобавленныхПолучателей = КоличествоДобавленныхПолучателей + 1;
			КонецЦикла;
			
			ОбъектРассылка.Записать();
			ОбъектРассылка.Разблокировать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
		КонецПопытки;

				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРассылокПоОповещению(ДополнительныеПараметры) Экспорт
	ОткрытьФорму("Документ.МассоваяРассылка.ФормаСписка");
КонецПроцедуры

#КонецОбласти
