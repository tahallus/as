#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает идентификаторы включенных задач ассистента.
// 
// Возвращаемое значение:
//  Массив Из Строка - Идентификаторы задач.
//
Функция ИдентификаторыВключенныхЗадач() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиАссистентаПоРасчетуНалогов.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ЗадачиАссистентаПоРасчетуНалогов КАК ЗадачиАссистентаПоРасчетуНалогов
	|ГДЕ
	|	ЗадачиАссистентаПоРасчетуНалогов.Используется
	|	И НЕ ЗадачиАссистентаПоРасчетуНалогов.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередНачаломВыполненияЗадач(НовыеЗадачиКВыполнению) Экспорт
	
	
	
КонецПроцедуры

Процедура ПередЗаписьюПредметаЗадачи(Предмет) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриЗаписиПредметаЗадачи(Предмет) Экспорт
	
	Если ТипЗнч(Предмет) <> Тип("СправочникОбъект.ЗаписиКалендаряПодготовкиОтчетности") Тогда
		Возврат;
	КонецЕсли;
	
	НовыеЗадачиКВыполнению = АссистентУправления.НовыйТаблицаРегулярныхЗадачКВыполнению();
	ЗапланироватьЗадачиКВыполнению(НовыеЗадачиКВыполнению,, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет.Ссылка));
	Если НовыеЗадачиКВыполнению.Количество() <> 0 Тогда
		АссистентУправления.ЗапланироватьВыполнениеРегулярныхЗадач(НовыеЗадачиКВыполнению);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведенияПредметаЗадачи(Предмет) Экспорт
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведенияПредметаЗадачи(ПредметОбъект) Экспорт
	
	
	
КонецПроцедуры

Процедура ЗапланироватьЗадачиКВыполнению(НовыеЗадачиКВыполнению, ВыбранныеЗадачиАссистента = Неопределено, ВыбранныеЗаписиКалендаря = Неопределено) Экспорт
	
	НачалоСегодняшнегоДня = НачалоДня(ТекущаяДатаСеанса());
	СекундВЧасе = 3600;
	СекундВСутках = 24 * СекундВЧасе;
	ПлановыйЧасСутокДляВыполненияЗадачи = 7;
	
	ДанныеЗадач = ДанныеЗадачДляВыполнения(ВыбранныеЗадачиАссистента, ВыбранныеЗаписиКалендаря);
	Для каждого ДанныеЗадачи Из ДанныеЗадач Цикл
		
		ДнейОтЗадачиВСекундах = ДанныеЗадачи.КоличествоДней * СекундВСутках;
		Если ДанныеЗадачи.ОповещатьСНачалаСобытия Тогда
			ПлановаяДата = ДанныеЗадачи.ДатаНачалаСобытия + ДнейОтЗадачиВСекундах;
		Иначе
			ПлановаяДата = ДанныеЗадачи.ДатаОкончанияСобытия - ДнейОтЗадачиВСекундах;
		КонецЕсли;
		ПлановаяДата = НачалоДня(ПлановаяДата);
		
		Если НачалоСегодняшнегоДня > ПлановаяДата Тогда
			Продолжить;
		КонецЕсли;
		
		ПлановаяДата = ПлановаяДата + ПлановыйЧасСутокДляВыполненияЗадачи * СекундВЧасе;
		ПлановаяДата = МестноеВремя(ПлановаяДата, ПолучитьЧасовойПоясИнформационнойБазы());
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СобытиеКалендаря");
		ДополнительныеПараметры.Вставить("ДатаДокументаОбработкиСобытия");
		ДополнительныеПараметры.Вставить("ДатаНачалаСобытия");
		ДополнительныеПараметры.Вставить("ДатаОкончанияСобытия");
		ДополнительныеПараметры.Вставить("ДатаНачалаДокументов");
		ДополнительныеПараметры.Вставить("ДатаОкончанияДокументов");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ДанныеЗадачи);
		
		НоваяЗадача = НовыеЗадачиКВыполнению.Добавить();
		НоваяЗадача.Дата = ПлановаяДата;
		НоваяЗадача.Задача = ДанныеЗадачи.Задача;
		НоваяЗадача.Предмет = ДанныеЗадачи.ЗаписьКалендаря;
		НоваяЗадача.ДополнительныеПараметры = ДополнительныеПараметры;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗадачДляВыполнения(ВыбранныеЗадачиАссистента = Неопределено, ВыбранныеЗаписиКалендаря = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиАссистентаПоРасчетуНалогов.Ссылка КАК Задача,
	|	ЗадачиАссистентаПоРасчетуНалогов.Налог КАК Налог,
	|	ЗадачиАссистентаПоРасчетуНалогов.ОповещатьСНачалаСобытия КАК ОповещатьСНачалаСобытия,
	|	ЗадачиАссистентаПоРасчетуНалогов.КоличествоДней КАК КоличествоДней,
	|	ЗадачиАссистентаПоРасчетуНалогов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТЗадачиДаши
	|ИЗ
	|	Справочник.ЗадачиАссистентаПоРасчетуНалогов КАК ЗадачиАссистентаПоРасчетуНалогов
	|ГДЕ
	|	ЗадачиАссистентаПоРасчетуНалогов.Используется
	|	И (НЕ &ОтборПоЗадачамАссистента
	|			ИЛИ ЗадачиАссистентаПоРасчетуНалогов.Ссылка В (&ВыбранныеЗадачиАссистента))
	|	И (ЗадачиАссистентаПоРасчетуНалогов.Идентификатор = &Идентификатор1
	|			ИЛИ ЗадачиАссистентаПоРасчетуНалогов.Идентификатор = &Идентификатор2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиДаши.Задача КАК Задача,
	|	ЗадачиДаши.ОповещатьСНачалаСобытия КАК ОповещатьСНачалаСобытия,
	|	ЗадачиДаши.Налог КАК Налог,
	|	ЗадачиДаши.КоличествоДней КАК КоличествоДней,
	|	ЗадачиДаши.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.Ссылка, КалендарьПерсональныхЗадачОтчетности.Ссылка) КАК СобытиеКалендаря,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаСобытия) КАК ДатаНачалаСобытия,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) КАК ДатаОкончанияСобытия,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаДокументаОбработкиСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаДокументаОбработкиСобытия) КАК ДатаДокументаОбработкиСобытия,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаДокументов, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаДокументов) КАК ДатаНачалаДокументов,
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияДокументов, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияДокументов) КАК ДатаОкончанияДокументов
	|ПОМЕСТИТЬ ВТСобытияКалендаряПоЗадачам
	|ИЗ
	|	ВТЗадачиДаши КАК ЗадачиДаши
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗадачиДаши.Налог = КалендарьПодготовкиОтчетности.Задача
	|			И (НЕ КалендарьПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО ЗадачиДаши.Налог = КалендарьПерсональныхЗадачОтчетности.Задача
	|			И (НЕ КалендарьПерсональныхЗадачОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ДатаПервогоВходаВСистему КАК ДатаПервогоВходаВСистему
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) >= ДатаПервогоВходаВСистему.Значение
	|	И ЕСТЬNULL(КалендарьПодготовкиОтчетности.Ссылка, КалендарьПерсональныхЗадачОтчетности.Ссылка) ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСобытияКалендаряПоЗадачам.Задача КАК Задача,
	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка КАК ЗаписьКалендаря,
	|	ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря КАК СобытиеКалендаря,
	|	ВТСобытияКалендаряПоЗадачам.ОповещатьСНачалаСобытия КАК ОповещатьСНачалаСобытия,
	|	ВТСобытияКалендаряПоЗадачам.КоличествоДней КАК КоличествоДней,
	|	ВТСобытияКалендаряПоЗадачам.ДатаДокументаОбработкиСобытия КАК ДатаДокументаОбработкиСобытия,
	|	ВТСобытияКалендаряПоЗадачам.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВТСобытияКалендаряПоЗадачам.ДатаОкончанияСобытия КАК ДатаОкончанияСобытия,
	|	ВТСобытияКалендаряПоЗадачам.ДатаНачалаДокументов КАК ДатаНачалаДокументов,
	|	ВТСобытияКалендаряПоЗадачам.ДатаОкончанияДокументов КАК ДатаОкончанияДокументов,
	|	ЗаписиКалендаряПодготовкиОтчетности.Организация КАК Организация,
	|	ВТСобытияКалендаряПоЗадачам.Налог КАК Налог
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСобытияКалендаряПоЗадачам КАК ВТСобытияКалендаряПоЗадачам
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = ВТСобытияКалендаряПоЗадачам.СобытиеКалендаря
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.Завершено)
	|ГДЕ
	|	(НЕ &ОтборПоЗаписиКалендаря
	|			ИЛИ ЗаписиКалендаряПодготовкиОтчетности.Ссылка В (&ВыбранныеЗаписиКалендаряПодготовкиОтчетности))";
	
	Запрос.УстановитьПараметр("Идентификатор1", "РасчетИОповещениеПользователяОНачисленныхНалогах");
	Запрос.УстановитьПараметр("Идентификатор2", "ФормированиеИОповещениеПользователяОНеобходимостиСдачиОтчетности");
	Запрос.УстановитьПараметр("ОтборПоЗадачамАссистента", ВыбранныеЗадачиАссистента <> Неопределено);
	Запрос.УстановитьПараметр("ОтборПоЗаписиКалендаря", ВыбранныеЗаписиКалендаря <> Неопределено);
	Если ВыбранныеЗадачиАссистента <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВыбранныеЗадачиАссистента", ВыбранныеЗадачиАссистента);
	Иначе
		Запрос.УстановитьПараметр("ВыбранныеЗадачиАссистента", Новый Массив);
	КонецЕсли;
	Если ВыбранныеЗаписиКалендаря <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВыбранныеЗаписиКалендаряПодготовкиОтчетности", ВыбранныеЗаписиКалендаря);
	Иначе
		Запрос.УстановитьПараметр("ВыбранныеЗаписиКалендаряПодготовкиОтчетности", Новый Массив);
	КонецЕсли;
	
	ДанныеЗадачДляВыполнения = Новый Массив;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Задача");
		ДанныеЗадачи.Вставить("ОповещатьСНачалаСобытия");
		ДанныеЗадачи.Вставить("КоличествоДней");
		ДанныеЗадачи.Вставить("СобытиеКалендаря");
		ДанныеЗадачи.Вставить("ЗаписьКалендаря");
		ДанныеЗадачи.Вставить("ДатаДокументаОбработкиСобытия");
		ДанныеЗадачи.Вставить("ДатаНачалаСобытия");
		ДанныеЗадачи.Вставить("ДатаОкончанияСобытия");
		ДанныеЗадачи.Вставить("ДатаНачалаДокументов");
		ДанныеЗадачи.Вставить("ДатаОкончанияДокументов");
		ЗаполнитьЗначенияСвойств(ДанныеЗадачи, Результат);
		ДанныеЗадачДляВыполнения.Добавить(ДанныеЗадачи);
	КонецЦикла;
	
	Возврат ДанныеЗадачДляВыполнения;
	
КонецФункции

#КонецОбласти

#КонецЕсли