
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ШиринаЧека = 0 Тогда
	
		Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
			
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеПолученияШириныЛенты",
				ЭтотОбъект);
			МенеджерОборудованияКлиент.НачатьПолучениеШириныСтрокиПечатающегоУстройства(
				ОповещениеПриЗавершении, УникальныйИдентификатор, ТекущаяКассаККМ)
			
		Иначе
			ШиринаЧека = 32;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверка корректности типа метаданных, для которого необходимо получить шаблон.
	ПараметрОбъектМетаданных = Параметры.ОбъектМетаданных;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПараметрОбъектМетаданных);
	
	Если МетаданныеОбъекта = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден объект метаданных: %1'"),
			ПараметрОбъектМетаданных);
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;
	ИмяОбъектаМетаданных = "ЧекККМ";
	
	ШаблонОбъекта = ?(ПустаяСтрока(Параметры.АдресШаблона), Неопределено, ПолучитьИзВременногоХранилища(Параметры.АдресШаблона));
	
	Если ШаблонОбъекта <> Неопределено Тогда
		
		Если ШаблонОбъекта.Свойство("ДокументСсылка") Тогда
			ДокументСсылка = ШаблонОбъекта.ДокументСсылка;
		КонецЕсли;
		
		Если ШаблонОбъекта.Свойство("ШиринаЧека") Тогда
			ШиринаЧека = ШаблонОбъекта.ШиринаЧека;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШиринаЧека = 0 Тогда
		
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		СписокОборудования = Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам("ККТ",, ТекущееРабочееМесто);
			
		Если СписокОборудования.Количество() Тогда
			ТекущаяКассаККМ = СписокОборудования[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрОбъектМетаданных);
	
	Если МенеджерОбъекта <> Неопределено Тогда
		
		// Поиск документа для тестирования шаблона.
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = МенеджерОбъекта.ДокументДляШаблонаЧека();
		КонецЕсли;
		
	КонецЕсли;
	
	СКД = Неопределено;
	Если Параметры.Свойство("АдресСКД") Тогда
		
		АдресСКД = Параметры.АдресСКД;
		Если ЗначениеЗаполнено(АдресСКД) Тогда
			СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СКД = Неопределено Тогда
		
		СКД = Документы[ИмяОбъектаМетаданных].ПолучитьМакет("ПоляШаблонаЧекККТ");
		АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
		ВозвращатьСКД = Истина;
		
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресСКД);
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Если ШаблонОбъекта = Неопределено Тогда
		ЗагрузитьШаблонПоУмолчаниюСервер();
	ИначеЕсли ШаблонОбъекта.Шаблон = Неопределено Тогда
		ЗагрузитьШаблонПоУмолчаниюСервер();
	Иначе
		
		Попытка
			
			ШаблонПустой = РеквизитФормыВЗначение("ШаблонЧека");
			ТаблицаКолонок = Новый ТаблицаЗначений;
			ТаблицаКолонок.Колонки.Добавить("ИмяКолонки");
			ТаблицаКолонок.Колонки.Добавить("ВШаблоне");
			ТаблицаКолонок.Колонки.Добавить("ВСохраненном");
			
			КолонкиШаблона = ШаблонПустой.Колонки;
			
			Для Каждого КолонкаШаблона Из КолонкиШаблона Цикл
				
				НоваяСтрока = ТаблицаКолонок.Добавить();
				НоваяСтрока.ИмяКолонки = КолонкаШаблона.Имя;
				НоваяСтрока.ВШаблоне = 1;
				НоваяСтрока.ВСохраненном = 0;
				
			КонецЦикла;
			
			КолонкиСохраненные = ШаблонОбъекта.Шаблон.Колонки;
			
			Для Каждого КолонкаШаблона Из КолонкиСохраненные Цикл
				
				НоваяСтрока = ТаблицаКолонок.Добавить();
				НоваяСтрока.ИмяКолонки = КолонкаШаблона.Имя;
				НоваяСтрока.ВШаблоне = 0;
				НоваяСтрока.ВСохраненном = 1;
				
			КонецЦикла;
			
			ТаблицаКолонок.Свернуть("ИмяКолонки", "ВШаблоне,ВСохраненном");
			Для Каждого ПроверяемаяКолонка Из ТаблицаКолонок Цикл
				
				Если ПроверяемаяКолонка.ВШаблоне <> ПроверяемаяКолонка.ВСохраненном Тогда
					
					Если ПроверяемаяКолонка.ВШаблоне = 1 Тогда
						// Добавить в сохраненный.
						КолонкаДерева = КолонкиШаблона.Найти(ПроверяемаяКолонка.ИмяКолонки);
						Если КолонкаДерева <> Неопределено Тогда
							
							НоваяКолонка = КолонкиСохраненные.Добавить(
											КолонкаДерева.Имя,
											КолонкаДерева.ТипЗначения);
											
						КонецЕсли;

					Иначе
						// Удалить из сохраненного.
						КолонкаДерева = КолонкиСохраненные.Найти(ПроверяемаяКолонка.ИмяКолонки);
						
						Если КолонкаДерева <> Неопределено Тогда
							КолонкиСохраненные.Удалить(КолонкаДерева);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(ШаблонОбъекта.Шаблон, "ШаблонЧека");
			ОбойтиПредопределенныеРазделы("Перезаполнить");
			СформироватьМакетФискальногоЧека();
			
		Исключение
			
			СтрокаОшибки = СтрШаблон("%1%2%3",
				НСтр("ru = 'Не удалось открыть сохраненный шаблон по причине:'"),
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОчиститьШаблонСервер();
			ОбщегоНазначения.СообщитьПользователю(
				СтрокаОшибки,
				,
				"ШаблонЧека");
				
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ШаблонСохраняется = Истина;
	Если Модифицированность И НЕ ПараметрЗакрытия Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Шаблон был изменен. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		
	Иначе
		
		Если Модифицированность Тогда
			
			АдресРезультирующий = ПоместитьВоВременноеХранилищеШаблон();
			Оповестить("ИзмененШаблонЧека", АдресРезультирующий, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонЧекаПриИзменении(Элемент)
	СформироватьМакетФискальногоЧека();
КонецПроцедуры

&НаКлиенте
Процедура ДокументСсылкаПриИзменении(Элемент)
	СформироватьМакетФискальногоЧека(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШиринаЧекаПриИзменении(Элемент)
	СформироватьМакетФискальногоЧека(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблонЧека

&НаКлиенте
Процедура ШаблонЧекаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ТекущееПолеЗапрещеноРедактировать() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Текущее поле редактировать нельзя.'"));
		Возврат;
		
	КонецЕсли;
	
	ВыбраннаяСтрока = Элементы.ШаблонЧека.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОткрытиеФормыРедактированияПараметров(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущееПолеЗапрещеноРедактировать() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Текущее поле редактировать нельзя.'"));
		Возврат;
		
	КонецЕсли;
	ОткрытиеФормыРедактированияПараметров(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПередУдалением(Элемент, Отказ)
	
	Если ТекущееПолеЗапрещеноУдалять() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Это поле удалять нельзя.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроек

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		
		ИмяПараметра = Строка(ВыбраннаяСтрока);
		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("ИндексКартинки", 4);
		СтруктураПараметра.Вставить("Вычислять", Истина);
		
		Если СтрНайти(ИмяПараметра, "Штрихкод") > 0 Тогда
			СтруктураПараметра.Вставить("ВыводитьКакШтрихкод", Истина);
		КонецЕсли;
		
		ПолеВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.
			ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
			
		Если НЕ ПолеВыбора = Неопределено Тогда 
			СтруктураПараметра.Вставить("ОписаниеТипа",ПолеВыбора.ТипЗначения);
		КонецЕсли;
		
		ПодготовленноеИмяПараметра = СтрЗаменить(ИмяПараметра,".","");
		ДобавитьПолеВШаблон("Текст", ПодготовленноеИмяПараметра, СтруктураПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьЗакрытьФорму(Команда)
	
	ПроверкаУспешна = ОбойтиПредопределенныеРазделы("ПроверитьКорректность");
	
	Если ПроверкаУспешна Тогда
		
		ПараметрЗакрытия = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонПоУмолчанию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьШаблонПоУмолчаниюОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущий шаблон будет заменен на шаблон по умолчанию?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонРасширенный(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьШаблонРасширенныйОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущий шаблон будет заменен расширенным примером шаблона?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШаблон(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьШаблонОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить текущий шаблон?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайла(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмпортироватьШаблонИзФайлаОбработкаВопроса",
		ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущий шаблон будет потерян. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьШаблонВФайл(Команда)
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Расширение = "txt";
	ПараметрыСохранения.Диалог.Фильтр = НСтр("ru = 'Шаблон чека ККТ(*.txt)|*.txt'");
	
	АдресФайлаНаСервере = ЭкспортироватьШаблонВФайлСервер();
	
	ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресФайлаНаСервере,, ПараметрыСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПримерЧека(Команда)
	СформироватьМакетФискальногоЧека(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ИндексКартинки", 4);
	СтруктураСтроки.Вставить("ЭтоГруппа", Ложь);
	ДобавитьПолеВШаблон("Текст", "Текст", СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоставнуюСтроку(Команда)
	
	СтруктураСоставнойСтроки = Новый Структура;
	СтруктураСоставнойСтроки.Вставить("ИндексКартинки", 14);
	СтруктураСоставнойСтроки.Вставить("ЭтоГруппа", Истина);
	ДобавитьПолеВШаблон("СоставнаяСтрока", "СоставнаяСтрока", СтруктураСоставнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНефискальныйДокумент(Команда)
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ИндексКартинки", 1);
	СтруктураПоля.Вставить("ЭтоГруппа", Истина);
	ДобавитьПолеВШаблон("НефискальныйДокумент", НСтр("ru = 'Нефискальный документ'"), СтруктураПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтрезку(Команда)
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ИндексКартинки", 4);
	СтруктураПоля.Вставить("ЭтоГруппа", Истина);
	СтруктураПоля.Вставить("Выравнивание", "Центр");
	ДобавитьПолеВШаблон("Отрезка", "Отрезка", СтруктураПоля);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ЗагрузитьШаблонПоУмолчаниюОбработкаВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрОбъектМетаданных = "Документ.ЧекККМ" Тогда
			ЗагрузитьШаблонПоУмолчаниюСервер();
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Некорректно указан объект назначения'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонРасширенныйОбработкаВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрОбъектМетаданных = "Документ.ЧекККМ" Тогда
			ЗагрузитьШаблонРасширенныйСервер();
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Некорректно указан объект назначения'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШаблонОбработкаВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьШаблонСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайлаОбработкаВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Расширение = "txt";
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Шаблон фискального чека(*.txt)|*.txt'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ИмпортироватьШаблонИзФайлаОбработкаПомещенияФайлов",
		ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайлаОбработкаПомещенияФайлов(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПомещенныйФайл) = Тип("Структура") Тогда
		
		АдресФайла = ПомещенныйФайл.Хранение;
		ИмпортироватьШаблонИзФайлаСервер(АдресФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		// отмена
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ПараметрЗакрытия = Ложь;
		Модифицированность = Ложь;
		Закрыть();
		
	Иначе
		
		ПроверкаУспешна = ОбойтиПредопределенныеРазделы("ПроверитьКорректность");
		
		Если ПроверкаУспешна Тогда
			
			ПараметрЗакрытия = Истина;
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированиеШаблонаЧека(ОтветФормы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ОтветФормы) = Тип("Структура") Тогда
		
		ТекущаяСтрока = ШаблонЧека.НайтиПоИдентификатору(ОтветФормы.Идентификатор);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОтветФормы);
		СформироватьМакетФискальногоЧека();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеШаблона

&НаКлиенте
Процедура ЗавершениеПолученияШириныЛенты(ПолученныеДанные,ДополнительныеДанные)Экспорт

	ШиринаЧекаПоУмолчанию = 32;
	
	ШиринаЧека = ?(ЕстьСвойство(ПолученныеДанные, "Результат")
		И ПолученныеДанные.Результат
		И ЕстьСвойство(ПолученныеДанные,"ВыходныеПараметры")
		И ЗначениеЗаполнено(ПолученныеДанные.ВыходныеПараметры),
			ПолученныеДанные.ВыходныеПараметры[0], ШиринаЧекаПоУмолчанию);
			
		СформироватьМакетФискальногоЧека(Истина);
		
КонецПроцедуры
 

&НаСервере
Процедура ЗагрузитьШаблонПоУмолчаниюСервер()
	
	// совсем очищать шаблон нельзя - он не будет работать на ККТ.
	ЭлементыВерхнегоУровня = ШаблонЧека.ПолучитьЭлементы();
	ЭлементыВерхнегоУровня.Очистить();
	
	СтруктураПараметраГруппы = Новый Структура;
	СтруктураПараметраГруппы.Вставить("ИндексКартинки", 3);
	СтруктураПараметраГруппы.Вставить("ЭтоГруппа", Истина);
	
	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("ИндексКартинки", 10);
	СтруктураТаблицы.Вставить("ЭтоГруппа", Истина);
	
	СтруктураСоставнойСтроки = Новый Структура;
	СтруктураСоставнойСтроки.Вставить("ИндексКартинки", 14);
	СтруктураСоставнойСтроки.Вставить("ЭтоГруппа", Истина);
	
	СтрокаВерхнийУровень = ДобавитьПараметрВДерево(ШаблонЧека, "ФискальныйДокумент", НСтр("ru = 'Фискальный документ'"),
		СтруктураПараметраГруппы);
	СтрокаШапка = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "ПараметрыШапкиЧека", НСтр("ru = 'Шапка'"),
		СтруктураПараметраГруппы);
	ЗаполнитьРазделШапки(СтрокаШапка);
	
	СтрокаСоставЧека = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "СоставЧека", НСтр("ru = 'Состав чека'"),
		СтруктураПараметраГруппы);	
	СтрокаПозицииЧека = ДобавитьПараметрВДерево(СтрокаСоставЧека, "ТаблицаТовары", НСтр("ru = 'Товары'"),
		СтруктураТаблицы);
	СтрокаФискальная = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "ФискальныйРаздел", НСтр("ru = 'Фискальный раздел'"),
		СтруктураСоставнойСтроки);
	ЗаполнитьПоляФискальногоРаздела(СтрокаФискальная);
	
	СтрокаОплаты = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "ТаблицаОплат", НСтр("ru = 'Оплата'"),
		СтруктураПараметраГруппы);
	ЗаполнитьРазделОплат(СтрокаОплаты);
	
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблонРасширенныйСервер()
	
	// совсем очищать шаблон нельзя - он не будет работать на ККТ.
	ЭлементыВерхнегоУровня = ШаблонЧека.ПолучитьЭлементы();
	ЭлементыВерхнегоУровня.Очистить();
	
	СтруктураПараметраГруппы = Новый Структура;
	СтруктураПараметраГруппы.Вставить("ИндексКартинки", 3);
	СтруктураПараметраГруппы.Вставить("ЭтоГруппа", Истина);
	
	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("ИндексКартинки", 10);
	СтруктураТаблицы.Вставить("ЭтоГруппа", Истина);
	
	СтруктураСоставнойСтроки = Новый Структура;
	СтруктураСоставнойСтроки.Вставить("ИндексКартинки", 14);
	СтруктураСоставнойСтроки.Вставить("ЭтоГруппа", Истина);
	
	СтруктураВычисляемойСтроки = Новый Структура;
	СтруктураВычисляемойСтроки.Вставить("ИндексКартинки", 4);
	СтруктураВычисляемойСтроки.Вставить("ЭтоГруппа", Ложь);
	СтруктураВычисляемойСтроки.Вставить("Вычислять", Истина);
	СтруктураВычисляемойСтроки.Вставить("Префикс", "");
	СтруктураВычисляемойСтроки.Вставить("Постфикс", "");
	
	СтруктураНеВычисляемойСтроки = Новый Структура;
	СтруктураНеВычисляемойСтроки.Вставить("ИндексКартинки", 4);
	СтруктураНеВычисляемойСтроки.Вставить("ЭтоГруппа", Ложь);
	СтруктураНеВычисляемойСтроки.Вставить("Вычислять", Ложь);
	СтруктураНеВычисляемойСтроки.Вставить("Префикс", "");
	СтруктураНеВычисляемойСтроки.Вставить("Постфикс", "");
	
	СтруктураСтрокиШтрихкода = Новый Структура;
	СтруктураСтрокиШтрихкода.Вставить("ИндексКартинки", 4);
	СтруктураСтрокиШтрихкода.Вставить("ЭтоГруппа", Ложь);
	СтруктураСтрокиШтрихкода.Вставить("Вычислять", Истина);
	СтруктураСтрокиШтрихкода.Вставить("ВыводитьКакШтрихкод", Истина);
	СтруктураСтрокиШтрихкода.Вставить("Префикс", "");
	СтруктураСтрокиШтрихкода.Вставить("Постфикс", "");
	
	СтрокаВерхнийУровень = ДобавитьПараметрВДерево(ШаблонЧека, "ФискальныйДокумент", НСтр("ru = 'Фискальный документ'"),
		СтруктураПараметраГруппы);
	СтрокаШапка = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "ПараметрыШапкиЧека", НСтр("ru = 'Шапка'"),
		СтруктураПараметраГруппы);
	ЗаполнитьРазделШапки(СтрокаШапка);
	
	СтрокаСоставЧека = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "СоставЧека", НСтр("ru = 'Состав чека'"),
		СтруктураПараметраГруппы);
	СтруктураВычисляемойСтроки.Префикс = СтрШаблон("%1 ", НСтр("ru = 'Карта:'"));
	СтрокаКарты = ДобавитьПараметрВДерево(СтрокаСоставЧека, "Текст", НСтр("ru = 'ДисконтнаяКарта'"),
				СтруктураВычисляемойСтроки);
	СтрокаПозицииЧека = ДобавитьПараметрВДерево(СтрокаСоставЧека, "ТаблицаТовары", НСтр("ru = 'Товары'"),
		СтруктураТаблицы);
			
	КоличествоСимволов = ?(ШиринаЧека < 5, ШиринаЧека, ШиринаЧека - 3);
	ТекстРазделителя = "";
	
	Для Счетчик = 1 По КоличествоСимволов Цикл
		ТекстРазделителя = ТекстРазделителя + "-";
	КонецЦикла;
	
	СтрокаРазделительСтроки = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "Текст", ТекстРазделителя,
		СтруктураНеВычисляемойСтроки);
	
	СтруктураВычисляемойСтроки.Префикс = СтрШаблон("%1 ",НСтр("ru = 'Строка №:'"));
	СтруктураВычисляемойСтроки.Постфикс = "";
	СтрокаНомерСтроки = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "Текст", НСтр("ru = 'НомерСтрокиТовара'"),
		СтруктураВычисляемойСтроки);
	
	СтрокаФискальная = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "ФискальныйРаздел",
		НСтр("ru = 'Фискальный раздел'"), СтруктураСоставнойСтроки);
	ЗаполнитьПоляФискальногоРаздела(СтрокаФискальная);
		
	СтруктураВычисляемойСтроки.Префикс = НСтр("ru = 'Сумма скидки по строке:'") + " ";
	СтруктураВычисляемойСтроки.Постфикс = "";
	СтрокаСкидки = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "Текст", НСтр("ru = 'СуммаСкидки'"),
		СтруктураВычисляемойСтроки);
	
	СтруктураВычисляемойСтроки.Префикс = НСтр("ru = 'Сумма без скидки по строке:'") + " ";
	СтруктураВычисляемойСтроки.Постфикс = "";
	СтрокаСуммаБезСкидки = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "Текст", НСтр("ru = 'СуммаБезСкидки'"),
		СтруктураВычисляемойСтроки);
	
	СтрокаШтрихкода = ДобавитьПараметрВДерево(СтрокаПозицииЧека, "Текст", НСтр("ru = 'Штрихкод'"),
		СтруктураСтрокиШтрихкода);
	СтрокаШтрихкода.ТипШтрихкода = 99;
				
	СтрокаОплаты = ДобавитьПараметрВДерево(СтрокаВерхнийУровень, "ТаблицаОплат", НСтр("ru = 'Оплата'"),
		СтруктураПараметраГруппы);
	ЗаполнитьРазделОплат(СтрокаОплаты);
			
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ИндексКартинки", 1);
	СтруктураПоля.Вставить("ЭтоГруппа", Истина);
	
	СтруктураСоставнойСтроки = Новый Структура;
	СтруктураСоставнойСтроки.Вставить("ИндексКартинки", 14);
	СтруктураСоставнойСтроки.Вставить("ЭтоГруппа", Истина);
	СтруктураСоставнойСтроки.Вставить("РазмещениеТекста", 0);
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаСервере
Функция ЭкспортироватьШаблонВФайлСервер()
	
	АдресФайла = "";
	ШаблонЧекаОбъект = РеквизитФормыВЗначение("ШаблонЧека", Тип("ДеревоЗначений"));
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	СохранениеВыполнено = ЗначениеВФайл(ИмяВременногоФайла, ШаблонЧекаОбъект);
	
	Если СохранениеВыполнено Тогда
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат АдресФайла;
	
КонецФункции

&НаСервере
Процедура ИмпортироватьШаблонИзФайлаСервер(АдресФайла)
	
	Попытка
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		СтрокаСДеревомШаблонаФискальногоЧека = ЗначениеИзФайла(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		ШаблонЧекаОбъект = СтрокаСДеревомШаблонаФискальногоЧека.Скопировать();
		ЗначениеВРеквизитФормы(ШаблонЧекаОбъект, "ШаблонЧека");
		
		СформироватьМакетФискальногоЧека();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка загрузки шаблона по причине:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьПолеВШаблон(ИмяПараметра, ПредставлениеПараметра, СтруктураПараметра)
	
	ТекстСообщения = "";
	ИдентификаторСтроки = Неопределено;
	МожноДобавлять = Истина;
	Результат = Неопределено;
	Если ИмяПараметра <> "НефискальныйДокумент"
		И ИмяПараметра <> "Отрезка" Тогда
		
		ТекущаяСтрокаДерева = Элементы.ШаблонЧека.ТекущиеДанные;
		
		Если ТекущаяСтрокаДерева = Неопределено Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Добавлять строки в корневой раздел нельзя.'");
			МожноДобавлять = Ложь;
			
		Иначе
			
			Если НЕ ТекущаяСтрокаДерева.ЭтоГруппа Тогда
				
				Родитель = ТекущаяСтрокаДерева.ПолучитьРодителя();
				
				Если Родитель = Неопределено Тогда
					
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Добавлять строки в корневой раздел нельзя.'");
					МожноДобавлять = Ложь;
					
				Иначе
					ТекущаяСтрокаДерева = Родитель;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрокаДерева <> Неопределено Тогда
				
				Если ТекущаяСтрокаДерева.ИмяКолонки = "НефискальныйДокумент"
					ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйДокумент"
					ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ПараметрыШапкиЧека"
					ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ТаблицаОплат"
					ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "Отрезка"
					ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйРаздел" Тогда
					
						ТекстСообщения = СтрШаблон("%1%2", ТекстСообщения,
							НСтр("ru = 'Раздел ""%1"" закрыт для редактирования. Добавлять строки в него нельзя.'"));
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							ТекущаяСтрокаДерева.Элемент);
						МожноДобавлять = Ложь;
						
				ИначеЕсли ИмяПараметра = "Таблица" И ТекущаяСтрокаДерева.ИмяКолонки <> "СоставЧека" Тогда

					ТекстСообщения = СтрШаблон("%1%2",ТекстСообщения, 
						НСтр("ru = 'Таблицу можно добавлять только в состав чека.'"));
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
						ТекущаяСтрокаДерева.Элемент);
					МожноДобавлять = Ложь;
					
				ИначеЕсли ИмяПараметра = "СоставнаяСтрока"
					И ТекущаяСтрокаДерева.ИмяКолонки <> "СоставЧека"
					И ТекущаяСтрокаДерева.ИмяКолонки <> "Таблица"
					И ТекущаяСтрокаДерева.ИмяКолонки <> "ТаблицаТовары"Тогда
					
						ТекстСообщения = СтрШаблон("%1%2", ТекстСообщения,
							НСтр("ru = 'Составную строку можно добавлять только в состав чека или в таблицу.'"));
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
							ТекущаяСтрокаДерева.Элемент);
						МожноДобавлять = Ложь;
						
					КонецЕсли;
					
				ИдентификаторСтроки = ТекущаяСтрокаДерева.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МожноДобавлять Тогда
		
		Результат = ДобавитьПолеВШаблонСервер(ИдентификаторСтроки, ИмяПараметра, ПредставлениеПараметра, СтруктураПараметра);
		Если ИмяПараметра = "НефискальныйДокумент" Тогда
			Результат = ДобавитьПолеВШаблонСервер(Результат, "СоставЧека", НСтр("ru = 'Состав чека'"), СтруктураПараметра);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		Элементы.ШаблонЧека.ТекущаяСтрока = Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеВШаблонСервер(ИдентификаторСтроки, ИмяПараметра, ПредставлениеПараметра, СтруктураПараметра)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Родитель = ШаблонЧека;
	Иначе
		Родитель = ШаблонЧека.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	СтрокаПараметр = ДобавитьПараметрВДерево(Родитель, ИмяПараметра, ПредставлениеПараметра, СтруктураПараметра);
	ИдентификаторРезультат = СтрокаПараметр.ПолучитьИдентификатор(); 
	
	СформироватьМакетФискальногоЧека();
	
	Возврат ИдентификаторРезультат;
	
КонецФункции

&НаСервере
Функция ДобавитьПараметрВДерево(Родитель, ИмяПараметра, ПредставлениеПараметра, СтруктураПараметра)
	
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	СтрокаПараметр = ЭлементыДерева.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПараметр, СтруктураПараметра);
	
	СтрокаПараметр.ИмяКолонки = ИмяПараметра;
	СтрокаПараметр.Элемент = ПредставлениеПараметра;
	СтрокаПараметр.ИмяОбъекта = "ЧекККМ";
	СтрокаПараметр.ИмяМакета = "ПоляШаблона";
	
	Возврат СтрокаПараметр;
	
КонецФункции

&НаСервере
Процедура ОчиститьШаблонСервер()
	
	ШаблонДерево = РеквизитФормыВЗначение("ШаблонЧека");
	ШаблонДерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(ШаблонДерево, "ШаблонЧека");
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделШапки(СтрокаШапка)
	
	СтруктураПредопределенногоПоля = Новый Структура;
	СтруктураПредопределенногоПоля.Вставить("ИндексКартинки", 6);
	СтруктураПредопределенногоПоля.Вставить("ЭтоГруппа", Ложь);
	СтруктураПредопределенногоПоля.Вставить("Вычислять", Истина);
	
	ДобавитьПараметрВДерево(СтрокаШапка, "ТипРасчета", НСтр("ru = 'Тип расчета'"), СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "КодСистемыНалогообложения", НСтр("ru = 'Код системы налогообложения'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ОтправительEmail", НСтр("ru = 'E-mail отправителя'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ПокупательEmail", НСтр("ru = 'E-mail получателя'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ПокупательНомер", НСтр("ru = 'Телефон получателя'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонПлатежногоАгента", НСтр("ru = 'Телефон платежного агента'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонОператораПоПриемуПлатежей",
		НСтр("ru = 'Телефон оператора по приему платежей'"), СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонОператораПеревода", НСтр("ru = 'Телефон оператора перевода'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонПоставщика", НСтр("ru = 'Телефон поставщика услуг'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "АдресОператораПеревода", НСтр("ru = 'Адрес оператора перевода'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ИННОператораПеревода", НСтр("ru = 'ИНН оператора перевода'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "НаименованиеОператораПеревода", НСтр("ru = 'Наименование оператора перевода'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонБанковскогоАгента", НСтр("ru = 'Телефон банковского агента'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ТелефонБанковскогоСубагента", НСтр("ru = 'Телефон банковского субагента'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ОперацияПлатежногоАгента", НСтр("ru = 'Операция платежного агента'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ОперацияБанковскогоАгента", НСтр("ru = 'Операция банковского агента'"),
		СтруктураПредопределенногоПоля);
	ДобавитьПараметрВДерево(СтрокаШапка, "ОперацияБанковскогоСубагента", НСтр("ru = 'Операция банковского субагента'"),
		СтруктураПредопределенногоПоля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляФискальногоРаздела(СтрокаФискальная)
	
	СтруктураФискальногоПоля = Новый Структура;
	СтруктураФискальногоПоля.Вставить("ИндексКартинки", 6);
	СтруктураФискальногоПоля.Вставить("ЭтоГруппа", Ложь);
	СтруктураФискальногоПоля.Вставить("Вычислять", Истина);
	
	СтруктураФискальногоПоля.Вставить("Префикс", "");
	СтруктураФискальногоПоля.Вставить("Постфикс", Символ(182));
	ДобавитьПараметрВДерево(СтрокаФискальная, "Наименование", "Наименование", СтруктураФискальногоПоля);
	
	СтруктураФискальногоПоля.Префикс = "";
	СтруктураФискальногоПоля.Постфикс = СтрШаблон(" %1 ", НСтр("ru = 'х'"));
	ДобавитьПараметрВДерево(СтрокаФискальная, "Количество", "Количество", СтруктураФискальногоПоля);
	
	СтруктураФискальногоПоля.Префикс = "";
	СтруктураФискальногоПоля.Постфикс = СтрШаблон(" %1 ",НСтр("ru = '='"));
	ДобавитьПараметрВДерево(СтрокаФискальная, "ЦенаСоСкидками", "ЦенаСоСкидками", СтруктураФискальногоПоля);
	
	СтруктураФискальногоПоля.Префикс = "";
	СтруктураФискальногоПоля.Постфикс = Символ(182);
	ДобавитьПараметрВДерево(СтрокаФискальная, "Сумма", "Сумма", СтруктураФискальногоПоля);
	
	СтруктураФискальногоПоля.Префикс = СтрШаблон("%1 ",НСтр("ru = 'В т.ч. скидка:'"));
	СтруктураФискальногоПоля.Постфикс = Символ(182);
	ДобавитьПараметрВДерево(СтрокаФискальная, "СуммаСкидок", "СуммаСкидок", СтруктураФискальногоПоля);
	
	СтруктураФискальногоПоля.Префикс = СтрШаблон("%1 ", НСтр("ru = 'Ставка НДС:'"));
	СтруктураФискальногоПоля.Постфикс = "%";
	ДобавитьПараметрВДерево(СтрокаФискальная, "СтавкаНДС", "СтавкаНДС", СтруктураФискальногоПоля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделОплат(СтрокаОплаты)
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ИндексКартинки", 6);
	СтруктураПоля.Вставить("ЭтоГруппа", Ложь);
	СтруктураПоля.Вставить("Вычислять", Истина);
	ДобавитьПараметрВДерево(СтрокаОплаты, "Наличные", НСтр("ru = 'Наличными'"), СтруктураПоля);
	ДобавитьПараметрВДерево(СтрокаОплаты, "Электронный1", НСтр("ru = 'Электронно'"), СтруктураПоля);
	ДобавитьПараметрВДерево(СтрокаОплаты, "Электронный2", НСтр("ru = 'Постоплата'"), СтруктураПоля);
	ДобавитьПараметрВДерево(СтрокаОплаты, "Электронный3", НСтр("ru = 'Предоплата'"), СтруктураПоля);
	ДобавитьПараметрВДерево(СтрокаОплаты, "Электронный4", НСтр("ru = 'Встречное предоставление'"), СтруктураПоля);
	
КонецПроцедуры

&НаСервере
Функция ОбойтиПредопределенныеРазделы(Команда)
	
	Результат = Истина;
	ПозицияФискальногоДокумента = 0;
	ЕстьШапка = Ложь;
	ЕстьОплата = Ложь;
	ЕстьТовары = Ложь;
	ЕстьФискальныйРаздел = Ложь;
	
	ЭлементыВерхнегоУровня = ШаблонЧека.ПолучитьЭлементы();
	
	СчетчикСтрок = 0;
	Для Каждого СтрокаВерхнийУровень Из ЭлементыВерхнегоУровня Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если СтрокаВерхнийУровень.ИмяКолонки = "ФискальныйДокумент" Тогда
			
			ПозицияФискальногоДокумента = СчетчикСтрок;
			ЭлементыФискальногоЧека = СтрокаВерхнийУровень.ПолучитьЭлементы();
			
			Для Каждого СтрокаЧека Из ЭлементыФискальногоЧека Цикл
				
				Если СтрокаЧека.ИмяКолонки = "ПараметрыШапкиЧека" Тогда
					
					ЕстьШапка = Истина;
					
					Если Команда = "Перезаполнить" Тогда
						
						ЭлементыШапки = СтрокаЧека.ПолучитьЭлементы();
						ЭлементыШапки.Очистить();
						ЗаполнитьРазделШапки(СтрокаЧека);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
					
					ЭлементыСостава = СтрокаЧека.ПолучитьЭлементы();
					
					Для Каждого СтрокаСостава Из ЭлементыСостава Цикл
						
						Если СтрокаСостава.ИмяКолонки = "ТаблицаТовары" Тогда
							
							ЕстьТовары = Истина;
							ЭлементыТоваров = СтрокаСостава.ПолучитьЭлементы();
							
							Для Каждого СтрокаТовара Из ЭлементыТоваров Цикл
								
								Если СтрокаТовара.ИмяКолонки = "ФискальныйРаздел" Тогда
									
									ЕстьФискальныйРаздел = Истина;
									
									Если Команда = "Перезаполнить" Тогда
										ЭлементыФискальные = СтрокаТовара.ПолучитьЭлементы();
										ЭлементыФискальные.Очистить();
										ЗаполнитьПоляФискальногоРаздела(СтрокаТовара);
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли СтрокаЧека.ИмяКолонки = "ТаблицаОплат" Тогда
					
					ЕстьОплата = Истина;
					
					Если Команда = "Перезаполнить" Тогда
						
						ЭлементыОплаты = СтрокаЧека.ПолучитьЭлементы();
						ЭлементыОплаты.Очистить();
						ЗаполнитьРазделОплат(СтрокаЧека);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Команда = "ПроверитьКорректность" Тогда
		
		Если ПозицияФискальногоДокумента = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Отсутствует обязательный раздел ""Фискальный документ""'"),
				,
				"ШаблонЧека");
			Результат = Ложь;
			
		ИначеЕсли ПозицияФискальногоДокумента > 1 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Фискальный документ должен быть первым в шаблоне'"),
				,
				"ШаблонЧека");
			Результат = Ложь;
			
		Иначе
			
			Если НЕ ЕстьШапка Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Отсутствует обязательный раздел ""Шапка"" в фискальном документе'"),
					,
					"ШаблонЧека");
				Результат = Ложь;
				
			КонецЕсли;
			
			Если ЕстьТовары Тогда
				
				Если НЕ ЕстьФискальныйРаздел Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Отсутствует ""Фискальный раздел"" в таблице товаров'"),
						,
						"ШаблонЧека");
					Результат = Ложь;
					
				КонецЕсли;
				
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Отсутствует обязательный раздел ""Товары"" в фискальном документе'"),
					,
					"ШаблонЧека");
				Результат = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЕстьОплата Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Отсутствует обязательный раздел ""Оплата"" в фискальном документе'"),
					,
					"ШаблонЧека");
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыводВТабличныйДокумент

&НаСервере
Процедура СформироватьМакетФискальногоЧека(НовоеЗначениеМодифицированностиФормы = Истина)
	
	Если НЕ Модифицированность Тогда
		Модифицированность = НовоеЗначениеМодифицированностиФормы;
	КонецЕсли;
	
	ПолеТабличногоДокумента.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		ТаблицаДанных = ПечатьФискальныхЧеков.ТаблицаСКД(СКД, ДокументСсылка);
		// Список доступных таблиц нужен только для выбора таблицы в полях шаблона.
		СписокДоступныхТаблицСКД.Очистить();
		СписокТаблиц = ТаблицаДанных.Скопировать();
		СписокТаблиц.Свернуть("ИмяТаблицы");
		СписокТаблиц.Сортировать("ИмяТаблицы");
		
		Для Каждого СтрокаСписка Из СписокТаблиц Цикл
			
			Если СтрокаСписка.ИмяТаблицы = "СоставЧека"
				ИЛИ СтрокаСписка.ИмяТаблицы = "Товары" Тогда
					Продолжить;
			КонецЕсли;
			СписокДоступныхТаблицСКД.Добавить(СтрокаСписка.ИмяТаблицы);
			
		КонецЦикла;
		
		ПредопределенныеДанныеЧека = РабочееМестоКассира.ПодготовитьДанныеДляПробитияЧека(ДокументСсылка);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось подготовить данные чека ккм для выведения в форме редактирования шаблона'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
		Возврат;
		
	КонецПопытки;
	
	ШаблонДерево = РеквизитФормыВЗначение("ШаблонЧека");
	
	ТекстовыйДокумент = Справочники.ХранилищеШаблонов.ПолучитьМакет("ТабличныйШаблон");
	Область = ТекстовыйДокумент.ПолучитьОбласть("Строка|Колонка");
	ОбластьШтрихкод = ТекстовыйДокумент.ПолучитьОбласть("СтрокаШтрихкод|Колонка");
	ПолеТабличногоДокумента.Вывести(ТекстовыйДокумент.ПолучитьОбласть("ПерваяСтрока|Колонка"));
	ЦветСерый = ЦветаСтиля.ИтогиФонГруппы;;
	
	КоличествоСтрокТабличнойЧасти = 0;
	Для Каждого СтрокаДерева Из ШаблонДерево.Строки Цикл
		
		Если СтрокаДерева.ИмяКолонки = "ФискальныйДокумент" Тогда
			
			ПредопределенныеДанныеЧека.Вставить("ФискальнаяСуммаЧека", 0);
			Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
				
				Если СтрокаЧека.ИмяКолонки = "ПараметрыШапкиЧека" Тогда
					// Шапка предопределенная, в ней ничего пользовательского не добавляется.
					// Сначала идет клише из драйвера ККТ.
					Область.Параметры.Текст = НСтр("ru = 'Предопределенный раздел.'");
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ВыведеннаяОбласть.ЦветФона = ЦветСерый;
					
					Область.Параметры.Текст = НСтр("ru = 'Заполняется ККТ.'");
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ВыведеннаяОбласть.ЦветФона = ЦветСерый;
					
					Область.Параметры.Текст = "";
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					
					// Потом идут параметры шапки, передаваемые в ОФД.
					Для Каждого СтрокаПараметра Из СтрокаЧека.Строки Цикл
						
						Если СтрокаПараметра.НеПечатается Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаПараметра.ИмяКолонки)
							И ПредопределенныеДанныеЧека.Свойство(СтрокаПараметра.ИмяКолонки) Тогда
							
								ЗначениеПараметра = ПредопределенныеДанныеЧека[СтрокаПараметра.ИмяКолонки];
							
							Если СтрокаПараметра.ИмяКолонки = ""
								ИЛИ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
									ЗаполнитьИВывестиОбласть(Область, ЗначениеПараметра, СтрокаПараметра);
									
							КонецЕсли;
								
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
					
					Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
						ОбработатьСоставЧека(СтрокаОсновногоРаздела, Область, ОбластьШтрихкод, ПредопределенныеДанныеЧека,
						ТаблицаДанных);
					КонецЦикла;
					
				ИначеЕсли СтрокаЧека.ИмяКолонки = "ТаблицаОплат" Тогда
					// Оплата предопределенная, в ней ничего пользовательского так же не добавляется.
					// При этом в оплате все печатается, если заполнено.
					Наличные  = 0;
					Электронный1 = 0;
					Электронный2 = 0;
					Электронный3 = 0;
					Электронный4 = 0;
					МассивОплат = ПредопределенныеДанныеЧека.ТаблицаОплат;
					
					Для Каждого Оплата Из МассивОплат Цикл
						
						Если Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
							Наличные = Оплата.Сумма;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
							Электронный1 = Оплата.Сумма;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
							Электронный2 = Оплата.Сумма;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
							Электронный3 = Оплата.Сумма;
						ИначеЕсли Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
							Электронный4 = Оплата.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
					// Сначала, как правило, выводится общий итог оплаты.
					ИтогоОплат = Наличные + Электронный1 + Электронный2 + Электронный3 + Электронный4;
					Итого = ПредопределенныеДанныеЧека.ФискальнаяСуммаЧека;
					Сдача = ИтогоОплат - Итого;
					Область.Параметры.Текст = СтрШаблон("%1 %2",НСтр("ru = 'ИТОГО:'"),Формат(Итого, "ЧДЦ=2; ЧН=0,00"));
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					// Потом детализируется по типам оплаты.
					Если Наличные <> 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон(" %1 %2", НСтр("ru = 'Наличными:'"),
							Формат(Наличные, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					Если Электронный1 <> 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон(" %1 %2", НСтр("ru = 'Электронно:'"),
							Формат(Электронный1, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					
					Если Электронный2 <> 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон(" %1 %2", НСтр("ru = 'Постоплата:'"),
							Формат(Электронный2, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					
					Если Электронный3 <> 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон(" %1 %2",НСтр("ru = 'Предоплата:'"),
							Формат(Электронный3, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					Если Электронный4 <> 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон(" %1 %2", НСтр("ru = 'Встречное предоставление:'"),
							Формат(Электронный4, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					Если Сдача > 0 Тогда
						
						Область.Параметры.Текст = СтрШаблон("%1 %2", НСтр("ru = 'Сдача:'"),
							Формат(Сдача, "ЧДЦ=2; ЧН=0,00"));
						ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
						ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
					КонецЕсли;
					// Потом идет подвал из драйвера ККТ.
					Область.Параметры.Текст = "";
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					
					Область.Параметры.Текст = НСтр("ru = 'Предопределенный раздел.'");
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ВыведеннаяОбласть.ЦветФона = ЦветСерый;
					
					Область.Параметры.Текст = НСтр("ru = 'Заполняется ККТ.'");
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ВыведеннаяОбласть.ЦветФона = ЦветСерый;
					
					Область.Параметры.Текст = НСтр("ru = 'Содержит фискальные подписи.'");
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ВыведеннаяОбласть.ЦветФона = ЦветСерый;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.ИмяКолонки = "НефискальныйДокумент" Тогда
			
			ЭтоПерваяСтрокаВНефискальномДокументе = Истина;
			
			Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
				
				Если СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
					
					Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
						ОбработатьСоставЧека(СтрокаОсновногоРаздела, Область, ОбластьШтрихкод, ПредопределенныеДанныеЧека, ТаблицаДанных);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭтоПерваяСтрокаВНефискальномДокументе = Ложь;
			
		ИначеЕсли СтрокаДерева.ИмяКолонки = "Отрезка" Тогда
			
			ТекстОтрезки = "";
			
			Если ШиринаЧека > 14 Тогда
				
				ПоловинаДлины = Цел((ШиринаЧека - 12) / 2);
				
				Для Счетчик = 1 По ПоловинаДлины Цикл
					ТекстОтрезки = СтрШаблон("%1_", ТекстОтрезки);
				КонецЦикла;
				
				ТекстОтрезки = СтрШаблон("%1%2",ТекстОтрезки,НСтр("ru = 'Линия отреза'"));
				
				Для Счетчик = 1 По ПоловинаДлины Цикл
					ТекстОтрезки = СтрШаблон("%1_", ТекстОтрезки);
				КонецЦикла;
				
			Иначе
				
				Для Счетчик = 1 По ШиринаЧека Цикл
					ТекстОтрезки = СтрШаблон("%1_", ТекстОтрезки);
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаполнитьИВывестиОбласть(Область, ТекстОтрезки, СтрокаДерева);
			
		КонецЕсли;
	КонецЦикла;
	
	ПолеТабличногоДокумента.Вывести(ТекстовыйДокумент.ПолучитьОбласть("ПоследняяСтрока|Колонка"));
	
	// Подгоняем размер первой колонки под ширину символов.
	ОбластьПервойКолонки = ПолеТабличногоДокумента.Область("C2");
	// Ширина колонки в средних символах шрифта получается на несколько символов больше,
	// чем столько же символов шрифтом по умолчанию или каким-либо другим.
	ОбластьПервойКолонки.ШиринаКолонки = Цел(ШиринаЧека * 0.95);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСоставЧека(СтрокаОсновногоРаздела, Область, ОбластьШтрихкод,
	ПредопределенныеДанныеЧека, ТаблицаДанных)
	
	СтрокаШапкиЧека = Неопределено;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяТаблицы", "СоставЧека");
	СтрокиВыборки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаВыборки Из СтрокиВыборки Цикл
		
		СтрокаШапкиЧека = СтрокаВыборки;
		Прервать;
		
	КонецЦикла;
	
	Если СтрокаОсновногоРаздела.ИмяКолонки = "Текст" Тогда
		
		Если СтрокаОсновногоРаздела.ВыводитьКакШтрихкод Тогда
			ОбработатьДанныеШтрихкода(ОбластьШтрихкод, Область, СтрокаОсновногоРаздела, СтрокаШапкиЧека, ТаблицаДанных);
		Иначе
			ОбработатьТекстовуюСтроку(Область, СтрокаОсновногоРаздела, СтрокаШапкиЧека, ТаблицаДанных);
		КонецЕсли;
		
	ИначеЕсли СтрокаОсновногоРаздела.ИмяКолонки = "СоставнаяСтрока" Тогда
		ОбработатьСоставнуюСтроку(Область, СтрокаОсновногоРаздела, СтрокаШапкиЧека, ТаблицаДанных);
	ИначеЕсли СтрокаОсновногоРаздела.ИмяКолонки = "Таблица" Тогда
		
		СтруктураОтбора = Новый Структура;
		ИмяТаблицы = СтрокаОсновногоРаздела.Элемент;
		СтруктураОтбора.Вставить("ИмяТаблицы", ИмяТаблицы);
		СтрокиВыборки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаВыборки Из СтрокиВыборки Цикл
			
			Для Каждого ПоляСтрокиТаблицы Из СтрокаОсновногоРаздела.Строки Цикл
				
				Если ПоляСтрокиТаблицы.ИмяКолонки = "СоставнаяСтрока" Тогда
					
					ОбработатьСоставнуюСтроку(Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных, СтрокаВыборки, ИмяТаблицы);
					
				ИначеЕсли ПоляСтрокиТаблицы.ИмяКолонки = "Текст" Тогда
					
					Если ПоляСтрокиТаблицы.ВыводитьКакШтрихкод Тогда
						
						ОбработатьДанныеШтрихкода(ОбластьШтрихкод, Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных,
							СтрокаВыборки, ИмяТаблицы);
							
					Иначе
						ОбработатьТекстовуюСтроку(Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных, СтрокаВыборки, ИмяТаблицы);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли СтрокаОсновногоРаздела.ИмяКолонки = "ТаблицаТовары" Тогда
		
		ИндексПоследнейПозиции = ПредопределенныеДанныеЧека.ПозицииЧека.ВГраница();
		ИндексТекущейПозиции = 0;
		
		Пока ИндексТекущейПозиции <= ИндексПоследнейПозиции Цикл
			
			СтрокаВыборки = ПредопределенныеДанныеЧека.ПозицииЧека[ИндексТекущейПозиции];
			ФискальныйРазделБыл = Ложь;
			ВыводитьНефискальныеПосле = Истина;
			
			Для Каждого ПоляСтрокиТаблицы Из СтрокаОсновногоРаздела.Строки Цикл
				
				Если ПоляСтрокиТаблицы.ИмяКолонки = "ФискальныйРаздел" Тогда
					
					ФискальныйРазделБыл = Истина;
					ПредопределенныеДанныеЧека.ФискальнаяСуммаЧека = ПредопределенныеДанныеЧека.ФискальнаяСуммаЧека 
						+ СтрокаВыборки.Сумма;
					ОбработатьСоставнуюСтроку(Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных, СтрокаВыборки,
						ИмяТаблицы);
					
					Если ИндексТекущейПозиции < ИндексПоследнейПозиции Тогда
						
						СледующаяСтрока = ПредопределенныеДанныеЧека.ПозицииЧека[ИндексТекущейПозиции + 1];
						
						Если СледующаяСтрока.НомерСтрокиТовара = СтрокаВыборки.НомерСтрокиТовара Тогда
							ВыводитьНефискальныеПосле = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ПоляСтрокиТаблицы.ИмяКолонки = "СоставнаяСтрока" Тогда
					
					Если ФискальныйРазделБыл Тогда
						
						Если НЕ ВыводитьНефискальныеПосле Тогда
							Продолжить;
						КонецЕсли;
						
					Иначе
						
						Если ИндексТекущейПозиции > 0 Тогда
							
							ПредыдущаяСтрока = ПредопределенныеДанныеЧека.ПозицииЧека[ИндексТекущейПозиции - 1];
							
							Если ПредыдущаяСтрока.НомерСтрокиТовара = СтрокаВыборки.НомерСтрокиТовара Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("НомерСтрокиТовара", СтрокаВыборки.НомерСтрокиТовара);
					СтруктураПоиска.Вставить("ИмяТаблицы", "Товары");
					СтрокиДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					
					СтрокаДанных = ?(СтрокиДанных.Количество() > 0, СтрокиДанных[0],СтрокаВыборки);
					
					ОбработатьСоставнуюСтроку(Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных, СтрокаДанных, ИмяТаблицы);
					
				ИначеЕсли ПоляСтрокиТаблицы.ИмяКолонки = "Текст" Тогда
					
					Если ФискальныйРазделБыл Тогда
						
						Если НЕ ВыводитьНефискальныеПосле Тогда
							Продолжить;
						КонецЕсли;
						
					Иначе
						
						Если ИндексТекущейПозиции > 0 Тогда
							
							ПредыдущаяСтрока = ПредопределенныеДанныеЧека.ПозицииЧека[ИндексТекущейПозиции - 1];
							
							Если ПредыдущаяСтрока.НомерСтрокиТовара = СтрокаВыборки.НомерСтрокиТовара Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("НомерСтрокиТовара", СтрокаВыборки.НомерСтрокиТовара);
					СтруктураПоиска.Вставить("ИмяТаблицы", "Товары");
					СтрокиДанных = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					
					
					СтрокаДанных = ?(СтрокиДанных.Количество() > 0, СтрокиДанных[0], СтрокаВыборки);

					Если ПоляСтрокиТаблицы.ВыводитьКакШтрихкод Тогда
						ОбработатьДанныеШтрихкода(ОбластьШтрихкод, Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека,
							ТаблицаДанных, СтрокаДанных, ИмяТаблицы);
					Иначе
						ОбработатьТекстовуюСтроку(Область, ПоляСтрокиТаблицы, СтрокаШапкиЧека, ТаблицаДанных,
							СтрокаДанных, ИмяТаблицы);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЦикла;
			
			ИндексТекущейПозиции = ИндексТекущейПозиции + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТекстовуюСтроку(Область, ПоляСтроки, СтрокаШапкиЧека, ТаблицаДанных,
	СтрокаДанных = Неопределено, ИмяРаздела = "СоставЧека")
	
	ЗначениеСтроки = ПечатьФискальныхЧеков.ЗначениеТекстовогоПоля(ДокументСсылка, ПоляСтроки, СтрокаШапкиЧека,
		ТаблицаДанных, СтрокаДанных, ИмяРаздела);
		
	Если ЗначениеЗаполнено(ЗначениеСтроки) ИЛИ ПоляСтроки.ВыводитьПустоеЗначение Тогда
		ЗаполнитьИВывестиОбласть(Область, ЗначениеСтроки, ПоляСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеШтрихкода(ОбластьШтрихкода, ОбластьДополнительныхПолей, ПоляСтроки, СтрокаШапкиЧека,
	ТаблицаДанных, СтрокаДанных = Неопределено, ИмяРаздела = "СоставЧека")
	
	ЗначениеСтроки = ПечатьФискальныхЧеков.ЗначениеТекстовогоПоля(ДокументСсылка, ПоляСтроки, СтрокаШапкиЧека,
		ТаблицаДанных, СтрокаДанных, ИмяРаздела);
		
	Если ЗначениеЗаполнено(ЗначениеСтроки)
		ИЛИ ПоляСтроки.ВыводитьПустоеЗначение Тогда
			ЗаполнитьИВывестиОбластьШтрихкода(ОбластьШтрихкода, ОбластьДополнительныхПолей, ЗначениеСтроки, ПоляСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСоставнуюСтроку(Область, ПоляСтроки, СтрокаШапкиЧека, ТаблицаДанных, СтрокаДанных = Неопределено,
	ИмяРаздела = "СоставЧека")
	
	ТекстСтроки = "";
	
	Для Каждого ПараметрСтроки Из ПоляСтроки.Строки Цикл
		
		Если ЗначениеЗаполнено(ПараметрСтроки.ИмяКолонки) Тогда
			
			ЗначениеПоля = ПечатьФискальныхЧеков.ЗначениеТекстовогоПоля(ДокументСсылка, ПараметрСтроки,
				СтрокаШапкиЧека, ТаблицаДанных, СтрокаДанных, ИмяРаздела);
			
			Если ЗначениеЗаполнено(ЗначениеПоля)
				ИЛИ ПоляСтроки.ВыводитьПустоеЗначение Тогда
			
				ДлинаПостфикса = СтрДлина(ПараметрСтроки.Постфикс);
				ПозицияСимволаПереноса = СтрНайти(ПараметрСтроки.Постфикс, Символ(182));
				ЕстьПереносСтроки = ПозицияСимволаПереноса > 0;
				
				ТекстСтроки = СтрШаблон("%1%2%3%4", ТекстСтроки, ПараметрСтроки.Префикс,
					Формат(ЗначениеПоля, ПараметрСтроки.Формат),
					?(ЕстьПереносСтроки, Лев(ПараметрСтроки.Постфикс, ПозицияСимволаПереноса - 1),
					ПараметрСтроки.Постфикс));
					
				Если ЕстьПереносСтроки Тогда
					
					ЗаполнитьИВывестиОбласть(Область, ТекстСтроки, ПоляСтроки);
					ТекстСтроки = Прав(ПараметрСтроки.Постфикс, ДлинаПостфикса - ПозицияСимволаПереноса);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСтроки) Тогда
		ЗаполнитьИВывестиОбласть(Область, ТекстСтроки, ПоляСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИВывестиОбласть(Область, ЗначениеПараметра, ДанныеШаблона)
	
	Если ЭтоПерваяСтрокаВНефискальномДокументе Тогда
		
		ЭтоПерваяСтрокаВНефискальномДокументе = Ложь;
		// В нефискальном разделе может не оказаться строк для вывода.
		// Поэтому отрезка выводится только при выводе первой строки
		ВыведеннаяОбласть = ВывестиОтрезку(Область);
		
	КонецЕсли;
	
	Область.Параметры.Текст = СтрШаблон("%1%2%3",ДанныеШаблона.Префикс, 
		Формат(ЗначениеПараметра, ДанныеШаблона.Формат),ДанныеШаблона.Постфикс);
	
	ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
	
	Если ДанныеШаблона.Выравнивание = "Право" Тогда
		ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	ИначеЕсли ДанныеШаблона.Выравнивание = "Центр" Тогда
		ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Иначе
		ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	КонецЕсли;
	
	ВыведеннаяОбласть.РазмещениеТекста = ?(ДанныеШаблона.РазмещениеТекста = 1,
		ТипРазмещенияТекстаТабличногоДокумента.Обрезать,
		ТипРазмещенияТекстаТабличногоДокумента.Переносить);
	
	Возврат ВыведеннаяОбласть;
	
КонецФункции

&НаСервере
Функция ЗаполнитьИВывестиОбластьШтрихкода(ОбластьШтрихкода, ОбластьДополнительныхПолей, ЗначениеПараметра, ДанныеШаблона)
	
	Рисунок = Неопределено;
	Для Каждого РисунокОбласти Из ОбластьШтрихкода.Рисунки Цикл
		Рисунок = РисунокОбласти;
		Прервать;
	КонецЦикла;
	
	Если ЭтоПерваяСтрокаВНефискальномДокументе Тогда
		ЭтоПерваяСтрокаВНефискальномДокументе = Ложь;
		// В нефискальном разделе может не оказаться строк для вывода.
		// Поэтому отрезка выводится только при выводе первой строки
		ВыведеннаяОбластьДополнительная = ВывестиОтрезку(ОбластьДополнительныхПолей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШаблона.Префикс) Тогда
		ОбластьДополнительныхПолей.Параметры.Текст = ДанныеШаблона.Префикс;
		ВыведеннаяОбластьДополнительная = ПолеТабличногоДокумента.Вывести(ОбластьДополнительныхПолей);
	КонецЕсли;
	
	Если Рисунок = Неопределено Тогда
		ВыведеннаяОбласть = Неопределено;
	Иначе
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина", Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота", Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
		ПараметрыШтрихкода.Вставить("Штрихкод", ЗначениеПараметра);
		ПараметрыШтрихкода.Вставить("ТипКода", ДанныеШаблона.ТипШтрихкода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта", 7);
		ПараметрыШтрихкода.Вставить("УголПоворота", 0);
		
		РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
		Если РезультатГенерацииШтрихкода.ДвоичныеДанные <> Неопределено Тогда
			Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
		КонецЕсли;
		
		ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(ОбластьШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШаблона.Постфикс) Тогда
		ОбластьДополнительныхПолей.Параметры.Текст = ДанныеШаблона.Постфикс;
		ВыведеннаяОбластьДополнительная = ПолеТабличногоДокумента.Вывести(ОбластьДополнительныхПолей);
	КонецЕсли;
	
	Возврат ВыведеннаяОбласть;
	
КонецФункции

&НаСервере
Функция ВывестиОтрезку(Область)
	
	ТекстОтрезки = "";
	
	Если ШиринаЧека > 14 Тогда
		
		ПоловинаДлины = Цел((ШиринаЧека - 12) / 2);
		Для Счетчик = 1 По ПоловинаДлины Цикл
			ТекстОтрезки = ТекстОтрезки + "_";
		КонецЦикла;
		
		ТекстОтрезки = СтрШаблон("%1%2", ТекстОтрезки, НСтр("ru = 'Линия отреза'"));
		
		Для Счетчик = 1 По ПоловинаДлины Цикл
			ТекстОтрезки = СтрШаблон("%1_", ТекстОтрезки);
		КонецЦикла;
		
	Иначе
		
		Для Счетчик = 1 По ШиринаЧека Цикл
			ТекстОтрезки = СтрШаблон("%1_", ТекстОтрезки);
		КонецЦикла;
		
	КонецЕсли;
	
	Область.Параметры.Текст = ТекстОтрезки;
	ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
	ВыведеннаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ВыведеннаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ВыведеннаяОбласть.ЦветФона = ЦветаСтиля.ИтогиФонГруппы;
	
	Возврат ВыведеннаяОбласть;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебные

&НаСервереБезКонтекста
Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных,
	АдресНастроекКомпоновкиДанных = Неопределено)
	
	Попытка
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		
		Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
			НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
		КонецЕсли;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
		Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецЕсли;
		
		КомпоновщикНастроек.Восстановить();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось инициализировать компоновщик настроек'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеШаблон()
	
	ШаблонДерево = РеквизитФормыВЗначение("ШаблонЧека");
	ШаблонСтруктура = Новый Структура;
	ШаблонСтруктура.Вставить("Шаблон", ШаблонДерево);
	ШаблонСтруктура.Вставить("ДокументСсылка", ДокументСсылка);
	ШаблонСтруктура.Вставить("ШиринаЧека", ШиринаЧека);
	
	Если ВозвращатьСКД Тогда
		ШаблонСтруктура.Вставить("АдресСКДВХранилище", АдресСКД);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ШаблонСтруктура, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытиеФормыРедактированияПараметров(ВыбраннаяСтрока)
	
	ТекущаяСтрока = ШаблонЧека.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Идентификатор", ВыбраннаяСтрока);
		СтруктураПараметров.Вставить("ИмяКолонки", ТекущаяСтрока.ИмяКолонки);
		СтруктураПараметров.Вставить("Формат", ТекущаяСтрока.Формат);
		СтруктураПараметров.Вставить("ШиринаСтроки", ТекущаяСтрока.Ширина);
		СтруктураПараметров.Вставить("РазмещениеТекста", ТекущаяСтрока.РазмещениеТекста);
		СтруктураПараметров.Вставить("Выравнивание", ТекущаяСтрока.Выравнивание);
		СтруктураПараметров.Вставить("Наименование", ТекущаяСтрока.Элемент);
		СтруктураПараметров.Вставить("Вычислять", ТекущаяСтрока.Вычислять);
		СтруктураПараметров.Вставить("ВыводитьКакШтрихкод", ТекущаяСтрока.ВыводитьКакШтрихкод);
		СтруктураПараметров.Вставить("ТипШтрихкода", ТекущаяСтрока.ТипШтрихкода);
		СтруктураПараметров.Вставить("ВыводитьПустоеЗначение", ТекущаяСтрока.ВыводитьПустоеЗначение);
		СтруктураПараметров.Вставить("Префикс", ТекущаяСтрока.Префикс);
		СтруктураПараметров.Вставить("Постфикс", ТекущаяСтрока.Постфикс);
		СтруктураПараметров.Вставить("ТипЭлемента", ТекущаяСтрока.ТипЭлемента);
		СтруктураПараметров.Вставить("ОписаниеТипа", ТекущаяСтрока.ОписаниеТипа);
		СтруктураПараметров.Вставить("ПустоеЗначение", ТекущаяСтрока.ПустоеЗначение);
		СтруктураПараметров.Вставить("АдресСКД", АдресСКД);
		
		ДополнительныеПараметры = Новый Структура();
		
		Обработчик = Новый ОписаниеОповещения("ОповещениеРедактированиеШаблонаЧека", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ХранилищеШаблонов.Форма.ФормаРедактированияПараметровЧека", СтруктураПараметров, ЭтаФорма,,,,
			Обработчик, Режим);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ТекущееПолеЗапрещеноРедактировать()
	
	Результат = Ложь;
	ТекущаяСтрокаДерева = Элементы.ШаблонЧека.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева <> Неопределено Тогда
		
		Если ТекущаяСтрокаДерева.ИмяКолонки = "НефискальныйДокумент"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйДокумент"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ПараметрыШапкиЧека"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "СоставЧека"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ТаблицаОплат"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ТаблицаТовары"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "Таблица"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "Отрезка"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйРаздел"
			ИЛИ ТекущаяСтрокаДерева.ИндексКартинки = 6 Тогда
			
				Результат = Истина;
				
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекущееПолеЗапрещеноУдалять()
	
	Результат = Ложь;
	ТекущаяСтрокаДерева = Элементы.ШаблонЧека.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева <> Неопределено Тогда
		
		Если ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйДокумент"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ПараметрыШапкиЧека"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "СоставЧека"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ТаблицаОплат"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ТаблицаТовары"
			ИЛИ ТекущаяСтрокаДерева.ИмяКолонки = "ФискальныйРаздел"
			ИЛИ ТекущаяСтрокаДерева.ИндексКартинки = 6 Тогда
				Результат = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойство(Объект, ИмяРеквизита)
	
	Если Объект <> Неопределено И ТипЗнч(Объект) <> Тип("Булево") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#КонецОбласти
