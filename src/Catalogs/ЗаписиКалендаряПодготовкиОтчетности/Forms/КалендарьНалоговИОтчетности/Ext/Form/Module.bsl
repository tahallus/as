
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокЗадач.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиОформленияСпискаЗадач());
	
	Если НЕ Параметры.Свойство("Показатель") Тогда
		Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ПредопределеннаяОрганизация();
		КонецЕсли;
		
		Если Параметры.Свойство("Задача") Тогда
			Задача = Параметры.Задача;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗадач, "Задача", Задача, , ,
				ЗначениеЗаполнено(Задача));
		КонецЕсли;
	КонецЕсли;
	
	ТолькоПросмотр = Не ПравоДоступа("Изменение", Метаданные.Справочники.ЗаписиКалендаряПодготовкиОтчетности); 
	
	УстановитьУсловноеОформление(); 	
	
	МассивРасчетныхЗадач = КалендарьОтчетностиПовтИсп.ПолучитьМассивРасчетныхЗадач();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗадач, "Организация", Организация, , ,
		ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗадач, "МассивРасчетныхЗадач",
		МассивРасчетныхЗадач);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗадач, "ТекущаяДата", ТекущаяДатаСеанса());
	
	Элементы.СписокЗадачОсталосьДней.Видимость = Истина;
	
	МесяцБудущее = Месяц(ТекущаяДатаСеанса());
	ГодБудущее = Год(ТекущаяДатаСеанса());
	ГодАрхив = ГодБудущее;
	Если МесяцБудущее < 3 Тогда
		МесяцБудущее = 3;
		ГодАрхив = ГодАрхив -1;
	ИначеЕсли МесяцБудущее < 6 Тогда
		МесяцБудущее = 6;
	ИначеЕсли МесяцБудущее < 9 Тогда
		МесяцБудущее = 9;
	ИначеЕсли МесяцБудущее < 12 Тогда
		МесяцБудущее = 12;
	Иначе
		МесяцБудущее = 3;
		ГодБудущее = ГодБудущее+1;
	КонецЕсли;
	
	НастройкиКнопок = Новый Структура("ТекущиеПлатежи,ТекущиеДокументы,БудущиеПлатежи,БудущиеДокументы,АрхивПлатежи,АрхивДокументы",
										Истина, Истина, Ложь, Ложь, Ложь, Ложь);
	ЭтаФорма.ТекущиеДокументы = Истина;
	ЭтаФорма.ТекущиеПлатежи   = Истина;
	
	Если Параметры.Свойство("Показатель") Тогда
		Если Параметры.Показатель = "ТекущиеПлатежи" ИЛИ  Параметры.Показатель = "КоличествоТекущихПлатежей" Тогда
			НастройкиКнопок.Вставить("ТекущиеДокументы", Ложь);
			ЭтаФорма.ТекущиеДокументы = Ложь;
			ЭтаФорма.ТекущиеПлатежи   = Истина;
		ИначеЕсли Параметры.Показатель = "КоличествоТекущихДокументов"  Тогда
			НастройкиКнопок.Вставить("ТекущиеПлатежи", Ложь);
			ЭтаФорма.ТекущиеПлатежи   = Ложь;
			ЭтаФорма.ТекущиеДокументы   = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗапуститьОбновлениеДанныхНаСервере();
	
	НастроитьОтображениеСумм();
	Элементы.СписокЗадач.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЖдатьЗавершенияФоновогоЗадания();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗадач, "Организация", Организация, , ,
		ЗначениеЗаполнено(Организация));
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
		
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	НастроитьОтображениеСумм();
КонецПроцедуры


&НаКлиенте
Процедура ЗадачаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗадач, "Задача", Задача, , ,
		ЗначениеЗаполнено(Задача));
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
		
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	НастроитьОтображениеСумм();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
		
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАрхив(Команда)
	
	ТекДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ПеренестиЗадачуВАрхивСервер(ТекДанные.Организация, ТекДанные.СобытиеКалендаря);
		Элементы.СписокЗадач.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВАктуальные(Команда)
	
	ТекДанные = Элементы.СписокЗадач.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ВернутьЗадачуИзАрхиваСервер(ТекДанные.Организация, ТекДанные.СобытиеКалендаря);
		Элементы.СписокЗадач.Обновить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияПредупрежденияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ,ЗадачаОтчетности", Организация, Задача));
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Декорация4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	Элементы.СписокЗадачОсталосьДней.Видимость = Ложь;
	
	Если ЗапуститьОбновлениеДанныхНаСервере() Тогда
		
		ЖдатьЗавершенияФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма, Организация, Знач Задача)
	
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(Задача) Тогда
		Элементы.СтраницаКалендарьОтчетности.Видимость = Истина;
		Элементы.СтраницаВсеЗадачиЗавершены.Видимость = Ложь;
		Элементы.СтраницаЗадачаНеприменима.Видимость = Ложь;
	Иначе
		Если РегламентированнаяОтчетностьУСН.УстановитьПрименимостьЗадачиПоОрганизации(Организация, Задача) Тогда
			Элементы.СтраницаКалендарьОтчетности.Видимость = Истина;
			Элементы.СтраницаВсеЗадачиЗавершены.Видимость = Ложь;
			Элементы.СтраницаЗадачаНеприменима.Видимость = Ложь;
		Иначе
			Элементы.СтраницаКалендарьОтчетности.Видимость = Ложь;
			Элементы.СтраницаВсеЗадачиЗавершены.Видимость = Ложь;
			Элементы.СтраницаЗадачаНеприменима.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаШапка1.Видимость = Элементы.СтраницаЗадачаНеприменима.Видимость;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СписокЗадачОрганизация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента 		= ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных("СписокЗадачОрганизация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Организация", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.Организации.ПустаяСсылка());

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

&НаСервере
Функция НастройкиОформленияСпискаЗадач()
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		Неопределено, -1, НСтр("ru = 'Просрочено'"), ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		0, 0, НСтр("ru = 'Сегодня'"), ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		1, 1, НСтр("ru = 'Завтра'"));
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 день;;%1 дня;%1 дней;%1 дня", РазностьДат);
		ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
			РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		7, 13, НСтр("ru = 'Осталась неделя'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		14, 18, НСтр("ru = 'Осталось 2 недели'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		19, 22, НСтр("ru = 'Осталось 3 недели'"));
	
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		23, 34, НСтр("ru = 'Остался месяц'"));
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется
	ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных,
		35, Неопределено, " ");
		
	
	// Добавляем оформление для случая, когда отчет не сдан.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отчет не сдан'"));
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Состояние");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СостоянияСобытийКалендаря.ОтчетНеСдан;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	// Добавляем оформление для случая, когда отчет сдан в налоговой.
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОтправкиБРО);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отчет сдан!'"));
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Состояние");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СостоянияСобытийКалендаря.Завершить;
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	// Добавляем оформление для случая, когда отчет в архиве
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОтправкиБРО);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В архиве'"));
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КартинкаЗадачи");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ВАрхиве = Новый СписокЗначений;
	ВАрхиве.Добавить(2);
	ВАрхиве.Добавить(3);
	ЭлементОтбора.ПравоеЗначение = ВАрхиве;
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	Возврат НастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияСпискаЗадач(НастройкиКомпоновкиДанных, НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено)
	
	ПутьКДаннымПоля = "ОсталосьДней";
	
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	
	Если ЦветТекста <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	КонецЕсли;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	
	Если НижняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	ИначеЕсли ВерхняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	Иначе
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Использование = Истина;
		ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецПроцедуры

&НаСервере
// Запускает фоновое задание обновления Задач отчетности.
//
Функция ЗапуститьОбновлениеДанныхНаСервере()
	
	Если ТолькоПросмотр ИЛИ  МонопольныйРежим() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗадачЗапущено Тогда
		// Надо ждать
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Организация", Неопределено);
	
	НаименованиеЗадания = НСтр("ru = 'Обновление списка задач отчетности'");
	ИмяПроцедуры = "КалендарьОтчетности.ЗаполнитьВФоне";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	Результат = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыФункции, ПараметрыВыполнения);
	
	ФоновоеЗаданиеЗадачИдентификатор   = Результат.ИдентификаторЗадания;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗаполнитьСписокЗадачНаСервереЗавершение();
	Иначе
		// Начнем ждать
		ФоновоеЗаданиеЗадачЗапущено = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьСписокЗадачНаСервереЗавершение()
	
	Элементы.СписокЗадач.Обновить();
	УправлениеФормой(ЭтаФорма, Организация, Задача);
	
КонецПроцедуры


&НаКлиенте
Процедура ЖдатьЗавершенияФоновогоЗадания()
	
	Если ФоновоеЗаданиеЗадачЗапущено Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеЗадачЗапущено Тогда
		
		Если ЗаданиеВыполнено(ФоновоеЗаданиеЗадачИдентификатор) Тогда
			
			ФоновоеЗаданиеЗадачЗапущено = Ложь;
			ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ФоновоеЗаданиеЗадачЗапущено  Тогда
		// Продолжим ожидание
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			1,
			Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект, Организация, Задача);
	НастроитьОтображениеКнопок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ПеренестиЗадачуВАрхивСервер(Организация, СобытиеКалендаря)
	
	Ссылка = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, СобытиеКалендаря);
	Если Ссылка <> Неопределено Тогда
		Запись = Ссылка.ПолучитьОбъект();
		Запись.Завершено = Истина;
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаписиКалендаряПодготовкиОтчетности");
			Блокировка.Заблокировать();
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			// Вероятно запущен еще один процесс обновления
			// Поэтому не обрабатываем исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись календаря подготовки отчетности.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Ссылка,
				ИнформацияОбОшибке);
			
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьЗадачуИзАрхиваСервер(Организация, СобытиеКалендаря)
	
	Ссылка = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, СобытиеКалендаря);
	Если Ссылка <> Неопределено Тогда
		Запись = Ссылка.ПолучитьОбъект();
		Запись.Завершено = Ложь;
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаписиКалендаряПодготовкиОтчетности");
			Блокировка.Заблокировать();
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			// Вероятно запущен еще один процесс обновления
			// Поэтому не обрабатываем исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись календаря подготовки отчетности.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Ссылка,
				ИнформацияОбОшибке);
			
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураСобытия = Новый Структура("СобытиеКалендаря, СостояниеСобытия, Организация",
			ТекДанные.СобытиеКалендаря,
			ТекДанные.Состояние,
			ТекДанные.Организация);
		ИмяФормыЗадачи = ПолучитьИмяФормыПоЗадачеИСостоянию(ТекДанные.Задача, ТекДанные.Состояние);
		Если Не ПустаяСтрока(ИмяФормыЗадачи) Тогда
			ОткрытьФорму(ИмяФормыЗадачи, СтруктураСобытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыПоЗадачеИСостоянию(Задача, Состояние)
	Возврат Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьИмяФормыПоЗадачеИСостоянию(Задача, Состояние);
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Элементы.СписокЗадач.Обновить();
		НастроитьОтображениеСумм();
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Параметр = Организация Тогда
		УправлениеФормой(ЭтаФорма, Организация,Задача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКнопок(ИмяКоманды=Неопределено)
	Если ИмяКоманды <> Неопределено Тогда
		НастройкиКнопок[ИмяКоманды] = ЭтаФорма[ИмяКоманды];
	КонецЕсли;
	
	НастроитьОтображениеСписка();
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеСумм()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога), 0) КАК СуммаНалога,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоДокументов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК КоличествоПлатежей
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.Организация)
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.ИспользуетсяОтчетность)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПерсональныхЗадачОтчетности.Ссылка
	|			И (НЕ КалендарьПерсональныхЗадачОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ДатаПервогоВходаВСистему КАК ДатаПервогоВходаВСистему
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&Условие
	|	И НЕ(ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаИнформирования, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаИнформирования) > &ТекущаяДата
	|				И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|	И НЕ(ЗаписиКалендаряПодготовкиОтчетности.Завершено
	|				ИЛИ ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) < ДатаПервогоВходаВСистему.Значение
	|					И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога), 0) КАК СуммаНалога,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоДокументов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК КоличествоПлатежей
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.Организация)
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.ИспользуетсяОтчетность)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПерсональныхЗадачОтчетности.Ссылка
	|			И (НЕ КалендарьПерсональныхЗадачОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ДатаПервогоВходаВСистему КАК ДатаПервогоВходаВСистему
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&Условие
	|	И &ТекущаяДата < ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаИнформирования, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаИнформирования)
	|	И ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаИнформирования, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаИнформирования) <= &ДоКонцаДата
	|	И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато)
	|	И НЕ(ЗаписиКалендаряПодготовкиОтчетности.Завершено
	|				ИЛИ ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) < ДатаПервогоВходаВСистему.Значение
	|					И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКалендаряПодготовкиОтчетности.СуммаНалога), 0) КАК СуммаНалога,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоДокументов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) В (&МассивРасчетныхЗадач)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК КоличествоПлатежей
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = ЗаписиКалендаряПодготовкиОтчетности.Организация)
	|			И (НЕ Организации.ПометкаУдаления)
	|			И (Организации.ИспользуетсяОтчетность)
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПодготовкиОтчетности.Ссылка
	|			И (НЕ ЗаписиКалендаряПодготовкиОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПерсональныхЗадачОтчетности.Ссылка
	|			И (НЕ КалендарьПерсональныхЗадачОтчетности.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ДатаПервогоВходаВСистему КАК ДатаПервогоВходаВСистему
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&Условие
	|	И (ЗаписиКалендаряПодготовкиОтчетности.Завершено
	|			ИЛИ ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) < ДатаПервогоВходаВСистему.Значение
	|				И ЗаписиКалендаряПодготовкиОтчетности.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытийКалендаря.НеНачато))
	|	И (ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия) МЕЖДУ &АрхивНачало И &АрхивКонец
	|			ИЛИ ЕСТЬNULL(КалендарьПодготовкиОтчетности.ДатаНачалаСобытия, КалендарьПерсональныхЗадачОтчетности.ДатаНачалаСобытия) МЕЖДУ &АрхивНачало И &АрхивКонец)";
	
	Запрос.УстановитьПараметр("МассивРасчетныхЗадач", КалендарьОтчетностиПовтИсп.ПолучитьМассивРасчетныхЗадач());
	
	ТекстДляЗамены = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстДляЗамены = "Организации.Ссылка = &Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ТекстДляЗамены = ?(ПустаяСтрока(ТекстДляЗамены),"",ТекстДляЗамены +" И ") + "ЕСТЬNULL(КалендарьПодготовкиОтчетности.Задача, КалендарьПерсональныхЗадачОтчетности.Задача) = &Задача";
		Запрос.УстановитьПараметр("Задача",Задача);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстДляЗамены) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстДляЗамены);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	БудущееДоКонца = КонецМесяца(Дата(ГодБудущее,МесяцБудущее,1));
	АрхивНачало = Дата(ГодАрхив,1,1);
	АрхивКонец = КонецГода(Дата(ГодАрхив,1,1));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗадач, "АрхивНачало",    АрхивНачало);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗадач, "АрхивКонец",     АрхивКонец);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗадач, "ДоКонцаДата", БудущееДоКонца);
	
	Запрос.УстановитьПараметр("ДоКонцаДата", БудущееДоКонца);
	Запрос.УстановитьПараметр("АрхивНачало", АрхивНачало);
	Запрос.УстановитьПараметр("АрхивКонец",  АрхивКонец);
	
	Пакет =  Запрос.ВыполнитьПакет();
	// Текущие задачи
	Результат = Пакет[0].Выбрать();
	Если Результат.Следующий() Тогда
		Элементы.ТекущиеПлатежи.Заголовок = НСтр("ru = ' "+ СтрокаСЧислом(";%1 платеж; ;%1 платежа;%1 платежей;%1 платежа",Результат.КоличествоПлатежей,ВидЧисловогоЗначения.Количественное,"L=ru")+" на '") + Строка(Результат.СуммаНалога) + НСтр("ru = ' руб.'");
		Элементы.ТекущиеДокументы.Заголовок = НСтр("ru = ' "+СтрокаСЧислом(";%1 документ; ;%1 документа;%1 документов;%1 документа",Результат.КоличествоДокументов,ВидЧисловогоЗначения.Количественное,"L=ru")+" по отчетности'");
	КонецЕсли;
	
	// Будущие задачи
	Результат = Пакет[1].Выбрать();
	Если Результат.Следующий() Тогда
		Элементы.БудущиеПлатежи.Заголовок = НСтр("ru = ' "+СтрокаСЧислом(";%1 платеж; ;%1 платежа;%1 платежей;%1 платежа",Результат.КоличествоПлатежей,ВидЧисловогоЗначения.Количественное,"L=ru")+" на '") + Строка(Результат.СуммаНалога) + НСтр("ru = ' руб.'");
		Элементы.БудущиеДокументы.Заголовок = НСтр("ru = ' "+СтрокаСЧислом(";%1 документ; ;%1 документа;%1 документов;%1 документа",Результат.КоличествоДокументов,ВидЧисловогоЗначения.Количественное,"L=ru")+" по отчетности'");
	КонецЕсли;
	
	// Архивные задачи
	Результат = Пакет[2].Выбрать();
	Если Результат.Следующий() Тогда
		Элементы.АрхивПлатежи.Заголовок = НСтр("ru = ' "+СтрокаСЧислом(";%1 платеж; ;%1 платежа;%1 платежей;%1 платежа",Результат.КоличествоПлатежей,ВидЧисловогоЗначения.Количественное,"L=ru")+" на '") + Строка(Результат.СуммаНалога) + НСтр("ru = ' руб.'");
		Элементы.АрхивДокументы.Заголовок = НСтр("ru = ' "+СтрокаСЧислом(";%1 документ; ;%1 документа;%1 документов;%1 документа",Результат.КоличествоДокументов,ВидЧисловогоЗначения.Количественное,"L=ru")+" по отчетности'");
	КонецЕсли;
	НастроитьОтображениеСписка();
КонецПроцедуры

&НаКлиенте
Процедура МесяцПриИзменении(Элемент)
	НастроитьОтображениеСумм();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОбработкаЗапросаОбновления()
	НастроитьОтображениеСумм();
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	НастроитьОтображениеСумм();
КонецПроцедуры

&НаКлиенте
Процедура ГодАрхивПриИзменении(Элемент)
	НастроитьОтображениеСумм();
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеСписка()
	
	ХотяБыОднаНастройкаВключена = Ложь;
	Для Каждого КомандаНастройки Из НастройкиКнопок Цикл
		Если КомандаНастройки.Значение Тогда
			ХотяБыОднаНастройкаВключена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаОтборПоПараметрам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтаФорма.СписокЗадач.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоПараметрам",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	Для Каждого КомандаНастройки Из НастройкиКнопок Цикл
		Если ХотяБыОднаНастройкаВключена Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборПоПараметрам,КомандаНастройки.Ключ,КомандаНастройки.Значение, ВидСравненияКомпоновкиДанных.Равно,,КомандаНастройки.Значение);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗадач, КомандаНастройки.Ключ,
				КомандаНастройки.Значение, , , Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты(Команда)
	
	ОтчетПоНалогам = НайтиОтчетПоНалогам();
	Если Не ЗначениеЗаполнено(ОтчетПоНалогам) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, ОтчетПоНалогам, ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция НайтиОтчетПоНалогам()
	Возврат Справочники.ВариантыОтчетов.НайтиПоНаименованию("Расчеты по налогам");
КонецФункции

&НаКлиенте
Процедура ТекущиеПлатежиПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеДокументыПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БудущиеПлатежиПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БудущиеДокументыПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АрхивПлатежиПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АрхивДокументыПриИзменении(Элемент)
	НастроитьОтображениеКнопок(Элемент.Имя);
КонецПроцедуры

#КонецОбласти
