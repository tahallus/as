#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ЗаполнениеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов.
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт

	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;

КонецПроцедуры

// Вызывается при начальном заполнении справочника Организации.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов
//                                 справочника Организации.
//  ТабличныеЧасти - Структура - описание табличных частей объекта, где:
//   * Ключ - Строка - имя табличной части;
//   * Значение - ТаблицаЗначений - табличная часть в виде таблицы значений, структуру которой
//                                  необходимо скопировать перед заполнением. Например:
//                                  Элемент.Ключи = ТабличныеЧасти.Ключи.Скопировать();
//                                  ЭлементТЧ = Элемент.Ключи.Добавить();
//                                  ЭлементТЧ.ИмяКлюча = "Первичный";
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	ЭлементАвансовыйПлатежПриУСН = Элементы.Добавить();
	ЭлементАвансовыйПлатежПриУСН.ИмяПредопределенныхДанных = "АвансовыйПлатежПриУСН";
	ЭлементАвансовыйПлатежПриУСН.Наименование = НСтр("ru = 'Авансовый платеж (УСН)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементАвансовыйПлатежПриУСН.Код = "00-000001";
	ЗаполнитьСчетаУчета(ЭлементАвансовыйПлатежПриУСН);

	ЭлементЕдиныйНалогПриУСН = Элементы.Добавить();
	ЭлементЕдиныйНалогПриУСН.ИмяПредопределенныхДанных = "ЕдиныйНалогПриУСН";
	ЭлементЕдиныйНалогПриУСН.Наименование = НСтр("ru = 'Единый налог (УСН)'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементЕдиныйНалогПриУСН.Код = "00-000002";
	ЗаполнитьСчетаУчета(ЭлементЕдиныйНалогПриУСН);

	ЭлементПФРНакопительная = Элементы.Добавить();
	ЭлементПФРНакопительная.ИмяПредопределенныхДанных = "ПФРНакопительная";
	ЭлементПФРНакопительная.Наименование = НСтр("ru = 'Фиксированные взносы в ПФР, накопительная часть (до 2014 г)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПФРНакопительная.Код = "00-000003";
	ЗаполнитьСчетаУчета(ЭлементПФРНакопительная);
	ЭлементПФРНакопительная.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть;
	ЗаполнитьИзКлассификатора(ЭлементПФРНакопительная);

	ЭлементПФРСтраховая = Элементы.Добавить();
	ЭлементПФРСтраховая.ИмяПредопределенныхДанных = "ПФРСтраховая";
	ЭлементПФРСтраховая.Наименование = НСтр("ru = 'Фиксированные взносы в ПФР'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПФРСтраховая.Код = "00-000004";
	ЗаполнитьСчетаУчета(ЭлементПФРСтраховая);
	ЭлементПФРСтраховая.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ЗаполнитьИзКлассификатора(ЭлементПФРСтраховая);

	ЭлементТФОМС = Элементы.Добавить();
	ЭлементТФОМС.ИмяПредопределенныхДанных = "ТФОМС";
	ЭлементТФОМС.Наименование = НСтр("ru = 'Фиксированные взносы в ТФОМС'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементТФОМС.Код = "00-000005";
	ЗаполнитьСчетаУчета(ЭлементТФОМС);

	ЭлементФФОМС = Элементы.Добавить();
	ЭлементФФОМС.ИмяПредопределенныхДанных = "ФФОМС";
	ЭлементФФОМС.Наименование = НСтр("ru = 'Фиксированные взносы в ФФОМС'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементФФОМС.Код = "00-000006";
	ЗаполнитьСчетаУчета(ЭлементФФОМС);
	ЭлементФФОМС.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
	ЗаполнитьИзКлассификатора(ЭлементФФОМС);

	ЭлементЕНВД = Элементы.Добавить();
	ЭлементЕНВД.ИмяПредопределенныхДанных = "ЕНВД";
	ЭлементЕНВД.Наименование = НСтр("ru = 'Единый налог (ЕНВД)'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементЕНВД.Код = "00-000007";
	ЗаполнитьСчетаУчета(ЭлементЕНВД);
	ЭлементЕНВД.ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	ЗаполнитьИзКлассификатора(ЭлементЕНВД);

	ЭлементНДФЛСотрудники = Элементы.Добавить();
	ЭлементНДФЛСотрудники.ИмяПредопределенныхДанных = "НДФЛСотрудники";
	ЭлементНДФЛСотрудники.Наименование = НСтр("ru = 'НДФЛ исчисленный налоговым агентом'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементНДФЛСотрудники.Код = "00-000008";
	ЗаполнитьСчетаУчета(ЭлементНДФЛСотрудники);
	ЭлементНДФЛСотрудники.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины;;
	ЗаполнитьИзКлассификатора(ЭлементНДФЛСотрудники);
	
	ЭлементНДФЛСотрудникиСвышеПредельнойВеличины = Элементы.Добавить();
	ЭлементНДФЛСотрудникиСвышеПредельнойВеличины.ИмяПредопределенныхДанных = "НДФЛДоходыСвышеПредельнойВеличины";
	ЭлементНДФЛСотрудникиСвышеПредельнойВеличины.Наименование = НСтр("ru = 'НДФЛ с доходов свыше предельной величины, исчисленный налоговым агентом'",
	ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементНДФЛСотрудникиСвышеПредельнойВеличины.Код = "00-000017";
	ЗаполнитьСчетаУчета(ЭлементНДФЛСотрудникиСвышеПредельнойВеличины);
	ЭлементНДФЛСотрудникиСвышеПредельнойВеличины.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
	ЗаполнитьИзКлассификатора(ЭлементНДФЛСотрудникиСвышеПредельнойВеличины);  

	ЭлементПФРНакопительнаяСотрудники = Элементы.Добавить();
	ЭлементПФРНакопительнаяСотрудники.ИмяПредопределенныхДанных = "ПФРНакопительнаяСотрудники";
	ЭлементПФРНакопительнаяСотрудники.Наименование = НСтр(
		"ru = 'Страховые взносы в ПФР, накопительная часть по сотрудникам (до 2014 г)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПФРНакопительнаяСотрудники.Код = "00-000009";
	ЗаполнитьСчетаУчета(ЭлементПФРНакопительнаяСотрудники);
	ЭлементПФРНакопительнаяСотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть;
	ЗаполнитьИзКлассификатора(ЭлементПФРНакопительнаяСотрудники);

	ЭлементПФРСтраховаяСотрудники = Элементы.Добавить();
	ЭлементПФРСтраховаяСотрудники.ИмяПредопределенныхДанных = "ПФРСтраховаяСотрудники";
	ЭлементПФРСтраховаяСотрудники.Наименование = НСтр("ru = 'Страховые взносы в ПФР по сотрудникам'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПФРСтраховаяСотрудники.Код = "00-000010";
	ЗаполнитьСчетаУчета(ЭлементПФРСтраховаяСотрудники);
	ЭлементПФРСтраховаяСотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
	ЗаполнитьИзКлассификатора(ЭлементПФРСтраховаяСотрудники);

	ЭлементФСССотрудники = Элементы.Добавить();
	ЭлементФСССотрудники.ИмяПредопределенныхДанных = "ФСССотрудники";
	ЭлементФСССотрудники.Наименование = НСтр("ru = 'Страховые взносы в ФСС'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементФСССотрудники.Код = "00-000011";
	ЗаполнитьСчетаУчета(ЭлементФСССотрудники);
	ЭлементФСССотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
	ЗаполнитьИзКлассификатора(ЭлементФСССотрудники);

	ЭлементФССТравматизмСотрудники = Элементы.Добавить();
	ЭлементФССТравматизмСотрудники.ИмяПредопределенныхДанных = "ФССТравматизмСотрудники";
	ЭлементФССТравматизмСотрудники.Наименование = НСтр("ru = 'Страховые взносы в ФСС от несчастных случаев'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементФССТравматизмСотрудники.Код = "00-000012";
	ЗаполнитьСчетаУчета(ЭлементФССТравматизмСотрудники);
	ЭлементФССТравматизмСотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
	ЗаполнитьИзКлассификатора(ЭлементФССТравматизмСотрудники);

	ЭлементФОМССотрудники = Элементы.Добавить();
	ЭлементФОМССотрудники.ИмяПредопределенныхДанных = "ФОМССотрудники";
	ЭлементФОМССотрудники.Наименование = НСтр("ru = 'Страховые взносы в ФФОМС'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементФОМССотрудники.Код = "00-000013";
	ЗаполнитьСчетаУчета(ЭлементФОМССотрудники);
	ЭлементФОМССотрудники.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
	ЗаполнитьИзКлассификатора(ЭлементФОМССотрудники);

	ЭлементПФРСвыше300ТР = Элементы.Добавить();
	ЭлементПФРСвыше300ТР.ИмяПредопределенныхДанных = "ПФРСвыше300ТР";
	ЭлементПФРСвыше300ТР.Наименование = НСтр("ru = 'Взносы в ПФР при доходах свыше 300 тысяч руб. (ИП)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПФРСвыше300ТР.Код = "00-000014";
	ЗаполнитьСчетаУчета(ЭлементПФРСвыше300ТР);
	ЭлементПФРСвыше300ТР.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ЗаполнитьИзКлассификатора(ЭлементПФРСвыше300ТР);

	ЭлементПатент = Элементы.Добавить();
	ЭлементПатент.ИмяПредопределенныхДанных = "Патент";
	ЭлементПатент.Наименование = НСтр("ru = 'Налог с патента'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементПатент.Код = "01-000015";
	ЗаполнитьСчетаУчета(ЭлементПатент);

	ЭлементТорговыйСбор = Элементы.Добавить();
	ЭлементТорговыйСбор.ИмяПредопределенныхДанных = "ТорговыйСбор";
	ЭлементТорговыйСбор.Наименование = НСтр("ru = 'Торговый сбор'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЭлементТорговыйСбор.Код = "01-000016";
	ЗаполнитьСчетаУчета(ЭлементТорговыйСбор);
	ЭлементТорговыйСбор.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
	ЗаполнитьИзКлассификатора(ЭлементТорговыйСбор);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Возвращает дату вступления в силу актуального классификатора кодов бюджетной классификации (КБК).
// 
// Возвращаемое значение:
// 	Дата - дата вступления в силу актуального классификатора КБК.
Функция ДатаАктуальностиКлассификатора() Экспорт
	
	Возврат '20210101';
	
КонецФункции


// Возвращает содержимое см. Перечисления.ВидыНалогов в виде структуры.
// 
// Возвращаемое значение:
// 	Структура - содержимое значений см. Перечисления.ВидыНалогов
Функция ВидыНалогов() Экспорт

	Результат = Новый Структура;

	КоллекцияМетаданных = Перечисления.ВидыНалогов.Получить(0).Метаданные().ЗначенияПеречисления;

	Для Индекс = 0 По КоллекцияМетаданных.Количество() - 1 Цикл
		Результат.Вставить(КоллекцияМетаданных[Индекс].Имя, Перечисления.ВидыНалогов.Получить(Индекс));
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает КБК с учетом вида налогового обязательства
// 
// Параметры:
// 	КБК - Строка - Описание
// 	ВидНалога - ПеречислениеСсылка.ВидыНалогов - Описание
// 	ВидНалоговогоОбязательства - Строка, Неопределено - Описание
// 	Период - Дата, Неопределено - Описание
// 	ПериодПлатежа - Неопределено - Описание
// Возвращаемое значение:
// 	Строка - КБК с учетом вида налогового обязательства
Функция КБКПоВидуНалоговогоОбязательства(КБК, ВидНалога, Знач ВидНалоговогоОбязательства = Неопределено,
	Знач Период = Неопределено, Знач ПериодПлатежа = Неопределено) Экспорт

	Если ПустаяСтрока(КБК) Тогда
		Возврат КБК;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК) <> ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
			Возврат КБК; // Сохраняем заданный код подвида доходов
		Иначе
			ВидНалоговогоОбязательства = "Налог";
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;

	КодГлавногоАдминистратора    = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК);
	КодВидаДоходов               = ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК);
	КодПодвидаДоходов            = КодПодвидаДоходов(КБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	КодОперацииСектораУправления = ПлатежиВБюджетКлиентСервер.КодОперацииСектораУправления(КБК);

	Возврат КодГлавногоАдминистратора + КодВидаДоходов + КодПодвидаДоходов + КодОперацииСектораУправления;

КонецФункции

// Ищет КБК в макете (указанной версии) по переданному Коду
//
// Параметры:
//
//	- Код - Строка
//	- ВерсияКлассификатора - Число - Значение по умолчанию: 0
//	- КБКИсходный - Строка
//
Функция НайтиКодДоходаБюджета(Код, ВерсияКлассификатора = 0, КБКИсходный = "", ОпределитьКОСГУ = Ложь) Экспорт
	
	// Функция оставлена для совместимости.
	// Следует использовать ОписаниеКБК()
	// В качестве Код и КБКИсходный передается шаблон кода (17 знаков)

	ВидДохода = Лев(Код, 10);
	КОСГУ    = Сред(Код, 15);

	КодДоходаБюджета = Новый Структура;
	КодДоходаБюджета.Вставить("ВидДохода", ВидДохода);
	КодДоходаБюджета.Вставить("КОСГУ", КОСГУ);
	КодДоходаБюджета.Вставить("Наименование", "");
	КодДоходаБюджета.Вставить("КраткоеНаименование", "");
	КодДоходаБюджета.Вставить("ПодвидДохода", "");

	Период = ДатаАктуальностиКлассификатора();
	Если ЗначениеЗаполнено(ВерсияКлассификатора) Тогда
		Период = Дата(ВерсияКлассификатора, 1, 1);
	КонецЕсли;

	Если Период < ДатаАктуальностиКлассификатора() Тогда
		Период = НачалоГода(ДатаАктуальностиКлассификатора() - 1);
	КонецЕсли;

	ОписаниеКБК = Неопределено;
	Если ЗначениеЗаполнено(КБКИсходный) Тогда
		ОписаниеКБК = ОписаниеКБК("000" + СокрЛП(КБКИсходный), Период, ОпределитьКОСГУ);
	КонецЕсли;

	Если ОписаниеКБК = Неопределено Тогда
		ОписаниеКБК = ОписаниеКБК("000" + СокрЛП(Код), Период, ОпределитьКОСГУ);
	КонецЕсли;

	Если ОписаниеКБК = Неопределено Тогда
		Возврат КодДоходаБюджета;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(КодДоходаБюджета, ОписаниеКБК);

	НайденныйШаблон = ОписаниеКБК.НайденныйШаблон;

	КодДоходаБюджета.ВидДохода = Лев(НайденныйШаблон, 10);
	КодДоходаБюджета.КОСГУ     = Сред(НайденныйШаблон, 15);

	ВыбранныйПодвидДохода = Сред(НайденныйШаблон, 11, 4);
	Если Не ПустаяСтрока(ВыбранныйПодвидДохода) И ВыбранныйПодвидДохода <> "0000" И СтрДлина(ВыбранныйПодвидДохода) = 4
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыбранныйПодвидДохода) Тогда
		КодДоходаБюджета.ПодвидДохода = ВыбранныйПодвидДохода;
	КонецЕсли;

	Возврат КодДоходаБюджета;

КонецФункции

// Находит данные в классификаторе по указанным параметрам
// 
// Параметры:
// 	ВидНалога - ПеречислениеСсылка.ВидыНалогов
// 	КБК - Строка
// Возвращаемое значение:
// 	Структура - описание
// * НазначениеПлатежаИзменено - Булево
// * ДатаАктуальности - Дата
// * СчетУчета - ПланСчетовСсылка.Управленческий
Функция НайтиПоставляемыеДанные(ВидНалога = Неопределено, КБК = Неопределено) Экспорт

	Период = '00010101';
	
	Если ЗначениеЗаполнено(ВидНалога) Тогда

		ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("ВидНалога",
			ВидНалога));

	ИначеЕсли Не ПустаяСтрока(КБК) Тогда

		КодБК = Лев(СокрЛ(КБК), 13) + ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() + Сред(СокрЛП(КБК), 18);
		ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("КодБК", КодБК));

	Иначе

		Возврат Неопределено;

	КонецЕсли;

	Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда

		СтруктураДанных = НоваяСтруктураПоставляемыхДанных();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ТаблицаПоставляемыхДанных[0]);

		Если ЗначениеЗаполнено(СтруктураДанных.ВидНалога) Тогда

			Если ЗначениеЗаполнено(Период) И Период < ДатаАктуальностиКлассификатора() Тогда
				СтруктураДанных.ДатаАктуальности = Период;
			Иначе
				СтруктураДанных.ДатаАктуальности = ДатаАктуальностиКлассификатора();
			КонецЕсли;

			СтруктураДанных.НазначениеПлатежаИзменено = Ложь;
			ПодменитьРеквизитыПриСовпаденииКБК(СтруктураДанных);

		КонецЕсли;

		Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(СтруктураДанных.КодБК)
			= ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
			СтруктураДанных.КодБК = КБКПоВидуНалоговогоОбязательства(СтруктураДанных.КодБК, СтруктураДанных.ВидНалога,
				, СтруктураДанных.ДатаАктуальности);
		КонецЕсли;

	Иначе

		СтруктураДанных = Неопределено;

	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции

// Описание кода бюджетной классификации
// 
// Параметры:
// 	КБК - Строка - код бюджетной классификации
// 	Период - Дата - период
// 	ОпределитьКОСГУ - Булево - определить классификацию операций сектора государственного управления
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * Наименование - Строка - описание кода бюджетной классификации
Функция ОписаниеКБК(КБК, Период, ОпределитьКОСГУ = Ложь) Экспорт

	Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		ДлинаКБК = СтрДлина(КБК);
		Если Не (ОпределитьКОСГУ И (ДлинаКБК = 13 Или ДлинаКБК = 17)) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	ИмяМакета = ИмяМакетаКБК(Период);

	ИсточникДанных = Справочники.ВидыНалогов.ПолучитьМакет(ИмяМакета);
	ОбластьПоиска  = ИсточникДанных.Область(2, 1, ИсточникДанных.ВысотаТаблицы, 1);

	ШаблонКБК      = ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК, Ложь);

	ОбластьДанных = Неопределено;
	Если ШаблонКБК <> "" Тогда
		ОбластьДанных = ИсточникДанных.НайтиТекст(ШаблонКБК, , ОбластьПоиска);
		Если ОбластьДанных = Неопределено Тогда
			ШаблонКБК     = ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК, Истина);
			ОбластьДанных = ИсточникДанных.НайтиТекст(ШаблонКБК, , ОбластьПоиска);
		КонецЕсли;
	КонецЕсли;

	Если ОбластьДанных = Неопределено И ОпределитьКОСГУ Тогда
		ШаблонКБКБезКОСГУ = ПлатежиВБюджетКлиентСервер.ЭлементКБК(КБК, "КодВидаДоходов");
		ОбластьДанных     = ИсточникДанных.НайтиТекст(ШаблонКБКБезКОСГУ, , ОбластьПоиска);

		Если ОбластьДанных <> Неопределено Тогда
			ШаблонКБК = ШаблонКБКБезКОСГУ + ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов();
		КонецЕсли;
	КонецЕсли;

	Если ОбластьДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НомерСтроки                     = ОбластьДанных.Верх;
	НомерКолонкиКод                 = 1;
	НомерКолонкиНаименование        = 2;
	НомерКолонкиКраткоеНаименование = 3;

	Описание = Новый Структура;

	Если ОпределитьКОСГУ Тогда
		НайденныйКБК = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКод);
		Описание.Вставить("КОСГУ", Прав(НайденныйКБК, 3));
		Описание.Вставить("НайденныйШаблон", НайденныйКБК); // ШаблонКБК + Описание.КОСГУ);
	Иначе
		Описание.Вставить("НайденныйШаблон", ШаблонКБК);
	КонецЕсли;

	Описание.Вставить("Наименование", ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименование));
	Описание.Вставить("КраткоеНаименование", ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки,
		НомерКолонкиКраткоеНаименование));

	Возврат Описание;

КонецФункции

// Проверяет актуальность реквизитов при подготовке платежных документов
//
// Параметры:
//   Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//   Период - Дата - дата платежного документа
//
// Возвращаемое значение:
//  Булево
//
Функция РеквизитыАктуальны(Налог, Знач Период = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Налог) Или Налог = Справочники.ВидыНалогов.ПустаяСсылка() Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	Если НачалоДня(Период) < ДатаАктуальностиКлассификатора() Тогда
		// Платеж относится к периоду действия старого классификатора
		Возврат Истина;
	КонецЕсли;

	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог, "ВидНалога, ДатаАктуальности");

	Если ЗначениеЗаполнено(ЗначениеРеквизитов.ВидНалога) И ЗначениеЗаполнено(ЗначениеРеквизитов.ДатаАктуальности) Тогда
		// Проверка актуальности выполняется только для поставляемых элементов
		РеквизитыАктуальны = (НачалоДня(ЗначениеРеквизитов.ДатаАктуальности) >= ДатаАктуальностиКлассификатора());
	Иначе
		РеквизитыАктуальны = Истина;
	КонецЕсли;

	Возврат РеквизитыАктуальны;

КонецФункции

// Возвращает администратора налога по КБК
//
// Параметры:
//   Налог - СправочникСсылка.ВидыНалогов
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыГосударственныхОрганов
//
Функция ВидГосударственногоОргана(Налог) Экспорт

	Если ЗначениеЗаполнено(Налог) Тогда
		КБК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "КодБК");
	Иначе
		КБК = "";
	КонецЕсли;

	Возврат ПлатежиВБюджетКлиентСервер.ВидГосударственногоОргана(КБК);

КонецФункции

// Данные выбора налога по коду бюджетной классификации
// 
// Параметры:
// 	КодБК - Строка - код бюджетной классификации
// Возвращаемое значение:
// 	СписокЗначений - список для выбора вида налога по указанному коду бюджетной классификации 
Функция ДанныеВыбораПоКБК(КодБК) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонКБК", Лев(КодБК, 13) + "%");

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка,
	|	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
	|ГДЕ
	|	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК";
	Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяПенсионнымФондом(КодБК)
		Или ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяФСС(КодБК) Тогда
		Запрос.УстановитьПараметр("ШаблонКБК182", ПлатежиВБюджетКлиентСервер.КодАдминистрированияНалоговымиОрганами()
			+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");

		ТекстЗапроса = ТекстЗапроса + "
									  |
									  |ОБЪЕДИНИТЬ ВСЕ
									  |
									  |" + "ВЫБРАТЬ
										   |	ВидыНалоговИПлатежейВБюджет.Ссылка,
										   |	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
										   |ИЗ
										   |	Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
										   |ГДЕ
										   |	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК182
										   |	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления";
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(КодБК)
		Или ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяФСС(КодБК) Тогда
		Запрос.УстановитьПараметр("ШаблонКБК392", ПлатежиВБюджетКлиентСервер.КодАдминистрированияПенсионнымФондом()
			+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");
		Запрос.УстановитьПараметр("ШаблонКБК393", ПлатежиВБюджетКлиентСервер.КодАдминистрированияФСС()
			+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");

		ТекстЗапроса = ТекстЗапроса + "
									  |
									  |ОБЪЕДИНИТЬ ВСЕ
									  |
									  |" + "ВЫБРАТЬ
										   |	ВидыНалоговИПлатежейВБюджет.Ссылка,
										   |	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
										   |ИЗ
										   |	Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
										   |ГДЕ
										   |	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК392
										   |	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
										   |
										   |ОБЪЕДИНИТЬ ВСЕ
										   |
										   |ВЫБРАТЬ
										   |	ВидыНалоговИПлатежейВБюджет.Ссылка,
										   |	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
										   |ИЗ
										   |	Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
										   |ГДЕ
										   |	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК393
										   |	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления));
	КонецЦикла;

	Возврат ДанныеВыбора;

КонецФункции

// Формирует назначение платежа для уплаты налогов
//
// Параметры:
//   Налог                          - СправочникСсылка.ВидыНалогов
//   ВидНалоговогоОбязательства     - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Организация                    - СправочникСсылка.Организации
//   Период                         - Дата, Неопределено
//   ПредставлениеНалоговогоПериода - Строка
//   ШаблонНазначения               - Строка
//
// Возвращаемое значение:
//  Строка - назначение платежа
//
Функция НазначениеПлатежа(Налог, ВидНалоговогоОбязательства = Неопределено, Организация = Неопределено,
	Знач Период = Неопределено, ПредставлениеНалоговогоПериода = "", ШаблонНазначения = "") Экспорт

	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;

	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(Налог) Тогда
		ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог,
			"ВидНалога, НазначениеПлатежа, ДатаАктуальности");
		ВидНалога         = ЗначениеРеквизитов.ВидНалога;
		НазначениеПлатежа = ЗначениеРеквизитов.НазначениеПлатежа;
		ДатаАктуальности  = ЗначениеРеквизитов.ДатаАктуальности;
	КонецЕсли;
	
	// Если требуется устаревшее значение или новое значение до вступления классификатора в силу, читаем данные из макета
	Если ЗначениеЗаполнено(ВидНалога) И ЗначениеЗаполнено(ДатаАктуальности) Тогда

		Если (НачалоДня(Период) >= ДатаАктуальностиКлассификатора() И ДатаАктуальности
			< ДатаАктуальностиКлассификатора()) Или (НачалоДня(Период) < ДатаАктуальностиКлассификатора()
			И ДатаАктуальности >= ДатаАктуальностиКлассификатора()) Тогда

			ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора( , Новый Структура("ВидНалога",
				ВидНалога));
			Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда
				НазначениеПлатежа = ТаблицаПоставляемыхДанных[0].НазначениеПлатежа;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(ШаблонНазначения) Тогда
		ШаблонНазначения = НазначениеПлатежа;
	Иначе
		Параметр = "";
		ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<Период");
		Если ПозицияПараметра = 0 Тогда
			ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<ПФР");
		КонецЕсли;
		Если ПозицияПараметра = 0 Тогда
			ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<ФСС");
		КонецЕсли;

		Если ПозицияПараметра > 0 Тогда
			Параметр = Сред(НазначениеПлатежа, ПозицияПараметра);
		КонецЕсли;

		НазначениеПлатежа = СокрЛП(ШаблонНазначения + " " + ?(СтрНайти(НазначениеПлатежа, Параметр) = 0, Параметр, ""));
	КонецЕсли;

	Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда

		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", ПредставлениеНалоговогоПериода);

	Иначе
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", "");
	КонецЕсли;
	
	// При уплате страховых взносов, как правило, требуется указывать регистрационный номер
	ВидГосударственногоОргана = Справочники.ВидыНалогов.ВидГосударственногоОргана(Налог);
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Или ВидГосударственногоОргана
		= Перечисления.ВидыГосударственныхОрганов.ОрганФСС
		Или ПлатежиВБюджетКлиентСервер.ЭтоВзносыНаПенсионноеСтрахование(ВидНалога)
		Или ПлатежиВБюджетКлиентСервер.ЭтоВзносыНаСоциальноеСтрахование(ВидНалога) Тогда

		КлючиРеквизитов = "РегистрационныйНомерПФР, РегистрационныйНомерПФР_ИП, РегистрационныйНомерФСС";
		РеквизитыОрганизации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация, КлючиРеквизитов), Новый Структура(КлючиРеквизитов));

		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР>", РеквизитыОрганизации.РегистрационныйНомерПФР);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР_ИП>", РеквизитыОрганизации.РегистрационныйНомерПФР_ИП);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС>", РеквизитыОрганизации.РегистрационныйНомерФСС);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС_ИП>", РеквизитыОрганизации.РегистрационныйНомерФСС);

	КонецЕсли;

	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");

	Возврат НазначениеПлатежа;

КонецФункции

// Возвращает КБК налога
//
// Параметры:
//   Налог                      - СправочникСсылка.ВидыНалогов
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Период                     - Дата - период действия классификатора КБК
//   ПериодПлатежа              - Дата
//
// Возвращаемое значение:
//   Строка
//
Функция КБК(Налог, Знач ВидНалоговогоОбязательства = Неопределено, Знач Период = Неопределено,
	ПериодПлатежа = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательства = "Налог";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;

	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог, "ВидНалога, КодБК, ДатаАктуальности");
	ВидНалога        = ЗначениеРеквизитов.ВидНалога;
	КодБК            = ЗначениеРеквизитов.КодБК;
	ДатаАктуальности = ЗначениеРеквизитов.ДатаАктуальности;
	
	// Если требуется устаревшее значение или новое значение до вступления классификатора в силу, читаем данные из макета
	Если ЗначениеЗаполнено(ВидНалога) И ЗначениеЗаполнено(ДатаАктуальности) Тогда

		Если (НачалоДня(Период) >= ДатаАктуальностиКлассификатора() И ДатаАктуальности
			< ДатаАктуальностиКлассификатора()) Или (НачалоДня(Период) < ДатаАктуальностиКлассификатора()
			И ДатаАктуальности >= ДатаАктуальностиКлассификатора()) Тогда

			ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("ВидНалога",
				ВидНалога));
			Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда
				КодБК = ТаблицаПоставляемыхДанных[0].КодБК;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КодБК) = ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
		КодБК = КБКПоВидуНалоговогоОбязательства(КодБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоКБКНалогиВзносы(КодБК) И ВидНалоговогоОбязательства <> "Налог" Тогда
		ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(
			КодБК, Истина);
		КодБК = КБКПоВидуНалоговогоОбязательства(ШаблонКБК, ВидНалога, ВидНалоговогоОбязательства, Период,
			ПериодПлатежа);
	ИначеЕсли ЗначениеЗаполнено(ПериодПлатежа) И Год(ПериодПлатежа) < Год(Период) Тогда
		КодБК = КБКПоВидуНалоговогоОбязательства(КодБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	КонецЕсли;

	Возврат КодБК;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодПодвидаДоходов(КБК, ВидНалога, ВидНалоговогоОбязательства, Знач Период, Знач ПериодПлатежа = Неопределено)

	Если Не ЗначениеЗаполнено(ПериодПлатежа) Тогда
		ПериодПлатежа = Период;
	КонецЕсли;

	ЭтоНалог    = ВидНалоговогоОбязательства = "Налог";
	ЭтоПени     = ЭтоПени(ВидНалоговогоОбязательства);
	ЭтоПроценты = ЭтоПроценты(ВидНалоговогоОбязательства);
	ЭтоШтраф    = ЭтоШтраф(ВидНалоговогоОбязательства);

	Если ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС Или ВидНалога
		= Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда

		Если ПлатежиВБюджетКлиентСервер.НовыйАдминистраторСтраховыхВзносов(ПериодПлатежа) Тогда
			КодПодвидаДоходов = "1013";
			Если ЭтоПени Или ЭтоПроценты И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
				КодПодвидаДоходов = "2013";
			ИначеЕсли ЭтоПроценты И ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС Тогда
				КодПодвидаДоходов = "2213";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3013";
			КонецЕсли;
		Иначе
			КодПодвидаДоходов = "1011";
			Если ЭтоПени Или ЭтоПроценты Тогда
				КодПодвидаДоходов = "2011";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3011";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные Тогда

		КодПодвидаДоходов = "12";

	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС Тогда

		КодПодвидаДоходов = "6";

	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия Или ВидНалога
		= Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия Тогда

		Если ПлатежиВБюджетКлиентСервер.НовыйАдминистраторСтраховыхВзносов(Период) Тогда
			Если ЭтоНалог Тогда
				КодПодвидаДоходов = "102";
			Иначе
				КодПодвидаДоходов = "101";
			КонецЕсли;
		Иначе
			КодПодвидаДоходов = "101";
		КонецЕсли;

	Иначе

		КодПодвидаДоходов = "1";
		Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
			И ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(Период) И ВидНалоговогоОбязательства
			= "ВзносыСвышеПредела" Тогда
			КодПодвидаДоходов = "12";
		КонецЕсли;

		Если ПлатежиВБюджетКлиентСервер.НовыйАдминистраторСтраховыхВзносов(ПериодПлатежа) И (ВидНалога
			= Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть Или ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
			Или ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС) Тогда

			Если ЭтоНалог Тогда
				Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
					КодПодвидаДоходов = "111";
				Иначе
					КодПодвидаДоходов = "101";
				КонецЕсли;
			ИначеЕсли ЭтоПени Тогда
				КодПодвидаДоходов = "211";
			ИначеЕсли ЭтоПроценты Тогда
				КодПодвидаДоходов = "221";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "301";
			КонецЕсли;

		Иначе

			Если ЭтоНалог И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
				КодПодвидаДоходов = "11";
			ИначеЕсли ЭтоПени Или ЭтоПроценты Тогда
				КодПодвидаДоходов = "2";
				Если ПлатежиВБюджетКлиентСервер.ПениПроцентыРаздельно(КБК, Период) Тогда
					КодПодвидаДоходов = ?(ЭтоПени, "21", "22");
				КонецЕсли;
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3";
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	РасположениеЭлемента = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = СтрДлина(КодПодвидаДоходов) + 1 По РасположениеЭлемента.Длина Цикл
		КодПодвидаДоходов = КодПодвидаДоходов + "0";
	КонецЦикла;

	Возврат КодПодвидаДоходов;

КонецФункции

Функция ИмяМакетаКБК(Знач Период = Неопределено)
	
	ДатаАктуальностиКлассификатора = ДатаАктуальностиКлассификатора();
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаПользователя;
	КонецЕсли;
	
	ДатаАктуальностиВПрошломГоду = Год(ТекущаяДатаПользователя) < Год(ДатаАктуальностиКлассификатора);
	
	Если НачалоГода(Период) < ДатаАктуальностиКлассификатора Или ДатаАктуальностиВПрошломГоду Тогда
		Возврат "КлассификацияДоходовБюджетов2020";
	Иначе
		Возврат "КлассификацияДоходовБюджетов";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетаУчета(ЭлементАвансовыйПлатежПриУСН)
	ЭлементАвансовыйПлатежПриУСН.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ЭлементАвансовыйПлатежПриУСН.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
КонецПроцедуры

Процедура ЗаполнитьИзКлассификатора(ПредопределенныйЭлемент)
	ДанныеКлассификатора = НайтиПоставляемыеДанные(ПредопределенныйЭлемент.ВидНалога);
	Если ДанныеКлассификатора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПредопределенныйЭлемент, ДанныеКлассификатора, , "Наименование, СчетУчета");
	КонецЕсли;
КонецПроцедуры

Процедура ПодменитьРеквизитыПриСовпаденииКБК(Объект)

	Если ДатаАктуальностиКлассификатора() < ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н() Тогда

		Если ЗначениеЗаполнено(Объект.ВидНалога) И Объект.ВидНалога
			= Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
			// До 2016 года фиксированные взносы в ФФОМС уплачиваются по тому же КБК, что и взносы за работников.
			// По умолчанию реквизиты содержат наименование и назначение для взносов с ФОТ.
			Объект.Наименование      = НСтр("ru = 'Фиксированные взносы в ФФОМС'");
			Если Не Объект.НазначениеПлатежаИзменено Тогда
				Объект.НазначениеПлатежа = НСтр(
					"ru = 'Страховые взносы на ОМС, зачисляемые в бюджет ФФОМС. Регистрационный номер в ПФР <ПФР_ИП>'");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьПоставляемыеДанныеКлассификатора(Период = Неопределено, Отбор = Неопределено,
	ТолькоСИдентификаторами = Ложь)
	Перем ВидНалога;
	Перем ОтборПоВидуНалога, ОтборПоКБК, ОтборПоШаблонуКБК;

	УстановленОтбор = (Отбор <> Неопределено);

	Если УстановленОтбор И ТипЗнч(Отбор) = Тип("Структура") Тогда
		Отбор.Свойство("ВидНалога", ОтборПоВидуНалога);
		Отбор.Свойство("КодБК", ОтборПоКБК);
		Если ОтборПоКБК <> Неопределено Тогда
			ОтборПоШаблонуКБК = ПлатежиВБюджетКлиентСервер.ПустойКодГлавногоАдминистратора()
				+ ПлатежиВБюджетКлиентСервер.ШаблонКБК(ОтборПоКБК, Истина);
		КонецЕсли;
	КонецЕсли;

	ТипОтбораПоВидуНалога = ТипЗнч(ОтборПоВидуНалога);

	УстановленМножественныйОтбор = (ТипОтбораПоВидуНалога = Тип("Массив"));
	Если УстановленМножественныйОтбор Тогда
		ОтборПоВидуНалога = ОбщегоНазначенияПереопределяемый.УдалитьПовторяющиесяЭлементыМассива(ОтборПоВидуНалога);
	КонецЕсли;

	ТаблицаПоставляемыхДанных = НоваяТаблицаПоставляемыхДанных();

	НомерКолонкиКБК                = 1; // Код дохода бюджета
	НомерКолонкиНаименованиеПолное = 2; // Полное наименование
	НомерКолонкиНаименование       = 3; // Краткое наименование
	НомерКолонкиКодАдминистратора  = 4; // Код главного администратора доходов бюджета
	НомерКолонкиНазначениеПлатежа  = 5; // Шаблон назначения платежа
	НомерКолонкиИдентификатор      = 6; // Идентификатор

	ИсточникДанных = Справочники.ВидыНалогов.ПолучитьМакет(ИмяМакетаКБК(Период));

	ПредопределенныеВидовНалогов = ВидыНалогов();

	ПустойКодГлавногоАдминистратора = ПлатежиВБюджетКлиентСервер.ПустойКодГлавногоАдминистратора();

	Для НомерСтроки = 2 По ИсточникДанных.ВысотаТаблицы Цикл

		КБК = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКБК);
		Если ПустаяСтрока(КБК) Тогда
			// Конец таблицы
			Прервать;
		КонецЕсли;

		КодАдминистратора = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКодАдминистратора);

		КодБК = ?(Не ПустаяСтрока(КодАдминистратора), КодАдминистратора + КБК, ПустойКодГлавногоАдминистратора + КБК);

		Если УстановленОтбор И ОтборПоКБК <> Неопределено Тогда
			Если Не ПустаяСтрока(КодАдминистратора) Тогда
				Если ОтборПоКБК <> КодБК Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ОтборПоШаблонуКБК <> КодБК Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтрокаИдентификаторов = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиИдентификатор);
		Если УстановленОтбор И ОтборПоВидуНалога <> Неопределено И ПустаяСтрока(СтрокаИдентификаторов) Тогда
			// Непоставляемые данные
			Продолжить;
		КонецЕсли;

		Если Не ПустаяСтрока(СтрокаИдентификаторов) Тогда
			МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИдентификаторов);
		Иначе
			МассивИдентификаторов = Новый Массив;
			МассивИдентификаторов.Добавить("");
		КонецЕсли;

		НаименованиеПолное    = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименованиеПолное);
		Наименование          = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименование);
		НазначениеПлатежа     = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНазначениеПлатежа);

		Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл

			Идентификатор = СокрЛП(МассивИдентификаторов[Индекс]);

			Если ПустаяСтрока(Идентификатор) Или Не ПредопределенныеВидовНалогов.Свойство(Идентификатор, ВидНалога) Тогда
				Если ТолькоСИдентификаторами Тогда
					Если Лев(КБК, 3) = "118" Тогда // не будем читать весь макет, начиная с 118 точно нет КБК, с поддерживаемыми налогами.
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
			КонецЕсли;

			Если УстановленОтбор И ОтборПоВидуНалога <> Неопределено Тогда
				Если ТипОтбораПоВидуНалога = Тип("Массив") Тогда
					Если ОтборПоВидуНалога.Найти(ВидНалога) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли ОтборПоВидуНалога <> ВидНалога Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока = ТаблицаПоставляемыхДанных.Добавить();
			НоваяСтрока.ВидНалога          = ВидНалога;
			НоваяСтрока.КодБК              = КодБК;
			НоваяСтрока.НаименованиеПолное = НаименованиеПолное;
			НоваяСтрока.Наименование       = Наименование;
			НоваяСтрока.НазначениеПлатежа  = НазначениеПлатежа;

			Если УстановленОтбор Тогда
				Если УстановленМножественныйОтбор Тогда
					Если ОтборПоВидуНалога <> Неопределено И ТаблицаПоставляемыхДанных.Количество()
						= ОтборПоВидуНалога.Количество() Тогда
						// Все значения отбора уже найдены
						Возврат ТаблицаПоставляемыхДанных;
					КонецЕсли;
				Иначе
					// Возвращаем первую найденную запись
					Возврат ТаблицаПоставляемыхДанных;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаПоставляемыхДанных;

КонецФункции

Функция НоваяСтруктураПоставляемыхДанных()

	ТаблицаПоставляемыхДанных = НоваяТаблицаПоставляемыхДанных();

	СтруктураПоставляемыхДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПоставляемыхДанных.Добавить());
	СтруктураПоставляемыхДанных.Вставить("СчетУчета", ПланыСчетов.Управленческий.ПустаяСсылка());
	СтруктураПоставляемыхДанных.Вставить("ДатаАктуальности", Дата(1, 1, 1));
	СтруктураПоставляемыхДанных.Вставить("НазначениеПлатежаИзменено", Ложь);

	Возврат СтруктураПоставляемыхДанных;

КонецФункции

Функция НоваяТаблицаПоставляемыхДанных()

	ТаблицаПоставляемыхДанных = Новый ТаблицаЗначений;
	ТаблицаПоставляемыхДанных.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("КодБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("НазначениеПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(210));

	Возврат ТаблицаПоставляемыхДанных;

КонецФункции

Функция ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонки)

	ОбластьДанных = ИсточникДанных.Область(НомерСтроки, НомерКолонки);
	Если ОбластьДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ОбластьДанных.Текст;
	КонецЕсли;

КонецФункции

Функция ЭтоПени(ВидНалоговогоОбязательства)
	Возврат ВидНалоговогоОбязательства = "ПениАкт" Или ВидНалоговогоОбязательства = "ПениСам";
КонецФункции

Функция ЭтоПроценты(ВидНалоговогоОбязательства)
	Возврат ВидНалоговогоОбязательства = "Проценты";
КонецФункции

Функция ЭтоШтраф(ВидНалоговогоОбязательства)
	Возврат ВидНалоговогоОбязательства = "Штраф";
КонецФункции

#КонецОбласти

#КонецЕсли