#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Установка / снятие основной комплектации
//
// Параметры:
//  Номенклатура	 - 	СправочникСсылка.Номенклатура - Номенклатура, для которой изменяется основная комплектация
//  Характеристика	 - 	СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика, для которой изменяется основная комплектация
//  Комплектация	 - 	СправочникСсылка.КомплектацииНоменклатуры - Устанавливаемая / снимаемая основная комплектация
//
Процедура ИзменитьПризнакОсновнаяКомплектация(Номенклатура, Характеристика, Комплектация) Экспорт
	
	Менеджер = РегистрыСведений.КомплектацииПоУмолчанию.СоздатьМенеджерЗаписи();
	Менеджер.Номенклатура = Номенклатура;
	Менеджер.Характеристика = Характеристика;
	Менеджер.Прочитать();
	Если Менеджер.Выбран() И Менеджер.Комплектация = Комплектация Тогда
		Менеджер.Удалить();
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Комплектация, "ПометкаУдаления, Недействителен");
		Если ЗначенияРеквизитов.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Комплектация %1 помечена на удаление. Установка признака <основная> невозможна.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Комплектация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		Если ЗначенияРеквизитов.Недействителен Тогда
			ТекстСообщения = НСтр("ru = 'Комплектация %1 недействительна. Установка признака <основная> невозможна.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Комплектация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		Менеджер.Номенклатура = Номенклатура;
		Менеджер.Характеристика = Характеристика;
		Менеджер.Комплектация = Комплектация;
		Менеджер.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает комплектацию по-умолчанию для номенклатуры, характеристики.
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры, Неопределено - характеристики.
//
// Возвращаемое значение:
// 	СправочникСсылка.КомплектацииНоменклатуры - комплектация по-умолчанию.
//
Функция КомплектацияПоУмолчанию(Номенклатура, Характеристика = Неопределено) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.КомплектацииНоменклатуры) Тогда
		Возврат Справочники.КомплектацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КомплектацииПоУмолчанию) Тогда
		Возврат Справочники.КомплектацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика",  Характеристика);
	КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КомплектацииПоУмолчанию.Комплектация КАК Комплектация,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.КомплектацииПоУмолчанию КАК КомплектацииПоУмолчанию
	|ГДЕ
	|	КомплектацииПоУмолчанию.Номенклатура = &Номенклатура
	|	И КомплектацииПоУмолчанию.Характеристика = &Характеристика
	|	И КомплектацииПоУмолчанию.Комплектация.Владелец = КомплектацииПоУмолчанию.Номенклатура
	|	И КомплектацииПоУмолчанию.Комплектация.Характеристика = КомплектацииПоУмолчанию.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацииПоУмолчанию.Комплектация,
	|	1
	|ИЗ
	|	РегистрСведений.КомплектацииПоУмолчанию КАК КомплектацииПоУмолчанию
	|ГДЕ
	|	КомплектацииПоУмолчанию.Номенклатура = &Номенклатура
	|	И КомплектацииПоУмолчанию.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И КомплектацииПоУмолчанию.Комплектация.Владелец = КомплектацииПоУмолчанию.Номенклатура
	|	И КомплектацииПоУмолчанию.Комплектация.Характеристика = КомплектацииПоУмолчанию.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Комплектация;
	Иначе
		Возврат Справочники.КомплектацииНоменклатуры.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

// Добавляет стандартные отборы комплектаций
//
// Параметры:
//  Параметры	 - 	Структура - Параметры открытия формы или обработчика получения данных
//  Отказ		 - 	Булево - Признак отмены выбора
//
Процедура ДобавитьОтборыКомплектации(Параметры, Отказ) Экспорт
		
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
			
			ТипВладелец = Параметры.Отбор.Владелец.ТипНоменклатуры;
			
			Если ТипВладелец <> Перечисления.ТипыНоменклатуры.Запас Тогда
			
				Сообщение = Новый СообщениеПользователю();
				ТекстНадписи = НСтр("ru = 'Для номенклатуры типа %1 комплектация не указывается.'");
				ТекстНадписи = СтрШаблон(ТекстНадписи, ТипВладелец);
				Сообщение.Текст = ТекстНадписи;
				Сообщение.Сообщить();
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Характеристика") Тогда
		
		Характеристика = Параметры.Отбор.Характеристика;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(Характеристика);
			МассивЗначений.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Параметры.Отбор.Характеристика = Новый ФиксированныйМассив(МассивЗначений);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Отказ = Ложь;
	ДобавитьОтборыКомплектации(Параметры, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", 
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,
		"НоменклатураНаименованиеПолное", НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000,
		ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", 
		НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", 
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДоляСтоимости", 
		НСтр("ru = 'Доля стоимости'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КоличествоПродукции", 
		НСтр("ru = 'Количество продукции'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
КонецПроцедуры

// АПК:299-выкл процедура вызывается программно в форме ПомощникЗагрузкиДанныхИзВнешнегоИсточника обработки ЗагрузкаДанныхИзВнешнегоИсточника

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				// Характеристика по Владельцу, Наименованию и Артикулу
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию 
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Доля стоимости
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ДоляСтоимости, СтрокаТаблицыФормы.ДоляСтоимости_ВходящиеДанные, 1);
		
		// Количество продукции
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.КоличествоПродукции, СтрокаТаблицыФормы.КоличествоПродукции_ВходящиеДанные, 1);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

// АПК:299-вкл

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
	
	Если НоменклатураЗаполнена Тогда			
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = Не СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы 
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			И СтрокаТаблицыФормы.Количество <> 0;
		СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
		
	Иначе
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяОбработка

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
// 	Массив - реквизиты, которые разрешается редактировать в обработке группового изменения.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("Владелец");
	РедактируемыеРеквизиты.Добавить("Характеристика");
	РедактируемыеРеквизиты.Добавить("Комментарий");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти 

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Комплектация";
	КомандаПечати.Представление = НСтр("ru = 'Комплектация'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Комплектация");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацииНоменклатуры_Комплектация";
		ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.КомплектацииНоменклатуры.ПФ_MXL_Комплектация";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Комплектация'");
		
		СформироватьКомплектацию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

Процедура СформироватьКомплектацию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ДанныеПечати = Новый Структура;
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаПечатьКомплектации();
	ТаблицаКомплектаций = Запрос.Выполнить().Выгрузить();
	
	ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		ЗапросОрганизация = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИмяПредопределенныхДанных = ""ОсновнаяОрганизация""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации");
		Выборка = ЗапросОрганизация.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Шапка Из ТаблицаКомплектаций Цикл
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ОрганизацияПоУмолчанию, ТекущаяДатаСеанса());
		ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		
		Если Шапка.Состав.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Шапка.Состав.Сортировать("НомерСтроки");
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru='Комплектация ""%1""'"), Шапка.Наименование);
		
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		
		ПараметрыНоменклатуры = Новый Структура;
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Шапка.Номенклатура);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Шапка.Характеристика);
		ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", Шапка.Артикул);
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
		
		ВывестиЗаголовок(ТабличныйДокумент, Макет, ДанныеПечати);
		
		ВывестиТаблицу(Шапка.Состав, ТабличныйДокумент, Макет, "Состав");
		ВывестиПодписи(ТабличныйДокумент, Макет);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.ОтображатьГруппировки = Истина;
	
КонецПроцедуры

Функция ТекстЗапросаПечатьКомплектации()
		
	Возврат "ВЫБРАТЬ
	        |	КомплектацииНоменклатуры.Ссылка КАК Ссылка,
	        |	КомплектацииНоменклатуры.Наименование КАК Наименование,
	        |	КомплектацииНоменклатуры.Владелец КАК Номенклатура,
	        |	КомплектацииНоменклатуры.Характеристика КАК Характеристика,
			|	КомплектацииНоменклатуры.Владелец.Штрихкод КАК Штрихкод,
	        |	КомплектацииНоменклатуры.Владелец.Артикул КАК Артикул,
	        |	КомплектацииНоменклатуры.Состав.(
	        |		НомерСтроки КАК НомерСтроки,
	        |		Номенклатура КАК Номенклатура,
	        |		Номенклатура.Артикул КАК Артикул,
			|		Номенклатура.Штрихкод КАК ШтрихКод,
	        |		Характеристика КАК Характеристика,
	        |		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	        |		ВЫБОР
	        |			КОГДА ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	        |				ТОГДА ЕдиницаИзмерения.Коэффициент
	        |			ИНАЧЕ 1
	        |		КОНЕЦ КАК Коэффициент,
	        |		Количество КАК Количество,
	        |		КоличествоПродукции КАК КоличествоПродукции,
	        |		Описание КАК Описание
	        |	) КАК Состав
	        |ИЗ
	        |	Справочник.КомплектацииНоменклатуры КАК КомплектацииНоменклатуры
	        |ГДЕ
	        |	КомплектацииНоменклатуры.Ссылка В(&МассивОбъектов)";
	
КонецФункции

Процедура ВывестиЗаголовок(ТабличныйДокумент, Макет, ДанныеПечати)
		
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьМакета);
 
КонецПроцедуры

Процедура ВывестиТаблицу(ТаблицаДанных, ТабличныйДокумент, Макет, ТипОбласти)
		
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПродукцииЗаполнено = Ложь;
	ВывестиШапку(ТаблицаДанных, ТабличныйДокумент, Макет, "Шапка" + ТипОбласти, КоличествоПродукцииЗаполнено);
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для каждого СтрокаСостава Из ТаблицаДанных Цикл
		ВывестиСтроку(СтрокаСостава, ТабличныйДокумент, Макет, "Строка" + ТипОбласти, КоличествоПродукцииЗаполнено);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ВывестиКонецТаблицы(ТабличныйДокумент, Макет, КоличествоПродукцииЗаполнено);
		
КонецПроцедуры

Процедура ВывестиШапку(ТаблицаДанных, ТабличныйДокумент, Макет, ИмяОбласти, КоличествоПродукцииЗаполнено)
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если СтрокаТаблицы.КоличествоПродукции <> 1 И СтрокаТаблицы.КоличествоПродукции <> 0 Тогда
			КоличествоПродукцииЗаполнено = Истина;
		КонецЕсли; 
	КонецЦикла; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|Основа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КоличествоПродукции");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЕсли; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КонецСтроки");
	ТабличныйДокумент.Присоединить(ОбластьМакета);
			
КонецПроцедуры

Процедура ВывестиСтроку(СтрокаТаблицы, ТабличныйДокумент, Макет, ИмяОбласти, КоличествоПродукцииЗаполнено)
	
	ДанныеПечати = Новый Структура;
	ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиСостав(СтрокаТаблицы, ДанныеПечати);
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|Основа");
	ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КоличествоПродукции");
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЕсли; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КонецСтроки");
	ТабличныйДокумент.Присоединить(ОбластьМакета);
	
КонецПроцедуры

Процедура ВывестиКонецТаблицы(ТабличныйДокумент, Макет, КоличествоПродукцииЗаполнено)
		
	ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы|Основа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы|КоличествоПродукции");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодписи(ТабличныйДокумент, Макет)
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиСостав(СтрокаТабличнойЧасти, ДанныеПечати)
	
	ДанныеПечати.Очистить();
	ПараметрыНоменклатуры = Новый Структура;
	
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	
	ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));

КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#КонецЕсли
