
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает состав сегмента
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментКонтрагентов, Массив	 - сегменты для которых необходимо получить состав
//  СпособДобавления - ПеречисленияСсылка.СпособыДобавленияВСегмент - способ добавления в сегмент (вручную, по правилам)
// Возвращаемое значение:
//  Массив - массив контрагентов, входящих в сегмент
//
Функция ПолучитьСоставСегмента(Сегмент, СпособДобавления = Неопределено) Экспорт
	
	ОтборПоСегменту = Новый Массив;
	Если ТипЗнч(Сегмент) <> Тип("Массив") Тогда
		ОтборПоСегменту.Добавить(Сегмент);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСегменту, Сегмент);
	КонецЕсли;
	
	МассивКонтрагентов = 
		РегистрыСведений.СоставСегментаКонтрагентов.СоставВыбранногоСегмента(ОтборПоСегменту, СпособДобавления);
	
	Возврат МассивКонтрагентов;
	
КонецФункции

// Процедура обновляет состав сегмента по заданным правилам
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментКонтрагентов	 - сегмент для которого необходимо обновить состав
//  СКД - СхемаКомпоновкиДанных - схема, по правилам который будет получен состав сегмента
//
Процедура ОбновитьСоставСегментаПоПравилам(Сегмент, СКД = Неопределено) Экспорт
	
	РегистрыСведений.СоставСегментаКонтрагентов.ОбновитьСоставВыбранногоСегментаПоПравилам(Сегмент, СКД);
		
КонецПроцедуры

// Процедура добавляет выбранных вручную контрагентов в сегмент 
//
// Параметры:
//  Сегмент	 - СправочникСсылка.Сегмент	 - сегмент, который нужно обновить
//  СоставСегмента - Массив - контрагенты, которых нужно добавить в сегмент
//
Процедура ОбновитьСоставСегментаВручную(Сегмент, СоставСегмента) Экспорт
	
	РегистрыСведений.СоставСегментаКонтрагентов.ОбновитьСоставВыбранногоСегментаВручную(Сегмент, СоставСегмента);
		
КонецПроцедуры

// Функция возвращает локализованное представление параметра "город"
//
// Возвращаемое значение:
//  Строка - представление параметра Город
//
Функция ЗначениеПараметраГород() Экспорт
	Возврат НСтр("ru = '.Город'");
КонецФункции

// Функция возвращает локализованное представление параметра "страна"
//
// Возвращаемое значение:
//  Строка - представление параметра Страна
//
Функция ЗначениеПараметраСтрана() Экспорт
	Возврат НСтр("ru = '.Страна'");
КонецФункции

// Функция возвращает локализованное представление параметра "регион"
//
// Возвращаемое значение:
//  Строка - представление параметра Регион
//
Функция ЗначениеПараметраРегион() Экспорт	
	Возврат НСтр("ru = '.Регион'");
КонецФункции

#Область ОбновлениеИнформационнойБазыУНФ

// Функция возвращает поле компоновки данных, которое соответствует правилу сегмента
//
// Параметры:
//  ИмяПравила	 - Строка	 - имя правила сегмента
// 
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле компоновки данных СКД
//
Функция ПолеКомпоновкиДанныхПоПравилу(ИмяПравила) Экспорт
	
	СоответствиеПравил = Новый Соответствие;
	
	#Область РеквизитыКонтрагента
	
	ДобавитьРеквизитыКонтрагентаВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
		
	#Область События
	
	ДобавитьРеквизитыСобытийВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	#Область ЗаказыПокупателей
	
	ДобавитьРеквизитыЗаказаВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	#Область СчетаНаОплату
	
	ДобавитьРеквизитыСчетаВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	#Область ПродажиНоменклатура
	
	ДобавитьРеквизитыНоменклатурыВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	#Область ПродажиВыручка
	
	ДобавитьРеквизитыПродажВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	#Область Задолженность
	
	ДобавитьРеквизитыДолгаВСоответствие(СоответствиеПравил);
	
	#КонецОбласти
	
	Возврат СоответствиеПравил[ИмяПравила];
	
КонецФункции

// Функция возвращает поле компоновки данных, которое соответствует правилу сегмента для дополнительных реквизитов
//  или контактной информации
//
// Параметры:
//  Правило		 - ВыборкаИзРезультатаЗапроса	 - выборка, содержащая параметры правила
//  Настройки	 - КомпоновщикНастроек			 - настройки СКД
// 
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле компоновки данных СКД
//
Функция ПолеКомпоновкиПоДопРеквизитуИлиКИ(Правило, Настройки) Экспорт
	
	ПолеДопРеквизита = СтрШаблон("Контрагент.%1", ИмяПравилаОтбора(Правило));
	
	Для Каждого ГруппаПараметров Из Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		
		Если Строка(ГруппаПараметров.Поле) <> "СлужебныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементГруппы Из ГруппаПараметров.Элементы Цикл
			
			Если Строка(ЭлементГруппы.Поле) <> "СлужебныеРеквизиты.Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого РеквизитГруппы Из ЭлементГруппы.Элементы Цикл
				
				Если РеквизитГруппы.Заголовок <> ПолеДопРеквизита 
					И РеквизитГруппы.ТипЗначения <> ТипЗнч(Правило.КлючДинамическогоПравила) Тогда
					Продолжить;
				КонецЕсли;
				
				Возврат РеквизитГруппы.Поле; 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Правило.КлючДинамическогоПравила;
	
КонецФункции

// Процедура заполняет справочник сегментов по умолчанию
//
Процедура ЗаполнитьПоставляемыеСегменты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сегменты.Ссылка
		|ИЗ
		|	Справочник.СегментыКонтрагентов КАК Сегменты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Новые контрагенты
	Сегмент = Справочники.СегментыКонтрагентов.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Новые за неделю'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
	
	СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
	СКД.НастройкиПоУмолчанию.Отбор.Элементы.Очистить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Реквизиты.ДатаСоздания");	
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	НовыйЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлойНедели);
	РаботаССегментами.ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресСКД);
	Сегмент.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСКД));
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
	// 2. Давно не связывались
	Сегмент = Справочники.СегментыКонтрагентов.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Не связывались больше месяца'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
		
	СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
	СКД.НастройкиПоУмолчанию.Отбор.Элементы.Очистить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("События.ДатаПоследнегоСобытия");	
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	НовыйЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца);
	РаботаССегментами.ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресСКД);
	Сегмент.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСКД));
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
	// 3. Есть заказы за последний месяц
	Сегмент = Справочники.СегментыКонтрагентов.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Есть заказы за последний месяц'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
	
	НастройкаПравила = Новый Структура;
	НастройкаПравила.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	НастройкаПравила.Вставить("Значение",		1);
	
	СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
	СКД.НастройкиПоУмолчанию.Отбор.Элементы.Очистить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.КоличествоЗаказов");	
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 1;
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ЗаказыПокупателей_Период");	
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = Новый СтандартныйПериод(ВариантСтандартногоПериода.Месяц);
	
	РаботаССегментами.ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресСКД);
	Сегмент.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСКД));
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыДолгаВСоответствие(СоответствиеПравил)
	
	ПолеСуммаДолга 				= Новый ПолеКомпоновкиДанных("Долги.СуммаДолга");
	ПолеСрокПросрочки 			= Новый ПолеКомпоновкиДанных("Долги.СрокПросрочки");
	ПолеСуммаДолгаПоставщика 	= Новый ПолеКомпоновкиДанных("Долги.СуммаДолгаПоставщика");
	ПолеСрокПросрочкиПоставщика = Новый ПолеКомпоновкиДанных("Долги.СрокПросрочкиПоставщика");
	
	СоответствиеПравил.Вставить("ЗадолженностьПокупателяСумма",	ПолеСуммаДолга);
	СоответствиеПравил.Вставить("ЗадолженностьПокупателяСрок", 	ПолеСрокПросрочки);
	СоответствиеПравил.Вставить("ЗадолженностьПоставщикуСумма", ПолеСуммаДолгаПоставщика);	
	СоответствиеПравил.Вставить("ЗадолженностьПоставщикуСрок", 	ПолеСрокПросрочкиПоставщика);
		
КонецПроцедуры

Процедура ДобавитьРеквизитыПродажВСоответствие(СоответствиеПравил)
	
	ПолеВыручка 		= Новый ПолеКомпоновкиДанных("ПродажиВыручка.Выручка");
	ПолеВаловаяПрибыль 	= Новый ПолеКомпоновкиДанных("ПродажиВыручка.ВаловаяПрибыль");
	ПолеПериодВыручки 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.ПродажиВыручка_Период");
	
	СоответствиеПравил.Вставить("ПродажиВыручкаВыручка",		ПолеВыручка);
	СоответствиеПравил.Вставить("ПродажиВыручкаВаловаяПрибыль", ПолеВаловаяПрибыль);
	СоответствиеПравил.Вставить("ПродажиВыручкаПериод", 		ПолеПериодВыручки);
		
КонецПроцедуры

Процедура ДобавитьРеквизитыНоменклатурыВСоответствие(СоответствиеПравил)
	
	ПолеНоменклатура 		= Новый ПолеКомпоновкиДанных("ПродажиНоменклатура.Номенклатура");
	ПолеГруппаНоменклатуры 	= Новый ПолеКомпоновкиДанных("ПродажиНоменклатура.ГруппаНоменклатуры");
	ПолеКатегория 			= Новый ПолеКомпоновкиДанных("ПродажиНоменклатура.КатегорияНоменклатуры");
	ПолеПериодНоменклатуры 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.ПродажиНоменклатура_Период");
	
	СоответствиеПравил.Вставить("ПродажиНоменклатураНоменклатура", 			ПолеНоменклатура);
	СоответствиеПравил.Вставить("ПродажиНоменклатураГруппаНоменклатуры", 	ПолеГруппаНоменклатуры);
	СоответствиеПравил.Вставить("ПродажиНоменклатураКатегорияНоменклатуры", ПолеКатегория);
	СоответствиеПравил.Вставить("ПродажиНоменклатураПериод", 				ПолеПериодНоменклатуры);	

КонецПроцедуры

Процедура ДобавитьРеквизитыСчетаВСоответствие(СоответствиеПравил)
	
	ПолеДатаПоследнего 	= Новый ПолеКомпоновкиДанных("СчетаНаОплату.ДатаПоследнегоСчета");
	ПолеСчетаКоличество = Новый ПолеКомпоновкиДанных("СчетаНаОплату.КоличествоСчетов");
	ПолеСчетаПериод 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.СчетаНаОплату_Период");
	
	СоответствиеПравил.Вставить("СчетаНаОплатуДатаПоследнего", 		ПолеДатаПоследнего);
	СоответствиеПравил.Вставить("СчетаНаОплатуКоличество",			ПолеСчетаКоличество);
	СоответствиеПравил.Вставить("СчетаНаОплатуКоличествоПериод", 	ПолеСчетаПериод);

КонецПроцедуры

Процедура ДобавитьРеквизитыЗаказаВСоответствие(СоответствиеПравил)
	
	ПолеДатаПоследнего 			= Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.ДатаПоследнегоЗаказа");
	ПолеПериодЗаказа 			= Новый ПолеКомпоновкиДанных("ПараметрыДанных.ЗаказыПокупателей_Период");
	ПолеВариантЗавершения 		= Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.ВариантЗавершения");
	ПолеКоличествоЗаказов 		= Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.КоличествоЗаказов");
	ПолеСостоянияЗаказов 		= Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.СостояниеЗаказа");
	ПолеСостояниеЗаказНаряда 	= Новый ПолеКомпоновкиДанных("ЗаказыПокупателей.СостояниеЗаказНаряда");
	
	СоответствиеПравил.Вставить("ЗаказыПокупателейДатаПоследнего", 		ПолеДатаПоследнего);
	СоответствиеПравил.Вставить("ЗаказыПокупателейКоличествоПериод", 	ПолеПериодЗаказа);
	СоответствиеПравил.Вставить("ЗаказыПокупателейВариантЗавершения", 	ПолеВариантЗавершения);
	СоответствиеПравил.Вставить("ЗаказыПокупателейКоличество", 			ПолеКоличествоЗаказов);
	СоответствиеПравил.Вставить("ЗаказыПокупателейСостояниеЗаказа", 	ПолеСостоянияЗаказов);
	СоответствиеПравил.Вставить("ЗаказНарядыСостояниеЗаказа", 			ПолеСостояниеЗаказНаряда);

КонецПроцедуры

Процедура ДобавитьРеквизитыСобытийВСоответствие(СоответствиеПравил)
	
	ПолеДатаПоследнего 		= Новый ПолеКомпоновкиДанных("События.ДатаПоследнегоСобытия");
	ПолеПериодСобытия 		= Новый ПолеКомпоновкиДанных("ПараметрыДанных.События_Период");
	ПолеКоличествоСобытий 	= Новый ПолеКомпоновкиДанных("События.КоличествоСобытий");
	ПолеСостояниеСобытия 	= Новый ПолеКомпоновкиДанных("События.Состояние");
	ПолеТипСобытия 			= Новый ПолеКомпоновкиДанных("События.ТипСобытия");
	
	СоответствиеПравил.Вставить("СобытияДатаПоследнего", 	ПолеДатаПоследнего);
	СоответствиеПравил.Вставить("СобытияКоличествоПериод", 	ПолеПериодСобытия);
	СоответствиеПравил.Вставить("СобытияКоличество", 		ПолеКоличествоСобытий);
	СоответствиеПравил.Вставить("СобытияСостояние", 		ПолеСостояниеСобытия);
	СоответствиеПравил.Вставить("СобытияТипСобытия", 		ПолеТипСобытия);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыКонтрагентаВСоответствие(СоответствиеПравил)
	
	ПолеТег 				= Новый ПолеКомпоновкиДанных("Реквизиты.Тег");
	ПолеВид 				= Новый ПолеКомпоновкиДанных("Реквизиты.Вид");
	ПолеПокупатель 			= Новый ПолеКомпоновкиДанных("Реквизиты.Покупатель");
	ПолеПоставщик 			= Новый ПолеКомпоновкиДанных("Реквизиты.Поставщик");
	ПолеПрочиеОтношения 	= Новый ПолеКомпоновкиДанных("Реквизиты.ПрочиеОтношения");
	ПолеГруппа 				= Новый ПолеКомпоновкиДанных("Реквизиты.ВГруппе");
	ПолеДатаСоздания 		= Новый ПолеКомпоновкиДанных("Реквизиты.ДатаСоздания");
	ПолеКомментария 		= Новый ПолеКомпоновкиДанных("Реквизиты.Комментарий");
	ПолеОтветственный 		= Новый ПолеКомпоновкиДанных("Реквизиты.Ответственный");
	ПолеИсточникПривлечения = Новый ПолеКомпоновкиДанных("Реквизиты.ИсточникПривлечения");
	
	СоответствиеПравил.Вставить("Тег", 				ПолеТег);
	СоответствиеПравил.Вставить("ВидКонтрагента",	ПолеВид);
	СоответствиеПравил.Вставить("Покупатель", 		ПолеПокупатель);
	СоответствиеПравил.Вставить("Поставщик", 		ПолеПоставщик);
	СоответствиеПравил.Вставить("ПрочиеОтношения", 	ПолеПрочиеОтношения);
	СоответствиеПравил.Вставить("Группа", 			ПолеГруппа);
	СоответствиеПравил.Вставить("ДатаСоздания", 	ПолеДатаСоздания);
	СоответствиеПравил.Вставить("Комментарий", 		ПолеКомментария);
	СоответствиеПравил.Вставить("Ответственный", 	ПолеОтветственный);
	СоответствиеПравил.Вставить("ИсточникПривлеченияПокупателя", ПолеИсточникПривлечения);
	
КонецПроцедуры

Функция ИмяПравилаОтбора(Правило)
	
	СоответствиеПравил = Новый Соответствие;
	ВидКИПредставление = Строка(Правило.КлючДинамическогоПравила);
	
	ЗначениеСтрана 	= Справочники.СегментыКонтрагентов.ЗначениеПараметраСтрана();
	ВидКИСтрана 	= СтрШаблон("%1%2", Правило.КлючДинамическогоПравила, ЗначениеСтрана);
	
	ЗначениеГород 	= Справочники.СегментыКонтрагентов.ЗначениеПараметраГород();
	ВидКИГород 		= СтрШаблон("%1%2", Правило.КлючДинамическогоПравила, ЗначениеГород);
	
	ЗначениеРегион 	= Справочники.СегментыКонтрагентов.ЗначениеПараметраРегион();
	ВидКИРегион 	= СтрШаблон("%1%2", Правило.КлючДинамическогоПравила, ЗначениеРегион);
	
	СоответствиеПравил.Вставить("ВидКонтактнойИнформацииПредставление", ВидКИПредставление);
	СоответствиеПравил.Вставить("ВидКонтактнойИнформацииСтрана", 		ВидКИСтрана);
	СоответствиеПравил.Вставить("ВидКонтактнойИнформацииГород", 		ВидКИГород);
	СоответствиеПравил.Вставить("ВидКонтактнойИнформацииРегион", 		ВидКИРегион);
		
	СоответствиеПравил.Вставить("ДопРеквизит", Правило.КлючДинамическогоПравила.Наименование);
	
	Возврат СоответствиеПравил[Правило.Имя];
	
КонецФункции

#КонецОбласти

#КонецЕсли 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Наименование");
	Поля.Добавить("Обновляемый");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("ЭтоГруппа");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеСегментовКонтрагентов.Сегмент КАК Сегмент,
	|	ФормированиеСегментовКонтрагентов.ДатаПоследнегоФормирования КАК ДатаПоследнегоФормирования
	|ИЗ
	|	РегистрСведений.ФормированиеСегментовКонтрагентов КАК ФормированиеСегментовКонтрагентов
	|ГДЕ
	|	ФормированиеСегментовКонтрагентов.Сегмент = &Сегмент";
	
	Запрос.УстановитьПараметр("Сегмент", Данные.Ссылка); 
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаОбновления = Дата(1, 1, 1, 0, 0, 0);
	
	Пока Выборка.Следующий() Цикл
		ДатаОбновления = Выборка.ДатаПоследнегоФормирования;	
	КонецЦикла;
	
	Состояние = "";
	
	ДатаСтрокой = "";
	Если НачалоДня(ДатаОбновления) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаСтрокой = СтрШаблон(НСтр("ru = 'сегодня в %1'"), Формат(ДатаОбновления, "ДФ = ЧЧ:мм"));
	Иначе
		ДатаСтрокой = Формат(ДатаОбновления, "ДФ = дд.ММ.гггг ЧЧ:мм");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОбновления) Тогда
		Состояние = СтрШаблон(НСтр("ru = '(сформирован %1)'"), ДатаСтрокой);
	Иначе
		Состояние = НСтр("ru='(не сформирован)'");
	КонецЕсли;
			
	Представление = СтрШаблон(НСтр("ru = '%1%2%3'"), Данные.Наименование, Символы.НПП, Состояние);
	
КонецПроцедуры

#КонецОбласти