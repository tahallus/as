
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СКД = Объект.Ссылка.СхемаКомпоновкиДанных.Получить();
		Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
			СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИмяШаблонаСКД) Тогда
			ТекущийШаблонСхемыКомпоновкиДанных = Объект.ИмяШаблонаСКД;
		Иначе
			ТекущийШаблонСхемыКомпоновкиДанных = 
				Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("Основная").Значение;
		КонецЕсли;	
	Иначе
		СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
		ТекущийШаблонСхемыКомпоновкиДанных = 
			Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("Основная").Значение;
	КонецЕсли;
	
	Если ТекущийШаблонСхемыКомпоновкиДанных = "Основная" Тогда

		НоваяСКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
		РаботаССегментами.ОчиститьНастройкиКомпоновкиДанных(НоваяСКД.НастройкиПоУмолчанию);
		РаботаССегментами.СкопироватьНастройкиКомпоновкиДанных(НоваяСКД.НастройкиПоУмолчанию, СКД.НастройкиПоУмолчанию);
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД);
		
		СКД = НоваяСКД;
		
	КонецЕсли;
	
	АдресТекущейСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);	
	// Исходная СКД заменяется редактируемой СКД
	РаботаССегментами.СкопироватьСхемуКомпоновкиДанных(АдресРедактируемойСхемыКомпоновкиДанных, АдресТекущейСКД);
	
	// Инициализирование компоновщика настроек редактируемой СКД
	ЭтоСозданиеСегмента = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	РаботаССегментами.ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, 
		АдресРедактируемойСхемыКомпоновкиДанных,
		ЭтоСозданиеСегмента);
		
	ЗаполнитьПоляТаблицыОтбора();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		ЗаполнитьСвоихКонтрагентов();
		ЗаполнитьСоставПоПравилам();
	КонецЕсли;
	
	РазрешеноРедактированиеСегмента = РаботаССегментами.РазрешеноРедактированиеСегментаКонтрагентов(Объект.Ссылка);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаССегментами.ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, 
		АдресРедактируемойСхемыКомпоновкиДанных, АдресТекущейСКД);
		
	ТекущийОбъект.СхемаКомпоновкиДанных =
		Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресТекущейСКД));
		
	ТекущийОбъект.ИмяШаблонаСКД = ТекущийШаблонСхемыКомпоновкиДанных;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаКонтрагентов = РеквизитФормыВЗначение("СвоиКонтрагенты", Тип("ТаблицаЗначений"));
	МассивКонтрагентов 	= ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент");
	
	Справочники.СегментыКонтрагентов.ОбновитьСоставСегментаВручную(Объект.Ссылка, МассивКонтрагентов);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Сегмент", Объект.Ссылка);
	ПараметрОповещения.Вставить("Наименование", Объект.Наименование);
	
	Оповестить("СегментКонтрагентов_ПослеЗаписи", ПараметрОповещения, Объект.Ссылка);
	
	РезультатФоновогоЗадания = ФоновоеЗаданиеЗапустить();
	
	Если РезультатФоновогоЗадания = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания);
	ИначеЕсли РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда 
		ОперацииПослеФормирования();
	Иначе
		Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сегмент формируется...'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СвоиКонтрагентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Для Каждого ВыбранныйКонтрагент Из ВыбранноеЗначение Цикл
		НовыйКонтрагент = СвоиКонтрагенты.Добавить();
		НовыйКонтрагент.Контрагент = ВыбранныйКонтрагент;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвоиКонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СвоиКонтрагентыПослеУдаления(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ РазрешеноРедактированиеСегмента Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборСервер(Элемент.ТекущиеДанные.Значение, Элемент.ТекущиеДанные.ЭтоПараметр,
		Элемент.ТекущиеДанные.ТипЗначенияПоля);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> ТекущийШаблонСхемыКомпоновкиДанных Тогда
		
		ТекстВопроса = НСтр("ru='Текущие настройки будут потеряны. Продолжить?'");
		
		Если ВыбранноеЗначение = "Произвольная" Тогда
			ТекстМассив = Новый Массив;
			ТекстМассив.Добавить(НСтр("ru = 'Схема будет загружена из файла.'"));
			ТекстМассив.Добавить(ТекстВопроса);
			ТекстВопроса = СтрСоединить(ТекстМассив, Символы.НПП);
		КонецЕсли;
		
		ИмяПроцедурыЗавершения = "ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбораЗавершение";
		ЗначениеШаблона = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения(ИмяПроцедурыЗавершения, ЭтотОбъект, ЗначениеШаблона);
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, 
	СтандартнаяОбработка, Строка, Поле)
	
	Если НЕ РазрешеноРедактированиеСегмента Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого ДоступноеПравило Из ПараметрыПеретаскивания.Значение Цикл
			Если ДоступноеПравило.ЭтоГруппа Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, 
	СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДоступноеПравило Из ПараметрыПеретаскивания.Значение Цикл
		УстановитьОтборСервер(ДоступноеПравило.Значение, ДоступноеПравило.ЭтоПараметр, ДоступноеПравило.ТипЗначенияПоля);
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, 
	СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0  Тогда
		
		СтандартнаяОбработка = Ложь;
		Для Каждого ДоступноеПравило Из ПараметрыПеретаскивания.Значение Цикл
			Если СтрНайти(Строка(ДоступноеПравило.ЛевоеЗначение), "ПараметрыДанных") > 0 Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Параметр не может участвовать в группе'"));
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриАктивизацииСтроки(Элемент)
		
	ЭтоПараметр = СтрНайти(Строка(Элемент.ТекущиеДанные.ЛевоеЗначение), "ПараметрыДанных") > 0;
	Элементы.КомпоновщикНастроекНастройкиОтборКонтекстноеМенюСгруппироватьЭлементыОтбора.Видимость = НЕ ЭтоПараметр;
	Элементы.КомпоновщикНастроекНастройкиОтборКонтекстноеМенюРазгруппировать.Видимость = НЕ ЭтоПараметр;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьКонтрагентовВручную(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.СвоиКонтрагенты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравил(Команда)
	Элементы.СтраницыПравилаСегмента.ТекущаяСтраница = Элементы.СтраницаПравилаОтбора;
	Элементы.ВыборПравилАктивно.Видимость = Истина;
	Элементы.ВыборПравил.Видимость = Ложь;
	Элементы.ФормированиеИПросмотрАктивно.Видимость = Ложь;
	Элементы.ФормированиеИПросмотрСостава.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравилАктивноНажатие(Элемент)
	Элементы.СтраницыПравилаСегмента.ТекущаяСтраница = Элементы.СтраницаПравилаОтбора;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСегмент(Команда)
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеИПросмотрСостава(Команда)
	
	Элементы.СтраницыПравилаСегмента.ТекущаяСтраница = Элементы.СтраницаФормированиеСостава;	
	Элементы.ВыборПравилАктивно.Видимость = Ложь;
	Элементы.ВыборПравил.Видимость = Истина;
	Элементы.ФормированиеИПросмотрАктивно.Видимость = Истина;
	Элементы.ФормированиеИПросмотрСостава.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСКД(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаВыборФайла", ЭтотОбъект);

	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	
	ПараметрыЗагрузки.Диалог.Заголовок 		= НСтр("ru = 'Выбор схемы компоновки данных'");
	ПараметрыЗагрузки.Диалог.Фильтр 		= НСтр("ru = 'Схема компоновки данных (*.xml)|*.xml'");
	ПараметрыЗагрузки.ИдентификаторФормы 	= УникальныйИдентификатор;	
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежимРедактирования(Команда)
	Элементы.ФормаРасширенныйРежимРедактирования.Пометка = НЕ Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	Объект.РасширенныйРежимРедактирования = Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПоказатьОшибкиФормирования(Знач ДанныеОшибки)
	
	Если ТипЗнч(ДанныеОшибки) = Тип("Структура") Тогда
		КраткоеПредставлениеОшибки = ДанныеОшибки.КраткоеПредставлениеОшибки;
		ПодробноеПредставлениеОшибки = ДанныеОшибки.ПодробноеПредставлениеОшибки;
	Иначе
		КраткоеПредставлениеОшибки = ДанныеОшибки;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	ИмяСобытия = НСтр("ru = 'Формирование сегмента контрагентов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийШаблонСхемыКомпоновкиДанных = ДополнительныеПараметры.ВыбранноеЗначение;
	
	Если ТекущийШаблонСхемыКомпоновкиДанных = "Произвольная" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаВыборФайла", ЭтотОбъект);
		
		ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		
		ПараметрыЗагрузки.Диалог.Заголовок 		= НСтр("ru = 'Выбор схемы компоновки данных'");
		ПараметрыЗагрузки.Диалог.Фильтр 		= НСтр("ru = 'Схема компоновки данных (*.xml)|*.xml'");
		ПараметрыЗагрузки.ИдентификаторФормы 	= УникальныйИдентификатор;	
		
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
	Иначе
		ИзменитьСхемуНаОсновную();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСервер(ПолеОтбора, ЭтоПараметр, ТипЗначенияПоля)
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;	
	НовыйЭлементОтбора.Использование = Истина;
	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	Иначе
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	ОперацииПослеФормирования();
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	
	Попытка
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;

		ПараметрыФормированияСегмента = Новый Структура;
		ПараметрыФормированияСегмента.Вставить("Сегмент", Объект.Ссылка);	
		
		РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
			"РаботаССегментами.СформироватьСоставСегментаВФоне", ПараметрыФормированияСегмента,
			ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ОперацииПослеФормирования() 
	
	РасчетКоличестваИУправлениеФормой();
	ТекстШаблона = НСтр("ru = 'Сегмент успешно сформирован. Подобрано по правилам: %1, добавлено вручную: %2'");
	СтрокаШаблон = СтрШаблон(ТекстШаблона, КоличествоКонтрагентовПоПравилам, КоличествоКонтрагентовВручную);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаШаблон);	

КонецПроцедуры

&НаСервере
Процедура РасчетКоличестваИУправлениеФормой()
	РассчитатьКоличествоКонтрагентовВСегменте();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоКонтрагентовВСегменте()
	
	КоличествоКонтрагентовВручную = СвоиКонтрагенты.Количество();
	СоставКонтрагентовПоПравилам.Очистить();
	КонтрагентыПоПравилам = Справочники.СегментыКонтрагентов.ПолучитьСоставСегмента(Объект.Ссылка,
		Перечисления.СпособыДобавленияВСегмент.ПоПравилам);
		
	Для Каждого КонтрагентСегмента Из КонтрагентыПоПравилам Цикл
		НоваяСтрока = СоставКонтрагентовПоПравилам.Добавить();
		НоваяСтрока.Контрагент = КонтрагентСегмента;	
	КонецЦикла;
	
	КоличествоКонтрагентовПоПравилам = СоставКонтрагентовПоПравилам.Количество();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляТаблицыОтбора()
	
	Для Каждого ПолеОтбора Из КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		
		Если Строка(ПолеОтбора.Поле) = "СлужебныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка(ПолеОтбора.Поле) = "ПараметрыДанных" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПервыйУровень = ДоступныеПравила.ПолучитьЭлементы();
		НоваяГруппаПравил = СтрокиПервыйУровень.Добавить();
		НоваяГруппаПравил.Значение = ПолеОтбора.Поле;
		НоваяГруппаПравил.Представление = ПолеОтбора.Заголовок;
		НоваяГруппаПравил.ЭтоГруппа = Истина;
		НоваяГруппаПравил.Картинка = 2;
		
		СтрокиВторойУровень = НоваяГруппаПравил.ПолучитьЭлементы();
		ДобавитьПоляПараметровДанных(СтрокиВторойУровень, НоваяГруппаПравил);

		Для Каждого ПравилоОтбора Из ПолеОтбора.Элементы Цикл
			НовоеПравило = СтрокиВторойУровень.Добавить();
			НовоеПравило.Значение = ПравилоОтбора.Поле;
			НовоеПравило.Представление = ПравилоОтбора.Заголовок;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5;
			НовоеПравило.ТипЗначенияПоля = ПравилоОтбора.ТипЗначения;
		КонецЦикла;
		
		Если Строка(ПолеОтбора.Поле) = "Реквизиты" Тогда
			ДобавитьДополнительныеРеквизиты(СтрокиВторойУровень);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиПервыйУровень = ДоступныеПравила.ПолучитьЭлементы();	
	ГруппаКИ = СтрокиПервыйУровень.Добавить();
	ГруппаКИ.Значение = "Адреса";
	ГруппаКИ.Представление = НСтр("ru = 'Адреса (география)'");
	ГруппаКИ.ЭтоГруппа = Истина;
	ГруппаКИ.Картинка = 2;
	
	ГруппаАдреса = ГруппаКИ.ПолучитьЭлементы();
	ДобавитьПоляКонтактнойИнформации(ГруппаАдреса);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляПараметровДанных(ГруппаДобавления, ГруппаРодитель)
	
	ЭлементыПравилОтбора = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы;
	ПараметрыПравилОтбора = ЭлементыПравилОтбора[ЭлементыПравилОтбора.Количество() - 1];	
	
	Для Каждого Параметр Из ПараметрыПравилОтбора.Элементы Цикл
		
		Если СтрНайти(Строка(Параметр.Поле), Строка(ГруппаРодитель.Значение)) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеПравилоУточнения = ГруппаДобавления.Добавить();
		НовоеПравилоУточнения.Значение = Параметр.Поле;
		ЗаголовокПравила = Прав(Параметр.Заголовок, СтрДлина(Параметр.Заголовок) - СтрНайти(Параметр.Заголовок, "."));
		НовоеПравилоУточнения.Представление = ЗаголовокПравила;
		НовоеПравилоУточнения.ЭтоГруппа = Ложь;
		НовоеПравилоУточнения.Картинка = 5;
		НовоеПравилоУточнения.ЭтоПараметр = Истина;
		НовоеПравилоУточнения.ТипЗначенияПоля = Параметр.ТипЗначения;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты(ГруппаДобавления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.Заголовок,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДополнительныеРеквизитыИСведения.Заголовок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовоеПравило = ГруппаДобавления.Добавить();
		НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(Выборка.Заголовок, Выборка.ТипЗначения, Выборка.Ссылка);
		НовоеПравило.Представление = Выборка.Заголовок;
		НовоеПравило.ЭтоГруппа = Ложь;
		НовоеПравило.Картинка = 5;
		НовоеПравило.ТипЗначенияПоля = Выборка.ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолеОтбораДополнительногоРеквизита(Заголовок, ТипЗначения, Ссылка, УточнениеАдреса = Ложь)
	
	ПолеДопРеквизита = СтрШаблон("Контрагент.%1", Заголовок);
	
	Для Каждого ГруппаПараметров Из КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		
		Если Строка(ГруппаПараметров.Поле) <> "СлужебныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементГруппы Из ГруппаПараметров.Элементы Цикл
			
			Если Строка(ЭлементГруппы.Поле) <> "СлужебныеРеквизиты.Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого РеквизитГруппы Из ЭлементГруппы.Элементы Цикл
				
				Если РеквизитГруппы.Заголовок <> ПолеДопРеквизита 
					И РеквизитГруппы.ТипЗначения <> ТипЗначения Тогда
					Продолжить;
				КонецЕсли;
				
				Возврат РеквизитГруппы.Поле; 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ссылка;
	
КонецФункции

&НаСервере
Процедура ДобавитьПоляКонтактнойИнформации(ГруппаДобавления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			НовоеПравило = ГруппаДобавления.Добавить();
			ПредставлениеКИ = Выборка.Наименование;
			ТипЗнчКИ = ТипЗнч(Выборка.Ссылка);
			НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(ПредставлениеКИ, 
				ТипЗнчКИ, 
				Выборка.Ссылка);
			НовоеПравило.Представление = Выборка.Наименование;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5;
			НовоеПравило.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
			
			ЭлементыАдреса = НовоеПравило.ПолучитьЭлементы();
			
			НовоеПравило = ЭлементыАдреса.Добавить();
			НовоеПравило.Представление = НСтр("ru = 'Страна'");
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5;
			НовоеПравило.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
			ЗначениеКИСтрана = Справочники.СегментыКонтрагентов.ЗначениеПараметраСтрана();
			ПредставлениеКИ = СтрШаблон("%1%2", Выборка.Наименование, ЗначениеКИСтрана);	
			ТипЗнчКИ = ТипЗнч(Выборка.Ссылка);	
			
			НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(ПредставлениеКИ, 
				ТипЗнчКИ, 
				Выборка.Ссылка);

			
			НовоеПравило = ЭлементыАдреса.Добавить();
			НовоеПравило.Представление = НСтр("ru = 'Город'");
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5; 
			НовоеПравило.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
			ЗначениеКИГород = Справочники.СегментыКонтрагентов.ЗначениеПараметраГород();
			ПредставлениеКИ = СтрШаблон("%1%2", Выборка.Наименование, ЗначениеКИГород);	
			ТипЗнчКИ = ТипЗнч(Выборка.Ссылка);	

			НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(ПредставлениеКИ, 
				ТипЗнчКИ, 
				Выборка.Ссылка);
				
			НовоеПравило = ЭлементыАдреса.Добавить();
			НовоеПравило.Представление = НСтр("ru = 'Регион'");
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5;
			НовоеПравило.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
			
			ЗначениеКИРегион = Справочники.СегментыКонтрагентов.ЗначениеПараметраРегион();
			ПредставлениеКИ = СтрШаблон("%1%2", Выборка.Наименование, ЗначениеКИРегион);	
			ТипЗнчКИ = ТипЗнч(Выборка.Ссылка);
			
			НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(ПредставлениеКИ, 
				ТипЗнчКИ, 
				Выборка.Ссылка);
			
		Иначе
			
			НовоеПравило = ГруппаДобавления.Добавить();
			ТипЗнчКИ = ТипЗнч(Выборка.Ссылка);
			НовоеПравило.Значение = ПолеОтбораДополнительногоРеквизита(Выборка.Наименование, 
				ТипЗнчКИ, 
				Выборка.Ссылка);
			НовоеПравило.Представление = Выборка.Наименование;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.Картинка = 5;
			НовоеПравило.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузкаСКДИзФайла

&НаСервере
Процедура ЗагрузитьСхемуИзФайлаНаСервере(ТекстФайла)
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстФайла);
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ИзмененаСхемаКомпоновкиДанных(ЭтотОбъект, СхемаКомпоновкиДанных);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Выполнение операции'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		
		ИзменитьСхемуНаОсновную();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Файл не был выбран. Схема заменена на основную.'"));	
		Возврат;
		
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьСхемуИзФайлаВыборФайлаЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ТекстовыйДокумент.НачатьЧтение(ОповещениеОЗавершении, ВыбранныеФайлы.Имя, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаВыборФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	
	ОчиститьСообщения();
	ЗагрузитьСхемуИзФайлаНаСервере(Текст);

КонецПроцедуры

&НаСервере
Процедура ИзменитьСхемуНаОсновную()
	
	ТекущийШаблонСхемыКомпоновкиДанных = "Основная";
	СКД = Справочники.СегментыКонтрагентов.ПолучитьМакет("СегментыКонтрагентов");
	СКД.НастройкиПоУмолчанию.Отбор.Элементы.Очистить();
	ИзмененаСхемаКомпоновкиДанных(ЭтотОбъект, СКД);
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаСхемаКомпоновкиДанных(Форма, СхемаКомпоновкиДанных)
	
	// Получена схема из конструктора схемы компоновки данных
	Форма.Модифицированность = Истина;
	БылиИзменения = Ложь;
		
	УстановитьСхемуКомпоновкиДанных(Форма.АдресРедактируемойСхемыКомпоновкиДанных, 
		СхемаКомпоновкиДанных, 
		Истина, 
		БылиИзменения);
		
	// Компоновщик настроек инициализируется редактируемой схемой
	РаботаССегментами.ИнициализироватьКомпоновщикНастроек(Форма.КомпоновщикНастроек,
		Форма.АдресРедактируемойСхемыКомпоновкиДанных);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСхемуКомпоновкиДанных(АдресПриемник, АдресСхемаИсточник, ПроверятьНаИзменение = Ложь, БылиИзменения = Ложь)
	
	Если ЭтоАдресВременногоХранилища(АдресСхемаИсточник) Тогда
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемаИсточник);
		
	Иначе
		
		СхемаКомпоновкиДанных = АдресСхемаИсточник;
		
	КонецЕсли;
	
	Если ПроверятьНаИзменение Тогда
		
		БылиИзменения = Ложь;
		
		Если ЭтоАдресВременногоХранилища(АдресПриемник) Тогда
			
			ТекущаяСКД = ПолучитьИзВременногоХранилища(АдресПриемник);
			БылиИзменения = ТипЗнч(ТекущаяСКД) = Тип("СхемаКомпоновкиДанных") 
				И РаботаССегментами.ПолучитьXML(СхемаКомпоновкиДанных) <> РаботаССегментами.ПолучитьXML(ТекущаяСКД);	
		Иначе
			
			БылиИзменения = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресПриемник) Тогда
		
		ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресПриемник);
		
	Иначе
		
		АдресПриемник = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСвоихКонтрагентов()
	
	СвоиКонтрагенты.Очистить();
	СоставКонтрагентов = Справочники.СегментыКонтрагентов.ПолучитьСоставСегмента(Объект.Ссылка, 
		Перечисления.СпособыДобавленияВСегмент.Вручную);
	
	Для Каждого Контрагент Из СоставКонтрагентов Цикл
		НоваяСтрока = СвоиКонтрагенты.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПоПравилам()
	
	СоставКонтрагентовПоПравилам.Очистить();
	СоставКонтрагентов = Справочники.СегментыКонтрагентов.ПолучитьСоставСегмента(Объект.Ссылка, 
		Перечисления.СпособыДобавленияВСегмент.ПоПравилам);
	
	Для Каждого Контрагент Из СоставКонтрагентов Цикл
		НоваяСтрока = СоставКонтрагентовПоПравилам.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ТолькоПросмотр = НЕ РазрешеноРедактированиеСегмента;
	Элементы.НедостаточноПравДляРедактирования.Видимость = НЕ РазрешеноРедактированиеСегмента;
	
	Элементы.ФормаРасширенныйРежимРедактирования.Пометка = Объект.РасширенныйРежимРедактирования;
	
	Элементы.ГруппаРасширенныйРежим.Видимость			= Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	Элементы.ГруппаРасширенныеПоляОтбора.Видимость			= Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	Элементы.ГруппаПользовательскиеПоляОтбора.Видимость		= НЕ Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	Элементы.ГруппаРасширенныйРежимОтборПараметры.Видимость = Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	Элементы.ГруппаОтборПользовательскийРежим.Видимость		= НЕ Элементы.ФормаРасширенныйРежимРедактирования.Пометка;
	
	Если Элементы.ФормаРасширенныйРежимРедактирования.Пометка Тогда
		Элементы.Переместить(Элементы.КомпоновщикНастроекНастройкиОтбор,Элементы.ОтборРасширенныйРежим);	
	Иначе
		Элементы.Переместить(Элементы.КомпоновщикНастроекНастройкиОтбор,Элементы.ГруппаОтборПользовательскийРежим);
	КонецЕсли;
	
	Элементы.ПодборВСегментПоПравилам.Заголовок = ЗаголовокГруппыПодборВСегментПоПравилам();
	Элементы.ПодборВСегментВручную.Заголовок	= ЗаголовокГруппыПодборВручную();
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокГруппыПодборВСегментПоПравилам()
	
	Уточнение = "";
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		Уточнение = НСтр("ru = '(правила не выбраны)'");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФормированиеСегментовКонтрагентов.Сегмент КАК Сегмент,
		|	ФормированиеСегментовКонтрагентов.ДатаПоследнегоФормирования КАК ДатаПоследнегоФормирования
		|ИЗ
		|	РегистрСведений.ФормированиеСегментовКонтрагентов КАК ФормированиеСегментовКонтрагентов
		|ГДЕ
		|	ФормированиеСегментовКонтрагентов.Сегмент = &Сегмент";
		
		Запрос.УстановитьПараметр("Сегмент", Объект.Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		ДатаОбновления = Дата(1, 1, 1, 0, 0, 0);
		
		Пока Выборка.Следующий() Цикл
			ДатаОбновления = Выборка.ДатаПоследнегоФормирования;
		КонецЦикла;
			
		Если ЗначениеЗаполнено(ДатаОбновления) Тогда
			Уточнение = СтрШаблон(НСтр("ru = '(сформирован %1, %2)'"), СтрокаДаты(ДатаОбновления), ПредставлениеОбновления());
		Иначе
			Уточнение = НСтр("ru='(не сформирован)'");
		КонецЕсли;

	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'По правилам %1'"), Уточнение);
	
КонецФункции 

&НаСервере
Функция ЗаголовокГруппыПодборВручную()
	
	ЗаголовокГруппыПодбора = "";
	
	Если СвоиКонтрагенты.Количество() = 0 Тогда
		ЗаголовокГруппыПодбора = НСтр("ru = 'Вручную (0 контрагентов)'");
	Иначе
		ШаблонМножественногоЧисла = НСтр("ru=';%1 контрагент;;%1 контрагента;%1 контрагентов;%1 контрагентов'");
		ЗаголовокГруппыПодбора = СтрШаблон(НСтр("ru = 'Вручную (%1)'"),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонМножественногоЧисла,
			Строка(СвоиКонтрагенты.Количество()), 
			ВидЧисловогоЗначения.Количественное));
	КонецЕсли;
	
	Возврат ЗаголовокГруппыПодбора;
	
КонецФункции

&НаСервере
Функция СтрокаДаты(ДатаОбновления)

	ДатаСтрокой = "";
	Если НачалоДня(ДатаОбновления) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаСтрокой = СтрШаблон(НСтр("ru = 'сегодня в %1'"), Формат(ДатаОбновления,"ДФ = ЧЧ:мм"));
	Иначе
		ДатаСтрокой = Формат(ДатаОбновления, "ДФ = дд.ММ.гггг ЧЧ:мм");
	КонецЕсли;
	
	Возврат ДатаСтрокой;
	
КонецФункции

&НаСервере
Функция ПредставлениеОбновления()
	Если Объект.Обновляемый Тогда
		Возврат НСтр("ru = 'обновляется раз в сутки'");
	Иначе
		Возврат НСтр("ru = 'не обновляется'");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновляемыйПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти
