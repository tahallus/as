#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) И ПравоДоступа("Чтение",
		Метаданные.Справочники.ТарифныеПланыДоговоровОбслуживания) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ТарифныйПланДоговораОбслуживания";
		КомандаПечати.Представление = НСтр("ru='Тарифный план'");
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора,ФормаВыбораСКонтрагентом";
		КомандаПечати.ФункциональныеОпции = "ИспользоватьБиллинг";
		КомандаПечати.Порядок = 1;
	КонецЕсли;
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьКомандыПечати(
	Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента,
	КомандыПечати, "ФормаЭлемента,ФормаСписка", "КомандыПечатиДоговорКонтрагента", 99);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗаполнитьПараметрыЭлектроннойПочты = Истина;
	
	ДополнительныеПараметрыПечати = Неопределено;
	Если ПараметрыПечати.Свойство("УНФДополнительныеПараметрыПечати") Тогда
		ДополнительныеПараметрыПечати = ПараметрыПечати.УНФДополнительныеПараметрыПечати;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТарифныйПланДоговораОбслуживания") Тогда
		ТабличныйДокумент = ПечатьТарифныйПланДоговораОбслуживания(МассивОбъектов, ОбъектыПечати,
			"ТарифныйПланДоговораОбслуживания");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ТарифныйПланДоговораОбслуживания", НСтр("ru='Тарифный план'"), ТабличныйДокумент);
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ШаблонПечатиОфисныхДокументов")
		И ЗначениеЗаполнено(ПараметрыПечати.ШаблонПечатиОфисныхДокументов) Тогда
		Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			Если СтрНачинаетсяС(ПечатнаяФорма.ИмяВРЕГ, ВРег("ПечатьПоШаблонуОфисногоДокумента")) Тогда
				ПечатнаяФорма.ОфисныеДокументы = ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов,
					ПараметрыПечати.ШаблонПечатиОфисныхДокументов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнитьПараметрыЭлектроннойПочты Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
			КоллекцияПечатныхФорм);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("ВалютаРасчетов");
	// Эквайринг
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами") Тогда
	 	Результат.Добавить("ЭтоДоговорЭквайринга");
		Результат.Добавить("КонтрольВзаиморасчетовЭквайринг");
		Результат.Добавить("РасчетКомиссииВОтчетеЭквайера");
	КонецЕсли; 
	
	// Кредиты
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКредитом") Тогда
		Результат.Добавить("ЭтоДоговорКредита");
	КонецЕсли;
	
	// Платежный агент
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
	 	Результат.Добавить("ПризнакАгента");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// ШаблоныПечатиОфисныхДокументов

// Вызывается для формирования набора параметров шаблона печати офисных документов.
// 
// Параметры:
// 	НазначениеШаблона - ПеречислениеСсылка.НазначенияШаблоновПечатиОфисныхДокументов
// 	ПараметрыШаблона - Массив
//
Процедура ПриДобавленииПараметровШаблона(НазначениеШаблона, ПараметрыШаблона) Экспорт
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		ПараметрыДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, 
			НСтр("ru='Договор контрагента'"));
		ДобавитьПараметрыДоговораВШаблон(ПараметрыДоговора);
		
		ПараметрыКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона,
			НСтр("ru='Контрагент'"));
		ДобавитьПараметрыКонтрагентаВШаблон(ПараметрыКонтрагента);
		
	КонецЕсли;
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд Тогда
		
		ПараметрыЗаказа = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона,
			НСтр("ru='Заказ покупателя'"));
		Документы.ЗаказПокупателя.ПриДобавленииПараметровШаблона(НазначениеШаблона, ПараметрыЗаказа);
		
	ИначеЕсли НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		ПараметрыСчета = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона,
			НСтр("ru='Счет на оплату'"));
		Документы.СчетНаОплату.ПриДобавленииПараметровШаблона(НазначениеШаблона, ПараметрыСчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в процессе печати шаблона для заполнения значений параметров шаблона по данным объекта.
// 
Процедура ПриПолученииЗначенийПараметровШаблона(ОбъектПечати, НазначениеШаблона, ОписаниеПараметров, ДополнительныеПараметры) Экспорт
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		ЗаполнитьЗначенияПараметровДоговора(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд Тогда
		
		Документы.ЗаказПокупателя.ПриПолученииЗначенийПараметровШаблона(ДополнительныеПараметры.ЗаказПокупателя,
			НазначениеШаблона, ОписаниеПараметров, ДополнительныеПараметры);
		
	ИначеЕсли НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		Документы.СчетНаОплату.ПриПолученииЗначенийПараметровШаблона(ДополнительныеПараметры.СчетНаОплату,
			НазначениеШаблона, ОписаниеПараметров, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в процессе печати шаблона перед началом вывода табличной части документа в файл.
// 
Процедура ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров, ПараметрыВывода) Экспорт
	
	Если ПараметрыПечати.НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказ
		ИЛИ ПараметрыПечати.НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд Тогда
		
		Документы.ЗаказПокупателя.ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров,
			ПараметрыВывода);
		
	ИначеЕсли ПараметрыПечати.НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		Документы.СчетНаОплату.ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров, 
			ПараметрыВывода);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ШаблоныПечатиОфисныхДокументов

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "УИД", НСтр("ru = 'УИД'"), ОписаниеТиповСтрока50, ОписаниеТиповСтрока50);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "УИДВладелец", НСтр("ru = 'УИД Владельца'"), ОписаниеТиповСтрока50, ОписаниеТиповСтрока50);
	КонецЕсли; 
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Наименование", НСтр("ru = 'Договор (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Договор", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерДоговора", НСтр("ru = 'Договор (номер)'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка, "Договор", 2, , Истина);
	
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВладелецИНН", НСтр("ru = 'Контрагент (ИНН)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Владелец", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВладелецНаименование", НСтр("ru = 'Контрагент (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Владелец", 2);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Организация", НСтр("ru = 'Организация'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоров");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидДоговора", НСтр("ru = 'Вид договора'"), ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаДоговора", НСтр("ru = 'Дата договора'"), ОписаниеТиповСтрока25, ОписаниеТиповДата);	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокДействия", НСтр("ru = 'Срок действия'"), ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВалютаРасчетов", НСтр("ru = 'Валюта расчетов'"), ОписаниеТиповСтрока11, ОписаниеТиповКолонка);
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РасчетыВУсловныхЕдиницах", НСтр("ru = 'Расчеты в условных единицах'"), ОписаниеТиповСтрока11, ОписаниеТиповБулево);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", НСтр("ru = 'Комментарий'"), ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, НСтр("ru = 'Дополнительные реквизиты'"), ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата = Неопределено) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Владелец") Тогда
			СтрокаТаблицы.Владелец = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ЗаполнитьПоУИД(СтрокаТаблицы, "Контрагенты", "УИДВладелец_ВходящиеДанные");
		Иначе
		    СтрокаТаблицы.Владелец = НастройкиЗагрузкиДанных.ОбщееЗначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Владелец) Тогда
			
			СтрокаТаблицы.Договор = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ЗаполнитьПоУИД(СтрокаТаблицы, "ДоговорыКонтрагентов", "УИД_ВходящиеДанные");
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
			
				// Договор по Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДоговор(СтрокаТаблицы.Владелец, СтрокаТаблицы.Договор, СтрокаТаблицы.Наименование_ВходящиеДанные);
			
			КонецЕсли; 
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СправочникПоНаименованию("Организации", СтрокаТаблицы.Организация, СтрокаТаблицы.Организация_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПеречисление("ВидыДоговоров", СтрокаТаблицы.ВидДоговора, СтрокаТаблицы.ВидДоговора_ВходящиеДанные, Перечисления.ВидыДоговоров.Прочее);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицы.ДатаДоговора, СтрокаТаблицы.ДатаДоговора_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицы.СрокДействия, СтрокаТаблицы.СрокДействия_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВалюту(СтрокаТаблицы.ВалютаРасчетов, СтрокаТаблицы.ВалютаРасчетов_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицы.РасчетыВУсловныхЕдиницах, СтрокаТаблицы.РасчетыВУсловныхЕдиницах_ВходящиеДанные);
			
			// Дополнительные реквизиты
			Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
				
			КонецЕсли;
		
		КонецЕсли; 
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицы.Владелец) И ЗначениеЗаполнено(СтрокаТаблицы.Договор);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицы[ИмяСлужебногоПоля] = СтрокаТаблицы._СтрокаСопоставлена
		ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) И ЗначениеЗаполнено(СтрокаТаблицы.Владелец));
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки) Экспорт
	
	НастройкиЗагрузкиДанных = РезультатЗагрузки.НастройкиЗагрузкиДанных;
	НастройкиОбновленияСвойств = НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	
	Для каждого СтрокаТаблицы Из РезультатЗагрузки.ТаблицаСопоставленияДанных Цикл
		
		ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
		
		СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И РезультатЗагрузки.НастройкиЗагрузкиДанных.ОбновлятьСуществующие)
			ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И РезультатЗагрузки.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено);
		
		Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
			
			Если СтрокаТаблицы._СтрокаСопоставлена Тогда
				
				ЭлементСправочника = СтрокаТаблицы.Договор.ПолучитьОбъект();
				ЭлементСправочника.Заблокировать();
			Иначе
				
				ЭлементСправочника = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "УИД") И ЗначениеЗаполнено(СтрокаТаблицы.УИД) Тогда
					НовыйУИД = Новый УникальныйИдентификатор(СтрокаТаблицы.УИД);
					ЭлементСправочника.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(НовыйУИД));
				КонецЕсли; 
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Владелец") Тогда
				    ЭлементСправочника.Владелец = СтрокаТаблицы.Владелец;
				Иначе	
					ЭлементСправочника.Владелец = РезультатЗагрузки.НастройкиЗагрузкиДанных.ОбщееЗначение;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые);
			
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, РезультатЗагрузки.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
				
			КонецЕсли;
			
			ЭлементСправочника.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ЗаписатьДоговорПоУмолчанию(Договор) Экспорт
	Если ТипЗнч(Договор) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		Ссылка = Договор.Ссылка;
		ДанныеДоговора = Договор;
	Иначе
		Ссылка = Договор;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация,Владелец,ВидДоговора");
	КонецЕсли;
	
	РегистрыСведений.ОсновныеДоговорыКонтрагента.ОчиститьЗаписиСДоговором(Ссылка);
	
	ЗаписьОсновногоДоговора = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	ЗаписьОсновногоДоговора.Организация = ДанныеДоговора.Организация;
	ЗаписьОсновногоДоговора.Договор = Ссылка;
	ЗаписьОсновногоДоговора.Контрагент = ДанныеДоговора.Владелец;
	ЗаписьОсновногоДоговора.ВидДоговора = ДанныеДоговора.ВидДоговора;
	ЗаписьОсновногоДоговора.Записать();
	
КонецПроцедуры

// Получает договор контрагента по умолчанию
Функция ДоговорПоУмолчанию(Контрагент) Экспорт
	
	Если ТипЗнч(Контрагент) = Тип("СправочникОбъект.Контрагенты") Тогда
		КонтрагентСсылка = Контрагент.Ссылка;
	Иначе
		КонтрагентСсылка = Контрагент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеДоговорыКонтрагента.Договор.Ссылка КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И НЕ ОсновныеДоговорыКонтрагента.Договор.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.Договор;
	
КонецФункции

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или
// пустую ссылку.
//
// Параметры
//  Контрагент	-	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  Организация	-	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	-	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров> 
//							Нужные виды договора
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> - найденный договор или пустая ссылка
//
Функция ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
	Контрагент,
	Организация,
	СписокВидовДоговора = Неопределено,
	ВалютаРасчетов = Неопределено,
	ВозвращатьСтруктуруСДопДанными = Ложь) Экспорт
	
	Если ВозвращатьСтруктуруСДопДанными Тогда
		СтруктураВозврат = Новый Структура("Договор, КоличествоДоговоров", НСтр("ru = 'Не найден договор по умолчанию'"), 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Приоритет,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?((СписокВидовДоговора <> Неопределено) И СписокВидовДоговора.Количество() > 0,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","")
		+?(ВалютаРасчетов <> Неопределено,"
	|	И ДоговорыКонтрагентов.ВалютаРасчетов = (&ВалютаРасчетов)","");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("ВалютаРасчетов", ВалютаРасчетов);
	
	Если ПолучитьФункциональнуюОпцию("КонтрольДоговоров") = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать Тогда
		Если СписокВидовДоговора <> Неопределено Тогда
			// Договора, которые не подходят по видам договорам, но подходят по основным критериям
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ НЕ NULL
			|			ТОГДА 2
			|		ИНАЧЕ 6
			|	КОНЕЦ,
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
			|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент
			|	И ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|	И ДоговорыКонтрагентов.ВидДоговора НЕ В (&СписокВидовДоговора)"
			+?(ВалютаРасчетов <> Неопределено,"
			|	И ДоговорыКонтрагентов.ВалютаРасчетов = (&ВалютаРасчетов)","");
		КонецЕсли;
		// Основные договора, которые созданы по умолчанию на основную организацию
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВалютаРасчетов = (&ВалютаРасчетов)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ,
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|			И (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
		|			И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО Приоритет";
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ВозвращатьСтруктуруСДопДанными Тогда
			Возврат СтруктураВозврат;
		Иначе
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если ВозвращатьСтруктуруСДопДанными Тогда
		СтруктураВозврат.КоличествоДоговоров = Выборка.Количество();
		
		Выборка.Следующий();
		СтруктураВозврат.Договор = Выборка.Ссылка;
		Возврат СтруктураВозврат;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

// Проверяет договор контрагента на соответствие переданным параметрам.
//
// Параметры
//	ТекстСообщения - <Строка> - текст сообщения об ошибках
//	Договор	-	<СправочникСсылка.ДоговорыКонтрагентов> - проверяемый договор
//	Организация	-	<СправочникСсылка.Организации> - организация документа
//	Контрагент	-	<СправочникСсылка.Контрагенты> - контрагент документа
//	СписокВидовДоговора	-	<СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров>. 
//							Нужные виды договора.
//
// Возвращаемое значение:
//	<Булево> - Истина, если проверка пройдена успешно.
//
Функция ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора) Экспорт
	
	ТекстСообщения = "";
	ВестиРасчетыПоДоговорам = ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации")
		Или Контрагент.ВестиРасчетыПоДоговорам;
	Если Не ВестиРасчетыПоДоговорам Или (ПолучитьФункциональнуюОпцию("КонтрольДоговоров") = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать)Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеСоответствуетОрганизация = Ложь;
	НеСоответствуетВидДоговора = Ложь;
	
	Если Договор.Организация <> Организация И Договор.Владелец <> Организация Тогда
		НеСоответствуетОрганизация = Истина;
	КонецЕсли;
		
	Если СписокВидовДоговора.Количество() > 0 И  СписокВидовДоговора.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		НеСоответствуетВидДоговора = Истина;
	КонецЕсли;
	
	Если (НеСоответствуетОрганизация ИЛИ НеСоответствуетВидДоговора) = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Реквизиты договора не соответствуют условиям документа:'");
	
	Если НеСоответствуетОрганизация Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает организация'");
	КонецЕсли;
	
	Если НеСоответствуетВидДоговора Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает вид договора. Для выбора доступны договоры следующих видов: '");
		Сч = 0;
		Для Каждого ЭлементСписка Из СписокВидовДоговора Цикл
			Сч = Сч + 1;
			ТекстСообщения = ТекстСообщения + ?(Сч = 1, "", ?(Сч = СписокВидовДоговора.Количество(), " и ", ", ")) + """" + ЭлементСписка.Значение + """";
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает список доступных видов договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<СписокЗначений>   - список видов договора, доступных для документа.
//
Функция ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации = Неопределено, ИмяТабличнойЧасти = "") Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		
		Если ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
			
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			
		ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
			
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		ИначеЕсли ИмяТабличнойЧасти = "Дебитор" Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ИмяТабличнойЧасти = "Кредитор" Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Доверенность") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеВКассу") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		// Прочие расчеты и Эквайринг
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		// Конец Прочие расчеты и Эквайринг
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		Иначе 
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходИзКассы") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		// Прочие расчеты и Эквайринг
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		// Конец Прочие расчеты и Эквайринг
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходыПриИмпорте") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактура") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	// Эквайринг
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	// Конец Эквайринг
	// Прочие расчеты
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПрочиеРасходы") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
	// Конец Прочие расчеты
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции

// Возвращает список доступных видов договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<СписокЗначений>   - список видов договора, доступных для документа.
//
Функция ПолучитьСписокВидовДоговораДляСправочника(Справочник, ВидОперации = Неопределено, ИмяТабличнойЧасти = "") Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;
	
	Если ТипЗнч(Справочник) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции

// Получает структуру параметров формы выбора договора контрагента.
//
Функция ПолучитьПараметрыФормыВыбора(ДокументИлиСправочник, Организация, Контрагент, Договор, ДляДокумента = Истина, ВидОперации = Неопределено) Экспорт
	
	Если ДляДокумента Тогда
		СписокВидовДоговоров = ПолучитьСписокВидовДоговораДляДокумента(ДокументИлиСправочник, ВидОперации);
	Иначе
		СписокВидовДоговоров = ПолучитьСписокВидовДоговораДляСправочника(ДокументИлиСправочник);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	// Интеркампани
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда
		ПараметрыФормы.Вставить("Интеркампани", Истина);
		ПараметрыФормы.Вставить("ЭтоПоступление", ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации);
	КонецЕсли;
	// Конец Интеркампани
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Проверяет, имеются ли в базе договоры обслуживания.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьДоговорыОбслуживания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет, имеются ли в базе договоры обслуживания с заполненным направлением деятельности.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьДоговорыОбслуживанияСУникальнымиНаправлениямиДеятельности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания
	|	И ДоговорыКонтрагентов.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Создает связанное с договором обслуживания направление деятельности.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Владелец договора.
//  Договор    - Строка, СправочникСсылка.ДоговорыКонтрагентов - Договор контрагента.
// 
// Возвращаемое значение:
//   - СправочникСсылка.НаправленияДеятельности
//
Функция СоздатьНаправлениеДеятельностиДляДоговораОбслуживания(Контрагент, Договор) Экспорт
	
	Наименование = "" + Контрагент + ": " + Договор;
	НаправлениеДеятельности = Справочники.НаправленияДеятельности.СоздатьЭлемент();
	НаправлениеДеятельности.Заполнить(Неопределено);
	НаправлениеДеятельности.Наименование = Наименование;
	НаправлениеДеятельности.Родитель = Константы.БиллингГоловноеНаправлениеДеятельности.Получить();
	НаправлениеДеятельности.Записать();
	
	Возврат НаправлениеДеятельности.Ссылка;
	
КонецФункции

// Переименовывает направление деятельности, созданное для договора обслуживания (вызывается при переименовании договора
// контрагента).
//
Функция ПереименоватьНаправлениеДеятельностиДляДоговораОбслуживания(НаправлениеДеятельности, Контрагент, ДоговорНаименование, ДоговорСтароеНаименование) Экспорт
	
	СтароеНаименование = "" + Контрагент + ": " + ДоговорСтароеНаименование;
	НовоеНаименование = "" + Контрагент + ": " + ДоговорНаименование;
	
	Если СтароеНаименование = НовоеНаименование Тогда
		// Название не изменилось.
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(НаправлениеДеятельности.Наименование, 50) <> Лев(СтароеНаименование, 50) Тогда
		// Название изменено пользователем.
		Возврат Ложь;
	КонецЕсли;
	
	НаправлениеДеятельностиОбъект = НаправлениеДеятельности.ПолучитьОбъект();
	НаправлениеДеятельностиОбъект.Заблокировать();
	НаправлениеДеятельностиОбъект.Наименование = НовоеНаименование;
	НаправлениеДеятельностиОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

// Проверяет, возможно ли проведение указанной позиции в рамках договора обслуживания.
//
// Параметры:
//  Договор						 - СправочникСсылка.ДоговорыКонтрагентов - Договор обслуживания, по которому производится продажа.
//  ОбъектДоговораОбслуживания	 - СправочникСсылка.Номенклатура, ПланСчетовСсылка.Управленческий - Объект договора обслуживания, который проверяется.
//  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика проверяемой номенклатуры.
//                                 (по умолчанию = Неопределено)
// 
// Возвращаемое значение:
//   - Булево
//
Функция РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, ОбъектДоговораОбслуживания, Характеристика = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоДоговорОбслуживания, ДоговорОбслуживанияТарифныйПлан");
	
	Если НЕ ДанныеДоговора.ЭтоДоговорОбслуживания Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТарифныйПлан = ДанныеДоговора.ДоговорОбслуживанияТарифныйПлан;
	
	Если ТипЗнч(ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если Характеристика = Неопределено Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		ОтборТарифногоПлана = ТарифныйПлан.УчетНоменклатуры.НайтиСтроки(
			Новый Структура("Номенклатура,Характеристика", ОбъектДоговораОбслуживания, Характеристика));
		ЗапрещатьНезапланированныеПозиции = ТарифныйПлан.НезапланированныеПозицииЗапрещать;
		
	ИначеЕсли ТипЗнч(ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") Тогда
		
		ОтборТарифногоПлана = ТарифныйПлан.УчетЗатрат.НайтиСтроки(
			Новый Структура("СтатьяЗатрат", ОбъектДоговораОбслуживания));
		ЗапрещатьНезапланированныеПозиции = ТарифныйПлан.НезапланированныеЗатратыЗапрещать;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ПозицияУказанаВТарифномПлане = ОтборТарифногоПлана.Количество() <> 0;
	Возврат ПозицияУказанаВТарифномПлане Или Не ЗапрещатьНезапланированныеПозиции;
	
КонецФункции

// Проверяет соответствие реквизитов договора "Организация" и "ВидДоговора" условиям документа.
//
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(
	ТекстСообщения,
	Договор = Неопределено,
	ДокументСправочник,
	Организация,
	Контрагент,
	Отказ,
	ВидОперации = Неопределено,
	Знач ТЧРасшифровкаПлатежа = Неопределено,
	ДоговорКредитаЗайма = Неопределено) Экспорт
	
	КонтрольДоговоров = ПолучитьФункциональнуюОпцию("КонтрольДоговоров");
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		ИЛИ КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеКонтролировать Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	Если ТипЗнч(ДокументСправочник) = Тип("СправочникСсылка.ЭквайринговыеТерминалы") Тогда
		СписокВидовДоговора = Новый СписокЗначений;
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
	Иначе
		СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(ДокументСправочник, ВидОперации);
	КонецЕсли;
	
	НеПроводитьСНекорректнымиДоговорами = (КонтрольДоговоров = Перечисления.ВидыКонтроляДоговоровПриПроведении.НеПроводить);
	
	Если ТЧРасшифровкаПлатежа = Неопределено Тогда
		Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
			И НеПроводитьСНекорректнымиДоговорами Тогда
			
			Отказ = Истина;
		КонецЕсли;
	Иначе
		// Прочие расчеты
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
			
			СписокВидовДоговора = Новый СписокЗначений;
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный);
			
			Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, ДоговорКредитаЗайма, Организация, Контрагент, СписокВидовДоговора)
				И НеПроводитьСНекорректнымиДоговорами Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		Иначе
		// Конец Прочие расчеты
			Для каждого СтрокаТабличнойЧасти Из ТЧРасшифровкаПлатежа Цикл
				
				Если НЕ МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, СтрокаТабличнойЧасти.Договор, Организация, Контрагент, СписокВидовДоговора)
					И НеПроводитьСНекорректнымиДоговорами Тогда
					
					Отказ = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОсновнойДоговор(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеДоговорыКонтрагента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Договор = &Договор";
	Запрос.УстановитьПараметр("Договор", Договор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕдинственныйДоговорКредита(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ЭтоДоговорКредита
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область СпособЗаполненияСтавкиНДС

// Возвращает СпособЗаполненияСтавкиНДС из регистра СтавкиНДСПоДоговору или договору.
//
// Параметры 
// ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор, по которому нужно 
// прочитать СпособЗаполненияСтавкиНДС.
//
// Возвращаемое значение:
//   значение Перечисления.СпособыЗаполненияСтавкиНДС
Функция СпособЗаполненияСтавкиНДСПоДоговору(ДоговорКонтрагента) Экспорт
	
	СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ПустаяСсылка();
	
	Если ДоговорКонтрагента.Пустая() Или (ТипЗнч(ДоговорКонтрагента) = Тип("ДокументСсылка.ДоговорКредитаИЗайма")) Тогда
		Возврат СпособЗаполненияСтавкиНДС;
	КонецЕсли;
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		 "СпособЗаполненияСтавкиНДС, Организация, Владелец");
	
	Если ЗначениеЗаполнено(ПараметрыДоговора.СпособЗаполненияСтавкиНДС)
		И ПараметрыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Возврат ПараметрыДоговора.СпособЗаполненияСтавкиНДС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыДоговора.Владелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МенеджерЗаписиСтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоДоговорам КАК МенеджерЗаписиСтавкиНДСПоДоговорам
	|ГДЕ
	|	МенеджерЗаписиСтавкиНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И МенеджерЗаписиСтавкиНДСПоДоговорам.Организация = &Организация
	|	И МенеджерЗаписиСтавкиНДСПоДоговорам.Контрагент = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СпособЗаполненияСтавкиНДС = Выборка.СпособЗаполненияСтавкиНДС;
	КонецЕсли;
	
	Возврат СпособЗаполненияСтавкиНДС;
	
КонецФункции

// Записывает в регистр СтавкиНДСПоДокументу значение СпособаЗаполненияСтавкиНДС по документу.
// Определяет СпособЗаполненияСтавкиНДС по СуммеНДС в документе.
//
// Параметры:
//   ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор по которому надо записать значение.
//   ТекущийДокумент - документ, из которого происходит вызов процедуры.
//   ЕстьСуммаНДС - булево- наличие НДС, необязательный параметр.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ДоговорКонтрагента,
	 ТекущийДокумент, ЕстьСуммаНДС = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СпособЗаполненияСтавкиНДС, Организация, Владелец");
	
	Если ЗначениеЗаполнено(ПараметрыДоговора.СпособЗаполненияСтавкиНДС)
		И ПараметрыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Возврат;
	КонецЕсли;

	ЕстьНДС = ?(ЗначениеЗаполнено(ЕстьСуммаНДС), ЕстьСуммаНДС, ДокументСНДС(ТекущийДокумент));

	Если ЕстьНДС Тогда
		ТекущийСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	Иначе
		ТекущийСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС;
	КонецЕсли;

	// Проверяем, что сейчас записано в регистре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоДоговорам КАК СтавкиНДСПоДоговорам
	|ГДЕ
	|	СтавкиНДСПоДоговорам.Организация = &Организация
	|	И СтавкиНДСПоДоговорам.Контрагент = &Контрагент
	|	И СтавкиНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	ТаблицаСпособыЗаполненияСтавкиНДС = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСпособыЗаполненияСтавкиНДС.Количество() > 0 Тогда
		ЗаписанныйСпособСтавкиНДС = ТаблицаСпособыЗаполненияСтавкиНДС[0];
		Если ЗаписанныйСпособСтавкиНДС.СпособЗаполненияСтавкиНДС = ТекущийСпособЗаполненияСтавкиНДС Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НачатьТранзакцию();
	

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтавкиНДСПоДоговорам");
		ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
		Блокировка.Заблокировать();
		
		МенеджерЗаписиСтавкиНДСПоДоговорам = РегистрыСведений.СтавкиНДСПоДоговорам.СоздатьМенеджерЗаписи();
		МенеджерЗаписиСтавкиНДСПоДоговорам.ДоговорКонтрагента = ДоговорКонтрагента;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Контрагент = ПараметрыДоговора.Владелец;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Организация = ПараметрыДоговора.Организация;
		МенеджерЗаписиСтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС = ТекущийСпособЗаполненияСтавкиНДС;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Записать(Истина);

		ЗафиксироватьТранзакцию();
		
	Исключение
		// Обновленные данные по договору записываются или не записываются .
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

// Записывает значение СпособЗаполненияСтавкиНДС по документам оплаты.
//
// Параметры:
//   РасшифровкаПлатежа - таблица РасшифровкаПлатежа из документа оплаты
//   ДокументСсылка - документ, из которого вызывается процедура.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(РасшифровкаПлатежа, ДокументСсылка) Экспорт
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
		ТаблицаДоговоров = ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа);
		Для каждого ТекСтрока Из ТаблицаДоговоров Цикл
		
			ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(
				ТекСтрока.Договор, Неопределено, ТекСтрока.СуммаНДС > 0);
		КонецЦикла;

КонецПроцедуры

// Проверяет есть в табличных частях сумма НДС или нет.
//
// Параметры:
//   ТекущийДокумент - документы, , которых, нужно проверить НДС
//
// Возвращаемое значение:
//   Булево - показывает наличие НДС в документе.
Функция ДокументСНДС(ТекущийДокумент) Экспорт

	Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Документы[ТекущийДокумент.Метаданные().Имя].НаличиеСуммыНДС(ТекущийДокумент);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает свернутую таблицу по двум параметрам: ДоговорКонтрагента и СуммаНДС.
//
// Параметры
// РасшифровкаПлатежа - РасшифровкаПлатежа документа.
//
// Возвращаемое значение:
//   ТаблицаЗначений - свернутая таблица по договору.
Функция ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа)

	СводнаяРасшифровкаПлатежа = РасшифровкаПлатежа.Выгрузить(,"Договор,СуммаНДС");
	СводнаяРасшифровкаПлатежа.Свернуть("Договор", "СуммаНДС");
	
	Возврат СводнаяРасшифровкаПлатежа;
	
КонецФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
	// Интеркампани
	ОрганизацияВладелец = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями") И Параметры.Отбор.Свойство("Владелец") Тогда
		Если Параметры.Свойство("ВидОперации")
			И (Параметры.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
			ИЛИ Параметры.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации) Тогда
			ОрганизацияВладелец = Параметры.Отбор.Владелец;
			Параметры.Отбор.Удалить("Владелец");
		ИначеЕсли Параметры.Свойство("Интеркампани") 
			И Параметры.Интеркампани = Истина 
			И Параметры.Свойство("ЭтоПоступление")
			И Параметры.ЭтоПоступление = Истина Тогда 
			ОрганизацияВладелец = Параметры.Отбор.Владелец;
			Параметры.Отбор.Удалить("Владелец");
		КонецЕсли; 
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияВладелец) Тогда
		Параметры.Отбор.Вставить("Организация", ОрганизацияВладелец);
		Параметры.Отбор.Вставить("ЭтоДоговорПередачиТоваровМеждуОрганизациями", Истина);
	КонецЕсли; 
	// Конец Интеркампани
	
КонецПроцедуры

#Область Печать

Функция ПечатьТарифныйПланДоговораОбслуживания(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЗапросТекст = "";
	ЗапросОбъединение = "
	|
	|ОБЪЕДИНИТЬ
	|";
	
	Для каждого Эл Из МассивОбъектов Цикл
		
		Если Эл.ЭтоДоговорОбслуживания Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru ='Договор %1 не является договором обслуживания.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Эл.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	КонецЦикла;
	
	Для Итератор = 0 По МассивОбъектов.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(ЗапросТекст) Тогда
			ЗапросТекст = ЗапросТекст + ЗапросОбъединение;
		КонецЕсли;
		
		ЗапросТекст = ЗапросТекст + "
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан КАК ТарифныйПлан,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика КАК Характеристика,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Количество КАК Количество,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Цена КАК Цена
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры,
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан%1
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ФиксированноеЗначение)
		|	И ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента%1
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.НомерСтроки,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ЕдиницаИзмерения,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Количество,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЗаключенияДоговора%1, ВидЦен = &ВидЦен%1) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика,
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан%1
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ПоВидуЦенДоговора)
		|	И ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента%1";
		
		ЗапросТекст = СтрШаблон(ЗапросТекст, Итератор);
		
	КонецЦикла;
	
	ЗапросТекст = ЗапросТекст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Договор";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ЗапросТекст;
	
	Для Итератор = 0 По МассивОбъектов.Количество() - 1 Цикл
		
		Параметр = "ТарифныйПлан" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ДоговорОбслуживанияТарифныйПлан);
		
		Параметр = "ДатаЗаключенияДоговора" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ДоговорОбслуживанияДатаНачала);
		
		Параметр = "ВидЦен" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ВидЦен);
		
		Параметр = "ДоговорКонтрагента" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_" + ИмяМакета);
		
		ТекстЗаголовка = НСтр("ru='к договору №%1 от %2'");
		ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, Выборка.НомерДоговора, Формат(Выборка.ДатаДоговора, "ДЛФ=DD"));
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ТарифныйПлан") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ТарифныйПлан");
			
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокТарифногоПлана = Выборка.Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Сумма = 0;
		Количество = 0;
		
		Пока ВыборкаСтрокТарифногоПлана.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТарифногоПлана);
			ОбластьМакета.Параметры.Номенклатура = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТарифногоПлана.Номенклатура, ВыборкаСтрокТарифногоПлана.Характеристика);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма = Сумма + ВыборкаСтрокТарифногоПлана.Количество * ВыборкаСтрокТарифногоПлана.Цена;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Сумма = ПечатьДокументовУНФ.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.ТарифныйПлан);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ШаблонПечати)
	
	ОфисныеДокументы = Новый Соответствие;
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		ДанныеФайла = ШаблоныПечатиОфисныхДокументов.СФормироватьДокумент(ОбъектПечати, ШаблонПечати, Новый УникальныйИдентификатор);
		ОфисныеДокументы.Вставить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Возврат ОфисныеДокументы;
	
КонецФункции

#КонецОбласти

#Область ШаблоныПечатиОфисныхДокументов

Процедура ДобавитьПараметрыДоговораВШаблон(ПараметрыШаблона)
	
	МетаданныеДоговора = Метаданные.Справочники.ДоговорыКонтрагентов;
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.НомерДоговора", МетаданныеДоговора.Реквизиты.НомерДоговора.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.ДатаДоговора", НСтр("ru='Действует от'"), "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.СрокДействия", НСтр("ru='Действует до'"), "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Наименование", МетаданныеДоговора.СтандартныеРеквизиты.Наименование.Синоним);
	
	ФорматыДоговорПодписан = Новый СписокЗначений;
	ФорматыДоговорПодписан.Добавить("БИ='Подписан'; БЛ='Не подписан'", НСтр("ru='Подписан / Не подписан'"));
	ФорматыДоговорПодписан.Добавить("БИ='Да'; БЛ='Нет'", НСтр("ru='Да / Нет'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.ДоговорПодписан", МетаданныеДоговора.Реквизиты.ДоговорПодписан.Синоним, ФорматыДоговорПодписан[0].Значение, ФорматыДоговорПодписан);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Комментарий", МетаданныеДоговора.Реквизиты.Комментарий.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.СрокОплатыПокупателя", МетаданныеДоговора.Реквизиты.СрокОплатыПокупателя.Синоним,,, МетаданныеДоговора.Реквизиты.СрокОплатыПокупателя);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.СрокОплатыПоставщику", МетаданныеДоговора.Реквизиты.СрокОплатыПоставщику.Синоним,,, МетаданныеДоговора.Реквизиты.СрокОплатыПоставщику);
	
	ПараметрыРамочногоДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Рамочный договор'"));
	ПостфиксРамочный = НСтр("ru=' (рамочный)'");
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорНомерДоговора", МетаданныеДоговора.Реквизиты.НомерДоговора.Синоним + ПостфиксРамочный);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорДатаДоговора", НСтр("ru='Действует от'") + ПостфиксРамочный, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорСрокДействия", НСтр("ru='Действует до'") + ПостфиксРамочный, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорНаименование", МетаданныеДоговора.СтандартныеРеквизиты.Наименование.Синоним + ПостфиксРамочный);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорДоговорПодписан", МетаданныеДоговора.Реквизиты.ДоговорПодписан.Синоним + ПостфиксРамочный, ФорматыДоговорПодписан[0].Значение, ФорматыДоговорПодписан);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорКомментарий", МетаданныеДоговора.Реквизиты.Комментарий.Синоним + ПостфиксРамочный);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорСрокОплатыПокупателя", МетаданныеДоговора.Реквизиты.СрокОплатыПокупателя.Синоним + ПостфиксРамочный,,, МетаданныеДоговора.Реквизиты.СрокОплатыПокупателя);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыРамочногоДоговора, "ДоговорыКонтрагентов.Родитель.РамочныйДоговорСрокОплатыПоставщику", МетаданныеДоговора.Реквизиты.СрокОплатыПоставщику.Синоним + ПостфиксРамочный,,, МетаданныеДоговора.Реквизиты.СрокОплатыПоставщику);
	
	ПараметрыДопРеквизитовДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыРамочногоДоговора, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовДоговора, Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорыКонтрагентов.Родитель.ДополнительныеРеквизиты.");
	
	ПараметрыДопРеквизитовДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовДоговора, Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорыКонтрагентов.ДополнительныеРеквизиты.");
	
	ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, "ДоговорыКонтрагентов.");
	
КонецПроцедуры

Процедура ДобавитьПараметрыКонтрагентаВШаблон(ПараметрыШаблона)
	
	МетаданныеКонтрагента = Метаданные.Справочники.Контрагенты;
	МетаданныеКонтактногоЛица = Метаданные.Справочники.КонтактныеЛица;
	
	ПараметрыКонтактногоЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Основное контактное лицо'"));
	ПараметрыКонтактногоЛицаСклонения = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Имя, фамилия'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛицаСклонения, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоНаименование", НСтр("ru='Имя, фамилия'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыКонтактногоЛицаСклонения, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоНаименование", НСтр("ru='Имя, фамилия'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоДатаРождения", МетаданныеКонтактногоЛица.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ВладелецКонтактноеЛицоДокументУдостоверяющийЛичность", МетаданныеКонтактногоЛица.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитов = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитов, Справочники.КонтактныеЛица.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ДополнительныеРеквизиты.");
	
	ПараметрыКонтактногоЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Подписант'"));
	ПараметрыКонтактногоЛицаСклонения = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Имя, фамилия'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛицаСклонения, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантНаименование", НСтр("ru='Имя, фамилия'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыКонтактногоЛицаСклонения, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантНаименование", НСтр("ru='Имя, фамилия'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантДатаРождения", МетаданныеКонтактногоЛица.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКонтактногоЛица, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ВладелецКонтактноеЛицоПодписантДокументУдостоверяющийЛичность", МетаданныеКонтактногоЛица.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.КонтактныеЛица.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитов = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыКонтактногоЛица, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитов, Справочники.КонтактныеЛица.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ДополнительныеРеквизиты.");
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецНаименование", МетаданныеКонтрагента.СтандартныеРеквизиты.Наименование.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецНаименованиеПолное", МетаданныеКонтрагента.Реквизиты.НаименованиеПолное.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецФИОФизЛица", МетаданныеКонтрагента.Реквизиты.ФИО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецДокументУдостоверяющийЛичность", МетаданныеКонтрагента.Реквизиты.ДокументУдостоверяющийЛичность.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецИНН", МетаданныеКонтрагента.Реквизиты.ИНН.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецСвидетельствоДатаВыдачи", НСтр("ru='Дата выдачи свидетельства'"), "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецДатаРождения", МетаданныеКонтрагента.Реквизиты.ДатаРождения.Синоним, "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецКПП", МетаданныеКонтрагента.Реквизиты.КПП.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецКодПоОКПО", МетаданныеКонтрагента.Реквизиты.КодПоОКПО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецРегистрационныйНомер", НСтр("ru='Регистрационный номер (ОГРН)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "ДоговорыКонтрагентов.Владелец.ВладелецСвидетельствоСерияНомер", МетаданныеКонтрагента.Реквизиты.СвидетельствоСерияНомер);
	
	ПараметрыСчетаКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Банковский счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчанию", НСтр("ru='Банковский счет (полное представление)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.ВладелецБанковскийСчетПоУмолчаниюБанкСВИФТБИК", НСтр("ru='SWIFT'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.ВладелецБанковскийСчетПоУмолчаниюБанкНаименование", НСтр("ru='Банк'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.ВладелецБанковскийСчетПоУмолчаниюБанкКод", НСтр("ru='БИК'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.ВладелецБанковскийСчетПоУмолчаниюБанкКоррСчет", НСтр("ru='Корр. счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаКонтрагента, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.ВладелецБанковскийСчетПоУмолчаниюНомерСчета", НСтр("ru='Номер счета'"));
	
	ПараметрыКИКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИКонтрагента, Справочники.Контрагенты.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитов = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитов, Справочники.Контрагенты.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.ДополнительныеРеквизиты.");
	
	ПараметрыОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Ответственный'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОтветственногоКонтрагента, "ДоговорыКонтрагентов.Владелец.ОтветственныйФИО", МетаданныеКонтрагента.Реквизиты.Ответственный);
	
	ПараметрыКИОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоКонтрагента, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОтветственногоКонтрагента, Справочники.ФизическиеЛица.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.Ответственный.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОтветственногоКонтрагента = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоКонтрагента, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОтветственногоКонтрагента, Справочники.Сотрудники.ПустаяСсылка(), "ДоговорыКонтрагентов.Владелец.Ответственный.ДополнительныеРеквизиты.");
	
КонецПроцедуры

Процедура ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, Префикс)
	
	МетаданныеОрганизации = Метаданные.Справочники.Организации;
	
	ПараметрыОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Организация'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОрганизации, Префикс + "Организация.ОрганизацияНаименование", НСтр("ru='Юридическое наименование'"));
	
	ПараметрыКодыОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Коды'"));
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияИНН", МетаданныеОрганизации.Реквизиты.ИНН.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.ИНН");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодОКВЭД", МетаданныеОрганизации.Реквизиты.КодОКВЭД.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.ОКВЭД");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКПП", МетаданныеОрганизации.Реквизиты.КПП.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КПП");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияОГРН", МетаданныеОрганизации.Реквизиты.ОГРН.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.ОГРН");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКАТО", МетаданныеОрганизации.Реквизиты.КодПоОКАТО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКАТО");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКПО", МетаданныеОрганизации.Реквизиты.КодПоОКПО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКПО");
	НовыйПараметр = ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКТМО", МетаданныеОрганизации.Реквизиты.КодПоОКТМО.Синоним);
	НовыйПараметр.СовместимыеПараметры.Добавить(Префикс + "Организация.Коды.КодПоОКТМО");
	
	ПараметрыПодписьРуководителяОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьРуководителя.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьГлавногоБухгалтера.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыКИОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.ДополнительныеРеквизиты.");
	
	ПараметрыСчетаОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Банковский счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчанию", НСтр("ru='Банковский счет (полное представление)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК", НСтр("ru='SWIFT'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование", НСтр("ru='Банк'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКод", НСтр("ru='БИК'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет", НСтр("ru='Корр. счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета", НСтр("ru='Номер счета'"));
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровДоговора(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорыКонтрагентовСсылка,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.СрокДействия КАК СрокДействия,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование,
	|	ДоговорыКонтрагентов.СрокОплатыПокупателя КАК СрокОплатыПокупателя,
	|	ДоговорыКонтрагентов.СрокОплатыПоставщику КАК СрокОплатыПоставщику,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентов.Владелец КАК ДоговорыКонтрагентовВладелец,
	|	ДоговорыКонтрагентов.Организация КАК ДоговорыКонтрагентовОрганизация,
	|	ДоговорыКонтрагентов.Комментарий КАК ДоговорКомментарий,
	|	ДоговорыКонтрагентов.ДоговорПодписан КАК ДоговорПодписан,
	|	ДоговорыКонтрагентов.Родитель КАК РамочныйДоговорСсылка,
	|	ДоговорыКонтрагентов.Родитель.НомерДоговора КАК РамочныйДоговорНомерДоговора,
	|	ДоговорыКонтрагентов.Родитель.ДатаДоговора КАК РамочныйДоговорДатаДоговора,
	|	ДоговорыКонтрагентов.Родитель.СрокДействия КАК РамочныйДоговорСрокДействия,
	|	ДоговорыКонтрагентов.Родитель.Наименование КАК РамочныйДоговорНаименование,
	|	ДоговорыКонтрагентов.Родитель.СрокОплатыПокупателя КАК РамочныйДоговорСрокОплатыПокупателя,
	|	ДоговорыКонтрагентов.Родитель.СрокОплатыПоставщику КАК РамочныйДоговорСрокОплатыПоставщику,
	|	ДоговорыКонтрагентов.Родитель.ВалютаРасчетов КАК РамочныйДоговорВалютаРасчетов,
	|	ДоговорыКонтрагентов.Родитель.Комментарий КАК РамочныйДоговорДоговорКомментарий,
	|	ДоговорыКонтрагентов.Родитель.ДоговорПодписан КАК РамочныйДоговорДоговорПодписан,
	|	ДоговорыКонтрагентов.Владелец.Ответственный КАК ВладелецОтветственный,
	|	ДоговорыКонтрагентов.Владелец.Ответственный.Физлицо КАК ВладелецОтветственныйФизлицо,
	|	ДоговорыКонтрагентов.Владелец.Ответственный.Наименование КАК ОтветственныйФИО,
	|	ДоговорыКонтрагентов.Владелец.Наименование КАК ВладелецНаименование,
	|	ДоговорыКонтрагентов.Владелец.НаименованиеПолное КАК ВладелецНаименованиеПолное,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию КАК ВладелецБанковскийСчетПоУмолчанию,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию.НомерСчета КАК ВладелецБанковскийСчетПоУмолчаниюНомерСчета,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию.Банк.Наименование КАК ВладелецБанковскийСчетПоУмолчаниюБанкНаименование,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию.Банк.КоррСчет КАК ВладелецБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию.Банк.СВИФТБИК КАК ВладелецБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	ДоговорыКонтрагентов.Владелец.БанковскийСчетПоУмолчанию.Банк.Код КАК ВладелецБанковскийСчетПоУмолчаниюБанкКод,
	|	ДоговорыКонтрагентов.Владелец.ИНН КАК ВладелецИНН,
	|	ДоговорыКонтрагентов.Владелец.КПП КАК ВладелецКПП,
	|	ДоговорыКонтрагентов.Владелец.КодПоОКПО КАК ВладелецКодПоОКПО,
	|	ДоговорыКонтрагентов.Владелец.РегистрационныйНомер КАК ВладелецРегистрационныйНомер,
	|	ДоговорыКонтрагентов.Владелец.СвидетельствоСерияНомер КАК ВладелецСвидетельствоСерияНомер,
	|	ДоговорыКонтрагентов.Владелец.СвидетельствоДатаВыдачи КАК ВладелецСвидетельствоДатаВыдачи,
	|	ДоговорыКонтрагентов.Владелец.ДатаРождения КАК ВладелецДатаРождения,
	|	ДоговорыКонтрагентов.Владелец.ДокументУдостоверяющийЛичность КАК ВладелецДокументУдостоверяющийЛичность,
	|	ДоговорыКонтрагентов.Владелец.ФИО КАК ВладелецФИОФизЛица,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант КАК ВладелецКонтактноеЛицоПодписантСсылка,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.Наименование КАК ВладелецКонтактноеЛицоПодписантНаименование,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ДатаРождения КАК ВладелецКонтактноеЛицоПодписантДатаРождения,
	|	СвязиКонтрагентКонтактПодписант.Должность КАК ВладелецКонтактноеЛицоПодписантДолжность,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.ДокументУдостоверяющийЛичность КАК ВладелецКонтактноеЛицоПодписантДокументУдостоверяющийЛичность,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицо КАК ВладелецКонтактноеЛицоСсылка,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.Наименование КАК ВладелецКонтактноеЛицоНаименование,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ДатаРождения КАК ВладелецКонтактноеЛицоДатаРождения,
	|	СвязиКонтрагентКонтактКонтактноеЛицо.Должность КАК ВладелецКонтактноеЛицоДолжность,
	|	ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.ДокументУдостоверяющийЛичность КАК ВладелецКонтактноеЛицоДокументУдостоверяющийЛичность
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактКонтактноеЛицо
	|		ПО ДоговорыКонтрагентов.Владелец = СвязиКонтрагентКонтактКонтактноеЛицо.Контрагент
	|			И (СвязиКонтрагентКонтактКонтактноеЛицо.Контакт = ДоговорыКонтрагентов.Владелец.КонтактноеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактПодписант
	|		ПО ДоговорыКонтрагентов.Владелец = СвязиКонтрагентКонтактПодписант.Контрагент
	|			И (СвязиКонтрагентКонтактПодписант.Контакт = ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант)
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДоговорыКонтрагентов";
	
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ОбъектПечати);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДоговора = Результат[0];
	
	ДанныеДоговора.ВладелецКПП = Справочники.Контрагенты.КППНаДату(ДанныеДоговора.ДоговорыКонтрагентовВладелец, 
		ДанныеДоговора.ДатаДоговора);
	ДанныеДоговора.ВладелецНаименованиеПолное = Справочники.Контрагенты.ПолноеНаименованиеНаДату(
		ДанныеДоговора.ДоговорыКонтрагентовВладелец,
		ДанныеДоговора.ДатаДоговора);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Владелец.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Владелец.ВладелецБанковскийСчетПоУмолчаниюПодробно.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Владелец.Ответственный.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеДоговора, "ДоговорыКонтрагентов.Родитель.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначениеПараметра(ОписаниеПараметров, "ДоговорыКонтрагентов.Комментарий", ДанныеДоговора.ДоговорКомментарий);
	
	ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, "ДоговорыКонтрагентов.Организация.", 
		ДанныеДоговора.ДоговорыКонтрагентовОрганизация, ДанныеДоговора.ДатаДоговора);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.", ДанныеДоговора.ДоговорыКонтрагентовСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.Родитель.", ДанныеДоговора.РамочныйДоговорСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.", ДанныеДоговора.ДоговорыКонтрагентовВладелец);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.Ответственный.", ДанныеДоговора.ВладелецОтветственный);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.", ДанныеДоговора.ВладелецКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.", ДанныеДоговора.ВладелецКонтактноеЛицоПодписантСсылка);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.", ДанныеДоговора.ДоговорыКонтрагентовВладелец, ДанныеДоговора.ДатаДоговора);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.Ответственный.", ДанныеДоговора.ВладелецОтветственныйФизлицо);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицо.", ДанныеДоговора.ВладелецКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "ДоговорыКонтрагентов.Владелец.КонтактноеЛицоПодписант.", ДанныеДоговора.ВладелецКонтактноеЛицоПодписантСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, Префикс, Организация, ДатаДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.НаименованиеПолное КАК ОрганизацияНаименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	Организации.КПП КАК ОрганизацияКПП,
	|	Организации.ОГРН КАК ОрганизацияОГРН,
	|	Организации.КодПоОКАТО КАК ОрганизацияКодПоОКАТО,
	|	Организации.КодОКВЭД КАК ОрганизацияКодОКВЭД,
	|	Организации.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	Организации.КодПоОКТМО КАК ОрганизацияКодПоОКТМО,
	|	Организации.ПодписьРуководителя.ДействуетНаОсновании КАК ПодписьРуководителяДействуетНаОсновании,
	|	Организации.ПодписьРуководителя.Должность КАК ПодписьРуководителяДолжность,
	|	Организации.ПодписьРуководителя.РасшифровкаПодписи КАК ПодписьРуководителяРасшифровкаПодписи,
	|	Организации.ПодписьРуководителя.ФизическоеЛицо.Наименование КАК ПодписьРуководителяФизическоеЛицоНаименование,
	|	Организации.ПодписьГлавногоБухгалтера.ДействуетНаОсновании КАК ПодписьГлавногоБухгалтераДействуетНаОсновании,
	|	Организации.ПодписьГлавногоБухгалтера.Должность КАК ПодписьГлавногоБухгалтераДолжность,
	|	Организации.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК ПодписьГлавногоБухгалтераРасшифровкаПодписи,
	|	Организации.ПодписьГлавногоБухгалтера.ФизическоеЛицо.Наименование КАК ПодписьГлавногоБухгалтераФизическоеЛицоНаименование,
	|	Организации.БанковскийСчетПоУмолчанию КАК ОрганизацияБанковскийСчетПоУмолчанию,
	|	Организации.БанковскийСчетПоУмолчанию.Банк.СВИФТБИК КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	Организации.БанковскийСчетПоУмолчанию.Банк.Наименование КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование,
	|	Организации.БанковскийСчетПоУмолчанию.Банк.Код КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКод,
	|	Организации.БанковскийСчетПоУмолчанию.Банк.КоррСчет КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	Организации.БанковскийСчетПоУмолчанию.НомерСчета КАК ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = Результат[0];
	
	ДанныеОрганизации.ОрганизацияКПП 			= Справочники.Организации.КППНаДату(Организация, ДатаДоговора);
	ДанныеОрганизации.ОрганизацияНаименование 	= Справочники.Организации.ПолноеНаименованиеНаДату(Организация, ДатаДоговора);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьРуководителя.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьГлавногоБухгалтера.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ОрганизацияБанковскийСчетПоУмолчаниюПодробно.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, Префикс, Организация);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров,
		Префикс,
		Организация,
		ДатаДоговора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли