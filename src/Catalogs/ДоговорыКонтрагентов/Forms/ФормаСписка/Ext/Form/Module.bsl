
#Область ПеременныеФормы

&НаКлиенте
Перем УстановкаОсновногоДоговораВыполнена; // Признак успешной установки основного договора из формы контрагента

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("КонтролироватьВыборДоговора", КонтролироватьВыборДоговора);
	Параметры.Свойство("Организация"  , Организация);
	Параметры.Свойство("ВидыДоговоров", ВидыДоговоров);
	Параметры.Свойство("Интеркампани", Интеркампани);
	Если Параметры.Свойство("ЭтоПоступление") Тогда
		ЭтоПоступлениеДенег = Параметры.ЭтоПоступление;
	Иначе
		ЭтоПоступлениеДенег = Ложь;
	КонецЕсли; 
	
	КоличествоДнейКОповещению = 7;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	Список.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(НастройкиОформленияСпискаДоговоров());
	УстановитьУсловноеОформление();
	
	Если Параметры.Отбор.Свойство("Владелец", ОтборКонтрагент) Тогда
		Параметры.Отбор.Удалить("Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		Параметры.Свойство("Контрагент", ОтборКонтрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		// Интеркампани
		Если Интеркампани И ЭтоПоступлениеДенег Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорИнтеркампани", Истина);
		ИначеЕсли Интеркампани Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", Организация);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорИнтеркампани", Истина);
		// Конец Интеркампани
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", ОтборКонтрагент);
			Элементы.Контрагенты.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Покупатель") Тогда
		ОтборВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Параметры.Отбор.Удалить("Покупатель");
	ИначеЕсли Параметры.Отбор.Свойство("Поставщик") Тогда
		ОтборВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;
		Параметры.Отбор.Удалить("Поставщик");
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоДоговорЭквайринга") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЭтоДоговорЭквайринга",
			Параметры.ЭтоДоговорЭквайринга);
	КонецЕсли;
	
	Элементы.ОтборВидДоговора.СписокВыбора.Очистить();
	
	Элементы.ОтборВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	Элементы.ОтборВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	
	Если Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
		Элементы.ОтборВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Получить()
		ИЛИ ПолучитьФункциональнуюОпцию("АгентскиеУслуги") Тогда
		Элементы.ОтборВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	КонецЕсли;
	
	Элементы.ОтборВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.Прочее);
	ПравоНаРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		// Контекстное открытие формы с отбором по контрагенту
	
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Договоры с'") + " """ + ОтборКонтрагент + """";
		
		Элементы.Владелец.Видимость = Ложь;
		
		Если ТипЗнч(ОтборКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборКонтрагент,
				"Покупатель, Поставщик, ПрочиеОтношения");
		Иначе
			РеквизитыКонтрагента = Новый Структура("Покупатель, Поставщик, ПрочиеОтношения", Истина, Ложь, Ложь);
		КонецЕсли;
			
			Элементы.ВидЦен.Видимость				= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.ВидСкидкиНаценки.Видимость		= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.ВидЦенКонтрагента.Видимость	= РеквизитыКонтрагента.Поставщик Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.СрокОплатыПокупателя.Видимость	= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.СрокОплатыПоставщику.Видимость	= РеквизитыКонтрагента.Поставщик Или РеквизитыКонтрагента.ПрочиеОтношения;
		
		Список.Параметры.УстановитьЗначениеПараметра("Контрагент", ОтборКонтрагент);
		Элементы.ИспользоватьКакОсновной.Видимость = ПравоНаРедактирование;
		// Интеркампани
		Если ТипЗнч(ОтборКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
			Элементы.ВидЦен.Видимость				= Истина;
			Элементы.ВидСкидкиНаценки.Видимость		= Истина;
			Элементы.ВидЦенКонтрагента.Видимость	= Истина;
			Элементы.СрокОплатыПокупателя.Видимость	= Истина;
			Элементы.СрокОплатыПоставщику.Видимость	= Ложь;
		Иначе
			РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборКонтрагент,
				"Покупатель, Поставщик, ПрочиеОтношения");
			
			Элементы.ВидЦен.Видимость				= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.ВидСкидкиНаценки.Видимость		= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.ВидЦенКонтрагента.Видимость	= РеквизитыКонтрагента.Поставщик Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.СрокОплатыПокупателя.Видимость	= РеквизитыКонтрагента.Покупатель Или РеквизитыКонтрагента.ПрочиеОтношения;
			Элементы.СрокОплатыПоставщику.Видимость	= РеквизитыКонтрагента.Поставщик Или РеквизитыКонтрагента.ПрочиеОтношения;
			
		КонецЕсли;
	Иначе
		// Открытие в общем режиме
	
		Список.ТекстЗапроса = ТекстЗапросаОбщегоСписка();
		Элементы.Владелец.Видимость = Истина;
		Элементы.Взаиморасчеты.Видимость = Ложь;
		
		Элементы.ИспользоватьКакОсновной.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ПустаяДата", Дата('00010101'));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", ТекущаяДатаСеанса());
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Элементы.ПоказыватьНедействительных.Пометка);
		
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	Элементы.Список.МножественныйВыбор = ?(Параметры.ЗакрыватьПриВыборе = Неопределено, Ложь, Не Параметры.ЗакрыватьПриВыборе);
	Если Параметры.РежимВыбора Тогда
		КлючНазначенияИспользования = "ВыборПодбор";
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Иначе
		КлючНазначенияИспользования = "Список";
	КонецЕсли;
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.ДоговорыКонтрагентов);
	Элементы.ИзменитьВыделенные.Видимость = МожноРедактировать;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	Если НЕ Параметры.РежимВыбора И НЕ ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,Новый Структура("ОтборПериод", "СрокДействия"));
	Иначе
		РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,,,Истина);
	КонецЕсли;
	// Конец УНФ.ОтборыСписка
	
	ЗаполнитьДеревоКатегорий();
	
	УстановитьВидимость(ЭтаФорма);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ПраваяПанель.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	//<ЬЬ зил 2021-11-29 17:48:31 #заявка:~~~
	Если Параметры.Свойство("Продукт") Тогда
		_Продукт = Параметры.Продукт;
	КонецЕсли;
	//ЬЬ зил 2021-11-29 17:48:31 #заявка:~~~ >
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоДоговораВыполнена" Тогда
		УстановкаОсновногоДоговораВыполнена = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_КатегорииДоговоров" Тогда
		
		НоваяКатегория = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяКатегория = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяКатегория = Параметр;
		КонецЕсли;
		
		ЗаполнитьДеревоКатегорий(НоваяКатегория);
		
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	//УНФ.ОтборыСписка
	Если НЕ Параметры.РежимВыбора И НЕ ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		СохранитьНастройкиОтборов();
	КонецЕсли;
	//Конец УНФ.ОтборыСписка
КонецПроцедуры


&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборДействуетНа     = Настройки.Получить("ОтборДействуетНа");
	ОтборДоговорПодписан = Настройки.Получить("ОтборДоговорПодписан");
	КоличествоДнейКОповещению = Настройки.Получить("КоличествоДнейКОповещению");
	ОтборКатегорииТекущая = Настройки.Получить("ОтборКатегорииТекущая");
	
	УстановитьОтборы();
	ИзменитьОФормлениеОтображенияЗаканчивающихсяДоговоров();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		Элементы.ИспользоватьКакОсновной.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновнойДоговор;
	КонецЕсли;
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущийКонтрагент,
		Элементы.Владелец.Имя);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьНедействительных(Команда)
	
	Элементы.ПоказыватьНедействительных.Пометка = Не Элементы.ПоказыватьНедействительных.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Элементы.ПоказыватьНедействительных.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорПодписанПриИзменении(Элемент)
	УстановитьОтборДоговорПодписанСервер();
КонецПроцедуры


&НаКлиенте
Процедура ОтборДействуетНаПриИзменении(Элемент)
	УстановитьОтборДействуетНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекстВопроса = "";
	
	Если Не ПроверитьСоответствиеДоговораУсловиямДокумента(КонтролироватьВыборДоговора, ТекстВопроса, Значение, Организация, ОтборКонтрагент, ВидыДоговоров) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("Значение", Значение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокВыборЗначенияЗавершение", ЭтотОбъект, ПараметрыВопроса);
		ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|
			|Выбрать другой договор?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВыборЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОповеститьОВыборе(ДополнительныеПараметры.Значение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КоличествоДнейКОповещениюПриИзменении(Элемент)
	ИзменитьОФормлениеОтображенияЗаканчивающихсяДоговоров();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "СрокДействия");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) 
		Или Не (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") 
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Владелец", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	УстановитьВидимость(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДоговораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидДоговора", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтроки(Элемент)
	
	ДоступныКонтекстныеКоманды = ЗначениеЗаполнено(Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	Элементы.ОтборКатегорииКонтекстноеМенюИзменить.Доступность = ДоступныКонтекстныеКоманды;
	
	Если Элемент = Неопределено Тогда
		ОтборКатегорииПриАктивизацииСтрокиНаКлиенте();
	Иначе
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ОтборКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("Родитель", РодительКатегории(Элемент.ТекущиеДанные.Значение));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КатегорииДоговоров.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// Категории не перетаскиваем
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновной(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновнойДоговор Тогда
		
		Возврат;
	КонецЕсли;
	
	НовыйОсновнойДоговор = Элементы.Список.ТекущиеДанные.Ссылка;
	
	// Если открыта форма контрагента, то изменение основного договора выполняем в ней
	УстановкаОсновногоДоговораВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Контрагент", Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("НовыйОсновнойДоговор", НовыйОсновнойДоговор);
	
	ЗаписатьОсновнойДоговорКонтрагента(СтруктураПараметров);
	
	// Обновим динамический список
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникКатегории(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Если Элементы.ОтборКатегории.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КатегорииДоговоров.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(ЭтаФорма)
	СтрокиСКонтрагентом = ЭтаФорма.ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора","Владелец"));
	Элементы = ЭтаФорма.Элементы;
	Если  СтрокиСКонтрагентом.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ЭтаФорма.ОтборКонтрагент) Тогда
			Элементы.ИспользоватьКакОсновной.Видимость = ЭтаФорма.ПравоНаРедактирование;
			Элементы.ЭтоОсновнойДоговор.Видимость = Истина;
		Иначе
			Элементы.ИспользоватьКакОсновной.Видимость = Ложь;
			Элементы.ЭтоОсновнойДоговор.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ИспользоватьКакОсновной.Видимость = ЭтаФорма.ПравоНаРедактирование;
		Элементы.ЭтоОсновнойДоговор.Видимость = Истина;
		Если СтрокиСКонтрагентом.Количество() = 1 Тогда
			Элементы.Владелец.Видимость = Ложь;
		Иначе
			Элементы.Владелец.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьОФормлениеОтображенияЗаканчивающихсяДоговоров() Экспорт
	
	НайденноеОформление = Неопределено;
	Для Каждого Оформление Из  Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "ОтображениеЗаканчивающихсяДоговоров" Тогда
			НайденноеОформление = Оформление;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеОформление <> Неопределено Тогда
		Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Удалить(НайденноеОформление);
	КонецЕсли;
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	НовоеУсловноеОформление.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	НовоеУсловноеОформление.Представление = "ОтображениеЗаканчивающихсяДоговоров";
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора;
	Оформление.Использование 	= Истина;
	
	ГруппаЭлементовОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = КоличествоДнейКОповещению;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаОбщегоСписка()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентовПереопределяемый.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|	ДоговорыКонтрагентовПереопределяемый.Владелец КАК Владелец,
	|	ДоговорыКонтрагентовПереопределяемый.Родитель КАК Родитель,
	|	ДоговорыКонтрагентовПереопределяемый.Код КАК Код,
	|	ДоговорыКонтрагентовПереопределяемый.Наименование КАК Наименование,
	|	ДоговорыКонтрагентовПереопределяемый.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентовПереопределяемый.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентовПереопределяемый.Организация КАК Организация,
	|	ДоговорыКонтрагентовПереопределяемый.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентовПереопределяемый.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентовПереопределяемый.СрокОплатыПокупателя КАК СрокОплатыПокупателя,
	|	ДоговорыКонтрагентовПереопределяемый.СрокОплатыПоставщику КАК СрокОплатыПоставщику,
	|	ДоговорыКонтрагентовПереопределяемый.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентовПереопределяемый.ВидЦен КАК ВидЦен,
	|	ДоговорыКонтрагентовПереопределяемый.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	ДоговорыКонтрагентовПереопределяемый.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ОсновныеДоговорыКонтрагента.Договор ЕСТЬ НЕ NULL  КАК ЭтоОсновнойДоговор,
	|	ДоговорыКонтрагентовПереопределяемый.Недействителен КАК Недействителен,
	|	ДоговорыКонтрагентовПереопределяемый.Комментарий КАК Комментарий,
	|	ДоговорыКонтрагентовПереопределяемый.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентовПереопределяемый.СрокДействия = &ПустаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетБессрочно,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентовПереопределяемый.СрокДействия = &ПустаяДата
	|			ТОГДА 999
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, ДоговорыКонтрагентовПереопределяемый.СрокДействия, ДЕНЬ)
	|	КОНЕЦ КАК ОсталосьДнейПоДоговору,
	|	ДоговорыКонтрагентовПереопределяемый.ДополнительныеРеквизиты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		ТекстоваяСтрока КАК ТекстоваяСтрока
	|	) КАК ДополнительныеРеквизиты,
	|	ВЫБОР
	|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайлов.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентовПереопределяемый.КатегорияДоговора = ЗНАЧЕНИЕ(Справочник.КатегорииДоговоров.ПустаяСсылка)
	|			ТОГДА ""Без категории""
	|		ИНАЧЕ ДоговорыКонтрагентовПереопределяемый.КатегорияДоговора
	|	КОНЕЦ КАК КатегорияДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовПереопределяемый
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентовПереопределяемый.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО ДоговорыКонтрагентовПереопределяемый.Ссылка = НаличиеФайлов.ОбъектСФайлами}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОсновнойДоговорКонтрагента(СтруктураПараметров)
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.НовыйОсновнойДоговор,"Организация, ВидДоговора");
	
	РегистрыСведений.ОсновныеДоговорыКонтрагента.ОчиститьЗаписиСДоговором(СтруктураПараметров.НовыйОсновнойДоговор);
	
	Запись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	Запись.Организация = ПараметрыДоговора.Организация;
	Запись.ВидДоговора =  ПараметрыДоговора.ВидДоговора;
	Запись.Контрагент =  СтруктураПараметров.Контрагент;
	Запись.Договор = СтруктураПараметров.НовыйОсновнойДоговор;
	
	Запись.Записать();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Недействительный контрагент отображается серым
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;
	
	// 2.  заканчивается договор - отображаем оранжевым
	
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	НовоеУсловноеОформление.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	НовоеУсловноеОформление.Представление = "ОтображениеЗаканчивающихсяДоговоров";
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветТекстаПредупреждениеОбОкончанииДоговора;
	Оформление.Использование 	= Истина;
	
	ГруппаЭлементовОтбора = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = КоличествоДнейКОповещению;
	
	// 3.  отображение бессрочных в статусе
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("Текст");
	Оформление.Значение 		= НСтр("ru = 'Бессрочный'");
	Оформление.Использование 	= Истина;
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДействуетБессрочно");
	Отбор.ПравоеЗначение 	= Истина;
	ЭлементПоля = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	
	// 4.  закончился договор - отображаем красным
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ПросроченноеЗадание;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Меньше;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	Отбор.ПравоеЗначение 	= 0;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный"
			И ЭлементУсловногоОформления.Представление = "Не соответствуют условиям документа" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не КонтролироватьВыборДоговора Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ГруппаИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИЛИ.Использование = Истина;
	
	ЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Если Интеркампани И НЕ ЭтоПоступлениеДенег Тогда
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Организация;
	Иначе
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Организация;
	КонецЕсли; 
	
	Если ВидыДоговоров.Количество() > 0 Тогда
		ЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.ПравоеЗначение = ВидыДоговоров;
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	ЭлементУсловногоОформления.Представление = "Не соответствуют условиям документа";
	

КонецПроцедуры


&НаСервере
Функция НастройкиОформленияСпискаДоговоров()
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		Неопределено, -1, НСтр("ru = 'Просрочен'"));
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		0, 0, НСтр("ru = 'Заканчивается сегодня'"));
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		1, 1, НСтр("ru = 'Заканчивается завтра'"));
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(";%1 день;;%1 дня;%1 дней;%1 дня", РазностьДат);
		ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
			РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		7, 13, НСтр("ru = 'Осталась неделя'"));
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		14, 18, НСтр("ru = 'Осталось 2 недели'"));
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		19, 22, НСтр("ru = 'Осталось 3 недели'"));
	
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		23, 34, НСтр("ru = 'Остался месяц'"));
		
	ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных,
		35, Неопределено, " Осталось больше месяца");
	
	// Добавляем оформление для случая, когда  договор недействителен
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Недействителен'"));
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Недействителен");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле          = Новый ПолеКомпоновкиДанных("ОсталосьДнейПоДоговору");
	
	Возврат НастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияСписка(НастройкиКомпоновкиДанных, НижняяГраница, ВерхняяГраница, Текст = Неопределено, ЦветТекста = Неопределено)
	
	ПутьКДаннымПоля = "ОсталосьДнейПоДоговору";
	
	ЭлементУсловногоОформления = НастройкиКомпоновкиДанных.УсловноеОформление.Элементы.Добавить();
	
	Если ЦветТекста <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	КонецЕсли;
	
	Если Текст <> Неопределено Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	КонецЕсли;
	
	Если НижняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	ИначеЕсли ВерхняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	Иначе
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Использование = Истина;
		ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	Если Текст = Неопределено Тогда
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("Список");
	Иначе
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие реквизитов договора "Организация" и "ВидДоговора" переданным параметрам.
//
&НаСервереБезКонтекста
Функция ПроверитьСоответствиеДоговораУсловиямДокумента(КонтролироватьСоответствиеДокументу, ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
	
	Если Не КонтролироватьСоответствиеДокументу Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоКатегорий(КатегорияТекущейСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = ДеревоКатегорийДоговоров();
	ЗначениеВРеквизитФормы(Дерево, "ОтборКатегории");
	КоллекцияКатегорий = ОтборКатегории.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияКатегорий Цикл
		Если Элемент.Представление = НСтр("ru='<Без категории>'") Тогда
			Элемент.Значение = "Без категории";
		КонецЕсли;
	КонецЦикла;
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторСтроки = Неопределено;
	Если КатегорияТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборКатегории, КатегорияТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.Значение = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтрокиНаКлиенте()
	
	ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение;
	
	ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры
&НаСервере
Процедура ОтборКатегорииПриАктивизацииСтрокиНаСервере()
	
	УстановитьОтборПоКатегории(
		ЭтаФорма["Список"],
		ОтборКатегорииТекущая
	);
	
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		Элементы.Список.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РодительКатегории(Категория)
	
	Если НЕ ЗначениеЗаполнено(Категория) Или ТипЗнч(Категория) = Тип("Строка") Тогда
		Возврат Справочники.КатегорииДоговоров.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Категория, "Родитель");
	
	Возврат ДанныеКатегории.Родитель;
	
КонецФункции


&НаСервере
Функция ДеревоКатегорийДоговоров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииДоговоров.Ссылка КАК Значение,
	|	КатегорииДоговоров.Наименование КАК Представление
	|ИЗ
	|	Справочник.КатегорииДоговоров КАК КатегорииДоговоров
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииДоговоров.Родитель ИЕРАРХИЯ,
	|	КатегорииДоговоров.Наименование ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	
	СтрокаВсеКатегории = Дерево.Строки.Вставить(0);
	СтрокаВсеКатегории.Значение = Справочники.КатегорииДоговоров.ПустаяСсылка();
	СтрокаВсеКатегории.Представление = НСтр("ru='<Все категории>'");
	
	СтрокаБезКатегории = Дерево.Строки.Добавить();
	СтрокаБезКатегории.Значение = "Без категории";
	СтрокаБезКатегории.Представление = НСтр("ru='<Без категории>'");
	
	Возврат Дерево;
	
КонецФункции

// Устанавливает отбор списка номенклатуры по выбранной категории.
//
// Параметры:
//  Список				 - ДинамическийСписок - Список на форме.
//  ВыбраннаяКатегория	 - СправочникСсылка.КатегорииНоменклатуры - Категория, по которой требуется установить отбор.
//
&НаСервере
Процедура УстановитьОтборПоКатегории(Список, ВыбраннаяКатегория)
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,,
			"ОтборПоКатегории");
		Возврат;
		
	КонецЕсли;
	
	ГруппаОтборПоКатегории = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоКатегории",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияДоговора",
		ВидСравненияКомпоновкиДанных.Равно,
		ВыбраннаяКатегория,
		"ОтборПоКатегории",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияДоговора",
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВыбраннаяКатегория,
		"ОтборПоКатегорииВИерархии",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтролироватьВыборДоговора Тогда
		Если ЗначениеЗаполнено(ОтборКонтрагент)
			И ЗначениеЗаполнено(Организация)
			И ВидыДоговоров.Количество() > 0 Тогда
			
			Отказ = Истина;
			
			ДанныеЗаполненияДоговора = Новый Структура;
			ДанныеЗаполненияДоговора.Вставить("Владелец", ОтборКонтрагент);
			Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
				ДанныеЗаполненияДоговора.Вставить("Организация", ОтборОрганизация);
			Иначе
				ДанныеЗаполненияДоговора.Вставить("Организация", Организация);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтборВидДоговора) Тогда
				ДанныеЗаполненияДоговора.Вставить("ВидДоговора", ОтборВидДоговора);
			ИначеЕсли ВидыДоговоров.Количество() > 0 Тогда
				ДанныеЗаполненияДоговора.Вставить("ВидДоговора", ВидыДоговоров[0].Значение);
			КонецЕсли;
			
			//<ЬЬ зил 2021-11-29 17:49:21 #заявка:~~~
			ДанныеЗаполненияДоговора.Вставить("_Продукт", _Продукт);
			//ЬЬ зил 2021-11-29 17:49:21 #заявка:~~~ >
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполненияДоговора);
			
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
		КонецЕсли;
	Иначе
		
		ДанныеЗаполненияДоговора = Новый Структура;
		СтрокиСКонтрагентом = ЭтаФорма.ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора","Владелец"));
		Если СтрокиСКонтрагентом.Количество() > 0 Тогда
			ДанныеЗаполненияДоговора.Вставить("Владелец", СтрокиСКонтрагентом[0].Метка);
		КонецЕсли;
		
		СтрокиСОрганизацией = ЭтаФорма.ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора","Организация"));
		Если СтрокиСОрганизацией.Количество() > 0 Тогда
			ДанныеЗаполненияДоговора.Вставить("Организация", СтрокиСОрганизацией[0].Метка);
		КонецЕсли;
		
		СтрокиСВидомДоговора = ЭтаФорма.ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора","ВидДоговора"));
		Если СтрокиСВидомДоговора.Количество() > 0 Тогда
			ДанныеЗаполненияДоговора.Вставить("ВидДоговора", СтрокиСВидомДоговора[0].Метка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
			ДанныеЗаполненияДоговора.Вставить("КатегорияДоговора", ОтборКатегорииТекущая);
		КонецЕсли;
		
		Если ДанныеЗаполненияДоговора.Количество()> 0 Тогда
			
			Отказ = Истина;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполненияДоговора);
			
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

&НаКлиенте
Процедура ДекорацияСвернутьРазвернутьОтборыНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

#КонецОбласти

#Область ПанельКонтактнойИнформации

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформации()
	
	ДанныеПанелиКИ = ДанныеПанелиКонтактнойИнформации(ТекущийКонтрагент);
	КонтактнаяИнформацияПанельУНФКлиент.ЗаполнитьДанныеПанелиКИ(ЭтотОбъект, ДанныеПанелиКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПанелиКонтактнойИнформации(ВладелецКИ)
	
	Возврат КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(ВладелецКИ);
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьОтборы()
	УстановитьОтборДоговорПодписанСервер();
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборКатегории.ПолучитьЭлементы(), ОтборКатегорииТекущая, Ложь);
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторСтроки;
		ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДоговорПодписанСервер()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорПодписан",
		ОтборДоговорПодписан, , , ОтборДоговорПодписан);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДействуетНаСервер()
	
	ЧислоИзмененных = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"СрокДействия",
		,
		ОтборДействуетНа,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЗначениеЗаполнено(ОтборДействуетНа),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ЧислоИзмененных = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ДействуетБессрочно",
		,
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		ЗначениеЗаполнено(ОтборДействуетНа),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если ЧислоИзмененных = 0 Тогда
		
		ГруппаДействуетНа= ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, "ДействуетНа");
		
		Если ГруппаДействуетНа = Неопределено Тогда
			ГруппаДействуетНа = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
				"ДействуетНа",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетНа,
			"СрокДействия",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			ОтборДействуетНа,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДействуетНа,
			"ДействуетБессрочно",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			,
			ЗначениеЗаполнено(ОтборДействуетНа),
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	УстановитьВидимость(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

