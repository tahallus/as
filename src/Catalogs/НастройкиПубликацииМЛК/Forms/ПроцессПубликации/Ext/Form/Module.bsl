
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользовательСервисаЛогин  = Параметры.ПользовательСервисаЛогин;
	ПользовательСервисаПароль = Параметры.ПользовательСервисаПароль;
	КодАбонентаВладельца = Параметры.КодАбонентаВладельца;
	НастройкаПубликацииМЛК = Параметры.НастройкаПубликацииМЛК;
	
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	ЭтоСервис1СФреш = Справочники.НастройкиПубликацииМЛК.ЭтоСервис1СФреш();
	
	НастроитьВидимостьФормыПоУмолчанию(ЭтотОбъект);
	
	ОбновитьНастройкиКабинетКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("НачатьПубликациюНастроек", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПубликацию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодсказкаПроцессВыполнениеСинхронизацииПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = ДанныеОтбораЖурналаРегистрации(УзелОбмена);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьПубликацию(Команда)
	
	ЗакрытьПубликацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроцессПубликации(Команда)
	
	НастроитьВидимостьФормыПоУмолчанию(ЭтотОбъект);
	ПодключитьОбработчикОжидания("НачатьПубликациюНастроек", 0.3, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция КодПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьФормыПоУмолчанию(Форма)
	
	Форма.Элементы.ЗавершитьПубликацию.Видимость = Ложь;
	Форма.Элементы.ПовторитьПроцессПубликации.Видимость = Ложь;
	
	ВсеПроцессыПубликации = Новый Массив;
	ВсеПроцессыПубликации.Добавить("Регистрация");
	ВсеПроцессыПубликации.Добавить("ОжиданиеНастроек");
	ВсеПроцессыПубликации.Добавить("ОтправкаНастроек");
	ВсеПроцессыПубликации.Добавить("ПодготовкаДанных");
	ВсеПроцессыПубликации.Добавить("ВыполнениеСинхронизации");
	
	Для каждого ПроцессПубликации Из ВсеПроцессыПубликации Цикл
		ДекорацияПроцессПустой          = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Пустое"];
		ДекорацияПроцессВыполняется     = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Выполняется"];
		ДекорацияПроцессЗавершен        = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Успешно"];
		ДекорацияПроцессЗавершенОшибкой = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Ошибка"];
		
		ДекорацияПроцессПустой.Видимость          = Истина;
		ДекорацияПроцессВыполняется.Видимость     = Ложь;
		ДекорацияПроцессЗавершен.Видимость        = Ложь;
		ДекорацияПроцессЗавершенОшибкой.Видимость = Ложь;
	КонецЦикла;
	
	Форма.Элементы.ПодсказкаПроцессВыполнениеСинхронизацииПодсказка.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПубликациюНастроек()
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Шаг", 0);
	
	ПродолжитьПубликациюНастроек(Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеНачалоПроцесса()
	
	ДекорацияОтступСлева        = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Пустое"];
	ДекорацияПроцессВыполняется = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПодсказка          = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации];
	
	ДекорацияОтступСлева.Видимость = Ложь;
	ДекорацияПроцессВыполняется.Видимость = Истина;
	ДекорацияПодсказка.ЦветТекста = Новый Цвет(51, 51, 51);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗавершениеПроцесса()
	
	ДекорацияПроцессВыполняется = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПроцессЗавершен    = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Успешно"];
	
	ДекорацияПроцессВыполняется.Видимость = Ложь;
	ДекорацияПроцессЗавершен.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗавершениеПроцессаОшибка()
	
	ДекорацияПроцессЗавершен       = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Успешно"];
	ДекорацияПроцессВыполняется    = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПроцессЗавершенОшибка = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Ошибка"];
	
	ДекорацияПроцессЗавершен.Видимость = Ложь;
	ДекорацияПроцессВыполняется.Видимость = Ложь;
	ДекорацияПроцессЗавершенОшибка.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПубликациюНастроек(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ = Истина Тогда
		ОбновитьСостояниеЗавершениеПроцессаОшибка();
		Элементы.ПовторитьПроцессПубликации.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПроцессПубликации) Тогда
		ОбновитьСостояниеЗавершениеПроцесса();
	КонецЕсли;
	
	ТекущийШаг = ДополнительныеПараметры.Шаг + 1;
	ДополнительныеПараметры.Шаг = ТекущийШаг;
	СледующийПроцессПубликации = СледующийПроцессПубликации(ТекущийШаг);
	Продолжение = Новый ОписаниеОповещения("ПродолжитьПубликациюНастроек", ЭтотОбъект, ДополнительныеПараметры);
	ПубликацияЗавершена = СледующийПроцессПубликации = Неопределено;
	
	Если ПубликацияЗавершена Тогда
		Элементы.ЗавершитьПубликацию.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеНачалоПроцесса();
	ВыполнитьОбработкуОповещения(СледующийПроцессПубликации, Продолжение);
	
КонецПроцедуры

&НаКлиенте
Функция СледующийПроцессПубликации(НомерШага)
	
	ТекущийПроцессПубликации = ПроцессыПубликации().Получить(НомерШага);
	
	Если ТекущийПроцессПубликации = "Регистрация" Тогда
		Возврат Новый ОписаниеОповещения("НачатьПроцессРегистрация", ЭтотОбъект);
	ИначеЕсли ТекущийПроцессПубликации = "ОжиданиеНастроек" Тогда
		Возврат Новый ОписаниеОповещения("НачатьПроцессОжиданиеНастроек", ЭтотОбъект);
	ИначеЕсли ТекущийПроцессПубликации = "ОтправкаНастроек" Тогда
		Возврат Новый ОписаниеОповещения("НачатьПроцессОтправкаНастроек", ЭтотОбъект);
	ИначеЕсли ТекущийПроцессПубликации = "ПодготовкаДанных" Тогда
		Возврат Новый ОписаниеОповещения("НачатьПроцессПодготовкаДанных", ЭтотОбъект);
	ИначеЕсли ТекущийПроцессПубликации = "ВыполнениеСинхронизации" Тогда
		Возврат Новый ОписаниеОповещения("НачатьПроцессВыполнениеСинхронизации", ЭтотОбъект);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроцессыПубликации()
	
	ПроцессыПубликации = Новый Соответствие();
	ПроцессыПубликации.Вставить(1, "Регистрация");
	ПроцессыПубликации.Вставить(2, "ОжиданиеНастроек");
	ПроцессыПубликации.Вставить(3, "ОтправкаНастроек");
	ПроцессыПубликации.Вставить(4, "ПодготовкаДанных");
	ПроцессыПубликации.Вставить(5, "ВыполнениеСинхронизации");
	Возврат ПроцессыПубликации;
	
КонецФункции

&НаКлиенте
Процедура НачатьПроцессРегистрация(Продолжение, ДополнительныеПараметры) Экспорт
	ОбновитьНастройкиКабинетКлиента();
	НачатьПодготовкуПриложенияКабинетКлиентаЕслиНеобходимо(Продолжение);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроцессОжиданиеНастроек(Продолжение, ДополнительныеПараметры) Экспорт
	ОбновитьНастройкиКабинетКлиента(Истина);
	// Исправление ошибки дублирования узлов обмена.
	ПопытатьсяИсправитьОшибкуДублированияУзловЕслиНеобходимо();
	// Конец.
	НачатьСозданиеУзлаОбменаЕслиНеобходимо(Продолжение);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроцессОтправкаНастроек(Продолжение, ДополнительныеПараметры) Экспорт
	ОбновитьНастройкиКабинетКлиента();
	ОтправитьНастройкиВКабинетКлиента(Продолжение);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроцессПодготовкаДанных(Продолжение, ДополнительныеПараметры) Экспорт
	ОбновитьНастройкиКабинетКлиента();
	НачатьОбновлениеРеквизитовУзлаОбмена(Продолжение);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроцессВыполнениеСинхронизации(Продолжение, ДополнительныеПараметры) Экспорт
	ОбновитьНастройкиКабинетКлиента();
	НачатьСинхронизациюУзлаОбмена(Продолжение);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПубликацию()
	
	Результат = Новый Структура;
	Результат.Вставить("ПубликацияОбновлена", ПубликацияЗавершена);
	Результат.Вставить("УзелОбмена", УзелОбмена);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНастройкуСинхронизацииДанных()
	
	Если НЕ ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелОбмена) Тогда
		ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(УзелОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиИнтеграцииКабинетКлиента(
		НастройкаПубликацииМЛК,
		ОписаниеПриложения = Неопределено,
		ДанныеАвторизации = Неопределено,
		УзелОбмена = Неопределено)
	
	Справочники.НастройкиПубликацииМЛК.СохранитьНастройкиИнтеграцииКабинетКлиента(
		НастройкаПубликацииМЛК, ОписаниеПриложения, ДанныеАвторизации, УзелОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиКабинетКлиента(ПолучатьПароль = Ложь)
	
	Если ПолучатьПароль Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	ТекущиеНастройкиКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	
КонецПроцедуры

#Область ПодготовкаПриложения

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаЕслиНеобходимо(Продолжение)
	
	ПроверитьВключитьОбменыДанными();
	
	Если ПриложениеУжеГотово() Тогда
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	Если ЭтоСервис1СФреш Тогда
		НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Продолжение);
	ИначеЕсли ПользовательЗарегистрированВСервисе() Тогда
		НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Продолжение);
	Иначе
		НачатьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Продолжение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриложениеУжеГотово()
	
	ТекущиеНастройкиКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	
	ПриложениеУжеГотово = ТекущиеНастройкиКабинетКлиента <> Неопределено
		И ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.АдресПриложения);
	Возврат ПриложениеУжеГотово;
	
КонецФункции

&НаСервере
Функция ПользовательЗарегистрированВСервисе()
	
	Если НЕ ЗначениеЗаполнено(ПользовательСервисаЛогин) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСервисФреш.НовыйДанныеАвторизации();
	ДанныеАвторизации.Логин = ПользовательСервисаЛогин;
	Возврат ИнтеграцияСервисФреш.ПользовательЗарегистрированВСервисе(ПользовательСервисаЛогин);
	
КонецФункции

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК, ПользовательСервисаЛогин, ПользовательСервисаПароль, КодАбонентаВладельца);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru='Не удалось зарегистрироваться по причине:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru='Не удалось зарегистрироваться по причине:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаНовыйАбонент();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаНовыйАбонент", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаНовыйАбонент()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаНовыйАбонент";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК, ПользовательСервисаЛогин);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru='Не удалось зарегистрироваться по причине:
			|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеУзлаОбменаПриложениеКабинетКлиента

&НаСервере
Функция УзелПланаОбменаПоКоду(КодУзла)
	
	Возврат ОбменДаннымиСервер.УзелПланаОбменаПоКоду(
		Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя,
		КодУзла);
	
КонецФункции

&НаСервере
Функция НастройкиПодключенияУзлаОбмена()
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	НастройкиПодключения.Вставить("WSURLВебСервиса", ТекущиеНастройкиКабинетКлиента.АдресПриложения);
	НастройкиПодключения.Вставить("WSИмяПользователя", ТекущиеНастройкиКабинетКлиента.Пользователь);
	НастройкиПодключения.Вставить("WSПароль", ТекущиеНастройкиКабинетКлиента.Пароль);
	НастройкиПодключения.Вставить("ИмяПланаОбмена",
		Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя);
	НастройкиПодключения.Вставить("ИдентификаторИнформационнойБазыИсточника",
		КодПредопределенногоУзлаПланаОбмена(НастройкиПодключения.ИмяПланаОбмена));
	
	Возврат НастройкиПодключения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПараметровПомощникаПодключенияУзлаОбмена(СтруктураНастроекПомощника, ПараметрыКорреспондента)
	
	ИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	ИмяПланаОбменаКорреспондента = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	ФорматОбмена = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
	ИдентификаторНастройки = "КабинетКлиента";
	
	ИдентификаторИнформационнойБазыИсточника = ОбменДаннымиСервер.КодПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена);
	ИдентификаторИнформационнойБазыПриемника = ПараметрыКорреспондента.КодЭтогоУзла;
	
	Префикс = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Если ПустаяСтрока(Префикс) Тогда
		ДоступноИзменениеПрефикса = Истина;
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыКорреспондента.ПрефиксИнформационнойБазы) Тогда
		ПрефиксКорреспондента = ПараметрыКорреспондента.ПрефиксИнформационнойБазы;
		ДоступноИзменениеПрефиксаКорреспондента = Ложь;
	Иначе
		ПрефиксКорреспондента = ПараметрыКорреспондента.ПрефиксИнформационнойБазыПоУмолчанию;
		ДоступноИзменениеПрефиксаКорреспондента = Истина;
	КонецЕсли;
	
	УзелОбмена = Неопределено;
	
	ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента = ПараметрыКорреспондента.ИспользоватьПрефиксыДляНастройкиОбмена;
	ИспользоватьПрефиксыДляНастройкиОбмена = Не ОбменДаннымиXDTOСервер.ПоддерживаетсяВерсияСИдентификаторомОбменаДанными(
		ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка());
	
	ВерсияФорматаОбмена = "1.6";
	ПоддерживаемыеОбъектыФорматаКорреспондента = Новый ХранилищеЗначения(
			ПараметрыКорреспондента.ПоддерживаемыеОбъектыФормата, Новый СжатиеДанных(9));
	ИнтернетВебАдрес = НастройкиПодключенияУзлаОбмена().WSURLВебСервиса;
	ИнтернетЗапомнитьПароль = Истина;
	ИнтернетИмяПользователя = НастройкиПодключенияУзлаОбмена().WSИмяПользователя;
	ИнтернетПароль = НастройкиПодключенияУзлаОбмена().WSПароль;
	Наименование = ОбменДаннымиВМоделиСервиса.СформироватьНаименованиеПредопределенногоУзла();
	Если ЗначениеЗаполнено(ПараметрыКорреспондента.НаименованиеИнформационнойБазы) Тогда
		НаименованиеКорреспондента = ПараметрыКорреспондента.НаименованиеИнформационнойБазы;
	Иначе
		НаименованиеКорреспондента = ПараметрыКорреспондента.НаименованиеИнформационнойБазыПоУмолчанию;
	КонецЕсли;
	ВидПодключения = "Интернет";
	
	
	СтруктураНастроекПомощника.Вставить("ИмяПланаОбмена",               ИмяПланаОбмена);
	СтруктураНастроекПомощника.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбменаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ВариантНастройкиОбмена", ИдентификаторНастройки);
	
	СтруктураНастроекПомощника.Вставить("ФорматОбмена", ФорматОбмена);
	
	СтруктураНастроекПомощника.Вставить("ВариантРаботыМастера", "НастроитьНовыйОбменДанными");
	
	СтруктураНастроекПомощника.Вставить("СсылкаНового", Неопределено);
	
	СтруктураНастроекПомощника.Вставить("КодПредопределенногоУзла", ИдентификаторИнформационнойБазыИсточника);
		
	СтруктураНастроекПомощника.Вставить("КодНовогоУзлаВторойБазы", ИдентификаторИнформационнойБазыПриемника);
	СтруктураНастроекПомощника.Вставить("КодУзлаКорреспондента",   ИдентификаторИнформационнойБазыПриемника);
	
	СтруктураНастроекПомощника.Вставить("НаименованиеЭтойБазы",   Наименование);
	СтруктураНастроекПомощника.Вставить("НаименованиеВторойБазы", НаименованиеКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ПрефиксИнформационнойБазыИсточника", Префикс);
	СтруктураНастроекПомощника.Вставить("ПрефиксИнформационнойБазыПриемника", ПрефиксКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("УзелИнформационнойБазы", УзелОбмена);
	
	СтруктураНастроекПомощника.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена",               ИспользоватьПрефиксыДляНастройкиОбмена);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ИдентификаторИнформационнойБазыИсточника", ИдентификаторИнформационнойБазыИсточника);
	СтруктураНастроекПомощника.Вставить("ИдентификаторИнформационнойБазыПриемника", ИдентификаторИнформационнойБазыПриемника);
	
	СтруктураНастроекПомощника.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными",
		ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными().ВерсияФорматаНастроекОбменаДанными());
		
	СтруктураНастроекПомощника.Вставить("ВерсияФорматаОбмена", ВерсияФорматаОбмена);
	СтруктураНастроекПомощника.Вставить("ПоддерживаемыеОбъектыФормата", ПоддерживаемыеОбъектыФорматаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("WSURLВебСервиса", ИнтернетВебАдрес);
	СтруктураНастроекПомощника.Вставить("WSЗапомнитьПароль", ИнтернетЗапомнитьПароль);
	СтруктураНастроекПомощника.Вставить("WSИмяПользователя", ИнтернетИмяПользователя);
	СтруктураНастроекПомощника.Вставить("WSПароль", ИнтернетПароль);
	
	СтруктураНастроекПомощника.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаCOM",   Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаEMAIL", Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаFILE",  Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаFTP",   Ложь);
	СтруктураНастроекПомощника.Вставить("ПарольАрхиваСообщенияОбмена", "");
	
	СтруктураНастроекПомощника.Вставить("ИсправитьДублированиеНастроекСинхронизации", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеУзлаОбменаЕслиНеобходимо(Продолжение)
	
	УзелОбмена = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена) Тогда
		УзелОбмена = УзелПланаОбменаПоКоду(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена);
	КонецЕсли;
	
	УзелОбменаУжеСоздан = ЗначениеЗаполнено(УзелОбмена);
	Если УзелОбменаУжеСоздан Тогда
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	ПроверитьПодключениеККорреспонденту();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ПроверитьПодключениеККорреспондентуЗавершение", ЭтотОбъект,
		Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеККорреспонденту()
	
	НастройкиПодключения = НастройкиПодключенияУзлаОбмена();
	
	МетодПроверкаПодключения = "Обработки.ПомощникСозданияОбменаДанными.ПроверитьПодключениеККорреспонденту";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(МетодПроверкаПодключения, ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеККорреспондентуЗавершение(Результат, Продолжение) Экспорт
	Отказ = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПодключения(Результат.АдресРезультата, Отказ);
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("СохранитьНастройкиПодключенияЗавершение", ЭтотОбъект, Продолжение);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПодключения(АдресРезультатПроверки, Отказ)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресРезультатПроверки);
	
	ПроверкаПодключенияВыполнена = РезультатПроверки.ПодключениеУстановлено
		И РезультатПроверки.ПодключениеРазрешено;
	
	Если Не ПроверкаПодключенияВыполнена
		И Не ПустаяСтрока(РезультатПроверки.СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.СообщениеОбОшибке, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорреспондента = РезультатПроверки.ПараметрыКорреспондента;
	НастройкиПодключения = Новый Структура;
	ЗаполнитьСтруктуруПараметровПомощникаПодключенияУзлаОбмена(НастройкиПодключения, ПараметрыКорреспондента);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	МетодСохранитьНастройкиПодключения = "Обработки.ПомощникСозданияОбменаДанными.СохранитьНастройкиПодключения";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиПодключения", НастройкиПодключения);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(МетодСохранитьНастройкиПодключения, ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодключенияЗавершение(Результат, Продолжение) Экспорт
	Отказ = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПодключенияЗавершениеСервер(Результат.АдресРезультата, Отказ);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ПослеПопыткиСозданияУзлаОбмена(Продолжение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПодключенияЗавершениеСервер(АдресРезультатПодключения, Отказ)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатПодключения);
	
	Если ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	УзелОбмена = Результат.УзелОбмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПопыткиСозданияУзлаОбмена(Продолжение) Экспорт
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		ТекстОшибки = НСтр("ru='Не удалось создать узел обмена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ЗавершитьНастройкуСинхронизацииДанных();
	СохранитьНастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК, , , УзелОбмена);
	
	Оповестить("Запись_УзелПланаОбмена");
	
	НачатьНачальнуюРегистрациюИзмененийУзлаОбмена(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьНачальнуюРегистрациюИзмененийУзлаОбмена(Продолжение)
	
	ДлительнаяОперация = ВыполнитьНачальнуюРегистрациюИзмененийУзлаОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьНачальнуюРегистрациюИзмененийУзлаОбмена", ЭтотОбъект,
		Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьНачальнуюРегистрациюИзмененийУзлаОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ЗарегистрироватьДанныеДляНачальнойВыгрузки";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьНачальнуюРегистрациюИзмененийУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru='Не удалось зарегистрировать данные к первоначальной выгрузке по причине:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НастроитьЗапускСинхронизацииПоРасписанию(УзелОбмена);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВключитьОбменыДанными()
	
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	Если НЕ ИспользоватьСинхронизациюДанных Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗапускСинхронизацииПоРасписанию(Корреспондент)
	
	РасписаниеСинхронизации = РасписаниеСинхронизации();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обмен данными с внешней системой (%1)'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код"));
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("ИмяМетода",     "ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы");
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
		ПараметрыОбмена.ДлительнаяОперация = Истина;
		ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
		ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
		ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
		ПараметрыОбмена.ИнтервалОжиданияНаСервере = 10;
		
		ПараметрыЗадания.Вставить("Параметры", Новый Массив);
		ПараметрыЗадания.Параметры.Добавить(УзелОбмена);
		ПараметрыЗадания.Параметры.Добавить(ПараметрыОбмена);
		ПараметрыЗадания.Параметры.Добавить(Ложь);
		
		ПараметрыЗадания.Вставить("Ключ",       КлючЗадания);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеСинхронизации);
		
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелОбмена, РасписаниеСинхронизации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасписаниеСинхронизации()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПятьМинутВСекундах = 300;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели   = ДниНедели;
	Расписание.Месяцы      = Месяцы;
	Расписание.ПериодПовтораВТечениеДня = ПятьМинутВСекундах;
	Расписание.ПериодПовтораДней        = 1; // Каждый день.
	
	Возврат Расписание;
	
КонецФункции

#КонецОбласти

#Область ОтправкаНастроекВКабинетКлиента

&НаКлиенте
Процедура ОтправитьНастройкиВКабинетКлиента(Продолжение)
	Отказ = Ложь;
	
	ОтправитьНастройкиПубликацииМЛКвПриложениеКабинетКлиента(Отказ);
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНастройкиПубликацииМЛКвПриложениеКабинетКлиента(Отказ)
	
	Попытка
		КонструкторМобильногоПриложения.СоздатьИзменитьСлужебногоПользователяКабинетКлиента(Истина);
		
		НастройкаПубликацииМЛКОбъект = НастройкаПубликацииМЛК.ПолучитьОбъект();
		НастройкаПубликацииМЛКОбъект.ОтправитьДанныеВПриложениеКабинетКлиента();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияУзлаОбмена

&НаКлиенте
Процедура НачатьОбновлениеРеквизитовУзлаОбмена(Продолжение)
	
	ДлительнаяОперация = ОбновитьРеквизитыУзлаОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьОбновлениеРеквизитовУзлаОбмена", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьРеквизитыУзлаОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.АктуализироватьИзмененияПланаОбмена";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК,
		УзелОбмена);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбновлениеРеквизитовУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru='Не удалось обновить изменения в узле обмена по причине:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеСинхронизацииПриложениеКабинетКлиента

&НаКлиенте
Процедура НачатьСинхронизациюУзлаОбмена(Продолжение)
	
	КоличествоПовторовСинхронизации = КоличествоПовторовСинхронизации + 1;
	
	ДлительнаяОперация = СинхронизироватьУзелОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьСинхронизациюУзлаОбмена", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьУзелОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	РазрешитьДлительнуюОперацию = КоличествоПовторовСинхронизации > 1;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.СинхронизироватьУзелОбмена";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, Метод, УзелОбмена, РазрешитьДлительнуюОперацию);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСинхронизациюУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось запустить синхронизацию узла обмена по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	Иначе
		ОбменЗавершенУспешно = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Если ОбменЗавершенУспешно = Ложь Тогда
		Отказ = Истина;
		Элементы.ПодсказкаПроцессВыполнениеСинхронизацииПодсказка.Видимость = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ДанныеОтбораЖурналаРегистрации(УзелИнформационнойБазы)
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных));
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	СостоянияОбменовДаннымиЗагрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СостоянияОбменовДаннымиВыгрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
	Результат.Вставить("ДатаНачала", Мин(СостоянияОбменовДаннымиЗагрузка.ДатаНачала,
		СостоянияОбменовДаннымиВыгрузка.ДатаНачала));
	Результат.Вставить("ДатаОкончания", Макс(СостоянияОбменовДаннымиЗагрузка.ДатаОкончания,
		СостоянияОбменовДаннымиВыгрузка.ДатаОкончания));
	
	Возврат Результат;
	
КонецФункции

#Область ИсправлениеОшибкиДублированияУзлов

&НаКлиенте
Процедура ПопытатьсяИсправитьОшибкуДублированияУзловЕслиНеобходимо()
	
	ПопытатьсяИсправитьОшибкуДублированияУзловЕслиНеобходимоСервер();
	ОбновитьНастройкиКабинетКлиента(Истина);
	
КонецПроцедуры

&НаСервере
Функция УзлыОбменаКабинетКлиента()
	
	ВариантНастройки = "КабинетКлиента";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = &ВариантНастройки";
	Запрос.УстановитьПараметр("ВариантНастройки", ВариантНастройки);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ПопытатьсяИсправитьОшибкуДублированияУзловЕслиНеобходимоСервер()
	
	Если ПопыткаУдаленияДублированияУзловККВыполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru='МобильныйЛичныйКабинет.ПопытатьсяИсправитьОшибкуДублированияУзловЕслиНеобходимо'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	НастройкаИнтеграцииКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	УзлыОбменаКабинетКлиента = УзлыОбменаКабинетКлиента();
	
	ЕстьОшибкаДублированияУзлов = НастройкаИнтеграцииКабинетКлиента.КодУзлаОбмена = "КЛ"
		И УзлыОбменаКабинетКлиента.Количество() = 2;
	
	Если Не ЕстьОшибкаДублированияУзлов Тогда
		ОтразитьПопыткуУдаленияДублированияУзловКК();
		Возврат;
	КонецЕсли;
	
	УдаляемыйУзел = Неопределено;
	КодПравильногоУзла = Неопределено;
	Для каждого Узел Из УзлыОбменаКабинетКлиента Цикл
		КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "Код");
		Если КодУзла = "КЛ" Тогда
			УдаляемыйУзел = Узел;
		Иначе
			КодПравильногоУзла = КодУзла;
		КонецЕсли;
	КонецЦикла;
	
	Комментарий = НСтр("ru='Есть ошибка дублирования узлов.
	|КодПравильногоУзла: %1'");
	Комментарий = СтрШаблон(Комментарий, КодПравильногоУзла);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Примечание,, НастройкаИнтеграцииКабинетКлиента, Комментарий);
	
	Если Не ЗначениеЗаполнено(УдаляемыйУзел) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		БлокировкаДанных.Добавить("РегистрСведений.НастройкиИнтеграцииКабинетКлиента");
		БлокировкаДанных.Заблокировать();
		
		ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(УдаляемыйУзел);
		
		НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииКабинетКлиента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаПубликации.Установить(НастройкаПубликацииМЛК);
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.КодУзлаОбмена = КодПравильногоУзла;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		ОтразитьПопыткуУдаленияДублированияУзловКК();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПопыткаУдаленияДублированияУзловККВыполнена()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПопыткаУдаленияДублированияУзловККВыполнена.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтразитьПопыткуУдаленияДублированияУзловКК()
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПопыткаУдаленияДублированияУзловККВыполнена.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
