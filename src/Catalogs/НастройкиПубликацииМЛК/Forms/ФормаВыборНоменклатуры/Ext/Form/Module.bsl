#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация значений для сравнения
	МаксимумСтрок = 5000;
	
	ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
	
	Если Параметры.Свойство("ОтборГруппыКатегорииНоменклатуры") Тогда
		ОтборКатегорииИерархияПереключатель = Параметры.ОтборГруппыКатегорииНоменклатуры;
	КонецЕсли;
	
	ОтобразитьКатегорииИлиГруппы();
	
	Если ЗначениеЗаполнено(Параметры.АдресКаталогаТоваров) Тогда
		ТЗ = ПолучитьИзВременногоХранилища(Параметры.АдресКаталогаТоваров);
		МассивНоменклатуры = ТЗ.ВыгрузитьКолонку("Номенклатура");
		СписокВыбранных.ЗагрузитьЗначения(МассивНоменклатуры);
	КонецЕсли;
	
	Если Параметры.Свойство("ВидЦен") Тогда
		ВидЦен = Параметры.ВидЦен;
	Иначе
		ВидЦен = Справочники.ВидыЦен.Оптовая;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиВыгрузкиРеквизитов") Тогда
		НастройкиВыгрузкиРеквизитов = Параметры.НастройкиВыгрузкиРеквизитов;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресПриложения") Тогда
		АдресПриложения = Параметры.АдресПриложения;
	КонецЕсли;
	
	ЗаполнитьДеревоИзСохраненныхДанных(Параметры.АдресКаталогаТоваров);
	ОбновитьИнформациюОКоличествеИРазмереКартинок();
	
	ДоступныеРеквизиты = ПолучитьСписокДоступныхРеквизитов();
	ДополнительныеРеквизиты = ПолучитьСписокДополнительныхРеквизитов(МассивВыбраннойНоменклатуры());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеРеквизиты, ДополнительныеРеквизиты, Истина);
	
	Элементы.ВыбратьРеквизиты.Заголовок = НастройкиВыгрузкиРеквизитовПредставление(ДоступныеРеквизиты);
	
	УстановитьПараметрыВидЦенВСписках();
	
	УстановитьОтборы();
	
	Если Параметры.Свойство("КодКомпании") Тогда
		КодОбласти = СтрЗаменить(Параметры.КодКомпании, Символ(160), "");
	КонецЕсли;
	
	Если Параметры.Свойство("АдресИндивидуальныхЦен") И Параметры.АдресИндивидуальныхЦен <> "" Тогда
		УстановкаИндивидуальныхЦен.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресИндивидуальныхЦен));
		Для каждого Строка Из УстановкаИндивидуальныхЦен Цикл
			
			Если Не ЗначениеЗаполнено(Строка.ВидЦен) Тогда
				ВидЦенИзДоговора = ВидЦенИзДоговора(Строка.Договор);
				Если ЗначениеЗаполнено(ВидЦенИзДоговора) Тогда
					Строка.ВидЦенИзДоговора = НСтр("ru ='Из договора:'") + Символ(32) + Строка(ВидЦенИзДоговора);
				Иначе
					Строка.ВидЦенИзДоговора = НСтр("ru ='В договоре отсутствует вид цен'");
				КонецЕсли;
			КонецЕсли;
			
			КоличествоСимволовВКоде = СтрДлина(Строка.КодКлиента);
			КодКлиентаСМаской = "";
			Для Счетчик = 1 По КоличествоСимволовВКоде Цикл
				ТекСимвол = Сред(Строка.КодКлиента, Счетчик, 1);
				КодКлиентаСМаской = КодКлиентаСМаской + ТекСимвол;
				Если Счетчик%3 = 0 И Счетчик <> КоличествоСимволовВКоде Тогда
					КодКлиентаСМаской = КодКлиентаСМаской + "-";
				КонецЕсли;
			КонецЦикла;
			Строка.КодКлиентаСМаской = КодКлиентаСМаской;
			Если ЗначениеЗаполнено(Строка.ВидЦен) Тогда
				Строка.ВидЦенСлужебнаяСсылка = Строка.ВидЦен;
			Иначе
				Строка.ВидЦенСлужебнаяСсылка = ВидЦенИзДоговора(Строка.Договор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость = НЕ ЗначениеЗаполнено(КодОбласти);
	Если Элементы.ГруппаСтраницыПодсказкаАссистента.Видимость Тогда
		Элементы.УстановкаИндивидуальныхЦен.ТолькоПросмотр = Истина;
		Элементы.ГруппаКнопки.Доступность = Ложь;
	КонецЕсли;
	
	ПроверитьНаличиеТоваровСНулевойЦеной();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Выбор_Контрагент" Тогда
		Если Источник.ВладелецФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник.ВладелецФормы = ЭтотОбъект Тогда
			КонтрагентыМассив = Параметр.Контрагент;
			Для каждого Контрагент Из КонтрагентыМассив Цикл
				НайденнаяСтрокаМассив = УстановкаИндивидуальныхЦен.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
				Если НайденнаяСтрокаМассив.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = УстановкаИндивидуальныхЦен.Добавить();
				НоваяСтрока.Контрагент = Контрагент;
				НоваяСтрока.Используется = Истина;
				НоваяСтрока.Договор = ПолучитьДоговорПоУмолчанию(Контрагент);
				ВидЦенИзДоговора = ВидЦенИзДоговора(НоваяСтрока.Договор);
				Если ЗначениеЗаполнено(ВидЦенИзДоговора) Тогда
					НоваяСтрока.ВидЦенИзДоговора = НСтр("ru ='Из договора:'") + Символ(32) + Строка(ВидЦенИзДоговора);
					НоваяСтрока.ВидЦенСлужебнаяСсылка = ВидЦенИзДоговора;
				Иначе
					НоваяСтрока.ВидЦенИзДоговора = НСтр("ru ='В договоре отсутствует вид цен'");
					НоваяСтрока.ВидЦенСлужебнаяСсылка = Неопределено;
				КонецЕсли;
				НоваяСтрока.КодКлиентаСМаской = СоздатьКодКлиента();
				НоваяСтрока.КодКлиента = СтрЗаменить(НоваяСтрока.КодКлиентаСМаской, "-", ""); 
			КонецЦикла;
			ПроверитьНаличиеТоваровСНулевойЦеной();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "УстановитьИндивидуальныеЦеныДляКонтрагента" Тогда
		
		КнопкаУстановкаИндивидуальныхЦен(Неопределено);
		
		НайденнаяСтрокаМассив = УстановкаИндивидуальныхЦен.НайтиСтроки(Новый Структура("Контрагент", Параметр));
		Если НайденнаяСтрокаМассив.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = УстановкаИндивидуальныхЦен.Добавить();
		НоваяСтрока.Контрагент = Параметр;
		НоваяСтрока.Используется = Истина;
		НоваяСтрока.Договор = ПолучитьДоговорПоУмолчанию(Параметр);
		ВидЦенИзДоговора = ВидЦенИзДоговора(НоваяСтрока.Договор);
		Если ЗначениеЗаполнено(ВидЦенИзДоговора) Тогда
			НоваяСтрока.ВидЦенИзДоговора = НСтр("ru ='Из договора:'")+ Символ(32) + Строка(ВидЦенИзДоговора);
			НоваяСтрока.ВидЦенСлужебнаяСсылка = ВидЦенИзДоговора;
		Иначе
			НоваяСтрока.ВидЦенИзДоговора = НСтр("ru ='В договоре отсутствует вид цен'");
			НоваяСтрока.ВидЦенСлужебнаяСсылка = Неопределено;
		КонецЕсли;
		НоваяСтрока.КодКлиентаСМаской = СоздатьКодКлиента();
		НоваяСтрока.КодКлиента = СтрЗаменить(НоваяСтрока.КодКлиентаСМаской, "-", ""); 
		ПроверитьНаличиеТоваровСНулевойЦеной();
		
		ЭтаФорма.Элементы.УстановкаИндивидуальныхЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СписокНоменклатурыВБазеГруппыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбраннойПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбраннойОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		СписокНоменклатурыВыбраннойОкончаниеПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВБазеКатегорииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВБазеГруппыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение", Массив), Ложь, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВБазеКатегорииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение", Массив), Ложь, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбраннойВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Удалить1ИзВыгрузкиНаСервере(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВсеВВыгрузку(Команда)
	
	Если Элементы.СписокНоменклатурыВБазеГруппы.Видимость Тогда
		ТекущиеДанные = Элементы.СписокНоменклатурыВБазеГруппы.ТекущиеДанные;
		ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение",ПолучитьГруппыИНоменклатуруДляПолногоПереноса()), Ложь, Неопределено, Неопределено)
		
	КонецЕсли;
	
	Если Элементы.СписокНоменклатурыВБазеКатегории.Видимость Тогда
		ТекущаяСтрока = Элементы.СписокНоменклатурыВБазеКатегории.ТекущаяСтрока;
		ТекущиеДанные = Элементы.СписокНоменклатурыВБазеКатегории.ТекущиеДанные;
		ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение",ПолучитьГруппыИНоменклатуруДляПолногоПереноса()), Ложь, Неопределено, Неопределено)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппыИНоменклатуруДляПолногоПереноса()
	
	Если Элементы.СписокНоменклатурыВБазеГруппы.Видимость Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.ЭтоГруппа
		|			ИЛИ Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|	И НЕ Номенклатура.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Список = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
		|ГДЕ
		|	НЕ КатегорииНоменклатуры.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Список = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат Список
	
КонецФункции

&НаКлиенте
Процедура Перенести1ВВыгрузку(Команда)
	
	Если Элементы.СписокНоменклатурыВБазеГруппы.Видимость Тогда
		ТекущиеДанные = Элементы.СписокНоменклатурыВБазеГруппы.ТекущиеДанные;
		ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение",Элементы.СписокНоменклатурыВБазеГруппы.ВыделенныеСтроки), Ложь, ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные.ПолучитьИдентификатор()), Неопределено)
	КонецЕсли;
	
	Если Элементы.СписокНоменклатурыВБазеКатегории.Видимость Тогда
		ТекущаяСтрока = Элементы.СписокНоменклатурыВБазеКатегории.ТекущаяСтрока;
		ТекущиеДанные = Элементы.СписокНоменклатурыВБазеКатегории.ТекущиеДанные;
		ЭлементДеревоПеретаскивание(Неопределено, Новый Структура("Значение",Элементы.СписокНоменклатурыВБазеКатегории.ВыделенныеСтроки), Ложь, ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные.ПолучитьИдентификатор()), Неопределено)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить1ИзВыгрузки(Команда)
	
	Удалить1ИзВыгрузкиФрагмент(Элементы.Дерево.ВыделенныеСтроки);
	
	
	
КонецПроцедуры

&НаСервере
Процедура Удалить1ИзВыгрузкиФрагмент(УдаляемыеСтроки)
	
	Для каждого Строка Из УдаляемыеСтроки Цикл
		
		Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
		
		Дерево.Строки.Удалить(Строка-1);
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоНаСайте");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеИзВыгрузки(Команда)
	
	УдалитьВсеИзВыгрузкиНаСервере();
	ОбновитьИнформациюОКоличествеИРазмереКартинок();
	ПроверитьНаличиеТоваровСНулевойЦеной();
	НастройкиВыгрузкиРеквизитов = "";
	Элементы.ВыбратьРеквизиты.Заголовок = НастройкиВыгрузкиРеквизитовПредставление();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеИзВыгрузкиНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	Дерево.Строки.Очистить();
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоНаСайте");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ВсеПоляЗаполнены() Тогда
		Если Не ЗначениеЗаполнено(ВидЦен) Тогда
			КнопкаНастроитьКаталогГиперссылкаНажатие(Неопределено);
		Иначе
			КнопкаУстановкаИндивидуальныхЦен(Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("АдресВХранилище", 			  СохранитьВыбраннуюНоменклатуруВТЗ());
	СтруктураВозврата.Вставить("НастройкиВыгрузкиРеквизитов", НастройкиВыгрузкиРеквизитов);
	
	СтруктураВозврата.Вставить("ВидЦенТоваров", ВидЦен);
	СтруктураВозврата.Вставить("ОтборГруппыКатегорииНоменклатуры", ОтборКатегорииИерархияПереключатель);
	
	СтруктураВозврата.Вставить("АдресИндивидуальныхЦен", АдресИндивидуальныеЦены());
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Функция АдресИндивидуальныеЦены()
	
	Возврат ПоместитьВоВременноеХранилище(УстановкаИндивидуальныхЦен.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СписокНоменклатурыВБазеГруппыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для каждого ТекущаяНоменклатура Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяНоменклатура);
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВБазеКатегорииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для каждого ТекущаяНоменклатура Из Элемент.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ТекущаяНоменклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяНоменклатура);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРеквизиты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьРеквизитыЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиВыгрузкиРеквизитов", НастройкиВыгрузкиРеквизитов);
	ПараметрыОткрытия.Вставить("ВыбраннаяНоменклатура", МассивВыбраннойНоменклатуры());
	
	ОткрытьФорму("Справочник.НастройкиПубликацииМЛК.Форма.ФормаВыбораРеквизитов", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРеквизитыЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Количество() = 0 Тогда
		НастройкиВыгрузкиРеквизитов = "";
	Иначе
		НастройкиВыгрузкиРеквизитов = КонструкторМобильногоПриложения.ЗаписьJSONВСтруктуру(ВыбранныйЭлемент);
	КонецЕсли;
	
	Элементы.ВыбратьРеквизиты.Заголовок = НастройкиВыгрузкиРеквизитовПредставление();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если НЕ Копирование Тогда
		
		ТекСтрока = Элементы.Дерево.ТекущаяСтрока;
		Если ТекСтрока = Неопределено Тогда
			Приемник = ДеревоНаСайте;
		Иначе
			Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ТекСтрока);
			Приемник = Приемник.ПолучитьРодителя();
			Если Приемник = Неопределено Тогда
				Приемник = ДеревоНаСайте;
			КонецЕсли;
		КонецЕсли;
		
		ПеревыбратьГруппуЕслиНужно(Приемник);
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ЭтоГруппа = Истина;
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элемент.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревыбратьГруппуЕслиНужно(Приемник)
	
	Если Приемник = ДеревоНаСайте Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	
	Для каждого Элемент Из ЭлементыПриемника Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Приемник = Приемник.ПолучитьРодителя();
			Если Приемник = Неопределено Тогда
				Приемник = ДеревоНаСайте;
			Иначе
				ПеревыбратьГруппуЕслиНужно(Приемник);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСТрока И НЕ Копирование Тогда
		Данные = Элементы.Дерево.ТекущиеДанные;
		Данные.ЭтоГруппа = Истина;
		Данные.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Элементы.УдалитьВсеИзВыгрузки.Доступность = Истина;
	Элементы.ДеревоРазвернутьВсе.Доступность = Истина;
	Элементы.ДеревоСвернутьВсе.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ГруппаКаталога = "" Тогда
		Элемент.ТекущиеДанные.ГруппаКаталога = НСтр("ru ='<Группа без названия>'") ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПослеУдаления(Элемент)
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;
	
	ОбновитьИнформациюОКоличествеИРазмереКартинок();
	ПроверитьНаличиеТоваровСНулевойЦеной();
	
	ДоступныеРеквизиты = ПолучитьСписокДоступныхРеквизитов();
	ДополнительныеРеквизиты = ПолучитьСписокДополнительныхРеквизитов(МассивВыбраннойНоменклатуры());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеРеквизиты, ДополнительныеРеквизиты, Истина);
	
	Элементы.ВыбратьРеквизиты.Заголовок = НастройкиВыгрузкиРеквизитовПредставление(ДоступныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") И ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("Число") Тогда
		
		МассивСоЗначениями = ПараметрыПеретаскивания.Значение;
		МассивСУдаляемымиЗначениями = Новый Массив;
		ЭлементДеревоПроверкаПеретаскиванияФрагмент(МассивСоЗначениями, МассивСУдаляемымиЗначениями);
		
		Если МассивСУдаляемымиЗначениями.Количество() = МассивСоЗначениями.Количество() Тогда
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		Для каждого УдаляемоеЗначение Из МассивСУдаляемымиЗначениями Цикл
			МассивСоЗначениями.Удалить(УдаляемоеЗначение);
		КонецЦикла;
		
		ПараметрыПеретаскивания.Значение = МассивСоЗначениями;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		// Перетаскивание из других ТЧ - можно.
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоНаСайте.НайтиПоИдентификатору(Строка);
	Если НайденнаяСтрока = Неопределено Тогда
		// Новый элемент - можно.
		Возврат;
	КонецЕсли;
	
	ПереносВозможен = ВозможностьПереноса(Строка, ПараметрыПеретаскивания.Значение);
	Если НЕ ПереносВозможен Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для каждого ПеретаскиваемоеЗначение Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Приемник = ДеревоНаСайте;
	Иначе
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(Строка);                                                                                                         
		Если НЕ Приемник.ЭтоГруппа Тогда
			Приемник = Приемник.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;	
	
	Если НайденнаяСтрока.ПолучитьРодителя() = Приемник Тогда
		// Перетаскивание второй номенклатуры в ту же группу.
	КонецЕсли;
	
	Для каждого ИДПереносимыйЭлемент Из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(ИДПереносимыйЭлемент) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ПереносимыйЭлемент = ДеревоНаСайте.НайтиПоИдентификатору(ИДПереносимыйЭлемент);
		
		Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Приемник) Тогда
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЭлементДеревоПроверкаПеретаскиванияФрагмент(МассивСоЗначениями, МассивСУдаляемымиЗначениями)
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	Для каждого Значение Из МассивСоЗначениями Цикл
		
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ОтборИдентификатор = Новый Структура("Идентификатор", Строка(Значение.УникальныйИдентификатор()));
			СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
			Если СтрокиДерева.Количество() > 0 Тогда
				МассивСУдаляемымиЗначениями.Добавить(Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	ИДПриемник = Неопределено;
	Приемник = Неопределено;
	ВыполнитьПеретаскиваниеФрагмент(ПараметрыПеретаскивания.Значение, Строка, ИДПриемник, Приемник);
	
	ОбновитьИнформациюОКоличествеИРазмереКартинок();
	ПроверитьНаличиеТоваровСНулевойЦеной();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеретаскиваниеФрагмент(Знач ПараметрыПеретаскивания, Знач Строка, ИДПриемник, Приемник)
	
	ИДПриемник = Строка;
	Если ИДПриемник = Неопределено Тогда
		Приемник = ДеревоНаСайте;
	Иначе
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
		Если НЕ Приемник.ЭтоГруппа Тогда
			Приемник = Приемник.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;
	
	МассивИДИсточник = ПараметрыПеретаскивания;
	
	Если Элементы.СписокНоменклатурыВБазеГруппы.Видимость Тогда
		СписокДопустимойНоменклатуры = ПолучитьМассивДопустимойНоменклатуры();
	Иначе
		СписокДопустимойНоменклатуры = ПолучитьМассивДопустимойНоменклатурыДляКатегорий()
	КонецЕсли;
	
	Для каждого ИДИсточник Из МассивИДИсточник Цикл
		
		Если ТипЗнч(МассивИДИсточник) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// Перетаскивание из дерева групп
			ПеренестиСПодчиненными(ИДПриемник, МассивИДИсточник, ДетализацияОтбора, СписокДопустимойНоменклатуры);
			
		ИначеЕсли ТипЗнч(МассивИДИсточник) = Тип("Массив") 
			И ТипЗнч(ИДИсточник) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			// Перетаскивание из списка Номенклатуры
			ПеренестиСПодчиненными(ИДПриемник, ИДИсточник, ДетализацияОтбора, СписокДопустимойНоменклатуры);
			
			
		ИначеЕсли ТипЗнч(МассивИДИсточник) = Тип("Массив") 
			И ТипЗнч(ИДИсточник) <> Тип("Число") И ТипЗнч(ИДИсточник) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			// Перетаскивание из списка Номенклатуры
			ПеренестиСПодчиненными(ИДПриемник, ИДИсточник, ДетализацияОтбора, СписокДопустимойНоменклатуры);
			
		ИначеЕсли ТипЗнч(МассивИДИсточник) = Тип("Массив") 
			И ТипЗнч(ИДИсточник) <> Тип("Число") И ТипЗнч(ИДИсточник.Ключ) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			// Перетаскивание из списка Номенклатуры
			ПеренестиСПодчиненными(ИДПриемник, ИДИсточник.Ключ, ДетализацияОтбора, СписокДопустимойНоменклатуры);
			
		Иначе
			
			// Перетаскивание внутри дерева
			Источник = ДеревоНаСайте.НайтиПоИдентификатору(ИДИсточник);
			Если Приемник = Источник.ПолучитьРодителя() Тогда
				Продолжить;
			КонецЕсли; 
			
			ПеренестиВнутриДерева(ИДПриемник, ИДИсточник);
			
			Если НЕ Приемник = Неопределено И ИДПриемник <> Неопределено Тогда
				Элементы.Дерево.Развернуть(ИДПриемник, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Приемник = Неопределено И ИДПриемник <> Неопределено Тогда
		Элементы.Дерево.Развернуть(Приемник.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможностьПереноса(ИДПриемник, ИсточникМассив)
	
	Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
	
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	
	Если ЭлементыПриемника.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПереносВозможен = Истина;
	
	Если ТипЗнч(ИсточникМассив[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		Источник = ИсточникМассив[0];
	ИначеЕсли ТипЗнч(ИсточникМассив[0]) = Тип("Число") Тогда
		Источник = ДеревоНаСайте.НайтиПоИдентификатору(ИсточникМассив[0]);
	ИначеЕсли ТипЗнч(ИсточникМассив[0]) = Тип("СтрокаГруппировкиДинамическогоСписка") И ТипЗнч(ИсточникМассив[0].Ключ) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		Источник = Приемник; // ИсточникМассив[0].Ключ;
	Иначе
		Источник = ДеревоНаСайте.НайтиПоИдентификатору(ИсточникМассив[0].Ключ);
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		// Если это группа
		// Проверяем есть ли в родителе товары 
		Для каждого Элемент Из ЭлементыПриемника Цикл
			Если Не Элемент.ЭтоГруппа Тогда
				ПереносВозможен = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Если это товар 
		// Проверяем есть ли в родителе группы
		Для каждого Элемент Из ЭлементыПриемника Цикл
			Если Элемент.ЭтоГруппа Тогда
				ПереносВозможен = Ложь;
				Прервать;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПереносВозможен
	
КонецФункции // ()

&НаСервере
Процедура ПеренестиВнутриДерева(ИДПриемник, ИДИсточник)
	
	Если ЗначениеЗаполнено(ИДПриемник) Тогда
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
	Иначе
		Приемник = ДеревоНаСайте;
	КонецЕсли; 
	
	Если ИДПриемник <> Неопределено И ИДПриемник <> 0 И НЕ Приемник.ЭтоГруппа Тогда
		Приемник = Приемник.ПолучитьРодителя();
	КонецЕсли;
	
	Источник = ДеревоНаСайте.НайтиПоИдентификатору(ИДИсточник);
	
	ПеревыбратьПриемникаЕслиНужно(Приемник, Источник);
	
	
	НоваяСтрока = СкопироватьСтрокуДерева(Приемник, Источник, Источник.ЭтоГруппа);
	
	СтрокаРодитель = Источник.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		ДеревоНаСайте.ПолучитьЭлементы().Удалить(Источник);
	Иначе
		СтрокаРодитель.ПолучитьЭлементы().Удалить(Источник);
	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьДанныеФормыДерево(КоллекцияСортировки, КолонкаСортировки, ВключатьПодчиненные = Ложь)
	
	КоллекцияСтрок  = КоллекцияСортировки.ПолучитьЭлементы();
	
	СортироватьДанныеФормыКоллекция(КоллекцияСтрок, КолонкаСортировки);
	
	Если ВключатьПодчиненные Тогда
		Для Каждого ТекущаяСтрока Из КоллекцияСтрок Цикл
			СортироватьДанныеФормыДерево(ТекущаяСтрока, КолонкаСортировки, ВключатьПодчиненные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьДанныеФормыКоллекция(КоллекцияСтрок, КолонкаСортировки)
	
	ПараметрыЗначений               = Новый Соответствие;
	СортированныеЗначения   = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из КоллекцияСтрок Цикл
		
		ТекущееЗначение = ТекущаяСтрока[КолонкаСортировки];
		
		ПараметрыЗначения       = ПараметрыЗначений.Получить(ТекущееЗначение);
		Если ПараметрыЗначения = Неопределено Тогда
			ПараметрыЗначения       = Новый Массив;
			ПараметрыЗначений.Вставить(ТекущееЗначение, ПараметрыЗначения);
			СортированныеЗначения.Добавить(ТекущееЗначение);
		КонецЕсли;
		
		ПараметрыЗначения.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	СортированныеЗначения.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	НовыйИндекс     = 0;
	Для Каждого ТекущееЗначение Из СортированныеЗначения Цикл
		
		МассивСтрок     = ПараметрыЗначений.Получить(ТекущееЗначение.Значение);
		
		Если МассивСтрок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
			
			ТекущийИндекс   = КоллекцияСтрок.Индекс(ТекущаяСтрока);
			ШагСдвига               = НовыйИндекс - ТекущийИндекс;
			Если НЕ ШагСдвига = 0 Тогда
				КоллекцияСтрок.Сдвинуть(ТекущийИндекс, ШагСдвига);
			КонецЕсли;
			
			НовыйИндекс     = НовыйИндекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)
	
	Пока НЕ НовыйРодитель = Неопределено Цикл
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "УдалитьВсеИзВыгрузки" Тогда
		Отказ = Истина;
		УдалитьВсеИзВыгрузкиНаСервере();
		ОбновитьИнформациюОКоличествеИРазмереКартинок();
		ПроверитьНаличиеТоваровСНулевойЦеной();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СвернутьДерево(ДеревоНаСайте);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровень(Команда)
	
	ТекущийУровень = ПолучитьУровень(ДеревоНаСайте.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока));
	ПоказатьУровеньДерева(ТекущийУровень);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьДерево(ДеревоНаСайте, 5);
	
КонецПроцедуры

&НаСервере
Функция ВсеПоляЗаполнены()
	
	Если Не ЗначениеЗаполнено(ВидЦен) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Поле ""Вид цен (основной)"" не заполнено'"),
		,
		"ВидЦен");
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеСтроки = УстановкаИндивидуальныхЦен.НайтиСтроки(Новый Структура("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Поле ""Договор"" не заполнено'"),
		,
		"УстановкаИндивидуальныхЦенДоговор");
		ЭтаФорма.Элементы.УстановкаИндивидуальныхЦен.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеСтроки = УстановкаИндивидуальныхЦен.НайтиСтроки(Новый Структура("ВидЦенСлужебнаяСсылка", Справочники.ВидыЦен.ПустаяСсылка()));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Поле ""Вид цен"" не заполнено'"),
		,
		"УстановкаИндивидуальныхЦенВидЦен");
		ЭтаФорма.Элементы.УстановкаИндивидуальныхЦен.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура СписокНоменклатурыВыбраннойОкончаниеПеретаскиванияНаСервере(Знач МассивЭлементов)
	
	Для каждого ТекЭлемент Из МассивЭлементов Цикл
		УдалитьЭлементИзВыбранных(ТекЭлемент);
	КонецЦикла;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборы()
	
	СписокНоменклатурыВыбранной.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", СписокВыбранных.ВыгрузитьЗначения());
	СписокНоменклатурыВыбранной.Параметры.УстановитьЗначениеПараметра("СписокГрупп", СписокГрупп.ВыгрузитьЗначения());
	СписокНоменклатурыВыбранной.Параметры.УстановитьЗначениеПараметра("СписокИсключенных", СписокИсключенных.ВыгрузитьЗначения());
	СписокНоменклатурыВыбранной.Параметры.УстановитьЗначениеПараметра("СписокКатегорий", СписокКатегорий.ВыгрузитьЗначения());
	
	Элементы.СписокНоменклатурыВыбранной.Обновить();
	
	ОбновитьИнформациюОКоличествеИРазмереКартинок();
	ПроверитьНаличиеТоваровСНулевойЦеной();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсключеннуюНоменклатуруВОтбор(ТекЭлемент)
	
	Если СписокИсключенных.НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
		СписокИсключенных.Добавить(ТекЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНоменклатуруИзВыбранных(ТекЭлемент)
	
	Номенклатура = СписокВыбранных.НайтиПоЗначению(ТекЭлемент);
	Если Номенклатура <> Неопределено Тогда
		СписокВыбранных.Удалить(Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементИзВыбранных(ТекЭлемент)
	
	Если НЕ ЗначениеЗаполнено(ТекЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьИсключеннуюНоменклатуруВОтбор(ТекЭлемент);
	УдалитьНоменклатуруИзВыбранных(ТекЭлемент);
	
КонецПроцедуры 

&НаСервере
Процедура Удалить1ИзВыгрузкиНаСервере(ТекЭлемент)
	
	УдалитьЭлементИзВыбранных(ТекЭлемент);
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Функция СохранитьВыбраннуюНоменклатуруВТЗ()
	
	ТаблицаЗначений = ПолучитьТаблицуЗначенийСВыбраннойНоменклатурой();
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаЗначений, Новый УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЗначенийСВыбраннойНоменклатурой()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Идентификатор");
	ТаблицаЗначений.Колонки.Добавить("РодительИдентификатор");
	ТаблицаЗначений.Колонки.Добавить("ГруппаКаталога");
	ТаблицаЗначений.Колонки.Добавить("Номенклатура");
	ТаблицаЗначений.Колонки.Добавить("ЭтоГруппа");
	ТаблицаЗначений.Колонки.Добавить("РодительКатегория");
	ТаблицаЗначений.Колонки.Добавить("РодительГруппа");
	ТаблицаЗначений.Колонки.Добавить("ПорядковыйНомер");
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	ЕстьНастройки = Дерево.Строки.Количество() > 0;
	Если ЕстьНастройки Тогда
		ПреобразоватьВТаблицуРекурсия(Дерево, ТаблицаЗначений);
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьВТаблицуРекурсия(тДерево, СохраненныеДанные, РодительИдентификатор = "")
	
	ПорядковыйНомер = 0;
	Для Каждого стр Из тДерево.Строки Цикл
		новаяСтрока = СохраненныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, стр);
		ПорядковыйНомер = ПорядковыйНомер + 1;
		новаяСтрока.ПорядковыйНомер = ПорядковыйНомер;
		Если ЗначениеЗаполнено(РодительИдентификатор) Тогда
			новаяСтрока.РодительИдентификатор = стр.Родитель.Идентификатор;
		КонецЕсли;
		Если ТипЗнч(стр.Номенклатура) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			новаяСтрока.РодительКатегория = стр.Номенклатура;
		ИначеЕсли ТипЗнч(стр.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			И стр.ЭтоГруппа Тогда
			новаяСтрока.РодительГруппа = стр.Номенклатура;
		КонецЕсли; 
		
		Если стр.Строки.Количество()>0 Тогда
			ПреобразоватьВТаблицуРекурсия(стр, СохраненныеДанные, новаяСтрока.Идентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОКоличествеИРазмереКартинок()
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	ОтборИдентификатор = Новый Структура("ЭтоГруппа", Ложь);
	СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
	
	КоличествоВыбранныхСтрок = СтрокиДерева.Количество();
	
	Элементы.ДекорацияПревышеноКоличествоТоваров.Заголовок = СтрШаблон(НСтр("ru ='Выбрано %1 (макс. %2)'"), КоличествоВыбранныхСтрок, МаксимумСтрок);
	
	Элементы.УдалитьВсеИзВыгрузки.Доступность = КоличествоВыбранныхСтрок > 0;
	Элементы.ДеревоРазвернутьВсе.Доступность = КоличествоВыбранныхСтрок > 0;
	Элементы.ДеревоСвернутьВсе.Доступность = КоличествоВыбранныхСтрок > 0;
	
	ЗаблокироватьЗаписатьИЗакрыть = Ложь;
	Если КоличествоВыбранныхСтрок > МаксимумСтрок Тогда
		Элементы.ДекорацияПревышеноКоличествоТоваров.ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		Элементы.ДекорацияПревышеноКоличествоТоваров.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		ЗаблокироватьЗаписатьИЗакрыть = Истина;
	Иначе
		Элементы.ДекорацияПревышеноКоличествоТоваров.ЦветТекста = Новый Цвет();
		Элементы.ДекорацияПревышеноКоличествоТоваров.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = НЕ ЗаблокироватьЗаписатьИЗакрыть;
	
КонецПроцедуры

&НаСервере
Функция МассивВыбраннойНоменклатуры()
	
	ВыбраннаяНоменклатура = ПолучитьТаблицуЗначенийСВыбраннойНоменклатурой();
	
	Возврат ВыбраннаяНоменклатура.ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаСервере
Функция НастройкиВыгрузкиРеквизитовПредставление(СписокДополнительныхРеквизитов = Неопределено)
	
	СтрокаПредставление = НСтр("ru ='Дополнительные реквизиты'");
	
	Если НастройкиВыгрузкиРеквизитов <> "" Тогда
		СтрокаПредставление = "";
		
		СтруктураНастройки = КонструкторМобильногоПриложения.ЧтениеJSONВСтруктуру(НастройкиВыгрузкиРеквизитов);
		
		Для каждого СтрокаНастроек Из СтруктураНастройки Цикл
			Если СписокДополнительныхРеквизитов <> Неопределено И СписокДополнительныхРеквизитов.Найти(СтрокаНастроек.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПредставление = СтрокаПредставление + СтрокаНастроек.Значение + ", ";
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
		
	КонецЕсли;
	
	Если СтрДлина(СтрокаПредставление) >= 40 Тогда
		СтрокаПредставление = Лев(СтрокаПредставление, 40) + "...";
	КонецЕсли;
	
	СтрокаПредставление = СтрЗаменить(СтрокаПредставление, "", Символы.НПП);
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаСервере
Функция СкопироватьСтрокуДерева(Приемник, Источник, ЭтоГруппа = Ложь)
	
	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;
	
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыДерево") Тогда
		
		Для каждого элДерева Из Источник.ПолучитьЭлементы() Цикл
			СкопироватьСтрокуДерева(Приемник, элДерева, Истина);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		
		Для каждого элДерева Из Источник Цикл
			СкопироватьСтрокуДерева(Приемник, элДерева, элДерева.ПолучитьЭлементы().Количество() > 0);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Номенклатура = Источник.Номенклатура;
		Если Источник.Свойство("ГруппаКаталога") Тогда
			Если Источник.ГруппаКаталога="" Тогда
				НоваяСтрока.ГруппаКаталога = Источник.Идентификатор;
			Иначе
				НоваяСтрока.ГруппаКаталога = Источник.ГруппаКаталога;
			КонецЕсли;
		Иначе
			НоваяСтрока.ГруппаКаталога = Источник.Номенклатура;	
		КонецЕсли;
		
		Если Источник.Свойство("ЭтоГруппа") Тогда
			НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
			НоваяСтрока.Картинка = Источник.Картинка;
		Иначе
			НоваяСтрока.ЭтоГруппа = ЭтоГруппа;
			НоваяСтрока.Картинка = ?(ЭтоГруппа, 1, 2);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Идентификатор = НоваяСтрока.Номенклатура.УникальныйИдентификатор();
		Иначе 
			НоваяСтрока.Идентификатор = Источник.Идентификатор;
		КонецЕсли;
		
		Если ТипЗнч(Приемник) = Тип("ДанныеФормыЭлементДерева") Тогда
			НоваяСтрока.РодительИдентификатор = Приемник.Идентификатор;
		КонецЕсли; 
		
		Если Источник.ПолучитьЭлементы().Количество() > 0 Тогда
			СкопироватьСтрокуДерева(НоваяСтрока, Источник.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ОбновитьВыбранныеТовары(Показывать)
	
	МассивОтбор = Новый Массив;
	Если Показывать Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
		ОбойтиДеревоРекурсивноНаСервере(Дерево, МассивОтбор);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСПодчиненными(ИДПриемник, Источник, ДетализацияОтбора, СписокДопустимойНоменклатуры)
	
	Если ЗначениеЗаполнено(ИДПриемник) Или ИДПриемник = 0 Тогда
		Приемник = ДеревоНаСайте.НайтиПоИдентификатору(ИДПриемник);
	Иначе
		Приемник = ДеревоНаСайте;
	КонецЕсли; 
	
	Если ИДПриемник <> Неопределено И НЕ Приемник.ЭтоГруппа Тогда
		Приемник = Приемник.ПолучитьРодителя();
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	Номенклатура.Родитель КАК Родитель
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Источник)
		|	И (Номенклатура.ЭтоГруппа
		|			ИЛИ НЕ &ТолькоГруппы)
		|	И (Номенклатура.ЭтоГруппа
		|			ИЛИ Номенклатура.Ссылка В (&СписокДопустимойНоменклатуры))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("Источник", Источник);
		Запрос.УстановитьПараметр("ТолькоГруппы", Ложь);
		Запрос.УстановитьПараметр("СписокДопустимойНоменклатуры", СписокДопустимойНоменклатуры);
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ДобавитьНоменклатуруРекурсивно(Приемник, Результат.Строки);
		
	ИначеЕсли ДетализацияОтбора = 2 Тогда
		
		// Одна категория без подчиненных товаров
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Номенклатура = Источник;
		НоваяСтрока.ЭтоГруппа = Истина;
		НоваяСтрока.ГруппаКаталога = Источник;
		НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		Если ПоказыватьВыбранные Тогда
			ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
		КонецЕсли;
		
	Иначе
		
		// Категория с подчиненными товарами
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	Номенклатура.КатегорияНоменклатуры КАК Категория
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.КатегорияНоменклатуры В ИЕРАРХИИ(&Источник)
		|	И Номенклатура.Ссылка В (&СписокДопустимойНоменклатуры)
		|ИТОГИ ПО
		|	Категория";
		Запрос.УстановитьПараметр("Источник", Источник);
		Запрос.УстановитьПараметр("СписокДопустимойНоменклатуры", СписокДопустимойНоменклатуры);
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ДобавитьКатегориюРекурсивно(Приемник, Результат.Строки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивДопустимойНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоГруппа
	|			ТОГДА 24
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|					ТОГДА 0
	|				ИНАЧЕ 2
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ИспользоватьХарактеристики
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ПометкаУдаления
	|					ТОГДА 4
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ЭтоНабор
	|					ТОГДА 12
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ВариантКартинки,
	|	СправочникНоменклатура.ДополнительныеРеквизиты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		ТекстоваяСтрока КАК ТекстоваяСтрока
	|	) КАК ДополнительныеРеквизиты,
	|	СправочникНоменклатура.НоменклатураГруппыЦеновыеГруппы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЗначениеУточнения КАК ЗначениеУточнения,
	|		Характеристика КАК Характеристика
	|	) КАК НоменклатураГруппыЦеновыеГруппы,
	|	СправочникНоменклатура.Предопределенный КАК Предопределенный,
	|	СправочникНоменклатура.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	НЕ СправочникНоменклатура.ПометкаУдаления
	|	И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И НЕ СправочникНоменклатура.Недействителен
	|	И НЕ СправочникНоменклатура.ЭтоНабор";
	
	Если ЗначениеЗаполнено(ВидЦен.ВалютаЦены.СимвольноеПредставление) Тогда
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.СимвольноеПредставление;
	Иначе
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.Наименование;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ПолучитьМассивДопустимойНоменклатурыДляКатегорий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.АвтоматическиГенерироватьПартии КАК АвтоматическиГенерироватьПартии,
	|	СправочникНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.ВариантОграниченияСертификата КАК ВариантОграниченияСертификата,
	|	СправочникНоменклатура.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|	СправочникНоменклатура.ВерхняяГраницаОстатков КАК ВерхняяГраницаОстатков,
	|	СправочникНоменклатура.Вес КАК Вес,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ВидМаркировки КАК ВидМаркировки,
	|	СправочникНоменклатура.ВыписыватьГарантийныйТалон КАК ВыписыватьГарантийныйТалон,
	|	СправочникНоменклатура.Высота КАК Высота,
	|	СправочникНоменклатура.ГарантийныйСрок КАК ГарантийныйСрок,
	|	СправочникНоменклатура.ДатаИзменения КАК ДатаИзменения,
	|	СправочникНоменклатура.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	СправочникНоменклатура.Длина КАК Длина,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	СправочникНоменклатура.ИсключитьИзПрайсЛистов КАК ИсключитьИзПрайсЛистов,
	|	СправочникНоменклатура.ИспользоватьДатуПроизводстваПартии КАК ИспользоватьДатуПроизводстваПартии,
	|	СправочникНоменклатура.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии КАК ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии,
	|	СправочникНоменклатура.ИспользоватьИдентификаторПартииВЕТИСПартии КАК ИспользоватьИдентификаторПартииВЕТИСПартии,
	|	СправочникНоменклатура.ИспользоватьНомерПартии КАК ИспользоватьНомерПартии,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СправочникНоменклатура.ИспользоватьПроизводителяВЕТИСПартии КАК ИспользоватьПроизводителяВЕТИСПартии,
	|	СправочникНоменклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	СправочникНоменклатура.ИспользоватьСрокГодностиПартии КАК ИспользоватьСрокГодностиПартии,
	|	СправочникНоменклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	СправочникНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	СправочникНоменклатура.КиЗГИСМ КАК КиЗГИСМ,
	|	СправочникНоменклатура.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
	|	СправочникНоменклатура.КиЗГИСМВид КАК КиЗГИСМВид,
	|	СправочникНоменклатура.КиЗГИСМРазмер КАК КиЗГИСМРазмер,
	|	СправочникНоменклатура.КиЗГИСМСпособВыпускаВОборот КАК КиЗГИСМСпособВыпускаВОборот,
	|	СправочникНоменклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	СправочникНоменклатура.Комментарий КАК Комментарий,
	|	СправочникНоменклатура.Крепость КАК Крепость,
	|	СправочникНоменклатура.МетодОценки КАК МетодОценки,
	|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочникНоменклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СправочникНоменклатура.Недействителен КАК Недействителен,
	|	СправочникНоменклатура.НижняяГраницаОстатков КАК НижняяГраницаОстатков,
	|	СправочникНоменклатура.Номинал КАК Номинал,
	|	СправочникНоменклатура.НормаВремени КАК НормаВремени,
	|	СправочникНоменклатура.Объем КАК Объем,
	|	СправочникНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Периодичность КАК Периодичность,
	|	СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС КАК ПодконтрольнаяПродукцияВЕТИС,
	|	СправочникНоменклатура.Поставщик КАК Поставщик,
	|	СправочникНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	СправочникНоменклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	СправочникНоменклатура.Производитель КАК Производитель,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	СправочникНоменклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	СправочникНоменклатура.РеквизитДопУпорядочиванияУНФ КАК РеквизитДопУпорядочиванияУНФ,
	|	СправочникНоменклатура.РекомендуемЗаказать КАК РекомендуемЗаказать,
	|	СправочникНоменклатура.Склад КАК Склад,
	|	СправочникНоменклатура.СпособОграниченияСертификата КАК СпособОграниченияСертификата,
	|	СправочникНоменклатура.СпособПополнения КАК СпособПополнения,
	|	СправочникНоменклатура.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	СправочникНоменклатура.СрокДействияФлагаНовинка КАК СрокДействияФлагаНовинка,
	|	СправочникНоменклатура.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
	|	СправочникНоменклатура.СрокПополнения КАК СрокПополнения,
	|	СправочникНоменклатура.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СправочникНоменклатура.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	СправочникНоменклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СправочникНоменклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.ТипСрокаДействия КАК ТипСрокаДействия,
	|	СправочникНоменклатура.ТНВЭДГИСМ КАК ТНВЭДГИСМ,
	|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД КАК ТоварнаяНоменклатураВЭД,
	|	СправочникНоменклатура.УдалитьСпецификация КАК УдалитьСпецификация,
	|	СправочникНоменклатура.ФайлКартинки КАК ФайлКартинки,
	|	СправочникНоменклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	СправочникНоменклатура.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	СправочникНоменклатура.Ширина КАК Ширина,
	|	СправочникНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	СправочникНоменклатура.ЭтоНовинка КАК ЭтоНовинка,
	|	СправочникНоменклатура.Ячейка КАК Ячейка,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	СправочникНоменклатура.ТабачнаяПродукция КАК ТабачнаяПродукция,
	|	СправочникНоменклатура.ТолькоПоддержкаОстаткаПриРасчетеПотребностей КАК ТолькоПоддержкаОстаткаПриРасчетеПотребностей,
	|	СправочникНоменклатура.ОбувнаяПродукция КАК ОбувнаяПродукция,
	|	СправочникНоменклатура.ШиныИПокрышки КАК ШиныИПокрышки,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоНабор
	|			ТОГДА 12
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки,
	|	СправочникНоменклатура.ДополнительныеРеквизиты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		ТекстоваяСтрока КАК ТекстоваяСтрока
	|	) КАК ДополнительныеРеквизиты,
	|	СправочникНоменклатура.НоменклатураГруппыЦеновыеГруппы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЗначениеУточнения КАК ЗначениеУточнения,
	|		Характеристика КАК Характеристика
	|	) КАК НоменклатураГруппыЦеновыеГруппы,
	|	СправочникНоменклатура.Предопределенный КАК Предопределенный,
	|	СправочникНоменклатура.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|	И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И НЕ СправочникНоменклатура.Недействителен
	|	И НЕ СправочникНоменклатура.ЭтоНабор";
	
	
	Если ЗначениеЗаполнено(ВидЦен.ВалютаЦены.СимвольноеПредставление) Тогда
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.СимвольноеПредставление;
	Иначе
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.Наименование;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбойтиДеревоРекурсивноНаСервере(ДеревоЗначений, МассивОтбор)
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		МассивОтбор.Добавить(СтрокаДерева.Номенклатура);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОбойтиДеревоРекурсивноНаСервере(СтрокаДерева, МассивОтбор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруРекурсивно(Приемник, ИсточникМассив, ДобавитьТоварВиртуальнуюГруппу = Ложь)
	
	ИзначальныйПриемник = Приемник;
	
	Если ИсточникМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	ПеревыбратьПриемникаЕслиНужно(Приемник, ИсточникМассив[0],,ДобавитьТоварВиртуальнуюГруппу);
	
	Для каждого Источник Из ИсточникМассив Цикл
		
		ОтборИдентификатор = Новый Структура("Идентификатор", Строка(Источник.Ссылка.УникальныйИдентификатор()));
		СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
		Если СтрокиДерева.Количество() > 0 Тогда
			Если Источник.Строки.Количество() > 0 Тогда
				Если Источник.ЭтоГруппа Тогда
					НайденныйПриемник = НайтиЗначениеВДеревеЗначений(ДеревоНаСайте.ПолучитьЭлементы(), Новый Структура("Идентификатор", Строка(Источник.Ссылка.УникальныйИдентификатор())));
					ДобавитьНоменклатуруРекурсивно(НайденныйПриемник, Источник.Строки);
				Иначе
					ДобавитьНоменклатуруРекурсивно(ИзначальныйПриемник, Источник.Строки);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ГруппаКаталога = Источник.Наименование;
		НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
		
		НоваяСтрока.Номенклатура = Источник.Ссылка;
		НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		ТекущийРодитель = НоваяСтрока.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			НоваяСтрока.РодительИдентификатор = ТекущийРодитель.Идентификатор;
		КонецЕсли;
		
		БылиДобавленыГруппы = Ложь;
		Если Источник.Строки.Количество() > 0 Тогда
			
			Группы = Источник.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
			Если Группы.Количество() > 0 Тогда
				ДобавитьНоменклатуруРекурсивно(НоваяСтрока, Группы);
				БылиДобавленыГруппы = Истина;
			КонецЕсли;
			
			Товары = Источник.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь));
			Если Товары.Количество() > 0 Тогда
				Если БылиДобавленыГруппы Тогда
					ДобавитьНоменклатуруРекурсивно(НоваяСтрока, Товары, Истина);
				Иначе
					ДобавитьНоменклатуруРекурсивно(НоваяСтрока, Товары);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеревыбратьПриемникаЕслиНужно(Приемник, Источник, ЭтоКатегория = Ложь, ДобавитьТоварыВВиртуальнуюГруппу = Ложь)
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	Если Приемник = ДеревоНаСайте Тогда
		
		Если ТипЗнч(Источник) = Тип("ДанныеФормыЭлементДерева") Тогда
			Если Не Источник.ЭтоГруппа Тогда
				Приемник = НайтиЗначениеВДеревеЗначений(ДеревоНаСайте.ПолучитьЭлементы(), Новый Структура("Идентификатор", Источник.РодительИдентификатор));
			КонецЕсли;
		ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
			
			// Перетаскивание из групп
			Если ЗначениеЗаполнено(Источник.Ссылка.Родитель) И Не ЭтоКатегория И Не Источник.ЭтоГруппа И Не ДобавитьТоварыВВиртуальнуюГруппу Тогда
				
				ИдДляПоиска = Источник.Ссылка.Родитель.УникальныйИдентификатор();
				ОтборИдентификатор = Новый Структура("Идентификатор", Строка(ИдДляПоиска));
				СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
				Если СтрокиДерева.Количество() > 0 Тогда
					Приемник = НайтиЗначениеВДеревеЗначений(ДеревоНаСайте.ПолучитьЭлементы(), Новый Структура("Идентификатор", Строка(ИдДляПоиска)));
				Иначе
					// Добавляем группу
					НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
					НоваяСтрока.ГруппаКаталога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка.Родитель, "Наименование");
					НоваяСтрока.ЭтоГруппа = Истина;
					НоваяСтрока.Номенклатура = Источник.Ссылка.Родитель;
					НоваяСтрока.Картинка = 1;
					НоваяСтрока.Идентификатор = Строка(ИдДляПоиска);
					
					// Переопределяем приемника
					СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
					Приемник = ДеревоНаСайте.ПолучитьЭлементы()[ДеревоНаСайте.ПолучитьЭлементы().Количество()-1]
					
				КонецЕсли;
				
			ИначеЕсли Не ЭтоКатегория И Не Источник.ЭтоГруппа Тогда 
				
				Приемник = НайтиЗначениеВДеревеЗначений(ДеревоНаСайте.ПолучитьЭлементы(), Новый Структура("Номенклатура", Неопределено));
				
				Если Приемник = Неопределено Тогда
					Приемник = ДеревоНаСайте;
					УИВСтроку = Строка(Новый УникальныйИдентификатор);
					ДобавитьВиртуальнуюГруппуЕслиНужно(Приемник, УИВСтроку, Источник);
					Приемник = ДеревоНаСайте.ПолучитьЭлементы()[ДеревоНаСайте.ПолучитьЭлементы().Количество()-1]
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Перетаскивание из категорий
			Если Источник.Ссылка <> null Тогда
				
				ИдДляПоиска = Источник.Ссылка.КатегорияНоменклатуры.УникальныйИдентификатор();
				ОтборИдентификатор = Новый Структура("Идентификатор", Строка(ИдДляПоиска));
				СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
				Если СтрокиДерева.Количество() > 0 Тогда
					Приемник = НайтиЗначениеВДеревеЗначений(ДеревоНаСайте.ПолучитьЭлементы(), Новый Структура("Идентификатор", Строка(ИдДляПоиска)));
				Иначе
					// Добавляем категорию
					НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
					НоваяСтрока.ГруппаКаталога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка.КатегорияНоменклатуры, "Наименование");;
					НоваяСтрока.ЭтоГруппа = Истина;
					НоваяСтрока.Картинка = 1;
					НоваяСтрока.Идентификатор = Строка(ИдДляПоиска);
					НоваяСтрока.Номенклатура = Источник.Ссылка.КатегорияНоменклатуры;
					
					// Переопределяем приемника
					СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
					Приемник = ДеревоНаСайте.ПолучитьЭлементы()[ДеревоНаСайте.ПолучитьЭлементы().Количество()-1]
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	
	Если ЭлементыПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоПеревыбратьПриемника = Ложь;
	
	Если Источник.ЭтоГруппа = null ИЛИ Источник.ЭтоГруппа Тогда
		// Если это группа
		// Проверяем есть ли в родителе товары 
		Для каждого Элемент Из ЭлементыПриемника Цикл
			Если Не Элемент.ЭтоГруппа Тогда
				НеобходимоПеревыбратьПриемника = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Если это товар 
		// Проверяем есть ли в родителе группы
		Для каждого Элемент Из ЭлементыПриемника Цикл
			Если Элемент.ЭтоГруппа Тогда
				НеобходимоПеревыбратьПриемника = Истина;
				ДобавитьТоварыВВиртуальнуюГруппу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НеобходимоПеревыбратьПриемника Тогда
		
		Если ДобавитьТоварыВВиртуальнуюГруппу Тогда
			УИВСтроку = Строка(Новый УникальныйИдентификатор);
			ДобавитьВиртуальнуюГруппуЕслиНужно(Приемник, УИВСтроку, Источник);
			Приемник = Приемник.ПолучитьЭлементы()[Приемник.ПолучитьЭлементы().Количество()-1];
			Возврат;
		КонецЕсли;
		
		Приемник = Приемник.ПолучитьРодителя();
		Если Приемник = Неопределено Тогда
			Приемник = ДеревоНаСайте;
			Возврат;
		КонецЕсли;
		
		ПеревыбратьПриемникаЕслиНужно(Приемник, Источник)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеВДеревеЗначений(СтрокиДерева, Условия)
	
	Для каждого Строка Из СтрокиДерева Цикл
		Для каждого Условие Из Условия Цикл
			Если Строка[Условие.Ключ] = Условие.Значение Тогда
				Возврат Строка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Строка Из СтрокиДерева Цикл
		НайденнаяСтрока = НайтиЗначениеВДеревеЗначений(Строка.ПолучитьЭлементы(), Условия);
		Если НайденнаяСтрока <> неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДобавитьВиртуальнуюГруппуЕслиНужно(Приемник, УИВСтроку, Источник)
	
	УИВСтроку = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ГруппаКаталога = НСтр("ru ='<Группа без названия>'") ;
	НоваяСтрока.ЭтоГруппа = Истина;
	
	НоваяСтрока.Идентификатор = УИВСтроку;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторВСтроке(СтрокаДерева)
	
	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Возврат Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ТекИдентификатор = СтрокаДерева.Номенклатура.УникальныйИдентификатор();
	Если НЕ СтрокаДерева.ЭтоГруппа Тогда
		СтрокаДерева.Картинка = 2;
		Возврат ТекИдентификатор;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	ОтборИдентификатор = Новый Структура("Идентификатор, ЭтоГруппа", Строка(ТекИдентификатор), Истина);
	СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
	Если СтрокиДерева.Количество() > 0 Тогда
		// Эта группа уже добавлена
		СтрокаДерева.Картинка = 0; // Добавленная вручную группа
		СтрокаДерева.Номенклатура = Неопределено;
		Возврат Новый УникальныйИдентификатор;
	Иначе
		СтрокаДерева.Картинка = 1; // Перенесенная группа
		Возврат ТекИдентификатор;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ДобавитьКатегориюРекурсивно(Приемник, ИсточникМассив)
	
	Если ИсточникМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
	
	ПеревыбратьПриемникаЕслиНужно(Приемник, ИсточникМассив[0], Истина);
	
	Для каждого Источник Из ИсточникМассив Цикл
		
		Если Источник.Ссылка = null Тогда
			// Категория
			ОтборИдентификатор = Новый Структура("Идентификатор", Строка(Источник.Категория.УникальныйИдентификатор()));
			СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
			Если СтрокиДерева.Количество() > 0 Тогда
				Если Источник.Строки.Количество() > 0 Тогда
					ДобавитьКатегориюРекурсивно(Приемник, Источник.Строки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		Иначе
			// Номенклатура
			ОтборИдентификатор = Новый Структура("Идентификатор", Строка(Источник.Ссылка.УникальныйИдентификатор()));
			СтрокиДерева = Дерево.Строки.НайтиСтроки(ОтборИдентификатор, Истина);
			Если СтрокиДерева.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		
		Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
			НоваяСтрока.Номенклатура = Источник.Категория;
			НоваяСтрока.ЭтоГруппа = Истина;
			НоваяСтрока.ГруппаКаталога = Источник.Категория;
		Иначе
			НоваяСтрока.Номенклатура = Источник.Ссылка;
			НоваяСтрока.ЭтоГруппа = Источник.ЭтоГруппа;
			НоваяСтрока.ГруппаКаталога = Источник.Ссылка;
		КонецЕсли;
		
		НоваяСтрока.Идентификатор = ИдентификаторВСтроке(НоваяСтрока);
		
		Если Источник.Строки.Количество() > 0 Тогда
			ДобавитьКатегориюРекурсивно(НоваяСтрока, Источник.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоказыватьВыбранные Тогда
		ОбновитьВыбранныеТовары(ПоказыватьВыбранные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВДеревоРекурсия(Дерево, тТаблица, МассивДопустимойНоменклатуры, Идентификатор = "")
	
	тПоиск = Новый Структура("РодительИдентификатор", Идентификатор);
	тМассив = тТаблица.НайтиСтроки(тПоиск);
	
	Для Каждого стр Из тМассив Цикл
		
		Если Не стр.ЭтоГруппа И МассивДопустимойНоменклатуры.Найти(стр.Номенклатура) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, стр);
		Если ЗначениеЗаполнено(стр.РодительКатегория) Тогда
			новаяСтрока.Номенклатура = стр.РодительКатегория;
		КонецЕсли;
		Если НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.Картинка = ?(ЗначениеЗаполнено(новаяСтрока.Номенклатура), 1, 0);
		Иначе
			НоваяСтрока.Картинка = 2;
			новаяСтрока.ГруппаКаталога = стр.Номенклатура;
		КонецЕсли;
		ПреобразоватьВДеревоРекурсия(новаяСтрока, тТаблица, МассивДопустимойНоменклатуры, стр.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИзСохраненныхДанных(АдресНастроекСтруктурыКаталога)
	
	Если ЗначениеЗаполнено(АдресНастроекСтруктурыКаталога) Тогда
		СохраненныеДанные = ПолучитьИзВременногоХранилища(АдресНастроекСтруктурыКаталога);
		Если СохраненныеДанные <> Неопределено Тогда
			Дерево = РеквизитФормыВЗначение("ДеревоНаСайте");
			МассивДопустимойНоменклатуры = ПолучитьМассивДопустимойНоменклатуры();
			ПреобразоватьВДеревоРекурсия(Дерево, СохраненныеДанные,МассивДопустимойНоменклатуры);
			ЗначениеВРеквизитФормы(Дерево, "ДеревоНаСайте");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Дерево)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		СвернутьДерево(Строка);
		Элементы.Дерево.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровеньДерева(Уровень)
	
	СвернутьДерево(ДеревоНаСайте);
	РазвернутьДерево(ДеревоНаСайте, Уровень);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Дерево, знач Уровень)
	
	Уровень=Уровень-1;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Уровень>=0 Тогда
			ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
			Элементы.Дерево.Развернуть(ИдентификаторСтроки);
			РазвернутьДерево(Строка, Уровень);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУровень(ТекущаяСтрока, ТекУровень = 0)
	
	РодительВИерархии = ТекущаяСтрока.ПолучитьРодителя();
	Если РодительВИерархии <> Неопределено Тогда
		ТекУровень = ТекУровень + 1;
		ПолучитьУровень(РодительВИерархии, ТекУровень);
	Иначе
		Возврат ТекУровень;
	КонецЕсли;
	
	Возврат ТекУровень;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДополнительныхРеквизитов(ВыбраннаяНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.КатегорияНоменклатуры.НаборСвойств КАК НаборСвойств
	|ПОМЕСТИТЬ ИспользуемыеНаборыСвойств
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&ВыбраннаяНоменклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.КатегорияНоменклатуры.НаборСвойств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуемыеНаборыСвойств.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Значение,
	|	ДополнительныеРеквизитыИСведения.Представление КАК Представление,
	|	ДополнительныеРеквизитыИСведения.Имя КАК ИмяРеквизита
	|ИЗ
	|	ИспользуемыеНаборыСвойств КАК ИспользуемыеНаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ИспользуемыеНаборыСвойств.НаборСвойств = ДополнительныеРеквизитыИСведения.НаборСвойств";
	
	Запрос.УстановитьПараметр("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРеквизита");
	
КонецФункции

&НаСервере
Функция ПолучитьСписокДоступныхРеквизитов()
	
	МассивРеквизитов = Новый Массив;
	МассивИменРеквизитов = Новый Массив;
	
	МассивИменРеквизитов.Добавить("Вес");
	МассивИменРеквизитов.Добавить("Высота");
	МассивИменРеквизитов.Добавить("ГарантийныйСрок");
	МассивИменРеквизитов.Добавить("Артикул");
	МассивИменРеквизитов.Добавить("Весовой");
	МассивИменРеквизитов.Добавить("Длина");
	МассивИменРеквизитов.Добавить("ЕдиницаИзмерения");
	МассивИменРеквизитов.Добавить("НаименованиеПолное");
	МассивИменРеквизитов.Добавить("Объем");
	МассивИменРеквизитов.Добавить("Поставщик");
	МассивИменРеквизитов.Добавить("Производитель");
	МассивИменРеквизитов.Добавить("Склад");
	МассивИменРеквизитов.Добавить("СтранаПроисхождения");
	МассивИменРеквизитов.Добавить("Ширина");
	МассивИменРеквизитов.Добавить("ЭтоНабор");
	МассивИменРеквизитов.Добавить("ЭтоНовинка");
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		СтруктураРеквизита = Новый Структура("Значение,ИмяРеквизита,Представление");
		СтруктураРеквизита.Значение = ИмяРеквизита;
		СтруктураРеквизита.ИмяРеквизита = ИмяРеквизита;
		СтруктураРеквизита.Представление = ИмяРеквизита;
		МассивРеквизитов.Добавить(СтруктураРеквизита);
	КонецЦикла;
	
	Возврат МассивИменРеквизитов;
	
КонецФункции

#КонецОбласти

#Область Отладка

&НаКлиенте
Процедура Команда1(Команда)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииИерархияПереключательПриИзменении(Элемент)
	
	ОтобразитьКатегорииИлиГруппы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКатегорииИлиГруппы()
	
	Если ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		Элементы.СписокНоменклатурыВБазеГруппы.Видимость = Ложь;
		Элементы.СписокНоменклатурыВБазеКатегории.Видимость = Истина;
	Иначе
		Элементы.СписокНоменклатурыВБазеГруппы.Видимость = Истина;
		Элементы.СписокНоменклатурыВБазеКатегории.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	УстановитьПараметрыВидЦенВСписках();
	ПроверитьНаличиеТоваровСНулевойЦеной();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВидЦенВСписках()
	
	Если ЗначениеЗаполнено(ВидЦен.ВалютаЦены.СимвольноеПредставление) Тогда
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.СимвольноеПредставление;
	Иначе
		ПредставлениеВалюты = ВидЦен.ВалютаЦены.Наименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИндивидуальныеЦены

&НаКлиенте
Процедура КнопкаУстановкаИндивидуальныхЦен(Элемент)
	
	СерыйЦвет = Элементы.ГруппаКнопкаНастройкаКаталога.ЦветФона;
	
	ВыключитьТекущуюКнопку();
	
	Элементы.ГруппаКнопкаУстановкаИндивидуальныхЦен.ЦветФона = СерыйЦвет;
	
	Элементы.КнопкаУстановкаИндивидуальныхЦен.Видимость = Истина;
	Элементы.КнопкаУстановкаИндивидуальныхЦенГиперссылка.Видимость = Ложь;
	
	Элементы.ДекорацияУстановкаИндивидуальныхЦен.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйСерый;
	Элементы.ДекорацияУстановкаИндивидуальныхЦен2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйСерый;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУстановкаИндивидуальныхЦен;
	
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьТекущуюКнопку()

	Если Элементы.КнопкаНастройкаКаталога.Видимость Тогда
		
		Элементы.КнопкаНастройкаКаталога.Видимость = Ложь;
		Элементы.КнопкаНастройкаКаталогаГиперссылка.Видимость = Истина;
		
		Элементы.ДекорацияНастройкаКаталога.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйБелый;
		Элементы.ДекорацияНастройкаКаталога2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйБелый;
		
		Элементы.ГруппаКнопкаНастройкаКаталога.ЦветФона = Элементы.ГруппаКнопкаУстановкаИндивидуальныхЦен.ЦветФона;
		
	Иначе
		
		Элементы.КнопкаУстановкаИндивидуальныхЦен.Видимость = Ложь;
		Элементы.КнопкаУстановкаИндивидуальныхЦенГиперссылка.Видимость = Истина;
		
		Элементы.ДекорацияУстановкаИндивидуальныхЦен.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйБелый;
		Элементы.ДекорацияУстановкаИндивидуальныхЦен2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйБелый;
		
		Элементы.ГруппаКнопкаУстановкаИндивидуальныхЦен.ЦветФона = Элементы.ГруппаКнопкаНастройкаКаталога.ЦветФона;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастроитьКаталогГиперссылкаНажатие(Элемент)
	
	СерыйЦвет = Элементы.ГруппаКнопкаУстановкаИндивидуальныхЦен.ЦветФона;
	
	ВыключитьТекущуюКнопку();
	
	Элементы.ГруппаКнопкаНастройкаКаталога.ЦветФона = СерыйЦвет;
	
	Элементы.КнопкаНастройкаКаталога.Видимость = Истина;
	Элементы.КнопкаНастройкаКаталогаГиперссылка.Видимость = Ложь;
	
	Элементы.ДекорацияНастройкаКаталога.Картинка = БиблиотекаКартинок.РадиусКнопкиЛевыйСерый;
	Элементы.ДекорацияНастройкаКаталога2.Картинка = БиблиотекаКартинок.РадиусКнопкиПравыйСерый;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкаКаталога;
	
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьКонтрагента(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагента(МножественныйВыбор)
	
	ПараметрыФормыВыбора = Новый Структура();
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыФормыВыбора.Отбор.Вставить("Покупатель", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",
					ПараметрыФормыВыбора,
					ЭтотОбъект,
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция СоздатьКодКлиента()

	Генератор = Новый ГенераторСлучайныхЧисел();
	
	КодКлиента = КодОбласти;
	КодКлиента = СтрЗаменить(КодКлиента, Символ(160), "");
	КодКлиента = СтрЗаменить(КодКлиента, " ", "");
	
	Для Счетчик = 1 По 5 Цикл
		КодКлиента = КодКлиента + Символ(Генератор.СлучайноеЧисло(65,90));
	КонецЦикла;
		
	КодКлиентаСМаской = "";
	КоличествоСимволовВКоде = СтрДлина(КодКлиента);
	Для Счетчик = 1 По КоличествоСимволовВКоде Цикл
		ТекСимвол = Сред(КодКлиента, Счетчик, 1);
		КодКлиентаСМаской = КодКлиентаСМаской + ТекСимвол;
		Если Счетчик%3 = 0 И Счетчик <> КоличествоСимволовВКоде Тогда
			КодКлиентаСМаской = КодКлиентаСМаской + "-";
		КонецЕсли;
	КонецЦикла;
	
	Если УстановкаИндивидуальныхЦен.Выгрузить(,"КодКлиента").ВыгрузитьКолонку("КодКлиента").Найти(КодКлиентаСМаской) <> Неопределено Тогда
		
		КодКлиентаСМаской = СоздатьКодКлиента();
		
	КонецЕсли;
	
	Возврат КодКлиентаСМаской
	
КонецФункции // ()

&НаСервере
Функция ВидЦенИзДоговора(Договор)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидЦен");

КонецФункции

&НаСервере
Функция ПолучитьДоговорПоУмолчанию(Контрагент)

	Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);

КонецФункции // ()

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "УстановкаИндивидуальныхЦенКонтрагент" Тогда
		ПараметрыКонтрагента = Новый Структура("Ключ", Элемент.ТекущиеДанные.Контрагент);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыКонтрагента);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "УстановкаИндивидуальныхЦенQRКод" Тогда
		НачатьПолучениеФайлаССервера(ПолучитьQRКодКлиента(Элемент.ТекущиеДанные.КодКлиента), СтрШаблон(НСтр("ru = 'QR-код для контрагента (%1).png'"), Строка(Элемент.ТекущиеДанные.Контрагент)));
	КонецЕсли;                       
	
	Если Элемент.ТекущийЭлемент.Имя = "УстановкаИндивидуальныхЦенКодКлиентаСМаской" Тогда
		НастройкиПубликацииМЛККлиент.СкопироватьВБуферОбмена(Элемент.ТекущиеДанные.КодКлиентаСМаской, СтрШаблон(НСтр("ru = 'Код клиента для контрагента (%1) скопирован.'"),Строка(Элемент.ТекущиеДанные.Контрагент)));
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "УстановкаИндивидуальныхЦенОбновить" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбновитьКодКлиентаЗавершение", ЭтотОбъект, Элемент.ТекущиеДанные);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'После обновления кода клиента текущие кабинеты контрагента (%1) будут отключены от индивидуальной цены.
		|
		| Продолжить?'"), Строка(Элемент.ТекущиеДанные.Контрагент));
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКодКлиентаЗавершение(Результат, СтрокаТЗ) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокаТЗ.КодКлиентаСМаской = СоздатьКодКлиента();
		СтрокаТЗ.КодКлиента = СтрЗаменить(СтрокаТЗ.КодКлиентаСМаской, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенДоговорПриИзменении(Элемент)
	
	Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦен = Неопределено;
	
	Если ЗначениеЗаполнено(Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦен) Тогда
		Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = "";
		Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦен;
	Иначе
		ВидЦенИзДоговора = ВидЦенИзДоговора(Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.Договор);
		Если ЗначениеЗаполнено(ВидЦенИзДоговора) Тогда
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = НСтр("ru ='Из договора:'") + Символ(32) + Строка(ВидЦенИзДоговора);
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = ВидЦенИзДоговора;
		Иначе
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = НСтр("ru ='В договоре отсутствует вид цен'");
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьНаличиеТоваровСНулевойЦеной();
КонецПроцедуры

&НаСервере
Функция ПолучитьQRКодКлиента(КодКлиента)
	
	QRСтрока = "sbmcs" + ";" + АдресПриложения + ";" + КодКлиента;
	ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 0, 190);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеQRКода, УникальныйИдентификатор);

КонецФункции // ()

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(Используется)
	Для каждого Строка Из УстановкаИндивидуальныхЦен Цикл
		Строка.Используется = Используется;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеТоваровСНулевойЦеной()
	
	СписокВыбранныхТоваров = МассивВыбраннойНоменклатуры();
	
    СписокВыбранныхВидовЦен = СписокВыбранныхВидовЦен();
	
	КоличествоВыбранныхВидовЦен = СписокВыбранныхВидовЦен.Количество();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокВыбранныхТоваров)
		|	И НЕ Номенклатура.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втНоменклатура.Ссылка КАК Ссылка,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втВидыЦен
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО втНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен В(&СписокВыбранныхВидовЦен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втВидыЦен.ВидЦен) КАК ВидЦен
		|ПОМЕСТИТЬ втКоличествоВидовЦен
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыЦен КАК втВидыЦен
		|		ПО (втВидыЦен.Ссылка = втНоменклатура.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	втНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втКоличествоВидовЦен.Ссылка) КАК КоличествоТоваровБезЦен
		|ИЗ
		|	втКоличествоВидовЦен КАК втКоличествоВидовЦен
		|ГДЕ
		|	втКоличествоВидовЦен.ВидЦен < &КоличествоВыбранныхВидовЦен";
	
	Запрос.УстановитьПараметр("СписокВыбранныхВидовЦен", СписокВыбранныхВидовЦен);
	Запрос.УстановитьПараметр("СписокВыбранныхТоваров", СписокВыбранныхТоваров);
	Запрос.УстановитьПараметр("КоличествоВыбранныхВидовЦен", КоличествоВыбранныхВидовЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	КоличествоТоваровБезЦен = ВыборкаДетальныеЗаписи.КоличествоТоваровБезЦен;
	
	Элементы.ГруппаПредупреждение.Видимость = КоличествоТоваровБезЦен > 0;
	
	Если Элементы.ГруппаПредупреждение.Видимость Тогда
		
		ФормСтрока2 = Новый ФорматированнаяСтрока( СтрокаСЧислом(
		НСтр("ru = ';%1 товар ;
		|;%1 товара ;
		|%1 товаров ;
		|%1 товаров '"),
		КоличествоТоваровБезЦен,
		ВидЧисловогоЗначения.Количественное,
		"Л=ru_RU; ЧН=0; ЧГ=0"),,,,"ПустаяСсылка");
		ФормСтрока3 = Новый ФорматированнаяСтрока(Символ(32) + НСтр("ru = 'без цены.'") + Символ(32));
		
		Массив = Новый Массив;
		Массив.Добавить(ФормСтрока2);
		Массив.Добавить(ФормСтрока3);
		
		Элементы.ДекорацияПодсказкаТоварыБезЦены.Заголовок = Новый ФорматированнаяСтрока(Массив);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокВыбранныхВидовЦен()
	
	СписокВыбранныхВидовЦен = Новый Массив;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		СписокВыбранныхВидовЦен.Добавить(ВидЦен);
	КонецЕсли;
	
	ВидыЦен = УстановкаИндивидуальныхЦен.Выгрузить(,"ВидЦенСлужебнаяСсылка");
	НоваяСтрока = ВидыЦен.Добавить();
	НоваяСтрока.ВидЦенСлужебнаяСсылка = ВидЦен;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦен.ВидЦенСлужебнаяСсылка КАК ВидЦен
	|ПОМЕСТИТЬ втВидыЦен
	|ИЗ
	|	&ВидыЦен КАК ВидыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыЦен.ВидЦен КАК ВидЦен
	|ИЗ
	|	втВидыЦен КАК втВидыЦен
	|ГДЕ
	|	втВидыЦен.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокВыбранныхВидовЦен = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидЦен");

	Возврат СписокВыбранныхВидовЦен
	
КонецФункции

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенВидЦенПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦен) Тогда
		Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = "";
		Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦен;
	Иначе
		ВидЦенИзДоговора = ВидЦенИзДоговора(Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.Договор);
		Если ЗначениеЗаполнено(ВидЦенИзДоговора) Тогда
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = НСтр("ru ='Из договора:'") + Символ(32) + Строка(ВидЦенИзДоговора);
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = ВидЦенИзДоговора;
		Иначе
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенИзДоговора = НСтр("ru ='В договоре отсутствует вид цен'");
			Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные.ВидЦенСлужебнаяСсылка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьНаличиеТоваровСНулевойЦеной();  
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокВыбранныхТоваров", МассивВыбраннойНоменклатуры());
	ПараметрыФормы.Вставить("СписокВыбранныхВидовЦен", СписокВыбранныхВидовЦен());
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НезаполненныеЦеныЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.НастройкиПубликацииМЛК.Форма.НезаполненныеЦены", ПараметрыФормы,,,,,ОписаниеОповещения);

	
КонецПроцедуры

&НаКлиенте
Процедура НезаполненныеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ПроверитьНаличиеТоваровСНулевойЦеной();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенПослеУдаления(Элемент)
	ПроверитьНаличиеТоваровСНулевойЦеной();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИндивидуальныхЦенДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УстановкаИндивидуальныхЦен.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		ДоговорНачалоВыбора(ТекущиеДанные,
																				Элемент,
																				ДанныеВыбора,
																				СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(ТекущиеДанные, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Истина);
	ПараметрыФормы.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
