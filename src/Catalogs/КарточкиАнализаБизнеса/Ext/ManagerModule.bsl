#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру с параметрами создания элемента карточки на форме
//
// Параметры:
//     ВидКарточки - Перечисление.ВидыКарточекАнализаБизнеса
// Возвращаемое значение:
//     Структура - параметры элемента карточки
//
Функция СформироватьПараметрыЭлементаКарточки(ВидКарточки) Экспорт
	
	ПараметрыЭлемента = Новый Структура();
	ПараметрыЭлемента.Вставить("ШаблонПутьКДанным", "%1[%2].SVG"); // Не локализуется
	ПараметрыЭлемента.Вставить("ПутьКДанным", "");
	
	Если ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель Тогда
		ПараметрыЭлемента.Вставить("Ширина", 47);
		Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
			ПараметрыЭлемента.Вставить("Высота", 11);
		Иначе
			ПараметрыЭлемента.Вставить("Высота", 10);
		КонецЕсли;
		ПараметрыЭлемента.Вставить("Масштабировать", Ложь);
		ПараметрыЭлемента.Вставить("Масштаб", 100);
	Иначе // Проверки
		ПараметрыЭлемента.Вставить("Ширина", 22);
		Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
			ПараметрыЭлемента.Вставить("Высота", 9);
		Иначе
			ПараметрыЭлемента.Вставить("Высота", 8);
		КонецЕсли;
		ПараметрыЭлемента.Вставить("Масштабировать", Ложь);
		ПараметрыЭлемента.Вставить("Масштаб", 100);
	КонецЕсли;
	
	ПараметрыЭлемента.Вставить("Действие", "Подключаемый_КарточкаНажатие"); // Не локализуется
	ПараметрыЭлемента.Вставить("ИмяЭлемента", "");
	ПараметрыЭлемента.Вставить("РодительЭлемента", "");
	ПараметрыЭлемента.Вставить("Видимость", Истина);
	
	Возврат ПараметрыЭлемента;

КонецФункции 

// Возвращает данные карточки по ее ссылки
//
// Параметры:
//     СсылкаНаКарточку - СправочникСсылка.КарточкиАнализаБизнеса
// Возвращаемое значение:
//     Структура - Данные карточки
//
Функция ПолучитьДанныеКарточки(СсылкаНаКарточку) Экспорт
	
	ДанныеКарточки = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиАнализаБизнеса.Ссылка КАК Ссылка,
		|	КарточкиАнализаБизнеса.Наименование КАК Наименование,
		|	КарточкиАнализаБизнеса.ВидКарточки КАК ВидКарточки,
		|	КарточкиАнализаБизнеса.ПоказательБизнеса.ВидОтчета КАК ВидОтчета,
		|	КарточкиАнализаБизнеса.ПоказательБизнеса КАК Показатель,
		|	КарточкиАнализаБизнеса.ПоказательБизнеса.ЭтоПроцент КАК ЭтоПроцент,
		|	КарточкиАнализаБизнеса.ВариантПроверки КАК ВариантПроверки,
		|	КарточкиАнализаБизнеса.ВидСравненияЗначений КАК ВидСравненияЗначений,
		|	ВЫБОР
		|		КОГДА КарточкиАнализаБизнеса.ВариантПроверки = ЗНАЧЕНИЕ(Перечисление.ВариантыПроверокАнализаБизнеса.СравнениеСФиксированнымЗначением)
		|			ТОГДА КарточкиАнализаБизнеса.ЗначениеДляСравнения
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЗначениеДляСравнения,
		|	ВЫБОР
		|		КОГДА КарточкиАнализаБизнеса.ВариантПроверки = ЗНАЧЕНИЕ(Перечисление.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем)
		|			ТОГДА КарточкиАнализаБизнеса.ЗначениеДляСравнения
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПоказателиБизнеса.ПустаяСсылка)
		|	КОНЕЦ КАК ПоказательДляСравнения,
		|	КарточкиАнализаБизнеса.ВидИзменения КАК ВидИзменения,
		|	КарточкиАнализаБизнеса.Период КАК Период,
		|	ВЫБОР
		|		КОГДА КарточкиАнализаБизнеса.ВидКарточки = ЗНАЧЕНИЕ(Перечисление.ВидыКарточекАнализаБизнеса.Цель)
		|			ТОГДА КарточкиАнализаБизнеса.СценарийПланирования.Периодичность
		|		ИНАЧЕ КарточкиАнализаБизнеса.Периодичность
		|	КОНЕЦ КАК Периодичность,
		|	ВЫБОР
		|		КОГДА КарточкиАнализаБизнеса.ВидКарточки = ЗНАЧЕНИЕ(Перечисление.ВидыКарточекАнализаБизнеса.Цель)
		|			ТОГДА КарточкиАнализаБизнеса.СценарийПланирования
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический)
		|	КОНЕЦ КАК СценарийПланирования,
		|	КарточкиАнализаБизнеса.ПерваяСтрокаЗаголовка КАК ПерваяСтрокаЗаголовка,
		|	КарточкиАнализаБизнеса.ВтораяСтрокаЗаголовка КАК ВтораяСтрокаЗаголовка,
		|	КарточкиАнализаБизнеса.ОтображатьПредыдущийПериод КАК ОтображатьПредыдущийПериод
		|ИЗ
		|	Справочник.КарточкиАнализаБизнеса КАК КарточкиАнализаБизнеса
		|ГДЕ
		|	КарточкиАнализаБизнеса.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаКарточку);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРеквизитыКарточки = РезультатЗапроса.Выбрать();
	
	Если ВыборкаРеквизитыКарточки.Следующий() Тогда
		
		Если ВыборкаРеквизитыКарточки.ВидКарточки = Перечисления.ВидыКарточекАнализаБизнеса.Цель Тогда
			
			ДанныеКарточки = ПолучитьДанныеЦели(ВыборкаРеквизитыКарточки);
			
		Иначе // Проверки
			
			Если ВыборкаРеквизитыКарточки.ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.Динамика Тогда
				ДанныеКарточки = ПолучитьДанныеДинамика(ВыборкаРеквизитыКарточки);
			КонецЕсли;
			
			Если ВыборкаРеквизитыКарточки.ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСФиксированнымЗначением Тогда
				ДанныеКарточки = ПолучитьДанныеСравнениеСоЗначением(ВыборкаРеквизитыКарточки);
			КонецЕсли;
			
			Если ВыборкаРеквизитыКарточки.ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем Тогда
				ДанныеКарточки = ПолучитьДанныеСравнениеСПоказателем(ВыборкаРеквизитыКарточки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеКарточки;
	
КонецФункции

// Возвращает символ вида сравнения для компактного вывода в карточку анализа бизнеса
//
// Параметры:
//     ВидСравнения - Перечисление.ВидСравненияЗначений
// Возвращаемое значение:
//     Строка - Символ соответствующий переданному виду сравнения.
//
Функция СимволВидаСравнения(ВидСравнения) Экспорт
	
	Если ВидСравнения = Перечисления.ВидСравненияЗначений.Больше Тогда
		СимволВидаСравнения = ">"; // Не локализуется
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		СимволВидаСравнения = "≥"; // Не локализуется
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.Меньше Тогда
		СимволВидаСравнения = "&lt;"; // Не локализуется
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		СимволВидаСравнения = "≤"; // Не локализуется
	ИначеЕсли ВидСравнения = Перечисления.ВидСравненияЗначений.Равно Тогда
		СимволВидаСравнения = "="; // Не локализуется
	Иначе // Не равно
		СимволВидаСравнения = "≠"; // Не локализуется
	КонецЕсли;
	
	Возврат СимволВидаСравнения;
	
КонецФункции

// Возвращает текст запроса расшифровки значения показателя АнализаБизнеса
//
// Параметры:
//     Сумма - Число
//     ЭтоПроцент - Булево
// Возвращаемое значение:
//     Строка - Представление суммы карточки в виде строки.
//
Функция ПолучитьПредставлениеСуммы(Сумма, ЭтоПроцент) Экспорт
	
	Если ЭтоПроцент Тогда
		ПредставлениеСуммы = Строка(Окр(Сумма, 1)) + " %";
	Иначе
		ПредставлениеСуммы = Строка(Окр(Сумма, 2));
	КонецЕсли;
	
	Возврат ПредставлениеСуммы;
	
КонецФункции

// Формирует набор поставляемых карточек в обработчике обновления или при первоначальном заполнении информационной базы
//
//
Процедура СформироватьНаборПоставляемыхКарточек() Экспорт
	
	ШаблонИмениМакетаОписание = "Карточка%1Описание"; // Не Локализуется
	ШаблонИмениМакетаХорошо = "Карточка%1ОценкаХорошо"; // Не Локализуется
	ШаблонИмениМакетаПлохо = "Карточка%1ОценкаПлохо"; // Не Локализуется
	
	КарточкаЧистаяПрибыль = Новый Структура;
	КарточкаЧистаяПрибыль.Вставить("Имя", 						  "ЧистаяПрибыль");
	КарточкаЧистаяПрибыль.Вставить("ИмяПоказателя", 			  "Чистая прибыль");
	КарточкаЧистаяПрибыль.Вставить("ПерваяСтрокаЗаголовка", 	  "Чистая прибыль");
	КарточкаЧистаяПрибыль.Вставить("ВидОтчета", 	  			  Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы);
	КарточкаЧистаяПрибыль.Вставить("ВидКарточки", 				  Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	КарточкаЧистаяПрибыль.Вставить("ПоказательБизнеса", 		  Справочники.ПоказателиБизнеса.ПустаяСсылка());
	КарточкаЧистаяПрибыль.Вставить("ВариантПроверки", 			  Перечисления.ВариантыПроверокАнализаБизнеса.Динамика);
	КарточкаЧистаяПрибыль.Вставить("ВидИзменения", 				  Перечисления.ИзменениеЗначенияПоказателя.Увеличение);
	КарточкаЧистаяПрибыль.Вставить("Период", 					  Перечисления.ДоступныеПериодыОтчета.Квартал);
	КарточкаЧистаяПрибыль.Вставить("Периодичность", 			  Перечисления.Периодичность.Месяц);
	КарточкаЧистаяПрибыль.Вставить("ТекстПоложительныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаХорошо,   КарточкаЧистаяПрибыль));
	КарточкаЧистаяПрибыль.Вставить("ТекстОтрицательныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаПлохо,    КарточкаЧистаяПрибыль));
	КарточкаЧистаяПрибыль.Вставить("ТекстОписаниеПроверки", 	  ПолучитьОписаниеИзМакета(ШаблонИмениМакетаОписание, КарточкаЧистаяПрибыль));
	
	СформироватьКарточкуПоПараметрам(КарточкаЧистаяПрибыль);
	
	КарточкаПродажи = Новый Структура;
	КарточкаПродажи.Вставить("Имя", 						"Продажи");
	КарточкаПродажи.Вставить("ИмяПоказателя", 				"Выручка");
	КарточкаПродажи.Вставить("ПерваяСтрокаЗаголовка", 		"Продажи");
	КарточкаПродажи.Вставить("ВидОтчета", 					Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы);
	КарточкаПродажи.Вставить("ВидКарточки", 				Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	КарточкаПродажи.Вставить("ПоказательБизнеса", 			Справочники.ПоказателиБизнеса.ПустаяСсылка());
	КарточкаПродажи.Вставить("ВариантПроверки", 			Перечисления.ВариантыПроверокАнализаБизнеса.Динамика);
	КарточкаПродажи.Вставить("ВидИзменения", 				Перечисления.ИзменениеЗначенияПоказателя.Увеличение);
	КарточкаПродажи.Вставить("Период", 						Перечисления.ДоступныеПериодыОтчета.Квартал);
	КарточкаПродажи.Вставить("Периодичность", 				Перечисления.Периодичность.Месяц);
	КарточкаПродажи.Вставить("ТекстПоложительныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаХорошо,   КарточкаПродажи));
	КарточкаПродажи.Вставить("ТекстОтрицательныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаПлохо,    КарточкаПродажи));
	КарточкаПродажи.Вставить("ТекстОписаниеПроверки", 		ПолучитьОписаниеИзМакета(ШаблонИмениМакетаОписание, КарточкаПродажи));
	
	СформироватьКарточкуПоПараметрам(КарточкаПродажи);
	
	КарточкаМаржинальность = Новый Структура;
	КарточкаМаржинальность.Вставить("Имя", 						   "Маржинальность");
	КарточкаМаржинальность.Вставить("ИмяПоказателя", 			   "Маржинальность");
	КарточкаМаржинальность.Вставить("ПерваяСтрокаЗаголовка", 	   "Марж %");
	КарточкаМаржинальность.Вставить("ВидОтчета", 				   Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы);
	КарточкаМаржинальность.Вставить("ВидКарточки", 				   Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	КарточкаМаржинальность.Вставить("ПоказательБизнеса", 		   Справочники.ПоказателиБизнеса.ПустаяСсылка());
	КарточкаМаржинальность.Вставить("ВариантПроверки", 			   Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСФиксированнымЗначением);
	КарточкаМаржинальность.Вставить("ВидСравненияЗначений", 	   Перечисления.ВидСравненияЗначений.БольшеИлиРавно);
	КарточкаМаржинальность.Вставить("ЗначениеДляСравнения", 	   25);
	КарточкаМаржинальность.Вставить("Период", 					   Перечисления.ДоступныеПериодыОтчета.Квартал);
	КарточкаМаржинальность.Вставить("ТекстПоложительныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаХорошо,   КарточкаМаржинальность));
	КарточкаМаржинальность.Вставить("ТекстОтрицательныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаПлохо,    КарточкаМаржинальность));
	КарточкаМаржинальность.Вставить("ТекстОписаниеПроверки", 	   ПолучитьОписаниеИзМакета(ШаблонИмениМакетаОписание, КарточкаМаржинальность));
	
	СформироватьКарточкуПоПараметрам(КарточкаМаржинальность);
	
	КарточкаДебиторкаКредиторка = Новый Структура;
	КарточкаДебиторкаКредиторка.Вставить("Имя", 						"ДебиторкаКредиторка");
	КарточкаДебиторкаКредиторка.Вставить("ИмяПоказателя", 				"Дебиторская задолженность");
	КарточкаДебиторкаКредиторка.Вставить("ИмяПоказателяСравнение", 		"Кредиторская задолженность");
	КарточкаДебиторкаКредиторка.Вставить("ПерваяСтрокаЗаголовка", 		"Дебиторка");
	КарточкаДебиторкаКредиторка.Вставить("ВтораяСтрокаЗаголовка", 		"Кредиторка");
	КарточкаДебиторкаКредиторка.Вставить("ВидОтчета", 					Перечисления.ВидыФинансовыхОтчетов.Баланс);
	КарточкаДебиторкаКредиторка.Вставить("ВидКарточки", 				Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	КарточкаДебиторкаКредиторка.Вставить("ПоказательБизнеса", 			Справочники.ПоказателиБизнеса.ПустаяСсылка());
	КарточкаДебиторкаКредиторка.Вставить("ВариантПроверки", 			Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем);
	КарточкаДебиторкаКредиторка.Вставить("ВидСравненияЗначений", 		Перечисления.ВидСравненияЗначений.БольшеИлиРавно);
	КарточкаДебиторкаКредиторка.Вставить("ЗначениеДляСравнения", 		Справочники.ПоказателиБизнеса.ПустаяСсылка());
	КарточкаДебиторкаКредиторка.Вставить("Период", 						Перечисления.ДоступныеПериодыОтчета.Квартал);
	КарточкаДебиторкаКредиторка.Вставить("ТекстПоложительныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаХорошо,   КарточкаДебиторкаКредиторка));
	КарточкаДебиторкаКредиторка.Вставить("ТекстОтрицательныйРезультат", ПолучитьОписаниеИзМакета(ШаблонИмениМакетаПлохо,    КарточкаДебиторкаКредиторка));
	КарточкаДебиторкаКредиторка.Вставить("ТекстОписаниеПроверки", 		ПолучитьОписаниеИзМакета(ШаблонИмениМакетаОписание, КарточкаДебиторкаКредиторка));
	
	СформироватьКарточкуПоПараметрам(КарточкаДебиторкаКредиторка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтрисовкаSVGИзображений

Процедура ЗаполнитьSVGДаннымиЦель(ДанныеКарточки)
	
	СтрокаSVG = АнализБизнесаПовтИсп.ШаблонКарточкиЦели();
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Заголовок1", ДанныеКарточки.ПерваяСтрокаЗаголовка);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Заголовок2", ДанныеКарточки.ВтораяСтрокаЗаголовка);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "М_1", ПредставлениеПериодаПоДаннымКарточки(ДанныеКарточки, ДанныеКарточки.ПериодАнализа.ДатаОкончания));
	
	Если ДанныеКарточки.ОтображатьПредыдущийПериод Тогда
		СтрокаSVG = СтрЗаменить(СтрокаSVG, "М_2", ПредставлениеПериодаПоДаннымКарточки(ДанныеКарточки, ДанныеКарточки.ПериодАнализа.ДатаНачала));
		ОбновитьПрогрессЦели(СтрокаSVG, ДанныеКарточки, Истина);
	Иначе
		УдалитьДанныеПредыдущегоПериода(СтрокаSVG);
	КонецЕсли;
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "СуммаФакт", ПолучитьПредставлениеСуммы(ДанныеКарточки.СуммаФакт, ДанныеКарточки.ЭтоПроцент));
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Пр_1", Строка(ДанныеКарточки.Процент) + "%");
	
	ОбновитьПрогрессЦели(СтрокаSVG, ДанныеКарточки);
	
	ДанныеКарточки.Вставить("СтрокаSVG", СтрокаSVG);
	
КонецПроцедуры

Процедура СформироватьТекстSVGДинамика(ДанныеКарточки)
	
	СтрокаSVG = АнализБизнесаПовтИсп.ШаблонКарточкиАнализаПоВариантуПроверки(ДанныеКарточки.ВариантПроверки);
	
	ПредставлениеПериода = ПредставлениеПериода(ДанныеКарточки.ПериодАнализа.ДатаНачала, ДанныеКарточки.ПериодАнализа.ДатаОкончания);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "НазваниеКарточки", ДанныеКарточки.ПерваяСтрокаЗаголовка);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "ПредставлениеПериода", ПредставлениеПериода);
	
	СформироватьКолонкиДиаграммыПоДаннымДинамики(СтрокаSVG, ДанныеКарточки);
	
	ИзменитьSVGПоОценке(СтрокаSVG, ДанныеКарточки);
	
	ДанныеКарточки.Вставить("СтрокаSVG", СтрокаSVG);
	
КонецПроцедуры

Процедура СформироватьТекстSVGСравнениеСоЗначением(ДанныеКарточки)
	
	СтрокаSVG = АнализБизнесаПовтИсп.ШаблонКарточкиАнализаПоВариантуПроверки(ДанныеКарточки.ВариантПроверки);
	
	СтрокаЗначенияСравнения = Справочники.КарточкиАнализаБизнеса.СимволВидаСравнения(ДанныеКарточки.ВидСравненияЗначений);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "> 00%", СтрокаЗначенияСравнения);
	
	ДанныеКарточки.Вставить("СтрокаSVG", СтрокаSVG);
	
	ПредставлениеПериода = ПредставлениеПериодаПоДаннымКарточки(ДанныеКарточки);
	
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Заголовок1", 	   ДанныеКарточки.ПерваяСтрокаЗаголовка);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "СуммаПоказатель1", ПолучитьПредставлениеСуммы(ДанныеКарточки.СуммаПоказателя, ДанныеКарточки.ЭтоПроцент));
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "М_1",			   ПредставлениеПериода);
	
	СимволСравнения = СимволВидаСравнения(ДанныеКарточки.ВидСравненияЗначений);
	СтрокаЗначенияСравнения = СимволСравнения + " " + ПолучитьПредставлениеСуммы(ДанныеКарточки.ЗначениеДляСравнения, ДанныеКарточки.ЭтоПроцент);
	
	Если СтрДлина(СтрокаЗначенияСравнения) > 6 Тогда // Необходимо уменьшать шрифт надписи
		Коэффициент = 8 / СтрДлина(СтрокаЗначенияСравнения);
		РазмерШрифта = Формат(16 * Коэффициент,"ЧРД=.");
		Шаблон =  "font-size=""%1px""";
		СтрокаSVG = СтрЗаменить(СтрокаSVG, "font-size=""16px""", СтрШаблон(Шаблон, РазмерШрифта));
	КонецЕсли;
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Знч1",			   СтрокаЗначенияСравнения);
	
	ИзменитьSVGПоОценке(СтрокаSVG, ДанныеКарточки);
	
	ДанныеКарточки.Вставить("СтрокаSVG", СтрокаSVG);

КонецПроцедуры

Процедура СформироватьТекстSVGСравнениеСПоказателем(ДанныеКарточки)
	
	СтрокаSVG = АнализБизнесаПовтИсп.ШаблонКарточкиАнализаПоВариантуПроверки(ДанныеКарточки.ВариантПроверки);
	ПредставлениеПериода = ПредставлениеПериодаПоДаннымКарточки(ДанныеКарточки);
	СимволСравнения = СимволВидаСравнения(ДанныеКарточки.ВидСравненияЗначений);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Заголовок1", 	   ДанныеКарточки.ПерваяСтрокаЗаголовка);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "Заголовок2", 	   ДанныеКарточки.ВтораяСтрокаЗаголовка);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "М_1",			   ПредставлениеПериода);
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "зн_1",			   СимволСравнения); // АПК:1036
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "СуммаПоказатель1", ПолучитьПредставлениеСуммы(ДанныеКарточки.СуммаПоказателя, ДанныеКарточки.ЭтоПроцент));
	СтрокаSVG = СтрЗаменить(СтрокаSVG, "СуммаПоказатель2", ПолучитьПредставлениеСуммы(ДанныеКарточки.ЗначениеДляСравнения, ДанныеКарточки.ЭтоПроцент));
	
	ИзменитьSVGПоОценке(СтрокаSVG, ДанныеКарточки);
	
	ДанныеКарточки.Вставить("СтрокаSVG", СтрокаSVG);
	
КонецПроцедуры

Процедура ОбновитьПрогрессЦели(СтрокаSVG, ДанныеКарточки, ЭтоПредыдущийПериод = Ложь)
	
	Если ЭтоПредыдущийПериод Тогда
		Шаблон = "<path d=""m87 8.7 a17.5 17.5 [asx] [arc] 1 [endx] [endy]"" stroke=""#666"" stroke-linecap=""round"" fill=""none"" stroke-width=""1.265""/>"; // Не локализуется
		ТекстЦельВыполнена = "<circle cx=""87.2"" cy=""26.2"" r=""17.5"" fill=""none"" stroke=""#666"" stroke-width=""1.265""/>"; // Не локализуется
		МаркерНачала = "<!--start_lineA-->"; // Не локализуется
		МаркерОкончания = "<!--end_lineA-->"; // Не локализуется
		Процент = ДанныеКарточки.ПроцентПредыдущийПериод;
	Иначе
		Шаблон = "<path d=""m87 8.7 a17.5 17.5 [asx] [arc] 1 [endx] [endy]"" stroke=""#ffbc02"" stroke-linecap=""round"" fill=""none"" stroke-width=""2.565""/>"; // Не локализуется
		ТекстЦельВыполнена = "<circle cx=""87.2"" cy=""26.2"" r=""17.5"" fill=""none"" stroke=""#ffbc02"" stroke-width=""2.565""/>"; // Не локализуется
		МаркерНачала = "<!--start_lineB-->"; // Не локализуется
		МаркерОкончания = "<!--end_lineB-->"; // Не локализуется
		Процент = ДанныеКарточки.Процент;
	КонецЕсли;
	
	Если Процент >= 100 Тогда
		СтрокаКольцевойДиаграммы = ТекстЦельВыполнена;
	Иначе
		
		Пи = 3.1415926535897932;
		Радиус = 17.5;
		
		ПараметрыКривой = Новый Структура;
		ПараметрыКривой.Вставить("asx", 0);
		ПараметрыКривой.Вставить("arc", 0);
		ПараметрыКривой.Вставить("endx",0);
		ПараметрыКривой.Вставить("endy",0);
		
		УголВГрадусах = Процент * 3.6 + 90;
		Угол = УголВГрадусах * Пи / 180;
		
		ПараметрыКривой.endx = Окр(Радиус * Cos(Угол) * -1, 2);
		ПараметрыКривой.endy = Окр(Радиус - Радиус * Sin(Угол), 2);
		
		Если ПараметрыКривой.endx < 0 Тогда
			ПараметрыКривой.asx = 1;
			ПараметрыКривой.arc = 1;
		КонецЕсли;
		
		ПараметрыКривой.endx = Формат(ПараметрыКривой.endx ,"ЧРД=.; ЧН=0");
		ПараметрыКривой.endy = Формат(ПараметрыКривой.endy ,"ЧРД=.; ЧН=0");
		
		СтрокаКольцевойДиаграммы = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыКривой);
		
	КонецЕсли;
	
	КоординатыНачала = СтрНайти(СтрокаSVG, МаркерНачала) + СтрДлина(МаркерНачала);
	КоординатыКонца = СтрНайти(СтрокаSVG, МаркерОкончания);
	
	ПодстрокаПоиска = Сред(СтрокаSVG, КоординатыНачала, КоординатыКонца - КоординатыНачала);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, ПодстрокаПоиска, СтрокаКольцевойДиаграммы);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

Функция ПредставлениеПериодаПоДаннымКарточки(ДанныеКарточки, Период = Неопределено)
	
	Если Период = Неопределено Тогда
		Период = ДанныеКарточки.ПериодАнализа.ДатаНачала;
	КонецЕсли;
	
	Если ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Месяц
		ИЛИ ДанныеКарточки.Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		ПредставлениеПериода = Лев(Формат(Период, НСтр("ru = 'ДФ=MMMM'")), 3);
		
	ИначеЕсли ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Квартал
		ИЛИ ДанныеКарточки.Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Квартал = Формат(Период, НСтр("ru = 'ДФ=к'"));
		Шаблон = НСтр("ru = '%1 Кв'");
		ПредставлениеПериода = СтрШаблон(Шаблон, Квартал);
		
	ИначеЕсли ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Полугодие
		ИЛИ ДанныеКарточки.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		Полугодие = ?(Месяц(Период) / 6 <= 1, 1, 2);
		Шаблон = НСтр("ru = '%1 Пол'");
		ПредставлениеПериода = СтрШаблон(Шаблон, Полугодие);
		
	Иначе // Год
		
		ПредставлениеПериода = Формат(Период, НСтр("ru = 'ДФ=yyyy'"));
		
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Функция ПолучитьДанныеЦели(ВыборкаРеквизитов)
	
	ДанныеКарточки = ИнициализироватьДанныеКарточки();
	ТекущийПериод = Новый СтандартныйПериод;
	ПредыдущийПериод = Новый СтандартныйПериод;
	Если ВыборкаРеквизитов.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
		ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	ИначеЕсли ВыборкаРеквизитов.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал;
		ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПрошлыйКвартал;
	Иначе // Полугодие
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие;
		ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПрошлоеПолугодие;
	КонецЕсли;
	
	Если ВыборкаРеквизитов.ОтображатьПредыдущийПериод Тогда
		ДанныеКарточки.ПериодАнализа.ДатаНачала = ПредыдущийПериод.ДатаНачала;
		ДанныеКарточки.ПериодАнализа.ДатаОкончания = ТекущийПериод.ДатаОкончания; 
	Иначе
		ДанныеКарточки.ПериодАнализа = ТекущийПериод;
	КонецЕсли;
	
	ДанныеКарточки.ТекущийПериод = ТекущийПериод.ДатаНачала;
	ДанныеКарточки.ПредыдущийПериод = ПредыдущийПериод.ДатаНачала;
	
	// Заполняем реквизиты карточки
	ЗаполнитьЗначенияСвойств(ДанныеКарточки, ВыборкаРеквизитов);
	
	МассивПоказателейДляОтбора = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(ДанныеКарточки.Показатель, МассивПоказателейДляОтбора);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляОтбора);

	Запрос = Новый Запрос;
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ВыборкаРеквизитов.ВидОтчета, Перечисления.ПланФакт.ПланФакт, ВыборкаРеквизитов.Периодичность, Ложь);
			
	Запрос.УстановитьПараметр("СценарийПланирования", ДанныеКарточки.СценарийПланирования);
	Запрос.УстановитьПараметр("Показатели", МассивПоказателейДляОтбора);
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеКарточки.ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДанныеКарточки.ПериодАнализа.ДатаОкончания);
			
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьСуммыЦелиРекурсивно(ДанныеКарточки, ДанныеКарточки.Показатель, ТаблицаДанных);
	
	СтрокиПоПоказателю = ТаблицаДанных.НайтиСтроки(Новый Структура("Показатель", ДанныеКарточки.Показатель));
	Для каждого СтрокаДанных Из СтрокиПоПоказателю Цикл
		Если СтрокаДанных.Период = ДанныеКарточки.ТекущийПериод Тогда
			ДанныеКарточки.СуммаПлан = ДанныеКарточки.СуммаПлан + СтрокаДанных.СуммаПлан;
			ДанныеКарточки.СуммаФакт = ДанныеКарточки.СуммаФакт + СтрокаДанных.СуммаФакт;
		Иначе
			ДанныеКарточки.СуммаФактПредыдущийПериод = ДанныеКарточки.СуммаФактПредыдущийПериод + СтрокаДанных.СуммаФакт;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеКарточки.СуммаПлан <> 0 Тогда
		ДанныеКарточки.Процент = Окр(((ДанныеКарточки.СуммаФакт / ДанныеКарточки.СуммаПлан) * 100), 1);
		ДанныеКарточки.ПроцентПредыдущийПериод = Окр(((ДанныеКарточки.СуммаФактПредыдущийПериод / ДанныеКарточки.СуммаПлан) * 100), 1);
	КонецЕсли;
	
	ЗаполнитьSVGДаннымиЦель(ДанныеКарточки);
	
	Возврат ДанныеКарточки;
	
КонецФункции

Функция ПолучитьДанныеДинамика(ВыборкаРеквизитов)
	
	ДанныеКарточки = ИнициализироватьДанныеКарточки();
	ЗаполнитьЗначенияСвойств(ДанныеКарточки, ВыборкаРеквизитов);
	
	ТекущийПериод = Новый СтандартныйПериод;
	
	Если ДанныеКарточки.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ДанныеКарточки.Период = Перечисления.Периодичность.Квартал Тогда
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтотКвартал;
	Иначе // Полугодие
		ТекущийПериод.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие;
	КонецЕсли;
	
	АктивныйПериод = ТекущийПериод.ДатаНачала;
	
	ЗаполнитьПериодАнализа(ДанныеКарточки);
	
	МассивПоказателейДляОтбора = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(ДанныеКарточки.Показатель, МассивПоказателейДляОтбора);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляОтбора);
	
	ТекстЗапроса = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ВыборкаРеквизитов.ВидОтчета, Перечисления.ПланФакт.Факт, ДанныеКарточки.Периодичность, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Запрос.УстановитьПараметр("Показатели", МассивПоказателейДляОтбора);
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеКарточки.ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДанныеКарточки.ПериодАнализа.ДатаОкончания);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	СписокПериодов = Новый СписокЗначений;
	ПоказателиБизнесаФормы.ЗаполнитьСписокПериодов(СписокПериодов, ДанныеКарточки.ПериодАнализа, ДанныеКарточки.Периодичность);
	
	МассивДинамики = Новый Массив;
	МассивСуммДляТренда = Новый Массив;
	Для каждого Период Из СписокПериодов Цикл
		
		Если АктивныйПериод < Период.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоПериоду = Новый Структура("Период,Сумма", Период.Значение, 0);
		ЗаполнитьСуммуПоказателяРекурсивно(СтруктураПоПериоду.Сумма, Период.Значение, ДанныеКарточки.Показатель, ТаблицаДанных);
		МассивСуммДляТренда.Добавить(СтруктураПоПериоду.Сумма);
		МассивДинамики.Добавить(СтруктураПоПериоду);
		
	КонецЦикла;
	
	КоэффициентТренда = ПолучитьКоэффициентТренда(МассивСуммДляТренда);
	
	Если (ВыборкаРеквизитов.ВидИзменения = Перечисления.ИзменениеЗначенияПоказателя.Увеличение И КоэффициентТренда > 0) 
		ИЛИ (ВыборкаРеквизитов.ВидИзменения = Перечисления.ИзменениеЗначенияПоказателя.Уменьшение И КоэффициентТренда < 0) Тогда
		
		ДанныеКарточки.ОценкаХорошо = Истина;
		
	Иначе
		
		ДанныеКарточки.ОценкаХорошо = Ложь;
		
	КонецЕсли;
	
	ДанныеКарточки.Вставить("ТаблицаДинамики", МассивДинамики);
	СформироватьТекстSVGДинамика(ДанныеКарточки);
	
	Возврат ДанныеКарточки;
	
КонецФункции

Функция ПолучитьДанныеСравнениеСоЗначением(ВыборкаРеквизитов)
	
	ДанныеКарточки = ИнициализироватьДанныеКарточки();
	ЗаполнитьЗначенияСвойств(ДанныеКарточки, ВыборкаРеквизитов);
	
	ЗаполнитьПериодАнализа(ДанныеКарточки);
	
	МассивПоказателейДляОтбора = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(ДанныеКарточки.Показатель, МассивПоказателейДляОтбора);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляОтбора);
	
	ТекстЗапроса = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ВыборкаРеквизитов.ВидОтчета, Перечисления.ПланФакт.Факт, ВыборкаРеквизитов.Периодичность, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Запрос.УстановитьПараметр("Показатели", МассивПоказателейДляОтбора);
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеКарточки.ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДанныеКарточки.ПериодАнализа.ДатаОкончания);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьСуммуПоказателяРекурсивно(ДанныеКарточки.СуммаПоказателя, ДанныеКарточки.ПериодАнализа.ДатаНачала, ДанныеКарточки.Показатель, ТаблицаДанных);
	
	Если ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Больше Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя > ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя >= ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Меньше Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя < ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя <= ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Равно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя = ДанныеКарточки.ЗначениеДляСравнения);
	Иначе // Не равно
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя <> ДанныеКарточки.ЗначениеДляСравнения);
	КонецЕсли;
	
	СформироватьТекстSVGСравнениеСоЗначением(ДанныеКарточки);
	
	Возврат ДанныеКарточки;
	
КонецФункции

Функция ПолучитьДанныеСравнениеСПоказателем(ВыборкаРеквизитов)
	
	ДанныеКарточки = ИнициализироватьДанныеКарточки();
	ЗаполнитьЗначенияСвойств(ДанныеКарточки, ВыборкаРеквизитов);
	
	ЗаполнитьПериодАнализа(ДанныеКарточки);
	
	МассивПоказателейДляОтбора = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(ДанныеКарточки.Показатель, 			   МассивПоказателейДляОтбора);
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(ДанныеКарточки.ПоказательДляСравнения, МассивПоказателейДляОтбора);
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПоказателейДляОтбора);

	ТекстЗапроса = ПоказателиБизнеса.ТекстЗапросаДляОтчета(ВыборкаРеквизитов.ВидОтчета, Перечисления.ПланФакт.Факт, ВыборкаРеквизитов.Периодичность, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Запрос.УстановитьПараметр("Показатели", МассивПоказателейДляОтбора);
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеКарточки.ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДанныеКарточки.ПериодАнализа.ДатаОкончания);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьСуммуПоказателяРекурсивно(ДанныеКарточки.СуммаПоказателя, ДанныеКарточки.ПериодАнализа.ДатаНачала, ДанныеКарточки.Показатель, ТаблицаДанных);
	ЗаполнитьСуммуПоказателяРекурсивно(ДанныеКарточки.ЗначениеДляСравнения, ДанныеКарточки.ПериодАнализа.ДатаНачала, ДанныеКарточки.ПоказательДляСравнения, ТаблицаДанных);
	
	Если ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Больше Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя > ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя >= ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Меньше Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя < ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя <= ДанныеКарточки.ЗначениеДляСравнения);
	ИначеЕсли ВыборкаРеквизитов.ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Равно Тогда
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя = ДанныеКарточки.ЗначениеДляСравнения);
	Иначе // Не равно
		ДанныеКарточки.ОценкаХорошо = (ДанныеКарточки.СуммаПоказателя <> ДанныеКарточки.ЗначениеДляСравнения);
	КонецЕсли;
	
	СформироватьТекстSVGСравнениеСПоказателем(ДанныеКарточки);
	
	Возврат ДанныеКарточки;
	
КонецФункции

Процедура ЗаполнитьСуммыЦелиРекурсивно(ДанныеКарточки, Показатель, ТаблицаДанных)
	
	Если Показатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоказателя = Показатель.ТипПоказателя;
	Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход ИЛИ ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоказателя = ТаблицаДанных.Добавить();
	СтрокаПоказателя.Период = ДанныеКарточки.ТекущийПериод;
	СтрокаПоказателя.Показатель = Показатель;
	СтрокаПоказателя.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;
	СтрокаПоказателя.СуммаПлан = 0;
	СтрокаПоказателя.СуммаФакт = 0;
	
	Если ДанныеКарточки.ОтображатьПредыдущийПериод Тогда
		СтрокаПредыдущийПериод = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредыдущийПериод, СтрокаПоказателя);
		СтрокаПредыдущийПериод.Период = ДанныеКарточки.ПредыдущийПериод;
	КонецЕсли;

	Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
		
		ПодчиненныеПоказатели = Справочники.ПоказателиБизнеса.ПолучитьПодчиненныеПоказатели(Показатель);
		
		Для каждого ПодчиненныйПоказатель Из ПодчиненныеПоказатели Цикл
			
			ЗаполнитьСуммыЦелиРекурсивно(ДанныеКарточки, ПодчиненныйПоказатель, ТаблицаДанных);
			
			ПоПодчиненному = ТаблицаДанных.НайтиСтроки( Новый Структура("Показатель", ПодчиненныйПоказатель));
			
			Для каждого СтрокаДанных Из ПоПодчиненному Цикл
				Если СтрокаДанных.Период = ДанныеКарточки.ТекущийПериод Тогда
					СтрокаПоказателя.СуммаПлан = СтрокаПоказателя.СуммаПлан + СтрокаДанных.СуммаПлан;
					СтрокаПоказателя.СуммаФакт = СтрокаПоказателя.СуммаФакт + СтрокаДанных.СуммаФакт;
				Иначе
					Если ДанныеКарточки.ОтображатьПредыдущийПериод Тогда
						СтрокаПредыдущийПериод.СуммаФакт = СтрокаПредыдущийПериод.СуммаФакт + СтрокаДанных.СуммаФакт;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
		
		Формула = Показатель.СтрокаФормулы;
		
		Идентификаторы = Новый Массив;
		СоответствиеОперандовПлан 			  = Новый Соответствие;
		СоответствиеОперандовФакт 			  = Новый Соответствие;
		СоответствиеОперандовПредыдущийПериод = Новый Соответствие;
		
		ТаблицаОперандов = ПоказателиБизнесаФормулы.ПолучитьТаблицуОперандовФормулы(Формула);
		
		Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
			
			ЗаполнитьСуммыЦелиРекурсивно(ДанныеКарточки, СтрокаОперанда.Показатель, ТаблицаДанных);
			
			СтрокиПоПоказателю = ТаблицаДанных.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
			
			СуммаПлан = 0;
			СуммаФакт = 0;
			СуммаФактПредыдущийПериод = 0;
			
			Для каждого СтрокаДанных Из СтрокиПоПоказателю Цикл
				Если СтрокаДанных.Период = ДанныеКарточки.ТекущийПериод Тогда
					СуммаПлан = СуммаПлан + СтрокаДанных.СуммаПлан;
					СуммаФакт = СуммаФакт + СтрокаДанных.СуммаФакт;
				Иначе
					СуммаФактПредыдущийПериод = СуммаФактПредыдущийПериод + СуммаФакт;
				КонецЕсли;
			КонецЦикла;
			
			ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандовПлан, СтрокаОперанда.Операнд, СуммаПлан);
			ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандовФакт, СтрокаОперанда.Операнд, СуммаФакт);
			ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандовПредыдущийПериод, СтрокаОперанда.Операнд, СуммаФактПредыдущийПериод);
			
		КонецЦикла;
		
		Результат = Неопределено;
		ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандовПлан, Результат); 
		
		Если НЕ Результат.ОшибкаРасчета Тогда
			СтрокаПоказателя.СуммаПлан = Результат.Сумма;
		КонецЕсли;
		
		Результат = Неопределено;
		ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандовФакт, Результат); 
		
		Если НЕ Результат.ОшибкаРасчета Тогда
			СтрокаПоказателя.СуммаФакт = Результат.Сумма;
		КонецЕсли;
		
		Если ДанныеКарточки.ОтображатьПредыдущийПериод Тогда
			
			Результат = Неопределено;
			ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандовПредыдущийПериод, Результат); 
			
			Если НЕ Результат.ОшибкаРасчета Тогда
				СтрокаПредыдущийПериод.СуммаФакт = Результат.Сумма;
			КонецЕсли;
			
		КонецЕсли
		
	Иначе // Доход или расход
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуПоказателяРекурсивно(СуммаПоказателя, Период, Показатель, ТаблицаДанных)
	
	Если Показатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоказателя = Показатель.ТипПоказателя;
	СтруктураОтбора = Новый Структура("Период,Показатель");
	СтруктураОтбора.Период = Период;
		
	Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход ИЛИ ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход Тогда
		
		СтруктураОтбора.Показатель = Показатель;
		СтрокиПоПоказателю = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		
		Для каждого СтрокаДанных Из СтрокиПоПоказателю Цикл
			СуммаПоказателя = СтрокаДанных.Сумма;
		КонецЦикла;
		
	ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
		
		ПодчиненныеПоказатели = Справочники.ПоказателиБизнеса.ПолучитьПодчиненныеПоказатели(Показатель);
		
		Для каждого ПодчиненныйПоказатель Из ПодчиненныеПоказатели Цикл
			ЗаполнитьСуммуПоказателяРекурсивно(СуммаПоказателя, Период, ПодчиненныйПоказатель, ТаблицаДанных);
		КонецЦикла;
		
		НоваяСтрокаДанных = ТаблицаДанных.Добавить();
		НоваяСтрокаДанных.Период = Период;
		НоваяСтрокаДанных.Показатель = Показатель;
		НоваяСтрокаДанных.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;
		НоваяСтрокаДанных.Сумма = СуммаПоказателя;
		
	Иначе // Формула
		
		Формула = Показатель.СтрокаФормулы;
		
		Идентификаторы = Новый Массив;
		СоответствиеОперандов = Новый Соответствие;
		
		ТаблицаОперандов = ПоказателиБизнесаФормулы.ПолучитьТаблицуОперандовФормулы(Формула);
		
		Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
			
			ЗаполнитьСуммуПоказателяРекурсивно(СуммаПоказателя, Период, СтрокаОперанда.Показатель, ТаблицаДанных);
			
			СтруктураОтбора.Показатель = СтрокаОперанда.Показатель;
			СтрокиПоПоказателю = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
			
			Сумма = 0;
			
			Для каждого СтрокаДанных Из СтрокиПоПоказателю Цикл
				Сумма = Сумма + СтрокаДанных.Сумма;
			КонецЦикла;
			
			ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандов, СтрокаОперанда.Операнд, Сумма);
			
		КонецЦикла;
		
		Результат = Неопределено;
		ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Формула, СоответствиеОперандов, Результат); 
		
		Если НЕ Результат.ОшибкаРасчета Тогда
			СуммаПоказателя = Результат.Сумма;
		КонецЕсли;
		
		НоваяСтрокаДанных = ТаблицаДанных.Добавить();
		НоваяСтрокаДанных.Период = Период;
		НоваяСтрокаДанных.Показатель = Показатель;
		НоваяСтрокаДанных.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;
		НоваяСтрокаДанных.Сумма = СуммаПоказателя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоэффициентТренда(Данные) 
	
	КоличествоЗначений = Данные.Количество();
	Если КоличествоЗначений = 0 Тогда
		Возврат 0;
	КонецЕсли; 
	
	Y = 0; 
	X = 0; 
	
	Для Итератор = 0 По КоличествоЗначений - 1 Цикл 
		X = X + Итератор; 
		Y = Y + Данные[Итератор]; 
	КонецЦикла; 
	
	X = X / КоличествоЗначений; 
	Y = Y / КоличествоЗначений; 

	т1 = 0; 
	т2 = 0; 

	Для Итератор = 0 По КоличествоЗначений - 1 Цикл 
		т1 = т1 + (Данные[Итератор] - Y )*(Итератор - X); 
		т2 = т2 + (Итератор - X) * ( Итератор - X); 
	КонецЦикла; 

	Если т2 <> 0 Тогда 
		Возврат т1 / т2; 
	Иначе 
		Возврат 0; 
	КонецЕсли; 
	
КонецФункции

Функция ИнициализироватьДанныеКарточки()
	
	ДанныеКарточки = Новый Структура;
	
	// Общие реквизиты
	ДанныеКарточки.Вставить("ПерваяСтрокаЗаголовка", "");
	ДанныеКарточки.Вставить("ВтораяСтрокаЗаголовка", "");
	ДанныеКарточки.Вставить("ОценкаХорошо", 		 Истина);
	ДанныеКарточки.Вставить("ЭтоПроцент", 			 Ложь);
	ДанныеКарточки.Вставить("Ссылка", 				 Справочники.КарточкиАнализаБизнеса.ПустаяСсылка());
	ДанныеКарточки.Вставить("Период", 				 Перечисления.ДоступныеПериодыОтчета.ПустаяСсылка());
	ДанныеКарточки.Вставить("ПериодАнализа", 		 Новый СтандартныйПериод);
	ДанныеКарточки.Вставить("ВидКарточки", 			 Перечисления.ВидыКарточекАнализаБизнеса.Цель);
	ДанныеКарточки.Вставить("ВариантПроверки", 		 Перечисления.ВариантыПроверокАнализаБизнеса.ПустаяСсылка());
	ДанныеКарточки.Вставить("Показатель", 			 Справочники.ПоказателиБизнеса.ПустаяСсылка());
	
	// Динамика
	ДанныеКарточки.Вставить("Периодичность", 		 Перечисления.Периодичность.ПустаяСсылка());
	ДанныеКарточки.Вставить("ТаблицаДинамики", 		 Неопределено);
	
	// Сравнение
	ДанныеКарточки.Вставить("ВидСравненияЗначений",  Перечисления.ВидСравненияЗначений.ПустаяСсылка());
	ДанныеКарточки.Вставить("СуммаПоказателя",		 0);
	ДанныеКарточки.Вставить("ЗначениеДляСравнения",  0);
	ДанныеКарточки.Вставить("ПоказательДляСравнения",Справочники.ПоказателиБизнеса.ПустаяСсылка());
	
	// Цели
	ДанныеКарточки.Вставить("СценарийПланирования", Справочники.СценарииПланирования.ПустаяСсылка());
	ДанныеКарточки.Вставить("ОтображатьПредыдущийПериод", Ложь);
	ДанныеКарточки.Вставить("СуммаПлан", 0);
	ДанныеКарточки.Вставить("СуммаФакт", 0);
	ДанныеКарточки.Вставить("СуммаФактПредыдущийПериод", 0);
	ДанныеКарточки.Вставить("Процент", 0);
	ДанныеКарточки.Вставить("ПроцентПредыдущийПериод", 0);
	ДанныеКарточки.Вставить("ТекущийПериод", ТекущаяДатаСеанса());
	ДанныеКарточки.Вставить("ПредыдущийПериод", ТекущаяДатаСеанса());
	
	Возврат ДанныеКарточки;
	
КонецФункции
 
#КонецОбласти

Процедура ИзменитьSVGПоОценке(СтрокаSVG, ДанныеКарточки)
	
	Если ДанныеКарточки.ОценкаХорошо Тогда
		СтрокаSVG = СтрЗаменить(СтрокаSVG, """alarm", """normal");
	Иначе
		СтрокаSVG = СтрЗаменить(СтрокаSVG, """normal", """alarm");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеПредыдущегоПериода(СтрокаSVG)
	
	// Текст предыдущего месяца
	КоординатыНачала = СтрНайти(СтрокаSVG, "<!--start_textA-->") + СтрДлина("<!--start_textA-->");
	КоординатыКонца = СтрНайти(СтрокаSVG, "<!--end_textA-->");
	
	ПодстрокаПоиска = Сред(СтрокаSVG, КоординатыНачала, КоординатыКонца - КоординатыНачала);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, ПодстрокаПоиска, "");
	
	// Кружок предыдущего месяца
	КоординатыНачала = СтрНайти(СтрокаSVG, "<!--start_circleA-->") + СтрДлина("<!--start_circleA-->");
	КоординатыКонца = СтрНайти(СтрокаSVG, "<!--end_circleA-->");
	
	ПодстрокаПоиска = Сред(СтрокаSVG, КоординатыНачала, КоординатыКонца - КоординатыНачала);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, ПодстрокаПоиска, "");
	
	// Прогресс предыдущего месяца
	КоординатыНачала = СтрНайти(СтрокаSVG, "<!--start_lineA-->") + СтрДлина("<!--start_lineA-->");
	КоординатыКонца = СтрНайти(СтрокаSVG, "<!--end_lineA-->");
	
	ПодстрокаПоиска = Сред(СтрокаSVG, КоординатыНачала, КоординатыКонца - КоординатыНачала);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, ПодстрокаПоиска, "");
	
КонецПроцедуры

Процедура СформироватьКолонкиДиаграммыПоДаннымДинамики(СтрокаSVG, ДанныеКарточки)
	
	ПодстрокаЗамены = "";
	ШаблонКолонки = "<rect x=""%1"" y=""%2"" width=""%3"" height=""%4"" rx=""1.3""/>";
	ФорматЧисла =  НСтр("ru = 'ЧРД=.'");
	МаксимальнаяВысота = 40;
	НачальныйY = 29;
	
	Если ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
		
		// Для квартала доступна только периодичность "Месяц"
		Старт = 11;
		Отступ = 26;
		Ширина = 24;
		
		КоличествоПериодов = 3;
		
	ИначеЕсли ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
		
		Если ДанныеКарточки.Периодичность = Перечисления.Периодичность.Квартал Тогда
			
			Старт = 12;
			Отступ = 41;
			Ширина = 32;
			
			КоличествоПериодов = 2;
			
		Иначе // Месяц
			
			Старт = 11;
			Отступ = 13;
			Ширина = 11;
			
			КоличествоПериодов = 6;
			
		КонецЕсли;
		
	Иначе // Год
		
		Если ДанныеКарточки.Периодичность = Перечисления.Периодичность.Полугодие Тогда
			
			Старт = 12;
			Отступ = 41;
			Ширина = 32;
			
			КоличествоПериодов = 2;
			
		ИначеЕсли ДанныеКарточки.Периодичность = Перечисления.Периодичность.Квартал Тогда
			
			Старт = 11;
			Отступ = 20;
			Ширина = 15;
			
			КоличествоПериодов = 4;
			
		Иначе // Месяц
			
			Старт = 10;
			Отступ = 6.6;
			Ширина = 4.8;
			
			КоличествоПериодов = 12;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МаксимальнаяСумма = 0;
	
	Для каждого СтрокаПериода Из ДанныеКарточки.ТаблицаДинамики Цикл
		Если МаксимальнаяСумма < СтрокаПериода.Сумма Тогда
			МаксимальнаяСумма = СтрокаПериода.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	Для каждого СтрокаПериода Из ДанныеКарточки.ТаблицаДинамики Цикл
		
		Если МаксимальнаяСумма = 0 Тогда
			Высота = 0;
		Иначе
			Высота = МаксимальнаяВысота * (СтрокаПериода.Сумма / МаксимальнаяСумма);
		КонецЕсли;
		
		ТекущийX = Старт + Отступ * Индекс;
		ТекущийY = НачальныйY + (МаксимальнаяВысота - Высота);
		
		СтрокаТекущейКолонки = СтрШаблон(ШаблонКолонки, Формат(ТекущийX, ФорматЧисла),
														Формат(ТекущийY, ФорматЧисла),
														Формат(Ширина,   ФорматЧисла), 
														Формат(Высота,   ФорматЧисла));
														
		ПодстрокаЗамены = ПодстрокаЗамены + СтрокаТекущейКолонки;
		
		Индекс = Индекс + 1;
		
	КонецЦикла; 
	
	КоординатыНачала = СтрНайти(СтрокаSVG, "<!--start_dynamic-->") + СтрДлина("<!--start_dynamic-->");
	КоординатыКонца = СтрНайти(СтрокаSVG, "<!--end_dynamic-->");
	
	ПодстрокаПоиска = Сред(СтрокаSVG, КоординатыНачала, КоординатыКонца - КоординатыНачала);
	
	СтрокаSVG = СтрЗаменить(СтрокаSVG, ПодстрокаПоиска, ПодстрокаЗамены);
	
КонецПроцедуры

Процедура ЗаполнитьПериодАнализа(ДанныеКарточки)
	
	Если ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
		ДанныеКарточки.ПериодАнализа.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
		ДанныеКарточки.ПериодАнализа.Вариант = ВариантСтандартногоПериода.ЭтотКвартал;
	ИначеЕсли ДанныеКарточки.Период = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
		ДанныеКарточки.ПериодАнализа.Вариант = ВариантСтандартногоПериода.ЭтоПолугодие;
	Иначе // Год
		ДанныеКарточки.ПериодАнализа.Вариант = ВариантСтандартногоПериода.ЭтотГод;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеИзМакета(Шаблон, ПараметрыКарточки)
	
	ИмяМакета = СтрШаблон(Шаблон, ПараметрыКарточки.Имя);
	
	ТекстHTML = Справочники.КарточкиАнализаБизнеса.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	ФорматированныйТекст = Новый ФорматированныйДокумент;
	ФорматированныйТекст.УстановитьHTML(ТекстHTML, Новый Структура);
	
	Возврат Новый ХранилищеЗначения(ФорматированныйТекст);
	
КонецФункции

Процедура СформироватьКарточкуПоПараметрам(ПараметрыКарточки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиБизнеса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
		|ГДЕ
		|	ПоказателиБизнеса.ВидОтчета = &ВидОтчета
		|	И ПоказателиБизнеса.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВидОтчета", ПараметрыКарточки.ВидОтчета);
	Запрос.УстановитьПараметр("Наименование", ПараметрыКарточки.ИмяПоказателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ШаблонТекстаОшибки = НСтр("ru='При создании поставляемой карточки анализа бизнеса не найден показатель %1'");
		ИмяСобытияЖР = СтрШаблон(ШаблонТекстаОшибки, ПараметрыКарточки.ИмяПоказателя);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка);
		Возврат;
	КонецЕсли;
	
	ВыборкаПоказатель = РезультатЗапроса.Выбрать();
	ВыборкаПоказатель.Следующий();
	
	ПараметрыКарточки.ПоказательБизнеса = ВыборкаПоказатель.Ссылка;
	
	Если ПараметрыКарточки.ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоказателиБизнеса.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
			|ГДЕ
			|	ПоказателиБизнеса.ВидОтчета = &ВидОтчета
			|	И ПоказателиБизнеса.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("ВидОтчета", ПараметрыКарточки.ВидОтчета);
		Запрос.УстановитьПараметр("Наименование", ПараметрыКарточки.ИмяПоказателяСравнение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ШаблонТекстаОшибки = НСтр("ru='При создании поставляемой карточки анализа бизнеса не найден показатель %1'");
			ИмяСобытияЖР = СтрШаблон(ШаблонТекстаОшибки, ПараметрыКарточки.ИмяПоказателяСравнение);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка);
			Возврат;
		КонецЕсли;
		
		ВыборкаПоказатель = РезультатЗапроса.Выбрать();
		ВыборкаПоказатель.Следующий();
		
		ПараметрыКарточки.ЗначениеДляСравнения = ВыборкаПоказатель.Ссылка;
		
	КонецЕсли;
	
	// Проверяем не создана ли карточка по этому показателю ранее
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиАнализаБизнеса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КарточкиАнализаБизнеса КАК КарточкиАнализаБизнеса
		|ГДЕ
		|	КарточкиАнализаБизнеса.ВидКарточки = &ВидКарточки
		|	И КарточкиАнализаБизнеса.ПоказательБизнеса = &ПоказательБизнеса
		|	И КарточкиАнализаБизнеса.ВариантПроверки = &ВариантПроверки
		|	И НЕ КарточкиАнализаБизнеса.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВариантПроверки", ПараметрыКарточки.ВариантПроверки);
	Запрос.УстановитьПараметр("ВидКарточки", ПараметрыКарточки.ВидКарточки);
	Запрос.УстановитьПараметр("ПоказательБизнеса", ПараметрыКарточки.ПоказательБизнеса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ШаблонТекстаОшибки = НСтр("ru='Карточка %1 уже была создана ранее'");
		ИмяСобытияЖР = СтрШаблон(ШаблонТекстаОшибки, ПараметрыКарточки.ПерваяСтрокаЗаголовка);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация);
		Возврат;
	КонецЕсли;
	
	КарточкаОбъект = Справочники.КарточкиАнализаБизнеса.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(КарточкаОбъект, ПараметрыКарточки);
	КарточкаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
