
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапкаЛеваяКолонка", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГруппаНастройкиСерий", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанель", "Доступность", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		НоменклатураВладелец = Параметры.Отбор.Владелец;
		ИспользоватьСерии = НоменклатураВладелец.ИспользоватьСерииНоменклатуры;
		
		ПолитикаУчетаСерий = НоменклатураВладелец.ПолитикаУчетаСерий;
		ИспользоватьУникальныеСерии = НоменклатураВладелец.ИспользоватьУникальныеСерии;
		ИспользоватьСрокГодностиСерии = НоменклатураВладелец.ИспользоватьСрокГодностиСерии;
		ИспользоватьДатуПроизводстваСерии = НоменклатураВладелец.ИспользоватьДатуПроизводстваСерии;
		ТочностьУказанияСрокаГодностиСерии = НоменклатураВладелец.ТочностьУказанияСрокаГодностиСерии;
		
		Если НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			ЭтоПодарочныйСертификат = Истина;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры")
			И (НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат 
			Или НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас) Тогда
			СерииДоступны = Истина;
		КонецЕсли;
		
		ЕдиницаИзмеренияСрокаГодности = НоменклатураВладелец.ЕдиницаИзмеренияСрокаГодности;
		СрокГодности = НоменклатураВладелец.СрокГодности;
		
		НастройкиПоСкладамСформироватьЗаголовок();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПолитикиУчетаСерий, "Владелец", НоменклатураВладелец, ВидСравненияКомпоновкиДанных.Равно);
		
		Если НЕ ЗначениеЗаполнено(НоменклатураВладелец)
			ИЛИ (НЕ НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			И НЕ НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат) Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Серии номенклатуры хранятся только для запасов и подарочных сертификатов'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		// Наборы
		ИначеЕсли НоменклатураВладелец.ЭтоНабор Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Серии номенклатуры недоступны для наборов'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСерии", "Доступность", НЕ ЭтаФорма.ТолькоПросмотр);
		
		КонецЕсли;
		
		Если НЕ НоменклатураВладелец.ИспользоватьСерииНоменклатуры Тогда
			Элементы.ФормаПоискПоШтрихкоду.Доступность = Ложь;
			Элементы.ПоказатьПроданные.Доступность = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("ТолькоПросмотрФормы") И Параметры.ТолькоПросмотрФормы Тогда
			Элементы.ИспользоватьСерии.Доступность = Ложь;
		КонецЕсли;
		
		УстановитьДоступностьЭлементовФормы();
		
	Иначе
		Элементы.ПраваяПанель.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказатьПроданные") Тогда
	    ПоказатьПроданные = Параметры.ПоказатьПроданные;
	Иначе	
		ПоказатьПроданные = Ложь;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	Элементы.Продан.Видимость = ПоказатьПроданные;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,,, Ложь);
	//Конец УНФ.ОтборыСписка

		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	
	Если Не ИспользоватьСерии И Не ИзменениеИспользованияСерийВозможно() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Серии данной номенклатуры участвуют в движениях. Изменение невозможно.'");
		Сообщение.Сообщить();
		ИспользоватьСерии = Истина;
		Возврат;
	КонецЕсли;
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ИспользоватьСерииНоменклатуры = ИспользоватьСерии;
		ФормаВладельца.Модифицированность = Истина;
		
		Если ФормаВладельца.Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
			ИспользоватьУникальныеСерии = ИспользоватьСерии;
			ФормаВладельца.Объект.ИспользоватьУникальныеСерии = ИспользоватьУникальныеСерии;
		КонецЕсли;
		
		Если Не ИспользоватьСерии Тогда
			ПолитикаУчетаСерий = Неопределено;
			ТочностьУказанияСрокаГодностиСерии = Неопределено;
			СрокГодности = 0;
			ЕдиницаИзмеренияСрокаГодности = Неопределено;
		КонецЕсли;
		
		УстановитьДоступностьЭлементовФормы();
		УстановитьНадписьНастроекСерийПриРаботеССертификатами(ФормаВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроданныеПриИзменении(Элемент)
	
	Элементы.Продан.Видимость = ПоказатьПроданные;
	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		
		СтруктураПроверки = ИзменениеПолитикиУчетаСерийВозможно();
		Если Не СтруктураПроверки.ИзменениеВозможно Тогда
			
			ПолитикаУчетаСерий = СтруктураПроверки.ПолитикаДоИзменения;
			ФормаВладельца.Объект.ПолитикаУчетаСерий = СтруктураПроверки.ПолитикаДоИзменения;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Серии данной номенклатуры участвуют в движениях. Изменение на политику другого типа невозможно.'");
			Сообщение.Сообщить();
			
		Иначе
			ФормаВладельца.Объект.ПолитикаУчетаСерий = ПолитикаУчетаСерий;
		КонецЕсли;
		
		ФормаВладельца.Модифицированность = Истина;
		
		УстановитьДоступностьЭлементовФормы();
		УстановитьНадписьНастроекСерийПриРаботеССертификатами(ФормаВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСрокГодностиСерииПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		
		ФормаВладельца.Объект.ИспользоватьСрокГодностиСерии = ИспользоватьСрокГодностиСерии;
		ФормаВладельца.Модифицированность = Истина;
		
		Если ИспользоватьСрокГодностиСерии Тогда
			
			Если Не ЗначениеЗаполнено(ТочностьУказанияСрокаГодностиСерии) Тогда
				ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней");
				ФормаВладельца.Объект.ТочностьУказанияСрокаГодностиСерии = ТочностьУказанияСрокаГодностиСерии;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности) Тогда
				ЕдиницаИзмеренияСрокаГодности = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
				ФормаВладельца.Объект.ЕдиницаИзмеренияСрокаГодности = ЕдиницаИзмеренияСрокаГодности;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьДоступностьЭлементовФормы();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДатуПроизводстваСерииПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ИспользоватьДатуПроизводстваСерии = ИспользоватьДатуПроизводстваСерии;
		ФормаВладельца.Модифицированность = Истина;
		
		Если ИспользоватьДатуПроизводстваСерии Тогда
			
			Если Не ЗначениеЗаполнено(ТочностьУказанияСрокаГодностиСерии) Тогда
				ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней");
				ФормаВладельца.Объект.ТочностьУказанияСрокаГодностиСерии = ТочностьУказанияСрокаГодностиСерии;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности) Тогда
				ЕдиницаИзмеренияСрокаГодности = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
				ФормаВладельца.Объект.ЕдиницаИзмеренияСрокаГодности = ЕдиницаИзмеренияСрокаГодности;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьДоступностьЭлементовФормы();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТочностьУказанияСрокаГодностиСерииПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ТочностьУказанияСрокаГодностиСерии = ТочностьУказанияСрокаГодностиСерии;
		ФормаВладельца.Модифицированность = Истина;
		
		УстановитьДоступностьЭлементовФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокГодностиПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда
		
		Если Не ФормаВладельца.Объект.СрокГодности = 0
			И Не ФормаВладельца.Объект.СрокГодности = СрокГодности И ИспользоватьСрокГодностиСерии Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Была изменена длительность срока годности. Проверьте окончание срока годности в сериях.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		ФормаВладельца.Объект.СрокГодности = СрокГодности;
		ФормаВладельца.Модифицированность = Истина;
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияСрокаГодностиПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ЕдиницаИзмеренияСрокаГодности = ЕдиницаИзмеренияСрокаГодности;
		ФормаВладельца.Модифицированность = Истина;
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУникальныеСерииПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ИспользоватьУникальныеСерии = ИспользоватьУникальныеСерии;
		ФормаВладельца.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("Организация, СтруктурнаяЕдиница, ПолитикаУчетаСерий");
	СтруктураДанных.Организация = ТекущиеДанные.Организация;
	СтруктураДанных.СтруктурнаяЕдиница = ТекущиеДанные.СтруктурнаяЕдиница;
	СтруктураДанных.ПолитикаУчетаСерий = ТекущиеДанные.ПолитикаУчетаСерий;
	
	Если Не УдалениеПолитикиУчетаСерийВозможно(СтруктураДанных) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Серии данной номенклатуры участвуют в движениях. Удаление индивидуальной настройки невозможно.'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура СписокСоздать(Команда)
	
	ЗначенияЗаполнения = Новый Структура("Владелец", НоменклатураВладелец);
	
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения, СрокГодности, ДатаПроизводства", ЗначенияЗаполнения, ИспользоватьСрокГодностиСерии, ИспользоватьДатуПроизводстваСерии);
	ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", ПараметрыОткрытия, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПроданные(Команда)
	
	ПоказатьПроданные = Не ПоказатьПроданные;
	Элементы.Продан.Видимость = ПоказатьПроданные;
	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	
	Элементы.СписокПоказатьПереданные.Пометка = ПоказатьПроданные;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов)

	Если Не ИспользоватьСерии Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для номенклатуры не ведется учет по сериям.
							   |Установите флаг ""Использовать серии номенклатуры"" в карточке номенклатуры.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Для Каждого элОтбора Из Список.Отбор.Элементы Цикл
		Если элОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец") Тогда
			НоменклатураВладелец = элОтбора.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(НоменклатураВладелец) И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		НоменклатураВладелец = Элементы.Список.ТекущиеДанные.Владелец;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НоменклатураВладелец) Тогда
		Возврат;
	КонецЕсли;

	Серия = ПолучитьСерияПоШтрихкоду(ДанныеШтрихкодов, НоменклатураВладелец);
	Если ЗначениеЗаполнено(Серия) Тогда

		Элементы.Список.ТекущаяСтрока = Серия;
		ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Серия), ЭтотОбъект);
	Иначе

		НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихКодов(ДанныеШтрихкодов);
		НеизвестныеШтрихкоды = НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа = НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;

		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);

		Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

			Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

			ОткрытьФорму(
				"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихКодовНоменклатуры",
				Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);

			Возврат;

		КонецЕсли;

		ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихКодов(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихКодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихКодов = Новый Массив;
		МассивШтрихКодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихКодов", МассивШтрихКодов);
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихКодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
		   
		    ТекШтрихкод.Вставить("Номенклатура", НоменклатураВладелец);
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода.ТипНоменклатуры Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.ТипНоменклатуры));
		ИначеЕсли ДанныеШтрихкода.Номенклатура = НоменклатураВладелец Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				НовыйСерия = СоздатьСерия(ТекШтрихкод.Штрихкод, НоменклатураВладелец);
				Если ЗначениеЗаполнено(НовыйСерия) Тогда
					ОповеститьОбИзменении(НовыйСерия);
				КонецЕсли;
				
				Элементы.Список.ТекущаяСтрока = НовыйСерия;
			Иначе
				Элементы.Список.ТекущаяСтрока = ДанныеШтрихкода.Серия;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихКодов()

&НаСервере
Функция СоздатьСерия(СерияСтрока, НоменклатураВладелец)

	Об = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	Об.Владелец = НоменклатураВладелец;
	Об.Наименование = СерияСтрока;
	
	Попытка
		Об.Записать();
		
		СтрокаСообщения = НСтр("ru = 'Создан серийный номер: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СерияСтрока);
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	Исключение
	    ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Об.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихКодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихКодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			ДанныеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
				И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				ДанныеШтрихкода.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
			Иначе
				ДанныеШтрихкода.Вставить("Коэффициент", 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

Функция ПолучитьСерияПоШтрихкоду(ДанныеШтрихкода, НоменклатураВладелец)

	СтрокаШтрихкод = ДанныеШтрихкода[0].Штрихкод;
	ДанныеСН = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(ДанныеШтрихкода);
	
	ЗаписанныеДанныеШтрихкода = ДанныеСН[СтрокаШтрихкод];
	Если ЗаписанныеДанныеШтрихкода.Количество() = 0 Тогда
		
		Возврат Неопределено;
	ИначеЕсли ЗаписанныеДанныеШтрихкода.Номенклатура = НоменклатураВладелец Тогда
		
		Возврат ЗаписанныеДанныеШтрихкода.Серия;
	Иначе	
		СтрокаСообщения = НСтр("ru = 'Введенный штрихкод %1% привязан к другой номенклатуре (серии номенклатуры): %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СтрокаШтрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ЗаписанныеДанныеШтрихкода.Номенклатура);
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик команды командной панели табличной части.
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		МассивШтрихКодов = Новый Массив;
		МассивШтрихКодов.Добавить(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
		ПолученыШтрихкоды(МассивШтрихКодов);
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихКодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихКодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихКодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеДобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихКодов(МассивШтрихКодов);
		НеизвестныеШтрихкоды		= НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //ПодключаемоеОборудование

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьНадписьНастроекСерийПриРаботеССертификатами(ФормаВладельца)
	
	Если Не ФормаВладельца.Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Возврат
	КонецЕсли;
	
	НастройкиВыполнены = ИспользоватьСерии И ЗначениеЗаполнено(ПолитикаУчетаСерий);
	ФормаВладельца.Элементы.НадписьСерииВведены.Видимость = НастройкиВыполнены;
	ФормаВладельца.Элементы.НадписьСерииНеВведены.Видимость = Не НастройкиВыполнены;
	
КонецПроцедуры

&НаСервере
Функция УдалениеПолитикиУчетаСерийВозможно(СтруктураДанных)
	
	Если Не ТипЗнч(НоменклатураВладелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураВладелец);
	Запрос.УстановитьПараметр("Организация", СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктураДанных.СтруктурнаяЕдиница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияСерииНоменклатуры.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ДвиженияСерииНоменклатуры КАК ДвиженияСерииНоменклатуры
	|ГДЕ
	|	ДвиженияСерииНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ ДвиженияСерииНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ДвиженияСерииНоменклатуры.Организация = &Организация
	|	И ДвиженияСерииНоменклатуры.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ИзменениеИспользованияСерийВозможно()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураВладелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияСерииНоменклатуры.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ДвиженияСерииНоменклатуры КАК ДвиженияСерииНоменклатуры
	|ГДЕ
	|	ДвиженияСерииНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ ДвиженияСерииНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ИзменениеПолитикиУчетаСерийВозможно()
	
	ПолитикаИзСсылки = НоменклатураВладелец.ПолитикаУчетаСерий;
	
	СтруктураВозврата = Новый Структура("ИзменениеВозможно, ПолитикаДоИзменения"); 
	
	Если ТипЗнч(НоменклатураВладелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Не ЗначениеЗаполнено(ПолитикаИзСсылки) Тогда
			СтруктураВозврата.ИзменениеВозможно = Истина;
			Возврат СтруктураВозврата;
		КонецЕсли;
	Иначе
		СтруктураВозврата.ИзменениеВозможно = Истина;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураВладелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияСерииНоменклатуры.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ДвиженияСерииНоменклатуры КАК ДвиженияСерииНоменклатуры
	|ГДЕ
	|	ДвиженияСерииНоменклатуры.Номенклатура = &Номенклатура
	|	И НЕ ДвиженияСерииНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		СтруктураВозврата.ИзменениеВозможно = Истина;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ПолитикаИзСсылки.ТипПолитики = ПолитикаУчетаСерий.ТипПолитики Тогда
		СтруктураВозврата.ИзменениеВозможно = Ложь;
		СтруктураВозврата.ПолитикаДоИзменения = ПолитикаИзСсылки;
		Возврат СтруктураВозврата;
	Иначе
		СтруктураВозврата.ИзменениеВозможно = Истина;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ЭтаФорма.ТолькоПросмотр Тогда Возврат КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиПолитики", "Доступность", ИспользоватьСерии И Не ЭтоПодарочныйСертификат);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПроизводства", "Видимость", ИспользоватьСерии И ИспользоватьДатуПроизводстваСерии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоденДо", "Видимость", ИспользоватьСерии И ИспользоватьСрокГодностиСерии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлева", "Доступность", ИспользоватьСерии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолитикаУчетаСерий", "АвтоОтметкаНезаполненного", ИспользоватьСерии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолитикаУчетаСерий", "Доступность", ИспользоватьСерии);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСрокГодности", "Доступность", 
	(ИспользоватьСерии И Не ЭтоПодарочныйСертификат) И (ИспользоватьСрокГодностиСерии Или ИспользоватьДатуПроизводстваСерии));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФлажки", "Доступность", ИспользоватьСерии И Не ЭтоПодарочныйСертификат);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСерии", "Доступность", СерииДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЕдиницаИзмеренияСрокаГодности", "АвтоОтметкаНезаполненного", ЗначениеЗаполнено(СрокГодности) И Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности));
	Элементы.КоманднаяПанель.Доступность = ИспользоватьСерии;
	
	Если ЗначениеЗаполнено(ТочностьУказанияСрокаГодностиСерии) Тогда
		Если ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПроизводства", "Формат", "ДФ=дд.ММ.гггг");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоденДо", "Формат", "ДФ=дд.ММ.гггг");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПроизводства", "Формат", "ДФ='дд.ММ.гггг ЧЧ:мм'");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоденДо", "Формат", "ДФ='дд.ММ.гггг ЧЧ:мм'");
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПроизводства", "Формат", "ДФ=дд.ММ.гггг");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоденДо", "Формат", "ДФ=дд.ММ.гггг");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") И Не ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиПолитики", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,,,Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоСкладамСформироватьЗаголовок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", НоменклатураВладелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Владелец = &Владелец";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Элементы.ГруппаНастройкиПолитики.Заголовок = НСтр("ru = 'Индивидуальные настройки по складам (Да)'");
	Иначе
		Элементы.ГруппаНастройкиПолитики.Заголовок = НСтр("ru = 'Индивидуальные настройки по складам (Нет)'")
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок


#КонецОбласти
