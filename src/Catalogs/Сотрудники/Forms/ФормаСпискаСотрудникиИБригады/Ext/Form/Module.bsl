#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("РежимВыбора", РежимВыбора);
	Если РежимВыбора Тогда
		ЗакрыватьПриВыборе = Истина;
	Иначе
		Элементы.СписокСотрудникиВыбрать.Видимость = Ложь;
		Элементы.СписокБригадыВыбрать.Видимость = Ложь;
	КонецЕсли;

	ПрочитатьИерархию();
	Если Параметры.Свойство("ТекущаяСтрока") Тогда
		Если ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
				ГруппаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Родитель");
			Иначе
				ГруппаРодитель = Неопределено;
			КонецЕсли;
			ЗначениеПоиска = ?(ЗначениеЗаполнено(ГруппаРодитель), ГруппаРодитель, ИерархияСотрудники());
			Элементы.СписокСотрудники.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		ИначеЕсли ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.Бригады") Тогда
			ЗначениеПоиска = ИерархияБригады();
			Элементы.СписокБригады.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		КонецЕсли;
		ИдентификаторСтроки = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ГруппаСотрудников", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), ЗначениеПоиска, Ложь);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельСотрудники;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокСотрудники";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);

	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("СправочникСсылка.Бригады");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельБригады;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокБригады";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УстановитьУсловноеОформление();

	СписокСотрудники.Параметры.УстановитьЗначениеПараметра("ОсновнойОтветственный",
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный"));

	УстановитьОтборНедействительные(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СотрудникГруппа" Тогда

		НоваяГруппа = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяГруппа = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяГруппа = Параметр;
		КонецЕсли;

		ПрочитатьИерархию(НоваяГруппа);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборИерархия

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)

	УстановитьОтборПоИерархии(ЭтотОбъект);

#Если МобильныйКлиент Тогда
	НастроитьПанельОтборовМобильныйКлиент();
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаСотрудников = ИерархияСотрудники()
		Или СтрокаИерархии.ГруппаСотрудников = ИерархияБригады() Или СтрокаИерархии.ГруппаСотрудников
		= ИерархияБезГруппы() Тогда

		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИерархии.ГруппаСотрудников);

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	Если Элементы.ГруппаБригадыСотрудники.ТекущаяСтраница = Элементы.ГруппаБригады Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаСотрудников = ИерархияСотрудники()
		Или СтрокаИерархии.ГруппаСотрудников = ИерархияБригады() Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("СправочникСсылка.Сотрудники") Тогда

		Возврат;
	КонецЕсли;

	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаСотрудников = ИерархияСотрудники()
		Или СтрокаИерархии.ГруппаСотрудников = ИерархияБригады() Тогда
		Возврат;
	КонецЕсли;

	НоваяГруппа = ?(СтрокаИерархии.ГруппаСотрудников = ИерархияБезГруппы(), ПредопределенноеЗначение(
		"Справочник.Сотрудники.ПустаяСсылка"), СтрокаИерархии.ГруппаСотрудников);
	ИерархияПеретаскиваниеСервер(ПараметрыПеретаскивания.Значение, НоваяГруппа);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)

	НовоеЗначениеВидимость = Не Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокБригады

&НаКлиенте
Процедура СписокБригадыПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокБригадыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекСтр = Элемент.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РежимВыбора Тогда
		СтандартнаяОбработка = Ложь;
		ОповеститьОВыборе(ТекСтр.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСотрудники

&НаКлиенте
Процедура СписокСотрудникиПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудникиПередНачаломИзменения(Элемент, Отказ)

	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));

КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекСтр = Элемент.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РежимВыбора Тогда
		СтандартнаяОбработка = Ложь;
		ОповеститьОВыборе(ТекСтр.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьНедействительных(Команда)

	Элементы.ПоказыватьНедействительных.Пометка = Не Элементы.ПоказыватьНедействительных.Пометка;

	УстановитьОтборНедействительные(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияИзменить(Команда)

	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТипЗнч(ТекущиеДанные.ГруппаСотрудников) <> Тип("СправочникСсылка.Сотрудники")
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ГруппаСотрудников) Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(Неопределено, ТекущиеДанные.ГруппаСотрудников);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияСоздатьГруппу(Команда)

	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ГруппаСотрудников = ИерархияБригады() Тогда
		Возврат;
	КонецЕсли;

	ЗначенияЗаполнения = Новый Структура;
	Если ТипЗнч(ТекущиеДанные.ГруппаСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.ГруппаСотрудников);
	КонецЕсли;

	ОткрытьФорму("Справочник.Сотрудники.ФормаГруппы", Новый Структура("ЗначенияЗаполнения, ЭтоГруппа",
		ЗначенияЗаполнения, Истина), Элементы.СписокСотрудники);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияСкопировать(Команда)

	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТипЗнч(ТекущиеДанные.ГруппаСотрудников) <> Тип("СправочникСсылка.Сотрудники")
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ГруппаСотрудников) Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Справочник.Сотрудники.ФормаГруппы", Новый Структура("ЗначениеКопирования, ЭтоГруппа",
		ТекущиеДанные.ГруппаСотрудников, Истина), Элементы.СписокСотрудники);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияУстановитьПометкуУдаления(Команда)

	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТипЗнч(ТекущиеДанные.ГруппаСотрудников) <> Тип("СправочникСсылка.Сотрудники")
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ГруппаСотрудников) Тогда
		Возврат;
	КонецЕсли;

	ПометкаУдаления = ИзменитьПометкуУдаленияГруппыСервер(ТекущиеДанные.ПолучитьИдентификатор());

	ТекстОповещения = СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(ПометкаУдаления, НСтр("ru='установлена'"), НСтр(
		"ru='снята'")));

	ПоказатьОповещениеПользователя(
		ТекстОповещения, ПолучитьНавигационнуюСсылку(ТекущиеДанные.ГруппаСотрудников),
		Элементы.ОтборИерархия.ТекущиеДанные.ГруппаСотрудников, БиблиотекаКартинок.Информация32);

	Элементы.СписокСотрудники.Обновить();

КонецПроцедуры

&НаСервере
Функция ИзменитьПометкуУдаленияГруппыСервер(ИдентификаторТекущейСтроки)

	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПометкаУдаления = ИзменитьПометкуУдаления(ТекущаяСтрокаДерева.ГруппаСотрудников);
	ИзменитьПиктограммуРекурсивно(ТекущаяСтрокаДерева, ПометкаУдаления);

	Возврат ПометкаУдаления;

КонецФункции

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)

	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	ОтборИерархияТекущая = Неопределено;
	УстановитьОтборПоИерархии(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудники(Команда)

	ТекСтр = Элементы.СписокСотрудники.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОповеститьОВыборе(ТекСтр.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБригады(Команда)

	ТекСтр = Элементы.СписокБригады.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОповеститьОВыборе(ТекСтр.Ссылка);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокСотрудники);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокСотрудники, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокСотрудники);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Недействительная номенклатура отображается серым
	НовоеУсловноеОформление = СписокСотрудники.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();

	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;

	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;

КонецПроцедуры

&НаСервере
Процедура НастроитьПанельОтборовМобильныйКлиент()

	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;

	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект, , ,
		"ОтборСегмент,ОтборТег,ОтборИсточник,ОтборОтветственный,ОтборИерархияТекущая");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительные(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокСотрудники, "Недействителен", Ложь, , , Не Форма.Элементы.ПоказыватьНедействительных.Пометка);

КонецПроцедуры

#Область Иерархия

&НаСервере
Процедура ПрочитатьИерархию(ГруппаТекущейСтроки = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Сотрудники.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	Сотрудники.Ссылка КАК ГруппаСотрудников,
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Ссылка) КАК ПредставлениеГруппы
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ЭтоГруппа = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";

	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "ОтборИерархия");

	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ГруппаСотрудников", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), ГруппаТекущейСтроки, Ложь);
	КонецЕсли;

	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();

	СтрокаДерева = ЭлементыКоллекции.Вставить(0);
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаСотрудников = ИерархияСотрудники();
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Все сотрудники>'");

	СтрокаДерева = ЭлементыКоллекции.Вставить(0);
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаСотрудников = ИерархияБригады();
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Все бригады>'");

	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаСотрудников = ИерархияБезГруппы();
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Нет группы>'");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархии(Форма)

	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ГруппаСотрудников = Форма.ОтборИерархияТекущая Тогда
		Возврат;
	КонецЕсли;

	ЭтоОтборПоГруппе = ТипЗнч(ТекущиеДанные.ГруппаСотрудников) = Тип("СправочникСсылка.Сотрудники");

	Элементы.ОтборИерархияКонтекстноеМенюИерархияИзменить.Видимость					= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияСкопировать.Видимость				= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияУстановитьПометкуУдаления.Видимость	= ЭтоОтборПоГруппе;

	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;

	Если ЭтоОтборПоГруппе Тогда

		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = ТекущиеДанные.ГруппаСотрудников;

	ИначеЕсли ТекущиеДанные.ГруппаСотрудников = ИерархияСотрудники() Тогда

		Использование = Ложь;

	ИначеЕсли ТекущиеДанные.ГруппаСотрудников = ИерархияБезГруппы() Тогда

		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");

	Иначе

		ПравоеЗначение = Неопределено;

	КонецЕсли;

	Если ТекущиеДанные.ГруппаСотрудников = ИерархияБригады() Тогда
		Элементы.ОтборИерархияКонтекстноеМенюСоздатьГруппу.Видимость = Ложь;
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Видимость = Ложь;
		Элементы.ГруппаБригадыСотрудники.ТекущаяСтраница = Элементы.ГруппаБригады;
	Иначе
		Элементы.ОтборИерархияКонтекстноеМенюСоздатьГруппу.Видимость = Истина;
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Видимость = Истина;
		Элементы.ГруппаБригадыСотрудники.ТекущаяСтраница = Элементы.ГруппаСотрудники;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокСотрудники, "Родитель", ПравоеЗначение, Сравнение, , Использование);
	КонецЕсли;

	Форма.ОтборИерархияТекущая = ТекущиеДанные.ГруппаСотрудников;
	УстановитьКнопкуПоУмолчанию(Форма);
	Элементы.СписокСотрудники.Обновить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)

	Если Не Форма.РежимВыбора Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	Если Элементы.ГруппаБригадыСотрудники.ТекущаяСтраница = Элементы.ГруппаБригады Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокБригадыВыбрать",
			"КнопкаПоУмолчанию", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСотрудникиВыбрать",
			"КнопкаПоУмолчанию", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаления(Ссылка)

	Объект = Ссылка.ПолучитьОбъект();
	Объект.УстановитьПометкуУдаления(Не Объект.ПометкаУдаления, Истина);

	Возврат Объект.ПометкаУдаления;

КонецФункции

&НаСервере
Процедура ИзменитьПиктограммуРекурсивно(СтрокаДерева, ПометкаУдаления)

	СтрокаДерева.ИндексПиктограммы = ?(ПометкаУдаления, 1, 0);

	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаПодчиненная Из СтрокиДерева Цикл
		ИзменитьПиктограммуРекурсивно(СтрокаПодчиненная, ПометкаУдаления);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИерархияПеретаскиваниеСервер(МассивСотрудников, НоваяГруппа)

	УстановитьНовуюГруппу(МассивСотрудников, НоваяГруппа);

	Если МассивСотрудников[0].ЭтоГруппа Тогда

		ПрочитатьИерархию();

		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ГруппаСотрудников", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), МассивСотрудников[0], Ложь);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;

	Иначе

		Элементы.СписокСотрудники.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНовуюГруппу(МассивСотрудников, НоваяГруппа)

	Для Каждого Сотрудник Из МассивСотрудников Цикл
		СотрудникОбъект = Сотрудник.ПолучитьОбъект();
		СотрудникОбъект.Заблокировать();
		СотрудникОбъект.Родитель = НоваяГруппа;
		СотрудникОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция ИерархияСотрудники()
	Возврат "Сотрудники";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИерархияБригады()
	Возврат "Бригады";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИерархияБезГруппы()
	Возврат "БезГруппы";
КонецФункции

#КонецОбласти

#КонецОбласти