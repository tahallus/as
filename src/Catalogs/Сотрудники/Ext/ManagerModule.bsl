#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ЗаполнениеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Трудовой договор микропредприятий
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТрудовойДоговорМикропредприятий";
	КомандаПечати.Представление = НСтр("ru = 'Трудовой договор (микропредприятий)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.СписокФорм = "ФормаСписка";
	КомандаПечати.Порядок = 1;
	
	// Штрихкод сотрудника
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ШтрихкодСотрудника";
	КомандаПечати.Представление = НСтр("ru = 'Штрихкод сотрудника'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.СписокФорм = "ФормаСписка";
	КомандаПечати.Порядок = 2;

КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты которые нужно распечатать (входящий),
//  ПараметрыПечати - Структура - структура дополнительных параметров печати (входящий),
//  КоллекцияПечатныхФорм - ТаблицаЗначений - Сформированные табличные документы (исходящий),
//  ОбъектыПечати - СписокЗначений - объекты печати, в поле "Значение" передается ссылка на объект,
//                     в поле "Представление" имя области, в которой был выведен объект (исходящий),
//  ПараметрыВывода - Структура - параметры сформированных табличных документов (исходящий).
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТрудовойДоговорМикропредприятий") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ТрудовойДоговорМикропредприятий", НСтр("ru='Трудовой договор (микропредприятий)'"),
			СформироватьПечатнуюФормуТрудовойДоговорМикропредприятий(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШтрихкодСотрудника") Тогда

		ТабличныйДокумент = СформироватьПечатнуюФормуШтрихкодСотрудника(МассивОбъектов, ОбъектыПечати);

		Если ТабличныйДокумент = Неопределено Тогда
			КоллекцияПечатныхФорм[0].ТабличныйДокумент = Новый ТабличныйДокумент;
			Возврат;
		КонецЕсли;

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "ШтрихкодСотрудника", НСтр("ru='Штрихкод сотрудника'"), ТабличныйДокумент);
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Создает новый элемент справочника Сотрудники и возвращает его ссылку.
// Используется для создания отсутствующих элементов в модулях МенеджерОбмена*.
// 
// Параметры:
// 	ДанныеНовогоСотрудника - Структура - в реквизит с именем ключа записывается соответствующее значение структуры.
// 	РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 	ОтключитьБизнесЛогику - Булево - отключает бизнес-логику при записи объекта.
// Возвращаемое значение:
// 	СправочникСсылка.Сотрудники - ссылка на вновь созданный элемент справочника сотрудники.
Функция СоздатьНовогоСотрудника(Знач ДанныеНовогоСотрудника, Знач РегистрироватьНаУзлахПлановОбмена = Истина,
	Знач ОтключитьБизнесЛогику = Ложь) Экспорт

	СправочникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ДанныеНовогоСотрудника);

	Если Не (ДанныеНовогоСотрудника.Свойство("Код") И ЗначениеЗаполнено(ДанныеНовогоСотрудника.Код)) Тогда

		СправочникОбъект.УстановитьНовыйКод();

	КонецЕсли;

	СправочникОбъект.ОбменДанными.Загрузка = ОтключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда

		СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		СправочникОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;

	КонецЕсли;

	СправочникОбъект.Записать();

	Возврат СправочникОбъект.Ссылка;

КонецФункции // СоздатьНовогоСотрудника()

// Устанавливает настройку, если пользователю не назначен ответственный.
// 
// Параметры:
// 	НовыйОсновнойОтветственный - СправочникСсылка.Сотрудники - новое значение настройки.
// 	Пользователь - СправочникСсылка.Пользователи - пользователь, для которого устанавливается ответственный.
// 	ОбновитьЗначениеНастройки - Булево - обновить значение даже когда настройка уже установлена.
Процедура УстановитьОсновногоОтветственногоДляПользователя(НовыйОсновнойОтветственный, Пользователь,
	ОбновитьЗначениеНастройки = Ложь) Экспорт

	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновнойОтветственный");

	Если (ЗначениеЗаполнено(ОсновнойОтветственный) И ОбновитьЗначениеНастройки) Или Не ЗначениеЗаполнено(
		ОсновнойОтветственный) Тогда

		РегистрыСведений.НастройкиПользователей.Установить(НовыйОсновнойОтветственный, "ОсновнойОтветственный",
			Пользователь);

	КонецЕсли;

КонецПроцедуры

// Возвращает ссылку на подразделение, в котором работает сотрудник
//
// Параметры:
// 		Сотрудник - СправочникСсылка.Сотрудники - ссылка на сотрудника, для которого нужно получить подразделение.
//
// Возвращаемое значение:
//		СправочникСсылка.СтруктурныеЕдиницы, Неопределено - ссылка на подразделение, в котором на текущий момент работает сотрудник
//															или Неопределено, если запись в регистре сведений не найдена.
//
Функция ПолучитьТекущееПодразделениеСотрудника(Сотрудник) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";

	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеСотрудников.
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будут создаваться временные таблицы.
// 	ИмяВременнойТаблицыОтборовСотрудников - Строка - имя временной таблицы - "фильтра".
// 	ИменаПолейВременнойТаблицыОтборовСотрудников - Строка - строка с именами полей отбора сотрудников ",".
// 												Строка должна содержать два имени поля, разделенные запятой.
// 												Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
// 	Структура - описание полей:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - .
// 	ИмяВременнойТаблицыОтборовСотрудников - Строка - имя временной таблицы отборов сотрудников.
// 	ПоляОтбораСотрудников - см. ПоляОтбораСотрудников.
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц,
	ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт

	ОписательВременныхТаблиц = Новый Структура;

	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников", ПоляОтбораСотрудников(
		ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеСотрудников", "ВТКадровыеДанныеСотрудников");
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовРазличныхСотрудников", "");

	ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(ОписательВременныхТаблиц);

	Возврат ОписательВременныхТаблиц;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	Если Параметры.Свойство("СотрудникИБригада") И Параметры.СотрудникИБригада И ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.Сотрудники.Форма.ФормаСпискаСотрудникиИБригады";
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)

	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;

	Если Параметры.Свойство("СотрудникИБригада") И Параметры.СотрудникИБригада Тогда
		СтандартнаяОбработка = Ложь;
		ПроизводствоСервер.ЗаполнитьДанныеВыбораСотрудникиБригады(ДанныеВыбора, Параметры);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ШтрихКодСотрудника

Функция СформироватьПечатнуюФормуШтрихкодСотрудника(МассивОбъектов, ОбъектыПечати)

	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ШтрихКодСотрудника";

	МакетШК = Справочники.Сотрудники.ПолучитьМакет("ШтрихКодСотрудника");

	ПечатнаяФормаСформирована = Ложь;

	Для Каждого ОбъектПечати Из МассивОбъектов Цикл

		Если Не ЗначениеЗаполнено(ОбъектПечати.ШтрихКод) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для пользователя %1 не задан штрихкод.'"), ОбъектПечати.Наименование);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;

		ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
		ПараметрыШтрихкода.Ширина = 200;
		ПараметрыШтрихкода.Высота = 100;
		ПараметрыШтрихкода.УровеньКоррекцииQR = 0;
		ПараметрыШтрихкода.Штрихкод = ОбъектПечати.ШтрихКод;
		ПараметрыШтрихкода.ТипКода = 99;
		ПараметрыШтрихкода.ОтображатьТекст = Истина;
		ПараметрыШтрихкода.РазмерШрифта = 11;
		ПараметрыШтрихкода.УголПоворота = 0;

		ИзображениеШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
		Если Не ИзображениеШтрихкода.Результат Тогда
			Продолжить;
		КонецЕсли;

		ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьСотрудник");
		ОбластьМакета.Параметры.Сотрудник = ОбъектПечати.Наименование;
		ДокументРезультат.Вывести(ОбластьМакета);

		ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьКартинка");
		НовыйРисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		НовыйРисунок.Картинка = ИзображениеШтрихкода.Картинка;
		НовыйРисунок.Верх = 3;
		НовыйРисунок.Лево = 20;
		НовыйРисунок.Ширина = 60;
		НовыйРисунок.Высота = 30;
		ДокументРезультат.Вывести(ОбластьМакета);

		ПечатнаяФормаСформирована = Истина;

	КонецЦикла;

	Возврат ?(Не ПечатнаяФормаСформирована, Неопределено, ДокументРезультат);

КонецФункции

#КонецОбласти

#Область ТрудовойДоговорМикропредприятий

Функция СформироватьПечатнуюФормуТрудовойДоговорМикропредприятий(МассивОбъектов, ОбъектыПечати,
	ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь)
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Сотрудники.ПФ_MXL_ТрудовойДоговорМикропредприятий");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговорМикропредприятий";

	ДанныеДоговоров = ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником);
	Для Каждого ДанныеДоговора Из ДанныеДоговоров Цикл

		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;

		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТаблицаТрудовогоДоговора = Новый ТабличныйДокумент;

		ПараметрыНумерации = Новый Структура;
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, 1);
		УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, 1);

		ТрудовойДоговорВывестиРаздел("Шапка", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОбщиеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора,
			ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботника", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботодателя", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОплатаТрудаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора,
			ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_РабочееВремяИВремяОтдыхаРаботника", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОхранаТруда", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора,
			ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_СоциальноеСтрахованиеИИныеГарантии", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИныеУсловияТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИзменениеУсловийТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОтветственностьСторонТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет,
			ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ЗаключительныеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора,
			ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Подвал", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);

		ДокументРезультат.Вывести(ТаблицаТрудовогоДоговора);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеДоговора.Ссылка);

	КонецЦикла;

	Возврат ДокументРезультат;

КонецФункции

Процедура ТрудовойДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеДоговора, ПараметрыНумерации)

	Если ИмяОбласти = "Раздел_ОхранаТруда" И (ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
		Или ДанныеДоговора.ТрудовойДоговорСНадомником) Тогда

		Возврат;

	КонецЕсли;

	ОбластьНачалаРаздела = Новый ТабличныйДокумент;
	НомерОбласти = 1;

	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	Для Каждого ВложеннаяОбласть Из ОбластьРаздела.Области Цикл

		Если ОбластьРаздела.Области.Количество() > 1 И ВложеннаяОбласть.Имя = ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;

		ВыводимаяОбласть = ОбластьРаздела.ПолучитьОбласть(ВложеннаяОбласть.Имя);

		Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Или ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда

			Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.КомпенсационныеВыплаты;
			ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.СтимулирующиеВыплаты;
			Иначе
				КоллекцияСтрок = Новый Массив;
			КонецЕсли;

			Если КоллекцияСтрок.Количество() = 0 Тогда

				ВыводимаяОбласть.Параметры.Начисление = Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС;

			Иначе

				ОбластьТаблицы = Новый ТабличныйДокумент;
				Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл

					ВыводимаяОбласть.Параметры.Заполнить(СтрокаКоллекции);
					ВыводимаяОбласть.Параметры.Размер = Формат(ВыводимаяОбласть.Параметры.Размер, "ЧДЦ=2");
					ОбластьТаблицы.Вывести(ВыводимаяОбласть);

				КонецЦикла;

				ВыводимаяОбласть = ОбластьТаблицы;

			КонецЕсли;

		Иначе
			ВыводимаяОбласть.Параметры.Заполнить(ПараметрыНумерации);
			ВыводимаяОбласть.Параметры.Заполнить(ДанныеДоговора);

		КонецЕсли;

		Если НомерОбласти > 2 Тогда
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		Иначе

			ОбластьНачалаРаздела.Вывести(ВыводимаяОбласть);
			Если НомерОбласти = 2 Тогда

				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьНачалаРаздела) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				ДокументРезультат.Вывести(ОбластьНачалаРаздела);
				ОбластьНачалаРаздела = Неопределено;

			КонецЕсли;

		КонецЕсли;

		НомерОбласти = НомерОбласти + 1;

		Если СтрДлина(ВложеннаяОбласть.Имя) = 8 И СтрНайти(ВложеннаяОбласть.Имя, "Пункт_") = 1 Тогда
			ПараметрыНумерации.НомерПункта = ПараметрыНумерации.НомерПункта + 1;
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		ИначеЕсли СтрЧислоВхождений(ВложеннаяОбласть.Имя, "_") = 2 Тогда
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерПодпункта + 1);
		КонецЕсли;

	КонецЦикла;

	Если ОбластьНачалаРаздела <> Неопределено Тогда

		Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьНачалаРаздела) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ДокументРезультат.Вывести(ОбластьНачалаРаздела);

	КонецЕсли;

	Если СтрНайти(ИмяОбласти, "Раздел_") = 1 Тогда
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерРаздела + 1);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, Знач НомерРаздела)

	ПараметрыНумерации.Вставить("НомерРаздела", НомерРаздела);
	ПараметрыНумерации.Вставить("НомерРазделаВРимскойНотации",
		СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(НомерРаздела, Ложь));

КонецПроцедуры

Процедура УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПункта)

	ПараметрыНумерации.Вставить("НомерПункта", НомерПункта);

КонецПроцедуры

Процедура УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПодпункта)

	ПараметрыНумерации.Вставить("НомерПодпункта", НомерПодпункта);
	// АПК:1036-выкл проверка орфографии не требуется
	ПараметрыНумерации.Вставить("НомерПодпунктаБуквой", Сред("абвгдежзиклмнопрстуфхцчшщ", НомерПодпункта, 1));
	// АПК:1036-вкл

КонецПроцедуры

Функция ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником)

	ДанныеТрудовыхДоговоров = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиДляПечатиТрудовыхДоговоров
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивОбъектов)";

	Запрос.Выполнить();

	Описатель = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляПечатиТрудовыхДоговоров");

	Описатель.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиСДаннымиОПриеме";

	КадровыеДанныеПриема = "ДатаПриема,ПриказОПриеме";

	УчетСтраховыхВзносов.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, КадровыеДанныеПриема);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиСДаннымиОПриеме.ПриказОПриеме
	|ИЗ
	|	ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
	|ГДЕ
	|	ЕСТЬNULL(СотрудникиСДаннымиОПриеме.ПриказОПриеме, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)";

	МассивПриказовОПриеме = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПриказОПриеме");

	СоздатьВТДанныеДокументовПриемНаРаботу(Запрос.МенеджерВременныхТаблиц, МассивПриказовОПриеме);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриказыОПриеме.Ссылка,
	|	СотрудникиСДаннымиОПриеме.Сотрудник,
	|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Период,
	|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Дата,
	|	ПриказыОПриеме.ДлительностьИспытательногоСрока,
	|	ПриказыОПриеме.РазрешениеНаРаботу,
	|	ПриказыОПриеме.РазрешениеНаПроживание,
	|	ПриказыОПриеме.УсловияОказанияМедпомощи,
	|	ПриказыОПриеме.Руководитель,
	|	ПриказыОПриеме.ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДанныеПриказовОПриеме
	|ИЗ
	|	ВТДанныеДокументов КАК ПриказыОПриеме
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
	|		ПО ПриказыОПриеме.Ссылка = СотрудникиСДаннымиОПриеме.ПриказОПриеме";

	Запрос.Выполнить();
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	УчетСтраховыхВзносов.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина,
		ИменаПолейОтветственныхЛиц, "ВТДанныеПриказовОПриеме");

	СоздатьВТКадровыеДанныеТрудовогоДоговора(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСДаннымиОПриеме",
		"Сотрудник,ДатаПриема");

	НачисленияСотрудников = Новый Соответствие;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КадровыеДанные.Сотрудник
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|ГДЕ
	|	ЕСТЬNULL(КадровыеДанные.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1 не принят на работу'"), Выборка.Сотрудник);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Организация,
	|	КадровыеДанные.Период
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";

	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФаксОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));

	РезультатЗапросаПоШапке = Запрос.Выполнить();

	АдресаОрганизаций = КонтактнаяИнформацияУНФ.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку(
		"Организация"));

	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();

		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "ФаксОрганизации");

		УстановитьПривилегированныйРежим(Истина);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация,
			Выборка.Период, Сведения);
		УстановитьПривилегированныйРежим(Ложь);

		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;

		Если ОргСведения.Свойство("НаимЮЛПол") Тогда
			НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		КонецЕсли;

		Если ОргСведения.Свойство("ИННЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		КонецЕсли;

		Если ОргСведения.Свойство("КППЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		КонецЕсли;

		Если ОргСведения.Свойство("ТелОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		КонецЕсли;

		Если ОргСведения.Свойство("ФаксОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ФаксОрганизации = ОргСведения.ФаксОрганизации;
		КонецЕсли;

		ОписаниеЮридическогоАдреса = КонтактнаяИнформацияУНФ.АдресОрганизации(
			АдресаОрганизаций, Выборка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;

		ОписаниеФактическогоАдреса = КонтактнаяИнформацияУНФ.АдресОрганизации(
			АдресаОрганизаций, Выборка.Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;

	КонецЦикла;

	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбОрганизациях.Период,
	|	СведенияОбОрганизациях.Организация,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ТелефонОрганизации КАК ТелефонОрганизации,
	|	СведенияОбОрганизациях.ФаксОрганизации КАК ФаксОрганизации,
	|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
	|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
	|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса
	|ПОМЕСТИТЬ ВТДанныеОрганизаций
	|ИЗ
	|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиСДаннымиОПриеме.Сотрудник КАК Ссылка,
	|	СотрудникиСДаннымиОПриеме.Сотрудник,
	|	СотрудникиСДаннымиОПриеме.ДатаПриема,
	|	КадровыеДанныеСотрудников.Подразделение,
	|	КадровыеДанныеСотрудников.Должность,
	|	КадровыеДанныеСотрудников.ВидЗанятости,
	|	ДанныеОрганизаций.Организация,
	|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное,
	|	ДанныеОрганизаций.ИНН,
	|	ДанныеОрганизаций.КПП,
	|	ДанныеОрганизаций.ТелефонОрганизации,
	|	ДанныеОрганизаций.ФаксОрганизации,
	|	ДанныеОрганизаций.ОрганизацияАдресЮридический,
	|	ДанныеОрганизаций.ОрганизацияАдресФактический,
	|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса,
	|	Организации.Наименование КАК ОрганизацияНаименованиеСокращенное,
	|	КадровыеДанныеСотрудников.Период,
	|	КадровыеДанныеСотрудников.Страна,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК СотрудникФИОПолные,
	|	КадровыеДанныеСотрудников.АдресМестаПроживанияПредставление КАК СотрудникАдресМестаПроживания,
	|	КадровыеДанныеСотрудников.ДокументПредставление КАК СотрудникУдостоверениеЛичности,
	|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СотрудникСНИЛС,
	|	КадровыеДанныеСотрудников.КлассУсловийТруда КАК УсловияТрудаНаРабочемМесте,
	|	КадровыеДанныеСотрудников.ДатаДоговораКонтракта КАК ТрудовойДоговорДата,
	|	КадровыеДанныеСотрудников.НомерДоговораКонтракта КАК ТрудовойДоговорНомер,
	|	КадровыеДанныеСотрудников.ДатаОкончания КАК ДатаЗавершенияТрудовогоДоговора,
	|	КадровыеДанныеСотрудников.ОснованиеСрочногоДоговора,
	|	КадровыеДанныеСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	КадровыеДанныеСотрудников.ОписаниеДлительностиРабочейНеделиВДнях КАК ОписаниеДлительностиРабочейНеделиВДнях,
	|	КадровыеДанныеСотрудников.ПродолжительностьРабочегоДня КАК ПродолжительностьРабочегоДня,
	|	КадровыеДанныеСотрудников.СокращеннаяРабочаяНеделя КАК СокращеннаяРабочаяНеделя,
	|	КадровыеДанныеСотрудников.НеполноеРабочееВремя КАК НеполноеРабочееВремя,
	|	КадровыеДанныеСотрудников.КоличествоДнейОсновногоОтпуска КАК ДлительностьОсновногоОтпуска,
	|	КадровыеДанныеСотрудников.КоличествоДнейОтпускаЗаВредность КАК ДлительностьВредногоОтпуска,
	|	КадровыеДанныеСотрудников.КоличествоДнейСеверногоОтпуска КАК ДлительностьСеверногоОтпуска,
	|	КадровыеДанныеСотрудников.ОснованиеПредставителя КАК ОснованиеРуководителяВРодительномПадеже,
	|	ДанныеПриказовОПриеме.ДлительностьИспытательногоСрока,
	|	ДанныеПриказовОПриеме.РазрешениеНаРаботу,
	|	ДанныеПриказовОПриеме.РазрешениеНаПроживание,
	|	ДанныеПриказовОПриеме.УсловияОказанияМедпомощи,
	|	ДанныеПриказовОПриеме.ДолжностьРуководителя КАК РуководительДолжность,
	|	ФИОРуководителя.ФИО КАК РуководительФИОПолные,
	|	ФИОРуководителя.Пол КАК РуководительПол
	|ИЗ
	|	ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПриказовОПриеме КАК ДанныеПриказовОПриеме
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|			ПО ДанныеПриказовОПриеме.Дата = ФИОРуководителя.Дата
	|				И ДанныеПриказовОПриеме.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ПО СотрудникиСДаннымиОПриеме.ДатаПриема = ДанныеПриказовОПриеме.Дата
	|			И СотрудникиСДаннымиОПриеме.Сотрудник = ДанныеПриказовОПриеме.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеТрудовогоДоговора КАК КадровыеДанныеСотрудников
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|				ПО ДанныеОрганизаций.Организация = Организации.Ссылка
	|			ПО КадровыеДанныеСотрудников.Организация = ДанныеОрганизаций.Организация
	|				И КадровыеДанныеСотрудников.Период = ДанныеОрганизаций.Период
	|		ПО СотрудникиСДаннымиОПриеме.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ДанныеДоговора = ПараметрыТрудовогоДоговора(ДистанционныеРаботы, ДоговорСНадомником);

		ИсключаемыеИЗЗаполненияКолонки =
		"ДатаПриема,
		|ТрудовойДоговорДата,
		|ВидЗанятости,
		|ОрганизацияНаименованиеСокращенное,
		|ДатаЗавершенияТрудовогоДоговора,
		|ОснованиеСрочногоДоговора,
		|ДлительностьРабочейНедели,
		|ОписаниеДлительностиРабочейНеделиВДнях,
		|ПродолжительностьРабочегоДня";

		ЗаполнитьЗначенияСвойств(ДанныеДоговора, Выборка, , ИсключаемыеИЗЗаполненияКолонки);

		Если ЗначениеЗаполнено(Выборка.ТрудовойДоговорДата) Тогда
			ДанныеДоговора.ТрудовойДоговорДата = Формат(Выборка.ТрудовойДоговорДата, "ДЛФ=DD");
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ДатаЗавершенияТрудовогоДоговора) Тогда

			ДанныеДоговора.СрочностьТрудовогоДоговора = НСтр("ru='срочный трудовой договор'");
			ДанныеДоговора.ДатаЗавершенияТрудовогоДоговора = Формат(Выборка.ДатаЗавершенияТрудовогоДоговора, "ДЛФ=DD");

			ДанныеДоговора.ОснованиеСрочногоДоговора = Выборка.ОснованиеСрочногоДоговора;

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ДатаПриема) Тогда

			ДанныеДоговора.ДатаПриема = Формат(Выборка.ДатаПриема, "ДЛФ=DD");
			Если Выборка.ТрудовойДоговорДата = Null Тогда
				ДанныеДоговора.ТрудовойДоговорДата = ДанныеДоговора.ДатаПриема;
			КонецЕсли;

		Иначе
			ДанныеДоговора.ДатаПриема = Выборка.ТрудовойДоговорДата;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.УсловияТрудаНаРабочемМесте) Тогда
			ДанныеДоговора.УсловияТрудаНаРабочемМесте = Выборка.УсловияТрудаНаРабочемМесте;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ДлительностьРабочейНедели) Тогда

			ДанныеДоговора.ДлительностьРабочейНедели = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр(
				"ru = ';%1 час в неделю;;%1 часа в неделю;%1 часов в неделю;%1 часа в неделю'"),
				Выборка.ДлительностьРабочейНедели);

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ОписаниеДлительностиРабочейНеделиВДнях)
			Или Выборка.ОписаниеДлительностиРабочейНеделиВДнях = 0 Тогда

			Если Выборка.ОписаниеДлительностиРабочейНеделиВДнях = 5 Тогда
				ДанныеДоговора.ОписаниеДлительностиРабочейНеделиВДнях = НСтр("ru='пятидневная с двумя выходными днями'");
			ИначеЕсли Выборка.ОписаниеДлительностиРабочейНеделиВДнях = 6 Тогда
				ДанныеДоговора.ОписаниеДлительностиРабочейНеделиВДнях = НСтр("ru='шестидневная с одним выходными днем'");
			ИначеЕсли Выборка.СокращеннаяРабочаяНеделя = Истина Тогда
				ДанныеДоговора.ОписаниеДлительностиРабочейНеделиВДнях = НСтр("ru='неполная рабочая неделя'");
			ИначеЕсли Выборка.НеполноеРабочееВремя = Истина Тогда
				ДанныеДоговора.ОписаниеДлительностиРабочейНеделиВДнях = НСтр("ru='сокращенное рабочее время'");
			Иначе
				ДанныеДоговора.ОписаниеДлительностиРабочейНеделиВДнях = НСтр(
					"ru='рабочая неделя с предоставлением выходных дней по скользящему графику'");
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ПродолжительностьРабочегоДня) Тогда
			ДанныеДоговора.ПродолжительностьРабочегоДня = Выборка.ПродолжительностьРабочегоДня;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ОрганизацияНаименованиеСокращенное) Тогда
			ДанныеДоговора.ОрганизацияНаименованиеСокращенное = ", " + Выборка.ОрганизацияНаименованиеСокращенное;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ИНН) Тогда

			ДанныеДоговора.ОрганизацияИННКПП = Выборка.ИНН;

			Если ЗначениеЗаполнено(Выборка.КПП) Тогда
				ДанныеДоговора.ОрганизацияИННКПП = ДанныеДоговора.ОрганизацияИННКПП + " / " + Выборка.КПП;
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ОснованиеРуководителяВРодительномПадеже) Тогда
			ДанныеДоговора.ОснованиеРуководителяВРодительномПадеже = Выборка.ОснованиеРуководителяВРодительномПадеже;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.РуководительФИОПолные) Тогда

			ДанныеДоговора.РуководительФИОПолныеВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьФИО(
				Выборка.РуководительФИОПолные, 2, , Выборка.РуководительПол);

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ДлительностьИспытательногоСрока) Тогда

			ДанныеДоговора.ИспытательныйСрок = НСтр("ru='устанавливается'");
			ДанныеДоговора.ИспытательныйСрокМесяцев = Выборка.ДлительностьИспытательногоСрока;

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.РазрешениеНаПроживание) Тогда
			ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами = Выборка.РазрешениеНаПроживание;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.РазрешениеНаРаботу) Тогда

			Если ЗначениеЗаполнено(ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами) Тогда

				ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами = ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами
					+ ";" + Символы.ПС;

			КонецЕсли;

			ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами = ДанныеДоговора.ИныеДокументыПредставляемыеИностраннымиГражданами
				+ Выборка.РазрешениеНаРаботу;

		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.РуководительДолжность) Тогда

			ДанныеДоговора.РуководительДолжностьВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(Выборка.РуководительДолжность), 2, Выборка.РуководительДолжность);

		КонецЕсли;

		Периоды = НачисленияСотрудников.Получить(Выборка.Период);
		Если Периоды <> Неопределено Тогда

			ОписанияНачислений = Периоды.Получить(Выборка.Сотрудник);
			Если ОписанияНачислений <> Неопределено Тогда

				Если ЗначениеЗаполнено(ОписанияНачислений.ТарифнаяСтавка.Начисление) Тогда
					ДанныеДоговора.ТарифнаяСтавка = ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(
						ОписанияНачислений.ТарифнаяСтавка);
				ИначеЕсли ЗначениеЗаполнено(ОписанияНачислений.СдельнаяОплатаТруда.Начисление) Тогда

					ДанныеДоговора.СдельнаяОплатаТруда = Строка(ОписанияНачислений.СдельнаяОплатаТруда.Начисление);
					Если ЗначениеЗаполнено(ОписанияНачислений.СдельнаяОплатаТруда.Размер) Тогда
						ДанныеДоговора.СдельнаяОплатаТруда = ДанныеДоговора.СдельнаяОплатаТруда + " " + Формат(
							ОписанияНачислений.СдельнаяОплатаТруда.Размер, "ЧДЦ=2");
					КонецЕсли;

				КонецЕсли;

				ДанныеДоговора.КомпенсационныеВыплаты = ОписанияНачислений.Компенсации;
				ДанныеДоговора.СтимулирующиеВыплаты = ОписанияНачислений.Надбавки;

			КонецЕсли;

		КонецЕсли;

		ДанныеТрудовыхДоговоров.Добавить(ДанныеДоговора);

	КонецЦикла;

	Возврат ДанныеТрудовыхДоговоров;

КонецФункции

Функция ПараметрыТрудовогоДоговора(ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь)

	ПараметрыДоговора = Новый Структура;

	ПараметрыДоговора.Вставить("Ссылка");

	ПараметрыДоговора.Вставить("ТрудовойДоговорНомер", "__________");
	ПараметрыДоговора.Вставить("ТрудовойДоговорДата");

	ПараметрыДоговора.Вставить("ТрудовойДоговорНаДистанционныеРаботы", ДистанционныеРаботы);
	ПараметрыДоговора.Вставить("ТрудовойДоговорСНадомником", ДоговорСНадомником);
	ПараметрыДоговора.Вставить("ТрудовойДоговорСИностранцем", Ложь);
	ПараметрыДоговора.Вставить("ОснованиеСрочногоДоговора");

	ПараметрыДоговора.Вставить("СотрудникФИОПолные");
	ПараметрыДоговора.Вставить("СотрудникАдресМестаПроживания");
	ПараметрыДоговора.Вставить("СотрудникУдостоверениеЛичности");
	ПараметрыДоговора.Вставить("СотрудникСНИЛС");

	ПараметрыДоговора.Вставить("УсловияОказанияМедпомощи");
	ПараметрыДоговора.Вставить("ИныеДокументыПредставляемыеИностраннымиГражданами");

	ПараметрыДоговора.Вставить("ДатаПриема");
	ПараметрыДоговора.Вставить("Подразделение");
	ПараметрыДоговора.Вставить("Должность");
	ПараметрыДоговора.Вставить("УсловияТрудаНаРабочемМесте");
	ПараметрыДоговора.Вставить("СрочностьТрудовогоДоговора", НСтр("ru='трудовой договор на неопределенный срок'"));
	ПараметрыДоговора.Вставить("ДатаЗавершенияТрудовогоДоговора");
	ПараметрыДоговора.Вставить("ИспытательныйСрок", НСтр("ru='не устанавливается'"));
	ПараметрыДоговора.Вставить("ИспытательныйСрокМесяцев");
	ПараметрыДоговора.Вставить("ВидЗанятости");
	ПараметрыДоговора.Вставить("МестоОпределенияДолжностныхОбязанностей", НСтр("ru='в должностной инструкции'"));

	ПараметрыДоговора.Вставить("ТарифнаяСтавка");
	ПараметрыДоговора.Вставить("СдельнаяОплатаТруда");
	ПараметрыДоговора.Вставить("КомпенсационныеВыплаты", Новый Массив);
	ПараметрыДоговора.Вставить("СтимулирующиеВыплаты", Новый Массив);

	ПараметрыДоговора.Вставить("ДлительностьРабочейНедели", НСтр("ru='40 часов в неделю'"));
	ПараметрыДоговора.Вставить("ОписаниеДлительностиРабочейНеделиВДнях", НСтр(
		"ru='пятидневная с двумя выходными днями'"));
	ПараметрыДоговора.Вставить("ПродолжительностьРабочегоДня", 8);

	ПараметрыДоговора.Вставить("ДлительностьОсновногоОтпуска", 28);
	ПараметрыДоговора.Вставить("ДлительностьВредногоОтпуска", 0);
	ПараметрыДоговора.Вставить("ДлительностьСеверногоОтпуска", 0);

	ПараметрыДоговора.Вставить("ОрганизацияНаименованиеПолное");
	ПараметрыДоговора.Вставить("ОрганизацияНаименованиеСокращенное");
	ПараметрыДоговора.Вставить("ОрганизацияГородФактическогоАдреса");
	ПараметрыДоговора.Вставить("ОрганизацияАдресЮридический");
	ПараметрыДоговора.Вставить("ОрганизацияАдресФактический");
	ПараметрыДоговора.Вставить("ОрганизацияИННКПП");

	ПараметрыДоговора.Вставить("РуководительДолжностьВРодительномПадеже");
	ПараметрыДоговора.Вставить("РуководительФИОПолныеВРодительномПадеже");
	ПараметрыДоговора.Вставить("ОснованиеРуководителяВРодительномПадеже", НСтр("ru='устава'"));

	Возврат ПараметрыДоговора;

КонецФункции

Функция ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(ОписаниеТарифнойСтавки)

	ПредставлениеТарифнойСтавки = "";

	ПредставлениеТарифнойСтавки = Строка(ОписаниеТарифнойСтавки.Начисление);
	Если ЗначениеЗаполнено(ОписаниеТарифнойСтавки.Размер) Тогда
		ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + Формат(ОписаниеТарифнойСтавки.Размер, "ЧДЦ=2");
	КонецЕсли;

	Возврат ПредставлениеТарифнойСтавки;

КонецФункции

// Возвращает структуру описания полей отбора для методов получения кадровых данных сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				Период
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период")

	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИменаПолейВременнойТаблицыОтборовСотрудников, ",", , Истина);
	Возврат Новый Структура("Сотрудник,Период", МассивИменПолейОтбораСотрудников[0],
		МассивИменПолейОтбораСотрудников[1]);

КонецФункции

Процедура ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(СтруктураПараметров)

	ИменаТаблицСКадровойИсториейСотрудников = Новый Структура;
	ИменаТаблицСКадровойИсториейСотрудников.Вставить("ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра", "");
	ИменаТаблицСКадровойИсториейСотрудников.Вставить("ИмяВТКадроваяИсторияСотрудниковСрезПоследних", "");

	СтруктураПараметров.Вставить("ИменаТаблицСКадровойИсториейСотрудников", ИменаТаблицСКадровойИсториейСотрудников);

КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов)

	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботу.Ссылка,
	|	ПриемНаРаботу.Период КАК Дата,
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Период КАК Период,
	|	ПриемНаРаботу.Ссылка.Номер КАК НомерДок,
	|	ПриемНаРаботу.Ссылка.Дата КАК ДатаДок,
	|	"""" КАК Руководитель,
	|	"""" КАК ДолжностьРуководителя,
	|	"""" КАК  УсловияПриема,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗавершенияТрудовогоДоговора,
	|	"""" КАК ДлительностьИспытательногоСрока,
	|	"""" КАК РазрешениеНаРаботу,
	|	"""" КАК РазрешениеНаПроживание,
	|	"""" КАК УсловияОказанияМедпомощи
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ПриемНаРаботу.Сотрудники КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка.Проведен
	|	И ПриемНаРаботу.Ссылка В(&МассивОбъектов)";

	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Ссылка В(&МассивОбъектов)",
			"ПриемНаРаботу.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;

	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТКадровыеДанныеТрудовогоДоговора(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников,
	ИменаПолейВременнойТаблицыОтборовСотрудников)
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников);

	КадровыеДанные =
	"ГоловнаяОрганизация,
	|Организация,
	|Подразделение,
	|Должность,
	|ВидЗанятости,
	|ФИОПолные,
	|АдресМестаПроживанияПредставление,
	|ДокументПредставление,
	|Страна,
	|КлассУсловийТруда,
	|СтраховойНомерПФР,
	|ПроцентСевернойНадбавки,
	|ТарифнаяСтавка";
	УчетСтраховыхВзносов.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ОснованиеПредставителя", НСтр("ru='Устава'"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	NULL КАК ДатаДоговораКонтракта,
	|	NULL КАК НомерДоговораКонтракта,
	|	NULL КАК ДатаОкончания,
	|	NULL КАК ОснованиеСрочногоДоговора,
	|	NULL КАК ДлительностьРабочейНедели,
	|	NULL КАК ОписаниеДлительностиРабочейНеделиВДнях,
	|	NULL КАК ПродолжительностьРабочегоДня,
	|	NULL КАК СокращеннаяРабочаяНеделя,
	|	NULL КАК НеполноеРабочееВремя,
	|	28 КАК КоличествоДнейОсновногоОтпуска,
	|	NULL КАК КоличествоДнейОтпускаЗаВредность,
	|	NULL КАК КоличествоДнейСеверногоОтпуска,
	|	&ОснованиеПредставителя КАК ОснованиеПредставителя,
	|	КадровыеДанныеСотрудников.*
	|ПОМЕСТИТЬ ВТКадровыеДанныеТрудовогоДоговора
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";

	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли