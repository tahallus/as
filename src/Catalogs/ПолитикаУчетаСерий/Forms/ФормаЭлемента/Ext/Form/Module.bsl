#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнитьДеревоНастроек();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭлементыДереваНастроек = ДеревоНастройки.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДереваНастроек Цикл
			УстановитьЗначениеФлагаПодчиненнымЭлементамСервер(ЭлементДерева, Истина);
			ЭлементДерева.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ТипПолитики) Тогда
		Объект.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий
	КонецЕсли;
	
	УстановитьДоступность(ЭтаФорма);
	
	Элементы.ОсновнаяПолитикаГИСМ.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПеренестиНастройкиВТаблицуОбъекта();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоНастройкиИспользованиеПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ДеревоНастройки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипДокумента) Тогда Возврат КонецЕсли;
	
	ВеткаДерева = ДеревоНастройки.НайтиПоИдентификатору(Элементы.ДеревоНастройки.ТекущаяСтрока);
	
	УстановитьЗначениеФлагаПодчиненнымЭлементам(ВеткаДерева, ТекущиеДанные.Использование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПолитикиПриИзменении(Элемент)
	
	СтруктураПроверки = ИзменениеТипаПолитикиРазрешено();
	Если Не СтруктураПроверки.ИзменениеВозможно Тогда
		
		Объект.ТипПолитики = СтруктураПроверки.ТипПолитикиДоИзменения;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'По номенклатуре с данным типом политики есть движения. Изменение типа политики невозможно.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ТипПолитики = ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий") Тогда
		
		ЭлементыДереваНастроек = ДеревоНастройки.ПолучитьЭлементы();
		
		УстановитьЗаголовкам = Объект.ТипПолитики = ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий");
		
		ПараметрыПоиска = Неопределено;
		ТаблицаНастроек = Неопределено;
		Если Объект.ТипПолитики = ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.АвторасчетОстатковСерий") Тогда
			ПараметрыПоиска = Новый Структура("ТипДокумента, Операция");
			ТаблицаНастроек = ТаблицаНастроекПолитикиАвторасчетОстатковСерий;
		КонецЕсли;
		
		Для Каждого ЭлементДерева Из ЭлементыДереваНастроек Цикл
			УстановитьЗначениеФлагаПодчиненнымЭлементам(ЭлементДерева, Истина, ПараметрыПоиска, ТаблицаНастроек);
			ЭлементДерева.Использование = УстановитьЗаголовкам;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяПолитикаГИСМПриИзменении(Элемент)
	
	РезультатИзменения = ДоступноИзменениеРеквизитаОсновнойПолитикиГИСМ();
	
	Если Не РезультатИзменения Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Основная политика КиЗ уже существует. Изменение невозможно.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	СтрокиДерева = ДеревоНастройки.ПолучитьЭлементы();
	УстановитьИспользованиеВсемСтрокамДерева(СтрокиДерева, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	СтрокиДерева = ДеревоНастройки.ПолучитьЭлементы();
	УстановитьИспользованиеВсемСтрокамДерева(СтрокиДерева, Ложь)
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДоступноИзменениеРеквизитаОсновнойПолитикиГИСМ()
	
	Если Объект.ОсновнаяПолитикаУчетаКиЗ Тогда
		
		ТекущаяСсылка = ?(Не ЗначениеЗаполнено(Объект.Ссылка), Справочники.ПолитикаУчетаСерий.ПустаяСсылка(), Объект.Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущаяСсылка", ТекущаяСсылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПолитикаУчетаСерий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
		|ГДЕ
		|	ПолитикаУчетаСерий.ОсновнаяПолитикаУчетаКиЗ
		|	И НЕ ПолитикаУчетаСерий.Ссылка = &ТекущаяСсылка";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Объект.ОсновнаяПолитикаУчетаКиЗ = Ложь;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Функция ИзменениеТипаПолитикиРазрешено()
	
	СтруктураВозврата = Новый Структура("ИзменениеВозможно, ТипПолитикиДоИзменения");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураВозврата.ИзменениеВозможно = Истина;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТипПолитикиИзСсылки = Объект.Ссылка.ТипПолитики;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПолитикаУчетаСерий", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияСерииНоменклатуры.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ДвиженияСерииНоменклатуры КАК ДвиженияСерииНоменклатуры
	|ГДЕ
	|	ДвиженияСерииНоменклатуры.Номенклатура В
	|			(ВЫБРАТЬ
	|				Номенклатура.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.Номенклатура КАК Номенклатура
	|			ГДЕ
	|				Номенклатура.ПолитикаУчетаСерий = &ПолитикаУчетаСерий)
	|	И НЕ ДвиженияСерииНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	
	Если Запрос.Выполнить().Пустой() Тогда
		СтруктураВозврата.ИзменениеВозможно = Истина;
		Возврат СтруктураВозврата;
	Иначе
		СтруктураВозврата.ИзменениеВозможно = Ложь;
		СтруктураВозврата.ТипПолитикиДоИзменения = ТипПолитикиИзСсылки;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИспользованиеВсемСтрокамДерева(СтрокиДерева, Значение)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СтрокаДерева.Использование = Значение;
		
		СледующийУровень = СтрокаДерева.ПолучитьЭлементы();
		УстановитьИспользованиеВсемСтрокамДерева(СледующийУровень, Значение)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	
	Если Не Форма.Объект.ТипПолитики = ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий") Тогда
		Форма.Элементы.ДеревоНастройки.ТолькоПросмотр = Истина;
		Форма.Элементы.ДеревоНастройкиГруппаВыделитьСнять.Доступность = Ложь;
	Иначе
		Форма.Элементы.ДеревоНастройки.ТолькоПросмотр = Ложь;
		Форма.Элементы.ДеревоНастройкиГруппаВыделитьСнять.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлагаПодчиненнымЭлементам(ВеткаДерева, ЗначениеФлага, ПараметрыПоиска = Неопределено, ТаблицаПоиска = Неопределено)
	
	Для Каждого Элемент Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если Не ПараметрыПоиска = Неопределено Тогда
			
			ПараметрыПоиска.ТипДокумента = Элемент.ТипДокумента;
			ПараметрыПоиска.Операция = Элемент.Операция;
			
			НайденныеСтроки = ТаблицаПоиска.НайтиСтроки(ПараметрыПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				Элемент.Использование = Ложь;
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Использование = ЗначениеФлага;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеФлагаПодчиненнымЭлементамСервер(ВеткаДерева, ЗначениеФлага)
	
	Для Каждого Элемент Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Элемент.Использование = ЗначениеФлага;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска)
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТипДокумента);
	
	НайденныеСтроки = Объект.НастройкиПолитики.НайтиСтроки(ПараметрыПоиска);
	
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоНастроек()
	
	ДеревоНастройки.ПолучитьЭлементы().Очистить();
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Показатель");
	ТаблицаТипов.Колонки.Добавить("ТипДокумента");
	ТаблицаТипов.Колонки.Добавить("Операция");
	ТаблицаТипов.Колонки.Добавить("НеПоказыватьНастройку");
	
	ПараметрыПоиска = Новый Структура("ТипДокумента, Операция");
	
	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить(); 
	СтрокаПоказатель.Показатель = НСтр("ru='Продажа'");
	
	СтруктураТаблицНастроек = Новый Структура;
	СтруктураТаблицНастроек.Вставить("ТаблицаНастроекПолитикиАвторасчетОстатковСерий", ТаблицаНастроекПолитикиАвторасчетОстатковСерий);
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Продажа", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых); 
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Розница'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Розница", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Закупка'");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Закупка", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Склад'");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Склад", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Производство'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Производство", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Передача на комиссию'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПередачаНаКомиссию", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Прием на комиссию'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПриемНаКомиссию", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Передача в переработку'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПередачаВПереработку", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Переработка давальческого сырья'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПереработкаДавальческогоСырья", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Передача на ответственное хранение'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПередачаНаОтветственноеХранение", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Прием на ответственное хранение'");
	СтрокаПоказатель.НеПоказыватьНастройку = Не ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "ПриемНаОтветственноеХранение", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	КоличествоИспользуемых = 0;
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
		КоличествоИспользуемых = ?(СтрокаТипДокумента.Использование, КоличествоИспользуемых + 1, КоличествоИспользуемых);
	КонецЦикла;
	СтрокаПоказатель.Использование = ?(КоличествоТиповВРазделеУчета = КоличествоИспользуемых, Истина, Ложь);
	
	ТаблицаТипов.Очистить();

	СтрокаПоказатель = ДеревоНастройки.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.Показатель = НСтр("ru='Прочее'");
	
	Справочники.ПолитикаУчетаСерий.ЗаполнитьТаблицуТиповДокументовПоРазделуУчета(ТаблицаТипов, "Прочее", СтруктураТаблицНастроек);
	
	КоличествоТиповВРазделеУчета = ТаблицаТипов.Количество();
	Для Каждого ТипДокумента Из ТаблицаТипов Цикл
		СтрокаТипДокумента = СтрокаПоказатель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТипДокумента, ТипДокумента);
		СтрокаТипДокумента.Использование = ЕстьНастройкаПоДокументу(СтрокаТипДокумента, ПараметрыПоиска);
	КонецЦикла;
	СтрокаПоказатель.Использование = СтрокаТипДокумента.Использование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиВТаблицуОбъекта()
	
	Объект.НастройкиПолитики.Очистить();
	
	ЭлементыДереваНастроек = ДеревоНастройки.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДереваНастроек Цикл
		ПеренестиВыбранныеСтрокиВТаблицуОбъекта(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыбранныеСтрокиВТаблицуОбъекта(ВеткаДерева)
	
	Для Каждого Элемент Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если Элемент.Использование Тогда
			НоваяСтрока = Объект.НастройкиПолитики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			НоваяСтрока.ТипПолитики = Объект.ТипПолитики;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти