#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
	
	Перем ЭтоНовый; // Показывает, что был записан новый объект. Используются в обработчике события ПриЗаписи.
	Перем ЕдиницаИзмеренияПередЗаписью;
	
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтотОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗапасов");
		Если НЕ ЭтоНабор Тогда
			ПроверяемыеРеквизиты.Добавить("МетодОценки");
			ПроверяемыеРеквизиты.Добавить("СпособПополнения");
		КонецЕсли; 
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
		Если ЭтоАгентскаяУслуга Тогда
			ПроверяемыеРеквизиты.Добавить("Поставщик");
			ПроверяемыеРеквизиты.Добавить("Договор");
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
		
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗапасов");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаДоходов");
		Если Не ПроизвольныйНоминал Тогда
			ПроверяемыеРеквизиты.Добавить("Номинал");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") 
		И НЕ ЭтоГруппа И ИспользоватьСерииНоменклатуры И Не ЗначениеЗаполнено(ПолитикаУчетаСерий) Тогда
		ПроверяемыеРеквизиты.Добавить("ПолитикаУчетаСерий");
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И ИспользоватьНаборыЕдиницИзмерения И Не ЗначениеЗаполнено(НаборЕдиницИзмерения) Тогда
		ПроверяемыеРеквизиты.Добавить("НаборЕдиницИзмерения");
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И НЕ ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КонецЕсли;
	
	Если Не ЭтоГруппа И ЗначениеЗаполнено(СрокГодности) И Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности) Тогда
		ПроверяемыеРеквизиты.Добавить("ЕдиницаИзмеренияСрокаГодности");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения<>Неопределено И ДанныеЗаполнения.Свойство("ЭтоГруппа") И ДанныеЗаполнения.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		НаименованиеПолное = ТекстЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("КатегорияНоменклатуры")
		И ЗначениеЗаполнено(ДанныеЗаполнения.КатегорияНоменклатуры) Тогда
		
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ДанныеЗаполнения.КатегорияНоменклатуры) Тогда
			ДанныеЗаполнения.Удалить("КатегорияНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Коэффициент должен быть заполнен в любом случае
	Если КоэффициентЕдиницыДляОтчетов = 0 Тогда
		КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	// Требуется заполнять служебные свойства в режиме ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка И ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИзменения = ТекущаяДата();
	
	Если НЕ ЭтоГруппа И ПометкаУдаления = Истина Тогда 
		
		ИсключитьИзПрайсЛистов = Истина;
		
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		КатегорииНоменклатурыСервер.ПроверкаЗаполненияСвойствПередЗаписью(ЭтотОбъект, Отказ);
		Если НЕ АлкогольнаяПродукция
			И ЗначениеЗаполнено(ВидАлкогольнойПродукции) Тогда
			АлкогольнаяПродукция = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовый();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// для КиЗ и номенклатуры, которая маркируется КиЗ учет сериный номеров обязателен 
	Если НЕ ЭтоГруппа 
		И (ВидМаркировки = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак
			ИЛИ ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция ) Тогда
		
		//ИспользоватьСерииНоменклатуры = Истина;
		Если НЕ (ИспользоватьСерииНоменклатуры И ИспользоватьУникальныеСерии И ЗначениеЗаполнено(ПолитикаУчетаСерий)) Тогда
			ТекстСообщения = "Для ведения учета продукции ГИСМ необходимо выполнить настройки:
			| - Включить использование серий номенклатуры (флажок ""Использовать серии номенклатуры"")
			| - Включить использование уникальных серий (флажок ""Использовать уникальные серии"")
			| - Указать политику учета серий (поле ""Политика учета серий"")";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// для маркировки = киз - ставим, что это КИЗ
	Если НЕ ЭтоГруппа Тогда
		КизГИСМ = (ВидМаркировки = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		ЕдиницаИзмеренияПередЗаписью = ЭтотОбъект.Ссылка.ЕдиницаИзмерения;
		
		Если ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.ВидРабот
			И ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Операция
			И ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Работа
			И НЕ ФиксированнаяСтоимость Тогда
			ФиксированнаяСтоимость = Истина;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот
			ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция
			ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			Тогда
			ИспользоватьХарактеристики = Ложь;
			ПроверятьЗаполнениеХарактеристики = Ложь;
			ПроверятьЗаполнениеПартий = Ложь;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат 
			И ИспользоватьСерииНоменклатуры И Не ИспользоватьУникальныеСерии Тогда
			ИспользоватьУникальныеСерии = Истина;
		КонецЕсли;
		
		Если Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ИспользоватьПартии = Ложь;
		КонецЕсли;
		
		ПроверятьЗаполнениеХарактеристики = ?(Не ИспользоватьХарактеристики, Ложь, ПроверятьЗаполнениеХарактеристики);
		ПроверятьЗаполнениеПартий = ?(Не ИспользоватьПартии, Ложь, ПроверятьЗаполнениеПартий);
		
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		РегистрыСведений.ОбъектыИнтеграцииCRM.ПередЗаписьюОбъекта(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас И ЗначениеЗаполнено(ТоварнаяНоменклатураВЭД) Тогда
		ПрослеживаемыйТовар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяНоменклатураВЭД, "ПрослеживаемыйТовар", Истина);
	ИначеЕсли Не ЭтоГруппа Тогда
		ПрослеживаемыйТовар = Ложь;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбъектКопирования.ЭтоГруппа Тогда
		
		ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Требуется заполнять служебные свойства в режиме ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка И ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		КатегорииНоменклатурыСервер.ПроверкаЗаполненияСвойствПриЗаписи(ЭтотОбъект, КатегорияНоменклатуры, Отказ);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		ЗаписатьГруппуВРегистр();
		Возврат;
	Иначе
		ПеренестиНастройкиПолитикСерийИзКатегории();
		ЗаписатьИнформациюОСменеЕдиницыИзмерения(Отказ);
	КонецЕсли;
	
	Если ЭтоНабор Тогда
		Если ИспользоватьХарактеристики Тогда
			УдалитьХарактеристикуПоУмолчанию();
		Иначе
			ОчисткаОбщегоСоставаНабора();
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПриЗаписиОбъекта(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	Конецесли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УзелТовары = ОбменСКассовымСерверомШтрихМПереопределяемый.УзелТовары();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелТовары, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьГруппуВРегистр()
	
	НаборЗаписей = РегистрыСведений.ИерархияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(ЭтотОбъект.Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Номенклатура = ЭтотОбъект.Ссылка;
	НоваяЗапись.ПометкаУдаленияГруппы = ЭтотОбъект.ПометкаУдаления;
	НоваяЗапись.КартинкаГруппы = ?(ЭтотОбъект.ПометкаУдаления, 1, 0);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОСменеЕдиницыИзмерения(Отказ)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияПередЗаписью) И Не ЕдиницаИзмеренияПередЗаписью = ЭтотОбъект.ЕдиницаИзмерения Тогда
	
		МенеджерЗаписи = РегистрыСведений.ИсторияИзмененийЕдиницИзмерения.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.ВладелецЕдиницыИзмерения = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
		МенеджерЗаписи.СтараяЕдиницаИзмерения = ЕдиницаИзмеренияПередЗаписью;
		МенеджерЗаписи.НоваяЕдиницаИзмерения = ЭтотОбъект.ЕдиницаИзмерения;

		МенеджерЗаписи.Записать()
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиНастройкиПолитикСерийИзКатегории()
	
	Если Не ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", КатегорияНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Организация КАК Организация,
	|	ПолитикиУчетаСерий.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Количество() Тогда 
		Возврат 
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПолитикиУчетаСерий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Владелец = Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОчисткаОбщегоСоставаНабора()
	
	Запрос = НОвый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоставНаборов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &Ссылка
	|	И СоставНаборов.Общий";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
		Набор.Отбор.НоменклатураНабора.Установить(Ссылка);
		Набор.Отбор.Общий.Установить(Истина);
		Набор.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

//Производит очистку в регистра сведений значение характеристики по умолчанию если номенклатура - Набор
//
Процедура УдалитьХарактеристикуПоУмолчанию()
	
	НаборЗаписей = РегистрыСведений.ЗначенияНоменклатурыПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли