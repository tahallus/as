
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресКорзиныВХранилище") И ЗначениеЗаполнено(Параметры.АдресКорзиныВХранилище) Тогда
		ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(Параметры.АдресКорзиныВХранилище);
		Корзина.Загрузить(ТаблицаДляЗагрузки);
	КонецЕсли;
	Если Параметры.Свойство("НалогообложениеНДС") Тогда
		НалогообложениеНДС = Параметры.НалогообложениеНДС;
	КонецЕсли;
	Если Параметры.Свойство("ИспользуетсяНДС") Тогда
		ИспользуетсяНДС = Параметры.ИспользуетсяНДС;
	КонецЕсли;
	Если Параметры.Свойство("ОтборВидЦен") Тогда
		ОтборВидЦен = Параметры.ОтборВидЦен;
		ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(Параметры.ОтборВидЦен.ВалютаЦены);
	КонецЕсли;
	Если Параметры.Свойство("ОтборСклад") Тогда
		ОтборСклад = Параметры.ОтборСклад;
	КонецЕсли;
	Если Параметры.Свойство("ОтборОстатки") Тогда
		ОтборОстатки = Параметры.ОтборОстатки;
	КонецЕсли;
	Если Параметры.Свойство("ИспользуютсяХарактеристики") Тогда
		ИспользуютсяХарактеристики = Параметры.ИспользуютсяХарактеристики;
		Элементы.КорзинаХарактеристика.Видимость = ИспользуютсяХарактеристики;
	КонецЕсли;
	Если Параметры.Свойство("ЕстьДоступКЦенам") Тогда
		ЕстьДоступКЦенам = Параметры.ЕстьДоступКЦенам;
		Элементы.КорзинаЦена.Видимость	= ЕстьДоступКЦенам;
		Элементы.КорзинаСумма.Видимость = ЕстьДоступКЦенам;
	Иначе
		ЕстьДоступКЦенам = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьАналоги") Тогда
		ПоказыватьАналоги = Параметры.ПоказыватьАналоги;
		Элементы.ГруппаАналогиНоменклатуры.Видимость = ПоказыватьАналоги;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьКартинку") Тогда
		ПоказыватьКартинку = Параметры.ПоказыватьКартинку;
		Элементы.АдресКартинки.Видимость = ПоказыватьКартинку;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьСопутствующиеТовары") Тогда
		ПоказыватьСопутствующиеТовары = Параметры.ПоказыватьСопутствующиеТовары;
		Элементы.ГруппаСопутствующиеТовары.Видимость = ПоказыватьСопутствующиеТовары;
	КонецЕсли;
	
	Элементы.КорзинаЦена.Доступность = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	Элементы.Отложить.Доступность = (Корзина.Количество()>0);
	
	Если Не Корзина.Количество() Тогда
		Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость = Ложь;
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
	ЭтаФорма.Заголовок = НадписьПодобраноТоваров;
	
	ВосстановитьНастройки();
	
	ОбновитьЗаголовокКнопкиСозданияДокумента();
	
	ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаПраваяПанель.Видимость = Ложь;
		Элементы.НадписьПодобраноТоваров.Видимость = Ложь;
		Элементы.КоманднаяПанель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	КонецЕсли;
	
	ДоступноСозданиеДокументовРазделаЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();
	ДоступноСозданиеДокументовРазделаПродажи = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи();

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОфрмитьДокумент", "Доступность",
		ДоступноСозданиеДокументовРазделаЗакупки Или ДоступноСозданиеДокументовРазделаПродажи);
	
	Если Не ПоказыватьАналоги И Не ПоказыватьКартинку И Не ПоказыватьСопутствующиеТовары Тогда
		Элементы.ГруппаПраваяПанель.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ИнформацияПоНоменклатуреСвернута = Элементы.ДекорацияРазвернутьОтборы.Видимость;
	
	Если Не ЗавершениеРаботы Тогда
		
		Если НЕ РазрешитьЗакрытие Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если ПеренестиВДокумент Тогда
				Закрыть("ПеренестиВДокумент");
			Иначе
				СтруктураЗакрытия = Новый Структура("Корзина", Корзина);
				Закрыть(СтруктураЗакрытия);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КорзинаЦенаКоличествоПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.Корзина.ТекущиеДанные;
	
	НоменклатураВДокументахКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаКорзины, "Корзина");
	НоменклатураВДокументахКлиентСервер.ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	Элементы.Отложить.Доступность = (Корзина.Количество()>0);
	НоменклатураВДокументахКлиентСервер.ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.ДекорацияРазвернутьОтборы.Видимость Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Изображения.Количество() Тогда
		ПросмотретьПрисоединенныйФайл();
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	ОбновитьДанныеПоНоменклатуреКлиент();

КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыНажатие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги недоступны для наборов'") 
		Или НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги доступны только для запасов'") Тогда
		Возврат
	КонецЕсли;
	
	ОснованиеОтбораСсылка = ТекущиеДанные.Номенклатура;
	
	Если Не ЗначениеЗаполнено(ОснованиеОтбораСсылка) Тогда Возврат КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НадписьАналогиНоменклатуры = НСтр("ru = 'Нет аналогов'") Тогда
		
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыАналогов", ЭтотОбъект, ПараметрыОповещения);
		
		СтруктураОтбора = Новый Структура("Номенклатура", ОснованиеОтбораСсылка);
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("РегистрСведений.АналогиНоменклатуры.Форма.ФормаДляНоменклатуры", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
		
	СтруктураЗакрытия = Новый Структура("Корзина, ТипОтбора, ОснованиеОтбораСсылка", Корзина, "Аналоги", ОснованиеОтбораСсылка);
	РазрешитьЗакрытие = Истина;
	Закрыть(СтруктураЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСопутствующийТоварНажатие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОснованиеОтбораСсылка = ТекущиеДанные.Номенклатура;
	
	Если Не ЗначениеЗаполнено(ОснованиеОтбораСсылка) Тогда Возврат КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НадписьСопутствующийТовар = НСтр("ru = 'Нет сопутствующих товаров'") Тогда
		
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыАналогов", ЭтотОбъект, ПараметрыОповещения);
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", ОснованиеОтбораСсылка, ТекущиеДанные.Характеристика);
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("РегистрСведений.СопутствующиеТовары.Форма.ФормаДляНоменклатуры", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	РазрешитьЗакрытие = Истина;
	
	СтруктураЗакрытия = Новый Структура("Корзина, ТипОтбора, ОснованиеОтбораСсылка, Характеристика", Корзина, "СопутствующиеТовары", ОснованиеОтбораСсылка, ТекущиеДанные.Характеристика);
	Закрыть(СтруктураЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент)
	Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость = Не Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость;
	Элементы.ДекорацияРазвернутьОтборы.Видимость = Не Элементы.ДекорацияРазвернутьОтборы.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость = Не Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость;
	Элементы.ДекорацияРазвернутьОтборы.Видимость = Не Элементы.ДекорацияРазвернутьОтборы.Видимость;
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура Отложить(Команда)
	
	ОтложитьНаСервере();
	РазрешитьЗакрытие = Истина;
	Закрыть("КорзинаОтложена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Корзина.Очистить();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокумент(Команда)

	СписокДокументов = Новый СписокЗначений;
	
	ПараметрыОповещения = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборДокумента", ЭтаФорма, ПараметрыОповещения);
	
	Если ПолныеПрава Тогда
		
		СписокДокументов.Добавить("СчетНаОплату", НСтр("ru = 'Счет на оплату'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если ИспользоватьПодсистемуРаботы Тогда
			СписокДокументов.Добавить("ЗаказНаряд", НСтр("ru = 'Заказ-наряд'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("РасходнаяНакладная", НСтр("ru = 'Расходная накладная'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("АктВыполненныхРабот", НСтр("ru = 'Акт выполненных работ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если УчетРозничныхПродаж Тогда
			СписокДокументов.Добавить("ЧекККМ", НСтр("ru = 'Чек ККМ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"),,БиблиотекаКартинок.РазделЗакупки);
		СписокДокументов.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"),,БиблиотекаКартинок.РазделЗакупки);
		
		ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элементы.ОформитьДокумент);
		Возврат;
	КонецЕсли;
	
	Если ДоступноСозданиеДокументовРазделаЗакупки Тогда
		СписокДокументов.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"),,БиблиотекаКартинок.РазделЗакупки);
		СписокДокументов.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"),,БиблиотекаКартинок.РазделЗакупки);
	КонецЕсли;
	
	Если ДоступноСозданиеДокументовРазделаПродажи Тогда
		
		СписокДокументов.Добавить("СчетНаОплату", НСтр("ru = 'Счет на оплату'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если ИспользоватьПодсистемуРаботы Тогда
			СписокДокументов.Добавить("ЗаказНаряд", НСтр("ru = 'Заказ-наряд'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("РасходнаяНакладная", НСтр("ru = 'Расходная накладная'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("АктВыполненныхРабот", НСтр("ru = 'Акт выполненных работ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если УчетРозничныхПродаж Тогда
			СписокДокументов.Добавить("ЧекККМ", НСтр("ru = 'Чек ККМ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокДокументов.Количество() Тогда
		ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элементы.ОформитьДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	ОформитьДокументСТоварамиИзКорзины(ТипДокументаПоУмолчанию);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтложитьНаСервере()
	
	ИмяКлючаОбъекта = "КорзинаНоменклатура";
	
	СтрокаНастроек = ЗначениеВСтрокуВнутр(Корзина.Выгрузить());
	ТекстОтложено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отложено: %1 на сумму %2 %3'"),
		Корзина.Итог("Количество"),
		Формат(Корзина.Итог("Сумма"),"ЧДЦ=2; ЧН=0"),
		?(ЗначениеЗаполнено(ВалютаПредставление),ВалютаПредставление,"")
		);
	
	ОписаниеНастройки = ТекстОтложено + Символы.ПС + Новый УникальныйИдентификатор;
	
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяКлючаОбъекта, ОписаниеНастройки, СтрокаНастроек);
	Корзина.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодбор()
	
	СтруктураЗакрытия = Новый Структура("Корзина, ПеренестиВДокумент", Корзина, ПеренестиВДокумент);
	Закрыть(СтруктураЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокумента(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТипДокументаПоУмолчанию = Результат.Значение;
	
	ОформитьДокументСТоварамиИзКорзины(ТипДокументаПоУмолчанию);
	
	ОбновитьЗаголовокКнопкиСозданияДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СтрокаНастроек = "ТипДокументаПоУмолчанию,ИнформацияПоНоменклатуреСвернута";
	
	ИмяКлючаОбъекта = "КорзинаНоменклатуры";
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
	Для каждого Элемент Из МассивНастроек Цикл
		ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта+"_" + Элемент, ЭтаФорма[Элемент]);
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		ИмяФормы,
		"ВключаяВложенные",
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	СтрокаНастроек = "ТипДокументаПоУмолчанию,ИнформацияПоНоменклатуреСвернута";
	
	ИмяКлючаОбъекта = "КорзинаНоменклатуры";
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек);
	Для каждого Элемент Из МассивНастроек Цикл
		Значение = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + Элемент);
		Если Значение=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ЭтаФорма[Элемент] = Значение;
	КонецЦикла;
	
	Если ИнформацияПоНоменклатуреСвернута И Корзина.Количество() Тогда
		Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость = Не Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость;
		Элементы.ДекорацияРазвернутьОтборы.Видимость = Не Элементы.ДекорацияРазвернутьОтборы.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКнопкиСозданияДокумента()
	
	Если Не ЗначениеЗаполнено(ТипДокументаПоУмолчанию) Тогда
		ТипДокументаПоУмолчанию = "ЗаказПокупателя";
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Заказ покупателя'");
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказПокупателя" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Заказ покупателя'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "СчетНаОплату" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Счет на оплату'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказНаряд" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Заказ-наряд'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "РасходнаяНакладная" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Расходная накладная'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "АктВыполненныхРабот" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Акт выполненных работ'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказПоставщику" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Заказ поставщику'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ПриходнаяНакладная" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Приходная накладная'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЧекККМ" Тогда
		Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Чек ККМ'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументСТоварамиИзКорзины(ТипДокумента)
	
	ОткрытыеОкна = ПолучитьОкна();
	
	ТаблицаПодчиненныхФорм.Очистить();
	
	СоответствиеИмениФормыТипуДокумента = Новый Соответствие;
	
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказНаряд","Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказПокупателя","Документ.ЗаказПокупателя.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("СчетНаОплату","Документ.СчетНаОплату.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("РасходнаяНакладная","Документ.РасходнаяНакладная.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("АктВыполненныхРабот","Документ.АктВыполненныхРабот.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЧекККМ","Документ.ЧекККМ.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказПоставщику","Документ.ЗаказПоставщику.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ПриходнаяНакладная","Документ.ПриходнаяНакладная.Форма.ФормаДокумента");
	
	ИмяФормыСоздаваемогоДокумента = СоответствиеИмениФормыТипуДокумента.Получить(ТипДокумента);
	
	Для Каждого ОткрытаяФорма Из ОткрытыеОкна Цикл
		
		Если ОткрытаяФорма.Содержимое.Количество() И ОткрытаяФорма.Содержимое[0].ВладелецФормы = ЭтаФорма.ВладелецФормы Тогда
			ИмяТекФормы = ОткрытаяФорма.Содержимое[0].ИмяФормы;
			
			Если ИмяФормыСоздаваемогоДокумента = ИмяТекФормы Тогда
				НоваяСтрока = ТаблицаПодчиненныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОткрытаяФорма.Содержимое[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ТаблицаПодчиненныхФорм.Количество()> 1 Тогда
		
		ТаблицаПодчиненныхФорм.Сортировать("ДатаДокумента Возр");
		
		СписокВыбора = Новый СписокЗначений;
		
		СчетчикФорм = 1;
		
		СписокВыбора.Добавить(Неопределено, НСтр("ru='Создать документ'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Для Каждого ЭлементТаблицы Из ТаблицаПодчиненныхФорм Цикл
			
			ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(ЭлементТаблицы.УникальныйИдентификатор);
			
			КонтрагентФормы = ?(ЗначениеЗаполнено(ОткрытаяФорма.Объект.Контрагент),Строка(ОткрытаяФорма.Объект.Контрагент) + "; ", "");
			ДатаФормы = Строка(ЭлементТаблицы.ДатаДокумента) + "; ";
			Автор = ?(ЗначениеЗаполнено(ОткрытаяФорма.Объект.Автор), "("+Строка(ОткрытаяФорма.Объект.Автор) + ");", "");
			
			СписокВыбора.Добавить(ЭлементТаблицы.УникальныйИдентификатор, НСтр("ru='Добавить в открытый документ'") + " " + Строка(СчетчикФорм) + " " + НСтр("ru='от'")+ " " + ДатаФормы + КонтрагентФормы + Автор);
			СчетчикФорм = СчетчикФорм + 1;
			
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура("ТипДокумента", ТипДокумента);
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФормы", ЭтаФорма, СтруктураПараметров);
		ПоказатьВыборИзМеню(ОповещениеВыбора, СписокВыбора, Элементы.СоздатьДокумент);
		
		Возврат;
	ИначеЕсли ТаблицаПодчиненныхФорм.Количество()=1 Тогда
		
		ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(ТаблицаПодчиненныхФорм[0].УникальныйИдентификатор);
		
		Если Не ОткрытаяФорма = Неопределено Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			
			ПараметрыОповещения = Новый Структура("ТипДокумента, ОткрытаяФорма", ТипДокумента, ОткрытаяФорма);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДобавитьВДокумент", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru='Добавить позиции в открытый документ?'"), Режим, 0);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма.ВладелецФормы,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораФормы(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	УИД = Результат.Значение;
	ТипДокумента = ПараметрыОповещения.ТипДокумента;
	
	Если УИД = Неопределено Тогда
		
		НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма.ВладелецФормы, Новый УникальныйИдентификатор, Истина);
		
		Возврат;
	КонецЕсли;
	
	ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(УИД);
	
	СтруктураЗаполненияДокументаИОшибки = НоменклатураВДокументахКлиент.ПолучитьСтруктуруЗаполнения(ЭтаФорма, ТипДокумента);
	
	СтруктураЗаполненияДокумента = СтруктураЗаполненияДокументаИОшибки.СтруктураЗаполнения;
	МассивСообщенийОбОшибках = СтруктураЗаполненияДокументаИОшибки.МассивСообщенийОбОшибках;
	
	СтруктураДанныеТаблиц = СтруктураДанныеТаблицДокумента(ТипДокумента, СтруктураЗаполненияДокумента);
	
	НаименованиеОповещения = НСтр("ru='ОбновлениеФормы'") + ТипДокумента;
	
	Оповестить(НаименованиеОповещения,СтруктураДанныеТаблиц, ОткрытаяФорма.УникальныйИдентификатор);
	
	ОткрытаяФорма.Активизировать();
	
	Для Каждого стрОшибка Из МассивСообщенийОбОшибках Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(стрОшибка);
	КонецЦикла;
	
	ЭтаФорма.ПеренестиВДокумент = Истина;
	ЭтаФорма.Закрыть();
	
	ТаблицаПодчиненныхФорм.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДобавитьВДокумент(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытаяФорма = ПараметрыОповещения.ОткрытаяФорма;
		ТипДокумента = ПараметрыОповещения.ТипДокумента;
		
		СтруктураЗаполненияДокументаИОшибки = НоменклатураВДокументахКлиент.ПолучитьСтруктуруЗаполнения(ЭтаФорма, ТипДокумента);
		
		СтруктураЗаполненияДокумента = СтруктураЗаполненияДокументаИОшибки.СтруктураЗаполнения;
		МассивСообщенийОбОшибках = СтруктураЗаполненияДокументаИОшибки.МассивСообщенийОбОшибках;
		
		СтруктураДанныеТаблиц = СтруктураДанныеТаблицДокумента(ТипДокумента, СтруктураЗаполненияДокумента);
		
		НаименованиеОповещения = НСтр("ru='ОбновлениеФормы'") + ТипДокумента;
		
		Оповестить(НаименованиеОповещения,СтруктураДанныеТаблиц, ОткрытаяФорма.УникальныйИдентификатор);
		
		ОткрытаяФорма.Активизировать();
		
		Для Каждого стрОшибка Из МассивСообщенийОбОшибках Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(стрОшибка);
		КонецЦикла;
		
		ТаблицаПодчиненныхФорм.Очистить();
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТипДокумента = ПараметрыОповещения.ТипДокумента;
		НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма.ВладелецФормы, Новый УникальныйИдентификатор, Истина);
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПеренестиВДокумент = Истина;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныеТаблицДокумента(ТипДокумента, ДанныеЗаполнения)
	
	СоответствиеТиповДокументаНаименованию = Новый Соответствие;
	
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказНаряд","ЗаказПокупателя");
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказПокупателя","ЗаказПокупателя");
	СоответствиеТиповДокументаНаименованию.Вставить("СчетНаОплату","СчетНаОплату");
	СоответствиеТиповДокументаНаименованию.Вставить("РасходнаяНакладная","РасходнаяНакладная");
	СоответствиеТиповДокументаНаименованию.Вставить("АктВыполненныхРабот","АктВыполненныхРабот");
	СоответствиеТиповДокументаНаименованию.Вставить("ЧекККМ","ЧекККМ");
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказПоставщику","ЗаказПоставщику");
	СоответствиеТиповДокументаНаименованию.Вставить("ПриходнаяНакладная","ПриходнаяНакладная");
	
	ДокументОбъект = Документы[СоответствиеТиповДокументаНаименованию.Получить(ТипДокумента)].СоздатьДокумент();
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	СтруктураДанныеТаблиц = Новый Структура;
	
	Для Каждого ТабличнаяЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		
		Если Не ДокументОбъект[ИмяТабличнойЧасти].Количество() Тогда Продолжить КонецЕсли;
		
		МассивСтрок = Новый Массив;
		
		КолонкиТЧ = ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
		
		Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			
			Для Каждого КолонкаТЧ Из КолонкиТЧ.Колонки Цикл
				СтруктураДанныхСтроки.Вставить(КолонкаТЧ.Имя,);
			КонецЦикла;
			СтруктураДанныхСтроки.Вставить("ЭтоНабор",);
			СтруктураДанныхСтроки.Вставить("ТипНоменклатуры",);
			
			ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, СтрокаТЧ);
			СтруктураДанныхСтроки.ЭтоНабор = СтрокаТЧ.Номенклатура.ЭтоНабор;
			СтруктураДанныхСтроки.ТипНоменклатуры = СтрокаТЧ.Номенклатура.ТипНоменклатуры;
			МассивСтрок.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		СтруктураДанныеТаблиц.Вставить(ИмяТабличнойЧасти, МассивСтрок);
		
	КонецЦикла;
	
	Возврат СтруктураДанныеТаблиц;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПоНоменклатуреКлиент()
	
	Если Элементы.Корзина.ТекущиеДанные = Неопределено Тогда 
		НадписьАналогиНоменклатуры = "";
		НадписьСопутствующийТовар = "";
		Изображения.Очистить();
		АдресКартинки = "";
		Если Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость Тогда
			Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость = Ложь;
		КонецЕсли;
		Возврат 
	КонецЕсли;
	
	Номенклатура = Элементы.Корзина.ТекущиеДанные.Номенклатура;
	Характеристика = Элементы.Корзина.ТекущиеДанные.Характеристика;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда Возврат КонецЕсли;
	Если Не ПоказыватьКартинку И Не ПоказыватьАналоги И Не ПоказыватьСопутствующиеТовары Тогда Возврат КонецЕсли;
	Если Не Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Видимость Тогда Возврат КонецЕсли;

	НадписьЗаголовокНоменклатуры = Строка(Номенклатура);
	
	ТекущийНомерИзображения = 0;
	АдресКартинки = "";
	
	Изображения.Очистить();
	ОбновитьДанныеПоНоменклатуреСервер(Номенклатура, Характеристика);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение(Номенклатура)
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Номенклатура, Файлы);
	ОснованияКартинка = Номенклатура.ФайлКартинки;
	
	Для каждого Файл Из Файлы Цикл
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		
		Если НЕ ОтображатьФайлНаФорме(Номенклатура, Файл) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованияКартинка) И Не Файл = ОснованияКартинка Тогда
			Продолжить
		ИначеЕсли ЗначениеЗаполнено(ОснованияКартинка) И Файл = ОснованияКартинка Тогда
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = Файл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
			Прервать
		Иначе
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = Файл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Изображения.Количество() Тогда
		АдресКартинки = Изображения[Изображения.Количество() - 1].Адрес
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоНоменклатуреСервер(Номенклатура, Характеристика = Неопределено)
	
	// Изображения
	Если ПоказыватьКартинку Тогда
		ОбновитьИзображение(Номенклатура);
	КонецЕсли;
	
	// Сопутствующие товары
	Если ПоказыватьСопутствующиеТовары Тогда
		
		ТекстЗаголовка = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Количество,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопутствующиеТовары.СопутствующийТовар) КАК КоличествоПозиций,
		|	МАКСИМУМ(СопутствующиеТовары.СопутствующийТовар.ЕдиницаИзмерения.Наименование) КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО СопутствующиеТовары.СопутствующийТовар = ОстаткиТоваров.Номенклатура
		|			И СопутствующиеТовары.Характеристика = ОстаткиТоваров.Характеристика
		|ГДЕ
		|	СопутствующиеТовары.Номенклатура = &Номенклатура
		|	И СопутствующиеТовары.Характеристика = &Характеристика";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.КоличествоПозиций = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'Нет сопутствующих товаров'");
			Иначе
				ТекстСопТовар = ПредметИсчисления(
				Выборка.КоличествоПозиций,
				НСтр("ru = 'сопутствующий товар'"),
				НСтр("ru = 'сопутствующих товара'"),
				НСтр("ru = 'сопутствующих товаров'"),
				"м");
				
				ТекстЗаголовка = НСтр("ru = '%1% / %2%'");
				
				ТекстКоличество = ?(Не ЗначениеЗаполнено(Выборка.Количество), "0", Строка(Выборка.Количество));
				
				ТекстСопТовар = Строка(Выборка.КоличествоПозиций) + ТекстСопТовар;
				
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", ТекстКоличество  + ?(Выборка.КоличествоПозиций = 1, " " + Выборка.ЕдиницаИзмерения, НСтр("ru = ' ед.'")));
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", ТекстСопТовар);
					
				КонецЕсли;
				
			КонецЕсли;
			
			НадписьСопутствующийТовар = ТекстЗаголовка;
			
		КонецЕсли;
	
	// Аналоги
	
	Если ПоказыватьАналоги Тогда
		
		Если Номенклатура.ЭтоНабор Тогда 
			НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги недоступны для наборов'");
			Возврат;
		КонецЕсли;
		
		ТекстЗаголовка = "";
		
		Если Не Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги доступны только для запасов'");
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	АналогиНоменклатуры.Аналог КАК Аналог,
			|	АналогиНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
			|ПОМЕСТИТЬ ВТОбщая
			|ИЗ
			|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
			|ГДЕ
			|	АналогиНоменклатуры.Номенклатура = &Номенклатура
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АналогиНоменклатуры.Номенклатура,
			|	АналогиНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование
			|ИЗ
			|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
			|ГДЕ
			|	АналогиНоменклатуры.Аналог = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВТОбщая.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
			|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Количество,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТОбщая.Аналог) КАК КоличествоПозиций
			|ПОМЕСТИТЬ Итог
			|ИЗ
			|	ВТОбщая КАК ВТОбщая
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
			|		ПО ВТОбщая.Аналог = ОстаткиТоваров.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Итог.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
			|	СУММА(Итог.Количество) КАК Количество,
			|	СУММА(Итог.КоличествоПозиций) КАК КоличествоПозиций
			|ИЗ
			|	Итог КАК Итог";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если Выборка.КоличествоПозиций = 0 Тогда
					
					ТекстЗаголовка = НСтр("ru = 'Нет аналогов'");
					
				Иначе
					
					ТекстАналоги = ПредметИсчисления(
					Выборка.КоличествоПозиций,
					НСтр("ru = 'aналог'"),
					НСтр("ru = 'аналога'"),
					НСтр("ru = 'аналогов'"),
					"м");
					
					ТекстЗаголовка = НСтр("ru = '%1% / %2%'");
					
					ТекстКоличество = ?(Не ЗначениеЗаполнено(Выборка.Количество), "0", Строка(Выборка.Количество));
					
					ТекстАналоги = Строка(Выборка.КоличествоПозиций) + ТекстАналоги;
					
					ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", ТекстКоличество + ?(Выборка.КоличествоПозиций = 1, " " + Выборка.ЕдиницаИзмерения, НСтр("ru = ' ед.'")));
					ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", ТекстАналоги); 
					
				КонецЕсли;
				
			КонецЕсли;
			
			НадписьАналогиНоменклатуры = ТекстЗаголовка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьФайлНаФорме(Номенклатура, ПрисоединенныйФайл, ПроверятьПометкуУдаления = Истина)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла,ПометкаУдаления,Расширение");
	
	Если ПроверятьПометкуУдаления И СвойстваФайла.ПометкаУдаления
		ИЛИ СвойстваФайла.ВладелецФайла <> Номенклатура
		ИЛИ ДопустимыеРасширения.Найти(СвойстваФайла.Расширение) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Файл = Изображения[0].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если Изображения.Количество() Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы.Корзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОбъектСсылка = Элементы.Корзина.ТекущиеДанные.Номенклатура;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
		
		РаботаСФайламиКлиент.ДобавитьФайлы(ОбъектСсылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаКлиенте
Процедура ПослеЗакрытияФормыАналогов(Результат, ПараметрыОповещения) Экспорт
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
КонецПроцедуры

&НаСервере
Функция ПредметИсчисления(Число, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2, ПараметрыПредметаИсчисления3, Род)
	
	ФорматнаяСтрока = "Л = ru_RU";
	
	ПараметрыПредметаИсчисления = "%1,%2,%3,%4,,,,,0";
	ПараметрыПредметаИсчисления = СтрШаблон(
	ПараметрыПредметаИсчисления,
	ПараметрыПредметаИсчисления1,
	ПараметрыПредметаИсчисления2,
	ПараметрыПредметаИсчисления3,
	Род);
	
	ЧислоСтрокойИПредметИсчисления = НРег(ЧислоПрописью(Число, ФорматнаяСтрока, ПараметрыПредметаИсчисления));
	
	ЧислоПрописью = НРег(СокрЛП(СтрЗаменить(ЧислоПрописью(Число),"00","")));
	
	ПредметИсчисления = СтрЗаменить(ЧислоСтрокойИПредметИсчисления, ЧислоПрописью, "");
	
	Возврат ПредметИсчисления;
	
КонецФункции

#КонецОбласти
