
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)Тогда
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(Объект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	ИзменитьВысотуЗаголовковДополнительныхРеквизитов();
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаНоменклатуры(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаРаботаСНоменклатурой);
	
	ДоступенСервисРаботаСНоменклатурой = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") И РаботаСНоменклатурой.ПравоИзмененияДанных();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеНоменклатурыСервиса", "АвтоМаксимальнаяШирина", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеНоменклатурыСервиса", "МаксимальнаяШирина", 35);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	ПрочитатьНастройкиФормы();
	// Прослеживаемость
	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
	
	ВидСтавкиНДСПоУмолчанию                 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина);
	ФОИспользоватьПодсистемуПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	ФОУчетАлкогольнойПродукции           = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ФОИспользуютсяНаборы                 = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	ФОИспользуютсяСертификаты            = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ФОУчетВЕТИС                          = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	ИспользуетсяМаркировка               = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	ФОИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	ЗаполнитьКэшЗначенийПервичнымиЗначениями();
	
	ОповеститьПодбор = Ложь;
	ЭлементМодифицирован = Ложь;
	ДиаграммаЦеныПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	
	ЗаполнитьРеквизитыПравДоступа();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ПустаяСтрока(Параметры.ТекстЗаполнения) И ФормироватьНаименованиеПолноеАвтоматически Тогда
			Объект.НаименованиеПолное = Параметры.ТекстЗаполнения;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(Объект);
			
			Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
			ИначеЕсли Не ЗначениеЗаполнено(Объект.ВидСтавкиНДС) Тогда
				Объект.ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина);
			КонецЕсли;
		Иначе
			ИсточникКопирования = Параметры.ЗначениеКопирования;
			ЗаполнитьПараметрыКопирования();
		КонецЕсли;
		
		Если Параметры.Свойство("Отбор") Тогда
			ЗаполнитьОбъектПоПереданнымОтборам();
		КонецЕсли;
		
		Если Параметры.Свойство("ПодконтрольнаяПродукцияВЕТИС") И Параметры.ПодконтрольнаяПродукцияВЕТИС Тогда
			ЗаполнитьОбъектПродукцияВЕТИС();
		КонецЕсли;
		
		Если Параметры.Свойство("АлкогольнаяПродукцияЕГАИС") И ЗначениеЗаполнено(Параметры.АлкогольнаяПродукцияЕГАИС) Тогда
			ЗаполнитьОбъектАлкогольнаяПродукция();
		КонецЕсли;
		
		ЗаполнитьСписокТипов();
		
		ЗаполнитьЗначенияОбъектаПоУмолчанию();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Области = Новый Массив;
		Области.Добавить("АктуальныеЦены");
		Области.Добавить("Остатки");
		// получаем цены и остатки без фонового задания, если диаграммы на форме отключены
		ПолучитьДанныеФормы(Области, Ложь);
		
		Если Элементы.Найти("ЦеноваяГруппа") <> Неопределено Тогда
			
			ОтображениеПодсказкиЦеновыхГрупп = ?(Элементы.ЦеноваяГруппа.ТолькоПросмотр, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦеноваяГруппа", "ОтображениеПодсказки", ОтображениеПодсказкиЦеновыхГрупп);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ТипНоменклатуры = Объект.ТипНоменклатуры;
	ТипНоминала = Объект.ПроизвольныйНоминал;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНоменклатурой", "Доступность", РазрешеноРедактированиеНоменклатуры);
	Элементы.ПереключательСпособРасчетаСтоимости.ТолькоПросмотр = НЕ РазрешеноРедактированиеНоменклатуры;
	
	Элементы.АктуальныеЦены.Видимость = РазрешенПросмотрЦен;
	Элементы.ТекущиеОстатки.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	УправлениеВидимостьюДиаграмм();
	
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы();
	
	ДобавитьПросмотрИзображений();
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Шаблоны наименований
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Объект.Наименование, Объект.НаименованиеПолное);
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ДинамикаПродаж.ОтображатьЗаголовок = Истина;
		Элементы.ДинамикаЦен.ОтображатьЗаголовок = Истина;
		Элементы.Остатки.АвтоМаксимальнаяШирина = Истина;
		Элементы.Остатки.МаксимальнаяШирина = 0;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.КатегорияНоменклатуры.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.СозданиеДополнительныхРеквизитов.Видимость = Ложь;
		Элементы.СвернутыеГруппы.Видимость = Ложь;
		Элементы.НедействительнаРастяжение.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Элементы.ВидСтавкиНДС.РежимВыбораИзСписка = Истина;
	Элементы.ВидСтавкиНДС.СписокВыбора.Очистить();
	СоответствиеСтавок = Справочники.СтавкиНДС.СоответствиеСтавокНДС(ТекущаяДатаСеанса());
	Для Каждого ЗначениеСоответствия Из СоответствиеСтавок Цикл
		Если ЗначениеЗаполнено(ЗначениеСоответствия.Значение) Тогда
			Элементы.ВидСтавкиНДС.СписокВыбора.Добавить(ЗначениеСоответствия.Ключ,
				Строка(ЗначениеСоответствия.Значение));
		КонецЕсли;
	КонецЦикла;
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Элементы.ВидСтавкиНДС.Видимость И (Объект.ВидСтавкиНДС
		= ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая") Или Объект.ВидСтавкиНДС
		= ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ОбщаяРасчетная"));
		
	// Позиционирование на реквизите при открытии
	Если Параметры.Свойство("РеквизитПозиционирования") Тогда
		РеквизитПозиционирования = Параметры.РеквизитПозиционирования;
		Если РеквизитПозиционирования.ДопРеквизит = Ложь Тогда
			НайденоеСвойствоФормы = Элементы.Найти(РеквизитПозиционирования.ИмяРеквизитаОбъекта);
			Если Не НайденоеСвойствоФормы = Неопределено И НайденоеСвойствоФормы.Видимость Тогда 
				ЭтаФорма.ТекущийЭлемент = НайденоеСвойствоФормы
			КонецЕсли;
		Иначе
			ПараметрыПоиска = Новый Структура("Наименование", РеквизитПозиционирования.ИмяРеквизитаОбъекта);
			НайденныйРеквизит = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыПоиска);
			Если НайденныйРеквизит.Количество() Тогда
				НайденоеСвойствоФормы = Элементы.Найти(НайденныйРеквизит[0].ИмяРеквизитаЗначение);
				Если Не НайденоеСвойствоФормы = Неопределено И НайденоеСвойствоФормы.Видимость Тогда 
					ЭтаФорма.ТекущийЭлемент = НайденоеСвойствоФормы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СозданКопированием = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	УстановитьНастройкиКонтроляДублей();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодМедицинскогоИзделия", "Доступность", Объект.СредствоИндивидуальнойЗащиты);
	
	// Обмен с сайтом
	ОтображатьКнопкуСортировкиНаФорме = ОбменССайтомПовтИсп.ОтображатьКнопкуСортировкиНаФорме();
	Элементы.АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте.Видимость = ОтображатьКнопкуСортировкиНаФорме;
	Элементы.АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайтеДоп.Видимость = ОтображатьКнопкуСортировкиНаФорме;
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	ЗаполнитьКэшЗначенийПервичнымиЗначениями();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьЗначенияПоУмолчанию(Истина);
	КонецЕсли;
	
	УправлениеФормой();
	НастроитьГруппуМаркировки();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПоказыватьГрафикиПродажИЦен Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗаданиеОбновитьДиаграммы", 0.1, Истина);
	КонецЕсли;
	
	// ВЕТИС
	Если ФОУчетВЕТИС Тогда
		СгенерироватьШаблонНаименованияПартии(Неопределено);
	КонецЕсли;
	// Конец ВЕТИС
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена"
		И Параметр Тогда
		
		ПодключитьОбработчикОжидания("ОбработкаОповещенияЗаписьВРегистреЦенКлиент", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")) Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка
			ИЛИ НЕ Параметр.Свойство("ВладелецФайла") Тогда
			
			ОбновитьПросмотрИзображений(Источник);
			
			Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
				И НЕ ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
				
				Если ТипЗнч(Источник) = Тип("Массив") Тогда
					ИзображениеДляПроверки = Источник[0];
				Иначе
					ИзображениеДляПроверки = Источник;
				КонецЕсли;
				Строки = Изображения.НайтиСтроки(Новый Структура("Ссылка", ИзображениеДляПроверки));
				Если Строки.Количество() <> 0 Тогда
					УстановитьИзображениеОсновнымСервер(ИзображениеДляПроверки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменилисьСчетаНоменклатуры" И Источник = Объект.Ссылка Тогда
		
		Объект.СчетУчетаЗапасов = Параметр.СчетУчетаЗапасов;
		Объект.СчетУчетаЗатрат = Параметр.СчетУчетаЗатрат;
		Объект.СчетУчетаДоходов = Параметр.СчетУчетаДоходов;
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Справочник.КатегорииНоменклатуры.СозданиеКатегорииИзКлассификатора" Тогда
		
		Объект.КатегорияНоменклатуры = Параметр;
		КатегорияНоменклатурыПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ШаблоныНаименований" Тогда // Шаблоны наименований
		
		ШаблоныНаименованийКлиент.ОбработкаОповещенияШаблоныНаименованийПослеЗаписи(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЗаписьШтрихКода" И Параметр.Номенклатура = Объект.Ссылка Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ШтрихКод) Или Параметр.ПерезаписатьЗначениеШтрихКодаВНоменклатуре Тогда
			Объект.ШтрихКод = Параметр.ШтрихКод;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Наборы
	Если ИмяСобытия = НаборыКлиент.ИмяСобытияЗаписанСоставаНабора() 
		И Параметр = Объект.Ссылка Тогда
		
		ПодключитьОбработчикОжидания("ОбработкаОповещенияИзменениеСоставаНабораКлиент", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = НаборыКлиент.ИмяСобытияИзменениеСоставаНабора() 
		И Параметр = Объект.Ссылка Тогда
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = НаборыКлиент.ИмяСобытияИзменениеРеквизитовНабора() И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("Номенклатура") И Параметр.Номенклатура = Объект.Ссылка Тогда
		
		Объект.ЭтоНабор = Параметр.ЭтоНабор;
		Объект.СпособРасчетаЦеныНабора = Параметр.СпособРасчетаЦеныНабора;
		Объект.ВариантПечатиНабора = Параметр.ВариантПечатиНабора;
		Если Объект.ЭтоНабор Тогда
			Объект.ИспользоватьСерииНоменклатуры = Ложь;
			Объект.ИспользоватьПартии = Ложь;
			Объект.СпособПополнения = Неопределено;
			Объект.Поставщик = Неопределено;
			Объект.Изготовитель = Неопределено;
		Иначе
			Объект.СпособРасчетаЦеныНабора = Неопределено;
			Объект.ВариантПечатиНабора = Неопределено;
			Если НЕ ЗначениеЗаполнено(Объект.СпособПополнения) Тогда
				Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка");
			КонецЕсли; 
		КонецЕсли;
		Модифицированность = Истина;
		
		УправлениеФормой();
		ПодключитьОбработчикОжидания("ОбработкаОповещенияИзменениеСоставаНабораКлиент", 0.5, Истина);
		
	КонецЕсли; 
	//Конец Наборы
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.ПрослеживаемыйТовар
		И (ЗначениеЗаполнено(Объект.ТоварнаяНоменклатураВЭД))
		И Объект.ВесПоСертификатуТовара = 0
		И КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		
		ЕдиницаПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТоварнаяНоменклатураВЭД, "ЕдиницаИзмерения");
		КодОКЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаПрослеживаемости, "Код");
		
		Если ЕдиницаПрослеживаемости <> Объект.ЕдиницаИзмерения И КодОКЕИ = "166" Тогда
			
			СообщениеОбОшибке = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Вес из сертификата'"));
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, , "ВесПоСертификатуТовара", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Модифицированность Тогда
		ЭлементМодифицирован = Истина;	
	КонецЕсли;
	
	Если ПроигнорированоСообщениеОДублях Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоЗаписьДубля");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СообщениеОДублированииИнформации", СообщениеОДублированииИнформации);
	КонецЕсли;
	
	ПроигнорированоСообщениеОДублях = Ложь;
	СообщениеОДублированииИнформации = "";
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Шаблоны наименований
	ШаблоныНаименований.ЗапомнитьШаблоныДляВидовНаименований(ЭтотОбъект, Объект.КатегорияНоменклатуры);
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если ЭлементМодифицирован Тогда
		ОповеститьПодбор = Истина;
		ЭлементМодифицирован = Ложь;
	КонецЕсли;
	
	Элементы.СерииГИСМ.Доступность = Истина;
	
	КопироватьСвязаннуюИнформацию();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПослеЗаписиОбъекта(Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Код");
	
	УправлениеФормой();
	
	// Наборы
	Если ЭтоНаборБезРаспределенияЦен(Объект) Тогда
		Если НЕ Элементы.ДинамикаЦен.Видимость И РазрешенПросмотрЦен Тогда
			Элементы.ДинамикаЦен.Видимость = Истина;
		КонецЕсли; 
		ПодключитьОбработчикОжидания("ОбработкаОповещенияЗаписьВРегистреЦенКлиент", 0.5, Истина);		
	КонецЕсли; 
	// Конец Наборы
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	Оповестить("Запись_Номенклатура", Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СозданКопированием Тогда
			
			КонтрольПоДублям = Истина;
			
			ПроверитьНоменклатуруНаДублиСервер(КонтрольПоДублям);
			
			Если КонтрольПоДублям Тогда
				Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 49);
				ПоказатьСообщениеОДублях();
				Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 100);
			КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ДублиАртикул.Видимость
		ИЛИ Элементы.ДублиНаименование.Видимость
		ИЛИ Элементы.ДублиНаименованиеПолное.Видимость Тогда
		ПоказатьПредупреждениеОДублях();
		Отказ = Истина;
	КонецЕсли;
	
	// Наборы
	Если Объект.ЭтоНабор И НЕ МожноИзменитьПризнакНабора(Объект.Ссылка, Объект.ЭтоНабор) Тогда
		Объект.СпособРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.ПустаяСсылка");
		Объект.ВариантПечатиНабора = ПредопределенноеЗначение("Перечисление.ВариантыПечатиНаборов.ПустаяСсылка");
		ОповеститьОбИзмененииРеквизитовНабора();
	КонецЕсли; 
	// Конец Наборы
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("СправочникНоменклатураЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если Не Отказ
		И ТребуетсяКопированиеДополнительныхДанных()
		И Не НастройкиКопированияЗаданы Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЕстьЕдиницыИзмеренияВОбъектеКопирования", ЕстьЕдиницыИзмеренияВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования", ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования И Объект.ИспользоватьХарактеристики);
		ПараметрыФормы.Вставить("ЕстьСпецификацииВОбъектеКопирования", ЕстьСпецификацииВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьКомплектацииВОбъектеКопирования", ЕстьКомплектацииВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьСоставыНаборовВОбъектеКопирования", ЕстьСоставыНаборовВОбъектеКопирования И Объект.ЭтоНабор);
		ПараметрыФормы.Вставить("ИсточникКопирования", ИсточникКопирования);
		Оповещение = Новый ОписаниеОповещения("КопироватьДополнительныеДанныеЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаНастройкиКопированияНоменклатуры", ПараметрыФормы,ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОповеститьПодбор 
		И ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И ВладелецФормы.ИмяФормы = "ОбщаяФорма.ФормаПодбора" Тогда
		Оповестить("ОбновитьПодбор", Истина);
	// РМК
	ИначеЕсли ОповеститьПодбор 
		И ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 Тогда
		Оповестить("ДобавленаНоменклатураИзРМК", Объект.Ссылка);
	КонецЕсли;
	// Конец РМК
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПередЗакрытиемФормыНоменклатуры(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПродукцииИСПриИзменении(Элемент)
	
	УстановитьПризнакПодакцизныйТовар();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Наименование");
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее"));
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати"));
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	ПроверитьНаДубли("Наименование");
	ПроверитьНаДубли("НаименованиеПолное", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиНаименованиеНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиНаименованиеПолноеНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	
	ПараметрыДублей.Вставить("НаименованиеПолное", НаименованиеПолноеДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Объект.Наименование, Объект.НаименованиеПолное);
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
	ПроверитьНаДубли("НаименованиеПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Наименование <> Элементы.Наименование.ТекстРедактирования Тогда
		
		Объект.Наименование = Элементы.Наименование.ТекстРедактирования;
		НаименованиеПриИзменении(Элементы.Наименование);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.НаименованиеПолное <> Элементы.НаименованиеПолное.ТекстРедактирования Тогда
		
		Объект.НаименованиеПолное = Элементы.НаименованиеПолное.ТекстРедактирования;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеПолноеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	// Наборы
	Если Объект.ЭтоНабор И НЕ ЭтоЗапас() И НЕ ЭтоРабота() Тогда
		Объект.ЭтоНабор = Ложь;
		Объект.СпособРасчетаЦеныНабора = Неопределено;
		Объект.ВариантПечатиНабора = Неопределено;
		ОповеститьОбИзмененииРеквизитовНабора();
	КонецЕсли;
	// Конец Наборы
	
	Если НЕ ЭтоЗапас() Тогда
		Объект.СпособПополнения = ?(Не ЗначениеЗаполнено(Объект.СпособПополнения), 
			ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка"), 
			Объект.СпособПополнения);
		
		Объект.Производитель = Неопределено;
		Объект.СтранаПроисхождения = Неопределено;
		Объект.ПодакцизныйТовар = Ложь;
		Объект.ЕдиницаДляОтчетов = Неопределено;
		
	КонецЕсли;
	
	// Подарочные сертификаты
	Если ЭтоСертификат() Тогда
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ИспользоватьПартии = Ложь;
		Объект.ИсключитьИзПрайсЛистов = Истина;
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	Если ЗначениеЗаполнено(ИсточникКопирования) Тогда
		// При изменениии типа номенклатуры копирование связаной информации не выполняется
		НастройкиКопированияЗаданы = Истина;
	КонецЕсли;
	
	ТипНоменклатурыПриИзмененииСервер();
	
	УправлениеФормой();
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма);
	
КонецПроцедуры // ТипНоменклатурыПриИзменении()

&НаСервере
Процедура ТипНоменклатурыПриИзмененииСервер()
	
	Если (ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации")
		И Объект.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Операция)
		ИЛИ Объект.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа Тогда
		Объект.ФиксированнаяСтоимость = Константы.РасчетСтоимостиОперацийПоНормеВремени.Получить()=Перечисления.ДаНет.Нет;
	Иначе
		Объект.ФиксированнаяСтоимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Склад.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СкладОткрытие()

&НаКлиенте
Процедура КатегорияНоменклатурыПриИзменении(Элемент)
		
	КатегорияНоменклатурыПриИзмененииНаСервере();
	
	Если Объект.ТипНоменклатуры <> ТипНоменклатуры Тогда
		УправлениеФормой();
	ИначеЕсли ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КатегорияНоменклатурыПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры();
		ЗаполнитьРеквизитыПодконтрольнойПродукцииПоКатегорииНоменклатуры();
		ЗаполнитьРеквизитыГИСМПоКатегорииНоменклатуры();
		ЗаполнитьРеквизитыИСМППоКатегорииНоменклатуры();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		ТипНоменклатуры = Объект.ТипНоменклатуры;
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(Объект);
		Если Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатуры) = Неопределено Тогда
			Объект.ТипНоменклатуры = Элементы.ТипНоменклатуры.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Шаблоны наименований
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное
	);
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСпособРасчетаСтоимостиПриИзменении(Элемент)
	
	Если ПереключательСпособРасчетаСтоимости = "Фиксированная стоимость" Тогда
		Объект.ФиксированнаяСтоимость = Истина;
	Иначе
	    Объект.ФиксированнаяСтоимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	
	Если ФОУчетАлкогольнойПродукции Тогда
		Если Объект.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.СтранаПроисхождения) Тогда
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "СтранаПроисхождения");
	ОбновитьНаименования();
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ЗакупкаИПроизводство");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодакцизныйТоварПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "УчетнаяИнформация");
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Артикул");
	ОбновитьНаименования();
	
	ПроверитьНаДубли("Артикул");
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиАртикулНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	
	ПараметрыДублей.Вставить("Артикул", АртикулДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Код");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Поставщик");
	ОбновитьНаименования();
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ЗакупкаИПроизводство");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ЗакупкаИПроизводство");
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНовинкаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокДействияФлагаНовинка", "Доступность", Объект.ЭтоНовинка);
	Если НЕ Объект.ЭтоНовинка Тогда
		
		Объект.ЭтоНовинка = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаголовокЗначенияЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВидЦенСсылка = ЦенаПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	Строки = АктуальныеЦены.НайтиСтроки(Новый Структура("ВидЦен", ВидЦенСсылка));
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ЗаголовокЗначенияЦенОбработкаНавигационнойСсылкиНаСервере(ВидЦенСсылка, Строки[0].Период, Строки[0].Цена);
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.Форма.ФормаЗаписи", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокЗначенияЦенОбработкаНавигационнойСсылкиНаСервере(ВидЦен, Период, Цена)
	
	Если НачалоДня(Период) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",         Период);
		СтруктураПараметров.Вставить("Номенклатура",   Объект.Ссылка);
		СтруктураПараметров.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураПараметров.Вставить("ВидЦен",         ВидЦен);
		Ключ = РегистрыСведений.ЦеныНоменклатуры.ПолучитьКлючЗаписи(СтруктураПараметров);
		КлючЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьКлючЗаписи(Ключ);
		ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
		
		Возврат ПараметрыОткрытия;
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ВидЦен", ВидЦен);
		
		Возврат ПараметрыОткрытия;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВидМаркировкиПриИзменении(Элемент)
	НастроитьГруппуМаркировки();
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ГИСМ");
	УстановитьНастройкиСерийПоУмолчаниюГИСМ();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиПриИзменении(Элемент)
	
	УправлениеФормой();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВесовойПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура НоминалПриИзменении(Элемент)
	
	Если Не МожноИзменитьПараметрСертификата("Номинал") Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСрокаДействияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоминалаПриИзменении(Элемент)
	
	Если Не МожноИзменитьПараметрСертификата() Тогда
		ТипНоминала = Объект.ПроизвольныйНоминал;
		Возврат;
	КонецЕсли;
	
	Объект.ПроизвольныйНоминал = ТипНоминала;
	Если Объект.ПроизвольныйНоминал Тогда
		Объект.Номинал = 0;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноеПогашениеПриИзменении(Элемент)
	
	Если Не МожноИзменитьПараметрСертификата("ЧастичноеПогашение") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	
	// Подарочные сертификаты
	Если ЭтоСертификат() Тогда
		Если Не МожноИзменитьПараметрСертификата("ИспользоватьСерииНоменклатуры") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ИспользоватьСерииНоменклатуры Тогда
		Объект.ЧастичноеПогашение = Ложь;
		Объект.ПроизвольныйНоминал = Ложь;
		ТипНоминала = 0;
		Объект.ТипСрокаДействия = ?(Объект.ТипСрокаДействия = ПредопределенноеЗначение("Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи"),
									ПредопределенноеЗначение("Перечисление.СрокДействияПодарочныхСертификатов.БезОграниченияСрока"), Объект.ТипСрокаДействия);
	КонецЕсли;
	// Конец Подарочные сертификаты
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовПриИзменении(Элемент)
	ЕдиницаДляОтчетовПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ЕдиницаДляОтчетовПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов) Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	Иначе
		Объект.КоэффициентЕдиницыДляОтчетов = Объект.ЕдиницаДляОтчетов.Коэффициент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Для выбора единицы измерения для отчетов необходимо записать элемент.'"));
		Возврат;
	КонецЕсли;
		
	ЗначениеОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыОткрытияФормы = Новый Структура("Отбор, ВыборЕдиницыХранения", ЗначениеОтбора, Истина);
	
	ОткрытьФорму("Справочник.ЕдиницыИзмерения.ФормаВыбора", ПараметрыОткрытияФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодконтрольнаяПродукцияВЕТИСПриИзменении(Элемент)
	
	УправлениеФормой();
	СгенерироватьШаблонНаименованияПартии(Элемент);
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "Ветис");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартииПриИзменении(Элемент)
	
	Если Объект.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии Тогда
		
		Элементы.ГруппаДатыПроизводства.Доступность = Истина;
		Элементы.ГруппаСрокаГодности.Доступность = Истина;
		
	Иначе
		
		Элементы.ГруппаДатыПроизводства.Доступность = Ложь;
		Элементы.ГруппаСрокаГодности.Доступность = Ложь;
		Объект.ИспользоватьДатуПроизводстваПартии = Ложь;
		Объект.ИспользоватьСрокГодностиПартии = Ложь;
		
	КонецЕсли;
	
	СгенерироватьШаблонНаименованияПартии(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьШаблонНаименованияПартии(Элемент)
	
	Элементы.ГруппаПараметровВЕТИС.Подсказка = ИнтеграцияВЕТИСУНФКлиент.СгенерироватьШаблонНаименованияПартии(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСтавкиНДСПриИзменении(Элемент)
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая")
		ИЛИ Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ОбщаяРасчетная");
		
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "УчетнаяИнформация");
КонецПроцедуры

&НаКлиенте
Процедура ЦеноваяГруппаExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "УчетнаяИнформация"); 
КонецПроцедуры

&НаКлиенте
Процедура МетодОценкиПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "УчетнаяИнформация");
КонецПроцедуры

&НаКлиенте
Процедура ВидАлкогольнойПродукцииПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "АлкогольнаяПродукция");
	УстановитьПризнакПодакцизныйТовар();
КонецПроцедуры

&НаКлиенте
Процедура СпособПополненияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ЗакупкаИПроизводство");
	УстановитьВидимостьПриИзмененииСпособаПополнения(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзготовительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСтруктурныхЕдиниц(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораСтруктурныхЕдиниц(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтруктурныхЕдиниц(Элемент)
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет"));
	МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));

	СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", МассивОтбора);
	ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", СтруктураОтбора, Истина);
	
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаСписка", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "Хранение");
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "Хранение");
КонецПроцедуры

&НаКлиенте
Процедура ЦеноваяГруппаПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "ПрайсЛист");
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "Табак");
КонецПроцедуры

&НаКлиенте
Процедура ОбувнаяПродукцияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтаФорма, "Обувь");
КонецПроцедуры

&НаКлиенте
Процедура СредствоИндивидуальнойЗащитыПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодМедицинскогоИзделия", "Доступность", Объект.СредствоИндивидуальнойЗащиты);
КонецПроцедуры

&НаКлиенте
Процедура КодМедицинскогоИзделияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКодаВидаНоменклатурнойКлассификацииЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.КодВидаНоменклатурнойКлассификации",, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаВидаНоменклатурнойКлассификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.КодМедицинскогоИзделия = Результат.КодВидаНоменклатурнойКлассификации;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяНоменклатураВЭДПриИзменении(Элемент)
	
	ТоварнаяНоменклатураВЭДПриИзмененииСервер();
	УстановитьВидимостьПриИзмененииТНВЭД();
	
КонецПроцедуры

&НаСервере
Процедура ТоварнаяНоменклатураВЭДПриИзмененииСервер()
	
	Объект.ПрослеживаемыйТовар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТоварнаяНоменклатураВЭД, "ПрослеживаемыйТовар", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесИзСертификатаПриИзменении(Элемент)
	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
КонецПроцедуры

&НаКлиенте
Процедура ЭтоАгентскаяУслугаПриИзменении(Элемент)
	
	УправлениеФормой();
	Если Объект.ЭтоАгентскаяУслуга Тогда
		Элементы.ГруппаУчетнаяИнформация.Показать();
		Элементы.ГруппаЗакупкаПроизводство.Показать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДиаграмм

&НаКлиенте
Процедура ДиаграммаЦеныПериодЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ДиаграммаЦеныПериод;
	Описание = Новый ОписаниеОповещения("ДиаграммаЦеныПериодЗаголовокНажатиеЗавершение", ЭтотОбъект);
	Диалог.Показать(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныПериодЗаголовокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиаграммаЦеныПериодЗаголовокНажатиеЗавершениеНаСервере(Результат);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныПериодЗаголовокНажатиеЗавершениеНаСервере(Результат)
	
	ДиаграммаЦеныПериод = Результат;
	ПодходящаяПериодичность = ПодходящаяПериодичность(Результат.ДатаНачала, Результат.ДатаОкончания);
	ДиаграммаЦеныУстановитьПериодичность(ПодходящаяПериодичность);
	
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	ПолучитьДанныеФормы("ДиаграммаЦены", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиПериодЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ДиаграммаПродажиПериод;
	Описание = Новый ОписаниеОповещения("ДиаграммаПродажиПериодЗаголовокНажатиеЗавершение", ЭтотОбъект);
	Диалог.Показать(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиПериодЗаголовокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиаграммаПродажиПериодЗаголовокНажатиеЗавершениеНаСервере(Результат);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиПериодЗаголовокНажатиеЗавершениеНаСервере(Результат)
	
	ДиаграммаПродажиПериод = Результат;
	ПодходящаяПериодичность = ПодходящаяПериодичность(Результат.ДатаНачала, Результат.ДатаОкончания);
	ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	ПолучитьДанныеФормы("ДиаграммаПродажи", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачала = Расшифровка.Период;
	Периодичность = Расшифровка.Периодичность;
	ДиаграммаПродажиОбработкаРасшифровкиНаСервере(ДатаНачала, Периодичность);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиОбработкаРасшифровкиНаСервере(ДатаНачала, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		ДатаОкончания = КонецНедели(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		ДатаОкончания = КонецКвартала(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		ДатаОкончания = КонецГода(ДатаНачала);
	КонецЕсли;
	
	ДиаграммаПродажиПериод = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	ПодходящаяПериодичность = ПодходящаяПериодичность(ДатаНачала, ДатаОкончания);
	ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
	ПолучитьДанныеФормы("ДиаграммаПродажи", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиОбновить(Команда)
	
	Области = Новый Массив;
	Области.Добавить("ДиаграммаПродажи");
	Области.Добавить("Остатки");
	
	ПолучитьДанныеФормы(Области, Истина);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныОбновить(Команда)
	
	ДиаграммаЦеныПериод = Неопределено;
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	Области = Новый Массив;
	Области.Добавить("АктуальныеЦены");
	Области.Добавить("ДиаграммаЦены");
	
	ПолучитьДанныеФормы(Области, Истина);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Открывает форму записи новой цены.
//
&НаКлиенте
Процедура СоздатьНовуюЦену(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СозданиеЦеныПоказатьВопрос();
	Иначе
		СозданиеЦеныОткрытьФормуЗаписи();
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму создания доп. реквизита.
//
&НаКлиенте
Процедура СоздатьНовыйДопРеквизит(Команда)
	
	ПараметрыФормы = ПараметрыСозданияДопРеквизита();
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
		ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// Устанавливает основным выбранное изображение (будет показываться первым).
//
&НаКлиенте
Процедура УстановитьИзображениеОсновным(Команда)
	
	Если ТекущееИзображение < 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИзображениеОсновнымСервер(Изображения[ТекущееИзображение].Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если ТекущееИзображение < 0 Тогда
		Возврат
	КонецЕсли;
	
	ПрисоединенныйФайл = Изображения[ТекущееИзображение].Ссылка;
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл);
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_Файл", Новый Структура, ПрисоединенныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры // ПросмотретьИзображение()

&НаКлиенте
Процедура СерииГИСМ(Команда)
	ПараметрыОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбластьДействия(Команда)
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ЗаполнитьОграниченияСертификата", ЭтотОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВариантОграниченияСертификата", Объект.ВариантОграниченияСертификата);
	СтруктураПараметров.Вставить("СпособОграниченияСертификата", Объект.СпособОграниченияСертификата);
	СтруктураПараметров.Вставить("НоменклатураГруппыЦеновыеГруппы", Объект.НоменклатураГруппыЦеновыеГруппы);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОграниченийСертификата", СтруктураПараметров,,,,, ОповещениеПриЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемПоГабаритам(Команда)
	
	Объем = Объект.Длина * Объект.Ширина * Объект.Высота * 0.000001;
	
	Если Объем = 0 Тогда
		Объект.Объем = 0;
	Иначе
		Объект.Объем = Макс(Объем, 0.0001);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГрафикиПродажИЦен(Команда)
	
	ПоказыватьГрафикиПродажИЦен = Не ПоказыватьГрафикиПродажИЦен;
	Элементы.ФормаПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	УстановитьНастройкуФормы(НЕ ПоказыватьГрафикиПродажИЦен, "НеВыводитьОтчетыПоПродажамИЦенамВКарточкеНоменклатуры");
	
	Если ПоказыватьГрафикиПродажИЦен Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗаданиеОбновитьДиаграммы", 0.5, Истина);
	КонецЕсли;

	УправлениеВидимостьюДиаграмм();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНоменклатуруНаДубли(Команда)
	Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 49);
	ПроверитьНоменклатуруНаДублиСервер();
	Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 100);
	
	ПоказатьСообщениеОДублях();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСортировкаФайловНаСайте(Команда)
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВладелецФайлов" , Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СортировкаФайловДляСайта.Форма.ФормаНастройки" , ПараметрыОткрытияФормы , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	СтруктураОтбора = Новый Структура("ВладелецЕдиницыИзмерения", Объект.Ссылка);
	ПараметрыОтбора = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ИсторияИзмененийЕдиницИзмерения.ФормаСписка", ПараметрыОтбора, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УправлениеФормой()
	
	// Изображения
	Элементы.ПереключениеИзображений.Видимость = ЭтоЗапас() ИЛИ ЭтоУслуга() ИЛИ ЭтоРабота();
	Элементы.СоздатьНовуюЦену.Видимость = РазрешеноРедактированиеЦен И НЕ ЭтоСертификат() И НЕ ЭтоНаборБезРаспределенияЦен(Объект);
	
	// Единицы измерения
	Элементы.ЕдиницаДляОтчетов.Видимость = ЭтоЗапас();
	Элементы.ЕдиницаИзмерения.Заголовок = ?(ЭтоЗапас(), НСтр("ru='Ед. изм.
	|хранения'"), НСтр("ru='Ед. изм.'"));
	
	// ГруппаУчетнаяИнформация
	Элементы.ИспользоватьСерииНоменклатуры.Видимость = (ЭтоЗапас() ИЛИ ЭтоСертификат()) И НЕ Объект.ЭтоНабор;
	Элементы.НаправлениеДеятельности.Видимость = ЭтоЗапас() Или ЭтоУслуга() Или ЭтоРабота() ИЛИ ЭтоСертификат();
	Элементы.МетодОценки.Видимость = (ЭтоЗапас() ИЛИ ЭтоСертификат()) И НЕ Объект.ЭтоНабор;
	Элементы.СрокИсполненияЗаказа.Видимость = ЭтоЗапас() Или ЭтоУслуга() Или ЭтоРабота();
	Элементы.ВидСтавкиНДС.Видимость = ЭтоЗапас() Или ЭтоУслуга() Или ЭтоРабота() ИЛИ ЭтоСертификат();
	Элементы.ПереключательСпособРасчетаСтоимости.Видимость = (ЭтоРабота() ИЛИ ЭтоОперация()) И НЕ Объект.ЭтоНабор;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодакцизныйТовар", "Видимость", ЭтоЗапас());
	
	// набор не может быть весовым, как и весовой не может быть набором
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Весовой",	"Видимость",	ЭтоЗапас());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Весовой",	"Доступность",	НЕ Объект.ЭтоНабор);
	
	// ГруппаАлкогольнаяПродукция
	Элементы.ГруппаАлкогольнаяПродукция.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	// ++( ГосИС 1.1.1.12
	
	// ГруппаОбувнаяПродукция
	//Элементы.ГруппаИСМП.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	// ГруппаТабачнаяПродукция
	//Элементы.ГруппаТабачнаяПродукция.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	// ГруппаШиныИПокрышки
	//Элементы.ГруппаШиныИПокрышки.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	Элементы.ГруппаИСМП.Видимость = Ложь;
	Элементы.ГруппаТабачнаяПродукция.Видимость = Ложь;
	Элементы.ГруппаШиныИПокрышки.Видимость = Ложь;
	
	// ГруппаМаркировкаИСМП
	Элементы.ГруппаМаркировкаИСМП.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	// )++ ГосИС 1.1.1.12
	
	// ГруппаСредствоИндивидуальнойЗащиты
	Элементы.ГруппаСредствоИндивидуальнойЗащиты.Видимость = ЭтоЗапас() И НЕ Объект.ЭтоНабор;
	
	// ГруппаМаркировка
	Элементы.ГруппаМаркировка.Видимость = ЭтоЗапас() И ИспользуетсяМаркировка;
	
	// ГруппаВЕТИС
	Элементы.ГруппаВЕТИС.Видимость = ЭтоЗапас() И ФОУчетВЕТИС;
	Элементы.ГруппаПараметровВЕТИС.Доступность = Объект.ПодконтрольнаяПродукцияВЕТИС;
	Элементы.ГруппаСрокаГодности.Доступность	= Объект.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии;
	Элементы.ГруппаДатыПроизводства.Доступность	= Объект.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии;
	
	// ГруппаХранение
	Элементы.Склад.Видимость = ЭтоЗапас() ИЛИ ЭтоСертификат();
	Элементы.Ячейка.Видимость = (ЭтоЗапас() ИЛИ ЭтоСертификат()) И НЕ Объект.ЭтоНабор;
	
	// ГруппаПрайсЛист
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокДействияФлагаНовинка",	"Доступность",	Объект.ЭтоНовинка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НижняяГраницаОстатков",		"Доступность",	ЭтоЗапас());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВерхняяГраницаОстатков",	"Доступность",	ЭтоЗапас());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварнаяНоменклатураВЭД",	"Видимость",	ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НижняяГраницаОстатков",		"Видимость",	НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВерхняяГраницаОстатков",	"Видимость",	НЕ Объект.ЭтоНабор);
	
	// ГруппаОбъемИВес
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОбъемИВес", 			"Видимость", 	ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГабариты", 			"Видимость", 	ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СпособПополнения", 			"Видимость", 	ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	
	Если Объект.ТипНоменклатуры <> ТипНоменклатуры Тогда
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	// ГруппаЗакупкаПроизводство
	УстановитьВидимостьПриИзмененииСпособаПополнения(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтранаПроисхождения", "Видимость", ЭтоЗапас());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокПополнения", "Видимость", ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НормаВремени", "Видимость", ЭтоОперация());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГарантийныйСрок", "Видимость", ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыписыватьГарантийныйТалон", "Видимость", ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТолькоПоддержкаОстаткаПриРасчетеПотребностей", "Видимость", ЭтоЗапас() И НЕ Объект.ЭтоНабор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Производитель", "Видимость", ЭтоЗапас());
	
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Элементы.ВидСтавкиНДС.Видимость 
		И (Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая")
		ИЛИ Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ОбщаяРасчетная"));
	
	Если Объект.ФиксированнаяСтоимость = Истина Тогда
		ПереключательСпособРасчетаСтоимости = "Фиксированная стоимость";
	Иначе
		ПереключательСпособРасчетаСтоимости = "Норма времени";
	КонецЕсли;
	
	Элементы.СоздатьНовуюЦену.Видимость = РазрешеноРедактированиеЦен И НЕ ЭтоСертификат() И НЕ ЭтоНаборБезРаспределенияЦен(Объект);
	
	// Сертификаты
	Если ФОИспользуютсяСертификаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСертификаты",				"Видимость", ЭтоСертификат());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипНоминала",					"Доступность", Объект.ИспользоватьСерииНоменклатуры);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧастичноеПогашение",			"Доступность", Объект.ИспользоватьСерииНоменклатуры);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСрокПериод",				"Доступность", Объект.ИспользоватьСерииНоменклатуры);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Номинал",						"Доступность", Не Объект.ПроизвольныйНоминал);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаХарактеристикиПартии",	"Видимость", Не ЭтоСертификат());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончанияДействия",			"Видимость",
			Объект.ТипСрокаДействия = ПредопределенноеЗначение("Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Периодичность",					"Видимость",
			Объект.ТипСрокаДействия = ПредопределенноеЗначение("Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоличествоПериодовДействия",	"Видимость",
			Объект.ТипСрокаДействия = ПредопределенноеЗначение("Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПрайсЛист",				"Видимость", (Не ЭтоСертификат()) И РазрешенПросмотрЦен);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АктуальныеЦены",				"Видимость", (Не ЭтоСертификат()) И РазрешенПросмотрЦен);
		УстановитьНадписьНастроекСерийПриРаботеССертификатами();
	Иначе
		НайденныйТип = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
		Если НайденныйТип <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденныйТип);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСертификаты", "Видимость", Ложь);
	КонецЕсли;
	// Конец Сертификаты
	
	КолонкаИзображенияЦеныПустая = НЕ Элементы.ПереключениеИзображений.Видимость 
		И НЕ Элементы.АктуальныеЦены.Видимость 
		И НЕ Элементы.СоздатьНовуюЦену.Видимость;
	Элементы.ПраваяКолонкаДекорацияОтступ.Видимость = КолонкаИзображенияЦеныПустая;
	
	// Агентские услуги
	ЗаголовокГруппыЗакупки = ?(Объект.ЭтоАгентскаяУслуга, НСтр("ru='Поставщик услуги'"), НСтр("ru='Закупка и производство'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтоАгентскаяУслуга", "Видимость", ЭтоУслуга());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗакупкаПроизводство", "Заголовок", ЗаголовокГруппыЗакупки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Объект.ЭтоАгентскаяУслуга);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик", "АвтоОтметкаНезаполненного",Объект.ЭтоАгентскаяУслуга);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "АвтоОтметкаНезаполненного", Объект.ЭтоАгентскаяУслуга);
	// Конец Агентские услуги
	
	// Прослеживаемость
	УстановитьВидимостьЭлементовПрослеживаемости();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПриИзмененииСпособаПополнения(Форма, ИзменятьЗначения = Ложь)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоУслуга = (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Если Объект.ЭтоНабор 
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.СпособПополнения) И НЕ ЭтоУслуга) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик", "Видимость", Ложь); 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изготовитель", "Видимость", Ложь); 
		Если ИзменятьЗначения Тогда
			Объект.Поставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.Изготовитель = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЕсли; 
	ИначеЕсли Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка")
		ИЛИ Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Переработка")
		ИЛИ ЭтоУслуга Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик", "Видимость", Истина); 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изготовитель", "Видимость", Ложь); 
		Если ИзменятьЗначения Тогда
			Объект.Изготовитель = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЕсли; 
	ИначеЕсли Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик", "Видимость", Ложь); 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изготовитель", "Видимость", Истина); 
		Если ИзменятьЗначения Тогда
			Объект.Поставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДиаграмм()
	
	Элементы.ДинамикаПродаж.Видимость = ЗначениеЗаполнено(Объект.Ссылка) И ПоказыватьГрафикиПродажИЦен;
	Элементы.ДинамикаЦен.Видимость    = ЗначениеЗаполнено(Объект.Ссылка) И ПоказыватьГрафикиПродажИЦен;
	
	Элементы.ДиаграммаПродажиКонтекстноеМенюПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	Элементы.ДиаграммаЦеныКонтекстноеМенюПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов формы от опций
// Использовать подсистему Производство, Работы.
//
// Параметры:
//   Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы()
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		
		// Способ пополнения.
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
		
		// Склад. Установка способа выбора структурной единицы в зависимости от ФО.
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.Склад.РежимВыбораИзСписка = Истина;
			Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		КонецЕсли;
		
	Иначе
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
			МассивТипыСтруктурныхЕдиниц = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурныхЕдиниц);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Склад.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			Элементы.Склад.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Переработка.
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы()

// Процедура заполняет список доступных для выбора типов номенклатуры в зависимости 
// от параметров формы и функциональных опций
//
&НаСервере
Процедура ЗаполнитьСписокТипов()
	
	Список = Элементы.ТипНоменклатуры.СписокВыбора;
	
	ОграничениеТипаНоменклатуры = Неопределено;
	
	Если НЕ Параметры.ЗначенияЗаполнения.Свойство("ТипНоменклатуры", ОграничениеТипаНоменклатуры) Тогда
		Параметры.ДополнительныеПараметры.Свойство("ОграничениеТипа", ОграничениеТипаНоменклатуры);
	КонецЕсли;
	
	Если ОграничениеТипаНоменклатуры <> Неопределено Тогда
		Если (ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("Массив") Или ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ФиксированныйМассив")) 
			И ОграничениеТипаНоменклатуры.Количество() > 0 Тогда
			
			Список.Очистить();
			Для каждого Тип Из ОграничениеТипаНоменклатуры Цикл
				Список.Добавить(Тип);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			
			Список.Очистить();
			Список.Добавить(ОграничениеТипаНоменклатуры);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ВидРабот);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ВидРабот);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если ОграничениеТипаНоменклатуры <> Неопределено
		ИЛИ Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатуры) = Неопределено Тогда
		Объект.ТипНоменклатуры = Список.Получить(0).Значение;
	КонецЕсли;
	
	Если Список.Количество() = 1 Тогда
		Элементы.ТипНоменклатуры.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокТипов()

&НаКлиенте
Процедура НастроитьГруппуМаркировки()
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.СерииГИСМ.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.НеМаркируется") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Ложь;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Истина;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.МаркируемаяПродукция") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПрослеживаемости()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаПрослеживаемость", 
		"Видимость", 
		КэшЗначений.ВестиУчетПрослеживаемыхТоваров);
	
	УстановитьВидимостьПриИзмененииТНВЭД();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриИзмененииТНВЭД()
	
	Если Не КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		Возврат;
	КонецЕсли;
	
	// Прослеживаемость
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаПрослеживаемостьТНВЭД", 
		"Видимость", 
		Объект.ПрослеживаемыйТовар И Элементы.ТоварнаяНоменклатураВЭД.Видимость);
		
	// Вес товара по сертификату
	ПоказатьДополнительныеРеквизитыПоПрослеживаемости();
	
КонецПроцедуры

#КонецОбласти

#Область АктуальныеЦены

&НаКлиенте
Процедура СозданиеЦеныПоказатьВопрос()
	
	ТекстВопроса = НСтр("ru='Перед установлением цены необходимо записать объект. Записать?'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СозданиеЦеныОбработатьОтвет", ЭтотОбъект), ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЦеныОбработатьОтвет(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	СозданиеЦеныОткрытьФормуЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЦеныОткрытьФормуЗаписи()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.Форма.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуальныеЦеныУдалитьЭлементы()
	
	ЭлементыКУдалению = Новый Массив;
	
	Для каждого Элемент Из Элементы.АктуальныеЦены.ПодчиненныеЭлементы Цикл
		Если Элемент = Элементы.ДекорацияЦеныНеУстановлены Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыКУдалению.Добавить(Элемент);
	КонецЦикла;
	
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АналитикаОбработчикиКомандныхПанелей

&НаСервере
Процедура ДиаграммаПродажиСменаПериодичности(Периодичность)
	
	ДиаграммаПродажиУстановитьПериодичность(Периодичность);
	ПолучитьДанныеФормы("ДиаграммаПродажи", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоДням(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоНеделям(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоМесяцам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоКварталам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоГодам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Год);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныСменаПериодичности(Периодичность)
	
	ДиаграммаЦеныУстановитьПериодичность(Периодичность);
	ПолучитьДанныеФормы("ДиаграммаЦены", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоДням(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоНеделям(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоМесяцам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоКварталам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоГодам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Год);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоКоличеству(Команда)
	
	Элементы.ДиаграммаПродажиКоличество.Видимость = Истина;
	Элементы.ДиаграммаПродажи.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоСумме.Видимость = Истина;
	Элементы.ДиаграммаПродажиСрезПоКоличеству.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоСумме(Команда)
	
	Элементы.ДиаграммаПродажи.Видимость = Истина;
	Элементы.ДиаграммаПродажиКоличество.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоСумме.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоКоличеству.Видимость = Истина;
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения(Команда)
	
	ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмеренияНаСервере(Команда.Имя);
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмеренияНаСервере(КомандаИмя)
	
	ДиаграммаЦеныВыбратьЕдиницуИзмерения(КомандаИмя);
	ПолучитьДанныеФормы("ДиаграммаЦены", Истина);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДиаграммаЦеныУстановитьОтборПоВалюте(Команда)
	
	ДиаграммаЦеныУстановитьОтборПоВалютеНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныУстановитьОтборПоВалютеНаСервере(КомандаИмя)
	
	ДиаграммаЦеныВыбратьВалюту(КомандаИмя);
	ПолучитьДанныеФормы("ДиаграммаЦены", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Изображение

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РазрешеноРедактированиеНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееИзображение >= 0 Тогда
		ПросмотретьПрисоединенныйФайл();
	Иначе
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

&НаСервере
Функция ОтображатьФайлНаФорме(ПрисоединенныйФайл, ПроверятьПометкуУдаления = Истина)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла,ПометкаУдаления,Расширение");
	
	Если ПроверятьПометкуУдаления И СвойстваФайла.ПометкаУдаления
		ИЛИ СвойстваФайла.ВладелецФайла <> Объект.Ссылка
		ИЛИ ДопустимыеРасширения.Найти(СвойстваФайла.Расширение) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений(Знач ИзмененныеФайлы = Неопределено)
	
	ОбновитьПросмотрИзображений = (ИзмененныеФайлы = Неопределено);
	
	Если ИзмененныеФайлы <> Неопределено Тогда
		Если ТипЗнч(ИзмененныеФайлы) <> Тип("Массив") Тогда
			ИзмененныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзмененныеФайлы);
		КонецЕсли;
		
		Для каждого Файл Из ИзмененныеФайлы Цикл
			ОбновитьПросмотрИзображений = ОтображатьФайлНаФорме(Файл, Ложь);
			Если ОбновитьПросмотрИзображений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОбновитьПросмотрИзображений Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлКартинки, "ПометкаУдаления") Тогда
		Объект.ФайлКартинки = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
	
	ДобавитьПросмотрИзображений();
	СдвигИзображения(0);
	
КонецПроцедуры

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ Объект.ФайлКартинки.Пустая() Тогда
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = Объект.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если НЕ ОтображатьФайлНаФорме(Файл)
			ИЛИ Файл = Объект.ФайлКартинки Тогда
			Продолжить;
		КонецЕсли;
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изображения.Добавить();
		НоваяСтрока.Ссылка = Файл;
		НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
	КонецЦикла;
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	ОтображаемоеИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
	ОтображаемоеИзображение.ТекстНевыбраннойКартинки = Элементы.АдресКартинки.ТекстНевыбраннойКартинки;
	Если Изображения.Количество() = 0 Тогда
		ТекущееИзображение = -1;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	Иначе
		ТекущееИзображение = 0;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	КонецЕсли;
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдивиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Изображения[%1].Адрес", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
		НовоеИзображениеНомер = 1;
	Иначе
		ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.АвтоМаксимальнаяШирина = Ложь;
	НовоеИзображение.МаксимальнаяШирина = 21;
	НовоеИзображение.Высота = 7;
	НовоеИзображение.РастягиватьПоВертикали = Ложь;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	ТекущееИзображение = НомерЭлемента;
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте"],
	НовоеИзображение.КонтекстноеМеню);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюПросмотретьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУдалитьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюДобавитьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Если ТекущееИзображение < 0 Тогда
		Возврат
	КонецЕсли;
	
	Файл = Изображения[ТекущееИзображение].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

&НаСервере
Процедура ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл)
	
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
	ПрисоединенныйФайлОбъект.Записать();
	
	
	
КонецПроцедуры

// Процедура добавления изображения для номенклатуры
//
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ДобавитьИзображениеНаКлиентеФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИзображениеНаКлиенте()

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если Изображения.Количество() <= 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Ложь;
	КонецЕсли;
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ЭлементАдресКартинки = Элементы.Найти("АдресКартинки1");
	Если ЭлементАдресКартинки <> Неопределено Тогда
		ТекущийЭлемент = ЭлементАдресКартинки;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопок контекстного меню изображения.
//
&НаСервере
Процедура ИзображениеВидимостьКоманднойПанели()
	
	ЕстьИзображения = Изображения.Количество();
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюУдалитьИзображение.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюПросмотретьИзображение.Видимость = ЕстьИзображения;
	ЭтоОсновноеИзображение = Ложь;
	Если ЕстьИзображения Тогда
		ЭтоОсновноеИзображение = (Изображения[ТекущееИзображение].Ссылка = Объект.ФайлКартинки);
	КонецЕсли;
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка = ЭтоОсновноеИзображение;
	
	Элементы.АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте.Видимость = ОтображатьКнопкуСортировкиНаФорме И ЕстьИзображения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИзображениеОсновнымСервер(ПрисоединенныйФайл)
	
	ФайлКартинки = Неопределено;
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Массив") Тогда
		Для каждого Эл Из ПрисоединенныйФайл Цикл
			Если ОтображатьФайлНаФорме(Эл, Ложь) Тогда
				ФайлКартинки = Эл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОтображатьФайлНаФорме(ПрисоединенныйФайл, Ложь) Тогда
		ФайлКартинки = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если ФайлКартинки = Неопределено ИЛИ Объект.ФайлКартинки = ФайлКартинки Тогда
		Объект.ФайлКартинки = Неопределено;
	Иначе
		Объект.ФайлКартинки = ФайлКартинки;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

#КонецОбласти

#Область Аналитика

&НаСервере
Функция ОписаниеЗапросаАктуальныеЦены(Запрос, Области)
	
	РезультатФункции = Новый Структура;
	
	Если ФОИспользуютсяНаборы И ЭтоНаборБезРаспределенияЦен(Объект) Тогда
		ЗапросТекстАктуальныеЦены = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * СоставНабора.Количество / ВЫБОР
		|				КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|					ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ВалютаЦены,
		|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
		|ИЗ
		|	СоставНабора КАК СоставНабора
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекущаяДата,
		|				(Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							СоставНабора.Номенклатура,
		|							СоставНабора.Характеристика
		|						ИЗ
		|							СоставНабора)
		|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СоставНабора.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И СоставНабора.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен ЕСТЬ NULL
		|	И СоставНабора.ХарактеристикаНабора = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цена УБЫВ";
		ЗапросТекстАктуальныеЦеныНомерВПакете = 1;
	Иначе
		ЗапросТекстАктуальныеЦены = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекущаяДата,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цена УБЫВ";
		ЗапросТекстАктуальныеЦеныНомерВПакете = 1;
	КонецЕсли; 
	
	РезультатФункции.Вставить("ТекстЗапроса", ЗапросТекстАктуальныеЦены);
	РезультатФункции.Вставить("НомерВПакете", ЗапросТекстАктуальныеЦеныНомерВПакете);
	РезультатФункции.Вставить("Выводить", Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ОписаниеЗапросаДинамикаЦен(Запрос, Области)
	
	РезультатФункции = Новый Структура;
	ПериодЗадан = ЗначениеЗаполнено(ДиаграммаЦеныПериод);
	
	РазделительЗапросов = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ФОИспользуютсяНаборы И ЭтоНаборБезРаспределенияЦен(Объект) Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросНаборы = Новый Запрос;
		ЗапросНаборы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		// Состав набора
		ЗапросНаборы.УстановитьПараметр("Номенклатура", Объект.Ссылка);
		ЗапросНаборы.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СУММА(СоставНаборов.Количество * ВЫБОР
		|			КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА СоставНаборов.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ СоставНабора
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов
		|ГДЕ
		|	СоставНаборов.НоменклатураНабора = &Номенклатура
		|	И СоставНаборов.ХарактеристикаНабора = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И НЕ СоставНаборов.Общий
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставНаборов.Номенклатура,
		|	СоставНаборов.Характеристика";
		ЗапросНаборы.Выполнить();
		// Период по умолчанию
		Если НЕ ПериодЗадан Тогда
			ДиаграммаЦеныУстановитьПериодичность(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
			ЗапросНаборы.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период
			|ПОМЕСТИТЬ Периоды
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|ГДЕ
			|	(ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.Характеристика) В
			|			(ВЫБРАТЬ
			|				СоставНабора.Номенклатура,
			|				СоставНабора.Характеристика
			|			ИЗ
			|				СоставНабора КАК СоставНабора)
			|	И ЦеныНоменклатуры.Актуальность
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КОНЕЦПЕРИОДА(Периоды.Период, %ПериодДетализации%)) КАК ОкончаниеПериода,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(Периоды.Период, %ПериодДетализации%)) КАК НачалоПериода
			|ИЗ
			|	Периоды КАК Периоды";
			ЗапросНаборы.Текст = СтрЗаменить(ЗапросНаборы.Текст, "%ПериодДетализации%", ДиаграммаЦеныПериодичность);
			Выборка = ЗапросНаборы.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НачалоПериодаЗапроса = Выборка.НачалоПериода;
				ОкончаниеПериодаЗапроса = Выборка.ОкончаниеПериода;
			Иначе
				НачалоПериодаЗапроса = Неопределено;
				ОкончаниеПериодаЗапроса = Неопределено;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
				НачалоПериодаЗапроса = ДиаграммаЦеныПериод.ДатаНачала;
			Иначе
				НачалоПериодаЗапроса = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаОкончания) Тогда
				ОкончаниеПериодаЗапроса = ДиаграммаЦеныПериод.ДатаОкончания;
			Иначе
				ОкончаниеПериодаЗапроса = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НачалоПериодаЗапроса) Тогда
			ПериодСреза = НачалоДня(НачалоПериодаЗапроса)-1;
			ЗапросНаборы.УстановитьПараметр("ПериодСреза", ПериодСреза);
			ЗапросНаборы.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоставНабора.Номенклатура КАК Номенклатура,
			|	СоставНабора.Характеристика КАК Характеристика,
			|	СоставНабора.Количество КАК Количество
			|ИЗ
			|	СоставНабора КАК СоставНабора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоставНабора.Номенклатура КАК Номенклатура,
			|	СоставНабора.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Цена / ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
			|			ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Цена,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен
			|ИЗ
			|	СоставНабора КАК СоставНабора
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&ПериодСреза,
			|				(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						СоставНабора.Номенклатура,
			|						СоставНабора.Характеристика
			|					ИЗ
			|						СоставНабора КАК СоставНабора)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО СоставНабора.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И СоставНабора.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			|ИТОГИ ПО
			|	ВидЦен";
		Иначе
			ЗапросНаборы.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоставНабора.Номенклатура КАК Номенклатура,
			|	СоставНабора.Характеристика КАК Характеристика,
			|	СоставНабора.Количество КАК Количество
			|ИЗ
			|	СоставНабора КАК СоставНабора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ВидЦен
			|ГДЕ
			|	ЛОЖЬ
			|ИТОГИ ПО
			|	ВидЦен";
		КонецЕсли; 
		ЗапросНаборы.Текст = ЗапросНаборы.Текст + РазделительЗапросов;
		ЗапросНаборы.УстановитьПараметр("ДатаНачала", ?(ЗначениеЗаполнено(НачалоПериодаЗапроса), НачалоПериодаЗапроса, '0001-01-01'));
		ЗапросНаборы.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ОкончаниеПериодаЗапроса), ОкончаниеПериодаЗапроса, '3999-12-31'));
		ЗапросНаборы.Текст = ЗапросНаборы.Текст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период,
		|	СРЕДНЕЕ(ЦеныНоменклатуры.Цена / ВЫБОР
		|			КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Цена,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	(ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.Характеристика) В
		|			(ВЫБРАТЬ
		|				СоставНабора.Номенклатура,
		|				СоставНабора.Характеристика
		|			ИЗ
		|				СоставНабора КАК СоставНабора)
		|	И ЦеныНоменклатуры.Актуальность
		|	И ЦеныНоменклатуры.Период >= &ДатаНачала
		|	И ЦеныНоменклатуры.Период <= &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.ВидЦен,
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%),
		|	ЦеныНоменклатуры.Номенклатура,
		|	ЦеныНоменклатуры.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период,
		|	ВидЦен";
		ЗапросНаборы.Текст = СтрЗаменить(ЗапросНаборы.Текст, "%ПериодДетализации%", ДиаграммаЦеныПериодичность);
		РезультатЗапроса = ЗапросНаборы.ВыполнитьПакет();
		ВыборкаСостав = РезультатЗапроса.Получить(0).Выбрать();
		ВыборкаНачальныеЦеныВидЦен = РезультатЗапроса.Получить(1).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаЦеныПериод = РезультатЗапроса.Получить(2).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаЦен = Новый ТаблицаЗначений;
		ТаблицаЦен.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаЦен.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЦен.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ПредыдущиеЦены = Новый Соответствие;
		Если ВыборкаНачальныеЦеныВидЦен.Количество()>0 Тогда
			Пока ВыборкаНачальныеЦеныВидЦен.Следующий() Цикл
				ЦеныПоВидуЦен = ПредыдущиеЦены.Получить(ВыборкаНачальныеЦеныВидЦен.ВидЦен);
				Если ЦеныПоВидуЦен=Неопределено Тогда
					ЗаполнитьСоответствиеЦен(ПредыдущиеЦены, ВыборкаНачальныеЦеныВидЦен.ВидЦен, ВыборкаСостав);
					ЦеныПоВидуЦен = ПредыдущиеЦены.Получить(ВыборкаНачальныеЦеныВидЦен.ВидЦен);
				КонецЕсли;
				ВыборкаНачальныеЦеныНоменклатура = ВыборкаНачальныеЦеныВидЦен.Выбрать();
				Пока ВыборкаНачальныеЦеныНоменклатура.Следующий() Цикл
					ЦеныПоВидуЦен.Получить(ВыборкаНачальныеЦеныНоменклатура.Номенклатура).Вставить(ВыборкаНачальныеЦеныНоменклатура.Характеристика, ВыборкаНачальныеЦеныНоменклатура.Цена);
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериодаЗапроса) Тогда
			Для каждого ОписаниеЦен Из ПредыдущиеЦены Цикл
				ВидЦен = ОписаниеЦен.Ключ;
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					Продолжить;
				КонецЕсли; 
				ЦеныПоВидуЦен = ОписаниеЦен.Значение;
				ВыборкаСостав.Сбросить();
				Цена = 0;
				Пока ВыборкаСостав.Следующий() Цикл
					Цена = Цена+ВыборкаСостав.Количество*ЦеныПоВидуЦен.Получить(ВыборкаСостав.Номенклатура).Получить(ВыборкаСостав.Характеристика);	
				КонецЦикла;
				СтрЦен = ТаблицаЦен.Добавить();
				СтрЦен.Период = НачалоИнтервала(НачалоПериодаЗапроса, ДиаграммаЦеныПериодичность)-1;
				СтрЦен.ВидЦен = ВидЦен;
				СтрЦен.Цена = Цена;
			КонецЦикла;
		КонецЕсли;
		Пока ВыборкаЦеныПериод.Следующий() Цикл
			ВыборкаЦеныВидЦен = ВыборкаЦеныПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЦеныВидЦен.Следующий() Цикл
				ЦеныПоВидуЦен = ПредыдущиеЦены.Получить(ВыборкаЦеныВидЦен.ВидЦен);
				Если ЦеныПоВидуЦен=Неопределено Тогда
					ЗаполнитьСоответствиеЦен(ПредыдущиеЦены, ВыборкаЦеныВидЦен.ВидЦен, ВыборкаСостав);
					ЦеныПоВидуЦен = ПредыдущиеЦены.Получить(ВыборкаЦеныВидЦен.ВидЦен);
				КонецЕсли;
				ВыборкаЦеныНоменклатура = ВыборкаЦеныВидЦен.Выбрать();
				Пока ВыборкаЦеныНоменклатура.Следующий() Цикл
					ЦеныПоВидуЦен.Получить(ВыборкаЦеныНоменклатура.Номенклатура).Вставить(ВыборкаЦеныНоменклатура.Характеристика, ВыборкаЦеныНоменклатура.Цена);	
				КонецЦикла;
				ВыборкаСостав.Сбросить();
				Цена = 0;
				Пока ВыборкаСостав.Следующий() Цикл
					Цена = Цена+ВыборкаСостав.Количество*ЦеныПоВидуЦен.Получить(ВыборкаСостав.Номенклатура).Получить(ВыборкаСостав.Характеристика);	
				КонецЦикла;
				СтрЦен = ТаблицаЦен.Добавить();
				СтрЦен.Период = ВыборкаЦеныПериод.Период;
				СтрЦен.ВидЦен = ВыборкаЦеныВидЦен.ВидЦен;
				СтрЦен.Цена = Цена;
			КонецЦикла;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
		ЗапросТекстДинамикаЦен =
		"ВЫБРАТЬ
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ТаблицаЦен.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ТаблицаЦен.ВидЦен КАК ВидЦен,
		|	ВидыЦен.ВалютаЦены КАК ВалютаЦены
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО ТаблицаЦен.ВидЦен = ВидыЦен.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период";
		ЗапросТекстДинамикаЦенНомерВПакете = 2;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДиаграммаЦеныПериод) ИЛИ ЗначениеЗаполнено(Области) Тогда
			ЗапросТекстДинамикаЦен =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период,
			|	СРЕДНЕЕ(ЦеныНоменклатуры.Цена) КАК Цена,
			|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
			|	ЦеныНоменклатуры.ВидЦен.ВалютаЦены КАК ВалютаЦены
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|ГДЕ
			|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
			|	И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	И ЦеныНоменклатуры.Актуальность
			|	И &ДиаграммаЦеныДатаНачала
			|	И &ДиаграммаЦеныДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатуры.ВидЦен,
			|	ЦеныНоменклатуры.ВидЦен.ВалютаЦены,
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ ПО
			|	Период";
			ЗапросТекстДинамикаЦенНомерВПакете = 1;
		Иначе
			ДиаграммаЦеныУстановитьПериодичность(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
			ЗапросТекстДинамикаЦен = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период,
			|	СРЕДНЕЕ(ЦеныНоменклатуры.Цена) КАК Цена,
			|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
			|	ЦеныНоменклатуры.ВидЦен.ВалютаЦены КАК ВалютаЦены
			|ПОМЕСТИТЬ Цены
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|ГДЕ
			|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
			|	И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	И ЦеныНоменклатуры.Актуальность
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатуры.ВидЦен,
			|	ЦеныНоменклатуры.ВидЦен.ВалютаЦены,
			|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Цены.Период КАК Период,
			|	Цены.Цена,
			|	Цены.ВидЦен
			|ИЗ
			|	Цены КАК Цены
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ ПО
			|	Период";
			ЗапросТекстДинамикаЦенНомерВПакете = 2;
		КонецЕсли;
		
	КонецЕсли; 
	
	РезультатФункции.Вставить("ТекстЗапроса", ЗапросТекстДинамикаЦен);
	РезультатФункции.Вставить("НомерВПакете", ЗапросТекстДинамикаЦенНомерВПакете);
	РезультатФункции.Вставить("Выводить", Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ОписаниеЗапросаПродажи(Запрос, Области)
	
	РезультатФункции = Новый Структура;
	
	ЗапросПродаж = Истина;
	Если ФОИспользуютсяНаборы И Объект.ЭтоНабор Тогда
		Если ЗначениеЗаполнено(ДиаграммаПродажиПериод) Тогда
			ЗапросТекстДинамикаПродаж = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	%Период% КАК Период,
			|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
			|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
			|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
			|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДиаграммаПродажиДатаНачала, &ДиаграммаПродажиДатаОкончания, Авто, НоменклатураНабора = &Номенклатура) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	%Период%
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			ЗапросТекстДинамикаПродажНомерВПакете = 1;
		Иначе
			ЗапросПерваяПоследняяПродажа = Новый Запрос;
			ЗапросПерваяПоследняяПродажа.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Продажи.Период КАК Период
			|ИЗ
			|	РегистрНакопления.Продажи КАК Продажи
			|ГДЕ
			|	Продажи.НоменклатураНабора = &Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Продажи.Период КАК Период
			|ИЗ
			|	РегистрНакопления.Продажи КАК Продажи
			|ГДЕ
			|	Продажи.НоменклатураНабора = &Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
			ЗапросПерваяПоследняяПродажа.УстановитьПараметр("Номенклатура", Объект.Ссылка);
			
			Результат = ЗапросПерваяПоследняяПродажа.ВыполнитьПакет();
			
			ДатаНачала = Неопределено;
			ДатаОкончания = Неопределено;
			
			ВыборкаПерваяПродажа = Результат[0].Выбрать();
			Пока ВыборкаПерваяПродажа.Следующий() Цикл
				ДатаНачала = ВыборкаПерваяПродажа.Период;
			КонецЦикла;
			
			ВыборкаПоследняяПродажа = Результат[1].Выбрать();
			Пока ВыборкаПоследняяПродажа.Следующий() Цикл
				ДатаОкончания = ВыборкаПоследняяПродажа.Период;
			КонецЦикла;
			
			Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
				
				ДиаграммаПродажиПериод.ДатаНачала = ДатаНачала;
				ДиаграммаПродажиПериод.ДатаОкончания = ДатаОкончания;
				
				ПодходящаяПериодичность = ПодходящаяПериодичность(ДатаНачала, ДатаОкончания);
				ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
				
				Запрос.УстановитьПараметр("ПродажиДатаНачала", НачалоИнтервала(ДатаНачала, ПодходящаяПериодичность));
				Запрос.УстановитьПараметр("ПродажиДатаОкончания", КонецИнтервала(ДатаОкончания, ПодходящаяПериодичность));
				
				ЗапросТекстДинамикаПродаж = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%Период% КАК Период,
				|	0 КАК Количество,
				|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
				|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
				|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
				|ПОМЕСТИТЬ Продажи
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&ПродажиДатаНачала, &ПродажиДатаОкончания, Авто, НоменклатураНабора = &Номенклатура) КАК ПродажиОбороты
				|
				|СГРУППИРОВАТЬ ПО
				|	%Период%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.РасходнаяНакладная.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(-ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.ПриходнаяНакладная.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.АктВыполненныхРабот.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И ДобавленныеНаборы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыоперацийЗаказПокупателя.ЗаказНаряд)
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.ЧекККМ.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И НЕ ДобавленныеНаборы.Ссылка.Архивный
				|	И ДобавленныеНаборы.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПериодДокумента%,
				|	СУММА(ДобавленныеНаборы.Количество),
				|	0,
				|	0,
				|	0
				|ИЗ
				|	Документ.ЧекККМВозврат.ДобавленныеНаборы КАК ДобавленныеНаборы
				|ГДЕ
				|	ДобавленныеНаборы.НоменклатураНабора = &Номенклатура
				|	И ДобавленныеНаборы.Ссылка.Проведен
				|	И НЕ ДобавленныеНаборы.Ссылка.Архивный
				|	И ДобавленныеНаборы.Ссылка.НомерЧекаККМ > 0
				|	И ДобавленныеНаборы.Ссылка.Дата МЕЖДУ &ПродажиДатаНачала И &ПродажиДатаОкончания
				|
				|СГРУППИРОВАТЬ ПО
				|	%ПериодДокумента%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Продажи.Период,
				|	СУММА(Продажи.Количество) КАК Количество,
				|	СУММА(Продажи.Выручка) КАК Выручка,
				|	СУММА(Продажи.Себестоимость) КАК Себестоимость,
				|	СУММА(Продажи.ВаловаяПрибыль) КАК ВаловаяПрибыль
				|ИЗ
				|	Продажи КАК Продажи
				|
				|СГРУППИРОВАТЬ ПО
				|	Продажи.Период
				|
				|УПОРЯДОЧИТЬ ПО
				|	Продажи.Период";
				ЗапросТекстДинамикаПродажНомерВПакете = 2;
			Иначе
				ЗапросПродаж = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДиаграммаПродажиПериод) Тогда
			ЗапросТекстДинамикаПродаж = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	%Период% КАК Период,
			|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
			|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
			|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
			|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДиаграммаПродажиДатаНачала, &ДиаграммаПродажиДатаОкончания, Авто, Номенклатура = &Номенклатура) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	%Период%
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			ЗапросТекстДинамикаПродажНомерВПакете = 1;
		Иначе
			ЗапросПерваяПоследняяПродажа = Новый Запрос;
			ЗапросПерваяПоследняяПродажа.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Продажи.Период КАК Период
			|ИЗ
			|	РегистрНакопления.Продажи КАК Продажи
			|ГДЕ
			|	Продажи.Номенклатура = &Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Продажи.Период КАК Период
			|ИЗ
			|	РегистрНакопления.Продажи КАК Продажи
			|ГДЕ
			|	Продажи.Номенклатура = &Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
			ЗапросПерваяПоследняяПродажа.УстановитьПараметр("Номенклатура", Объект.Ссылка);
			
			Результат = ЗапросПерваяПоследняяПродажа.ВыполнитьПакет();
			
			ДатаНачала = Неопределено;
			ДатаОкончания = Неопределено;
			
			ВыборкаПерваяПродажа = Результат[0].Выбрать();
			Пока ВыборкаПерваяПродажа.Следующий() Цикл
				ДатаНачала = ВыборкаПерваяПродажа.Период;
			КонецЦикла;
			
			ВыборкаПоследняяПродажа = Результат[1].Выбрать();
			Пока ВыборкаПоследняяПродажа.Следующий() Цикл
				ДатаОкончания = ВыборкаПоследняяПродажа.Период;
			КонецЦикла;
			
			Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
				
				ДиаграммаПродажиПериод.ДатаНачала = ДатаНачала;
				ДиаграммаПродажиПериод.ДатаОкончания = ДатаОкончания;
				
				ПодходящаяПериодичность = ПодходящаяПериодичность(ДатаНачала, ДатаОкончания);
				ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
				
				Запрос.УстановитьПараметр("ПродажиДатаНачала", НачалоИнтервала(ДатаНачала, ПодходящаяПериодичность));
				Запрос.УстановитьПараметр("ПродажиДатаОкончания", КонецИнтервала(ДатаОкончания, ПодходящаяПериодичность));
				
				ЗапросТекстДинамикаПродаж = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%Период% КАК Период,
				|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
				|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
				|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
				|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
				|ПОМЕСТИТЬ Продажи
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&ПродажиДатаНачала, &ПродажиДатаОкончания, Авто, Номенклатура = &Номенклатура) КАК ПродажиОбороты
				|
				|СГРУППИРОВАТЬ ПО
				|	%Период%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Продажи.Период,
				|	Продажи.Количество,
				|	Продажи.Выручка,
				|	Продажи.Себестоимость,
				|	Продажи.ВаловаяПрибыль
				|ИЗ
				|	Продажи КАК Продажи
				|
				|УПОРЯДОЧИТЬ ПО
				|	Продажи.Период";
				
				ЗапросТекстДинамикаПродажНомерВПакете = 2;
			Иначе
				ЗапросПродаж = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
	РезультатФункции.Вставить("ТекстЗапроса", ЗапросТекстДинамикаПродаж);
	РезультатФункции.Вставить("НомерВПакете", ЗапросТекстДинамикаПродажНомерВПакете);
	РезультатФункции.Вставить("Выводить", ЗапросПродаж);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ОписаниеЗапросаОстатки(Запрос, Области)
	
	РезультатФункции = Новый Структура;
	
	ЗапросТекстОстатки = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	ОстаткиТоваров.Партия КАК Партия,
	|	СУММА(ОстаткиТоваров.Количество) КАК Остаток,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Номенклатура
	|	И (НЕ ОстаткиТоваров.Количество = 0
	|	ИЛИ НЕ ОстаткиТоваров.Резерв = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Партия,
	|	ОстаткиТоваров.СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика,
	|	СтруктурнаяЕдиница
	|ИТОГИ ПО
	|	Характеристика,
	|	СтруктурнаяЕдиница
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросТекстОстаткиНомерВПакете = 1;
	
	РезультатФункции.Вставить("ТекстЗапроса", ЗапросТекстОстатки);
	РезультатФункции.Вставить("НомерВПакете", ЗапросТекстОстаткиНомерВПакете);
	РезультатФункции.Вставить("Выводить", Истина);
	Возврат РезультатФункции;
	
КонецФункции

// Заполняет данными аналитические области.
// 
// Параметры:
//  Области - Массив       - Заполняет области, перечисленные в массиве
//  Области - Строка       - Заполняет одну область, переданную строкой.
//  Области - Неопределено - Заполняет все области.
//  Доступные области: АктуальныеЦены, ДиаграммаЦены, ДиаграммаПродажи, Остатки.
//
&НаСервере
Процедура ПолучитьДанныеФормы(Области = Неопределено, ВыполнитьВФоне = Истина)
	
	ПараметрыВывода = Новый Структура("Области", Области);
	
	ЗапросДиаграммы = СформироватьЗапрос(ПараметрыВывода);
	Если ПустаяСтрока(ЗапросДиаграммы.Запрос.Текст) Тогда
		// Нет данных для формирования
		Возврат;
	КонецЕсли; 
	РезультатЗапроса = ВыполнитьЗапросЦеныОстаткиДиаграммы(ЗапросДиаграммы.Запрос, ЗапросДиаграммы.ПараметрыВывода, ВыполнитьВФоне);
	Если ВыполнитьВФоне Тогда
		// результат будет получен в Подключаемый_ПроверитьЗавершениеДлительнойОперации
		Возврат;
	КонецЕсли;
	ОбновитьЦеныОстаткиДиаграммы(РезультатЗапроса, ЗапросДиаграммы.ПараметрыВывода);
	
КонецПроцедуры

// Герерирует надписи со значениями актуальных цен в группе АктуальныеЦены.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьАктуальныеЦены(Данные)
	
	СчитатьЦеныПоСоставу = ЭтоНаборБезРаспределенияЦен(Объект);
	
	ДиаграммаЦены.Очистить();
	АктуальныеЦены.Очистить();
	
	Цены = Данные.Выгрузить();
	Если Цены.Количество() = 0 Тогда
		Элементы.ДекорацияЦеныНеУстановлены.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияЦеныНеУстановлены.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтроки = Новый Массив;
	ФорматнаяСтрока = "";
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Цены.Колонки.Добавить("ЦенаВНациональнойВалюте");
	
	Для каждого Цена Из Цены Цикл
		Если Цена.ВалютаЦены <> НациональнаяВалюта Тогда
			Цена.ЦенаВНациональнойВалюте = ПересчитатьПоВыбраннойВалюте(Цена.ВалютаЦены, ТекущаяДатаСеанса(), Цена.Цена, НациональнаяВалюта);
		Иначе
			Цена.ЦенаВНациональнойВалюте = Цена.Цена;
		КонецЕсли;
	КонецЦикла;
	
	Цены.Сортировать("ЦенаВНациональнойВалюте Убыв");
	
	Итератор = 0;
	Для каждого Цена Из Цены Цикл
		
		НоваяСтрока = АктуальныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Цена);
		
		Цвет = ЦветВидаЦен(Цена.ВидЦен);
		
		Группа = Элементы.Добавить("ГруппаАктуальныеЦены" + ИтераторСтрокой(Итератор), Тип("ГруппаФормы"), Элементы.АктуальныеЦены);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ПредставлениеЦены = Строка(Цена.ВидЦен);
		
		СоставСтроки.Очистить();
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(" " + Лев(ПредставлениеЦены, 1), , Цвет));
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ПредставлениеЦены, СтрДлина(ПредставлениеЦены) - 1),, Цвет));
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаВидЦен" + ИтераторСтрокой(Итератор), Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 22;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		СоставСтроки.Очистить();
		ФорматированноеЧисло = Формат(Цена.Цена, ФорматнаяСтрока);
		Если РазрешеноРедактированиеЦен И НЕ СчитатьЦеныПоСоставу Тогда
			СоставСтроки.Добавить(Новый ФорматированнаяСтрока(ФорматированноеЧисло,, ЦветаСтиля.ЦветГиперссылки,, Строка(Цена.ВидЦен.УникальныйИдентификатор())));
		Иначе
			СоставСтроки.Добавить(Новый ФорматированнаяСтрока(ФорматированноеЧисло));
		КонецЕсли;
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаЗначениеЦены" + ИтераторСтрокой(Итератор), Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 10;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		НоваяДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЗаголовокЗначенияЦенОбработкаНавигационнойСсылки");
		
		СоставСтроки.Очистить();
		ФорматированноеЧисло = Формат(Цена.Цена, ФорматнаяСтрока);
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(" " + Цена.ВалютаЦены, ));
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаВалютаЦены" + ИтераторСтрокой(Итератор), Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 6;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАктуальныеЦены()

// Заполняет данными диаграмму ДиаграммаЦены.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьДиаграммуЦены(Данные)
	
	СчитатьЦеныПоСоставу = ЭтоНаборБезРаспределенияЦен(Объект);
	
	ДиаграммаЦены.Обновление = Ложь;
	
	ДиаграммаЦеныФорматДаты = ФорматДатыИзПериодичности(ДиаграммаЦеныПериодичность);
	
	ВыборкаПериод = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если НЕ ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) И ВыборкаПериод.Количество()>0 И НЕ СчитатьЦеныПоСоставу Тогда
		МинимальныйПериод = '3999-12-31';
		МаксимальныйПериод = '0001-01-01';
		Пока ВыборкаПериод.Следующий() Цикл
			МинимальныйПериод = Мин(ВыборкаПериод.Период, МинимальныйПериод); 	
			МаксимальныйПериод = Макс(ВыборкаПериод.Период, МаксимальныйПериод); 	
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальныйПериод) Тогда
			ДиаграммаЦеныПериод.ДатаНачала = МинимальныйПериод;
		КонецЕсли;
		Если ЗначениеЗаполнено(МаксимальныйПериод) Тогда
			ДиаграммаЦеныПериод.ДатаОкончания = МаксимальныйПериод;
		КонецЕсли; 
	КонецЕсли;
	ВыборкаПериод.Сбросить(); 
	
	Отбор = Новый Структура("Номенклатура, Характеристика", Объект.Ссылка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) И НЕ СчитатьЦеныПоСоставу Тогда
		НачалоИнтервала = НачалоИнтервала(ДиаграммаЦеныПериод.ДатаНачала, ДиаграммаЦеныПериодичность);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВключаяХарактеристики КАК ВключаяХарактеристики,
		|	ЦеныНоменклатурыСрезПоследних.Автор КАК Автор
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаНачала,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("ДатаНачала", ДиаграммаЦеныПериод.ДатаНачала);
		Запрос.УстановитьПараметр("Номенклатура", Отбор.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Отбор.Характеристика);
		
		ЦеныНаНачалоПериода = Запрос.Выполнить().Выгрузить();
	Иначе
		ЦеныНаНачалоПериода = Неопределено;
	КонецЕсли;
	
	Если ВыборкаПериод.Количество() = 0 И (ЦеныНаНачалоПериода = Неопределено ИЛИ ЦеныНаНачалоПериода.Количество() = 0) Тогда
		
		ИнициализироватьДиаграммуЦеныПустую();
		
	ИначеЕсли ВыборкаПериод.Количество() = 0 И (ЦеныНаНачалоПериода = Неопределено ИЛИ ЦеныНаНачалоПериода.Количество() <> 0) Тогда
		ИнициализироватьДиаграммуЦены();
		
		Для каждого Строка Из ЦеныНаНачалоПериода Цикл
			
			Точка0 = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаНачала);
			Точка = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаОкончания);
			
			Точка0.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаНачала, ДиаграммаЦеныФорматДаты);
			Точка.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаОкончания, ДиаграммаЦеныФорматДаты);
			
			Серия = ДиаграммаЦены.УстановитьСерию(Строка.ВидЦен);
			Серия.Маркер = ТипМаркераДиаграммы.Нет;
			Цвет = ЦветВидаЦен(Строка.ВидЦен);
			Если Цвет <> Неопределено Тогда
				Серия.Цвет = Цвет;
			КонецЕсли;
			
			Значение0 = ПересчитатьПоВыбраннойВалюте(Строка.ВалютаЦены, ДиаграммаЦеныПериод.ДатаНачала, Строка.Цена);
			Значение = ПересчитатьПоВыбраннойВалюте(Строка.ВалютаЦены, ДиаграммаЦеныПериод.ДатаОкончания, Строка.Цена);
			
			ДиаграммаЦены.УстановитьЗначение(Точка0, Серия, Значение0);
			ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
			
		КонецЦикла;
		
	Иначе
		ИнициализироватьДиаграммуЦены();
		
		Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
			ПосмотретьНачалоПериода = Истина;
		Иначе
			ПосмотретьНачалоПериода = Ложь;
		КонецЕсли;
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			Если ВыборкаПериод.Количество() = 1 Тогда
				
				Точка0 = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период);
				Точка0.Текст = ПредставлениеДаты(ВыборкаПериод.Период, ДиаграммаЦеныФорматДаты);
				
			Иначе
				
				Точка0 = Неопределено;
				
			КонецЕсли;
			
			ВыборкаВидЦен = ВыборкаПериод.Выбрать();
			Пока ВыборкаВидЦен.Следующий() Цикл
				
				Если ПосмотретьНачалоПериода И Точка0 = Неопределено И ЦеныНаНачалоПериода<>Неопределено Тогда
					
					Строка = ЦеныНаНачалоПериода.Найти(ВыборкаВидЦен.ВидЦен, "ВидЦен");
					Если Строка <> Неопределено Тогда
						
						Точка = ДиаграммаЦены.УстановитьТочку(НачалоИнтервала);
						Точка.Текст = ПредставлениеДаты(НачалоИнтервала, ДиаграммаЦеныФорматДаты);
						Серия = ДиаграммаЦены.УстановитьСерию(ВыборкаВидЦен.ВидЦен);
						ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Строка.Цена);
						
						ЦеныНаНачалоПериода.Удалить(Строка);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Серия = ДиаграммаЦены.УстановитьСерию(ВыборкаВидЦен.ВидЦен);
				Серия.Маркер = ТипМаркераДиаграммы.Нет;
				Цвет = ЦветВидаЦен(ВыборкаВидЦен.ВидЦен);
				Если Цвет <> Неопределено Тогда
					Серия.Цвет = Цвет;
				КонецЕсли;
				
				Если Точка0 <> Неопределено Тогда
					Точка = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период + 1);
				Иначе
					Точка = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период);
				КонецЕсли;
				
				Точка.Текст = ПредставлениеДаты(ВыборкаПериод.Период, ДиаграммаЦеныФорматДаты);
				
				Если Точка0 <> Неопределено Тогда
					
					Если ЦеныНаНачалоПериода = Неопределено Тогда
						Значение = 0;
					Иначе
						Строка = ЦеныНаНачалоПериода.Найти(ВыборкаВидЦен.ВидЦен, "ВидЦен");
						Если Строка <> Неопределено Тогда
							
							Значение = Строка.Цена;
							
						Иначе
							
							Значение = 0;
							
						КонецЕсли;
					КонецЕсли;
					
					ДиаграммаЦены.УстановитьЗначение(Точка0, Серия, Значение);
				КонецЕсли;
				
				Значение = ПересчитатьПоВыбраннойВалюте(ВыборкаВидЦен.ВалютаЦены, ВыборкаПериод.Период, ВыборкаВидЦен.Цена);
				ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЦеныНаНачалоПериода <> Неопределено И Точка0 = Неопределено Тогда
			Для каждого Строка Из ЦеныНаНачалоПериода Цикл
				
				Если ДиаграммаЦеныПериод.ДатаОкончания = Дата(1,1,1) Тогда
					Продолжить;
				КонецЕсли;
				
				Точка = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаОкончания);
				
				Точка.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаОкончания, ДиаграммаЦеныФорматДаты);
				
				Серия = ДиаграммаЦены.УстановитьСерию(Строка.ВидЦен);
				Серия.Маркер = ТипМаркераДиаграммы.Нет;
				Цвет = ЦветВидаЦен(Строка.ВидЦен);
				Если Цвет <> Неопределено Тогда
					Серия.Цвет = Цвет;
				КонецЕсли;
				
				Значение = ПересчитатьПоВыбраннойВалюте(Строка.ВалютаЦены, ДиаграммаЦеныПериод.ДатаОкончания, Строка.Цена);
				
				ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
				
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Серия Из ДиаграммаЦены.Серии Цикл
			
			ПредыдущееЗначение = Неопределено;
			Итератор = 0;
			Пока ПредыдущееЗначение = Неопределено И ДиаграммаЦены.Точки.Количество() > Итератор Цикл
				
				Точка = ДиаграммаЦены.Точки[Итератор];
				ЗначениеДиаграммы = ДиаграммаЦены.ПолучитьЗначение(Точка, Серия).Значение;
				Если ЗначениеЗаполнено(ЗначениеДиаграммы) Тогда
					ПредыдущееЗначение = ЗначениеДиаграммы;
					Прервать;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			Пока ДиаграммаЦены.Точки.Количество() > Итератор Цикл
				
				Точка = ДиаграммаЦены.Точки[Итератор];
				ЗначениеДиаграммы = ДиаграммаЦены.ПолучитьЗначение(Точка, Серия).Значение;
				Если ЗначениеЗаполнено(ЗначениеДиаграммы) Тогда
					ПредыдущееЗначение = ЗначениеДиаграммы;
				Иначе
					ДиаграммаЦены.УстановитьЗначение(Точка, Серия, ПредыдущееЗначение);
				КонецЕсли;
				
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ДиаграммаЦеныПериод) И ДиаграммаЦены.Точки.Количество() <> 0 Тогда
			ДиаграммаЦеныПериод.ДатаНачала = ДиаграммаЦены.Точки[0].Значение;
			ДиаграммаЦеныПериод.ДатаОкончания = ДиаграммаЦены.Точки[ДиаграммаЦены.Точки.Количество() - 1].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ДиаграммаЦеныДоступныеПериоды = ДоступныеПериодичности(ДиаграммаЦеныПериод);
	ДиаграммаЦеныОбновитьКнопкиПериодичности();
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	ДиаграммаЦены.Обновление = Истина;
	
КонецПроцедуры // ЗаполнитьДиаграммуЦены()

// Заполняет данными диаграммы ДиаграммаПродажи и ДиаграммаПродажиКоличество.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьДиаграммуПродажи(Данные)
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажиКоличество.Обновление = Ложь;
	
	ДиаграммаПродажиФорматДаты = ФорматДатыИзПериодичности(ДиаграммаПродажиПериодичность);
	
	ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	
	Выборка = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Количество() = 0 Тогда
		ИнициализироватьДиаграммуПродажиПустую();
	Иначе
		ИнициализироватьДиаграммуПродажи();
		
		СерияСебестоимость = Неопределено;
		Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			СерияСебестоимость = ДиаграммаПродажи.Серии.Добавить("Себестоимость");
			СерияСебестоимость.Цвет = ЦветаСерий[0];
		КонецЕсли;
		
		СерияПрибыль = ДиаграммаПродажи.Серии.Добавить("Валовая прибыль");
		СерияПрибыль.Цвет = ЦветаСерий[1];
		
		СерияУбыток = Неопределено;
		ПоказыватьУбыток = Ложь;
		
		СерияКоличество = ДиаграммаПродажиКоличество.Серии.Добавить("Количество");
		СерияКоличество.Цвет = ЦветаСерий[0];
		
		НачалоПериода = НачалоИнтервала(ДиаграммаПродажиПериод.ДатаНачала, ДиаграммаПродажиПериодичность);
		КонецПериода = КонецИнтервала(ДиаграммаПродажиПериод.ДатаОкончания, ДиаграммаПродажиПериодичность);
		
		ТекущийПериод = НачалоПериода;
		
		Пока Выборка.Следующий() Цикл
			
			Пока ТекущийПериод < НачалоИнтервала(Выборка.Период, ДиаграммаПродажиПериодичность) Цикл
				НоваяТочка = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
				НоваяТочка.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
				
				НоваяТочка2 = ДиаграммаПродажиКоличество.УстановитьТочку(ТекущийПериод);
				НоваяТочка2.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
				
				ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
			КонецЦикла;
			
			Если ТекущийПериод = НачалоИнтервала(Выборка.Период, ДиаграммаПродажиПериодичность) Тогда
				ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
			КонецЕсли;
			
			НоваяТочка = ДиаграммаПродажи.УстановитьТочку(Выборка.Период);
			НоваяТочка.Текст = ПредставлениеДаты(Выборка.Период, ДиаграммаПродажиФорматДаты);
			
			НоваяТочка2 = ДиаграммаПродажиКоличество.УстановитьТочку(Выборка.Период);
			НоваяТочка2.Текст = ПредставлениеДаты(Выборка.Период, ДиаграммаПродажиФорматДаты);
			
			Себестоимость = Выборка.Себестоимость;
			ВаловаяПрибыль = Выборка.ВаловаяПрибыль;
			Количество = Выборка.Количество;
			
			Расшифровка = Неопределено;
			Если ДиаграммаПродажиПериодичность <> ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("Период", Выборка.Период);
				Расшифровка.Вставить("Периодичность", ДиаграммаПродажиПериодичность);
			КонецЕсли;
			
			Если СерияСебестоимость <> Неопределено Тогда
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияСебестоимость, Себестоимость, Расшифровка);
			КонецЕсли;
			
			Если ВаловаяПрибыль < 0 Тогда
				
				Если НЕ ПоказыватьУбыток Тогда
					
					СерияУбыток = ДиаграммаПродажи.Серии.Добавить("Убыток");
					СерияУбыток.Цвет = ЦветаСерий[2];
					
					ПоказыватьУбыток = Истина;
					
				КонецЕсли;
				
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияУбыток, ВаловаяПрибыль, Расшифровка);
				
			Иначе
				
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияПрибыль, ВаловаяПрибыль, Расшифровка);
				
			КонецЕсли;
			
			ДиаграммаПродажиКоличество.УстановитьЗначение(НоваяТочка2, СерияКоличество, Количество);
		КонецЦикла;
		
		Пока ТекущийПериод <= КонецПериода Цикл
			НоваяТочка = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
			НоваяТочка.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
			
			НоваяТочка2 = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
			НоваяТочка2.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
			
			ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
		КонецЦикла;
	КонецЕсли;
	
	ДиаграммаПродажи.Обновление = Истина;
	ДиаграммаПродажиКоличество.Обновление = Истина;
	
	ДиаграммаПродажиДоступныеПериоды = ДоступныеПериодичности(ДиаграммаПродажиПериод);
	ДиаграммаПродажиОбновитьКнопкиПериодичности();
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	
КонецПроцедуры // ЗаполнитьДиаграммуПродажи()

// Заполняет данными деревео Остатки.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьОстатки(Данные)
	
	Остатки.ПолучитьЭлементы().Очистить();
	
	ВыборкаХарактеристики = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаХарактеристики.Количество() = 0 Тогда
		Элементы.ДекорацияНетОстатков.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияНетОстатков.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Остатки.Видимость = Истина;
	ДеревоХарактеристики = Остатки.ПолучитьЭлементы();
	
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЕстьХарактеристики = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Объект.Ссылка).Следующий()
			ИЛИ Справочники.ХарактеристикиНоменклатуры.Выбрать(, Объект.КатегорияНоменклатуры).Следующий();
		
		Если ЕстьХарактеристики Тогда
			
			ДеревоНоваяСтрокаХарактеристика = ДеревоХарактеристики.Добавить();
			ДеревоНоваяСтрокаХарактеристика.Единица = ВыборкаХарактеристики.Характеристика;
			
			Остаток = "" + ВыборкаХарактеристики.Остаток;
			Резерв = "";
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Резерв) Тогда
				Резерв = " / " + ВыборкаХарактеристики.Резерв;
			КонецЕсли;
			
			ДеревоНоваяСтрокаХарактеристика.Остаток = Остаток + Резерв;
			ДеревоНоваяСтрокаХарактеристика.ЭтоХарактеристика = Истина;
			
			ДеревоСклады = ДеревоНоваяСтрокаХарактеристика.ПолучитьЭлементы();
		Иначе
			ДеревоСклады = Остатки.ПолучитьЭлементы();
		КонецЕсли;
		
		ВыборкаСклады = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклады.Следующий() Цикл
			
			ДеревоНоваяСтрокаСклад = ДеревоСклады.Добавить();
			ДеревоНоваяСтрокаСклад.Единица = ВыборкаСклады.СтруктурнаяЕдиница;
			
			Остаток = "" + ВыборкаСклады.Остаток;
			Резерв = "";
			Если ЗначениеЗаполнено(ВыборкаСклады.Резерв) Тогда
				Резерв = " / " + ВыборкаСклады.Резерв;
			КонецЕсли;
			
			ДеревоНоваяСтрокаСклад.Остаток = Остаток + Резерв;
			ДеревоПартии = ДеревоНоваяСтрокаСклад.ПолучитьЭлементы();
			
			Если Объект.ИспользоватьПартии Тогда
				ВыборкаПартии = ВыборкаСклады.Выбрать();
				Пока ВыборкаПартии.Следующий() Цикл
					
					ДеревоНоваяСтрокаПартия = ДеревоПартии.Добавить();
					ДеревоНоваяСтрокаПартия.Единица = ВыборкаПартии.Партия;
					Остаток = "" + ВыборкаПартии.Остаток;
					Резерв = "";
					Если ЗначениеЗаполнено(ВыборкаПартии.Резерв) Тогда
						Резерв = " / " + ВыборкаПартии.Резерв;
					КонецЕсли;
					
					ДеревоНоваяСтрокаПартия.Остаток = ВыборкаПартии.Остаток;
					ДеревоНоваяСтрокаПартия.ЭтоПартия = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает возможные значения периодичностей для заданного периода.
//
&НаСервере
Функция ДоступныеПериодичности(Период)
	
	ДоступныеПериоды = Новый СписокЗначений;
	НачалоПериода = Период.ДатаНачала;
	КонецПериода = Период.ДатаОкончания;
	
	ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.День, "дням");
	
	НачалоНедели = НачалоНедели(КонецПериода);
	Если НачалоНедели > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя, "неделям");
	КонецЕсли;
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	Если НачалоМесяца > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц, "месяцам");
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(КонецПериода);
	Если НачалоКвартала > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал, "кварталам");
	КонецЕсли;
	
	НачалоГода = НачалоГода(КонецПериода);
	Если НачалоГода > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Год, "годам");
	КонецЕсли;
	
	Возврат ДоступныеПериоды;
	
КонецФункции

// Определяет подходящую периодичность для заданного периода.
//
&НаСервере
Функция ПодходящаяПериодичность(НачалоПериода, КонецПериода = Неопределено)
	
	Если КонецПериода = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	Иначе
		ТекущаяДата = КонецПериода;
	КонецЕсли;
	
	НачалоГода = НачалоГода(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Год;
	КонецЕсли;
	
	НачалоГода = НачалоКвартала(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал;
	КонецЕсли;
	
	НачалоГода = НачалоМесяца(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц;
	КонецЕсли;
	
	НачалоГода = НачалоНедели(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя;
	КонецЕсли;
	
	Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	
КонецФункции

// Возвращает формат даты для отображения на диаграмме для заданной периодичности.
//
&НаСервере
Функция ФорматДатыИзПериодичности(Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		ФорматДаты = "ДЛФ=D";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		ФорматДаты = "ДЛФ=D";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		ФорматДаты = "ДФ=""ММММ гггг""";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		ФорматДаты = "ДФ=""к""";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		ФорматДаты = "ДФ=""гггг""";
	КонецЕсли;
	
	Возврат ФорматДаты;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата, Формат)
	
	Если Формат = "ДФ=""к""" Тогда
		Возврат Формат(Дата, Формат) + " квартал " + Формат(Дата, "ДФ=""гггг""");
	Иначе
		Возврат Формат(Дата, Формат);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НачалоИнтервала(Период, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Возврат НачалоГода(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Полугодие Тогда
		НачалоГода      = НачалоГода(Период);
		НачалоПолугодия = ДобавитьМесяц(НачалоГода, 6);
		Если Период >= НачалоГода И Период < НачалоПолугодия Тогда
			Возврат НачалоГода;
		Иначе
			Возврат НачалоПолугодия;
		КонецЕсли;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Возврат НачалоКвартала(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Возврат НачалоМесяца(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Возврат НачалоНедели(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат НачалоДня(Период);
	Иначе
		Возврат Период;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КонецИнтервала(Период, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Возврат КонецГода(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Полугодие Тогда
		КонецПолугодия = КонецМесяца(ДобавитьМесяц(НачалоГода(Период), 6) - 1);
		КонецГода      = КонецГода(Период);
		Если Период > КонецПолугодия И Период <= КонецГода Тогда
			Возврат КонецГода;
		Иначе
			Возврат КонецПолугодия;
		КонецЕсли;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Возврат КонецКвартала(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Возврат КонецМесяца(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Возврат КонецНедели(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат КонецДня(Период);
	Иначе
		Возврат Период;
	КонецЕсли;
	
КонецФункции

// Возвращает для указанной даты начало следующего интервала периодичности.
//
&НаСервере
Функция СледующийИнтервал(Период, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Возврат ДобавитьМесяц(Период, 12);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Полугодие Тогда
		Возврат ДобавитьМесяц(Период, 6);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Возврат ДобавитьМесяц(Период, 3);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Возврат ДобавитьМесяц(Период, 1);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Возврат Период + 86400*7;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат Период + 86400;
	КонецЕсли;
	
КонецФункции

// Возвращает значение суммы на заданную дату в заданной валюте.
//
&НаСервере
Функция ПересчитатьПоВыбраннойВалюте(ИсходнаяВалюта, Дата, Значение, НоваяВалюта = Неопределено)
	
	Если НоваяВалюта = Неопределено Тогда
		НоваяВалюта = ДиаграммаЦеныВалюта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда
		НоваяВалюта = ИсходнаяВалюта;
	КонецЕсли;
	
	ПараметрыНовогоКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", НоваяВалюта));
	ПараметрыНовогоКурса.Вставить("Валюта", НоваяВалюта);
	ПараметрыСтарогоКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ИсходнаяВалюта));
	ПараметрыСтарогоКурса.Вставить("Валюта", ИсходнаяВалюта);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Значение, ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	
КонецФункции

// Возвращает представление периода.
//
&НаСервере
Функция ЗаголовокПериода(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПредставлениеПериода(Период.ДатаНачала, ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания));
	
КонецФункции

&НаСервере
Процедура ДиаграммаЦеныУстановитьЗаголовокПериода()
	
	ДиаграммаЦеныПериодЗаголовок = ЗаголовокПериода(ДиаграммаЦеныПериод);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиУстановитьЗаголовокПериода()
	
	ДиаграммаПродажиПериодЗаголовок = ЗаголовокПериода(ДиаграммаПродажиПериод);
	
КонецПроцедуры

// Показывает пустую диаграмму цен при отсутствии данных для отображения.
//
&НаСервере
Процедура ИнициализироватьДиаграммуЦеныПустую()
	
	Элементы.ДиаграммаЦены.Доступность = Ложь;
	
	Элементы.ДинамикаЦенКоманднаяПанель.Видимость = Ложь;
	
	ДиаграммаЦены.Обновление = Ложь;
	ДиаграммаЦены.Очистить();
	
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериодЗаголовок) Тогда
		ДиаграммаЗаголовок = НСтр("ru='Нет данных за выбранный период.'");
	Иначе
		ДиаграммаЗаголовок = НСтр("ru='Цены не установлены.'");
	КонецЕсли;
	
	ДиаграммаЦены.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаЦены.ОтображатьЗаголовок = Истина;
	ДиаграммаЦены.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаЦены.ОтображатьЛегенду = Ложь;
	
	ДиаграммаЦены.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаЦены.Серии.Добавить("Цена1");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	Серия1.Маркер = ТипМаркераДиаграммы.Нет;
	Серия2 = ДиаграммаЦены.Серии.Добавить("Цена2");
	Серия2.Цвет = Новый Цвет(220, 220, 220);
	Серия2.Маркер = ТипМаркераДиаграммы.Нет;
	Серия3 = ДиаграммаЦены.Серии.Добавить("Цена3");
	Серия3.Цвет = Новый Цвет(127, 127, 127);
	Серия3.Маркер = ТипМаркераДиаграммы.Нет;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.Обновление = Истина;
	
КонецПроцедуры

// Показывает пустую диаграмму продаж при отсутствии данных для отображения.
//
&НаСервере
Процедура ИнициализироватьДиаграммуПродажиПустую()
	
	Элементы.ДиаграммаПродажи.Доступность = Ложь;
	
	Элементы.ДинамикаПродажКоманднаяПанель.Видимость = Ложь;
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажиКоличество.Обновление = Ложь;
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажиКоличество.Очистить();
	
	Если ЗначениеЗаполнено(ДиаграммаПродажиПериодЗаголовок) Тогда
		ДиаграммаЗаголовок = НСтр("ru='Нет данных за выбранный период.'");
	Иначе
		ДиаграммаЗаголовок = НСтр("ru='Отсутствуют данные по продажам.'");
	КонецЕсли;
	
	ДиаграммаПродажи.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаПродажи.ОтображатьЗаголовок = Истина;
	ДиаграммаПродажи.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаПродажи.ОтображатьЛегенду = Ложь;
	
	ДиаграммаПродажиКоличество.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаПродажиКоличество.ОтображатьЗаголовок = Истина;
	ДиаграммаПродажиКоличество.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаПродажиКоличество.ОтображатьЛегенду = Ложь;
	
	ДиаграммаПродажи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ДиаграммаПродажиКоличество.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаПродажи.Серии.Добавить("Себестоимость");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	Серия2 = ДиаграммаПродажи.Серии.Добавить("Прибыль");
	Серия2.Цвет = Новый Цвет(220, 220, 220);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ДиаграммаПродажи.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка1, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка2, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка3, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка4, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаПродажиКоличество.Серии.Добавить("Количество");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.Обновление = Истина;
	ДиаграммаПродажиКоличество.Обновление = Истина;
	
КонецПроцедуры

// Устанавливает необходимые свойства диаграммы цены для отображения данных.
//
&НаСервере
Процедура ИнициализироватьДиаграммуЦены()
	
	Элементы.ДиаграммаЦены.Доступность = Истина;
	
	Элементы.ДинамикаЦенКоманднаяПанель.Видимость = Истина;
	
	ДиаграммаЦены.Очистить();
	
	ДиаграммаЦены.ОтображатьЗаголовок = Ложь;
	ДиаграммаЦены.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаЦены.ОтображатьЛегенду = Истина;
	ДиаграммаЦены.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ;
	
	ДиаграммаЦены.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
КонецПроцедуры

// Устанавливает необходимые свойства диаграммы продажи для отображения данных.
//
&НаСервере
Процедура ИнициализироватьДиаграммуПродажи()
	
	Элементы.ДиаграммаПродажи.Доступность = Истина;
	
	Элементы.ДинамикаПродажКоманднаяПанель.Видимость = Истина;
	
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажиКоличество.Очистить();
	
	ДиаграммаПродажи.ОтображатьЗаголовок = Ложь;
	ДиаграммаПродажи.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаПродажи.ОтображатьЛегенду = Истина;
	ДиаграммаПродажи.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ;
	
	ДиаграммаПродажиКоличество.ОтображатьЗаголовок = Ложь;
	ДиаграммаПродажиКоличество.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаПродажиКоличество.ОтображатьЛегенду = Истина;
	ДиаграммаПродажиКоличество.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ;
	
	ДиаграммаПродажи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ДиаграммаПродажиКоличество.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
КонецПроцедуры

&НаСервере
Функция ЦенаПоНавигационнойСсылке(НавигационнаяСсылка)
	
	Возврат Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(НавигационнаяСсылка));
	
КонецФункции

&НаСервере
Функция ЦветВидаЦен(ВидЦен)
	
	Строки = ЦветаВидовЦен.НайтиСтроки(Новый Структура("ВидЦен", ВидЦен));
	Если Строки.Количество() <> 0 Тогда
		Возврат Строки[0].Цвет;
	КонецЕсли;
	
	КоличествоСтрок = ЦветаВидовЦен.Количество();
	НоваяСтрока = ЦветаВидовЦен.Добавить();
	НоваяСтрока.ВидЦен = ВидЦен;
	Если КоличествоСтрок < 10 Тогда
		ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
		НоваяСтрока.Цвет = ЦветаСерий[КоличествоСтрок];
	Иначе
		НоваяСтрока.Цвет = Неопределено;
	КонецЕсли;
	
	Возврат НоваяСтрока.Цвет;
	
КонецФункции

// Устанавливает видимость кнопок периодичности для диаграммы цен.
//
&НаСервере
Процедура ДиаграммаЦеныОбновитьКнопкиПериодичности()
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.День) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоДням.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоДням.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоНеделям.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоНеделям.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоКварталам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоКварталам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Год) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоГодам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоГодам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопок периодичности для диаграммы продаж.
//
&НаСервере
Процедура ДиаграммаПродажиОбновитьКнопкиПериодичности()
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.День) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоДням.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоДням.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоНеделям.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоНеделям.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоКварталам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоКварталам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Год) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоГодам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоГодам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныЗаполнитьКоманднуюПанель()
	
	ДиаграммаЦеныКоманднаяПанельУдалитьЭлементы();
	
	ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораВалюты();
	ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораЕдиницыИзмерения();
	
	Если Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения.ПодчиненныеЭлементы.Количество() = 0 
		И Элементы.ДинамикаЦенКоманднаяПанельВалюты.ПодчиненныеЭлементы.Количество() = 0 Тогда
		
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоДням,      Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоНеделям,   Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоМесяцам,   Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоКварталам, Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоГодам,     Элементы.ДинамикаЦенКоманднаяПанельПодменю);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораВалюты()
	
	ДиаграммаЦеныВалюта = Константы.НациональнаяВалюта.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Ссылка,
	|	Валюты.Наименование
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления";
	
	ВыборкаВалюты = Запрос.Выполнить().Выбрать();
	Если ВыборкаВалюты.Количество() > 1 Тогда
		
		Итератор = 0;
		
		Пока ВыборкаВалюты.Следующий() Цикл
			
			НоваяСтрока = ДиаграммаЦеныВалюты.Вставить(Итератор);
			НоваяСтрока.Ссылка = ВыборкаВалюты.Ссылка;
			
			НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор);
			НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоВалюте";
			
			КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельВалюты);
			КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор;
			КнопкаФормы.Заголовок = ВыборкаВалюты.Наименование;
			
			Если ВыборкаВалюты.Ссылка = ДиаграммаЦеныВалюта Тогда
				ДиаграммаЦеныВыбратьВалюту(НоваяКоманда.Имя);
			КонецЕсли;
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораЕдиницыИзмерения()
	
	ДиаграммаЦеныЕдиницаИзмерения = Объект.ЕдиницаИзмерения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Наименование
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|	И ЕдиницыИзмерения.Владелец = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ВыборкаЕдиницыИзмерения = Запрос.Выполнить().Выбрать();
	Если ВыборкаЕдиницыИзмерения.Количество() <> 0 Тогда
		
		Итератор = 0;
		
		НоваяСтрока = ДиаграммаЦеныЕдиницыИзмерения.Вставить(Итератор);
		НоваяСтрока.Ссылка = Объект.ЕдиницаИзмерения;

		НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор);
		НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения";
		
		КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения);
		КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор;
		КнопкаФормы.Заголовок = Объект.ЕдиницаИзмерения.Наименование;
		
		Итератор = Итератор + 1;
		Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл
			
			НоваяСтрока = ДиаграммаЦеныЕдиницыИзмерения.Вставить(Итератор);
			НоваяСтрока.Ссылка = ВыборкаЕдиницыИзмерения.Ссылка;
			
			НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор);
			НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения";
			
			КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения);
			КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор;
			КнопкаФормы.Заголовок = ВыборкаЕдиницыИзмерения.Наименование;
			
			Если ВыборкаЕдиницыИзмерения.Ссылка = ДиаграммаЦеныЕдиницаИзмерения Тогда
				ДиаграммаЦеныВыбратьЕдиницуИзмерения(НоваяКоманда.Имя);
			КонецЕсли;
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной периодичностью.
//
&НаСервере
Процедура ДиаграммаЦеныУстановитьПериодичность(Периодичность)
	
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериодичность) Тогда
		
		ТекущаяПериодичность = ДиаграммаЦеныПериодичность;
		Если ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
			Элементы.ДиаграммаЦеныСрезПоДням.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
			Элементы.ДиаграммаЦеныСрезПоНеделям.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
			Элементы.ДиаграммаЦеныСрезПоМесяцам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
			Элементы.ДиаграммаЦеныСрезПоКварталам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
			Элементы.ДиаграммаЦеныСрезПоГодам.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДиаграммаЦеныПериодичность = Периодичность;
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Элементы.ДиаграммаЦеныСрезПоДням.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Элементы.ДиаграммаЦеныСрезПоНеделям.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Элементы.ДиаграммаЦеныСрезПоКварталам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Элементы.ДиаграммаЦеныСрезПоГодам.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной периодчностью.
//
&НаСервере
Процедура ДиаграммаПродажиУстановитьПериодичность(Периодичность)
	
	Если ЗначениеЗаполнено(ДиаграммаПродажиПериодичность) Тогда
		
		ТекущаяПериодичность = ДиаграммаПродажиПериодичность;
		Если ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
			Элементы.ДиаграммаПродажиСрезПоДням.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
			Элементы.ДиаграммаПродажиСрезПоНеделям.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
			Элементы.ДиаграммаПродажиСрезПоМесяцам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
			Элементы.ДиаграммаПродажиСрезПоКварталам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
			Элементы.ДиаграммаПродажиСрезПоГодам.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДиаграммаПродажиПериодичность = Периодичность;
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Элементы.ДиаграммаПродажиСрезПоДням.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Элементы.ДиаграммаПродажиСрезПоНеделям.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Элементы.ДиаграммаПродажиСрезПоКварталам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Элементы.ДиаграммаПродажиСрезПоГодам.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной единицей измерения.
//
&НаСервере
Процедура ДиаграммаЦеныВыбратьЕдиницуИзмерения(КомандаИмя)
	
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	
	НСтроки = Число(СтрЗаменить(КомандаИмя, "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_", ""));
	ДиаграммаЦеныЕдиницаИзмерения = ДиаграммаЦеныЕдиницыИзмерения[НСтроки].Ссылка;
	Элементы[КомандаИмя].Пометка = Истина;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной валютой.
//
&НаСервере
Процедура ДиаграммаЦеныВыбратьВалюту(КомандаИмя)
	
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельВалюты.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	
	НСтроки = Число(СтрЗаменить(КомандаИмя, "ДиаграммаЦеныУстановитьОтборПоВалюте_", ""));
	ДиаграммаЦеныВалюта = ДиаграммаЦеныВалюты[НСтроки].Ссылка;
	Элементы[КомандаИмя].Пометка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеЦен(ПредыдущиеЦены, ВидЦен, ВыборкаСостав)
	
	ЦеныПоВидуЦен = Новый Соответствие;
	ВыборкаСостав.Сбросить();		
	Пока ВыборкаСостав.Следующий() Цикл
		Если ЦеныПоВидуЦен.Получить(ВыборкаСостав.Номенклатура)=Неопределено Тогда
			ЦеныПоВидуЦен.Вставить(ВыборкаСостав.Номенклатура, Новый Соответствие);
		КонецЕсли;
		ЦеныПоВидуЦен.Получить(ВыборкаСостав.Номенклатура).Вставить(ВыборкаСостав.Характеристика, 0);
	КонецЦикла; 
	ПредыдущиеЦены.Вставить(ВидЦен, ЦеныПоВидуЦен);
	
КонецПроцедуры

Функция СформироватьЗапрос(ПараметрыЗапроса)
	
	Области = ПараметрыЗапроса.Области;
	
	Запрос = Новый Запрос;
	
	ЗапросАктуальныеЦены 	= ОписаниеЗапросаАктуальныеЦены(Запрос, Области);
	ЗапросДинамикаЦен 		= ОписаниеЗапросаДинамикаЦен(Запрос, Области);
	ЗапросПродажи 			= ОписаниеЗапросаПродажи(Запрос, Области);
	ЗапросОстатки 			= ОписаниеЗапросаОстатки(Запрос, Области);
	
	РазделительЗапросов = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если Области = Неопределено Тогда
		Области = Новый Массив;
		
		Если РазрешенПросмотрЦен Тогда
			Области.Добавить("АктуальныеЦены");
			Если ПоказыватьГрафикиПродажИЦен Тогда
				Области.Добавить("ДиаграммаЦены");
			КонецЕсли;
		КонецЕсли;
		Если РазрешенПросмотрПродаж И ПоказыватьГрафикиПродажИЦен Тогда
			Области.Добавить("ДиаграммаПродажи");
		КонецЕсли;
		Области.Добавить("Остатки");
		
	Иначе
		
		Если ТипЗнч(Области) = Тип("Строка") Тогда
			ОбластиСтрока = Области;
			Области = Новый Массив;
			Области.Добавить(ОбластиСтрока);
		КонецЕсли;
		
		Для каждого Область Из Области Цикл
			
			Если (Область = "АктуальныеЦены" ИЛИ Область = "ДиаграммаЦены")
				И НЕ РазрешенПросмотрЦен Тогда
				Область = Неопределено;
			КонецЕсли;
			Если Область = "ДиаграммаЦены"
				И ЭтоНаборБезРаспределенияЦен(Объект) Тогда
				Область = Неопределено;
			КонецЕсли; 
			
			Если Область = "ДиаграммаПродажи" И НЕ РазрешенПросмотрПродаж Тогда
				Область = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтекИтоговыхЗапросов = 1;
	
	Для каждого Область Из Области Цикл
		
		Если Область = "АктуальныеЦены" И РазрешенПросмотрЦен Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросАктуальныеЦены.ТекстЗапроса;
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросАктуальныеЦены.НомерВПакете;
			ЗапросТекстАктуальныеЦеныНомерВПакете = СтекИтоговыхЗапросов - 1;
			
		ИначеЕсли Область = "ДиаграммаЦены" И РазрешенПросмотрЦен Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросДинамикаЦен.ТекстЗапроса;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросДинамикаЦен.НомерВПакете;
			ЗапросТекстДинамикаЦенНомерВПакете = СтекИтоговыхЗапросов - 1;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДетализации%", ДиаграммаЦеныПериодичность);
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДиаграммаЦеныДатаНачала", "ЦеныНоменклатуры.Период >= &ДиаграммаЦеныДатаНачала");
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаНачала", ДиаграммаЦеныПериод.ДатаНачала);
			Иначе
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаНачала", Истина);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаОкончания) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДиаграммаЦеныДатаОкончания", "ЦеныНоменклатуры.Период <= &ДиаграммаЦеныДатаОкончания");
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаОкончания", ДиаграммаЦеныПериод.ДатаОкончания);
			Иначе
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаОкончания", Истина);
			КонецЕсли;
			
		ИначеЕсли Область = "ДиаграммаПродажи" И РазрешенПросмотрПродаж Тогда
			
			Если НЕ ЗапросПродажи.Выводить Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросПродажи.ТекстЗапроса;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросПродажи.НомерВПакете;
			ЗапросТекстДинамикаПродажНомерВПакете = СтекИтоговыхЗапросов - 1;
			
			Если ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодДень");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДокумента%", "НачалоПериода(ДобавленныеНаборы.Ссылка.Дата, День)");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодНеделя");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДокумента%", "НачалоПериода(ДобавленныеНаборы.Ссылка.Дата, Неделя)");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодМесяц");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДокумента%", "НачалоПериода(ДобавленныеНаборы.Ссылка.Дата, Месяц)");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодКвартал");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДокумента%", "НачалоПериода(ДобавленныеНаборы.Ссылка.Дата, Квартал)");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодГод");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДокумента%", "НачалоПериода(ДобавленныеНаборы.Ссылка.Дата, Год)");
			КонецЕсли;
			Запрос.УстановитьПараметр("ДиаграммаПродажиДатаНачала", ДиаграммаПродажиПериод.ДатаНачала);
			Запрос.УстановитьПараметр("ДиаграммаПродажиДатаОкончания", ДиаграммаПродажиПериод.ДатаОкончания);
			
		ИначеЕсли Область = "Остатки" Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросОстатки.ТекстЗапроса;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросОстатки.НомерВПакете;
			ЗапросТекстОстаткиНомерВПакете = СтекИтоговыхЗапросов - 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		// Служебный запрос состава набора
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставНаборов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СУММА(СоставНаборов.Количество * ВЫБОР
		|			КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА ВЫРАЗИТЬ(СоставНаборов.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ СоставНабора
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов
		|ГДЕ
		|	СоставНаборов.НоменклатураНабора = &Номенклатура
		|	И НЕ СоставНаборов.Общий
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставНаборов.Номенклатура,
		|	СоставНаборов.Характеристика,
		|	СоставНаборов.ХарактеристикаНабора" + РазделительЗапросов + Запрос.Текст;
	КонецЕсли; 
	
	НоменклатураУИД = "Номенклатура"+СтрЗаменить(Объект.Ссылка.УникальныйИдентификатор(),"-","");
	Запрос.УстановитьПараметр(НоменклатураУИД, Объект.Ссылка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "&"+НоменклатураУИД);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЗапросТекстАктуальныеЦеныНомерВПакете", ЗапросТекстАктуальныеЦеныНомерВПакете);
	ПараметрыВывода.Вставить("ЗапросТекстДинамикаЦенНомерВПакете", ЗапросТекстДинамикаЦенНомерВПакете);
	ПараметрыВывода.Вставить("ЗапросТекстДинамикаПродажНомерВПакете", ЗапросТекстДинамикаПродажНомерВПакете);
	ПараметрыВывода.Вставить("ЗапросТекстОстаткиНомерВПакете", ЗапросТекстОстаткиНомерВПакете);
	ПараметрыВывода.Вставить("ЗапросПродажиВыводить", ЗапросПродажи.Выводить);
	ПараметрыВывода.Вставить("Области", Области);
	
	Возврат Новый Структура("Запрос, ПараметрыВывода", Запрос, ПараметрыВывода);
	
КонецФункции

Функция ВыполнитьЗапросЦеныОстаткиДиаграммы(Запрос, ПараметрыВывода, ВыполнитьВФоне)
	
	Если ВыполнитьВФоне Тогда
		ЗапуститьФоновоеЗаданиеНаСервере(Запрос, ПараметрыВывода);
	Иначе
		Возврат Запрос.ВыполнитьПакет();
	КонецЕсли; 
	
КонецФункции

Процедура ОбновитьЦеныОстаткиДиаграммы(Результат, ПараметрыВывода)
	
	Области = ПараметрыВывода.Области;
	
	Если Области.Найти("АктуальныеЦены") <> Неопределено И РазрешенПросмотрЦен Тогда
		АктуальныеЦеныУдалитьЭлементы();
		
		ИнициализироватьДиаграммуЦены();
		ЗаполнитьАктуальныеЦены(Результат[ПараметрыВывода.ЗапросТекстАктуальныеЦеныНомерВПакете]);
	КонецЕсли;
	
	Если Области.Найти("ДиаграммаЦены") <> Неопределено И РазрешенПросмотрЦен Тогда
		ЗаполнитьДиаграммуЦены(Результат[ПараметрыВывода.ЗапросТекстДинамикаЦенНомерВПакете]);
	КонецЕсли;
	
	Если Области.Найти("ДиаграммаПродажи") <> Неопределено Тогда
		Если ПараметрыВывода.ЗапросПродажиВыводить И РазрешенПросмотрПродаж Тогда
			ЗаполнитьДиаграммуПродажи(Результат[ПараметрыВывода.ЗапросТекстДинамикаПродажНомерВПакете]);
		Иначе
			ИнициализироватьДиаграммуПродажиПустую();
		КонецЕсли;
	КонецЕсли;
	
	Если Области.Найти("Остатки") <> Неопределено Тогда
		ЗаполнитьОстатки(Результат[ПараметрыВывода.ЗапросТекстОстаткиНомерВПакете]);
	КонецЕсли;
	
	Элементы.СтраницаОжиданиеПродажи.Видимость = НЕ ФоновоеЗаданиеВыполнено;
	Элементы.СтраницаОжиданиеЦены.Видимость = НЕ ФоновоеЗаданиеВыполнено;
	Элементы.СтраницаПродажи.Видимость = ФоновоеЗаданиеВыполнено;
	Элементы.СтраницаЦены.Видимость = ФоновоеЗаданиеВыполнено;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныКоманднаяПанельУдалитьЭлементы()
	
	ЭлементыКУдалению = Новый Массив;
	КомандыКУдалению = Новый Массив;
	Для каждого КомандаУдалить Из Команды Цикл
		Если СтрНачинаетсяС(КомандаУдалить.Имя, "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_") Тогда
			КомандыКУдалению.Добавить(КомандаУдалить);
		КонецЕсли;
		Если СтрНачинаетсяС(КомандаУдалить.Имя, "ДиаграммаЦеныУстановитьОтборПоВалюте_") Тогда
			КомандыКУдалению.Добавить(КомандаУдалить);
		КонецЕсли;		
	КонецЦикла;
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(Элемент.Имя, "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_") Тогда
			ЭлементыКУдалению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельВалюты.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(Элемент.Имя, "ДиаграммаЦеныУстановитьОтборПоВалюте_") Тогда
			ЭлементыКУдалению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Для каждого Команада Из КомандыКУдалению Цикл
		Команды.Удалить(Команада);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольДублей 

&НаСервере
Процедура УстановитьНастройкиКонтроляДублей()
	
	Элементы.ДублиНаименование.Видимость = Ложь;
	Элементы.ДублиНаименованиеПолное.Видимость = Ложь;
	Элементы.ДублиАртикул.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаДубли(Реквизит, АвтозаполнениеРеквизита = Ложь)
	
	НастройкиКонтроляДублей = Константы.НастройкиКонтроляДублейНоменклатура.Получить().Получить();
	
	Если НастройкиКонтроляДублей = Неопределено Тогда Возврат КонецЕсли;
	
	ПроверятьАртикул = НастройкиКонтроляДублей.Получить("ПроверятьАртикул");
	ПроверятьНаименование = НастройкиКонтроляДублей.Получить("ПроверятьНаименование");
	ПроверятьНаименованиеПолное = НастройкиКонтроляДублей.Получить("ПроверятьНаименованиеПолное");
	
	Если Реквизит = "НаименованиеПолное" И АвтозаполнениеРеквизита И ПроверятьНаименование И ПроверятьНаименованиеПолное Тогда
		 ПроверятьНаименованиеПолное = Ложь;
	КонецЕсли;
	
	Если Реквизит = "Артикул" Тогда
		
		Если Не ПроверятьАртикул Тогда 
			Элементы["Дубли"+Реквизит].Видимость = Ложь;
			Возврат
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Артикул) Тогда
			Возврат;
		КонецЕсли;
		АртикулДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Артикул, Истина);
	КонецЕсли;

	Если Реквизит = "Наименование" Тогда
		
		Если Не ПроверятьНаименование Тогда 
			Элементы["Дубли"+Реквизит].Видимость = Ложь;
			Возврат
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	КонецЕсли;
	
	Если Реквизит = "НаименованиеПолное" Тогда
		
		Если Не ПроверятьНаименованиеПолное Тогда
			Элементы["Дубли"+Реквизит].Видимость = Ложь;
			Возврат
		КонецЕсли;
		
		НаименованиеПолное = СтрЗаменить(Объект.НаименованиеПолное, Символы.ПС, " ");
		
		Если НЕ ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеПолноеДляПоискаДублей = НаименованиеДляПоискаДублей(НаименованиеПолное);
	КонецЕсли;
	
	ЗапросНоменклатура = Новый Запрос;
	ЗапросНоменклатура.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.Ссылка = &Ссылка
	|	И Номенклатура.Наименование ПОДОБНО &Наименование";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
	
		ЗапросНоменклатура.Текст = ЗапросНоменклатура.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Характеристика.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристика
		|ГДЕ
		|	Характеристика.Артикул ПОДОБНО &Наименование";
	
	КонецЕсли;
	
	ЗапросНоменклатура.Текст = СтрЗаменить(ЗапросНоменклатура.Текст,"Наименование", Реквизит);
	ЗапросНоменклатура.УстановитьПараметр(Реквизит, ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
	ЗапросНоменклатура.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = ЗапросНоменклатура.Выполнить();
	
	Элементы["Дубли"+Реквизит].Видимость = НЕ Результат.Пустой();

КонецПроцедуры

&НаСервере
Функция НаименованиеДляПоискаДублей(СтрокаПоиска, ТочноеСоответствие = Ложь)
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска)Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ТочноеСоответствие Тогда
		
		ПоисковоеВыражение = СтрЗаменить(СтрокаПоиска, "-", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
		
		Возврат "%" + СокрЛП(ПоисковоеВыражение) + "%";
		
	Иначе
		
		ПоисковоеВыражение = СтрЗаменить(СтрокаПоиска, "-", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "");
		
		Возврат СокрЛП(ПоисковоеВыражение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборДублей(ВыбраннаяНоменклатура)
	
	ЗакрыватьПриВыборе = Ложь;
	ЗначениеВРеквизитФормы(ВыбраннаяНоменклатура.ПолучитьОбъект(), "Объект");
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОДублях()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПредупреждениеДублей",ЭтотОбъект);
	ТекстПредупреждения = ТекстПредупрежденияПоДублям();

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Проигнорировать и записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, СписокКнопок,,КодВозвратаДиалога.Отмена, "Контроль дублей");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыПредупреждениеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СозданКопированием = Ложь;
	
	ПроигнорированоСообщениеОДублях = Истина;
	СообщениеОДублированииИнформации = ТекстПредупрежденияПоДублям(Истина);
	
	Элементы.ДублиНаименование.Видимость = Ложь;
	Элементы.ДублиНаименованиеПолное.Видимость = Ложь;
	Элементы.ДублиАртикул.Видимость = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруНаДублиСервер(КонтрольПоДублям = Истина)
	
	НастройкиКонтроляДублей = Константы.НастройкиКонтроляДублейНоменклатура.Получить().Получить();
	
	Если НастройкиКонтроляДублей = Неопределено Тогда 
		КонтрольПоДублям = Ложь;
		Возврат 
	КонецЕсли;
	
	ПроверятьАртикул = НастройкиКонтроляДублей.Получить("ПроверятьАртикул");
	ПроверятьНаименование = НастройкиКонтроляДублей.Получить("ПроверятьНаименование");
	ПроверятьНаименованиеПолное = НастройкиКонтроляДублей.Получить("ПроверятьНаименованиеПолное");
	
	Если Не ПроверятьАртикул И Не ПроверятьНаименование И Не ПроверятьНаименованиеПолное Тогда 
		КонтрольПоДублям = Ложь;
	КонецЕсли;
	
	ПроверитьНаДубли("Наименование");
	ПроверитьНаДубли("НаименованиеПолное");
	ПроверитьНаДубли("Артикул");
КонецПроцедуры

&НаКлиенте
Функция ТекстПредупрежденияПоДублям(СообщениеПриЗаписи = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если Элементы.ДублиНаименование.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'наименованию'"));
	КонецЕсли;
	
	Если Элементы.ДублиНаименованиеПолное.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'наименованию для печати'"));
	КонецЕсли;
	
	Если Элементы.ДублиАртикул.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'артикулу'"));
	КонецЕсли;
	
	Если СообщениеПриЗаписи Тогда
		Возврат НСтр("ru = 'Проигнорировано сообщение о дублировании информации по '") + СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Найдены дубли по: '") + СтрСоединить(МассивСтрок,", ");
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеОДублях()
	
	Если НЕ Элементы.ДублиНаименование.Видимость
		И НЕ Элементы.ДублиАртикул.Видимость
		И НЕ Элементы.ДублиНаименованиеПолное.Видимость Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дублей не найдено'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупрежденияПоДублям());
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныНаименований

&НаКлиенте
Процедура Подключаемый_НаименованиеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеПолноеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеПолноеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.НаименованиеПолное
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект.КатегорияНоменклатуры,
		Объект.Наименование, ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеПолноеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		Объект.КатегорияНоменклатуры,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименования()
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(ЭтотОбъект, Объект.Наименование, ПредопределенноеЗначение(
		"Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее"));
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(ЭтотОбъект, Объект.НаименованиеПолное, ПредопределенноеЗначение(
		"Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати"));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление)
	
	Возврат ШаблоныНаименований.ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление);
	
КонецФункции

&НаСервере
Процедура СформироватьНаименования()
	
	ШаблоныНаименований.СформироватьНаименования(ЭтотОбъект, Объект.КатегорияНоменклатуры);
	
КонецПроцедуры

// Присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Наименование, НаименованиеПолное)
	
	Возврат (Наименование = НаименованиеПолное ИЛИ ПустаяСтрока(НаименованиеПолное));
	
КонецФункции // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

#КонецОбласти

#Область Наборы

&НаСервереБезКонтекста
Функция МожноИзменитьПризнакНабора(Номенклатура, ЭтоНабор)
	
	Возврат НаборыСервер.МожноИзменитьПризнакНабора(Номенклатура, ЭтоНабор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияИзменениеСоставаНабораКлиент()
	
	ОбработкаОповещенияИзменениеСоставаНабора();
	
КонецПроцедуры

// Обновляет данные о ценах и остатках при возникновении оповещения об изменении состава набора.
//
&НаСервере
Процедура ОбработкаОповещенияИзменениеСоставаНабора()
	
	ДиаграммаЦеныПериод = Неопределено;
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	Остатки.ПолучитьЭлементы().Очистить();
	
	Области = Новый Массив;
	Области.Добавить("АктуальныеЦены");
	Области.Добавить("ДиаграммаЦены");
	Области.Добавить("ДиаграммаПродажи");
	Области.Добавить("Остатки");
	ПолучитьДанныеФормы(Области, ПоказыватьГрафикиПродажИЦен);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДвиженияЗапасов(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Запасы.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКПоступлениюНаСклады.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	ЗапасыКПоступлениюНаСклады.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКРасходуСоСкладов.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ЗапасыКРасходуСоСкладов.Номенклатура = &Номенклатура";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииРеквизитовНабора()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", Объект.Ссылка);
	СтруктураПолей.Вставить("ЭтоНабор", Объект.ЭтоНабор);
	СтруктураПолей.Вставить("ВариантПечатиНабора", Объект.ВариантПечатиНабора);
	СтруктураПолей.Вставить("СпособРасчетаЦеныНабора", Объект.СпособРасчетаЦеныНабора);
	
	Оповестить(НаборыКлиент.ИмяСобытияИзменениеРеквизитовНабора(), СтруктураПолей, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ПодарочныеСертификаты

&НаСервере
Функция МожноИзменитьПараметрСертификата(ИмяРеквизита = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьДвиженияЗапасов(Объект.Ссылка) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru = 'Были движения сертификатов данного вида, изменение параметров невозможно'"));
		
		Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
			Объект[ИмяРеквизита] = Объект.Ссылка[ИмяРеквизита];
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОграниченияСертификата(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОграниченияСертификатаНаСервере(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияСертификатаНаСервере(ПараметрыОграничений)
	
	Объект.ВариантОграниченияСертификата = ПараметрыОграничений.ВариантОграниченияСертификата;
	Объект.СпособОграниченияСертификата = ПараметрыОграничений.СпособОграниченияСертификата;
	Объект.НоменклатураГруппыЦеновыеГруппы.Загрузить(ПолучитьИзВременногоХранилища(ПараметрыОграничений.АдресВХранилище));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПоказатьДополнительныеРеквизитыПоПрослеживаемости()
	
	ПоказыватьВесТовараПоСертификату = Ложь;
	
	Если Объект.ПрослеживаемыйТовар И ЗначениеЗаполнено(Объект.ТоварнаяНоменклатураВЭД)
		И КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		
		ЕдиницаПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТоварнаяНоменклатураВЭД, "ЕдиницаИзмерения");
		КодЕдиницыПрослеживаемости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаПрослеживаемости,"Код");
		НаименованиеЕдиницыПрослеживаемости = ЕдиницаПрослеживаемости;
		
		Если ЕдиницаПрослеживаемости <> Объект.ЕдиницаИзмерения
			И КодЕдиницыПрослеживаемости = "166" Тогда
			ПоказыватьВесТовараПоСертификату = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВесИзСертификата.Видимость = ПоказыватьВесТовараПоСертификату;
	Элементы.НаименованиеЕдиницыПрослеживаемости.Видимость = ПоказыватьВесТовараПоСертификату;
	Элементы.ВесИзСертификата.АвтоОтметкаНезаполненного = (Объект.ВесПоСертификатуТовара = 0 И ПоказыватьВесТовараПоСертификату);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСерийПоУмолчаниюГИСМ()
	
	СерииНоменклатурыУНФ.УстановитьНастройкиСерийПоУмолчаниюГИСМ(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьНастроекСерийПриРаботеССертификатами()
	
	Если Не Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Возврат
	КонецЕсли;
	
	НастройкиВыполнены = Объект.ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Объект.ПолитикаУчетаСерий);
	Элементы.НадписьСерииВведены.Видимость = НастройкиВыполнены;
	Элементы.НадписьСерииНеВведены.Видимость = Не НастройкиВыполнены;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПодакцизныйТовар()
	
	МаркируемаяПродукцияПодакцизная = (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"))
								  Или (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"))
								  Или (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"))
								  Или ЗначениеЗаполнено(Объект.ВидАлкогольнойПродукции);
	Объект.ПодакцизныйТовар = МаркируемаяПродукцияПодакцизная;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияОбъектаПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		
		Объект.СчетУчетаЗатрат = ?(
			Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить(),
			ПланыСчетов.Управленческий.КоммерческиеРасходы,
			ПланыСчетов.Управленческий.НезавершенноеПроизводство
		);
		
	КонецЕсли;
	
	Если ФОУчетАлкогольнойПродукции Тогда
		Объект.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(Объект.СтранаПроисхождения) 
			И Объект.СтранаПроисхождения <> Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	// Подарочные сертификаты
	Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока;
	Объект.ИсключитьИзПрайсЛистов = (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	// Конец Подарочные сертификаты
	
	Если (ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации")
		И Объект.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Операция)
		ИЛИ Объект.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Работа Тогда
		Объект.ФиксированнаяСтоимость = Константы.РасчетСтоимостиОперацийПоНормеВремени.Получить()=Перечисления.ДаНет.Нет;
	Иначе
		Объект.ФиксированнаяСтоимость = Ложь;
	КонецЕсли;
	
	// Наборы
	Если Объект.ЭтоНабор Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаЦеныНабора) Тогда
			Объект.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВариантПечатиНабора) Тогда
			Объект.ВариантПечатиНабора = Перечисления.ВариантыПечатиНаборов.НаборИКомплектующие;
		КонецЕсли; 
	Иначе
		Объект.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.ПустаяСсылка();
		Объект.ВариантПечатиНабора = Перечисления.ВариантыПечатиНаборов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПоПереданнымОтборам()
	
	Если НЕ Параметры.Свойство("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура;
	Для Каждого ЭлементОтбора Из Параметры.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить
		КонецЕсли;
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		КонецЕсли;
		Если Не Объект.Свойство(ЭлементОтбора.ЛевоеЗначение) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
	КонецЦикла;
	
	Если СтруктураОтборов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОтборов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПродукцияВЕТИС()
	
	Если НЕ Параметры.Свойство("ПодконтрольнаяПродукцияВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если ФОУчетВЕТИС Тогда
		Объект.ПодконтрольнаяПродукцияВЕТИС = Параметры.ПодконтрольнаяПродукцияВЕТИС;
	КонецЕсли;
	
	Если Параметры.Свойство("НаименованиеНоменклатурыВЕТИС") Тогда
		Объект.Наименование = Параметры.НаименованиеНоменклатурыВЕТИС;
		Объект.НаименованиеПолное = Параметры.НаименованиеНоменклатурыВЕТИС;
	КонецЕсли;
	
	Если Параметры.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
		Объект.ЕдиницаИзмерения = Параметры.ЕдиницаИзмеренияВЕТИС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектАлкогольнаяПродукция()
	
	Если НЕ Параметры.Свойство("АлкогольнаяПродукцияЕГАИС") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование       = Параметры.НаименованиеНоменклатурыЕГАИС;
	Объект.НаименованиеПолное = Параметры.ПолноеНаименованиеНоменклатурыЕГАИС;
	
	Если ЗначениеЗаполнено(Параметры.ИмпортерЕГАИС) Тогда
		ИмпортерЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ИмпортерЕГАИС, "Контрагент");
		Если ТипЗнч(ИмпортерЕГАИС) = Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.ПроизводительИмпортерАлкогольнойПродукции = ИмпортерЕГАИС;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ПроизводительЕГАИС) Тогда
		ПроизводительЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПроизводительЕГАИС, "Контрагент");
		Если ТипЗнч(ПроизводительЕГАИС) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если ЗначениеЗаполнено(Объект.ПроизводительИмпортерАлкогольнойПродукции) Тогда
				Объект.Производитель = ПроизводительЕГАИС;
			Иначе
				Объект.ПроизводительИмпортерАлкогольнойПродукции = ПроизводительЕГАИС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ВидАлкогольнойПродукции = Параметры.ВидАлкогольнойПродукцииЕГАИС;
	Объект.ОбъемДАЛ = Параметры.ОбъемЕГАИС;
	Объект.Крепость = Параметры.КрепостьЕГАИС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПравДоступа()
	
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	
	РазрешеноРедактированиеЦен = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	РазрешенПросмотрЦен = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	РазрешенПросмотрПродаж = ПравоДоступа("Чтение", Метаданные.ЖурналыДокументов.ДокументыПоПродажам);
	
	РазрешеноРедактированиеНоменклатуры = ПравоДоступа("Добавление", ОбъектМетаданных) Или ПравоДоступа("Изменение",
		ОбъектМетаданных);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиФормы()
	
	ПоказыватьГрафикиПродажИЦен = НЕ УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("НеВыводитьОтчетыПоПродажамИЦенамВКарточкеНоменклатуры");
	Элементы.ФормаПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	Элементы.ДиаграммаПродажиКонтекстноеМенюПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	Элементы.ДиаграммаЦеныКонтекстноеМенюПоказыватьГрафикиПродажИЦен.Пометка = ПоказыватьГрафикиПродажИЦен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуФормы(ЗначениеНастройки, ИмяНастройки)
	РегистрыСведений.НастройкиПользователей.Установить(ЗначениеНастройки, ИмяНастройки,
		Пользователи.ТекущийПользователь());
КонецПроцедуры

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаСервере
Процедура ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры()

	Если Не ФОУчетАлкогольнойПродукции
		ИЛИ Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		Объект.ВидАлкогольнойПродукции = Неопределено;
		Объект.ПроизводительИмпортерАлкогольнойПродукции = Неопределено;
		Объект.Производитель = Неопределено;
	КонецЕсли;
	
	Объект.ВидАлкогольнойПродукции = Объект.КатегорияНоменклатуры.ВидАлкогольнойПродукции;
	Объект.ПроизводительИмпортерАлкогольнойПродукции = Объект.КатегорияНоменклатуры.ПроизводительИмпортерАлкогольнойПродукции;
	Объект.Производитель = Объект.КатегорияНоменклатуры.Производитель;
	
	Объект.ИмпортнаяАлкогольнаяПродукция = Объект.КатегорияНоменклатуры.ИмпортнаяАлкогольнаяПродукция;

КонецПроцедуры // ЗаполнитьРеквизитыАлкогольнойПродукцииПоНоменклатурнойГруппе()

&НаСервере
Процедура ЗаполнитьРеквизитыПодконтрольнойПродукцииПоКатегорииНоменклатуры()
	
	Если Не ФОУчетВЕТИС
		Или Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовВЕТИС = Новый Массив;
	МассивРеквизитовВЕТИС.Добавить("ПодконтрольнаяПродукцияВЕТИС");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьПроизводителяВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьИдентификаторПартииВЕТИСПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьДатуПроизводстваПартии");
	МассивРеквизитовВЕТИС.Добавить("ИспользоватьСрокГодностиПартии");
	МассивРеквизитовВЕТИС.Добавить("АвтоматическиГенерироватьПартии");
	
	Если Не ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		Для Каждого РеквизитВЕТИС Из МассивРеквизитовВЕТИС Цикл
			Объект[РеквизитВЕТИС] = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитВЕТИС Из МассивРеквизитовВЕТИС Цикл
		Если Не Объект[РеквизитВЕТИС] = Объект.КатегорияНоменклатуры[РеквизитВЕТИС] Тогда
			Объект[РеквизитВЕТИС] = Объект.КатегорияНоменклатуры[РеквизитВЕТИС];
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаПараметровВЕТИС.Доступность = Объект.ПодконтрольнаяПродукцияВЕТИС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыГИСМПоКатегорииНоменклатуры()
	
	Если Не ИспользуетсяМаркировка
		Или Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовГИСМ = Новый Массив;
	МассивРеквизитовГИСМ.Добавить("ВидМаркировки");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМВид");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМСпособВыпускаВОборот");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМРазмер");
	МассивРеквизитовГИСМ.Добавить("КиЗГИСМGTIN");
	МассивРеквизитовГИСМ.Добавить("ТНВЭДГИСМ");
	
	Если Не ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		Для Каждого РеквизитГИСМ Из МассивРеквизитовГИСМ Цикл
			Объект[РеквизитГИСМ] = ?(ТипЗнч(Объект[РеквизитГИСМ]) = Тип("Булево"), Ложь, Неопределено);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитГИСМ Из МассивРеквизитовГИСМ Цикл
		Если Не Объект[РеквизитГИСМ] = Объект.КатегорияНоменклатуры[РеквизитГИСМ] Тогда
			Объект[РеквизитГИСМ] = Объект.КатегорияНоменклатуры[РеквизитГИСМ];
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ВидМаркировки) Тогда Объект.ВидМаркировки = Перечисления.ВидыМаркировки.НеМаркируется КонецЕсли;
	
	Если Объект.ВидМаркировки = Перечисления.ВидыМаркировки.НеМаркируется Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Ложь;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Истина;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИСМППоКатегорииНоменклатуры()
	
	Если Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовИСМП = Новый Массив;
	МассивРеквизитовИСМП.Добавить("ВидПродукцииИС");
	
	Если Не ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		Для Каждого РеквизитИСМП Из МассивРеквизитовИСМП Цикл
			Объект[РеквизитИСМП] = ?(ТипЗнч(Объект[РеквизитИСМП]) = Тип("Булево"), Ложь, Неопределено);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитИСМП Из МассивРеквизитовИСМП Цикл
		Если Не Объект[РеквизитИСМП] = Объект.КатегорияНоменклатуры[РеквизитИСМП] Тогда
			Объект[РеквизитИСМП] = Объект.КатегорияНоменклатуры[РеквизитИСМП];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные о ценах при возникновении оповещения об изменении цены.
//
&НаСервере
Процедура ОбработкаОповещенияЗаписьВРегистреЦен()
	
	ДиаграммаЦеныПериод = Неопределено;
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	Области = Новый Массив;
	Области.Добавить("АктуальныеЦены");
	Области.Добавить("ДиаграммаЦены");
	ПолучитьДанныеФормы(Области);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияДопРеквизита()
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		ТекущийНаборСвойств = Объект.КатегорияНоменклатуры.НаборСвойств;
	Иначе
		ТекущийНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНаборСвойств);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("ВыбранДубльНоменклатуры") Тогда
		
		ОбработатьВыборДублей(РезультатЗакрытия.ВыбраннаяНоменклатура);
		Элементы.ДублиНаименование.Видимость = Ложь;
		Элементы.ДублиНаименованиеПолное.Видимость = Ложь;
		Элементы.ДублиАртикул.Видимость = Ложь;
		НоменклатураЗамененаНаДубль = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчанию(НовыйЭлемент = Ложь)
	
	ТипНоменклатуры = Объект.ТипНоменклатуры;
	
	Если Не НовыйЭлемент Тогда
		
		Объект.СрокПополнения = 0;
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ПроверятьЗаполнениеХарактеристики = Ложь;
		Объект.ИспользоватьПартии = Ложь;
		Объект.НормаВремени = 0;
		
		Если Элементы.СрокПополнения.Видимость Тогда
			Объект.СрокПополнения = 1;
		КонецЕсли;
		
	Иначе
		Если Элементы.СпособПополнения.Видимость Тогда
			Объект.СпособПополнения = ?(Не ЗначениеЗаполнено(Объект.СпособПополнения), ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка"), Объект.СпособПополнения);
		Иначе
			Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.МетодОценки.Видимость Тогда
		Объект.МетодОценки = ?(Не ЗначениеЗаполнено(Объект.МетодОценки), ПредопределенноеЗначение("Перечисление.МетодОценкиЗапасов.ПоСредней"), Объект.МетодОценки);
	КонецЕсли;
	
	Если Элементы.НаправлениеДеятельности.Видимость Тогда
		Объект.НаправлениеДеятельности = ?(Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности), ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление"), Объект.НаправлениеДеятельности);
	Иначе
		Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка");
	КонецЕсли;
	
	Если Элементы.Склад.Видимость Тогда
		Объект.Склад = ?(Не ЗначениеЗаполнено(Объект.Склад), ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад"), Объект.Склад);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗапасов) Тогда
		
		Объект.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если Не ЗначениеЗаполнено(Объект.ТипНоменклатуры)
			Или ЭтоЗапас() Или ЭтоСертификат() Тогда
			Объект.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.СырьеИМатериалы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		
		Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если Не ЗначениеЗаполнено(Объект.ТипНоменклатуры)
			Или ЭтоЗапас()
			Или ЭтоРабота()
			Или ЭтоОперация()
			Или ЭтоСертификат() Тогда
			Если ФОИспользоватьПодсистемуПроизводство Тогда
				Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");
			Иначе
				Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоУслуга() Тогда
			Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		
		Объект.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
		Если ЭтоСертификат() Тогда
			Объект.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеДоходы");
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ТоварнаяНоменклатураВЭД = Неопределено;
	Объект.ПрослеживаемыйТовар = Ложь;
	
	Если Элементы.СрокИсполненияЗаказа.Видимость Тогда
		Объект.СрокИсполненияЗаказа = ?(Не ЗначениеЗаполнено(Объект.СрокИсполненияЗаказа),1, Объект.СрокИсполненияЗаказа);
	Иначе
		Объект.СрокИсполненияЗаказа = 0;
	КонецЕсли;
	
	Если Элементы.ВидСтавкиНДС.Видимость Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ВидСтавкиНДС) Тогда
			
			Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС");
			Иначе
				Объект.ВидСтавкиНДС = ВидСтавкиНДСПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ЭтоЗапас() Тогда
		Объект.ВидАлкогольнойПродукции = Неопределено;
		Объект.ПроизводительИмпортерАлкогольнойПродукции = Неопределено;
		Объект.ОбъемДАЛ = 0;
	КонецЕсли;
	
	Если Не НовыйЭлемент Тогда
		ЗаполнитьЗначенияПоУмолчаниюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчаниюСервер()
	
	Если Элементы.СпособПополнения.Видимость И Не ЗначениеЗаполнено(Объект.СпособПополнения) Тогда
		Если ЗначениеЗаполнено(Объект.КатегорияНоменклатуры.СпособПополнения) Тогда
			Объект.СпособПополнения = Объект.КатегорияНоменклатуры.СпособПополнения;
		Иначе
			Объект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЗапас()
	Возврат Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
КонецФункции

&НаКлиенте
Функция ЭтоУслуга()
	Возврат Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
КонецФункции

&НаКлиенте
Функция ЭтоРабота()
	Возврат Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
КонецФункции

&НаКлиенте
Функция ЭтоОперация()
	Возврат Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция");
КонецФункции

&НаКлиенте
Функция ЭтоСертификат()
	Возврат Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНаборБезРаспределенияЦен(Объект)
	Возврат Объект.ЭтоНабор И Объект.СпособРасчетаЦеныНабора=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих");
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыКопирования()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ИсточникКопирования);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И НЕ ХарактеристикиНоменклатуры.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Владелец = &Номенклатура
	|	И НЕ Спецификации.ПометкаУдаления
	|	И НЕ Спецификации.Недействителен
	|	И Спецификации.Заказ В (ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КомплектацииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КомплектацииНоменклатуры КАК КомплектацииНоменклатуры
	|ГДЕ
	|	КомплектацииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ КомплектацииНоменклатуры.ПометкаУдаления
	|	И НЕ КомплектацииНоменклатуры.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоставНаборов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &Номенклатура";
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьЕдиницыИзмеренияВОбъектеКопирования = Не Результат.Получить(0).Пустой();
	ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования = Не Результат.Получить(1).Пустой();
	ЕстьСпецификацииВОбъектеКопирования = Не Результат.Получить(2).Пустой();
	ЕстьКомплектацииВОбъектеКопирования = Не Результат.Получить(3).Пустой();
	ЕстьСоставыНаборовВОбъектеКопирования = Не Результат.Получить(4).Пустой();
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяКопированиеДополнительныхДанных()
	
	Если ЕстьЕдиницыИзмеренияВОбъектеКопирования Тогда
		Возврат Истина;
	КонецЕсли; 	
	
	Если ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования И Объект.ИспользоватьХарактеристики Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЕстьСпецификацииВОбъектеКопирования Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЕстьКомплектацииВОбъектеКопирования Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЕстьСоставыНаборовВОбъектеКопирования И Объект.ЭтоНабор Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура КопироватьДополнительныеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьЕдиницыИзмерения = Результат.КопироватьЕдиницыИзмерения;
	КопироватьХарактеристики = Результат.КопироватьХарактеристики;
	КопироватьСпецификации = Результат.КопироватьСпецификации;
	КопироватьКомплектации = Результат.КопироватьКомплектации;
	КопироватьСоставНаборов = Результат.КопироватьСоставНаборов;
	
	Если КопироватьХарактеристики И НЕ Объект.ИспользоватьХарактеристики Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для копирования установлен флаг использования характеристик'"), , "ИспользоватьХарактеристики");
		Объект.ИспользоватьХарактеристики = Истина;
		ИспользоватьХарактеристикиПриИзменении(Элементы.ИспользоватьХарактеристики);
	КонецЕсли; 
	
	Если КопироватьСоставНаборов И НЕ Объект.ЭтоНабор Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для копирования установлен признак набора'"), , "ЭтоНабор");
		Объект.ЭтоНабор = Истина;
		Если МожноИзменитьПризнакНабора(Объект.Ссылка, Объект.ЭтоНабор) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаЦеныНабора) Тогда
				Объект.СпособРасчетаЦеныНабора = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(Объект.ВариантПечатиНабора) Тогда
				Объект.ВариантПечатиНабора = ПредопределенноеЗначение("Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие");
			КонецЕсли;
			УправлениеФормой();
			ПодключитьОбработчикОжидания("ОбработкаОповещенияИзменениеСоставаНабораКлиент", 0.5, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураДанных = Новый Структура("ЕдиницыИзмерения, Характеристики, Спецификации, Комплектации, СоставНаборов");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Результат);
	ДанныеКопирования = Новый ФиксированнаяСтруктура(СтруктураДанных);
	
	НастройкиКопированияЗаданы = Истина;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСвязаннуюИнформацию()
	
	Если НЕ ЗначениеЗаполнено(ИсточникКопирования) Тогда
		Возврат;
	КонецЕсли; 
	
	Если КопироватьЕдиницыИзмерения Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ДанныеКопирования.ЕдиницыИзмерения);
		Запрос.УстановитьПараметр("Номенклатура", ИсточникКопирования);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВесИОбъемЕдиницТоваров.Вес КАК Вес,
		|	ВесИОбъемЕдиницТоваров.Объем КАК Объем,
		|	ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
		|ГДЕ
		|	ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения В(&ЕдиницаИзмерения)
		|	И ВесИОбъемЕдиницТоваров.Номенклатура = &Номенклатура";
		ТаблицаВесОбъем = Запрос.Выполнить().Выгрузить();
		СохранятьВесОбъем = ТаблицаВесОбъем.Количество()>0;
		НачатьТранзакцию();
		Попытка
			Для каждого Элемент Из ДанныеКопирования.ЕдиницыИзмерения Цикл
				НовыйЭлемент = Элемент.Скопировать();
				НовыйЭлемент.Владелец = Объект.Ссылка;
				НовыйЭлемент.Записать();
				Если СохранятьВесОбъем Тогда
					СтрокаВесОбъем = ТаблицаВесОбъем.Найти(Элемент, "ЕдиницаИзмерения");
					Если СтрокаВесОбъем<>Неопределено Тогда
						Запись = РегистрыСведений.ВесИОбъемЕдиницТоваров.СоздатьМенеджерЗаписи();
						Запись.Номенклатура = Объект.Ссылка;
						Запись.ЕдиницаИзмерения = НовыйЭлемент.Ссылка;
						Запись.Вес = СтрокаВесОбъем.Вес;
						Запись.Объем = СтрокаВесОбъем.Объем;
						Запись.Записать(Истина);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			КопироватьЕдиницыИзмерения = Ложь;
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось скопировать единицы измерения.'"));
		КонецПопытки; 
	КонецЕсли;
	
	СоответствиеХарактеристик = Новый Соответствие;
	Если КопироватьХарактеристики Тогда
		НачатьТранзакцию();
		Попытка
			Для каждого Элемент Из ДанныеКопирования.Характеристики Цикл
				НовыйЭлемент = Элемент.Скопировать();
				НовыйЭлемент.Владелец = Объект.Ссылка;
				НовыйЭлемент.Записать();
				СоответствиеХарактеристик.Вставить(Элемент, НовыйЭлемент.Ссылка);
			КонецЦикла;
			КопироватьХарактеристики = Ложь;
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось скопировать характеристики.'"));
		КонецПопытки; 
	КонецЕсли; 
	
	Если КопироватьСпецификации Тогда
		НачатьТранзакцию();
		Попытка
			Для каждого Элемент Из ДанныеКопирования.Спецификации Цикл
				НовыйЭлемент = Элемент.Скопировать();
				НовыйЭлемент.Владелец = Объект.Ссылка;
				Если ЗначениеЗаполнено(НовыйЭлемент.ХарактеристикаПродукции) Тогда
					НоваяХарактеристика = СоответствиеХарактеристик.Получить(НовыйЭлемент.ХарактеристикаПродукции);
					Если ЗначениеЗаполнено(НоваяХарактеристика) Тогда
						НовыйЭлемент.ХарактеристикаПродукции = НоваяХарактеристика;
					КонецЕсли; 
				КонецЕсли; 
				НовыйЭлемент.Записать();
			КонецЦикла;
			КопироватьСпецификации = Ложь;
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось скопировать спецификации.'"));
		КонецПопытки; 
	КонецЕсли; 
	
	Если КопироватьКомплектации Тогда
		НачатьТранзакцию();
		Попытка
			Для каждого Элемент Из ДанныеКопирования.Комплектации Цикл
				НовыйЭлемент = Элемент.Скопировать();
				НовыйЭлемент.Владелец = Объект.Ссылка;
				Если ЗначениеЗаполнено(НовыйЭлемент.Характеристика) Тогда
					НоваяХарактеристика = СоответствиеХарактеристик.Получить(НовыйЭлемент.Характеристика);
					Если ЗначениеЗаполнено(НоваяХарактеристика) Тогда
						НовыйЭлемент.Характеристика = НоваяХарактеристика;
					КонецЕсли; 
				КонецЕсли; 
				НовыйЭлемент.Записать();
			КонецЦикла;
			КопироватьКомплектации = Ложь;
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось скопировать комплектации.'"));
		КонецПопытки; 
	КонецЕсли; 
	
	Если КопироватьСоставНаборов Тогда
		ХарактеристикиКопирования = Новый Массив;
		КопироватьОбщие = Ложь;
		КопироватьНаборНоменклатуры = Ложь;
		Для каждого Элемент Из ДанныеКопирования.СоставНаборов Цикл
			Если Элемент=Неопределено Тогда
				КопироватьОбщие = Истина;
			ИначеЕсли Элемент=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
				КопироватьНаборНоменклатуры = Истина;
			Иначе
				ДобавитьЭлементМассива(ХарактеристикиКопирования, Элемент);
			КонецЕсли; 
		КонецЦикла; 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсточникКопирования", ИсточникКопирования);
		Запрос.УстановитьПараметр("Характеристики", ХарактеристикиКопирования);
		Запрос.УстановитьПараметр("КопироватьОбщие", КопироватьОбщие);
		Запрос.УстановитьПараметр("КопироватьНаборНоменклатуры", КопироватьНаборНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
		|	СоставНаборов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СоставНаборов.Общий КАК Общий,
		|	СоставНаборов.Количество КАК Количество,
		|	СоставНаборов.ДоляСтоимости КАК ДоляСтоимости,
		|	СоставНаборов.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов
		|ГДЕ
		|	СоставНаборов.НоменклатураНабора = &ИсточникКопирования
		|	И (СоставНаборов.ХарактеристикаНабора В (&Характеристики)
		|			ИЛИ СоставНаборов.Общий
		|				И &КопироватьОбщие
		|			ИЛИ НЕ СоставНаборов.Общий
		|				И СоставНаборов.ХарактеристикаНабора = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И &КопироватьНаборНоменклатуры)";
		НачатьТранзакцию();
		Попытка
			Набор = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
			Набор.Отбор.НоменклатураНабора.Установить(Объект.Ссылка);
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			Для каждого Запись Из Набор Цикл
				Запись.НоменклатураНабора = Объект.Ссылка;
				Если НЕ ЗначениеЗаполнено(Запись.ХарактеристикаНабора) Тогда
					Продолжить;
				КонецЕсли; 
				НоваяХарактеристика = СоответствиеХарактеристик.Получить(Запись.ХарактеристикаНабора);
				Если ЗначениеЗаполнено(НоваяХарактеристика) Тогда
					Запись.ХарактеристикаНабора = НоваяХарактеристика;
				КонецЕсли; 
			КонецЦикла; 
			Набор.Записать(Истина);
			КопироватьСоставНаборов = Ложь;
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось скопировать состав набора.'"));
		КонецПопытки; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьЭлементМассива(Массив, Значение)
	
	Если Массив.Найти(Значение)<>Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Массив.Добавить(Значение);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВысотуЗаголовковДополнительныхРеквизитов()
	
	Для каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Продолжить;
		КонецЕсли;
		Элемент.ВысотаЗаголовка = 2;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИтераторСтрокой(Итератор)
	
	Возврат Формат(Итератор, "ЧГ=0");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшЗначенийПервичнымиЗначениями()
	
	// Прослеживаемость
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	Если ЗаблокированныеРеквизиты.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораРеквизитовДляРазблокирования", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.РазблокированиеРеквизитов", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
	Иначе
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.ПоказатьПредупреждениеВсеВидимыеРеквизитыРазблокированы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРеквизитовДляРазблокирования(РазблокируемыеРеквизиты, Контекст) Экспорт
	
	Если ТипЗнч(РазблокируемыеРеквизиты) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, РазблокируемыеРеквизиты);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименований.ЗаполнитьСписокСвойствОбъекта(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииДопРеквизита(ЭтотОбъект, Элемент);
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗаписьВРегистреЦенКлиент()
	
	ОбработкаОповещенияЗаписьВРегистреЦен();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
// @skip-warning
&НаКлиенте
Процедура Подключаемый_НажатиеРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
		
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиРаботаСНоменклатурой(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь, 
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьНоменклатуру(ЭтотОбъект);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, ПодготовитьДанныеФормы(), 
		Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ИзменениеТекстаРедактированияРаботаСНоменклатурой(Элемент, Текст, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИзменениеТекстаСобратьСтрокуПоиска(ЭтотОбъект, Текст, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПослеЗаписиРаботаСНоменклатурой()
	
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатурыПродолжение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт 
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(
		ДанныеОбъекта, ДополнительныеПараметры, ПодготовитьДанныеФормы(),
			Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеФормы()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
			
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
			
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти

#Область ФоновоеЗаданиеПолучениеДанных

&НаКлиенте
Процедура Подключаемый_ЗапуститьФоновоеЗаданиеОбновитьДиаграммы()
	
	ОбновитьДиаграммыСервер();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммыСервер()

	ДиаграммаЦеныПериод = Неопределено;
	ДиаграммаПродажиПериод = Неопределено;
	ДиаграммаЦеныЗаполнитьКоманднуюПанель();
	
	Области = Новый Массив;
	Области.Добавить("ДиаграммаЦены");
	Области.Добавить("ДиаграммаПродажи");
	
	ПолучитьДанныеФормы(Области, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ФоновоеЗаданиеЗапущено = Ложь;
		ФоновоеЗаданиеВыполнено = Истина;
		
		ПолучитьРезультатЗапросаИОбновитьДиаграммы(Результат.АдресРезультата);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Отменено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отменено");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатЗапросаИОбновитьДиаграммы(АдресРезультата)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		ОбновитьЦеныОстаткиДиаграммы(РезультатВыполнения.РезультатЗапроса, РезультатВыполнения.ПараметрыВывода);	
		
		УдалитьИзВременногоХранилища(АдресРезультата);
		РезультатВыполнения = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеНаСервере(Запрос, ПараметрыВывода)
	
	Если МонопольныйРежим() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено
		И ЗначениеЗаполнено(ФоновоеЗаданиеДлительнаяОперация)
		И ФоновоеЗаданиеДлительнаяОперация.Свойство("ИдентификаторЗадания")		
		И НЕ ЗаданиеВыполнено(ФоновоеЗаданиеДлительнаяОперация.ИдентификаторЗадания) 
		Тогда
		
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТекстЗапроса", Запрос.Текст);
	ПараметрыПроцедуры.Вставить("ПараметрыЗапроса", Запрос.Параметры);
	ПараметрыПроцедуры.Вставить("ПараметрыВывода", ПараметрыВывода);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление диаграмм в карточке номенклатуры'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;
	
	ФоновоеЗаданиеДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Справочники.Номенклатура.ДанныеДиаграмм", 
		ПараметрыПроцедуры, ПараметрыВыполнения);	
	
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если ФоновоеЗаданиеДлительнаяОперация.Статус = "Выполнено" Тогда
		ФоновоеЗаданиеВыполнено = Истина;
		ОбновитьЦеныОстаткиДиаграммы(ПолучитьИзВременногоХранилища(ФоновоеЗаданиеДлительнаяОперация.АдресРезультата).РезультатЗапроса, ПараметрыВывода);
	Иначе
		 // иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеВыполнено = Ложь;
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьЗавершениеДлительнойОперации", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры

#КонецОбласти
