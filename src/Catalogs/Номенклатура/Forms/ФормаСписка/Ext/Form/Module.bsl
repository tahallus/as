
#Область ПеременныеФормы

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СтруктураДанныхНоменклатурыДляРежимаОстатки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПередачаТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ПередачаТоваровМеждуОрганизациями");
	
	УстановитьУсловноеОформление();
	
	Элементы.СписокЗапасы.РежимВыбора = Параметры.РежимВыбора;
	
	РежимВыбора = Параметры.РежимВыбора;

	Если Параметры.Свойство("МножественныйВыбор") И ЗначениеЗаполнено(Параметры.МножественныйВыбор) Тогда
		ВыборНесколькихЗначений = Параметры.МножественныйВыбор;
	КонецЕсли;
	
	ВыборГрупп = ?(Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы, Истина, Ложь);
	
	// ИнтеграцияГосИС
	// добавляем отбор по видам продукции с условием ИЛИ
	Если Параметры.Свойство("ОтборВидПродукцииИС") Тогда
		
		ГруппаВидыПродукции = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокЗапасы.Отбор, НСтр("ru='Виды продукции ИС'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВидыПродукции, "ВидПродукцииИС", Параметры.ОтборВидПродукцииИС, ВидСравненияКомпоновкиДанных.ВСписке, НСтр("ru='Вид продукции ИС'"), Истина);
		
	КонецЕсли;
	// Конец ИнтеграцияГосИС
	
	Если Параметры.Свойство("ПодконтрольнаяПродукцияВЕТИС") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗапасы,
			"ПодконтрольнаяПродукцияВЕТИС", Параметры.ПодконтрольнаяПродукцияВЕТИС, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Номенклатура, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Если Элементы.Найти("СписокГрупповоеИзменениеОбъектов") <> Неопределено Тогда
		
		МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокГрупповоеИзменениеОбъектов", "Видимость", МожноРедактировать);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаСпискаНоменклатуры(ЭтотОбъект, Элементы.ГруппаСтрокаПоискаЗапасы1СНоменклатура, Элементы.СписокЗапасы);
	ДополнитьСвойстваКомандСервиса1СНоменклатура();
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	ПеречитатьЗначенияКонстантОбновитьФорму();
	
	//Определение вида цен и периода для списков
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		ПериодЦен = Параметры.Период;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидСкидкиНаценки") Тогда
		ВидСкидкиНаценки = Параметры.ВидСкидкиНаценки;
	КонецЕсли;

	ЕстьДоступКЦенам = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	ОграничениеДоступаЛупа = НЕ ПравоДоступа("Просмотр", Метаданные.Справочники.КатегорииНоменклатуры);
	
	Если Параметры.ДополнительныеПараметры.Свойство("ТипВладельца") Тогда
		ТипВладельца = Параметры.ДополнительныеПараметры.ТипВладельца;
	КонецЕсли;
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
	ИмяФормы,
	"ВключаяВложенные",
	Ложь
	);
	
	ИспользоватьСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ВидОтбораПоСегменту = Перечисления.ВидыОтборовНоменклатуры.СегментыНоменклатуры;
	
	ЗаполнитьДеревоКатегорий();
	ЗаполнитьДеревоИерархии();
	ЗаполнитьДеревоСегментов();
	
	УчетПоКомпанииВЦелом = Константы.УчетПоКомпании.Получить();
	
	ЭтоПодбор = ?(Параметры.Свойство("ЭтоПодбор"), Истина, Ложь);
	
	ИспользоватьВидыЦенКонтрагентов = Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить();
	
	Если ЭтоПодбор Тогда
		
		Если Параметры.Свойство("ПечатьЭтикетокИЦенников") Тогда
			ПечатьЭтикетокИЦенников = Параметры.ПечатьЭтикетокИЦенников;
		КонецЕсли;
		
		Если Параметры.Свойство("ТипВладельца") Тогда
			
			РаботаСЗакупками = ЭтоРаботаСЗакупками(Параметры.ТипВладельца) И ИспользоватьВидыЦенКонтрагентов;;
			
			ТипВладельца = Параметры.ТипВладельца;
			
			Если Не РаботаСЗакупками Тогда
				ЗаполнятьКолонкуРезерв = ЗаполнениеКолонкиРезерв(Параметры.ТипВладельца);
			КонецЕсли;
			
		КонецЕсли;
		Если Параметры.Свойство("НеПоказыватьИнформациюПоСкладуИРезервам") Тогда
			НеПоказыватьИнформациюПоСкладуИРезервам = Параметры.НеПоказыватьИнформациюПоСкладуИРезервам;
		КонецЕсли;
		
	ИначеЕсли Параметры.РежимВыбора Тогда
		Если Параметры.ДополнительныеПараметры.Свойство("ТипВладельца") Тогда
			РаботаСЗакупками = ЭтоРаботаСЗакупками(Параметры.ДополнительныеПараметры.ТипВладельца) И ИспользоватьВидыЦенКонтрагентов;;
		КонецЕсли;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	Если Параметры.Свойство("СкидкиНаценкиВидны") Тогда
		СкидкиНаценкиВидны = Параметры.СкидкиНаценкиВидны;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидОперации") Тогда
		ВидОперации = Параметры.ВидОперации;
		ПодборНоменклатурыВДокументах.УстановитьПараметрыВыбораПартий(Элементы.КорзинаРасшифровкаПартия, ВидОперации);
	КонецЕсли;
	
	Если Параметры.Свойство("ВидЦен") И Не ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = Параметры.ВидЦен;
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодЦен") И Не ЗначениеЗаполнено(ПериодЦен) Тогда
		ПериодЦен = Параметры.ПериодЦен;
	КонецЕсли;
	
	Если Не Параметры.РежимВыбора И НЕ Элементы.Найти("Корзина") = Неопределено
		И Элементы.Корзина.Видимость И Не ПоказыватьКорзину Тогда
		ПоказыватьКорзину = Истина;
	КонецЕсли;
	
	ИспользоватьМинимальныеЦены = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ИмяФормыВладельца")
		И ЦенообразованиеСерверПовтИсп.ИспользоватьМинимальныеЦеныНаФормеПодбора(Параметры.ИмяФормыВладельца, ЭтоПодбор);
		
	Если НЕ ИспользоватьМинимальныеЦены Тогда
		
		ПоказыватьМинимальныеЦены = Ложь;
		
	КонецЕсли;
	
	ПоказыватьЦены = ПоказыватьЦены И ЕстьДоступКЦенам;
	
	УстановитьТипПоляОтбораПоЦенам();
	
	//Колонка Количество нужна, если включен отбор "В наличии", даже если сама колонка Количество не показывается
	ИспользоватьКоличествоВСписке = ПоказыватьОстатки ИЛИ ОтборОстатки=2;
	
	ПереопределитьТекстЗапросаВСписках();
	
	Если ЗначениеЗаполнено(ГруппаКатегория) Тогда
		ОтборКатегорииТекущая = ГруппаКатегория;
		ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	КонецЕсли;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	РазныеВалюты = (ЭтоПодбор И Не ВалютаДокумента = ВалютаПодбора) Или (Не ЭтоПодбор И УчетВалютныхОпераций);
	
	УстановитьНастройкиФормыПриСоздании(Параметры);
	УстановитьОтборНедействительнаяНоменклатура(ЭтотОбъект);
	
	Если ЕстьДоступКЦенам Тогда
		УстановитьВидЦенДляСписков(Ложь);
	КонецЕсли;
	
	УстановитьПараметрыЗапросовСписков();
	
	Если ОтборОстатки = 2 Тогда
		УстановитьОтборСпискаОстаткиСервер(ЭтаФорма.СписокЗапасы, 2);
	КонецЕсли;
		
	Если ЦенаОт<>0 ИЛИ ЦенаДо<>0 Тогда
		УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо, Истина);
	КонецЕсли;
	
	Параметры.Свойство("ЭтоЗагрузкаИзВнешнегоИсточника", ЭтоЗагрузкаИзВнешнегоИсточника);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ПраваяПанель.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.ДокументСчетНаОплатуСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументЗаказНарядСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументАктВыполненныхРаботСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументЗаказПоставщикуСоздатьИзНоменклатуры.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("НоменклатураИсточник") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗапасы, "Ссылка", Параметры.Отбор.НоменклатураИсточник, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли; 
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// КонецМобильныйКлиент
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументЗаказПокупателяСоздатьИзКорзиныЗаказНаряд", "Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументЧекККМ", "Видимость", ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж"));
	КонецЕсли;
	
	Элементы.ДеревоОстатки.РежимВыбора = Элементы.СписокЗапасы.РежимВыбора;
	
	ОбновитьЗаголовокКнопкиСозданияДокумента();
	
	ДоступноСозданиеДокументовРазделаЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();
	ДоступноСозданиеДокументовРазделаПродажи = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи();
	ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	ПолныеПрава = Пользователи.ЭтоПолноправныйПользователь();
	
	// Полнотекстовый поиск
	ИспользоватьПолнотекстовыйПоиск = Константы.ИспользоватьПолнотекстовыйПоиск.Получить()
									И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
		Если НЕ ИндексПолнотекстовогоПоискаАктуален Тогда
			// Считаем актуальным индекс в пределах дня, так как для более частых обновлений можно настроить регламентное
			// задание.
			ИндексПолнотекстовогоПоискаАктуален = НачалоДня(ПолнотекстовыйПоиск.ДатаАктуальности()) = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиПоиска = 1 И Не ИспользоватьПолнотекстовыйПоиск Тогда
		НастройкиПоискаКакИскать = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ТипСтруктурнойЕдиницыВОтборе = ОтборСклад.ТипСтруктурнойЕдиницы;
	КонецЕсли;
	
	ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(ОтборСклад);

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьВозможностьВыбораГруппыВПобореСКД(ЭтаФорма.ВладелецФормы);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Если ЭтоЗагрузкаИзВнешнегоИсточника = Истина Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника", 0.2, Истина);
		
	КонецЕсли;
	
	Если ПраваяПанельСвернута Тогда
		СвернутьРазвернутьПанельОтборовКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ РазрешитьЗакрытие ИЛИ Корзина.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПодбор Тогда
		Возврат
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПеренестиТовары",
		ЭтотОбъект);
		
	ПоказатьВопрос(Оповещение,
		НСтр("ru = 'В корзине остались несохраненные товары. Продолжить закрытие формы?'"),
		РежимДиалогаВопрос.ОКОтмена,
		0,
		КодВозвратаДиалога.ОК,
		НСтр("ru = 'Подбор товаров'")
	);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НоменклатураГруппа" Тогда
		
		НоваяГруппа = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяГруппа = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяГруппа = Параметр;
		КонецЕсли;
		
		ЗаполнитьДеревоИерархии(НоваяГруппа);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ПеречитатьЗначенияКонстантОбновитьФорму();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_КатегорииНоменклатуры" Тогда
		
		НоваяКатегория = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяКатегория = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяКатегория = Параметр;
		КонецЕсли;
		
		ЗаполнитьДеревоКатегорий(НоваяКатегория);
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Если Параметр[1] = Неопределено Тогда
				Данные = Новый Структура("Штрихкод, Количество", Параметр[0],1); // Достаем штрихкод из основных данных
			Иначе
				Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1],1); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученШтрихкод(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаНоменклатуры Тогда
		Если Параметр.СозданныеОбъекты.Количество() > 0 Тогда
			Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = Параметр.СозданныеОбъекты[0].Номенклатура;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().СопоставлениеНоменклатуры Тогда	
		Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ТекущийЭлемент = Элементы[ТекущаяСтраницаНоменклатуры];
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" 
		Или Элементы.ОтборИерархия.ТекущиеДанные = Неопределено 
		Или Не ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
	НовоеПредставление = Элементы.ОтборИерархия.ТекущиеДанные.Представление;
	
	ГруппаКатегория = НовоеЗначение;
	
	Для Каждого элОтбора Из ЭтотОбъект[ТекущаяСтраницаНоменклатуры].КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		
		Если Не ТипЗнч(элОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить
		КонецЕсли;
		
		Если Строка(элОтбора.ЛевоеЗначение) = "Родитель" Тогда
			
			Если элОтбора.ПравоеЗначение = НовоеЗначение И элОтбора.Представление = НовоеПредставление И элОтбора.Использование Тогда
				Возврат;
			Иначе
				УстановитьОтборПоИерархии();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//отбор не был установлен ранее, и текущее значение отбора = <Все группы>
	Если НЕ Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеВсеГруппы() Тогда
		УстановитьОтборПоИерархии();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаИерархии = Неопределено
		Или СтрокаИерархии.Представление = ПредставлениеВсеГруппы()
		Или СтрокаИерархии.Представление = ПредставлениеНетГруппы() Тогда
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИерархии.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Группа, в которую переносим
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.Представление = ПредставлениеВсеГруппы() Тогда
		Возврат;
	КонецЕсли;
	
	// Строки, которые переносим, в т.ч. это может быть группа из списка иерархии
	спПеренести = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
		
		Если Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы И 
			ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			спПеренести.Добавить(ВыделеннаяСтрока);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЦикла; 
	
	ПеренестиВГруппу(спПеренести, СтрокаИерархии.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.Представление = ПредставлениеВсеГруппы() Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//Категории не перетаскиваем
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОстаткиПриИзменении(Элемент)
	
	Если Не ПоказыватьОстатки Тогда
		ОтборОстатки = 0;
	КонецЕсли;
		
	Если Не ПоказыватьОстатки И ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		
		Элементы.ОстаткиПредставлениеОтбора.Видимость = Ложь;
		Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
		
		ПоказыватьОстаткиПриИзмененииДеревоОстаткиСервер(ПредыдущаяСтраницаСписка);
		
		ИдентификаторСтроки = ИдентификаторТекущейСтроки;
		
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
		
		Возврат
		
	КонецЕсли;
	
	ПоказыватьОстаткиПриИзмененииСервер();
	
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	Если ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
	Если ОстаткиВидимость Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказыватьОстаткиПриИзмененииСервер()
	
	Если Не ОтборОстатки = 1 И ДанныеМетокПП.Количество() Тогда
		
		СписокОтбораХарактеристики.Очистить();
		
		УстановитьПараметрСписка(СписокЗапасы, "БезОтбора", Истина);
		УстановитьПараметрСписка(СписокЗапасы, "Характеристика", СписокОтбораХарактеристики);
		
	КонецЕсли;
	
	Если ОтборКатегорииТекущая.ЭтоГруппа Тогда
		Элементы.ГруппаОтборХарактеристика.Видимость = Ложь
	Иначе
		Элементы.ГруппаОтборХарактеристика.Видимость = ОтборОстатки = 1
	КонецЕсли;
	
	ПереформироватьЗапросыСписков();
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьОстаткиПриИзмененииДеревоОстаткиСервер(ПредыдущаяСтраницаСписка)
	УстановитьСтраницуСпискаНоменклатуры(ПредыдущаяСтраницаСписка);
	ПереформироватьЗапросыСписков();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЦеныПриИзменении(Элемент)
	
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьЦены", ПоказыватьЦены);
	
	Если Не ПоказыватьЦены Тогда
		ОтборПоЦенам = Ложь;
		ЦенаОт = 0;
		ЦенаДо = 0;
	Иначе
		Если ЦенаОт<>0 ИЛИ ЦенаДо<>0 Тогда
			ОтборПоЦенам = Истина;
		Иначе
			ОтборПоЦенам = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Отбор на список товаров.
	ГруппаОтборПоКоличеству = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтаФорма["СписокЗапасы"].КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЦенаОт,
		"ЦенаОт",
		ЦенаОт<>0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ЦенаДо,
		"ЦенаДо",
		ЦенаДо<>0);
		
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборПоЦенам", ОтборПоЦенам);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ПоказыватьЦеныПриИзмененииНаСервере(Истина);
		РазвернутьВеткуДерева(ДеревоОстатки);
		Возврат;
	КонецЕсли;
	
	ПоказыватьЦеныПриИзмененииНаСервере();
	
	СпозиционироватьсяНаСтрокеСписка();
	ОбновитьНадписьПодобраноТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьЦеныПриИзмененииНаСервере(ЭтоДерево = Ложь)

	Если ЭтоДерево Тогда
		УстановитьВидимостьИДоступность();
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		Возврат
	КонецЕсли;
	
	ОтборВидЦенСервер();
	ПереопределитьТекстЗапросаВСписках();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОстаткиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоОстатки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ДеревоОстаткиКонтекстноеМенюСвернутьВеткуДерева.Доступность = Ложь;
		Элементы.ДеревоОстаткиКонтекстноеМенюРазвернутьВеткуДерева.Доступность = Ложь;
		Элементы.ДеревоОстаткиКонтекстноеМенюИзменитьНоменклатуруДерево.Видимость = Ложь;
	Иначе
		Элементы.ДеревоОстаткиКонтекстноеМенюСвернутьВеткуДерева.Доступность = Истина;
		Элементы.ДеревоОстаткиКонтекстноеМенюРазвернутьВеткуДерева.Доступность = Истина;
		
		Если Элементы.СписокЗапасы.РежимВыбора И Строка(ТекущиеДанные.Показатель) = Строка(ТекущиеДанные.Ссылка) Тогда
			 Элементы.ДеревоОстаткиКонтекстноеМенюИзменитьНоменклатуруДерево.Видимость = Истина;
		 Иначе
			 Элементы.ДеревоОстаткиКонтекстноеМенюИзменитьНоменклатуруДерево.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьКорзину И ДоступныПродажи И Не ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.КартинкаКорзина = 1 Тогда
			Элементы.ДеревоОстаткиКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.ДеревоОстаткиКонтекстноеМенюУдалитьИзКорзины.Видимость = Истина;
		ИначеЕсли ТекущиеДанные.КартинкаКорзина = 0 Тогда
			Элементы.ДеревоОстаткиКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.ДеревоОстаткиКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		Иначе
			Элементы.ДеревоОстаткиКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
			Элементы.ДеревоОстаткиКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ДеревоОстаткиКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
		Элементы.ДеревоОстаткиКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	СформироватьКопиюДереваСОтбором();
	РазвернутьВеткуДерева(ДеревоОстатки);
	ДобавитьВИсториюПоиска("ДеревоОстатки");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаРасширенногоПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	ДобавитьВИсториюПоиска("СписокЗапасы");
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыНажатие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги недоступны для наборов'") 
		Или НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги доступны только для запасов'")
		Или НадписьАналогиНоменклатуры = НСтр("ru = '<номенклатура не выбрана>'") Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборАналоги(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьСопутствующийТоварНажатие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если НадписьСопутствующийТовар = НСтр("ru = '<номенклатура не выбрана>'") Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьОтборСопутствующиеТовары(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЦенаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЕстьДоступКЦенам Тогда 
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ФормаЭлемента = ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы);
	
	Отбор = Новый Структура("Номенклатура", ТекущиеДанные.Ссылка);
	ПараметрыФормы= Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.Форма.ЦеныНоменклатуры", ПараметрыФормы, ФормаЭлемента, Истина, ФормаЭлемента.Окно);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ДеревоОстаткиКартинкаКорзина" Тогда
			
		Если ТекущиеДанные.ПартияДляИсключения Или ТекущиеДанные.Недоступен Тогда
			
			СтрокаСообщения = НСтр("ru = '%1%. Выберите доступную строку.'");
			
			Если ТекущиеДанные.ПартияДляИсключения Тогда
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Статус партии не соответствует операции объекта'"));
			ИначеЕсли ТекущиеДанные.Недоступен И ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Тип склада не соответствует операции объекта'"));
			ИначеЕсли ТекущиеДанные.Недоступен Тогда
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Номенклатура поставщика не может быть выбрана'"));
			КонецЕсли;
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
			
			Возврат
			
		КонецЕсли;
		
		ДобавитьВКорзинуСписок(Истина);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров= Новый Структура("Организация, Номенклатура, Характеристика, Партия, СтруктураНастроек,
											|Склад, ЕдиницаИзмерения, ОтборПоПартии, ОтборПоСкладу, ОтборПоХарактеристике, ТипНоменклатуры, Ячейка");
	
	СтруктураПараметров.Номенклатура = ТекущиеДанные.Ссылка;
	СтруктураПараметров.Характеристика = ТекущиеДанные.Характеристика;
	СтруктураПараметров.Партия = ТекущиеДанные.Партия;
	СтруктураПараметров.Организация = ОтборОрганизация;
	СтруктураПараметров.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	СтруктураПараметров.ТипНоменклатуры = ТекущиеДанные.ТипНоменклатуры;
	СтруктураПараметров.Ячейка = ТекущиеДанные.Ячейка;
	
	ПоказательХарактеристика = ?(ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") 
								Или ТекущиеДанные.Показатель = "<характеристика не указана>", Истина, Ложь);
	ПоказательПартия = ?(ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.ПартииНоменклатуры") 
								Или ТекущиеДанные.Показатель = "<партия не указана>", Истина, Ложь);
	ПоказательЗаголовок = ?(ТипЗнч(ТекущиеДанные.Показатель) = Тип("Строка") И ТекущиеДанные.Показатель = Строка(ТекущиеДанные.Ссылка), Истина, Ложь);
	
	УстановленГлобальныйОтборСклад = ЗначениеЗаполнено(ОтборСклад) И ОтборОстатки = 1;
	
	СтруктураПараметров.ОтборПоПартии = ПоказательПартия;
	
	СтруктураПараметров.ОтборПоХарактеристике = ?(ПоказательЗаголовок, Ложь, Истина);
	
	Если УстановленГлобальныйОтборСклад Тогда
		СтруктураПараметров.ОтборПоСкладу = Истина;
		СтруктураПараметров.Склад = ОтборСклад;
	ИначеЕсли ПоказательХарактеристика Или ПоказательПартия Или ПоказательЗаголовок Тогда
		СтруктураПараметров.ОтборПоСкладу = Ложь
	Иначе
		СтруктураПараметров.ОтборПоСкладу = Истина;
		СтруктураПараметров.Склад = ТекущиеДанные.Склад;
	КонецЕсли;
	
	Если Поле.Имя = "ДеревоОстаткиРезерв" Тогда
		
		ЗначениеПоля = ТекущиеДанные.Резерв;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "Резерв");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
			
			СписокДокументов = СписокДокументовПоНоменклатуре("Резерв", СтруктураПараметров);
			ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя = "ДеревоДатаПоступления" Тогда
		
		ЗначениеПоля = ТекущиеДанные.ДатаПоступления;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "Поступления");
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
			
			СписокДокументов = СписокДокументовПоНоменклатуре("Поступления", СтруктураПараметров);
			ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент.ТекущийЭлемент);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.ДеревоОстатки.РежимВыбора Или ЭтоПодбор Тогда
		Если Не ТекущиеДанные.ПартияДляИсключения И Не ТекущиеДанные.Недоступен Тогда
			
			Если НЕ ЭтоПодбор Тогда
				
				Если ЗначениеЗаполнено(ТипВладельца) Тогда
					СтруктураПараметров.Склад = ТекущиеДанные.Склад;
					СтруктураПараметров.СтруктураНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
					ОповеститьОВыборе(СтруктураПараметров);
				ИначеЕсли ВыборНесколькихЗначений Тогда
					МассивНоменклатуры = Новый Массив;
					МассивНоменклатуры.Добавить(СтруктураПараметров);
					ОповеститьОВыборе(МассивНоменклатуры);
				Иначе
					ОповеститьОВыборе(ТекущиеДанные.Ссылка);
				КонецЕсли;
				
			Иначе
				ДобавитьВКорзинуСписок(Истина);
				ПодключитьОбработчикОжидания("АктивизироватьДерево", 0.1, Истина);
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		СтрокаСообщения = НСтр("ru = '%1%. Выберите доступную строку.'");
		
		Если ТекущиеДанные.ПартияДляИсключения Тогда
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Статус партии не соответствует операции объекта'"));
		ИначеЕсли ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Тип склада не соответствует операции объекта'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Номенклатура поставщика не может быть выбрана'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Показатель) И Не ТекущиеДанные.Недоступен Тогда
		
		Если ТипЗнч(ТекущиеДанные.Показатель) = Тип("Строка") И ТекущиеДанные.Показатель = Строка(ТекущиеДанные.Ссылка) Тогда
			ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		Иначе
			ПоказатьЗначение(,ТекущиеДанные.Показатель);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("РазвернутьТекущуюСтрокиДерева", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьДерево()
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоОстатки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьТекущуюСтрокиДерева()
	Элементы.ДеревоОстатки.Развернуть(Элементы.ДеревоОстатки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	ПоказатьЗначение(,Результат.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "КартинкаКорзина" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьВКорзинуСписок(Истина);
		Возврат;
	ИначеЕсли Поле.Имя = "КартинкаОстатки" Или (ЭтоПодбор И Не Поле.Имя = "КартинкаКорзина") Тогда
		СтандартнаяОбработка = Ложь;
		ОбновитьДанныеПоНоменклатуреКлиент();
		
		ТекущиеДанные = Элементы.СписокЗапасы.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено Тогда
			
			Если ЭтоПодбор И Не Поле.Имя = "КартинкаОстатки" И Не ТекущиеДанные.ИспользоватьХарактеристики Тогда
				ДобавитьВКорзинуСписок(Истина);
				Возврат;
			КонецЕсли;
			
			СтруктураДанныхНоменклатурыДляРежимаОстатки = Новый Структура;
			СтруктураДанныхНоменклатурыДляРежимаОстатки.Вставить("СтавкаНДСНоменклатуры", ТекущиеДанные.СтавкаНДСНоменклатуры);
			СтруктураДанныхНоменклатурыДляРежимаОстатки.Вставить("ИспользоватьХарактеристики", ТекущиеДанные.ИспользоватьХарактеристики);
			СтруктураДанныхНоменклатурыДляРежимаОстатки.Вставить("ИспользоватьПартии", ТекущиеДанные.ИспользоватьПартии);
			СтруктураДанныхНоменклатурыДляРежимаОстатки.Вставить("ПроверятьЗаполнениеПартий", ТекущиеДанные.ПроверятьЗаполнениеПартий);
			СтруктураДанныхНоменклатурыДляРежимаОстатки.Вставить("ПроверятьЗаполнениеХарактеристики", ТекущиеДанные.ПроверятьЗаполнениеХарактеристики);
		Иначе
			Возврат;
		КонецЕсли;
		
		РасшифроватьОстатки();
		
		Возврат;
	КонецЕсли;
	
	Если НастройкиИзДокумента И Не ЭтоПодбор Тогда
		
		Если Элементы.СписокЗапасы.РежимВыбора И ЗначениеЗаполнено(ТипВладельца) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
				Возврат
			КонецЕсли;
			
			ТекущиеДанные = Элементы.СписокЗапасы.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И 
				ТекущиеДанные.Свойство("ПометкаУдаления") И ТекущиеДанные.ПометкаУдаления Тогда
				
				Режим = РежимДиалогаВопрос.ДаНет;
				
				ПараметрыОповещения = Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока);
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПомеченНаУдаление", ЭтотОбъект, ПараметрыОповещения);
				ПоказатьВопрос(Оповещение, НСтр("ru='Выбранные данные помечены на удаление.
				|Выполнить выбор этих данных?'"), Режим, 0);
				
				Возврат;
				
			КонецЕсли;
			
			СтруктураСохраняемыхНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
			ПустойСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ПустаяПартия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
			СтруктураПараметров= Новый Структура("Номенклатура, СтруктураНастроек, Склад, Характеристика, Партия"
			, ВыбраннаяСтрока, СтруктураСохраняемыхНастроек, ПустойСклад, ПустаяХарактеристика, ПустаяПартия);
			ОповеститьОВыборе(СтруктураПараметров);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПомеченНаУдаление(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураСохраняемыхНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
		
		ПустойСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ПустаяПартия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
		
		СтруктураПараметров= Новый Структура("Номенклатура, СтруктураНастроек, Склад, Характеристика, Партия"
		, ПараметрыОповещения.ВыбраннаяСтрока, СтруктураСохраняемыхНастроек, ПустойСклад, ПустаяХарактеристика, ПустаяПартия);
		
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Изображения.Количество() Тогда
		ПросмотретьПрисоединенныйФайл();
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	ОбновитьДанныеПоНоменклатуреКлиент();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РеквизитыНоменклатуры.ТекущиеДанные;
	ТекущиеДанныеНоменклатуры = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанныеНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = ТекущиеДанныеНоменклатуры.Ссылка;
	
	РеквизитПозиционирования = Новый Структура("ДопРеквизит, ИмяРеквизитаОбъекта",ТекущиеДанные.ДопРеквизит, ТекущиеДанные.ИмяРеквизитаОбъекта);
	
	ПараметрыОткрытия = Новый Структура("Ключ, РеквизитПозиционирования", Номенклатура, РеквизитПозиционирования);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Параметры.РежимВыбора 
		И (Элементы.СписокЗапасы.ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Элементы) Или ВыборГрупп Тогда
		СтандартнаяОбработка = Ложь;
		ОповеститьОВыборе(Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегментыПриАктивизацииСтроки(Элемент) 
	
	Если ОтборКатегорииИерархияПереключатель <> ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.СегментыНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Или Элементы.ОтборСегменты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборСегменты = Элементы.ОтборСегменты.ТекущиеДанные.Значение Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент = Неопределено Тогда
		ОтборКатегорииПриАктивизацииСтрокиНаКлиенте();
	Иначе
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ОтборСегменты;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ИзменитьСегмент(Команда)
	
	Если Элементы.ОтборСегменты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.ОтборСегменты.ТекущиеДанные.Значение);

КонецПроцедуры

&НаКлиенте
Процедура СведенияОДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Дата", Дата);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаДокумент);
	ПараметрыОткрытия.Вставить("ВалютаДокумента", ВалютаДокумента);
	ПараметрыОткрытия.Вставить("ПериодЦен", ПериодЦен);
	ПараметрыОткрытия.Вставить("ВидЦен", ВидЦен);
	ПараметрыОткрытия.Вставить("ВидСкидкиНаценки", ВидСкидкиНаценки);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	ПараметрыОткрытия.Вставить("ТипНоменклатуры", ОграничениеТипаИсходное);
	ПараметрыОткрытия.Вставить("СкидкиНаценкиВидны", СкидкиНаценкиВидны);
	ПараметрыОткрытия.Вставить("Получатель", СтруктурнаяЕдиницаПолучатель);
	ПараметрыОткрытия.Вставить("ВидОперации", ВидОперации);
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиницаПолучатель", СтруктурнаяЕдиницаПолучатель);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЗаполнения", ПараметрыОткрытия);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.СведенияОДокументе", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКатегорию(Команда)
	
	ТекущиеДанные = Элементы.ОтборКатегории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаОбъекта", Новый Структура("ЗначениеКопирования", Элементы.ОтборКатегории.ТекущиеДанные.Значение)); 
	Иначе
		ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаГруппы", Новый Структура("ЗначениеКопирования", Элементы.ОтборКатегории.ТекущиеДанные.Значение)); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияКатегории(Команда)
	Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.ОтборКатегории.ТекущиеДанные.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = ОтборКатегории.НайтиПоИдентификатору(Элементы.ОтборКатегории.ТекущиеДанные.ПолучитьИдентификатор());
	ТекущаяСтрокаДерева.ПометкаУдаления = ИзменитьПометкуУдаленияСервер(ТекущаяСтрокаДерева.Значение);
	
	Если НЕ ТекущаяСтрокаДерева.ЭтоГруппа Тогда
		ТекущаяСтрокаДерева.Картинка= ?(ТекущаяСтрокаДерева.ПометкаУдаления, 5, 4);
	Иначе
		ТекущаяСтрокаДерева.Картинка= ?(ТекущаяСтрокаДерева.ПометкаУдаления, 2, 1);
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.УстановитьФлагУПодчиненных(ТекущаяСтрокаДерева.ПолучитьЭлементы(), "ПометкаУдаления", ТекущаяСтрокаДерева.ПометкаУдаления);
	УстановитьКартинкуУПодчиненныхКатегорий(ТекущаяСтрокаДерева.ПолучитьЭлементы(), ТекущаяСтрокаДерева.ПометкаУдаления);
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(ТекущаяСтрокаДерева.ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ТекущаяСтрокаДерева.Значение),
		ТекущаяСтрокаДерева.Значение,
		БиблиотекаКартинок.Информация32);
		
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Восстановить(Команда)
	
	СписокОтложенных = ПолучитьСписокОтложенных();
	Для каждого стр Из СписокОтложенных Цикл
		стр.Представление = СтрПолучитьСтроку(стр.Значение,1);
	КонецЦикла;
	
	Если СписокОтложенных.Количество()=0 Тогда
		ОткрытьКорзинуПродолжить(Неопределено);
	Иначе
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВосстановитьЗавершение",ЭтотОбъект), СписокОтложенных);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВыделенные(Команда)
	
	ПоискИУдалениеДублейКлиент.ОбъединитьВыделенные(Элементы.СписокЗапасы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуруДерево(Команда)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Строка(ТекущиеДанные.Показатель) = Строка(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАналогиМобильныйКлиент(Команда)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	УстановитьОтборАналоги(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСопутствующиеТоварыМобильныйКлиент(Команда)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	УстановитьОтборСопутствующиеТовары(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы[ТекущаяСтраницаНоменклатуры]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ПоказыватьНедействительную.Пометка = Не Элементы.ПоказыватьНедействительную.Пометка;
	
	УстановитьОтборНедействительнаяНоменклатура(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитДопУпорядочиванияУвеличить(Команда)
	
	ИзменитьПорядокГруппыНоменклатуры(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитДопУпорядочиванияУменьшить(Команда)
	
	ИзменитьПорядокГруппыНоменклатуры(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитДопУпорядочиванияКатегорииУвеличить(Команда)
	
	ИзменитьПорядокКатегорийНоменклатуры(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитДопУпорядочиванияКатегорииУменьшить(Команда)
	
	ИзменитьПорядокКатегорийНоменклатуры(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументСчетНаОплату(Команда)
	ОформитьДокументСТоварамиИзКорзины("СчетНаОплату");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументАктВыполненныхРабот(Команда)
	ОформитьДокументСТоварамиИзКорзины("АктВыполненныхРабот");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументЗаказНаряд(Команда)
	ОформитьДокументСТоварамиИзКорзины("ЗаказНаряд");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументЗаказПокупателя(Команда)
	ОформитьДокументСТоварамиИзКорзины("ЗаказПокупателя");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументЗаказПоставщику(Команда)
	ОформитьДокументСТоварамиИзКорзины("ЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументПриходнаяНакладная(Команда)
	ОформитьДокументСТоварамиИзКорзины("ПриходнаяНакладная");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументРасходнаяНакладная(Команда)
	ОформитьДокументСТоварамиИзКорзины("РасходнаяНакладная");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументЧекККМ(Команда)
	ОформитьДокументСТоварамиИзКорзины("ЧекККМ");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОстаткиПрогноз(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОстатки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда Возврат КонецЕсли;
	
	Вариант = РаботаСФормойДокументаКлиентСервер.ВариантОтчета("ОстаткиТоваров", "Прогноз");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОтборРасшифровки = Новый Соответствие;
	ОтборРасшифровки.Вставить("Номенклатура", ТекущиеДанные.Ссылка);
	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		ОтборРасшифровки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ОтборРасшифровки.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.Склад);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(, Вариант, ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	ЭлементыДереваДокументов = ДеревоОстатки.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева из ЭлементыДереваДокументов Цикл
		СвернутьВеткуДерева(ЭлементДерева);
		Элементы.ДеревоОстатки.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	РазвернутьВеткуДерева(ДеревоОстатки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВеткуДереваОстатков(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ТекущаяВетка = ДеревоОстатки.НайтиПоИдентификатору(Элементы.ДеревоОстатки.ТекущаяСтрока);
	
	Если Не ТекущаяВетка = Неопределено
		Тогда
		СвернутьВеткуДерева(ТекущаяВетка);
		Элементы.ДеревоОстатки.Свернуть(Элементы.ДеревоОстатки.ТекущаяСтрока);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВеткуДереваОстатков(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	РазвернутьВеткуДерева(ДеревоОстатки.НайтиПоИдентификатору(Элементы.ДеревоОстатки.ТекущаяСтрока));
	Элементы.ДеревоОстатки.Развернуть(Элементы.ДеревоОстатки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтборов(Команда)
	
	СтруктураНастроек = Новый Структура();
	
	СтруктураНастроек.Вставить("ПоказыватьОстатки", ПоказыватьОстатки);
	СтруктураНастроек.Вставить("ПоказыватьЦены", ПоказыватьЦены);
	СтруктураНастроек.Вставить("ПоказыватьКартинку", ПоказыватьКартинку);
	СтруктураНастроек.Вставить("ПоказыватьКорзину", ПоказыватьКорзину);
	СтруктураНастроек.Вставить("ПоказыватьКолонкаКорзина", ПоказыватьКорзину);
	СтруктураНастроек.Вставить("ЗапрашиватьКоличество", ЗапрашиватьКоличество);
	СтруктураНастроек.Вставить("ЗапрашиватьЦену", ЗапрашиватьЦену);
	СтруктураНастроек.Вставить("БыстрыеТовары", БыстрыеТовары);
	СтруктураНастроек.Вставить("СравниватьНоменклатуруПоСвойствам", СравниватьНоменклатуруПоСвойствам);
	СтруктураНастроек.Вставить("ПоказыватьАналоги", ПоказыватьАналоги);
	СтруктураНастроек.Вставить("ПоказыватьНеПрямыеАналоги", ПоказыватьНеПрямыеАналоги);
	СтруктураНастроек.Вставить("ПоказыватьСопутствующиеТовары", ПоказыватьСопутствующиеТовары);
	СтруктураНастроек.Вставить("РежимВыбора", Элементы.СписокЗапасы.РежимВыбора);
	СтруктураНастроек.Вставить("ВыводСопутствующихТоваров", ВыводСопутствующихТоваров);
	СтруктураНастроек.Вставить("ЦенаВСписке", ЦенаВСписке);
	СтруктураНастроек.Вставить("ДействиеПриПоискеПоШК", ДействиеПриПоискеПоШК);
	СтруктураНастроек.Вставить("НеПоказыватьНастройкиЦен", ЭтоПодбор И Не ЗначениеЗаполнено(ВалютаДокумента));
	СтруктураНастроек.Вставить("ЭтоПодбор", ЭтоПодбор);
	СтруктураНастроек.Вставить("ПоказыватьМинимальныеЦены", ПоказыватьМинимальныеЦены);
	СтруктураНастроек.Вставить("ИспользоватьМинимальныеЦены", ИспользоватьМинимальныеЦены);
	
	// Поиск
	СтруктураНастроек.Вставить("ПоискВДопРеквизитахИСведениях", ПоискВДопРеквизитахИСведениях);
	СтруктураНастроек.Вставить("ПоискВХарактеристиках", ПоискВХарактеристиках);
	СтруктураНастроек.Вставить("ПоискВШтрихКодах", ПоискВШтрихКодах);
	СтруктураНастроек.Вставить("НастройкиПоискаКакИскать", НастройкиПоискаКакИскать);
	СтруктураНастроек.Вставить("НастройкиПоиска", НастройкиПоиска);
	СтруктураНастроек.Вставить("ПоискВДопСведениях", ПоискВДопСведениях);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СтруктураНастроек",СтруктураНастроек);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВосстановитьНастройкиФормы", ЭтотОбъект, Новый Структура());
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаНастройкиСписка", СтруктураПараметров, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменаОтбора(Команда)
	
	Если Элементы.АналогиПредставлениеОтбора.Видимость Тогда
		АналогиОтменаОтбора();
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОстаткиПредставлениеОтбора.Видимость Тогда
		ОстаткиОтменаОтбора();
		Возврат;
	КонецЕсли;
	
	Если Элементы.СопутствующиеТоварыПредставлениеОтбора.Видимость Тогда
		СопутствующиеТоварыОтменаОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиФормы(СтруктураНастроек, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНастроек = Неопределено Тогда Возврат КонецЕсли;
	
	ПоказыватьОстатки = СтруктураНастроек.ПоказыватьОстатки;
	ПоказыватьЦены = СтруктураНастроек.ПоказыватьЦены;
	ПоказыватьКартинку = СтруктураНастроек.ПоказыватьКартинку;
	ЗапрашиватьКоличество = СтруктураНастроек.ЗапрашиватьКоличество;
	ЗапрашиватьЦену = СтруктураНастроек.ЗапрашиватьЦену;
	БыстрыеТовары = СтруктураНастроек.БыстрыеТовары;
	СравниватьНоменклатуруПоСвойствам = СтруктураНастроек.СравниватьНоменклатуруПоСвойствам;
	ПоказыватьАналоги = СтруктураНастроек.ПоказыватьАналоги;
	ПоказыватьНеПрямыеАналоги = СтруктураНастроек.ПоказыватьНеПрямыеАналоги;
	ПоказыватьСопутствующиеТовары = СтруктураНастроек.ПоказыватьСопутствующиеТовары;
	ВыводСопутствующихТоваров = СтруктураНастроек.ВыводСопутствующихТоваров;
	ЦенаВСписке = СтруктураНастроек.ЦенаВСписке;
	ДействиеПриПоискеПоШК = СтруктураНастроек.ДействиеПриПоискеПоШК;
	ПоказыватьМинимальныеЦены = СтруктураНастроек.ПоказыватьМинимальныеЦены;
	
	// Поиск
	
	Если ТекущаяСтраницаНоменклатуры = "СтраницаЗапасы" 
		И СтруктураНастроек.НастройкиПоиска = 0 И НастройкиПоиска = 1 Тогда
		СтрокаРасширенногоПоиска = "";
		ПрименитьПоиск();
	КонецЕсли;
	
	ПоискВДопРеквизитахИСведениях = СтруктураНастроек.ПоискВДопРеквизитахИСведениях;
	ПоискВХарактеристиках = СтруктураНастроек.ПоискВХарактеристиках;
	ПоискВШтрихКодах = СтруктураНастроек.ПоискВШтрихКодах;
	НастройкиПоискаКакИскать = СтруктураНастроек.НастройкиПоискаКакИскать;
	НастройкиПоиска = СтруктураНастроек.НастройкиПоиска;
	ПоискВДопСведениях = СтруктураНастроек.ПоискВДопСведениях;
	
	Если Не Элементы.СписокЗапасы.РежимВыбора Тогда
		ПоказыватьКорзину = СтруктураНастроек.ПоказыватьКорзину;
		ПоказыватьКолонкаКорзина = ПоказыватьКорзину;
	КонецЕсли;
	
	ИспользоватьКоличествоВСписке = ПоказыватьОстатки ИЛИ ОтборОстатки=2;
	
	СохранитьОбщиеНастройки();
	
	СпозиционироватьсяНаСтрокеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруСервис1СНоменклатура(Команда)
	РаботаСНоменклатуройКлиент.ПодобратьНоменклатуруИзСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВыбрать(Команда)
	
	Если НЕ Параметры.РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОповеститьОВыборе(Элементы.ОтборИерархия.ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОстатков(Команда)
	
	ОбновитьДеревоОстатковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОстатковКлиент()
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеТекущейСтроки = Новый Структура("Показатель, Характеристика, Партия, Склад, Ячейка");
	ДанныеТекущейСтроки.Показатель = ТекущиеДанные.Показатель;
	ДанныеТекущейСтроки.Характеристика = ТекущиеДанные.Характеристика;
	ДанныеТекущейСтроки.Партия = ТекущиеДанные.Партия;
	ДанныеТекущейСтроки.Склад = ТекущиеДанные.Склад;
	ДанныеТекущейСтроки.Ячейка = ТекущиеДанные.Ячейка;
	
	ЗаполнитьДеревоОстатков(ТекущиеДанные.Ссылка);
	РазвернутьВеткуДерева(ДеревоОстатки);
	
	КоллекцияЭлементовДерева = ДеревоОстатки.ПолучитьЭлементы();
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
	ОбновитьДанныеДереваБезПерезаполнения(КоллекцияЭлементовДерева, СтруктураПоиска);
	
	НовыйИдентификаторСтроки = 0;
	НайтиСтрокуДереваПоДаннымСтроки(ДанныеТекущейСтроки, КоллекцияЭлементовДерева, НовыйИдентификаторСтроки);
	
	Элементы.ДеревоОстатки.ТекущаяСтрока = НовыйИдентификаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуДереваПоДаннымСтроки(ДанныеТекущейСтроки, КоллекцияЭлементовДерева, НовыйИдентификаторСтроки)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		Если Не СтрокаДерева.Показатель = ДанныеТекущейСтроки.Показатель Тогда
			НайтиСтрокуДереваПоДаннымСтроки(ДанныеТекущейСтроки, СтрокаДерева.ПолучитьЭлементы(), НовыйИдентификаторСтроки);
		 КонецЕсли;
		 
		 Если СтрокаДерева.Показатель = ДанныеТекущейСтроки.Показатель
			 И СтрокаДерева.Характеристика = ДанныеТекущейСтроки.Характеристика
			 И СтрокаДерева.Партия = ДанныеТекущейСтроки.Партия
			 И СтрокаДерева.Склад = ДанныеТекущейСтроки.Склад
			 И СтрокаДерева.Ячейка = ДанныеТекущейСтроки.Ячейка Тогда
			 НовыйИдентификаторСтроки =  СтрокаДерева.ПолучитьИдентификатор();
			 Прервать;
		 Иначе
			 НайтиСтрокуДереваПоДаннымСтроки(ДанныеТекущейСтроки, СтрокаДерева.ПолучитьЭлементы(), НовыйИдентификаторСтроки);
		 КонецЕсли;
		 
	 КонецЦикла;
	
 КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстатки(Команда)
	
	ОстаткиОбновлены = Истина;
	ОбновитьОстаткиНаСервере(ОстаткиОбновлены);
	
	Если Не ОстаткиОбновлены Тогда
		
		СтрокаСообщения = НСтр("ru = 'При обновлении остатков произошла ошибка.
		|При повторном возникновении ошибки обратитесь к администратору.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиНаСервере(ОстаткиОбновлены)
	
	ОстаткиОбновлены = РегистрыСведений.ОстаткиТоваров.ВыполнитьЗаданиеПоЗаписиОстатковВТехническийРегистр();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиСписок(Команда)
	АктивизироватьЭлементФормы("Номенклатура");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоиск(Команда)
	АктивизироватьЭлементФормы("Поиск");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРодителю(Команда)
	
	ТекущиеДанные = Элементы.СписокЗапасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		УстановитьОтборПоДеревуИерархии("ОтборКатегории", ТекущиеДанные.КатегорияНоменклатуры)
	Иначе
		УстановитьОтборПоДеревуИерархии("ОтборИерархия", ТекущиеДанные.Группа)
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКорзина(Команда)
	АктивизироватьЭлементФормы("Корзина");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиИерархия(Команда)
	АктивизироватьЭлементФормы("Иерархия");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчики

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Если ДополнительныеПараметры.Свойство("ФиксированныйШаблон") Тогда
			Оповестить("Запись_КатегорииНоменклатуры");
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОповеститьОСозданииГруппы") Тогда
			Оповестить("Запись_НоменклатураГруппа");
		КонецЕсли;
	КонецЕсли;
			
	ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров = Неопределено)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, СтруктураПараметров);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборовСписков

&НаСервере
Процедура УстановитьФиксированныйОтборПоТипамНоменклатуры(ОграничениеТипов)
	
	// Запомним настройки для создания номенклатуры
	ОграничениеТипаИсходноеМассив = Новый Массив;
	
	ВсеТипыНоменклатуры = Новый Соответствие;
	Для каждого ТипНоменклатуры Из Метаданные.Перечисления.ТипыНоменклатуры.ЗначенияПеречисления Цикл
		ВсеТипыНоменклатуры.Вставить(ТипНоменклатуры.Синоним, ТипНоменклатуры.Имя);
	КонецЦикла;
	
	//Установим ограничение по типам на форме
	Если ТипЗнч(ОграничениеТипов) = Тип("Массив") ИЛИ ТипЗнч(ОграничениеТипов) = Тип("ФиксированныйМассив") Тогда
		Для каждого ТипНоменклатуры Из ОграничениеТипов Цикл
			Если Не Перечисления.ТипыНоменклатуры.ТипНоменклатурыВключен(ТипНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ТипНоменклатуры))] = Истина;
			ОграничениеТипаИсходноеМассив.Добавить(ТипНоменклатуры);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОграничениеТипов) = Тип("СписокЗначений") Тогда
		ОграничениеТиповМассив = ОграничениеТипов.ВыгрузитьЗначения();
		Для каждого ТипНоменклатуры Из ОграничениеТиповМассив Цикл
			Если Не Перечисления.ТипыНоменклатуры.ТипНоменклатурыВключен(ТипНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ТипНоменклатуры))] = Истина;
			ОграничениеТипаИсходноеМассив.Добавить(ТипНоменклатуры);
		КонецЦикла;
	Иначе
		ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ОграничениеТипов))] = Истина;
	КонецЕсли; 
	
	УстановитьОтборПоТипуНоменклатуры();
	
	Элементы.ОтборТипЗапас.Доступность					= ОтборТипЗапас;
	Элементы.ОтборТипУслуга.Доступность					= ОтборТипУслуга;
	Элементы.ОтборТипРабота.Доступность					= ОтборТипРабота;
	Элементы.ОтборТипОперация.Доступность				= ОтборТипОперация;
	Элементы.ОтборТипВидРабот.Доступность				= ОтборТипВидРабот;
	Элементы.ОтборТипСертификат.Доступность				= ОтборТипПодарочныйСертификат;
	
	ОграничениеТипаИсходное = Новый ФиксированныйМассив(ОграничениеТипаИсходноеМассив);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИерархии(ГруппаТекущейСтроки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИерархияНоменклатуры.Номенклатура КАК Значение,
	|	ИерархияНоменклатуры.КартинкаГруппы КАК Картинка,
	|	ИерархияНоменклатуры.ПометкаУдаленияГруппы КАК ПометкаУдаления,
	|	ИерархияНоменклатуры.Номенклатура.Наименование КАК Представление,
	|	ИерархияНоменклатуры.Номенклатура.РеквизитДопУпорядочиванияУНФ КАК Порядок
	|ИЗ
	|	РегистрСведений.ИерархияНоменклатуры КАК ИерархияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок ИЕРАРХИЯ,
	|	Представление ИЕРАРХИЯ";
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	УстановитьПривилегированныйРежим(Ложь);
	СтрокаВсеГруппы = Дерево.Строки.Вставить(0);
	СтрокаВсеГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаВсеГруппы.Представление= ПредставлениеВсеГруппы();
	СтрокаВсеГруппы.Картинка = -1;
	
	СтрокаНетГруппы = Дерево.Строки.Добавить();
	СтрокаНетГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаНетГруппы.Представление= ПредставлениеНетГруппы();
	СтрокаНетГруппы.Картинка = -1;
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборИерархия");
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСегментов(ГруппаТекущейСтроки = Неопределено)
	
	Если НЕ ИспользоватьСегментыНоменклатуры Тогда
		
		ЭлементОтбораПоСегменту = Перечисления.ВидыОтборовНоменклатуры.СегментыНоменклатуры;
		ЭлементОтбора = 
			Элементы.ОтборКатегорииИерархияПереключатель.СписокВыбора.НайтиПоЗначению(ЭлементОтбораПоСегменту);
				
		Если ЭлементОтбора <> Неопределено Тогда
			Элементы.ОтборКатегорииИерархияПереключатель.СписокВыбора.Удалить(ЭлементОтбора);
		КонецЕсли;
		
		Возврат;	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СегментыНоменклатуры.Ссылка КАК Значение,
	|	СегментыНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА НЕ СегментыНоменклатуры.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА СегментыНоменклатуры.ПометкаУдаления
	|						ТОГДА 5
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СегментыНоменклатуры.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СегментыНоменклатуры.Ссылка) КАК Представление,
	|	СегментыНоменклатуры.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	СегментыНоменклатуры.ЭтоГруппа ИЕРАРХИЯ";
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборСегменты");
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборСегменты.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипПриИзменении(Элемент)
	
	УстановитьОтборПоТипуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныОтборПриИзменении(Элемент)
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		
		Если ЦенаОт<>0 ИЛИ ЦенаДо<>0 Тогда
			ОтборПоЦенам = Истина;
		Иначе
			ОтборПоЦенам = Ложь;
		КонецЕсли;
		
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		РазвернутьВеткуДерева(ДеревоОстатки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		ОбновитьЗаголовокФильтров();
		Возврат;
	КонецЕсли;

	
	УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо);

КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры, ОбновитьВидимостьИДоступность = Истина, Ссылка = Неопределено)
	
	Если НоваяСтраницаНоменклатуры <> ТекущаяСтраницаНоменклатуры Тогда 
		
		Если Не ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			
			Если НоваяСтраницаНоменклатуры = "СписокЗапасы" Тогда
				Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы;
			ИначеЕсли НоваяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
				
				Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаОстатки;
				ТекущаяСтраницаНоменклатуры = НоваяСтраницаНоменклатуры;
				УстановитьВидимостьИДоступность();
				ЗаполнитьСопутствующиеТоварыДляДерева(Ссылка);
				
				Возврат;
				
			КонецЕсли;
			ТекущаяСтраницаНоменклатуры = НоваяСтраницаНоменклатуры;
		Иначе
			
			Если НоваяСтраницаНоменклатуры = "СписокЗапасы" Тогда
				Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы;
			КонецЕсли;
			ТекущаяСтраницаНоменклатуры = НоваяСтраницаНоменклатуры;
				
			УстановитьПараметрыЗапросовСписков();
		КонецЕсли;
	КонецЕсли;
	
	ОтборОстаткиЗначение = ?(ОтборОстатки = 2, 2, 0);
	
	УстановитьОтборСпискаОстаткиСервер(ЭтаФорма[ТекущаяСтраницаНоменклатуры], ОтборОстаткиЗначение);
	
	Если ОбновитьВидимостьИДоступность Тогда
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаОстаткиСервер(СписокДляОтбора, ОтборОстаткиЗначение)
	
	ВидСравненияОтбора	= ?(ОтборОстаткиЗначение=2, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВидСравненияКомпоновкиДанных.Больше);
	ИспользованиеОтбора = ОтборОстаткиЗначение<>0;
	
	Если ОтборОстаткиЗначение=2 Тогда
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокЗапасы.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоНаличию",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		
	Иначе
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокЗапасы.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоНаличию",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"КоличествоОстаток",
		ВидСравненияОтбора,
		0,
		"ОтборПоОстатку",
		ИспользованиеОтбора);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"Резерв",
		ВидСравненияОтбора,
		0,
		"ОтборПоРезерву",
		ИспользованиеОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопутствующиеТоварыДляДерева(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или Не ПоказыватьСопутствующиеТовары Тогда Возврат КонецЕсли;
	
	СопутствующиеТоварыДляДерева.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопутствующиеТовары.СопутствующийТовар) КАК КоличествоПозиций,
	|	СопутствующиеТовары.Характеристика КАК Характеристика,
	|	СопутствующиеТовары.СопутствующийТовар.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО СопутствующиеТовары.СопутствующийТовар = ОстаткиТоваров.Номенклатура
	|			И СопутствующиеТовары.ХарактеристикаСопутствующегоТовара = ОстаткиТоваров.Характеристика
	|ГДЕ
	|	СопутствующиеТовары.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СопутствующиеТовары.Характеристика,
	|	СопутствующиеТовары.СопутствующийТовар.ЕдиницаИзмерения.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СопутствующиеТоварыДляДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо, ЭтоОткрытие = Ложь)
	
	Если ЦенаОт<>0 ИЛИ ЦенаДо<>0 Тогда
		ОтборПоЦенам = Истина;
	Иначе
		ОтборПоЦенам = Ложь;
	КонецЕсли;
	
	Если Не ЭтоОткрытие Тогда
		ПереопределитьТекстЗапросаВСписках();
		УстановитьПараметрыЗапросовСписков();
	КонецЕсли;
	
	// Отбор на список товаров.
	ГруппаОтборПоКоличеству = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтаФорма["СписокЗапасы"].КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЦенаОт,
		"ЦенаОт",
		ЦенаОт<>0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ЦенаДо,
		"ЦенаДо",
		ЦенаДо<>0);
		
	ОбновитьЗаголовокФильтров();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипуНоменклатуры()
	
	ОтборТипНоменклатуры = Новый СписокЗначений;
	Если ОтборТипЗапас Тогда
		ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	КонецЕсли;
	Если ОтборТипУслуга Тогда
		ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	КонецЕсли; 
	Если ОтборТипРабота Тогда
		ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	КонецЕсли; 
	Если ОтборТипВидРабот Тогда
		ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.ВидРабот);
	КонецЕсли; 
	Если ОтборТипОперация Тогда
		ОтборТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Операция);
	КонецЕсли;
	Если ОтборТипПодарочныйСертификат И ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	
	Использование = ОтборТипНоменклатуры.Количество()>0 ИЛИ (Параметры.РежимВыбора И Не ЭтоКопирование);
	
	// Отбор на список номенклатуры
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"ТипНоменклатуры", ОтборТипНоменклатуры, ВидСравненияКомпоновкиДанных.ВСписке, , Использование);
		
	Если Элементы.ОтборНабор.Доступность Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
			"ЭтоНабор", ОтборНабор, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
			"ЭтоНабор", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	КонецЕсли; 
	
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	ВНаличииНаСкладе = ОтборОстатки=1;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		РазвернутьВеткуДерева(ДеревоОстатки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	ОтборПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ОтборСклад) И ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторТекущейСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПриИзмененииНаСервере()

	ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(ОтборСклад);

	УстановитьПараметрыЗапросовСписков();
	НоваяСтраницаНоменклатуры = "СписокЗапасы";
	УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		РазвернутьВеткуДерева(ДеревоОстатки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	ОтборПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ОтборОрганизация) И ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторТекущейСтроки;
	КонецЕсли;
	
	Если ОстаткиВидимость Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЦенПриИзменении(Элемент)
	
	ОтборВидЦенСервер();
	СпозиционироватьсяНаСтрокеСписка();
	ОбновитьНадписьПодобраноТоваров();
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		РазвернутьВеткуДерева(ДеревоОстатки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	Если Не ЗначениеЗаполнено(ОтборВидЦен) И ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СпозиционироватьсяНаСтрокеСписка()
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОчистка(Элемент, СтандартнаяОбработка)
	СпозиционироватьсяНаСтрокеСписка();
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаСтрокеСписка()
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	Если ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборХарактеристикаПриИзменении(Элемент)
	
	УстановитьОтборПоХарактеристикеСервер();
	
	Если Не ЗначениеЗаполнено(ОтборСклад) И ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторТекущейСтроки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоХарактеристикеСервер(Значение = Неопределено, МассивСвойствХарактеристик = Неопределено, ЭлементИмя = "")

	ПереопределитьТекстЗапросаСписокЗапасы();
	
	СписокОтбораХарактеристики.Очистить();
	
	Если Значение = Неопределено Тогда
		
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, "ОтборХарактеристика", "ГруппаОтборДопРеквизитыХарактеристика", ОтборХарактеристика, Строка(ОтборХарактеристика)
		,"СписокЗапасы", "Характеристика", "ДанныеМетокПП");
		ОтборХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		
		ПолеОтбора = КатегорииНоменклатурыСервер.ПолеОтбораДополнительногоРеквизита(ЭтотОбъект, ЭлементИмя, ОтборКатегорииТекущая);
		
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ПолеОтбора, Элементы[ЭлементИмя].Родитель.Имя, Значение, Строка(Значение)
		,"СписокЗапасы", "СвойствоХарактеристик", "ДанныеМетокККМ");
		
	КонецЕсли;
	
	ОтобратьХарактеристикиВСоответствииЗначениюСвойств(МассивСвойствХарактеристик);
	
	УстановитьПараметрыЗапросовСписков();
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьХарактеристикиВСоответствииЗначениюСвойств(МассивСвойствХарактеристик)
	
	Если МассивСвойствХарактеристик = Неопределено Тогда
		ПараметрыОтбора = Новый Структура("СвойствоХарактеристики", Истина);
		Строки = ЭтаФорма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
		
		МассивСвойствХарактеристик = Новый Массив();
		
		Для Каждого СтрокаСвойств Из Строки Цикл
			МассивСвойствХарактеристик.Добавить(СтрокаСвойств.Свойство);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МассивЗначенийСвойств = ДанныеМетокККМ.Выгрузить(,"Метка");

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.КатегорииНоменклатуры)
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка В(&Ссылка)
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство В(&Свойство)
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение В(&Значение)";
	
	МассивХарактеристик = ДанныеМетокПП.Выгрузить(,"Метка");
	
	Если Не МассивХарактеристик.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка В(&Ссылка)", "");
	Иначе
		СписокОтбораХарактеристики.ЗагрузитьЗначения(МассивХарактеристик.ВыгрузитьКолонку("Метка"));
		Возврат;
	КонецЕсли;
	
	Если Не МассивЗначенийСвойств.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство В(&Свойство)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение В(&Значение)", "");
	Иначе
		Запрос.УстановитьПараметр("Свойство", МассивСвойствХарактеристик);
		Запрос.УстановитьПараметр("Значение", МассивЗначенийСвойств);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОтбораХарактеристики.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтборВидЦенСервер()
	
	УстановитьВидЦенДляСписков();
	УстановитьПараметрыЗапросовСписков();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЦенДляСписков(ОбновлятьВидимость = Истина)
	
	Если НЕ ЗначениеЗаполнено(ОтборВидЦен) И Не РаботаСЗакупками Тогда
		ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборВидЦен) И Не УправлениеДоступом.ЧтениеРазрешено(ОтборВидЦен) Тогда
		Если ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦен") Тогда
			ОтборВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
		ИначеЕсли ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
			ОтборВидЦен = Справочники.ВидыЦенКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборВидЦен) Тогда
		Элементы.Цена.Заголовок 					= НСтр("ru = '<Вид цен не выбран>'");
		Элементы.ДеревоОстаткиЦена.Заголовок		= НСтр("ru = '<Вид цен не выбран>'");
	Иначе
		
		ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборВидЦен, "ВалютаЦены", Истина);
		
		ВалютаПодбора = ВалютаЦены;
		ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаПодбора);
		СимвольноеПредставление = ?(ЗначениеЗаполнено(ВалютаПредставление), " " + ВалютаПредставление, "");
		ЗаголовокЦен = Строка(ОтборВидЦен) + СимвольноеПредставление;
		Элементы.Цена.Заголовок 					= ЗаголовокЦен;
		Элементы.ДеревоОстаткиЦена.Заголовок		= ЗаголовокЦен;
		
		Если ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦен") Тогда
			ОкруглятьВБольшуюСторону = ОтборВидЦен.ОкруглятьВБольшуюСторону;
			ПорядокОкругления = ОтборВидЦен.ПорядокОкругления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновлятьВидимость Тогда
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныСуммыКорзиныВВалюту(НоваяВалюта)
	
	КурсВалюты = ЦенообразованиеСервер.ПолучитьКурсыВалют(ВалютаПодбора,НоваяВалюта, ТекущаяДатаСеанса());
	
	Для каждого СтрокаКорзины Из Корзина Цикл
	
		СтрокаКорзины.Цена = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СтрокаКорзины.Цена, 
			КурсВалюты.КурсНач, КурсВалюты.Курс, КурсВалюты.КратностьНач, КурсВалюты.Кратность);
			
		НоменклатураВДокументахКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаКорзины, "Корзина");
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОстаткиПриИзменении(Элемент)
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
		РазвернутьВеткуДерева(ДеревоОстатки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		УстановитьВидимостьИДоступность();
		Возврат;
	КонецЕсли;
	
	ПоказыватьОстаткиПриИзмененииСервер();
	
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	Если ЗначениеЗаполнено(ИдентификаторТекущейСтроки) Тогда
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереформироватьЗапросыСписков()
	
	ВНаличииНаСкладе = (ОтборОстатки = 1);
	ИспользоватьКоличествоВСписке = ПоказыватьОстатки ИЛИ ОтборОстатки=2;
	ОтборПоКоличеству = (ОтборОстатки > 0); //ОтборПоКоличеству = Истина при вариантах "В наличии" и "Отсутствуют"
	Если ЦенаОт<>0 ИЛИ ЦенаДо<>0 Тогда
		ОтборПоЦенам = Истина;
	Иначе
		ОтборПоЦенам = Ложь;
	КонецЕсли;
	
	ПереопределитьТекстЗапросаВСписках();
	УстановитьПараметрыЗапросовСписков();
	
	НоваяСтраницаНоменклатуры = "СписокЗапасы";
	
	УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	СвернутьРазвернутьПанельОтборовКлиент();
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
		Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		Элементы.СписокЗапасыКонтекстноеМенюПерейтиКРодителю.Видимость = Ложь;
		
		Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = '<номенклатура не выбрана>'");
		НадписьАналогиНоменклатуры = НСтр("ru = '<номенклатура не выбрана>'");
		НадписьСопутствующийТовар = НСтр("ru = '<номенклатура не выбрана>'");
		НадписьЗаголовокНоменклатуры = НСтр("ru = '<номенклатура не выбрана>'");
		НадписьЦена = НСтр("ru = '<номенклатура не выбрана>'");
		РасшифровкаОстатков.Очистить();
		Возврат
	КонецЕсли;
	
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = 'Добавить изображение'");
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовКлиент()
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	
	СтруктураИменЭлементов = Новый Структура("ФильтрыНастройкиИДопИнфо, ДекорацияРазвернутьОтборы, ПраваяПанель",
	"ФильтрыНастройкиИДопИнфо","ДекорацияРазвернутьОтборы","ПраваяПанель"
	);
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархии()
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоГруппе = ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.Значение);
	
	Элементы.ОтборИерархияКонтекстноеМенюИзменить.Доступность							= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюСкопировать.Доступность						= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюУстановитьПометкуУдаленияГруппы.Доступность	= ЭтоОтборПоГруппе;
	
	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	Представление	= Элементы.ОтборИерархия.ТекущиеДанные.Представление;
	
	Если ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеВсеГруппы() Тогда
		
		Использование = Ложь;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = ПредставлениеНетГруппы() Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокЗапасы"],
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Использование
	);
	
	ОтборИерархияТекущая = ПравоеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборПоИерархии()
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Ложь;
	Представление	= Элементы.ОтборИерархия.ТекущиеДанные.Представление;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокЗапасы"],
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Использование
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированныйОтборПоНаборам(ОграничениеЭтоНабор)
	
	Элементы.ОтборНабор.Доступность = ОграничениеЭтоНабор;
	
	УстановитьОтборПоТипуНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ПодобранныеТовары = Корзина.Выгрузить();
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(ПодобранныеТовары, УникальныйИдентификаторФормыВладельца);
	
	СтандартнаяОбработка = ?(ИмяФормыВладельца = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК", Истина, Ложь);
	
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца, НоваяФормаПодбора, ИспользоватьСтандартнуюОбработку"
	, АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца, Истина, СтандартнаяОбработка);
	
КонецФункции // ЗаписатьПодборВХранилище()

&НаСервере
Процедура СохранитьНастройки(ИзФормы = Ложь)
	
	Если ИзФормы Тогда
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			ВосстановитьНастройкиФильтровНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	СохранитьОбщиеНастройки();
	
	ИмяКлючаОбъекта = "СписокНоменклатураОбщиеНастройкиДополнительные";
	
	СписокНастроекДляСохранения = Новый ТаблицаЗначений;
	СписокНастроекДляСохранения.Колонки.Добавить("ЗначениеНастройки");
	СписокНастроекДляСохранения.Колонки.Добавить("ИмяНастройки");
	
	НоваяСтрока = СписокНастроекДляСохранения.Добавить();
	НоваяСтрока.ИмяНастройки = "ИнформацияПоНоменклатуре";
	НоваяСтрока.ЗначениеНастройки = Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Скрыта();
	
	НоваяСтрока = СписокНастроекДляСохранения.Добавить();
	НоваяСтрока.ИмяНастройки = "ГруппаОтборы";
	НоваяСтрока.ЗначениеНастройки = Элементы.Отборы.Скрыта();
	
	НоваяСтрока = СписокНастроекДляСохранения.Добавить();
	НоваяСтрока.ИмяНастройки = "ПраваяПанельСвернута";
	НоваяСтрока.ЗначениеНастройки = Элементы.ДекорацияРазвернутьОтборы.Видимость;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы", СписокНастроекДляСохранения);
	
	РежимВыбора = Элементы.СписокЗапасы.РежимВыбора;
	
	Если РежимВыбора Тогда
		
		ДополнениеСтрокиНастроек = "";
		
		Если КлючНазначенияДокумента = 1 Тогда
			ДополнениеСтрокиНастроек = ",ОтборОстатки";
		ИначеЕсли КлючНазначенияДокумента = 2 Тогда
			ДополнениеСтрокиНастроек = ",ОтборОстатки,ОтборОрганизация,ОтборСклад";
		ИначеЕсли КлючНазначенияДокумента = 3 И Не РаботаСЗакупками Тогда
			ДополнениеСтрокиНастроек = ",ОтборВидЦен";
		Иначе
			ДополнениеСтрокиНастроек = ",ОтборОстатки,ОтборВидЦен";
		КонецЕсли;
		
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ДействиеПриПоискеПоШК,НастройкиПоиска,НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,
		|ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ОстаткиВидимость,ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены" + ДополнениеСтрокиНастроек;
	ИначеЕсли ЭтоПодбор Тогда
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ЗапрашиватьКоличество,ЗапрашиватьЦену,БыстрыеТовары,СравниватьНоменклатуруПоСвойствам,ПоказыватьНеПрямыеАналоги,
		|ОтборОстатки,КорзинаРасшифровкаВидимость,ОстаткиВидимость,ЦенаВСписке,ДействиеПриПоискеПоШК,НастройкиПоиска,НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,
		|ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены";
	Иначе
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ЗапрашиватьКоличество,ЗапрашиватьЦену,БыстрыеТовары,СравниватьНоменклатуруПоСвойствам,ПоказыватьНеПрямыеАналоги,
		|ОтборОстатки,ОтборВидЦен,ОтборОрганизация,ОтборСклад,ЦенаВСписке,ДействиеПриПоискеПоШК,НастройкиПоиска,НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,
		|ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ОстаткиВидимость,ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены";
	КонецЕсли;
	
	Если Не ЭтоПодбор Тогда
		ИмяКлючаОбъекта = "СписокНоменклатура" + ТипВладельца;
	Иначе
		ИмяКлючаОбъекта = "СписокНоменклатураПодбор" + ТипВладельца;
	КонецЕсли;
	
	СписокНастроекДляСохранения.Очистить();
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
	
	Для Каждого Элемент Из МассивНастроек Цикл
		
		НоваяСтрока = СписокНастроекДляСохранения.Добавить();
		НоваяСтрока.ИмяНастройки = Элемент;
		НоваяСтрока.ЗначениеНастройки = ЭтаФорма[Элемент];
		
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы", СписокНастроекДляСохранения);
	
	Если Не ЭтоПодбор Тогда
		
		ИмяКлючаОбъектаФормаВыбора = ?(РежимВыбора, "СписокНоменклатураФормаВыбораОбщая", "СписокНоменклатураФормаСпискаОбщая");
		СтрокаНастроек = "ОтборКатегорииИерархияПереключатель,ГруппаКатегория,ТипДокументаПоУмолчанию";
		МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
		
		СписокНастроекДляСохранения.Очистить();
		
		Для Каждого Элемент Из МассивНастроек Цикл
			
			НоваяСтрока = СписокНастроекДляСохранения.Добавить();
			НоваяСтрока.ИмяНастройки = Элемент;
			НоваяСтрока.ЗначениеНастройки = ЭтаФорма[Элемент];
			
		КонецЦикла;
		
		ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъектаФормаВыбора, ИмяКлючаОбъектаФормаВыбора+"_" + "СписокНастроекФормы", СписокНастроекДляСохранения);
		
	КонецЕсли;
	
	Если Элементы.ОтборКатегорииИерархияПереключатель.Видимость Тогда
		КатегорииНоменклатурыСервер.УстановитьНастройкуВидОтбораНоменклатуры(ОтборКатегорииИерархияПереключатель);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		ИмяФормы,
		"ВключаяВложенные",
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка
	);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	РежимВыбора = Параметры.РежимВыбора;
	
	СтруктураПоиска = Новый Структура("ИмяНастройки");
	
	СтрокаОбщихНастроек = "ПоказыватьКорзину,ПоказыватьКартинку,ПоказыватьАналоги,ПоказыватьСопутствующиеТовары,
	|ВыводСопутствующихТоваров,ИсторияПоискаДерево,ИсторияПоискаСписок";
	
	ИмяКлючаОбъекта = "СписокНоменклатураОбщиеНастройки";
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОбщихНастроек, , Истина, Истина);
	
	СписокНастроекДляЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы");
	
	Если Не СписокНастроекДляЗагрузки = Неопределено Тогда
		
		Для Каждого Элемент Из МассивНастроек Цикл
			
			СтруктураПоиска.ИмяНастройки = Элемент;
			НайденныеСтрроки = СписокНастроекДляЗагрузки.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтрроки.Количество() Тогда 
				Значение = Неопределено;
			Иначе
				Значение = НайденныеСтрроки[0].ЗначениеНастройки;
			КонецЕсли;
			
			Если Значение=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьЭлементНастроек(Элемент, Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяКлючаОбъекта = "СписокНоменклатураОбщиеНастройкиДополнительные";
	
	СписокНастроекДляЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы");
	
	ПоложениеПравойПанелиСвернута = Неопределено;
	ГруппыИнформацияПоНоменклатуреСкрыта = Неопределено;
	ГруппыОтборыСкрыта = Неопределено;
	
	Если Не СписокНастроекДляЗагрузки = Неопределено Тогда
		
		Для Каждого Элемент Из СписокНастроекДляЗагрузки Цикл
			Значение = Элемент.ЗначениеНастройки;
			Если Значение=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.ИмяНастройки = "ИнформацияПоНоменклатуре" Тогда
				
				ГруппыИнформацияПоНоменклатуреСкрыта = Значение;
				
			КонецЕсли;
			
			Если Элемент.ИмяНастройки = "ГруппаОтборы" Тогда
				
				ГруппыОтборыСкрыта = Значение;
				
			КонецЕсли;
			
			Если Элемент.ИмяНастройки = "ПраваяПанельСвернута" Тогда
				ПоложениеПравойПанелиСвернута = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ГруппыИнформацияПоНоменклатуреСкрыта = Неопределено И ГруппыИнформацияПоНоменклатуреСкрыта Тогда
		Элементы.ИнформацияПоНоменклатуреОбщаяГруппа.Скрыть();
	КонецЕсли;
	
	Если ГруппыОтборыСкрыта = Неопределено Или ГруппыОтборыСкрыта Тогда
		Элементы.Отборы.Скрыть();
	КонецЕсли;
	
	Если РежимВыбора Тогда
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ОтборОстатки,ОтборВидЦен,ОтборОрганизация,ОтборСклад,ДействиеПриПоискеПоШК,НастройкиПоиска,
		|НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ОстаткиВидимость,
		|ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены";
		
		Если РаботаСЗакупками Тогда
			СтрокаНастроек = СтрЗаменить(СтрокаНастроек, ",ОтборВидЦен", "");
		КонецЕсли;
		
		Если ТипВладельца = "ЗаданиеНаРаботу" Тогда
			СтрокаНастроек = СтрЗаменить(СтрокаНастроек, ",ПоказыватьОстатки,ОтборОстатки", "");
		КонецЕсли;
		
	ИначеЕсли ЭтоПодбор Тогда
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ЗапрашиватьКоличество,ЗапрашиватьЦену,БыстрыеТовары,СравниватьНоменклатуруПоСвойствам,ПоказыватьНеПрямыеАналоги,
		|ОтборОстатки,КорзинаРасшифровкаВидимость,ОстаткиВидимость,ЦенаВСписке,ДействиеПриПоискеПоШК,НастройкиПоиска,НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,
		|ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены";
	Иначе
		СтрокаНастроек = "ПоказыватьЦены,ПоказыватьОстатки,ЗапрашиватьКоличество,ЗапрашиватьЦену,БыстрыеТовары,СравниватьНоменклатуруПоСвойствам,ПоказыватьНеПрямыеАналоги,
		|ОтборОстатки,ОтборВидЦен,ОтборОрганизация,ОтборСклад,ЦенаВСписке,ДействиеПриПоискеПоШК,НастройкиПоиска,НастройкиПоискаКакИскать,ПоискВДопРеквизитахИСведениях,
		|ПоискВХарактеристиках,ПоискВШтрихКодах,ПоискВДопСведениях,ОстаткиВидимость,ИсторияПоискаДерево,ИсторияПоискаСписок,ПодбиратьВесьОстаток,ПоказыватьМинимальныеЦены";
	КонецЕсли;
	
	Если Не ЭтоПодбор Тогда
		ИмяКлючаОбъекта = "СписокНоменклатура" + ТипВладельца;
	Иначе
		ИмяКлючаОбъекта = "СписокНоменклатураПодбор" + ТипВладельца;
	КонецЕсли;
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
	СписокНастроекДляЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы");
	
	Если ЭтоПодбор И СписокНастроекДляЗагрузки = Неопределено Тогда
		СписокНастроекДляЗагрузки = ХранилищеСистемныхНастроек.Загрузить("СписокНоменклатураПодбор", "СписокНоменклатураПодбор_СписокНастроекФормы");
		ТипВладельца = "";
	КонецЕсли;
	
	Для Каждого Элемент Из МассивНастроек Цикл
		
		Если Не СписокНастроекДляЗагрузки = Неопределено Тогда
			СтруктураПоиска.ИмяНастройки = Элемент;
			НайденныеСтрроки = СписокНастроекДляЗагрузки.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтрроки.Количество() Тогда 
				Значение = Неопределено;
			Иначе
				Значение = НайденныеСтрроки[0].ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
		Если Значение = Неопределено Тогда
			
			Если Элемент = "ПоказыватьЦены" Тогда
				ЭтаФорма[Элемент] = Истина;
				ДобавитьЭлементНастроек(Элемент, Истина);
			КонецЕсли;
			
			Если Элемент = "КорзинаРасшифровкаВидимость" Тогда
				ЭтаФорма[Элемент] = Истина;
				ДобавитьЭлементНастроек(Элемент, Истина);
			КонецЕсли;
			
			Если Элемент = "ПоказыватьОстатки" Тогда
				ЭтаФорма[Элемент] = Истина;
				ДобавитьЭлементНастроек(Элемент, Истина);
			
				ПоказыватьАналоги = Истина;
				ДобавитьЭлементНастроек("ПоказыватьАналоги", ПоказыватьАналоги);
				
				ПоказыватьКартинку = Истина;
				ДобавитьЭлементНастроек("ПоказыватьКартинку", ПоказыватьКартинку);
				
				ПоказыватьКорзину = Истина;
				ДобавитьЭлементНастроек("ПоказыватьКорзину", ПоказыватьКорзину);
				
				ПоказыватьСопутствующиеТовары = Истина;
				ДобавитьЭлементНастроек("ПоказыватьСопутствующиеТовары", ПоказыватьСопутствующиеТовары);
				
			КонецЕсли;
			
			Если ПоказыватьОстатки И Элемент = "ОтборОстатки" Тогда
				
				Если Не ЗначениеЗаполнено(ТипВладельца) Тогда
					ОтборОстатки = 0;
				Иначе
					ОтборОстатки = ?(Параметры.ДополнительныеПараметры.Свойство("ОстатокПоУмолчанию"), 0, 1);
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементНастроек(Элемент, Значение);
	КонецЦикла;
	
	Если Не ЭтоПодбор Тогда
		
		ИмяКлючаОбъектаФормаВыбора = ?(РежимВыбора, "СписокНоменклатураФормаВыбораОбщая", "СписокНоменклатураФормаСпискаОбщая");
		
		СтрокаНастроек = "ОтборКатегорииИерархияПереключатель,ГруппаКатегория";
		
		МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
		
		СписокНастроекДляЗагрузки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъектаФормаВыбора, ИмяКлючаОбъектаФормаВыбора+"_" + "СписокНастроекФормы");
		
		Если Не СписокНастроекДляЗагрузки = Неопределено Тогда
			
			Для Каждого Элемент Из МассивНастроек Цикл
				
				СтруктураПоиска.ИмяНастройки = Элемент;
				НайденныеСтрроки = СписокНастроекДляЗагрузки.НайтиСтроки(СтруктураПоиска);
				
				Если Не НайденныеСтрроки.Количество() Тогда 
					Значение = Неопределено;
				Иначе
					Значение = НайденныеСтрроки[0].ЗначениеНастройки;
				КонецЕсли;
				
				Если Значение=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьЭлементНастроек(Элемент, Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимВыбора Тогда
		
		Если Параметры.Свойство("ЭтоКопирование") Или Параметры.ДополнительныеПараметры.Свойство("ЭтоКопирование") Тогда
			ЭтоКопирование = Истина;
		КонецЕсли;
		
		СтруктурнаяЕдиницаДокумент = ?(Параметры.Свойство("Склад"), Параметры.Склад, Неопределено);
		
		НастройкиИзДокумента = Параметры.ДополнительныеПараметры.Свойство("НастройкиФормы");
		
		Если НастройкиИзДокумента Тогда
			НастройкиФормы = Параметры.ДополнительныеПараметры.НастройкиФормы;
			ЗаполнитьНастройкиПоНастройкамФормы(НастройкиФормы);
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ТипВладельца")
			И Параметры.ДополнительныеПараметры.ТипВладельца = "УчетВремени" Тогда
			НастройкиИзДокумента = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПодбор Тогда
		ЭтотОбъект.АвтоЗаголовок = Ложь;
		ЭтотОбъект.Заголовок = НСтр("ru='Подбор номенклатуры'");
		
		Если Параметры.Свойство("Организация") Тогда
			ОтборОрганизация = Параметры.Организация;
		КонецЕсли;
		
		ОтборВидЦен = ВидЦен;
		
		Если Параметры.Свойство("ВалютаДокумента") Тогда
			ВалютаДокумента = Параметры.ВалютаДокумента;
		КонецЕсли;
		
		Если Параметры.Свойство("ТолькоНоменклатураИКоличество") Тогда
			ТолькоНоменклатураИКоличество = Параметры.ТолькоНоменклатураИКоличество;
		КонецЕсли;
		
		Дата = ?(Параметры.Свойство("Дата"), Параметры.Дата, ТекущаяДатаСеанса());
		НалогообложениеНДС = ?(Параметры.Свойство("НалогообложениеНДС"), Параметры.НалогообложениеНДС, Неопределено);
		Организация = ?(Параметры.Свойство("Организация"), Параметры.Организация, Неопределено);
		
		Если Параметры.Свойство("УникальныйИдентификаторФормыВладельца") Тогда
			УникальныйИдентификаторФормыВладельца = Параметры.УникальныйИдентификаторФормыВладельца;
		КонецЕсли;
	
		СуммаВключаетНДС = ?(Параметры.Свойство("СуммаВключаетНДС"), Параметры.СуммаВключаетНДС, Истина);
		СтруктурнаяЕдиницаВТабличнойЧасти = ?(Параметры.Свойство("СтруктурнаяЕдиницаВТабличнойЧасти"), Параметры.СтруктурнаяЕдиницаВТабличнойЧасти, Ложь);
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ПоказыватьЦены = Ложь;
			ЗапрашиватьЦену = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("СтруктурнаяЕдиницаПолучатель") Тогда
			СтруктурнаяЕдиницаПолучатель = Параметры.СтруктурнаяЕдиницаПолучатель;
			СтруктурнаяЕдиницаДокумент = Параметры.СтруктурнаяЕдиницаОтправитель;
			ОтборСклад = Параметры.СтруктурнаяЕдиницаОтправитель;
		Иначе
			Если Не СтруктурнаяЕдиницаВТабличнойЧасти Тогда
				
				ПараметрыСтруктурнаяЕдиница = ?(Параметры.Свойство("СтруктурнаяЕдиница"), Параметры.СтруктурнаяЕдиница, Неопределено);
				СтруктурнаяЕдиницаДокумент = ПараметрыСтруктурнаяЕдиница;
				
				Если ПоказыватьОстатки И ОтборОстатки = 1 Тогда
					ОтборСклад = ПараметрыСтруктурнаяЕдиница;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("ИмяФормыВладельца") Тогда
			ИмяФормыВладельца = Параметры.ИмяФормыВладельца;
		КонецЕсли;
		
		Элементы.Выбрать.Заголовок = НСтр("ru='Перенести в документ'");
		
		НастройкиИзДокумента = Параметры.Свойство("НастройкиФормы");
		
		Если НастройкиИзДокумента Тогда
			НастройкиФормы = Параметры.НастройкиФормы;
			ЗаполнитьНастройкиПоНастройкамФормы(НастройкиФормы);
		КонецЕсли;
		
	КонецЕсли;
		
	Если Параметры.ДополнительныеПараметры.Свойство("СтатусыПартий") Тогда
		Для Каждого ЭлементСтатуса Из Параметры.ДополнительныеПараметры.СтатусыПартий Цикл
			ОграниченияТипаПартии.Добавить(ЭлементСтатуса);
		КонецЦикла;
	КонецЕсли;
	
	ОтборКатегорииИерархияПереключатель = КатегорииНоменклатурыСервер.ПолучитьНастройкуВидОтбораНоменклатуры();
	
	ЧислоДоступныхКоманд = Элементы.ПодменюПродать.ПодчиненныеЭлементы.Количество() + Элементы.ПодменюКупить.ПодчиненныеЭлементы.Количество();
	ПоказыватьКорзину = ЧислоДоступныхКоманд > 0 И НЕ Параметры.РежимВыбора;
	
	ПоказыватьЦены = ПоказыватьЦены И ЕстьДоступКЦенам;
	
	РежимВыбораНоменклатураЗаполнена = Параметры.РежимВыбора И Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока);
	
	// Форма открыта с отбором по кокретной категории номенклатуры. 
	// При использовании интерактивного отбора по категории в форме происходит ошибка пересечения отборов 
	ИдентификаторСтроки = 0;
	Если (Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("КатегорияНоменклатуры")) Или ОграничениеДоступаЛупа Тогда
		ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
		Элементы.ОтборКатегорииИерархияПереключатель.Видимость = Ложь;
		ВидимостьКатегорииГруппы = Ложь;
	Иначе
		ВидимостьКатегорииГруппы = Элементы.ОтборКатегорииИерархияПереключатель.Видимость;
		Если ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
			ГруппаТекущейНоменклатуры = ?(РежимВыбораНоменклатураЗаполнена, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Родитель"), ГруппаКатегория);
			Если ЗначениеЗаполнено(ГруппаТекущейНоменклатуры) Тогда
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), ГруппаТекущейНоменклатуры, Ложь);
				Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		ИначеЕсли ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
			ГруппаТекущейНоменклатуры = ?(РежимВыбораНоменклатураЗаполнена, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "КатегорияНоменклатуры"), ГруппаКатегория);
			Если ЗначениеЗаполнено(ГруппаТекущейНоменклатуры) Тогда
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборКатегории.ПолучитьЭлементы(), ГруппаТекущейНоменклатуры, Ложь);
				Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		Иначе
			Элементы.ОтборКатегории.ТекущаяСтрока = 0;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПоложениеПравойПанелиСвернута = Неопределено И ПоложениеПравойПанелиСвернута И ИдентификаторСтроки = 0 Тогда
		ПраваяПанельСвернута = Истина
	Иначе
		ПраваяПанельСвернута = Ложь
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) И УчетПоКомпанииВЦелом Тогда
		ОтборОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоискаДерево.ВыгрузитьЗначения());
	Элементы.СтрокаРасширенногоПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоискаСписок.ВыгрузитьЗначения());
	
	Если ЗначениеЗаполнено(ОтборВидЦен) И Не УправлениеДоступом.ЧтениеРазрешено(ОтборВидЦен) Тогда
		Если ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦен") Тогда
			ОтборВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
		ИначеЕсли ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
			ОтборВидЦен = Справочники.ВидыЦенКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) И Не УправлениеДоступом.ЧтениеРазрешено(ОтборСклад) Тогда
		ОтборСклад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) И Не УправлениеДоступом.ЧтениеРазрешено(ОтборОрганизация) Тогда
		ОтборОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(ОтборСклад);

КонецПроцедуры

&НаКлиенте
Функция СтруктураВыбора()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Номенклатура",);
	СтруктураВозврата.Вставить("Характеристика",);
	СтруктураВозврата.Вставить("ПроверятьЗаполнениеХарактеристики",);
	СтруктураВозврата.Вставить("ПроверятьЗаполнениеПартий",);
	СтруктураВозврата.Вставить("ИспользоватьПартии",);
	СтруктураВозврата.Вставить("ИспользоватьХарактеристики",);
	СтруктураВозврата.Вставить("ТипНоменклатуры",);
	СтруктураВозврата.Вставить("ЭтоНабор",);
	СтруктураВозврата.Вставить("ЕдиницаИзмерения",);
	СтруктураВозврата.Вставить("Цена",);
	СтруктураВозврата.Вставить("СтавкаНДС",);
	СтруктураВозврата.Вставить("Количество",);
	СтруктураВозврата.Вставить("СтранаПроисхождения",);
	СтруктураВозврата.Вставить("Партия",);
	СтруктураВозврата.Вставить("Склад",);
	СтруктураВозврата.Вставить("Ячейка",);
	СтруктураВозврата.Вставить("СтавкаНДСНоменклатуры",);
	СтруктураВозврата.Вставить("КоличествоОстаток",);
	
	Возврат СтруктураВозврата;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзину(СтруктураВыбора)
	
	СтруктураПоискаВКорзине = Новый Структура;
	СтруктураПоискаВКорзине.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
	СтруктураПоискаВКорзине.Вставить("Партия", ?(СтруктураВыбора.Партия = Неопределено, ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка"), СтруктураВыбора.Партия));
	СтруктурнаяЕдиница = СтруктураВыбора.Склад;
	
	СтруктураПоискаВКорзине.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	СтруктураПоискаВКорзине.Вставить("Ячейка", СтруктураВыбора.Ячейка);
	СтруктураПоискаВКорзине.Вставить("Валюта", ВалютаПодбора);
	
	Если СтруктураВыбора.Характеристика=Неопределено ИЛИ СтруктураВыбора.Характеристика="<Без характеристики>" Тогда
		СтруктураПоискаВКорзине.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	Иначе
		СтруктураПоискаВКорзине.Вставить("Характеристика", СтруктураВыбора.Характеристика);
	КонецЕсли;
	
	Если НЕ ПоказыватьЦены Тогда
		СтруктураВыбора.Вставить("ВидЦен",			ОтборВидЦен);
		СтруктураВыбора.Вставить("ВалютаДокумента", ВалютаПодбора);
		СтруктураВыбора.Вставить("Коэффициент",		1);
		Если СтруктураВыбора.Свойство("Характеристика") И СтруктураВыбора.Характеристика=Неопределено Тогда
			СтруктураВыбора.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		КонецЕсли;                                                       
		
		СтруктураВыбора.Вставить("ВидМинимальныхЦен", ВидМинимальныхЦен);
		
		СтруктураПоискаВКорзине.Вставить("Цена", ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора));
		СтруктураВыбора.Цена = СтруктураПоискаВКорзине.Цена;
	Иначе
		СтруктураПоискаВКорзине.Вставить("Цена", СтруктураВыбора.Цена);
	КонецЕсли;
	
	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоискаВКорзине);
	
	Если НайденныеСтроки.Количество()=0 Тогда
		СтрокаКорзины = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураВыбора);
		СтрокаКорзины.Количество = 1;
		СтрокаКорзины.СтавкаНДС = СтруктураВыбора.СтавкаНДСНоменклатуры;
		СтрокаКорзины.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		
		Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда
			СтрокаКорзины.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки(ВидСкидкиНаценки);
		КонецЕсли;
		
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураДанныхНоменклатурыДляРежимаОстатки);
			СтрокаКорзины.СтавкаНДС = СтруктураДанныхНоменклатурыДляРежимаОстатки.СтавкаНДСНоменклатуры;
		Иначе
			СтрокаКорзины.ИспользоватьХарактеристики = СтруктураВыбора.ИспользоватьХарактеристики;
			СтрокаКорзины.ИспользоватьПартии = СтруктураВыбора.ИспользоватьПартии;
			СтрокаКорзины.ПроверятьЗаполнениеПартий = СтруктураВыбора.ПроверятьЗаполнениеПартий;
			СтрокаКорзины.ПроверятьЗаполнениеХарактеристики = СтруктураВыбора.ПроверятьЗаполнениеХарактеристики;
		КонецЕсли;
		
		Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			
			Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
				СтавкаНДСНоменклатуры = СтруктураДанныхНоменклатурыДляРежимаОстатки.СтавкаНДСНоменклатуры;
			Иначе
				СтавкаНДСНоменклатуры = СтруктураВыбора.СтавкаНДСНоменклатуры;
			КонецЕсли;
			
			СтрокаКорзины.СтавкаНДС = ПолучитьСтавкуНДС(СтавкаНДСНоменклатуры);
			
		Иначе
			СтрокаКорзины.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		КонецЕсли;
		
	Иначе
		СтрокаКорзины = НайденныеСтроки[0];
		СтрокаКорзины.Количество = СтрокаКорзины.Количество + СтруктураВыбора.Количество;
		//Если цена изменилась - перезаполняем новым значением
		СтрокаКорзины.Цена = СтруктураВыбора.Цена;
	КонецЕсли;
	
	СтрокаКорзины.Остаток = СтруктураВыбора.КоличествоОстаток;
	ТипНоменклатурыЗапас = СтруктураВыбора.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	СтрокаКорзины.Резерв = ?(ЗаполнятьКолонкуРезерв И ТипНоменклатурыЗапас И ЗначениеЗаполнено(СтрокаКорзины.Остаток) , СтрокаКорзины.Количество, 0);
	
	Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда
		ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета);
	Иначе
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	КонецЕсли;

	Если РазныеВалюты Тогда
		
		СтрокаКорзины.ЦенаВВалютеПодбора = СтрокаКорзины.Цена;
		СтрокаКорзины.Валюта = ВалютаПодбора;
		
		Если ЭтоПодбор Тогда
			ДатаПересчета = Дата;
			ВалютаПересчета = ВалютаДокумента;
		Иначе
			ДатаПересчета = ОбщегоНазначенияКлиент.ДатаСеанса();
			ВалютаПересчета = НациональнаяВалюта;
		КонецЕсли;
		
		СтруктураОкругления = Новый Структура("ПорядокОкругления, ОкруглятьВБольшуюСторону");
		СтруктураОкругления.ПорядокОкругления = ПорядокОкругления;
		СтруктураОкругления.ОкруглятьВБольшуюСторону = ОкруглятьВБольшуюСторону;
		
		ПодборНоменклатурыВДокументахКлиент.ПересчитатьСтрокуТабличнойЧастиВВалюту(СтрокаКорзины, ВалютаПодбора, ВалютаПересчета, ДатаПересчета, СуммаВключаетНДС, СтруктураОкругления);
		
	КонецЕсли;
	
	ТекстОповещения = СтрШаблон(НСтр("ru = 'Товар %1, %2 добавлен в корзину'"), СтруктураВыбора.Номенклатура, СтруктураВыбора.Характеристика);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'"), , ТекстОповещения, БиблиотекаКартинок.ТележкаМаленькая);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора)
	
	//Текущую дату получаем на сервере, используя ТекущаяДатаСеанса, чтобы учесть разницу часовых поясов
	СтруктураВыбора.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
	
	Возврат ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураВыбора);
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьЗавершение(ВыбранныйЭлемент, Параметры) Экспорт

	ПараметрыКорзины=Неопределено;
	Если ВыбранныйЭлемент<>Неопределено И ВыбранныйЭлемент.Значение<>Неопределено Тогда
		ПараметрыКорзины = ВосстановитьНаСервере(ВыбранныйЭлемент.Значение);
		ОткрытьКорзинуПродолжить(ПараметрыКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНаСервере(КлючНастроек)
	
	СтрокаНастроек = ХранилищеНастроекДанныхФорм.Загрузить("КорзинаНоменклатура", КлючНастроек);
	Корзина.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаНастроек));
	ХранилищеНастроекДанныхФорм.Удалить("КорзинаНоменклатура", КлючНастроек, ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ЧислоОтложенныхКорзин = ЧислоОтложенныхКорзин - 1;
	Если ЧислоОтложенныхКорзин>0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	Иначе
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаПустая;
	КонецЕсли;
	
	ПараметрыКорзины = ЗаписатьПодборВХранилище();
	Возврат ПараметрыКорзины;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОтложенных()
	
	СписокОтложенных = ХранилищеНастроекДанныхФорм.ПолучитьСписок("КорзинаНоменклатура");
	ЧислоОтложенныхКорзин = СписокОтложенных.Количество();
	Возврат СписокОтложенных;
	
КонецФункции

&НаКлиенте
Процедура СписокЗапасыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыбратьВСписке(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВСписке(СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Или Не ТекущиеДанные.Свойство("Номенклатура") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.РежимВыбора Тогда
		
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			СтруктураПараметров= Новый Структура("Номенклатура, Характеристика, Партия, СтруктураНастроек,
			|Склад, ЕдиницаИзмерения, Ячейка");
			
			СтруктураПараметров.Номенклатура = ТекущиеДанные.Ссылка;
			СтруктураПараметров.Характеристика = ТекущиеДанные.Характеристика;
			СтруктураПараметров.Партия = ТекущиеДанные.Партия;
			СтруктураПараметров.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
			СтруктураПараметров.Ячейка = ТекущиеДанные.Ячейка;
			
			Если Элементы.ДеревоОстатки.РежимВыбора И Не ТекущиеДанные.ПартияДляИсключения И Не ТекущиеДанные.Недоступен Тогда
				
				Если ВыборНесколькихЗначений Тогда
					МассивНоменклатуры = Новый Массив;
					МассивНоменклатуры.Добавить(ТекущиеДанные.Ссылка);
					ОповеститьОВыборе(МассивНоменклатуры);
				Иначе
					СтруктураПараметров.Склад = ТекущиеДанные.Склад;
					СтруктураПараметров.СтруктураНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
					ОповеститьОВыборе(СтруктураПараметров);
				КонецЕсли;
			Иначе
				СтрокаСообщения = НСтр("ru = '%1%. Выберите доступную строку.'");
				
				Если ТекущиеДанные.ПартияДляИсключения Тогда
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Статус партии не соответствует операции объекта'"));
				ИначеЕсли ТипЗнч(ТекущиеДанные.Показатель) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Тип склада не соответствует операции объекта'"));
				Иначе
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", НСтр("ru = 'Номенклатура поставщика не может быть выбрана'"));
				КонецЕсли;
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ЭтотОбъект.ЗакрыватьПриВыборе = Ложь И Тип(ЭтотОбъект.ВладелецФормы) = Тип("ТаблицаФормы") 
				И ЭтотОбъект.ВладелецФормы.Имя = "ValueList" Тогда //подбор в платформенный список значений
				
				ОповеститьОВыборе(Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура);
				
			ИначеЕсли ВыборНесколькихЗначений Тогда
				
				МассивВыбранныхЗначений = Новый Массив;
				Для Каждого ВыделеннаяСтрока Из Элементы[ТекущаяСтраницаНоменклатуры].ВыделенныеСтроки Цикл
					Если ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Номенклатура") Тогда
						
						МассивВыбранныхЗначений.Добавить(ВыделеннаяСтрока);
						
					ИначеЕсли ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
						
						МассивВыбранныхЗначений.Добавить(Элементы[ТекущаяСтраницаНоменклатуры].ДанныеСтроки(ВыделеннаяСтрока).Номенклатура);
						
					КонецЕсли;
				КонецЦикла;
				
				ОповеститьОВыборе(МассивВыбранныхЗначений);
			Иначе
				
				ТекущиеДанные = Элементы.СписокЗапасы.ТекущиеДанные;
				Если ТекущиеДанные.ПометкаУдаления Тогда
					
					Режим = РежимДиалогаВопрос.ДаНет;
					
					ПараметрыОповещения = Новый Структура("ВыбраннаяСтрока", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура);
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПомеченНаУдаление", ЭтотОбъект, ПараметрыОповещения);
					ПоказатьВопрос(Оповещение, НСтр("ru='Выбранные данные помечены на удаление.
					|Выполнить выбор этих данных?'"), Режим, 0);
					
					Возврат;
					
				КонецЕсли;
				
				ОповеститьОВыборе(Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеКомандыСпискаНоменклатуры

&НаКлиенте
Процедура СоздатьНоменклатуру()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыНоменклатура");
	
	Если Элементы.ОтборИерархия.ТекущиеДанные<>Неопределено Тогда
		РодительЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
	Иначе
		РодительЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли; 
	ЗначенияЗаполнения = Новый Структура("Родитель", РодительЗначение);
		
	ЗаполнениеТип = Новый Массив;
	Если ОтборТипЗапас Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	КонецЕсли;
	Если ОтборТипУслуга Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли;
	Если ОтборТипРабота Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;
	Если ОтборТипВидРабот Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
	КонецЕсли;
	Если ОтборТипОперация Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция"));
	КонецЕсли;
	Если ОтборТипПодарочныйСертификат Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЕсли;
	Если ЗаполнениеТип.Количество()>0 Тогда
		ЗначенияЗаполнения.Вставить("ТипНоменклатуры", ЗаполнениеТип);
	ИначеЕсли ЗначениеЗаполнено(ОграничениеТипаИсходное) Тогда
		ЗначенияЗаполнения.Вставить("ТипНоменклатуры", ОграничениеТипаИсходное);
	КонецЕсли;
	Если ОтборНабор Тогда
		ЗначенияЗаполнения.Вставить("ЭтоНабор", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		ЗначенияЗаполнения.Вставить("КатегорияНоменклатуры", ОтборКатегорииТекущая);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("Отбор", СписокЗапасы.Отбор);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыНоменклатура");
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппу()
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("Ключ", Элементы.ОтборИерархия.ТекущиеДанные.Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГруппу()
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("ЗначениеКопирования", Элементы.ОтборИерархия.ТекущиеДанные.Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу()
	
	РодительЗначение = ?(Элементы.ОтборИерархия.ТекущиеДанные = Неопределено, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
		Элементы.ОтборИерархия.ТекущиеДанные.Значение);
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗначенияЗаполнения",  Новый Структура("Родитель, ЭтоГруппа", РодительЗначение, Истина));
	ПараметрыЗаполнения.Вставить("ЭтоГруппа",  Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", ПараметрыЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНоменклатуру()
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.Свойство("Ссылка") Тогда
		Возврат
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеНоменклатуру()
	
	ТекущаяНоменклатура = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
	НовоеЗначениеПометкиУдаления = ИзменитьПометкуУдаленияСервер(ТекущаяНоменклатура);
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(НовоеЗначениеПометкиУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ТекущаяНоменклатура),
		ТекущаяНоменклатура,
		БиблиотекаКартинок.Информация32);
		
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаленияСервер(Номенклатура)
	
	НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	НоменклатураОбъект.УстановитьПометкуУдаления(Не НоменклатураОбъект.ПометкаУдаления, Истина);
	
	Возврат НоменклатураОбъект.ПометкаУдаления;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуУдаленияГруппы(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(Элементы.ОтборИерархия.ТекущиеДанные.ПолучитьИдентификатор());
	ТекущаяСтрокаДерева.ПометкаУдаления = ИзменитьПометкуУдаленияСервер(ТекущаяСтрокаДерева.Значение);
	ТекущаяСтрокаДерева.Картинка= ?(ТекущаяСтрокаДерева.ПометкаУдаления,1,0);
	НоменклатураВДокументахКлиентСервер.УстановитьФлагУПодчиненных(ТекущаяСтрокаДерева.ПолучитьЭлементы(), "ПометкаУдаления", ТекущаяСтрокаДерева.ПометкаУдаления);
	НоменклатураВДокументахКлиентСервер.УстановитьФлагУПодчиненных(ТекущаяСтрокаДерева.ПолучитьЭлементы(), "Картинка", ТекущаяСтрокаДерева.Картинка);
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(ТекущаяСтрокаДерева.ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ТекущаяСтрокаДерева.Значение),
		ТекущаяСтрокаДерева.Значение,
		БиблиотекаКартинок.Информация32);
		
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВГруппуНаСервере(Результат, ДополнительныеПараметры)

	Об = ДополнительныеПараметры.ТекущийЭлементСписка.ПолучитьОбъект();
	Об.Родитель = Результат;
	Об.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ДополнительныеПараметры.Свойство("ТекущийЭлементСписка") Тогда
		ПереместитьВГруппуНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	
	ТекЭлементСписка = Новый Структура("ТекущийЭлементСписка",Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка);
	ОписаниеОповещенияПереместить = Новый ОписаниеОповещения("ПереместитьВГруппуПродолжить", ЭтотОбъект, ТекЭлементСписка);
		
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",,,,,, 
		ОписаниеОповещенияПереместить, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	
	Если Не Копирование И Не Группа Тогда
		Отказ = Истина;
		СоздатьНоменклатуру();
	ИначеЕсли Группа Тогда
		Отказ = Истина;
		СоздатьГруппу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "КартинкаКорзина" Или Элемент.ТекущийЭлемент.Имя = "КартинкаОстатки" Тогда
		Отказ = Истина
	КонецЕсли;
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ЭтоГруппа", Элемент.ТекущиеДанные) И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ГруппировкаСтроки", Элемент.ТекущиеДанные) Тогда
		//для группировки по группам или категориям
		Если ТипЗнч(Элемент.ТекущиеДанные.ГруппировкаСтроки.Ключ)=Тип("СправочникСсылка.Номенклатура") Тогда
			Отказ = Истина;
			ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("Ключ",Элемент.ТекущиеДанные.ГруппировкаСтроки.Ключ));
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ГруппировкаСтроки.Ключ)=Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			Отказ = Истина;
			ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаОбъекта", Новый Структура("Ключ",Элемент.ТекущиеДанные.ГруппировкаСтроки.Ключ));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапасыПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Элементы.СкопироватьНоменклатуру.Доступность = НЕ ТекущиеДанные=Неопределено;
	
	Если НЕ ЭтоМобильныйКлиент Тогда
	
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КонецЕсли;
	
	Если Не Элементы.ДекорацияРазвернутьОтборы.Видимость Тогда
		
		Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.Свойство("Ссылка") Тогда
			Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
			Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
			Элементы.СписокЗапасыКонтекстноеМенюГруппаАналогиСопутТовары.Видимость = Ложь;
			Элементы.СписокЗапасыКонтекстноеМенюПерейтиКРодителю.Видимость = Ложь;
			
			АдресКартинки = "";
			Изображения.Очистить();
			
			Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = '<номенклатура не выбрана>'");
			НадписьАналогиНоменклатуры = НСтр("ru = '<номенклатура не выбрана>'");
			НадписьСопутствующийТовар = НСтр("ru = '<номенклатура не выбрана>'");
			НадписьЗаголовокНоменклатуры = НСтр("ru = '<номенклатура не выбрана>'");
			НадписьЦена = НСтр("ru = '<номенклатура не выбрана>'");
			
			РасшифровкаОстатков.Очистить();
			
			Возврат
		КонецЕсли;
		
		Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = 'Добавить изображение'");
		
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
		
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.Свойство("Ссылка") Тогда
		Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
		Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		Элементы.СписокЗапасыКонтекстноеМенюГруппаАналогиСопутТовары.Видимость = Ложь;
		Элементы.СписокЗапасыКонтекстноеМенюПерейтиКРодителю.Видимость = Ложь;
		Возврат 
	КонецЕсли;
		
	Элементы.СписокЗапасыКонтекстноеМенюПерейтиКРодителю.Видимость = Истина;
	
	Если Не Элементы.СписокЗапасыКонтекстноеМенюГруппаАналогиСопутТовары.Видимость Тогда
		Элементы.СписокЗапасыКонтекстноеМенюГруппаАналогиСопутТовары.Видимость = Истина;
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		
		Если ТекущиеДанные.КартинкаКорзина= 1 Тогда
			Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Истина;
		Иначе
			Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
			Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
			Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
	КонецЕсли;
	
	Если ОтборКатегорииИерархияПереключатель = ВидОтбораПоСегменту Тогда
		Элементы.СписокЗапасыКонтекстноеМенюПерейтиКРодителю.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоНоменклатуреКлиент()
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.Свойство("Ссылка") Тогда
		Возврат 
	КонецЕсли;
	
	Номенклатура = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат 
	КонецЕсли;
	
	Если Не УстановленОтбор Тогда
		
		Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
			ИдентификаторГруппыКатегории = Элементы.ОтборКатегории.ТекущаяСтрока;
		Иначе
			ИдентификаторГруппыКатегории = Элементы.ОтборИерархия.ТекущаяСтрока;
		КонецЕсли;
		
		ИдентификаторТекущейСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Если Не ПоказыватьКартинку И Не ПоказыватьАналоги И Не ПоказыватьСопутствующиеТовары И Не ОстаткиВидимость Тогда 
		Возврат
	КонецЕсли;

	НадписьЗаголовокНоменклатуры = Строка(Номенклатура);
	
	ТекущийНомерИзображения = 0;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		Характеристика = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Характеристика;
		ОбновитьДанныеПоНоменклатуреДляДерваКлиент(Характеристика);
	Иначе
		АдресКартинки = "";
		Изображения.Очистить();
		ОбновитьДанныеПоНоменклатуреСервер(Номенклатура,, ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ОстаткиВидимость Тогда
		ОбновитьКартинкуКорзинаРасшифровкаОстатков();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоНоменклатуреДляДерваКлиент(Характеристика)
	
	ПараметрыПоиска = Новый Структура("Характеристика", Характеристика);
	
	НайденныеСтроки = СопутствующиеТоварыДляДерева.НайтиСтроки(ПараметрыПоиска);
	
	Если Не НайденныеСтроки.Количество() Или НайденныеСтроки[0].КоличествоПозиций = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Нет сопутствующих товаров'");
	Иначе
		
		Выборка = НайденныеСтроки[0];
		ТекстСопТовар = ПредметИсчисленияНаКлиенте(
		Выборка.КоличествоПозиций,
		НСтр("ru = 'сопутствующий товар'"),
		НСтр("ru = 'сопутствующих товара'"),
		НСтр("ru = 'сопутствующих товаров'"),
		"м");
		
		ТекстКоличество = ?(Не ЗначениеЗаполнено(Выборка.Количество), "0", Строка(Выборка.Количество));
		
		ТекстСопТовар = Строка(Выборка.КоличествоПозиций) + " " + ТекстСопТовар;
		
		ТекстЗаголовка = НСтр("ru = '%1% / %2%'");
		
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", ТекстКоличество  + ?(Выборка.КоличествоПозиций = 1, " " + Выборка.ЕдиницаИзмерения, НСтр("ru = ' ед.'")));
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", ТекстСопТовар);
		
	КонецЕсли;
	
	НадписьСопутствующийТовар = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Функция ПредметИсчисленияНаКлиенте(Число, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2, ПараметрыПредметаИсчисления3, Род) Экспорт
	
	ФорматнаяСтрока = "Л = ru_RU";
	
	ПараметрыПредметаИсчисления = "%1,%2,%3,%4,,,,,0";
	ПараметрыПредметаИсчисления = СтрШаблон(
		ПараметрыПредметаИсчисления,
		ПараметрыПредметаИсчисления1,
		ПараметрыПредметаИсчисления2,
		ПараметрыПредметаИсчисления3,
		Род);
		
	ЧислоСтрокойИПредметИсчисления = НРег(ЧислоПрописью(Число, ФорматнаяСтрока, ПараметрыПредметаИсчисления));
	
	ЧислоПрописью = ЧислоСтрокойИПредметИсчисления;
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления1, "");
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления2, "");
		
	ПредметИсчисления = СтрЗаменить(ЧислоСтрокойИПредметИсчисления, ЧислоПрописью, "");
	
	Возврат ПредметИсчисления;
	
КонецФункции

#КонецОбласти

#Область РаботаСКорзиной

&НаКлиенте
Процедура ДекорацияКорзинаНажатие(Элемент)
	СвернутьРазвернутьКорзину();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПодобраноТоваров(ВалютаИтогов = Неопределено)
	
	КоличествоТоваров	= Корзина.Итог("Количество");
	СуммаТоваров		= Корзина.Итог("Всего");
	
	Если Корзина.Количество()=0 Тогда
		НадписьПодобраноТоваров = НСтр("ru = 'Ваша корзина:
		|перетащите товары'");
		НадписьПодобраноТоваровРасшифровка =  НСтр("ru = '0 на сумму 0'");
	Иначе	
		НоменклатураВДокументахКлиентСервер.ОбновитьИтогиПодобранныхТоваров(ЭтаФорма, ВалютаИтогов);
		НадписьПодобраноТоваровРасшифровка = СокрЛП(НадписьПодобраноТоваров);
		НадписьПодобраноТоваровРасшифровка = СокрЛП(СтрЗаменить(НадписьПодобраноТоваровРасшифровка, НСтр("ru = 'Ваша корзина: '"), ""));
	КонецЕсли; 
	
	Если НЕ КоличествоТоваров = 0 Или НЕ СуммаТоваров = 0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаСТоварами;
		Возврат
	КонецЕсли;
	
	Если ЧислоОтложенныхКорзин > 0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
		Возврат;
	КонецЕсли;
		
	Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаПустая;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПеретащитьВКорзину(ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеретащитьВКорзину(ПараметрыПеретаскивания)
	
	Если ЗапрашиватьКоличество Или ЗапрашиватьЦену Тогда
		ДобавитьВКорзинуСписок();
		Возврат;
	КонецЕсли;
	
	ДобавитьВКорзину(ПараметрыПеретаскивания.Значение);
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные.КартинкаКорзина = 1 Тогда
		Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
		Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Истина;
		
		Если ПоказыватьСопутствующиеТовары И ВыводСопутствующихТоваров = 1 Тогда
			
			Если Не УстановленОтбор Тогда
				
				Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
					ИдентификаторГруппыКатегории = Элементы.ОтборКатегории.ТекущаяСтрока;
				Иначе
					ИдентификаторГруппыКатегории = Элементы.ОтборИерархия.ТекущаяСтрока;
				КонецЕсли;
				
				ИдентификаторТекущейСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
			КонецЕсли;
			
			УстановитьОтборСопутствующиеТовары(ТекущиеДанные,,Истина);
		КонецЕсли;
		
	Иначе
		Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
		Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзинуПродолжить(ПараметрыКорзины)
	
		КорзинаРасшифровкаВидимость = Не КорзинаРасшифровкаВидимость;
		
		Элементы.ГруппаОбщаяКорзина.Видимость = КорзинаРасшифровкаВидимость;
		Элементы.Корзина.Видимость = Не КорзинаРасшифровкаВидимость;
		
		Если КорзинаРасшифровкаВидимость Тогда
			Элементы.Отложить.Доступность = (Корзина.Количество()>0);
			Элементы.ОчиститьКорзину.Доступность = (Корзина.Количество()>0);
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗакрытие(ПараметрЗакрытия, Параметры) Экспорт

	ТребуетсяОбновление = Корзина.Количество();
	
	Корзина.Очистить();
	
	Если ПараметрЗакрытия = Неопределено Тогда
		//Закрытие без сохранения
	ИначеЕсли ПараметрЗакрытия="КорзинаОтложена" Тогда
		ЧислоОтложенныхКорзин = ЧислоОтложенныхКорзин + 1;
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	ИначеЕсли ПараметрЗакрытия="ПеренестиВДокумент" Тогда
		//Закрытие без сохранения
	Иначе 
		//Закрытие с сохранением
		Для каждого стр Из ПараметрЗакрытия.Корзина Цикл
			НовСтр = Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стр);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров();
	
	Если ТипЗнч(ПараметрЗакрытия) = Тип("Структура") И ПараметрЗакрытия.Свойство("ТипОтбора") Тогда
		
		ОснованиеОтбораСсылка = ПараметрЗакрытия.ОснованиеОтбораСсылка;
		
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			
			Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
			
			УстановитьСтраницуСпискаНоменклатуры(ПредыдущаяСтраницаСписка, Ложь);
			ПереформироватьЗапросыСписков();
			
		КонецЕсли;
		
		ИдентификаторТекущейСтроки = ОснованиеОтбораСсылка;
		
		Если ПараметрЗакрытия.ТипОтбора = "Аналоги" Тогда
			УстановитьОтборАналоги(ОснованиеОтбораСсылка, Истина);
		Иначе
			
			Если ПараметрЗакрытия.Свойство("Характеристика") Тогда
				ХарактеристикаОтбора = ПараметрЗакрытия.Характеристика;
			Иначе
				ХарактеристикаОтбора = Неопределено;
			КонецЕсли;
			
			УстановитьОтборСопутствующиеТовары(ОснованиеОтбораСсылка, Истина,,,ХарактеристикаОтбора);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		
		Если ТекущаяСтраницаНоменклатуры = "СписокЗапасы" Тогда
			УстановитьПараметрыЗапросовСписков();
			Элементы.СписокЗапасы.Обновить();
			
		ИначеЕсли ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
			ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		
		ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Номенклатура = ТекущиеДанные.Ссылка;
			ОбновитьИзображение(Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДереваБезПерезаполнения(КоллекцияЭлементовДерева, СтруктураПоиска)
	
	СоответствиеСтрок = Новый Соответствие;
	СобратьДанныеДерева(КоллекцияЭлементовДерева, СтруктураПоиска, СоответствиеСтрок);
	
	Для Каждого ЭлементСоответствия Из СоответствиеСтрок Цикл
		СтрокаДерева = ДеревоОстатки.НайтиПоИдентификатору(ЭлементСоответствия.Значение);
		СтрокаДерева.КартинкаКорзина = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеДерева(КоллекцияЭлементовДерева, СтруктураПоиска, СоответствиеСтрок)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		СтруктураПоиска.Номенклатура = СтрокаДерева.Номенклатура;
		СтруктураПоиска.Характеристика = СтрокаДерева.Характеристика;
		СтруктураПоиска.Партия = СтрокаДерева.Партия;
		СтруктураПоиска.СтруктурнаяЕдиница = СтрокаДерева.Склад;
		СтруктураПоиска.Ячейка = ?(Не ТипЗнч(СтрокаДерева.Ячейка) = Тип("СправочникСсылка.Ячейки"), ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка"), СтрокаДерева.Ячейка);
		
		НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() И Не СтрокаДерева.Недоступен Тогда
			УИД = НайденныеСтроки[0].ПолучитьИдентификатор();
			СоответствиеСтрок.Вставить(УИД,СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ОграниченияТипаПартии.Количество() Тогда
			НайденныйСтатус = ОграниченияТипаПартии.НайтиПоЗначению(СтрокаДерева.СтатусПартии);
			Если ЗначениеЗаполнено(СтрокаДерева.Партия) Тогда
				СтрокаДерева.ПартияДляИсключения = ?(НайденныйСтатус = Неопределено, Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДерева.КартинкаКорзина = ?(Не СтрокаДерева.Недоступен И Не СтрокаДерева.ПартияДляИсключения, 0, СтрокаДерева.КартинкаКорзина);
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			СобратьДанныеДерева(КоллекцияЭлементов, СтруктураПоиска, СоответствиеСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ВыбранныеСтроки, Склад = Неопределено, ИмяТаблицыДобавления = "")
	
	СтрокаДобавлена = Истина;
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		Для Каждого ВыделеннаяСтрока Из ВыбранныеСтроки Цикл
			ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, Склад, СтрокаДобавлена, ИмяТаблицыДобавления);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДобавитьСтрокуВКорзину(ВыбранныеСтроки, Склад, СтрокаДобавлена, ИмяТаблицыДобавления);
	КонецЕсли;
	
	Если Не СтрокаДобавлена Тогда Возврат КонецЕсли;
	
	ВалютаИтогов = ВалютаПредставление;
	Если РазныеВалюты Тогда
		Если ЭтоПодбор Тогда
			ВалютаПересчета = ВалютаДокумента;
		Иначе
			ВалютаПересчета = НациональнаяВалюта;
		КонецЕсли;
		ВалютаИтогов = ВалютаПересчета;
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров(ВалютаИтогов);
	
	ОбновитьДанныеПараметровДинамическихСписковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКорзину(ВыделеннаяСтрока, Склад, СтрокаДобавлена = Истина, ИмяТаблицыДобавления = "")

	СтруктураВыбора = СтруктураВыбора();
	
	Если ТипЗнч(ВыделеннаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		ДанныеСтроки = ВыделеннаяСтрока;
	ИначеЕсли ТекущаяСтраницаНоменклатуры = "СписокЗапасы" 
		И ТипЗнч(ВыделеннаяСтрока) = Тип("ДанныеФормыЭлементКоллекции") И ВыделеннаяСтрока.Свойство("Номенклатура") Тогда
		
		ДанныеСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ДанныеСтроки(ВыделеннаяСтрока.Номенклатура);
		
		Если ВыделеннаяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
			Склад = ВыделеннаяСтрока.СтруктурнаяЕдиница;
		КонецЕсли;
		
	Иначе
		ДанныеСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ДанныеСтроки(ВыделеннаяСтрока);
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено Тогда
		СтрокаДобавлена = Ложь;
		Возврат 
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураВыбора, ДанныеСтроки);
	
	Если ТекущаяСтраницаНоменклатуры = "СписокЗапасы" Тогда
		
		Если Не ИмяТаблицыДобавления = "РасшифровкаОстатков" Тогда
			Склад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		Склад = ?(ЗначениеЗаполнено(ДанныеСтроки.Склад), ДанныеСтроки.Склад, ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		
		Если ЭтоПодбор Тогда
			
			Если ЗначениеЗаполнено(ОтборСклад) Тогда
				СтруктураВыбора.Склад = ОтборСклад;
			Иначе
				СтруктураВыбора.Склад = СтруктурнаяЕдиницаДокумент;
			КонецЕсли;
			
		ИначеЕсли ПоказыватьОстатки И ЗначениеЗаполнено(ОтборСклад) Тогда
			
			Если ТипСтруктурнойЕдиницыВОтборе = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
				СтруктураВыбора.Склад  = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
			Иначе
				СтруктураВыбора.Склад = ОтборСклад;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СтруктураВыбора.Склад = Склад;
	КонецЕсли;
	
	Если ТекущаяСтраницаНоменклатуры = "СписокЗапасы" Тогда
		СтруктураВыбора.Ячейка =  ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		Если ДанныеСтроки.Свойство("Склад") И ДанныеСтроки.Свойство("Ячейка") Тогда
			Если ДанныеСтроки.Склад = СтруктураВыбора.Склад Тогда
				СтруктураВыбора.Ячейка = ДанныеСтроки.Ячейка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоНоменклатураИКоличество Тогда
		СтруктураВыбора.Склад = Неопределено;
		СтруктураВыбора.Ячейка = Неопределено;
	КонецЕсли;
		
	СтруктураВыбора.Количество = 1;
	ДобавитьНоменклатуруВКорзину(СтруктураВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаЗавершение(ВыбранныйЭлемент, Параметры) Экспорт

	Если ВыбранныйЭлемент<>Неопределено И ВыбранныйЭлемент.Значение<>Неопределено Тогда
		РазрешитьЗакрытие = 1;
		НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ВыбранныйЭлемент.Значение);
		Корзина.Очистить();
		ОбновитьНадписьПодобраноТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуИзСписка(Команда)
	ДобавитьВКорзинуСписок(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзКорзины(Команда)
	ДобавитьВКорзинуСписок(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НадписьКорзинаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СвернутьРазвернутьКорзину();
	ПереопределитьКнопкуВыбораПоУмолчнию()
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементИзКорзины(ТекущиеДанные, ДобавлениеИзСписка, Склад = Неопределено, ИмяТаблицыДобавления = Неопределено)
	
	Если ТекущиеДанные.КартинкаКорзина = 0 Тогда
		СписокСтрокДобавленияВКорзину.Удалить(0);
		ДобавитьУдалитьСтрокиИзКорзины(,,ИмяТаблицыДобавления);
		Возврат
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Если Не ДобавлениеИзСписка Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтурктурнаяЕдиница",);
		СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Ссылка);
		СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		СтруктураПоиска.Вставить("Партия", ТекущиеДанные.Партия);
		СтруктураПоиска.Вставить("СтруктурнаяЕдиница", ТекущиеДанные.Склад);
		СтруктураПоиска.Вставить("Ячейка", ?(Не ТипЗнч(ТекущиеДанные.Ячейка) = Тип("СправочникСсылка.Ячейки"), 
		ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка"), ТекущиеДанные.Ячейка));
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура, СтруктурнаяЕдиница", ТекущиеДанные.Ссылка, Склад);
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("СтруктураПоиска, ДобавлениеИзСписка, ИмяТаблицыДобавления", СтруктураПоиска, ДобавлениеИзСписка, ИмяТаблицыДобавления);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(Оповещение, СтрШаблон(НСтр("ru='Удалить %1 из корзины?'"), """" +Строка(ТекущиеДанные.Ссылка)+ """"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ПараметрыОповещения) Экспорт
	
	ИмяТаблицыДобавления = ПараметрыОповещения.ИмяТаблицыДобавления;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		СписокСтрокДобавленияВКорзину.Удалить(0);
		ДобавитьУдалитьСтрокиИзКорзины(,,ИмяТаблицыДобавления);
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = ПараметрыОповещения.СтруктураПоиска;
	
	Если ПараметрыОповещения.ДобавлениеИзСписка Тогда
		
		Если ЗначениеЗаполнено(СтруктураПоиска.СтруктурнаяЕдиница) Тогда
			ПараметрыПоиска = Новый Структура("Номенклатура, СтруктурнаяЕдиница", СтруктураПоиска.Номенклатура, СтруктураПоиска.СтруктурнаяЕдиница);
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Товар %1 склад %2 удален из корзины'"), СтруктураПоиска.Номенклатура, СтруктураПоиска.СтруктурнаяЕдиница);
		Иначе
			ПараметрыПоиска = Новый Структура("Номенклатура", СтруктураПоиска.Номенклатура);
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Товар %1 удален из корзины'"), СтруктураПоиска.Номенклатура);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'")
		,
		,
		ТекстСообщения, БиблиотекаКартинок.ТележкаОтмена);
		
	Иначе
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Товар %1 %2 %3 скад %4 удален из корзины'")
		, СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика, СтруктураПоиска.Партия, СтруктураПоиска.СтруктурнаяЕдиница);
		
		ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка"
						, СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика, СтруктураПоиска.Партия, СтруктураПоиска.СтруктурнаяЕдиница, СтруктураПоиска.Ячейка);

		ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'")
		,
		,
		ТекстСообщения, БиблиотекаКартинок.ТележкаОтмена);

	КонецЕсли;
	
	НайденныеСтроки = Корзина.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Корзина.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	ОбновитьНадписьПодобраноТоваров();
	
	Если ИмяТаблицыДобавления = "ДеревоОстатки" Тогда
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), ПараметрыПоиска);
	Иначе
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
	КонецЕсли;
	
	СписокСтрокДобавленияВКорзину.Удалить(0);
	ДобавитьУдалитьСтрокиИзКорзины(,, ИмяТаблицыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументСТоварамиИзКорзины(ТипДокумента)
	
	ОткрытыеОкна = ПолучитьОкна();
	
	ТаблицаПодчиненныхФорм.Очистить();
	
	СоответствиеИмениФормыТипуДокумента = Новый Соответствие;
	
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказНаряд","Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказПокупателя","Документ.ЗаказПокупателя.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("СчетНаОплату","Документ.СчетНаОплату.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("РасходнаяНакладная","Документ.РасходнаяНакладная.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("АктВыполненныхРабот","Документ.АктВыполненныхРабот.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЧекККМ","Документ.ЧекККМ.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ЗаказПоставщику","Документ.ЗаказПоставщику.Форма.ФормаДокумента");
	СоответствиеИмениФормыТипуДокумента.Вставить("ПриходнаяНакладная","Документ.ПриходнаяНакладная.Форма.ФормаДокумента");
	
	ИмяФормыСоздаваемогоДокумента = СоответствиеИмениФормыТипуДокумента.Получить(ТипДокумента);
	
	Для Каждого ОткрытаяФорма Из ОткрытыеОкна Цикл
		
		Если ОткрытаяФорма.Содержимое.Количество() И ОткрытаяФорма.Содержимое[0].ВладелецФормы = ЭтаФорма Тогда
			ИмяТекФормы = ОткрытаяФорма.Содержимое[0].ИмяФормы;
			
			Если ИмяФормыСоздаваемогоДокумента = ИмяТекФормы Тогда
				НоваяСтрока = ТаблицаПодчиненныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОткрытаяФорма.Содержимое[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ТаблицаПодчиненныхФорм.Количество()> 1 Тогда
		
		ТаблицаПодчиненныхФорм.Сортировать("ДатаДокумента Возр");
		
		СписокВыбора = Новый СписокЗначений;
		
		СчетчикФорм = 1;
		
		СписокВыбора.Добавить(Неопределено, НСтр("ru='Создать документ'"),,БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Для Каждого ЭлементТаблицы Из ТаблицаПодчиненныхФорм Цикл
			
			ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(ЭлементТаблицы.УникальныйИдентификатор);
			
			КонтрагентФормы = ?(ЗначениеЗаполнено(ОткрытаяФорма.Объект.Контрагент),Строка(ОткрытаяФорма.Объект.Контрагент) + "; ", "");
			ДатаФормы = Строка(ЭлементТаблицы.ДатаДокумента) + "; ";
			Автор = ?(ЗначениеЗаполнено(ОткрытаяФорма.Объект.Автор), "("+Строка(ОткрытаяФорма.Объект.Автор) + ");", "");
			
			СписокВыбора.Добавить(ЭлементТаблицы.УникальныйИдентификатор, НСтр("ru='Добавить в открытый документ '") + Строка(СчетчикФорм) + " " + НСтр("ru='от'")+ " " + ДатаФормы + КонтрагентФормы + Автор);
			СчетчикФорм = СчетчикФорм + 1;
			
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура("ТипДокумента", ТипДокумента);
		
		ОповещениеВыбора = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФормы", ЭтаФорма, СтруктураПараметров);
		ПоказатьВыборИзМеню(ОповещениеВыбора, СписокВыбора, Элементы.КоманднаяПанельОформить);
		
		Возврат;
	ИначеЕсли ТаблицаПодчиненныхФорм.Количество()=1 Тогда
		
		ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(ТаблицаПодчиненныхФорм[0].УникальныйИдентификатор);
		
		Если Не ОткрытаяФорма = Неопределено Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			
			ПараметрыОповещения = Новый Структура("ТипДокумента, ОткрытаяФорма", ТипДокумента, ОткрытаяФорма);
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДобавитьВДокумент", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru='Добавить позиции в открытый документ?'"), Режим, 0);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма,, Истина);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
	Иначе
		УстановитьПараметрыЗапросовСписков();
		Элементы.СписокЗапасы.Обновить();
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДобавитьВДокумент(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытаяФорма = ПараметрыОповещения.ОткрытаяФорма;
		ТипДокумента = ПараметрыОповещения.ТипДокумента;
		
		СтруктураЗаполненияДокументаИОшибки = НоменклатураВДокументахКлиент.ПолучитьСтруктуруЗаполнения(ЭтаФорма, ТипДокумента);
		
		СтруктураЗаполненияДокумента = СтруктураЗаполненияДокументаИОшибки.СтруктураЗаполнения;
		МассивСообщенийОбОшибках = СтруктураЗаполненияДокументаИОшибки.МассивСообщенийОбОшибках;
		
		СтруктураДанныеТаблиц = СтруктураДанныеТаблицДокумента(ТипДокумента, СтруктураЗаполненияДокумента);
		
		НаименованиеОповещения = НСтр("ru='ОбновлениеФормы'") + ТипДокумента;
		
		Оповестить(НаименованиеОповещения,СтруктураДанныеТаблиц, ОткрытаяФорма.УникальныйИдентификатор);
		
		ОткрытаяФорма.Активизировать();
		
		Для Каждого стрОшибка Из МассивСообщенийОбОшибках Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(стрОшибка);
		КонецЦикла;
		
		ТаблицаПодчиненныхФорм.Очистить();
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТипДокумента = ПараметрыОповещения.ТипДокумента;
		НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма, Новый УникальныйИдентификатор, Истина);
	КонецЕсли;
	
	Корзина.Очистить();
	ОбновитьНадписьПодобраноТоваров();
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
	Иначе
		УстановитьПараметрыЗапросовСписков();
		Элементы.СписокЗапасы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораФормы(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	УИД = Результат.Значение;
	ТипДокумента = ПараметрыОповещения.ТипДокумента;
	
	Если УИД = Неопределено Тогда
		
		НоменклатураВДокументахКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ТипДокумента,, ЭтаФорма, Новый УникальныйИдентификатор, Истина);
		
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
			ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		Иначе
			УстановитьПараметрыЗапросовСписков();
			Элементы.СписокЗапасы.Обновить();
		КонецЕсли;
		
		ОбновитьНадписьПодобраноТоваров();
		
	Иначе
		
		ОткрытаяФорма = НоменклатураВДокументахКлиент.ПолучитьОткрытуюФормуПоУИД(УИД);
		
		СтруктураЗаполненияДокументаИОшибки = НоменклатураВДокументахКлиент.ПолучитьСтруктуруЗаполнения(ЭтаФорма, ТипДокумента);
		
		СтруктураЗаполненияДокумента = СтруктураЗаполненияДокументаИОшибки.СтруктураЗаполнения;
		МассивСообщенийОбОшибках = СтруктураЗаполненияДокументаИОшибки.МассивСообщенийОбОшибках;
		
		СтруктураДанныеТаблиц = СтруктураДанныеТаблицДокумента(ТипДокумента, СтруктураЗаполненияДокумента);
		
		НаименованиеОповещения = НСтр("ru='ОбновлениеФормы'") + ТипДокумента;
		
		Оповестить(НаименованиеОповещения,СтруктураДанныеТаблиц, ОткрытаяФорма.УникальныйИдентификатор);
		
		ОткрытаяФорма.Активизировать();
		
		Для Каждого стрОшибка Из МассивСообщенийОбОшибках Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(стрОшибка);
		КонецЦикла;
		
		Корзина.Очистить();
		
	КонецЕсли;
	
	ТаблицаПодчиненныхФорм.Очистить();
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
	Иначе
		УстановитьПараметрыЗапросовСписков();
		Элементы.СписокЗапасы.Обновить();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныеТаблицДокумента(ТипДокумента, ДанныеЗаполнения)
	
	СоответствиеТиповДокументаНаименованию = Новый Соответствие;
	
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказНаряд","ЗаказПокупателя");
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказПокупателя","ЗаказПокупателя");
	СоответствиеТиповДокументаНаименованию.Вставить("СчетНаОплату","СчетНаОплату");
	СоответствиеТиповДокументаНаименованию.Вставить("РасходнаяНакладная","РасходнаяНакладная");
	СоответствиеТиповДокументаНаименованию.Вставить("АктВыполненныхРабот","АктВыполненныхРабот");
	СоответствиеТиповДокументаНаименованию.Вставить("ЧекККМ","ЧекККМ");
	СоответствиеТиповДокументаНаименованию.Вставить("ЗаказПоставщику","ЗаказПоставщику");
	СоответствиеТиповДокументаНаименованию.Вставить("ПриходнаяНакладная","ПриходнаяНакладная");
	
	ДокументОбъект = Документы[СоответствиеТиповДокументаНаименованию.Получить(ТипДокумента)].СоздатьДокумент();
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	СтруктураДанныеТаблиц = Новый Структура;
	
	Для Каждого ТабличнаяЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		
		Если Не ДокументОбъект[ИмяТабличнойЧасти].Количество() Тогда Продолжить КонецЕсли;
		
		МассивСтрок = Новый Массив;
		
		КолонкиТЧ = ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
		
		Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			
			Для Каждого КолонкаТЧ из КолонкиТЧ.Колонки Цикл
				СтруктураДанныхСтроки.Вставить(КолонкаТЧ.Имя,);
			КонецЦикла;
			СтруктураДанныхСтроки.Вставить("ЭтоНабор",);
			СтруктураДанныхСтроки.Вставить("ТипНоменклатуры",);
			
			ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, СтрокаТЧ);
			СтруктураДанныхСтроки.ЭтоНабор = СтрокаТЧ.Номенклатура.ЭтоНабор;
			СтруктураДанныхСтроки.ТипНоменклатуры = СтрокаТЧ.Номенклатура.ТипНоменклатуры;
			МассивСтрок.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		СтруктураДанныеТаблиц.Вставить(ИмяТабличнойЧасти, МассивСтрок);
		
	КонецЦикла;
	
	Возврат СтруктураДанныеТаблиц;
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьВКорзинуСписок(ДобавитьВКорзину = Истина, ИмяТаблицыДобавления = "")
	
	СписокСтрокДобавленияВКорзину.Очистить();
	
	ИмяТаблицыДобавления = ?(ЗначениеЗаполнено(ИмяТаблицыДобавления), ИмяТаблицыДобавления, ТекущаяСтраницаНоменклатуры);
	
	ВыделенныеСтроки = Элементы[ИмяТаблицыДобавления].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Или Не ВыделенныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы[ИмяТаблицыДобавления].ДанныеСтроки(ВыделеннаяСтрока);
		Если Не ТекущиеДанные.Свойство("КартинкаКорзина") Или ТекущиеДанные.КартинкаКорзина < 0 Тогда Продолжить КонецЕсли;
		СписокСтрокДобавленияВКорзину.Добавить(ТекущиеДанные,,НЕ ДобавитьВКорзину);
		
	КонецЦикла;
	
	Если СписокСтрокДобавленияВКорзину.Количество() Тогда
		СписокВладельцев = Новый СписокЗначений;
		ДобавитьУдалитьСтрокиИзКорзины(ДобавитьВКорзину, СписокВладельцев, ИмяТаблицыДобавления);
		
		Если ПоказыватьСопутствующиеТовары И ВыводСопутствующихТоваров = 1 И СписокВладельцев.Количество() Тогда
			
			Если Не УстановленОтбор Тогда
				
				Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
					ИдентификаторГруппыКатегории = Элементы.ОтборКатегории.ТекущаяСтрока;
				Иначе
					ИдентификаторГруппыКатегории = Элементы.ОтборИерархия.ТекущаяСтрока;
				КонецЕсли;
				
				ИдентификаторТекущейСтроки = Элементы[ИмяТаблицыДобавления].ТекущиеДанные.Ссылка;
			КонецЕсли;
			
			УстановитьОтборСопутствующиеТовары(ТекущиеДанные,,Истина, СписокВладельцев);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоОстатки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьСтрокиИзКорзины(ДобавитьВКорзину = Неопределено, СписокВладельцев = Неопределено, ИмяТаблицыДобавления = Неопределено)
	
	ДобавлениеИзСписка = ?(Не ИмяТаблицыДобавления = "ДеревоОстатки", Истина, Ложь);
	
	Если СписокВладельцев = Неопределено Тогда
		СписокВладельцев = Новый СписокЗначений;
	КонецЕсли;
	
	Если СписокСтрокДобавленияВКорзину.Количество() Тогда
		
		ТекущиеДанные = СписокСтрокДобавленияВКорзину[0].Значение;
		УдалитьПозицию = СписокСтрокДобавленияВКорзину[0].Пометка;
		
		Склад = Неопределено;
		КоличествоОстаток = 0;
		Если ИмяТаблицыДобавления = "РасшифровкаОстатков" Тогда
			ДанныеПоНоменклатуре = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
			Склад = ?(Не ТолькоНоменклатураИКоличество, ТекущиеДанные.СтруктурнаяЕдиница, Неопределено);
			КоличествоОстаток = ТекущиеДанные.СвободныйОстаток;
		Иначе
			ДанныеПоНоменклатуре = ТекущиеДанные;
			КоличествоОстаток = ДанныеПоНоменклатуре.КоличествоОстаток;
		КонецЕсли;
		
		Если ДобавитьВКорзину = Неопределено 
			Или (Не ДобавитьВКорзину = Неопределено И Не ДобавитьВКорзину) Тогда
			Если УдалитьПозицию Тогда
				УдалитьЭлементИзКорзины(ТекущиеДанные, ДобавлениеИзСписка, Склад, ИмяТаблицыДобавления);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Не УдалитьПозицию Тогда 
			СписокВладельцев.Добавить(ТекущиеДанные.Ссылка);
		КонецЕсли;
	
		Если ЗапрашиватьКоличество Или ЗапрашиватьЦену Тогда
			
			Если ИмяТаблицыДобавления = "ДеревоОстатки" Тогда
				Характеристика = ТекущиеДанные.Характеристика;
				Партия = ТекущиеДанные.Партия;
				
				Если Не ТолькоНоменклатураИКоличество Тогда
					
					Если ЗначениеЗаполнено(ОтборСклад) Тогда
						
						Если Не ТипСтруктурнойЕдиницыВОтборе = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
							СтруктурнаяЕдиница = ОтборСклад;
						Иначе
							СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
						КонецЕсли;
						
					Иначе
						СтруктурнаяЕдиница = ?(ЭтоПодбор И Не ЗначениеЗаполнено(ТекущиеДанные.Склад), СтруктурнаяЕдиницаДокумент, ТекущиеДанные.Склад);
					КонецЕсли;
					
					Ячейка = ТекущиеДанные.Ячейка;
					
				КонецЕсли;

			Иначе
				Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
				Партия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
				Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
				
				Если ИмяТаблицыДобавления = "РасшифровкаОстатков" Тогда
					СтруктурнаяЕдиница = Склад;
				ИначеЕсли ПоказыватьОстатки И ЗначениеЗаполнено(ОтборСклад) Тогда
					СтруктурнаяЕдиница = ОтборСклад;
				ИначеЕсли ЭтоПодбор Тогда
					СтруктурнаяЕдиница = СтруктурнаяЕдиницаДокумент;
				Иначе
					СтруктурнаяЕдиница = ТекущиеДанные.Склад;
				КонецЕсли;
				
				Если ТипСтруктурнойЕдиницыВОтборе = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
					СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
				КонецЕсли;
				
				Если ДанныеПоНоменклатуре.Свойство("Склад") И ДанныеПоНоменклатуре.Свойство("Ячейка") Тогда
					Если ДанныеПоНоменклатуре.Склад = СтруктурнаяЕдиница Тогда
						Ячейка = ДанныеПоНоменклатуре.Ячейка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
				
			СтруктураПараметров = Новый Структура("Количество, Цена, ЕдиницаИзмерения, Номенклатура, Характеристика,ЭтоНабор, 
												|ЗапрашиватьКоличество, ЗапрашиватьЦену, Партия, СтруктурнаяЕдиница, Ячейка,
												|СтавкаНДС, ТипНоменклатуры, ПодбиратьВесьОстаток, КоличествоОстаток, ВалютаПодбора");
			
			СтруктураПараметров.Количество = 1;
			СтруктураПараметров.Характеристика = Характеристика;
			СтруктураПараметров.ЗапрашиватьКоличество = ЗапрашиватьКоличество;
			СтруктураПараметров.ЗапрашиватьЦену = ЗапрашиватьЦену;
			СтруктураПараметров.ВалютаПодбора = ВалютаПодбора;
			СтруктураПараметров.Партия = Партия;
			СтруктураПараметров.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтруктураПараметров.Ячейка = Ячейка;
				
			СтруктураПараметров.ТипНоменклатуры = ДанныеПоНоменклатуре.ТипНоменклатуры;
			СтруктураПараметров.ЭтоНабор = ДанныеПоНоменклатуре.ЭтоНабор;
			
			Если НЕ ПоказыватьЦены Тогда
				
				СтруктураВыбора = Новый Структура;
				
				СтруктураВыбора.Вставить("Номенклатура",	ДанныеПоНоменклатуре.Ссылка);
				СтруктураВыбора.Вставить("ВидЦен",			ОтборВидЦен);
				СтруктураВыбора.Вставить("ВалютаДокумента", ВалютаПодбора);
				СтруктураВыбора.Вставить("Коэффициент",		1);
				СтруктураВыбора.Вставить("Характеристика", Характеристика);
				СтруктураПараметров.Цена = ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора);
				
			Иначе
				СтруктураПараметров.Цена = ДанныеПоНоменклатуре.Цена;
			КонецЕсли;
			
			СтруктураПараметров.ЕдиницаИзмерения = ДанныеПоНоменклатуре.ЕдиницаИзмерения;
			СтруктураПараметров.Номенклатура = ДанныеПоНоменклатуре.Ссылка;
			
			СтруктураПараметров.ПодбиратьВесьОстаток = ПодбиратьВесьОстаток;
			СтруктураПараметров.КоличествоОстаток = КоличествоОстаток;
			
			Если ИмяТаблицыДобавления = "ДеревоОстатки" Тогда
				СтруктураПараметров.СтавкаНДС = СтруктураДанныхНоменклатурыДляРежимаОстатки.СтавкаНДСНоменклатуры;
			Иначе
				СтруктураПараметров.СтавкаНДС = ДанныеПоНоменклатуре.СтавкаНДСНоменклатуры;
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура("СписокВладельцев, ИмяТаблицыДобавления", СписокВладельцев, ИмяТаблицыДобавления);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьВКорзинуЦенаКоличество", ЭтотОбъект, ПараметрыОповещения);
			
			ОткрытьФорму("Справочник.Номенклатура.Форма.КоличествоИЦена", СтруктураПараметров, ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(?(ИмяТаблицыДобавления = "ДеревоОстатки", ТекущиеДанные, ТекущиеДанные.Ссылка));
		ДобавитьВКорзину(МассивСтрок, Склад, ИмяТаблицыДобавления);
		
		СписокСтрокДобавленияВКорзину.Удалить(0);
		ДобавитьУдалитьСтрокиИзКорзины(,СписокВладельцев, ИмяТаблицыДобавления);
		
		Если ИмяТаблицыДобавления = "ДеревоОстатки" Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
			ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		КонецЕсли;
		
	Иначе
		
		Если Корзина.Количество() Тогда
			СпозиционироватьсяНаСтрокеКорзины(СписокВладельцев);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		
		ТекущиеДанные = Элементы[ИмяТаблицыДобавления].ТекущиеДанные;
		
		НаименованиеЭлементаФормыДобавить = ИмяТаблицыДобавления + "КонтекстноеМенюДобавитьВКорзину";
		НаименованиеЭлементаФормыУдалить = ИмяТаблицыДобавления + "КонтекстноеМенюУдалитьИзКорзины";
		
		Если ТекущиеДанные.КартинкаКорзина = 1 Тогда
			Элементы[НаименованиеЭлементаФормыДобавить].Видимость = Истина;
			Элементы[НаименованиеЭлементаФормыУдалить].Видимость = Истина;
		Иначе
			Элементы[НаименованиеЭлементаФормыДобавить].Видимость = Истина;
			Элементы[НаименованиеЭлементаФормыУдалить].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Отложить.Доступность = (Корзина.Количество()>0);
	Элементы.ОчиститьКорзину.Доступность = (Корзина.Количество()>0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуЦенаКоличество(СтруктураВыбора, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВыбора = Неопределено Тогда
		СписокСтрокДобавленияВКорзину.Очистить();
		Возврат 
	КонецЕсли;
	
	ПодбиратьВесьОстаток = СтруктураВыбора.ПодбиратьВесьОстаток;
	
	СписокВладельцев = ДополнительныеПараметры.СписокВладельцев;
	ИмяТаблицыДобавления = ДополнительныеПараметры.ИмяТаблицыДобавления;
	
	СтруктураПоискаВКорзине = Новый Структура;
	СтруктураПоискаВКорзине.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
	СтруктураПоискаВКорзине.Вставить("Характеристика", СтруктураВыбора.Характеристика);
	СтруктураПоискаВКорзине.Вставить("Партия", СтруктураВыбора.Партия);
	СтруктураПоискаВКорзине.Вставить("СтруктурнаяЕдиница", СтруктураВыбора.СтруктурнаяЕдиница);
	СтруктураПоискаВКорзине.Вставить("Ячейка", СтруктураВыбора.Ячейка);
	
	Если РазныеВалюты Тогда
		СтруктураПоискаВКорзине.Вставить("ЦенаВВалютеПодбора", СтруктураВыбора.Цена);
		Иначе
		СтруктураПоискаВКорзине.Вставить("Цена", СтруктураВыбора.Цена);
	КонецЕсли;
	СтруктураПоискаВКорзине.Вставить("Валюта", СтруктураВыбора.Валюта);

	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоискаВКорзине);
	Если НайденныеСтроки.Количество()=0 Тогда
		СтрокаКорзины = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураВыбора);
		Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда
			СтрокаКорзины.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки(ВидСкидкиНаценки);
		КонецЕсли;
		
		Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			СтрокаКорзины.СтавкаНДС = ПолучитьСтавкуНДС(СтруктураВыбора.СтавкаНДС);
		Иначе
			СтрокаКорзины.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		КонецЕсли;
		
	Иначе
		СтрокаКорзины = НайденныеСтроки[0];
		СтрокаКорзины.Количество = СтрокаКорзины.Количество + СтруктураВыбора.Количество;
		//Если цена изменилась - перезаполняем новым значением
		СтрокаКорзины.Цена = СтруктураВыбора.Цена;
	КонецЕсли;
	
	ТипНоменклатурыЗапас = СтруктураВыбора.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	
	СтрокаКорзины.Остаток = СтруктураВыбора.Остаток;
	
	РезервКоличество = ?(ЗначениеЗаполнено(СтрокаКорзины.Остаток) И СтрокаКорзины.Остаток < СтрокаКорзины.Количество, СтрокаКорзины.Остаток, СтрокаКорзины.Количество);
	СтрокаКорзины.Резерв = ?(ЗаполнятьКолонкуРезерв И ТипНоменклатурыЗапас И ЗначениеЗаполнено(СтрокаКорзины.Остаток), РезервКоличество, 0);
	
	Если НЕ ПоказыватьЦены Тогда
		СтруктураВыбора.Вставить("ВидЦен",			ОтборВидЦен);
		СтруктураВыбора.Вставить("ВалютаДокумента", ВалютаПодбора);
		СтруктураВыбора.Вставить("Коэффициент",		1);
		Если СтруктураВыбора.Свойство("Характеристика") И СтруктураВыбора.Характеристика=Неопределено Тогда
			СтруктураВыбора.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		КонецЕсли;
		Если СтруктураВыбора.Цена = 0 Тогда
			
			СтруктураВыбора.Вставить("ВидМинимальныхЦен", ВидМинимальныхЦен);
			
			СтрокаКорзины.Цена = ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора);
		Иначе
			СтрокаКорзины.Цена = СтруктураВыбора.Цена;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСкидкиНаценки) Тогда
		ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета);
	Иначе
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	КонецЕсли;
	
	ВалютаИтогов = ВалютаПредставление;
	Если РазныеВалюты Тогда
		
		СтрокаКорзины.ЦенаВВалютеПодбора = СтрокаКорзины.Цена;
		
		Если ЭтоПодбор Тогда
			ДатаПересчета = Дата;
			ВалютаПересчета = ВалютаДокумента;
		Иначе
			ДатаПересчета = ОбщегоНазначенияКлиент.ДатаСеанса();
			ВалютаПересчета = НациональнаяВалюта;
		КонецЕсли;
		
		СтруктураОкругления = Новый Структура("ПорядокОкругления, ОкруглятьВБольшуюСторону");
		СтруктураОкругления.ПорядокОкругления = ПорядокОкругления;
		СтруктураОкругления.ОкруглятьВБольшуюСторону = ОкруглятьВБольшуюСторону;
		
		ПодборНоменклатурыВДокументахКлиент.ПересчитатьСтрокуТабличнойЧастиВВалюту(СтрокаКорзины, ВалютаПодбора, ВалютаПересчета, ДатаПересчета, СуммаВключаетНДС, СтруктураОкругления);
		
		ВалютаИтогов = ВалютаПересчета;
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров(ВалютаИтогов);
	
	ТекстОповещения = СтрШаблон(НСтр("ru = 'Товар %1, %2 добавлен в корзину'"), СтруктураВыбора.Номенклатура,
		СтруктураВыбора.Характеристика);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'"), , ТекстОповещения, БиблиотекаКартинок.ТележкаМаленькая);
		
	Если Не ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
		Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	КонецЕсли;
	
	СписокСтрокДобавленияВКорзину.Удалить(0);
	
	Если СписокСтрокДобавленияВКорзину.Количество() Тогда
		ДобавитьУдалитьСтрокиИзКорзины(,СписокВладельцев, ИмяТаблицыДобавления);
	Иначе
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
			ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		
		ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
		
		НаименованиеЭлементаФормыДобавить = ТекущаяСтраницаНоменклатуры + "КонтекстноеМенюДобавитьВКорзину";
		НаименованиеЭлементаФормыУдалить = ТекущаяСтраницаНоменклатуры + "КонтекстноеМенюУдалитьИзКорзины";
		
		Если НЕ ТекущиеДанные = Неопределено 
			И ТекущиеДанные.Свойство("КартинкаКорзина") И ТекущиеДанные.КартинкаКорзина = 1 Тогда
			Элементы[НаименованиеЭлементаФормыДобавить].Видимость = Истина;
			Элементы[НаименованиеЭлементаФормыУдалить].Видимость = Истина;
		Иначе
			Элементы[НаименованиеЭлементаФормыДобавить].Видимость = Истина;
			Элементы[НаименованиеЭлементаФормыУдалить].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеКорзины(СписокВладельцев);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ПодключитьОбработчикОжидания("АктивизироватьДерево", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКатегориями

&НаКлиенте
Процедура ОтборКатегорииИерархияПереключательПриИзменении(Элемент)
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПерейтиКРодителю", "Заголовок", НСтр("ru='Перейти к категории'"));
		
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		ОтключитьОтборПоИерархии();
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПерейтиКРодителю", "Заголовок", НСтр("ru='Перейти к группе'"));
		
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
		
		Если Элементы.ОтборИерархия.ТекущиеДанные <> Неопределено Тогда
		    Если Элементы.ОтборИерархия.ТекущаяСтрока = Неопределено Тогда //отбор на новом созданном элементе
				ИдентификаторСтроки = 0;
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), Элементы.ОтборИерархия.ТекущиеДанные.Значение, Ложь);
				Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе //восстановить ранее сделанный, отключенный отбор по иерархии
				УстановитьОтборПоИерархии();
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ОтборКатегории.ТекущаяСтрока = 0;
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.СегментыНоменклатуры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПерейтиКРодителю", "Заголовок", НСтр("ru='Перейти к сегменту'"));
		
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияСегментыОтбор;
		
		Если Элементы.ОтборИерархия.ТекущиеДанные <> Неопределено Тогда
		    Если Элементы.ОтборСегменты.ТекущаяСтрока = Неопределено Тогда //отбор на новом созданном элементе
				ИдентификаторСтроки = 0;
				ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), Элементы.ОтборИерархия.ТекущиеДанные.Значение, Ложь);
				Элементы.ОтборСегменты.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе //восстановить ранее сделанный, отключенный отбор по иерархии
				УстановитьОтборПоСегментуНоменклатуры(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ОтборКатегории.ТекущаяСтрока = 0;
		ОтключитьОтборПоИерархии();
		
		Элементы.ОтборСегменты.ТекущаяСтрока = 0;
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтроки(Элемент)

	Если ОтборКатегорииИерархияПереключатель <> ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Или Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение Тогда
		Элементы.ГруппаОтборХарактеристика.Видимость = ОтборОстатки = 1 И Элементы.ОтборКатегории.ТекущиеДанные.ИспользоватьХарактеристики;
		Возврат;
	КонецЕсли;
	
	ДоступныКонтекстныеКоманды = ЗначениеЗаполнено(Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	Элементы.ОтборКатегорииКонтекстноеМенюИзменить.Доступность = ДоступныКонтекстныеКоманды;
	Элементы.ОтборКатегорииКонтекстноеМенюСкопироватьКатегорию.Доступность = ДоступныКонтекстныеКоманды;
	Элементы.ОтборКатегорииКонтекстноеМенюУстановитьПометкуУдаленияКатегории.Доступность = ДоступныКонтекстныеКоманды;
	
	Если Элемент = Неопределено Тогда
		ОтборКатегорииПриАктивизацииСтрокиНаКлиенте();
	Иначе
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ОтборКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтрокиНаКлиенте()
	
	ОтборПоСегменту = Неопределено;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		ОтборКатегорииТекущая = ПредопределенноеЗначение("Справочник.КатегорииНоменклатуры.ПустаяСсылка");
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение; 
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.СегментыНоменклатуры") Тогда
		
		Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ОтборСегменты.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборПоСегменту = Элементы.ОтборСегменты.ТекущиеДанные.Значение;

	КонецЕсли;
	
	ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборКатегорииПриАктивизацииСтрокиНаСервере()
	
	Если ОтборКатегорииТекущая.ЭтоГруппа Тогда
		Элементы.ГруппаОтборХарактеристика.Видимость = Ложь
	Иначе
		Элементы.ГруппаОтборХарактеристика.Видимость = ОтборОстатки = 1 и ОтборКатегорииТекущая.ИспользоватьХарактеристики;
	КонецЕсли;
	
	Если ДанныеМетокПП.Количество() Или ДанныеМетокККМ.Количество() Тогда
		
		СписокОтбораХарактеристики.Очистить();
		ДанныеМетокПП.Очистить();
		ДанныеМетокККМ.Очистить();
		
		УстановитьПараметрСписка(СписокЗапасы, "БезОтбора", Истина);
		УстановитьПараметрСписка(СписокЗапасы, "Характеристика", СписокОтбораХарактеристики);
		
		СписокГрупп = Новый Массив;
		
		СписокГрупп.Добавить("ГруппаОтборДопРеквизитыХарактеристика");
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГрупп, "ДанныеМетокПП");
		
		СписокГрупп.Очистить();
		СписокГрупп.Добавить("КатегорииОтборСвойстваХарактеристики");
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГрупп, "ДанныеМетокККМ");
		
	КонецЕсли;
	
	КатегорииНоменклатурыСервер.УстановитьОтборПоКатегории(
		ЭтотОбъект,
		ЭтаФорма["СписокЗапасы"], 
		ОтборКатегорииТекущая
	);
	
	Если ОграничениеДоступаЛупа Тогда Возврат КонецЕсли;
	
	КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойства", Ложь);
	
	Если ОтборОстатки = 1 Тогда
	КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойстваХарактеристики", Истина);
	КонецЕсли;
	
	КоличествоСвойств = Элементы.КатегорииОтборСвойства.ПодчиненныеЭлементы.Количество() + Элементы.КатегорииОтборСвойстваХарактеристики.ПодчиненныеЭлементы.Количество();
	
	Если КоличествоСвойств >= 5 Тогда
		Элементы.ГруппаСтраницыОтбор.Высота = 14
	ИначеЕсли КоличествоСвойств = 1 Тогда
		Элементы.ГруппаСтраницыОтбор.Высота = 6
	ИначеЕсли КоличествоСвойств = 2 Тогда
		Элементы.ГруппаСтраницыОтбор.Высота = 8
	ИначеЕсли КоличествоСвойств = 3 Тогда
		Элементы.ГруппаСтраницыОтбор.Высота = 10
	ИначеЕсли КоличествоСвойств = 4 Тогда
		Элементы.ГруппаСтраницыОтбор.Высота = 12;
	Иначе
		Элементы.ГруппаСтраницыОтбор.Высота = 4;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаКатегория) И ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		Элементы.СписокЗапасы.ТекущаяСтрока = Неопределено;
	КонецЕсли;
		
	ГруппаКатегория = ОтборКатегорииТекущая;
	УстановитьОтборПоСегментуНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если УправлениеДоступомУНФКлиентПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("Родитель", РодительКатегории(Элемент.ТекущиеДанные.Значение));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникКатегории(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Если Элементы.ОтборКатегории.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_НачалоВыбораДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		
		ОписаниеСвойства = Новый Структура("Свойство,СписокВыбораЗначенийСсылка", Неопределено, Неопределено);
		ОписаниеСвойства(Элемент.Имя, ОписаниеСвойства);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Свойство", ОписаниеСвойства.Свойство);
		ПараметрыФормы.Вставить("СписокВыбораЗначенийСсылка", ОписаниеСвойства.СписокВыбораЗначенийСсылка);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораЗначенияСвойства", ПараметрыФормы, Элемент);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДополнительногоРеквизита(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоСвойству(Элемент.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УстановитьОтборПоСвойству(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКатегорий(КатегорияТекущейСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = КатегорииНоменклатурыСервер.ДеревоКатегорийХарактеристики();
	ЗначениеВРеквизитФормы(Дерево, "ОтборКатегории");
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторСтроки = Неопределено;
	Если КатегорияТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборКатегории, КатегорияТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеСвойства(ЭлементИмя, ОписаниеСвойства)
	
	Строки = СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ЭлементИмя));
	Если Строки.Количество() <> 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеСвойства, Строки[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСвойству(ЭлементИмя, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = ЭтотОбъект[Элементы[ЭлементИмя].ПутьКДанным];
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		КатегорииНоменклатурыСервер.УстановитьОтборПоДополнительномуРеквизиту(
			ЭтотОбъект,
			ЭтаФорма["СписокЗапасы"],
			ЭлементИмя,
			ОтборКатегорииТекущая);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяРеквизитаЗначение", ЭлементИмя);
	Строки = ЭтаФорма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() И Строки[0].НаборСвойств = ОтборКатегорииТекущая.НаборСвойствХарактеристики Тогда
		
		МассивСвойствХарактеристик = Новый Массив();
		
		Для Каждого СтрокаСвойств Из Строки Цикл
			Если СтрокаСвойств.НаборСвойств = ОтборКатегорииТекущая.НаборСвойствХарактеристики Тогда
				МассивСвойствХарактеристик.Добавить(СтрокаСвойств.Свойство);
			КонецЕсли;
		КонецЦикла;
		
		УстановитьОтборПоХарактеристикеСервер(Значение, МассивСвойствХарактеристик, ЭлементИмя);
	Иначе
		ПолеОтбора = КатегорииНоменклатурыСервер.ПолеОтбораДополнительногоРеквизита(ЭтотОбъект, ЭлементИмя, ОтборКатегорииТекущая);
		УстановитьМеткуИОтборСписка(ПолеОтбора, Элементы[ЭлементИмя].Родитель.Имя, Значение);
	КонецЕсли;
	
	ЭтотОбъект[Элементы[ЭлементИмя].ПутьКДанным] = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьЭлементНастроек(Элемент, Значение)
	ЭтаФорма[Элемент] = Значение;
	НоваяСтрока = ЗначенияНастроек.Добавить();
	НоваяСтрока.Элемент = Элемент;
	НоваяСтрока.Значение = Значение;
КонецПроцедуры

&НаСервере
Функция ЗаполнениеКолонкиРезерв(ТипДокументаВладельца)
	
	Если Не РезервированиеЗапасов Тогда
		Возврат Ложь
	КонецЕсли;
		
	Если ТипДокументаВладельца = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
			Или ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
			Возврат Истина
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокументаВладельца = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
			Возврат Истина
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокументаВладельца = Тип("ДокументСсылка.ЧекККМ") Тогда
			Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СписокСкладовПоРодителю(РодительИерархии)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Родитель", РодительИерархии);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В ИЕРАРХИИ(&Родитель)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПереопределитьКнопкуВыбораПоУмолчнию()
	
	Если ЭтоПодбор Тогда
		Если КорзинаРасшифровкаВидимость Тогда
			Элементы.ПеренестиВДокументКорзина.КнопкаПоУмолчанию = Ложь;
			Элементы.ПеренестиВДокумент.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ПеренестиВДокументКорзина.КнопкаПоУмолчанию = Истина;
			Элементы.ПеренестиВДокумент.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроцентСкидкиНаценки(ВидСкидкиНаценки)
	
	Возврат ВидСкидкиНаценки.Процент;
	
КонецФункции

&НаСервере
Процедура УстановитьТипПоляОтбораПоЦенам()
	
	МассивТипов = Новый Массив();
	
	Если РаботаСЗакупками Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ВидыЦенКонтрагентов"));
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.ВидыЦен"));
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.ОтборВидЦен.ОграничениеТипа = ОписаниеТипа;
	
КонецПроцедуры

&НаСервере
Функция ЭтоРаботаСЗакупками(ТипДокумента)
	
	Если ТипДокумента = Неопределено Или ТипДокумента = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидОперации") Тогда
		ВидОперации = Параметры.ВидОперации;
	ИначеЕсли Параметры.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
		ВидОперации = Параметры.ДополнительныеПараметры.ВидОперации;
	КонецЕсли;
	
	Если ЭтоПодбор Тогда
		
		Если ТипДокумента = Тип("ДокументСсылка.ПриходнаяНакладная")
			Или ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			Или ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления")
			Или ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
				Или ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
				Возврат Ложь
			КонецЕсли;
			
			Возврат Истина
		Иначе
			Возврат Ложь
		КонецЕсли;
		
	Иначе
		Если ТипДокумента = "ПриходнаяНакладная"
			Или ТипДокумента = "СчетНаОплатуПоставщика"
			Или ТипДокумента = "ЗаказПоставщику"
			Или ТипДокумента = "КорректировкаПоступления"
			Или ТипДокумента = "СчетНаОплатуПоставщика" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
				Или ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
				Возврат Ложь
			КонецЕсли;
			
			Возврат Истина
		Иначе
			Возврат Ложь
		КонецЕсли;
		
КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКартинкуУПодчиненныхКатегорий(СписокЭлементов, ПометкаУдаления)
	
	Для Каждого СтрокаДерева Из СписокЭлементов Цикл
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			СтрокаДерева.Картинка= ?(ПометкаУдаления, 5, 4);
		Иначе
			СтрокаДерева.Картинка= ?(ПометкаУдаления, 2, 1);
		КонецЕсли;
		
		ДочерниеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ДочерниеСтроки.Количество() > 0 Тогда
			УстановитьКартинкуУПодчиненныхКатегорий(ДочерниеСтроки, ПометкаУдаления);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДеревуИерархии(ИмяДерева, ЗначениеСтроки)
	
	Если ИмяДерева = "ОтборКатегории" Тогда
		СтрокаДерева = ИдентификаторСтрокиДереваПоЗначению(ОтборКатегории, ЗначениеСтроки);
		Элементы.ОтборКатегории.ТекущаяСтрока = СтрокаДерева; //В списке напротив категории установить галочку - Использовать всегда
	ИначеЕсли ИмяДерева = "ОтборИерархия" Тогда
		СтрокаДерева = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ЗначениеСтроки);
		Элементы.ОтборИерархия.ТекущаяСтрока = СтрокаДерева; //В списке напротив Группы установить галочку - Использовать всегда
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоНастройкамФормы(НастройкиФормы)
	
	Если ЭтоПодбор Тогда
		
		Если НастройкиФормы.ТипСтруктурнойЕдиницы.Количество() Тогда
			
			Элементы.ОтборСклад.ПараметрыВыбора = Новый ФиксированныйМассив(НастройкиФормы.ТипСтруктурнойЕдиницы);
			Элементы.КорзинаРасшифровкаСтруктурнаяЕдиница.ПараметрыВыбора = Новый ФиксированныйМассив(НастройкиФормы.ТипСтруктурнойЕдиницы);
			
			Если ТипЗнч(НастройкиФормы.ТипСтруктурнойЕдиницы[0].Значение) = Тип("ФиксированныйМассив") Тогда
				Для Каждого ЭлементМассива Из НастройкиФормы.ТипСтруктурнойЕдиницы[0].Значение Цикл
					ТипСтруктурнойЕдиницы.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				ТипСтруктурнойЕдиницы.Добавить(НастройкиФормы.ТипСтруктурнойЕдиницы[0].Значение);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСписокВыбораСтруктурныхЕдиниц();
		
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаНастроекФормы Из НастройкиФормы Цикл
		
		Если СтрокаНастроекФормы.Ключ = "ТипСтруктурнойЕдиницы" Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", СтрокаНастроекФормы.Значение));
			Элементы.ОтборСклад.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			Элементы.КорзинаРасшифровкаСтруктурнаяЕдиница.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			
			Если ТипЗнч(СтрокаНастроекФормы.Значение) = Тип("ФиксированныйМассив") Тогда
				Для Каждого ЭлементМассива Из СтрокаНастроекФормы.Значение Цикл
					ТипСтруктурнойЕдиницы.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				ТипСтруктурнойЕдиницы.Добавить(СтрокаНастроекФормы.Значение);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[СтрокаНастроекФормы.Ключ] = СтрокаНастроекФормы.Значение;
		
	КонецЦикла;
	
	ЗаполнитьСписокВыбораСтруктурныхЕдиниц();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИсториюПоиска(ВидЭлементаПоиска)
	
	Если ВидЭлементаПоиска = "ДеревоОстатки" Тогда
		
		Если ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
			
			НайденныйЭлементСписка = ИсторияПоискаДерево.НайтиПоЗначению(СокрЛП(СтрокаПоиска));
			
			Если Не НайденныйЭлементСписка = Неопределено Тогда
				ИсторияПоискаДерево.Удалить(НайденныйЭлементСписка);
			Иначе
				Если ИсторияПоискаДерево.Количество() = 5 Тогда
					ИсторияПоискаДерево.Удалить(4);
				КонецЕсли;
			КонецЕсли;
			
			ИсторияПоискаДерево.Вставить(0, СтрокаПоиска)
		КонецЕсли;
		
		Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоискаДерево.ВыгрузитьЗначения());
		
	ИначеЕсли ВидЭлементаПоиска = "СписокЗапасы" Тогда
		
		Если ЗначениеЗаполнено(СокрЛП(СтрокаРасширенногоПоиска)) Тогда
			
			НайденныйЭлементСписка = ИсторияПоискаСписок.НайтиПоЗначению(СокрЛП(СтрокаРасширенногоПоиска));
			
			Если Не НайденныйЭлементСписка = Неопределено Тогда
				ИсторияПоискаСписок.Удалить(НайденныйЭлементСписка);
			Иначе
				Если ИсторияПоискаСписок.Количество() = 5 Тогда
					ИсторияПоискаСписок.Удалить(4);
				КонецЕсли;
				
			КонецЕсли;
			
			ИсторияПоискаСписок.Вставить(0, СтрокаРасширенногоПоиска)
		КонецЕсли;
		
		Элементы.СтрокаРасширенногоПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоискаСписок.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтруктурныхЕдиниц()
	
	СтруктураТипов = Новый Структура;
	
	КлючЗначения = 0;
	Для Каждого СтрокаТипа Из ТипСтруктурнойЕдиницы Цикл
		СтруктураТипов.Вставить("Ключ"+Строка(КлючЗначения), СтрокаТипа.Значение);
		КлючЗначения = КлючЗначения + 1;
	КонецЦикла;
	
	Если Не СтруктураТипов.Количество() Тогда 
		Элементы.ОтборСклад.РежимВыбораИзСписка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурнаяЕдиницаДокумент", СтруктурнаяЕдиницаДокумент);
	СтруктураПараметров.Вставить("СтруктурнаяЕдиницаПолучатель", СтруктурнаяЕдиницаПолучатель);
	
	СписокСклады = ПодборНоменклатурыВДокументахВызовСервераПовтИсп.ЗаполнитьСписокВыбораСтруктурныхЕдиниц(СтруктураТипов, СтруктураПараметров);
	
	Для Каждого СтрокаСписка Из СписокСклады Цикл
		НоваяСтрока = Элементы.ОтборСклад.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписка);
	КонецЦикла;
	
	Если СписокСклады.Количество() Тогда
		Элементы.ОтборСклад.КнопкаВыбора = Ложь;
	Иначе
		Элементы.ОтборСклад.КнопкаСпискаВыбора = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЭлементФормы(ВидАктивизации)

	Если ВидАктивизации = "Номенклатура" Тогда
		
		ЭлементФормы = ?(ТекущаяСтраницаНоменклатуры = "СписокЗапасы", Элементы.СписокЗапасы, Элементы.ДеревоОстатки);
		ЭтаФорма.ТекущийЭлемент = ЭлементФормы;
		
		Возврат;
	КонецЕсли;
	
	Если ВидАктивизации = "Поиск" Тогда
		
		ЭлементФормы = ?(ТекущаяСтраницаНоменклатуры = "СписокЗапасы", Элементы.СписокЗапасыСтандартныйПоиск, Элементы.СтрокаПоиска);
		
		ЭтаФорма.ТекущийЭлемент = ЭлементФормы;
		
		Возврат;
	КонецЕсли;
	
	Если ВидАктивизации = "Иерархия" Тогда
		
		ЭлементФормы = ?(ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры")
																, Элементы.ОтборКатегории, Элементы.ОтборИерархия);
		ЭтаФорма.ТекущийЭлемент = ЭлементФормы;
		
		Возврат;
	КонецЕсли;
	
	Если ВидАктивизации = "Корзина" Тогда
		
		Если Не КорзинаРасшифровкаВидимость Тогда
			СвернутьРазвернутьКорзину();
		КонецЕсли;
		
		ЭтаФорма.ТекущийЭлемент = Элементы.КорзинаРасшифровка;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаСтрокеКорзины(СписокВладельцев)
	Если СписокВладельцев.Количество() Тогда
		
		ПараметрыПоиска = Новый Структура("Номенклатура", СписокВладельцев[0].Значение);
		СтрокиКорзины = Корзина.НайтиСтроки(ПараметрыПоиска);
		
		Если СтрокиКорзины.Количество() Тогда
			ДобавленнаяСтрока = СтрокиКорзины[0];
			ИдентификаторСтроки = ДобавленнаяСтрока.ПолучитьИдентификатор();
			Элементы.КорзинаРасшифровка.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьКорзину()
	
	Если Корзина.Количество()>0 Тогда
		КорзинаРасшифровкаВидимость = Не КорзинаРасшифровкаВидимость;
		
		Элементы.ГруппаОбщаяКорзина.Видимость = КорзинаРасшифровкаВидимость;
		Элементы.Корзина.Видимость = Не КорзинаРасшифровкаВидимость;
		
		Если КорзинаРасшифровкаВидимость Тогда
			Элементы.Отложить.Доступность = (Корзина.Количество()>0);
			Элементы.ОчиститьКорзину.Доступность = (Корзина.Количество()>0);
		КонецЕсли;
		
	Иначе
		Восстановить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МассивНоменклатурыИзКорзиныКлиент()
	
	МассивНоменклатуры = Новый Массив;
	
	Для Каждого ЭлементКорзины Из Корзина Цикл
		МассивНоменклатуры.Добавить(ЭлементКорзины.Номенклатура);
	КонецЦикла;
	
	Возврат МассивНоменклатуры;
	
КонецФункции

&НаСервере
Функция МассивНоменклатурыИзКорзиныСервер()
	
	МассивНоменклатуры = Новый Массив;
	
	Для Каждого ЭлементКорзины Из Корзина Цикл
		МассивНоменклатуры.Добавить(ЭлементКорзины.Номенклатура);
	КонецЦикла;
	
	Возврат МассивНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьВозможностьВыбораГруппыВПобореСКД(ВладелецФормы)
	
	Элементы.ОтборИерархияКонтекстноеМенюГруппаВыбрать.Видимость = Ложь;
	
	Если Не ВладелецФормы = Неопределено И ТипЗнч(ВладелецФормы) = Тип("ПолеФормы") Тогда
		Если ВладелецФормы.Имя = "Value" Тогда
			Если ВладелецФормы.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы Тогда
				Элементы.ОтборИерархияКонтекстноеМенюГруппаВыбрать.Видимость = Истина;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСохраняемыхНастроекФормыВыбора()

	СтруктураНастроек = Новый Структура;
	
	СтрокаНастроек = "ОтборОрганизация,ОтборСклад,ОтборОстатки,ОтборВидЦен";
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
	Для каждого Элемент Из МассивНастроек Цикл
		СтруктураНастроек.Вставить(Элемент, ЭтаФорма[Элемент]);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Процедура СохранитьОбщиеНастройки()
	
	ИмяКлючаОбъекта = "СписокНоменклатураОбщиеНастройки";
	СтрокаОбщихНастроек = "ПоказыватьКорзину,ПоказыватьКартинку,ПоказыватьАналоги,ПоказыватьСопутствующиеТовары, ВыводСопутствующихТоваров";
	
	СписокНастроекДляСохранения = Новый ТаблицаЗначений;
	СписокНастроекДляСохранения.Колонки.Добавить("ЗначениеНастройки");
	СписокНастроекДляСохранения.Колонки.Добавить("ИмяНастройки");
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОбщихНастроек, , Истина, Истина);
	Для Каждого Элемент Из МассивНастроек Цикл

		НоваяСтрока = СписокНастроекДляСохранения.Добавить();
		НоваяСтрока.ИмяНастройки = Элемент;
		НоваяСтрока.ЗначениеНастройки = ЭтаФорма[Элемент];
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + "СписокНастроекФормы", СписокНастроекДляСохранения);
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиФормыПриСоздании(Параметры)
	
	Если РаботаСЗакупками И Параметры.Свойство("ВидЦенКонтрагента") Тогда
		ВидЦенКонтрагента = Параметры.ВидЦенКонтрагента;
		ОтборВидЦен = Параметры.ВидЦенКонтрагента;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОтборВидЦен) Тогда
		
		Если Параметры.Свойство("ВидЦен") И ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
			Если Не РаботаСЗакупками И ТипЗнч(Параметры.ВидЦен) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
				ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
			Иначе
				ОтборВидЦен = Параметры.ВидЦен;
			КонецЕсли;
		Иначе
			ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборВидЦен) И Не УправлениеДоступом.ЧтениеРазрешено(ОтборВидЦен) Тогда
			Если ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦен") Тогда
				ОтборВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
			ИначеЕсли ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
				ОтборВидЦен = Справочники.ВидыЦенКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Валюта") И ЗначениеЗаполнено(Параметры.Валюта) Тогда
		ВалютаПодбора = Параметры.Валюта;
	ИначеЕсли ЗначениеЗаполнено(ОтборВидЦен) Тогда
		ВалютаПодбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборВидЦен, "ВалютаЦены", Истина);
	Иначе
		ВалютаПодбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаПодбора) Тогда
		ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаПодбора);
	КонецЕсли;
	
	ТекущаяСтраницаНоменклатуры = "СписокЗапасы";
	Если Параметры.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(Параметры.ТипНоменклатуры) Тогда
		УстановитьФиксированныйОтборПоТипамНоменклатуры(Параметры.ТипНоменклатуры);
	ИначеЕсли Параметры.Отбор.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(Параметры.Отбор.ТипНоменклатуры) Тогда
		УстановитьФиксированныйОтборПоТипамНоменклатуры(Параметры.Отбор.ТипНоменклатуры);
		Параметры.Отбор.Удалить("ТипНоменклатуры");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ЭтоНабор") Тогда
		ОтборНабор = Параметры.Отбор.ЭтоНабор;
		УстановитьФиксированныйОтборПоНаборам(Параметры.Отбор.ЭтоНабор);
		Параметры.Отбор.Удалить("ЭтоНабор");
	ИначеЕсли Параметры.Свойство("ПоказыватьНаборыКомплекты") Тогда
		УстановитьФиксированныйОтборПоНаборам(Параметры.ПоказыватьНаборыКомплекты);
	КонецЕсли;
	
	// Налогообложение НДС и Сумма для Корзины
	НалогообложениеНДС 		= ?(Параметры.Свойство("НалогообложениеНДС"), Параметры.НалогообложениеНДС, Неопределено);
	Если Параметры.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	ДоступныПродажи = Пользователи.ЭтоПолноправныйПользователь()
		Или УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаПродажи();
	
	// Установим видимость подменю в зависимости от наличия прав
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ДоступныЗакупки = УправлениеДоступомУНФ.ДоступноСозданиеДокументовРазделаЗакупки();
		
		Элементы.ПодменюКупить.Видимость		= ДоступныЗакупки;
		Элементы.ПодменюКупитьКорзина.Видимость	= ДоступныЗакупки;
		Элементы.ПодменюПродать.Видимость		= ДоступныПродажи;
		Элементы.ПодменюПродатьКорзина.Видимость= ДоступныПродажи;
		
		Элементы.КартинкаКорзина.Видимость = ДоступныПродажи;
		Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость = ДоступныПродажи И ПоказыватьКорзину;
		Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость = ДоступныПродажи И ПоказыватьКорзину;
		Элементы.ДеревоОстаткиКартинкаКорзина.Видимость = ДоступныПродажи;
		
	КонецЕсли;
	
	Если ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		Элементы.ГруппаОтборХарактеристика.Видимость = Ложь
	КонецЕсли;
	
	// РМК
	Если УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		Элементы.ОтборКатегорииКонтекстноеМенюДобавить.Видимость = Ложь;
		Элементы.ОтборКатегорииКонтекстноеМенюИзменить.Видимость = Ложь;
		Элементы.ОтборКатегории.ИзменятьСоставСтрок = Ложь;
		Элементы.ОтборКатегорииКонтекстноеМенюСкопироватьКатегорию.Доступность = Ложь;
		Элементы.ОтборКатегорииКонтекстноеМенюУстановитьПометкуУдаленияКатегории.Доступность = Ложь;
	КонецЕсли;
	
	ПоказыватьКолонкуРезерв = Неопределено;
	
	УстановитьВидимостьИДоступностьПриСоздании();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьПриСоздании()
	
	Элементы.ПодменюПродать.Видимость = НЕ Параметры.РежимВыбора;
	Элементы.ПодменюКупить.Видимость  = НЕ Параметры.РежимВыбора;
	Элементы.Выбрать.Видимость        = Параметры.РежимВыбора;
	Элементы.ЦеныОтбор.Видимость      = ЕстьДоступКЦенам;
	
	//Обновить состояние отложенных товаров в корзине
	СписокОтложенныхТоваров = ПолучитьСписокОтложенных();
	Если СписокОтложенныхТоваров.Количество()=0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаПустая;
	Иначе
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	КонецЕсли;
	
	НадписьПодобраноТоваров = НСтр("ru = 'Ваша корзина:
	|перетащите товары'");
	НадписьПодобраноТоваровРасшифровка =  НСтр("ru = '0 на сумму 0'");
	Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость			= НЕ Параметры.РежимВыбора И ПоказыватьКорзину;
	Элементы.СписокЗапасыКонтекстноеМенюУдалитьИзКорзины.Видимость			= НЕ Параметры.РежимВыбора И ПоказыватьКорзину;
	
	Если ОграничениеДоступаЛупа И ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
		Элементы.ОтборИерархия.ТекущаяСтрока = 0;
	Иначе
		Если ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		ИначеЕсли ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
		ИначеЕсли ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.СегментыНоменклатуры Тогда
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияСегментыОтбор;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	Элементы.ОтборНабор.Видимость = ИспользоватьНаборы;

	Если Параметры.РежимВыбора Тогда
		Элементы.ОтборИерархияКонтекстноеМенюГруппаВыбрать.Видимость = Истина;
	Иначе
		Элементы.ОтборИерархияКонтекстноеМенюГруппаВыбрать.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПоказатьОстатки.Пометка = ОстаткиВидимость;
	
	Если Не ПечатьЭтикетокИЦенников Тогда
		
		Если (ЭтоПодбор И Не ЗначениеЗаполнено(ВалютаДокумента)) Или ТолькоНоменклатураИКоличество Тогда
			ЕстьДоступКЦенам = Ложь;
		КонецЕсли;
		
		Элементы.КорзинаРасшифровкаЦена.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаРучнаяСкидка.Видимость = ЕстьДоступКЦенам И Не РаботаСЗакупками;
		Элементы.КорзинаРасшифровкаСумма.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаСтавкаНДС.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаСуммаНДС.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаВсего.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаЦена.Доступность = РазрешеноРедактированиеЦенДокументов;
		Элементы.КорзинаРасшифровкаРучнаяСкидка.Доступность = РазрешеноРедактированиеЦенДокументов;
		
		Если ЭтоПодбор И Не ВалютаПодбора = ВалютаДокумента Тогда
			
			Элементы.КорзинаРасшифровкаГруппаЦенаВВалюте.Видимость = ЕстьДоступКЦенам;
			Элементы.КорзинаРасшифровкаЦенаВВалютеПодбора.Доступность = ЕстьДоступКЦенам;
			Элементы.КорзинаРасшифровкаГруппаЦенаВВалюте.Заголовок = СтрШаблон(НСтр("ru='Цена %1'"), ВалютаПодбора.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаВалюта.Видимость = Ложь;
			
			Элементы.КорзинаРасшифровкаЦена.Заголовок = СтрШаблон(НСтр("ru='Цена %1'"), ВалютаДокумента.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаСумма.Заголовок = СтрШаблон(НСтр("ru='Сумма %1'"), ВалютаДокумента.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаСуммаНДС.Заголовок = СтрШаблон(НСтр("ru='Сумма НДС %1'"), ВалютаДокумента.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаВсего.Заголовок = СтрШаблон(НСтр("ru='Всего %1'"), ВалютаДокумента.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаРучнаяСкидка.Заголовок = СтрШаблон(НСтр("ru='Скидка руч. %1'"), ВалютаДокумента.СимвольноеПредставление);
			
		ИначеЕсли УчетВалютныхОпераций Тогда
			Элементы.КорзинаРасшифровкаГруппаЦенаВВалюте.Видимость = ЕстьДоступКЦенам;
			Элементы.КорзинаРасшифровкаЦенаВВалютеПодбора.Доступность = ЕстьДоступКЦенам;
			
			Элементы.КорзинаРасшифровкаЦена.Заголовок = СтрШаблон(НСтр("ru='Цена %1'"), НациональнаяВалюта.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаСумма.Заголовок = СтрШаблон(НСтр("ru='Сумма %1'"), НациональнаяВалюта.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаСуммаНДС.Заголовок = СтрШаблон(НСтр("ru='Сумма НДС %1'"), НациональнаяВалюта.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаВсего.Заголовок = СтрШаблон(НСтр("ru='Всего %1'"), НациональнаяВалюта.СимвольноеПредставление);
			Элементы.КорзинаРасшифровкаРучнаяСкидка.Заголовок = СтрШаблон(НСтр("ru='Скидка руч. %1'"), НациональнаяВалюта.СимвольноеПредставление);
			
		Иначе
			Элементы.КорзинаРасшифровкаГруппаЦенаВВалюте.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("ПоказыватьКолонкуРезерв") И РезервированиеЗапасов Тогда
			ПоказыватьКолонкуРезерв = Параметры.ПоказыватьКолонкуРезерв;
		КонецЕсли;
		
	Иначе
		Элементы.КорзинаРасшифровкаЦена.Видимость = ЕстьДоступКЦенам;
		Элементы.КорзинаРасшифровкаЦена.Доступность = РазрешеноРедактированиеЦенДокументов;
		Элементы.КорзинаРасшифровкаОстаток.Видимость = Истина;
		Элементы.КорзинаРасшифровкаРучнаяСкидка.Видимость = Ложь;
		Элементы.КорзинаРасшифровкаСумма.Видимость = Ложь;
		Элементы.КорзинаРасшифровкаСтавкаНДС.Видимость = Ложь;
		Элементы.КорзинаРасшифровкаСуммаНДС.Видимость = Ложь;
		Элементы.КорзинаРасшифровкаВсего.Видимость = Ложь;
		
		Элементы.КорзинаРасшифровкаГруппаЦенаВВалюте.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ОтборСклад.СписокВыбора.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборСклад", "РежимВыбораИзСписка", ЭтоПодбор ИЛИ РежимВыбора);
	КонецЕсли;
	
	Если ЭтоПодбор Тогда
		Если КорзинаРасшифровкаВидимость Тогда
			Элементы.ПеренестиВДокументКорзина.КнопкаПоУмолчанию = Ложь;
			Элементы.ПеренестиВДокумент.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ПеренестиВДокументКорзина.КнопкаПоУмолчанию = Истина;
			Элементы.ПеренестиВДокумент.КнопкаПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	
	УстановитьВидимостьИДоступность(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьЗначенияКонстантОбновитьФорму()

	//Отображение типов номенклатуры от настроек
	Элементы.ОтборТипОперация.Видимость = Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить();
	
	//Отображение колонки Характеристики
	ИспользуютсяХарактеристики 	= Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
	ИспользуютсяПартии = Константы.ФункциональнаяОпцияИспользоватьПартии.Получить();
	РезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	УчетНоменклатурыПоставщиков = ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	УчетПоНесколькимСкладам = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросовСписков()
	
	УстановитьПараметрСписка(СписокЗапасы, "ВидЦен", ОтборВидЦен);
	УстановитьПараметрСписка(СписокЗапасы, "ДатаПереходаНаНДС20", Дата('20190101'));

	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьМинимальныеЦены", ПоказыватьМинимальныеЦены);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВидМинимальныхЦен", ВидМинимальныхЦен);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьЦены", ПоказыватьЦены);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьОстатки", ПоказыватьОстатки);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборПоКоличеству", ОтборПоКоличеству);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборПоЦенам", ОтборПоЦенам);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ТекущаяСтраницаНоменклатуры","СписокЗапасы");
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СоответствиеСтавокНДС",
	УправлениеНебольшойФирмойПовтИсп.СоответствиеСтавокНДС(?(ЗначениеЗаполнено(ПериодЦен),ПериодЦен, ТекущаяДатаСеанса())));
	
	Если ОтборОстатки = 1 И ЗначениеЗаполнено(ОтборСклад) Тогда
		УстановитьПараметрСписка(СписокЗапасы, "ВсеСклады", Ложь);
		
		СписокСкладов = Новый СписокЗначений;
		
		Если Не ОтборСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов Тогда
			СписокСкладов.Добавить(ОтборСклад);
		 Иначе
			СписокСкладов = СписокСкладовПоРодителю(ОтборСклад);
		КонецЕсли;
		
		УстановитьПараметрСписка(СписокЗапасы, "Склад", СписокСкладов);
		
		ТипСтруктурнойЕдиницыВОтборе = ОтборСклад.ТипСтруктурнойЕдиницы;
		
	Иначе
		УстановитьПараметрСписка(СписокЗапасы, "ВсеСклады", Истина);
		УстановитьПараметрСписка(СписокЗапасы, "Склад", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
		ТипСтруктурнойЕдиницыВОтборе = Неопределено;
	КонецЕсли;
	
	Если ОтборОстатки = 1 И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		УстановитьПараметрСписка(СписокЗапасы, "ВсеОрганизации", Ложь);
		УстановитьПараметрСписка(СписокЗапасы, "Организация", ОрганизацииПередачи(ОтборОрганизация));
	Иначе
		УстановитьПараметрСписка(СписокЗапасы, "ВсеОрганизации", Истина);
		УстановитьПараметрСписка(СписокЗапасы, "Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеМетокПП.Количество() Или ДанныеМетокККМ.Количество() Тогда
		УстановитьПараметрСписка(СписокЗапасы, "БезОтбора", Ложь);
		УстановитьПараметрСписка(СписокЗапасы, "Характеристика", СписокОтбораХарактеристики);
	Иначе
		УстановитьПараметрСписка(СписокЗапасы, "БезОтбора", Истина);
		УстановитьПараметрСписка(СписокЗапасы, "Характеристика", Новый СписокЗначений);
	КонецЕсли;
	
	Если ЭтоПодбор Или РежимВыбора Тогда
		Если ЗначениеЗаполнено(ПериодЦен) И Не НачалоДня(ПериодЦен) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			УстановитьПараметрСписка(СписокЗапасы, "ДатаСреза", ПериодЦен);
			СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДатаСреза", ПериодЦен);
		КонецЕсли;
	КонецЕсли;
	
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Корзина", МассивНоменклатурыИзКорзиныСервер());
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РаботаСЗакупками", РаботаСЗакупками);
	
	Если ОстаткиВидимость Тогда
		ПараметрыОтбора = Новый Структура("Номенклатура, СтруктурнаяЕдиница");
		
		Для Каждого СтрокаОстатков Из РасшифровкаОстатков Цикл
			
			ПараметрыОтбора.Номенклатура = СтрокаОстатков.Номенклатура;
			ПараметрыОтбора.СтруктурнаяЕдиница = СтрокаОстатков.СтруктурнаяЕдиница;
			
			НайденныеЭлементы = Корзина.НайтиСтроки(ПараметрыОтбора);
			
			СтрокаОстатков.КартинкаКорзина = ?(НайденныеЭлементы.Количество(), 1, 0);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрСписка(Список, ИмяПараметра, ЗначениеПараметра)
	
	Если Список.Параметры.Элементы.Найти(ИмяПараметра)<>Неопределено Тогда
		Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ЭтоСозданиеФормы = Ложь)
	
	//Остатки и склад
	
	ПоказыватьОстаткиПереключатель = ПоказыватьОстатки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборОстатки", "Видимость", ПоказыватьОстаткиПереключатель);
	
	ИспользоватьКоличествоВСписке = ПоказыватьОстатки ИЛИ ОтборОстатки=2;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборСклад", "Видимость", ПоказыватьОстатки И ОтборОстатки=1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборОрганизация", "Видимость", Элементы.ОтборСклад.Видимость И Не УчетПоКомпанииВЦелом);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Остаток", "Видимость", ПоказыватьОстатки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Резерв", "Видимость", РезервированиеЗапасов И ПоказыватьОстатки);
	
	ВидимостьЯчейки = Истина;
	Если Не Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить()
		Или Не (ИмяФормыВладельца = "Документ.РасходнаяНакладная.Форма.ФормаДокумента" 
		Или ИмяФормыВладельца = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда") Тогда
		ВидимостьЯчейки = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаЯчейка", "Видимость", ВидимостьЯчейки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаСтруктурнаяЕдиница"
	, "Видимость", НЕ ИмяФормыВладельца = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК");
	
	//Цены
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Цена", "Видимость", ПоказыватьЦены И ЦенаВСписке = 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦеныДиапазон", "Видимость", ПоказыватьЦены И ЦенаВСписке = 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборВидЦен", "Видимость", ПоказыватьЦены);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦена", "Видимость"
	, НЕ ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" И ПоказыватьЦены И ЦенаВСписке = 1);
	
	// Категории, иерархия
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		Если Не ОтборОстатки = 1 Тогда
			
			УдаляемыеМетки = Новый СписокЗначений;
			Для каждого Метка Из ДанныеМеток Цикл
				Если СтрНачинаетсяС(Метка.ИмяПоляОтбора, "Характеристика.") Тогда
					УдаляемыеМетки.Добавить(Метка.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
			
			УдалитьМеткиОтбора(УдаляемыеМетки);
			
		КонецЕсли;
		
		СписокГрупп = Новый Массив;
		
		Если ДанныеМетокПП.Количество() Или ДанныеМетокККМ.Количество() Тогда
			
			СписокОтбораХарактеристики.Очистить();
			ДанныеМетокПП.Очистить();
			ДанныеМетокККМ.Очистить();
			
			УстановитьПараметрСписка(СписокЗапасы, "БезОтбора", Истина);
			УстановитьПараметрСписка(СписокЗапасы, "Характеристика", СписокОтбораХарактеристики);
			
			СписокГрупп.Добавить("ГруппаОтборДопРеквизитыХарактеристика");
			РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГрупп, "ДанныеМетокПП");
			
			СписокГрупп.Очистить();
			СписокГрупп.Добавить("КатегорииОтборСвойстваХарактеристики");
			РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГрупп, "ДанныеМетокККМ");
			
			КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойства", Ложь);
			
			Если ОтборОстатки = 1 Тогда
				КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойстваХарактеристики", ОтборОстатки = 1);
			КонецЕсли;
			
		Иначе
			Если Не ОграничениеДоступаЛупа Тогда
				КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойства", Ложь);
				
				Если ОтборОстатки = 1 Тогда
					КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(ЭтотОбъект, ЭтаФорма["СписокЗапасы"], ОтборКатегорииТекущая, "КатегорииОтборСвойстваХарактеристики", ОтборОстатки = 1);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		ОбновитьЭлементыМеток();
		
	КонецЕсли;
	
	Если Не ТекущаяСтраницаНоменклатуры = "ДеревоОстатки"
		И Не ПоказыватьКартинку И Не ПоказыватьАналоги И Не ПоказыватьСопутствующиеТовары И Не (ПоказыватьЦены И ЦенаВСписке = 1) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуреОбщаяГруппа", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуреОбщаяГруппа", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуре", "Видимость", ПоказыватьКартинку И Не ЭтоМобильныйКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Корзина", "Видимость", ПоказыватьКорзину И Не КорзинаРасшифровкаВидимость);
	
	ПоказыватьКолонкаКорзина = ПоказыватьКорзину;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаКорзина", "Видимость", ПоказыватьКолонкаКорзина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиКартинкаКорзина", "Видимость", ПоказыватьКолонкаКорзина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаОстатковКартинкаКорзина", "Видимость", ПоказыватьКолонкаКорзина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Выбрать", "Видимость", Параметры.РежимВыбора);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанель", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиОстаток", "Заголовок", ?(РезервированиеЗапасов, "Свободно", "Остаток"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиЦена", "Видимость", ПоказыватьЦены);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыДерева", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтрокПоискаДеревоОстатков", "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьНоменклатуру", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьНоменклатуруСервис1СНоменклатура", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкопироватьНоменклатуру", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорииОтборСвойстваХарактеристики", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборКатегорииИерархияПереключатель", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьОстатки", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипНоменклатурыОтбор", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПечать", "Видимость", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДеревоОстаткиКонтекстноеМенюДобавитьВКорзину", "Видимость", ПоказыватьКорзину Или Не Параметры.РежимВыбора);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыКатегорииИерархия", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РеквизитыНоменклатуры", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуреОбщаяГруппа", "Поведение", ПоведениеОбычнойГруппы.Обычное);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуре", "Видимость", ПоказыватьКартинку);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиКонтекстноеМенюПоказатьАналоги", "Видимость", ПоказыватьАналоги);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиКонтекстноеМенюПоказатьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОстаткиДинСписка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаКонтекстноеМенюПоказатьВСписке", "Доступность", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоискПоШтрихкодуПанель", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПерейтиИерархия", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьВСписке", "Видимость", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтрокаРасширенногоПоиска", "Видимость", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтбор", "Видимость", Ложь);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтрокаРасширенногоПоиска", "Видимость", НастройкиПоиска = 1);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦеныДиапазон", "Доступность", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанель", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыДерева", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтрокПоискаДеревоОстатков", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПоказатьАналоги", "Видимость", ПоказыватьАналоги);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПоказатьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОстаткиДинСписка", "Видимость", ОстаткиВидимость);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьНоменклатуру", "Видимость", Истина);
		
		Если ОграничениеДоступаЛупа Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьНоменклатуру", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборИерархия", "РазрешитьПеретаскивание", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюИзменитьНоменклатуру", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюГрупповоеИзменениеОбъектов", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкопироватьНоменклатуру", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыИзменить", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборИерархияКонтекстноеМенюУстановитьПометкуУдаленияГруппы", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборИерархияКонтекстноеМенюИзменить", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборИерархияКонтекстноеМенюСкопировать", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПеренестиЭлемент", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПеренестиЭлемент", "Видимость", Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкопироватьНоменклатуру", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыИзменить", "Видимость", Истина);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьНоменклатуруСервис1СНоменклатура", "Видимость", РаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы() И Не Параметры.РежимВыбора);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьОстатки", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипНоменклатурыОтбор", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПечать", "Видимость", Истина);
		
		Если Не Элементы.АналогиПредставлениеОтбора.Видимость И Не Элементы.СопутствующиеТоварыПредставлениеОтбора.Видимость  Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорииОтборСвойства", "Видимость", Не ЭтаФорма.ТолькоПросмотр);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорииОтборСвойстваХарактеристики", "Видимость", Не ЭтаФорма.ТолькоПросмотр);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтменаОтбора", "Видимость", Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорииОтборСвойства", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорииОтборСвойстваХарактеристики", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтменаОтбора", "Видимость", Истина);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборКатегорииИерархияПереключатель", "Видимость", ВидимостьКатегорииГруппы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыКатегорииИерархия", "Видимость", Истина);
		
		Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПерейтиКРодителю", "Заголовок", НСтр("ru='Перейти к категории'"));
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыКонтекстноеМенюПерейтиКРодителю", "Заголовок", НСтр("ru='Перейти к группе'"));
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
		Иначе
			Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияСегментыОтбор;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РеквизитыНоменклатуры", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИнформацияПоНоменклатуреОбщаяГруппа", "Поведение", ПоведениеОбычнойГруппы.Свертываемая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаКонтекстноеМенюПоказатьВСписке", "Доступность", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоискПоШтрихкодуПанель", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыПерейтиИерархия", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьВСписке", "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтбор", "Видимость", Истина);
		
	КонецЕсли;
	
	Если ЭтоПодбор Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаРучнаяСкидка", "Видимость", СкидкиНаценкиВидны);
		
		Если Не ЗначениеЗаполнено(ВидЦен) Или РаботаСЗакупками Тогда
			ОтборВидЦенДоступность = Истина;
		Иначе
			ОтборВидЦенДоступность = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборВидЦен", "Доступность", ОтборВидЦенДоступность);
		
		Если Не РезервированиеЗапасов Тогда
			ВидимостьКолонкиРезерв = Ложь;
		ИначеЕсли НеПоказыватьИнформациюПоСкладуИРезервам  Тогда
			ВидимостьКолонкиРезерв = ?(Не ПоказыватьКолонкуРезерв = Неопределено И ПоказыватьКолонкуРезерв, Истина, Ложь);
		ИначеЕсли РезервированиеЗапасов Тогда
			
			ВидимостьКолонкиРезерв = Истина;
			
			Если (ЗначениеЗаполнено(ВалютаДокумента) И РаботаСЗакупками)
				ИЛИ (Не ПоказыватьКолонкуРезерв = Неопределено И НЕ ПоказыватьКолонкуРезерв) Тогда
				ВидимостьКолонкиРезерв = Ложь;
			КонецЕсли;
			
		Иначе
			ВидимостьКолонкиРезерв = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаРезерв", "Видимость", ВидимостьКолонкиРезерв);
		
		Если ИмяФормыВладельца = "Документ.ЗаказПокупателя.Форма.ФормаДокумента"
			Или ИмяФормыВладельца = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаРезерв", "Заголовок", НСтр("ru='В резерв'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаОстатковВРезерве", "Видимость", РезервированиеЗапасов);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОДокументе", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВернутьсяНаСтаруюФормуПодбора", "Видимость", Истина);
		
		ПоказыватьИнформациюПоСкладам = Не НеПоказыватьИнформациюПоСкладуИРезервам И Не ТолькоНоменклатураИКоличество;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаСтруктурнаяЕдиница", "Видимость", ПоказыватьИнформациюПоСкладам);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаЯчейка", "Видимость", ПоказыватьИнформациюПоСкладам И ВидимостьЯчейки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаРасшифровкаСтранаПроисхождения", "Видимость", ПоказыватьИнформациюПоСкладам);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОформитьДокументКорзина", "Видимость", Ложь);
		
	КонецЕсли;

		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОбщаяКорзина", "Видимость", КорзинаРасшифровкаВидимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказатьОстатки", "Видимость", НЕ ТекущаяСтраницаНоменклатуры = "ДеревоОстатки");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Отложить", "Видимость", НЕ ЭтоПодбор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПеренестиВДокументКорзина", "Видимость", ЭтоПодбор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПеренестиВДокумент", "Видимость", ЭтоПодбор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОфрмитьДокумент", "Видимость", Не ЭтоПодбор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОформить", "Видимость", Не ЭтоПодбор);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродатьКупить", "Видимость", Не ЭтоПодбор);
	
	Если РезервированиеЗапасов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Остаток", "Заголовок", НСтр("ru='Свободно'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиОстатокПолный", "Видимость", РезервированиеЗапасов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиРезерв", "Видимость", РезервированиеЗапасов);
	
	ОтображатьКолонкуРасшифровкиПоОстаткам = Не ОграничениеДоступаЛупа И (ИспользуютсяХарактеристики Или ИспользуютсяПартии 
												Или УчетПоЯчейкам Или УчетНоменклатурыПоставщиков Или УчетПоНесколькимСкладам Или ПоказыватьОстатки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаОстатки", "Видимость", ОтображатьКолонкуРасшифровкиПоОстаткам);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокЗапасыСтандартныйПоиск", "Видимость", НастройкиПоиска = 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыУправлениеПоиском", "Видимость", НастройкиПоиска = 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОчиститьКорзину", "Доступность", ?(Корзина.Количество(), Истина, Ложь));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьЦены", "Доступность", ЕстьДоступКЦенам);
	
	ОбновитьЗаголовокФильтров();
	
КонецПроцедуры

// Перед закрытием, если были подобраны товары, предлагает пользователю 
// оформить подобранные товары в документе или продолжить выбор.
&НаКлиенте
Процедура ВопросПеренестиТовары(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РазрешитьЗакрытие = Истина;
	Иначе
		РазрешитьЗакрытие = Ложь;
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Недействительная номенклатура отображается серым
	НовоеУсловноеОформление = СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;
	
	// Номенклатура поставщиков
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоОстатки.Недоступен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиПоказатели");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиОстаток");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиКартинкаКорзина");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	// Ограничение по типу партии
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоОстатки.ПартияДляИсключения", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиПоказатели");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиОстаток");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиКартинкаКорзина");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДеревоОстаткиЕдиницаИзмерения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительнаяНоменклатура(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокЗапасы,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСегментуНоменклатуры(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокЗапасы, 
		"СегментНоменклатуры", 
		Форма.ОтборПоСегменту, 
		ЗначениеЗаполнено(Форма.ОтборПоСегменту));
		
КонецПроцедуры

&НаСервере
Процедура ПеренестиВГруппу(спПеренести, НоваяГруппа)

	Для каждого элНоменклатура Из спПеренести Цикл
		Если элНоменклатура.Родитель<>НоваяГруппа Тогда
			Об = элНоменклатура.ПолучитьОбъект();
			Об.Родитель = НоваяГруппа;
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если спПеренести[0].ЭтоГруппа Тогда
		
		ЗаполнитьДеревоИерархии();
		
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Значение",
			ИдентификаторСтроки,
			ОтборИерархия.ПолучитьЭлементы(),
			спПеренести[0],
			Ложь
		);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
		
	Иначе
		
		Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.Значение = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция РодительКатегории(Категория)
	
	Если НЕ ЗначениеЗаполнено(Категория) Тогда
		Возврат Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Категория, "Родитель,ЭтоГруппа");
	
	Если ДанныеКатегории.ЭтоГруппа Тогда
		Возврат Категория;
	КонецЕсли;
	
	Возврат ДанныеКатегории.Родитель;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМобильныйКлиент = Истина;
	
	Элементы.СвернутьОтборы.Видимость = Ложь;
	Элементы.ИнформацияБезРеквизитов.Видимость = Ложь;
	Элементы.СтрокаПоиска.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.СписокЗапасыКонтекстноеМенюПоказатьАналогиМобильныйКлиент.Видимость = ПоказыватьАналоги;
	Элементы.СписокЗапасыКонтекстноеМенюПоказатьСопутствующиеТоварыМобильныйКлиент.Видимость = ПоказыватьСопутствующиеТовары;
	Элементы.ДеревоОстаткиКонтекстноеМенюПоказатьАналогиМобильныйКлиент.Видимость = ПоказыватьАналоги;
	Элементы.ДеревоОстаткиКонтекстноеМенюПоказатьСопутствующиеТоварыМобильныйКлиент.Видимость = ПоказыватьСопутствующиеТовары;
	
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru='Нет изображения'");

	
	Элементы.ПродатьКупить.Видимость = Ложь;
	Элементы.СписокЗапасыПродатьКупить.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьТекстЗапросаВСписках()
	
	ПереопределитьТекстЗапросаСписокЗапасы();
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьТекстЗапросаСписокЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ПрямойАналог,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.Код КАК Код,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.ДатаИзменения КАК ДатаИзменения,
	|	СправочникНоменклатура.МетодОценки КАК МетодОценки,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	СправочникНоменклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СправочникНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	СправочникНоменклатура.Поставщик КАК Поставщик,
	|	СправочникНоменклатура.Склад КАК Склад,
	|	СправочникНоменклатура.СпособПополнения КАК СпособПополнения,
	|	СправочникНоменклатура.СрокПополнения КАК СрокПополнения,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДСНоменклатуры,
	|	СправочникНоменклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СправочникНоменклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.Ячейка КАК Ячейка,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	СправочникНоменклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользуетсяРезервирование,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СправочникНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	СправочникНоменклатура.Недействителен КАК Недействителен,
	|	СправочникНоменклатура.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
	|	СправочникНоменклатура.НормаВремени КАК НормаВремени,
	|	СправочникНоменклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	СправочникНоменклатура.Вес КАК Вес,
	|	СправочникНоменклатура.Объем КАК Объем,
	|	СправочникНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СправочникНоменклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	СправочникНоменклатура.ГарантийныйСрок КАК ГарантийныйСрок,
	|	СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС КАК ПодконтрольнаяПродукцияВЕТИС,
	|	СправочникНоменклатура.ВыписыватьГарантийныйТалон КАК ВыписыватьГарантийныйТалон,
	|	ВЫБОР
	|		КОГДА НЕ СправочникНоменклатура.ЭтоНабор
	|				И НЕ(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|						ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ВидРабот))
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК КартинкаОстатки,
	|	СправочникНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	СправочникНоменклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	0 КАК КартинкаКорзина,
	|	ПОДСТРОКА(СправочникНоменклатура.Комментарий, 1, 1000) КАК Комментарий,
	|	&Период КАК Период,
	|	&ВидЦен КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА 4
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ПометкаУдаления
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоНабор
	|			ТОГДА 12
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки,
	|	СправочникНоменклатура.Родитель КАК Группа,
	|	ВЫБОР
	|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайлов.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы,
	|	&ДопПоляШаблон КАК ДопПоляШаблон
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами}";
	
	ВТТаблицаОстатков = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ОстаткиТоваров
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	(&ВсеСклады
	|			ИЛИ ОстаткиТоваров.СтруктурнаяЕдиница В (&Склад))
	|	И (&ВсеОрганизации
	|			ИЛИ ОстаткиТоваров.Организация В (&Организация))
	|	И (&БезОтбора
	|			ИЛИ ОстаткиТоваров.Характеристика В (&Характеристика))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ОтборПоЦенам И ЦенаВСписке = 0 Тогда //Медленный способ с двумя левыми соединениями
		
		ТекстЗамены = "
		|ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения, СправочникНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК Коэффициент,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена";
		
		Если ПоказыватьОстатки Тогда
			ТекстЗамены = ТекстЗамены + ",
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
			|			ТОГДА ЕСТЬNULL(ОстаткиТоваров.Количество, 0) / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
			|		ИНАЧЕ ЕСТЬNULL(ОстаткиТоваров.Количество, 0)
			|	КОНЕЦ КАК КоличествоОстаток,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
			|			ТОГДА ЕСТЬNULL(ОстаткиТоваров.Резерв, 0) / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
			|		ИНАЧЕ ЕСТЬNULL(ОстаткиТоваров.Резерв, 0)
			|	КОНЕЦ КАК Резерв";
			
		Иначе
			ТекстЗамены = ТекстЗамены + ",
			|	0 КАК КоличествоОстаток,
			|	0 КАК Резерв";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ДопПоляШаблон КАК ДопПоляШаблон", ТекстЗамены);
		
		Если ПоказыватьОстатки Или ОтборПоКоличеству Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами",
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, Актуальность И ВидЦен = &ВидЦен И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
			|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваров.Номенклатура");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами",
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, Актуальность И ВидЦен = &ВидЦен И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка");
		КонецЕсли;
		
		Если ПоказыватьОстатки Тогда
			ТекстЗапроса = ВТТаблицаОстатков + ТекстЗапроса;
		КонецЕсли;
		
	ИначеЕсли ПоказыватьЦены И ЦенаВСписке = 0 Тогда //без отбора по количеству
		
		Если Не ПоказыватьОстатки Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ДопПоляШаблон КАК ДопПоляШаблон", 
			"ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
			|	1 КАК Коэффициент,
			|	0 КАК Цена,
			|	0 КАК КоличествоОстаток,
			|	0 КАК Резерв");
			
		Иначе
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ДопПоляШаблон КАК ДопПоляШаблон", 
			"ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
			|	1 КАК Коэффициент,
			|	0 КАК Цена,
			|	ЕСТЬNULL(ОстаткиТоваров.Количество, 0) КАК КоличествоОстаток,
			|	ЕСТЬNULL(ОстаткиТоваров.Резерв, 0) КАК Резерв");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами",
			"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
			|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
			|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваров.Номенклатура");
			
			ТекстЗапроса = ВТТаблицаОстатков + ТекстЗапроса;
			
		КонецЕсли;
		
	ИначеЕсли ОтборПоКоличеству Тогда //без отбора по ценам
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ДопПоляШаблон КАК ДопПоляШаблон",
		"ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	0 КАК Цена,
		|	ЕСТЬNULL(ОстаткиТоваров.Количество, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиТоваров.Резерв, 0) КАК Резерв");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами",
		"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваров.Номенклатура");
		
		ТекстЗапроса = ВТТаблицаОстатков + ТекстЗапроса;
		
	ИначеЕсли ПоказыватьОстатки Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ДопПоляШаблон КАК ДопПоляШаблон",
		"	ЕСТЬNULL(ОстаткиТоваров.Количество, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиТоваров.Резерв, 0) КАК Резерв,
		|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	0 КАК Цена");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами",
		"ПО СправочникНоменклатура.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО СправочникНоменклатура.Ссылка = ОстаткиТоваров.Номенклатура");
		
		ТекстЗапроса = ВТТаблицаОстатков + ТекстЗапроса;
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ДопПоляШаблон КАК ДопПоляШаблон", 
		"ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	0 КАК Цена,
		|	0 КАК КоличествоОстаток,
		|	0 КАК Резерв");
		
	КонецЕсли;
	
	Если ОтборОстатки = 1 И ПоказыватьОстатки Тогда
		
		ТекстЗапроса =	ТекстЗапроса +"
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа
		|	И (СправочникНоменклатура.ЭтоНабор
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
		|			ИЛИ (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|				ИЛИ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))
		|					И (ЕСТЬNULL(ОстаткиТоваров.Количество, 0) > 0
		|						ИЛИ ЕСТЬNULL(ОстаткиТоваров.Резерв, 0) > 0))
		|{ГДЕ
		|	(СправочникНоменклатура.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СоставСегментаНоменклатуры.Номенклатура
		|			ИЗ
		|				РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
		|			ГДЕ
		|				СоставСегментаНоменклатуры.Сегмент = &СегментНоменклатуры))}";
		
	Если СписокОтбораХарактеристики.Количество() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров", "Полное СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров")
	КонецЕсли;
		
	Иначе
		ТекстЗапроса =	ТекстЗапроса +"
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа
		|{ГДЕ
		|	(СправочникНоменклатура.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СоставСегментаНоменклатуры.Номенклатура
		|			ИЗ
		|				РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
		|			ГДЕ
		|				СоставСегментаНоменклатуры.Сегмент = &СегментНоменклатуры))}";
	КонецЕсли;
	
	Если ОтборПоЦенам И ТипЗнч(ОтборВидЦен) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЦеныНоменклатуры.СрезПоследних", "ЦеныНоменклатурыКонтрагентов.СрезПоследних");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЦеныНоменклатурыСрезПоследних", "ЦеныНоменклатурыКонтрагентовСрезПоследних");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ВидЦен", " ВидЦенКонтрагента");
	КонецЕсли;
	
	Если ЭтоПодбор Или РежимВыбора Тогда
		Если ЗначениеЗаполнено(ПериодЦен) И Не НачалоДня(ПериодЦен) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			// Оставляем как есть
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаСреза", "");
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаСреза", "");
	КонецЕсли;
	
	ПараметрыСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ПараметрыСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокЗапасы, ПараметрыСписка);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСвойстваКомандСервиса1СНоменклатура()
	
	Элементы.СоздатьНоменклатуруСервис1СНоменклатура.Видимость = РаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
	
	Если Элементы.ГруппаСтрокаПоискаЗапасы1СНоменклатура.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьСвойстваКомандСервиса1СНоменклатураРекурсивно(Элементы.ГруппаСтрокаПоискаЗапасы1СНоменклатура.ПодчиненныеЭлементы);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСвойстваКомандСервиса1СНоменклатураРекурсивно(ЭлементыСервиса1СНоменклатура)
	
	Если ТипЗнч(ЭлементыСервиса1СНоменклатура) <> Тип("ЭлементыФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементыСервиса1СНоменклатура Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ДополнитьСвойстваКомандСервиса1СНоменклатураРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			Элемент.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиПредставлениеОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АналогиОтменаОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиОтменаОтбора()
	Элементы.АналогиПредставлениеОтбора.Видимость = Ложь;
	Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
	
	ПрямыеАналоги.Очистить();
	
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
	
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	ЗначениеДляОтбораАналогов = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
	
	УстановленОтбор = Ложь;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборКатегорииПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборИерархияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	ОтменитьОтборУстановитьВидимостьИДоступность();
	Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиОтменаОтбора()
	Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
	
	ПрямыеАналоги.Очистить();
	
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
	
	Элементы.ОстаткиПредставлениеОтбора.Видимость = Ложь;
	
	ВосстановитьНастройкиФильтров();
	
	ВыполнитьОперацииОтменыРежимаОстаткиНаСервере();
	
	ИдентификаторСтроки = ИдентификаторТекущейСтроки;
	
	Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторСтроки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
	
	УстановленОтбор = Ложь;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборКатегорииПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборИерархияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	Если ОстаткиВидимость Тогда
		ОбновитьКартинкуКорзинаРасшифровкаОстатков();
	КонецЕсли;
	
	Если НастройкиПоиска = 1 Тогда
		ПрименитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопутствующиеТоварыОтменаОтбора()
	
	Элементы.СопутствующиеТоварыПредставлениеОтбора.Видимость = Ложь;
	Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
	
	ПрямыеАналоги.Очистить();
	
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
	
	ОтменитьОтборУстановитьВидимостьИДоступность();
	
	Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
	ЗначениеДляОтбораСопутствующийТоваров = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьСопутствующиеТовары", "Видимость", ПоказыватьСопутствующиеТовары);
	
	УстановленОтбор = Ложь;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборКатегорииПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторГруппыКатегории;
		ОтборИерархияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОтборУстановитьВидимостьИДоступность()
	УстановитьЗначениеОтбораДинамическогоСписка("Ссылка", Неопределено, Ложь);
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборАналоги(ТекущиеДанные, ОтборИзКорзины = Ложь)
	
	ПрямыеАналоги.Очистить();
	
	Если Не ЭтоМобильныйКлиент Тогда
		Если Не ОтборИзКорзины И НадписьАналогиНоменклатуры = НСтр("ru = 'Нет аналогов'") Тогда
			
			ПараметрыОповещения = Новый Структура();
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыАналогов", ЭтотОбъект, ПараметрыОповещения);
			
			СтруктураОтбора = Новый Структура("Номенклатура", ТекущиеДанные.Ссылка);
			ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
			ОткрытьФорму("РегистрСведений.АналогиНоменклатуры.Форма.ФормаДляНоменклатуры", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ОстаткиПредставлениеОтбора.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПредставлениеОтбора", "Видимость", Ложь);
	КонецЕсли;
	
	Если Элементы.СопутствующиеТоварыПредставлениеОтбора.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СопутствующиеТоварыПредставлениеОтбора", "Видимость", Ложь);
	КонецЕсли;
	
	ЭтоДеревоОстатков = Ложь;
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
		ВосстановитьНастройкиФильтров();
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = 0;
		ЭтоДеревоОстатков = Истина;
	КонецЕсли;
	
	Элементы.АналогиПредставлениеОтбора.Видимость = Истина;
	
	Если Не ОтборИзКорзины Тогда
		ЗначениеДляОтбораАналогов = ТекущиеДанные.Ссылка;
		
		ПредставлениеКоличества = "";
		Если ТекущиеДанные.Свойство("КоличествоОстаток") Тогда
			ПредставлениеКоличества = "• " + Строка(ТекущиеДанные.КоличествоОстаток) + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения);
		КонецЕсли;
		
		ПредставлениеЦены = "";
		Если ТекущиеДанные.Свойство("Цена") Тогда
			ПредставлениеЦены = ?(ТекущиеДанные.Цена > 0, "• " + Строка(ТекущиеДанные.Цена) + " " + Строка(ВалютаПодбора),"• " + "0,00" + " " + Строка(ВалютаПодбора));
			ПредставлениеЦены = ?(Прав(ПредставлениеЦены,1) = ".", ПредставлениеЦены, ПредставлениеЦены);
		КонецЕсли;
		
		ТекстПредставления = СтрШаблон(НСтр("ru='Аналоги: %1 %2 %3'"), Строка(ЗначениеДляОтбораАналогов), ПредставлениеКоличества, ПредставлениеЦены);
	Иначе
		ЗначениеДляОтбораАналогов = ТекущиеДанные;
		ТекстПредставления = СтрШаблон(НСтр("ru='Аналоги: %1'"), Строка(ЗначениеДляОтбораАналогов));
	КонецЕсли;
	
	Элементы.АналогиПредставлениеОтбора.Заголовок = ИнформацияОбОтборе(СокрЛП(ТекстПредставления), Истина);
	
	УстановитьОтборАналогиНаСервере(ЭтоДеревоОстатков);
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = 0;
		ОтборКатегорииПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ОтборИерархия.ТекущаяСтрока = 0;
		ОтборИерархияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	УстановленОтбор = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборАналогиНаСервере(ЭтоДеревоОстатков)
	
	Если ЭтоДеревоОстатков Тогда
		ПереформироватьЗапросыСписков();
	Иначе
		ПереопределитьТекстЗапросаВСписках();
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	
	УстановитьОтборДляАналогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДляАналогов()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", ЗначениеДляОтбораАналогов);
	
	СписокЗнч = Новый СписокЗначений;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналогиНоменклатуры.Аналог КАК Аналог,
	|	ЛОЖЬ КАК АналогРодитель
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	|ГДЕ
	|	АналогиНоменклатуры.Номенклатура = &Владелец
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АналогиНоменклатуры.Номенклатура,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	|ГДЕ
	|	АналогиНоменклатуры.Аналог = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Итог.Аналог КАК Аналог,
	|	Итог.АналогРодитель КАК АналогРодитель
	|ИЗ
	|	Итог КАК Итог";
	
	ВыборкаАналоговПервыйУровень = Запрос.Выполнить().Выбрать();
	
	ИтоговыйМассив = Новый Массив;
	
	Пока ВыборкаАналоговПервыйУровень.Следующий() Цикл
		
		Если ВыборкаАналоговПервыйУровень.АналогРодитель Тогда
			ПрямыеАналоги.Добавить(ВыборкаАналоговПервыйУровень.Аналог);
		КонецЕсли;
		
		ИтоговыйМассив.Добавить(ВыборкаАналоговПервыйУровень.Аналог);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из ИтоговыйМассив Цикл
		СписокЗнч.Добавить(ЭлементМассива);
	КонецЦикла;
	
	УстановитьЗначениеОтбораДинамическогоСписка("Ссылка", СписокЗнч);
	СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
	
КонецПроцедуры

&НаКлиенте
Процедура СопутствующиеТоварыПредставлениеОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СопутствующиеТоварыОтменаОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСопутствующиеТовары(ТекущиеДанные, ОтборИзКорзины = Ложь, ОтборПриДобавленииВКорзину = Ложь, СписокВладельцев = Неопределено, ХарактеристикаОтбора = Неопределено)
	
	Если Не ЭтоМобильныйКлиент Тогда
		Если Не ОтборПриДобавленииВКорзину И Не ОтборИзКорзины И НадписьСопутствующийТовар = НСтр("ru = 'Нет сопутствующих товаров'") Тогда
			
			ПараметрыОповещения = Новый Структура();
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыАналогов", ЭтотОбъект, ПараметрыОповещения);
			
			СтруктураОтбора = Новый Структура("Номенклатура", ТекущиеДанные.Ссылка);
			ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
			ОткрытьФорму("РегистрСведений.СопутствующиеТовары.Форма.ФормаДляНоменклатуры", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеДляОтбораСопутствующийТоваров = ?(ОтборИзКорзины, ТекущиеДанные, ТекущиеДанные.Ссылка);
	УстановитьОтборДляСопутствующихТоваров(СписокВладельцев, ХарактеристикаОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАналогиНоменклатуры", "Видимость", ПоказыватьАналоги);
	
	Если Элементы.ОстаткиПредставлениеОтбора.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиПредставлениеОтбора", "Видимость", Ложь);
	КонецЕсли;
	
	Если Элементы.АналогиПредставлениеОтбора.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АналогиПредставлениеОтбора", "Видимость", Ложь);
	КонецЕсли;
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		
		Элементы.СтраницыКатегорииИерархия.Доступность = Истина;
		
		ВосстановитьНастройкиФильтров();
		
		УстановитьСтраницуСпискаНоменклатуры(ПредыдущаяСтраницаСписка, Ложь);
		ПереформироватьЗапросыСписков();
		
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = 0;
		
	КонецЕсли;
	
	Элементы.СопутствующиеТоварыПредставлениеОтбора.Видимость = Истина;
	
	СтрокаСписокТоваровРодителей = "";
	
	Если СписокВладельцев.Количество() < 2 Тогда
		
		СтрокаСписокТоваровРодителей= Строка(ЗначениеДляОтбораСопутствующийТоваров);
		
		Если Не ОтборИзКорзины Тогда
			
			ПредставлениеКоличества = "";
			Если ТекущиеДанные.Свойство("КоличествоОстаток") Тогда
				ПредставлениеКоличества = "• " + Строка(ТекущиеДанные.КоличествоОстаток) + " " + Строка(ТекущиеДанные.ЕдиницаИзмерения);
			КонецЕсли;
			
			ПредставлениеЦены = "";
			Если ТекущиеДанные.Свойство("Цена") Тогда
				ПредставлениеЦены = ?(ТекущиеДанные.Цена > 0, "• " + Строка(ТекущиеДанные.Цена) + " " + Строка(ВалютаПодбора), "• " + "0,00" + " " + Строка(ВалютаПодбора));
			КонецЕсли;
			
			ТекстПредставления = СтрШаблон(НСтр("ru='Сопутствующие товары: %1 %2 %3'"), СтрокаСписокТоваровРодителей, ПредставлениеКоличества, ПредставлениеЦены);
		Иначе
			ТекстПредставления = СтрШаблон(НСтр("ru='Сопутствующие товары: %1 %2'"), СтрокаСписокТоваровРодителей, ?(ЗначениеЗаполнено(ХарактеристикаОтбора), Строка(ХарактеристикаОтбора), ""));
		КонецЕсли;
		
	Иначе
		Для Каждого ЭлементСписка Из СписокВладельцев Цикл
			СтрокаСписокТоваровРодителей= ?(ЗначениеЗаполнено(СтрокаСписокТоваровРодителей), СтрокаСписокТоваровРодителей+", " + Строка(ЭлементСписка.Значение), Строка(ЭлементСписка.Значение));
		КонецЦикла;
		ТекстПредставления = СтрШаблон(НСтр("ru='Сопутствующие товары: %1'"), СокрЛП(СтрокаСписокТоваровРодителей));
	КонецЕсли;
	
	Элементы.СопутствующиеТоварыПредставлениеОтбора.Заголовок = ИнформацияОбОтборе(ТекстПредставления,,,Истина);
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.ОтборКатегории.ТекущаяСтрока = 0;
		ОтборКатегорииПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ОтборИерархия.ТекущаяСтрока = 0;
		ОтборИерархияПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	УстановленОтбор = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыАналогов(Результат, ПараметрыОповещения) Экспорт
	ПодключитьОбработчикОжидания("ОбновитьДанныеПоНоменклатуреКлиент", 0.5, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДляСопутствующихТоваров(СписокВладельцев = Неопределено, ХарактеристикаОтбора = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СопутствующиеТовары.СопутствующийТовар КАК СопутствующийТовар
	|ИЗ
	|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
	|ГДЕ
	|	СопутствующиеТовары.Номенклатура В(&Владелец)
	|	И СопутствующиеТовары.Характеристика = &Характеристика";
	
	Если СписокВладельцев = Неопределено Тогда
		
		СписокВладельцев = Новый СписокЗначений;
		СписокВладельцев.Добавить(ЗначениеДляОтбораСопутствующийТоваров);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХарактеристикаОтбора) Тогда
		Запрос.УстановитьПараметр("Характеристика", ХарактеристикаОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СопутствующиеТовары.Характеристика = &Характеристика", "");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Владелец", СписокВладельцев);
	
	СписокЗнч = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЗнч.Добавить(Выборка.СопутствующийТовар);
	КонецЦикла;
	
	ПереопределитьТекстЗапросаВСписках();
	УстановитьЗначениеОтбораДинамическогоСписка("Ссылка", СписокЗнч);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеОтбораДинамическогоСписка(ИмяПоляОтбора, ЗначениеОтбора = Неопределено, Использование = Истина)
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	НайденныйЭлемент = ПолеОтбора(СписокЗапасы.Отбор,ИмяПоляОтбора);
	
	Если Использование = Ложь Тогда
		УстановитьОтборПоТипуНоменклатуры();
	КонецЕсли;
	
	Если Использование И НайденныйЭлемент = Неопределено Тогда
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
		
		НовыйОтбор = СписокЗапасы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ЛевоеЗначение = ПолеОтбора;
		НовыйОтбор.ПравоеЗначение = ЗначениеОтбора;;
		НовыйОтбор.ВидСравнения = ВидСравненияОтбора;
		
		Возврат;
		
	КонецЕсли;
	
	НовыйОтбор = НайденныйЭлемент;

	Если НовыйОтбор = Неопределено Тогда Возврат КонецЕсли;
	
	НовыйОтбор.Использование = Использование;
	
	Если Не Использование Тогда Возврат КонецЕсли;
	
	НовыйОтбор.ПравоеЗначение = ЗначениеОтбора;
	НовыйОтбор.ВидСравнения = ВидСравненияОтбора;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолеОтбора(ГруппаЭлементовОтбора, ПутьКДаннымПоля)
	
	Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
	Для каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение=Поле Тогда
			Возврат	ЭлементОтбора;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ИнформацияОбОтборе(ТекстПредставления, ЭтоАналоги = Ложь, ЕстьВКорзине = Ложь, ЭтоСопутствующийТовар = Ложь) 
	
	Цвет = WebЦвета.ТусклоСерый;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(ТекстПредставления, , Цвет));

	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ЗакрытьОтборДинамическогоСписка, , , , ?(ЭтоАналоги, "Аналоги", "Остатки")));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФильтров()
	
	ТекстЗаголовкаФильтры = "";
	
	ТекстОтборОстатки = "";
	Если Не ПоказыватьОстатки Тогда
		ТекстОтборОстатки = "";
	ИначеЕсли ОтборОстатки = 1 И Не ЗначениеЗаполнено(ОтборСклад) И Не ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстОтборОстатки = НСтр("ru = 'в наличии'");
	ИначеЕсли ОтборОстатки = 2 Тогда
		ТекстОтборОстатки = НСтр("ru = 'отсутствуют'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОтборОстатки) Тогда
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ТекстОтборОстатки, ТекстОтборОстатки);
	КонецЕсли;
	
	ТекстОрганизация = "";
	
	Если ПоказыватьОстатки И ОтборОстатки = 1 И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		НаименованиеОрганизации = ОтборОрганизация.Наименование;
		ТекстОрганизация = СтрШаблон(НСтр("ru='%1'"), НаименованиеОрганизации);
		ТекстОрганизация = ?(СтрДлина(ТекстОрганизация) > 20, Лев(ТекстОрганизация, 20) + "..", ТекстОрганизация);
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ТекстОрганизация, ТекстОрганизация);
	КонецЕсли;
	
	ТекстСклад = "";
	
	Если ПоказыватьОстатки И ОтборОстатки = 1 И ЗначениеЗаполнено(ОтборСклад) Тогда
		НаименованиеСклада = ОтборСклад.Наименование;
		ТекстСклад = СтрШаблон(НСтр("ru='%1'"), НаименованиеСклада);
		ТекстСклад = ?(СтрДлина(ТекстСклад) > 20, Лев(ТекстСклад, 20) + "..", ТекстСклад);
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ТекстСклад, ТекстСклад);
	КонецЕсли;
	
	ТекстОтборЦены = "";
	
	Если Не ЦенаОт = 0 Или Не ЦенаДо = 0 Тогда
		
		ТексЦеныОт = ?(ЗначениеЗаполнено(ЦенаОт), Строка(Цел(ЦенаОт)), "");
		ТекстЦеныДо = ?(ЗначениеЗаполнено(ЦенаДо), Строка(Цел(ЦенаДо)), "");
		
		Если Не ЗначениеЗаполнено(ТексЦеныОт) Тогда
			ТекстОтборЦены = НСтр("ru='До '") + ТекстЦеныДо;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстЦеныДо) Тогда
			ТекстОтборЦены = НСтр("ru='От '") + ТексЦеныОт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЦеныДо) И ЗначениеЗаполнено(ТексЦеныОт) Тогда
			ТекстОтборЦены = ТексЦеныОт + " - " + ТекстЦеныДо;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОтборЦены) Тогда
		ТекстОтборЦены = ?(СтрДлина(ТекстОтборЦены) > 25, Лев(ТекстОтборЦены, 25) + "..", ТекстОтборЦены);
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ТекстОтборЦены, ТекстОтборЦены);
	КонецЕсли;
	
	ТекстТипы = "";
	ВыбраноБолееОдногоТипа = Ложь;
	
	Если ОтборТипЗапас Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Запас'"), НСтр("ru = 'Запас'"));
	КонецЕсли;
	
	Если ОтборТипУслуга И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборТипУслуга Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Услуга'"),НСтр("ru = 'Услуга'"));
	КонецЕсли;
	
	Если ОтборТипОперация И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборТипОперация Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Операция'"), НСтр("ru = 'Операция'"));
	КонецЕсли;
	
	Если ОтборТипВидРабот И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборТипВидРабот Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Вид работ'"), НСтр("ru = 'Вид работ'"));
	КонецЕсли;
	
	Если ОтборТипРабота И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборТипРабота Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Работа'"), НСтр("ru = 'Работа'"));
	КонецЕсли;
	
	Если ОтборТипПодарочныйСертификат И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборТипПодарочныйСертификат И ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Сертификат'"), НСтр("ru = 'Сертификат'"));
	КонецЕсли;
	
	Если ОтборНабор И ЗначениеЗаполнено(ТекстТипы) Тогда
		ВыбраноБолееОдногоТипа = Истина;
	ИначеЕсли ОтборНабор Тогда
		ТекстТипы = ТекстТипы + ?(ЗначениеЗаполнено(ТекстТипы), НСтр("ru = ', Набор / комплект'"), НСтр("ru = 'Набор / комплект'"));
	КонецЕсли;
	
	ТекстТипы = ?(ЗначениеЗаполнено(ТекстТипы) И ВыбраноБолееОдногоТипа, ТекстТипы + "...", ТекстТипы);
	
	Если ЗначениеЗаполнено(ТекстТипы) Тогда
		ТекстЗаголовкаФильтры = ?(ЗначениеЗаполнено(ТекстЗаголовкаФильтры), ТекстЗаголовкаФильтры + " • " + ТекстТипы, ТекстТипы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПредставлениеОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОстаткиОтменаОтбора();
	
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьОперацииОтменыРежимаОстаткиНаСервере()
	УстановитьСтраницуСпискаНоменклатуры(ПредыдущаяСтраницаСписка, Ложь);
	ПереформироватьЗапросыСписков();
	УстановитьЗначениеОтбораДинамическогоСписка("Ссылка", Неопределено, Ложь);
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПараметровДинамическихСписковКлиент()
	
	Если ТекущаяСтраницаНоменклатуры = "СписокЗапасы" Тогда
		СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("Корзина", МассивНоменклатурыИзКорзиныКлиент());
		СписокЗапасы.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПрямыеАналоги", ПрямыеАналоги);
		
		Если ОстаткиВидимость Тогда
			ОбновитьКартинкуКорзинаРасшифровкаОстатков();
		КонецЕсли;
		
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
		ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоРеквизитамНоменклатуры(Номенклатура)
	
	РеквизитыНоменклатуры.Очистить();
	
	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Категория: '");
	НоваяСтрока.ЗначениеРеквизита = Строка(Номенклатура.КатегорияНоменклатуры);
	НоваяСтрока.ИмяРеквизитаОбъекта = "КатегорияНоменклатуры";
	
	
	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(Номенклатура.Родитель), НСтр("ru='<не заполнено>'"), Строка(Номенклатура.Родитель));
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='В группе: '");
	НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	НоваяСтрока.ИмяРеквизитаОбъекта = "Родитель";
	
	НоваяСтрока = РеквизитыНоменклатуры.Добавить();
	
	ЗначениеРеквизита = ?(Не ЗначениеЗаполнено(Номенклатура.Комментарий), НСтр("ru='<не заполнено>'"), Номенклатура.Комментарий);
	
	НоваяСтрока.ПредставлениеРеквизита = НСтр("ru='Описание: '");
	НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	НоваяСтрока.ИмяРеквизитаОбъекта = "Комментарий";
	
	ДополнительныеРеквизиты = ТаблицаДополнительныхРеквизитов(Номенклатура);
	
	Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
		НоваяСтрока = РеквизитыНоменклатуры.Добавить();
		НоваяСтрока.ПредставлениеРеквизита = ДопРеквизит.Наименование + ":";
		НоваяСтрока.ИмяРеквизитаОбъекта = ДопРеквизит.Наименование;
		НоваяСтрока.ДопРеквизит = Истина;
		
		Если ТипЗнч(ДопРеквизит.Значение) = Тип("Булево") Тогда
			ЗначениеРеквизита = ?(ДопРеквизит.Значение, НСтр("ru='да'"), НСтр("ru='нет'"));
		ИначеЕсли Не ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда
			ЗначениеРеквизита = НСтр("ru='<не заполнено>'")
		Иначе
			ЗначениеРеквизита = ДопРеквизит.Значение;
		КонецЕсли;
		
		НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаДополнительныхРеквизитов(ОписаниеОбъекта)
	
	КлючНазначения = Неопределено;
	НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
	ОписаниеОбъекта, КлючНазначения);
	
	Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
	
	ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить()
	, Свойства_НаборыДополнительныхРеквизитовОбъекта, Ложь);
	
	Возврат ОписаниеСвойств;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПоНоменклатуреСервер(Номенклатура, Характеристика = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	// Изображения
	Если ПоказыватьКартинку И Не ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьИзображение(Номенклатура);
	КонецЕсли;
	
	// Сопутствующие товары
	Если ПоказыватьСопутствующиеТовары Тогда
		
		ТекстЗаголовка = "";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Количество,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопутствующиеТовары.СопутствующийТовар) КАК КоличествоПозиций,
		|	МАКСИМУМ(СопутствующиеТовары.СопутствующийТовар.ЕдиницаИзмерения.Наименование) КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.СопутствующиеТовары КАК СопутствующиеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО СопутствующиеТовары.СопутствующийТовар = ОстаткиТоваров.Номенклатура
		|ГДЕ
		|	СопутствующиеТовары.Номенклатура = &Номенклатура";
		
		Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
			Характеристика = ?(Не ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика);
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СопутствующиеТовары.Номенклатура = &Номенклатура", "СопутствующиеТовары.Номенклатура = &Номенклатура
			|	И СопутствующиеТовары.Характеристика = &Характеристика");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.КоличествоПозиций = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'Нет сопутствующих товаров'");
			Иначе
				
				ТекстСопТовар = ПредметИсчисления(
				Выборка.КоличествоПозиций,
				НСтр("ru = 'сопутствующий товар'"),
				НСтр("ru = 'сопутствующих товара'"),
				НСтр("ru = 'сопутствующих товаров'"),
				"м");
				
				ТекстЗаголовка = НСтр("ru = '%1% / %2%'");
				
				ТекстКоличество = ?(Не ЗначениеЗаполнено(Выборка.Количество), "0", Строка(Выборка.Количество));
				
				ТекстСопТовар = Строка(Выборка.КоличествоПозиций) + ТекстСопТовар;
				
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", ТекстКоличество  + ?(Выборка.КоличествоПозиций = 1, " " + Выборка.ЕдиницаИзмерения, НСтр("ru = ' ед.'")));
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", ТекстСопТовар);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НадписьСопутствующийТовар = ТекстЗаголовка;
		
	КонецЕсли;
	
	Если НЕ ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		
		// Аналоги
		Если ПоказыватьАналоги Тогда
			
			Если Номенклатура.ЭтоНабор Тогда 
				НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги недоступны для наборов'");
			Иначе
				ТекстЗаголовка = "";
				
				Если Не Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					НадписьАналогиНоменклатуры = НСтр("ru = 'Аналоги доступны только для запасов'");
				Иначе
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
					
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	АналогиНоменклатуры.Аналог КАК Аналог,
					|	АналогиНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
					|ПОМЕСТИТЬ ВТОбщая
					|ИЗ
					|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
					|ГДЕ
					|	АналогиНоменклатуры.Номенклатура = &Номенклатура
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	АналогиНоменклатуры.Номенклатура,
					|	АналогиНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование
					|ИЗ
					|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
					|ГДЕ
					|	АналогиНоменклатуры.Аналог = &Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МАКСИМУМ(ВТОбщая.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
					|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Количество,
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТОбщая.Аналог) КАК КоличествоПозиций
					|ПОМЕСТИТЬ Итог
					|ИЗ
					|	ВТОбщая КАК ВТОбщая
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
					|		ПО ВТОбщая.Аналог = ОстаткиТоваров.Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МАКСИМУМ(Итог.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
					|	СУММА(Итог.Количество) КАК Количество,
					|	СУММА(Итог.КоличествоПозиций) КАК КоличествоПозиций
					|ИЗ
					|	Итог КАК Итог";
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						Если Выборка.КоличествоПозиций = 0 Тогда
							
							ТекстЗаголовка = НСтр("ru = 'Нет аналогов'");
							
						Иначе
							
							ТекстАналоги = ПредметИсчисления(
							Выборка.КоличествоПозиций,
							НСтр("ru = 'aналог'"),
							НСтр("ru = 'аналога'"),
							НСтр("ru = 'аналогов'"),
							"м");
							
							ТекстЗаголовка = НСтр("ru = '%1% / %2%'");
							
							ТекстКоличество = ?(Не ЗначениеЗаполнено(Выборка.Количество), "0", Строка(Выборка.Количество));
							
							ТекстАналоги = Строка(Выборка.КоличествоПозиций) + ТекстАналоги;
							
							ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", ТекстКоличество + ?(Выборка.КоличествоПозиций = 1, " " + Выборка.ЕдиницаИзмерения, НСтр("ru = ' ед.'")));
							ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", ТекстАналоги); 
							
						КонецЕсли;
						
					КонецЕсли;
					
					НадписьАналогиНоменклатуры = ТекстЗаголовка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Цена
		Если ПоказыватьЦены И ЦенаВСписке = 1 И ЗначениеЗаполнено(ОтборВидЦен) Тогда
			
			ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборВидЦен, "ВалютаЦены", Истина);
			Если ВалютаЦены<>ВалютаПодбора Тогда
				ПересчитатьЦеныСуммыКорзиныВВалюту(ВалютаЦены);
			КонецЕсли; 
			
			ВалютаПодбора = ВалютаЦены;
			ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаПодбора);
			СимвольноеПредставление = ?(ЗначениеЗаполнено(ВалютаПредставление), " " + ВалютаПредставление, "");
			
			ТекстЗаголовка = "";
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("ВидЦен", ОтборВидЦен);
			Запрос.УстановитьПараметр("ВидМинимальныхЦен", ВидМинимальныхЦен);
			Запрос.УстановитьПараметр("ПоказыватьМинимальныеЦены", ПоказыватьМинимальныеЦены);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
			|				И &ПоказыватьМинимальныеЦены
			|			ТОГДА ВЫБОР
			|					КОГДА ЦеныНоменклатурыСрезПоследних.Цена < ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
			|						ТОГДА ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
			|					ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
			|				КОНЕЦ
			|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ВидЦен = &ВидЦен
			|				И Номенклатура = &Номенклатура
			|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				ВидЦен = &ВидМинимальныхЦен
			|					И Номенклатура = &Номенклатура
			|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК МинимальныеЦеныНоменклатурыСрезПоследних
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТекстЗаголовка = НСтр("ru = '%1%: %2% %3%'");
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", Строка(ОтборВидЦен));
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2%", Строка(Выборка.Цена));
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%3%", СимвольноеПредставление);
			Иначе
				ТекстЗаголовка = НСтр("ru = '%1%: <отсутствует>'");
				ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1%", Строка(ОтборВидЦен));
			КонецЕсли;
			НадписьЦена = ТекстЗаголовка;
		КонецЕсли;
		
		// Панель остатков
		ОбновитьПанельОстатков(Номенклатура, ЕдиницаИзмерения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельОстатков(Номенклатура, ЕдиницаИзмерения)
	
	Если Не ОстаткиВидимость Тогда
		Возврат
	КонецЕсли;
	
	РасшифровкаОстатков.Очистить();
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") 
		И ЗначениеЗаполнено(ЕдиницаИзмерения) И ЕдиницаИзмерения.Коэффициент > 0 Тогда
		КоэффициентОстатков = ЕдиницаИзмерения.Коэффициент;
	Иначе
		КоэффициентОстатков = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаВТабличнойЧасти", СтруктурнаяЕдиницаВТабличнойЧасти);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаДокумент", СтруктурнаяЕдиницаДокумент);
	Запрос.УстановитьПараметр("ОтборСклад", ОтборСклад);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаПолучатель", СтруктурнаяЕдиницаПолучатель);
	Запрос.УстановитьПараметр("Коэффициент", КоэффициентОстатков);
	
	ЕстьПолучатель = ЗначениеЗаполнено(СтруктурнаяЕдиницаПолучатель);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.Количество / &Коэффициент КАК ЧИСЛО(15, 2))) КАК СвободныйОстаток,
	|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.Резерв / &Коэффициент КАК ЧИСЛО(15, 2))) КАК ВРезерве,
	|	СУММА((ВЫРАЗИТЬ(ОстаткиТоваров.Количество / &Коэффициент КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ(ОстаткиТоваров.Резерв / &Коэффициент КАК ЧИСЛО(15, 2)))) КАК ОстатокОбщий,
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваров.СтруктурнаяЕдиница = &ОтборСклад
	|			ТОГДА 0
	|		КОГДА НЕ &СтруктурнаяЕдиницаВТабличнойЧасти
	|				И ОстаткиТоваров.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаДокумент
	|			ТОГДА 1
	|		КОГДА НЕ &СтруктурнаяЕдиницаПолучатель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ОстаткиТоваров.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаПолучатель
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокСортировки,
	|	ВЫБОР
	|		КОГДА НЕ &СтруктурнаяЕдиницаПолучатель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ОстаткиТоваров.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаПолучатель
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Получатель,
	|	ВЫБОР
	|		КОГДА НЕ &СтруктурнаяЕдиницаДокумент = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ОстаткиТоваров.СтруктурнаяЕдиница = &СтруктурнаяЕдиницаДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отправитель,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиТоваров.СтруктурнаяЕдиница) КАК ПредставлениеСтруктурнойЕдиницы
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Номенклатура
	|	И (&ВсеОрганизации
	|			ИЛИ ОстаткиТоваров.Организация В (&Организация))
	|	И (ОстаткиТоваров.Количество > 0
	|			ИЛИ ОстаткиТоваров.Резерв > 0)
	|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки,
	|	СвободныйОстаток УБЫВ,
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("ВсеОрганизации", НЕ ЗначениеЗаполнено(ОтборОрганизация));
	Запрос.УстановитьПараметр("Организация", ОрганизацииПередачи(ОтборОрганизация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ЕстьПолучатель Тогда
		
		ШаблонПредставленияПолучатель = НСтр("ru = '%1 (получатель)'");
		ШаблонПредставленияОтправитель = НСтр("ru = '%1 (отправитель)'");
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = РасшифровкаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Ссылка = Выборка.Номенклатура;
			
			Если Выборка.Отправитель Тогда
				НоваяСтрока.ПредставлениеСтруктурнойЕдиницы = СтрШаблон(ШаблонПредставленияОтправитель, Выборка.ПредставлениеСтруктурнойЕдиницы);
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Получатель Тогда
				НоваяСтрока.ПредставлениеСтруктурнойЕдиницы = СтрШаблон(ШаблонПредставленияПолучатель, Выборка.ПредставлениеСтруктурнойЕдиницы);
				НоваяСтрока.КартинкаКорзина = -1;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.КартинкаКорзина = -1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ВыборСкладаНедоступен = Не Элементы.КорзинаРасшифровкаСтруктурнаяЕдиница.Видимость;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасшифровкаОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ВыборСкладаНедоступен И Не Выборка.Отправитель Тогда
			НоваяСтрока.КартинкаКорзина = -1;
		КонецЕсли;
		
		НоваяСтрока.Ссылка = Выборка.Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацииПередачи(Организация)
	
	// Проверка типа документа
	ПоддерживаемыеТипы = Новый Массив;
	ПоддерживаемыеТипы.Добавить(Метаданные.Документы.ЗаказПокупателя.Имя);
	ПоддерживаемыеТипы.Добавить(Метаданные.Документы.РасходнаяНакладная.Имя);
	ПоддерживаемыеТипы.Добавить(Метаданные.Документы.ЧекККМ.Имя);
	ПоддерживаемыеТипы.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.Имя);
	ОткрытИзДокумента = "";
	Если ЭтоПодбор И НЕ ПустаяСтрока(ИмяФормыВладельца) Тогда
		Составляющие = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормыВладельца, ".");
		Если Составляющие.Количество() > 1 Тогда
			ОткрытИзДокумента = Составляющие[1];
		КонецЕсли; 
	ИначеЕсли НЕ ЭтоПодбор И Не ПустаяСтрока(ТипВладельца) Тогда 
		ОткрытИзДокумента = ТипВладельца;
	КонецЕсли;
	Если Не ПустаяСтрока(ОткрытИзДокумента) И ПоддерживаемыеТипы.Найти(ОткрытИзДокумента) = Неопределено Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ПередачаТоваровМеждуОрганизациями Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Иначе
		Возврат РегистрыСведений.НастройкаПередачиТоваровМеждуОрганизациями.ПолучитьСписокОрганизацийДляОстатков(Организация);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Лев(Элемент.Имя, 7) = "МеткаПП" Тогда
		МеткаИД = Сред(Элемент.Имя, СтрДлина("МеткаПП_")+1);
		ИмяТЧДанныхМеток = "ДанныеМетокПП";
	ИначеЕсли Лев(Элемент.Имя, 8) = "МеткаККМ" Тогда
		МеткаИД = Сред(Элемент.Имя, СтрДлина("МеткаККМ_")+1);
		ИмяТЧДанныхМеток = "ДанныеМетокККМ";
	Иначе
		МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
		ИмяТЧДанныхМеток = "ДанныеМеток";
	КонецЕсли;

	УдалитьМеткуОтбора(МеткаИД, ИмяТЧДанныхМеток);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ИмяТЧДанныхМеток = "ДанныеМеток")
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], МеткаИД,, ИмяТЧДанныхМеток, НЕ ИмяТЧДанныхМеток = "ДанныеМетокККМ");

	Если ИмяТЧДанныхМеток = "ДанныеМетокПП" Или ИмяТЧДанныхМеток = "ДанныеМетокККМ" Тогда
		СписокОтбораХарактеристики.Очистить();
		ОтобратьХарактеристикиВСоответствииЗначениюСвойств(Неопределено);
		УстановитьПараметрыЗапросовСписков();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткиОтбора(Метки)
	
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], Метки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыМеток()
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученШтрихкод(ДанныеШтрихкода) Экспорт
	
	МассивШтрихКодов = Новый Массив;
	МассивШтрихКодов.Добавить(ДанныеШтрихкода);
	
	ДанныеПоШтрихКодам = ПолучитьДанныеПоШтрихкодамВМассиве(МассивШтрихКодов);
	
	МассивДанных = ДанныеПоШтрихкодам.Получить(ДанныеШтрихкода.Штрихкод);
	
	Штрихкод = ДанныеШтрихкода.Штрихкод;
	
	Если Не МассивДанных = Неопределено И МассивДанных.Количество() Тогда
		
		Если МассивДанных.Количество() > 1 Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", МассивДанных, ДанныеШтрихкода);
			ОткрытьФорму("Справочник.Номенклатура.Форма.ДублиНоменклатурыПоШтрихКоду", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
		Номенклатура = МассивДанных[0].Номенклатура;
		
		Элементы["СписокЗапасы"].ТекущаяСтрока = Номенклатура;
		
		Если НЕ ДействиеПриПоискеПоШК = 1 Тогда
			
			Если Не НастройкиИзДокумента И ДействиеПриПоискеПоШК = 2 Тогда
				ДобавитьВКорзинуСписок(Истина)
			ИначеЕсли НастройкиИзДокумента И ДействиеПриПоискеПоШК = 2 Тогда
				
				Если Элементы.СписокЗапасы.РежимВыбора И ЗначениеЗаполнено(ТипВладельца) Тогда
					
					ВыбраннаяСтрока = Элементы.СписокЗапасы.ТекущиеДанные;
					
					СтруктураСохраняемыхНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
					
					ПустойСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
					ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
					ПустаяПартия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
					
					СтруктураПараметров= Новый Структура("Номенклатура, СтруктураНастроек, Склад, Характеристика, Партия"
					, Номенклатура, СтруктураСохраняемыхНастроек, ПустойСклад, ПустаяХарактеристика, ПустаяПартия);
					
					ОповеститьОВыборе(СтруктураПараметров);
					
				Иначе
					ДобавитьВКорзинуСписок(Истина);
				КонецЕсли;
				
			ИначеЕсли ДействиеПриПоискеПоШК = 0 Тогда
				ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",Новый Структура("Ключ",Номенклатура),ЭтотОбъект);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если РаботаСНоменклатуройКлиент.ДоступнаФункциональностьПодсистемы() Тогда
		РаботаСНоменклатуройКлиент.НайтиНоменклатуруПоШтрихкодуВСервисе(ШтрихКод);
		Возврат;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", Штрихкод);
	ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт 
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	Номенклатура = СтруктураНоменклатуры.МассивНоменклатуры[0].Номенклатура;
	
	Если НЕ Номенклатура = Неопределено Тогда
		
		Элементы["СписокЗапасы"].ТекущаяСтрока = Номенклатура;
		
		Если НЕ ДействиеПриПоискеПоШК = 1 Тогда
			
			Если Не НастройкиИзДокумента И ДействиеПриПоискеПоШК = 2 Тогда
				ДобавитьВКорзинуСписок(Истина)
			ИначеЕсли НастройкиИзДокумента И ДействиеПриПоискеПоШК = 2 Тогда
				
				Если Элементы.СписокЗапасы.РежимВыбора И ЗначениеЗаполнено(ТипВладельца) Тогда
					
					ВыбраннаяСтрока = Элементы.СписокЗапасы.ТекущиеДанные;
					
					СтруктураСохраняемыхНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
					
					ПустойСклад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
					ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
					ПустаяПартия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
					
					СтруктураПараметров= Новый Структура("Номенклатура, СтруктураНастроек, Склад, Характеристика, Партия"
					, ВыбраннаяСтрока, СтруктураСохраняемыхНастроек, ПустойСклад, ПустаяХарактеристика, ПустаяПартия);
					
					ОповеститьОВыборе(СтруктураПараметров);
					
					ЭтаФорма.Закрыть();
					
				КонецЕсли;
				
			ИначеЕсли ДействиеПриПоискеПоШК = 0 Тогда
				ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",Новый Структура("Ключ",Номенклатура),ЭтотОбъект);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды командной панели табличной части.
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);

	#Если МобильныйКлиент Тогда
	ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду", , , , , , ОбработкаЗавершения);
	#Иначе
	ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученШтрихкод(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуЗавершение()

&НаКлиенте
Процедура ОтборВидЦенОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти //ПодключаемоеОборудование

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайла");
	НастройкиЗагрузкиДанных.Вставить("ОписаниеСтрокиВыбора", Новый Структура("ПолноеИмяОбъектаМетаданных, Тип", "Номенклатура", "ПрикладнаяЗагрузка"));
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзExcel(Команда)
	
	ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ДлительнаяОперация = ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
			СтруктураПараметров = Новый Структура;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ФиксированныйШаблон") Тогда
				СтруктураПараметров = Новый Структура("ФиксированныйШаблон", РезультатЗагрузки.НастройкиЗагрузкиДанных.ФиксированныйШаблон);
			КонецЕсли;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ОповеститьОСозданииГруппы") Тогда
				СтруктураПараметров = Новый Структура("ОповеститьОСозданииГруппы", РезультатЗагрузки.НастройкиЗагрузкиДанных.ОповеститьОСозданииГруппы);
			КонецЕсли;
			Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ТекстОшибки") Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.НастройкиЗагрузкиДанных.ТекстОшибки);
			КонецЕсли;
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, СтруктураПараметров);
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузки = Неопределено Тогда
		
		Элементы["СписокЗапасы"].Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

&НаСервереБезКонтекста
Процедура СписокЗапасыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если НЕ Настройки.ДополнительныеСвойства.ТекущаяСтраницаНоменклатуры = "СписокЗапасы" Тогда
		Возврат;
	КонецЕсли;
	
	ПоказыватьЦены = Настройки.ДополнительныеСвойства.ПоказыватьЦены;
	ПоказыватьОстатки = Настройки.ДополнительныеСвойства.ПоказыватьОстатки;
	ПрямыеАналоги = Настройки.ДополнительныеСвойства.ПрямыеАналоги;
	РаботаСЗакупками = Настройки.ДополнительныеСвойства.РаботаСЗакупками;
	ПоказыватьМинимальныеЦены = Настройки.ДополнительныеСвойства.ПоказыватьМинимальныеЦены;
	ВидМинимальныхЦен = Настройки.ДополнительныеСвойства.ВидМинимальныхЦен;
	
	ОтборПоКоличеству = Настройки.ДополнительныеСвойства.ОтборПоКоличеству;
	ОтборПоЦенам = Настройки.ДополнительныеСвойства.ОтборПоЦенам;
	ВидЦен = Неопределено;
	СоответствиеСтавокНДС = Настройки.ДополнительныеСвойства.СоответствиеСтавокНДС;
	
	ДатаСреза = ?(Настройки.ДополнительныеСвойства.Свойство("ДатаСреза"), Настройки.ДополнительныеСвойства.ДатаСреза, Неопределено);
	
	Если ОтборПоЦенам И ОтборПоКоличеству Тогда
		//ничего не делать: данные получены запросом в динамическом списке
		Возврат;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	
	Корзина = Настройки.ДополнительныеСвойства.Корзина;
	
	Для Каждого КлючИЗначение Из Строки Цикл
		Ссылки.Добавить(КлючИЗначение.Ключ);
		
		// Заполняем ставки НДС
		СтрокаСписка = КлючИЗначение.Значение.Данные;
		СтрокаСписка.СтавкаНДСНоменклатуры = СоответствиеСтавокНДС.Получить(СтрокаСписка.ВидСтавкиНДС);
		
		НайденныйЭлемент = Корзина.Найти(СтрокаСписка.Ссылка);
		
		СтрокаСписка.КартинкаКорзина = ?(Не НайденныйЭлемент = Неопределено, 1, 0);
		
		СтрокаСписка.ПрямойАналог = Не ПрямыеАналоги.НайтиПоЗначению(СтрокаСписка.Ссылка) = Неопределено;
		
	КонецЦикла;
	
	Для Каждого элОтбора Из Настройки.ПараметрыДанных.Элементы Цикл
		Если Строка(элОтбора.Параметр) = "ВидЦен" Тогда
			ВидЦен = элОтбора.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказыватьЦены Тогда
		СтруктураОтображенияЦен = Новый Структура;
		СтруктураОтображенияЦен.Вставить("Строки", Строки);
		СтруктураОтображенияЦен.Вставить("Ссылки", Ссылки);
		СтруктураОтображенияЦен.Вставить("ВидЦен", ВидЦен);
		СтруктураОтображенияЦен.Вставить("ВидМинимальныхЦен", ВидМинимальныхЦен);
		СтруктураОтображенияЦен.Вставить("ПоказыватьЦены", ПоказыватьЦены); 
		СтруктураОтображенияЦен.Вставить("ДатаСреза", ДатаСреза); 
		СтруктураОтображенияЦен.Вставить("РаботаСЗакупками", РаботаСЗакупками); 
		СтруктураОтображенияЦен.Вставить("ПоказыватьМинимальныеЦены", ПоказыватьМинимальныеЦены);
		ВывестиЦены(СтруктураОтображенияЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиЦены(СтруктураОтображенияЦен)
	
	Строки 						= СтруктураОтображенияЦен.Строки;
	Ссылки 						= СтруктураОтображенияЦен.Ссылки;
	ВидЦен 						= СтруктураОтображенияЦен.ВидЦен;
	ПоказыватьЦены 				= СтруктураОтображенияЦен.ПоказыватьЦены;
	ДатаСреза 					= СтруктураОтображенияЦен.ДатаСреза;
	РаботаСЗакупками 			= СтруктураОтображенияЦен.РаботаСЗакупками;
	ПоказыватьМинимальныеЦены 	= СтруктураОтображенияЦен.ПоказыватьМинимальныеЦены;
	ВидМинимальныхЦен			= СтруктураОтображенияЦен.ВидМинимальныхЦен;
	
	Если Не ПоказыватьЦены Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСЗакупками Тогда
		Если ПоказыватьМинимальныеЦены Тогда
			
			Запрос = Новый Запрос
			("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			 |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			 |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК Коэффициент,
			 |	ВЫБОР
			 |		КОГДА ЦеныНоменклатурыСрезПоследних.Цена < ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)
			 |			ТОГДА ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1)
			 |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
			 |	КОНЕЦ КАК Цена
			 |ИЗ
			 |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			 |			&ДатаСреза,
			 |			ВидЦен = &ВидЦен
			 |				И Номенклатура В (&Ссылки)
			 |				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
			 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			 |				&ДатаСреза,
			 |				ВидЦен = &ВидМинимальныхЦен
			 |					И Номенклатура В (&Ссылки)
			 |					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК МинимальныеЦеныНоменклатурыСрезПоследних
			 |		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
			 |			И ЦеныНоменклатурыСрезПоследних.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика,
			 |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = ВЫРАЗИТЬ(&ВидМинимальныхЦен КАК Справочник.ВидыЦен).ВалютаЦены) КАК КурсыВалютСрезПоследних");
		Иначе
			
			Запрос = Новый Запрос
			("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			 |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			 |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК Коэффициент,
			 |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			 |ИЗ
			 |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			 |			&ДатаСреза,
			 |			ВидЦен = &ВидЦен
			 |				И Номенклатура В (&Ссылки)
			 |				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних");
			
		КонецЕсли;		
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК Коэффициент,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаСреза
		|			,
		|			ВидЦенКонтрагента = &ВидЦен
		|				И Номенклатура В (&Ссылки)
		|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	Запрос.УстановитьПараметр("ВидМинимальныхЦен", ВидМинимальныхЦен);
	
	Если ЗначениеЗаполнено(ДатаСреза) Тогда
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаСреза", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = Строки.Получить(Выборка.Номенклатура);
		
		Если СтрокаСписка = Неопределено Тогда 
			Продолжить
		КонецЕсли;
		
		ДанныеСтрокиСписка = СтрокаСписка.Данные;
		
		ДанныеСтрокиСписка.Цена = Выборка.Цена;
		ДанныеСтрокиСписка.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ДанныеСтрокиСписка.КоличествоОстаток = Окр(ДанныеСтрокиСписка.КоличествоОстаток/Выборка.Коэффициент, 3, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой


//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуРаботаСНоменклатурой(Команда)
	
	РаботаСНоменклатуройКлиент.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыборРаботаСНоменклатурой(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыборВТаблицеФормы(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

// СтандартныеПодсистемы.ПодключаемыеКоманды


//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ИмяСписка = ТекущаяСтраницаНоменклатуры;
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы[ИмяСписка]);
	
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	ИмяСписка = ТекущаяСтраницаНоменклатуры;
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы[ИмяСписка], Результат);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокЗапасы);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядокГруппыНоменклатуры(Шаг)
	
	ДанныеТекущейСтроки = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ГруппаНоменклатурыСсылка = ДанныеТекущейСтроки.Значение;
	Если ЗначениеЗаполнено(ГруппаНоменклатурыСсылка) Тогда
		
		ИзменитьПорядокГруппыНоменклатурыНаСервере(ГруппаНоменклатурыСсылка, Шаг);
		ЗаполнитьДеревоИерархии(ГруппаНоменклатурыСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядокКатегорийНоменклатуры(Шаг)
	
	ДанныеТекущейСтроки = Элементы.ОтборКатегории.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеТекущейСтроки.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменитьПорядокКатегорииНоменклатурыНаСервере(ДанныеТекущейСтроки.Значение, Шаг) = Истина Тогда
		ЗаполнитьДеревоКатегорий(ДанныеТекущейСтроки.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПорядокГруппыНоменклатурыНаСервере(ГруппаНоменклатурыСсылка, Шаг)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаНоменклатуры",			ГруппаНоменклатурыСсылка);
	Запрос.УстановитьПараметр("РодительГруппыНоменклатуры",	ГруппаНоменклатурыСсылка.Родитель);
	Запрос.УстановитьПараметр("РеквизитДопУпорядочивания",		ГруппаНоменклатурыСсылка.РеквизитДопУпорядочиванияУНФ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &ГруппаНоменклатуры
	|	И Номенклатура.ЭтоГруппа
	|	И Номенклатура.Родитель = &РодительГруппыНоменклатуры
	|	И Номенклатура.РеквизитДопУпорядочиванияУНФ <= &РеквизитДопУпорядочивания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.РеквизитДопУпорядочиванияУНФ УБЫВ";
	
	// Вверх	Шаг	-1
	// Вниз		Шаг	+1
	
	Если Шаг > 0 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"<=",	">=");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"УБЫВ",	"Возр");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ГруппаНоменклатурыСмещения = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаНоменклатурыИсходная = ГруппаНоменклатурыСсылка.ПолучитьОбъект();
		
		КэшРеквизита = ГруппаНоменклатурыСмещения.РеквизитДопУпорядочиванияУНФ;
		
		Если КэшРеквизита = ГруппаНоменклатурыИсходная.РеквизитДопУпорядочиванияУНФ Тогда
			КэшРеквизита = КэшРеквизита + Шаг;
		КонецЕсли;
		
		ГруппаНоменклатурыСмещения.РеквизитДопУпорядочиванияУНФ = ГруппаНоменклатурыИсходная.РеквизитДопУпорядочиванияУНФ;
		ГруппаНоменклатурыИсходная.РеквизитДопУпорядочиванияУНФ = КэшРеквизита;
		
		ГруппаНоменклатурыИсходная.Записать();
		ГруппаНоменклатурыСмещения.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ИзменитьПорядокКатегорииНоменклатурыНаСервере(КатегорияНоменклатуры, Шаг)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорияНоменклатуры",			КатегорияНоменклатуры);
	Запрос.УстановитьПараметр("ЭтоГруппа", 						КатегорияНоменклатуры.ЭтоГруппа);
	Запрос.УстановитьПараметр("РодительКатегорииНоменклатуры",	КатегорияНоменклатуры.Родитель);
	Запрос.УстановитьПараметр("РеквизитДопУпорядочивания",		КатегорияНоменклатуры.РеквизитДопУпорядочивания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КатегорииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Ссылка <> &КатегорияНоменклатуры
	|	И КатегорииНоменклатуры.ЭтоГруппа = &ЭтоГруппа
	|	И КатегорииНоменклатуры.Родитель = &РодительКатегорииНоменклатуры
	|	И КатегорииНоменклатуры.РеквизитДопУпорядочивания <= &РеквизитДопУпорядочивания
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииНоменклатуры.РеквизитДопУпорядочивания УБЫВ";
	
	// Вверх	Шаг	-1
	// Вниз		Шаг	+1
	
	Если Шаг > 0 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"<=",	">=");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"УБЫВ",	"Возр");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		КатегорияНоменклатурыСмещения = Выборка.Ссылка.ПолучитьОбъект();
		КатегорияНоменклатураИсходная = КатегорияНоменклатуры.ПолучитьОбъект();
		
		КэшРеквизита = КатегорияНоменклатурыСмещения.РеквизитДопУпорядочивания;
		КатегорияНоменклатурыСмещения.РеквизитДопУпорядочивания = КатегорияНоменклатураИсходная.РеквизитДопУпорядочивания;
		КатегорияНоменклатураИсходная.РеквизитДопУпорядочивания = КэшРеквизита;
		
		КатегорияНоменклатураИсходная.Записать();
		КатегорияНоменклатурыСмещения.Записать();
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьВидыСтавокНДСНаСервере()
	Справочники.Номенклатура.ЗаполнитьВидыСтавокНДС();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидыСтавокНДС(Команда)
	ОбновитьВидыСтавокНДСНаСервере();
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	ПараметрыВызоваСервера.Вставить("ДеревоИерархии", 
		ДанныеФормыВЗначение(РезультатЗагрузки.ДеревоИерархии, Тип("ДеревоЗначений")));
		
	Если РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("СоответствиеКартинок")
		И РезультатЗагрузки.НастройкиЗагрузкиДанных.СоответствиеКартинок.Количество() > 0 Тогда
		СоответствиеКартинок = Новый Соответствие;
		Для каждого ЭлементСоответствия Из РезультатЗагрузки.НастройкиЗагрузкиДанных.СоответствиеКартинок Цикл
		    СоответствиеКартинок.Вставить(ЭлементСоответствия.Ключ, 
				ПолучитьИзВременногоХранилища(ЭлементСоответствия.Значение));
		КонецЦикла;
		ПараметрыВызоваСервера.Вставить("СоответствиеКартинок", СоответствиеКартинок);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСИзображениями

&НаСервере
Процедура ОбновитьИзображение(Номенклатура)
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Номенклатура, Файлы);
	ОснованияКартинка = Номенклатура.ФайлКартинки;
	
	Для каждого Файл Из Файлы Цикл
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		
		Если НЕ ОтображатьФайлНаФорме(Номенклатура, Файл) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОснованияКартинка) И Не Файл = ОснованияКартинка Тогда
			Продолжить
		ИначеЕсли ЗначениеЗаполнено(ОснованияКартинка) И Файл = ОснованияКартинка Тогда
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = Файл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
			Прервать
		Иначе
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = Файл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Изображения.Количество() Тогда
		АдресКартинки = Изображения[Изображения.Количество() - 1].Адрес
	КонецЕсли;
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Файл = Изображения[0].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаСервере
Функция ОтображатьФайлНаФорме(Номенклатура, ПрисоединенныйФайл, ПроверятьПометкуУдаления = Истина)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла,ПометкаУдаления,Расширение");
	
	Если ПроверятьПометкуУдаления И СвойстваФайла.ПометкаУдаления
		ИЛИ СвойстваФайла.ВладелецФайла <> Номенклатура
		ИЛИ ДопустимыеРасширения.Найти(СвойстваФайла.Расширение) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если Изображения.Количество() Тогда Возврат КонецЕсли;
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОбъектСсылка = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
		
		РаботаСФайламиКлиент.ДобавитьФайлы(ОбъектСсылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревом

&НаКлиенте 
Процедура РасшифроватьОстатки()
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	
	РеквизитыНоменклатуры.Очистить();
	
	Если ТекущиеДанные=Неопределено Или Не ТекущиеДанные.Свойство("Ссылка") 
		Или Не ТекущиеДанные.КартинкаОстатки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = "";
	
	Элементы.ОстаткиПредставлениеОтбора.Видимость = Истина;
	
	СохранитьНастройкиФильтров();
	
	Если Не ПоказыватьОстатки Тогда
		ПоказыватьОстатки = Истина;
	КонецЕсли;
	
	СсылкаНаНоменклатуру = ТекущиеДанные.Ссылка;
	ТипНоменклатуры = ТекущиеДанные.ТипНоменклатуры;
	
	ТекстПредставления = СтрШаблон(НСтр("ru='Остатки: %1'"), Строка(СсылкаНаНоменклатуру));
	
	ЕстьВКорзине = ТекущиеДанные.КартинкаКорзина;
	Элементы.ОстаткиПредставлениеОтбора.Заголовок = ИнформацияОбОтборе(СокрЛП(ТекстПредставления), Ложь, ЕстьВКорзине);
	
	ПредыдущаяСтраницаСписка = ТекущаяСтраницаНоменклатуры;
	
	УстановитьСтраницуСпискаНоменклатуры("ДеревоОстатки",, СсылкаНаНоменклатуру);
	
	ЭтоУслугаРабота = ?(ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
						Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"), Истина, Ложь);
	
	ЗаполнитьДеревоОстатков(СсылкаНаНоменклатуру,,,ЭтоУслугаРабота);
	РазвернутьВеткуДерева(ДеревоОстатки);
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиница, Ячейка",);
	ОбновитьДанныеДереваБезПерезаполнения(ДеревоОстатки.ПолучитьЭлементы(), СтруктураПоиска);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦеныДиапазон", "Доступность", ИспользуютсяХарактеристики);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АналогиПредставлениеОтбора", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СопутствующиеТоварыПредставлениеОтбора", "Видимость", Ложь);
	
	УстановитьВидимостьИДоступность();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиОстаток", "Видимость", Не ЭтоУслугаРабота);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПоступлениюКоличествоИРасшифровка", "Видимость", Не ЭтоУслугаРабота);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиРезерв", "Видимость", Не ЭтоУслугаРабота);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиОстатокПолный", "Видимость", Не ЭтоУслугаРабота);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоОстатки;
	
	УстановленОтбор = Истина;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоОстатки;
	
	Элементы.ДеревоОстатки.ТекущаяСтрока = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФильтров()
	
	НастройкиФильтровСписка.Очистить();
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ПоказыватьОстатки";
	НоваяСтрока.ЗначениеФильтра = ПоказыватьОстатки;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ОтборОстатки";
	НоваяСтрока.ЗначениеФильтра = ОтборОстатки;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ОтборОрганизация";
	НоваяСтрока.ЗначениеФильтра = ОтборОрганизация;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ОтборСклад";
	НоваяСтрока.ЗначениеФильтра = ОтборСклад;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ПоказыватьЦены";
	НоваяСтрока.ЗначениеФильтра = ПоказыватьЦены;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ОтборВидЦен";
	НоваяСтрока.ЗначениеФильтра = ОтборВидЦен;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ЦенаОт";
	НоваяСтрока.ЗначениеФильтра = ЦенаОт;
	
	НоваяСтрока = НастройкиФильтровСписка.Добавить();
	НоваяСтрока.ИмяФильтра = "ЦенаДо";
	НоваяСтрока.ЗначениеФильтра = ЦенаДо;
	
	Если Не ПоказыватьОстатки Тогда
		ПоказыватьОстатки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиФильтров()
	Для Каждого СтрокаНастроек Из НастройкиФильтровСписка Цикл
		ЭтаФорма[СтрокаНастроек.ИмяФильтра] = СтрокаНастроек.ЗначениеФильтра;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФильтровНаСервере()
	Для Каждого СтрокаНастроек Из НастройкиФильтровСписка Цикл
		ЭтаФорма[СтрокаНастроек.ИмяФильтра] = СтрокаНастроек.ЗначениеФильтра;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиДерева(ХарактеристикиНоменклатуры, ПартииНоменклатуры)
	
		Если ХарактеристикиНоменклатуры И Не ПартииНоменклатуры Тогда
		
		Если ОтборОстатки = 2 Тогда
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Характеристика'");
		Иначе
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Характеристика / Склад'") + ?(УчетПоЯчейкам, НСтр("ru=' / Ячейка'"),"");
		КонецЕсли;
		
	ИначеЕсли ХарактеристикиНоменклатуры И ПартииНоменклатуры Тогда
		
		Если ОтборОстатки = 2 Тогда
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Характеристика'");
		Иначе
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Характеристика / Партия / Склад'") + ?(УчетПоЯчейкам, НСтр("ru=' / Ячейка'"), "");
		КонецЕсли;
		
	ИначеЕсли Не ХарактеристикиНоменклатуры И ПартииНоменклатуры Тогда
		
		Если ОтборОстатки = 2 Тогда
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Партия'");
		Иначе
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Партия / Склад'") + ?(УчетПоЯчейкам, НСтр("ru=' / Ячейка'"), "");
		КонецЕсли;
		
	Иначе
		
		Если ОтборОстатки = 2 Тогда
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Склад'");
		Иначе
			Элементы.ДеревоОстаткиПоказатели.Заголовок = НСтр("ru='Склад'") + ?(УчетПоЯчейкам, НСтр("ru=' / Ячейка'"),"");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно разворачивает дерево значений.
//
Процедура РазвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(ОтборСклад) И ЗначениеЗаполнено(Элемент.Склад) Тогда
			ИдентификаторСтроки = Дерево.ПолучитьИдентификатор();
			Элементы.ДеревоОстатки.Свернуть(ИдентификаторСтроки);
			Прервать;
		КонецЕсли;
		
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоОстатки.Развернуть(ИдентификаторСтроки);
		РазвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно сворачивает дерево значений.
//
Процедура СвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоОстатки.Свернуть(ИдентификаторСтроки);
		СвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОстатков(Ссылка, ИспользуютсяХарактеристикиНоменклатуры = Неопределено, ИспользоватьОтбор = Ложь, ЭтоУслугаРабота = Неопределено)
	
	ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(ОтборСклад);
		
	ТипСтруктурнойЕдиницыВОтборе = ОтборСклад.ТипСтруктурнойЕдиницы;
	
	ДеревоОстатки.ПолучитьЭлементы().Очистить();
	
	ОбновитьИнформациюПоРеквизитамНоменклатуры(Ссылка);
	
	ИспользуютсяХарактеристикиНоменклатуры = ?(ИспользуютсяХарактеристики, Ссылка.ИспользоватьХарактеристики, Ложь);
	
	ЕстьОрдернаяСхема = ЕстьОстаткиПоОрдернымСкладам(Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДеревоОстаткиОстатокПолный", "Видимость", ЕстьОрдернаяСхема Или УчетПоЯчейкам Или РезервированиеЗапасов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация) И ОтборОстатки = 1);
	Запрос.УстановитьПараметр("Организация", ОрганизацииПередачи(ОтборОрганизация));
	Запрос.УстановитьПараметр("ОтборПоСкладу", ЗначениеЗаполнено(ОтборСклад) И ОтборОстатки = 1);
	
	СписокСкладов = Новый СписокЗначений;
		
	Если Не ОтборСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов Тогда
		СписокСкладов.Добавить(ОтборСклад);
	 Иначе
		СписокСкладов = СписокСкладовПоРодителю(ОтборСклад);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СписокСкладов);
	Запрос.УстановитьПараметр("ОтборПоЦенам", ПоказыватьЦены);
	Запрос.УстановитьПараметр("ВидЦен", ОтборВидЦен);         
	Запрос.УстановитьПараметр("ПоказыватьМинимальныеЦены", ПоказыватьМинимальныеЦены);
	Запрос.УстановитьПараметр("ВидМинимальныхЦен", ВидМинимальныхЦен);
	Запрос.УстановитьПараметр("ЦенаОт", ЦенаОт);
	Запрос.УстановитьПараметр("ЦенаДо", ЦенаДо);
	
	СписокВладельцев = Новый СписокЗначений;
	СписокВладельцев.Добавить(Ссылка);
	СписокВладельцев.Добавить(Ссылка.КатегорияНоменклатуры);
	
	Запрос.УстановитьПараметр("СписокВладельцев", СписокВладельцев);

	ИспользуютсяПартииНоменклатуры = ?(ИспользуютсяПартии, Ссылка.ИспользоватьПартии, Ложь);
	
	СформироватьЗаголовкиДерева(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры);
	
	СтруктураПоиска = Новый Структура("ХарактеристикаПоказатель, ПартияПоказатель, СтруктурнаяЕдиница, Ячейка, Показатель");
	ПроверятьВывод = ИспользоватьОтбор;
	
	Если ЭтоУслугаРабота = Неопределено Тогда
		ЭтоУслугаРабота = ?(Ссылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Или Ссылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга, Истина, Ложь);
	КонецЕсли;
	
	Если ЭтоУслугаРабота Или ОтборОстатки = 1 Или ОтборОстатки = 0 Тогда
		
		Если ИспользуютсяХарактеристикиНоменклатуры И ИспользуютсяПартииНоменклатуры Тогда
			Запрос.Текст = ТекстЗапросаПоОстаткамДляДереваОстатковПолный(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема);
		ИначеЕсли ИспользуютсяХарактеристикиНоменклатуры И Не ИспользуютсяПартииНоменклатуры Тогда
			Запрос.Текст = ТекстЗапросаПоОстаткамДляДереваОстатковБезПартий(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема);
		ИначеЕсли Не ИспользуютсяХарактеристикиНоменклатуры И ИспользуютсяПартииНоменклатуры Тогда
			Запрос.Текст = ТекстЗапросаПоОстаткамДляДереваОстатковБезХарактеристик(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема);
		ИначеЕсли Не ИспользуютсяХарактеристикиНоменклатуры И Не ИспользуютсяПартииНоменклатуры Тогда
			Запрос.Текст = ТекстЗапросаПоОстаткамДляДереваОстатковТолькоПоСкладам(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема);
		КонецЕсли;
		
		Если Не ЭтоУслугаРабота И ОтборОстатки = 1 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОЛНОЕ", "ЛЕВОЕ");
		ИначеЕсли ЭтоУслугаРабота Или ОтборОстатки = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ГДЕ
			|	(НЕ ОстаткиТоваровИРезерв.Количество = 0
			|			ИЛИ НЕ ОстаткиТоваровИРезерв.Резерв = 0)", "");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ДеревоРезультат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ДеревоРезультат.Количество() Тогда Возврат КонецЕсли;
		
		ВывестиДеревоОстатков(Ссылка, ДеревоРезультат, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры
								,УчетПоЯчейкам , ЕстьОрдернаяСхема, ПроверятьВывод, СтруктураПоиска);
		
	Иначе
		
		СтрокаЗаголовок = ДеревоОстатки.ПолучитьЭлементы().Добавить();
		СтрокаЗаголовок.Показатель = Строка(Ссылка);
		СтрокаЗаголовок.КартинкаКорзина = 0;
		СтрокаЗаголовок.Ссылка = Ссылка;
		СтрокаЗаголовок.Номенклатура = Ссылка;
		СтрокаЗаголовок.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
		
		ЗапросСклады = Новый Запрос;
		ЗапросСклады.УстановитьПараметр("ТипСтруктурнойЕдиницы", ТипСтруктурнойЕдиницы);
		
		ЗапросСклады.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Наименование КАК Наименование,
		|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В(&ТипСтруктурнойЕдиницы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктурныеЕдиницы.Наименование";
		
		ОбщаяВыборкаСтруктурныхЕдиниц = ЗапросСклады.Выполнить().Выбрать();
		
		Если ИспользуютсяХарактеристикиНоменклатуры Тогда
			
			Запрос.Текст = ТекстЗапросаХарактеристикиБезОстатковДляДереваОстатков();
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				СтруктураПоиска.Показатель = РезультатЗапроса.Показатель;
				Если Не ВыводитьУровеньСогласноОтбору(РезультатЗапроса, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
				НоваяСтрока = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
				НоваяСтрока.Номенклатура = Ссылка;
				НоваяСтрока.Ссылка = Ссылка;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
				НоваяСтрока.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				НоваяСтрока.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
				НоваяСтрока.ЦенаПоказатель = РезультатЗапроса.Цена;
				НоваяСтрока.СтатусПартии = НоваяСтрока.Партия.Статус;
				ДополнитьГруппуКПоступлению(РезультатЗапроса, НоваяСтрока);
				
				Пока ОбщаяВыборкаСтруктурныхЕдиниц.Следующий() Цикл
					СтрокаПоСкладу = НоваяСтрока.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, НоваяСтрока);
					СтрокаПоСкладу.Показатель = ОбщаяВыборкаСтруктурныхЕдиниц.Ссылка;
					СтрокаПоСкладу.Склад = ОбщаяВыборкаСтруктурныхЕдиниц.Ссылка;
					СтрокаПоСкладу.КПоступлению = 0;
					СтрокаПоСкладу.ДатаПоступления = "";
					СтрокаПоСкладу.ПредставлениеПоказателя = Строка(СтрокаПоСкладу.Показатель) + СтрокаОтправительИлиПолучатель(СтрокаПоСкладу.Склад);
					
					СтрокаНеДоступна(СтрокаПоСкладу, СтрокаПоСкладу.Склад.ТипСтруктурнойЕдиницы);
					СтрокаПоСкладу.КартинкаКорзина = ?(СтрокаПоСкладу.Недоступен, -1, СтрокаПоСкладу.КартинкаКорзина);
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Запрос.Текст = ТекстЗапросаСтруктурныеЕдиницыБезОстатковДляДереваОстатков();
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			
			Пока РезультатЗапроса.Следующий() Цикл
				СтруктураПоиска.Показатель = РезультатЗапроса.Показатель;
				Если Не ВыводитьУровеньСогласноОтбору(РезультатЗапроса, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
				НоваяСтрока = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
				НоваяСтрока.Номенклатура = Ссылка;
				НоваяСтрока.Ссылка = Ссылка;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
				НоваяСтрока.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				НоваяСтрока.Склад = РезультатЗапроса.Показатель;
				НоваяСтрока.ПредставлениеПоказателя = Строка(НоваяСтрока.Показатель) + СтрокаОтправительИлиПолучатель(НоваяСтрока.Склад);
				НоваяСтрока.КПоступлению = 0;
				НоваяСтрока.ЦенаПоказатель = 0;
				НоваяСтрока.СтатусПартии = НоваяСтрока.Партия.Статус;
				СтрокаНеДоступна(НоваяСтрока, НоваяСтрока.Склад);
				НоваяСтрока.КартинкаКорзина = ?(НоваяСтрока.Недоступен, -1, НоваяСтрока.КартинкаКорзина);
			КонецЦикла;
			
			Если РезультатЗапроса.Количество() Тогда 
				СтрокаЗаголовок.КПоступлению = РезультатЗапроса.КПоступлению;
				СтрокаЗаголовок.ЦенаПоказатель = РезультатЗапроса.Цена;
				ДополнитьГруппуКПоступлению(РезультатЗапроса, СтрокаЗаголовок);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаОтправительИлиПолучатель(Ссылка)
	
	ЕстьПолучатель = ЗначениеЗаполнено(СтруктурнаяЕдиницаПолучатель);
	
	Если Ссылка = СтруктурнаяЕдиницаДокумент Тогда
		Возврат " " + ?(ЕстьПолучатель, НСтр("ru='(отправитель)'"), НСтр("ru='(из документа)'"))
	ИначеЕсли Ссылка = СтруктурнаяЕдиницаПолучатель И ЕстьПолучатель Тогда
		Возврат " " + НСтр("ru='(получатель)'")
	Иначе
		Возврат ""
	КонецЕсли;
КонецФункции

&НаСервере
Функция НоменклатураПоставщиков(Ссылка)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Остаток КАК Остаток,
	|	НоменклатураПоставщиков.СрокПополнения КАК СрокПополнения,
	|	НоменклатураПоставщиков.Владелец КАК Склад,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Номенклатура = &Ссылка
	|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|	И НоменклатураПоставщиков.Остаток > 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ВыводитьУровеньСогласноОтбору(Выборка, СтруктураПоиска, ПроверятьВывод = Ложь)
	
	Если Не ПроверятьВывод Тогда Возврат Истина КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
	
	ПроверитьСтруктуруПоиска(СтруктураПоиска);
	
	НайденныеСтроки = ТаблицаОтбораПоОстаткам.НайтиСтроки(СтруктураПоиска);
	
	Возврат ?(НайденныеСтроки.Количество(), Истина, Ложь);
	
КонецФункции

&НаСервере
Процедура ПроверитьСтруктуруПоиска(СтруктураПоиска)
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.Ячейка) Или ТипЗнч(СтруктураПоиска.Ячейка) = Тип("Строка") Тогда 
		СтруктураПоиска.Ячейка = Справочники.Ячейки.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.СтруктурнаяЕдиница) Тогда СтруктураПоиска.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка() КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОстаткиПоОрдернымСкладам(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация) И ОтборОстатки = 1);
	Запрос.УстановитьПараметр("Организация", ОрганизацииПередачи(ОтборОрганизация));
	Запрос.УстановитьПараметр("ОтборПоСкладу", ЗначениеЗаполнено(ОтборСклад) И ОтборОстатки = 1);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ОтборСклад);

	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И СтруктурнаяЕдиница.ОрдерныйСклад
	|				И ВЫБОР
	|					КОГДА &ОтборПоОрганизации
	|						ТОГДА Организация В (&Организация)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ОтборПоСкладу
	|						ТОГДА СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ЗапасыНаСкладахОстатки";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоОстаткамДляДереваОстатковПолный(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	ОстаткиТоваров.Партия КАК Партия,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
	|	СУММА(ОстаткиТоваров.Количество + ОстаткиТоваров.Резерв) КАК КоличествоВсего
	|ПОМЕСТИТЬ ОстаткиТоваровИРезерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА ОстаткиТоваров.Организация В (&Организация)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСкладу
	|				ТОГДА ОстаткиТоваров.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Характеристика,
	|	ОстаткиТоваров.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА ХарактеристикиНоменклатуры.Характеристика
	|		ИНАЧЕ ОстаткиТоваровИРезерв.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ОстаткиТоваровИРезерв.Партия КАК Партия,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Количество КАК КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиТоваровИРезерв.Резерв) КАК Резерв,
	|	&Ссылка КАК Ссылка,
	|	0 КАК КартинкаКорзина,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьОстаток,
	|	ОстаткиТоваровИРезерв.КоличествоВсего КАК КоличествоВсего
	|ПОМЕСТИТЬ ИнформацияПоНоменклатуреИтог
	|ИЗ
	|	ОстаткиТоваровИРезерв КАК ОстаткиТоваровИРезерв
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Владелец В(&СписокВладельцев)
	|			И НЕ ХарактеристикиНоменклатуры.Недействителен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикиНоменклатуры
	|		ПО ОстаткиТоваровИРезерв.Характеристика = ХарактеристикиНоменклатуры.Характеристика
	|ГДЕ
	|	(НЕ ОстаткиТоваровИРезерв.Количество = 0
	|			ИЛИ НЕ ОстаткиТоваровИРезерв.Резерв = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровИРезерв.Количество,
	|	ОстаткиТоваровИРезерв.Партия,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА ХарактеристикиНоменклатуры.Характеристика
	|		ИНАЧЕ ОстаткиТоваровИРезерв.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ОстаткиТоваровИРезерв.КоличествоВсего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформацияПоНоменклатуреИтог.Характеристика КАК Характеристика,
	|	ИнформацияПоНоменклатуреИтог.Партия КАК Партия,
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоОстаток) КАК КоличествоОстаток,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ИнформацияПоНоменклатуреИтог.Резерв) КАК Резерв,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина КАК КартинкаКорзина,
	|	Заказано.КоличествоОстаток КАК КПоступлению,
	|	&Ссылка КАК Ссылка,
	|	&Ссылка КАК Номенклатура,
	|	ИнформацияПоНоменклатуреИтог.ЕстьОстаток КАК ЕстьОстаток,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоВсего) КАК КоличествоВсего,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления
	|ПОМЕСТИТЬ ВТПромежуточныйВывод
	|ИЗ
	|	ИнформацияПоНоменклатуреИтог КАК ИнформацияПоНоменклатуреИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура,
	|			ВложенныйЗапрос.Характеристика) КАК Заказано
	|		ПО ИнформацияПоНоменклатуреИтог.Ссылка = Заказано.Номенклатура
	|			И ИнформацияПоНоменклатуреИтог.Характеристика = Заказано.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = ГрафикДвиженияЗапасов.Характеристика
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Характеристика,
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО ИнформацияПоНоменклатуреИтог.Ссылка = ЗаказыПоставщикамОстаткиДокументы.Номенклатура
	|			И ИнформацияПоНоменклатуреИтог.Характеристика = ЗаказыПоставщикамОстаткиДокументы.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина,
	|	ИнформацияПоНоменклатуреИтог.Партия,
	|	ИнформацияПоНоменклатуреИтог.ЕстьОстаток,
	|	ИнформацияПоНоменклатуреИтог.Характеристика,
	|	Заказано.КоличествоОстаток,
	|	Заказано.КоличествоДокументовЗаказано,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""<характеристика не указана>""
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Характеристика
	|	КОНЕЦ КАК ХарактеристикаПоказатель,
	|	ВТПромежуточныйВыводСЦенами.Характеристика.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""<партия не указана>""
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Партия
	|	КОНЕЦ КАК ПартияПоказатель,
	|	ВТПромежуточныйВыводСЦенами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВыводСЦенами.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВыводСЦенами.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВыводСЦенами.Резерв КАК Резерв,
	|	ВТПромежуточныйВыводСЦенами.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ВТПромежуточныйВыводСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВыводСЦенами.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВыводСЦенами.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВыводСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВыводСЦенами.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВыводСЦенами.Характеристика КАК Характеристика,
	|	ВТПромежуточныйВыводСЦенами.Партия КАК Партия,
	|	ВТПромежуточныйВыводСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ВТПромежуточныйВыводСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления
	|ПОМЕСТИТЬ ВТПромежуточныйВыводСЦенами
	|ИЗ
	|	ВТПромежуточныйВывод КАК ВТПромежуточныйВыводСЦенами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВыводСЦенами.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ВТПромежуточныйВыводСЦенами.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВыводСЦенами.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ВТПромежуточныйВыводСЦенами.Ссылка = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточныйВыводСЦенами.Характеристика КАК ХарактеристикаПоказатель,
	|	ВТПромежуточныйВыводСЦенами.Артикул КАК Артикул,
	|	ВТПромежуточныйВыводСЦенами.ПартияПоказатель КАК ПартияПоказатель,
	|	ВТПромежуточныйВыводСЦенами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВыводСЦенами.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВыводСЦенами.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВыводСЦенами.Резерв КАК Резерв,
	|	ВТПромежуточныйВыводСЦенами.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПромежуточныйВыводСЦенами.Цена < ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПромежуточныйВыводСЦенами.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВТПромежуточныйВыводСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВыводСЦенами.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВыводСЦенами.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВыводСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВыводСЦенами.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВыводСЦенами.Характеристика КАК Характеристика,
	|	ВТПромежуточныйВыводСЦенами.Партия КАК Партия,
	|	ВТПромежуточныйВыводСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ВТПромежуточныйВыводСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПромежуточныйВыводСЦенами КАК ВТПромежуточныйВыводСЦенами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВывод.Характеристика КАК ХарактеристикаПоказатель,
	|	ВТВывод.Артикул КАК Артикул,
	|	ВТВывод.ПартияПоказатель КАК ПартияПоказатель,
	|	ВТВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	&ДопПоле1,
	|	&ДопПоле2,
	|	&ДопПоле3 КАК ДопПоле3,
	|	ВТВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТВывод.Резерв КАК Резерв,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.Цена КАК Цена,
	|	ВТВывод.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВТВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТВывод.Характеристика КАК Характеристика,
	|	ВТВывод.Партия КАК Партия,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления
	|ИЗ
	|	ВТВывод КАК ВТВывод
	|ГДЕ
	|	ВТВывод.Цена >= &ЦенаОт
	|	И ВЫБОР
	|			КОГДА &ОтборПоЦенам
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаДо > 0
	|							ТОГДА ВТВывод.Цена <= &ЦенаДо  
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьОстаток УБЫВ,
	|	ХарактеристикаПоказатель,
	|	ВТВывод.Партия.Наименование
	|ИТОГИ
	|	МАКСИМУМ(Артикул),
	|	СУММА(ДопПоле3),
	|	СУММА(КоличествоОстаток),
	|	СУММА(КоличествоВсего),
	|	СУММА(Резерв),
	|	МАКСИМУМ(КПоступлению),

	|	МАКСИМУМ(Цена),
	|	СУММА(ЕстьОстаток),
	|	МАКСИМУМ(КоличествоДокументовЗаказано),
	|	МАКСИМУМ(ЗаказПоставщикуДатаПоступления)
	|ПО
	|	ХарактеристикаПоказатель,
	|	ПартияПоказатель,
	|	СтруктурнаяЕдиница";
	
	Если УчетПоЯчейкам Или ЕстьОрдернаяСхема Тогда
		ТекстЗапроса = ДополнитьТекстЗапросаИнформациейПоЯчейкам(ТекстЗапроса, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле2,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле3 КАК ДопПоле3,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СУММА(ДопПоле3),", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,", СтруктурнаяЕдиница", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоОстаткамДляДереваОстатковБезПартий(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
	|	СУММА(ОстаткиТоваров.Количество + ОстаткиТоваров.Резерв) КАК КоличествоВсего
	|ПОМЕСТИТЬ ОстаткиТоваровИРезерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА ОстаткиТоваров.Организация В (&Организация)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСкладу
	|				ТОГДА ОстаткиТоваров.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА ХарактеристикиНоменклатуры.Характеристика
	|		ИНАЧЕ ОстаткиТоваровИРезерв.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Количество КАК КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиТоваровИРезерв.Резерв) КАК Резерв,
	|	&Ссылка КАК Ссылка,
	|	0 КАК КартинкаКорзина,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьОстаток,
	|	ОстаткиТоваровИРезерв.КоличествоВсего КАК КоличествоВсего
	|ПОМЕСТИТЬ ИнформацияПоНоменклатуреИтог
	|ИЗ
	|	ОстаткиТоваровИРезерв КАК ОстаткиТоваровИРезерв
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ГДЕ
	|			ХарактеристикиНоменклатуры.Владелец В(&СписокВладельцев)
	|			И НЕ ХарактеристикиНоменклатуры.Недействителен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикиНоменклатуры
	|		ПО ОстаткиТоваровИРезерв.Характеристика = ХарактеристикиНоменклатуры.Характеристика
	|ГДЕ
	|	(НЕ ОстаткиТоваровИРезерв.Количество = 0
	|			ИЛИ НЕ ОстаткиТоваровИРезерв.Резерв = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровИРезерв.Количество,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА ХарактеристикиНоменклатуры.Характеристика
	|		ИНАЧЕ ОстаткиТоваровИРезерв.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровИРезерв.Характеристика ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ОстаткиТоваровИРезерв.КоличествоВсего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформацияПоНоменклатуреИтог.Характеристика КАК Характеристика,
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоОстаток) КАК КоличествоОстаток,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ИнформацияПоНоменклатуреИтог.Резерв) КАК Резерв,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина КАК КартинкаКорзина,
	|	Заказано.КоличествоОстаток КАК КПоступлению,
	|	&Ссылка КАК Ссылка,
	|	&Ссылка КАК Номенклатура,
	|	ИнформацияПоНоменклатуреИтог.ЕстьОстаток КАК ЕстьОстаток,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоВсего) КАК КоличествоВсего,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВывод
	|ИЗ
	|	ИнформацияПоНоменклатуреИтог КАК ИнформацияПоНоменклатуреИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура,
	|			ВложенныйЗапрос.Характеристика) КАК Заказано
	|		ПО ИнформацияПоНоменклатуреИтог.Ссылка = Заказано.Номенклатура
	|			И ИнформацияПоНоменклатуреИтог.Характеристика = Заказано.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = ГрафикДвиженияЗапасов.Характеристика
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Характеристика,
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО ИнформацияПоНоменклатуреИтог.Ссылка = ЗаказыПоставщикамОстаткиДокументы.Номенклатура
	|			И ИнформацияПоНоменклатуреИтог.Характеристика = ЗаказыПоставщикамОстаткиДокументы.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина,
	|	Заказано.КоличествоОстаток,
	|	ИнформацияПоНоменклатуреИтог.ЕстьОстаток,
	|	ИнформацияПоНоменклатуреИтог.Характеристика,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано     
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВывод.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""<характеристика не указана>""
	|		ИНАЧЕ ВТПромежуточныйВывод.Характеристика
	|	КОНЕЦ КАК ХарактеристикаПоказатель,
	|	ВТПромежуточныйВывод.Характеристика.Артикул КАК ХарактеристикаАртикул,
	|	ВТПромежуточныйВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВывод.Резерв КАК Резерв,
	|	ВТПромежуточныйВывод.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ВТПромежуточныйВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВывод.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВывод.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВывод.Характеристика КАК Характеристика,
	|	ВТПромежуточныйВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВыводСЦенами
	|ИЗ
	|	ВТПромежуточныйВывод КАК ВТПромежуточныйВывод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ВТПромежуточныйВывод.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
	|			И ВТПромежуточныйВывод.Ссылка = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточныйВыводСЦенами.ХарактеристикаПоказатель КАК ХарактеристикаПоказатель,
	|	ВТПромежуточныйВыводСЦенами.ХарактеристикаАртикул КАК ХарактеристикаАртикул,
	|	ВТПромежуточныйВыводСЦенами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВыводСЦенами.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВыводСЦенами.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВыводСЦенами.Резерв КАК Резерв,
	|	ВТПромежуточныйВыводСЦенами.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПромежуточныйВыводСЦенами.Цена < ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПромежуточныйВыводСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВыводСЦенами.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВыводСЦенами.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВыводСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВыводСЦенами.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВыводСЦенами.Характеристика КАК Характеристика,
	|	ВТПромежуточныйВыводСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВыводСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПромежуточныйВыводСЦенами КАК ВТПромежуточныйВыводСЦенами   
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВывод.ХарактеристикаПоказатель КАК ХарактеристикаПоказатель,
	|	ВТВывод.ХарактеристикаАртикул КАК Артикул,
	|	ВТВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	&ДопПоле1,
	|	&ДопПоле2,
	|	&ДопПоле3 КАК ДопПоле3,
	|	ВТВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТВывод.Резерв КАК Резерв,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.Цена КАК Цена,    
	|	ВТВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТВывод.Характеристика КАК Характеристика,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ИЗ
	|	ВТВывод КАК ВТВывод  
	|ГДЕ
	|	ВТВывод.Цена >= &ЦенаОт
	|	И ВЫБОР
	|			КОГДА &ОтборПоЦенам
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаДо > 0
	|							ТОГДА ВТВывод.Цена <= &ЦенаДо   
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьОстаток УБЫВ,
	|	ХарактеристикаПоказатель,
	|	КоличествоОстаток
	|ИТОГИ
	|	МАКСИМУМ(Артикул),
	|	СУММА(ДопПоле3),
	|	СУММА(КоличествоОстаток),
	|	СУММА(КоличествоВсего),
	|	СУММА(Резерв),
	|	МАКСИМУМ(КПоступлению),     
	|	МАКСИМУМ(Цена),
	|	СУММА(ЕстьОстаток),
	|	МАКСИМУМ(ЗаказПоставщикуДатаПоступления),
	|	МАКСИМУМ(КоличествоДокументовЗаказано)
	|ПО
	|	ХарактеристикаПоказатель,
	|	СтруктурнаяЕдиница";
	
	Если УчетПоЯчейкам Или ЕстьОрдернаяСхема Тогда
		ТекстЗапроса = ДополнитьТекстЗапросаИнформациейПоЯчейкам(ТекстЗапроса, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле2,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле3 КАК ДопПоле3,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СУММА(ДопПоле3),", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,", СтруктурнаяЕдиница", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоОстаткамДляДереваОстатковБезХарактеристик(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры, ЕстьОрдернаяСхема)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Партия КАК Партия,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
	|	СУММА(ОстаткиТоваров.Количество + ОстаткиТоваров.Резерв) КАК КоличествоВсего
	|ПОМЕСТИТЬ ОстаткиТоваровИРезерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА ОстаткиТоваров.Организация В (&Организация)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСкладу
	|				ТОГДА ОстаткиТоваров.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиТоваровИРезерв.Партия КАК Партия,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Количество КАК КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиТоваровИРезерв.Резерв) КАК Резерв,
	|	ОстаткиТоваровИРезерв.Номенклатура КАК Ссылка,
	|	0 КАК КартинкаКорзина,
	|	Заказано.КоличествоОстаток КАК КПоступлению,
	|	ОстаткиТоваровИРезерв.КоличествоВсего КАК КоличествоВсего,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ИнформацияПоНоменклатуреИтог
	|ИЗ
	|	ОстаткиТоваровИРезерв КАК ОстаткиТоваровИРезерв
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК Заказано
	|		ПО ОстаткиТоваровИРезерв.Номенклатура = Заказано.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО ОстаткиТоваровИРезерв.Номенклатура = ЗаказыПоставщикамОстаткиДокументы.Номенклатура
	|ГДЕ
	|	(НЕ ОстаткиТоваровИРезерв.Количество = 0
	|			ИЛИ НЕ ОстаткиТоваровИРезерв.Резерв = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказано.КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Количество,
	|	ОстаткиТоваровИРезерв.Партия,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиТоваровИРезерв.Номенклатура,
	|	ОстаткиТоваровИРезерв.КоличествоВсего,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.Партия ЕСТЬ NULL
	|			ТОГДА ПартииНоменклатуры.Партия
	|		ИНАЧЕ ИнформацияПоНоменклатуреИтог.Партия
	|	КОНЕЦ КАК Партия,
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоОстаток) КАК КоличествоОстаток,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ИнформацияПоНоменклатуреИтог.Резерв) КАК Резерв,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина КАК КартинкаКорзина,
	|	ИнформацияПоНоменклатуреИтог.КПоступлению КАК КПоступлению,
	|	&Ссылка КАК Ссылка,
	|	&Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.Партия ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьОстаток,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоВсего) КАК КоличествоВсего,
	|	ИнформацияПоНоменклатуреИтог.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ИнформацияПоНоменклатуреИтог.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВывод
	|ИЗ
	|	ИнформацияПоНоменклатуреИтог КАК ИнформацияПоНоменклатуреИтог
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПартииНоменклатуры.Ссылка КАК Партия
	|		ИЗ
	|			Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|		ГДЕ
	|			ПартииНоменклатуры.Владелец В(&СписокВладельцев)
	|			И НЕ ПартииНоменклатуры.Недействителен
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК ПартииНоменклатуры
	|		ПО ИнформацияПоНоменклатуреИтог.Партия = ПартииНоменклатуры.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина,
	|	ИнформацияПоНоменклатуреИтог.КПоступлению,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.Партия ЕСТЬ NULL
	|			ТОГДА ПартииНоменклатуры.Партия
	|		ИНАЧЕ ИнформацияПоНоменклатуреИтог.Партия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.Партия ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИнформацияПоНоменклатуреИтог.ЗаказПоставщикуДатаПоступления,
	|	ИнформацияПоНоменклатуреИтог.КоличествоДокументовЗаказано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВывод.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""<партия не указана>""
	|		ИНАЧЕ ВТПромежуточныйВывод.Партия
	|	КОНЕЦ КАК ПартияПоказатель,
	|	ВТПромежуточныйВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВывод.Резерв КАК Резерв,
	|	ВТПромежуточныйВывод.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ВТПромежуточныйВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВывод.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВывод.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВывод.Партия КАК Партия,
	|	ВТПромежуточныйВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВыводСЦенами
	|ИЗ
	|	ВТПромежуточныйВывод КАК ВТПромежуточныйВывод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Ссылка = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточныйВыводСЦенами.ПартияПоказатель КАК ПартияПоказатель,
	|	ВТПромежуточныйВыводСЦенами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВыводСЦенами.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВыводСЦенами.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВыводСЦенами.Резерв КАК Резерв,
	|	ВТПромежуточныйВыводСЦенами.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПромежуточныйВыводСЦенами.Цена < ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПромежуточныйВыводСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВыводСЦенами.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВыводСЦенами.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВыводСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВыводСЦенами.Партия КАК Партия,
	|	ВТПромежуточныйВыводСЦенами.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВыводСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВыводСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПромежуточныйВыводСЦенами КАК ВТПромежуточныйВыводСЦенами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВывод.ПартияПоказатель КАК ПартияПоказатель,
	|	ВТВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	&ДопПоле1,
	|	&ДопПоле2,
	|	&ДопПоле3 КАК ДопПоле3,
	|	ВТВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТВывод.Резерв КАК Резерв,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.Цена КАК Цена,
	|	ВТВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.Партия КАК Партия,
	|	ВТВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ИЗ
	|	ВТВывод КАК ВТВывод 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьОстаток УБЫВ,
	|	ВТВывод.Партия.Наименование,
	|	КоличествоОстаток
	|ИТОГИ
	|	СУММА(ДопПоле3),
	|	СУММА(КоличествоОстаток),
	|	СУММА(КоличествоВсего),
	|	СУММА(Резерв),
	|	СУММА(ЕстьОстаток),
	|	МАКСИМУМ(ЗаказПоставщикуДатаПоступления),
	|	МАКСИМУМ(КоличествоДокументовЗаказано)
	|ПО
	|	ПартияПоказатель,
	|	СтруктурнаяЕдиница";
	
	Если УчетПоЯчейкам Или ЕстьОрдернаяСхема Тогда
		ТекстЗапроса = ДополнитьТекстЗапросаИнформациейПоЯчейкам(ТекстЗапроса, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле2,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле3 КАК ДопПоле3,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СУММА(ДопПоле3),", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,", СтруктурнаяЕдиница", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ДополнитьТекстЗапросаИнформациейПоЯчейкам(ТекстЗапроса, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры)
	
	ВтПоЯчейкам = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК ОстатокВЯчейке,
		|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
		|	ЗапасыНаСкладахОстатки.Ячейка КАК Ячейка,
		|	ВЫБОР
		|		КОГДА НЕ ЗапасыНаСкладахОстатки.Ячейка = ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьЯчейка
		|ПОМЕСТИТЬ ЗапасыНаСкладахОстатки
		|ИЗ
		|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|			,
		|			Номенклатура = &Ссылка
		|				И ВЫБОР
		|					КОГДА &ОтборПоОрганизации
		|						ТОГДА Организация В (&Организация)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ОтборПоСкладу
		|						ТОГДА СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ТИПЗНАЧЕНИЯ(СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)) КАК ЗапасыНаСкладахОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыНаСкладахОстатки.Номенклатура,
		|	ЗапасыНаСкладахОстатки.Характеристика,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница,
		|	ЗапасыНаСкладахОстатки.Партия,
		|	ЗапасыНаСкладахОстатки.Ячейка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";

	ТекстЗапроса = ВтПоЯчейкам + ТекстЗапроса;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле1", "ВЫБОР
	|		КОГДА ЗапасыНаСкладахОстатки.Ячейка = ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|			ТОГДА ""<без ячейки>""
	|		ИНАЧЕ ЗапасыНаСкладахОстатки.Ячейка
	|	КОНЕЦ КАК Ячейка");
	
	ПодстрокаПоискаСтрокиЗамены = "ВТВывод КАК ВТВывод";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоискаСтрокиЗамены, ПодстрокаПоискаСтрокиЗамены + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапасыНаСкладахОстатки КАК ЗапасыНаСкладахОстатки
	|		ПО ВТВывод.Ссылка = ЗапасыНаСкладахОстатки.Номенклатура
	|			И ВТВывод.Партия = ЗапасыНаСкладахОстатки.Партия
	|			И ВТВывод.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
	|			И ВТВывод.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница");
	
	Если Не ИспользуютсяХарактеристикиНоменклатуры Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ВТВывод.Характеристика = ЗапасыНаСкладахОстатки.Характеристика", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЗапасыНаСкладахОстатки.Характеристика,", "");
	КонецЕсли;
	
	Если Не ИспользуютсяПартииНоменклатуры Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЗапасыНаСкладахОстатки.Партия КАК Партия,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ВТВывод.Партия = ЗапасыНаСкладахОстатки.Партия", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ЗапасыНаСкладахОстатки.Партия,", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле2", "ЗапасыНаСкладахОстатки.ОстатокВЯчейке");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле3 КАК ДопПоле3", "ЗапасыНаСкладахОстатки.ЕстьЯчейка КАК ЕстьЯчейка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СУММА(ДопПоле3)", "СУММА(ОстатокВЯчейке),
											|СУММА(ЕстьЯчейка)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоОстаткамДляДереваОстатковТолькоПоСкладам(ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры,ЕстьОрдернаяСхема)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
	|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
	|	СУММА(ОстаткиТоваров.Количество + ОстаткиТоваров.Резерв) КАК КоличествоВсего
	|ПОМЕСТИТЬ ОстаткиТоваровИРезерв
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА ОстаткиТоваров.Организация В (&Организация)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСкладу
	|				ТОГДА ОстаткиТоваров.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(ОстаткиТоваров.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Количество КАК КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ОстаткиТоваровИРезерв.Резерв) КАК Резерв,
	|	ОстаткиТоваровИРезерв.Номенклатура КАК Ссылка,
	|	0 КАК КартинкаКорзина,
	|	Заказано.КоличествоОстаток КАК КПоступлению,
	|	ОстаткиТоваровИРезерв.КоличествоВсего КАК КоличествоВсего,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ИнформацияПоНоменклатуреИтог
	|ИЗ
	|	ОстаткиТоваровИРезерв КАК ОстаткиТоваровИРезерв
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК Заказано
	|		ПО ОстаткиТоваровИРезерв.Номенклатура = Заказано.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО ОстаткиТоваровИРезерв.Номенклатура = ЗаказыПоставщикамОстаткиДокументы.Номенклатура
	|ГДЕ
	|	(НЕ ОстаткиТоваровИРезерв.Количество = 0
	|			ИЛИ НЕ ОстаткиТоваровИРезерв.Резерв = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказано.КоличествоОстаток,
	|	ОстаткиТоваровИРезерв.Количество,
	|	ОстаткиТоваровИРезерв.СтруктурнаяЕдиница,
	|	ОстаткиТоваровИРезерв.Номенклатура.ЕдиницаИзмерения,
	|	ОстаткиТоваровИРезерв.Номенклатура,
	|	ОстаткиТоваровИРезерв.КоличествоВсего,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница ЕСТЬ NULL
	|			ТОГДА СтруктурныеЕдиницы.Ссылка
	|		ИНАЧЕ ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоОстаток) КАК КоличествоОстаток,
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ИнформацияПоНоменклатуреИтог.Резерв) КАК Резерв,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина КАК КартинкаКорзина,
	|	ИнформацияПоНоменклатуреИтог.КПоступлению КАК КПоступлению,
	|	&Ссылка КАК Ссылка,
	|	&Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьОстаток,
	|	СУММА(ИнформацияПоНоменклатуреИтог.КоличествоВсего) КАК КоличествоВсего,
	|	ИнформацияПоНоменклатуреИтог.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ИнформацияПоНоменклатуреИтог.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВывод
	|ИЗ
	|	ИнформацияПоНоменклатуреИтог КАК ИнформацияПоНоменклатуреИтог
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоНоменклатуреИтог.ЕдиницаИзмерения,
	|	ИнформацияПоНоменклатуреИтог.КартинкаКорзина,
	|	ИнформацияПоНоменклатуреИтог.КПоступлению,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница ЕСТЬ NULL
	|			ТОГДА СтруктурныеЕдиницы.Ссылка
	|		ИНАЧЕ ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнформацияПоНоменклатуреИтог.СтруктурнаяЕдиница ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИнформацияПоНоменклатуреИтог.ЗаказПоставщикуДатаПоступления,
	|	ИнформацияПоНоменклатуреИтог.КоличествоДокументовЗаказано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточныйВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВывод.Резерв КАК Резерв,
	|	ВТПромежуточныйВывод.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ВТПромежуточныйВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВывод.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВывод.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПромежуточныйВыводСЦенами
	|ИЗ
	|	ВТПромежуточныйВывод КАК ВТПромежуточныйВывод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ВТПромежуточныйВывод.Ссылка = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПромежуточныйВыводСЦенами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТПромежуточныйВыводСЦенами.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТПромежуточныйВыводСЦенами.КоличествоВсего КАК КоличествоВсего,
	|	ВТПромежуточныйВыводСЦенами.Резерв КАК Резерв,
	|	ВТПромежуточныйВыводСЦенами.КПоступлению КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПромежуточныйВыводСЦенами.Цена < ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПромежуточныйВыводСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПромежуточныйВыводСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПромежуточныйВыводСЦенами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТПромежуточныйВыводСЦенами.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТПромежуточныйВыводСЦенами.Ссылка КАК Ссылка,
	|	ВТПромежуточныйВыводСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПромежуточныйВыводСЦенами.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТПромежуточныйВыводСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПромежуточныйВыводСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПромежуточныйВыводСЦенами КАК ВТПромежуточныйВыводСЦенами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВывод.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	&ДопПоле1,
	|	&ДопПоле2,
	|	&ДопПоле3 КАК ДопПоле3,
	|	ВТВывод.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТВывод.КоличествоВсего КАК КоличествоВсего,
	|	ВТВывод.Резерв КАК Резерв,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.Цена КАК Цена,  
	|	ВТВывод.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТВывод.КартинкаКорзина КАК КартинкаКорзина,
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.ЕстьОстаток КАК ЕстьОстаток,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ИЗ
	|	ВТВывод КАК ВТВывод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьОстаток УБЫВ,
	|	КоличествоОстаток
	|ИТОГИ
	|	СУММА(ДопПоле3),
	|	СУММА(КоличествоОстаток),
	|	СУММА(КоличествоВсего),
	|	СУММА(Резерв),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(ЕстьОстаток),
	|	МАКСИМУМ(ЗаказПоставщикуДатаПоступления),
	|	МАКСИМУМ(КоличествоДокументовЗаказано)
	|ПО
	|	СтруктурнаяЕдиница";
	
	Если УчетПоЯчейкам Или ЕстьОрдернаяСхема Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МАКСИМУМ(КоличествоДокументовЗаказано),","СУММА(ДопПоле3),
		|	СУММА(ЕстьОстаток),
		|	МАКСИМУМ(КоличествоДокументовЗаказано),");
		
		ТекстЗапроса = ДополнитьТекстЗапросаИнформациейПоЯчейкам(ТекстЗапроса, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИТОГИ
		|	МАКСИМУМ(КоличествоДокументовЗаказано),
		|	МАКСИМУМ(ЗаказПоставщикуДатаПоступления)
		|ПО
		|	СтруктурнаяЕдиница", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле2,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СУММА(ДопПоле3),", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДопПоле3 КАК ДопПоле3,", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаХарактеристикиБезОстатковДляДереваОстатков()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|	ВсеХарактеристикиНоменклатуры.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВсеХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ВсеХарактеристикиНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеХарактеристики.Ссылка КАК Ссылка,
	|	ВсеХарактеристики.Владелец КАК Владелец
	|ПОМЕСТИТЬ ХарактеристикиНоменклатуры
	|ИЗ
	|	ВсеХарактеристики КАК ВсеХарактеристики
	|ГДЕ
	|	ВсеХарактеристики.Владелец В(&СписокВладельцев)
	|	И НЕ ВсеХарактеристики.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика
	|				ИЗ
	|					РегистрНакопления.ЗапасыНаСкладах.Остатки(, Номенклатура = &Ссылка
	|						И ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА &ОтборПоСкладу
	|								ТОГДА СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ТИПЗНАЧЕНИЯ(СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)) КАК ЗапасыНаСкладахОстатки
	|		
	|				ОБЪЕДИНИТЬ
	|		
	|				ВЫБРАТЬ
	|					НоменклатураПоставщиков.Характеристика
	|				ИЗ
	|					Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|				ГДЕ
	|					НоменклатураПоставщиков.Владелец = &Ссылка
	|					И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|					И НоменклатураПоставщиков.Остаток > 0)
	|	И НЕ ВсеХарактеристики.Ссылка.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Ссылка = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""<без характеристики>""
	|		ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка
	|	КОНЕЦ КАК Показатель,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ЕСТЬNULL(Заказано.КоличествоОстаток, 0) КАК КПоступлению,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ХарактеристикиНоменклатуры.Владелец КАК Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ ВТПредварительнаяВыборкаСЦенами
	|ИЗ
	|	ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО ХарактеристикиНоменклатуры.Ссылка = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура,
	|			ВложенныйЗапрос.Характеристика) КАК Заказано
	|		ПО ХарактеристикиНоменклатуры.Ссылка = Заказано.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			ВложенныйЗапрос.Характеристика КАК Характеристика
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				ЗаказыПоставщикамОстатки.Характеристика КАК Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = ГрафикДвиженияЗапасов.Характеристика
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.Характеристика
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Характеристика,
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗаказыПоставщикамОстаткиДокументы.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТПредварительнаяВыборкаСЦенами.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПредварительнаяВыборкаСЦенами.Цена < ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПредварительнаяВыборкаСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПредварительнаяВыборкаСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВТПредварительнаяВыборкаСЦенами.КПоступлению КАК КПоступлению,
	|	ВТПредварительнаяВыборкаСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПредварительнаяВыборкаСЦенами.Ссылка КАК Ссылка,
	|	ВТПредварительнаяВыборкаСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПредварительнаяВыборкаСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ВТПредварительнаяВыборкаСЦенами.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПредварительнаяВыборкаСЦенами КАК ВТПредварительнаяВыборкаСЦенами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТВывод.Показатель КАК Показатель,
	|	ВТВывод.Цена КАК Цена,
	|	ВТВывод.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано,
	|	ВТВывод.Характеристика КАК Характеристика
	|ИЗ
	|	ВТВывод КАК ВТВывод
	|ГДЕ
	|	ВТВывод.Цена >= &ЦенаОт
	|	И ВЫБОР
	|			КОГДА &ОтборПоЦенам
	|				ТОГДА ВЫБОР
	|						КОГДА &ЦенаДо > 0
	|							ТОГДА ВТВывод.Цена <= &ЦенаДо
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТВывод.Показатель";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСтруктурныеЕдиницыБезОстатковДляДереваОстатков()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Показатель,
	|	&Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|				ИЗ
	|					РегистрНакопления.ЗапасыНаСкладах.Остатки(, Номенклатура = &Ссылка
	|						И ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА &ОтборПоСкладу
	|								ТОГДА СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ТИПЗНАЧЕНИЯ(СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)) КАК ЗапасыНаСкладахОстатки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Номенклатура КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(МинимальныеЦеныНоменклатурыСрезПоследних.Цена / МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК МинимальнаяЦена,
	|	ЕСТЬNULL(Заказано.КоличествоОстаток, 0) КАК КПоступлению,
	|	СтруктурныеЕдиницы.Номенклатура КАК Номенклатура,
	|	СтруктурныеЕдиницы.Показатель КАК Показатель,
	|	ЗаказыПоставщикамОстаткиДокументы.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	Заказано.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТПредварительнаяВыборкаСЦенами
	|ИЗ
	|	СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоЦенам
	|							ТОГДА ВидЦен = &ВидЦен
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СтруктурныеЕдиницы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				ВидЦен = &ВидМинимальныхЦен
	|					И Номенклатура = &Ссылка
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И Актуальность) КАК МинимальныеЦеныНоменклатурыСрезПоследних
	|		ПО СтруктурныеЕдиницы.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|			СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КоличествоДокументовЗаказано) КАК КоличествоДокументовЗаказано
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|				СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК КоличествоДокументовЗаказано
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|						И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|			ГДЕ
	|				ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыПоставщикамОстатки.Номенклатура,
	|				ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						Номенклатура = &Ссылка
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							Номенклатура = &Ссылка
	|								И ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|						И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаПроизводствоОстатки.Номенклатура,
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК Заказано
	|		ПО СтруктурныеЕдиницы.Номенклатура = Заказано.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ВложенныйЗапрос.ЗаказПоставщикуДатаПоступления) КАК ЗаказПоставщикуДатаПоступления,
	|			ВложенныйЗапрос.Номенклатура КАК Номенклатура
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ГрафикДвиженияЗапасов.Период КАК ЗаказПоставщикуДатаПоступления,
	|				ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыПоставщикамОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|						И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|				ЗаказыНаПроизводствоОстатки.Номенклатура
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Ссылка) КАК ЗаказыНаПроизводствоОстатки
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|							,
	|							ВЫБОР
	|									КОГДА &ОтборПоОрганизации
	|										ТОГДА Организация В (&Организация)
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|								И Номенклатура = &Ссылка) КАК РазмещениеЗаказовОстатки
	|					ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|						И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			ГДЕ
	|				ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Номенклатура) КАК ЗаказыПоставщикамОстаткиДокументы
	|		ПО СтруктурныеЕдиницы.Номенклатура = ЗаказыПоставщикамОстаткиДокументы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТПредварительнаяВыборкаСЦенами.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена <> 0
	|				И &ПоказыватьМинимальныеЦены
	|			ТОГДА ВЫБОР
	|					КОГДА ВТПредварительнаяВыборкаСЦенами.Цена < ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена
	|						ТОГДА ВТПредварительнаяВыборкаСЦенами.МинимальнаяЦена
	|					ИНАЧЕ ВТПредварительнаяВыборкаСЦенами.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВТПредварительнаяВыборкаСЦенами.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТПредварительнаяВыборкаСЦенами.КПоступлению КАК КПоступлению,
	|	ВТПредварительнаяВыборкаСЦенами.Номенклатура КАК Номенклатура,
	|	ВТПредварительнаяВыборкаСЦенами.Показатель КАК Показатель,
	|	ВТПредварительнаяВыборкаСЦенами.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТПредварительнаяВыборкаСЦенами.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ПОМЕСТИТЬ ВТВывод
	|ИЗ
	|	ВТПредварительнаяВыборкаСЦенами КАК ВТПредварительнаяВыборкаСЦенами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТВывод.Ссылка КАК Ссылка,
	|	ВТВывод.Цена КАК Цена,
	|	ВТВывод.КПоступлению КАК КПоступлению,
	|	ВТВывод.Номенклатура КАК Номенклатура,
	|	ВТВывод.Показатель КАК Показатель,
	|	ВТВывод.ЗаказПоставщикуДатаПоступления КАК ЗаказПоставщикуДатаПоступления,
	|	ВТВывод.КоличествоДокументовЗаказано КАК КоличествоДокументовЗаказано
	|ИЗ
	|	ВТВывод КАК ВТВывод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТВывод.Показатель";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, СтрокаРодитель, Ссылка, СтруктураПоиска = Неопределено, ПроверятьВывод = Ложь);
	
	Если СтруктураПоискаНоменклатурыПоставщиков = Неопределено Тогда Возврат КонецЕсли;
	Если Не ТаблицаНоменклатурыПоставщиков.Количество() Тогда Возврат КонецЕсли;
	
	СтруктураПоискаНоменклатурыПоставщиков.Номенклатура = Ссылка;
	СтруктураПоискаНоменклатурыПоставщиков.Характеристика = СтрокаРодитель.Характеристика;
	
	НайденныеСтроки = ТаблицаНоменклатурыПоставщиков.НайтиСтроки(СтруктураПоискаНоменклатурыПоставщиков);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если ПроверятьВывод Тогда
			СтруктураПоиска.Показатель = Строка(НайденнаяСтрока.Склад);
			СтруктураПоиска.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			СтруктураПоиска.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			Если Не ВыводитьУровеньСогласноОтбору(НайденнаяСтрока, СтруктураПоиска, Истина) Тогда Продолжить КонецЕсли;
		КонецЕсли;
		
		СтрокаПоСкладу = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, СтрокаРодитель);
		
		СтрокаПоСкладу.Показатель = НайденнаяСтрока.Склад;
		
		СтрокаПоСкладу.КоличествоОстаток = НайденнаяСтрока.Остаток;
		СтрокаПоСкладу.Недоступен = Истина;
		СтрокаПоСкладу.СрокПополнения = НайденнаяСтрока.СрокПополнения;
		СтрокаПоСкладу.КартинкаКорзина = -1;
		
		СтрокаПоСкладу.КоличествоВсего = 0;
		СтрокаПоСкладу.ВыделениеИтогов = Ложь;
		
		СтрокаПоСкладу.КПоступлению = Неопределено;
		СтрокаПоСкладу.Резерв = 0;
		СтрокаПоСкладу.Цена = 0;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоОстатков(Ссылка, ДеревоРезультат, ИспользуютсяХарактеристикиНоменклатуры, ИспользуютсяПартииНоменклатуры
								, УчетПоЯчейкам, ЕстьОрдернаяСхема, ПроверятьВывод, СтруктураПоиска)
	
	СтрокаЗаголовок = ДеревоОстатки.ПолучитьЭлементы().Добавить();
	СтрокаЗаголовок.Показатель = Строка(Ссылка);
	СтрокаЗаголовок.КартинкаКорзина = 0;
	СтрокаЗаголовок.Ссылка = Ссылка;
	СтрокаЗаголовок.Номенклатура = Ссылка;
	ЗаполнитьЗначенияСвойств(СтрокаЗаголовок, Ссылка);
	СтрокаЗаголовок.Ячейка = Справочники.Ячейки.ПустаяСсылка();
	СтрокаЗаголовок.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
	СтрокаЗаголовок.Склад = Неопределено;
	
	ЗаголовокСвободно = 0;
	ЗаголовокОстатокПолный = 0;
	ЗаголовокРезерв = 0;
	
	Если УчетНоменклатурыПоставщиков Тогда
		ТаблицаНоменклатурыПоставщиков = НоменклатураПоставщиков(Ссылка);
		СтруктураПоискаНоменклатурыПоставщиков = Новый Структура("Номенклатура, Характеристика");
	Иначе
		СтруктураПоискаНоменклатурыПоставщиков = Неопределено;
	КонецЕсли;
	
	Если ИспользуютсяХарактеристикиНоменклатуры И Не ИспользуютсяПартииНоменклатуры Тогда
		
		Пока ДеревоРезультат.Следующий() Цикл
			
			СтруктураПоиска.Показатель = ДеревоРезультат.ХарактеристикаПоказатель;
			
			Если Не ВыводитьУровеньСогласноОтбору(ДеревоРезультат, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
			
			ИтогПоРезерву = 0;
			ИтогПоКоличеству = 0;
			Цена = 0;
			КПоступлению = 0;
			
			НоваяСтрока = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДеревоРезультат);
			НоваяСтрока.Показатель = ДеревоРезультат.ХарактеристикаПоказатель;
			НоваяСтрока.Характеристика = ДеревоРезультат.ХарактеристикаПоказатель;
			НоваяСтрока.Номенклатура = Ссылка;
			НоваяСтрока.Ссылка = Ссылка;
			НоваяСтрока.Недоступен = Ложь;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
			НоваяСтрока.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			НоваяСтрока.Склад = Неопределено;
			
			Если Не ЗначениеЗаполнено(ДеревоРезультат.ЕстьОстаток) Тогда 
				НоваяСтрока.ЦенаПоказатель = НоваяСтрока.Цена;
				ДополнитьГруппуКПоступлению(ДеревоРезультат, НоваяСтрока);
				ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, НоваяСтрока, Ссылка, СтруктураПоиска, ПроверятьВывод);
				Продолжить 
			КонецЕсли;
			
			НоваяСтрока.ВыделениеИтогов = Истина;
			
			ВыборкаПоСкладам = ДеревоРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				СтруктураПоиска.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				
				Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоСкладам, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
				
				СтрокаПоСкладу = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, ВыборкаПоСкладам);
				ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, Ссылка);
				СтрокаПоСкладу.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				СтрокаПоСкладу.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				СтрокаПоСкладу.Номенклатура = Ссылка;
				СтрокаПоСкладу.Ссылка = Ссылка;
				СтрокаПоСкладу.Склад = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				СтрокаПоСкладу.ПредставлениеПоказателя = Строка(СтрокаПоСкладу.Показатель) + СтрокаОтправительИлиПолучатель(СтрокаПоСкладу.Склад);
				
				РезервПоСкладу = 0;
				ИтогПоКоличествуСклад = 0;
				
				Если УчетПоЯчейкам Тогда
					ВывестиУровеньЯчеек(ВыборкаПоСкладам, Ссылка, СтрокаПоСкладу, ПроверятьВывод, СтруктураПоиска, ИтогПоКоличествуСклад, Цена, РезервПоСкладу, КПоступлению);
					СтрокаПоСкладу.КоличествоОстаток = ИтогПоКоличествуСклад;
					СтрокаПоСкладу.КоличествоВсего = ВыборкаПоСкладам.ОстатокВЯчейке;
					СтрокаПоСкладу.ВыделениеИтогов = ?(ЗначениеЗаполнено(ВыборкаПоСкладам.ЕстьЯчейка), Истина, Ложь);
				Иначе
					Цена = ВыборкаПоСкладам.Цена;
					РезервПоСкладу = ?(Не ЗначениеЗаполнено(ВыборкаПоСкладам.Резерв), 0, ВыборкаПоСкладам.Резерв);
					КПоступлению = ВыборкаПоСкладам.КПоступлению;
					ИтогПоКоличествуСклад = ВыборкаПоСкладам.КоличествоОстаток;
					СтрокаПоСкладу.КоличествоВсего = ?(ЕстьОрдернаяСхема, ВыборкаПоСкладам.ОстатокВЯчейке, СтрокаПоСкладу.КоличествоВсего);
				КонецЕсли;
				
				ИтогПоКоличеству = ИтогПоКоличеству + ИтогПоКоличествуСклад;
				ИтогПоРезерву = ИтогПоРезерву + РезервПоСкладу;
				
				СтрокаПоСкладу.СрокПополнения = Неопределено;
				СтрокаПоСкладу.КПоступлению = Неопределено;
				СтрокаПоСкладу.Резерв = РезервПоСкладу;
				СтрокаПоСкладу.Цена = Цена;
				СтрокаПоСкладу.Характеристика = НоваяСтрока.Характеристика;
				СтрокаНеДоступна(СтрокаПоСкладу, СтрокаПоСкладу.Склад.ТипСтруктурнойЕдиницы);
				
				СтрокаПоСкладу.КартинкаКорзина = ?(СтрокаПоСкладу.Недоступен, -1, СтрокаПоСкладу.КартинкаКорзина);
				
			КонецЦикла;
			
			НоваяСтрока.ЦенаПоказатель = ДеревоРезультат.Цена;
			НоваяСтрока.Цена = ДеревоРезультат.Цена;
			НоваяСтрока.Резерв = ИтогПоРезерву;
			НоваяСтрока.КоличествоОстаток = ИтогПоКоличеству;
			
			ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, НоваяСтрока, Ссылка, СтруктураПоиска, ПроверятьВывод);
			
			НоваяСтрока.КПоступлению = ДеревоРезультат.КПоступлению;
			ДополнитьГруппуКПоступлению(ДеревоРезультат, НоваяСтрока);
			
			НоваяСтрока.КоличествоВсего = ?(ЕстьОрдернаяСхема Или УчетПоЯчейкам, ДеревоРезультат.ОстатокВЯчейке, ДеревоРезультат.КоличествоВсего);
			
			ЗаголовокСвободно = ЗаголовокСвободно + НоваяСтрока.КоличествоОстаток;
			ЗаголовокОстатокПолный = ЗаголовокОстатокПолный + НоваяСтрока.КоличествоВсего;
			ЗаголовокРезерв = ЗаголовокРезерв + НоваяСтрока.Резерв;
			
		КонецЦикла;
		
	ИначеЕсли ИспользуютсяХарактеристикиНоменклатуры И ИспользуютсяПартииНоменклатуры Тогда
		
		Пока ДеревоРезультат.Следующий() Цикл
			
			СтруктураПоиска.Показатель = ДеревоРезультат.ХарактеристикаПоказатель;
			
			Если Не ВыводитьУровеньСогласноОтбору(ДеревоРезультат, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
			
			ИтогПоРезерву = 0;
			ИтогПоКоличеству = 0;
			Цена = 0;
			КПоступлению = 0;
			
			НоваяСтрока = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДеревоРезультат);
			НоваяСтрока.Показатель = ДеревоРезультат.ХарактеристикаПоказатель;
			НоваяСтрока.Характеристика = ДеревоРезультат.ХарактеристикаПоказатель;
			НоваяСтрока.ВыделениеИтогов = Истина;
			НоваяСтрока.Номенклатура = Ссылка;
			НоваяСтрока.Ссылка = Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
			НоваяСтрока.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			НоваяСтрока.Склад = ДеревоРезультат.СтруктурнаяЕдиница;
			НоваяСтрока.Недоступен = Ложь;
			
			Если Не ЗначениеЗаполнено(ДеревоРезультат.ЕстьОстаток) Тогда 
					НоваяСтрока.ЦенаПоказатель = НоваяСтрока.Цена;
					ДополнитьГруппуКПоступлению(ДеревоРезультат, НоваяСтрока);
					ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, НоваяСтрока, Ссылка, СтруктураПоиска, ПроверятьВывод);
					Продолжить;
			КонецЕсли;
			
			ВыборкаПоПартиям = ДеревоРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоПартиям.Следующий() Цикл
				
				СтруктураПоиска.Показатель = ВыборкаПоПартиям.ПартияПоказатель;
				
				Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоПартиям, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
				
				СтрокаПоПартии = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоПартии, Ссылка);
				СтрокаПоПартии.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				ЗаполнитьЗначенияСвойств(СтрокаПоПартии, ВыборкаПоПартиям);
				СтрокаПоПартии.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
				СтрокаПоПартии.Показатель = ВыборкаПоПартиям.ПартияПоказатель;
				СтрокаПоПартии.Партия = ВыборкаПоПартиям.ПартияПоказатель;
				СтрокаПоПартии.Характеристика = НоваяСтрока.Характеристика;
				СтрокаПоПартии.Склад = ВыборкаПоПартиям.СтруктурнаяЕдиница;
				СтрокаПоПартии.Недоступен = Ложь;
				СтрокаПоПартии.СтатусПартии = СтрокаПоПартии.Партия.Статус;
				
				СтрокаПоПартии.СрокПополнения = Неопределено;
				СтрокаПоПартии.КПоступлению = Неопределено;
				
				ВыборкаПоСкладам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ИтогПоРезервуСклад = 0;
				ИтогПоКоличествуСклады = 0;
				
				СтрокаПоПартии.ВыделениеИтогов = Истина;
				
				Пока ВыборкаПоСкладам.Следующий() Цикл
					
					СтруктураПоиска.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
					
					Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоСкладам, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
					
					СтрокаПоСкладу = СтрокаПоПартии.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, ВыборкаПоСкладам);
					СтрокаПоСкладу.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
					СтрокаПоСкладу.Номенклатура = Ссылка;
					СтрокаПоСкладу.Ссылка = Ссылка;
					ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, Ссылка);
					СтрокаПоСкладу.Ячейка = Справочники.Ячейки.ПустаяСсылка();
					СтрокаПоСкладу.Характеристика = НоваяСтрока.Характеристика;
					СтрокаПоСкладу.Склад = ВыборкаПоСкладам.СтруктурнаяЕдиница;
					СтрокаПоСкладу.Партия = СтрокаПоПартии.Партия;
					СтрокаПоСкладу.СтатусПартии = СтрокаПоСкладу.Партия.Статус;
					СтрокаПоСкладу.ПредставлениеПоказателя = Строка(СтрокаПоСкладу.Показатель) + СтрокаОтправительИлиПолучатель(СтрокаПоСкладу.Склад);
					
					РезервПоСкладу = 0;
					
					Если УчетПоЯчейкам Тогда
						ОстатокПоСкладу = 0;
						ВывестиУровеньЯчеек(ВыборкаПоСкладам, Ссылка, СтрокаПоСкладу, ПроверятьВывод, СтруктураПоиска, ОстатокПоСкладу, Цена, РезервПоСкладу, КПоступлению);
						СтрокаПоСкладу.КоличествоОстаток = ОстатокПоСкладу;
						СтрокаПоСкладу.КоличествоВсего = ВыборкаПоСкладам.ОстатокВЯчейке;
						ИтогПоКоличествуСклады = ИтогПоКоличествуСклады + ОстатокПоСкладу;
						СтрокаПоСкладу.ВыделениеИтогов = ?(ЗначениеЗаполнено(ВыборкаПоСкладам.ЕстьЯчейка), Истина, Ложь);
					Иначе
						Цена = ВыборкаПоСкладам.Цена;
						РезервПоСкладу = ?(Не ЗначениеЗаполнено(ВыборкаПоСкладам.Резерв), 0, ВыборкаПоСкладам.Резерв);
						КПоступлению = ВыборкаПоСкладам.КПоступлению;
						ИтогПоКоличествуСклады = ИтогПоКоличествуСклады + ВыборкаПоСкладам.КоличествоОстаток;
						СтрокаПоСкладу.КоличествоВсего = ?(ЕстьОрдернаяСхема, ВыборкаПоСкладам.ОстатокВЯчейке, СтрокаПоСкладу.КоличествоВсего);
					КонецЕсли;
					
					ИтогПоРезерву = ИтогПоРезерву + РезервПоСкладу;
					ИтогПоРезервуСклад = ИтогПоРезервуСклад +РезервПоСкладу;
					СтрокаПоСкладу.Цена = Цена;
					
					СтрокаПоСкладу.Резерв = РезервПоСкладу;
					СтрокаПоСкладу.СрокПополнения = Неопределено;
					СтрокаПоСкладу.КПоступлению = Неопределено;
					СтрокаПоСкладу.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
					СтрокаНеДоступна(СтрокаПоСкладу, СтрокаПоСкладу.Склад.ТипСтруктурнойЕдиницы);
					
					СтрокаПоСкладу.КартинкаКорзина = ?(СтрокаПоСкладу.Недоступен, -1, СтрокаПоСкладу.КартинкаКорзина);
					
				КонецЦикла;
				
				СтрокаПоПартии.КоличествоВсего = ?(ЕстьОрдернаяСхема Или УчетПоЯчейкам, ВыборкаПоПартиям.ОстатокВЯчейке, 0);
				СтрокаПоПартии.Резерв = ИтогПоРезервуСклад;
				СтрокаПоПартии.КоличествоОстаток = ИтогПоКоличествуСклады;
				СтрокаПоПартии.Номенклатура = Ссылка;
				СтрокаПоПартии.Ссылка = Ссылка;
				СтрокаПоПартии.Цена = Цена;
				ИтогПоКоличеству = ИтогПоКоличеству + ИтогПоКоличествуСклады;
				
			КонецЦикла;
			
			НоваяСтрока.ЦенаПоказатель = Цена;
			НоваяСтрока.Цена = Цена;
			НоваяСтрока.Резерв = ИтогПоРезерву;
			НоваяСтрока.КоличествоОстаток = ИтогПоКоличеству;
			НоваяСтрока.КПоступлению = ДеревоРезультат.КПоступлению;
			
			ДополнитьГруппуКПоступлению(ДеревоРезультат, НоваяСтрока);
			
			СтруктураПоиска.ПартияПоказатель = Null;
			ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, НоваяСтрока, Ссылка, СтруктураПоиска, ПроверятьВывод);
			
			НоваяСтрока.КоличествоВсего = ?(ЕстьОрдернаяСхема Или УчетПоЯчейкам, ДеревоРезультат.ОстатокВЯчейке, ДеревоРезультат.КоличествоВсего);
			
			ЗаголовокСвободно = ЗаголовокСвободно + НоваяСтрока.КоличествоОстаток;
			ЗаголовокОстатокПолный = ЗаголовокОстатокПолный + НоваяСтрока.КоличествоВсего;
			ЗаголовокРезерв = ЗаголовокРезерв + НоваяСтрока.Резерв;
			
		КонецЦикла;
		
	ИначеЕсли Не ИспользуютсяХарактеристикиНоменклатуры И ИспользуютсяПартииНоменклатуры Тогда
	
		ВыборкаПоПартиям = ДеревоРезультат;
		
		Пока ВыборкаПоПартиям.Следующий() Цикл
			
			СтруктураПоиска.Показатель = ВыборкаПоПартиям.ПартияПоказатель;
			
			Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоПартиям, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
			
			СтрокаПоПартии = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоПартии, ВыборкаПоПартиям);
			СтрокаПоПартии.Показатель = ВыборкаПоПартиям.ПартияПоказатель;
			СтрокаПоПартии.Партия = ВыборкаПоПартиям.ПартияПоказатель;
			СтрокаПоПартии.ВыделениеИтогов = Истина;
			СтрокаПоПартии.Номенклатура = Ссылка;
			СтрокаПоПартии.Ссылка = Ссылка;
			ЗаполнитьЗначенияСвойств(СтрокаПоПартии, Ссылка);
			СтрокаПоПартии.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			СтрокаПоПартии.Склад = ВыборкаПоПартиям.СтруктурнаяЕдиница;
			СтрокаПоПартии.ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
			СтрокаПоПартии.Недоступен = Ложь;
			СтрокаПоПартии.СтатусПартии = СтрокаПоПартии.Партия.Статус;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоПартиям.ЕстьОстаток) Тогда
				Продолжить
			КонецЕсли;
			
			ВыборкаПоСкладам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ИтогПоРезервуСклад = 0;
			ИтогПоКоличествуСклад = 0;
			
			СтрокаПоПартии.ВыделениеИтогов = Истина;
			
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				СтруктураПоиска.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				
				Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоСкладам, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
				
				СтрокаПоСкладу = СтрокаПоПартии.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, ВыборкаПоСкладам);
				СтрокаПоСкладу.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				СтрокаПоСкладу.Номенклатура = Ссылка;
				СтрокаПоСкладу.Ссылка = Ссылка;
				СтрокаПоСкладу.Партия = СтрокаПоПартии.Партия;
				ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, Ссылка);
				СтрокаПоСкладу.Ячейка = Справочники.Ячейки.ПустаяСсылка();
				СтрокаПоСкладу.Склад = ВыборкаПоСкладам.СтруктурнаяЕдиница;
				СтрокаПоСкладу.Партия = СтрокаПоПартии.Партия;
				СтрокаПоСкладу.СтатусПартии = СтрокаПоСкладу.Партия.Статус;
				СтрокаПоСкладу.ПредставлениеПоказателя = Строка(СтрокаПоСкладу.Показатель) + СтрокаОтправительИлиПолучатель(СтрокаПоСкладу.Склад);
				
				РезервПоСкладу = 0;
				
				Если УчетПоЯчейкам Тогда
					ВывестиУровеньЯчеек(ВыборкаПоСкладам, Ссылка, СтрокаПоСкладу, ПроверятьВывод, СтруктураПоиска, ИтогПоКоличеству, Цена, РезервПоСкладу, КПоступлению);
					СтрокаПоСкладу.КоличествоВсего = ВыборкаПоСкладам.ОстатокВЯчейке;
					СтрокаПоСкладу.КоличествоОстаток = ИтогПоКоличеству;
					ИтогПоКоличествуСклад = ИтогПоКоличествуСклад + ИтогПоКоличеству;
					СтрокаПоСкладу.ВыделениеИтогов = ?(ЗначениеЗаполнено(ВыборкаПоСкладам.ЕстьЯчейка), Истина, Ложь);
				Иначе
					Цена = ВыборкаПоСкладам.Цена;
					РезервПоСкладу = ?(Не ЗначениеЗаполнено(ВыборкаПоСкладам.Резерв), 0, ВыборкаПоСкладам.Резерв);
					КПоступлению = ВыборкаПоСкладам.КПоступлению;
					ИтогПоКоличествуСклад = ИтогПоКоличествуСклад + ВыборкаПоСкладам.КоличествоОстаток;
					СтрокаПоСкладу.КоличествоВсего = ?(ЕстьОрдернаяСхема, ВыборкаПоСкладам.ОстатокВЯчейке, СтрокаПоСкладу.КоличествоВсего);
				КонецЕсли;
				
				СтрокаПоСкладу.Цена = Цена;
				ИтогПоРезервуСклад = ИтогПоРезервуСклад +РезервПоСкладу;
				
				СтрокаПоСкладу.СрокПополнения = Неопределено;
				СтрокаПоСкладу.КПоступлению = Неопределено;
				СтрокаПоСкладу.Резерв = РезервПоСкладу;
				СтрокаНеДоступна(СтрокаПоСкладу, СтрокаПоСкладу.Склад.ТипСтруктурнойЕдиницы);
				
				СтрокаПоСкладу.КартинкаКорзина = ?(СтрокаПоСкладу.Недоступен, -1, СтрокаПоСкладу.КартинкаКорзина);
				
			КонецЦикла;
			
			СтрокаПоПартии.КПоступлению = 0;
			СтрокаПоПартии.Цена = Цена;
			СтрокаПоПартии.Резерв = ИтогПоРезервуСклад;
			СтрокаПоПартии.КоличествоОстаток = ИтогПоКоличествуСклад;
			СтрокаПоПартии.Номенклатура = Ссылка;
			СтрокаПоПартии.Ссылка = Ссылка;
			СтрокаПоПартии.КоличествоВсего = ?(ЕстьОрдернаяСхема Или УчетПоЯчейкам, ВыборкаПоПартиям.ОстатокВЯчейке, ВыборкаПоПартиям.КоличествоВсего);
			
			ЗаголовокСвободно = ЗаголовокСвободно + СтрокаПоПартии.КоличествоОстаток;
			ЗаголовокОстатокПолный = ЗаголовокОстатокПолный + СтрокаПоПартии.КоличествоВсего;
			ЗаголовокРезерв = ЗаголовокРезерв + СтрокаПоПартии.Резерв;
			
		КонецЦикла;
		
		СтруктураПоиска.ПартияПоказатель = Неопределено;
		СтруктураПоиска.ХарактеристикаПоказатель = Неопределено;
		ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, СтрокаЗаголовок, Ссылка, СтруктураПоиска, ПроверятьВывод);
		
		Если ВыборкаПоПартиям.Количество() Тогда
			СтрокаЗаголовок.КПоступлению = КПоступлению;
			
			ВыборкаПоПартиям.Сбросить();
			ВыборкаПоПартиям.Следующий();
			
			ДополнитьГруппуКПоступлению(ВыборкаПоПартиям, СтрокаЗаголовок);
			
			СтрокаЗаголовок.ЦенаПоказатель = Цена;
			СтрокаЗаголовок.Цена = Цена;
		КонецЕсли;
		
	ИначеЕсли Не ИспользуютсяХарактеристикиНоменклатуры И Не ИспользуютсяПартииНоменклатуры Тогда
		
		ИтогПоКоличеству = 0;
		Цена = 0;
		Резерв = 0;
		КПоступлению = 0;
		
		ВыборкаПоСкладам = ДеревоРезультат;
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			СтруктураПоиска.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
			
			Если Не ВыводитьУровеньСогласноОтбору(ВыборкаПоСкладам, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
			
			СтрокаПоСкладу = СтрокаЗаголовок.ПолучитьЭлементы().Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, ВыборкаПоСкладам);
			
			СтрокаПоСкладу.Показатель = ВыборкаПоСкладам.СтруктурнаяЕдиница;
			СтрокаПоСкладу.Номенклатура = Ссылка;
			СтрокаПоСкладу.Ссылка = Ссылка;
			ЗаполнитьЗначенияСвойств(СтрокаПоСкладу, Ссылка);
			СтрокаПоСкладу.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			СтрокаПоСкладу.Склад = ВыборкаПоСкладам.СтруктурнаяЕдиница;
			СтрокаНеДоступна(СтрокаПоСкладу, СтрокаПоСкладу.Склад.ТипСтруктурнойЕдиницы);
			СтрокаПоСкладу.ПредставлениеПоказателя = Строка(СтрокаПоСкладу.Показатель) + СтрокаОтправительИлиПолучатель(СтрокаПоСкладу.Склад);
			
			СтрокаПоСкладу.КПоступлению = 0;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСкладам.ЕстьОстаток) Тогда 
				Цена = СтрокаПоСкладу.Цена;
				Продолжить;
			КонецЕсли;
			
			Если УчетПоЯчейкам Тогда
				ВывестиУровеньЯчеек(ВыборкаПоСкладам, Ссылка, СтрокаПоСкладу, ПроверятьВывод, СтруктураПоиска, ИтогПоКоличеству, Цена, Резерв, КПоступлению);
				СтрокаПоСкладу.КоличествоВсего = ВыборкаПоСкладам.ОстатокВЯчейке;
				СтрокаПоСкладу.КоличествоОстаток = ИтогПоКоличеству;
				СтрокаПоСкладу.Резерв = ?(Не Резерв = 0, Резерв, ВыборкаПоСкладам.Резерв);
				СтрокаПоСкладу.ВыделениеИтогов = Истина;
			Иначе
				Цена = ВыборкаПоСкладам.Цена;
				СтрокаПоСкладу.Резерв = ВыборкаПоСкладам.Резерв;
				КПоступлению = ВыборкаПоСкладам.КПоступлению;
				СтрокаПоСкладу.КоличествоВсего = ?(ЕстьОрдернаяСхема, ВыборкаПоСкладам.ОстатокВЯчейке, СтрокаПоСкладу.КоличествоВсего);
			КонецЕсли;
			
			СтрокаПоСкладу.Цена = Цена;
			
			СтрокаПоСкладу.КартинкаКорзина = ?(СтрокаПоСкладу.Недоступен, -1, СтрокаПоСкладу.КартинкаКорзина);
			СтрокаПоСкладу.СрокПополнения = Неопределено;
			
			ЗаголовокСвободно = ЗаголовокСвободно + СтрокаПоСкладу.КоличествоОстаток;
			ЗаголовокОстатокПолный = ЗаголовокОстатокПолный + СтрокаПоСкладу.КоличествоВсего;
			ЗаголовокРезерв = ЗаголовокРезерв + СтрокаПоСкладу.Резерв;
			
		КонецЦикла;
		
		ДополнитьДаннымиПоНоменклатуреПоставщиков(ТаблицаНоменклатурыПоставщиков, СтруктураПоискаНоменклатурыПоставщиков, СтрокаЗаголовок, Ссылка, СтруктураПоиска, ПроверятьВывод);
		
		Если ВыборкаПоСкладам.Количество() Тогда 
			СтрокаЗаголовок.КПоступлению = КПоступлению;
			
			ВыборкаПоСкладам.Сбросить();
			ВыборкаПоСкладам.Следующий();
			
			ДополнитьГруппуКПоступлению(ВыборкаПоСкладам, СтрокаЗаголовок);
			
			СтрокаЗаголовок.ЦенаПоказатель = Цена;
			СтрокаЗаголовок.Цена = Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаЗаголовок.КоличествоОстаток = ЗаголовокСвободно;
	СтрокаЗаголовок.КоличествоВсего = ЗаголовокОстатокПолный;
	СтрокаЗаголовок.Резерв = ЗаголовокРезерв;
	
	Если Не ЗначениеЗаполнено(СтрокаЗаголовок.КПоступлению) Тогда
		
		ИнформацияПоПоступлениям = ДанныеПоПоступлениям(Ссылка);
		
		Если ИнформацияПоПоступлениям = Неопределено Тогда Возврат КонецЕсли;
		
		Если ИнформацияПоПоступлениям.КоличествоДокументов = 1 Тогда
			СтрокаЗаголовок.КПоступлению = ИнформацияПоПоступлениям.Количество;
			СтрокаЗаголовок.ДатаПоступления = ИнформацияПоПоступлениям.ДатаПоступления;
		ИначеЕсли ИнформацияПоПоступлениям.КоличествоДокументов > 1 Тогда
			СтрокаЗаголовок.КПоступлению = ИнформацияПоПоступлениям.Количество;
			ДополнитьГруппуКПоступлению(Неопределено, СтрокаЗаголовок, ИнформацияПоПоступлениям.КоличествоДокументов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоПоступлениям(Ссылка)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация) И ОтборОстатки = 1);
	Запрос.УстановитьПараметр("Организация", ОрганизацииПередачи(ОтборОрганизация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК КоличествоДокументов,
	|	МИНИМУМ(ВложенныйЗапрос.ДатаПоступления) КАК ДатаПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК Количество,
	|		ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Ссылка,
	|		МИНИМУМ(ГрафикДвиженияЗапасов.Период) КАК ДатаПоступления
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И Номенклатура = &Номенклатура) КАК ЗаказыПоставщикамОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|			ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|				И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|				И ЗаказыПоставщикамОстатки.Характеристика = ГрафикДвиженияЗапасов.Характеристика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|					,
	|					ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И Номенклатура = &Номенклатура) КАК РазмещениеЗаказовОстатки
	|			ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|				И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|				И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &ОтборПоОрганизации
	|					ТОГДА ГрафикДвиженияЗапасов.Организация В (&Организация)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0),
	|		ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство,
	|		МИНИМУМ(ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш)
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|				,
	|				ВЫБОР
	|						КОГДА &ОтборПоОрганизации
	|							ТОГДА Организация В (&Организация)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И Номенклатура = &Номенклатура) КАК ЗаказыНаПроизводствоОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|					,
	|					ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И Номенклатура = &Номенклатура) КАК РазмещениеЗаказовОстатки
	|			ПО ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|				И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|				И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|	ГДЕ
	|		ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство,
	|		ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Результат.Следующий() Цикл
		СтруктураВозврата = Новый Структура("КоличествоДокументов, ДатаПоступления, Количество");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат);
		Возврат СтруктураВозврата;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДополнитьГруппуКПоступлению(Выборка, СтрокаДерева, КоличествоДокументовЗаказано = 0)
	
	Если Выборка = Неопределено Тогда
		
		РасшифровкаСчетчика = ПредметИсчисления(
		КоличествоДокументовЗаказано,
		НСтр("ru = 'документ'"),
		НСтр("ru = 'документа'"),
		НСтр("ru = 'документов'"),
		"м");
		
		СтрокаДерева.ДатаПоступления = Строка(КоличествоДокументовЗаказано) + РасшифровкаСчетчика;
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.КоличествоДокументовЗаказано) И Выборка.КоличествоДокументовЗаказано > 1 Тогда
		
		РасшифровкаСчетчика = ПредметИсчисления(
		Выборка.КоличествоДокументовЗаказано,
		НСтр("ru = 'документ'"),
		НСтр("ru = 'документа'"),
		НСтр("ru = 'документов'"),
		"м");
		
		СтрокаДерева.ДатаПоступления = Строка(Выборка.КоличествоДокументовЗаказано) + РасшифровкаСчетчика;
	ИначеЕсли ЗначениеЗаполнено(Выборка.КоличествоДокументовЗаказано) И Выборка.КоличествоДокументовЗаказано = 1 Тогда
		СтрокаДерева.ДатаПоступления = ?(Не ЗначениеЗаполнено(Выборка.ЗаказПоставщикуДатаПоступления),"", Выборка.ЗаказПоставщикуДатаПоступления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредметИсчисления(Число, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2, ПараметрыПредметаИсчисления3, Род)
	
	ФорматнаяСтрока = "Л = ru_RU";
	
	ПараметрыПредметаИсчисления = "%1,%2,%3,%4,,,,,0";
	ПараметрыПредметаИсчисления = СтрШаблон(
	ПараметрыПредметаИсчисления,
	ПараметрыПредметаИсчисления1,
	ПараметрыПредметаИсчисления2,
	ПараметрыПредметаИсчисления3,
	Род);
	
	ЧислоСтрокойИПредметИсчисления = НРег(ЧислоПрописью(Число, ФорматнаяСтрока, ПараметрыПредметаИсчисления));
	
	ЧислоПрописью = НРег(СокрЛП(СтрЗаменить(ЧислоПрописью(Число),"00","")));
	
	ПредметИсчисления = СтрЗаменить(ЧислоСтрокойИПредметИсчисления, ЧислоПрописью, "");
	
	Возврат ПредметИсчисления;
	
КонецФункции

&НаСервере
Процедура ВывестиУровеньЯчеек(ВыборкаРодитель, Ссылка, СтрокаРодитель, ПроверятьВывод, СтруктураПоиска
								,ИтогПоКоличеству = 0, Цена = 0, Резерв = 0, КПоступлению = 0, ВыводитьУровнень = Истина)
	
	Выборка = ВыборкаРодитель.Выбрать();
	
	Если Не Выборка.Количество() Тогда Возврат КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаРодитель.ЕстьЯчейка) И ВыводитьУровнень Тогда
			
			СтруктураПоиска.Показатель = Выборка.Ячейка;
			
			Если Не ВыводитьУровеньСогласноОтбору(Выборка, СтруктураПоиска, ПроверятьВывод) Тогда Продолжить КонецЕсли;
			
			СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Ссылка);
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
			СтрокаДерева.Показатель = Выборка.Ячейка;
			СтрокаДерева.Склад = Выборка.СтруктурнаяЕдиница;
			СтрокаДерева.КоличествоОстаток = 0;
			
			СтрокаДерева.Резерв = 0;
			СтрокаДерева.КПоступлению = 0;
			СтрокаДерева.КоличествоВсего = Выборка.ОстатокВЯчейке;
			СтрокаДерева.СрокПополнения = Неопределено;
			СтрокаДерева.СтатусПартии = СтрокаДерева.Партия.Статус;
			СтрокаНеДоступна(СтрокаДерева, Выборка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы);
			
		КонецЕсли;
		
		ИтогПоКоличеству = Выборка.КоличествоОстаток;
		Цена = Выборка.Цена;
		Резерв = ?(Не ЗначениеЗаполнено(Выборка.Резерв), 0, Выборка.Резерв);
		КПоступлению = Выборка.КПоступлению;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СтрокаНеДоступна(СтрокаДерева, ТипСтруктурнойЕдиницыСтроки)
	
	Если Не ТипСтруктурнойЕдиницы.Количество() Тогда Возврат КонецЕсли;
	
	Если Не СтрокаДерева.Недоступен Тогда
		Если ТипСтруктурнойЕдиницы.НайтиПоЗначению(ТипСтруктурнойЕдиницыСтроки) = Неопределено Тогда
			СтрокаДерева.Недоступен = Истина
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокДокументовПоНоменклатуре(ТипОперации, СтруткураПараметров)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", СтруткураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруткураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ИспользуютсяХарактеристики", СтруткураПараметров.Номенклатура.ИспользоватьХарактеристики
		И СтруткураПараметров.ОтборПоХарактеристике);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(СтруткураПараметров.Организация) 
		И ОтборОстатки = 1);
	Запрос.УстановитьПараметр("Организация", ОрганизацииПередачи(СтруткураПараметров.Организация));
	
	СписокВозврата = Новый СписокЗначений;
	ДлинаЧисла = 0;
	
	Если ТипОперации = "Поступления" Тогда
		
		Запрос.Текст = ТекстЗапросаЗапасыПоступленияСвободные();
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЕстьПравоПросмотраЗаказаПоставки = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику, Пользователи.АвторизованныйПользователь())
											И ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПроизводство, Пользователи.АвторизованныйПользователь());
		
		Пока Выборка.Следующий() Цикл
			
			Количество = Выборка.Количество;
			ДлинаЧисла = ?(ДлинаЧисла = 0, СтрДлина(Формат(Количество, "ЧДЦ=0")), ДлинаЧисла);
			КоличествоТовара = НоменклатураВДокументахСервер.СформироватьПредставлениеКоличества(Количество, ДлинаЧисла);
			ПредставлениеКонтрагента = ?(ЗначениеЗаполнено(Выборка.Контрагент), "; " + Выборка.Контрагент + "; ", "; ");
			
			Если ТипЗнч(Выборка.ДатаПоступления) = Тип("Дата") Тогда
				ДатаПоступления = Формат(Выборка.ДатаПоступления,"ДЛФ=ДД");
			Иначе
				ДатаПоступления = Строка(Выборка.ДатаПоступления) + ПредметИсчисления(
				Выборка.ДатаПоступления,
				НСтр("ru = 'дата'"),
				НСтр("ru = 'даты'"),
				НСтр("ru = 'дат'"),
				"м");
			КонецЕсли;
			
			ПредставлениеЗначения = КоличествоТовара +" "+ Строка(СтруткураПараметров.ЕдиницаИзмерения)+"; " 
			+ НСтр("ru = 'поставка:'") + " " + ДатаПоступления + ПредставлениеКонтрагента + ?(ЕстьПравоПросмотраЗаказаПоставки, СокрЛП(Строка(Выборка.Ссылка)), "");
			
			СписокВозврата.Добавить(Выборка.Ссылка, ПредставлениеЗначения);
		КонецЦикла;
		
	ИначеЕсли ТипОперации = "Резерв" Тогда
		
		Запрос.УстановитьПараметр("ОтборПоПартии", СтруткураПараметров.ОтборПоПартии);
		Запрос.УстановитьПараметр("Партия", СтруткураПараметров.Партия);
		Запрос.УстановитьПараметр("Склад", СтруткураПараметров.Склад);
		Запрос.УстановитьПараметр("ОтборПоСкладу", СтруткураПараметров.ОтборПоСкладу);
		
		Запрос.Текст = ТекстЗапросаЗапасыВРезервеПоСкладам();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Количество = Выборка.Количество;
			
			Если Количество = 0 Тогда Продолжить КонецЕсли;
			
			ДлинаЧисла = ?(ДлинаЧисла = 0, СтрДлина(Формат(Количество, "ЧДЦ=0")), ДлинаЧисла);
			КоличествоТовара = НоменклатураВДокументахСервер.СформироватьПредставлениеКоличества(Количество, ДлинаЧисла);
			
			ПредставлениеЗначения = КоличествоТовара +" "+ Строка(СтруткураПараметров.ЕдиницаИзмерения)+"; "+ СокрЛП(Строка(Выборка.ЗаказПокупателя))
			+ "; " + Выборка.Контрагент + " (" + Строка(Выборка.Ответственный) + ")";
			
			СписокВозврата.Добавить(Выборка.ЗаказПокупателя, ПредставлениеЗначения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаЗапасыПоступленияСвободные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоПериодов > 1
	|			ТОГДА ВложенныйЗапрос.КоличествоПериодов
	|		ИНАЧЕ ВложенныйЗапрос.ДатаПоступления
	|	КОНЕЦ КАК ДатаПоступления,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос1.ДатаПоступления) КАК КоличествоПериодов,
	|		ВложенныйЗапрос1.Количество КАК Количество,
	|		ВложенныйЗапрос1.Ссылка КАК Ссылка,
	|		МИНИМУМ(ВложенныйЗапрос1.ДатаПоступления) КАК ДатаПоступления,
	|		ЕСТЬNULL(ВложенныйЗапрос1.Ссылка.Контрагент.Наименование, """") КАК Контрагент
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ГрафикДвиженияЗапасов.Период КАК ДатаПоступления,
	|			ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК Количество,
	|			ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Ссылка
	|		ИЗ
	|			РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|					,
	|					Номенклатура = &Номенклатура
	|						И ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА &ИспользуютсяХарактеристики
	|								ТОГДА Характеристика = &Характеристика
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|				ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ГрафикДвиженияЗапасов.Заказ
	|					И ЗаказыПоставщикамОстатки.Номенклатура = ГрафикДвиженияЗапасов.Номенклатура
	|					И ЗаказыПоставщикамОстатки.Характеристика = ГрафикДвиженияЗапасов.Характеристика
	|					И ЗаказыПоставщикамОстатки.Организация = ГрафикДвиженияЗапасов.Организация
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						,
	|						Номенклатура = &Номенклатура
	|							И ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И ВЫБОР
	|								КОГДА &ИспользуютсяХарактеристики
	|									ТОГДА Характеристика = &Характеристика
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) КАК РазмещениеЗаказовОстатки
	|				ПО ЗаказыПоставщикамОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|					И ЗаказыПоставщикамОстатки.ЗаказПоставщику = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|					И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|					И ЗаказыПоставщикамОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|		ГДЕ
	|			ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш,
	|			СУММА(ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0)),
	|			ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
	|		ИЗ
	|			РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|					,
	|					ВЫБОР
	|							КОГДА &ОтборПоОрганизации
	|								ТОГДА Организация В (&Организация)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА &ИспользуютсяХарактеристики
	|								ТОГДА Характеристика = &Характеристика
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И Номенклатура = &Номенклатура) КАК ЗаказыНаПроизводствоОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						,
	|						ВЫБОР
	|								КОГДА &ОтборПоОрганизации
	|									ТОГДА Организация В (&Организация)
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И ВЫБОР
	|								КОГДА &ИспользуютсяХарактеристики
	|									ТОГДА Характеристика = &Характеристика
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|							И Номенклатура = &Номенклатура) КАК РазмещениеЗаказовОстатки
	|				ПО ЗаказыНаПроизводствоОстатки.Организация = РазмещениеЗаказовОстатки.Организация
	|					И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|					И ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|					И ЗаказыНаПроизводствоОстатки.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|		ГДЕ
	|			ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) > 0
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство,
	|			ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.Финиш) КАК ВложенныйЗапрос1
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос1.Количество,
	|		ВложенныйЗапрос1.Ссылка,
	|		ЕСТЬNULL(ВложенныйЗапрос1.Ссылка.Контрагент.Наименование, """")) КАК ВложенныйЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаЗапасыВРезервеПоСкладам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Количество,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ЗапасыОстатки.ЗаказПокупателя.Контрагент.Наименование, """") КАК Контрагент
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И НЕ ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И ВЫБОР
	|					КОГДА &ОтборПоОрганизации
	|						ТОГДА Организация В (&Организация)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ОтборПоПартии
	|						ТОГДА Партия = &Партия
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ОтборПоСкладу
	|						ТОГДА СтруктурнаяЕдиница = &Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ИспользуютсяХарактеристики
	|						ТОГДА Характеристика = &Характеристика
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказПокупателя.Ответственный,
	|	ЕСТЬNULL(ЗапасыОстатки.ЗаказПокупателя.Контрагент.Наименование, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура СформироватьКопиюДереваСОтбором()
	
	ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки);
	
	Если Не ПустаяСтрока(СокрЛП(СтрокаПоиска)) Тогда
		
		ЭлементыДереваОстатков = ДеревоОстатки.ПолучитьЭлементы();
		
		МассивСтрокОкончанийДерева = Новый Массив;
		
		Для Каждого ПервыйУровеньДерева из ЭлементыДереваОстатков Цикл
			ПолучитьОкончанияВетокДерева(ПервыйУровеньДерева, МассивСтрокОкончанийДерева)
		КонецЦикла;
		
		МассивСтрокПоВетке = Новый Массив;
		
		Для Каждого СтрокаОкончания Из МассивСтрокОкончанийДерева Цикл
			ОтборПоВетке = Ложь;
			ОбратныйОбходДерваИЗаполнениеТаблицыОтбора(СтрокаОкончания, ОтборПоВетке, МассивСтрокПоВетке);
			
			Если ОтборПоВетке Тогда
				Для Каждого ВеткаДерева Из МассивСтрокПоВетке Цикл
					
					НоваяСтрока = ТаблицаОтбораПоОстаткам.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВеткаДерева);
					НоваяСтрока.Ячейка = ВеткаДерева.Ячейка;
					НоваяСтрока.СтруктурнаяЕдиница = ВеткаДерева.Склад;
					
				КонецЦикла;
			КонецЕсли;
			
			МассивСтрокПоВетке.Очистить();
			
			
		КонецЦикла;
		
		ЗаполнитьДеревоОстатков(ИдентификаторТекущейСтроки,, Истина);
		
	КонецЕсли;
	
	ТаблицаОтбораПоОстаткам.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОкончанияВетокДерева(ВеткаДерева, МассивСтрокОкончанийДерева)
	
	ЭлементыВетки = ВеткаДерева.ПолучитьЭлементы();
	
	Если Не ЭлементыВетки.Количество() Тогда МассивСтрокОкончанийДерева.Добавить(ВеткаДерева) КонецЕсли;
	
	Для Каждого СтрокаВетки Из ЭлементыВетки Цикл
		ПолучитьОкончанияВетокДерева(СтрокаВетки, МассивСтрокОкончанийДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбратныйОбходДерваИЗаполнениеТаблицыОтбора(ВеткаДерева,  ОтборПоВетке, МассивСтрокОтбораПоВетке)
	
	Если СтрНайти(ВРег(Строка(ВеткаДерева.Показатель)),ВРег(СтрокаПоиска)) > 0
		ИЛИ СтрНайти(ВРег(Строка(ВеткаДерева.ХарактеристикаАртикул)),ВРег(СтрокаПоиска)) > 0 Тогда
		
		ОтборПоВетке = Истина;
	КонецЕсли;
	
	МассивСтрокОтбораПоВетке.Добавить(ВеткаДерева);
	
	РодительВетки = ВеткаДерева.ПолучитьРодителя();
	
	Если Не РодительВетки = Неопределено Тогда
		ОбратныйОбходДерваИЗаполнениеТаблицыОтбора(РодительВетки, ОтборПоВетке, МассивСтрокОтбораПоВетке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	Элементы.ГруппаОстаткиДинСписка.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОстатки(Команда)
	
	ОстаткиВидимость = Не ОстаткиВидимость;
	Элементы.ГруппаОстаткиДинСписка.Видимость = ОстаткиВидимость;
	
	Элементы.ПоказатьОстатки.Пометка = ОстаткиВидимость;
	
	ТекущиеДанные = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	Если НЕ ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьПанельОстатков(ТекущиеДанные.Ссылка, ТекущиеДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПеретащитьВКорзину(ПараметрыПеретаскивания);
	Элементы.Отложить.Доступность = (Корзина.Количество()>0);
	Элементы.ОчиститьКорзину.Доступность = (Корзина.Количество()>0);
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодобраноТоваровРасшифровкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КорзинаРасшифровкаВидимость = Не КорзинаРасшифровкаВидимость;
	
	Элементы.ГруппаОбщаяКорзина.Видимость = КорзинаРасшифровкаВидимость;
	Элементы.Корзина.Видимость = Не КорзинаРасшифровкаВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьКорзинуНажатие(Элемент)
	
	КорзинаРасшифровкаВидимость = Не КорзинаРасшифровкаВидимость;
	
	Элементы.ГруппаОбщаяКорзина.Видимость = КорзинаРасшифровкаВидимость;
	Элементы.Корзина.Видимость = Не КорзинаРасшифровкаВидимость;
	
	ПереопределитьКнопкуВыбораПоУмолчнию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	Если Корзина.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьКорзинуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'В корзине содержатся товары. Очистить корзину?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзинуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Корзина.Очистить();
	
	ОбновитьНадписьПодобраноТоваров();
	Элементы.Отложить.Доступность = Ложь;
	Элементы.ОчиститьКорзину.Доступность = Ложь;
	
	Если НЕ ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
	Иначе
		ОбновитьДеревоОстатковКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьНаСервере()
	
	ИмяКлючаОбъекта = "КорзинаНоменклатура";
	
	СтрокаНастроек = ЗначениеВСтрокуВнутр(Корзина.Выгрузить());
	ТекстОтложено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отложено: %1 на сумму %2 %3'"),
		Корзина.Итог("Количество"),
		Формат(Корзина.Итог("Сумма"),"ЧДЦ=2; ЧН=0"),
		?(ЗначениеЗаполнено(ВалютаПредставление),ВалютаПредставление,"")
		);
	
	ОписаниеНастройки = ТекстОтложено + Символы.ПС + Новый УникальныйИдентификатор;
	
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяКлючаОбъекта, ОписаниеНастройки, СтрокаНастроек);
	Корзина.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ОтложитьНаСервере();
	
	ЧислоОтложенныхКорзин = ЧислоОтложенныхКорзин + 1;
	Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	Элементы.Отложить.Доступность = Ложь;
	Элементы.ОчиститьКорзину.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКнопкиСозданияДокумента()
	
	Если Не ЗначениеЗаполнено(ТипДокументаПоУмолчанию) Тогда
		ТипДокументаПоУмолчанию = "ЗаказПокупателя";
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Заказ покупателя'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Заказ покупателя'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказПокупателя" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Заказ покупателя'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Заказ покупателя'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "СчетНаОплату" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Счет на оплату'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Счет на оплату'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказНаряд" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Заказ-наряд'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Заказ-наряд'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "РасходнаяНакладная" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Расходная накладная'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Расходная накладная'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "АктВыполненныхРабот" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Акт выполненных работ'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Акт выполненных работ'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЗаказПоставщику" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Заказ поставщику'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Заказ поставщику'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ПриходнаяНакладная" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Приходная накладная'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Приходная накладная'");
		Возврат;
	КонецЕсли;
	
	Если ТипДокументаПоУмолчанию = "ЧекККМ" Тогда
		Элементы.СоздатьДокументКорзина.Заголовок = НСтр("ru = 'Чек ККМ'");
		Элементы.СоздатьДокументКорзинаРасшифровка.Заголовок = НСтр("ru = 'Чек ККМ'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	ОформитьДокументСТоварамиИзКорзины(ТипДокументаПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокумент(Команда)
	ПоказатьСписокВыбораДокументов(Элементы.ОформитьДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументКорзинаРасшифровка(Команда)
	ПоказатьСписокВыбораДокументов(Элементы.ОформитьДокументКорзинаРасшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокВыбораДокументов(Элемент)
	СписокДокументов = Новый СписокЗначений;
	
	ПараметрыОповещения = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборДокумента", ЭтаФорма, ПараметрыОповещения);
	
	Если ПолныеПрава Тогда
		
		СписокДокументов.Добавить("СчетНаОплату", НСтр("ru = 'Счет на оплату'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если ИспользоватьПодсистемуРаботы Тогда
			СписокДокументов.Добавить("ЗаказНаряд", НСтр("ru = 'Заказ-наряд'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("РасходнаяНакладная", НСтр("ru = 'Расходная накладная'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("АктВыполненныхРабот", НСтр("ru = 'Акт выполненных работ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если УчетРозничныхПродаж Тогда
			СписокДокументов.Добавить("ЧекККМ", НСтр("ru = 'Чек ККМ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"),,БиблиотекаКартинок.РазделЗакупки);
		СписокДокументов.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"),,БиблиотекаКартинок.РазделЗакупки);
		
		ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент);
		Возврат;
	КонецЕсли;
	
	Если ДоступноСозданиеДокументовРазделаЗакупки Тогда
		СписокДокументов.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"),,БиблиотекаКартинок.РазделЗакупки);
		СписокДокументов.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"),,БиблиотекаКартинок.РазделЗакупки);
	КонецЕсли;
	
	Если ДоступноСозданиеДокументовРазделаПродажи Тогда
		
		СписокДокументов.Добавить("СчетНаОплату", НСтр("ru = 'Счет на оплату'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если ИспользоватьПодсистемуРаботы Тогда
			СписокДокументов.Добавить("ЗаказНаряд", НСтр("ru = 'Заказ-наряд'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
		СписокДокументов.Добавить("РасходнаяНакладная", НСтр("ru = 'Расходная накладная'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		СписокДокументов.Добавить("АктВыполненныхРабот", НСтр("ru = 'Акт выполненных работ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		
		Если УчетРозничныхПродаж Тогда
			СписокДокументов.Добавить("ЧекККМ", НСтр("ru = 'Чек ККМ'"),,БиблиотекаКартинок.ВидБизнесаРозничнаяТорговля);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокДокументов.Количество() Тогда
		ПоказатьВыборИзМеню(Оповещение, СписокДокументов, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокумента(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	ТипДокументаПоУмолчанию = Результат.Значение;
	
	ОформитьДокументСТоварамиИзКорзины(ТипДокументаПоУмолчанию);
	
	ОбновитьЗаголовокКнопкиСозданияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаПриИзменении(Элемент)
	Элементы.Отложить.Доступность = (Корзина.Количество()>0);
	Элементы.ОчиститьКорзину.Доступность = (Корзина.Количество()>0);
	ОбновитьНадписьПодобраноТоваров();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОстатковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РасшифровкаОстатков.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкиИзДокумента И Не ЭтоПодбор Тогда
		
		Если Элементы.СписокЗапасы.РежимВыбора И ЗначениеЗаполнено(ТипВладельца) Тогда
			
			ТекущиеДанные = Элементы.СписокЗапасы.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат
			КонецЕсли;
			
			ДанныеПоСкладу = Элементы.РасшифровкаОстатков.ТекущиеДанные;
			
			Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
				Возврат
			КонецЕсли;
			
			ПоказыватьИнформациюПоСкладам = Не НеПоказыватьИнформациюПоСкладуИРезервам И Не ТолькоНоменклатураИКоличество;
			СтруктурнаяЕдиница = ?(ПоказыватьИнформациюПоСкладам, ДанныеПоСкладу.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка"));
			
			СтруктураСохраняемыхНастроек = СтруктураСохраняемыхНастроекФормыВыбора();
			ПустаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ПустаяПартия = ПредопределенноеЗначение("Справочник.ПартииНоменклатуры.ПустаяСсылка");
			СтруктураПараметров = Новый Структура("Номенклатура, СтруктураНастроек, Склад, Характеристика, Партия"
			, ТекущиеДанные.Ссылка, СтруктураСохраняемыхНастроек, СтруктурнаяЕдиница, ПустаяХарактеристика, ПустаяПартия);
			ОповеститьОВыборе(СтруктураПараметров);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьКорзину И Не ТекущиеДанные.КартинкаКорзина = -1 Тогда
		ДобавитьВКорзинуСписок(Истина, "РасшифровкаОстатков");
	КонецЕсли;
	
КонецПроцедуры

// Корзина

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Номенклатура табличного поля Корзина
//
Процедура КорзинаРасшифровкаНоменклатураПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Организация);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС",	НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", 			ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		1);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВидСкидкиНаценки",	ВидСкидкиНаценки);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта",	ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте",	ПроцентСкидкиПоДисконтнойКарте);
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаКорзины.Цена				= СтруктураДанные.Цена;
	СтрокаКорзины.ПроцентСкидкиНаценки= СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаКорзины.СтавкаНДС 		= ПолучитьСтавкуНДС(СтруктураДанные.НоменклатураСтавкаНДС);
	СтрокаКорзины.ПроцентСкидкиНаценки= СтруктураДанные.ПроцентСкидкиНаценки + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте; // ДисконтныеКарты
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
	ОбновитьДанныеПараметровДинамическихСписковКлиент();
	
КонецПроцедуры // КорзинаНоменклатураПриИзменении()

&НаКлиенте
// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета = Неопределено)
	
	Если ПараметрыРасчета=Неопределено Тогда
		ПараметрыРасчета = Новый Структура();
	КонецЕсли;	
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаКорзины, ПараметрыРасчета);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
// Функция возвращает Ставку НДС в зависимости от значения параметра НалогообложениеНДС
//
Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			Возврат СтавкаНДС;
		Иначе
			Возврат ПодборНоменклатурыВДокументахВызовСервераПовтИсп.ПолучитьСтавкуНДСОрганизации(Организация, ПериодЦен);
		КонецЕсли;
	Иначе
		Если НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьСтавкуНДС()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("НоменклатураСтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		СтруктураЦенаИЕдиницаИзмерения = ПодборНоменклатурыВДокументах.ПолучитьЦенуИЕдиницуИзмеренияНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", СтруктураЦенаИЕдиницаИзмерения.Цена);
		
		ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтруктураЦенаИЕдиницаИзмерения.ЕдиницаИзмерения), СтруктураЦенаИЕдиницаИзмерения.ЕдиницаИзмерения, СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура КорзинаРасшифровкаСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение(
		"Перечисление.ТипыСтруктурныхЕдиниц.Склад"));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаСписка", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаХарактеристикаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", 		Организация);
	СтруктураДанные.Вставить("Номенклатура", 		СтрокаКорзины.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 		СтрокаКорзины.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС",	НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", 			ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		1);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВидСкидкиНаценки",	ВидСкидкиНаценки);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаКорзины.Количество 		= 1;
	СтрокаКорзины.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаКорзины.Цена				= СтруктураДанные.Цена;
	СтрокаКорзины.СтавкаНДС 		= ПолучитьСтавкуНДС(СтруктураДанные.НоменклатураСтавкаНДС);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаКоличествоПриИзменении(Элемент)
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	ПараметрыРасчета = Новый Структура("РассчитатьСумму", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины, ПараметрыРасчета);
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаРезервПриИзменении(Элемент)
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если СтрокаКорзины.Резерв > СтрокаКорзины.Количество Тогда
		СтрокаКорзины.Количество = СтрокаКорзины.Резерв;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если СтрокаКорзины.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаКорзины.Цена = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаКорзины.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		ТекущийКоэффициент = 1;
		
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		Коэффициент = 1;
		
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаКорзины.ЕдиницаИзмерения, ВыбранноеЗначение);
		
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаКорзины.ЕдиницаИзмерения);
		
	ИначеЕсли Коэффициент = 0 Тогда
		
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
		
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
		
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		
		СтрокаКорзины.Цена = СтрокаКорзины.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины)
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры КорзинаЦенаОстатокРезервХарактеристикаЕдиницаИзмеренияОбработкаВыбора.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаКлиенте
Процедура КорзинаРасшифровкаЦенаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если РазныеВалюты Тогда
		
		Если ЭтоПодбор Тогда
			ДатаПересчета = Дата;
			ИсходнаяВалюта = ВалютаДокумента;
		Иначе
			ДатаПересчета = ОбщегоНазначенияКлиент.ДатаСеанса();
			ИсходнаяВалюта = НациональнаяВалюта;
		КонецЕсли;
		
		СтруктураОкругления = Новый Структура("ПорядокОкругления, ОкруглятьВБольшуюСторону");
		СтруктураОкругления.ПорядокОкругления = ПорядокОкругления;
		СтруктураОкругления.ОкруглятьВБольшуюСторону = ОкруглятьВБольшуюСторону;
		
		СтрокаКорзины.ЦенаВВалютеПодбора = ПодборНоменклатурыВДокументахКлиент.ЦенаВВалюту(СтрокаКорзины.Цена, ИсходнаяВалюта, СтрокаКорзины.Валюта, ДатаПересчета, СуммаВключаетНДС, СтруктураОкругления);
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);

КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаЦенаВВалютеПодбораПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если РежимВыбора Тогда
		ДатаПересчета = Дата;
		ВалютаПересчета = ВалютаДокумента;
	Иначе
		ДатаПересчета = ОбщегоНазначенияКлиент.ДатаСеанса();
		ВалютаПересчета = НациональнаяВалюта;
	КонецЕсли;
	
	СтруктураОкругления = Новый Структура("ПорядокОкругления, ОкруглятьВБольшуюСторону");
	СтруктураОкругления.ПорядокОкругления = ПорядокОкругления;
	СтруктураОкругления.ОкруглятьВБольшуюСторону = ОкруглятьВБольшуюСторону;
	
	СтрокаКорзины.Цена = ПодборНоменклатурыВДокументахКлиент.ЦенаВВалюту(СтрокаКорзины.ЦенаВВалютеПодбора, СтрокаКорзины.Валюта, ВалютаПересчета, ДатаПересчета, СуммаВключаетНДС, СтруктураОкругления);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины);
	
КонецПроцедуры


&НаКлиенте
Процедура КорзинаРасшифровкаПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьСуммуСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);

КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаСуммаСкидкиНаценкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки", Истина);
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаСуммаПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
		Если СтрокаКорзины.Количество <> 0 Тогда
			СтрокаКорзины.Цена = СтрокаКорзины.Сумма / СтрокаКорзины.Количество;
		КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаКорзины);
	
	СтрокаКорзины.Всего = СтрокаКорзины.Сумма + ?(СуммаВключаетНДС, 0, СтрокаКорзины.СуммаНДС);
	
	Если РазныеВалюты Тогда
		
		Если ЭтоПодбор Тогда
			ДатаПересчета = Дата;
			ИсходнаяВалюта = ВалютаДокумента;
		Иначе
			ДатаПересчета = ОбщегоНазначенияКлиент.ДатаСеанса();
			ИсходнаяВалюта = НациональнаяВалюта;
		КонецЕсли;
		
		СтруктураОкругления = Новый Структура("ПорядокОкругления, ОкруглятьВБольшуюСторону");
		СтруктураОкругления.ПорядокОкругления = ПорядокОкругления;
		СтруктураОкругления.ОкруглятьВБольшуюСторону = ОкруглятьВБольшуюСторону;
		
		СтрокаКорзины.ЦенаВВалютеПодбора = ПодборНоменклатурыВДокументахКлиент.ЦенаВВалюту(СтрокаКорзины.Цена, ИсходнаяВалюта, СтрокаКорзины.Валюта, ДатаПересчета, СуммаВключаетНДС, СтруктураОкругления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаКорзины);
	СтрокаКорзины.Всего = СтрокаКорзины.Сумма + ?(СуммаВключаетНДС, 0, СтрокаКорзины.СуммаНДС);

КонецПроцедуры

&НаКлиенте
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(СтрокаКорзины)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаКорзины.СтавкаНДС);
	
	СтрокаКорзины.СуммаНДС = ?(СуммаВключаетНДС, 
									СтрокаКорзины.Сумма - (СтрокаКорзины.Сумма) / ((СтавкаНДС + 100) / 100),
									СтрокаКорзины.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если Не Корзина.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПеренестиВДокумент", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Номенклатура не подобрана в корзину. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Закрыть(ЗаписатьПодборВХранилище());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПеренестиВДокумент(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(ЗаписатьПодборВХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкуКорзинаРасшифровкаОстатков()
	
	ПараметрыОтбора = Новый Структура("Номенклатура, СтруктурнаяЕдиница");
	
	Для Каждого СтрокаОстатков Из РасшифровкаОстатков Цикл
		
		ПараметрыОтбора.Номенклатура = СтрокаОстатков.Номенклатура;
		ПараметрыОтбора.СтруктурнаяЕдиница = СтрокаОстатков.СтруктурнаяЕдиница;
		
		НайденныеЭлементы = Корзина.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокаОстатков.КартинкаКорзина = -1 Тогда
			СтрокаОстатков.КартинкаКорзина = ?(НайденныеЭлементы.Количество(), 1, 0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуРасшифровкаОстактов(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаОстатков.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		ДобавитьВКорзинуСписок(Истина, "РасшифровкаОстатков");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзКорзиныРасшифровкаОстактов(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаОстатков.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		ДобавитьВКорзинуСписок(Ложь, "РасшифровкаОстатков");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОстатковПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаОстатков.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ПоказыватьКорзину Тогда
		
		Если ТекущиеДанные.КартинкаКорзина= 1 Тогда
			Элементы.РасшифровкаОстатковКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.РасшифровкаОстатковКонтекстноеМенюУдалитьИзКорзины.Видимость = Истина;
		Иначе
			Элементы.РасшифровкаОстатковКонтекстноеМенюДобавитьВКорзину.Видимость = Истина;
			Элементы.РасшифровкаОстатковКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.РасшифровкаОстатковКонтекстноеМенюДобавитьВКорзину.Видимость = Ложь;
		Элементы.РасшифровкаОстатковКонтекстноеМенюУдалитьИзКорзины.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаПослеУдаления(Элемент)
	ОбновитьДанныеПараметровДинамическихСписковКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаПартияПриИзменении(Элемент)
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаСтруктурнаяЕдиницаПриИзменении(Элемент)
	ОбновитьДанныеПараметровДинамическихСписковКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КорзинаРасшифровкаЯчейкаПриИзменении(Элемент)
	Если ТекущаяСтраницаНоменклатуры = "ДеревоОстатки" Тогда
		ОбновитьДанныеПараметровДинамическихСписковКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	ДанныеКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если ДанныеКорзины = Неопределено Тогда
		СтрокаСообщения = НСтр("ru = 'Не выбрана строка корзины.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		Возврат
	КонецЕсли;
	
	Ссылка = ДанныеКорзины.Номенклатура;
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение(
		"Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		ТекущиеДанные = Элементы.ОтборКатегории.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено И Не ТекущиеДанные.Представление = ПредставлениеВсеКатегории() Тогда
			ПоказатьВСпискеСервер(Ссылка, "КатегорииНоменклатуры");
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено И Не ТекущиеДанные.Представление = ПредставлениеВсеГруппы() Тогда
			ПоказатьВСпискеСервер(Ссылка, "Группы");
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьВСпискеКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВсеКатегории()
	Возврат НСтр("ru = '<Все категории>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВсеГруппы()
	Возврат НСтр("ru = '<Все группы>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНетГруппы()
	Возврат НСтр("ru = '<Нет группы>'");
КонецФункции

&НаКлиенте
Процедура ПоказатьВСпискеКлиент()
	
	ДанныеКорзины = Элементы.КорзинаРасшифровка.ТекущиеДанные;
	
	Если ДанныеКорзины = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Ссылка = ДанныеКорзины.Номенклатура;
	
	Элементы.СписокЗапасы.ТекущаяСтрока = Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВСпискеСервер(Ссылка, ВидДереваИерархии)
	
	Если ВидДереваИерархии = "КатегорииНоменклатуры" Тогда
		УстановитьОтборПоДеревуИерархии("ОтборКатегории", Ссылка.КатегорияНоменклатуры)
	Иначе
		УстановитьОтборПоДеревуИерархии("ОтборИерархия", Ссылка.Родитель)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоШтрихкодамВМассиве(Штрихкоды, СтруктурнаяЕдиница = Неопределено)

	ДанныеПоШтрихкодам = Новый Соответствие;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Рег.Штрихкод КАК Штрихкод,
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.Характеристика КАК Характеристика,
	|	Рег.Партия КАК Партия,
	|	Рег.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Рег
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (&СерииНоменклатурыИспользуются)
	|			И Рег.Номенклатура = СерииНоменклатуры.Владелец
	|			И (Рег.Номенклатура.ИспользоватьСерииНоменклатуры)
	|			И Рег.Штрихкод = СерииНоменклатуры.Наименование
	|ГДЕ
	|	Рег.Штрихкод В(&МассивШтрихкодов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДанныеОВесовомТоваре.КодВесовогоТовара КАК КодВесовогоТовара,
	|	ТЗДанныеОВесовомТоваре.ПрефиксВесовогоТовара КАК ПрефиксВесовогоТовара,
	|	ТЗДанныеОВесовомТоваре.ШтрихКод КАК ШтрихКод
	|ПОМЕСТИТЬ ВременнаяТаблицаВесовойТовар
	|ИЗ
	|	&ТЗДанныеОВесовомТоваре КАК ТЗДанныеОВесовомТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
	|	КодыТоваровSKU.Характеристика КАК Характеристика,
	|	КодыТоваровSKU.Партия КАК Партия,
	|	КодыТоваровSKU.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаВесовойТовар.ШтрихКод КАК ШтрихКод,
	|	ВременнаяТаблицаВесовойТовар.КодВесовогоТовара КАК КодВесовогоТовара,
	|	ВременнаяТаблицаВесовойТовар.ПрефиксВесовогоТовара КАК ПрефиксВесовогоТовара,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	ЕСТЬNULL(КодыТоваровSKU.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ КодыТоваровSKU.Номенклатура.ТабачнаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВесовойТовар КАК ВременнаяТаблицаВесовойТовар
	|		ПО КодыТоваровSKU.SKU = ВременнаяТаблицаВесовойТовар.КодВесовогоТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (&СерииНоменклатурыИспользуются)
	|			И КодыТоваровSKU.Номенклатура = СерииНоменклатуры.Владелец
	|			И (КодыТоваровSKU.Номенклатура.ИспользоватьСерииНоменклатуры)
	|			И (ВременнаяТаблицаВесовойТовар.ШтрихКод = СерииНоменклатуры.Наименование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаВесовойТовар.КодВесовогоТовара КАК КодВесовогоТовара,
	|	ВременнаяТаблицаВесовойТовар.ПрефиксВесовогоТовара КАК ПрефиксВесовогоТовара,
	|	ВременнаяТаблицаВесовойТовар.ШтрихКод КАК ШтрихКод
	|ИЗ
	|	ВременнаяТаблицаВесовойТовар КАК ВременнаяТаблицаВесовойТовар");
	
	МассивШтрихкодов = Новый Массив;
	ТЗДанныеОВесовомТоваре = Новый ТаблицаЗначений;
	ТЗДанныеОВесовомТоваре.Колонки.Добавить("КодВесовогоТовара", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗДанныеОВесовомТоваре.Колонки.Добавить("ПрефиксВесовогоТовара", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗДанныеОВесовомТоваре.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	Для каждого ТекШтрихкод Из Штрихкоды Цикл
		
		МассивШтрихкодов.Добавить(ТекШтрихкод.ШтрихКод);

		ДанныеПоШтрихкодам.Вставить(ТекШтрихкод.ШтрихКод, Новый Массив);
		
		Если ТекШтрихкод.Свойство("КодВесовогоТовара") Тогда
			НоваяСтрокаОВесовомТоваре = ТЗДанныеОВесовомТоваре.Добавить();
			НоваяСтрокаОВесовомТоваре.КодВесовогоТовара = ТекШтрихкод.КодВесовогоТовара;
			НоваяСтрокаОВесовомТоваре.ПрефиксВесовогоТовара = ТекШтрихкод.ПрефиксВесовогоТовара;
			НоваяСтрокаОВесовомТоваре.Штрихкод = ТекШтрихкод.Штрихкод;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	ИспользоватьСерииНоменклатуры = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	Если ИспользоватьСерииНоменклатуры<>Неопределено Тогда
		Запрос.УстановитьПараметр("СерииНоменклатурыИспользуются", Истина);
	Иначе
	    Запрос.УстановитьПараметр("СерииНоменклатурыИспользуются", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТЗДанныеОВесовомТоваре", ТЗДанныеОВесовомТоваре);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивДанныхПоШтрихкоду = ДанныеПоШтрихкодам[Выборка.Штрихкод];
		
		ТекДанные = Новый Структура;
		МассивДанныхПоШтрихкоду.Добавить(ТекДанные);
		
		ТекДанные.Вставить("Номенклатура", Выборка.Номенклатура);
		ТекДанные.Вставить("Характеристика", Выборка.Характеристика);
		ТекДанные.Вставить("Партия", Выборка.Партия);
		ТекДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		ТекДанные.Вставить("КодВесовогоТовара", Выборка.КодВесовогоТовара);
		ТекДанные.Вставить("ПрефиксВесовогоТовара", Выборка.ПрефиксВесовогоТовара);
		ТекДанные.Вставить("МаркируемаяПродукция", Выборка.МаркируемаяПродукция);
		
		Если ИспользоватьСерииНоменклатуры<>Неопределено Тогда
			ТекДанные.Вставить("Серия", Выборка.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Выборка = МассивРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивДанныхПоШтрихкоду = ДанныеПоШтрихкодам[Выборка.Штрихкод];
		
		ТекДанные = Новый Структура;
		МассивДанныхПоШтрихкоду.Добавить(ТекДанные);
		
		Если НЕ ТекДанные.Свойство("КодВесовогоТовара") Тогда
			ТекДанные.Вставить("Номенклатура", Выборка.Номенклатура);
			ТекДанные.Вставить("Характеристика", Выборка.Характеристика);
			ТекДанные.Вставить("Партия", Выборка.Партия);
			ТекДанные.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
			
			Если ИспользоватьСерииНоменклатуры<>Неопределено Тогда
				ТекДанные.Вставить("Серия", Выборка.Серия);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ДанныеПоШтрихкодам;

КонецФункции

#КонецОбласти

#Область РаботаСПоиском

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Если НастройкиПоискаКакИскать = 0 Тогда
		
		ВыполнитьПолнотекстовыйПоискНаКлиенте();
		
	Иначе
		
		ПоискПоПодстроке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоискПоПодстроке()
	
	Если НЕ НастройкиПоискаКакИскать = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаРасширенногоПоиска) Тогда
		
		ПодборПоискНеУдачный = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"Номенклатура", Неопределено, ВидСравненияКомпоновкиДанных.ВСписке,, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = РезультатПоискаПоПодстроке(СтрокаРасширенногоПоиска);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"Номенклатура", РезультатПоиска, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	
КонецПроцедуры

&НаСервере
Функция РезультатПоискаПоПодстроке(СтрокаРасширенногоПоиска)
	
	МассивНоменклатуры = Новый Массив;
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаРасширенногоПоиска + "%");
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Наименование ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.НаименованиеПолное ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Артикул ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Комментарий ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.ЦеноваяГруппа.Наименование ПОДОБНО &СтрокаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Результат.НоменклатураСсылка КАК Номенклатура
	|ИЗ
	|	Результат КАК Результат";
	
	// АПК:96 -вкл
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	Если ПоискВШтрихКодах Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	НЕ ШтрихкодыНоменклатуры.Номенклатура В (&МассивНоменклатуры)
		|	И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""%"" + &СтрокаПоиска + ""%""";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Если ПоискВХарактеристиках Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура
		|ПОМЕСТИТЬ ВтНоменклатура
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	(ХарактеристикиНоменклатуры.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|			ИЛИ ХарактеристикиНоменклатуры.НаименованиеДляПечати ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|			ИЛИ ХарактеристикиНоменклатуры.Артикул ПОДОБНО ""%"" + &СтрокаПоиска + ""%"")
		|	И НЕ ХарактеристикиНоменклатуры.Владелец В (&МассивНоменклатуры)
		|	И ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатуры.Владелец) = ТИП(Справочник.Номенклатура)
		|	И ХарактеристикиНоменклатуры.Владелец.ИспользоватьХарактеристики
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.КатегорияНоменклатуры
		|ГДЕ
		|	(ХарактеристикиНоменклатуры.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|			ИЛИ ХарактеристикиНоменклатуры.НаименованиеДляПечати ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|			ИЛИ ХарактеристикиНоменклатуры.Артикул ПОДОБНО ""%"" + &СтрокаПоиска + ""%"")
		|	И НЕ Номенклатура.Ссылка В (&МассивНоменклатуры)
		|	И ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатуры.Владелец) = ТИП(Справочник.КатегорииНоменклатуры)
		|	И Номенклатура.ИспользоватьХарактеристики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВтНоменклатура.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВтНоменклатура КАК ВтНоменклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Если ПоискВДопСведениях Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Номенклатура)
		|	И НЕ ДополнительныеСведения.Объект В (&МассивНоменклатуры)
		|	И ВЫБОР
		|			КОГДА ДополнительныеСведения.Значение.Наименование ЕСТЬ NULL
		|				ТОГДА ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(150)) ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|			ИНАЧЕ ДополнительныеСведения.Значение.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|		КОНЕЦ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Если ПоискВДопРеквизитахИСведениях Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Значение.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
		|	И НЕ НоменклатураДополнительныеРеквизиты.Ссылка В (&МассивНоменклатуры)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоискНаКлиенте()
	
	Если Не ИндексПолнотекстовогоПоискаАктуален
		И ИнформационнаяБазаФайловая Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОбновитьИндекс", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПолнотекстовыйПоискНаКлиенте();
		
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОбновитьИндекс(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтрокаПоиска = "";
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновлениеИндексаПолнотекстовогоПоискаДанных",0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИндексаПолнотекстовогоПоискаДанных()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексПолнотекстовогоПоиска();
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'"));
	
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	ПолнотекстовыйПоискНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискНаКлиенте()
	
	ЭлементыОтбора = СписокЗапасы.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаРасширенногоПоиска)) Тогда
		
		ПодборПоискНеУдачный = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
			"Номенклатура", , , , Ложь);
		
	Иначе
		
		РезультатПоиска = Неопределено;
		
		СтркуткраНастроекПоиска = Новый Структура("ПоискВДопРеквизитахИСведениях, ПоискВДопСведениях, ПоискВШтрихКодах, ПоискВХарактеристиках"
		, ПоискВДопРеквизитахИСведениях, ПоискВДопСведениях, ПоискВШтрихКодах, ПоискВХарактеристиках);
		
		ПодборПоискНеУдачный = ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаРасширенногоПоиска, РезультатПоиска, СтркуткраНастроекПоиска);
		
		Если Не ПодборПоискНеУдачный Тогда
			
			Использование = Истина;
			
			ПравоеЗначение = ?(Использование, РезультатПоиска.Номенклатура, Неопределено);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтотОбъект[ТекущаяСтраницаНоменклатуры], "Номенклатура", ПравоеЗначение, ВидСравненияКомпоновкиДанных.ВСписке, );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска, СтркуткраНастроекПоиска)
	
	ОписаниеОшибки = "";
	РезультатПоиска = ПоискТоваров(СтрокаПоиска, ОписаниеОшибки, СтркуткраНастроекПоиска);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Полнотекстовый поиск товаров.
//
// Параметры:
//  СтрокаПоиска - Строка - строка для поиска товаров.
//  ОписаниеОшибки - Строка - сообщение об ошибке.
//
Функция ПоискТоваров(СтрокаПоиска, ОписаниеОшибки, СтркуткраНастроекПоиска)
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	
	Результат = ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска, СтркуткраНастроекПоиска);
	
	Если Результат = "ВыполненоУспешно" Тогда
		Возврат РезультатПоиска;
	ИначеЕсли Результат = "СлишкомМногоРезультатов" Тогда
		ОписаниеОшибки = НСтр("ru = 'Слишком много результатов. Уточните запрос.'");
		Возврат РезультатПоиска;
	ИначеЕсли Результат = "НичегоНеНайдено" Тогда
		Возврат РезультатПоиска;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Ничего не найдено'");
	Возврат РезультатПоиска;
	
КонецФункции

&НаСервереБезКонтекста
// Полнотекстовый поиск товаров.
//
// Параметры:
//  СтрокаПоиска - Строка - строка для поиска товаров.
//  РезультатПоиска - ТаблицаЗначений - результат поиска.
//
Функция ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска, СтркуткраНастроекПоиска)
	
	МассивШтрихкодов = Новый Массив;
	МассивХарактеристик = Новый Массив;
	
	// Поиск данных
	РазмерПорции = 200;
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	
	Если СтркуткраНастроекПоиска.ПоискВДопСведениях Тогда
		ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
	КонецЕсли;
	
	Если СтркуткраНастроекПоиска.ПоискВШтрихКодах Тогда
		ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	Если СтркуткраНастроекПоиска.ПоискВХарактеристиках Тогда
		ОбластьПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	КонецЕсли;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска + "*", РазмерПорции);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПерваяЧасть();
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат "СлишкомМногоРезультатов";
	КонецЕсли;
	
	КоличествоНайденныхЭлементов = СписокПоиска.ПолноеКоличество();
	Если КоличествоНайденныхЭлементов = 0 Тогда
		Возврат "НичегоНеНайдено";
	КонецЕсли;
	
	// Обработка данных
	НачальнаяПозиция    = 0;
	КонечнаяПозиция     = ?(КоличествоНайденныхЭлементов > РазмерПорции, РазмерПорции, КоличествоНайденныхЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;

	Пока ЕстьСледующаяПорция Цикл
		
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			Элемент       = СписокПоиска.Получить(СчетчикЭлементов);
			
			Если Элемент.Метаданные = Метаданные.Справочники.Номенклатура Тогда
				РезультатПоиска.Номенклатура.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ДополнительныеСведения Тогда
				
				Если ТипЗнч(Элемент.Значение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
					РезультатПоиска.Номенклатура.Добавить(Элемент.Значение.Объект);
				КонецЕсли;
				
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
				МассивШтрихкодов.Добавить(Элемент.Значение.Штрихкод);
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
				МассивХарактеристик.Добавить(Элемент.Значение);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
			КонецЕсли;
			
		КонецЦикла;
		
		НачальнаяПозиция    = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоНайденныхЭлементов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			
			КонечнаяПозиция = ?(КоличествоНайденныхЭлементов > НачальнаяПозиция + РазмерПорции,
			                    РазмерПорции,
			                    КоличествоНайденныхЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивШтрихкодов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&МассивШтрихкодов)");
		Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивХарактеристик.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ ХарактеристикиНоменклатуры.Недействителен
		|	И ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатуры.Владелец) = ТИП(Справочник.Номенклатура)
		|	И ХарактеристикиНоменклатуры.Ссылка В (&МассивХарактеристик)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	НЕ ХарактеристикиНоменклатуры.Недействителен
		|	И ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатуры.Владелец) = ТИП(Справочник.КатегорииНоменклатуры)
		|	И ХарактеристикиНоменклатуры.Ссылка В (&МассивХарактеристик)";
		
		Запрос.УстановитьПараметр("МассивХарактеристик", МассивХарактеристик);
		Результат = Запрос.ВыполнитьПакет();
		
		РезультатПоНоменклатуре = Результат[0].Выбрать();
		
		Пока РезультатПоНоменклатуре.Следующий() Цикл
			РезультатПоиска.Номенклатура.Добавить(РезультатПоНоменклатуре.Ссылка);
		КонецЦикла;
		
		МассивКатегорий = Результат[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если МассивКатегорий.Количество() Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.КатегорияНоменклатуры В(&МассивКатегорий)
			|	И НЕ Номенклатура.Недействителен";
			
			Запрос.УстановитьПараметр("МассивКатегорий", МассивКатегорий);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "ВыполненоУспешно";
	
КонецФункции

&НаСервере
Процедура _УстановитьОтборы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"_КатегорияРазмещения", _КатегорияРазмещения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(_КатегорияРазмещения));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"_ФорматРазмещения", _ФорматРазмещения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(_ФорматРазмещения));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ТекущаяСтраницаНоменклатуры], 
		"_МестоРазмещения", _МестоРазмещения, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(_МестоРазмещения));
	
КонецПроцедуры

&НаКлиенте
Процедура _КатегорияРазмещенияПриИзменении(Элемент)
	
	_УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура _ФорматРазмещенияПриИзменении(Элемент)
	_УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура _МестоРазмещенияПриИзменении(Элемент)
	_УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура _ФорматРазмещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("КатегорияРазмещения", _КатегорияРазмещения);
	ОткрытьФорму("Справочник._ФорматыРазмещения.ФормаВыбора", ПараметрыФормы, Элемент);
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти
