
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ИсключитьСсылку;
	
	Параметры.Свойство("Формула", Формула);
	Параметры.Свойство("Ссылка", ИсключитьСсылку);
	
	Если Параметры.Свойство("ИдентификаторВидаЦен") Тогда
		
		ИсключитьСсылку = ЦенообразованиеФормулыСервер.НайтиВидЦенПоИдентификатору(Параметры.ИдентификаторВидаЦен).ВидЦен;
		
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ЦеныКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	КэшЗначений.Вставить("ОперандНачало", ЦенообразованиеФормулыСервер.СтрокаНачалаОперанда());
	КэшЗначений.Вставить("ОперандКонец", ЦенообразованиеФормулыСервер.СтрокаКонцаОперанда());
	
	ЭтоФормированиеЦен = Ложь;
	Если Параметры.Свойство("ЭтоФормированиеЦен") Тогда
		
		ЭтоФормированиеЦен = Параметры.ЭтоФормированиеЦен;
		
	КонецЕсли;
	
	ЗаполнитьДеревоОперандов(ИсключитьСсылку, ЭтоФормированиеЦен, Истина, КэшЗначений.ЦеныКонтрагентов);
	ЗаполнитьДеревоОператоров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И Модифицированность И НЕ ПустаяСтрока(Формула) Тогда
		Отказ = Истина;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверкаМодифицированности", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
		Текст = НСтр("ru = 'Формула была изменена. Закрыть редактор без сохранения изменений?'");
		ПоказатьВопрос(ОповещениеОЗакрытии, Текст, СписокКнопок, , КодВозвратаДиалога.Отмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМодифицированности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	ОператорыДопускающуюЗапятую = Новый Массив;
	ОператорыДопускающуюЗапятую.Добавить("Мин");
	ОператорыДопускающуюЗапятую.Добавить("Макс");
	ОператорыДопускающуюЗапятую.Добавить("Окр");
	
	КоличествоДопустимыхЗапятых = 0;
	Для каждого ЭлементМассива Из ОператорыДопускающуюЗапятую Цикл
		
		КоличествоДопустимыхЗапятых = КоличествоДопустимыхЗапятых + СтрЧислоВхождений(ВРЕГ(Формула), ВРЕГ(ЭлементМассива));
		
	КонецЦикла;
	
	КоличествоЗапятых = СтрЧислоВхождений(Формула, ",");
	Если КоличествоЗапятых > КоличествоДопустимыхЗапятых Тогда
		
		ТекстСообщения = НСтр("ru ='Для указания дробной части необходимо использовать точку, а не запятую.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Формула");
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВставки = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
	
	ВставитьТекстВФормулу(ТекстВставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Операторы.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.Количество() < 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПараметрыПеретаскивания.Значение[0];
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ДополнительнаяОбработкаФормулы();
	Модифицированность = Ложь;
	Закрыть(Новый Структура("Результат, Формула", КодВозвратаДиалога.Да, Формула));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	Перем Ошибки;
	
	ОчиститьСообщения();
	ПроверитьФормулуНаСервере(Ошибки);
	
	Если Ошибки = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru ='Формула пригодна для расчетов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru ='Проверка формулы'"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьРасчетныйОперанд(НоваяГруппа, НаименованиеОперанда, ПредставлениеОперанда, ЭтоВидЦенНоменклатуры = Неопределено, ИндексКартинка = 0)
	
	НоваяСтрока = НоваяГруппа.Строки.Добавить();
	
	НоваяСтрока.Операнд					= НаименованиеОперанда;
	НоваяСтрока.Представление			= ПредставлениеОперанда;
	НоваяСтрока.ЭтоВидЦенНоменклатуры	= ЭтоВидЦенНоменклатуры;
	НоваяСтрока.Картинка				= ИндексКартинка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОперандов(ИсключитьСсылку, ЭтоФормированиеЦен, ВключаяЦеныНоменклатуры, ВключаяЦеныКонтрагентов)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦен.ИдентификаторФормул КАК Операнд,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЦен.Ссылка) КАК Представление,
	|	ИСТИНА КАК ЭтоВидЦенНоменклатуры,
	|	0 КАК Картинка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка <> &ИсключитьСсылку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦенКонтрагентов.ИдентификаторФормул,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЦенКонтрагентов.Ссылка),
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ЭтоВидЦенНоменклатуры = ИСТИНА
	|			ТОГДА ""ЦЕНЫ НОМЕНКЛАТУРЫ""
	|		ИНАЧЕ ""ЦЕНЫ КОНТРАГЕНТОВ""
	|	КОНЕЦ КАК Представление,
	|	1 КАК Картинка
	|ПО
	|	ЭтоВидЦенНоменклатуры");
	
	Запрос.УстановитьПараметр("ИсключитьСсылку", ИсключитьСсылку);
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ЭтоФормированиеЦен Тогда
		
		НоваяГруппа 				= ДеревоРезультата.Строки.Вставить(0);
		НоваяГруппа.Картинка		= 1;
		НоваяГруппа.Представление	= НСтр("ru ='РАСЧЕТНЫЕ ЗНАЧЕНИЯ'");
		
		ДобавитьРасчетныйОперанд(НоваяГруппа, "ТекущееЗначение",		НСтр("ru ='Текущее значение'"));
		ДобавитьРасчетныйОперанд(НоваяГруппа, "ПоследняяЦенаВПриходе",	НСтр("ru ='Последняя цена поступления'"));
		ДобавитьРасчетныйОперанд(НоваяГруппа, "ПоследняяЦенаВРасходе",	НСтр("ru ='Последняя цена реализации'"));
		
		Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			
			Если Справочники.Валюты.НайтиПоКоду("840") <> Неопределено Тогда
				
				ДобавитьРасчетныйОперанд(НоваяГруппа, "КурсДоллара", 	НСтр("ru ='Текущий курс доллара'"));
				
			КонецЕсли;
			
			Если Справочники.Валюты.НайтиПоКоду("978") <> Неопределено Тогда
				
				ДобавитьРасчетныйОперанд(НоваяГруппа, "КурсЕвро", 		НСтр("ru ='Текущий курс евро'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьРасчетныйОперанд(НоваяГруппа, "Себестоимость", 			НСтр("ru ='Себестоимость'"));
		
		Если Константы.ВалютаУчета.Получить() <> Константы.НациональнаяВалюта.Получить() Тогда
			
			ДобавитьРасчетныйОперанд(НоваяГруппа, "СебестоимостьНацВалюта", НСтр("ru ='Себестоимость (нац. валюта)'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключаяЦеныНоменклатуры = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти("ЦЕНЫ НОМЕНКЛАТУРЫ", "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти("ЦЕНЫ КОНТРАГЕНТОВ", "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоРезультата, "ДеревоОперандов");
	
КонецПроцедуры

&НаКлиенте
Функция ПередДобавлениемТекстаВФормулу(ЗНАЧ ТекстВставки)
	
	ПараметрыДобавленияТекста = Новый Структура("ТекстВставки, ЗаменитьТекстФормулы, Отказ", ТекстВставки, Ложь, Ложь);
	
	ДанныеОперанда = Элементы.ДеревоОперандов.ТекущиеДанные;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%1"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%5"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%20"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%50"
		Тогда
		
		Если ДанныеОперанда = Неопределено 
			ИЛИ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ТекстСообщения = НСтр("ru ='Укажите вид цен, от которого необходимо вычислить процент'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДеревоОперандов");
			
			ПараметрыДобавленияТекста.Отказ = Истина;
			Возврат ПараметрыДобавленияТекста;
			
		Иначе
			
			ПредставлениеЧисло = СтрЗаменить(ТекстВставки, "%", "");
			ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон(" + (%1", КэшЗначений.ОперандНачало) + ДанныеОперанда.Операнд + СтрШаблон("%1 / 100 * ", КэшЗначений.ОперандКонец) + ПредставлениеЧисло + ".0)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "ЕСЛИ" Тогда
		
		ПервоеЗначениеУсловногоОператора = "<?>";
		Если НЕ ПустаяСтрока(Формула) Тогда
			
			ПервоеЗначениеУсловногоОператора = Формула;
			Формула = "";
			ПараметрыДобавленияТекста.ЗаменитьТекстФормулы = Истина;
			
		ИначеЕсли ДанныеОперанда <> Неопределено 
			И НЕ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ПервоеЗначениеУсловногоОператора = КэшЗначений.ОперандНачало + ДанныеОперанда.Операнд + КэшЗначений.ОперандКонец;
			
		КонецЕсли;
		
		ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон("#ЕСЛИ <Условие>%1%2#ТОГДА %3%1%2#ИНАЧЕ <?>%1#КОНЕЦЕСЛИ", Символы.ПС, Символы.Таб, ПервоеЗначениеУсловногоОператора);
		
	КонецЕсли;
	
	Возврат ПараметрыДобавленияТекста;
	
КонецФункции

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки, ЗаменитьТекстФормулы = Ложь)
	
	Если ПустаяСтрока(ТекстВставки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЗаменитьТекстФормулы Тогда
		
		Формула = ТекстВставки;
		Возврат;
		
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		
		Формула = Формула + ТекстВставки;
		
	#Иначе
		
		СтрокаНач = 0;
		СтрокаКон = 0;
		КолонкаНач = 0;
		КолонкаКон = 0;
		
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстВставки)) > Элементы.Формула.Ширина / 8 Тогда
			
			Элементы.Формула.ВыделенныйТекст = "";
			
		КонецЕсли;
			
		Элементы.Формула.ВыделенныйТекст = ТекстВставки;
		
	#КонецЕсли
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОператоров()
	
	ДеревоОператоров = РеквизитФормыВЗначение("Операторы", Тип("ДеревоЗначений"));
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='АРИФМЕТИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Сложение ""+""'");
	НоваяСтрока.Оператор		= " + ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Вычитание ""-""'");
	НоваяСтрока.Оператор		= " - ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Умножение ""*""'");
	НоваяСтрока.Оператор		= " * ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Деление ""/""'");
	НоваяСтрока.Оператор		= " / ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ЛОГИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Если...Иначе...КонецЕсли'");
	НоваяСтрока.Оператор		= "ЕСЛИ"; // "#ЕСЛИ <Условие> #ТОГДА <?> #ИНАЧЕ <?> #КОНЕЦЕСЛИ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>'");
	НоваяСтрока.Оператор		= " > ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>='");
	НоваяСтрока.Оператор		= " >= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<'");
	НоваяСтрока.Оператор		= " < ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<='");
	НоваяСтрока.Оператор		= " <= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='='");
	НоваяСтрока.Оператор		= " = ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<>'");
	НоваяСтрока.Оператор		= " <> ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='И'");
	НоваяСтрока.Оператор		= " И ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИЛИ'");
	НоваяСтрока.Оператор		= " ИЛИ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='НЕ'");
	НоваяСтрока.Оператор		= " НЕ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИСТИНА'");
	НоваяСтрока.Оператор		= " ИСТИНА ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ЛОЖЬ'");
	НоваяСтрока.Оператор		= " ЛОЖЬ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Открывающая скобка ""(""'");
	НоваяСтрока.Оператор		= " (";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Закрывающая скобка "")""'");
	НоваяСтрока.Оператор		= ") ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ФУНКЦИИ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Максимум'");
	НоваяСтрока.Оператор		= " Макс(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Минимум'");
	НоваяСтрока.Оператор		= " Мин(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Целая часть'");
	НоваяСтрока.Оператор		= " Цел(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Округление'");
	НоваяСтрока.Оператор		= " Окр(<?>,<Точность?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Предопределенное значение'");
	НоваяСтрока.Оператор		= " ПредопределенноеЗначение(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Значение заполнено'");
	НоваяСтрока.Оператор		= " ЗначениеЗаполнено(<?>)";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ШАБЛОНЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""1%""'");
	НоваяСтрока.Оператор		= " %1";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""5%""'");
	НоваяСтрока.Оператор		= " %5";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""20%""'");
	НоваяСтрока.Оператор		= " %20";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""50%""'");
	НоваяСтрока.Оператор		= " %50";
	
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуНаСервере(Ошибки)
	
	ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, Формула);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУмножениеВФормулу()
	
	// Процедура заменяет "][" на "]*["
	ТаблицаВставок = Новый ТаблицаЗначений;
	ТаблицаВставок.Колонки.Добавить("ПозицияНачалаОперанда");
	ТаблицаВставок.Колонки.Добавить("ПозицияКонцаОперанда");
	
	НачалоОперанда	= ЦенообразованиеФормулыСервер.СтрокаНачалаОперанда();
	КонецОперанда	= ЦенообразованиеФормулыСервер.СтрокаКонцаОперанда();
	
	ПозицияНачалаОперанда = 0;
	ПозицияКонцаОперанда = 0;
	
	СтрокаМежду			= "";
	ДлинаСтроки 		= СтрДлина(Формула);
	Для ИндексСимвола = 0 По ДлинаСтроки Цикл
		
		Символ = Сред(Формула, ИндексСимвола, 1);
		Если Символ = КонецОперанда Тогда
			
			СтрокаМежду 			= "";
			ПозицияКонцаОперанда 	= ИндексСимвола;
			ПозицияНачалаОперанда	= 0;
			
		ИначеЕсли Символ = НачалоОперанда Тогда
			
			ПозицияНачалаОперанда	= ИндексСимвола;
			
		КонецЕсли;
			
		Если ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда = 0
			И Символ <> КонецОперанда Тогда
			
			СтрокаМежду = СтрокаМежду + Символ;
			
		ИначеЕсли ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда <> 0 Тогда
			
			Если ПустаяСтрока(СокрЛП(СтрокаМежду)) Тогда
				
				НоваяСтрока							= ТаблицаВставок.Добавить();
				НоваяСтрока.ПозицияНачалаОперанда	= ПозицияНачалаОперанда;
				НоваяСтрока.ПозицияКонцаОперанда	= ПозицияКонцаОперанда;
				
			КонецЕсли;
			
			СтрокаМежду				= "";
			ПозицияНачалаОперанда	= 0;
			ПозицияКонцаОперанда	= 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВставок = ТаблицаВставок.Количество();
	Если КоличествоВставок > 0 Тогда
		
		Пока КоличествоВставок <> 0 Цикл
			
			СтрокаТаблицы = ТаблицаВставок.Получить(КоличествоВставок - 1);
			
			ПерваяПодстрока = Лев(Формула, СтрокаТаблицы.ПозицияКонцаОперанда);
			ВтораяПодстрока = Сред(Формула, СтрокаТаблицы.ПозицияНачалаОперанда);
			
			Формула 		= ПерваяПодстрока + " * " + ВтораяПодстрока;
			
			КоличествоВставок = КоличествоВставок - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительнаяОбработкаФормулы()
	
	ДобавитьУмножениеВФормулу();
	
КонецПроцедуры

#КонецОбласти

