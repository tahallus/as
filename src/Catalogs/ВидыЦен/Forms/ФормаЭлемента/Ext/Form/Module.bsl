
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьДоступностьИТекстПодсказкиАвторасчета();
	УстановитьТекстДекорацииПредупреждения();

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.РегистрыСведений.ЦеныНоменклатуры, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьТекстДекорацииПредупреждения();
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИзмененаВалюта", Ложь);
	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("ПроизвольныйЗапрос", Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	КэшЗначений.Вставить("РучнаяКорректировкаФлага", Ложь);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("ПараметрыДлительнойОперации", Новый Структура);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатЗагрузки",	Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания","");
	КэшЗначений.Вставить("РассчитыватьАвтоматически", Истина);
	КэшЗначений.Вставить("ХранилищеНастроекКомпоновкиДанных", Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных);
	КэшЗначений.Вставить("ХранилищеСхемыКомпоновкиДанных", Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных);
	
	// Заполнение списка схем компоновки данных.
	ПризнакПредопределенногоМакета = ВРег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Макеты = Метаданные.Справочники.ВидыЦен.Макеты;
	
	Для Каждого Макет Из Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'")); 
	
	УстановитьПараметрыВыбораБазовогоВидаЦены();
	
	ИспользоватьРасширеннуюНастройкуОкругления = ИспользуютсяРасширенныеНастройкиОкругления(ЭтаФорма);
	
	ОбновитьПредставлениеУточнениеНастроекОкругления();
	ОбновитьПредставлениеУточнениеНастроекРасчета();

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("РассчитыватьАвтоматически") И НЕ Параметры.РассчитыватьАвтоматически Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Параметры);	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически", 
			"Доступность", Ложь);
		Элементы.РассчитыватьАвтоматически.РасширеннаяПодсказка.Заголовок = 
			НСтр("ru = 'Не может использоваться в розничных складах и продажах.'");
		КэшЗначений.Вставить("РассчитыватьАвтоматически", Ложь);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
		
		Объект.ВалютаЦены = КэшЗначений.НациональнаяВалюта;
		
	КонецЕсли;
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
	Пример = 987654.321;
	Если ПустаяСтрока(Объект.ФорматЦены) Тогда
		
		Объект.ФорматЦены = "ЧЦ='15'; ЧДЦ='2'";
		
	КонецЕсли;
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВидимостьИдентификатора",	"Пометка",		Объект.КоличествоПопытокСлужебный > 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты",		"Видимость",	Объект.КоличествоПопытокСлужебный > 1);
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент ИЛИ Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены",			"Видимость",	ВидимостьКнопкиРасчетаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипВидаЦен",					"Доступность",	ОтсутствуютЗаписиЦен(Объект.Ссылка));
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	
	ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр ИЛИ НЕ РазрешеноРедактированиеЦенДокументов;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.ЦенаВключаетНДС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр("ru ='НДС сверху'"));
		Элементы.ФорматЦены.Доступность = Ложь;
		
	Иначе
		
		Элементы.ФорматЦены.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементов();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ИзменилсяРозничныйВидЦены", 
		Новый Структура("РассчитыватьАвтоматически", Объект.РассчитыватьАвтоматически), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
		
		ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, Объект.Формула);
		Для каждого СтрокаЦеновойГруппы Из Объект.ЦеновыеГруппы Цикл
			
			ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, СтрокаЦеновойГруппы.Формула);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Тогда
		
		ПроверитьЗначениеВалюты(Ошибки);
		
	Иначе
		
		Справочники.ВидыЦен.ПроверитьДублированиеЦеновыхГрупп(Ошибки, Объект.ЦеновыеГруппы.Выгрузить());
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("СправочникВидЦенЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический) ИЛИ (Объект.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос);
	
КонецПроцедуры //ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьВсеТекущиеЦены", КэшЗначений.ИзмененаВалюта);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьРегистрациюОчередиЦен", ПропуститьРегистрациюОчередиЦен);
	
	Если ТекущийОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если КэшЗначений.ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
				Если Не ЦенообразованиеСервер.ПроверитьСхемуКомпоновкиДанных(КэшЗначений.ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо настроить схему компоновки данных для заполнения цен.'"), Объект.Ссылка,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = КэшЗначений.ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = КэшЗначений.ХранилищеСхемыКомпоновкиДанных;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	#Если МобильныйКлиент Тогда
		
		Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр("ru ='НДС сверху'"));
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВидаЦенПриИзменении(Элемент)
	
	Объект.РассчитыватьАвтоматически = (Объект.ТипВидаЦен <> КэшЗначений.Статический)
		И (Объект.ТипВидаЦен <> КэшЗначений.ПроизвольныйЗапрос)
		И КэшЗначений.РассчитыватьАвтоматически;
	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический)
		И (Объект.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерПриИзменении(Элемент)
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	
	ПриИзмененииНастроекОкругленияФормы();           
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);	
	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления(); 
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	
	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)
	
	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПриИзменении элемента формы "БазовыйВидЦен"
//
// Имеет смысл только для динамических типов цен, т.к. из базовых берется валюта и 
// значение параметра ЦенаВключаетНДС
//
Процедура БазовыйВидЦенПриИзменении(Элемент)
	
	ДанныеБазовойЦены 		= ПолучитьДанныеБазовойЦены(Объект.БазовыйВидЦен);
	
	Объект.ВалютаЦены 		= ДанныеБазовойЦены.ВалютаЦены;
	Объект.ЦенаВключаетНДС 	= ДанныеБазовойЦены.ЦенаВключаетНДС;
	
КонецПроцедуры // БазовыйВидЦенПриИзменении()

&НаКлиенте
Процедура ФормулаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Результат = КодВозвратаДиалога.Да Тогда
		
		Результат.Свойство("Формула", Объект.Формула);
		ЭтотОбъект.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СообщениеПользователю = "";
	СформироватьНовыйИдентификатор(СообщениеПользователю);
	
	Если НЕ ПустаяСтрока(СообщениеПользователю) Тогда
		
		ПоказатьПредупреждение(, СообщениеПользователю, , НСтр("ru ='Внимание!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьАвтоматическиПриИзменении(Элемент)
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически 
		И (Объект.ТипВидаЦен <> КэшЗначений.Статический) 
		И (Объект.ТипВидаЦен <> КэшЗначений.ПроизвольныйЗапрос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены", "Видимость", ВидимостьКнопкиРасчетаЦен);
	УстановитьДоступностьИТекстПодсказкиАвторасчета();
	УстановитьТекстДекорацииПредупреждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныАктуальныПриИзменении(Элемент)
	
	КэшЗначений.РучнаяКорректировкаФлага = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРегистрациюПриЗаписиПриИзменении(Элемент)
	
	УстановитьЗаголовокКомандыЗаписатьИЗакрыть()
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru ='Удалить текущие цены'"));
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru ='Сохранить текущие цены'"));
	
	ТекстВопроса = НСтр("ru ='Текущие цены были рассчитаны по предыдущей валюте и, возможно, 
		|они могут быть не актуальны для новой валюты. 
		|Рекомендуем удалить текущие значения и рассчитать новые цены.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбИзмененииВалюты", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ВариантыОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбИзмененииВалюты(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		КэшЗначений.ИзмененаВалюта = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасширеннуюНастройкуОкругленияПриИзменении(Элемент)
	
	ПриИзмененииНастроекОкругленияФормы();           
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);	
	
	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления(); 
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура ПсихологическоеОкруглениеПриИзменении(Элемент)
	
	ПриИзмененииНастроекОкругленияФормы();           
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);	
	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления(); 
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНастроекОкругленияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиУточнения("УточнениеНастроекОкругления");

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНастроекРасчетаЗависимыхПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФормуНастройкиУточнения("УточнениеПороговСрабатывания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорогСрабатыванияПриУвеличенииПриИзменении(Элемент)
	
	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();

КонецПроцедуры

&НаКлиенте
Процедура ПорогСрабатыванияПриУменьшенииПриИзменении(Элемент)
	
	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
	
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппам(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипВидаЦен",		Объект.ТипВидаЦен);
	ПараметрыОткрытия.Вставить("Формула",			Объект.Формула);
	ПараметрыОткрытия.Вставить("БазовыйВидЦен",		Объект.БазовыйВидЦен);
	ПараметрыОткрытия.Вставить("Процент",			Объект.Процент);
	ПараметрыОткрытия.Вставить("ЦеновыеГруппы",		Объект.ЦеновыеГруппы);
	ПараметрыОткрытия.Вставить("Наименование",		Объект.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УточнитьРасчетПоЦеновымГруппамЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаЭлементаЦеновыеГруппы", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		Объект.ЦеновыеГруппы.Очистить();
		Для каждого СтрокаТаблицы Из Результат.ЦеновыеГруппы Цикл
			
			НоваяСтрока = Объект.ЦеновыеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизиты(Команда)
	
	Элементы.ФормаВидимостьИдентификатора.Пометка = НЕ Элементы.ФормаВидимостьИдентификатора.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты", "Видимость", Элементы.ФормаВидимостьИдентификатора.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦены(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru ='Внимание!
		|Все цены по этой колонке прайс-листа будут удалены. 
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаПроУдалениеЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаПроУдалениеЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОчередьРасчетаЦен(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru ='Внимание!
		|Очередь расчета цен будет очищена.
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаОчисткиОчередиЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаОчисткиОчередиЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьОчередьРасчетаЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦены(Команда)
	Перем ОписаниеОшибки;
	
	Если Модифицированность = Истина Тогда
		
		ТекстВопроса = НСтр("ru ='Для расчета цен необходимо записать текущий объект.
		|Записать и продолжить?'");
		
		ДополнительныеПараметры = Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗаписиВидаЦен", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОЗаписиВидаЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокСлужебныйНажатие(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСервисныеВозможности", "Видимость", (ВРЕГ(Лев(Объект.ОписаниеОшибки, 5)) = "IDDQD"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЦеныНажатие(Элемент, СтандартнаяОбработка)
	
#Если НЕ МобильныйКлиент Тогда
	
	СтандартнаяОбработка = Ложь;
	
	Конструктор = Новый КонструкторФорматнойСтроки(Объект.ФорматЦены);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Показать(Новый ОписаниеОповещения("ФорматированиеЦеныЗавершение",ЭтаФорма));
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЦеныЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ФорматЦены = ?(ПустаяСтрока(Результат), "ЧЦ='15'; ЧДЦ='2'", Результат);
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегламентныеИФоновыеЗаданияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязиВидовЦенНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.СвязиВидовЦенСлужебный.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезРегистрацииНовыхЦен(Команда)
	
	ПропуститьРегистрациюОчередиЦен = Истина;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОчередиРасчетаЦен(Команда)
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСКД(Команда)

	// Открыть редактор настроек схемы компоновки данных     
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрШаблон(НСтр("ru = 'Настройте схему компоновки данных для вида цены ""%1""'"), Объект.Наименование);
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	АдресХранилищаНастройкиКомпоновщика = Неопределено;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПомещатьНастройкиВСхемуКомпоновкиДанных", Ложь);	
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных", Истина);  	
	ПараметрыФормы.Вставить("ЗагрузитьСхемуИзФайла", Истина); 		
	ПараметрыФормы.Вставить("НастраиватьОтбор", Истина);
	ПараметрыФормы.Вставить("НастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", Адреса.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", Адреса.НастройкиКомпоновкиДанных);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);	
		
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение",
			ЭтотОбъект,
			Новый Структура("Адреса", Адреса)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	КонецПроцедуры

	&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Адреса = ДополнительныеПараметры.Адреса; 
	
	АдресХранилищаНастройкиКомпоновщика = Результат;
	
	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
	    ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииНастроекОкругленияФормы()
	
	Объект.ПравилаОкругленияЦены.Очистить();
	НоваяСтрока = Объект.ПравилаОкругленияЦены.Добавить();
	НоваяСтрока.ТочностьОкругления = Объект.ПорядокОкругления;	
	НоваяСтрока.ПсихологическоеОкругление = Объект.ПсихологическоеОкругление;        
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоСтатический = (Объект.ТипВидаЦен = КэшЗначений.Статический);
	ЭтоДинамическийПроцент = (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент);
	ЭтоДинамическийФормула = (Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	ЭтоПроизвольныйСКД	   = (Объект.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически", "Видимость", (НЕ ЭтоСтатический) И (НЕ ЭтоПроизвольныйСКД));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнитьРасчетПоЦеновымГруппам", "Видимость", (НЕ ЭтоСтатический) И (НЕ ЭтоПроизвольныйСКД));  
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийПроцент", "Видимость", ЭтоДинамическийПроцент);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаЦены", 				"Видимость", НЕ ЭтоДинамическийПроцент);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийФормула", "Видимость", ЭтоДинамическийФормула); 	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПроизвольныйСКД", "Видимость", ЭтоПроизвольныйСКД);   
	
	УстановитьВидимостьПолейОкругления();	
	УстановитьЗаголовокКомандыЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКомандыЗаписатьИЗакрыть()
	
	Если Объект.ТипВидаЦен = ПредопределенноеЗначение("Перечисление.ТипыВидовЦен.Статический")
		ИЛИ Объект.ТипВидаЦен = ПредопределенноеЗначение("Перечисление.ТипыВидовЦен.ПроизвольныйЗапрос") 
		ИЛИ ПропуститьРегистрациюОчередиЦен
		Тогда
		
		ТекстЗаголовка = НСтр("ru =''");
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru ='Регистрировать новые цены и закрыть'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает детальные данные из базовой цены
// используется только если текущий элемент имеет 
// динамический вид
//
Функция ПолучитьДанныеБазовойЦены(БазовыйВидЦен)
	
	Возврат Новый Структура("ВалютаЦены, ЦенаВключаетНДС", 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ВалютаЦены, Справочники.Валюты.ПустаяСсылка()), 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ЦенаВключаетНДС, Ложь));
	
КонецФункции // ПолучитьДанныеБазовойЦены()

&НаСервереБезКонтекста
Функция ОбновитьДанныеОчередиРасчетаЦенНаСервере(ВидЦенСсылка)
	
	ДанныеОчередиЦен = Новый Структура("КоличествоЗаписейВОчередиЦен, ВакантныйНомерОчередиРасчетаЦен", 0, 0);
	
	Если ЗначениеЗаполнено(ВидЦенСсылка) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ Сумма(1) КАК КоличествоЗаписейВОчередиЦен ИЗ РегистрСведений.ОчередьРасчетаЦен ГДЕ ВидЦенРасчетный = &ВидЦенРасчетный");
		Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен = Выборка.КоличествоЗаписейВОчередиЦен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен = Константы.ВакантныйНомерОчередиРасчетаЦен.Получить();
	
	Возврат ДанныеОчередиЦен;
	
КонецФункции

&НаСервере
// Процедура создает новый идентификатор вида цены.
// В последствии данный идентификатор может использоваться в формулах.
//
Процедура СформироватьНовыйИдентификатор(СообщениеПользователю)
	
	Если НЕ ПустаяСтрока(Объект.Ссылка) Тогда
		
		ОписаниеИспользования = ПроверитьВидЦенНаИспользованиеВФормулах(Объект.Ссылка);
		Если ОписаниеИспользования <> Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru ='Необходимо проверить формулы динамических видов цен:%1'");
			
			ВидыЦенСтрокой = "";
			Для каждого СтруктураОписания Из ОписаниеИспользования Цикл
				
				ВидыЦенСтрокой = ВидыЦенСтрокой + Символы.ПС + СтруктураОписания.Наименование;
				
			КонецЦикла;
			
			СообщениеПользователю = СтрШаблон(ШаблонСообщения, ВидыЦенСтрокой);
			
			ЗаписьЖурналаРегистрации(ЦенообразованиеСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ВидыЦен, Объект.Ссылка, СообщениеПользователю);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(Объект.ИдентификаторФормул, Объект.Наименование);
	
КонецПроцедуры // СформироватьНовыйИдентификатор()

&НаКлиенте
// Процедура открывает конструктор формулы
//
Процедура ОткрытьКонструкторФормулы()
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормулы = Новый Структура("Ссылка, Формула", Объект.Ссылка, Объект.Формула);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, Элементы.Формула,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОткрытьКонструкторФормулы()

&НаСервере
Процедура УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(ВидЦен)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");
		
	КонецЕсли;
	
	Справочники.ВидыЦен.УдалитьВсеЦеныПоВидуЦен(ВидЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетЦенНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидЦен", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("РасчетИзВидаЦен", Истина);
		ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФорматаЦен()
	
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПример(ЧисловоеЗначение, ПсихологическоеОкругление, ПорядокОкругления, ОкруглятьВБольшуюСторону, ФорматнаяСтрока)
	
	ЦенаПример = ЦенообразованиеСервер.ОкруглитьЦену(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	ЦенаПример = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЦенаПример, ПсихологическоеОкругление); 
	Возврат Формат(ЦенаПример, ФорматнаяСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен()
	
	СтруктураЗаголовка = Новый Структура("ТретийПараметр, ЧетвертыйПараметр", "", "");
	СтруктураЗаголовка.Вставить("ПервыйПараметр", ?(ИспользоватьРасширеннуюНастройкуОкругления, НСтр("ru = 'Цены по диапазонам'"), НСтр("ru = 'Все цены'")));
	СтруктураЗаголовка.Вставить("ВторойПараметр", ?(НЕ Объект.ОкруглятьВБольшуюСторону, НСтр("ru = 'Арифметическим'"), НСтр("ru = 'В большую сторону'")));
	СтруктураЗаголовка.Вставить("ИспользоватьРасширеннуюНастройкуОкругления", ИспользоватьРасширеннуюНастройкуОкругления);
	СтруктураЗаголовка.Вставить("ПорядокОкругления", Объект.ПорядокОкругления);
	СтруктураЗаголовка.Вставить("ПсихологическоеОкругление", Объект.ПсихологическоеОкругление);

	ЗаголовокСвернутого = ЦенообразованиеКлиентСервер.ПолучитьКраткоеОписаниеСпособаОкругленияВидаЦены(СтруктураЗаголовка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФорматЦен", "ЗаголовокСвернутогоОтображения", ЗаголовокСвернутого);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания()
	
	ПервыйПараметр = ?(ЗначениеЗаполнено(Объект.ПорогСрабатыванияПриУвеличении), НСтр("ru = 'при >='") + Объект.ПорогСрабатыванияПриУвеличении + "% ", "");
	ВторойПараметр = ?(ЗначениеЗаполнено(Объект.ПорогСрабатыванияПриУменьшении), НСтр("ru = 'при <='") + Объект.ПорогСрабатыванияПриУменьшении + "% ", "");
	ТретийПараметр = ?(Объект.ПорогиСрабатывания.Количество()> 0, НСтр("ru = 'есть уточнения по ценовым группам'"), "");

	ИлиПараметр = ?(ЗначениеЗаполнено(ПервыйПараметр) И ЗначениеЗаполнено(ВторойПараметр), 
		НСтр("ru = 'или'"), "");
	ИПараметр = ?((ЗначениеЗаполнено(ПервыйПараметр) ИЛИ ЗначениеЗаполнено(ВторойПараметр)) И ЗначениеЗаполнено(ТретийПараметр), 
		НСтр("ru = 'и'"), "");
	
	Если НЕ ЗначениеЗаполнено(ПервыйПараметр)
		И НЕ ЗначениеЗаполнено(ВторойПараметр)
		И НЕ ЗначениеЗаполнено(ТретийПараметр)
		Тогда
		
		ЗаголовокСвернутого = НСтр("ru = 'Пороги расчета цен: не используются'");
		
	Иначе
		
		ЗаголовокСвернутого = СтрШаблон(НСтр("ru = 'Пороги расчета цен: %1 %2 %3 %4 %5'"), ПервыйПараметр, ИлиПараметр, ВторойПараметр, ИПараметр, ТретийПараметр);	
		
	КонецЕсли;   
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПорогиСрабатывания", "ЗаголовокСвернутогоОтображения", ЗаголовокСвернутого);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУточнениеНастроекРасчета()
	
	Если Объект.ПорогиСрабатывания.Количество() = 0 Тогда
		УточнениеНастроекРасчетаЗависимыхПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить пороги расчета цен'"),,,,"Изменить");
	Иначе
		
		Если Объект.ПорогиСрабатывания.Количество() > 1 
			ИЛИ (Объект.ПорогиСрабатывания.Количество() = 1) Тогда
			РасшифровкаНастроекРасчета = НСтр("ru = '%1%2'");
			ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
			
			МассивПравил = Новый Массив();
			
			Порог = Объект.ПорогиСрабатывания[0];       
			
			ПерваяСтрока = СтрШаблон(НСтр("ru = '%1 >= %2%% или <= %3%%'"),Порог.ЦеноваяГруппа, Порог.ПорогСрабатыванияПриУвеличении, Порог.ПорогСрабатыванияПриУменьшении);
			
			КоличествоОстальных = Объект.ПорогиСрабатывания.Количество() - 1;
			
			ВтораяСтрока = "";
			Если КоличествоОстальных > 0 Тогда
				
				ВтораяСтрока = СтрШаблон(" %1 %2", НСтр("ru = 'и еще'"), КоличествоОстальных); 
				
			КонецЕсли;
			
			РасшифровкаНастроекРасчета = СтрШаблон(РасшифровкаНастроекРасчета, ПерваяСтрока, ВтораяСтрока);
			
		Иначе

			РасшифровкаНастроекРасчета = НСтр("ru = 'Настроить пороги расчета цен'");
					
		КонецЕсли;
				
		УточнениеНастроекРасчетаЗависимыхПредставление = Новый ФорматированнаяСтрока(РасшифровкаНастроекРасчета,,,,"Изменить");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтсутствуютЗаписиЦен(ТекущаяСсылка)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 РегистрСведений.ЦеныНоменклатуры.Номенклатура ГДЕ РегистрСведений.ЦеныНоменклатуры.ВидЦен = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ТекущаяСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен)
	
	Возврат ЦенообразованиеФормулыСервер.ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗначениеВалюты(Ошибки)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Склады.Ссылка КАК Склад ИЗ Справочник.СтруктурныеЕдиницы КАК Склады ГДЕ Склады.РозничныйВидЦен = &РозничныйВидЦен");
	Запрос.УстановитьПараметр("РозничныйВидЦен", Объект.Ссылка);
	
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВалютаЦены <> КэшЗначений.НациональнаяВалюта Тогда
		
		ТекстСообщения = НСтр("ru = 'Текущий вид цен используется в розничных структурных единицах, по этому для него можно использовать только национальную валюту.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ВалютаЦены", ТекстСообщения, "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОчередьРасчетаЦенНаСервере()
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Записать(Истина);
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
КонецПроцедуры

&НаСервере
Функция СкладыПоВидуЦены()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦены", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
				   |	СтруктурныеЕдиницы.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	               |ГДЕ
	               |	НЕ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	               |	И СтруктурныеЕдиницы.РозничныйВидЦен = &ВидЦены";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИТекстПодсказкиАвторасчета()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;	
	КонецЕсли;
	
	Склады = СкладыПоВидуЦены();
	Если Склады.Количество() > 0 И НЕ Объект.РассчитыватьАвтоматически Тогда		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически", 
			"Доступность", Ложь);
		НачалоЗаголовка = 
			Новый ФорматированнаяСтрока(НСтр("ru = 'Флаг заблокирован, так как вид цен выбран в следующих складах:'" 
				+ Символы.ПС));
		МассивЗаголовка = Новый Массив;
		МассивЗаголовка.Добавить(НачалоЗаголовка);
		СкладыДляПереходаПоСсылке.Очистить();
		Для каждого Склад Из Склады Цикл
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Склад.Ссылка);
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(" • ");
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(Склад.Наименование + Символы.ПС, , , , НавигационнаяСсылка));
		    МассивЗаголовка.Добавить(МассивСтроки);
			Запись = СкладыДляПереходаПоСсылке.Добавить();
			Запись.НавигационнаяСсылка = НавигационнаяСсылка;
			Запись.Склад = Склад.Ссылка; 
		КонецЦикла;
		Элементы.РассчитыватьАвтоматически.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстДекорацииПредупреждения()
	
	ПредупреждениеВидимо = НЕ Объект.ЦеныАктуальны И ЗначениеЗаполнено(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", 
		"Видимость", ПредупреждениеВидимо);
	Если ПредупреждениеВидимо Тогда
		
		Если Объект.РассчитыватьАвтоматически Тогда
			ТекстЗаголовка = НСтр("ru = 'Были зафиксированы изменения, которые влияют на расчет цен.'")
				+ НСтр("ru = 'В ближайшее время будут автоматически актуализированы цены по этой колонке прайс-листа.'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Были зафиксированы изменения, которые влияют на расчет цен.'")
				+ НСтр("ru = 'Цены необходимо рассчитать. Для этого нажмите кнопку ""Установить цены""'");
		КонецЕсли;
		
		Элементы.ДекорацияПредупреждение.РасширеннаяПодсказка.Заголовок = ТекстЗаголовка;		
		Элементы.ДекорацияПредупреждение.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.КрасныйТекстСтрок;
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(Форма)
	
	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1
		И Форма.Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И Форма.Объект.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	ИначеЕсли Форма.Объект.ПравилаОкругленияЦены.Количество() >= 1 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Истина;
	Иначе
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьРасширеннуюНастройкуОкругления;
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилищеСтрокиТабличнойЧасти(ВидВызова)
	
	Если ВидВызова = "УточнениеНастроекОкругления" Тогда
		Таблица = Объект.ПравилаОкругленияЦены.Выгрузить();
	КонецЕсли;
	
	Если ВидВызова = "УточнениеПороговСрабатывания" Тогда
		Таблица = Объект.ПорогиСрабатывания.Выгрузить();	
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Таблица);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица)
	ТекущаяТаблица.Очистить();
	ТекущаяТаблица.Загрузить(ПереданнаяТаблица);
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНастройкиУточнений(Параметры)
	
	ВидВызова = Параметры.ВидВызова;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	
	Если ДополнительныеПараметры.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
	КонецЕсли;
	
	ПереданнаяТаблица = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);	

	Если ВидВызова = "УточнениеПороговСрабатывания" Тогда 
		
		ТекущаяТаблица = Объект.ПорогиСрабатывания;
		ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица);
		
		ОбновитьПредставлениеУточнениеНастроекРасчета();
		 
	ИначеЕсли ВидВызова = "УточнениеНастроекОкругления" Тогда
		 
		ТекущаяТаблица = Объект.ПравилаОкругленияЦены;
		ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица);
		
		ОбновитьПредставлениеУточнениеНастроекОкругления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТаблицуПравилОкругленияСервер(Форма)
	
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		Форма.Объект.ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
	МаксимальныйИндекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1;
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1 И Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен = 0 Тогда
			ЦеновойДиапазон = НСтр("ru = 'Все цены'");
		Иначе
			
			Если Индекс = МаксимальныйИндекс Тогда
				
				ЦеновойДиапазон = НСтр("ru = 'Свыше %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				
			Иначе
				
				ЦеновойДиапазон = НСтр("ru = 'От %НачалоДиапазона% до %ОкончаниеДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",    Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%ОкончаниеДиапазона%", Форма.Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.Объект.ВалютаЦены) Тогда
				ЦеновойДиапазон = ЦеновойДиапазон + " " + Форма.Объект.ВалютаЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.Объект.ПравилаОкругленияЦены[Индекс].ЦеновойДиапазон = ЦеновойДиапазон;
		
		УстановитьПример(Форма, Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУточненийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда 
		
		ЗаполнитьНастройкиУточнений(Результат);
		
		Модифицированность = Истина;
		
		ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУточнениеНастроекОкругления()
	
	Если Объект.ПравилаОкругленияЦены.Количество() = 0 Тогда
		УточнениеНастроекОкругленияПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить округление цен по диапазонам'"),,,,"Изменить");
	Иначе
		
		Если Объект.ПравилаОкругленияЦены.Количество() > 1 
			Или (Объект.ПравилаОкругленияЦены.Количество() = 1  И Объект.ПравилаОкругленияЦены[0].ТочностьОкругления <> 0) Тогда
			РасшифровкаЦеновыхДиапазонов = НСтр("ru = '%1%2'");
			ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
			
			МассивПравил = Новый Массив();
			
			Правило = Объект.ПравилаОкругленияЦены[0];
			Если Правило.ТочностьОкругления = 0 Тогда
				ПерваяСтрока = СтрШаблон("%1 %2",Правило.ЦеновойДиапазон, НСтр("ru = 'не округлять'"));				
			Иначе					
				ПерваяСтрока = СтрШаблон("%1 %2 %3",Правило.ЦеновойДиапазон, НСтр("ru = 'с точностью'"), Формат(Правило.ТочностьОкругления, ФорматнаяСтрока));
			КонецЕсли;
			
			КоличествоОстальных = Объект.ПравилаОкругленияЦены.Количество() - 1;
			
			ВтораяСтрока = "";
			Если КоличествоОстальных > 0 Тогда
				
				ВтораяСтрока = СтрШаблон(" %1 %2 ", НСтр("ru = 'и еще'"), КоличествоОстальных); 
				
			КонецЕсли;
			
			РасшифровкаЦеновыхДиапазонов = СтрШаблон(РасшифровкаЦеновыхДиапазонов, ПерваяСтрока, ВтораяСтрока);
			
		Иначе

			РасшифровкаЦеновыхДиапазонов = НСтр("ru = 'Настроить округление цен по диапазонам'");
					
		КонецЕсли;
				
		УточнениеНастроекОкругленияПредставление = Новый ФорматированнаяСтрока(РасшифровкаЦеновыхДиапазонов,,,,"Изменить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейОкругления()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПримерИТочность", "Видимость", НЕ ИспользоватьРасширеннуюНастройкуОкругления);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнениеНастроекОкругленияПредставление", "Видимость", ИспользоватьРасширеннуюНастройкуОкругления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПример(Форма, Индекс)
	
	Число = 987654.321;
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
		НижняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен;
		Если Индекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
			ВерхняяГраница = НижняяГраница + 1000;
		Иначе
			ВерхняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс+1].НижняяГраницаДиапазонаЦен;
		КонецЕсли;
		Число = НижняяГраница + Окр((ВерхняяГраница - НижняяГраница)/2, 15, 2);
		Если Число + 0.11 < ВерхняяГраница Тогда
			Число = Число + 0.11;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления <> 0 ИЛИ Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление <> 0 Тогда
		Цена = ЦенообразованиеСервер.ОкруглитьЦену(Число, Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления, Форма.Объект.ОкруглятьВБольшуюСторону);
		Значение = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(
			Цена,
			Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление);
		
		ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Округлять %1 до %2'"),
			Формат(Число, ФорматнаяСтрока),
			Формат(Значение, ФорматнаяСтрока));
	Иначе
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = НСтр("ru = 'Не округлять'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиУточнения(ВидВызова)

	АдресВХранилище = ПоместитьВХранилищеСтрокиТабличнойЧасти(ВидВызова);
	
	ДополнительныеПараметры = Новый Структура;
		
	ДополнительныеПараметры.Вставить("ВалютаЦены",			Объект.ВалютаЦены); 
	ДополнительныеПараметры.Вставить("ОкруглятьВБольшуюСторону",	Объект.ОкруглятьВБольшуюСторону); 
	ДополнительныеПараметры.Вставить("ТочностьОкругления",	Объект.ПорядокОкругления);               
	ДополнительныеПараметры.Вставить("ВидВызова", ВидВызова);
		
	СтруктураПараметров = Новый Структура("АдресВХранилище, ДополнительныеПараметры", АдресВХранилище, ДополнительныеПараметры);
	ОповещениеПослеУточнения = Новый ОписаниеОповещения("НастройкаУточненийЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаНастройкиУточнений", СтруктураПараметров,ЭтаФорма,,,, ОповещениеПослеУточнения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) ИЛИ КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = КэшЗначений.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.ВидыЦен.СформироватьНовуюСхемуКомпоновкиДанных();
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = КэшЗначений.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Процедура ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ЦенообразованиеСервер.ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ЦенообразованиеСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			Объект.СхемаКомпоновкиДанных   = "";
			КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
			СтрокаОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ЦенообразованиеСервер.ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ЦенообразованиеСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	Иначе
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		Если ЦенообразованиеСервер.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных) Тогда
		
			КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
			
			НастройкиПоУмолчанию = ЦенообразованиеСервер.ПолучитьНастройкиКомпоновкиПоУмолчанию(СхемаКомпоновкиДанных);
			
			Если ЦенообразованиеСервер.ПолучитьXML(НастройкиПоУмолчанию) <> ЦенообразованиеСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
				
				КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
				
			Иначе
				
				КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
				
			КонецЕсли;   
			
		КонецЕсли;
				
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБазовогоВидаЦены()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыВидовЦен.Статический);
	МассивТипов.Добавить(Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипВидаЦен", Новый ФиксированныйМассив(МассивТипов));
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	Элементы.БазовыйВидЦен.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗагрузки = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = РезультатЗагрузки;
	
	Заголовок = НСтр("ru ='Загрузка цен'");
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Выполнено" Тогда 
		
		ТекстОповещения = НСтр("ru ='Цены номенклатуры.
			|Загрузка данных завершена.'");
		
		ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);
		
	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Ошибка" Тогда
		
		ПоказатьОповещениеПользователя(РезультатЗагрузки.КраткоеПредставлениеОшибки, , Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиПодготовленныхДанных()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= НСтр("ru ='Загрузка цен из внешнего источника'");
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьАвтоматическиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", 
		СкладыДляПереходаПоСсылке.НайтиСтроки(
		Новый Структура("НавигационнаяСсылка", НавигационнаяСсылкаФорматированнойСтроки))[0].Склад);
	ПараметрыОткрытия.Вставить("ТекущийЭлемент", "РозничныйВидЦен");
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьЦеныИзВнешнегоИсточника(Команда)
	
	Если Объект.ТипВидаЦен <> КэшЗначений.Статический
		И Объект.ТипВидаЦен <> КэшЗначений.ПроизвольныйЗапрос Тогда
		
		ТекстСообщения = НСтр("ru ='Загрузка предназначена только для статических видов цен.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 15, НСтр("ru ='Загрузить цены из внешнего источника'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", Объект.Ссылка);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ПослеОбработкиПодготовленныхДанных();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания);
		КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка цен из внешнего источника'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "РегистрыСведений.ЦеныНоменклатуры.ОбработатьПодготовленныеДанные";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки		= РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания	= РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("ИдентификаторФормул");
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, Реквизиты);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
