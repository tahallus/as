#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеПечатью

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеПечатью

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	( ЗначениеРазрешено(Ссылка)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Владелец) = ТИП(Справочник.Контрагенты)
	|	)И( ЗначениеРазрешено(Владелец)
	|	ИЛИ ЗначениеРазрешено(Владелец)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Получает ссылку на элемент справочника с переданными свойствами.
// Если элемент с таким набором свойств отсутствует в справочнике,
// он автоматически создается.
//
// Параметры:
//  - Владелец - Ссылка - ссылка на элемент-владелец
//  - НомерСчета - Строка - номер банковского счета
//  - БИК        - Строка - БИК банка
//
// Возвращаемое значение:
//  - Ссылка - ссылка на элемент справочника
//
Функция ПолучитьЭлемент(Знач Владелец, Знач НомерСчета, Знач БИК) Экспорт
	
	Результат = ПустаяСсылка();
	
	// Поиск существующего банковского счета по номеру и БИК
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",   Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("БИК",        БИК);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Банк.Код = &БИК";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Если Результат.Пустая() Тогда
		
		ДанныеБанковскогоСчета = Новый Структура;
		ДанныеБанковскогоСчета.Вставить("Владелец",   Владелец);
		ДанныеБанковскогоСчета.Вставить("НомерСчета", НомерСчета);
		ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", БИК);
		ДанныеБанковскогоСчета.Вставить("ВалютаДенежныхСредств", Константы.НациональнаяВалюта.Получить());
		ДанныеБанковскогоСчета.Вставить("Банк",
			?(ТаблицаБанков.Количество()>0, ТаблицаБанков[0].Ссылка, Справочники.Банки.ПустаяСсылка()));
		
		БанковскийСчетКонтрагента = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанковскийСчетКонтрагента,ДанныеБанковскогоСчета ); 
		БанковскийСчетКонтрагента.Заполнить(ДанныеБанковскогоСчета);
		БанковскийСчетКонтрагента.Наименование = СтрШаблон(
			НСтр("ru = '%1, в %2'"),
			СокрЛП(БанковскийСчетКонтрагента.НомерСчета),
			БанковскийСчетКонтрагента.Банк);

		БанковскийСчетКонтрагента.Записать();
		
		Результат = БанковскийСчетКонтрагента.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция БанковскийСчетСубъекта(СубъектХозДеятельности, ВалютаДенежныхСредств = Неопределено, РабочаяДата = Неопределено) Экспорт
	
	Если ТипЗнч(СубъектХозДеятельности) <> Тип("СправочникСсылка.Организации")
		И ТипЗнч(СубъектХозДеятельности) <> Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(СубъектХозДеятельности) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СубъектХозДеятельности", СубъектХозДеятельности);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ИгнорироватьПроверкуВалюты", НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств));
	Запрос.УстановитьПараметр("РабочаяДата", РабочаяДата);
	Запрос.УстановитьПараметр("ИгнорироватьДатуЗакрытия", НЕ ЗначениеЗаполнено(РабочаяДата));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию.ДатаОткрытия КАК ДатаОткрытия,
	|	0 КАК Порядок
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &СубъектХозДеятельности
	|	И (БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|			ИЛИ &ИгнорироватьПроверкуВалюты)
	|	И (БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию.ДатаЗакрытия >= &РабочаяДата
	|			ИЛИ &ИгнорироватьДатуЗакрытия)
	|	И БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию.Недействителен = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.ДатаОткрытия,
	|	1
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &СубъектХозДеятельности
	|	И БанковскиеСчета.Ссылка <> БанковскиеСчета.Владелец.БанковскийСчетПоУмолчанию
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|			ИЛИ &ИгнорироватьПроверкуВалюты)
	|	И (БанковскиеСчета.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ БанковскиеСчета.ДатаЗакрытия >= &РабочаяДата
	|			ИЛИ &ИгнорироватьДатуЗакрытия)
	|	И БанковскиеСчета.Недействителен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаОткрытия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.БанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	
КонецФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли