
&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РазобратьПараметры(Параметры);
	УправлениеКнопкамиПриСозданииНаСервере();	

	//заполнение таблиц участников сделки и файлов
	ЗаполнитьТаблицуФайловПередОткрытием();
	
	ЗаполнитьЭПНотариуса();
	
	//управление видимостью/доступностью элементов формы
	УправлениеЭУПросмотрСписокВложений();
	
	//ФО Использование одной организации
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ЗаголовокОрганизация");
	
	ЗаполнитьКВД();
		
КонецПроцедуры

&НаСервере
Процедура УправлениеКнопкамиПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(АдресРезультатаВыбораФайлов) ИЛИ ЗначениеЗаполнено(АдресМассиваСвойствФайлов) Тогда
		
		Элементы.ФормаЗаписатьИЗакрытьСкан.Видимость         = Истина;
		Элементы.ФормаЗаписатьИЗакрытьСкан.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость             = Ложь;
		
		Если ЭтоПакетСДопДокументами Тогда
			Элементы.ФормаЗаписатьИЗакрытьСкан.Заголовок = НСтр("ru = 'Добавить в '") + ДокументооборотСКОКлиентСервер.ПредставлениеПакетаСДопДокументами(Истина);
		КонецЕсли;
	
	Иначе
		Элементы.ФормаЗаписатьИЗакрыть.Видимость         = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрытьСкан.Видимость     = Ложь;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура РазобратьПараметры(Параметры)
	
	ПроверятьНедопустимыеСимволы = Параметры.ПроверятьНедопустимыеСимволы;
	
	Параметры.Свойство("АдресРезультатаВыбораФайлов", АдресРезультатаВыбораФайлов);
	Параметры.Свойство("УстановитьПриказММВ_7_6_16",  УстановитьПриказММВ_7_6_16);
	Параметры.Свойство("ЭтоПакетСДопДокументами",     ЭтоПакетСДопДокументами);
	Параметры.Свойство("АдресМассиваСвойствФайлов",   АдресМассиваСвойствФайлов);
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("СведенияДокумента") Тогда
		Объект.СведенияДокумента = Параметры.СведенияДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Заголовок = Объект.Наименование;
		
		Если Объект.ВерсияПриказа <> Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16 
			И УстановитьПриказММВ_7_6_16 = Истина Тогда
			
			Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16;
			
		КонецЕсли;
		
	Иначе
		// Создание нового элемента.
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			Заголовок = Объект.Наименование;
		Иначе
			// Добавление элемента.
			Объект.Наименование = "Подготовка документа к отправке";
			Заголовок = "Подготовка документа к отправке";
			
			ДобавитьВОтобранные = Параметры.ДобавитьВОтобранные;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация)Тогда
				Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
					Объект.Организация = Модуль.ОрганизацияПоУмолчанию();
				КонецЕсли;
				
				// Если организаций больше одной, то используем основную организацию
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16;
		Объект.ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ИныеДокументы;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Наименование = "Подготовка документа к отправке";
	КонецЕсли;
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Закрыть();
		Возврат;
	КонецЕсли;

	УстановитьРазмерКартинкиПоЗначениюПереключателя();
	
	Если ИмпортироватьФайлыИсточникаПриОткрытии Тогда
		ИмпортироватьФайлыИсточника();
	ИначеЕсли ЗначениеЗаполнено(АдресРезультатаВыбораФайлов) Тогда
		ИмпортироватьВыбранныеФайлы();
	ИначеЕсли ЗначениеЗаполнено(АдресМассиваСвойствФайлов) Тогда
		ПроверитьИИмпортироватьФайлы(АдресМассиваСвойствФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьСкан(Команда)
	
	Если Записать() Тогда
	
		Если ЭтоЗагрузкаСканаНапрямуюИзОписи ИЛИ ЭтоПакетСДопДокументами Тогда
			
			Если НЕ ПрограммноеЗакрытие И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Отказ = Истина;
				ПрограммноеЗакрытие = Истина;
				
				МассивСвойствВыбранныхДокументов = Новый Массив;
				
				СтруктураСвойств = Новый Структура;
				
				СтруктураСвойств.Вставить("ВыбранныйДокумент", 	Объект.Ссылка);
				СтруктураСвойств.Вставить("ВидДокументаФНС", 	Объект.ВидДокумента);
				
				МассивСвойствВыбранныхДокументов.Добавить(СтруктураСвойств);
				
				ОповеститьОВыборе(МассивСвойствВыбранныхДокументов);
				
			КонецЕсли;
			
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьФайлыФормыВБазу();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ДобавитьВОтобранные", ДобавитьВОтобранные);
	
	Оповестить("Запись_СканированныеДокументыДляПередачиВЭлектронномВиде", ПараметрыОповещения, Объект.Ссылка);
	
	ДобавитьВОтобранные = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ВерсияПриказа) 
		И Объект.ВерсияПриказа = Перечисления.ПриказОписиИсходящихДокументов.ПриказММВ_7_6_16 Тогда
	
		Если ЭтоПакетСДопДокументами Тогда
			ПроверяемыеРеквизиты.Добавить("КВД");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КВДПриИзменении(Элемент)
	Объект.КВД = КВД;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СведенияДокументаПриИзменении(Элемент)
	СформироватьЗаголовокФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СведенияДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьИсточник(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлЭПНотариуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресФайлаПодписиНотариуса 	= "";
	ИмяФайлаПодписиНотариуса 	= "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИсточник(Элемент, СтандартнаяОбработка)
	
	СменитьДокументИсточник();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКВД()
	
	Если ЭтоПакетСДопДокументами Тогда
		
		Элементы.КВД.Видимость = Истина;
		
		МакетКВД = Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПолучитьМакет("КВД");
		
		Для НомерСтроки = 1 По МакетКВД.ВысотаТаблицы Цикл
		
			КВД           = СокрЛП(МакетКВД.Область(НомерСтроки, 1).Текст);
			Представление = СокрЛП(МакетКВД.Область(НомерСтроки, 2).Текст);
			
			Элементы.КВД.СписокВыбора.Добавить(КВД, Представление); 
			
		КонецЦикла;
		
	Иначе
		Элементы.КВД.Видимость = Ложь;
		Элементы.КВД.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	КВД = Объект.КВД;
	
	// Представление периода кредитования
	Если ЗначениеЗаполнено(Объект.КВД) Тогда
		НайденноеЗначение = Элементы.КВД.СписокВыбора.НайтиПоЗначению(Объект.КВД);
		Если НайденноеЗначение <> Неопределено Тогда 
			КВД = НайденноеЗначение.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЭПНотариуса()
	
	Если ТаблицаФайлов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайлСсылка = ТаблицаФайлов[0].ПрисоединенныйФайлСсылка;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЭПНотариуса = КонтекстЭДОСервер.ЭПНотариусаДокСкана(ПрисоединенныйФайлСсылка);
	
	ИмяФайлаПодписиНотариуса 	= ЭПНотариуса.ИмяФайла;
	АдресФайлаПодписиНотариуса  = ЭПНотариуса.АдресДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЭПНотариуса()
	
	МаксимальныйРазмерФайла = 72 * 1024 * 1024; // 72 Мб
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	ПараметрыДобавления.Вставить("ВозвращатьРазмер", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ИмяФайлаПодписиНотариусаДобавленияФайлов", ЭтотОбъект);
	
	// Здесь не нужно передавать требования к картинке, потому что ЭП - это не картинка.
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Электронная подпись нотариуса>", ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаДобавленияФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		
		Если ТаблицаФайлов.Количество() > 1 Тогда
			
			СообщитьОНеобходимостиВыбратьПодписанныйФайл(Результат);
			
		Иначе
			
			АдресФайлаПодписиНотариуса 	= Результат.ОписанияФайлов[0].Адрес;
			ИмяФайлаПодписиНотариуса 	= ПроверитьИмяФайлаНаСимволы(Результат.ОписанияФайлов[0].Имя);
		
			Модифицированность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		АдресФайлаПодписиНотариуса 	= "";
		ИмяФайлаПодписиНотариуса 	= "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеобходимостиВыбратьПодписанныйФайл(Результат)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", 	ПроверитьИмяФайлаНаСимволы(Результат.ОписанияФайлов[0].Имя));
	ДополнительныеПараметры.Вставить("АдресДанных", Результат.ОписанияФайлов[0].Адрес);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаПодписиНотариусаПослеОтветаНаВопрос",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ТекстВопроса = НСтр("ru = 'Утвержденный ФНС формат позволяет прилагать только одну электронную подпись нотариуса к сканированному документу.
                         |Загрузите подписанный файл сканированного документа с диска или выберите из числа загруженных.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(НСтр("ru = 'Загрузить с диска'"));
	Кнопки.Добавить(НСтр("ru = 'Выбрать из числа загруженных'"));
	Кнопки.Добавить(НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаПослеОтветаНаВопрос(ОтветНаВопрос, ВходящийКонтекст) Экспорт
	
	Если ОтветНаВопрос = НСтр("ru = 'Загрузить с диска'") Тогда
		
		АдресФайлаПодписиНотариуса 	= ВходящийКонтекст.АдресДанных;
		ИмяФайлаПодписиНотариуса 	= ВходящийКонтекст.ИмяФайла;
		
		ТаблицаФайлов.Очистить();
		
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		Модифицированность = Истина;
		
		ВыбратьИДобавитьВложения(Ложь);
		
	ИначеЕсли ОтветНаВопрос = НСтр("ru = 'Выбрать из числа загруженных'") Тогда
		
		СписокВыбора = Новый СписокЗначений;
		Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
			СписокВыбора.Добавить(СтрокаТаблицыФайлов.ИмяФайла);
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИмяФайлаПодписиНотариусаПослеВыбораФайлаИзЧислаЗагруженных", 
			ЭтотОбъект,
			ВходящийКонтекст);
		
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбор файла из числа загруженных'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПодписиНотариусаПослеВыбораФайлаИзЧислаЗагруженных(ВыбранныйФайл, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйФайл = Неопределено Тогда
		
		ТаблицаФайлов.Очистить();
	
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// Удаляем все строки, кроме одной выбранной
	Индекс = ТаблицаФайлов.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если ТаблицаФайлов[Индекс].ИмяФайла <> ВыбранныйФайл.Значение Тогда
			ТаблицаФайлов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	
	АдресФайлаПодписиНотариуса 	= ВходящийКонтекст.АдресДанных;
	ИмяФайлаПодписиНотариуса 	= ВходящийКонтекст.ИмяФайла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсточникаПослеПолученияСвойствДокумента(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		И НЕ ЭтоСсылка(РезультатВыбора) 
		И ТипЗнч(РезультатВыбора) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		
		// Выбрано несколько документов
		Если РезультатВыбора.Количество() = 0 Тогда
			Возврат;
		Иначе
			РезультатВыбора = РезультатВыбора[0];
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЭтоСсылка(РезультатВыбора) Тогда
		
		Если ЭтоСсылка(РезультатВыбора) Тогда
			Объект.Источник          = РезультатВыбора;
			Объект.СведенияДокумента = Строка(РезультатВыбора);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
	
		Если РезультатВыбора.Свойство("Ссылка") Тогда
			Объект.Источник = РезультатВыбора.Ссылка;
		КонецЕсли;
		
		Если РезультатВыбора.Свойство("Описание") Тогда
			Объект.СведенияДокумента = РезультатВыбора.Описание;
		КонецЕсли;
		
		Если РезультатВыбора.Свойство("Основание") Тогда
			Объект.СведенияДокументаОснования = РезультатВыбора.Основание;
		КонецЕсли;
		
		Если ТаблицаФайлов.Количество() = 0 Тогда
			ИмпортироватьФайлыИсточника();
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЭтоСсылка(Источник) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
		
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Результат, ВходящийКонтекст) Экспорт

	Если Записать() Тогда
		
		Модифицированность = Ложь;
		
		Закрыть(Истина);
		
	КонецЕсли;

КонецПроцедуры

#Область ТаблицаФайлов

#Область ДобавлениеФайлов

#Область Перетаскивание

&НаКлиенте
Процедура ТаблицаФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания)
	
	МассивПолныхИменФайлов = Новый Массив;
	
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
		//перетаскивают один файл
		
		Если ЗначениеПеретаскивания.Расширение = ".jpg" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".tif" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".png" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".pdf" Тогда
			МассивПолныхИменФайлов.Добавить(ЗначениеПеретаскивания.ПолноеИмя);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		//перетаскивают несколько файлов
		Для каждого ЭлМассива Из ЗначениеПеретаскивания Цикл
			Если ТипЗнч(ЭлМассива) = Тип("Файл") Тогда
				Если ЭлМассива.Расширение = ".jpg" 
				ИЛИ ЭлМассива.Расширение = ".tif" 
				ИЛИ ЭлМассива.Расширение = ".png" 
				ИЛИ ЭлМассива.Расширение = ".pdf" Тогда
					МассивПолныхИменФайлов.Добавить(ЭлМассива.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивПолныхИменФайлов;
	
КонецФункции

&НаКлиенте
Процедура АдресКартинкиПросмотрПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеретаскиваемыеФайлы(ЗначениеПеретаскивания)
	
	МассивПолныхИмен = ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания);
	
	Если ЗначениеЗаполнено(МассивПолныхИмен) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПолныхИмен", МассивПолныхИмен);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПеретаскиваниемРасширениеПредложено", ЭтотОбъект, ДополнительныеПараметры);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, , Истина)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПеретаскиваниемРасширениеПредложено(Результат, ДополнительныеПараметры) Экспорт
	
	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;	
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		
		МассивПолныхИмен = ДополнительныеПараметры.МассивПолныхИмен;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеПолученияСвойствФайлов", ЭтотОбъект);
		КонтекстЭДОКлиент.ПолучитьСвойстваФайлов(ОписаниеОповещения, МассивПолныхИмен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеПолученияСвойствФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(Результат.СвойстваФайлов, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// составляем массив с объектами Файл
	МассивФайлов = Новый Массив;
	
	Для Каждого СвойстваФайла Из Результат.СвойстваФайлов Цикл
		
		Свойства = Новый Структура();
		Свойства.Вставить("Имя",         СвойстваФайла.Имя);
		Свойства.Вставить("ПолноеИмя",   СвойстваФайла.ПолноеИмя);
		Свойства.Вставить("Расширение",  СвойстваФайла.Расширение);
		Свойства.Вставить("Размер",      СвойстваФайла.Размер);
		Свойства.Вставить("Адрес", Неопределено);

		МассивФайлов.Добавить(Свойства);
		
	КонецЦикла;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл 
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлФайл.ПолноеИмя); 
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивФайлов", МассивФайлов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияСЗаменойПослеПомещенияФайлов", ЭтотОбъект, ДополнительныеПараметры); 
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменойПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	
	Для каждого ЭлФайл Из МассивФайлов Цикл
		Для каждого ОписаниеПереданногоФайла Из ПомещенныеФайлы Цикл
			Если ОписаниеПереданногоФайла.ПолноеИмя = ЭлФайл.ПолноеИмя Тогда
				ЭлФайл.Адрес = ОписаниеПереданногоФайла.Хранение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИгнорироватьДубли", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмпортироватьФайлыИсточника_ПослеПреобразования", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Требования = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ОперацииСФайламиЭДКОКлиент.ОбработатьКартинки(ОписаниеОповещения, МассивФайлов, Требования);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ИмпортироватьФайлыИсточника()
	
	ИсточникСсылка = Объект.Источник;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСвойствФайлов = Новый Массив;
	ФайлыИсточников = Новый Соответствие;
	ФайлыИсточников.Вставить(ИсточникСсылка, МассивСвойствФайлов);
	
	КонтекстЭДОКлиент.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
	МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	
	Если НЕ ЗначениеЗаполнено(МассивСвойствФайлов)Тогда
		//нет присоединенных файлов по БСП механизму
		//попытаемся получить через переопределяемый метод
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
		МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	КонецЕсли;
	
	Для каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		СвойстваФайла.Вставить("Адрес", СвойстваФайла.АдресДанных);
	КонецЦикла;  
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмпортироватьФайлыИсточника_ПослеПреобразования", 
		ЭтотОбъект);
		
	ПараметрыМетода = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ОперацииСФайламиЭДКОКлиент.ОбработатьКартинки(ОписаниеОповещения, МассивСвойствФайлов, ПараметрыМетода);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьФайлыИсточника_ПослеПреобразования(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Результат.ОписанияФайлов)Тогда
		ПроверитьИИмпортироватьФайлы(Результат.ОписанияФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксКолвоФайлов()
	
	МаксКолвоФайлов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МаксимальнойКоличествоФайловОписи();
	
	Возврат МаксКолвоФайлов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайлов()
	
	Возврат 72;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайла()
	
	Возврат 60;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИДобавитьВложения(МножественныйВыбор = Истина)
	
	Если ЗначениеЗаполнено(ИмяФайлаПодписиНотариуса)
		И ТаблицаФайлов.Количество() = 1 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Дополнительный сканированный документ не может быть добавлен.
                                    |
                                    |Утвержденный ФНС формат позволяет прилагать электронную подпись нотариуса
                                    |только к одному сканированному документу.'");
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПараметрыВыбораКартинок_ОтветНаТребованиеДокументов(МножественныйВыбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьИДобавитьВложения_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(ОписаниеОповещения, Новый УникальныйИдентификатор, , ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИДобавитьВложения_ПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивФайлов = Результат.ОписанияФайлов;

	Для Каждого СтрокаМассива Из МассивФайлов Цикл
		СтрокаМассива.Имя = ПроверитьИмяФайлаНаСимволы(СтрокаМассива.Имя);
	КонецЦикла;
	
	// проверяем на пересечение имен с уже имеющимися
	Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
		ТекстВопроса = НСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
		|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
		ДополнительныеПараметры = Новый Структура;					
		ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВопросаИменаПересекаются", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВложенияСЗаменой(МассивФайлов);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаются(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВложенияСЗаменой(ДополнительныеПараметры.МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменой(МассивФайлов) 
	
	//загружаем в ИБ
	ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПоштучно(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ФайлыБылиВыбраны Тогда
		
		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;

		Файл = КонтекстЭДОКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		
		СвойстваФайла = Новый Структура();
		СвойстваФайла.Вставить("Имя",         Файл.Имя);


		СвойстваФайла.Вставить("Размер",      Файл.Размер);
		СвойстваФайла.Вставить("АдресДанных", Файл.АдресДанных);

		МассивФайлов.Добавить(СвойстваФайла);
		
		//загружаем в ИБ
		ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИИмпортироватьФайлы(МассивСвойствФайлов)
	
	Если ЭтоАдресВременногоХранилища(МассивСвойствФайлов) Тогда
		МассивСвойствФайлов = ПолучитьИзВременногоХранилища(МассивСвойствФайлов);
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения)
	
	ЕстьОшибки = Ложь;
	ПревышенРазмерОтдельныхФайлов 	= Ложь;
	ПревышенОбщийРазмерФайлов 		= Ложь;
	ПревышеноОбщееКолВоФайлов 		= Ложь;
	
	КолвоВыбранныхФайлов = МассивСвойствФайлов.Количество();
	
	ДопустимоеКоличествоФайлов 	= МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах 	= МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	
	//проверка на количество выбранных файлов
	Если КолВоВыбранныхФайлов > ДопустимоеКоличествоФайлов Тогда
		ТекстСообщения = "Общее количество файлов изображений превысило допустимое (" + МаксКолвоФайлов() + " файлов).
		|Рекомендуется использовать многостраничный формат (TIFF или PDF).
		|";	
		ЕстьОшибки = Истина;
		ПревышеноОбщееКолВоФайлов = Истина;
	КонецЕсли;
	
	//проверка на размеры выбранных файлов
	УменьшаемыйДопустимыйРазмер = ДопустимыйРазмерВБайтах;
	
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		Если СвойстваФайла.Размер > МаксРазмерФайла()*1024*1024 Тогда
			ЕстьОшибки = Истина;
			ПревышенРазмерОтдельныхФайлов = Истина;
			ТекстСообщения = ТекстСообщения + "Размер файла " + СвойстваФайла.Имя + " превышает допустимый (" + МаксРазмерФайла() + " Мб).
			|";
		КонецЕсли;
		
		УменьшаемыйДопустимыйРазмер = УменьшаемыйДопустимыйРазмер - СвойстваФайла.Размер;
		
		Если УменьшаемыйДопустимыйРазмер < 0 Тогда
			ЕстьОшибки = Истина;
			ПревышенОбщийРазмерФайлов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = "Добавление изображений отменено.
		|" + ТекстСообщения;
		Если ПревышенОбщийРазмерФайлов Тогда
			ТекстСообщения = ТекстСообщения + "Общий размер файлов изображений превысил допустимый (" + МаксРазмерФайлов() + " Мб).
			|Убедитесь в том, что добавляемые файлы соответствуют требованиям.";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов) 
	
	Для каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		НовыйФайлИмя 			= СвойстваФайла.Имя;
		Если СвойстваФайла.Свойство("АдресДанных") Тогда
			НовыйФайлАдресДанных = СвойстваФайла.АдресДанных;
		Иначе
			НовыйФайлАдресДанных = СвойстваФайла.Адрес;
		КонецЕсли;
			
		НовыйФайлРазмер = СвойстваФайла.Размер;
		
		РедактируемаяСтрокаТаблицыФайлов = Неопределено;
		Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
			Если СтрокаТаблицыФайлов.ИмяФайла = НовыйФайлИмя Тогда
			
				РедактируемаяСтрокаТаблицыФайлов = СтрокаТаблицыФайлов;
			    Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если РедактируемаяСтрокаТаблицыФайлов = Неопределено Тогда
			РедактируемаяСтрокаТаблицыФайлов = ТаблицаФайлов.Добавить();
		КонецЕсли;
		
		РедактируемаяСтрокаТаблицыФайлов.ИмяФайла 				= НовыйФайлИмя;
		РедактируемаяСтрокаТаблицыФайлов.АдресДанныхФайлаФормы 	= НовыйФайлАдресДанных;
		РедактируемаяСтрокаТаблицыФайлов.Размер 				= НовыйФайлРазмер;
		
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(РедактируемаяСтрокаТаблицыФайлов);

	КонецЦикла;
	
	ПронумероватьСтрокиТаблицыФайлов();
	
	ОбновитьРазмерыДокумента();
	
	Модифицированность = Истина;
	
	//для режима просмотра нужно показать последнее добавленное изображение
	НомерВложенияПросмотр = КоличествоФайловВложений;
	ОбновитьАдресКартинкиПросмотра();
		
КонецПроцедуры

&НаСервере
Функция ВложенияСПодобнымиИменамиУжеИмеются(МассивСвойствФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		МассивИменФайлов.Добавить(СвойстваФайла.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		Если МассивИменФайлов.Найти(СтрокаТаблицыФайлов.ИмяФайла) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ТаблицаФайловПрочее

&НаКлиенте
Процедура ТаблицаФайловПриИзменении(Элемент)
	//Срабатывает при удалении, перемещении
	//При добавлении не срабатывает - стоит отказ и ручная обработка
	
	ПронумероватьСтрокиТаблицыФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПослеУдаления(Элемент)
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	//перенумерация происходит в следующем обработчике - ТаблицаФайловПриИзменении
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(СтрокаТаблицы)
	
	ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (%2)'"), 
		СтрокаТаблицы.ИмяФайла, 
		ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер, 2));
	
	СтрокаТаблицы.СоставноеПоле = ПредставлениеФайла;
	
КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьТаблицуФайловПередОткрытием()
	
	ТаблицаФайлов.Очистить();
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	
	Для каждого ПрисоединенныйФайл Из МассивФайлов Цикл
	
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПрисоединенныйФайлСсылка 	= ПрисоединенныйФайл;
		НоваяСтрока.НомерСтраницыФайлаБазы 		= ПрисоединенныйФайл.НомерСтраницы;
		НоваяСтрока.ИмяФайла 					= ДанныеФайла.ИмяФайла;
		НоваяСтрока.Размер	 					= ДанныеФайла.Размер;
		НоваяСтрока.АдресДанныхФайлаБазы 		= ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		// при первоначальном заполнении продублируем значения полей базы и формы
		НоваяСтрока.АдресДанныхФайлаФормы 		= НоваяСтрока.АдресДанныхФайлаБазы;
		НоваяСтрока.НомерСтраницыФайлаФормы		= НоваяСтрока.НомерСтраницыФайлаБазы;

		//заполним составное поле
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(НоваяСтрока);

	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("НомерСтраницыФайлаФормы Возр");
	
	ОбновитьРазмерыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыФормыВБазу()
	
	НачатьТранзакцию();
	
	//файлы, удаленные из таблицы файлов, требуется удалить из базы
	МассивУдаляемыхФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивУдаляемыхФайлов);
	
	//запишем данные из таблицы файлов в присоединяемые файлы
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		
		ПрисоединенныйФайлСсылка = СтрокаТаблицыФайлов.ПрисоединенныйФайлСсылка;
		//Попытаемся найти присоединенный файл в массиве файлов - кандидатов на удаление
		ИндексНайденногоФайла = МассивУдаляемыхФайлов.Найти(ПрисоединенныйФайлСсылка);
		Если ИндексНайденногоФайла <> Неопределено Тогда
			МассивУдаляемыхФайлов.Удалить(ИндексНайденногоФайла);
		КонецЕсли;
		
		Если СтрокаТаблицыФайлов.АдресДанныхФайлаБазы <> СтрокаТаблицыФайлов.АдресДанныхФайлаФормы Тогда
			//файл требуется записать в базу
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
				//в базе уже есть ссылка на этот файл, но сам файл изменился, его требуется обновить в базе
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", СтрокаТаблицыФайлов.АдресДанныхФайлаФормы);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайлСсылка, ИнформацияОФайле);		
			Иначе
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ВладелецФайлов", 		Объект.Ссылка);
				ДополнительныеПараметры.Вставить("ИмяБезРасширения", 	СтрокаТаблицыФайлов.ИмяФайла);
				ДополнительныеПараметры.Вставить("Автор", 				Неопределено);
				ДополнительныеПараметры.Вставить("РасширениеБезТочки", 	Неопределено);
				ДополнительныеПараметры.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				
				//это новый файл, добавим его в базу
				ПрисоединенныйФайлСсылка = РаботаСФайлами.ДобавитьФайл(
					ДополнительныеПараметры,
					СтрокаТаблицыФайлов.АдресДанныхФайлаФормы);
					
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы <> СтрокаТаблицыФайлов.НомерСтраницыФайлаБазы Тогда
			
			//требуется установать новый номер
			ИзменитьНомерСтраницыНаСервере(ПрисоединенныйФайлСсылка, СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы)
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
	
		// Очищаем перед добавлением
		Если ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайлСсылка).Количество() > 0 Тогда
			
			Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
			Подпись = Подписи[0];
			ПорядковыйНомерПодписи = Подпись.ПорядковыйНомер;
			
			ЭлектроннаяПодпись.УдалитьПодпись(ПрисоединенныйФайлСсылка, ПорядковыйНомерПодписи, УникальныйИдентификатор);
			
		КонецЕсли;
		
		// С файлом подписи нотариуса может быть только один сканированный файл.
		Если ЗначениеЗаполнено(ИмяФайлаПодписиНотариуса)
			И ЭтоАдресВременногоХранилища(АдресФайлаПодписиНотариуса) Тогда
			
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись", 			ПолучитьИзВременногоХранилища(АдресФайлаПодписиНотариуса));
			СвойстваПодписи.Вставить("ПодписьВерна", 		Истина);
			СвойстваПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДата());
			СвойстваПодписи.Вставить("КомуВыданСертификат", "");
			СвойстваПодписи.Вставить("ИмяФайлаПодписи", 	ИмяФайлаПодписиНотариуса);
			СвойстваПодписи.Вставить("Сертификат", 			Новый УникальныйИдентификатор);
			
			ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайлСсылка, СвойстваПодписи, УникальныйИдентификатор);
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'В качестве файла электронной подписи нотариуса выбран файл, 
                                |который не является электронной подписью'");
		Возврат;
		
	КонецПопытки;
	
	//удалим из базы присоединенные файлы, оставшиеся в массиве удаляемых файлов
	Если МассивУдаляемыхФайлов.Количество() > 0 Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.УдалитьПрисоединенныеФайлыСканированныеДокументыДляПередачиВЭлектронномВиде(МассивУдаляемыхФайлов);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавигациюПросмотраВложений()
	
	НадписьНавигацияИз = Элементы.НадписьНавигацияИз;
	НадписьНавигацияИз.Заголовок = "из " + КоличествоФайловВложений;
	
	Буфер = НомерВложенияПросмотр;
	СписокНомеров = Элементы.НомерВложенияПросмотр.СписокВыбора;
	СписокНомеров.Очистить();
	Для Счетчик = 1 По КоличествоФайловВложений Цикл
		СписокНомеров.Добавить(Счетчик);	
	КонецЦикла;
	
	Если Буфер <= КоличествоФайловВложений Тогда
		НомерВложенияПросмотр = Буфер;
	Иначе
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КолвоФайлов = 0;	
	Размер		= 0;
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		КолвоФайлов = КолвоФайлов 	+ 1;
		Размер 		= Размер 		+ СтрокаТаблицыФайлов.Размер;
	КонецЦикла;
	
	Возврат Новый Структура("КолвоФайлов, Размер", КолвоФайлов, Размер);
	
КонецФункции

&НаСервере
Процедура ОбновитьРазмерыДокумента()
	
	НадписьРазмерыСканДокумента = Элементы.НадписьРазмерыСканДокумента;
	
	СтруктураРазмеров = ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КоличествоФайловВложений 	= СтруктураРазмеров.КолвоФайлов;
	РазмерВБайтахВложений 		= СтруктураРазмеров.Размер;
	
	ЗаполнитьНавигациюПросмотраВложений();
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах = МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(ДопустимыйРазмерВБайтах);
	
	СодержимоеТекста = "";
	
	Если (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0) Тогда
		
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
	Иначе
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить еще " + ДопустимоеКоличествоМегабайт + " Мб.";
		
	КонецЕсли;
	
	НадписьРазмерыСканДокумента.ЦветТекста = ЦветТекста;
	НадписьРазмерыСканДокумента.Заголовок = СодержимоеТекста;
	
	ЕстьВложения = (КоличествоФайловВложений > 0);
	УправлениеЭУЕстьНетВложений(ЕстьВложения);
	
КонецПроцедуры

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	МножественныйВыбор = НЕ ЗначениеЗаполнено(ИмяФайлаПодписиНотариуса);
	
	ВыбратьИДобавитьВложения(МножественныйВыбор);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерСтраницыНаСервере(ПрисоединенныйФайлСсылка, НомерСтраницы)
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.НомерСтраницы = НомерСтраницы;
	ПрисоединенныйФайлОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ТекДанные.АдресДанныхФайлаФормы, ТекДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекстВопроса = НСтр("ru = 'Удалить выделенные файлы изображений?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлыЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// удалим выделенные файлы изображений
	Для каждого ИдентификаторСтроки Из Элементы.ТаблицаФайлов.ВыделенныеСтроки Цикл
		СтрокаТаблицыФайлов = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаФайлов.Удалить(СтрокаТаблицыФайлов);
	КонецЦикла;
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	ПронумероватьСтрокиТаблицыФайлов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭУПросмотрСписокВложений()
	
	Элементы.ГруппаСписокВложений.Видимость 						= НЕ РежимПросмотра;	
	Элементы.ГруппаПросмотрВложений.Видимость 						= РежимПросмотра;	
	Элементы.ГруппаУправлениеТаблицаФайловРежимСписка.Видимость 	= НЕ РежимПросмотра;
	Элементы.ГруппаУправлениеТаблицаФайловРежимПросмотра.Видимость 	= РежимПросмотра;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУЕстьНетВложений(ЕстьВложения)
	
	Элементы.ГруппаПросмотрВложенийНавигация.Видимость 	= ЕстьВложения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ДобавитьВложениеВРежимеПросмотра(Команда)
	
	ВыбратьИДобавитьВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	
	Если РежимПросмотра Тогда
		Если Элементы.ТаблицаФайлов.ТекущиеДанные <> Неопределено Тогда
			НомерВложенияПросмотр = Элементы.ТаблицаФайлов.ТекущиеДанные.НомерСтраницыФайлаФормы;
		Иначе
			НомерВложенияПросмотр = КоличествоФайловВложений;	
		КонецЕсли;
	КонецЕсли;
		
	ОтработатьИзменениеРежимаПросмотраНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ОтработатьИзменениеРежимаПросмотраНаСервере()
	
	УправлениеЭУПросмотрСписокВложений();
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИДобавитьВложения();

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВРеальномРазмереПриИзменении(Элемент)
	
	УстановитьРазмерКартинкиПоЗначениюПереключателя();	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВложенияПросмотрПриИзменении(Элемент)
	
	ОбновитьАдресКартинкиПросмотра();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаНачальный(Команда)
	
	Если КоличествоФайловВложений > 0 Тогда
		НомерВложенияПросмотр = 1;
	Иначе
		НомерВложенияПросмотр = 0;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаКонечный(Команда)
	
	НомерВложенияПросмотр = КоличествоФайловВложений;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВРежимеПросмотра(Команда)
	
	Если НомерВложенияПросмотр > 0 Тогда
		ТаблицаФайлов.Удалить(НомерВложенияПросмотр - 1);
		Модифицированность = Истина;
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		ПронумероватьСтрокиТаблицыФайлов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ФормаОбъект)
	
	ТекстЗаголовка = ФормаОбъект.Объект.СведенияДокумента;
	
КонецФункции 

&НаСервере
Процедура ОбновитьАдресКартинкиПросмотра()
	
	Если РежимПросмотра Тогда
		Если НомерВложенияПросмотр > 0 Тогда
			НовыйАдресДанных = ТаблицаФайлов[НомерВложенияПросмотр - 1].АдресДанныхФайлаФормы;
			Если АдресКартинкиПросмотр <> НовыйАдресДанных Тогда
				АдресКартинкиПросмотр = НовыйАдресДанных;
			КонецЕсли;
			Элементы.АдресКартинкиПросмотр.Гиперссылка = Ложь;
		Иначе
			АдресКартинкиПросмотр = "";
			Элементы.АдресКартинкиПросмотр.Гиперссылка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерКартинкиПоЗначениюПереключателя()

	Элементы.АдресКартинкиПросмотр.РазмерКартинки = 
		?(ПросмотрВРеальномРазмере, РазмерКартинки.РеальныйРазмер, РазмерКартинки.Пропорционально);	

КонецПроцедуры

&НаСервере
Процедура ПронумероватьСтрокиТаблицыФайлов()
	
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы = (ТаблицаФайлов.Индекс(СтрокаТаблицыФайлов) + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере()
	
	ОбновитьРазмерыДокумента();
	Если КоличествоФайловВложений = 0 Тогда
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьВыбранныеФайлы()
	
	РезультатВыбораФайлов = ПолучитьИзВременногоХранилища(АдресРезультатаВыбораФайлов);
	
	Если НЕ ЗначениеЗаполнено(РезультатВыбораФайлов) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗагрузкаСканаНапрямуюИзОписи = Истина;
	
	Если РезультатВыбораФайлов.Свойство("СвойстваВыбранногоДокумента") Тогда
		// Был выбран первичный документ
		ВыборИсточникаПослеПолученияСвойствДокумента(РезультатВыбораФайлов.СвойстваВыбранногоДокумента, Неопределено);
	Иначе
		// Был выбран скан с диска
		
		ОписанияФайлов  = РезультатВыбораФайлов.ОписанияФайлов;
		Выполнено 		= РезультатВыбораФайлов.Выполнено И ОписанияФайлов.Количество()>0;
		
		Для каждого Файл Из ОписанияФайлов Цикл
			
			НовоеИмяФайла = ПроверитьИмяФайлаНаСимволы(Файл.Имя);
			
			ДобавитьВложенияПоштучно(
				Выполнено, 
				Файл.Адрес, 
				НовоеИмяФайла);
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИмяФайлаНаСимволы(ТекущееИмяФайла)
	
	ИзмененоИмя = Ложь;
	Результат = ТекущееИмяФайла;
	
	Если ПроверятьНедопустимыеСимволы Тогда
		РезультатПроверки = КонтекстЭДОКлиент.ПроверитьНеДопустимыеСимволыИмениФайла(ТекущееИмяФайла, "windows-1251");
		Если НЕ РезультатПроверки.Пройдена Тогда
			Результат = РезультатПроверки.НовоеИмя;
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'В имени файла недопустимые символы.'"), , 
				НСтр("ru = 'Произведена замена недопустимых символов.'"), , 
				СтатусОповещенияПользователя.Информация);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СменитьДокументИсточник()
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ВыборИсточникаПослеПолученияСвойствДокумента", 
		ЭтотОбъект);

	КонтекстЭДОКлиент.ВыбратьПервичныйДокументВОтветеНаТребование(ВыполняемоеОповещение, Объект.Организация, Объект.Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура КВДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.КВД = ВыбранноеЗначение;
	
	НайденноеЗначение = Элементы.КВД.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	КВД  = НайденноеЗначение.Представление;
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти