#Область ОписаниеПеременных

&НаКлиенте
Перем ВремяНачалаДоИзменения, ВремяОкончанияДоИзменения, КоличествоРабочихЧасовДоИзменения;

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.ТипГрафика) Тогда
		Объект.ТипГрафика = Перечисления.ТипыГрафикаРаботы.КалендарныеДни;
		ВидГрафикаПриИзмененииНаСервере();
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Ложь;
	Иначе
		ВидГрафикаПриИзмененииНаСервере(Истина);
		БылоИзменениеРасписания = Истина;
	КонецЕсли;
	
	Объект.УчитыватьПраздничныеДни = ?(Параметры.Ключ.Пустая(), Истина, Объект.УчитыватьПраздничныеДни);
	
	Объект.Перерывы.Сортировать("НомерДня Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНастройкиТаблиц(Истина);
	СформироватьПредставлениеРасписанияДополнительныхНастроекЗаполнения();
	ЗаполнитьСписокВыбораДопНастроек();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Расписание работы
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасписаниеРаботы.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыНачалоРабочегоДня");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыОкончаниеРабочегоДня");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасписаниеРаботы.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыЧасовПерерывовПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасписаниеРаботы.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыКоличествоРабочихЧасов");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	// --------------------
	
	// Дополнительные настройки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ДополнительныеНастройкиЗаполнения.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДополнительныеНастройкиЗаполненияВремяНачала");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДополнительныеНастройкиЗаполненияВремяОкончания");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ДополнительныеНастройкиЗаполнения.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДополнительныеНастройкиЗаполненияРасписание");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ДополнительныеНастройкиЗаполнения.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ДополнительныеНастройкиЗаполненияКоличествоРабочихЧасов");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	// ---------------------
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасписаниеРаботы.Активность", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ТипГрафика", Перечисления.ТипыГрафикаРаботы.Сменный, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыНомерДняПредставление");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыНачалоРабочегоДня");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыОкончаниеРабочегоДня");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыКоличествоРабочихЧасов");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыВремяПерерывов");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыЧасовПерерывовПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.РасписаниеРаботы.Активность", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ТипГрафика", Перечисления.ТипыГрафикаРаботы.Сменный, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыКоличествоРабочихЧасов");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", "<нерабочий>");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиТаблиц(ОткрытияФормы = Ложь)
	
	ПоДнямНедели = ?(Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни"), Истина, Ложь);
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		
		Элементы.РасписаниеРаботыКонтекстноеМенюЗаполнитьТекущим.Доступность = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьРабочийДень.Доступность = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьНерабочийДень.Доступность = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюОчиститьРасписание.Доступность = Ложь;
		
		Элементы.РасписаниеКнопкаДобавитьРабочийДень.Доступность = Ложь;
		Элементы.РасписаниеКнопкаДобавитьНеРабочийДень.Доступность = Ложь;
		
	КонецЕсли;
	
	Если ПоДнямНедели Тогда
		Элементы.РасписаниеРаботыНомерДняПредставление.Заголовок = НСтр("ru = 'День недели'");
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьРабочийДень.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьНерабочийДень.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюПереместитьВверх.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюПереместитьВниз.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюСкопировать.Видимость = Ложь;
		Элементы.РасписаниеРаботыКонтекстноеМенюЗаполнитьТекущим.Видимость = Истина;
	Иначе
		Элементы.РасписаниеРаботыНомерДняПредставление.Заголовок = НСтр("ru = 'Номер дня'");
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьРабочийДень.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюДобавитьНерабочийДень.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюУдалить.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюПереместитьВверх.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюПереместитьВниз.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюСкопировать.Видимость = Истина;
		Элементы.РасписаниеРаботыКонтекстноеМенюЗаполнитьТекущим.Видимость = Ложь;
	КонецЕсли;

	Элементы.РасписаниеРаботыКонтекстноеМенюСкопировать.Доступность = ?(ЭтаФорма.ТолькоПросмотр, Ложь,Объект.РасписаниеРаботы.Количество());
	
	НомерДня = 0;
	
	Если Не ОткрытияФормы Тогда
		ЗаполнитьКэшТаблиц();
	КонецЕсли;
	
	Для Каждого СтрокаРасписания Из Объект.РасписаниеРаботы Цикл
		
		НомерДня = НомерДня + 1;
		
		Если Не ОткрытияФормы Тогда
			ПереназначитьНомерДняПерерывамИПериодам(СтрокаРасписания.НомерДняЦикла, НомерДня);
			СтрокаРасписания.НомерДняЦикла = НомерДня;
		КонецЕсли;
		
		СтрокаРасписания.НомерДняПредставление = ПредставленияДняЦикла(СтрокаРасписания.НомерДняЦикла,ПоДнямНедели);
		
		Если ЗначениеЗаполнено(СтрокаРасписания.ВремяНачала) Или ЗначениеЗаполнено(СтрокаРасписания.ВремяОкончания) Тогда
			СтрокаРасписания.ЗаполненПериодРабочегоДня = Истина;
		Иначе
			СтрокаРасписания.ЗаполненПериодРабочегоДня = Ложь;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("НомерДня", СтрокаРасписания.НомерДняЦикла);
		СтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
		
		СтрокаРасписания.ЗаполненПериодПерерывов =?(СтрокиПерерывов.Количество()>0, Истина, Ложь);
		
		КоличествоПерерывов = СтрокиПерерывов.Количество();
		
		СтрокаПредставления = "";
		
		Если КоличествоПерерывов Тогда
			
			ИндексКоличества = 1;
			
			ДлительностьПерерывов = 0;
			
			Для Каждого СтрокаПерерывов Из СтрокиПерерывов Цикл
				
				ПредставлениеВремениНачала = ?(ЗначениеЗаполнено(СтрокаПерерывов.ВремяНачала), Формат(СтрокаПерерывов.ВремяНачала,"ДФ=HH:mm"), "00:00");
				ПредставлениеВремениОкончания = ?(ЗначениеЗаполнено(СтрокаПерерывов.ВремяОкончания), Формат(СтрокаПерерывов.ВремяОкончания,"ДФ=HH:mm"), "24:00");
				
				СтрокаПредставления = СтрокаПредставления + "("+ ПредставлениеВремениНачала + "-" 
				+ ПредставлениеВремениОкончания + ")" + ?(ИндексКоличества<КоличествоПерерывов, ", ", "");
				
				ИндексКоличества = ИндексКоличества + 1;
				ДлительностьПерерывов = ДлительностьПерерывов + СтрокаПерерывов.Длительность;
				
			КонецЦикла;
			
			СтрокаПредставления = ?(ЗначениеЗаполнено(СтрокаПредставления), Строка(ДлительностьПерерывов) + "ч. " + СтрокаПредставления, "");
			
		Иначе
			СтрокаПредставления = ?(ЗначениеЗаполнено(СтрокаРасписания.ВремяПерерывов), Строка(СтрокаРасписания.ВремяПерерывов)+ "ч. ", "");
		КонецЕсли;
		
		СтрокаРасписания.ЧасовПерерывовПредставление = СтрокаПредставления;
		
	КонецЦикла;
	
	СформироватьПредставлениеРасписанияДополнительныхНастроекЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшТаблиц()
	
	ТаблицаПерерывовКэш.Очистить();
	ТаблицаПериодовКэш.Очистить();
	
	Для Каждого СтрокаТаблицы Из Объект.Периоды Цикл
		НоваяСтрока = ТаблицаПериодовКэш.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Перерывы Цикл
		НоваяСтрока = ТаблицаПерерывовКэш.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
		
	Объект.Периоды.Очистить();
	Объект.Перерывы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПриИзменении(Элемент)
	
	УстановитьНастройкиТаблиц();
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереназначитьНомерДняПерерывамИПериодам(НомерДняЦикла, НомерДня)
	
	ПараметрыОтбора = Новый Структура("НомерДня", НомерДняЦикла);
	ПереназначаемыеСтроки = ТаблицаПерерывовКэш.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из ПереназначаемыеСтроки Цикл
		СтрокаПерерыва = Объект.Перерывы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПерерыва, НайденнаяСтрока);
		СтрокаПерерыва.НомерДня = НомерДня;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерДняЦикла);
	ПереназначаемыеСтроки = ТаблицаПериодовКэш.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из ПереназначаемыеСтроки Цикл
		СтрокаПериода = Объект.Периоды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПериода, НайденнаяСтрока);
		СтрокаПериода.НомерДняЦикла = НомерДня;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
		ТекущиеДанные.НомерДняЦикла = Объект.РасписаниеРаботы.Количество();
		ТекущиеДанные.НомерДняПредставление = ПредставленияДняЦикла(ТекущиеДанные.НомерДняЦикла,Объект.ВидГрафикаПоДнямНедели)
	КонецЕсли;
	
	ОткрытьФормуРедактированияПерерывов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВремяНачалаДоИзменения = ТекущиеДанные.ВремяНачала;
	ВремяОкончанияДоИзменения = ТекущиеДанные.ВремяОкончания;
	КоличествоРабочихЧасовДоИзменения = ТекущиеДанные.КоличествоРабочихЧасов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПерерывов(Элемент, СобытиеВыбор = Ложь, ЭтоДопНастройка = Ложь)
	
	Если Не ЭтоДопНастройка И (СобытиеВыбор ИЛИ Элемент.ТекущийЭлемент.Имя = "РасписаниеРаботыЧасовПерерывовПредставление") Тогда
		
		ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено ИЛИ Не ТекущиеДанные.Активность Тогда 
			Возврат 
		КонецЕсли;
		
		Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не заданы часы работы'"),0,"Предупреждение");
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВремяНачала", ТекущиеДанные.ВремяНачала);
		ПараметрыОткрытия.Вставить("ВремяОкончания", ТекущиеДанные.ВремяОкончания);
		ПараметрыОткрытия.Вставить("ВремяПерерывов", ТекущиеДанные.ВремяПерерывов);
		ПараметрыОткрытия.Вставить("НомерДня", ТекущиеДанные.НомерДняЦикла);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", ТекущиеДанные.КоличествоРабочихЧасов);
		ПараметрыОткрытия.Вставить("ЭтоДопНастройка", Ложь);
		
		СформироватьПерерывыПоДню(ТекущиеДанные.НомерДняЦикла);
		ПараметрыОткрытия.Вставить("Перерывы", ПерерывыПоДню);
		
		ДопПараметрыОповещения = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"СкорректироватьРасписаниеИПерерывы", 
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ОткрытьФорму("Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.Форма.ФормаИзменитьРасписание"
		, ПараметрыОткрытия, Элемент,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоДопНастройка И (СобытиеВыбор ИЛИ Элемент.ТекущийЭлемент.Имя = "ДополнительныеНастройкиЗаполненияРасписание") Тогда
		
		ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат 
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВремяНачала", ТекущиеДанные.ВремяНачала);
		ПараметрыОткрытия.Вставить("ВремяОкончания", ТекущиеДанные.ВремяОкончания);
		ПараметрыОткрытия.Вставить("ВремяПерерывов", ТекущиеДанные.ВремяПерерывов);
		ПараметрыОткрытия.Вставить("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", ТекущиеДанные.КоличествоРабочихЧасов);
		ПараметрыОткрытия.Вставить("ЭтоДопНастройка", Истина);
		
		СформироватьПерерывыПоДню(ТекущиеДанные.ЗначениеНастройки, Истина);
		ПараметрыОткрытия.Вставить("Перерывы", ПерерывыПоДнюДопНастройки);
		
		ДопПараметрыОповещения = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"СкорректироватьРасписаниеИПерерывыДопНастройки",
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ОткрытьФорму("Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.Форма.ФормаИзменитьРасписание"
		, ПараметрыОткрытия, Элемент,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьРасписаниеИПерерывы(Результат, ВходящийКонтекст) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		
		ТекущиеДанные.ВремяНачала = Результат.ВремяНачала;
		ТекущиеДанные.ВремяОкончания = Результат.ВремяОкончания;
		ТекущиеДанные.ВремяПерерывов = Результат.ВремяПерерывов;
		
		КоличествоПерерывов = Результат.Перерывы.Количество();
		
		СтрокаПредставления = "";
		
		//Перерывы
		ПараметрыОтбора = Новый Структура("НомерДня", ТекущиеДанные.НомерДняЦикла);
		СтарыеПерерывы = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтарыйПерерыв Из СтарыеПерерывы Цикл
			Объект.Перерывы.Удалить(СтарыйПерерыв);
		КонецЦикла;
		
		Для Каждого НовыйПерерыв Из Результат.Перерывы Цикл 
			НоваяСтрока = Объект.Перерывы.Добавить();
			НоваяСтрока.НомерДня = ТекущиеДанные.НомерДняЦикла;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйПерерыв);
		КонецЦикла;
		
		// Периоды между перерывами
		ПараметрыОтбора = Новый Структура("НомерДняЦикла", ТекущиеДанные.НомерДняЦикла);
		СтарыеПериоды = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтарыйПериод Из СтарыеПериоды Цикл
			Объект.Периоды.Удалить(СтарыйПериод);
		КонецЦикла;
		
		Для Каждого НовыйПериод Из Результат.Периоды Цикл
			НоваяСтрока = Объект.Периоды.Добавить();
			НоваяСтрока.НомерДняЦикла = ТекущиеДанные.НомерДняЦикла;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйПериод);
		КонецЦикла;
		
		Если Не Результат.Периоды.Количество() Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)
				Или ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) Тогда
				НоваяСтрока = Объект.Периоды.Добавить();
				НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
				НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьИзменениеРабочегоПериода(Ложь, Результат.ЧасыРаботы);
		УстановитьНастройкиТаблиц();
		
		БылоИзменениеРасписания = Истина;
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
	Объект.Перерывы.Сортировать("НомерДня Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьРасписаниеИПерерывыДопНастройки(Результат, ВходящийКонтекст) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
		
		ТекущиеДанные.ВремяНачала = Результат.ВремяНачала;
		ТекущиеДанные.ВремяОкончания = Результат.ВремяОкончания;
		ТекущиеДанные.ВремяПерерывов = Результат.ВремяПерерывов;
		ТекущиеДанные.КоличествоРабочихЧасов = Результат.ЧасыРаботы;
		
		КоличествоПерерывов = Результат.Перерывы.Количество();
		
		СтрокаПредставления = "";
		
		//Перерывы
		ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
		СтарыеПерерывы = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтарыйПерерыв Из СтарыеПерерывы Цикл
			Объект.ПерерывыДополнительныхНастроекЗаполнения.Удалить(СтарыйПерерыв);
		КонецЦикла;
		
		ПредставлениеПерерывов = "";
		
		Для Каждого НовыйПерерыв Из Результат.Перерывы Цикл 
			НоваяСтрока = Объект.ПерерывыДополнительныхНастроекЗаполнения.Добавить();
			НоваяСтрока.ЗначениеНастройки = ТекущиеДанные.ЗначениеНастройки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйПерерыв);
			
			ПредставлениеПерерывов = ПредставлениеПерерывов + "(" + Формат(НовыйПерерыв.ВремяНачала,"ДФ=HH:mm") + "-"
			+ ?(ЗначениеЗаполнено(НовыйПерерыв.ВремяОкончания),Формат(НовыйПерерыв.ВремяОкончания,"ДФ=HH:mm"), "24:00")+")" + ";";
			
		КонецЦикла;
		
		// Периоды между перерывами
		ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
		СтарыеПериоды = Объект.ПериодыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтарыйПериод Из СтарыеПериоды Цикл
			Объект.ПериодыДополнительныхНастроекЗаполнения.Удалить(СтарыйПериод);
		КонецЦикла;
		
		Для Каждого НовыйПериод Из Результат.Периоды Цикл
			НоваяСтрока = Объект.ПериодыДополнительныхНастроекЗаполнения.Добавить();
			НоваяСтрока.ЗначениеНастройки = ТекущиеДанные.ЗначениеНастройки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйПериод);
		КонецЦикла;
		
		Если Не Результат.Периоды.Количество() Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)
				Или ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) Тогда
				НоваяСтрока = Объект.ПериодыДополнительныхНастроекЗаполнения.Добавить();
				НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
				НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
			ОчиститьРасписаниеИПерерывы(ТекущиеДанные.ЗначениеНастройки);
			ТекущиеДанные.ПредставлениеРасписания = "";
			Возврат
		КонецЕсли;
		
		Если Не ТекущиеДанные.ВремяПерерывов = 0 Тогда
			
			СтрокаПредставления = ?(Не ТекущиеДанные.ВремяПерерывов = 0, Строка(ТекущиеДанные.ВремяПерерывов)+"ч. " + ПредставлениеПерерывов, "");
			
		КонецЕсли;
		
		ОбработатьИзменениеРабочегоПериодаДополнительныхНастроек(Ложь, Результат.ЧасыРаботы);
		ТекущиеДанные.ЧасовПерерывовПредставление = СтрокаПредставления;
		
		БылоИзменениеРасписания = Истина;
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
	Объект.Перерывы.Сортировать("НомерДня Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеРасписанияДополнительныхНастроекЗаполнения()
	
	Для Каждого СтрокаДопНастроек Из Объект.ДополнительныеНастройкиЗаполнения Цикл
		
		ПараметрыОтбора = Новый Структура("ЗначениеНастройки", СтрокаДопНастроек.ЗначениеНастройки);
		СтрокиПерерывы = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаДопНастроек.КоличествоРабочихЧасов = 0 Тогда Продолжить КонецЕсли;
		
		СтрокаПредставления = "";
		ПредставлениеПерерывов = "";
		
		Для Каждого СтрокаПерерыва Из СтрокиПерерывы Цикл
			ПредставлениеПерерывов = "(" + ?(ЗначениеЗаполнено(СтрокаПерерыва.ВремяНачала), Формат(СтрокаПерерыва.ВремяНачала,"ДФ=HH:mm"), "00:00")
			+ "-" + ?(ЗначениеЗаполнено(СтрокаПерерыва.ВремяОкончания), Формат(СтрокаПерерыва.ВремяОкончания,"ДФ=HH:mm"), "24:00") + ")" + ";";
		КонецЦикла;
		
		Если Не СтрокаДопНастроек.ВремяПерерывов = 0 Тогда
			
			СтрокаПредставления = ?(СтрокаДопНастроек.ВремяПерерывов > 0, Строка(СтрокаДопНастроек.ВремяПерерывов) + "ч. " + ПредставлениеПерерывов, "");
			
		КонецЕсли;
		
		СтрокаДопНастроек.ЧасовПерерывовПредставление = СтрокаПредставления;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПерерывыПоДню(ПараметрПоиска, ЭтоДопНастройка = Ложь)
	
	Если Не ЭтоДопНастройка Тогда
		
		ПерерывыПоДню.Очистить();
		
		ОтборПерерывы = Новый Структура("НомерДня", ПараметрПоиска);
		СтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ОтборПерерывы);
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаПерерыва Из СтрокиПерерывов Цикл
			НоваяСтрока = ПерерывыПоДню.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПерерыва);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	Иначе
		
		ПерерывыПоДнюДопНастройки.Очистить();
		
		ОтборПерерывы = Новый Структура("ЗначениеНастройки", ПараметрПоиска);
		СтрокиПерерывов = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ОтборПерерывы);
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаПерерыва Из СтрокиПерерывов Цикл
			НоваяСтрока = ПерерывыПоДнюДопНастройки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПерерыва);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставленияДняЦикла(НомерДня, ВидГрафикаПоДнямНедели = Ложь)
	Если ВидГрафикаПоДнямНедели Тогда
		Возврат Формат(НачалоНедели('20100101') + (НомерДня - 1) * 86400, "ДФ=ддд");
	Иначе
		Возврат Формат(НомерДня, "ЧГ=");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РасписаниеРаботыПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ОчиститьРасписаниеИПерерывы(ТекущиеДанные.НомерДняЦикла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасписаниеИПерерывы(НомерДняЦикла)
	
	ПараметрыОтбора = Новый Структура("НомерДня", НомерДняЦикла);
	
	СтрокиДляУдаления = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		Объект.Перерывы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерДняЦикла);
	СтрокиПериодов = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		Объект.Периоды.Удалить(СтрокаПериода);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереназначитьРасписаниеИПерерывыДополнительныхНастроек(ЗначениеСтаройНастройки, ЗначениеНовойНастройки)
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ЗначениеСтаройНастройки);
	
	СтрокиПерерывов = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПерерыва Из СтрокиПерерывов Цикл
		СтрокаПерерыва.ЗначениеНастройки = ЗначениеНовойНастройки;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ЗначениеСтаройНастройки);
	СтрокиПериодов = Объект.ПериодыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		СтрокаПериода.ЗначениеНастройки = ЗначениеНовойНастройки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидГрафикаПриИзмененииНаСервере(ОткрытиеФормы = Ложь)
	
	ЭтоГрафикПоСменам = ?(Объект.ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный, Истина, Ложь);
	
	Если Не ЭтоГрафикПоСменам Тогда
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКоманднаяПанельРасписание.Видимость = ЭтоГрафикПоСменам;
	
	Если Не ОткрытиеФормы И Не ЭтоГрафикПоСменам Тогда
		ЗаполнитьСтрокиРасписанияКалендаряПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРасписанияКалендаряПоУмолчанию()
	КоличествоРабочихДней = 5;
	
	Объект.РасписаниеРаботы.Очистить();
	Объект.Перерывы.Очистить();
	Объект.Периоды.Очистить();
	
	Для НомерДня = 1 По 7 Цикл
		СтрокаРасписания = Объект.РасписаниеРаботы.Добавить();
		СтрокаРасписания.НомерДняЦикла = НомерДня;
		СтрокаРасписания.НомерДняПредставление = ПредставленияДняЦикла(НомерДня, Объект.ВидГрафикаПоДнямНедели);
		СтрокаРасписания.Активность = Истина;
		
		Если НомерДня <= КоличествоРабочихДней Тогда
			СтрокаРасписания.КоличествоРабочихЧасов = 8;
			СтрокаРасписания.ВремяНачала = Дата(1,1,1,08,00,0);
			СтрокаРасписания.ВремяОкончания = Дата(1,1,1,17,00,0);
			
			СтрокаПерерыв = Объект.Перерывы.Добавить();
			СтрокаПерерыв.ВремяНачала = Дата(1,1,1,12,00,0);
			СтрокаПерерыв.ВремяОкончания = Дата(1,1,1,13,00,0);
			СтрокаПерерыв.Длительность = 1;
			СтрокаПерерыв.НомерДня = НомерДня;
			
			НоваяСтрокаПериода = Объект.Периоды.Добавить();
			НоваяСтрокаПериода.ВремяНачала = Дата(1,1,1,8,0,0);
			НоваяСтрокаПериода.ВремяОкончания = Дата(1,1,1,12,0,0);
			НоваяСтрокаПериода.НомерДняЦикла = НомерДня;
			НоваяСтрокаПериода.Длительность = 4;
			
			НоваяСтрокаПериода = Объект.Периоды.Добавить();
			НоваяСтрокаПериода.ВремяНачала = Дата(1,1,1,13,0,0);
			НоваяСтрокаПериода.ВремяОкончания = Дата(1,1,1,17,0,0);
			НоваяСтрокаПериода.НомерДняЦикла = НомерДня;
			НоваяСтрокаПериода.Длительность = 4;
			
			СтрокаРасписания.ВремяПерерывов = 1;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыНачалоРабочегоДняПриИзменении(Элемент)
	ОбработатьИзменениеРабочегоПериода();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыОкончаниеРабочегоДняПриИзменении(Элемент)
	ОбработатьИзменениеРабочегоПериода();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРабочегоПериода(ИзменениеВТабличнойЧасти = Истина, ЧасыРаботы = 0)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ИмяТЧПерерывы = "Перерывы";
	ИмяТЧПериоды = "Периоды";
	КолонкаОтбораПерерывы = "НомерДня";
	КолонкаОтбораПериоды = "НомерДняЦикла";
	
	ПараметрыОтбора = Новый Структура(КолонкаОтбораПерерывы, ТекущиеДанные.НомерДняЦикла);
	СтрокиПерерывов = Объект[ИмяТЧПерерывы].НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиПерерывов.Количество() И ИзменениеВТабличнойЧасти Тогда
		
		ТекстВопроса = НСтр("ru = 'Границы перерывов выходят за период рабочего дня. Интервалы перерывов будут очищены. Продолжить?'");
		
		ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)
			И ТекущиеДанные.ВремяНачала > СтрокиПерерывов[0].ВремяНачала Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
			Возврат;
		КонецЕсли;
		
		ВремяОкончанияПерерывов = СтрокиПерерывов[СтрокиПерерывов.Количество()-1].ВремяОкончания;
		ВремяОкончанияПерерывов = ?(Не ЗначениеЗаполнено(ВремяОкончанияПерерывов), Дата(1,1,1,23,59,0), ВремяОкончанияПерерывов);
		
		ВремяОкончанияПериода = ТекущиеДанные.ВремяОкончания;
		ВремяОкончанияПериода = ?(Не ЗначениеЗаполнено(ВремяОкончанияПериода), Дата(1,1,1,23,59,0), ВремяОкончанияПериода);
		
		Если ЗначениеЗаполнено(ВремяОкончанияПерерывов)
			И ВремяОкончанияПериода < ВремяОкончанияПерерывов Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.ОшибкаПериода = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
		И ТекущиеДанные.ВремяОкончания<= ТекущиеДанные.ВремяНачала Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) И ТекущиеДанные.ВремяНачала>= ТекущиеДанные.ВремяОкончания Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	КонецЕсли;
	
	НачалоПериода = ТекущиеДанные.ВремяНачала;
	ОкончаниеПериода = ТекущиеДанные.ВремяОкончания;
	
	Если Не ТекущиеДанные.ОшибкаПериода Тогда
		
		КоличествоРабочихЧасов = Окр((ОкончаниеПериода-НачалоПериода)/60/60, 2, РежимОкругления.Окр15как20);
		
		Если ЗначениеЗаполнено(НачалоПериода) Или ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			ТекущиеДанные.КоличествоРабочихЧасов = ?(КоличествоРабочихЧасов > 0, КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов
			, 24 + КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(ОкончаниеПериода)
			Тогда
			ТекущиеДанные.КоличествоРабочихЧасов = ?(Не ЧасыРаботы = 0, ЧасыРаботы, 24-ТекущиеДанные.ВремяПерерывов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
			
			ПараметрыОтбора = Новый Структура(КолонкаОтбораПериоды, ТекущиеДанные.НомерДняЦикла);
			СтрокиПериодов = Объект[ИмяТЧПериоды].НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
				Объект[ИмяТЧПериоды].Удалить(СтрокаПериода);
			КонецЦикла;
			
			НоваяСтрока = Объект[ИмяТЧПериоды].Добавить();
			НоваяСтрока.НомерДняЦикла = ТекущиеДанные.НомерДняЦикла;
			
			НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
			НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяПерерывов) И ТекущиеДанные.КоличествоРабочихЧасов = 0
		И (ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)) Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
	КонецЕсли;
	
	ТекущиеДанные.ЗаполненПериодРабочегоДня = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ТекущиеДанные.ВремяНачала = ВремяНачалаДоИзменения;
		ТекущиеДанные.ВремяОкончания = ВремяОкончанияДоИзменения;
		ТекущиеДанные.КоличествоРабочихЧасов = КоличествоРабочихЧасовДоИзменения;
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
		И ТекущиеДанные.ВремяОкончания<= ТекущиеДанные.ВремяНачала Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) И ТекущиеДанные.ВремяНачала>= ТекущиеДанные.ВремяОкончания Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
	КонецЕсли;
	
	НачалоПериода = ТекущиеДанные.ВремяНачала;
	ОкончаниеПериода = ТекущиеДанные.ВремяОкончания;
	
	ПараметрыОтбора = Новый Структура("НомерДня", ТекущиеДанные.НомерДняЦикла);
	СтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПерерывов Из СтрокиПерерывов Цикл
		Объект.Перерывы.Удалить(СтрокаПерерывов);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", ТекущиеДанные.НомерДняЦикла);
	СтрокиПериодов = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		Объект.Периоды.Удалить(СтрокаПериода);
	КонецЦикла;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		
		ТекущиеДанные.ВремяПерерывов = 0;
		ОкончаниеПериода = Дата(1,1,1);
		НачалоПериода = Дата(1,1,1);
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.ОшибкаПериода Тогда
		КоличествоРабочихЧасов = Окр((ОкончаниеПериода-НачалоПериода)/60/60, 2, РежимОкругления.Окр15как20);
		
		ТекущиеДанные.КоличествоРабочихЧасов = ?(КоличествоРабочихЧасов > 0, КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов
		, 24 + КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
			
			НоваяСтрока = Объект.Периоды.Добавить();
			НоваяСтрока.НомерДняЦикла = ТекущиеДанные.НомерДняЦикла;
			
			НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
			НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) Тогда
	//	ТекущиеДанные.ВремяОкончания = КонецРабочегоДня1С;
	//КонецЕсли;
	
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаИзменениеТипаГрафика(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Если Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни") Тогда
			Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.Сменный")
		Иначе
			Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни")
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Объект.РасписаниеРаботы.Очистить();
	Объект.Перерывы.Очистить();
	Объект.Периоды.Очистить();
	Объект.ДополнительныеНастройкиЗаполнения.Очистить();
	Объект.ПериодыДополнительныхНастроекЗаполнения.Очистить();
	Объект.ПерерывыДополнительныхНастроекЗаполнения.Очистить();
	ПерерывыПоДню.Очистить();
	ПерерывыПоДнюДопНастройки.Очистить();
	
	Если Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни") Тогда
		ВидГрафикаПриИзмененииНаСервере();
		Элементы.ГруппаКоманднаяПанельРасписание.Видимость = Ложь;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Ложь;
		Объект.УчитыватьПраздничныеДни = Истина;
		
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	Иначе
		Элементы.ГруппаКоманднаяПанельРасписание.Видимость = Истина;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Истина;
		Объект.УчитыватьПраздничныеДни = Ложь;
		
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По субботам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По воскресеньям");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	КонецЕсли;
	
	УстановитьНастройкиТаблиц();
	
	БылоИзменениеРасписания = Ложь;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипГрафикаПриИзменении(Элемент)
	
	Если БылоИзменениеРасписания Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИзменениеТипаГрафика", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Изменения расписания будут удалены. Продолжить?'"), Режим, 0);
		
		Возврат;
	КонецЕсли;
	
		Объект.РасписаниеРаботы.Очистить();
	Объект.Перерывы.Очистить();
	Объект.Периоды.Очистить();
	Объект.ДополнительныеНастройкиЗаполнения.Очистить();
	Объект.ПериодыДополнительныхНастроекЗаполнения.Очистить();
	Объект.ПерерывыДополнительныхНастроекЗаполнения.Очистить();
	ПерерывыПоДню.Очистить();
	ПерерывыПоДнюДопНастройки.Очистить();
	
	Если Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни") Тогда
		ВидГрафикаПриИзмененииНаСервере();
		Элементы.ГруппаКоманднаяПанельРасписание.Видимость = Ложь;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Ложь;
		Объект.УчитыватьПраздничныеДни = Истина;
		
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	Иначе
		Элементы.ГруппаКоманднаяПанельРасписание.Видимость = Истина;
		Элементы.РасписаниеРаботы.ИзменятьСоставСтрок = Истина;
		Объект.УчитыватьПраздничныеДни = Ложь;
		
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По субботам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По воскресеньям");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	КонецЕсли;
	
	УстановитьНастройкиТаблиц();
	
	БылоИзменениеРасписания = Ложь;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДопНастроек()
	
	Если Объект.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.КалендарныеДни") Тогда
		
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	Иначе
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Очистить();
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По четным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По нечетным числам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По субботам");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("По воскресеньям");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В предпраздничных днях");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В праздники");
		Элементы.ДополнительныеНастройкиЗаполненияИзменить.СписокВыбора.Добавить("В выходные",НСтр("ru = 'В выходные (сб, вс, праздники)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Объект.РасписаниеРаботы.Количество() Тогда
		Объект.Периоды.Очистить();
		Объект.Перерывы.Очистить();
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасписания Из Объект.РасписаниеРаботы Цикл
		
		Если СтрокаРасписания.ОшибкаПериода Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Период задан неверно!' ");
			Сообщение.Поле = "Объект.РасписаниеРаботы[" + Строка(СтрокаРасписания.НомерСтроки-1) +"]" + ".ВремяНачала";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СтрокаРасписания.КоличествоРабочихЧасов = 0 И Не СтрокаРасписания.ВремяПерерывов = 0
			Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Удалите перерывы или введите часы работы!' ");
			Сообщение.Поле = "Объект.РасписаниеРаботы[" + Строка(СтрокаРасписания.НомерСтроки-1) +"]" + ".КоличествоРабочихЧасов";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДопНастроек Из Объект.ДополнительныеНастройкиЗаполнения Цикл
		
		Если СтрокаДопНастроек.ОшибкаПериода Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Период задан неверно!' ");
			Сообщение.Поле = "Объект.ДополнительныеНастройкиЗаполнения[" + Строка(СтрокаДопНастроек.НомерСтроки-1) +"]" + ".ВремяНачала";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СтрокаДопНастроек.КоличествоРабочихЧасов = 0 И Не СтрокаДопНастроек.ВремяПерерывов = 0
			Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Удалите перерывы или введите часы работы!' ");
			Сообщение.Поле = "Объект.ДополнительныеНастройкиЗаполнения[" + Строка(СтрокаДопНастроек.НомерСтроки-1) +"]" + ".КоличествоРабочихЧасов";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДобавитьНеРабочийДень(Команда)
	
	НоваяСтрока = Объект.РасписаниеРаботы.Добавить();
	НоваяСтрока.Активность = Ложь;
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДобавитьРабочийДень(Команда)
	
	НоваяСтрока = Объект.РасписаниеРаботы.Добавить();
	НоваяСтрока.Активность = Истина;
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыЧасовПерерывовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не заданы часы работы'"),0,"Предупреждение");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияПерерывов(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьНастройкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиРасписания(Команда)
	
	КопированиеСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеСтрок()
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	НомерКопируемогоДня = ТекущиеДанные.НомерДняЦикла;
	
	НоваяСтрока = Объект.РасписаниеРаботы.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	НоваяСтрока.НомерДняЦикла = Объект.РасписаниеРаботы.Количество();
	
	СкопироватьПерерывыИПериодыСтроке(НомерКопируемогоДня, НоваяСтрока.НомерДняЦикла);
	
	УстановитьНастройкиТаблиц();
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПерерывыИПериодыСтроке(НомерКопируемогоДня, НовыйНомерДня = 0)
	
	//Перерывы
	ПараметрыОтбора = Новый Структура("НомерДня", НомерКопируемогоДня);
	НовыеСтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("НомерДня", НовыйНомерДня);
	СтарыеСтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	Если СтарыеСтрокиПерерывов.Количество() Тогда
		Для Каждого СтараяСтрокаПерерывов Из СтарыеСтрокиПерерывов Цикл
			Объект.Перерывы.Удалить(СтараяСтрокаПерерывов);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПерерывов Из НовыеСтрокиПерерывов Цикл
		НоваяСтрока = Объект.Перерывы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПерерывов);
		НоваяСтрока.НомерДня = НовыйНомерДня;
	КонецЦикла;
	
	//Периоды
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерКопируемогоДня);
	НовыеСтрокиПериода = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", НовыйНомерДня);
	СтарыеСтрокиПериода = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	Если СтарыеСтрокиПериода.Количество() Тогда
		Для Каждого СтараяСтрокаПериода Из СтарыеСтрокиПериода Цикл
			Объект.Периоды.Удалить(СтараяСтрокаПериода);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПерерода Из НовыеСтрокиПериода Цикл
		НоваяСтрока = Объект.Периоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПерерода);
		НоваяСтрока.НомерДняЦикла = НовыйНомерДня;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		КопированиеСтрок();
		Отказ = Истина 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыКоличествоРабочихЧасовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("НомерДня", ТекущиеДанные.НомерДняЦикла);
	СтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоПерерывов = СтрокиПерерывов.Количество();
	
	Если КоличествоПерерывов Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перерывы будут очищены. Продолжить?'"), Режим, 0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		ТекущиеДанные.ВремяНачала = Дата(1,1,1);
		ТекущиеДанные.ВремяОкончания = Дата(1,1,1);
		ТекущиеДанные.ВремяПерерывов = 0;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов + ТекущиеДанные.ВремяПерерывов > 24 Тогда
		ТекущиеДанные.КоличествоРабочихЧасов = 24 - ТекущиеДанные.ВремяПерерывов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
		ДоступныхЧасов =86400+(Дата(1,1,1) - ТекущиеДанные.ВремяНачала) + ТекущиеДанные.ВремяПерерывов*3600;
	Иначе
		ДоступныхЧасов = 86400 + ТекущиеДанные.ВремяПерерывов*3600;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов*3600 > ДоступныхЧасов Тогда
		ТекущиеДанные.КоличествоРабочихЧасов = ДоступныхЧасов/3600;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
			ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
		ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
	Иначе
		ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
	КонецЕсли;
	
	Если КоличествоПерерывов Тогда
		
		Если Не ТекущиеДанные.КоличествоРабочихЧасов = 24
			И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
			И ТекущиеДанные.ВремяОкончания < СтрокиПерерывов[КоличествоПерерывов-1].ВремяОкончания Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Границы перерывов выходят за период рабочего дня. Интервалы перерывов будут очищены. Продолжить?'"), Режим, 0);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", ТекущиеДанные.НомерДняЦикла);
	СтрокиПериодов = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		Объект.Периоды.Удалить(СтрокаПериода);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
		
		НоваяСтрока = Объект.Периоды.Добавить();
		НоваяСтрока.НомерДняЦикла = ТекущиеДанные.НомерДняЦикла;
		
		НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
		НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
		НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
		НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущим(Команда)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	НомерКопируемогоДня = ТекущиеДанные.НомерДняЦикла;
	
	Для Каждого СтрокаРасписания Из Объект.РасписаниеРаботы Цикл
		
		Если СтрокаРасписания.НомерДняЦикла = НомерКопируемогоДня Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРасписания.ВремяНачала = ТекущиеДанные.ВремяНачала;
		СтрокаРасписания.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
		СтрокаРасписания.ВремяПерерывов = ТекущиеДанные.ВремяПерерывов;
		СтрокаРасписания.ЗаполненПериодПерерывов = ТекущиеДанные.ЗаполненПериодПерерывов;
		СтрокаРасписания.ЗаполненПериодРабочегоДня = ТекущиеДанные.ЗаполненПериодРабочегоДня;
		СтрокаРасписания.ОшибкаПериода = ТекущиеДанные.ОшибкаПериода;
		СтрокаРасписания.КоличествоРабочихЧасов = ТекущиеДанные.КоличествоРабочихЧасов;
		
		СкопироватьПерерывыИПериодыСтроке(НомерКопируемогоДня, СтрокаРасписания.НомерДняЦикла);
		
	КонецЦикла;
	
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Элементы.РасписаниеРаботыКонтекстноеМенюИзменить.Доступность = ТекущиеДанные.Активность;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасписание(Команда)
	
	ТекущиеДанные = Элементы.РасписаниеРаботы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	//Периоды
	ПараметрыОтбора = Новый Структура("НомерДняЦикла", ТекущиеДанные.НомерДняЦикла);
	СтрокиПериодов = Объект.Периоды.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		
		Если Не ТекущиеДанные.ВремяНачала = СтрокаПериода.ВремяНачала
			И Не ТекущиеДанные.ВремяОкончания = СтрокаПериода.ВремяОкончания Тогда
			
			Объект.Периоды.Удалить(СтрокаПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Перерывы
	ПараметрыОтбора = Новый Структура("НомерДня", ТекущиеДанные.НомерДняЦикла);
	СтрокиПерерывов = Объект.Перерывы.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПерерывов Из СтрокиПерерывов Цикл
		Объект.Перерывы.Удалить(СтрокаПерерывов);
	КонецЦикла;
	
	ТекущиеДанные.ВремяПерерывов = 0;
	
	ОбработатьИзменениеРабочегоПериода();
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыПослеУдаления(Элемент)
	Если Не Объект.РасписаниеРаботы.Количество() Тогда
		Объект.Периоды.Очистить();
		Объект.Перерывы.Очистить();
		Возврат;
	КонецЕсли;
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОткрытьФормуРедактированияПерерывов(Элемент,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияПослеУдаления(Элемент)
	
	Если Не Объект.ДополнительныеНастройкиЗаполнения.Количество() Тогда
		Объект.ПериодыДополнительныхНастроекЗаполнения.Очистить();
		Объект.ПерерывыДополнительныхНастроекЗаполнения.Очистить();
		Возврат;
	КонецЕсли;
	
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ОчиститьРасписаниеИПерерывы(ТекущиеДанные.ЗначениеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не заданы часы работы'"),0,"Предупреждение");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияПерерывов(Элемент, Истина, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияИзменитьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ВыбранноеЗначение);
	НайденныеСтроки = Объект.ДополнительныеНастройкиЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 1 И Не НайденныеСтроки[0].НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Данная доп. настройка заполнения уже присутствует в списке!' ");
		
		Сообщение.Поле = "Объект.ДополнительныеНастройкиЗаполнения[" + Строка(НайденныеСтроки[0].НомерСтроки-1) + "]" + ".ЗначениеНастройки";
		
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеНастройки) И Не ВыбранноеЗначение = ТекущиеДанные.ЗначениеНастройки Тогда
		ПереназначитьРасписаниеИПерерывыДополнительныхНастроек(ТекущиеДанные.ЗначениеНастройки, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияВремяНачалаПриИзменении(Элемент)
	ОбработатьИзменениеРабочегоПериодаДополнительныхНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияВремяОкончанияПриИзменении(Элемент)
	ОбработатьИзменениеРабочегоПериодаДополнительныхНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРабочегоПериодаДополнительныхНастроек(ИзменениеВТабличнойЧасти = Истина, ЧасыРаботы = 0)
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
	СтрокиПерерывов = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиПерерывов.Количество() И ИзменениеВТабличнойЧасти Тогда
		ТекстВопроса = НСтр("ru = 'Границы перерывов выходят за период рабочего дня. Интервалы перерывов будут очищены. Продолжить?'");
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)
			И ТекущиеДанные.ВремяНачала > СтрокиПерерывов[0].ВремяНачала Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДополнительныеНастройки", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
			Возврат;
		КонецЕсли;
		
		ВремяОкончанияПерерывов = СтрокиПерерывов[СтрокиПерерывов.Количество()-1].ВремяОкончания;
		ВремяОкончанияПерерывов = ?(Не ЗначениеЗаполнено(ВремяОкончанияПерерывов), Дата(1,1,1,23,59,0), ВремяОкончанияПерерывов);
		
		ВремяОкончанияПериода = ТекущиеДанные.ВремяОкончания;
		ВремяОкончанияПериода = ?(Не ЗначениеЗаполнено(ВремяОкончанияПериода), Дата(1,1,1,23,59,0), ВремяОкончанияПериода);
		
		Если ЗначениеЗаполнено(ВремяОкончанияПерерывов)
			И ВремяОкончанияПериода< ВремяОкончанияПерерывов Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДополнительныеНастройки", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.ОшибкаПериода = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
		И ТекущиеДанные.ВремяОкончания<= ТекущиеДанные.ВремяНачала Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) И ТекущиеДанные.ВремяНачала>= ТекущиеДанные.ВремяОкончания Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	КонецЕсли;
	
	НачалоПериода = ТекущиеДанные.ВремяНачала;
	ОкончаниеПериода = ТекущиеДанные.ВремяОкончания;
	
	Если Не ТекущиеДанные.ОшибкаПериода Тогда
		
		КоличествоРабочихЧасов = Окр((ОкончаниеПериода-НачалоПериода)/60/60, 2, РежимОкругления.Окр15как20);
		
		Если ЗначениеЗаполнено(НачалоПериода) Или ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			ТекущиеДанные.КоличествоРабочихЧасов = ?(КоличествоРабочихЧасов > 0, КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов
			, 24 + КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов);
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) И Не СтрокиПерерывов.Количество() Тогда
			
			ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
			СтрокиПериодов = Объект.ПериодыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
				Объект.ПериодыДополнительныхНастроекЗаполнения.Удалить(СтрокаПериода);
			КонецЦикла;
			
			НоваяСтрока = Объект.ПериодыДополнительныхНастроекЗаполнения.Добавить();
			НоваяСтрока.ЗначениеНастройки = ТекущиеДанные.ЗначениеНастройки;
			
			НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
			НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(ОкончаниеПериода)
			Тогда
			ТекущиеДанные.КоличествоРабочихЧасов = ?(Не ЧасыРаботы = 0, ЧасыРаботы, 24-ТекущиеДанные.ВремяПерерывов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяПерерывов) И ТекущиеДанные.КоличествоРабочихЧасов = 0
		И (ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала)) Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
	КонецЕсли;
	
	ТекущиеДанные.ЗаполненПериодРабочегоДня = Истина;
	
	СформироватьПредставлениеРасписанияДополнительныхНастроекЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДополнительныеНастройки(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ТекущиеДанные.ВремяНачала = ВремяНачалаДоИзменения;
		ТекущиеДанные.ВремяОкончания = ВремяОкончанияДоИзменения;
		ТекущиеДанные.КоличествоРабочихЧасов = КоличествоРабочихЧасовДоИзменения;
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
		И ТекущиеДанные.ВремяОкончания<= ТекущиеДанные.ВремяНачала Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) И ТекущиеДанные.ВремяНачала>= ТекущиеДанные.ВремяОкончания Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
		ТекущиеДанные.КоличествоРабочихЧасов = 0;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
	КонецЕсли;
	
	НачалоПериода = ТекущиеДанные.ВремяНачала;
	ОкончаниеПериода = ТекущиеДанные.ВремяОкончания;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
	СтрокиПерерывов = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПерерывов Из СтрокиПерерывов Цикл
		Объект.ПерерывыДополнительныхНастроекЗаполнения.Удалить(СтрокаПерерывов);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
	СтрокиПериодов = Объект.ПериодыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		Объект.ПериодыДополнительныхНастроекЗаполнения.Удалить(СтрокаПериода);
	КонецЦикла;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		
		ТекущиеДанные.ВремяПерерывов = 0;
		ОкончаниеПериода = Дата(1,1,1);
		НачалоПериода = Дата(1,1,1);
		ТекущиеДанные.ВремяНачала = Дата(1,1,1);
		ТекущиеДанные.ВремяОкончания = Дата(1,1,1);
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.ОшибкаПериода Тогда
		КоличествоРабочихЧасов = Окр((ОкончаниеПериода-НачалоПериода)/60/60, 2, РежимОкругления.Окр15как20);
		
		ТекущиеДанные.КоличествоРабочихЧасов = ?(КоличествоРабочихЧасов > 0, КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов
		, 24 + КоличествоРабочихЧасов - ТекущиеДанные.ВремяПерерывов);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
			
			НоваяСтрока = Объект.ПериодыДополнительныхНастроекЗаполнения.Добавить();
			НоваяСтрока.ЗначениеНастройки = ТекущиеДанные.ЗначениеНастройки;
			
			НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
			НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
			НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьНастройкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияКоличествоРабочихЧасовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
	СтрокиПерерывов = Объект.ПерерывыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоПерерывов = СтрокиПерерывов.Количество();
	
	Если КоличествоПерерывов Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДополнительныеНастройки", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перерывы будут очищены. Продолжить?'"), Режим, 0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов = 0 Тогда
		ТекущиеДанные.ВремяНачала = Дата(1,1,1);
		ТекущиеДанные.ВремяОкончания = Дата(1,1,1);
		ТекущиеДанные.ВремяПерерывов = 0;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов + ТекущиеДанные.ВремяПерерывов > 24 Тогда
		ТекущиеДанные.КоличествоРабочихЧасов = 24 - ТекущиеДанные.ВремяПерерывов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
		ДоступныхЧасов =86400+(Дата(1,1,1) - ТекущиеДанные.ВремяНачала) + ТекущиеДанные.ВремяПерерывов*3600;
	Иначе
		ДоступныхЧасов = 86400 + ТекущиеДанные.ВремяПерерывов*3600;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоРабочихЧасов*3600 > ДоступныхЧасов Тогда
		ТекущиеДанные.КоличествоРабочихЧасов = ДоступныхЧасов/3600;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
			ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) Тогда
		ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
	Иначе
		ТекущиеДанные.ВремяОкончания = ТекущиеДанные.ВремяНачала + (ТекущиеДанные.КоличествоРабочихЧасов*3600) + ТекущиеДанные.ВремяПерерывов*3600;
	КонецЕсли;
	
	Если КоличествоПерерывов Тогда
		
		Если Не ТекущиеДанные.КоличествоРабочихЧасов = 24
			И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)
			И ТекущиеДанные.ВремяОкончания < СтрокиПерерывов[КоличествоПерерывов-1].ВремяОкончания Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			ПараметрыОповещения = Новый Структура("ТекущиеДанные",ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДополнительныеНастройки", ЭтаФорма, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Границы перерывов выходят за период рабочего дня. Интервалы перерывов будут очищены. Продолжить?'"), Режим, 0);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ЗначениеНастройки", ТекущиеДанные.ЗначениеНастройки);
	СтрокиПериодов = Объект.ПериодыДополнительныхНастроекЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
		Объект.ПериодыДополнительныхНастроекЗаполнения.Удалить(СтрокаПериода);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоРабочихЧасов) Тогда
		
		НоваяСтрока = Объект.ПериодыДополнительныхНастроекЗаполнения.Добавить();
		НоваяСтрока.ЗначениеНастройки = ТекущиеДанные.ЗначениеНастройки;
		
		НоваяСтрока.ВремяНачала = ТекущиеДанные.ВремяНачала;
		НоваяСтрока.ВремяОкончания = ТекущиеДанные.ВремяОкончания;
		НоваяСтрока.Длительность = ТекущиеДанные.КоличествоРабочихЧасов;
		НоваяСтрока.ЧасовПерерывов = ТекущиеДанные.ВремяПерерывов;
		
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДополнительныеНастройкиЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВремяНачалаДоИзменения = ТекущиеДанные.ВремяНачала;
	ВремяОкончанияДоИзменения = ТекущиеДанные.ВремяОкончания;
	КоличествоРабочихЧасовДоИзменения = ТекущиеДанные.КоличествоРабочихЧасов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеНастройкиЗаполненияПриИзменении(Элемент)
	БылоИзменениеРасписания = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры













