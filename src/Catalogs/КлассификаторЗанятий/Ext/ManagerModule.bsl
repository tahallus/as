
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
//
// Возвращаемое значение:
//  Массив из Строка - имена реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Начальное заполнение и обновление информационной базы.
Процедура НачальноеЗаполнение() Экспорт
	Обновить(ПолучитьМакет("ПредопределенныеЗначения").ПолучитьТекст(), Ложь);
КонецПроцедуры

// Обновляет данные регистра.
Процедура Обновить(ТекстXML, ПолучатьДанныеИзСервиса = Истина) Экспорт
	ОбновитьКлассификатор(ТекстXML, ПолучатьДанныеИзСервиса);
КонецПроцедуры

// Записывает данные классификатора на основе текста XML.
//
// Параметры:
//   ТекстXML - Строка - Сведения о классификаторе (загружаемая версия).
//   ПолучатьДанныеИзСервиса - Булево - Если Истина и загружаемая версия меньше текущей (которая загружена в базу),
//       то перед обновлением будет произведена попытка получить более новую (актуальную) версию классификатора.
//       Особенности см. в комментарии функции РаботаСКлассификаторами.ПолучитьФайлыКлассификаторов():
//       - в коробке последняя доступная версия будет получена из веб-сервиса,
//       - в модели сервиса текущая версия будет получена из кэша.
//
// Возвращаемое значение:
//   Булево - Истина, если данные удалось записать в классификатор.
//
Функция ОбновитьКлассификатор(ТекстXML, ПолучатьДанныеИзСервиса = Истина) Экспорт
	ЗагружаемыеСведения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЗагружаемыеСведения.ПолноеИмя);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Менеджер));
	
	МодульРаботаСКлассификаторами = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		РаботаСКлассификаторами.УстановитьВерсиюКлассификатора("RussianClassificationOfOccupations", 0);
				
		ТекущаяВерсия = МодульРаботаСКлассификаторами.ВерсияКлассификатора(ЗагружаемыеСведения.Идентификатор, Истина);
		Если ЗагружаемыеСведения.Версия < ТекущаяВерсия Тогда
			Если Не ПолучатьДанныеИзСервиса Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Нормативно-правовая информация БЗК'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение,
					ОбъектМетаданных,
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Версия %1 классификатора ""%2"" не загружена, т.к. уже загружена более новая версия %3.
							|Рекомендуется проверить наличие обновлений конфигурации.'"),
						ЗагружаемыеСведения.Версия,
						ОбъектМетаданных.Представление(),
						ТекущаяВерсия));
				Возврат Ложь; // В ИБ уже загружена более новая версия классификатора.
			КонецЕсли;
			// В данную ветку процесс попадает когда пользователь хочет сбросить данные регистра до умолчательных значений,
			// но версия загруженных данных классификатора выше версии из макета в метаданных.
			// Проверка возможности загрузки обновления из веб-сервиса.
			СведенияИзВебСервиса = ПолучитьДанныеКлассификатораИзСервиса(ЗагружаемыеСведения.Идентификатор);
			Если СведенияИзВебСервиса = Неопределено
				Или СведенияИзВебСервиса.Версия < ТекущаяВерсия
				Или ВРег(СведенияИзВебСервиса.ПолноеИмя) <> ВРег(ЗагружаемыеСведения.ПолноеИмя) Тогда
				Возврат Ложь; // Пользователь загружал обновление из файла.
			КонецЕсли;
			// Загрузка обновления из веб-сервиса.
			ЗагружаемыеСведения = СведенияИзВебСервиса;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск ссылок.
	ТаблицаБезСсылок = ЗагружаемыеСведения.Данные;
	ТаблицаОшибок = ТаблицаБезСсылок.СкопироватьКолонки();
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ШаблонТаблицыСоСсылками = ШаблонТаблицыСоСсылкамиСправочника(ОбъектМетаданных);
	Иначе
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		ШаблонТаблицыСоСсылками = НаборЗаписей.ВыгрузитьКолонки();
	КонецЕсли;
	
	ТаблицаСоСсылками = ПолныеИменаВСсылки(ТаблицаБезСсылок, ШаблонТаблицыСоСсылками, ТаблицаОшибок);
	
	// Анализ ошибок поиска ссылок, подготовка текста для записи в журнал регистрации.
	КоличествоБылоПередано = ТаблицаБезСсылок.Количество();
	КоличествоБудетЗагружено = ТаблицаСоСсылками.Количество();
	Если КоличествоБылоПередано > КоличествоБудетЗагружено Тогда
		ТаблицаОшибок.Свернуть("ТекстОшибки");
		Разделитель = "  - ";
		ПредставлениеСпискаОшибок = Разделитель + СтрСоединить(ТаблицаОшибок.ВыгрузитьКолонку("ТекстОшибки"), ";" + Символы.ПС + Разделитель);
		Если КоличествоБудетЗагружено = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Классификатор ""%1"" не обновлен по причине:
					|%2.
					|
					|Рекомендуется проверить наличие обновлений конфигурации.'"),
				ОбъектМетаданных.Представление(),
				ПредставлениеСпискаОшибок);
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
			ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Классификатор ""%1"" обновлен частично: Загружено %2 из %3 записей; %4 записей не загружено по причине:
					|%5.
					|
					|Рекомендуется проверить наличие обновлений конфигурации.'"),
				ОбъектМетаданных.Представление(),
				КоличествоБудетЗагружено,
				КоличествоБылоПередано,
				КоличествоБылоПередано - КоличествоБудетЗагружено,
				ПредставлениеСпискаОшибок);
		КонецЕсли;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновлен классификатор ""%1"" (загружено %2 записей).'"),
			ОбъектМетаданных.Представление(),
			КоличествоБудетЗагружено);
	КонецЕсли;
	
	// Загрузка сведений.
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		Менеджер.ЗагрузитьКлассификатор(ТаблицаСоСсылками);
	Иначе
		НаборЗаписей.Загрузить(ТаблицаСоСсылками);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	// Запись результатов в журнал регистрации.
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Нормативно-правовая информация БЗК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		ОбъектМетаданных,
		,
		ТекстЖурнала);
	
	Если МодульРаботаСКлассификаторами <> Неопределено Тогда
		МодульРаботаСКлассификаторами.УстановитьВерсиюКлассификатора(ЗагружаемыеСведения.Идентификатор, ЗагружаемыеСведения.Версия);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Загружает классификатор из веб-сервиса и возвращает его "Распакованные" данные.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор классификатора в веб-сервисе.
//
// Возвращаемое значение:
//   Структура - Данные классификатора.
//
Функция ПолучитьДанныеКлассификатораИзСервиса(Идентификатор)
	МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	РезультатПолученияФайлов = МодульРаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(Идентификаторы);
	
	Если РезультатПолученияФайлов.КодОшибки = "ОбновлениеНеТребуется" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не ЗначениеЗаполнено(РезультатПолученияФайлов.КодОшибки)
		И ТипЗнч(РезультатПолученияФайлов.ДанныеКлассификаторов) = Тип("ТаблицаЗначений") Тогда
		СтрокаТаблицы = РезультатПолученияФайлов.ДанныеКлассификаторов.Найти(Идентификатор, "Идентификатор");
		Если СтрокаТаблицы <> Неопределено Тогда
			Попытка
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресФайла);
				ТекстXML = ДвоичныеДанныеВСтроку(ДвоичныеДанные, КодировкаТекста.UTF8);
				Значение = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
			Исключение
				Значение = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				РезультатПолученияФайлов.КодОшибки = "ОшибкаИзвлеченияЗначенияИзФайла";
				РезультатПолученияФайлов.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				РезультатПолученияФайлов.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ТекстЖурнала = НСтр("ru = 'При получении классификатора %1 из веб-сервиса возникла ошибка:
			|Код: %2
			|Краткая информация: %3
			|Подробная информация:
			|%4'");
		ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЖурнала,
			Идентификатор,
			Строка(РезультатПолученияФайлов.КодОшибки),
			Строка(РезультатПолученияФайлов.СообщениеОбОшибке),
			Строка(РезультатПолученияФайлов.ИнформацияОбОшибке));
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		ТекстЖурнала = СтрШаблон(НСтр("ru = 'Файл классификатора %1 получен из веб-сервиса.'"), Идентификатор);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Нормативно-правовая информация БЗК'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		,
		,
		ТекстЖурнала);
	
	Возврат Значение;
КонецФункции

Функция ШаблонТаблицыСоСсылкамиСправочника(ОбъектМетаданных) Экспорт
	
	ТаблицыСоСсылками = Новый ТаблицаЗначений;
	
	Если ОбъектМетаданных.ДлинаКода > 0 Тогда
		Если ОбъектМетаданных.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			ТаблицыСоСсылками.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
		Иначе
			ТаблицыСоСсылками.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
		ТаблицыСоСсылками.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ТаблицыСоСсылками.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат ТаблицыСоСсылками;
	
КонецФункции

// Считывает текст из двоичных данных, используя поток в памяти.
//
// Параметры:
//   ДвоичныеДанные - ДвоичныеДанные - Двоичные данные текста.
//   Кодировка - КодировкаТекста - Кодировка текста.
//
// Возвращаемое значение:
//   Строка - Результат чтения текста из двоичных данных.
//
Функция ДвоичныеДанныеВСтроку(ДвоичныеДанные, Кодировка)
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДвоичныеДанные);
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти, Кодировка);
	Возврат ЧтениеТекста.Прочитать();
КонецФункции

// В переданной таблице значений преобразует строковые идентификаторы предопределенных элементов в ссылки базы данных.
//
// Параметры:
//   ТаблицаБезСсылок - ТаблицаЗначений - Исходная таблица, в которой могут содержаться строковые идентификаторы.
//   ТаблицаСоСсылками - ТаблицаЗначений - Пустой шаблон результирующей таблицы.
//       Типы колонок этой таблицы используются для определения списка колонок, для которых требуется конвертация.
//   ТаблицаОшибок - ТаблицаЗначений - Таблица со списком ошибок.
//       В колонку ТекстОшибки помещаются с тексты ошибок, возникших при поиске ссылок.
//       Значения остальных колонок заполняются из элемента таблицы ТаблицаБезСсылок.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Результат преобразования.
//
Функция ПолныеИменаВСсылки(ТаблицаБезСсылок, ТаблицаСоСсылками, ТаблицаОшибок = Неопределено) Экспорт
	// Для оптимизации составляется список колонок, для которых потребуется конвертация ссылок.
	ИменаКолонокДляПреобразованияСсылок = Новый Массив;
	
	ВсеСсылкиСправочников = Справочники.ТипВсеСсылки();
	ВсеСсылкиПеречислений = Перечисления.ТипВсеСсылки();
	Для Каждого Колонка Из ТаблицаСоСсылками.Колонки Цикл
		Типы = Колонка.ТипЗначения.Типы();
		Для Каждого Тип Из Типы Цикл
			Если ВсеСсылкиСправочников.СодержитТип(Тип)
				Или ВсеСсылкиПеречислений.СодержитТип(Тип) Тогда
				ИменаКолонокДляПреобразованияСсылок.Добавить(Колонка.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Если конвертация ссылок не требуется, то возвращается исходная таблица.
	Если ИменаКолонокДляПреобразованияСсылок.Количество() = 0 Тогда
		Возврат ТаблицаБезСсылок;
	КонецЕсли;
	
	// Механизмы конвертации поддерживают типовые методы ПредопределенноеЗначение и НайтиПоКоду.
	Для Каждого СтрокаТаблицыБезСсылок Из ТаблицаБезСсылок Цикл
		СтрокаТаблицыССсылками = ТаблицаСоСсылками.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыССсылками, СтрокаТаблицыБезСсылок);
		
		// Правило "по умолчанию" - выгрузка имени предопределенных данных.
		Для Каждого ИмяКолонки Из ИменаКолонокДляПреобразованияСсылок Цикл
			ЗначениеБезСсылок = СтрокаТаблицыБезСсылок[ИмяКолонки];
			ЗначениеССсылками = Неопределено;
			// Чтение ссылки.
			Если СтрНачинаетсяС(ЗначениеБезСсылок, "ПредопределенноеЗначение:") Тогда
				ПолноеИмяПредопределенного = Сред(ЗначениеБезСсылок, СтрДлина("ПредопределенноеЗначение:") + 1);
				Если ПредопределенныйЭлементОтсутствуетВМетаданных(ПолноеИмяПредопределенного) Тогда
					ЗначениеССсылками = Неопределено; // Элемент не будет добавлен.
				Иначе
					ЗначениеССсылками = ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ЗначениеБезСсылок, "НайтиПоКоду:") Тогда
				Остаток = Сред(ЗначениеБезСсылок, СтрДлина("НайтиПоКоду:") + 1);
				Позиция = СтрНайти(Остаток, ".", , , 2);
				Если Позиция > 0 Тогда
					ПолноеИмяОбъектаМетаданных = Лев(Остаток, Позиция - 1);
					Код = Сред(Остаток, Позиция + 1);
					Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
					ЗначениеССсылками = Менеджер.НайтиПоКоду(Код);
				КонецЕсли;
			КонецЕсли;
			// Если элемента нет в метаданных или ссылка еще не создана в данных, то строка не добавляется.
			Если ЗначениеССсылками = Неопределено Тогда
				Если ТаблицаОшибок <> Неопределено Тогда
					СтрокаОшибки = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОшибки, СтрокаТаблицыБезСсылок);
					СтрокаОшибки.ТекстОшибки = СтрШаблон(НСтр("ru = '""%1"" отсутствует в данных'"), ЗначениеБезСсылок);
				КонецЕсли;
				ТаблицаСоСсылками.Удалить(СтрокаТаблицыССсылками);
				Прервать;
			КонецЕсли;
			// Установка ссылки.
			СтрокаТаблицыССсылками[ИмяКолонки] = ЗначениеССсылками;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаСоСсылками;
КонецФункции

// Возвращает Истина когда предопределенный элемент отсутствует в метаданных.
//
// Параметры:
//   ПолноеИмяПредопределенного - Строка - Полный путь к предопределенному элементу, включая его имя.
//     Формат аналогичен функции глобального контекста ПредопределенноеЗначение(), например:
//       - "Справочник.ВидыКонтактнойИнформации.EmailПользователя",
//       - "ПланСчетов.Хозрасчетный.Материалы",
//       - "ПланВидовРасчета.Начисления.ОплатаПоОкладу".
//
// Возвращаемое значение:
//   Булево - Результат проверки наличия предопределенного в метаданных.
//       Истина - Предопределенного нет в метаданных.
//       Ложь - Во всех остальных ситуациях.
//
Функция ПредопределенныйЭлементОтсутствуетВМетаданных(ПолноеИмяПредопределенного) Экспорт
	ЧастиПолногоИмениВРег = СтрРазделить(ВРег(ПолноеИмяПредопределенного), ".");
	Если ЧастиПолногоИмениВРег.Количество() <> 3 Тогда
		Возврат Ложь; // Некорректный формат параметра.
	КонецЕсли;
	
	ВидОМВРег               = ЧастиПолногоИмениВРег[0];
	ИмяОМВРег               = ЧастиПолногоИмениВРег[1];
	ИмяПредопределенногоРег = ЧастиПолногоИмениВРег[2];
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ВидОМВРег + "." + ИмяОМВРег);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Ложь; // Объект метаданных не найден.
	КонецЕсли;
	
	Если ВидОМВРег = ВРег("Справочник")
		Или ВидОМВРег = ВРег("ПланВидовХарактеристик")
		Или ВидОМВРег = ВРег("ПланСчетов")
		Или ВидОМВРег = ВРег("ПланВидовРасчета") Тогда
		
		Если ИмяПредопределенногоРег = "ПУСТАЯССЫЛКА" Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		ИменаПредопределенных = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
		
		Для Каждого Имя Из ИменаПредопределенных Цикл
			Если ВРег(Имя) = ИмяПредопределенногоРег Тогда
				Возврат Ложь; // Предопределенный найден в метаданных.
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина; // Предопределенный не найден в метаданных.
		
	ИначеЕсли ВидОМВРег = ВРег("Перечисление") Тогда
		
		Если ИмяПредопределенногоРег = "ПУСТАЯССЫЛКА" Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		Если ТипЗнч(МетаданныеОбъекта.ЗначенияПеречисления.Найти(ИмяПредопределенногоРег)) = Тип("ОбъектМетаданных") Тогда
			Возврат Ложь; // Предопределенный найден в метаданных.
		КонецЕсли;
		
		Возврат Истина; // Предопределенный не найден в метаданных.
		
	КонецЕсли;
	
	Возврат Ложь; // Проверка вида объекта метаданных не поддерживается.
КонецФункции

Процедура ЗагрузитьКлассификатор(ТаблицаСоСсылками) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСоСсылками", ТаблицаСоСсылками);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеКлассификатора.Код КАК Код,
		|	ДанныеКлассификатора.КонтрольноеЧисло КАК КонтрольноеЧисло,
		|	ДанныеКлассификатора.НаименованиеГруппЗанятий КАК НаименованиеГруппЗанятий
		|ПОМЕСТИТЬ ВТДанныеКлассификатора
		|ИЗ
		|	&ТаблицаСоСсылками КАК ДанныеКлассификатора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСправочника.Ссылка КАК Ссылка,
		|	ДанныеКлассификатора.Код КАК Код,
		|	ДанныеКлассификатора.КонтрольноеЧисло КАК КонтрольноеЧисло,
		|	ДанныеКлассификатора.НаименованиеГруппЗанятий КАК НаименованиеГруппЗанятий
		|ИЗ
		|	ВТДанныеКлассификатора КАК ДанныеКлассификатора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЗанятий КАК ДанныеСправочника
		|		ПО (ДанныеКлассификатора.Код = ЕСТЬNULL(ДанныеСправочника.Код, НЕОПРЕДЕЛЕНО))";
	
	Родители = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			
			Если СтрДлина(Выборка.Код) < 4 Тогда
				ОбъектСправочника = СоздатьГруппу();
			Иначе
				ОбъектСправочника = СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектСправочника.Родитель = Родители.Получить(Лев(Выборка.Код, СтрДлина(Выборка.Код) - 1));
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектСправочника, Выборка, , "Ссылка");
		ОбъектСправочника.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
		
		Если СтрДлина(ОбъектСправочника.Код) < 4 Тогда
			Родители.Вставить(ОбъектСправочника.Код, ОбъектСправочника.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли