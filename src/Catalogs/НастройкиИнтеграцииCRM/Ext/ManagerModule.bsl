#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейсБТС

// Возвращает двоичные данные и идентификатор обработчика объекта,
// которые будут переданы в составе zip-архива во внешнюю учетную систему.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта. 
//  Обработчик - Строка(50) - обработчик данных объекта. 
// 
// Возвращаемое значение:
//   - ДвоичныеДанные - данные объекта. 
//
Функция ДанныеОбъекта(УчетнаяСистема, ИдентификаторОбъекта, Обработчик) Экспорт
	
	СсылкаНаОбъект = РегистрыСведений.ОбъектыИнтеграцииCRM.ОбъектПоИдентификатору(ИдентификаторОбъекта);
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='По идентификатору %1 не найден объект'"), ИдентификаторОбъекта);
	КонецЕсли;
	
	Возврат РегистрыСведений.ОбъектыИнтеграцииCRM.ДвоичныеДанныеОбъектаДляОтправки(
		СсылкаНаОбъект, УчетнаяСистема, Обработчик);
	
КонецФункции

// Предназначен для обработки подтверждений, полученных от учетной системы после принятия файлов данных.
// В ней можно определить действия с интегрируемыми объектами, по которым пришли подтверждения.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных
//  Подтверждения - Соответствие
//                  * Ключ - Строка - это идентификатор объекта
//                  * Значение - Структура
//                      ** Версия - Строка - версия объекта
//                      ** Версия - Строка - версия объекта
//                      ** КодВозврата - Число - код возврата, определяется во внешней учетной системе.
//                         Рекомендуемые коды возврата см. в процедуре ИнтеграцияОбъектовОбластейДанныхПовтИсп.КодыВозврата
//                      ** Ошибка - Булево - признак ошибки (по умолчанию - Ложь)
//                      ** СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено)
//  СтандартнаяОбработка - Булево - признак стандартной обработки. Если Ложь, то обработанные объекты 
//                       не будут удалены из списка объектов к отправке.
//
Процедура ОбработатьПодтверждения(УчетнаяСистема, Подтверждения, СтандартнаяОбработка) Экспорт
	
	Для Каждого Подтверждение Из Подтверждения Цикл
		
		СсылкаНаОбъект = РегистрыСведений.ОбъектыИнтеграцииCRM.ОбъектПоИдентификатору(Подтверждение.Ключ);
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Подтверждение.Значение.Ошибка Тогда
			РегистрыСведений.ОбъектыИнтеграцииCRM.УстановитьСостояниеОшибкаПередачи(
				СсылкаНаОбъект, УчетнаяСистема, Подтверждение.Значение.СообщениеОбОшибке);
		Иначе
			РегистрыСведений.ОбъектыИнтеграцииCRM.УстановитьСостояниеОбъектСинхронизировано(
				СсылкаНаОбъект, УчетнаяСистема, Подтверждение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для обработки данных объектов, получаемых от внешней учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта для обработка
//  ПотокДанных - ФайловыйПоток, ПотокВПамяти - данные объекта
//  Обработчик - Строка - идентификатор обработчика
//  КодВозврата - Число - код возврата обработчика (по умолчанию - 10200)
//  Ошибка - Булево - признак ошибки (по умолчанию - Ложь)
//  СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено).
//
Процедура ОбработатьДанные(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ОбработатьДанные(УчетнаяСистема, ИдентификаторОбъекта,
		ПотокДанных, Обработчик, КодВозврата, Ошибка, СообщениеОбОшибке);
	
КонецПроцедуры

// Предназначена для обработки устанавливаемых настроек учетной системы, 
// полученных от внешней учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных 
//  ПотокДанных - ФайловыйПоток, ПотокВПамяти - данные настроек (передаются в формате json) 
//  КодВозврата - Число - код возврата обработчика установки настроек (по умолчанию - 10200).
//  Ошибка - Булево - признак ошибки (по умолчанию - Ложь) 
//  СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено).
//  СтандартнаяОбработка - Булево - признак стандартной обработки. 
//
Процедура УстановитьНастройки(УчетнаяСистема, ПотокДанных, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Объект = УчетнаяСистема.ПолучитьОбъект();
	Данные = СтруктураИзПотокаJSON(ПотокДанных);
	
	ВерсияФормата = Неопределено;
	Использование = Неопределено;
	
	Данные.Свойство("version_ed", ВерсияФормата);
	Данные.Свойство("status", Использование);
	
	Если НРег(Использование) = "on" Тогда
		Использование = Истина;
	ИначеЕсли НРег(Использование) = "off" Тогда
		Использование = Ложь;
	Иначе
		Использование = Истина;
	КонецЕсли;
	
	Если ВерсияФормата <> Неопределено Тогда
		Объект.ВерсияФормата = ВерсияФормата;
	КонецЕсли;
	Объект.Используется = Использование;
	Объект.Записать();
	
	ВключитьИнтерфейсODATA();
	
	УстановитьПраваПользователяИнтеграции(УчетнаяСистема);
	
КонецПроцедуры

// Возвращает идентификатор типа учетной системы для определения менеджера объекта, 
// если ссылки на учетную систему с пользователем обратившейся внешней системы еще не существует.
// Возвращаемое значение:
//   - Строка
//
Функция ТипУчетнойСистемы() Экспорт
	
	Возврат "crm";
	
КонецФункции

// Обработчик выполнения команды от учетной системы.
//
// УчетнаяСистема      - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
// ПотокДанныхКоманды  - ФайловыйПоток, ПотокВПамяти - данные команды.
// КодВозврата         - Число  - код возврата обработчика (по умолчанию - 10200)
// Ошибка              - Булево - признак ошибки (по умолчанию - Ложь)
// СообщениеОбОшибке   - Строка - подробности ошибки (по умолчанию не заполнено).
// 
// Возвращаемое значение:
//   - Неопределено - если не подразумевается создание объектов, или в процессе выполнения произошла ошибка.
//   - ТаблицаЗначений - результаты выполнения команды, информация о созданных или измененных объектах
//                       (см. функцию ИнтеграцияОбъектовОбластейДанных.НовыйРезультатыВыполненияКоманды)
//
Функция ВыполнитьКоманду(УчетнаяСистема, ПотокДанныхКоманды, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	ДанныеКоманды = СтруктураИзПотокаJSON(ПотокДанныхКоманды, "date");
	
	ПроверитьКорректностьДанныхКоманды(ДанныеКоманды, Ошибка, СообщениеОбОшибке);
	
	РезультатВыполнения = ИнтеграцияОбъектовОбластейДанных.НовыйРезультатыВыполненияКоманды();
	
	Если НЕ Ошибка Тогда
		ВыполнитьКомандуУчетнойСистемы(УчетнаяСистема, ДанныеКоманды, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Если Ошибка Тогда
		КодВозврата = ИнтеграцияОбъектовОбластейДанныхСловарь.КодВозвратаОшибкаДанных();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает Истина, если в базе есть хотя бы одна действующая настройка интеграции c CRM.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ИнтеграцияВИнформационнойБазеВключена() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииCRM.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиИнтеграцииCRM КАК НастройкиИнтеграцииCRM
	|ГДЕ
	|	НастройкиИнтеграцииCRM.Используется
	|	И НЕ НастройкиИнтеграцииCRM.ПометкаУдаления";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураИзПотокаJSON(ПотокДанных, ПоляТипаДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	Ответ = ПрочитатьJSON(ЧтениеJSON,, ПоляТипаДата, ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	
	Возврат Ответ;
	
КонецФункции

#Область НастройкиИнтеграции

Процедура ВключитьИнтерфейсODATA()
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ЕдиницыИзмерения);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КатегорииНоменклатуры);
	
	ОбъектыМетаданных.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ВидыЗаказовПокупателей);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.СостоянияЗаказовПокупателей);
	
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Сотрудники);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
	
	УстановитьСоставСтандартногоИнтерфейсаOData(ОбъектыМетаданных);
	
КонецПроцедуры

Процедура УстановитьПраваПользователяИнтеграции(НастройкиИнтеграции)
	
	Пользователь = ПользовательИнтеграцииCRM(НастройкиИнтеграции);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		УправлениеДоступомУНФ.ОбновитьДоступСлужебногоПользователяКAPI(Пользователь, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательИнтеграцииCRM(НастройкиИнтеграции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиУчетныхСистем.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхСистем КАК НастройкиУчетныхСистем
	|ГДЕ
	|	НастройкиУчетныхСистем.УчетнаяСистема = &УчетнаяСистема
	|	И НЕ НастройкиУчетныхСистем.УчетнаяСистема.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("УчетнаяСистема", НастройкиИнтеграции);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область ВыполнениеКоманды

Процедура ПроверитьКорректностьДанныхКоманды(ДанныеКоманды, Ошибка, СообщениеОбОшибке)
	
	Если НЕ ДанныеКоманды.Свойство("method") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле method'");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКоманды.method) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Поле method не заполнено'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуУчетнойСистемы(УчетнаяСистема, ДанныеКоманды, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	ИмяМетода = ДанныеКоманды.method;
	
	Параметры = Неопределено;
	ДанныеКоманды.Свойство("parameters", Параметры);
	
	Если ИмяМетода = ИмяМетодаНоменклатураДобавитьКОтправке() Тогда
		РегистрыСведений.ОбъектыИнтеграцииCRM.ДобавитьНоменклатуруКОтправке(УчетнаяСистема);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМетодаНоменклатураДобавитьКОтправке()
	
	Возврат "Справочники/Номенклатура/ДобавитьКОтправке";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли