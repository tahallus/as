
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьОтборНедействительная(ЭтотОбъект);
	
	ВосстановитьНастройки(); 
	
	РежимВыбора = Параметры.РежимВыбора; 
	
	УстановитьУсловноеОформление(); 
	
	ЗаголовокУстановлен = Ложь;
	
	ОбработкаОткрытияФормы = Истина;
	
	ЗаполнитьПараметрыВыбораЗначенияДоступа();
	
	Если Параметры.Свойство("КлючНазначенияИспользования") Тогда 
		Если Параметры.КлючНазначенияИспользования = "Склады" Тогда
			РежимОтображения = 0;
			ЭтотОбъект.Заголовок = НСтр("ru ='Склады и магазины'");
			ЗаголовокУстановлен = Истина;
			ОбработкаОткрытияФормы = Ложь;
		ИначеЕсли Параметры.КлючНазначенияИспользования = "Подразделения" Тогда
			РежимОтображения = 1;
			ЭтотОбъект.Заголовок = НСтр("ru ='Подразделения'");
			
			Элементы.ФормаИспользоватьКакОсновноеПодразделение.Видимость = Истина;
			Элементы.СписокСоздать.Видимость = Истина;
			Элементы.СписокКонтекстноеМенюКнопкаСоздатьПодразделениеПоУмолчанию.Видимость = Истина;
			Элементы.СписокПодменюСоздать.Видимость = Ложь;
			Элементы.СписокКонтекстноеМенюГруппаСоздать.Видимость = Ложь;
			Элементы.ГруппаОтборВидЦен.Видимость = Ложь;
			Элементы.ОтборВидЦен.Видимость = Элементы.ГруппаОтборВидЦен.Видимость;
			
			ЗаголовокУстановлен = Истина;
		ИначеЕсли Параметры.КлючНазначенияИспользования = "СтруктураКомпании" Тогда
			РежимОтображения = 2;
			ЭтотОбъект.Заголовок = НСтр("ru ='Вся структура'");
			ЗаголовокУстановлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборГруппы") Тогда 
		МассивИсключенийЭлементовОтбора = МассивИсключенийОтбораСтруктурныхЕдиницПриВыбореГруппы();
		Если МассивИсключенийЭлементовОтбора.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивИсключенийЭлементовОтбора, ВидСравненияКомпоновкиДанных.НеВСписке,,Истина);
		КонецЕсли;
		Элементы.ГруппаОтборы.Видимость = Ложь;
	КонецЕсли;
	
	ВыборГруппыИзСписка = ?(Параметры.Свойство("ВыборГруппыИзСписка"), Истина, Ложь); 
	
	Если Параметры.Свойство("ВыборГруппыИзСписка") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивГруппСтруктурныхЕдиниц(), ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		Параметры.РежимВыбора = Истина;
	КонецЕсли;
	
	УчетПоНесколькимСкладам = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"); 
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж"); 
	
	ОграничениеВыбораГрупп = Параметры.Свойство("ВыборГруппы") Или Параметры.Свойство("ВыборГруппыИзСписка"); 
	
	ОсновноеПодразделение	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
	ОсновнойСклад			= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
	
	ОсновныеСтруктурныеЕдиницы = Новый Массив;
	ОсновныеСтруктурныеЕдиницы.Добавить(ОсновноеПодразделение);
	ОсновныеСтруктурныеЕдиницы.Добавить(ОсновнойСклад);
	Список.Параметры.УстановитьЗначениеПараметра("ОсновныеСтруктурныеЕдиницы", ОсновныеСтруктурныеЕдиницы);
	
	ОтображатьПодразделение = Истина;
	ОтображатьСклад = Истина;
	ОтображатьМагазины = Истина;
	
	Элементы.ГруппаОтборГруппа.Видимость = Константы.ИспользоватьГруппыМагазины.Получить(); 
	
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	Если Не РежимВыбора Тогда 
		
		СписокПолейИсключения = Новый СписокЗначений;
		Если Не РежимОтображения = 2 Тогда
			СписокПолейИсключения.Добавить("ТипСтруктурнойЕдиницы");
		КонецЕсли;
		
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, "Список",,, Строка(РежимОтображения), Ложь,, СписокПолейИсключения);
		ТекущийРежимОтображения = РежимОтображения;
	Иначе
		Элементы.РежимОтображения.Видимость = Ложь;
		Элементы.Родитель.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ТипСтруктурнойЕдиницы") Тогда
		
		ОтображатьПодразделение = Ложь;
		ОтображатьСклад = Ложь;
		ОтображатьМагазины = Ложь;
		
		Если ТипЗнч(Параметры.Отбор.ТипСтруктурнойЕдиницы) = Тип("ПеречислениеСсылка.ТипыСтруктурныхЕдиниц") Тогда
			
			ОтображатьПодразделение = Параметры.Отбор.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
			ОтображатьСклад = Не ОтображатьПодразделение;
			
			ТипСтруктурнойЕдиницы = Параметры.Отбор.ТипСтруктурнойЕдиницы;
			ТипСтруктурнойЕдиницыСтрокой = Строка(ТипСтруктурнойЕдиницы);
			
			РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, "ТипСтруктурнойЕдиницы", "ГруппаОтборТипСклада", ТипСтруктурнойЕдиницы, ТипСтруктурнойЕдиницыСтрокой);
			СписокОграниченийПоТипу.Добавить(ТипСтруктурнойЕдиницы);
			
			Если Не ЗаголовокУстановлен И ЗначениеЗаполнено(ТипСтруктурнойЕдиницы) Тогда
				Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
					ЭтотОбъект.Заголовок = НСтр("ru ='Подразделения'");
				ИначеЕсли ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов Тогда
					ЭтотОбъект.Заголовок = НСтр("ru ='Магазины или группы складов'");
				Иначе
					ЭтотОбъект.Заголовок = НСтр("ru ='Склады'");
				КонецЕсли;
				ЗаголовокУстановлен = Истина;
			КонецЕсли;
			
		Иначе
			
			Для Каждого ЭлементМассива Из Параметры.Отбор.ТипСтруктурнойЕдиницы Цикл
				
				ТипСтруктурныхЕдиниц = ЭлементМассива;
				Если ТипЗнч(ТипСтруктурныхЕдиниц) = Тип("ЭлементСпискаЗначений") Тогда
					ТипСтруктурныхЕдиниц = ТипСтруктурныхЕдиниц.Значение;
				КонецЕсли;
				
				Если ТипСтруктурныхЕдиниц = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
					ОтображатьПодразделение = Истина;
				ИначеЕсли ТипСтруктурныхЕдиниц = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов Тогда
					ОтображатьМагазины = Истина;
				Иначе
					ОтображатьСклад = Истина;
				КонецЕсли;
				
				РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, "ТипСтруктурнойЕдиницы", "ГруппаОтборТипСклада", ТипСтруктурныхЕдиниц, Строка(ТипСтруктурныхЕдиниц));
				СписокОграниченийПоТипу.Добавить(ТипСтруктурныхЕдиниц);
				
			КонецЦикла;
			
			Если Не ЗаголовокУстановлен Тогда
				
				СтрокиЗаголовкаФормы = Новый Массив;
				
				Если ОтображатьСклад Тогда
					Если ОтображатьМагазины Тогда
						СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Склады и магазины'"));
					Иначе
						СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Склады'"));
					КонецЕсли;
				КонецЕсли;
				
				Если ОтображатьПодразделение Тогда
					СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Подразделения'"));
				КонецЕсли;
				
				ЭтотОбъект.Заголовок = СтрСоединить(СтрокиЗаголовкаФормы, ", ");
				
				ЗаголовокУстановлен = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.Родитель.Видимость = Истина; 
		
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокОграниченийПоТипу", СписокОграниченийПоТипу);
	
	Если СписокОграниченийПоТипу.Количество() И Не ОграничениеВыбораГрупп Тогда 
		
		МассивСОтбором = МассивСтруктурныхЕдиницСОтбором(СписокОграниченийПоТипу);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСОтбором, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		Параметры.Отбор.Удалить("ТипСтруктурнойЕдиницы");
		
	КонецЕсли;
		
	СтрокиЗаголовкаФормы = Новый Массив;
	
	Если ВыборГруппыИзСписка Тогда 
		ЭтотОбъект.Заголовок =НСтр("ru='Группы'");
	ИначеЕсли Не ЗаголовокУстановлен Тогда
		
		Если ОтображатьСклад Тогда
			Если ОтображатьМагазины Тогда
				СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Склады и магазины'"));
			Иначе
				СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Склады'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ОтображатьПодразделение Тогда
			СтрокиЗаголовкаФормы.Добавить(НСтр("ru ='Подразделения'"));
		КонецЕсли;
		
		Заголовок = СтрСоединить(СтрокиЗаголовкаФормы, ", ");
		
	КонецЕсли;
	
	Элементы.ФормаИспользоватьКакОсновноеПодразделение.Видимость	= ОтображатьПодразделение;
	Элементы.ФормаИспользоватьКакОсновнойСклад.Видимость			= ОтображатьСклад;
	Элементы.ОрдерныйСклад.Видимость								= ОтображатьСклад;
	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
		
	// Установим настройки формы для случая открытия в режиме выбора
	Элементы.Список.РежимВыбора = РежимВыбора;
	Элементы.Список.МножественныйВыбор = ?(Параметры.ЗакрыватьПриВыборе = Неопределено, Ложь, Не Параметры.ЗакрыватьПриВыборе);
	Если РежимВыбора Тогда
		КлючНазначенияИспользования = КлючНазначенияИспользования + "ВыборПодбор";
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Если Не ВыборГруппыИзСписка И Не Параметры.Свойство("ВыборГруппы") Тогда 
			Пользователь = Пользователи.ТекущийПользователь();
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяГруппаСкладов");
			ОсновнаяГруппаСкладов = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
		КонецЕсли;
		
	Иначе
		КлючНазначенияИспользования = КлючНазначенияИспользования + "Список";
	КонецЕсли;
	
	Элементы.СписокВыбрать.Видимость = РежимВыбора;
	
	Элементы.ОтборТипСклада.Доступность = Не СписокОграниченийПоТипу.Количество(); 
	
	Если Не Элементы.ОтборТипСклада.Доступность Тогда
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	КонецЕсли;
	
	Если РежимВыбора И ЗначениеЗаполнено(ОсновнаяГруппаСкладов) Тогда 
		УстановитьМеткуИОтборСписка("Родитель", "ГруппаОтборГруппа", ОсновнаяГруппаСкладов);
	КонецЕсли;
	
	ОбновитьНастройкиФормыСогласноРежимуОтображения(ОбработкаОткрытияФормы);
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.СтруктурныеЕдиницы) Тогда 
		Элементы.СписокПодменюСоздать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюГруппаСоздать.Видимость = Ложь;
	КонецЕсли;
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УНФ.ПанельКонтактнойИнформации 
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьСписокДеревом(Истина);
	
	Если РежимВыбора Тогда
		Элементы.СписокВыбрать1.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГлобальныеКоманды.Видимость = Не РежимОтображения = 1;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы) 
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
		
	//УНФ.ОтборыСписка
	СохранитьНастройки();
	//Конец УНФ.ОтборыСписка
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
	
	Если ИмяСобытия = "Запись_СтруктурнаяЕдиница" Тогда
		
		Если Не РежимВыбора Тогда
			ОбновитьНастройкиФормыСогласноРежимуОтображения();
		КонецЕсли;
		
		Если РежимВыбора Тогда
			
			Если СписокОграниченийПоТипу.Количество() И Не ОграничениеВыбораГрупп Тогда
				
				МассивСОтбором = МассивСтруктурныхЕдиницСОтбором(СписокОграниченийПоТипу);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСОтбором, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	Если РежимВыбора И СписокОграниченийПоТипу.Количество() Тогда
		
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
			СтандартнаяОбработка = Ложь;
			Возврат
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Если СписокОграниченийПоТипу.НайтиПоЗначению(ТекущиеДанные.ТипСтруктурнойЕдиницы) = Неопределено Тогда
			
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Доступны к выбору только элементы с типом: 
			|%1'"), СписокТиповДоступныхДляВыбора());
			
			ПоказатьПредупреждение(,ТекстПредупреждения);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент) 
	
	Если Не РежимОтображения = ТекущийРежимОтображения Тогда
		ОбновитьНастройкиФормыСогласноРежимуОтображения();
	КонецЕсли;
	
	Элементы.СписокСоздать.Видимость = РежимОтображения = 1;
	Элементы.СписокКонтекстноеМенюКнопкаСоздатьПодразделениеПоУмолчанию.Видимость = РежимОтображения = 1;
	Элементы.СписокПодменюСоздать.Видимость = Не РежимОтображения = 1;
	Элементы.СписокКонтекстноеМенюГруппаСоздать.Видимость = Не РежимОтображения = 1;
	Элементы.ГруппаОтборВидЦен.Видимость = Не РежимОтображения = 1;
	
	ОтобразитьСписокДеревом();
	
	ТекущийРежимОтображения = РежимОтображения;

	ОпределитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) 
	
	СписокОграниченийПоТипу = Настройки.ДополнительныеСвойства.СписокОграниченийПоТипу;
	ОграничиватьТип = СписокОграниченийПоТипу.Количество();
	
	Если ОграничиватьТип Тогда
		Для Каждого КлючИЗначение Из Строки Цикл
			
			СтрокаСписка = КлючИЗначение.Значение.Данные;
			
			Если СписокОграниченийПоТипу.НайтиПоЗначению(СтрокаСписка.ТипСтруктурнойЕдиницы) = Неопределено Тогда
				СтрокаСписка.Доступность = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент) 
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость)
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент) 
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент) 
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ЭтоПодразделение = Элементы.Список.ТекущиеДанные.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение");
		ЭтоМагазин = Элементы.Список.ТекущиеДанные.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов");
		
		Элементы.ФормаИспользоватьКакОсновноеПодразделение.Видимость = ЭтоПодразделение И Не ЭтоМагазин;
		Элементы.ФормаИспользоватьКакОсновноеПодразделение.Доступность= Не Элементы.Список.ТекущиеДанные.ЭтоОсновной;
		
		Элементы.ФормаИспользоватьКакОсновнойСклад.Видимость = Не ЭтоПодразделение И Не ЭтоМагазин;
		Элементы.ФормаИспользоватьКакОсновнойСклад.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновной;
	КонецЕсли;
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущаяСтруктурнаяЕдиница,
		"Ссылка");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипСкладаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ТипСтруктурнойЕдиницы", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("РозничныйВидЦен", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Родитель", Элемент.Родитель.Имя, ВыбранноеЗначение);
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	Элементы.Родитель.Видимость = Истина;
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ВыборГруппыИзСписка, РежимВыбора", Истина, Истина);
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора",ПараметрыОткрытия, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокВыбрать(Команда)
		
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокОграниченийПоТипу.Количество() Тогда
		
		Если ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
			Возврат
		КонецЕсли;
		
		Если СписокОграниченийПоТипу.НайтиПоЗначению(ТекущиеДанные.ТипСтруктурнойЕдиницы) = Неопределено Тогда
			
			ТекстПредупреждения = СтрШаблон(НСтр("ru='Доступны к выбору только элементы с типом: 
			|%1'"), СписокТиповДоступныхДляВыбора());
			
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповеститьОВыборе(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	
	Для Каждого СтрокаСписка Из СписокСОтбором Цикл
		Элементы.Список.Развернуть(СтрокаСписка.Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	
	Для Каждого СтрокаСписка Из СписокСОтбором Цикл
		Элементы.Список.Свернуть(СтрокаСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСклад(Команда)
	СоздатьСтруктурнуюЕдиницу(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРозничныйСкладСуммовойУчет(Команда)
	СоздатьСтруктурнуюЕдиницу(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРозничныйСклад(Команда)
	СоздатьСтруктурнуюЕдиницу(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодразделение(Команда)
	СоздатьСтруктурнуюЕдиницу(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМагазин(Команда)
	СоздатьСтруктурнуюЕдиницу(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов"));
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновноеПодразделение(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновной
		Или Элементы.Список.ТекущиеДанные.ТипСтруктурнойЕдиницы <> ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьОсновнуюСтруктурнуюЕдиницу(Элементы.Список.ТекущиеДанные.Ссылка, "ОсновноеПодразделение");
	Элементы.ФормаИспользоватьКакОсновноеПодразделение.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновной;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновнойСклад(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновной
		Или Элементы.Список.ТекущиеДанные.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
		ИмяСохраняемойНастройки = "ОсновнаяГруппаСкладов";
	Иначе
		ИмяСохраняемойНастройки = "ОсновнойСклад";
	КонецЕсли;
	
	УстановитьОсновнуюСтруктурнуюЕдиницу(Элементы.Список.ТекущиеДанные.Ссылка, ИмяСохраняемойНастройки);
	Элементы.ФормаИспользоватьКакОсновнойСклад.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновной;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	Элементы.ПоказыватьНедействительную.Пометка = Не Элементы.ПоказыватьНедействительную.Пометка;
	УстановитьОтборНедействительная(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыВыбораЗначенияДоступа()

	Если Не Параметры.Свойство("ЭтоВыборЗначенияДоступа") Тогда
		Возврат;
	КонецЕсли;

	ДопустимыеТипыЗначенияДоступа = Новый Массив;
	Для Каждого ТекущийТип Из Перечисления.ТипыСтруктурныхЕдиниц Цикл
		Если ТекущийТип <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
			ДопустимыеТипыЗначенияДоступа.Добавить(ТекущийТип);
		КонецЕсли;
	КонецЦикла;

	Параметры.Отбор.Вставить("ТипСтруктурнойЕдиницы", ДопустимыеТипыЗначенияДоступа);

КонецПроцедуры

&НаКлиенте
Функция СписокТиповДоступныхДляВыбора()
	
	ТипыДоступныеДляВыбора = "";
	
	Если УчетПоНесколькимСкладам И Не СписокОграниченийПоТипу.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад")) = Неопределено Тогда
		ТипыДоступныеДляВыбора = "• " + Строка(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад"));
	КонецЕсли;
	
	Если УчетРозничныхПродаж И не СписокОграниченийПоТипу.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница")) = Неопределено Тогда
		ТипыДоступныеДляВыбора = ТипыДоступныеДляВыбора + "
		|• "  + Строка(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница"));
	КонецЕсли;
	
	Если УчетРозничныхПродаж И Не СписокОграниченийПоТипу.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет")) = Неопределено Тогда
		ТипыДоступныеДляВыбора = ТипыДоступныеДляВыбора + "
		|• "  + Строка(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет"));
	КонецЕсли;
	
	Если УчетПоНесколькимСкладам И Не СписокОграниченийПоТипу.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов")) = Неопределено Тогда
		ТипыДоступныеДляВыбора = ТипыДоступныеДляВыбора + "
		|• " + Строка(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов"));
	КонецЕсли;
	
	Если Не СписокОграниченийПоТипу.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение")) = Неопределено Тогда
		ТипыДоступныеДляВыбора = ТипыДоступныеДляВыбора + "
		|• " + Строка(ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
	КонецЕсли;
	
	Возврат СокрЛП(ТипыДоступныеДляВыбора);
	
КонецФункции

&НаКлиенте
Процедура ОпределитьЗаголовокФормы()
	
	Если РежимОтображения = 0 Тогда
		ЭтотОбъект.Заголовок = НСтр("ru ='Склады и магазины'");
	ИначеЕсли РежимОтображения = 1 Тогда
		ЭтотОбъект.Заголовок = НСтр("ru ='Подразделения'");
	ИначеЕсли РежимОтображения = 2 Тогда
		ЭтотОбъект.Заголовок = НСтр("ru ='Вся структура'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтруктурнуюЕдиницу(ТипСтруктурнойЕдиницы)
	
	ЗначенияЗаполнения = Новый Структура("ТипСтруктурнойЕдиницы", ТипСтруктурнойЕдиницы);
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ПараметрыОповещения = Новый Структура;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыСоздания", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список,,,, ОповещениеОЗакрытии );
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСоздания(Результат, ПараметрыОповещения) Экспорт
	
	Если Не РежимОтображения = 2 Тогда
		МассивСОтбором = МассивСтруктурныхЕдиницСОтбором(СписокОграниченийПоТипу);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСОтбором, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСписокДеревом(ЭтоОткрытиеФормы = Ложь)
	
	Если Не ЭтоОткрытиеФормы Тогда
		Если Не СписокНеДерево И (Не ДанныеМеток.Количество()
			Или (Элементы.ГруппаОтборГруппа.ПодчиненныеЭлементы.Количество() = 1 И Элементы.ГруппаОтборВидЦен.ПодчиненныеЭлементы.Количество() = 1)) Тогда
			Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
			Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
			Для Каждого СтрокаСписка Из СписокСОтбором Цикл
				Если СтрокаСписка.Пометка Тогда
					Элементы.Список.Развернуть(СтрокаСписка.Значение, Истина);
				КонецЕсли;
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СписокНеДерево И (Не Элементы.ГруппаОтборГруппа.ПодчиненныеЭлементы.Количество() = 1 
		Или Не Элементы.ГруппаОтборВидЦен.ПодчиненныеЭлементы.Количество() = 1) Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФормыСогласноРежимуОтображения(ОткрытиеФормы = Ложь)
	
	Если Не ОткрытиеФормы Тогда
		
		СписокОграниченийПоТипу.Очистить();
		
		Элементы.ГлобальныеКоманды.Видимость = Истина;
		
		Если РежимОтображения = 1 Тогда
			СписокОграниченийПоТипу.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
			Элементы.ГлобальныеКоманды.Видимость = Ложь;
		ИначеЕсли РежимОтображения = 0 Тогда
			
			СписокОграниченийПоТипу.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			
			Если УчетПоНесколькимСкладам Тогда
				СписокОграниченийПоТипу.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов);
			КонецЕсли;
			
			Если УчетРозничныхПродаж Тогда
				СписокОграниченийПоТипу.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
				СписокОграниченийПоТипу.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
			КонецЕсли;
			
		КонецЕсли;
		
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокОграниченийПоТипу", СписокОграниченийПоТипу);
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "Список",, Строка(ТекущийРежимОтображения),Ложь);
		
		УдаляемыеМетки = Новый СписокЗначений;
		НомерСтрокиМетки = 0;
		Для Каждого Метка Из ДанныеМеток Цикл
			УдаляемыеМетки.Добавить(НомерСтрокиМетки);
			НомерСтрокиМетки = НомерСтрокиМетки + 1;
		КонецЦикла;
		
		РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список, УдаляемыеМетки);
		
		СписокПолейИсключения = Новый СписокЗначений;
		Если Не РежимОтображения = 2 Тогда
			СписокПолейИсключения.Добавить("ТипСтруктурнойЕдиницы");
		КонецЕсли;
		
		Элементы.ОтборТипСклада.Доступность = Не СписокОграниченийПоТипу.Количество();
		
		Если СписокОграниченийПоТипу.Количество() Тогда
			МассивСОтбором = МассивСтруктурныхЕдиницСОтбором(СписокОграниченийПоТипу);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСОтбором, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, "Список",,, Строка(РежимОтображения), Ложь, ,СписокПолейИсключения);
			
			Для Каждого ТипОграничения Из СписокОграниченийПоТипу Цикл
				РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, "ТипСтруктурнойЕдиницы", "ГруппаОтборТипСклада", ТипОграничения.Значение, Строка(ТипОграничения.Значение));
			КонецЦикла;
			
		Иначе
			ЗаполнитьСписокОтбораРодителямиСтруктурныхЕдиниц();
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", Неопределено, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
			РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, "Список",,, Строка(РежимОтображения), Ложь, ,СписокПолейИсключения);
			
			Элементы.ОтборТипСклада.РежимВыбораИзСписка = Истина;
			Элементы.ОтборТипСклада.СписокВыбора.Очистить();
			
			Элементы.ОтборТипСклада.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			
			Если УчетПоНесколькимСкладам Тогда
				Элементы.ОтборТипСклада.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов);
			КонецЕсли;
			
			Если УчетРозничныхПродаж Тогда
				Элементы.ОтборТипСклада.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
				Элементы.ОтборТипСклада.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
			КонецЕсли;
			
			Элементы.ОтборТипСклада.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокОграниченийПоТипу.Количество() Тогда
		
		ЗначениеВидимости = Ложь;
		Если Не СписокОграниченийПоТипу.НайтиПоЗначению(Перечисления.ТипыСтруктурныхЕдиниц.Склад) = Неопределено Тогда
			ЗначениеВидимости = Истина;
		КонецЕсли;
		
		ЗначениеВидимостиМагазин = Ложь;
		Если Не СписокОграниченийПоТипу.НайтиПоЗначению(Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов) = Неопределено Тогда
			ЗначениеВидимостиМагазин = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьМагазин", "Видимость", ЗначениеВидимостиМагазин);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьМагазин", "Видимость", ЗначениеВидимостиМагазин);
		
		ЗначениеВидимости = Ложь;
		Если УчетРозничныхПродаж Тогда
			Если Не СписокОграниченийПоТипу.НайтиПоЗначению(Перечисления.ТипыСтруктурныхЕдиниц.Розница) = Неопределено Тогда
				ЗначениеВидимости = Истина;
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьРозничныйСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьРозничныйСкладСуммовойУчет", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьРозничныйСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьСкладСуммовойУчет", "Видимость", ЗначениеВидимости);
		
		ЗначениеВидимости = Ложь;
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить() Тогда
			Если Не СписокОграниченийПоТипу.НайтиПоЗначению(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение) = Неопределено Тогда
				ЗначениеВидимости = Истина;
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьПодразделение", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьПодразделение", "Видимость", ЗначениеВидимости);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьСклад", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьМагазин", "Видимость", УчетПоНесколькимСкладам);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьСклад", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьМагазин", "Видимость", УчетПоНесколькимСкладам);
		
		ЗначениеВидимости = Ложь;
		Если УчетРозничныхПродаж Тогда
			ЗначениеВидимости = Истина;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьРозничныйСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьРозничныйСкладСуммовойУчет", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьРозничныйСклад", "Видимость", ЗначениеВидимости);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьСкладСуммовойУчет", "Видимость", ЗначениеВидимости);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьПодразделение", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздатьПодразделение", "Видимость", Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не РежимВыбора Тогда
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "Список",, Строка(РежимОтображения),Ложь);
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить("СтруктурныеЕдиницы", "ОтображатьСписокСписком", ?(Не Элементы.Список.Отображение = ОтображениеТаблицы.Дерево, Истина, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	СтрокаНастроек = "ОтображатьСписокСписком";
	ИмяКлючаОбъекта = "СтруктурныеЕдиницы";
	
	СписокНеДерево = Истина;
	
	Значение = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, СтрокаНастроек);
	Если Не Значение=Неопределено Тогда
		СписокНеДерево = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивГруппСтруктурныхЕдиниц()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Родитель КАК Родитель
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Родитель");
	
КонецФункции

&НаСервере
Функция МассивИсключенийОтбораСтруктурныхЕдиницПриВыбореГруппы()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Родитель.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция МассивСтруктурныхЕдиницСОтбором(МассивОграниченийПоТипу)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОграниченийПоТипу", МассивОграниченийПоТипу);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.Родитель КАК Родитель,
	|	СтруктурныеЕдиницы.Родитель.Родитель КАК РодительВторойУровень,
	|	СтруктурныеЕдиницы.Родитель.Родитель.Родитель КАК РодительТретийУровень
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В(&МассивОграниченийПоТипу)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СписокСОтбором.Очистить();
	
	Пока Результат.Следующий() Цикл
		
		СписокСОтбором.Добавить(Результат.Ссылка);
		
		Если ЗначениеЗаполнено(Результат.Родитель) Тогда
			СписокСОтбором.Добавить(Результат.Родитель);
			
			Если ЗначениеЗаполнено(Результат.РодительВторойУровень) Тогда
				СписокСОтбором.Добавить(Результат.РодительВторойУровень);
				
				Если ЗначениеЗаполнено(Результат.РодительТретийУровень) Тогда
					СписокСОтбором.Добавить(Результат.РодительТретийУровень);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСОтбором.ВыгрузитьЗначения();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОтбораРодителямиСтруктурныхЕдиниц()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.Родитель КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СписокСОтбором.Очистить();
	Пока Результат.Следующий() Цикл
		СписокСОтбором.Добавить(Результат.Ссылка,, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюСтруктурнуюЕдиницу(знач НоваяОсновнаяСтруктурнаяЕдиница, ИмяНастройки)
	
	РегистрыСведений.НастройкиПользователей.Установить(НоваяОсновнаяСтруктурнаяЕдиница, ИмяНастройки);
	
	ЭтотОбъект[ИмяНастройки] = НоваяОсновнаяСтруктурнаяЕдиница;
	
	ОсновныеСтруктурныеЕдиницы = Новый Массив;
	ОсновныеСтруктурныеЕдиницы.Добавить(ОсновноеПодразделение);
	ОсновныеСтруктурныеЕдиницы.Добавить(ОсновнойСклад);
	Список.Параметры.УстановитьЗначениеПараметра("ОсновныеСтруктурныеЕдиницы", ОсновныеСтруктурныеЕдиницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительная(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.Недействителен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Наименование");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ТипСтруктурнойЕдиницы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.Доступность", 0, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Наименование");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ТипСтруктурнойЕдиницы");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Родитель");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);

КонецПроцедуры
	
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти



#Область ПанельКонтактнойИнформации

&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформации()
	
	ДанныеПанелиКИ = ДанныеПанелиКонтактнойИнформации(ТекущаяСтруктурнаяЕдиница);
	КонтактнаяИнформацияПанельУНФКлиент.ЗаполнитьДанныеПанелиКИ(ЭтотОбъект, ДанныеПанелиКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПанелиКонтактнойИнформации(ВладелецКИ)
	
	Возврат КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(ВладелецКИ);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущаяСтруктурнаяЕдиница);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка() 
	
	ОбновитьПанельКонтактнойИнформации();
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка,,Истина);
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
	ОтобразитьСписокДеревом();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти
