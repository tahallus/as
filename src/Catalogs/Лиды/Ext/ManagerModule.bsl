#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Контрагент, который был создан на основании лида.
//
// Параметры:
//  Лид	 - СправочникСсылка.Лиды
// 
// Возвращаемое значение:
//   - СправочникСсылка.Контрагент
//
Функция СвязанныйКонтрагент(Лид) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиКонтрагентЛид.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
	|ГДЕ
	|	СвязиКонтрагентЛид.Лид = &Лид";
	
	Запрос.УстановитьПараметр("Лид", Лид);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписи = Выборка.Следующий();
	Если ЕстьЗаписи Тогда
		Возврат Выборка.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Создает контрагента на основании лида, если контрагент еще не был создан. 
// Если лид уже связан с контрагентом, то возвращает ссылку на связанного контрагента
//
// Параметры:
//  Лид - СправочникСсылка.Лиды, СправочникОбъект.Лиды
// 
// Возвращаемое значение:
//   - СправочникСсылка.Контрагенты
//
Функция ПолучитьСоздатьКонтрагента(Лид) Экспорт
	
	Если ТипЗнч(Лид) = Тип("СправочникСсылка.Лиды") Тогда
		ЛидОбъект = Лид.ПолучитьОбъект();
	Иначе
		ЛидОбъект = Лид;
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Истина;

	Если НЕ ЛидОбъект.ПроверитьЗаполнение() Тогда
		Возврат НовыйКонтрагент;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СвязанныйКонтрагент = СвязанныйКонтрагент(ЛидОбъект.Ссылка);
		КонтрагентУжеСоздан = ЗначениеЗаполнено(СвязанныйКонтрагент);
		
		Если КонтрагентУжеСоздан Тогда
			Возврат СвязанныйКонтрагент;
		КонецЕсли;
		
		ЛидОбъект.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
		ЛидОбъект.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
		ЛидОбъект.ПричинаНеуспешногоЗавершенияРаботы = Неопределено;
		ЛидОбъект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя;
		ЛидОбъект.Записать();
		
		НовыйКонтрагент = СоздатьКонтрагента(ЛидОбъект);
		ГруппаДоступаКонтрагента = НовыйКонтрагент.ГруппаДоступа;
		ПеренестиФайлыИзЛидаВКонтрагента(ЛидОбъект.Ссылка, НовыйКонтрагент.Ссылка);
		
		НовыйКонтактныеЛица = СоздатьКонтактныеЛица(ЛидОбъект,ГруппаДоступаКонтрагента);
		Для каждого НовыйКонтакт Из НовыйКонтактныеЛица Цикл
			РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(НовыйКонтрагент, НовыйКонтакт.Ссылка);
		КонецЦикла;
		
		РегистрыСведений.СвязиКонтрагентЛид.НоваяСвязь(НовыйКонтрагент, ЛидОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат НовыйКонтрагент;
	
КонецФункции

Функция СоздатьКонтрагента(Лид)
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(Неопределено);
	
	ЗаполнитьРеквизитыКонтрагентаПоРеквизитамЛида(НовыйКонтрагент, Лид);
	
	Если НЕ ЗначениеЗаполнено(НовыйКонтрагент.Наименование) Тогда
		НовыйКонтрагент.Наименование = Лид.Наименование;
	КонецЕсли;
	
	НовыйКонтрагент.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), 
		"ОсновнойОтветственный");
	НовыйКонтрагент.Покупатель = Истина;
	
	НовыйКонтрагент.Теги.Загрузить(Лид.Теги.Выгрузить(,"Тег"));
	
	Для Каждого СтрокаКИ Из Лид.КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда	
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКомпанииЛида Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ИначеЕсли СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКомпанииЛида Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Иначе
				ВидКИ = ВидКИКонтрагента(СтрокаКИ.Тип);
			КонецЕсли;
		Иначе
			ВидКИ = ВидКИКонтрагента(СтрокаКИ.Тип);
		КонецЕсли;
		
		Если ВидКИ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеКИ = ?(ЗначениеЗаполнено(СтрокаКИ.Значение), СтрокаКИ.Значение, СтрокаКИ.ЗначенияПолей);
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент, ЗначениеКИ, ВидКИ,,Ложь);
		
	КонецЦикла;
	
	НовыйКонтрагент.Записать();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Функция СоздатьКонтактныеЛица(Лид, ГруппаДоступаКонтрагента)
	
	КонтактныеЛица = Новый Массив;
	
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(Лид);
	
	Для каждого ДанныеЛида Из КонтактыЛида Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеЛида.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйКонтакт = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовыйКонтакт.Наименование = ДанныеЛида.Наименование;
		НовыйКонтакт.Заполнить(Неопределено);
		НовыйКонтакт.ГруппаДоступа = ГруппаДоступаКонтрагента;
		
		ДанныеЛидаКИ = ДанныеЛида.КонтактнаяИнформация;
		Для каждого СтрокаКИ Из ДанныеЛидаКИ Цикл
			
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.СоциальнаяСетьКонтактногоЛица;
			Иначе
				ВидКИ = ВидКИКонтактногоЛица(СтрокаКИ.Тип);
			КонецЕсли;
			
			Если ВидКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеКИ = ?(ЗначениеЗаполнено(СтрокаКИ.Значение), СтрокаКИ.Значение, СтрокаКИ.ЗначенияПолей);
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтакт, ЗначениеКИ, ВидКИ,,Ложь);
			
		КонецЦикла;
		
		НовыйКонтакт.Записать();
		КонтактныеЛица.Добавить(НовыйКонтакт.Ссылка);
		
	КонецЦикла;
	
	Возврат КонтактныеЛица;
	
КонецФункции

Процедура ИзменитьСостояниеЛида(Лид, Состояние, ВариантЗавершения = Неопределено, ПричинаОтмены = Неопределено, Заметки = "") Экспорт
	
	Если Лид.СостояниеЛида = Состояние И Состояние <> Справочники.СостоянияЛидов.Завершен
		ИЛИ (Лид.СостояниеЛида = Состояние И Состояние = Справочники.СостоянияЛидов.Завершен
		И (ЗначениеЗаполнено(Лид.ВариантЗавершения) И Лид.ВариантЗавершения = ВариантЗавершения)) Тогда
		Возврат;
	КонецЕсли;
		
	ЛидОбъект = Лид.ПолучитьОбъект();
	
	ЛидОбъект.Заблокировать();
	
	ЛидОбъект.СостояниеЛида = Состояние;
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЛидОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	Если ПричинаОтмены <> Неопределено Тогда
		ЛидОбъект.ПричинаОтмены = ПричинаОтмены;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заметки) Тогда
		ЛидОбъект.Заметки = Заметки;
	КонецЕсли;
	
	ЛидОбъект.Записать();
	
	ЛидОбъект.Разблокировать();

КонецПроцедуры

Функция ПолучателиЭлектронногоПисьма(Лид, ВидКонтактнойИнформации = Неопределено) Экспорт
	
	ПолучателиЭлектронногоПисьма = Новый ТаблицаЗначений;
	ПолучателиЭлектронногоПисьма.Колонки.Добавить("Контакт", Метаданные.ОпределяемыеТипы.КонтактСобытия.Тип);
	ПолучателиЭлектронногоПисьма.Колонки.Добавить("КакСвязаться", Новый ОписаниеТипов("Строка"));
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Лид,
		ВидКонтактнойИнформации, ТекущаяДатаСеанса(), Ложь);
	
	Если ВидКонтактнойИнформации = Неопределено Тогда
		ОтборКонтактнойИнформации = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		СтрокиКонтактнойИнформации = КонтактнаяИнформацияОбъекта.НайтиСтроки(ОтборКонтактнойИнформации);
	Иначе
		СтрокиКонтактнойИнформации = КонтактнаяИнформацияОбъекта;
	КонецЕсли;
	
	Для каждого Строка Из СтрокиКонтактнойИнформации Цикл
		НовыйПолучатель = ПолучателиЭлектронногоПисьма.Добавить();
		НовыйПолучатель.Контакт = Лид;
		НовыйПолучатель.КакСвязаться = Строка.Представление;
	КонецЦикла;
	
	Возврат ПолучателиЭлектронногоПисьма;
	
КонецФункции

// Стандартные реквизиты для выбора полей при переводе лида в контрагента
//
// Возвращаемое значение:
//  - Соответствие - список реквизитов, Ключ - Имя реквизита, Значение - представление реквизита
//
Функция СтандартныеРеквизитыДляПереводаВПокупателя() Экспорт
	
	Реквизиты = Новый Соответствие;
	Реквизиты.Вставить("Наименование",          НСтр("ru = 'Представление в программе'"));
	Реквизиты.Вставить("Комментарий",           НСтр("ru = 'Дополнительная информация'"));
	Реквизиты.Вставить("НаименованиеКомпании",  НСтр("ru = 'Юридическое название'"));
	Реквизиты.Вставить("ИсточникПривлечения",   НСтр("ru = 'Источник'"));
	
	Возврат Реквизиты;
	
КонецФункции

// Перенос контактной информации контактов лида в служебный справочник
// Версия 1.6.20
// Удалить при удалении обработчика
//
Процедура ПеренестиКонтактыЛидаВСправочникКонтактыЛидов(ЛидОбъект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ЛидОбъект.Заблокировать();
		НомераТелефонов = Новый Массив;
		АдресаЭП = Новый Массив;
		
		Для Каждого Контакт Из ЛидОбъект.УдалитьКонтакты Цикл
			
			НовыйКонтакт              = Справочники.КонтактыЛидов.СоздатьЭлемент();
			НовыйКонтакт.Владелец     = ЛидОбъект.Ссылка;
			НовыйКонтакт.Наименование = Контакт.Наименование;
			
			Отбор = Новый Структура("ИдентификаторСтрокиТабличнойЧасти", Контакт.ИдентификаторСтрокиТабличнойЧасти);
			КИКонтакта = ЛидОбъект.УдалитьКонтактнаяИнформация.НайтиСтроки(Отбор);
			
			Для Каждого КИ Из КИКонтакта Цикл
				
				НовоеКИ = НовыйКонтакт.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеКИ, КИ,, "Вид");
				НовоеКИ.Вид = Справочники.КонтактыЛидов.ВидКИКонтактаПоВидуЛида(КИ.Вид);
				
				Если КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					Если ЗначениеЗаполнено(КИ.НомерТелефона) Тогда
						НомераТелефонов.Добавить(КИ.НомерТелефона);
					Иначе
						НомераТелефонов.Добавить(КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(КИ.Представление));
					КонецЕсли;
				КонецЕсли;
				
				Если КИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					АдресаЭП.Добавить(КИ.Представление);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйКонтакт);
			
		КонецЦикла;
		
		НомерТелефона         = СтрСоединить(НомераТелефонов, ", ");
		АдресЭП               = СтрСоединить(АдресаЭП, ",");
		ЛидОбъект.НомерТелефонаДляПоиска = НомерТелефона;
		ЛидОбъект.АдресЭПДляПоиска       = АдресЭП;
		
		ЛидОбъект.КонтактыПеренесены = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЛидОбъект);
		ЛидОбъект.Разблокировать();

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЛидОбъект.Ссылка);
		
	КонецПопытки;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ГруппаДоступа");
	РедактируемыеРеквизиты.Добавить("ДатаСоздания");
	РедактируемыеРеквизиты.Добавить("СостояниеЛида");
	РедактируемыеРеквизиты.Добавить("Ответственный");
	РедактируемыеРеквизиты.Добавить("ИсточникПривлечения");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ВидКИКонтактногоЛица(ТипКИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛица)";
	
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВидКИКонтрагента(ТипКИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)";
	
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеРеквизитаЛид(Выборка, Лид)
	
	Если НЕ ЗначениеЗаполнено(Выборка.СсылкаНаДопРеквизитЛид) Тогда
		Возврат Лид[Выборка.ИмяРеквизитаЛид];
	КонецЕсли;
	
	Отбор = Новый Структура("Свойство", Выборка.СсылкаНаДопРеквизитЛид);
	ЗначенияРеквизита = Лид.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
	
	Если ЗначенияРеквизита.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначенияРеквизита[0].Значение;
		
КонецФункции

Функция ПредставлениеТиповСвойства(ТипЗначения)
	
	МассивТипов = ТипЗначения.Типы();
	Представление = "";
	Для Каждого Тип Из МассивТипов Цикл
		Если Представление = "" Тогда
			Представление = Строка(Тип);
		Иначе
			Представление = Представление + ", " + Строка(Тип);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Представление;
	
КонецФункции

Процедура ЗаполнитьРеквизитыКонтрагентаПоРеквизитамЛида(Контрагент, Лид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеПолейЛидаИКонтрагента.ИмяРеквизитаЛид КАК ИмяРеквизитаЛид,
	|	СоответствиеПолейЛидаИКонтрагента.ИмяРеквизитаКонтрагент КАК ИмяРеквизитаКонтрагент,
	|	СоответствиеПолейЛидаИКонтрагента.СсылкаНаДопРеквизитЛид КАК СсылкаНаДопРеквизитЛид,
	|	СоответствиеПолейЛидаИКонтрагента.СсылкаНаДопРеквизитКонтрагент КАК СсылкаНаДопРеквизитКонтрагент
	|ИЗ
	|	РегистрСведений.СоответствиеПолейЛидаИКонтрагента КАК СоответствиеПолейЛидаИКонтрагента";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяРеквизитаЛид = "ПрисоединенныеФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизитаЛид = ЗначениеРеквизитаЛид(Выборка, Лид);
		Если ЗначениеРеквизитаЛид = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеРеквизитаКонтрагент(Контрагент, Выборка, ЗначениеРеквизитаЛид);
		
	КонецЦикла;
	
	Контрагент.ВидКонтрагента = ВидКонтрагентаПоЗаполненнымРеквизитам(Контрагент);
	
КонецПроцедуры

Процедура ПеренестиФайлыИзЛидаВКонтрагента(Лид, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеПолейЛидаИКонтрагента.ИмяРеквизитаЛид КАК ИмяРеквизитаЛид
	|ИЗ
	|	РегистрСведений.СоответствиеПолейЛидаИКонтрагента КАК СоответствиеПолейЛидаИКонтрагента
	|ГДЕ
	|	СоответствиеПолейЛидаИКонтрагента.ИмяРеквизитаЛид = &Имя";
	
	Запрос.УстановитьПараметр("Имя", "ПрисоединенныеФайлы");
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Лид, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, ПараметрыДанныхФайла);
		
		ПараметрыДобавления = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыДобавления.ВладелецФайлов = Контрагент;
		ПараметрыДобавления.ИмяБезРасширения = ДанныеФайла.ИмяФайла;
		ПараметрыДобавления.РасширениеБезТочки = ДанныеФайла.Расширение;
		ПараметрыДобавления.ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
		РаботаСФайлами.ДобавитьФайл(ПараметрыДобавления, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеРеквизитаКонтрагент(Контрагент, Выборка, ЗначениеРеквизитаЛид)
	
	ИмяРеквизита = "";
	ТипРеквизита = Новый ОписаниеТипов;
	ПредставленияРеквизитов = Справочники.Контрагенты.СтандартныеРеквизитыДляПереводаВПокупателя();
	
	Если Выборка.ИмяРеквизитаКонтрагент = "Наименование" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Строка");
		ИмяРеквизита = ПредставленияРеквизитов[Выборка.ИмяРеквизитаКонтрагент];
	ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СсылкаНаДопРеквизитКонтрагент) Тогда
		СправочникКонтрагенты = Метаданные.Справочники["Контрагенты"];
		СправочникКонтрагентыРеквизиты = СправочникКонтрагенты.Реквизиты;
		ТекущийРеквизит = СправочникКонтрагентыРеквизиты[Выборка.ИмяРеквизитаКонтрагент];
		ТипРеквизита = ТекущийРеквизит.Тип;
		ИмяРеквизита = ПредставленияРеквизитов[Выборка.ИмяРеквизитаКонтрагент];
	Иначе
		ЗначенияРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.СсылкаНаДопРеквизитКонтрагент, "ТипЗначения, Заголовок");
		ТипРеквизита = ЗначенияРеквизита.ТипЗначения;
		ИмяРеквизита = ЗначенияРеквизита.Заголовок;
	КонецЕсли;
	
	ТипыЗначенийСогласованны = ТипРеквизита.СодержитТип(ТипЗнч(ЗначениеРеквизитаЛид));
	
	Если НЕ ТипыЗначенийСогласованны Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение реквизита %1. 
			|Ожидалось: %2; передано значение: %3 (тип %4).'"),ИмяРеквизита,
			ПредставлениеТиповСвойства(ТипРеквизита),
			ЗначениеРеквизитаЛид,
			Строка(ТипЗнч(ЗначениеРеквизитаЛид)));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Выборка.СсылкаНаДопРеквизитКонтрагент) Тогда
		Контрагент[Выборка.ИмяРеквизитаКонтрагент] = ЗначениеРеквизитаЛид;
	Иначе
		ДопРеквизит = Контрагент.ДополнительныеРеквизиты.Добавить();
		ДопРеквизит.Свойство = Выборка.СсылкаНаДопРеквизитКонтрагент;
		ДопРеквизит.Значение = ЗначениеРеквизитаЛид;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидКонтрагентаПоЗаполненнымРеквизитам(Контрагент)
	
	Если ЗначениеЗаполнено(Контрагент.НаименованиеПолное) Тогда
		Возврат Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.ДатаРождения) ИЛИ ЗначениеЗаполнено(Контрагент.Пол)
		ИЛИ ЗначениеЗаполнено(Контрагент.ФИО) ИЛИ ЗначениеЗаполнено(Контрагент.ДокументУдостоверяющийЛичность) Тогда
		Возврат Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.СвидетельствоСерияНомер) ИЛИ ЗначениеЗаполнено(Контрагент.СвидетельствоДатаВыдачи) Тогда
		Возврат Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.КодГосударственногоОргана) 
		ИЛИ ЗначениеЗаполнено(Контрагент.ВидГосударственногоОргана) Тогда
		Возврат Перечисления.ВидыКонтрагентов.ГосударственныйОрган;
	КонецЕсли;
	
	Возврат Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	
КонецФункции

Функция ОсновныеСведенияКонтактовЛида(СтрокаТаблицы)
	
	ОсновныеСведенияКонтактовЛида = Новый Массив;
	
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт1) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Контакт1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон1) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Телефон1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП1) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.АдресЭП1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт2) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Контакт2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон2) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Телефон2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП2) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.АдресЭП2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт3) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Контакт3);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон3) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.Телефон3);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП3) Тогда
		ОсновныеСведенияКонтактовЛида.Добавить(СтрокаТаблицы.АдресЭП3);
	КонецЕсли;
	
	Возврат ОсновныеСведенияКонтактовЛида;
	
КонецФункции

Функция АдресаЭПКонтактовЛида(СтрокаТаблицы)
	АдресаЭП = Новый Массив;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП1) Тогда
		АдресаЭП.Добавить(СтрокаТаблицы.АдресЭП1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП2) Тогда
		АдресаЭП.Добавить(СтрокаТаблицы.АдресЭП2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП3) Тогда
		АдресаЭП.Добавить(СтрокаТаблицы.АдресЭП3);
	КонецЕсли;
	Возврат АдресаЭП;
КонецФункции

Функция НомераТелефоновКонтактаЛида(СтрокаТаблицы)
	НомераТелефонов = Новый Массив;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон1) Тогда
		НомераТелефонов.Добавить(КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаТаблицы.Телефон1));
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон2) Тогда
		НомераТелефонов.Добавить(КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаТаблицы.Телефон2));
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон3) Тогда
		НомераТелефонов.Добавить(КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаТаблицы.Телефон3));
	КонецЕсли;
	Возврат НомераТелефонов;
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

Процедура ЗаполнитьДанныеПанелиКонтактнаяИнформация(ВладелецКИ, ДанныеПанелиКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Значение КАК Значение
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Лид";
	
	Запрос.УстановитьПараметр("Лид", ВладелецКИ);
	ДанныеКИ = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеКИ.Следующий() Цикл
		НоваяСтрока = Новый Структура;
		Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
		НоваяСтрока.Вставить("Отображение", Строка(ДанныеКИ.Вид) + ": " + ДанныеКИ.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий));
		НоваяСтрока.Вставить("ИндексПиктограммы", КонтактнаяИнформацияПанельУНФ.ИндексПиктограммыПоТипу(ДанныеКИ.Тип));
		НоваяСтрока.Вставить("ТипОтображаемыхДанных", "ЗначениеКИ");
		НоваяСтрока.Вставить("ВладелецКИ", ВладелецКИ);
		НоваяСтрока.Вставить("ПредставлениеКИ", ДанныеКИ.Представление);
		НоваяСтрока.Вставить("ТипКИ", ДанныеКИ.Тип);
		ДанныеПанелиКонтактнойИнформации.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПорядокТиповКИ.Тип КАК Тип,
		|	ПорядокТиповКИ.Порядок КАК Порядок
		|ПОМЕСТИТЬ втПорядокТиповКИ
		|ИЗ
		|	&ПорядокТиповКИ КАК ПорядокТиповКИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактыЛида.Ссылка КАК КонтактноеЛицо,
		|	КонтактыЛида.Наименование КАК Наименование
		|ПОМЕСТИТЬ втКонтакты
		|ИЗ
		|	Справочник.КонтактыЛидов КАК КонтактыЛида
		|ГДЕ
		|	КонтактыЛида.Владелец = &Лид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
		|	втКонтакты.Наименование КАК Наименование
		|ИЗ
		|	втКонтакты КАК втКонтакты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
		|	КонтактныеЛицаКонтактнаяИнформация.Тип КАК Тип,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление,
		|	КонтактныеЛицаКонтактнаяИнформация.Значение КАК Значение,
		|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаКонтактнаяИнформация.Вид) КАК ПредставлениеВидаКИ
		|ИЗ
		|	Справочник.КонтактыЛидов.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТиповКИ КАК втПорядокТиповКИ
		|		ПО КонтактныеЛицаКонтактнаяИнформация.Тип = втПорядокТиповКИ.Тип
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				втКонтакты.КонтактноеЛицо
		|			ИЗ
		|				втКонтакты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПорядокТиповКИ.Порядок,
		|	КонтактныеЛицаКонтактнаяИнформация.Вид.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ВладелецКИ);
	Запрос.УстановитьПараметр("Лид", ВладелецКИ);
	Запрос.УстановитьПараметр("ПорядокТиповКИ", КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтакты = МассивРезультатов[2].Выбрать();
	ВыборкаКонтактнаяИнформация = МассивРезультатов[3].Выбрать();
	ОтборКИ = Новый Структура("КонтактноеЛицо");
	
	Пока ВыборкаКонтакты.Следующий() Цикл
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Отображение", Строка(ВыборкаКонтакты.КонтактноеЛицо));
		НоваяСтрока.Вставить("ИндексПиктограммы", -1);
		НоваяСтрока.Вставить("ТипОтображаемыхДанных", "КонтактноеЛицо");
		НоваяСтрока.Вставить("ВладелецКИ", ВыборкаКонтакты.КонтактноеЛицо);
		ДанныеПанелиКонтактнойИнформации.Добавить(НоваяСтрока);
		
		ВыборкаКонтактнаяИнформация.Сбросить();
		ОтборКИ.КонтактноеЛицо = ВыборкаКонтакты.КонтактноеЛицо;
		
		Пока ВыборкаКонтактнаяИнформация.НайтиСледующий(ОтборКИ) Цикл
			
			НоваяСтрока = Новый Структура;
			Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ВыборкаКонтактнаяИнформация.Значение);
			НоваяСтрока.Вставить("Отображение", Строка(ВыборкаКонтактнаяИнформация.Вид) + ": " +ВыборкаКонтактнаяИнформация.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий));
			НоваяСтрока.Вставить("ИндексПиктограммы", КонтактнаяИнформацияПанельУНФ.ИндексПиктограммыПоТипу(ВыборкаКонтактнаяИнформация.Тип));
			НоваяСтрока.Вставить("ТипОтображаемыхДанных", "ЗначениеКИ");
			НоваяСтрока.Вставить("ВладелецКИ", ВыборкаКонтакты.КонтактноеЛицо);
			НоваяСтрока.Вставить("ПредставлениеКИ", ВыборкаКонтактнаяИнформация.Представление);
			НоваяСтрока.Вставить("ТипКИ", ВыборкаКонтактнаяИнформация.Тип);
			ДанныеПанелиКонтактнойИнформации.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ДобавитьКИ(ЭлементСправочника, ПредставлениеКИ, ВидКИ)
	
	XMLПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеКИ, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭлементСправочника, XMLПредставление, ВидКИ, ВидКИ.Тип);
	
КонецПроцедуры

Процедура ДобавитьКонтакт(ЭлементСправочника, ПредставлениеКонтакта, ПредставлениеТелефона, ПредставлениеАдресЭП)

	НовыйКонтакт = Справочники.КонтактыЛидов.СоздатьЭлемент();
	НовыйКонтакт.Наименование = ПредставлениеКонтакта;
	НовыйКонтакт.Владелец     = ЭлементСправочника.Ссылка;
	
	ДобавитьКИ(НовыйКонтакт, ПредставлениеТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактаЛида);
	ДобавитьКИ(НовыйКонтакт, ПредставлениеАдресЭП, Справочники.ВидыКонтактнойИнформации.EmailКонтактаЛида);

	НовыйКонтакт.Записать();

КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока9 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(9));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Лиды");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,	"Наименование", НСтр("ru = 'Лид (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Лид", 1, Истина, Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,	"Код", 			НСтр("ru = 'Код'"), ОписаниеТиповСтрока9, ОписаниеТиповКолонка, "Лид", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,"Телефон",		НСтр("ru = 'Телефон'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Лид", 3);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,	"АдресЭП",		НСтр("ru = 'E-mail'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка,"Лид", 4);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Родитель", НСтр("ru = 'Группа'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СостоянияЛидов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СостояниеЛида", НСтр("ru = 'Состояние лида'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаЛидов") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаЛидов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ГруппаДоступа", НСтр("ru = 'Группа доступа'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, , , Истина);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт1", НСтр("ru = '(1) Контакт (ФИО)'"), ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_1", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон1", НСтр("ru = '(1) Телефон'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_1", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП1", НСтр("ru = '(1) E-mail'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_1", 3);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт2", НСтр("ru = '(2) Контакт (ФИО)'"), ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_2", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон2", НСтр("ru = '(2) Телефон'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_2", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП2", НСтр("ru = '(2) E-mail'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_2", 3);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт3", НСтр("ru = '(3) Контакт (ФИО)'"), ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_3", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон3", НСтр("ru = '(3) Телефон'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_3", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП3", НСтр("ru = '(3) E-mail'"), ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_3", 3);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ИсточникиПривлеченияПокупателей");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИсточникПривлечения", НСтр("ru = 'Источник привлечения'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Строка");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", НСтр("ru = 'Заметка'"), ОписаниеТиповСтрока0000, ОписаниеТиповКолонка);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, НСтр("ru = 'Дополнительные реквизиты'"), ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	ОбновлятьДанные				= НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЛид(СтрокаТаблицыФормы.Лид, СтрокаТаблицыФормы.Наименование, СтрокаТаблицыФормы.Код);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Лид);
		
		// Родитель по наименованию
		ЗначениеПоУмолчанию = Справочники.Лиды.ПустаяСсылка();
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителя("Лиды", СтрокаТаблицыФормы.Родитель, СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		ЗначениеПоУмолчанию = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЛида();
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСостояниеЛида(СтрокаТаблицыФормы.СостояниеЛида, СтрокаТаблицыФормы.СостояниеЛида_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Группа доступа
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаЛидов") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьГруппуДоступаЛида(СтрокаТаблицыФормы.ГруппаДоступа, СтрокаТаблицыФормы.ГруппаДоступа_ВходящиеДанные);
			
		КонецЕсли;
		
		// Контакты и КИ (удаляем пробелы)
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт1, СтрокаТаблицыФормы.Контакт1);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон1, СтрокаТаблицыФормы.Телефон1);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП1, СтрокаТаблицыФормы.АдресЭП1);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт2, СтрокаТаблицыФормы.Контакт2);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон2, СтрокаТаблицыФормы.Телефон2);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП2, СтрокаТаблицыФормы.АдресЭП2);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт3, СтрокаТаблицыФормы.Контакт3);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон3, СтрокаТаблицыФормы.Телефон3);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП3, СтрокаТаблицыФормы.АдресЭП3);
		
		// Источник привлечения
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьИсточникиПривлеченияПокупателей(СтрокаТаблицыФормы.ИсточникПривлечения, СтрокаТаблицыФормы.ИсточникПривлечения_ВходящиеДанные);
		
		// Комментарий
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Комментарий, СтрокаТаблицыФормы.Комментарий_ВходящиеДанные);
		
		// Дополнительные реквизиты
		Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Лид);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (НЕ СтрокаТаблицыФормы._СтрокаСопоставлена И НЕ ПустаяСтрока(СтрокаТаблицыФормы.Наименование));
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	НастройкиОбновленияСвойств		= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ОбновлятьСуществующие			= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено		= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных		= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных				= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции		= 0;
	ТранзакцияОткрыта				= Ложь;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено);
				
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
				
				Если СтрокаТаблицы._СтрокаСопоставлена Тогда
					
					ЭлементСправочника = СтрокаТаблицы.Лид.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые, НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению);
					
				Иначе
					
					ЭлементСправочника = Справочники.Лиды.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы);
					
					ЭлементСправочника.ДатаСоздания = ТекущаяДатаСеанса();
					ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
					
				КонецЕсли;

				ЭлементСправочника.Наименование = СтрокаТаблицы.Наименование;
				ЭлементСправочника.НаименованиеКомпании = СтрокаТаблицы.Наименование;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКомпанииЛида);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.АдресЭП, Справочники.ВидыКонтактнойИнформации.EmailКомпанииЛида);
					
				КонецЕсли;
				
				Если СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
					
				КонецЕсли;
				
				ЭлементСправочника.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойОтветственный");
				ЭлементСправочника.ДополнительныеСвойства.Вставить("ОсновныеСведенияКонтактныхЛиц", ОсновныеСведенияКонтактовЛида(СтрокаТаблицы));
				ЭлементСправочника.ДополнительныеСвойства.Вставить("НомераТелефоновКонтактаЛида", НомераТелефоновКонтактаЛида(СтрокаТаблицы));
				ЭлементСправочника.ДополнительныеСвойства.Вставить("АдресаЭПКонтактовЛида", АдресаЭПКонтактовЛида(СтрокаТаблицы));
				ЭлементСправочника.Записать();
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт1)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон1)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП1) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника.Ссылка, СтрокаТаблицы.Контакт1, СтрокаТаблицы.Телефон1, СтрокаТаблицы.АдресЭП1);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт2)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон2)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП2) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника.Ссылка, СтрокаТаблицы.Контакт2, СтрокаТаблицы.Телефон2, СтрокаТаблицы.АдресЭП2);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт3)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон3)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП3) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника.Ссылка, СтрокаТаблицы.Контакт3, СтрокаТаблицы.Телефон3, СтрокаТаблицы.АдресЭП3 );
					
				КонецЕсли;
								
			КонецЕсли;
			
			ИндексТекущейСтроки = ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса      = СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейСтроки, РазмерТаблицыДанных);
			ПроцентВыполнения   = Окр(ИндексТекущейСтроки * 100 / РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Лиды, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли