
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	Если НЕ ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) Тогда
		ТекущийЭлемент = Элементы.НаименованиеКомпании;
	КонецЕсли;
	
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	УстановитьНастройкиКонтроляДублей();
	СозданКопированием = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЛидах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Лид", "ИсточникПривлечения");
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЛидЗамененНаДубль Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
		Оповестить("Запись_Лид", Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Запись_СостоянияЛидов" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_Лид" И Параметр <> Неопределено Тогда
		
		ЛидИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЛидИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Лиды") Тогда
			ЛидИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЛидИзменен = Неопределено ИЛИ (ТипЗнч(ЛидИзменен) = Тип("Булево") И ЛидИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	СостояниеПередЗавершением = СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		ТекущийОбъект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
	?(СостояниеПередЗавершением = Неопределено, ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЛида(),СостояниеПередЗавершением));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СозданКопированием И Элементы.ФормаПроверитьЛидаНаДубли.Видимость Тогда
		
		Состояние(НСтр("ru='Проверка лида на дубли'"), 49);
		ПроверитьКонтрагентаНаДублиСервер();
		Состояние(НСтр("ru='Проверка лида на дубли'"), 100);
		
		ПоказатьСообщениеОДублях();
	КонецЕсли;
	
	Если Элементы.ДублиНаименованиеКомпании.Видимость
		ИЛИ Элементы.ДублиНаименование.Видимость ИЛИ ДублиКИ.Количество() > 0 Тогда
		ПоказатьПредупреждениеОДублях();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ПараметрыЗаписи.Вставить("ЗаписьНового", Истина);
	КонецЕсли;
	
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	НомераТелефонов = Новый Массив;
	АдресаЭП = Новый Массив;
	
	Для Каждого СтрокаКЛ Из ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаКИ Из СтрокаКЛ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				НомераТелефонов.Добавить(СтрЗаменить(КонтактнаяИнформацияУНФ.ПреобразоватьТелефонДляПоиска(СтрокаКИ.Представление), "+", ""));
			КонецЕсли;
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				АдресаЭП.Добавить(СтрокаКИ.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НомераТелефоновКонтактаЛида", НомераТелефонов);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресаЭПКонтактовЛида", АдресаЭП);
	
	МассивСтрок = Новый Массив;
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		
		МассивСтрок.Добавить(ДанныеКЛ.Наименование);
		
		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(ДанныеКИ.Представление);
		КонецЦикла;
		
	КонецЦикла;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсновныеСведенияКонтактныхЛиц", МассивСтрок);
	
	Если ПроигнорированоСообщениеОДублях Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоЗаписьДубля");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СообщениеОДублированииИнформации", СообщениеОДублированииИнформации);
	КонецЕсли;
	
	ПроигнорированоСообщениеОДублях = Ложь;
	СообщениеОДублированииИнформации = "";

	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписьНового") Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьИОбновитьКонтактныеЛица();
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЛидов.Завершен)
	);
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		ТекущийОбъект.Ссылка,
		АдресЭП(),
		УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
			
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	ПроверитьЗаполнениеКонтактныхЛиц(Отказ);
	ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ); // для проверки
	// внедрения БСП
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеКомпанииПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	ОбновитьНаименованиеЛида();
	
	Если НЕ ПроверятьЮрНазваниеНаДубли И ПроверятьПредставлениеНаДубли Тогда
		ПроверитьНаДубли("Наименование");
	КонецЕсли;
	
	Если НЕ ПроверятьЮрНазваниеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НаименованиеКомпании)) Тогда
		Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПроверитьНаДубли("НаименованиеКомпании");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеКонтактногоЛица_ПриИзменении(Элемент)
	
	ИндексКЛ = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбновитьНаименованиеЛида();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеКонтактныхЛиц[ИндексКЛ].Наименование)) Тогда
		ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, Ложь);
		Возврат;
	КонецЕсли;

	Если НЕ ПроверятьПредставлениеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ);
	
	ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[ИндексКЛ]);
	
	Элементы["Контакт_"+ИндексКЛ].ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
	Элементы["Контакт_"+ИндексКЛ].Заголовок 					 = ЗаголовкиГрупп.ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЛидаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЛидов"), ПараметрыПолученияДанных);
		ДанныеВыбора = ДанныеВыбораСостояния;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдаленныеКонтактыНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецКонтакта", Объект.Ссылка);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыКонтактов",ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактыЛидов.Форма.ФормаСпискаУдаленныхКонтактов",ПараметрыФормы,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ДублиПоПолномуНаименованиюНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;	
	
	ПараметрыДублей.Вставить("НаименованиеПолное", НаименованиеКомпанииДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиПоПредставлениюНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВПрограммеПриИзменении(Элемент)
	
	Если НЕ ПроверятьПредставлениеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.Наименование)) Тогда
		Элементы.ДублиНаименование.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	ПроверитьНаДубли("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВсеКонтакты(Команда)
	
	ПоказыватьВсеКонтакты = Истина;
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВКлиента(Команда)
	
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Ключ", НовыйКонтрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВНекачественныйЛид(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПеревестиВНекачественныйЛидСервер();
		Оповестить("Запись_Лид", Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПереводВНекачественного",ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + 
	Символы.ПС + " Перевод лида в некачественного возможен только после записи данных." +
	Символы.ПС + " Данные будут записаны'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	ВернутьВРаботуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйКонтакт(Команда)
	
	ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКЛ.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	ПоказыватьВсеКонтакты     = ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ) > 5;
	ДанныеКЛ.ГруппаРазвернута = Истина;
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВКлиентаИЗаказ(Команда)
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", НовыйКонтрагент);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокумента", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПеревода(Команда)
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаНастройкиПереноса");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛидаНаДубли(Команда)
	
	Состояние(НСтр("ru='Проверка лида на дубли'"), 49);
	ПроверитьКонтрагентаНаДублиСервер();
	Состояние(НСтр("ru='Проверка лида на дубли'"), 100);
	
	ПоказатьСообщениеОДублях();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПредставления

&НаКлиенте
Процедура ОбработкаОповещенияВыбораНаименования(ЗначениеВыбора, ДопПараметры) Экспорт
	Объект.Наименование = ЗначениеВыбора.Значение;
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	ТегированиеОбъектов.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	Если 1=0 Тогда
		УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	Если НЕ Объект.КонтактыПеренесены И Объект.УдалитьКонтакты.Количество() > 0 Тогда
		ЛидОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Лиды"));
		Справочники.Лиды.ПеренестиКонтактыЛидаВСправочникКонтактыЛидов(ЛидОбъект);
		ЗначениеВДанныеФормы(ЛидОбъект, Объект);
	КонецЕсли;
	
	КлассификаторОПФ.Загрузить(РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм());
	
	ТегированиеОбъектов.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект,Объект);
	
	ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	Если Параметры.Свойство("ДанныеИзКонтактнойФормы") Тогда
		ЗаполнитьПоДаннымКонтактнойФормы(Параметры);
	КонецЕсли;
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);

	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		ИЛИ Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		ИЛИ (ДанныеКонтактныхЛиц.Количество() > 0 И Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(ДанныеКонтактныхЛиц[0].Наименование) <> Неопределено);
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Лиды);
	
	Элементы.ПолеТекста.Видимость = ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя();
	Элементы.ПредставлениеВПрограмме.МаксимальнаяШирина = 43;
	
	Если ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя() Тогда
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат от '") + Формат(Объект.ДатаЗавершенияРаботы,"ДЛФ=Д");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат'");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ЛидПереведенВПокупателя() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Контрагент = Справочники.Лиды.СвязанныйКонтрагент(Объект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		
		Текст = Новый ФорматированнаяСтрока(НСтр("ru='Лид переведен в покупателя ' "));
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаКонтрагент = Новый ФорматированнаяСтрока(Строка(Контрагент),,,,ПолучитьНавигационнуюСсылку(Контрагент));
			ПолеТекста = Новый ФорматированнаяСтрока(Текст,СтрокаКонтрагент);
		Иначе
			ПолеТекста = Текст;
		КонецЕсли;
		
		Элементы.ПолеТекста.АвтоМаксимальнаяШирина = Истина;
		
	КонецЕсли;
	
	Если ЭтоНекачественныйЛид() Тогда
		ПолеТекста= Новый ФорматированнаяСтрока(НСтр("ru='Некачественный лид'"));
		Элементы.СостояниеЛида.ОтображениеПодсказки =ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	ТолькоПросмотр = ЛидПереведенВПокупателя() ИЛИ НЕ МожноРедактировать;
	
	Элементы.ОблакоТегов.Доступность  = НЕ ЭтоНекачественныйЛид();
	Элементы.ГруппаКнопок.Видимость   = НЕ (ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя());
	Элементы.ВернутьВРаботу.Видимость = ЭтоНекачественныйЛид();
	
	Элементы.КолонкаСлева.Доступность             = НЕ ЭтоНекачественныйЛид();
	Элементы.ДополнительнаяИнформация.Доступность = НЕ ЭтоНекачественныйЛид();
	
	Элементы.ПричинаНеуспешногоЗавершенияРаботы.Видимость = ЭтоНекачественныйЛид();
	Элементы.ЗаметкиЗавершенияРаботы.Видимость            = ЭтоНекачественныйЛид();
	Элементы.УдаленныеКонтакты.Видимость = ЕстьУдаленныеКонтакты();
	
	Если ОбязательноЗаполнятьИсточникВЛидах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Элементы.ФормаПроверитьЛидаНаДубли.Видимость = ПроверятьПредставлениеНаДубли ИЛИ ПроверятьАдресЭПНаДубли 
		ИЛИ ПроверятьНомерТелефонаНаДубли ИЛИ ПроверятьЮрНазваниеНаДубли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Лид");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПеревестиВКлиентаСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЛидОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Лиды"));
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Возврат Справочники.Лиды.ПолучитьСоздатьКонтрагента(ЛидОбъект);
	
КонецФункции

&НаСервере
Процедура ПеревестиВНекачественныйЛидСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Объект.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
	Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	Объект.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		Объект.Ссылка,
		Справочники.СостоянияЛидов.Завершен)
		);
	Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьВРаботуСервер()
	Объект.СостояниеЛида =  СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		Объект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Объект.ПричинаНеуспешногоЗавершенияРаботы = Неопределено;
	Объект.ВариантЗавершения = Неопределено;
	Объект.ДатаЗавершенияРаботы = Дата('00010101');
	Объект.ЗаметкиЗавершенияРаботы = Неопределено;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПереводВНекачественного(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиВНекачественныйЛидСервер();
	
КонецПроцедуры

&НаСервере
Функция ЛидПереведенВПокупателя()
	
	Возврат ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) 
		И Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя;
	
КонецФункции

&НаСервере
Функция ЭтоНекачественныйЛид()
	
	Возврат ЗначениеЗаполнено(Объект.ПричинаНеуспешногоЗавершенияРаботы)
		ИЛИ Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.ПредставлениеВПрограмме.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(Объект.НаименованиеКомпании) Тогда
		
		Форма.ОрганизационноПравоваяФорма = УправлениеНебольшойФирмойКлиентСервер.ВыделитьИзНаименованияОПФ(Форма.КлассификаторОПФ, Объект.НаименованиеКомпании);
		
		СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		
		Если НЕ ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			СписокВыбора.Вставить(0, Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + Форма.ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.КраткаяФорма + " " + Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ДанныеКонтактныхЛиц.Количество() > 0 И Не ПустаяСтрока(Форма.ДанныеКонтактныхЛиц[0].Наименование) Тогда
		СписокВыбора.Добавить(Строка(Форма.ДанныеКонтактныхЛиц[0].Наименование));
	КонецЕсли;
	
	Форма.Элементы.ПредставлениеВПрограмме.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованиеЛида()
	
	Если НЕ ФормироватьНаименованиеАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПредставлениеВПрограмме.СписокВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = Элементы.ПредставлениеВПрограмме.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымКонтактнойФормы(Параметры)
	
	ДанныеКФ = Параметры.ДанныеИзКонтактнойФормы;
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Параметры.Контакт;
	КонецЕсли;
	
	Если ДанныеКонтактныхЛиц.Количество() = 0 ИЛИ ЗначениеЗаполнено(ДанныеКонтактныхЛиц[0].Наименование) Тогда
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКЛ.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	Иначе
		ДанныеКЛ = ДанныеКонтактныхЛиц[0];
	КонецЕсли;
	
	ДанныеКЛ.Наименование = Параметры.Контакт;
	Если ДанныеКФ["НомераТелефонов"].Количество()>0 Тогда
		КИТелефон = ДанныеКФ["НомераТелефонов"][0];
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактаЛида;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, ТипКИ);
		СтрокаКИ.Представление = КИТелефон;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИТелефон, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЕсли;
	
	Для Каждого КИ Из ДанныеКФ["АдресаЭП"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактаЛида;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Скайп"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактаЛида;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Другое"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактаЛида;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
	ДанныеКЛ.Изменен = Истина;
	ОбновитьЭлементыКонтактныхЛиц();
	
	ПроверитьКонтрагентаНаДублиСервер();

КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Значение;
	
КонецФункции

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(КонтактнаяИнформация, ТипКонтактнойИнформации)
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("Тип,Значение", ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКонтактаЛида");
	ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактаЛида");
	КонецЕсли;
	Если ВидКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = КонтактКакСвязаться.Контакт;
	КонецЕсли;

	Если ДанныеКонтактныхЛиц.Количество() = 0 ИЛИ ЗначениеЗаполнено(ДанныеКонтактныхЛиц[0].Наименование) Тогда
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКЛ.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	Иначе
		ДанныеКЛ = ДанныеКонтактныхЛиц[0];
	КонецЕсли;

	ДанныеКЛ.Наименование = КонтактКакСвязаться.Контакт;
	ДанныеКЛ.Изменен = Истина;
	ДанныеКЛ.ГруппаРазвернута = Истина;
	
	ОбновитьЭлементыКонтактныхЛиц();
	
	СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, КонтактКакСвязаться.ТипКИ);
	СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
	СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
	СтрокаКИ.Вид = ВидКИ;
	
	ПроверитьКонтрагентаНаДублиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ПредставлениеКИ_")+1));
	ДанныеКИ = ЭтотОбъект.КонтактнаяИнформация[ИндексКИ];

	Если ФормироватьНаименованиеАвтоматически И Элементы.ПредставлениеВПрограмме.СписокВыбора.Количество() > 0  Тогда
		Объект.Наименование = Элементы.ПредставлениеВПрограмме.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) И ДублиКИ.Количество() <> 0 Тогда
		УдалитьНеактивныеДублиИЭлементы();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКИНаДубли(ДанныеКИ.Представление, ИндексКИ, ДанныеКИ.Тип);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Истина Тогда
		
		КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Иначе
		
		// вызов оставлен для проверки внедрения БСП
		УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Истина Тогда
		
		КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
		
	Иначе
		
		// вызов оставлен для проверки внедрения БСП
		УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДругиеЗаполненныеСтрокиВидаКИ(Знач ДанныеКонтактногоЛица, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = ДанныеКонтактногоЛица.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока И Не ПустаяСтрока(СтрокаВида.Представление) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВсегдаВыводимыеВидыКИ(КИ, СвойстваВидовКонтактнойИнформацииКонтактныхЛиц)
	
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрокаКИ = КИ.Добавить();
		НоваяСтрокаКИ.Вид = НайденнаяСтрока.Вид;
		НоваяСтрокаКИ.Тип = НайденнаяСтрока.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактыЛида

&НаСервере
Функция ЕстьУдаленныеКонтакты()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактыЛидов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактыЛидов КАК КонтактыЛидов
	|ГДЕ
	|	КонтактыЛидов.ПометкаУдаления
	|	И Владелец = &ТекущийЛид";
	
	Запрос.УстановитьПараметр("ТекущийЛид", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Возможность ввода ""%1"" будет добавлена для всех %2.
			|Продолжить?'"), ВыбранныйЭлемент.Значение, ДополнительныеПараметры.МножественнаяФормаВладельца);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, ЗаголовокВопроса);
		
	Иначе
		
		ДобавитьКонтактнуюИнформациюКонтактаСервер(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.ИндексКонтакта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюКонтактаСервер(ДополнительныеПараметры.ДобавляемыйВид, ДополнительныеПараметры.ИндексКонтакта, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюКонтактаСервер(ДобавляемыйВид, ИндексКонтакта, УстановитьВыводВФормеВсегда = Ложь)
	
	ДобавляемыйТип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	КоличествоЭлементовКоллекции = ДанныеКонтакта.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ДанныеКонтакта.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = ДанныеКонтакта.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ДобавляемыйТип;
	
	Если УстановитьВыводВФормеВсегда Тогда
		
		КонтактнаяИнформацияУНФ.УстановитьФлагВыводитьВФормеВсегда(ДобавляемыйВид);
		
		НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("Вид", ДобавляемыйВид));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ВыводитьВФормеВсегда = Истина;
		КонецЕсли;
		
		Для ТекущийИндекс = 0 По ДанныеКонтактныхЛиц.Количество()-1 Цикл
			
			Если ТекущийИндекс = ИндексКонтакта Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеКИ = ДанныеКонтактныхЛиц[ТекущийИндекс].КонтактнаяИнформация.Добавить();
			ДанныеКИ.Вид = ДобавляемыйВид;
			ДанныеКИ.Тип = ДобавляемыйТип;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексВставки];
	ДобавитьЭлементыДублей();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформацииКонтактногоЛица(Команда)
	
	ИндексКонтакта = Число(Сред(ТекущийЭлемент.Имя, СтрДлина("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_")+1));
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКонтакта", ИндексКонтакта);
	ДополнительныеПараметры.Вставить("МножественнаяФормаВладельца", НСтр("ru='контактов лида'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из СвойстваВидовКонтактнойИнформацииКонтактныхЛиц Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или ДанныеКонтакта.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, ТекущийЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект)
	
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			УдалитьНезаполненныйКонтакт(ДанныеКЛ);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ДанныеКЛ.Изменен Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
			КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) ИЛИ КонтактноеЛицоОбъект = Неопределено Тогда
			// Создание
			КонтактноеЛицоОбъект = Справочники.КонтактыЛидов.СоздатьЭлемент();
		КонецЕсли;
		
		КонтактноеЛицоОбъект.Владелец = ТекущийОбъект.Ссылка;
		// Внесение изменений
		ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, ДанныеКЛ, "Наименование");
		КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
		
		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ДанныеКИ.Вид, ДанныеКИ.Тип);
		КонецЦикла;
		
		// Запись объекта
		КонтактноеЛицоОбъект.Записать();
		
		// Сохранение ссылки на созданный объект
		ДанныеКЛ.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИОбновитьКонтактныеЛица()
	
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеИКонтактнуюИнформацию(Знач КлассификаторСсылка, Знач ИмяЭлемента = "")
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Если ДанныеКонтактныхЛиц.Количество() = 0 Тогда
		ДанныеКонтактныхЛиц.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлемента) Тогда
		ИндексЭлемента = 0;
	Иначе
		ИндексЭлемента = Число(СтрЗаменить(ИмяЭлемента, "НаименованиеКонтакт_", ""));
	КонецЕсли;
	
	Если ИндексЭлемента = 0 Тогда
		Объект.Наименование = ДанныеКонтакта.Title;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц[ИндексЭлемента].Наименование = ДанныеКонтакта.Title;
	ДанныеКонтактныхЛиц[ИндексЭлемента].Изменен = Истина;
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо = Неопределено;
	
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация.Очистить();
	ЗаполнитьВсегдаВыводимыеВидыКИ(
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация,
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	ТипЗнч(ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(Форма) Экспорт
	
	МассивАдресов = Новый Массив;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) > 5 И НЕ Форма.ПоказыватьВсеКонтакты Тогда
				Прервать;
			КонецЕсли;
		
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаТаблицы.Представление)
				И МассивАдресов.Найти(СтрокаТаблицы.Представление) = Неопределено Тогда
				
				МассивАдресов.Добавить(СтрокаТаблицы.Представление);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = "ПредставлениеКонтакт_" + Форма.ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "_КИ_" + ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ПолеПредставление = Форма.Элементы[ИмяПоля];
			ПолеПредставление.СписокВыбора.ЗагрузитьЗначения(МассивАдресов);
			
			ПолеПредставление.КнопкаВыпадающегоСписка = ПолеПредставление.СписокВыбора.Количество() > 0;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц()
	
	Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
		ЗаполнитьНаименованиеИКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактыЛидов.Ссылка КАК КонтактноеЛицо,
	|	КонтактыЛидов.Наименование КАК Наименование,
	|	КонтактыЛидов.Код КАК Код
	|ПОМЕСТИТЬ втКонтакты
	|ИЗ
	|	Справочник.КонтактыЛидов КАК КонтактыЛидов
	|ГДЕ
	|	КонтактыЛидов.Владелец = &Владелец
	|	И НЕ КонтактыЛидов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
	|	втКонтакты.Наименование КАК Наименование
	|ИЗ
	|	втКонтакты КАК втКонтакты
	|
	|УПОРЯДОЧИТЬ ПО
	|	втКонтакты.Код,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокТипов.Тип КАК Тип,
	|	ПорядокТипов.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТипов КАК ПорядокТипов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактыЛидов.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК ПорядокВидов,
	|	втПорядокТипов.Порядок КАК ПорядокТипов
	|ПОМЕСТИТЬ втВсегдаВыводимыеВиды
	|ИЗ
	|	втКонтакты КАК КонтактыЛидов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|			ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&ВсегдаВыводимыеВиды)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтактноеЛицо,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВладелецКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
	|	ВладелецКонтактнаяИнформация.Вид КАК Вид,
	|	ВладелецКонтактнаяИнформация.Тип КАК Тип,
	|	ВладелецКонтактнаяИнформация.Представление КАК Представление,
	|	ВладелецКонтактнаяИнформация.Значение КАК Значение,
	|	ВладелецКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
	|	втПорядокТипов.Порядок КАК ПорядокТипов
	|ПОМЕСТИТЬ втДанныеКИ
	|ИЗ
	|	Справочник.КонтактыЛидов.КонтактнаяИнформация КАК ВладелецКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
	|ГДЕ
	|	ВладелецКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				втКонтакты.КонтактноеЛицо
	|			ИЗ
	|				втКонтакты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтактноеЛицо,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втДанныеКИ.КонтактноеЛицо, втВсегдаВыводимыеВиды.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	ЕСТЬNULL(втДанныеКИ.Вид, втВсегдаВыводимыеВиды.Вид) КАК Вид,
	|	ЕСТЬNULL(втДанныеКИ.Тип, втВсегдаВыводимыеВиды.Тип) КАК Тип,
	|	ЕСТЬNULL(втДанныеКИ.Представление, """") КАК Представление,
	|	ЕСТЬNULL(втДанныеКИ.Значение, """") КАК Значение,
	|	ЕСТЬNULL(втДанныеКИ.ЗначенияПолей, """") КАК ЗначенияПолей,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокТипов, втВсегдаВыводимыеВиды.ПорядокТипов) КАК ПорядокТипов,
	|	ЕСТЬNULL(втДанныеКИ.ПорядокВидов, втВсегдаВыводимыеВиды.ПорядокВидов) КАК ПорядокВидов
	|ИЗ
	|	втВсегдаВыводимыеВиды КАК втВсегдаВыводимыеВиды
	|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеКИ КАК втДанныеКИ
	|		ПО втВсегдаВыводимыеВиды.Вид = втДанныеКИ.Вид
	|			И втВсегдаВыводимыеВиды.КонтактноеЛицо = втДанныеКИ.КонтактноеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокТипов,
	|	ПорядокВидов";
	
	Запрос.УстановитьПараметр("Владелец",				Объект.Ссылка);
	Запрос.УстановитьПараметр("ПорядокТипов",			КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ВсегдаВыводимыеВиды", 
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Выгрузить(Новый Структура("ВыводитьВФормеВсегда", Истина), "Вид"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтакты = МассивРезультатов[1].Выбрать();
	ВыборкаКонтактнаяИнформация = МассивРезультатов[5].Выбрать();
	Отбор = Новый Структура("КонтактноеЛицо");
	
	Пока ВыборкаКонтакты.Следующий() Цикл
		
		Отбор.КонтактноеЛицо = ВыборкаКонтакты.КонтактноеЛицо;
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКЛ, ВыборкаКонтакты, "КонтактноеЛицо,Наименование");
		ВыборкаКонтактнаяИнформация.Сбросить();
		
		Пока ВыборкаКонтактнаяИнформация.НайтиСледующий(Отбор) Цикл
	
			ДанныеКИ = ДанныеКЛ.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеКИ, ВыборкаКонтактнаяИнформация, "Тип,Вид,Представление,Значение");
			КонтактнаяИнформацияУНФ.КонвертироватьЗначениеПриНеобходимости(ВыборкаКонтактнаяИнформация.ЗначенияПолей, ВыборкаКонтактнаяИнформация.Представление, ВыборкаКонтактнаяИнформация.Тип, ДанныеКИ.Значение);
			ДанныеКИ.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ДополнительныеПараметры.ИндексКЛ].КонтактнаяИнформация[ДополнительныеПараметры.ИндексКИ];
	ДанныеКонтактныхЛиц[ДополнительныеПараметры.ИндексКЛ].Изменен = Истина;

	ДанныеКИ.Представление = РезультатЗакрытия.Представление;
	ДанныеКИ.Значение      = РезультатЗакрытия.КонтактнаяИнформация;
	ДанныеКИ.Комментарий   = РезультатЗакрытия.Комментарий;
	
	Модифицированность = Истина;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактныхЛиц()
	
	Элементы.КомандыДобавленияРастяжение_0.МаксимальнаяШирина = 41;
	
	УдаляемыеЭлементы = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ВсеКонтакты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ВсеКонтакты.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для Каждого ГруппаКИ Из Элементы.КонтактнаяИнформацияКонтакт_0.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаКИ);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ШиринаВидаКИ = 8;
	ШиринаПоляКомментария = 11;
	
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
 
		ИндексКонтакта = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		// Для первого контактного лица элементы формы созданы в конфигураторе
		Если ИндексКонтакта > 0 Тогда
			
			Элементы.ПоказатьВсеКонтакты.Видимость = ИндексКонтакта > 5 И НЕ ПоказыватьВсеКонтакты;
			Если ИндексКонтакта > 5 И НЕ ПоказыватьВсеКонтакты Тогда
				Элементы.ДекорацияНетКонтактовОтступ.МаксимальнаяШирина = 33;
				Элементы.ПоказатьВсеКонтакты.Заголовок = СтрШаблон(НСтр("ru = 'показать еще (%1)'"), ДанныеКонтактныхЛиц.Количество()-6);
				Прервать;
			КонецЕсли;
			Элементы.ДекорацияНетКонтактовОтступ.МаксимальнаяШирина = 47;
			Элементы.ПоказатьВсеКонтакты.Видимость = Ложь;
			
			ГруппаКонтактногоЛица = Элементы.Добавить("Контакт_" + ИндексКонтакта, Тип("ГруппаФормы"), Элементы.ВсеКонтакты);
			ГруппаКонтактногоЛица.Вид = Элементы.Контакт_0.Вид;
			ГруппаКонтактногоЛица.Отображение = Элементы.Контакт_0.Отображение;
			ГруппаКонтактногоЛица.Группировка = Элементы.Контакт_0.Группировка;
			ГруппаКонтактногоЛица.ОтображатьЗаголовок = Элементы.Контакт_0.ОтображатьЗаголовок;
			ГруппаКонтактногоЛица.Поведение = Элементы.Контакт_0.Поведение;
			ГруппаКонтактногоЛица.ОтображениеУправления = Элементы.Контакт_0.ОтображениеУправления;
			ГруппаКонтактногоЛица.ЦветТекстаЗаголовка = Элементы.Контакт_0.ЦветТекстаЗаголовка;
			
			ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[ИндексКонтакта]);
			
			ГруппаКонтактногоЛица.ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
			ГруппаКонтактногоЛица.Заголовок 					 = ЗаголовкиГрупп.ЗаголовокГруппы;
			
			Если НЕ ДанныеКонтактныхЛиц[ИндексКонтакта].ГруппаРазвернута 
				ИЛИ НЕ ЗначениеЗаполнено(ДанныеКонтактныхЛиц[ИндексКонтакта].КонтактноеЛицо) Тогда
				ГруппаКонтактногоЛица.Скрыть();
			КонецЕсли;
			
			ПолеНаименование = Элементы.Добавить("НаименованиеКонтакт_" + ИндексКонтакта, Тип("ПолеФормы"), ГруппаКонтактногоЛица);
			ПолеНаименование.Вид = Элементы.НаименованиеКонтакт_0.Вид;
			ПолеНаименование.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].Наименование";
			ПолеНаименование.ПоложениеЗаголовка = Элементы.НаименованиеКонтакт_0.ПоложениеЗаголовка;
			ПолеНаименование.ПодсказкаВвода = Элементы.НаименованиеКонтакт_0.ПодсказкаВвода;
			
			ПолеНаименование.АвтоМаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.АвтоМаксимальнаяШирина;
			ПолеНаименование.МаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.МаксимальнаяШирина;
			ПолеНаименование.КнопкаВыбора = Элементы.НаименованиеКонтакт_0.КнопкаВыбора;
			ПолеНаименование.КнопкаВыпадающегоСписка = Элементы.НаименованиеКонтакт_0.КнопкаВыпадающегоСписка;
			ПолеНаименование.КнопкаСоздания = Элементы.НаименованиеКонтакт_0.КнопкаСоздания;
			ПолеНаименование.КнопкаОткрытия = Элементы.НаименованиеКонтакт_0.КнопкаОткрытия;
			
			ПолеНаименование.УстановитьДействие("ПриИзменении", "Подключаемый_НаименованиеКонтактногоЛица_ПриИзменении");
									
			ГруппаКИ = Элементы.Добавить("КонтактнаяИнформацияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаКИ.ОтображатьЗаголовок = Ложь;
			
			ГруппаДобавление = Элементы.Добавить("КомандыДобавленияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаДобавление.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавление.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаДобавление.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаДобавление.ОтображатьЗаголовок = Ложь;
			
			ДекорацияРастяжение = Элементы.Добавить("КомандыДобавленияРастяжение_" + ИндексКонтакта, Тип("ДекорацияФормы"), ГруппаДобавление);
			ДекорацияРастяжение.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияРастяжение.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияРастяжение.МаксимальнаяШирина = 41;
			ДекорацияРастяжение.РастягиватьПоГоризонтали = Истина;
			
			Кнопка = Элементы.Добавить("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_" + ИндексКонтакта, Тип("КнопкаФормы"), ГруппаДобавление);
			Кнопка.ИмяКоманды = "ДобавитьПолеКонтактнойИнформацииКонтактногоЛица";
			Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		Иначе
			ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[0]);
			Элементы.Контакт_0.ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
			Элементы.Контакт_0.Заголовок 					  = ЗаголовкиГрупп.ЗаголовокГруппы;
			Элементы.Контакт_0.Скрыть();
		КонецЕсли;
		
		Для Каждого ДанныеКИ Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			ИндексКИ = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(ДанныеКИ);
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("Вид", ДанныеКИ.Вид));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			
			ГруппаКИ = Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКонтакта];
			
			ГруппаЗначениеКИ = Элементы.Добавить("Контакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ГруппаФормы"), ГруппаКИ);
			ГруппаЗначениеКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗначениеКИ.Заголовок = ДанныеКИ.Вид;
			ГруппаЗначениеКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗначениеКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗначениеКИ.ОтображатьЗаголовок = Ложь;
			ГруппаЗначениеКИ.Ширина = 35;
			
			ДекорацияДействие = Элементы.Добавить("ДействиеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ДекорацияФормы"), ГруппаЗначениеКИ);
			ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияДействие.Картинка = КонтактнаяИнформацияУНФ.КартинкаДействияПоТипуКонтактнойИнформации(ДанныеКИ.Тип);
			ДекорацияДействие.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			ДекорацияДействие.Гиперссылка = Истина;
			ДекорацияДействие.Ширина = 2;
			ДекорацияДействие.Высота = 1;
			ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Авто;
			Если СвойстваВида.ВидПоляДругое = "МногострочноеШирокое" Тогда
				ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
			КонецЕсли;
			ДекорацияДействие.УстановитьДействие("Нажатие", "Подключаемый_ДействиеКИКонтактаНажатие");
			
			ПолеВид = Элементы.Добавить("ВидКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеВид.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеВид.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Вид";
			ПолеВид.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВид.Ширина = ШиринаВидаКИ;
			ПолеВид.РастягиватьПоГоризонтали = Ложь;
			
			ДоступноРедактированиеВДиалоге = КонтактнаяИнформацияУНФ.ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ДанныеКИ.Тип);
			
			ПолеПредставление = Элементы.Добавить("ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеПредставление.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПредставление.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Представление";
			ПолеПредставление.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПредставление.КнопкаВыбора = ДоступноРедактированиеВДиалоге;
			ПолеПредставление.АвтоОтметкаНезаполненного = СвойстваВида.ОбязательноеЗаполнение;
			ПолеПредставление.ШиринаВыпадающегоСписка = 40;
			ПолеПредставление.УстановитьДействие("ПриИзменении", "Подключаемый_ПредставлениеКИКонтактаПриИзменении");
			ПолеПредставление.УстановитьДействие("Очистка", "Подключаемый_ПредставлениеКИКонтактаОчистка");
			
			Если СвойстваВида.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				Если СвойстваВида.ВидПоляДругое = "МногострочноеШирокое" Тогда
					ПолеПредставление.МногострочныйРежим = Истина;
					ПолеПредставление.АвтоМаксимальнаяВысота = Ложь;
					ПолеПредставление.МаксимальнаяВысота = 2;
				КонецЕсли;
				Если СвойстваВида.ВидПоляДругое = "ОднострочноеУзкое" Тогда
					ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
					ПолеПредставление.МаксимальнаяШирина = 27;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваВида.ВидРедактирования = "Диалог" И ДанныеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				ПолеПредставление.РедактированиеТекста = Ложь;
				ПолеПредставление.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Если ДоступноРедактированиеВДиалоге Тогда
				ПолеПредставление.УстановитьДействие("НачалоВыбора", "Подключаемый_ПредставлениеКИКонтактаНачалоВыбора");
			КонецЕсли;
			
			Если КонтактнаяИнформацияУНФ.ДляТипаКонтактнойИнформацииДоступенВводКомментария(ДанныеКИ.Тип) Тогда
				
				ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
				ПолеПредставление.МаксимальнаяШирина = 27;
				
				ПолеКомментарий = Элементы.Добавить("КомментарийКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
				ПолеКомментарий.Вид = ВидПоляФормы.ПолеВвода;
				ПолеКомментарий.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Комментарий";
				ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеКомментарий.ПропускатьПриВводе = Истина;
				ПолеКомментарий.ПодсказкаВвода = НСтр("ru='Прим.'");
				ПолеКомментарий.АвтоМаксимальнаяШирина = Ложь;
				ПолеКомментарий.МаксимальнаяШирина = ШиринаПоляКомментария;
				ПолеКомментарий.УстановитьДействие("ПриИзменении", "Подключаемый_КомментарийКИКонтактаПриИзменении");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.Контакт_0.Видимость = ДанныеКонтактныхЛиц.Количество() > 0;
	Элементы.ГруппаНетКонтактныхЛиц.Видимость = ДанныеКонтактныхЛиц.Количество() = 0;
	
	Элементы.УдаленныеКонтакты.Видимость = ЕстьУдаленныеКонтакты();
	ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	
	ДобавитьЭлементыДублей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИКонтактаНажатие(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	СтрокаКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ДанныеКИ = Новый Структура;
	ДанныеКИ.Вставить("Тип", СтрокаКИ.Тип);
	ДанныеКИ.Вставить("Представление", СтрокаКИ.Представление);
	ДанныеКИ.Вставить("Владелец", ДанныеКонтактныхЛиц[ИндексКЛ].КонтактноеЛицо);
	
	КонтактнаяИнформацияУНФКлиент.ОбработатьНажатиеПиктограммы(ЭтотОбъект, Элемент, ДанныеКИ, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ОжидаемыйВид = ?(ПустаяСтрока(ДанныеКИ.Значение), ДанныеКИ.Вид, Неопределено);
	КонтактнаяИнформацияУНФВызовСервера.УстановитьКомментарийКонтактнойИнформации(ДанныеКИ.Значение, ДанныеКИ.Комментарий, ОжидаемыйВид);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если ДанныеКИ.Представление <> Элемент.ТекстРедактирования Тогда
		ДанныеКИ.Представление = Элемент.ТекстРедактирования;
		Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ДанныеКИ.Вид,
						ДанныеКИ.Значение,
						ДанныеКИ.Представление,
						ДанныеКИ.Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКЛ", ИндексКЛ);
	ДополнительныеПараметры.Вставить("ИндексКИ", ИндексКИ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаОчистка(Элемент, СтандартнаяОбработка)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	ДанныеКИ.Значение = "";
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
		ДанныеКИ.Значение = "";
	Иначе
		ДанныеКИ.Значение = КонтактнаяИнформацияУНФВызовСервера.КонтактнаяИнформацияПоПредставлению(ДанныеКИ.Представление, ДанныеКИ.Вид);
	КонецЕсли;
		
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
	ПроверитьКИНаДубли(ДанныеКИ.Представление, ИндексКИ, ДанныеКИ.Тип, ИндексКЛ);
	
	ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[ИндексКЛ]);
	
	Элементы["Контакт_"+ИндексКЛ].ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
	Элементы["Контакт_"+ИндексКЛ].Заголовок 					 = ЗаголовкиГрупп.ЗаголовокГруппы;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ)
	
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации = Истина;
	
	ЕстьОшибки = Ложь;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКонтактногоЛица = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			Индекс = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ИмяРеквизита = "ДанныеКонтактныхЛиц["+ИндексКонтактногоЛица+"].КонтактнаяИнформация["+Индекс+"].Представление";
			
			Если СвойстваВида.ОбязательноеЗаполнение И ПустаяСтрока(СтрокаТаблицы.Представление)
				И Не ЕстьДругиеЗаполненныеСтрокиВидаКИ(ДанныеКонтактногоЛица, СтрокаТаблицы, СтрокаТаблицы.Вид) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ЕстьОшибки = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Вид контактной информации ""%1"" не заполнен.'"), СвойстваВида.ПредставлениеВида),,, ИмяРеквизита);
				
			ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.Представление) И СвойстваВида.ПроверятьКорректность Тогда
				
				РезультатПроверки = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы.Представление, СтрокаТаблицы.Значение, СтрокаТаблицы.Вид, СтрокаТаблицы.Тип, ИмяРеквизита);
				ЕстьОшибки = РезультатПроверки <> 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактныхЛиц(Отказ)
	
	// Проверка на заполненность ФИО контактного лица, если введена контактная информация
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ДанныеКонтактныхЛиц[" + ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "].Наименование";
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			Если Не ПустаяСтрока(СтрокаТаблицы.Значение) Или Не ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'ФИО контакта не заполнено.'"),,,ИмяРеквизита, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип КАК Тип,
	|	ПорядокТиповКИ.Порядок КАК Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность КАК ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.ВидРедактирования КАК ВидРедактирования,
	|	ВидыКонтактнойИнформации.ВидПоляДругое КАК ВидПоляДругое
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочникКонтактыЛидов);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНезаполненныйКонтакт(ДанныеКЛ)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	КИНезаполнено = 0;
	Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
		Если ЗначениеЗаполнено(ДанныеКИ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		КИНезаполнено = КИНезаполнено + 1;
	КонецЦикла;
	
	Если КИНезаполнено <> ДанныеКЛ.КонтактнаяИнформация.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
	КонтактноеЛицоОбъект.ПометкаУдаления = Истина;	
	КонтактноеЛицоОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыКонтактов(Результат, ДополнительныеПараметры) Экспорт
	Прочитать();
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	ДобавитьЭлементыДублей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовкиГруппКонтакта(ДанныеКЛ)
	
	ЗаголовокСвернутойГруппы = Новый Массив;
	ЗаголовокГруппы			 = Новый Массив;

	Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
		
		Если ЗначениеЗаполнено(ДанныеКЛ.Наименование) Тогда
			ЗаголовокСвернутойГруппы.Добавить(ДанныеКЛ.Наименование);
			ЗаголовокГруппы.Добавить(ДанныеКЛ.Наименование);
		Иначе
			ЗаголовокСвернутойГруппы.Добавить(НСтр("ru = '<Не указано>'"));
			ЗаголовокГруппы.Добавить(НСтр("ru = '<Не указано>'"));
		КонецЕсли;
				
		Если ДанныеКЛ.КонтактнаяИнформация.Количество() = 0 Тогда
			Возврат СтрСоединить(ЗаголовокСвернутойГруппы, " , ");
		КонецЕсли;
		
		ОтборПоТелефону = Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		ТипКИТелефон = ДанныеКЛ.КонтактнаяИнформация.НайтиСтроки(ОтборПоТелефону);
		Если ТипКИТелефон.Количество() > 0 Тогда
			
			МассивСтрокКИ = Новый Массив;
			
			Если ЗначениеЗаполнено(ТипКИТелефон[0].Представление) Тогда
				МассивСтрокКИ.Добавить(ТипКИТелефон[0].Представление);
			КонецЕсли;
			
			Если ТипКИТелефон.Количество() > 1 Тогда
				МассивСтрокКИ.Добавить(СтрШаблон(НСтр("ru = '(еще %1)'"), ТипКИТелефон.Количество() - 1));
			КонецЕсли;
			
			Если МассивСтрокКИ.Количество() > 0 Тогда
				ЗаголовокСвернутойГруппы.Добавить(СтрСоединить(МассивСтрокКИ, Символы.НПП));
			КонецЕсли;
		КонецЕсли;
		
		ОтборПоПочте = Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		ТипКИПочта = ДанныеКЛ.КонтактнаяИнформация.НайтиСтроки(ОтборПоПочте);
		
		Если ТипКИПочта.Количество() > 0 Тогда
			
			МассивСтрокКИ = Новый Массив;
			Если ЗначениеЗаполнено(ТипКИПочта[0].Представление) Тогда
				МассивСтрокКИ.Добавить(ТипКИПочта[0].Представление);
			КонецЕсли;
			
			Если ТипКИПочта.Количество() > 1 Тогда
				МассивСтрокКИ.Добавить(СтрШаблон(НСтр("ru = '(еще %1)'"), ТипКИПочта.Количество() - 1));
			КонецЕсли;
			
			Если МассивСтрокКИ.Количество() > 0 Тогда
				ЗаголовокСвернутойГруппы.Добавить(СтрСоединить(МассивСтрокКИ, Символы.НПП));
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеКЛ.Наименование) Тогда
			ЗаголовокСвернутойГруппы.Добавить(СтрШаблон(НСтр("ru = '%1 (создание)'"), ДанныеКЛ.Наименование));
			ЗаголовокГруппы.Добавить(СтрШаблон(НСтр("ru = '%1 (создание)'"), ДанныеКЛ.Наименование));
		Иначе
			ЗаголовокСвернутойГруппы.Добавить(НСтр("ru = 'Контакт (создание)'"));
			ЗаголовокГруппы.Добавить(НСтр("ru = 'Контакт (создание)'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ЗаголовокСвернутойГруппы", 	СтрСоединить(ЗаголовокСвернутойГруппы, ", "));
	Заголовки.Вставить("ЗаголовокГруппы",			СтрСоединить(ЗаголовокГруппы, ", "));
	
	Возврат Заголовки;
	
КонецФункции

#КонецОбласти

#Область КонтрольДублей

&НаСервере
Процедура УстановитьНастройкиКонтроляДублей()
	
	Элементы.ДублиНаименование.Видимость       = Ложь;
	Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;

	НастройкиКонтроляДублейЛиды = Константы.НастройкиКонтроляДублейЛиды.Получить().Получить();
	
	Если НастройкиКонтроляДублейЛиды <> Неопределено Тогда
		ПроверятьПредставлениеНаДубли = НастройкиКонтроляДублейЛиды.Получить("ПроверятьНаименование");
		ПроверятьЮрНазваниеНаДубли    = НастройкиКонтроляДублейЛиды.Получить("ПроверятьЮрНазвание");
		ПроверятьНомерТелефонаНаДубли = НастройкиКонтроляДублейЛиды.Получить("ПроверятьТелефон");
		ПроверятьАдресЭПНаДубли       = НастройкиКонтроляДублейЛиды.Получить("ПроверятьАдресЭП");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаДубли(Реквизит)
	
	Если Реквизит = "НаименованиеКомпании" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеКомпании) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеКомпанииДляПоискаДублей = НаименованиеДляПоискаДублей(ЭтотОбъект.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
	КонецЕсли;

	Если Реквизит = "Наименование" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.НаименованиеПолное ПОДОБНО &Наименование
	|			ИЛИ Контрагенты.Наименование ПОДОБНО &Наименование)";
	
	ЗапросКонтрагенты.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	Контакты.Наименование ПОДОБНО &Наименование";
		
		ЗапросКонтакты.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И НЕ Лиды.СостояниеЛида = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
			|	И (Лиды.Наименование ПОДОБНО &Наименование
			|			ИЛИ Лиды.НаименованиеКомпании ПОДОБНО &Наименование)";
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Элементы["Дубли"+Реквизит].Видимость = НЕ Результат.Пустой();

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ)
	
	ПредставлениеКонтакта = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ].Наименование;
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеКонтакта) Тогда
		Возврат;
	КонецЕсли;
		
	НаименованиеКонтактаДляПоискаДублей = НаименованиеДляПоискаДублей(ПредставлениеКонтакта);
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Наименование";
	
	ЗапросКонтрагенты.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, ) КАК СвязиКонтрагентКонтакт
		|		ПО (СвязиКонтрагентКонтакт.Контакт = Контакты.Ссылка)
		|ГДЕ
		|	Контакты.Наименование ПОДОБНО &Наименование
		|	И НЕ СвязиКонтрагентКонтакт.Контрагент = &Ссылка
		|	И НЕ Контакты.Ссылка = &Контакт
		|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ";
		
		ЗапросКонтакты.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ЗапросКонтакты.УстановитьПараметр("Контакт", ДанныеКонтактныхЛиц[ИндексКЛ].КонтактноеЛицо);
		ЗапросКонтакты.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И НЕ Лиды.СостояниеЛида = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
			|	И (Лиды.Наименование ПОДОБНО &Наименование
			|			ИЛИ Лиды.НаименованиеКомпании ПОДОБНО &Наименование)";
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, НЕ Результат.Пустой());

КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, ЕстьДубли)
	
	КЛ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ];
	
	Если НЕ ЕстьДубли Тогда
		
		ЭлементКЛ = Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ));
		Если ЭлементКЛ <> Неопределено Тогда
			Элементы.Удалить(ЭлементКЛ);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	СообщениеОДублях = Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ));
	Если СообщениеОДублях = Неопределено Тогда
		СообщениеОДублях = Элементы.Добавить("СообщениеОДубляхКЛ_" + Строка(ИндексКЛ), Тип("ДекорацияФормы"), Элементы["Контакт_" + ИндексКЛ]);
	КонецЕсли;	
	СообщениеОДублях.Заголовок = НСтр("ru = 'Найдены дубли по представлению'");
	СообщениеОДублях.Гиперссылка = Истина;
	СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхКЛНажатие");
	Элементы.Переместить(СообщениеОДублях, Элементы["Контакт_" + ИндексКЛ], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
	СообщениеОДублях.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКИНаДубли(ПредставлениеКИ, ИндексКИ, ТипКИ, ИндексКЛ = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеКИ) Тогда
		Возврат;
	КонецЕсли;
	
	ТипКИАдресЭП = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ТипКИНомер   = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Если ТипКИ <> ТипКИАдресЭП И ТипКИ <> ТипКИНомер Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКИ = ТипКИАдресЭП И НЕ ПроверятьАдресЭПНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКИ = ТипКИНомер И НЕ ПроверятьНомерТелефонаНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
	
	ПоисковоеВыражение = ПредставлениеКИ;
	
	Если ТипКИ = ТипКИНомер Тогда
		ПоисковоеВыражение = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(ПредставлениеКИ);
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "+", "");
		Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Тогда
			ПоисковоеВыражение = Сред(ПоисковоеВыражение, 2, СтрДлина(ПоисковоеВыражение) - 1);
		КонецЕсли;

		ЗапросКонтрагенты.Текст = СтрЗаменить(ЗапросКонтрагенты.Текст, "АдресЭП", "НомерТелефона");
	КонецЕсли;
	
	ЗапросКонтрагенты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	Контакты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
		
		Если ТипКИ = ТипКИНомер Тогда
			ЗапросКонтакты.Текст = СтрЗаменить(ЗапросКонтакты.Текст, "АдресЭП", "НомерТелефона");
		КонецЕсли;
		
		ЗапросКонтакты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
		
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И НЕ Лиды.СостояниеЛида = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
			|	И Лиды.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
			
			Если ТипКИ = ТипКИНомер Тогда
				ЗапросЛиды.Текст = СтрЗаменить(ЗапросЛиды.Текст, "АдресЭП", "НомерТелефона");
			КонецЕсли;
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьДубли = НЕ Результат.Пустой();
	ПоказатьСкрытьНадписьОДубляхКИ(ПредставлениеКИ, ТипКИ, ИндексКИ, ЕстьДубли, ИндексКЛ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьНадписьОДубляхКИ(ПредставлениеКИ, ТипКИ, ИндексКИ, ЕстьДубли, ИндексКЛ = Неопределено)
	
	УдалитьНеактивныеДублиИЭлементы(ИндексКЛ);
	
	Дубли = ДублиКИ.НайтиСтроки(Новый Структура("Представление", ПредставлениеКИ));
	
	Если Дубли.Количество() <> 0 Тогда
		СообщениеОДублях = Элементы.Найти("СообщениеОДублях_" + Строка(Дубли[0].ИндексДекорации));
		СообщениеОДублях.Видимость = ЕстьДубли;
		Возврат;
	КонецЕсли;

	Если НЕ ЕстьДубли Тогда
		Возврат;
	КонецЕсли;
	
	ДублиКИ.Сортировать("ИндексДекорации УБЫВ");
	
	НовыйДубль = ДублиКИ.Добавить();
	НовыйДубль.ТипКИ           = ТипКИ;
	НовыйДубль.Представление   = ПредставлениеКИ;
	НовыйДубль.ИндексДекорации = ДублиКИ[0].ИндексДекорации + 1;
	НовыйДубль.ЭтоДубльКЛ      = ?(ИндексКЛ = Неопределено, Ложь, Истина);
	НовыйДубль.ИндексКЛ        = ?(ИндексКЛ = Неопределено, 0, ИндексКЛ);
	
	ЭлементыКИ = ?(ИндексКЛ = Неопределено, Элементы["ЗначенияКонтактнойИнформации"], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
	
	СообщениеОДублях = Элементы.Добавить("СообщениеОДублях_" + Строка(НовыйДубль.ИндексДекорации), Тип("ДекорацияФормы"), ЭлементыКИ);
	СообщениеОДублях.Заголовок = СообщенияОДубляхКИПоТипу(ТипКИ);
	СообщениеОДублях.Гиперссылка = Истина;
	СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхНажатие");
	
	Если ИндексКЛ = Неопределено Тогда
		ЭлементКИ = Элементы.Найти("КИ_"+Строка(ИндексКИ + 1));
	Иначе
		ЭлементКИ = Элементы.Найти("Контакт_"+ Строка(ИндексКЛ) +"_КИ_"+Строка(ИндексКИ + 1));
	КонецЕсли;
	
	Если ЭлементКИ = Неопределено Тогда
		Элементы.Переместить(СообщениеОДублях, ЭлементыКИ);
	Иначе
		Элементы.Переместить(СообщениеОДублях, ЭлементыКИ, ЭлементКИ);
	КонецЕсли;
		
	СообщениеОДублях.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СообщенияОДубляхКИПоТипу(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат НСтр("ru = 'Найдены дубли по e-mail'");
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат НСтр("ru = 'Найдены дубли по номеру телефона'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьНеактивныеДублиИЭлементы(ИндексКЛ = Неопределено)
	
	Если ИндексКЛ = Неопределено Тогда
		ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформация;
	Иначе
		ТаблицаКИ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация;
	КонецЕсли;
	
	Если ДублиКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндекс = ДублиКИ.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		
		Дубль = ДублиКИ[ТекущийИндекс];
		ТекущийИндекс = ТекущийИндекс - 1;
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ <> Неопределено И НЕ Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.НайтиСтроки(Новый Структура("Представление", Дубль.Представление));
		Если СтрокаКИ.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
		ДублиКИ.Удалить(ДублиКИ.Индекс(Дубль));
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиКИ()
	
	Для Каждого КИ Из ЭтотОбъект.КонтактнаяИнформация Цикл
		ИндексКИ = ЭтотОбъект.КонтактнаяИнформация.Индекс(КИ);
		ПроверитьКИНаДубли(КИ.Представление, ИндексКИ, КИ.Тип);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция НаименованиеДляПоискаДублей(Наименование)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Наименование))Тогда
		Возврат "";
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(Наименование, "-", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	
	Возврат СокрЛП("%"+ПоисковоеВыражение+"%");
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборДублей(ВыбранныйКонтрагент)
	
	ЗакрыватьПриВыборе = Ложь;
	ЗначениеВРеквизитФормы(ВыбранныйКонтрагент.ПолучитьОбъект(), "Объект");
	УдалитьЭлементыДублейКИ();
	ДублиКИ.Очистить();	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОДублях()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПредупреждениеДублей",ЭтотОбъект);
	ТекстПредупреждения = ТекстПредупрежденияПоДублям();

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Проигнорировать и записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, СписокКнопок,,КодВозвратаДиалога.Отмена, НСтр("ru = 'Контроль дублей'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыПредупреждениеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СозданКопированием = Ложь;
	ПроигнорированоСообщениеОДублях = Истина;
	СообщениеОДублированииИнформации = ТекстПредупрежденияПоДублям(Истина);
	
	УдалитьЭлементыДублейКИ();
	Элементы.ДублиНаименование.Видимость       = Ложь;
	Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыДублейКИ()
	
	Для Каждого Дубль Из ДублиКИ Цикл
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
	КонецЦикла;
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		
		Если Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ)) <> Неопределено Тогда
			Элементы.Удалить(Элементы["СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ)]);
		КонецЕсли;
		
	КонецЦикла;
	
	ДублиКИ.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиСервер()
	
	Если ПроверятьПредставлениеНаДубли  Тогда
		ПроверитьНаДубли("Наименование");
	КонецЕсли;
	
	Если ПроверятьЮрНазваниеНаДубли Тогда
		ПроверитьНаДубли("НаименованиеКомпании");
	КонецЕсли;
		
	УдалитьЭлементыДублейКИ();
	ПроверитьКонтрагентаНаДублиКИ();
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ);
			
		Для Каждого КИ Из Контакт.КонтактнаяИнформация Цикл
			ИндексКИ = Контакт.КонтактнаяИнформация.Индекс(КИ);
			ПроверитьКИНаДубли(КИ.Представление, ИндексКИ, КИ.Тип, ИндексКЛ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстПредупрежденияПоДублям(СообщениеПриЗаписи = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если Элементы.ДублиНаименование.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'представлению'"));
	КонецЕсли;
	
	Если Элементы.ДублиНаименованиеКомпании.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'юр. названию'"));
	КонецЕсли;
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		
		Если Элементы.Найти("СообщениеОДубляхКЛ_"+Строка(ИндексКЛ)) <> Неопределено Тогда
			МассивСтрок.Добавить(НСтр("ru = 'имени контакта'"));
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ДублиПоНомеру = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоНомеру.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'номеру телефона'"));
	КонецЕсли;
	
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ДублиПоАдресуЭП = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоАдресуЭП.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'e-mail'"));
	КонецЕсли;
	
	Если СообщениеПриЗаписи Тогда
		Возврат НСтр("ru = 'Проигнорировано сообщение о дублировании информации по '") + СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Найдены дубли по '") + СтрСоединить(МассивСтрок,", ");
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеОДублях()
	
	Если НЕ Элементы.ДублиНаименование.Видимость И НЕ Элементы.ДублиНаименованиеКомпании.Видимость 
		И ДублиКИ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дублей не найдено'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупрежденияПоДублям());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыДублей()
	
	Для Каждого Дубль Из ДублиКИ Цикл
		
		Если Дубль.ЭтоДубльКЛ Тогда
			ТаблицаКИ = ЭтотОбъект.ДанныеКонтактныхЛиц[Дубль.ИндексКЛ].КонтактнаяИнформация;
		Иначе
			ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформация;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.НайтиСтроки(Новый Структура("Представление", Дубль.Представление));
		Если СтрокаКИ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКИ = ТаблицаКИ.Индекс(СтрокаКИ[0]);
		ИндексКЛ = Дубль.ИндексКЛ;
		ТипКИ    = СтрокаКИ[0].Тип;
		
		ЭлементыКИ = ?(НЕ Дубль.ЭтоДубльКЛ, Элементы["ЗначенияКонтактнойИнформации"], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
		
		СообщениеОДублях = Элементы.Найти("СообщениеОДублях_" + Строка(Дубль.ИндексДекорации));
		
		Если СообщениеОДублях = Неопределено Тогда
			СообщениеОДублях = Элементы.Добавить("СообщениеОДублях_" + Строка(Дубль.ИндексДекорации), Тип("ДекорацияФормы"), ЭлементыКИ);
			СообщениеОДублях.Заголовок = СообщенияОДубляхКИПоТипу(ТипКИ);
			СообщениеОДублях.Гиперссылка = Истина;
			СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхНажатие");
		КонецЕсли;
		
		Если НЕ Дубль.ЭтоДубльКЛ Тогда
			ЭлементКИ = Элементы.Найти("КИ_"+Строка(ИндексКИ + 1));
		Иначе
			ЭлементКИ = Элементы.Найти("Контакт_"+ Строка(ИндексКЛ) +"_КИ_"+Строка(ИндексКИ + 1));
		КонецЕсли;
		
		Если ЭлементКИ = Неопределено Тогда
			Элементы.Переместить(СообщениеОДублях, ЭлементыКИ);
		Иначе
			Элементы.Переместить(СообщениеОДублях, ЭлементыКИ, ЭлементКИ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхКЛНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	НаименованиеКЛ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексДекорации].Наименование;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	Для Каждого Контакт Из ЭтотОбъект.ДанныеКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(Контакт.КонтактноеЛицо);
	КонецЦикла;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей(НаименованиеКЛ));
	ПараметрыДублей.Вставить("ИсключаяКонтакты", МассивКонтактов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	Дубль = ДублиКИ.НайтиСтроки(Новый Структура("ИндексДекорации", ИндексДекорации));
	ТаблицаКИ = ?(НЕ Дубль[0].ЭтоДубльКЛ, ЭтотОбъект.КонтактнаяИнформация, ДанныеКонтактныхЛиц[Дубль[0].ИндексКЛ].КонтактнаяИнформация);
	СтрокаКИ = ТаблицаКИ.НайтиСтроки(Новый Структура("Представление", Дубль[0].Представление));
	
	Если СтрокаКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексКИ = ТаблицаКИ.Индекс(СтрокаКИ[0]);
	ТипКИ    = ТаблицаКИ[ИндексКИ].Тип;
	ПредставлениеКИ = ТаблицаКИ[ИндексКИ].Представление;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	Для Каждого Контакт Из ЭтотОбъект.ДанныеКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(Контакт.КонтактноеЛицо);
	КонецЦикла;
	ПараметрыДублей.Вставить("ПредставлениеКИ", ПредставлениеКИ);
	ПараметрыДублей.Вставить("ТипКИ",           ТипКИ);
	ПараметрыДублей.Вставить("ИсключаяКонтакты", МассивКонтактов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("ВыбранДубльЛида") Тогда
		
		ОбработатьВыборДублей(РезультатЗакрытия.ВыбранныйЛид);
		Элементы.ДублиНаименование.Видимость = Ложь;
		Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
		ЛидЗамененНаДубль = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
