
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Лиды, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// Установим настройки формы для случая открытия в режиме выбора
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	Элементы.Список.МножественныйВыбор = ?(Параметры.ЗакрыватьПриВыборе = Неопределено, Ложь, Не Параметры.ЗакрыватьПриВыборе);
	Если Параметры.РежимВыбора Тогда
		КлючНазначенияИспользования = "ВыборПодбор";
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Элементы.ГруппаВидОтображения.Видимость = Ложь;
	Иначе
		КлючНазначенияИспользования = "Список";
	КонецЕсли;
		
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ИмяФормы,
		"ВключаяВложенные",
		Ложь
	);	
	
	ВариантПредставления = ХранилищеСистемныхНастроек.Загрузить("ВариантПредставления", "ВариантПредставления_СписокЛиды");
	
	Элементы.ФормаСписок.Пометка = НЕ ЗначениеЗаполнено(ВариантПредставления) ИЛИ ВариантПредставления = "Список" ИЛИ Параметры.РежимВыбора ИЛИ ОбщегоНазначения.ЭтоМобильныйКлиент();
	Элементы.ФормаКанбан.Пометка = ЗначениеЗаполнено(ВариантПредставления) И ВариантПредставления = "Канбан" И НЕ Параметры.РежимВыбора И НЕ ОбщегоНазначения.ЭтоМобильныйКлиент();

	ОбновитьКомандыИзмененияСостояний();
	
	УправлениеФормой();
	НастроитьКомандуЭкспортВАдреснуюКнигу();
	
	ПрочитатьИерархию();
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	Если НЕ Элементы.Список.РежимВыбора Тогда
		ВариантОтборовФормы = ВариантОтбораДляНастроек();
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,Новый Структура("ОтборПериод", "ДатаСоздания"), ВариантОтборовФормы);
	Иначе
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Новый СтандартныйПериод);
		
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,,"ОтборСостояние,ОтборРезультат,ОтборТеги,ОтборИсточник,ОтборОтветственный",,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборПоРезультату();
	
	//Канбан
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыИИзмеренияПланировщика();
		ТекущийЭлемент = Элементы.Планировщик;
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Лид" Тогда
		
		Если Элементы.ФормаКанбан.Пометка Тогда
			ОбновитьЭлементыИИзмеренияПланировщика("Перетаскивание");
		КонецЕсли;
		
		Элементы.Список.Обновить();
		ОбновитьПанельКонтактнойИнформации();
		
	КонецЕсли;
	
	Если ИмяСобытия = "СменаПорядка_СостоянияЛидов" И Элементы.ФормаКанбан.Пометка Тогда
		
		ОбновитьЭлементыИИзмеренияПланировщика("Перетаскивание");
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыборПериода_Лиды" Тогда
		Если Элементы.ФормаКанбан.Пометка Тогда
			ОбновитьЭлементыПланировщика("Создание");
		Иначе
			УстановитьОтборПоРезультату();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЛидГруппа" Тогда
		НоваяГруппа = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяГруппа = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяГруппа = Параметр;
		КонецЕсли;
		
		ПрочитатьИерархию(НоваяГруппа);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СостоянияЛидов" Тогда
		Если Элементы.ФормаКанбан.Пометка Тогда
			ОбновитьЭлементыИИзмеренияПланировщика("Перетаскивание");
		КонецЕсли;
		УстановитьУсловноеОформлениеИОбновитьКомандыСостояний();
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	//УНФ.ОтборыСписка
	Если НЕ Элементы.Список.РежимВыбора Тогда
		СохранитьНастройкиОтборов();
	КонецЕсли;
	//Конец УНФ.ОтборыСписка
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "ДатаСоздания",,,"ВыборПериода_Лиды");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("СостояниеЛида", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("ИсточникПривлечения", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборРезультатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("ВариантЗавершения", Элемент.Родитель.Имя, ВыбранноеЗначение);
	УстановитьОтборПоРезультату();
	
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоискОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПоиск = "";
	ОбновитьЭлементыПланировщика("Создание");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСостояниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЛидов"), ПараметрыПолученияДанных);
	ДанныеВыбора = ДанныеВыбораСостояния;

КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВПокупателяПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НекачественныйЛидПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВПокупателяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПеретаскиваемыйЛид = ПараметрыПеретаскивания.Значение[0].Значение;
	
	Если НЕ ЗначениеЗаполнено(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МожноПеревестиВКлиента(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ПеревестиВКлиентаСервер(ПеретаскиваемыйЛид);
	
	Если Не ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПеретаскиваемыйЛид);
	Оповестить("Запись_Лид", ПеретаскиваемыйЛид);
	
	ПараметрыФормы = Новый Структура("Ключ", Контрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НекачественныйЛидПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НекачественныеЛиды.Очистить();
	
	Для Каждого Лид Из ПараметрыПеретаскивания.Значение Цикл
		
		Если НЕ ЗначениеЗаполнено(Лид.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйНекачественныйЛид = НекачественныеЛиды.Добавить();
		НовыйНекачественныйЛид.Лид = Лид.Значение;
		
	КонецЦикла;
	
	Если НекачественныеЛиды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыНекачественногоЛида",ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаНекачественныйЛидКанбан",,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПометитьНаУдалениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПометитьНаУдалениеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
		Строка = НСтр("ru='Лиды помечены на удаление'");
	Иначе
		Строка = НСтр("ru='Лид помечен на удаление'");
	КонецЕсли;
	
	МассивЛидов = Новый Массив;
	
	Для Каждого Лид Из ПараметрыПеретаскивания.Значение Цикл
		МассивЛидов.Добавить(Лид.Значение);
	КонецЦикла;
	
	ДекорацияПометитьНаУдалениеПеретаскиваниеСервер(МассивЛидов);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Пометка на удаление'"),
		,
		Строка,
		БиблиотекаКартинок.Информация32);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоискИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ОтборПоиск = Текст;
	ОбновитьЭлементыПланировщика("Создание");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПеревестиВПокупателяИЗаказПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПеревестиВПокупателяИЗаказПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	ПеретаскиваемыйЛид = ПараметрыПеретаскивания.Значение[0].Значение;
	
	Если НЕ ЗначениеЗаполнено(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МожноПеревестиВКлиента(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКонтрагент = ПеревестиВКлиентаСервер(ПеретаскиваемыйЛид);
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПеретаскиваемыйЛид);
	Оповестить("Запись_Лид", ПеретаскиваемыйЛид);
	
	ПараметрыФормы = Новый Структура("Основание", НовыйКонтрагент);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущийЛид,
		"Ссылка");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Не ЭтоГруппа Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы"
		+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "Контрагент" Тогда
		
		Контрагент = СсылкаНаКонтрагента(ВыбраннаяСтрока);
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ",Контрагент);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланировщик

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		ОтменаРедактирования = Истина;
		ОбновитьЭлементыИИзмеренияПланировщика();
		Возврат;
	КонецЕсли;
	
	Если Секунда(Элемент.ВыделенныеЭлементы[0].Конец) - Секунда(Элемент.ВыделенныеЭлементы[0].Начало) <> 2 Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания = Новый Структура;
	
	ПараметрыПеретаскивания.Вставить("СмещаемыйЛид", Неопределено);
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВНачалоСписка", Ложь);
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВКонецСписка", Ложь);
	ПараметрыПеретаскивания.Вставить("Состояние", Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"]);
	
	Массив = Новый Массив;
	Для каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		Массив.Добавить(ВыделенныйЭлемент.Значение);
	КонецЦикла;
	ПараметрыПеретаскивания.Вставить("ПеретаскиваемыеЛиды",Массив);
	
	Если Элемент.ВыделенныеЭлементы[0].Начало = Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
		ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВНачалоСписка", Истина);
		ОбновитьЭлементыПланировщикаПеретаскивание(ПараметрыПеретаскивания);
		Оповестить("Запись_Лид", Массив);
		Возврат;
	ИначеЕсли Элемент.ВыделенныеЭлементы[0].Начало >= Планировщик.ТекущиеПериодыОтображения[0].Конец Тогда 
		ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВКонецСписка", Истина);
		ОбновитьЭлементыПланировщикаПеретаскивание(ПараметрыПеретаскивания);
		Оповестить("Запись_Лид", Массив);
		Возврат;
	КонецЕсли;

	Для каждого ЭлементПланировщика Из Планировщик.Элементы Цикл
		// Поиск смещаемого лида
		Если ((ЭлементПланировщика.Начало = Элемент.ВыделенныеЭлементы[0].Начало 
			И ЭлементПланировщика.Конец = Элемент.ВыделенныеЭлементы[0].Конец) 
			ИЛИ (Элемент.ВыделенныеЭлементы[Элемент.ВыделенныеЭлементы.ВГраница()].Конец > ЭлементПланировщика.Начало 
			И Элемент.ВыделенныеЭлементы[Элемент.ВыделенныеЭлементы.ВГраница()].Конец < ЭлементПланировщика.Конец))
			И Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("СостоянияЛидов") = ЭлементПланировщика.ЗначенияИзмерений.Получить("СостоянияЛидов")
			И ЭлементПланировщика.Значение <> Элемент.ВыделенныеЭлементы[0].Значение Тогда
			
			ПараметрыПеретаскивания.Вставить("СмещаемыйЛид",ЭлементПланировщика.Значение);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	ОбновитьЭлементыПланировщикаПеретаскивание(ПараметрыПеретаскивания);
	Оповестить("Запись_Лид", Массив);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МаксимальныйЭлементКанбан < ТекущиеПериодыОтображения[0].Начало - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Конец Тогда
		ТекущийЭкранКанбан = ТекущийЭкранКанбан + 1;
		ОбновитьЭлементыПланировщика("Прокрутка","ПрокруткаВперед");
	ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
		
		ТекущийЭкранКанбан = ТекущийЭкранКанбан - 1;
		
		Если ТекущийЭкранКанбан < 0 Тогда
			ТекущийЭкранКанбан = 0;
			Возврат;
		КонецЕсли;
		
		Если ТекущийЭкранКанбан = 0 Тогда
			ОбновитьЭлементыПланировщика("Создание");
		Иначе
			ОбновитьЭлементыПланировщика("Прокрутка","ПрокруткаНазад");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТекущегоЭлементаПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент)
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		ТекущийЛид = Неопределено;
		ОбновитьПанельКонтактнойИнформацииКанбан();
		Возврат;
	КонецЕсли;
	
	Если Элемент.ВыделенныеЭлементы[0].Начало = (НачалоОтображенияКанбан + КоличествоОтображаемыхЭлементовКанбан*2 + 1) Тогда
		ПерейтиВКонецСостояния(Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"]);
	ИначеЕсли Элемент.ВыделенныеЭлементы[0].Начало = НачалоОтображенияКанбан Тогда
		ТекущийЭкранКанбан = 0;
		ОбновитьЭлементыПланировщика("Создание");
	Иначе
		ТекущийЛид = Элемент.ВыделенныеЭлементы[0].Значение;
		ОбновитьПанельКонтактнойИнформацииКанбан();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборИерархия

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархии(ЭтотОбъект);
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		ПодключитьОбработчикОжидания("ОтборИерархияПриАктивизацииСтрокиКлиент", 0.2, Истина);
		Возврат;
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		НастроитьПанельОтборовМобильныйКлиент();
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаИерархии = Неопределено
		Или СтрокаИерархии.ГруппаЛидов = "Все"
		Или СтрокаИерархии.ГруппаЛидов = "БезГруппы" Тогда
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИерархии.ГруппаЛидов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаЛидов = "Все" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФормаСписок.Пометка И (ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("СправочникСсылка.Лиды"))  Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаКанбан.Пометка И (ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		ИЛИ ПараметрыПеретаскивания.Значение.Количество() = 0
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0].Значение) <> Тип("СправочникСсылка.Лиды"))  Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаЛидов = "Все" Тогда
		Возврат;
	КонецЕсли;
	
	НоваяГруппа = ?(СтрокаИерархии.ГруппаЛидов = "БезГруппы", ПредопределенноеЗначение("Справочник.Лиды.ПустаяСсылка"), СтрокаИерархии.ГруппаЛидов);
	Если Элементы.ФормаКанбан.Пометка Тогда
		МассивЛидов = Новый Массив;
		Для Каждого Лид Из ПараметрыПеретаскивания.Значение Цикл
			МассивЛидов.Добавить(Лид.Значение);
		КонецЦикла;
		ИерархияПеретаскиваниеСервер(МассивЛидов, НоваяГруппа);
		Возврат;
	КонецЕсли;
	
	ИерархияПеретаскиваниеСервер(ПараметрыПеретаскивания.Значение, НоваяГруппа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИерархияИзменить(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) <> Тип("СправочникСсылка.Лиды")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСоздатьГруппу(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) = Тип("СправочникСсылка.Лиды") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Лиды.ФормаГруппы",
		Новый Структура("ЗначенияЗаполнения, ЭтоГруппа", ЗначенияЗаполнения, Истина),
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСкопировать(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) <> Тип("СправочникСсылка.Лиды")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Лиды.ФормаГруппы",
		Новый Структура("ЗначениеКопирования, ЭтоГруппа", Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов, Истина),
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияУстановитьПометкуУдаления(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) <> Тип("СправочникСсылка.Лиды")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = ИзменитьПометкуУдаленияГруппыСервер(Элементы.ОтборИерархия.ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекстОповещения = СтрШаблон(НСтр("ru='Пометка удаления %1'"),
		?(ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'")));
		
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов),
		Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов,
		БиблиотекаКартинок.Информация32);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии(ЭтотОбъект);
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыПланировщика("Создание");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Канбан(Команда)
	
	Элементы.ФормаКанбан.Пометка = Истина;
	Элементы.ФормаСписок.Пометка = Ложь;
	
	ОбновитьЭлементыИИзмеренияПланировщика();
	ОбновитьПанельКонтактнойИнформацииКанбан();
	ТекущийЭлемент = Элементы.Планировщик;
КонецПроцедуры

&НаКлиенте
Процедура Список(Команда)
	
	Элементы.ФормаКанбан.Пометка = Ложь;
	Элементы.ФормаСписок.Пометка = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВПокупателя()
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Список.ВыделенныеСтроки) <> Тип("Массив") 
		ИЛИ Элементы.Список.ВыделенныеСтроки.Количество() = 0)) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		
		Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		
		Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ПеретаскиваемыйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ПеретаскиваемыйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	Если НЕ МожноПеревестиВКлиента(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ПеревестиВКлиентаСервер(ПеретаскиваемыйЛид);
	
	Если Контрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПеретаскиваемыйЛид);
	Оповестить("Запись_Лид", ПеретаскиваемыйЛид);
	
	ПараметрыФормы = Новый Структура("Ключ", Контрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКонец(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания = Новый Структура;
	Массив = Новый Массив;
	
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВНачалоСписка", Ложь);
	ПараметрыПеретаскивания.Вставить("СмещаемыйЛид", Неопределено);
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВКонецСписка", Истина);
	ПараметрыПеретаскивания.Вставить("Состояние", Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"]);
	
	
	Для каждого ВыделенныйЭлемент Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		Массив.Добавить(ВыделенныйЭлемент.Значение);
	КонецЦикла;
	ПараметрыПеретаскивания.Вставить("ПеретаскиваемыеЛиды",Массив);
	
	ОбновитьЭлементыПланировщикаПеретаскивание(ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВНачало(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания = Новый Структура;
	Массив = Новый Массив;
	
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВНачалоСписка", Истина);
	ПараметрыПеретаскивания.Вставить("СмещаемыйЛид", Неопределено);
	ПараметрыПеретаскивания.Вставить("ПеретаскиваниеВКонецСписка", Ложь);
	ПараметрыПеретаскивания.Вставить("Состояние",  Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"]);
	
	
	Для каждого ВыделенныйЭлемент Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		Массив.Добавить(ВыделенныйЭлемент.Значение);
	КонецЦикла;
	ПараметрыПеретаскивания.Вставить("ПеретаскиваемыеЛиды",Массив);
	
	ОбновитьЭлементыПланировщикаПеретаскивание(ПараметрыПеретаскивания);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВверхВнизСервер(Лид,Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"],"ПеретаскиваниеВверх");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВверхВнизСервер(Лид,Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений["СостоянияЛидов"],"ПеретаскиваниеВниз");
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ОткрытьФорму("Справочник.Лиды.ФормаОбъекта",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВНекачественного()
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Список.ВыделенныеСтроки) <> Тип("Массив") 
		ИЛИ Элементы.Список.ВыделенныеСтроки.Количество() = 0)) Тогда 
		Возврат;
	КонецЕсли;
	
	НекачественныеЛиды.Очистить();
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		
		Для Каждого Лид Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
			
			Если НЕ ЗначениеЗаполнено(Лид.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйНекачественныйЛид = НекачественныеЛиды.Добавить();
			НовыйНекачественныйЛид.Лид = Лид.Значение;
			
		КонецЦикла;
		
		Если НекачественныеЛиды.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		
		Для Каждого Лид Из Элементы.Список.ВыделенныеСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(Лид) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйНекачественныйЛид = НекачественныеЛиды.Добавить();
			НовыйНекачественныйЛид.Лид = Лид;
			
		КонецЦикла;
		
		Если НекачественныеЛиды.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыНекачественногоЛида",ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаНекачественныйЛидКанбан",,,,,, Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВПокупателяИЗаказ(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Список.ВыделенныеСтроки) <> Тип("Массив") 
		ИЛИ Элементы.Список.ВыделенныеСтроки.Количество() = 0)) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		
		Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
		
		Если Лид = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Лид) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ПеретаскиваемыйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ПеретаскиваемыйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	Если НЕ МожноПеревестиВКлиента(ПеретаскиваемыйЛид) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКонтрагент = ПеревестиВКлиентаСервер(ПеретаскиваемыйЛид);
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПеретаскиваемыйЛид);
	Оповестить("Запись_Лид", ПеретаскиваемыйЛид);
	
	ПараметрыФормы = Новый Структура("Основание", НовыйКонтрагент);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("ТелефонныйЗвонок", ВыделенныйЛид);

КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмо(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("ЭлектронноеПисьмо", ВыделенныйЛид);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("СообщениеSMS", ВыделенныйЛид);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("ЛичнаяВстреча", ВыделенныйЛид);
	
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("Прочее", ВыделенныйЛид);
	
КонецПроцедуры

&НаКлиенте
Процедура Запись(Команда)
	Если (Элементы.ФормаКанбан.Пометка И Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0)
		ИЛИ (Элементы.ФормаСписок.Пометка И (Элементы.Список.ТекущиеДанные = Неопределено ИЛИ НЕ
		ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка))) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		ВыделенныйЛид = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		ВыделенныйЛид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	СоздатьСобытиеПоКонтакту("Запись", ВыделенныйЛид);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКанбан(Команда)
	ОбновитьЭлементыИИзмеренияПланировщика();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВАдреснуюКнигуСервисаРассылок(Команда)
	
	МассовыеРассылкиКлиент.ЭкспортКонтактовВСервисРассылок(ВыделенныеЛиды());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВыделенные(Команда)
	
	ПоискИУдалениеДублейКлиент.ОбъединитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуСотрудникаКанбан(Команда)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Лид = Новый Массив;
	Иначе
		Лид = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Основание", Лид);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ЗадачаСотрудника.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайла");
	НастройкиЗагрузкиДанных.Вставить("ОписаниеСтрокиВыбора", Новый Структура("ПолноеИмяОбъектаМетаданных, Тип", "Лиды", "ПрикладнаяЗагрузка"));
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
	
		ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
		
	ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
		
		ДлительнаяОперация = ЗапуститьОбработкуПодготовленныхДанных(РезультатЗагрузки);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		
		ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru='Лиды'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru='Загрузка данных завершена.'");
		ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = Окно.ПолучитьНавигационнуюСсылку();
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ЗавершениеОбработкиПодготовленныхДанных", ЭтотОбъект), ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбработкуПодготовленныхДанных(РезультатЗагрузки)
	
	ИмяПроцедуры = "Справочники.Лиды.ОбработатьПодготовленныеДанные";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеОбработкиПодготовленныхДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыПланировщика("Создание");
	Иначе
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Функция СсылкаНаКонтрагента(ВыбраннаяСтрока)
	
	Возврат Справочники.Лиды.СвязанныйКонтрагент(ВыбраннаяСтрока);
	
КонецФункции

&НаСервере
Функция ПеревестиВКлиентаСервер(ПеретаскиваемыйЛид)
	
	ЛидОбъект = ПеретаскиваемыйЛид.ПолучитьОбъект();
	
	НовыйКонтрагент = Справочники.Лиды.ПолучитьСоздатьКонтрагента(ЛидОбъект);
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыПланировщика("Перетаскивание");
	КонецЕсли;
	
	Возврат НовыйКонтрагент;
	
КонецФункции

&НаСервере
Процедура ПеревестиВНекачественныйЛидСервер(ДанныеНекачественногоЛида)
	
	Для Каждого Лид Из НекачественныеЛиды Цикл
		Попытка
			
			ПеретаскиваемыйЛид = Лид.Лид.ПолучитьОбъект();
			
			ПеретаскиваемыйЛид.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
			ПеретаскиваемыйЛид.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
			ПеретаскиваемыйЛид.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
			ПеретаскиваемыйЛид.ПричинаНеуспешногоЗавершенияРаботы = ДанныеНекачественногоЛида.ПричинаНеуспешногоЗавершенияРаботы;
			ПеретаскиваемыйЛид.ЗаметкиЗавершенияРаботы = ДанныеНекачественногоЛида.Комментарий;
			
			ПеретаскиваемыйЛид.Записать();
			
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Лид);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыПланировщика("Перетаскивание");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЛидов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЛидов.ПолноеИмя()
	);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВверхВнизСервер(Лид,Состояние,Операция)
	
	ДанныеЛидов = Новый Структура();
	ДанныеЛидов.Вставить("СсылкаНаПервыйЛид",Лид);
	
	ПорядокПервогоЛида = ПорядокСмещаемогоЭлемента(Лид);
	ДанныеЛидов.Вставить("ПорядокПервогоЛида",ПорядокПервогоЛида);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КанбанЛидов.Лид КАК Лид,
	|	КанбанЛидов.Порядок
	|ИЗ
	|	РегистрСведений.КанбанЛидов КАК КанбанЛидов
	|ГДЕ
	|	КанбанЛидов.Состояние = &Состояние";
	;
	
	Если Операция = "ПеретаскиваниеВниз" Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И КанбанЛидов.Порядок > &Порядок УПОРЯДОЧИТЬ ПО КанбанЛидов.Порядок";
	ИначеЕсли Операция = "ПеретаскиваниеВверх" Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И КанбанЛидов.Порядок < &Порядок УПОРЯДОЧИТЬ ПО КанбанЛидов.Порядок УБЫВ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Порядок",ПорядокПервогоЛида);
	Запрос.УстановитьПараметр("Состояние",Состояние);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ДанныеЛидов.Вставить("СсылкаНаВторойЛид",Выборка.Лид);
		ДанныеЛидов.Вставить("ПорядокВторогоЛида",Выборка.Порядок);
		Прервать;
	КонецЦикла;
	ДанныеЛидов.Вставить("Состояние", Состояние);
	РегистрыСведений.КанбанЛидов.ПоменятьПорядкиЛидов(ДанныеЛидов);
	
	ОбновитьЭлементыПланировщика("Перетаскивание");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Лиды);
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, "ВариантЗавершения");
	ОтборНеУстановлен = ЭлементыОтбора.Количество() = 0 ИЛИ (ТипЗнч(ЭлементыОтбора[0].ПравоеЗначение) = Тип("Массив") И ЭлементыОтбора[0].ПравоеЗначение.Количество() = 0)
		ИЛИ (ТипЗнч(ЭлементыОтбора[0].ПравоеЗначение) = Тип("Массив") И ЭлементыОтбора[0].ПравоеЗначение.Количество() <> 0 И НЕ ЗначениеЗаполнено(ЭлементыОтбора[0].ПравоеЗначение[0]));
	
	Элементы.СоздатьКанбан.Видимость = МожноРедактировать И Элементы.ФормаКанбан.Пометка;
	
	Если МожноРедактировать Тогда
		Элементы.Создать.Видимость = Элементы.ФормаСписок.Пометка;
		Элементы.Скопировать.Видимость = Элементы.ФормаСписок.Пометка;
		Элементы.ОбщаяКомандаНапомнить.Видимость = Элементы.ФормаСписок.Пометка;
		Элементы.ОбщаяКомандаСоздатьЗадачуСотрудника.Видимость = Элементы.ФормаСписок.Пометка;
		Элементы.СоздатьЗадачуСотрудникаКанбан.Видимость = Элементы.ФормаКанбан.Пометка;
	КонецЕсли;
	
	Элементы.ПланировщикКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость = МожноРедактировать;
	Элементы.ПланировщикКонтекстноеМенюГруппаПеремещение.Видимость = МожноРедактировать;
	
	Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость = ОтборНеУстановлен И МожноРедактировать;
	Элементы.ФормаГруппаЗавершениеРаботыСЛидом.Видимость = ОтборНеУстановлен И МожноРедактировать;
	Элементы.СписокКонтекстноеМенюУстановитьСостояние.Видимость = Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость;
	Элементы.ФормаУстановитьСостояние.Видимость = Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость;
	
	Элементы.СписокКонтекстноеМенюСправочникТегиРедактироватьТеги.Видимость = МожноРедактировать;
	
	Элементы.ЗавершениеРаботыСЛидом.Видимость = Элементы.ФормаКанбан.Пометка;
	Элементы.ЗавершениеРаботыСЛидом.Доступность = МожноРедактировать;
	
	Элементы.Планировщик.Видимость = Элементы.ФормаКанбан.Пометка;
	Элементы.ОтборПоиск.Видимость = Элементы.ФормаКанбан.Пометка;
	Элементы.ФормаОбновитьКанбан.Видимость = Элементы.ФормаКанбан.Пометка;
	
	Элементы.Список.Видимость = Элементы.ФормаСписок.Пометка;
	Элементы.Результат.Видимость = Элементы.ФормаСписок.Пометка;
	Элементы.ГруппаПоиска.Видимость = Элементы.ФормаСписок.Пометка;
	Элементы.ФормаГруппаКомандыСписок.Видимость = Элементы.ФормаСписок.Пометка;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтрокиКлиент()
	ОтборИерархияПриАктивизацииСтрокиСервер();
КонецПроцедуры

&НаСервере
Процедура ОтборИерархияПриАктивизацииСтрокиСервер()
	ОбновитьЭлементыПланировщика("Создание");
КонецПроцедуры

&НаСервере
Процедура ДекорацияПометитьНаУдалениеПеретаскиваниеСервер(Лиды)
	
	Для каждого Лид Из Лиды Цикл
		
		Если НЕ ЗначениеЗаполнено(Лид) Тогда
			Продолжить;
		КонецЕсли;
		
		ЛидОбъект = Лид.Ссылка.ПолучитьОбъект();
		ЛидОбъект.ПометкаУдаления = Истина;
		ЛидОбъект.Записать();
			
	КонецЦикла;
	
	ОбновитьЭлементыПланировщика("Перетаскивание");
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.ГруппаЛидов = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция МожноПеревестиВКлиента(Лид)
	
	МожноПеревестиВКлиента = Истина;
	КонтактыЛида = Справочники.КонтактыЛидов.КонтактыЛида(Лид);
	
	Для каждого ДанныеКонтакта Из КонтактыЛида Цикл
		
		Если ЗначениеЗаполнено(ДанныеКонтакта.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", "Имя Фамилия", Лид.Контакты.Индекс(ДанныеКонтакта) + 1),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контакты[%1].Наименование", Лид.Контакты.Индекс(ДанныеКонтакта)),,);
			
		МожноПеревестиВКлиента = Ложь;
		
	КонецЦикла;
	
	ЛидОбъект = Лид.ПолучитьОбъект();
	
	Если НЕ ЛидОбъект.ПроверитьЗаполнение() Тогда
		МожноПеревестиВКлиента = Ложь;
	КонецЕсли;
	
	Возврат МожноПеревестиВКлиента;
		
КонецФункции

&НаСервере
Процедура НастроитьПанельОтборовМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,, "ОтборСостояние,ОтборРезультат,ОтборТеги,ОтборИсточник,ОтборОтветственный,ОтборИерархияТекущая");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытиеПоКонтакту(ИмяТипаСобытия, Лид)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + ИмяТипаСобытия));
	ЗначенияЗаполнения.Вставить("Лид", Лид);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИОбновитьКомандыСостояний()
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	ОбновитьКомандыИзмененияСостояний();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыНекачественногоЛида(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиВНекачественныйЛидСервер(Результат);
	Элементы.Список.Обновить();
	МассивЛидов = Новый Массив;
	
	Для Каждого Лид Из НекачественныеЛиды Цикл
		МассивЛидов.Добавить(Лид.Лид);
	КонецЦикла;
	Оповестить("Запись_Лид",МассивЛидов);
	
	НекачественныеЛиды.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандуЭкспортВАдреснуюКнигу()
	
	ИспользоватьМассовыеРассылкиИнтеграция = ПолучитьФункциональнуюОпцию("ИспользоватьМассовыеРассылкиИнтеграция")
		И ЗначениеЗаполнено(МассовыеРассылкиИнтеграция.ПодключенныйСервис());
	
	Элементы.ФормаЭкспортВАдреснуюКнигуСервисаРассылок.Видимость = ИспользоватьМассовыеРассылкиИнтеграция;
	Элементы.СписокКонтекстноеМенюЭкспортВАдреснуюКнигуСервисаРассылок.Видимость = ИспользоватьМассовыеРассылкиИнтеграция;
	
	Если Не ИспользоватьМассовыеРассылкиИнтеграция Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокКомандыЭкспорта = СтрШаблон(НСтр("ru='Экспорт в адресную книгу %1'"), МассовыеРассылкиИнтеграция.ПредставлениеСервиса());
	
	Элементы.ФормаЭкспортВАдреснуюКнигуСервисаРассылок.Заголовок = ЗаголовокКомандыЭкспорта;
	Элементы.СписокКонтекстноеМенюЭкспортВАдреснуюКнигуСервисаРассылок.Заголовок = ЗаголовокКомандыЭкспорта;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеЛиды()
	
	ВыделенныеЛиды = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			ВыделенныеЛиды.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыделенныеЛиды;
	
КонецФункции

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка,,Истина);
	
	Если Элементы.ФормаКанбан.Пометка Тогда
		Если ИмяПоляОтбораСписка = "СостояниеЛида" Тогда
			ОбновитьЭлементыИИзмеренияПланировщика();
		Иначе
			ОбновитьЭлементыПланировщика("Создание");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
	Если Элементы.ФормаКанбан.Пометка = Истина Тогда
		ОбновитьЭлементыПланировщика("Создание");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	Если Элементы.ФормаКанбан.Пометка Тогда
		ОбновитьЭлементыИИзмеренияПланировщика();
		ТекущийЭлемент = Элементы.Планировщик;
	КонецЕсли;
	УстановитьОтборПоРезультату();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ВариантОтборовФормы = ВариантОтбораДляНастроек();
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,,ВариантОтборовФормы);
	
	СтрокаНастроек = "ВидСписка";
	ИмяКлючаОбъекта = "СписокЛиды";
	Если Элементы.ФормаКанбан.Пометка Тогда
		Элемент = "ФормаКанбан";
	Иначе
		Элемент = "ФормаСписок";
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта+"_" + СтрокаНастроек, Элемент);

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, "ВключаяВложенные",
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка);
	
	ХранилищеСистемныхНастроек.Сохранить("ВариантПредставления", "ВариантПредставления_СписокЛиды",?(Элементы.ФормаСписок.Пометка,"Список","Канбан"));
КонецПроцедуры

&НаСервере
Функция ВариантОтбораДляНастроек()
	
	
	// //Отбор покупатель+поставщик, или без отбора
	ВариантОтборовФормы = "";
	Возврат ВариантОтборовФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоРезультату()
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Лиды);
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, "ВариантЗавершения");
	ОтборНеУстановлен = ЭлементыОтбора.Количество() = 0 ИЛИ НЕ ЭлементыОтбора[0].Использование;
				
	ОтборПоПереведеннымВПокупателя = НЕ ОтборНеУстановлен 
		И ЭлементыОтбора[0].ПравоеЗначение.НайтиПоЗначению(Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя) <> Неопределено;
		
	ОтборПоНекачественным = НЕ ОтборНеУстановлен 
		И ЭлементыОтбора[0].ПравоеЗначение.НайтиПоЗначению(Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид) <> Неопределено;
		
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоЗавершенным", ОтборНеУстановлен);
	
	Элементы.Контрагент.Видимость = ОтборПоПереведеннымВПокупателя;
	Элементы.ВариантЗавершения.Видимость = ОтборПоПереведеннымВПокупателя И ОтборПоНекачественным;
	Элементы.ПричинаНеуспешногоЗавершенияРаботы.Видимость = ОтборПоНекачественным;
	
	Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость = ОтборНеУстановлен И МожноРедактировать;
	Элементы.ФормаГруппаЗавершениеРаботыСЛидом.Видимость = Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость;
	Элементы.СписокКонтекстноеМенюУстановитьСостояние.Видимость = Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость;
	Элементы.ФормаУстановитьСостояние.Видимость = Элементы.СписокКонтекстноеМенюГруппаЗавершениеРаботыСЛидом.Видимость;
	
	Элементы.СписокКонтекстноеМенюСправочникТегиРедактироватьТеги.Видимость = ОтборНеУстановлен И МожноРедактировать;
	Элементы.ГруппаИзменитьЭлементы.Видимость = ОтборНеУстановлен И МожноРедактировать;
	Элементы.ФормаИзменитьОбъединитьВыделенные.Видимость = ОтборНеУстановлен И МожноРедактировать;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

#Область Иерархия

&НаСервере
Процедура ПрочитатьИерархию(ГруппаТекущейСтроки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Лиды.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексПиктограммы,
		|	Лиды.Ссылка КАК ГруппаЛидов,
		|	ПРЕДСТАВЛЕНИЕ(Лиды.Ссылка) КАК ПредставлениеГруппы
		|ИЗ
		|	Справочник.Лиды КАК Лиды
		|ГДЕ
		|	Лиды.ЭтоГруппа = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Лиды.Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "ОтборИерархия");
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	
	СтрокаДерева = ЭлементыКоллекции.Вставить(0);
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаЛидов = "Все";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Все группы>'");
	
	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаЛидов = "БезГруппы";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Нет группы>'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархии(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоГруппе = ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов) = Тип("СправочникСсылка.Лиды");
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияИзменить.Доступность					= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияСкопировать.Доступность				= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияУстановитьПометкуУдаления.Доступность	= ЭтоОтборПоГруппе;
	
	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	
	Если ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов = "Все" Тогда
		
		Использование = Ложь;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.ГруппаЛидов = "БезГруппы" Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Лиды.ПустаяСсылка");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		,
		Использование
	);
	
	Форма.ОтборИерархияТекущая = ПравоеЗначение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаления(Лид)
	
	ЛидОбъект = Лид.ПолучитьОбъект();
	ЛидОбъект.УстановитьПометкуУдаления(Не ЛидОбъект.ПометкаУдаления, Истина);
	
	Возврат ЛидОбъект.ПометкаУдаления;
	
КонецФункции

&НаСервере
Функция ИзменитьПометкуУдаленияГруппыСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПометкаУдаления = ИзменитьПометкуУдаления(ТекущаяСтрокаДерева.ГруппаЛидов);
	ИзменитьПиктограммуРекурсивно(ТекущаяСтрокаДерева, ПометкаУдаления);
	
	Возврат ПометкаУдаления;
	
КонецФункции

&НаСервере
Процедура ИзменитьПиктограммуРекурсивно(СтрокаДерева, ПометкаУдаления)
	
	СтрокаДерева.ИндексПиктограммы = ?(ПометкаУдаления, 1, 0);
	
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаПодчиненная Из СтрокиДерева Цикл
		ИзменитьПиктограммуРекурсивно(СтрокаПодчиненная, ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИерархияПеретаскиваниеСервер(МассивЛидов, НоваяГруппа)
	
	УстановитьНовуюГруппуЛидов(МассивЛидов, НоваяГруппа);
	
	Если МассивЛидов[0].ЭтоГруппа Тогда
		
		ПрочитатьИерархию();
		
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ГруппаЛидов",
			ИдентификаторСтроки,
			ОтборИерархия.ПолучитьЭлементы(),
			МассивЛидов[0],
			Ложь
		);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
		
	Иначе
		
		Если Элементы.ФормаКанбан.Пометка Тогда
			ОбновитьЭлементыПланировщика("Создание");
		ИначеЕсли Элементы.ФормаСписок.Пометка Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНовуюГруппуЛидов(МассивЛидов, НоваяГруппа)
	
	Для Каждого Лид Из МассивЛидов Цикл
		ЛидОбъект = Лид.ПолучитьОбъект();
		ЛидОбъект.Родитель = НоваяГруппа;
		ЛидОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Канбан

&НаСервере
Процедура ОбновитьИзмеренияПланировщика()
	
	ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ИзмеренияПланировщика = Планировщик.Измерения;
	ИзмеренияПланировщика.Очистить();
	ФильтрПоСостоянию = "";
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, "СостояниеЛида");
	Если ЭлементыОтбора.Количество() <> 0
		И ((ТипЗнч(ЭлементыОтбора[0].ПравоеЗначение) = Тип("СписокЗначений") И ЭлементыОтбора[0].ПравоеЗначение.Количество() <> 0) 
		И ЭлементыОтбора[0].Использование) Тогда
		ФильтрПоСостоянию = " И Ссылка в (&Состояния)";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЛидов.Ссылка КАК Ссылка,
		|	СостоянияЛидов.Наименование КАК Наименование,
		|	СостоянияЛидов.Цвет КАК Цвет
		|ИЗ
		|	Справочник.СостоянияЛидов КАК СостоянияЛидов
		|ГДЕ
		|	СостоянияЛидов.Ссылка <> ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)"
		+ Символы.ПС + ФильтрПоСостоянию + Символы.ПС +
		" УПОРЯДОЧИТЬ ПО СостоянияЛидов.РеквизитДопУпорядочивания";
	Если ЗначениеЗаполнено(ФильтрПоСостоянию) Тогда
		Запрос.УстановитьПараметр("Состояния",ЭлементыОтбора[0].ПравоеЗначение);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ИзмерениеСостоянияЛидов = ИзмеренияПланировщика.Добавить("СостоянияЛидов");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НовоеСостояние = ИзмерениеСостоянияЛидов.Элементы.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		Цвет = ВыборкаДетальныеЗаписи.Цвет.Получить();
		
		Если Цвет = Неопределено Тогда
			Цвет = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		
		НовоеСостояние.ЦветТекста = Цвет;
		НовоеСостояние.Шрифт = ШрифтЗаголовка;
		НовоеСостояние.Текст =" ";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПланировщикаПеретаскивание(ДанныеПеретаскивания)
	
	КанбанЛидов = Новый Структура;
	КанбанЛидов.Вставить("Операция","ПереместитьЛид");
	
	Если ДанныеПеретаскивания.ПеретаскиваниеВНачалоСписка Тогда
		КанбанЛидов.Вставить("Порядок",0);
	ИначеЕсли ДанныеПеретаскивания.ПеретаскиваниеВКонецСписка ИЛИ ДанныеПеретаскивания.СмещаемыйЛид = Неопределено Тогда
		КанбанЛидов.Вставить("Порядок",Неопределено);
	Иначе
		КанбанЛидов.Вставить("Порядок",ПорядокСмещаемогоЭлемента(ДанныеПеретаскивания.СмещаемыйЛид));
	КонецЕсли;
	
	Для Каждого Лид Из ДанныеПеретаскивания.ПеретаскиваемыеЛиды Цикл
		ЛидОбъект = Лид.Ссылка.ПолучитьОбъект();
		КанбанЛидов.Вставить("СостояниеЛида",ЛидОбъект.СостояниеЛида);
		ЛидОбъект.СостояниеЛида = ДанныеПеретаскивания.Состояние;
		Если ДанныеПеретаскивания.ПеретаскиваемыеЛиды.Количество() = 1 Тогда
			ЛидОбъект.ДополнительныеСвойства.Вставить("КанбанЛидов",КанбанЛидов);
		Иначе
			ЛидОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьДанныеВРегистр",Истина);
		КонецЕсли;
		ЛидОбъект.Записать();
		Если ДанныеПеретаскивания.ПеретаскиваниеВКонецСписка ИЛИ ДанныеПеретаскивания.СмещаемыйЛид = Неопределено 
			ИЛИ ДанныеПеретаскивания.ПеретаскиваниеВНачалоСписка Тогда
			Строка = ПервыйПоследнийЭлементКанбан.НайтиСтроки(Новый Структура("Состояние",ДанныеПеретаскивания.Состояние));
			Строка[0].Количество = Строка[0].Количество + 1;
			ОбновитьТаблицуПервыйПоследнийЭлементКанбан(ЛидОбъект,ДанныеПеретаскивания.ПеретаскиваниеВНачалоСписка);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПеретаскивания.ПеретаскиваемыеЛиды.Количество() > 1 Тогда 
		РегистрыСведений.КанбанЛидов.ПереместитьЛиды(КанбанЛидов.СостояниеЛида, 
			ДанныеПеретаскивания.Состояние, 
			ДанныеПеретаскивания.ПеретаскиваемыеЛиды, 
			КанбанЛидов.Порядок);
	КонецЕсли;
	ОбновитьЭлементыПланировщика("Перетаскивание");
	
	// Если при перетаскивании на текущем экране не осталось элементов возвращение на предыдущий экран
	Если КоличествоСостоянийБезОтображаемыхЭлементов = Планировщик.Измерения[0].Элементы.Количество() Тогда
		ТекущийЭкранКанбан = ТекущийЭкранКанбан - 1;
		ОбновитьЭлементыПланировщика("Прокрутка","ПрокруткаНазад");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПланировщика(Операция, НаправлениеПрокрутки = Неопределено)
	
	ШиринаКарточкиКанбан = 2;
	ШиринаПанелейКанбан = 1;
	КоличествоОтображаемыхЭлементовКанбан = 14;
	НачалоОтображенияКанбан = НачалоДня(ТекущаяДатаСеанса());
	КонецОтображенияКанбан = НачалоОтображенияКанбан 
		+ КоличествоОтображаемыхЭлементовКанбан * ШиринаКарточкиКанбан 
		+ ШиринаПанелейКанбан;
	МаксимальныйЭлементКанбан = НачалоОтображенияКанбан;
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоОтображенияКанбан, КонецОтображенияКанбан);
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	ДанныеПанелиКИКанбан.Очистить();
	
	СтрокаФильтровКанбан = СтрокаФильтровКанбан();
	КоличествоЛидовПоСостояниям = КоличествоЭлементовПоСостояниямКанбан();
	КоличествоСостоянийБезОтображаемыхЭлементов = 0;
	
	Для Каждого Состояние Из Планировщик.Измерения[0].Элементы Цикл
		
		КоличествоЛидовПоСостоянию = КоличествоЛидовПоСостояниям.Найти(Состояние.Значение, "СостояниеЛида");
		ЦветаЭлементовСостояния = Справочники.СостоянияЛидов.ЦветЭлементовСостояния(Состояние.ЦветТекста);
		
		// Панель в начало
		ДобавитьЭлементВКанбан(НачалоОтображенияКанбан,
			НачалоОтображенияКанбан + 1,
			Строка(Состояние.Значение),
			Справочники.Лиды.ПустаяСсылка(),
			Состояние,
			ЦветаЭлементовСостояния.ЦветПанели,
			БиблиотекаКартинок.ПеретащитьЭлементВНачало);
		// Панель в конец
		ДобавитьЭлементВКанбан(КонецОтображенияКанбан,
			КонецОтображенияКанбан + 1,
			?(КоличествоЛидовПоСостоянию = Неопределено,"Всего: 0","Всего: " + Строка(КоличествоЛидовПоСостоянию.Количество)),
			Справочники.Лиды.ПустаяСсылка(),
			Состояние, 
			ЦветаЭлементовСостояния.ЦветПанели,
			БиблиотекаКартинок.ПеретащитьЭлементВКонец);
			
		Строка = ПервыйПоследнийЭлементКанбан.НайтиСтроки(Новый Структура("Состояние",Состояние.Значение));
		Если Строка.Количество() = 0 Тогда
			НоваяСтрока = ПервыйПоследнийЭлементКанбан.Добавить();
			НоваяСтрока.Состояние = Состояние.Значение;
			Строка.Добавить(НоваяСтрока);
		КонецЕсли;
		Если Операция = "Создание" ИЛИ ТекущийЭкранКанбан = 0 Тогда
			Строка[0].ПорядокПервогоЭлемента = 0;
			ТекущийЭкранКанбан = 0;
		КонецЕсли;
		
		Если КоличествоЛидовПоСостоянию = Неопределено 
			ИЛИ КоличествоЛидовПоСостоянию.Количество < (ТекущийЭкранКанбан*КоличествоОтображаемыхЭлементовКанбан - (ТекущийЭкранКанбан - 1))  Тогда
			КоличествоСостоянийБезОтображаемыхЭлементов = КоличествоСостоянийБезОтображаемыхЭлементов + 1;
			Продолжить;
		КонецЕсли;
		
		Строка[0].Количество = КоличествоЛидовПоСостоянию.Количество;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаКанбан(Операция, 
			НаправлениеПрокрутки,
			?(КоличествоЛидовПоСостоянию.Количество <= ((ТекущийЭкранКанбан + 1)*КоличествоОтображаемыхЭлементовКанбан - ТекущийЭкранКанбан),
			КоличествоЛидовПоСостоянию.Количество - (ТекущийЭкранКанбан*КоличествоОтображаемыхЭлементовКанбан - ТекущийЭкранКанбан), 
			КоличествоОтображаемыхЭлементовКанбан));
		Запрос.УстановитьПараметр("Состояние",Состояние.Значение);
		Если Операция = "Создание" ИЛИ Операция = "Перетаскивание" Тогда
			Запрос.УстановитьПараметр("Порядок",Строка[0].ПорядокПервогоЭлемента);
		ИначеЕсли Операция = "Прокрутка" И НаправлениеПрокрутки = "ПрокруткаВперед" Тогда
			Запрос.УстановитьПараметр("Порядок",Строка[0].ПорядокПоследнегоЭлемента);
		Иначе
			Запрос.УстановитьПараметр("Порядок",
			?(КоличествоЛидовПоСостоянию.Количество <= ((ТекущийЭкранКанбан + 1)*КоличествоОтображаемыхЭлементовКанбан - ТекущийЭкранКанбан),
			Строка[0].ПорядокПоследнегоЭлемента,
			Строка[0].ПорядокПервогоЭлемента));
		КонецЕсли;
		УстановитьПараметрыФильтров(Запрос);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если Операция = "Прокрутка" И НаправлениеПрокрутки = "ПрокруткаНазад" Тогда
				КонецЭлемента = НачалоОтображенияКанбан + ((Выборка.Количество() * ШиринаКарточкиКанбан) 
				+ ШиринаПанелейКанбан - ИндексСтроки);
				НачалоЭлемента = КонецЭлемента - ШиринаКарточкиКанбан;
				Если ИндексСтроки = 0 Тогда
					Строка[0].ПорядокПоследнегоЭлемента = Выборка.Порядок;
					Строка[0].КонецОтображенияПоследнего = КонецЭлемента;
				Иначе
					Строка[0].ПорядокПервогоЭлемента = Выборка.Порядок;
				КонецЕсли;
			Иначе
				НачалоЭлемента = НачалоОтображенияКанбан + ШиринаПанелейКанбан + ИндексСтроки;
				КонецЭлемента = НачалоЭлемента + ШиринаКарточкиКанбан;
				Если ИндексСтроки = 0 Тогда
					Строка[0].ПорядокПервогоЭлемента = Выборка.Порядок;
				Иначе
					Строка[0].ПорядокПоследнегоЭлемента = Выборка.Порядок;
					Строка[0].КонецОтображенияПоследнего = КонецЭлемента;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьЭлементВКанбан(НачалоЭлемента,
				КонецЭлемента,
				ПредставлениеЛидаКанбан(Выборка),
				Выборка.Лид,
				Состояние,
				ЦветаЭлементовСостояния.ЦветЭлемента
				);
			
			Если КонецЭлемента > МаксимальныйЭлементКанбан Тогда
				МаксимальныйЭлементКанбан = КонецЭлемента;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + ШиринаКарточкиКанбан;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыИИзмеренияПланировщика(Операция = "Создание")
	
	ОбновитьИзмеренияПланировщика();
	ОбновитьЭлементыПланировщика(Операция);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаКанбан(Операция, НаправлениеПрокрутки, Количество = 14)
	
	Если Операция = "Прокрутка" И НаправлениеПрокрутки = "ПрокруткаНазад" Тогда
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 14
		|	КанбанЛидов.Состояние КАК Состояние,
		|	КанбанЛидов.Лид КАК Лид,
		|	КанбанЛидов.Порядок КАК Порядок,
		|	Лиды.Наименование КАК Наименование,
		|	Лиды.КонтактнаяИнформация.(
		|		ЕСТЬNULL(Тип, ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)) КАК Тип,
		|		ЕСТЬNULL(Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) КАК Вид,
		|		ЕСТЬNULL(Представление, """") КАК Представление,
		|		ЕСТЬNULL(Значение, """") КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	Лиды.Теги.(
		|		Тег.Наименование КАК ТегНаименование
		|	) КАК Теги,
		|	Лиды.Комментарий КАК Комментарий,
		|	Лиды.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	РегистрСведений.КанбанЛидов КАК КанбанЛидов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Лиды КАК Лиды
		|		ПО КанбанЛидов.Лид = Лиды.Ссылка
		|ГДЕ
		|	КанбанЛидов.Состояние = &Состояние
		|	И Лиды.ПометкаУдаления = ЛОЖЬ
		|	И КанбанЛидов.Порядок <= &Порядок"
		+ СтрокаФильтровКанбан + Символы.ПС +
		"УПОРЯДОЧИТЬ ПО КанбанЛидов.Порядок УБЫВ";
		
		Текст = СтрЗаменить(Текст, "14", Количество);
	Иначе 
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 14
		|	КанбанЛидов.Состояние КАК Состояние,
		|	КанбанЛидов.Лид КАК Лид,
		|	КанбанЛидов.Порядок КАК Порядок,
		|	Лиды.Наименование КАК Наименование,
		|	Лиды.КонтактнаяИнформация.(
		|		ЕСТЬNULL(Тип, ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)) КАК Тип,
		|		ЕСТЬNULL(Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) КАК Вид,
		|		ЕСТЬNULL(Представление, """") КАК Представление,
		|		ЕСТЬNULL(Значение, """") КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	Лиды.Теги.(
		|		Тег.Наименование КАК ТегНаименование
		|	) КАК Теги,
		|	Лиды.Комментарий КАК Комментарий,
		|	Лиды.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.Лиды КАК Лиды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КанбанЛидов КАК КанбанЛидов
		|		ПО Лиды.Ссылка = КанбанЛидов.Лид
		|ГДЕ
		|	КанбанЛидов.Состояние = &Состояние
		|	И КанбанЛидов.Порядок >= &Порядок
		|	И Лиды.ПометкаУдаления = ЛОЖЬ"
		+ СтрокаФильтровКанбан + Символы.ПС +
		" УПОРЯДОЧИТЬ ПО КанбанЛидов.Порядок";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция СтрокаФильтровКанбан()
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Период" Тогда
			Если ЭлементОтбора.Элементы[0].Использование И ЭлементОтбора.Элементы[1].Использование Тогда
				МассивСтрок.Добавить(" И ДатаСоздания >= &ДатаНачала И ДатаСоздания <= &ДатаОкончания");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") 
			ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений"))
			И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" Тогда
			МассивСтрок.Добавить(" И Теги.Тег В (&Теги) ");
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			МассивСтрок.Добавить(" И Ответственный В (&Ответственный) ");
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "ИсточникПривлечения" Тогда
			МассивСтрок.Добавить(" И ИсточникПривлечения В (&ИсточникПривлечения) ");
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "СостояниеЛида" Тогда
			МассивСтрок.Добавить(" И СостояниеЛида В (&СостояниеФильтр) ");
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборПоиск) Тогда
		МассивСтрок.Добавить(" И ОсновныеСведения ПОДОБНО &Поиск ");
	КонецЕсли;
	
	Для Каждого ЭлементОтбораСписка Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбораСписка.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбораСписка.ЛевоеЗначение) = "Родитель" Тогда
			Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка И ЗначениеЗаполнено(ЭлементОтбораСписка.ПравоеЗначение) Тогда
				МассивСтрок.Добавить(" И Родитель В ИЕРАРХИИ (&Родитель) ");
			Иначе
				МассивСтрок.Добавить(" И Родитель = &Родитель ");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаФильтров = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат СтрокаФильтров;
	
КонецФункции

&НаСервере
Функция ПредставлениеЛидаКанбан(Строка)
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(Строка.Наименование) Тогда
		МассивСтрок.Добавить(Строка.Наименование);
	КонецЕсли;
	
	Контакты = Справочники.КонтактыЛидов.КонтактыЛида(Строка.Лид);
	КИ       = Строка.КонтактнаяИнформация.Выгрузить();
	
	Для Каждого СтрокаКИ Из КИ Цикл
		НоваяСтрока = ДанныеПанелиКИКанбан.Добавить();
		Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(СтрокаКИ.Значение);
		НоваяСтрока.Отображение = Строка(СтрокаКИ.Вид) + ": " + СтрокаКИ.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий);
		НоваяСтрока.ИндексПиктограммы = КонтактнаяИнформацияПанельУнф.ИндексПиктограммыПоТипу(СтрокаКИ.Тип);
		НоваяСтрока.ТипОтображаемыхДанных = "ЗначениеКИ";
		НоваяСтрока.ВладелецКИ = Строка.Лид;
		НоваяСтрока.ПредставлениеКИ = СтрокаКИ.Представление;
		НоваяСтрока.СсылкаНаЛид = Строка.Лид;
		НоваяСтрока.ТипКИ = СтрокаКИ.Тип;
	КонецЦикла;
	
	Если Контакты.Количество() = 0 Тогда
		// Заполнение таблицы для панели контактной информации
		ДобавитьСообщениеОбОтсутствииДанных(Строка.Лид);
		
		//Формирование Представления
		Если ЗначениеЗаполнено(Строка.Комментарий) Тогда
			МассивСтрок.Добавить(Строка.Комментарий);
		КонецЕсли;
		
		МассивСтрок.Добавить(Формат(Строка.ДатаСоздания + Символы.ПС,"ДЛФ = DD"));
		ТегиКонтакта = Строка.Теги.Выгрузить();
		
		Если ТегиКонтакта.Количество() = 0 Тогда
			Представление = СтрСоединить(МассивСтрок,Символы.ПС);
			Возврат Представление;
		Иначе
			Для Каждого Тег Из ТегиКонтакта Цикл
				МассивСтрок.Добавить(Тег.ТегНаименование);
			КонецЦикла;
			Представление = СтрСоединить(МассивСтрок,Символы.ПС);
			Возврат Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийКонтакт = Неопределено;
	
	Для Каждого Контакт Из Контакты Цикл
		
		Если ЗначениеЗаполнено(Контакт.Наименование) И Контакт.Наименование <> Строка.Наименование Тогда
			МассивСтрок.Добавить(Контакт.Наименование);	
		КонецЕсли;
		
		// Заполнение таблицы для панели контактной информации
		
		Если ТекущийКонтакт <> Контакт.Наименование Тогда
			НоваяСтрока = ДанныеПанелиКИКанбан.Добавить();
			НоваяСтрока.Отображение = Контакт.Наименование;
			НоваяСтрока.ИндексПиктограммы = -1;
			НоваяСтрока.ТипОтображаемыхДанных = "КонтактноеЛицо";
			НоваяСтрока.ВладелецКИ = Строка.Лид;
			НоваяСтрока.СсылкаНаЛид = Строка.Лид;
			ТекущийКонтакт = Контакт.Наименование;
		КонецЕсли;
		
		КИКонтакта = Контакт.КонтактнаяИнформация;
		
		Для Каждого СтрокаКИ Из КИКонтакта Цикл
			
			МассивСтрок.Добавить(СтрокаКИ.Представление);
			Если НЕ ЗначениеЗаполнено(СтрокаКИ.Тип) Тогда
				Продолжить;
			КонецЕсли;
			// Заполнение таблицы для панели контактной информации
			НоваяСтрока = ДанныеПанелиКИКанбан.Добавить();
			Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(СтрокаКИ.Значение);
			НоваяСтрока.Отображение = Строка(СтрокаКИ.Вид) + ": " + СтрокаКИ.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий);
			НоваяСтрока.ИндексПиктограммы = КонтактнаяИнформацияПанельУнф.ИндексПиктограммыПоТипу(СтрокаКИ.Тип);
			НоваяСтрока.ТипОтображаемыхДанных = "ЗначениеКИ";
			НоваяСтрока.ВладелецКИ = Строка.Лид;
			НоваяСтрока.ПредставлениеКИ = СтрокаКИ.Представление;
			НоваяСтрока.СсылкаНаЛид = Строка.Лид;
			НоваяСтрока.ТипКИ = СтрокаКИ.Тип;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Строка.Комментарий) Тогда
		МассивСтрок.Добавить(Строка.Комментарий);
	КонецЕсли;
	
	МассивСтрок.Добавить(Формат(Строка.ДатаСоздания + Символы.ПС,"ДЛФ = DD"));
	
	ТегиКонтакта = Строка.Теги.Выгрузить();
	
	Если ТегиКонтакта.Количество() = 0 Тогда
		Представление = СтрСоединить(МассивСтрок,Символы.ПС);
		Возврат Представление;
	Иначе
		Для Каждого Тег Из ТегиКонтакта Цикл
			МассивСтрок.Добавить(НСтр("ru = '#'") + Тег.ТегНаименование);
		КонецЦикла;
	КонецЕсли;
	
	Представление = СтрСоединить(МассивСтрок,Символы.ПС);
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыФильтров(Запрос)
	
	Для Каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора = "ВариантЗавершения" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.Представление = "Период" Тогда
			Если ЭлементОтбора.Элементы[0].Использование И ЭлементОтбора.Элементы[1].Использование Тогда
				Запрос.УстановитьПараметр("ДатаНачала",ЭлементОтбора.Элементы[0].ПравоеЗначение);
				Запрос.УстановитьПараметр("ДатаОкончания",ЭлементОтбора.Элементы[1].ПравоеЗначение);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора = "ВариантЗавершения" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") 
			И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" Тогда
			Запрос.УстановитьПараметр("Теги",ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			Запрос.УстановитьПараметр("Ответственный",ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "ИсточникПривлечения" Тогда
			Запрос.УстановитьПараметр("ИсточникПривлечения",ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "СостояниеЛида" Тогда
			Запрос.УстановитьПараметр("СостояниеФильтр",ЭлементОтбора.ПравоеЗначение);
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборПоиск) Тогда
		Запрос.УстановитьПараметр("Поиск","%"+ОтборПоиск+"%");
	КонецЕсли;
	
	Для Каждого ЭлементОтбораСписка Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбораСписка.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбораСписка.ЛевоеЗначение) = "Родитель" Тогда
			Запрос.УстановитьПараметр("Родитель",ЭлементОтбораСписка.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) И ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.Лиды") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента);
		ОткрытьФорму("Справочник.Лиды.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПорядокСмещаемогоЭлемента(Лид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КанбанЛидов.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.КанбанЛидов КАК КанбанЛидов
	|ГДЕ
	|	КанбанЛидов.Лид = &Лид";
	
	Запрос.УстановитьПараметр("Лид", Лид.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Порядок;
	
КонецФункции

&НаСервере
Функция КоличествоЭлементовПоСостояниямКанбан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Лиды.СостояниеЛида КАК СостояниеЛида,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Лиды.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Лиды КАК Лиды
	| ГДЕ Лиды.ЭтоГруппа = ЛОЖЬ 
	| И Лиды.ПометкаУдаления = ЛОЖЬ"
	+ СтрокаФильтровКанбан + 
	" СГРУППИРОВАТЬ ПО Лиды.СостояниеЛида";
	
	УстановитьПараметрыФильтров(Запрос);
	КоличествоЛидовПоСостояниям = Запрос.Выполнить().Выгрузить();
	Возврат КоличествоЛидовПоСостояниям;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВКанбан(Начало, Конец, Текст, Значение, Состояние, ЦветЭлемента, Картинка = Неопределено)
	
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить("СостоянияЛидов",Состояние.Значение);
	
	НовыйЭлемент = Планировщик.Элементы.Добавить(Начало, Конец);
	НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	НовыйЭлемент.Текст = Текст;
	НовыйЭлемент.ЦветФона = ЦветЭлемента;
	НовыйЭлемент.ЦветТекста = Новый Цвет(0,0,0);
	НовыйЭлемент.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	НовыйЭлемент.Значение = Значение;
	
	Если Картинка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент.Картинка = Картинка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПервыйПоследнийЭлементКанбан(Лид,ПеретаскиваниеВНачалоСписка)
	
	Строка = ПервыйПоследнийЭлементКанбан.НайтиСтроки(Новый Структура("Состояние",Лид.СостояниеЛида));
	Если Строка[0].Количество = (ТекущийЭкранКанбан*КоличествоОтображаемыхЭлементовКанбан - (ТекущийЭкранКанбан - 1)) Тогда
		Строка[0].ПорядокПервогоЭлемента = ?(ПеретаскиваниеВНачалоСписка,
			Строка[0].ПорядокПоследнегоЭлемента,
			ПорядокСмещаемогоЭлемента(Лид.Ссылка));
	Иначе
		Строка[0].ПорядокПоследнегоЭлемента = ПорядокСмещаемогоЭлемента(Лид.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиВКонецСостояния(Состояние)
	КоличествоЛидовПоСостоянию = ПервыйПоследнийЭлементКанбан.НайтиСтроки(Новый Структура("Состояние",Состояние));;
	Пока КоличествоЛидовПоСостоянию[0].Количество >= ((ТекущийЭкранКанбан + 1)*КоличествоОтображаемыхЭлементовКанбан - ТекущийЭкранКанбан) Цикл
		ТекущийЭкранКанбан = ТекущийЭкранКанбан + 1;
		ОбновитьЭлементыПланировщика("Прокрутка", "ПрокруткаВперед")
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформации()
	
	ДанныеПанелиКИ = ДанныеПанелиКонтактнойИнформации(ТекущийЛид);
	КонтактнаяИнформацияПанельУНФКлиент.ЗаполнитьДанныеПанелиКИ(ЭтотОбъект, ДанныеПанелиКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПанелиКонтактнойИнформации(ВладелецКИ)
	
	Возврат КонтактнаяИнформацияПанельУНФ.ДанныеПанелиКонтактнойИнформации(ВладелецКИ);
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийЛид);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельКонтактнойИнформацииКанбан()
	
	ДанныеЛида = ДанныеПанелиКИКанбан.НайтиСтроки(Новый Структура("СсылкаНаЛид",ТекущийЛид));
	
	Если ДанныеЛида.Количество() = 0 Тогда
		ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Очистить();
		НоваяСтрока = ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Добавить();
		НоваяСтрока.Отображение = НСтр("ru='<Нет контактных данных>'");
		НоваяСтрока.ИндексПиктограммы = -1;
		НоваяСтрока.ТипОтображаемыхДанных = "НетДанных";
		НоваяСтрока.ВладелецКИ = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Очистить();
	Для Каждого Строка Из ДанныеЛида Цикл
		НоваяСтрока = ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСообщениеОбОтсутствииДанных(Лид)
	
	НоваяСтрока = ДанныеПанелиКИКанбан.Добавить();
	НоваяСтрока.Отображение = НСтр("ru='<Нет контактных данных>'");
	НоваяСтрока.ИндексПиктограммы = -1;
	НоваяСтрока.ТипОтображаемыхДанных = "НетДанных";
	НоваяСтрока.ВладелецКИ = Неопределено;
	НоваяСтрока.СсылкаНаЛид = Лид;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСостоянийЛидов

&НаСервере
Процедура ОбновитьКомандыИзмененияСостояний()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Если Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество()<> 0 Тогда
		Для ИндексГруппы = 0 По Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
			
			УдаляемыеЭлементы.Добавить(Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
			
		КонецЦикла;
		
		Если Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			Для ИндексГруппы = 0 По Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
				УдаляемыеЭлементы.Добавить(Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСостоянийЛидов.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияЛидов.Ссылка КАК Ссылка,
	|	СостоянияЛидов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СостоянияЛидов КАК СостоянияЛидов
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НомерСостояния = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники.СостоянияЛидов.Завершен Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеВТаблице = ТаблицаСостоянийЛидов.НайтиСтроки(Новый Структура("Состояние", Выборка.Ссылка));
		
		Если СостояниеВТаблице.Количество() = 0 Тогда
			НовоеСостояние = ТаблицаСостоянийЛидов.Добавить();
			НовоеСостояние.Состояние = Выборка.Ссылка;
		Иначе 
			НовоеСостояние = СостояниеВТаблице[0];
		КонецЕсли;
		
		КнопкаУстановитьСостояниеЗаказаФорма = Элементы.Добавить("Состояние_" + Строка(ТаблицаСостоянийЛидов.Индекс(НовоеСостояние))+ "Форма", Тип("КнопкаФормы"),Элементы.ФормаУстановитьСостояние);
		КнопкаУстановитьСостояниеЗаказаФорма.Заголовок = Строка(НомерСостояния)+". "+ Строка(Выборка.Ссылка);
		КнопкаУстановитьСостояниеЗаказаФорма.ТолькоВоВсехДействиях = Истина;
		
		КнопкаУстановитьСостояниеЗаказаСписок = Элементы.Добавить("Состояние_" + Строка(ТаблицаСостоянийЛидов.Индекс(НовоеСостояние)), Тип("КнопкаФормы"),Элементы.СписокКонтекстноеМенюУстановитьСостояние);
		КнопкаУстановитьСостояниеЗаказаСписок.Заголовок = Строка(НомерСостояния)+". "+ Строка(Выборка.Ссылка);
		
		НазваниеКоманды = "Состояние_" + Строка(ТаблицаСостоянийЛидов.Индекс(НовоеСостояние));
		Если Команды.Найти(НазваниеКоманды) <> Неопределено Тогда
			КомандаУстановитьСостояниеЗаказа = Команды[НазваниеКоманды];
		Иначе
			КомандаУстановитьСостояниеЗаказа = Команды.Добавить(НазваниеКоманды);
		КонецЕсли;
		
		КомандаУстановитьСостояниеЗаказа.Действие = "Подключаемый_УстановитьСостояниеЛида";
		КомандаУстановитьСостояниеЗаказа.Заголовок = Строка(Выборка.Ссылка);
		
		КнопкаУстановитьСостояниеЗаказаСписок.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;
		КнопкаУстановитьСостояниеЗаказаФорма.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;

		НомерСостояния = НомерСостояния + 1;
	КонецЦикла;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_УстановитьСостояниеЛида(Команда)
	
	Лиды = Элементы.Список.ВыделенныеСтроки;
	
	Если Тип(Лиды) <> Тип("Массив") Или Лиды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
		
	Если Лиды.Количество() = 1 Тогда
		
		УстановитьСостояниеЛидаСервер(ИмяКоманды, Лиды);
		
		Если Лиды.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
			ПолучитьНавигационнуюСсылку(Лиды[0]),
			СтрШаблон(НСтр("ru='%1'"),Строка(Лиды[0])),
			БиблиотекаКартинок.Информация32);
		Элементы.Список.Обновить();
		Оповестить("ИзменениеСостояния_Лид",Лиды);
		Возврат;
		
	КонецЕсли;
	
	
	Состояние(НСтр("ru = 'Изменение состояния'"), 49);
	УстановитьСостояниеЛидаСервер(ИмяКоманды, Лиды);
	Состояние(НСтр("ru = 'Изменение состояния'"), 100);
	
	Элементы.Список.Обновить();
	Оповестить("ИзменениеСостояния_Лид",Лиды);
	
	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='Изменение (%1)'"),
		КоличествоИзмененныхЛидов),,
		НСтр("ru='Лиды'"),БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЛидаСервер(ИмяКоманды, Лиды)
	
	
	ИндексСостояния = Число(Сред(ИмяКоманды,11,СтрДлина(ИмяКоманды)));
	СсылкаНаСостояние = ТаблицаСостоянийЛидов[ИндексСостояния].Состояние;

	КоличествоИзмененныхЛидов = 0;
	НеизмененныеЛиды = Новый Массив;

	Для Каждого Лид Из Лиды Цикл
		
		Если Лид.СостояниеЛида = СсылкаНаСостояние Тогда
			НеизмененныеЛиды.Добавить(Лид);
			Продолжить;
		КонецЕсли;
		
		Попытка
			Справочники.Лиды.ИзменитьСостояниеЛида(Лид, СсылкаНаСостояние);
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Лид);
			НеизмененныеЛиды.Добавить(Лид);
			Продолжить;
			
		КонецПопытки;
		
		КоличествоИзмененныхЛидов = КоличествоИзмененныхЛидов + 1;
		
	КонецЦикла;
	
	Для Каждого НеизмененныйЛид Из НеизмененныеЛиды Цикл
		
		ИндексЛида = Лиды.Найти(НеизмененныйЛид);
		Если ИндексЛида = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Лиды.Удалить(ИндексЛида);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостьЭлементовФормы

// Процедура выполняет настройку элементов формы для корректного отображения в мобильном клиенте
//
&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузкаДанныхИзВнешнегоИсточника", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьКанбан", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборПоиск", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВидОтображения", "Видимость", Ложь);
	
	Элементы.Иерархия.Показать();
	
КонецПроцедуры

#КонецОбласти
