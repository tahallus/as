
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		Если ТипЗнч(Параметры.Отбор.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = Параметры.Отбор.Владелец;
			КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
			
			ТекстСообщения = "";
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура!'");
			ИначеЕсли Параметры.Свойство("ЭтоПриходныйДокумент") И Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ТекстСообщения = НСтр("ru = 'Для услуг сторонних контрагентов не ведется учет по характеристикам!'");
			ИначеЕсли НЕ Номенклатура.ИспользоватьХарактеристики Тогда
				ТекстСообщения = НСтр("ru = 'Для номенклатуры не ведется учет по характеристикам!'");
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Возврат;
			КонецЕсли;
			
			Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
				Элементы.Список.ТекущаяСтрока = Параметры.ТекущаяСтрока;
			КонецЕсли;
			
			// Очистим переданный отбор и установим свой
			Параметры.Отбор.Удалить("Владелец");
			УстановитьОтборПоВладельцуНаСервере();
			
			// УНФ СтандартныеПодсистемы.Свойства
			ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			УправлениеСвойствамиУНФ.ТаблицаСвойствПриСозданииНаСервере(ЭтотОбъект, ПустаяХарактеристика, КатегорияНоменклатуры, Ложь);
			
			ИначеЕсли ТипЗнч(Параметры.Отбор.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
				
				КатегорияНоменклатуры = Параметры.Отбор.Владелец;
				
				Параметры.Отбор.Удалить("Владелец");
				УстановитьОтборПоВладельцуНаСервере();
				
				// УНФ СтандартныеПодсистемы.Свойства
				ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				УправлениеСвойствамиУНФ.ТаблицаСвойствПриСозданииНаСервере(ЭтотОбъект, ПустаяХарактеристика, КатегорияНоменклатуры, Ложь);
				
		КонецЕсли;
		
	Иначе
		
		Если Элементы.Найти("СписокСоздать") <> Неопределено Тогда
			Элементы.СписокСоздать.Доступность = Ложь;
		КонецЕсли;
		Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Элементы.Характеристики.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.Характеристики.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	ИмяКлючаОбъекта = СтрЗаменить(ЭтотОбъект.ИмяФормы,".","");
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Истина);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Элементы.ПереключениеИзображений.Видимость = СохраненноеЗначение;
		Элементы.ДекорацияРазвернутьОтборы.Видимость = НЕ СохраненноеЗначение;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КатегорияНоменклатуры)
		Тогда   		
		Если КатегорияНоменклатуры.ПорядокСортировки.Количество()
			Тогда
			Список.Порядок.Элементы.Очистить();		
			Для Каждого СтрокаПорядокСортировки Из КатегорияНоменклатуры.ПорядокСортировки Цикл
				ЭлементПорядка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЭлементПорядка.Использование = Истина;
				ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Ссылка." + СтрокаПорядокСортировки.Свойство.Наименование);
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			КонецЦикла;	
		Иначе
			ЭлементПорядка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядка.Использование = Истина;
			ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Наименование");
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр; 				
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		ОбновитьПросмотрИзображений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обновляем отбор списка Характеристик по значениям доп. реквизитов.
//
&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияЗначениеПриИзменении(Элемент)
	
	Список.Отбор.Элементы.Очистить();
	
	УстановитьОтборПоВладельцуНаКлиенте();
	УстановитьОтборПоСвойствамИЗначениям();
	
КонецПроцедуры

// При клике на Характеристику из списка выводим в подвале формы ее наименование для печати.
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущаяХарактеристикаНаименованиеДляПечати = Элемент.ТекущиеДанные.НаименованиеДляПечати;
		
		Если Элементы.ПереключениеИзображений.Видимость
			И НЕ ТекущаяХарактеристика = Элементы.Список.ТекущиеДанные.Ссылка Тогда
			
			ТекущаяХарактеристика = Элементы.Список.ТекущиеДанные.Ссылка;
			ПодключитьОбработчикОжидания("ДобавитьПросмотрИзображенийКлиент", 0.1, Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекущаяХарактеристикаНаименованиеДляПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПросмотрИзображенийКлиент()

	ДобавитьПросмотрИзображений();
	
КонецПроцедуры

// Открываем карточку создания новой Характеристики и передаем значения отборов по доп. реквизитам.
//
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Номенклатура);
	ЗначенияЗаполнения.Вставить("ЗначенияДополнительныхРеквизитов", ЗначенияОтбора());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры // СписокПередНачаломДобавления()

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ОчиститьВсеОтборы(Команда)
	
	Для каждого Стр Из Свойства_ТаблицаСвойстваИЗначения Цикл
		
		Стр.Значение = Неопределено;
		
	КонецЦикла;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	УстановитьОтборПоВладельцуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодобныеХарактеристики(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоЗначениямХарактеристики(ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ЭтотОбъект.ИмяФормы,".","");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Элементы.ПереключениеИзображений.Видимость);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает отбор для формы выбора характеристик номенклатуры.
//
&НаСервере
Процедура УстановитьОтборПоВладельцуНаСервере()
	
	СписокОтбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СписокОтбора.Добавить(Номенклатура);
	КонецЕсли;
	СписокОтбора.Добавить(КатегорияНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", СписокОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры // УстановитьОтборПоВладельцуНаСервере()

// Устанавливает отбор для формы выбора характеристик номенклатуры.
//
&НаКлиенте
Процедура УстановитьОтборПоВладельцуНаКлиенте()
	
	СписокОтбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СписокОтбора.Добавить(Номенклатура);
	КонецЕсли;
	СписокОтбора.Добавить(КатегорияНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", СписокОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры // УстановитьОтборПоВладельцуНаКлиенте()

// Обходит таблицу свойств и устанавливает отбор списка по введенным значениям.
//
&НаКлиенте
Процедура УстановитьОтборПоСвойствамИЗначениям()
	
	Для Каждого Строка Из Свойства_ТаблицаСвойстваИЗначения Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			ИмяПоля = СтрШаблон("Ссылка.[%1]", Строка.Свойство);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяПоля, Строка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу отборов значениями выбранной характеристики.
//
&НаСервере
Процедура УстановитьОтборПоЗначениямХарактеристики(Характеристика)
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	УстановитьОтборПоВладельцуНаСервере();
	
	Для каждого Эл Из Свойства_ТаблицаСвойстваИЗначения Цикл
		
		ЗначениеХарактеристики = Характеристика.ДополнительныеРеквизиты.Найти(Эл.Свойство, "Свойство");
		Если ЗначениеХарактеристики = Неопределено Тогда
			Эл.Значение = ЗначениеХарактеристики;
		Иначе
			Эл.Значение = ЗначениеХарактеристики.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Эл.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("Ссылка.[%1]", Эл.Свойство);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяПоля, Эл.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает значения отборов по доп. реквизитам для создания нового объекта.
//
&НаКлиенте
Функция ЗначенияОтбора()
	
	ЗначенияОтбора = Новый Соответствие;
	Для каждого Элемент Из Свойства_ТаблицаСвойстваИЗначения Цикл
		
		ЗначенияОтбора.Вставить(Элемент.Свойство, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат ЗначенияОтбора;
	
КонецФункции // ЗначенияОтбора()

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

#КонецОбласти

#Область Изображение

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры // ПросмотретьИзображение()

&НаКлиенте
Процедура СвернутьРазвернутьИзображение(Элемент)
	
	НовоеЗначениеВидимостьКартинки = НЕ Элементы.ПереключениеИзображений.Видимость;
	
	Элементы.ПереключениеИзображений.Видимость = НовоеЗначениеВидимостьКартинки;
	Элементы.ДекорацияРазвернутьОтборы.Видимость = НЕ НовоеЗначениеВидимостьКартинки;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.АдресКартинки.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТекущееИзображение >= 0 Тогда
		ПросмотретьПрисоединенныйФайл();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

&НаКлиенте
Процедура ИзменитьИзображениеЗавершение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Изображение = Изображения[ТекущееИзображение].Ссылка;
	
	ИзменитьИзображениеЗавершениеНаСервере(ИнформацияОФайле);
	ОповеститьОбИзменении(Изображение);
	Оповестить("Запись_Файл", Новый Структура, Изображение);
	
КонецПроцедуры

// Перезаписывает текущее изображение выбранным файлом с диска.
//
&НаСервере
Процедура ИзменитьИзображениеЗавершениеНаСервере(ИнформацияОФайле)
	
	Изображение = Изображения[ТекущееИзображение].Ссылка;
	РаботаСФайлами.ОбновитьФайл(Изображение, ИнформацияОФайле);
	ОбновитьПросмотрИзображений();
	
КонецПроцедуры

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений()
	
	ТекущееИзображениеВрем = ТекущееИзображение;
	ДобавитьПросмотрИзображений();
	ТекущееИзображение = ТекущееИзображениеВрем;
	СдвигИзображения(0);
	
КонецПроцедуры

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ ТекущаяХарактеристика.ФайлКартинки.Пустая() Тогда
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(ТекущаяХарактеристика.ФайлКартинки, УникальныйИдентификатор);
		
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = ТекущаяХарактеристика.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеЛоготипы = Новый Массив;
	ДопустимыеЛоготипы.Добавить("png");
	ДопустимыеЛоготипы.Добавить("jpeg");
	ДопустимыеЛоготипы.Добавить("jpg");
	ДопустимыеЛоготипы.Добавить("gif");
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ТекущаяХарактеристика, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если ДопустимыеЛоготипы.Найти(Файл.Расширение) <> Неопределено Тогда
			
			Если Файл = ТекущаяХарактеристика.ФайлКартинки Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
			
			Если ДвоичныеДанныеКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = Файл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого элКартинка Из Элементы.Изображение.ПодчиненныеЭлементы Цикл
		Если элКартинка.Видимость Тогда
			Если Изображения.Количество() = 0 Тогда
				элКартинка.ТекстНевыбраннойКартинки = "Нет изображения";
				элКартинка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				элКартинка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
				элКартинка.РастягиватьПоВертикали = Истина;
				элКартинка.РастягиватьПоГоризонтали = Истина;
				элКартинка.Гиперссылка = Ложь;
				
				ТекущееИзображение = -1;
			Иначе
				элКартинка.Гиперссылка = Истина;
				элКартинка.РастягиватьПоВертикали = Истина;
				элКартинка.РастягиватьПоГоризонтали = Истина;
				элКартинка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				элКартинка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
				
				ТекущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы.Индекс(элКартинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдвиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = "Изображения[%НСтроки%].Адрес";
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "%НСтроки%", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
	Иначе
		ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
	КонецЕсли;
	
	Если КоличествоИзображений = 1 Тогда
		НовоеИзображениеНомер = 1;
	Иначе
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.РастягиватьПоВертикали = Истина;
	НовоеИзображение.РастягиватьПоГоризонтали = Истина;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	ТекущееИзображение = НомерЭлемента;
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюПросмотретьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню);
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Файл = Изображения[ТекущееИзображение].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = -1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

// Устанавливает видимость кнопок контекстного меню изображения.
//
&НаСервере
Процедура ИзображениеВидимостьКоманднойПанели()
	
	ЕстьИзображения = Изображения.Количество();
	Элементы.АдресКартинкиКонтекстноеМенюПросмотретьИзображение.Видимость = ЕстьИзображения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства УНФ
&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередНачаломДобавления(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередУдалением(Элемент, Отказ, Модифицированность);
	УстановитьОтборПоВладельцуНаКлиенте();
	УстановитьОтборПоСвойствамИЗначениям();
	
КонецПроцедуры
// Конец УНФ СтандартныеПодсистемы.Свойства

#КонецОбласти