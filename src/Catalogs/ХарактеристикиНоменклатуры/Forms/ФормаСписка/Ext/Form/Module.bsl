
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	  // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.ХарактеристикиНоменклатуры, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		ОбъектВладелец = Параметры.Отбор.Владелец;
		
		Если ТипЗнч(ОбъектВладелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = ОбъектВладелец.Ссылка;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ИспользоватьХарактеристики, ЭтоНабор, ПроверятьЗаполнениеХарактеристики, ТипНоменклатуры");
				ЭтоНабор = ЗначенияРеквизитов.ЭтоНабор;
				ТипНоменклатуры = ЗначенияРеквизитов.ТипНоменклатуры;
				ИспользоватьХарактеристики = ЗначенияРеквизитов.ИспользоватьХарактеристики;
				ПроверятьЗаполнениеХарактеристики = ЗначенияРеквизитов.ПроверятьЗаполнениеХарактеристики;
				
				Если НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
					И НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					АвтоЗаголовок = Ложь;
					Заголовок = НСтр("ru = 'Характеристики хранятся только для запасов, услуг и работ'");
				КонецЕсли;
				
			КонецЕсли; 
			
			НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", Номенклатура);
			НаборДопРеквизитов = ОбъектВладелец.КатегорияНоменклатуры.НаборСвойствХарактеристики;
			
		ИначеЕсли ТипЗнч(ОбъектВладелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			КатегорияНоменклатуры = ОбъектВладелец.Ссылка;
			
			Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияНоменклатуры, "ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики, ТипНоменклатурыПоУмолчанию");
				ТипНоменклатуры = ЗначенияРеквизитов.ТипНоменклатурыПоУмолчанию;
				ИспользоватьХарактеристики = ЗначенияРеквизитов.ИспользоватьХарактеристики;
				ПроверятьЗаполнениеХарактеристики = ЗначенияРеквизитов.ПроверятьЗаполнениеХарактеристики;
				
			КонецЕсли; 
			
			НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", ОбъектВладелец.Ссылка);
			НаборДопРеквизитов = ОбъектВладелец.НаборСвойствХарактеристики;
			
			Список.ТекстЗапроса = ВариантыТекстаЗапроса(Истина);
			Список.ОсновнаяТаблица = "Справочник.ХарактеристикиНоменклатуры";
			
		Иначе
			
			Элементы.ИзменитьСоставДополнительныхРеквизитов.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ИзменитьСоставДополнительныхРеквизитов.Видимость = Ложь;
		
	КонецЕсли;
	
	Параметры.Свойство("СкрытьРеквизиты", СкрытьРеквизиты);
	
	ИмяКлючаОбъекта = СтрЗаменить(ЭтотОбъект.ИмяФормы,".","");
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Истина);
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Элементы.ПереключениеИзображений.Видимость = СохраненноеЗначение;
		Элементы.ДекорацияРазвернутьОтборы.Видимость = НЕ СохраненноеЗначение;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Номенклатура) И Не ЗначениеЗаполнено(КатегорияНоменклатуры))
		Тогда
		Список.ТекстЗапроса = ВариантыТекстаЗапроса(,Истина);
		Список.ОсновнаяТаблица = "Справочник.ХарактеристикиНоменклатуры";
	КонецЕсли;
	
	ДоступноРедактированиеНоменклатуры = ПравоДоступа("Изменение", Метаданные.Справочники.Номенклатура, Пользователи.АвторизованныйПользователь());
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		ОбновитьПросмотрИзображений();
	ИначеЕсли ИмяСобытия = "ОбновленаОсновнаяКартинка" И Параметр=ТекущаяХарактеристика Тогда
		ОбновитьПросмотрИзображений();
	ИначеЕсли ИмяСобытия = "КопированиеХарактеристик" И ЗначениеЗаполнено(Номенклатура) И Параметр=Номенклатура Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "СортировкаИзменена" Тогда
		УстановитьСортировкуПоУмолчанию();
	ИначеЕсли ИмяСобытия = "ДобавленаХарактеристика" И ЗначениеЗаполнено(Параметр) Тогда 
		ИспользоватьКакОсновнуюПервуюХарактеристикуСервер(Параметр);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИспользоватьХарактеристикиПриИзменении(Элемент)

	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ИспользоватьХарактеристики = ИспользоватьХарактеристики;
		Если Не ИспользоватьХарактеристики Тогда
			ФормаВладельца.Объект.ПроверятьЗаполнениеХарактеристики = ПроверятьЗаполнениеХарактеристики;
		КонецЕсли;
		ФормаВладельца.Модифицированность = Истина;
	КонецЕсли;
	
	ЗаблокироватьКомандыМеню(Не ИспользоватьХарактеристики);
	
	Если Не ИспользоватьХарактеристики Тогда
		ПроверятьЗаполнениеХарактеристики = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если Не ИспользоватьХарактеристики И ОстаткиНоменклатурыСХарактеристиками() Тогда
			Элементы.ГруппаУведомлений.Видимость = Истина;
		Иначе
			Элементы.ГруппаУведомлений.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	Элементы.Список.Обновить();
	Оповестить("ИзменениеЗначенияИспользоватьХарактеристики",ИспользоватьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПроверятьЗаполнениеХарактеристикиПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ПроверятьЗаполнениеХарактеристики = ПроверятьЗаполнениеХарактеристики;
		ФормаВладельца.Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент) 
	
	НайденныйЭлемент = ПолеОтбора(Список.Отбор,"ЭтоКатегория");
	
	Если НайденныйЭлемент = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	НовыйОтбор = НайденныйЭлемент;
		
	Если Режим=0 
		Тогда
		НовыйОтбор.Использование = Ложь;
	ИначеЕсли Режим=1 
		Тогда
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ПравоеЗначение = Ложь;
	ИначеЕсли Режим=2 
		Тогда
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ПравоеЗначение = Истина;
	КонецЕсли;
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	СкорректироватьОтбор();
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	Если ФормаВладельца <> Неопределено И Не ЗапретРедактирования Тогда
		Элементы.ПолеИспользоватьХарактеристики.Доступность = Истина;
	Иначе
		Элементы.ПолеИспользоватьХарактеристики.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Номенклатура) И Не Элементы.Список.ТекущиеДанные.ЭтоКатегория
		Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура("Ключ, ТолькоПросмотр",ВыбраннаяСтрока, Ложь);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(КатегорияНоменклатуры) 
		Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура("Ключ, ТолькоПросмотр",ВыбраннаяСтрока, Ложь);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУведомленийСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Вариант = ПолучитьВариантОтчета("Свободные остатки");
	
	Если Не ЗначениеЗаполнено(Вариант)
		Тогда
		Возврат
	КонецЕсли;
	
	ОтборРасшифровки = Новый Соответствие;
	ОтборРасшифровки.Вставить("Номенклатура", Номенклатура);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контекст", Номенклатура);
	ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// При клике на Характеристику из списка подключаем вывод картинки.
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
		Тогда 
		Если ЗначениеЗаполнено(Номенклатура)
			Тогда
			Если Элемент.ТекущиеДанные.ЭтоКатегория Или Не ИспользоватьХарактеристики
				Тогда
				ЗаблокироватьКомандыМеню();
			Иначе
				ЗаблокироватьКомандыМеню(Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.ПереключениеИзображений.Видимость
			И НЕ ТекущаяХарактеристика = Элементы.Список.ТекущиеДанные.Ссылка Тогда
			
			ТекущаяХарактеристика = Элементы.Список.ТекущиеДанные.Ссылка;
			ПодключитьОбработчикОжидания("ДобавитьПросмотрИзображенийКлиент", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если Не ВыделенныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество()>1
		Тогда
		ТекстВопроса = НСтр("ru='Снять / установить выделенным элементам пометку удаления?'");
	Иначе	
		СтрокаТабличнойЧасти = Элементы.Список.ТекущиеДанные;
		Если СтрокаТабличнойЧасти.ПометкаУдаления И Не СтрокаТабличнойЧасти.ЭтоКатегория 
			Тогда	
			ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку удаления?'");
		Иначе
			ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление?'");
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", СтрокаТабличнойЧасти.Наименование);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуНаУдалениеКлиент", ЭтаФорма, ВыделенныеСтроки);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуНаУдалениеКлиент(Результат, ВыделенныеСтроки) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		НовоеЗначениеПометкиУдаления = ИзменитьПометкуУдаленияСервер(ВыделеннаяСтрока, ЗначениеЗаполнено(Номенклатура));
		
		ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(НовоеЗначениеПометкиУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ВыделеннаяСтрока),
		ВыделеннаяСтрока,
		БиблиотекаКартинок.Информация32);
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаленияСервер(СсылкаНаХарактеристику, ВладелецФормыНоменклатура = Ложь)
	
	Если ТипЗнч(СсылкаНаХарактеристику.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") 
		И ВладелецФормыНоменклатура	Тогда
		Возврат СсылкаНаХарактеристику.ПометкаУдаления;
	КонецЕсли;
	
	ХарактеристикаОбъект = СсылкаНаХарактеристику.ПолучитьОбъект();
	ХарактеристикаОбъект.УстановитьПометкуУдаления(Не ХарактеристикаОбъект.ПометкаУдаления, Истина);
	
	Возврат ХарактеристикаОбъект.ПометкаУдаления;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	КоличествоЭлементовОтбора = Настройки.Отбор.Элементы.Количество();
	
	Если КоличествоЭлементовОтбора >2
		Тогда
		Настройки.Отбор.Элементы.Удалить(Настройки.Отбор.Элементы[0]);
		Настройки.Отбор.Элементы.Удалить(Настройки.Отбор.Элементы[КоличествоЭлементовОтбора-2])
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик события Выполнить команды ИзменитьСоставДополнительныхРеквизитов.
//
Процедура ИзменитьСоставДополнительныхРеквизитов(Команда)
	
	Если НЕ ЗначениеЗаполнено(НаборДопРеквизитов) Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось получить наборы дополнительных реквизитов объекта.
			           |
			           |Возможно у объекта не заполнены необходимые реквизиты.'")
		);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор", НаборДопРеквизитов);
	ПараметрыПерехода.Вставить("Свойство", Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
	
КонецПроцедуры // ИзменитьСоставДополнительныхРеквизитов()

&НаКлиенте
Процедура ДобавитьПросмотрИзображенийКлиент()
	
	ДобавитьПросмотрИзображений();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОт(Команда)

	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", Номенклатура);
	СтруктураОткрытия.Вставить("КопироватьХарактеристики", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Истина);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДругим(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", Номенклатура);
	СтруктураОткрытия.Вставить("КопироватьХарактеристики", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновную(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Список.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номенклатура) 
		Тогда	
		ИспользоватьКакОсновнуюСервер(Номенклатура,  СтрокаТабличнойЧасти.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(КатегорияНоменклатуры)
		Тогда
		ИспользоватьКакОсновнуюСервер(КатегорияНоменклатуры,  СтрокаТабличнойЧасти.Ссылка);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ПоказыватьНедействительную.Пометка = Не Элементы.ПоказыватьНедействительную.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Элементы.ПоказыватьНедействительную.Пометка);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбъединитьВыделенные(Команда)
	
	ПоискИУдалениеДублейКлиент.ОбъединитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти


#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоКатегория = Не ЗначениеЗаполнено(Форма.Номенклатура);
	
	Форма.ЗапретРедактирования = ((Не ЗначениеЗаполнено(Форма.Номенклатура) И Не ЗначениеЗаполнено(Форма.КатегорияНоменклатуры)) Или Не Форма.ДоступноРедактированиеНоменклатуры);
	Если Не Форма.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не Форма.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		И Не Форма.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		Форма.ЗапретРедактирования = Истина;
	КонецЕсли;
		
	Форма.ТолькоПросмотр = Форма.ЗапретРедактирования;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", 				"Доступность", 		Форма.ИспользоватьХарактеристики И НЕ Форма.ЗапретРедактирования И НЕ Форма.ЭтоНабор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолеИспользоватьХарактеристики", 			"Доступность", 		НЕ Форма.ЗапретРедактирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолеИспользоватьХарактеристики", 			"Видимость", 		НЕ Форма.СкрытьРеквизиты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолеПроверятьЗаполнениеХарактеристики", 	"Доступность", 		Форма.ИспользоватьХарактеристики И НЕ Форма.ЗапретРедактирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолеПроверятьЗаполнениеХарактеристики", 	"Видимость", 		НЕ Форма.СкрытьРеквизиты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтоКатегория", 								"Видимость", 		НЕ ЭтоКатегория);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Режим", 									"Видимость", 		НЕ Форма.ЗапретРедактирования И НЕ ЭтоКатегория);
	
	Если ЗначениеЗаполнено(Форма.КатегорияНоменклатуры) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКопирование", 					"Видимость",	 	Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКопирование", 					"Доступность", 		Форма.ИспользоватьХарактеристики И НЕ Форма.СкрытьРеквизиты И НЕ Форма.ЗапретРедактирования);
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗагрузкаДанныхИзВнешнегоИсточника", 	"Доступность", 		Форма.ИспользоватьХарактеристики И НЕ Форма.СкрытьРеквизиты И НЕ Форма.ЗапретРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Список", 									"ТолькоПросмотр", 	НЕ Форма.ИспользоватьХарактеристики);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ЭтотОбъект.ИмяФормы,".","");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВидимостьПанелиОтборов", Элементы.ПереключениеИзображений.Видимость);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	Если НЕ ЗначениеЗаполнено(НастройкиЗагрузкиДанных.ОбщееЗначение) Тогда
		
		ТекстСообщения = НСтр("ru ='Не указан владелец характеристик'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 15, НСтр("ru ='Загрузить характеристики из внешнего источника'"));
		Возврат;
		
	КонецЕсли;
	
	ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	Справочники.ХарактеристикиНоменклатуры.ОбработатьПодготовленныеДанные(РезультатЗагрузки);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// Устанавливает сортировку характеристик в форме списка согласно значением заданным в категории номенклатуры
//
Процедура УстановитьСортировкуПоУмолчанию(КатегорияНоменклатурыОтбор = Неопределено)
	
	Если КатегорияНоменклатурыОтбор = Неопределено
		Тогда
		// Если есть пользовательская настройка
		Для Каждого ЭлементНастройки Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ПорядокКомпоновкиДанных") И ЗначениеЗаполнено(ЭлементНастройки)
				Тогда
				ЭлементНастройки.Элементы.Очистить();
			КонецЕсли
		КонецЦикла;
		
		КатегорияНоменклатурыОтбор = ПолучитьКатегориюНоменклатуры();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КатегорияНоменклатурыОтбор)
		Тогда
		
		Список.Порядок.Элементы.Очистить();
		
		Если КатегорияНоменклатурыОтбор.ПорядокСортировки.Количество()
			Тогда
			Для Каждого СтрокаПорядокСортировки Из КатегорияНоменклатурыОтбор.ПорядокСортировки Цикл
				ЭлементПорядка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЭлементПорядка.Использование = Истина;
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Ссылка." + Строка(СтрокаПорядокСортировки.Свойство));
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЦикла;
		Иначе
			ЭлементПорядка = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядка.Использование = Истина;
			ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Наименование");
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			ЭлементПорядка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает двух владельцев(номенклатуру и категорию) в отбор динамического списка
//
&НаСервере
Процедура СкорректироватьОтбор()
	
	Если ЗначениеЗаполнено(Номенклатура)
		Тогда
		ЭтаФорма.Список.Отбор.Элементы.Очистить();
		
		КатегорияНоменклатурыОтбор = ПолучитьКатегориюНоменклатуры();
		
		СписокОтбораПоВладельцу = Новый СписокЗначений;
		СписокОтбораПоВладельцу.Добавить(Номенклатура);
		
		Если ЗначениеЗаполнено(КатегорияНоменклатурыОтбор)
			Тогда
			СписокОтбораПоВладельцу.Добавить(КатегорияНоменклатурыОтбор); 
			УстановитьСортировкуПоУмолчанию(КатегорияНоменклатурыОтбор);
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("СписокВладельцев",СписокОтбораПоВладельцу);
		Список.Параметры.УстановитьЗначениеПараметра("ВладелецНоменклатура",Номенклатура);
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Владелец");
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеОтбора;
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = СписокОтбораПоВладельцу;
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ЭтоКатегория");
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование = Ложь;
		НовыйОтбор.ЛевоеЗначение = ПолеОтбора;
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Список, "Недействителен", Ложь, , , Истина);
	
КонецПроцедуры

// Устанавливает текст запроса динамического списка для категорий или для общей формы списка
//
&НаСервере
Функция ВариантыТекстаЗапроса(ЗапросДляКатегории = Ложь, ОбщийЗапрос = Ложь)
	
	Если ЗапросДляКатегории
		Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиНоменклатурыПереопределяемый.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатурыПереопределяемый.ВерсияДанных КАК ВерсияДанных,
		|	ХарактеристикиНоменклатурыПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	ХарактеристикиНоменклатурыПереопределяемый.Владелец КАК Владелец,
		|	ХарактеристикиНоменклатурыПереопределяемый.Код КАК Код,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиНоменклатурыПереопределяемый.Владелец) = ТИП(Справочник.КатегорииНоменклатуры)
		|			ТОГДА ХарактеристикиНоменклатурыПереопределяемый.Наименование
		|		ИНАЧЕ ХарактеристикиНоменклатурыПереопределяемый.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ХарактеристикиНоменклатурыПереопределяемый.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	ХарактеристикиНоменклатурыПереопределяемый.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
		|	ХарактеристикиНоменклатурыПереопределяемый.ФайлКартинки КАК ФайлКартинки,
		|	ХарактеристикиНоменклатурыПереопределяемый.Предопределенный КАК Предопределенный,
		|	ХарактеристикиНоменклатурыПереопределяемый.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ХарактеристикиНоменклатурыПереопределяемый.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА НЕ(ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Характеристика ЕСТЬ NULL
		|					И ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Основная,
		|	ЛОЖЬ КАК ЭтоКатегория,
		|	ХарактеристикиНоменклатурыПереопределяемый.Недействителен КАК Недействителен,
		|	ВЫБОР
		|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеФайлов.ЕстьФайлы
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьФайлы
		|{ВЫБРАТЬ
		|	Ссылка.*,
		|	ВерсияДанных,
		|	ПометкаУдаления,
		|	Владелец.*,
		|	Код,
		|	Наименование,
		|	НаименованиеДляПечати,
		|	КиЗГИСМGTIN,
		|	ФайлКартинки.*,
		|	Недействителен,
		|	Предопределенный,
		|	ИмяПредопределенныхДанных,
		|	ЭтоКатегория,
		|	Основная,
		|	ЕстьФайлы}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыПереопределяемый
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчаниюНоменклатура
		|		ПО ХарактеристикиНоменклатурыПереопределяемый.Владелец = ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Номенклатура
		|			И ХарактеристикиНоменклатурыПереопределяемый.Ссылка = ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Характеристика}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ХарактеристикиНоменклатурыПереопределяемый.Ссылка = НаличиеФайлов.ОбъектСФайлами}
		|{ГДЕ
		|	ХарактеристикиНоменклатурыПереопределяемый.Ссылка.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.ВерсияДанных,
		|	ХарактеристикиНоменклатурыПереопределяемый.ПометкаУдаления,
		|	ХарактеристикиНоменклатурыПереопределяемый.Владелец.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.Код,
		|	ХарактеристикиНоменклатурыПереопределяемый.Наименование,
		|	ХарактеристикиНоменклатурыПереопределяемый.НаименованиеДляПечати,
		|	ХарактеристикиНоменклатурыПереопределяемый.КиЗГИСМGTIN,
		|	ХарактеристикиНоменклатурыПереопределяемый.ФайлКартинки.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.Недействителен,
		|	ХарактеристикиНоменклатурыПереопределяемый.Предопределенный,
		|	ХарактеристикиНоменклатурыПереопределяемый.ИмяПредопределенныхДанных,
		|	(ВЫБОР
		|			КОГДА НЕ(ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Характеристика ЕСТЬ NULL
		|						И ЗначенияНоменклатурыПоУмолчаниюНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК Основная,
		|	(ЛОЖЬ) КАК ЭтоКатегория,
		|	(ВЫБОР
		|			КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|				ТОГДА 0
		|			КОГДА НаличиеФайлов.ЕстьФайлы
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьФайлы}";
	ИначеЕсли ОбщийЗапрос
		Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиНоменклатурыПереопределяемый.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатурыПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
		|	ХарактеристикиНоменклатурыПереопределяемый.Владелец КАК Владелец,
		|	ХарактеристикиНоменклатурыПереопределяемый.Код КАК Код,
		|	ХарактеристикиНоменклатурыПереопределяемый.Наименование КАК Наименование,
		|	ХарактеристикиНоменклатурыПереопределяемый.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	ХарактеристикиНоменклатурыПереопределяемый.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
		|	ХарактеристикиНоменклатурыПереопределяемый.ФайлКартинки КАК ФайлКартинки,
		|	ХарактеристикиНоменклатурыПереопределяемый.Недействителен КАК Недействителен,
		|	ХарактеристикиНоменклатурыПереопределяемый.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Свойство КАК Свойство,
		|		Значение КАК Значение,
		|		ТекстоваяСтрока КАК ТекстоваяСтрока
		|	) КАК ДополнительныеРеквизиты,
		|	ХарактеристикиНоменклатурыПереопределяемый.Предопределенный КАК Предопределенный,
		|	ХарактеристикиНоменклатурыПереопределяемый.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВЫБОР
		|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА НаличиеФайлов.ЕстьФайлы
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьФайлы
		|{ВЫБРАТЬ
		|	Ссылка.*,
		|	ПометкаУдаления,
		|	Владелец.*,
		|	Код,
		|	Наименование,
		|	НаименованиеДляПечати,
		|	КиЗГИСМGTIN,
		|	ФайлКартинки.*,
		|	Недействителен,
		|	Предопределенный,
		|	ИмяПредопределенныхДанных,
		|	ЕстьФайлы}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатурыПереопределяемый
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ХарактеристикиНоменклатурыПереопределяемый.Ссылка = НаличиеФайлов.ОбъектСФайлами}
		|{ГДЕ
		|	ХарактеристикиНоменклатурыПереопределяемый.Ссылка.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.ВерсияДанных,
		|	ХарактеристикиНоменклатурыПереопределяемый.ПометкаУдаления,
		|	ХарактеристикиНоменклатурыПереопределяемый.Владелец.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.Код,
		|	ХарактеристикиНоменклатурыПереопределяемый.Наименование,
		|	ХарактеристикиНоменклатурыПереопределяемый.НаименованиеДляПечати,
		|	ХарактеристикиНоменклатурыПереопределяемый.КиЗГИСМGTIN,
		|	ХарактеристикиНоменклатурыПереопределяемый.ФайлКартинки.*,
		|	ХарактеристикиНоменклатурыПереопределяемый.Недействителен,
		|	ХарактеристикиНоменклатурыПереопределяемый.Предопределенный,
		|	ХарактеристикиНоменклатурыПереопределяемый.ИмяПредопределенныхДанных,
		|	(ВЫБОР
		|			КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
		|				ТОГДА 0
		|			КОГДА НаличиеФайлов.ЕстьФайлы
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕстьФайлы}";
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает категорию для текущей номенклатуры
//
&НаСервере
Функция ПолучитьКатегориюНоменклатуры()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КатегорияНоменклатуры;
	
	
КонецФункции

// Устанавливает условное оформление формы для недействительных характеристик
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.Недействителен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "СписокНаименование");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти); 

КонецПроцедуры

// Возвращает Истину, если по номенклатуре есть остатки в разрезе характеристик.
//
&НаСервере
Функция ОстаткиНоменклатурыСХарактеристиками()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И НЕ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЗапасыОстатки";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Получает значение характеристики по умолчанию для категории номенклатуры
//
&НаСервере
Функция ПолучитьЗначениеПоУмолчаниюДляКатегорииНоменклатуры() 
	
	Если Не ЗначениеЗаполнено(Номенклатура) ИЛИ Не ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры)
		Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорияНоменклатуры",Номенклатура.КатегорияНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияНоменклатурыПоУмолчанию.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|ГДЕ
	|	ЗначенияНоменклатурыПоУмолчанию.Номенклатура = &КатегорияНоменклатуры
	|	И НЕ ЗначенияНоменклатурыПоУмолчанию.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		Тогда
		Возврат Выборка.Характеристика;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

// Получает вариант отчета по наименованию
//
&НаСервере
Функция ПолучитьВариантОтчета(НаименованиеВарианта)
	Возврат Справочники.ВариантыОтчетов.НайтиПоНаименованию(НаименованиеВарианта);
КонецФункции

// Блокирует доступность элементов командного и контекстного меню в зависимости от условия
//
&НаКлиенте
Процедура ЗаблокироватьКомандыМеню(ПоказательДоступности = Истина)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаИзменить", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздать", "Доступность", ИспользоватьХарактеристики);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСкопировать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаПометитьНаУдаление", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьПометкуУдаления", "Доступность", НЕ ПоказательДоступности);
	
КонецПроцедуры

// Производит запись в регистр сведений значение характеристики по умолчанию для номенклатуры
//
&НаСервере
Процедура ИспользоватьКакОсновнуюСервер(НоменклатураДляЗаписи, Характеристика)
	
	НаборЗаписей = РегистрыСведений.ЗначенияНоменклатурыПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураДляЗаписи);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()
		Тогда
		НаборЗаписей[0].Характеристика = ?(НаборЗаписей[0].Характеристика = Характеристика, Неопределено, Характеристика)
	Иначе
		ХарактеристикаКатегорииПоУмолчанию = ПолучитьЗначениеПоУмолчаниюДляКатегорииНоменклатуры();
		Если ЗначениеЗаполнено(ХарактеристикаКатегорииПоУмолчанию) И ХарактеристикаКатегорииПоУмолчанию = Характеристика
			Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура = НоменклатураДляЗаписи;
			НоваяЗапись.Характеристика = Неопределено;
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура = НоменклатураДляЗаписи;
			НоваяЗапись.Характеристика = Характеристика
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = Характеристика;
	
КонецПроцедуры

// Производит запись в регистр сведений значение характеристики по умолчанию для номенклатуры если это первая характеристика
//
&НаСервере
Процедура ИспользоватьКакОсновнуюПервуюХарактеристикуСервер(СсылкаНаНовуюХарактеристику)
	
	Если ЗначениеЗаполнено(Номенклатура) И НЕ Номенклатура.ПроверятьЗаполнениеХарактеристики И ПроверятьЗаполнениеХарактеристики
		Тогда	
		Если КоличествоХарактеристик(Номенклатура, Номенклатура.КатегорияНоменклатуры) = 1 И НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(Номенклатура) = Неопределено
			Тогда
			ИспользоватьКакОсновнуюСервер(Номенклатура,  СсылкаНаНовуюХарактеристику);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(КатегорияНоменклатуры) И Не КатегорияНоменклатуры.ПроверятьЗаполнениеХарактеристики И ПроверятьЗаполнениеХарактеристики
		Тогда
		Если КоличествоХарактеристик(КатегорияНоменклатуры) = 1
			Тогда
			ИспользоватьКакОсновнуюСервер(КатегорияНоменклатуры, СсылкаНаНовуюХарактеристику);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество характеристик по владельцу 
//
&НаСервере
Функция КоличествоХарактеристик(ВладелецХарактеристики, КатегорияНоменклатуры = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", ВладелецХарактеристики);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	КоличествоПоВладельцу = Результат.Количество();
	
	КоличествоПоКатегории = 0;
	
	Если Не КатегорияНоменклатуры = Неопределено
		Тогда	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Владелец", КатегорияНоменклатуры);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		КоличествоПоКатегории = Результат.Количество();
	КонецЕсли;	
	
	Возврат КоличествоПоВладельцу + КоличествоПоКатегории;
	
КонецФункции

// Находит поле отбора в динамическом списке
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолеОтбора(ГруппаЭлементовОтбора, ПутьКДаннымПоля)
	
	Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
	Для каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение=Поле Тогда
			Возврат	ЭлементОтбора;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции
#КонецОбласти

#Область Изображение

&НаСервереБезКонтекста
Функция ОтображатьФайлНаФорме(ПрисоединенныйФайл)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	РасширениеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Расширение");
	Возврат ДопустимыеРасширения.Найти(РасширениеФайла) <> Неопределено;
	
КонецФункции

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры // ПросмотретьИзображение()

&НаКлиенте
Процедура СвернутьРазвернутьИзображение(Элемент)
	
	НовоеЗначениеВидимостьКартинки = НЕ Элементы.ПереключениеИзображений.Видимость;
	
	Элементы.ПереключениеИзображений.Видимость = НовоеЗначениеВидимостьКартинки;
	Элементы.ДекорацияРазвернутьОтборы.Видимость = НЕ НовоеЗначениеВидимостьКартинки;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.АдресКартинки.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТекущееИзображение>=0 Тогда
		ПросмотретьПрисоединенныйФайл();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений()
	
	ДобавитьПросмотрИзображений();
	СдвигИзображения(0);
	
КонецПроцедуры

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	Для каждого элКартинка Из Элементы.Изображение.ПодчиненныеЭлементы Цикл
		Если элКартинка.Имя = "АдресКартинки" Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(элКартинка);
	КонецЦикла;
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ ТекущаяХарактеристика.ФайлКартинки.Пустая() Тогда
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(ТекущаяХарактеристика.ФайлКартинки, УникальныйИдентификатор);
		
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = ТекущаяХарактеристика.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
	КонецЕсли;
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ТекущаяХарактеристика, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если Файл.ПометкаУдаления
			ИЛИ НЕ ОтображатьФайлНаФорме(Файл)
			ИЛИ Файл = ТекущаяХарактеристика.ФайлКартинки Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изображения.Добавить();
		НоваяСтрока.Ссылка = Файл;
		НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
	КонецЦикла;
	
	Для каждого элКартинка Из Элементы.Изображение.ПодчиненныеЭлементы Цикл
		Если Изображения.Количество() = 0 Тогда
			элКартинка.ТекстНевыбраннойКартинки = "Нет изображения";
			элКартинка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			элКартинка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
			элКартинка.РастягиватьПоВертикали = Истина;
			элКартинка.РастягиватьПоГоризонтали = Истина;
			элКартинка.Гиперссылка = Ложь;
			
			ТекущееИзображение = -1;
		Иначе
			элКартинка.Гиперссылка = Истина;
			элКартинка.РастягиватьПоВертикали = Истина;
			элКартинка.РастягиватьПоГоризонтали = Истина;
			элКартинка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			элКартинка.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
			Если Элементы.Изображение.ПодчиненныеЭлементы.Индекс(элКартинка)=0 Тогда
				элКартинка.Видимость = Истина;
			Иначе
				элКартинка.Видимость = Ложь;
			КонецЕсли;
			
			ТекущееИзображение = 0;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПрокруткуИзображения();
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдвиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Изображения[%1].Адрес", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
	Иначе
		//ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
		Для каждого элКартинка Из Элементы.Изображение.ПодчиненныеЭлементы Цикл
			Если элКартинка.Видимость = Истина Тогда
				ПредыдущееИзображение = элКартинка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоИзображений = 1 Тогда
		НовоеИзображениеНомер = 1;
	Иначе
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.РастягиватьПоВертикали = Истина;
	НовоеИзображение.РастягиватьПоГоризонтали = Истина;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	ТекущееИзображение = НомерЭлемента;
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	Если Изображения.Количество()>0 Тогда
	
		ОчиститьСообщения();
		
		Файл = Изображения[ТекущееИзображение].Ссылка;
		ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
	КонецЕсли;
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если Изображения.Количество() <= 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Истина;
	КонецЕсли;
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = -1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

#КонецОбласти
