
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			КатегорияНоменклатуры = Параметры.Ключ.Владелец.КатегорияНоменклатуры;
			Номенклатура = Параметры.Ключ.Владелец;
			
		ИначеЕсли ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			КатегорияНоменклатуры = Параметры.Ключ.Владелец;
			Номенклатура = Неопределено;
			
		КонецЕсли;
		
	// Копирование объекта.
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если ТипЗнч(Параметры.ЗначениеКопирования.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = Параметры.ЗначениеКопирования.Владелец;
			КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
			
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			КатегорияНоменклатуры = Параметры.ЗначениеКопирования.Владелец;
			Номенклатура = Неопределено;
			
		КонецЕсли;
		
		Объект.ФайлКартинки = Неопределено;
		
	// Заполнение.
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Владелец") Тогда
			
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				Номенклатура = Параметры.ЗначенияЗаполнения.Владелец;
				КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
				
			ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
				
				КатегорияНоменклатуры = Параметры.ЗначенияЗаполнения.Владелец;
				Номенклатура = Неопределено;
				
			ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СписокЗначений") Тогда
				
				Если Параметры.ЗначенияЗаполнения.Владелец.Количество() = 1 И ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец[0].Значение) = Тип("Массив")
					Тогда
					
					Для каждого ЭлСписка Из Параметры.ЗначенияЗаполнения.Владелец[0].Значение Цикл
						
						Если ТипЗнч(ЭлСписка) = Тип("СправочникСсылка.Номенклатура") Тогда
							Объект.Владелец = ЭлСписка;
							Номенклатура = ЭлСписка;
							КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
							Прервать;
						Иначе
							Объект.Владелец = ЭлСписка;
							КатегорияНоменклатуры = ЭлСписка;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					Для каждого ЭлСписка Из Параметры.ЗначенияЗаполнения.Владелец Цикл
						
						Если ТипЗнч(ЭлСписка.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
							Объект.Владелец = ЭлСписка.Значение;
							Номенклатура = ЭлСписка.Значение;
							КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
							Прервать;
						Иначе
							Объект.Владелец = ЭлСписка.Значение;
							КатегорияНоменклатуры = ЭлСписка.Значение;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("Массив") Тогда
				Для каждого ЭлСписка Из Параметры.ЗначенияЗаполнения.Владелец Цикл
					
					Если ТипЗнч(ЭлСписка) = Тип("СправочникСсылка.Номенклатура") Тогда
						Объект.Владелец = ЭлСписка;
						Номенклатура = ЭлСписка;
						КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
						Прервать;
					Иначе
						Объект.Владелец = ЭлСписка;
						КатегорияНоменклатуры = ЭлСписка;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Элемент создается из формы выбора; заполним значения дополнительных реквизитов значениями отбора.
		Если Параметры.ЗначенияЗаполнения.Свойство("ЗначенияДополнительныхРеквизитов") Тогда
			
			Для каждого Эл Из Параметры.ЗначенияЗаполнения.ЗначенияДополнительныхРеквизитов Цикл
				
				НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = Эл.Ключ;
				НоваяСтрока.Значение = Эл.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		КатегорияНоменклатуры = Неопределено;
		Номенклатура = Неопределено;
		
	КонецЕсли;
	
	ФормироватьНаименованиеДляПечатиАвтоматически = УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеДляПечати
	);
	
	Если Не Отказ Тогда
		ЗаполнитьСписокВыбораВладельца();
	КонецЕсли;
	
	РазрешеноРедактированиеЦенДокументов = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	РазрешеноРедактированиеХарактеристик = ПравоДоступа("Добавление", ОбъектМетаданных) Или ПравоДоступа("Изменение",
		ОбъектМетаданных);
	
	ВидимостьКопированияЦен = НЕ ЗначениеЗаполнено(Объект.Ссылка) И (ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура")) И РазрешеноРедактированиеЦенДокументов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрименитьЦеныНоменклатуры", "Видимость", ВидимостьКопированияЦен);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиУНФ.ТаблицаСвойствПриСозданииНаСервере(ЭтотОбъект);
	Если Не Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Найти("РедактироватьСоставДополнительныхРеквизитов") = Неопределено
		Тогда
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.РедактироватьСоставДополнительныхРеквизитов.Видимость = Ложь;
	КонецЕсли;
	
	// Шаблоны наименований
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Наименование) И Объект.ДополнительныеРеквизиты.Количество() <> 0 Тогда
		// Создается новая номенклатура с передачей значений дополнительных реквизитов.
		СформироватьНаименования();
	КонецЕсли;
	// Конец Шаблоны наименований
	
	ДобавитьПросмотрИзображений();
	
	//+ ГИСМ
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидМаркировкиВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ВидМаркировки");
		Если  ВидМаркировкиВладельца =  Перечисления.ВидыМаркировки.МаркируемаяПродукция
			ИЛИ ВидМаркировкиВладельца = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак Тогда
			Элементы.КиЗГИСМGTIN.Видимость = Истина;
		Иначе
			Элементы.КиЗГИСМGTIN.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.КиЗГИСМGTIN.Видимость = Ложь;
	КонецЕсли;
	
	//-
	
	ЭтоНовый = (Объект.Ссылка.Пустая());
	ЭтоКопия = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	// Изображения
	Элементы.ПереключениеИзображений.Видимость = ЭтоЗапас();
	
	УстановитьНастройкиКонтроляДублей();
	
	// Обмен с сайтом
	ОтображатьКнопкуСортировкиНаФорме = ОбменССайтомПовтИсп.ОтображатьКнопкуСортировкиНаФорме();
	Элементы.АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте.Видимость = ОтображатьКнопкуСортировкиНаФорме;
	Элементы.КнопкаСортировкаФайловНаСайте.Видимость = ОтображатьКнопкуСортировкиНаФорме;

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Шаблоны наименований
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Наименование) И Объект.ДополнительныеРеквизиты.Количество() <> 0 Тогда
		// Создается новая номенклатура с передачей значений дополнительных реквизитов.
		ОбновитьНаименования();
	КонецЕсли;
	// Конец Шаблоны наименований
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект); 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") И НЕ ЭтаФорма.ВладелецФормы.ТекущиеДанные = Неопределено
		Тогда
		ЭтаФорма.ТолькоПросмотр = ?(ЭтаФорма.ВладелецФормы.ТекущиеДанные.Свойство("ЭтоКатегория") И Не ЭтоНовый, ЭтаФорма.ВладелецФормы.ТекущиеДанные.ЭтоКатегория, Ложь);
		Элементы.СвойстваИЗначения.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресКартинкиКонтекстноеМенюДобавитьИзображение", "Доступность", Не ЭтаФорма.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным", "Доступность", Не ЭтаФорма.ТолькоПросмотр);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресКартинкиКонтекстноеМенюУдалитьИзображение", "Доступность", Не ЭтаФорма.ТолькоПросмотр);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Доступность", Не ЭтаФорма.ТолькоПросмотр);
		
		Отказ = ЭтоКопия И ЭтаФорма.ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиУНФ.ТаблицаСвойствОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиУНФ.ТаблицаСвойствПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИзмененаОсновнаяКартинка = ТекущийОбъект.ФайлКартинки <> Объект.Ссылка.ФайлКартинки;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПрименитьЦеныНоменклатуры Тогда
		
		ДеталиЗаписи = Новый Структура; 
		ДеталиЗаписи.Вставить("Период", ТекущаяДата());
		ДеталиЗаписи.Вставить("Номенклатура", Объект.Владелец);
		ДеталиЗаписи.Вставить("Характеристика", Объект.Ссылка);
		ДеталиЗаписи.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		
		ЦенообразованиеСервер.КопироватьЦеныНоменклатурыВНовуюХарактеристику(ДеталиЗаписи);
		
	КонецЕсли;
	
	// Шаблоны наименований
	ШаблоныНаименований.ЗапомнитьШаблоныДляВидовНаименований(ЭтотОбъект, КатегорияНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если ПрименитьЦеныНоменклатуры Тогда
		
		Оповестить("ОбновитьСписокЦенНоменклатуры");
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Оповестить("ДобавленаХарактеристика", Объект.Ссылка, Объект.Владелец);
		ЭтоНовый = Ложь;
	КонецЕсли;
	
	Если ИзмененаОсновнаяКартинка Тогда
	
		Оповестить("ОбновленаОсновнаяКартинка", Объект.Ссылка);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Шаблоны наименований
	Если ИмяСобытия = "Запись_ШаблоныНаименований" Тогда
		
		ШаблоныНаименованийКлиент.ОбработкаОповещенияШаблоныНаименованийПослеЗаписи(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка
			ИЛИ НЕ Параметр.Свойство("ВладелецФайла") Тогда
			
			ОбновитьПросмотрИзображений(Источник);
			
			Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
				И НЕ ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
				
				Если ТипЗнч(Источник) = Тип("Массив") Тогда
					ИзображениеДляПроверки = Источник[0];
				Иначе
					ИзображениеДляПроверки = Источник;
				КонецЕсли;
				Строки = Изображения.НайтиСтроки(Новый Структура("Ссылка", ИзображениеДляПроверки));
				Если Строки.Количество() <> 0 Тогда
					УстановитьИзображениеОсновнымСервер(ИзображениеДляПроверки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Элементы.ДублиАртикул.Видимость Тогда
		ПоказатьПредупреждениеОДублях();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		КатегорияНоменклатуры = ПолучитьНоменклатурнуюГруппуВладельца(Объект.Владелец);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрименитьЦеныНоменклатуры", "Видимость", Истина);
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		КатегорияНоменклатуры = Объект.Владелец;
	Иначе
		КатегорияНоменклатуры = Неопределено;
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыВФорме();
	
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеДляПечатиАвтоматически Тогда
		
		Объект.НаименованиеДляПечати = Объект.Наименование;
		ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
			ЭтотОбъект,
			Объект.НаименованиеДляПечати,
			ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
		);
		
	КонецЕсли;
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Наименование");
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	Объект.НаименованиеДляПечати = СтрЗаменить(Объект.НаименованиеДляПечати, Символы.ПС, " ");
	ФормироватьНаименованиеДляПечатиАвтоматически = УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(Объект.Наименование, Объект.НаименованиеДляПечати);
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Наименование <> Элементы.Наименование.ТекстРедактирования Тогда
		
		Объект.Наименование = Элементы.Наименование.ТекстРедактирования;
		НаименованиеПриИзменении(Элементы.Наименование);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.НаименованиеДляПечати <> Элементы.НаименованиеДляПечати.ТекстРедактирования Тогда
		
		Объект.НаименованиеДляПечати = Элементы.НаименованиеДляПечати.ТекстРедактирования;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеДляПечатиНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Не Объект.Недействителен Тогда Возврат КонецЕсли;
	
	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр("ru = 'Для установки ""Недействителен"" необходимо снять свойство ""Основной"".'"), , НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)

	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Артикул");
	ОбновитьНаименования();
	
	ПроверитьНаДубли("Артикул");

КонецПроцедуры

&НаКлиенте
Процедура ДублиАртикулНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	
	ПараметрыДублей.Вставить("Артикул", АртикулДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольДублей 

&НаКлиенте
Процедура ПроверитьХарактеристикуНаДубли(Команда)
	
	Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 49);
	ПроверитьНоменклатуруНаДублиСервер();
	Состояние(НСтр("ru='Проверка номенклатуры на дубли'"), 100);
	
	ПоказатьСообщениеОДублях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиКонтроляДублей()
	
	Элементы.ДублиАртикул.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаДубли(Реквизит, АвтозаполнениеРеквизита = Ложь)
	
	НастройкиКонтроляДублей = Константы.НастройкиКонтроляДублейНоменклатура.Получить().Получить();
	
	Если НастройкиКонтроляДублей = Неопределено Тогда 
		Возврат 
	КонецЕсли;
	
	ПроверятьАртикул = НастройкиКонтроляДублей.Получить("ПроверятьАртикул");
	
	Если НЕ ПроверятьАртикул = Истина Тогда 
		Возврат 
	КонецЕсли;
	
	Если Реквизит = "Артикул" Тогда
		
		Если Не ПроверятьАртикул Тогда 
			Элементы["Дубли"+Реквизит].Видимость = Ложь;
			Возврат
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Артикул) Тогда
			Возврат;
		КонецЕсли;
		АртикулДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Артикул, Истина);
	КонецЕсли;
	
	ЗапросНоменклатура = Новый Запрос;
	ЗапросНоменклатура.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.Ссылка = &Ссылка
	|	И Номенклатура.Артикул ПОДОБНО &Артикул";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") = Истина Тогда
	
		ЗапросНоменклатура.Текст = ЗапросНоменклатура.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Характеристика.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристика
		|ГДЕ
		|	Характеристика.Артикул ПОДОБНО &Артикул";
	
	КонецЕсли;
	
	ЗапросНоменклатура.УстановитьПараметр("Ссылка", Объект.Владелец);
	ЗапросНоменклатура.УстановитьПараметр("Артикул", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
	
	Результат = ЗапросНоменклатура.Выполнить();
	
	Элементы["Дубли"+Реквизит].Видимость = НЕ Результат.Пустой();

КонецПроцедуры

&НаСервере
Функция НаименованиеДляПоискаДублей(СтрокаПоиска, ТочноеСоответствие = Ложь)
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска)Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ТочноеСоответствие Тогда
		
		ПоисковоеВыражение = СтрЗаменить(СтрокаПоиска, "-", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
		
		Возврат "%" + СокрЛП(ПоисковоеВыражение) + "%";
		
	Иначе
		
		ПоисковоеВыражение = СтрЗаменить(СтрокаПоиска, "-", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "");
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "");
		
		Возврат СокрЛП(ПоисковоеВыражение);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборДублей(ВыбраннаяНоменклатура)
	
	ЗакрыватьПриВыборе = Ложь;
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", ВыбраннаяНоменклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОДублях()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПредупреждениеДублей",ЭтотОбъект);
	ТекстПредупреждения = ТекстПредупрежденияПоДублям();

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Проигнорировать и записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, СписокКнопок,,КодВозвратаДиалога.Отмена, "Контроль дублей");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыПредупреждениеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СозданКопированием = Ложь;
	
	ПроигнорированоСообщениеОДублях = Истина;
	СообщениеОДублированииИнформации = ТекстПредупрежденияПоДублям(Истина);
	
	Элементы.ДублиАртикул.Видимость = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруНаДублиСервер(КонтрольПоДублям = Истина)
	
	НастройкиКонтроляДублей = Константы.НастройкиКонтроляДублейНоменклатура.Получить().Получить();
	
	Если НастройкиКонтроляДублей = Неопределено Тогда 
		КонтрольПоДублям = Ложь;
		Возврат 
	КонецЕсли;
	
	ПроверятьАртикул = НастройкиКонтроляДублей.Получить("ПроверятьАртикул");
	
	Если Не ПроверятьАртикул Тогда 
		КонтрольПоДублям = Ложь;
	КонецЕсли;
	
	ПроверитьНаДубли("Артикул");
	
КонецПроцедуры

&НаКлиенте
Функция ТекстПредупрежденияПоДублям(СообщениеПриЗаписи = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если Элементы.ДублиАртикул.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'артикулу'"));
	КонецЕсли;
	
	Если СообщениеПриЗаписи Тогда
		Возврат НСтр("ru = 'Проигнорировано сообщение о дублировании информации по '") + СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Найдены дубли по: '") + СтрСоединить(МассивСтрок,", ");
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеОДублях()
	
	Если НЕ Элементы.ДублиАртикул.Видимость Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дублей не найдено'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупрежденияПоДублям());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("ВыбранДубльНоменклатуры") Тогда
		
		ОбработатьВыборДублей(РезультатЗакрытия.ВыбраннаяНоменклатура);
		Элементы.ДублиАртикул.Видимость = Ложь;
		НоменклатураЗамененаНаДубль = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаСортировкаФайловНаСайте(Команда)
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВладелецФайлов" , Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СортировкаФайловДляСайта.Форма.ФормаНастройки" , ПараметрыОткрытияФормы , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// Устанавливает основным выбранное изображение (будет показываться первым).
//
&НаКлиенте
Процедура УстановитьИзображениеОсновным(Команда)
	
	Если ТекущееИзображение < 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИзображениеОсновнымСервер(Изображения[ТекущееИзображение].Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	ПрисоединенныйФайл = Изображения[ТекущееИзображение].Ссылка;
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл);
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_Файл", Новый Структура, ПрисоединенныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры // ПросмотретьИзображение()

#Область СлужебныеПроцедурыИФункции

Функция ЭлементОсновной()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияНоменклатурыПоУмолчанию.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ЗначенияНоменклатурыПоУмолчанию КАК ЗначенияНоменклатурыПоУмолчанию
	|ГДЕ
	|	ЗначенияНоменклатурыПоУмолчанию.Характеристика = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаСервере
Функция ЭтоЗапас()
	
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Запас;
	ИначеЕсли ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТипНоменклатурыПоУмолчанию") = Перечисления.ТипыНоменклатуры.Запас;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьНоменклатурнуюГруппуВладельца(НоменклатураВладелец)
	
	Возврат НоменклатураВладелец.КатегорияНоменклатуры;
	
КонецФункции // ПолучитьНоменклатурнуюГруппуВладельца()

&НаСервере
Процедура ЗаполнитьСписокВыбораВладельца()
	
	Элементы.Владелец.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		Элементы.Владелец.СписокВыбора.Добавить(КатегорияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Владелец.СписокВыбора.Добавить(Номенклатура);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВладельца()

// Присваивает соответствующее значение переменной ФормироватьНаименованиеДляПечатиАвтоматически.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(Наименование, НаименованиеДляПечати)
	
	Возврат (Наименование = НаименованиеДляПечати ИЛИ ПустаяСтрока(НаименованиеДляПечати));
	
КонецФункции // УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически()

#КонецОбласти

#Область Изображение

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РазрешеноРедактированиеХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееИзображение >= 0 Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли Не ЭтаФорма.ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

&НаСервере
Функция ОтображатьФайлНаФорме(ПрисоединенныйФайл, ПроверятьПометкуУдаления = Истина)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла,ПометкаУдаления,Расширение");
	
	Если ПроверятьПометкуУдаления И СвойстваФайла.ПометкаУдаления
		ИЛИ СвойстваФайла.ВладелецФайла <> Объект.Ссылка
		ИЛИ ДопустимыеРасширения.Найти(СвойстваФайла.Расширение) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений(Знач ИзмененныеФайлы = Неопределено)
	
	ОбновитьПросмотрИзображений = (ИзмененныеФайлы = Неопределено);
	
	Если ИзмененныеФайлы <> Неопределено Тогда
		Если ТипЗнч(ИзмененныеФайлы) <> Тип("Массив") Тогда
			ИзмененныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзмененныеФайлы);
		КонецЕсли;
		
		Для каждого Файл Из ИзмененныеФайлы Цикл
			ОбновитьПросмотрИзображений = ОтображатьФайлНаФорме(Файл, Ложь);
			Если ОбновитьПросмотрИзображений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОбновитьПросмотрИзображений Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененоОсновноеИзображение = Ложь;
	Если ЗначениеЗаполнено(Объект.ФайлКартинки)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлКартинки, "ПометкаУдаления") Тогда
		Объект.ФайлКартинки = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
	
	ДобавитьПросмотрИзображений();
	СдвигИзображения(0);
	
КонецПроцедуры

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ Объект.ФайлКартинки.Пустая() Тогда
		
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор);
		
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = Объект.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
	КонецЕсли;
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если НЕ ОтображатьФайлНаФорме(Файл)
			ИЛИ Файл = Объект.ФайлКартинки Тогда
			Продолжить;
		КонецЕсли;
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изображения.Добавить();
		НоваяСтрока.Ссылка = Файл;
		НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		
	КонецЦикла;
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	ОтображаемоеИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
	ОтображаемоеИзображение.ТекстНевыбраннойКартинки = Элементы.АдресКартинки.ТекстНевыбраннойКартинки;
	Если Изображения.Количество() = 0 Тогда
		ТекущееИзображение = -1;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	Иначе
		ТекущееИзображение = 0;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	КонецЕсли;
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдвиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Изображения[%1].Адрес", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
		НовоеИзображениеНомер = 1;
	Иначе
		ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.АвтоМаксимальнаяШирина = Ложь;
	НовоеИзображение.МаксимальнаяШирина = 21;
	НовоеИзображение.Высота = 7;
	НовоеИзображение.РастягиватьПоВертикали = Ложь;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	ТекущееИзображение = НомерЭлемента;
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюПросмотретьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУдалитьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюДобавитьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Файл = Изображения[ТекущееИзображение].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

&НаСервере
Процедура ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл)
	
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры

// Процедура добавления изображения для номенклатуры
//
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ДобавитьИзображениеНаКлиентеФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
		СдвигИзображения(Изображения.Количество()-ТекущееИзображение-1);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИзображениеНаКлиенте()

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если Изображения.Количество() <= 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Истина;
	КонецЕсли;
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ЭлементАдресКартинки = Элементы.Найти("АдресКартинки1");
	Если ЭлементАдресКартинки <> Неопределено Тогда
		ТекущийЭлемент = ЭлементАдресКартинки;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопок контекстного меню изображения.
//
&НаСервере
Процедура ИзображениеВидимостьКоманднойПанели()
	
	ЕстьИзображения = Изображения.Количество();
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюУдалитьИзображение.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюПросмотретьИзображение.Видимость = ЕстьИзображения;
	
	ЭтоОсновноеИзображение = Ложь;
	Если ЕстьИзображения Тогда
		ЭтоОсновноеИзображение = (Изображения[ТекущееИзображение].Ссылка = Объект.ФайлКартинки);
	КонецЕсли;
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка = ЭтоОсновноеИзображение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИзображениеОсновнымСервер(ПрисоединенныйФайл)
	
	ФайлКартинки = Неопределено;
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Массив") Тогда
		Для каждого Эл Из ПрисоединенныйФайл Цикл
			Если ОтображатьФайлНаФорме(Эл, Ложь) Тогда
				ФайлКартинки = Эл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОтображатьФайлНаФорме(ПрисоединенныйФайл, Ложь) Тогда
		ФайлКартинки = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлКартинки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФайлКартинки = Неопределено ИЛИ Объект.ФайлКартинки = ФайлКартинки Тогда
		Объект.ФайлКартинки = Неопределено;
	Иначе
		Объект.ФайлКартинки = ФайлКартинки;
	КонецЕсли;
	Модифицированность = Истина;
	
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныНаименований

&НаКлиенте
Процедура Подключаемый_НаименованиеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеДляПечатиНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеДляПечатиОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.НаименованиеДляПечати
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		КатегорияНоменклатуры,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеДляПечатиОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		КатегорияНоменклатуры,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименования()
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
	);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление)
	
	Возврат ШаблоныНаименований.ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление);
	
КонецФункции

&НаСервере
Процедура СформироватьНаименования()
	
	ШаблоныНаименований.СформироватьНаименования(ЭтотОбъект, КатегорияНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// УНФ СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииТаблицыДопРеквизитов(ЭтотОбъект, Свойства_ТаблицаСвойстваИЗначения);
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередНачаломДобавления(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Модифицированность = Истина;
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередУдалением(Элемент, Отказ, Модифицированность);
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииТаблицыДопРеквизитов(ЭтотОбъект, Свойства_ТаблицаСвойстваИЗначения);
	ОбновитьНаименования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыВФорме()
	
	УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

// Конец УНФ СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
