#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("ЗначениеШтрихкода");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Данные.ЗначениеШтрихкода) Тогда
		Представление = Данные.ЗначениеШтрихкода;
	Иначе
		Представление = НСтр("ru = 'Штрихкод не указан'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтруктураСозданияШтрихкодаУпаковки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидПродукции");
	Результат.Вставить("ТипУпаковки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("Штрихкод", "");
	Результат.Вставить("ХешСумма", "");
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Упаковка");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество", 0);
	Результат.Вставить("ДатаУпаковки", '00010101');
	Результат.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	Результат.Вставить("ХэшСуммаНормализации", "");
	
	Возврат Результат;
	
КонецФункции

// Создает элементы справочника Штрихкоды упаковок по данным дерева маркированной продукции, сформированного в форме проверки и подбора.
//
// Параметры:
//   ДеревоМаркированнойПродукции     - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме.
//   ТаблицаШтрихкодовВерхнегоУровня  - ТаблицаЗначений - в таблицу помещаются данные о содержимом верхнего уровня.
//   ШтрихкодыУпаковок - ТаблицаЗначений, Неопределено  - в данную таблицу помещаются уже существующие в информационной базе упаковки.
//   КэшСтатусовУказанияСерий - Произвольный            - кэш статусов указания серий
//   ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
//   Структура - результат обработки:
// * ВложенныеШтрихкодыУпаковок - Массив - вложенные в текущую упаковку штриховые коды.
//
Функция РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции,
	ТаблицаШтрихкодовВерхнегоУровня, ШтрихкодыУпаковок = Неопределено, КэшСтатусовУказанияСерий = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ЭтоСтрокаДереваЗначений = (ТипЗнч(ДеревоМаркированнойПродукции) = Тип("СтрокаДереваЗначений"));
	Если ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		КоличествоПодчиненнойМаркированнойПродукции = 1;
	ИначеЕсли ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.Строки.Количество() = 0 Тогда
		// Количество уже расчитано в форме проверки и подбора
		КоличествоПодчиненнойМаркированнойПродукции = ДеревоМаркированнойПродукции.КоличествоПодчиненнойПродукции;
	Иначе
		// Количество будет получено из подчиненных строк
		КоличествоПодчиненнойМаркированнойПродукции = 0;
	КонецЕсли;

	ВозвращаемоеЗначение = Новый Структура(
		"ВложенныеШтрихкодыУпаковок", Новый Массив);
	
	Если ШтрихкодыУпаковок = Неопределено Тогда
		ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
			ШтрихкодированиеИС.ЗначенияШтрихкодовИзДереваМаркируемойПродукции(
				ДеревоМаркированнойПродукции));
	КонецЕсли;
	
	ПараметрыСоздания = ПараметрыСозданияШтрихкода();
	ПараметрыСоздания.ОтключитьПоискСуществующего = Истина;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует
			
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
					И СтрокаДерева.НедопустимыйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Результат = Новый Структура(
				"ВложенныеШтрихкодыУпаковок", Новый Массив);
		Иначе
			Результат = РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(СтрокаДерева,
				ТаблицаШтрихкодовВерхнегоУровня, ШтрихкодыУпаковок, КэшСтатусовУказанияСерий, ВидПродукции);
			// Не создавать упаковки с недопустимым статусом кода, но создавать упаковки вложений
			Если СтрокаДерева.НедопустимыйКодМаркировки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок,
					Результат.ВложенныеШтрихкодыУпаковок);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ПараметрыОтбора.Вставить("ХешСумма", СтрокаДерева.ХешСумма);
		НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда
			
			НайденныйШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0];
			ШтрихкодУпаковки = НайденныйШтрихкодУпаковки.Ссылка;
			
			Если СтрокаДерева.Номенклатура = НайденныйШтрихкодУпаковки.Номенклатура
					И СтрокаДерева.Характеристика = НайденныйШтрихкодУпаковки.Характеристика
					И ЗначениеЗаполнено(СтрокаДерева.Серия)
					И СтрокаДерева.Серия <> НайденныйШтрихкодУпаковки.Серия Тогда
				НовыеЗначенияРеквизитов = Новый Структура;
				НовыеЗначенияРеквизитов.Вставить("Серия", СтрокаДерева.Серия);
				ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, НовыеЗначенияРеквизитов);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
					И Не ЗначениеЗаполнено(НайденныйШтрихкодУпаковки.Номенклатура) Тогда
				НовыеЗначенияРеквизитов = Новый Структура;
				НовыеЗначенияРеквизитов.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
				НовыеЗначенияРеквизитов.Вставить("Характеристика", СтрокаДерева.Характеристика);
				НовыеЗначенияРеквизитов.Вставить("Серия",          СтрокаДерева.Серия);
				ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, НовыеЗначенияРеквизитов);
			КонецЕсли;
			
		Иначе
			
			ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ВидПродукции") Тогда
				ДанныеНовойУпаковки.ВидПродукции = ?(ЗначениеЗаполнено(СтрокаДерева.ВидПродукции), СтрокаДерева.ВидПродукции, ВидПродукции);
			Иначе
				ДанныеНовойУпаковки.ВидПродукции = ВидПродукции;
			КонецЕсли;
			ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
			ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
			ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;
			
			ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
			ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
			ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;
			ДанныеНовойУпаковки.ТипШтрихкода   = СтрокаДерева.ТипШтрихкода;
			
			ДанныеНовойУпаковки.ХэшСуммаНормализации = СтрокаДерева.ХэшСуммаНормализации;
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоПодчиненнойПродукции;
				ДанныеНовойУпаковки.ХешСумма   = СтрокаДерева.ХешСумма;
			ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
				ДанныеНовойУпаковки.ХешСумма = СтрокаДерева.ХешСумма;
			ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеНовойУпаковки.Количество = 1;
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
			ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);
			
			ШтрихкодУпаковки = СоздатьШтрихкодУпаковки(
				ДанныеНовойУпаковки,
				Результат.ВложенныеШтрихкодыУпаковок,
				ПараметрыЗаписи,
				КэшСтатусовУказанияСерий,
				ПараметрыСоздания);
			
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
			НоваяСтрока.ХешСумма = ДанныеНовойУпаковки.ХешСумма;
			НоваяСтрока.Ссылка   = ШтрихкодУпаковки;
			
		КонецЕсли;
		
		СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;
		
		Если ТипЗнч(ДеревоМаркированнойПродукции) = Тип("ДеревоЗначений")
			Или ТипЗнч(ДеревоМаркированнойПродукции.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			
			НоваяСтрокаШтрихкодыВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня.Добавить();
			НоваяСтрокаШтрихкодыВерхнегоУровня.Штрихкод         = СтрокаДерева.Штрихкод;
			НоваяСтрокаШтрихкодыВерхнегоУровня.ШтрихкодУпаковки = ШтрихкодУпаковки;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КоличествоПодчиненнойМаркированнойПродукции = КоличествоПодчиненнойМаркированнойПродукции + 1;
		Иначе
			КоличествоПодчиненнойМаркированнойПродукции = КоличествоПодчиненнойМаркированнойПродукции + СтрокаДерева.КоличествоПодчиненнойПродукции;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
		
	КонецЦикла;
	
	Если ЭтоСтрокаДереваЗначений Тогда
		ДеревоМаркированнойПродукции.КоличествоПодчиненнойПродукции = КоличествоПодчиненнойМаркированнойПродукции;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Создает элементы справочника Штрихкоды упаковок по данным дерева маркированной продукции, сформированного в форме проверки и подбора.
//
// Параметры:
//   ДеревоМаркированнойПродукции - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме
//   ШтрихкодыУпаковок - ТаблицаЗначений, Неопределено - в данную таблицу помещаются уже существующие в информационной базе упаковки
//   КэшСтрокДерева - Соответствие, Неопределено - известные кешированные значения
//
Процедура ЗаполнитьШтрихкодыУпаковокПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции, ШтрихкодыУпаковок = Неопределено, КэшСтрокДерева = Неопределено) Экспорт
	
	Если ШтрихкодыУпаковок = Неопределено Тогда
		ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
			ШтрихкодированиеИС.ЗначенияШтрихкодовИзДереваМаркируемойПродукции(
				ДеревоМаркированнойПродукции));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если КэшСтрокДерева = Неопределено Тогда
			КэшСтрокДерева = Новый Соответствие;
		КонецЕсли;
		
		КэшСтроки = КэшСтрокДерева.Получить(СтрокаДерева);
		Если КэшСтроки = Неопределено Тогда

			КэшСтроки = Новый Структура;
			КэшСтроки.Вставить("ВложенныеУпаковки", Новый Массив);
			КэшСтроки.Вставить("ВложенныеХешСуммы", Новый СписокЗначений);
			КэшСтрокДерева.Вставить(СтрокаДерева, КэшСтроки);

		КонецЕсли;

		КэшСтрокиРодителя = КэшСтрокДерева.Получить(СтрокаДерева.Родитель);
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ЗаполнитьШтрихкодыУпаковокПоДеревуМаркируемойПродукции(
				СтрокаДерева, ШтрихкодыУпаковок, КэшСтрокДерева);
		КонецЕсли;
		
		Если КэшСтрокиРодителя <> Неопределено Тогда
			КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.Штрихкод);
			КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;
		
		ХешСуммаУпаковки = ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ПараметрыОтбора.Вставить("ХешСумма", ХешСуммаУпаковки);
		НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда
			НайденныйШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0];
			ШтрихкодУпаковки = НайденныйШтрихкодУпаковки.Ссылка;
		Иначе
			ШтрихкодУпаковки = Неопределено;
		КонецЕсли;
		
		СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;
		
	КонецЦикла;
	
КонецПроцедуры


// Создает элементы справочника на основе данных дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//
Процедура СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок) Экспорт

	ТаблицаШтрихкодыУпаковок = СуществующиеЭлементыШтрихкодовДерева(ДеревоУпаковок);
	КэшСтрокДерева = Новый Соответствие;
	КэшСтатусовУказанияСерий = Новый Соответствие;
	СоздатьШтрихкодыУпаковокПоСтрокамДерева(
		ДеревоУпаковок.Строки, ТаблицаШтрихкодыУпаковок, КэшСтрокДерева, КэшСтатусовУказанияСерий);

КонецПроцедуры

//Возвращает элемент справочника по реквизиту. Если элемент не найден, возвращает Неопределено.
//
//Параметры:
//   ЗначениеШтрихкода - Строка - ключ поиска.
//
//Возвращаемое значение:
//   СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - найденный элемент справочника.
//
Функция ПолучитьПоЗначениюШтрихкода(ЗначениеШтрихкода) Экспорт
	
	ДанныеШтрихкода = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеШтрихкода.Ссылка;
	
КонецФункции

//Возвращает данные справочника. Если элемент не найден, возвращает Неопределено.
//
//Параметры:
//   ЗначениеШтрихкода - Строка - ключ поиска.
//
//Возвращаемое значение:
//   Структура.
//
Функция ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода) Экспорт
	
	ЗначенияШтрихкодов = Новый Массив;
	ЗначенияШтрихкодов.Добавить(ЗначениеШтрихкода);
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов);
	
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ШтрихкодыУпаковок[0]);
	
КонецФункции

// Создает новый элемент справочник по переданным параметрам.
// 
// Параметры:
// 	ДанныеШтрихкодаУпаковки - Структура - Описание:
// * Ответственный - Справочникссылка.Пользователи - 
// * ДатаУпаковки - Дата -
// * Количество - Число -
// * Серия - ОпределяемыйТип.СерияНоменклатуры- 
// * Упаковка - ОпределяемыйТип.Упаковка - 
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - 
// * Номенклатура - ОпределяемыйТип.Номенклатура - 
// * ХешСумма - Строка -
// * Штрихкод - Строка -
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - 
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - 
// * ВидПродукции - Перечислениессылка.ВидыПродукцииИС - 
// 	ВложенныеШтрихкоды - Неопределено, Массив - Описание
// 	ПараметрыЗаписи - Структура, Неопределено - Описание:
// * НеРассчитыватьХешСумму - Булево -
// * НеРассчитыватьКоличествоВложенныхШтрихкодов - Булево -
// 	КэшСтатусовУказанияСерий - Произвольный, Неопределено, Соответствие - Описание
// 	ПараметрыСоздания - См. ПараметрыСозданияШтрихкода
// Возвращаемое значение:
// 	СправочникСсылка.ШтрихкодыУпаковокТоваров - Описание
Функция СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки, ВложенныеШтрихкоды = Неопределено,
	ПараметрыЗаписи = Неопределено, КэшСтатусовУказанияСерий = Неопределено, ПараметрыСоздания = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	НовыйЭлемент.Номенклатура   = ДанныеШтрихкодаУпаковки.Номенклатура;
	НовыйЭлемент.Характеристика = ДанныеШтрихкодаУпаковки.Характеристика;
	НовыйЭлемент.Серия          = ДанныеШтрихкодаУпаковки.Серия;
	
	Если КэшСтатусовУказанияСерий = Неопределено Тогда
		КэшСтатусовУказанияСерий = Новый Соответствие();
		СтатусУказанияСерий = Неопределено;
	Иначе
		СтатусУказанияСерий = КэшСтатусовУказанияСерий[ДанныеШтрихкодаУпаковки.Номенклатура];
	КонецЕсли;
	
	Если СтатусУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НовыйЭлемент, Справочники.ШтрихкодыУпаковокТоваров);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НовыйЭлемент, ПараметрыУказанияСерий);
		
		КэшСтатусовУказанияСерий.Вставить(ДанныеШтрихкодаУпаковки.Номенклатура, НовыйЭлемент.СтатусУказанияСерий);
	Иначе
		НовыйЭлемент.СтатусУказанияСерий = СтатусУказанияСерий;
	КонецЕсли;
	
	НовыйЭлемент.Серия = ДанныеШтрихкодаУпаковки.Серия;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДанныеШтрихкодаУпаковки,,"Номенклатура, Характеристика, Серия");
	
	НовыйЭлемент.ЗначениеШтрихкода = ДанныеШтрихкодаУпаковки.Штрихкод;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ТипШтрихкода) Тогда
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			НовыйЭлемент.ЗначениеШтрихкода, ДанныеШтрихкодаУпаковки.ВидПродукции, ПримечаниеКРезультатуРазбора);
		Если ДанныеРазбора <> Неопределено Тогда
			НовыйЭлемент.ТипШтрихкода = ДанныеРазбора.ТипШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		Для Каждого Штрихкод Из ВложенныеШтрихкоды Цикл
			СтрокаТЧ = НовыйЭлемент.ВложенныеШтрихкоды.Добавить();
			СтрокаТЧ.Штрихкод = Штрихкод;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
		НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		
		Для Каждого ПараметрЗаписи Из ПараметрыЗаписи Цикл
			НовыйЭлемент.ДополнительныеСвойства.Вставить(ПараметрЗаписи.Ключ, ПараметрЗаписи.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОтключитьПоискСуществующего = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыСоздания, "ОтключитьПоискСуществующего", Ложь);
	
	Если ЗначениеЗаполнено(НовыйЭлемент.ЗначениеШтрихкода) И Не ОтключитьПоискСуществующего Тогда
		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовыйЭлемент.ЗначениеШтрихкода);
		
		Если ДанныеУпаковки <> Неопределено И Не ЭтоПустаяУпаковка(ДанныеУпаковки) Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Элемент справочника со значением штрихкода %1 уже существует.
					       |Необходимо использовать другое значение штрихкода.'"),
				НовыйЭлемент.ЗначениеШтрихкода);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Процедура ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, ЗначенияРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ШтрихкодУпаковки);
		Блокировка.Заблокировать();
		
		ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
		Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
			ШтрихкодУпаковкиОбъект[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
		КонецЦикла;
		
		Если ЗначенияРеквизитов.Свойство("Серия") Тогда
			ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ШтрихкодУпаковкиОбъект, Справочники.ШтрихкодыУпаковокТоваров);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ШтрихкодУпаковкиОбъект, ПараметрыУказанияСерий);
			ЗначенияРеквизитов.Свойство("Серия", ШтрихкодУпаковкиОбъект.Серия);
		КонецЕсли;
	
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьХешСумму", Истина);
	
		ШтрихкодУпаковкиОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Запись штрихкода упаковки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодУпаковки(ШтрихкодУпаковки, ЗначенияРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
	ШтрихкодУпаковкиОбъект.Заблокировать();
	
	Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
		ШтрихкодУпаковкиОбъект[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
	Если ЗначенияРеквизитов.Свойство("Серия") Тогда
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ШтрихкодУпаковкиОбъект, Справочники.ШтрихкодыУпаковокТоваров);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ШтрихкодУпаковкиОбъект, ПараметрыУказанияСерий);
		ЗначенияРеквизитов.Свойство("Серия", ШтрихкодУпаковкиОбъект.Серия);
	КонецЕсли;
	
	ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьХешСумму", Истина);
	
	ШтрихкодУпаковкиОбъект.Записать();
	
КонецПроцедуры

Функция ХешСуммаСодержимогоУпаковки(ДанныеДляВычисления) Экспорт
	
	Если ДанныеДляВычисления.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеДляВычисления.СортироватьПоЗначению();
	СтрокаДляРасчетаХеша = СтрСоединить(ДанныеДляВычисления.ВыгрузитьЗначения());
	
	Возврат ХэшСуммаСтроки(СтрокаДляРасчетаХеша);
	
КонецФункции

Функция ХэшСуммаСтроки(СтрокаДляРасчетаХеша) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	
	Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
КонецФункции

Функция ДанныеДляВычисленияХешСуммы(ШтрихкодУпаковкиТовара) Экспорт
	
	ДанныеДляВычисления = Новый СписокЗначений;
	
	Если ТипЗнч(ШтрихкодУпаковкиТовара) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|			ТОГДА ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|		ИНАЧЕ ШтрихкодыУпаковокТоваров.ХешСумма
		|	КОНЕЦ КАК УчитываемаяСтрока
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ШтрихкодыУпаковокТоваров.Ссылка
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ШтрихкодУпаковкиТовара);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеДляВычисления.Добавить(Выборка.УчитываемаяСтрока);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ШтрихкодУпаковкиТовара) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		МассивВложенныхШтрихкодов = Новый Массив;
		Для Каждого СтрокаВложенныйШтрихкод Из ШтрихкодУпаковкиТовара.ВложенныеШтрихкоды Цикл
			МассивВложенныхШтрихкодов.Добавить(СтрокаВложенныйШтрихкод.Штрихкод);
		КонецЦикла;
		
		Если МассивВложенныхШтрихкодов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
			|			ТОГДА ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
			|		ИНАЧЕ ШтрихкодыУпаковокТоваров.ХешСумма
			|	КОНЕЦ КАК УчитываемаяСтрока
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|ГДЕ
			|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивВложенныхШтрихкодов)");
			
			Запрос.УстановитьПараметр("МассивВложенныхШтрихкодов", МассивВложенныхШтрихкодов);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ДанныеДляВычисления.Добавить(Выборка.УчитываемаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляВычисления;
	
КонецФункции

//Возвращает параметры для заполнения свойств, связанных с номенклатурой по вложенным штрихкодам.
// Если объект не имеет вложенных штрихкодов, тогда структура заполняется текущими реквизитами объекта.
// Для проверки по вложенным штрихкодам достаточно брать непосредственно вложенные штрихкоды, без анализа
// вложенных уже в них штрихкодов 2ого уровня, т.к. они при записи также проверются по вложенным упаковкам.
// Если во вложенных упаковках упаковки с одной позицией номенклатуры и характеристики, то
// такая упаковка считается монотоварной.
// 
// Параметры:
//   Объект - СправочникОбъект.ШтрихкодыУпаковокТоваров - объект со свойствами и вложенными товарами
//          - ДанныеФормыСтруктура                      - объект формы
//
//Возвращаемое значение:
//   Структура - со свойствами:
//    * ТипУпаковки    - ПеречислениеСсылка.ТипыУпаковок.
//    * Номенклатура   - ОпределяемыйТип.Номенклатура.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры.
//    * Упаковка       - ОпределяемыйТип.Упаковка.
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры.
//
Функция ПараметрыНоменклатурыВложенныхШтрихкодов(Объект) Экспорт
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ТипУпаковки",    Объект.ТипУпаковки);
	ПараметрыНоменклатуры.Вставить("Номенклатура",   Объект.Номенклатура);
	ПараметрыНоменклатуры.Вставить("Характеристика", Объект.Характеристика);
	ПараметрыНоменклатуры.Вставить("Упаковка",       Объект.Упаковка);
	ПараметрыНоменклатуры.Вставить("Серия",          Объект.Серия);
	
	Если Объект.ВложенныеШтрихкоды.Количество() > 0 Тогда
		
		// Получаем строки 1ого уровня для выполнения запроса
		СписокШтрихкодовУпаковок = Новый Массив;
		Для каждого Строка Из Объект.ВложенныеШтрихкоды Цикл
			СписокШтрихкодовУпаковок.Добавить(Строка.Штрихкод);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокШтрихкодовУпаковок", СписокШтрихкодовУпаковок);
		Запрос.УстановитьПараметр("ПустаяНоменклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Запрос.УстановитьПараметр("ПустаяХарактеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
		Запрос.УстановитьПараметр("ПустаяУпаковка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка"));
		Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Номенклатура) КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Номенклатура) КАК КоличествоПозицийНоменклатуры,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Характеристика) КАК Характеристика,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Характеристика) КАК КоличествоПозицийХарактеристик,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Упаковка) КАК Упаковка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Упаковка) КАК КоличествоПозицийУпаковок,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Серия) КАК Серия,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Серия) КАК КоличествоПозицийСерий
		|ПОМЕСТИТЬ СвернутыеЗначения
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&СписокШтрихкодовУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|	КОНЕЦ КАК ТипУпаковки,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|			ТОГДА СвернутыеЗначения.Номенклатура
		|		ИНАЧЕ &ПустаяНоменклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА СвернутыеЗначения.Характеристика
		|		ИНАЧЕ &ПустаяХарактеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийУпаковок = 1
		|			ТОГДА СвернутыеЗначения.Упаковка
		|		ИНАЧЕ &ПустаяУпаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийСерий = 1
		|			ТОГДА СвернутыеЗначения.Серия
		|		ИНАЧЕ &ПустаяСерия
		|	КОНЕЦ КАК Серия
		|ИЗ
		|	СвернутыеЗначения КАК СвернутыеЗначения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыНоменклатуры, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыНоменклатуры;
	
КонецФункции

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров);
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе.
//
//Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
//Возвращаемое значение:
//   Произвольный - параметры указания серий (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий)
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, Объект);
	
КонецФункции

//Возвращает текст запроса для расчета статусов указания серий
//
//Параметры:
//   ПараметрыУказанияСерий - Произвольный - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий)
//
//Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

// см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП) Тогда
		
		КомандаПроверка                     = Команды.Добавить();
		КомандаПроверка.Идентификатор       = Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП.Имя;
		КомандаПроверка.Менеджер            = Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП.ПолноеИмя();
		КомандаПроверка.Представление       = НСтр("ru = 'Проверка кода маркировки'");
		КомандаПроверка.МножественныйВыбор  = Истина;
		КомандаПроверка.Важность            = "СмТакже";
		КомандаПроверка.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП.Имя;
		КомандаПроверка.ИмяФормы            = "Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки";
		КомандаПроверка.ИмяПараметраФормы   = "Штрихкоды";
		КомандаПроверка.Вид                 = "КоманднаяПанель";
		КомандаПроверка.Картинка            = БиблиотекаКартинок.ИнформацияГосИС;
		
		ТипыШтрихкодовИСМП = Новый Массив();
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаПроверка,
			"ТипШтрихкода",
			ТипыШтрихкодовИСМП,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Штрихкоды упаковок
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ШтрихкодыУпаковок";
	КомандаПечати.Представление = НСтр("ru = 'Печать штрихкодов упаковок'");
	
	КомандаПечати.МенеджерПечати = "Справочник.ШтрихкодыУпаковокТоваров";

	// Этикетка ИС МП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭтикеткаКодМаркировкиИСМП";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикетки (ИС МП)'");
		КомандаПечати.МенеджерПечати = "Справочник.ШтрихкодыУпаковокТоваров";
		КомандаПечати.ФункциональныеОпции = "ВестиУчетМаркируемойПродукцииИСМП";
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШтрихкодыУпаковок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ШтрихкодыУпаковок",
			НСтр("ru='Штрихкоды упаковок'"),
			СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru='Печать этикетки (обувь, одежда, табак...)'"),
			СформироватьПечатнуюФормуЭтикеткаИСМП(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПечатиШтрихкодовУпаковокИСМП(
	Штрихкоды, МассивШаблоновКодовМаркировок=Неопределено, ПроверятьДоступность=Истина) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИсходнаяТаблица = РегистрыСведений["ПулКодовМаркировкиСУЗ"].НоваяТаблицаДанныхДляПечатиЭтикеток();
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Штрихкоды, "ЗначениеШтрихкода,Номенклатура,Характеристика,ХешСуммаЗначенияШтрихкода,ТипШтрихкода,ТипУпаковки");
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		ТекущиеЗначения = ЗначенияРеквизитов.Получить(Штрихкод);
		
		Если ТекущиеЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                        = ИсходнаяТаблица.Добавить();
		НоваяСтрока.КодМаркировки          = ТекущиеЗначения.ЗначениеШтрихкода;
		НоваяСтрока.Номенклатура           = ТекущиеЗначения.Номенклатура;
		НоваяСтрока.Характеристика         = ТекущиеЗначения.Характеристика;
		НоваяСтрока.ХешСуммаКодаМаркировки = ТекущиеЗначения.ХешСуммаЗначенияШтрихкода;
		НоваяСтрока.ТипШтрихкода           = ТекущиеЗначения.ТипШтрихкода;
		НоваяСтрока.ЭтоКодМаркировки       = ТекущиеЗначения.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.КодМаркировки          КАК КодМаркировки,
		|	ИсходнаяТаблица.Организация            КАК Организация,
		|	ИсходнаяТаблица.ВидПродукции           КАК ВидПродукции,
		|	ИсходнаяТаблица.Номенклатура           КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика         КАК Характеристика,
		|	ИсходнаяТаблица.ТипШтрихкода           КАК ТипШтрихкода,
		|	ИсходнаяТаблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ИсходнаяТаблица.ЭтоКодМаркировки       КАК ЭтоКодМаркировки
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&ИсходнаяТаблица КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки,
		|	ХешСуммаКодаМаркировки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистра.Организация,    ИсходнаяТаблица.Организация)        КАК Организация,
		|	ЕСТЬNULL(ДанныеРегистра.ВидПродукции,   ИсходнаяТаблица.ВидПродукции)       КАК ВидПродукции,
		|	ЕСТЬNULL(ДанныеРегистра.КодМаркировки,  ИсходнаяТаблица.КодМаркировки)      КАК КодМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.ХешСуммаКодаМаркировки, ИсходнаяТаблица.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.Номенклатура,   ИсходнаяТаблица.Номенклатура)       КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеРегистра.Характеристика, ИсходнаяТаблица.Характеристика)     КАК Характеристика,
		|	ЕСТЬNULL(ДанныеРегистра.ТипШтрихкода,   ИсходнаяТаблица.ТипШтрихкода)       КАК ТипШтрихкода,
		|	ИсходнаяТаблица.ЭтоКодМаркировки                                            КАК ЭтоКодМаркировки,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.КодМаркировки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Доступно,
		|	1     КАК Количество
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеРегистра
		|	ПО ДанныеРегистра.КодМаркировки          = ИсходнаяТаблица.КодМаркировки
		|	И ДанныеРегистра.ХешСуммаКодаМаркировки  = ИсходнаяТаблица.ХешСуммаКодаМаркировки
		|";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКоды = РезультатЗапроса.Выбрать();
	
	МассивДанныхКодов = Новый Массив;
	
	Пока ВыборкаКоды.Следующий() Цикл
		
		Если ВыборкаКоды.ЭтоКодМаркировки И ПроверятьДоступность И Не ВыборкаКоды.Доступно Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru='Код маркировки %1: будет напечатан кратко. Отсутствует полный код в пуле кодов маркировки'"),
				ВыборкаКоды.КодМаркировки));
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПечатьЭтикетокИСМПКлиентСервер");
		СтруктураКодаМаркировкиДляПечати = Модуль.СтруктураПечатиЭтикетки();
		ЗаполнитьЗначенияСвойств(СтруктураКодаМаркировкиДляПечати, ВыборкаКоды);
		МассивДанныхКодов.Добавить(СтруктураКодаМаркировкиДляПечати);
		
		Если МассивШаблоновКодовМаркировок <> Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
			СписокШаблонов = Модуль.ШаблоныКодовПоНоменклатуре(ВыборкаКоды.Номенклатура);
			Для Каждого СтрокаШаблон Из СписокШаблонов Цикл
				Если МассивШаблоновКодовМаркировок.Найти(СтрокаШаблон.Значение) = Неопределено Тогда
					МассивШаблоновКодовМаркировок.Добавить(СтрокаШаблон.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанныхКодов;
	
КонецФункции

Функция ПараметрыШтрихкодовУпаковокДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипШтрихкода",      Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	Параметры.Вставить("Штрихкод", "");
	Параметры.Вставить("ДатаУпаковки",      '00010101');
	Параметры.Вставить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип.ПривестиЗначение());
	Параметры.Вставить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Упаковка",          Метаданные.ОпределяемыеТипы.Упаковка.Тип.ПривестиЗначение());
	Параметры.Вставить("Серия",             Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Количество",        0);
	Параметры.Вставить("СерияМарки",        "");
	Параметры.Вставить("НомерМарки",        "");
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыМакетовДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Макет_SSCC",           УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.SSCC"));
	Параметры.Вставить("Макет_Code128Формат1", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат1"));
	Параметры.Вставить("Макет_Code128Формат2", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат2"));
	Параметры.Вставить("Макет_Code128Формат3", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат3"));
	Параметры.Вставить("Макет_GS1_128",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1_128"));
	Параметры.Вставить("Макет_DataBar",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1DataBarExpandedStacked"));
	Параметры.Вставить("Макет_PDF417",         УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.PDF417"));
	Параметры.Вставить("Макет_QR",             УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.QR"));
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Параметры.Вставить("КоличествоМиллиметровВПикселе", КоличествоМиллиметровВПикселе);
	
	Возврат Параметры;
	
КонецФункции

// Для использовании процедуры требуется добавить переопределить УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати
// Пример:
//  СтандартнаяОбработка = Ложь;
//  Справочники.ШтрихкодыУпаковокТоваров.ДобавитьКомандыПечати(КомандыПечати);
//  ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, "Справочник.ШтрихкодыУпаковокТоваров").
Процедура ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетовДляПечати, ПараметрыШтрихкодовУпаковокДляПечати) Экспорт
	
	ТипШтрихкодаУпаковки = ПараметрыШтрихкодовУпаковокДляПечати.ТипШтрихкода;
	Штрихкод             = ПараметрыШтрихкодовУпаковокДляПечати.Штрихкод;
	ДатаУпаковки         = ПараметрыШтрихкодовУпаковокДляПечати.ДатаУпаковки;
	Номенклатура         = ПараметрыШтрихкодовУпаковокДляПечати.Номенклатура;
	Характеристика       = ПараметрыШтрихкодовУпаковокДляПечати.Характеристика;
	Упаковка             = ПараметрыШтрихкодовУпаковокДляПечати.Упаковка;
	Серия                = ПараметрыШтрихкодовУпаковокДляПечати.Серия;
	Количество           = ПараметрыШтрихкодовУпаковокДляПечати.Количество;
	СерияМарки           = ПараметрыШтрихкодовУпаковокДляПечати.СерияМарки;
	НомерМарки           = ПараметрыШтрихкодовУпаковокДляПечати.НомерМарки;
	
	Если Не ЗначениеЗаполнено(ТипШтрихкодаУпаковки)
		Или Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	ПараметрыОбласти.Вставить("ДатаУпаковки",   ДатаУпаковки);
	ПараметрыОбласти.Вставить("Номенклатура",   Номенклатура);
	ПараметрыОбласти.Вставить("Характеристика", Характеристика);
	ПараметрыОбласти.Вставить("Упаковка",       Упаковка);
	ПараметрыОбласти.Вставить("Серия",          Серия);
	ПараметрыОбласти.Вставить("Количество",     Количество);
	ПараметрыОбласти.Вставить("СерияМарки",     СерияМарки);
	ПараметрыОбласти.Вставить("НомерМарки",     НомерМарки);
	
	ШтрихкодДляКомпоненты = Штрихкод;
	
	ОтображатьТекст    = Истина;
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_SSCC;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.Code128 Тогда
		
		НомерФорматаCode128 = ШтрихкодыУпаковокКлиентСервер.ФорматШтрихкодаCode128(Штрихкод);
		
		Если НомерФорматаCode128 = 1 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		ИначеЕсли НомерФорматаCode128 = 2 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат2;
		ИначеЕсли НомерФорматаCode128 = 3 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат3;
		Иначе
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		КонецЕсли;
		ТипКода = 4;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_GS1_128;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ИмяПараметра = "ИдентификаторПрименения_" + СвойстваПараметра.КлючИдентификатора;
				ПараметрыОбласти.Вставить(ИмяПараметра, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_DataBar;
		ТипКода = 17;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ПараметрыОбласти.Вставить(СвойстваПараметра.ИмяИдентификатора, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.PDF417 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_PDF417;
		ТипКода = 6;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_QR;
		ТипКода = 16;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;

	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_QR;
		ТипКода = 24;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	КонецЕсли;
	
	ПараметрыОбласти.ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(
		Номенклатура,
		Характеристика,
		Упаковка);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, ПараметрыОбласти);
	
	Рисунок = Область.Рисунки.ШтрихкодПечать;
	
	КоличествоМиллиметровВПикселе = ПараметрыМакетовДляПечати.КоличествоМиллиметровВПикселе;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ШтрихкодДляКомпоненты));
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
	ПараметрыШтрихкода.Вставить("ТипКода",          ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",  ОтображатьТекст);
	
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", 2);
	КонецЕсли;
	
	РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
		Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Возврат
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверкаВозможностиРедактирования(Параметры, АдресРезультата) Экспорт
	
	Результат = ОбщегоНазначения.ЕстьСсылкиНаОбъект(Параметры.СсылкаНаОбъект);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры
	
#Область ДляВызоваИзДругихПодсистем

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Упаковка");
	Результат.Добавить("Серия");
	Результат.Добавить("ЗначениеШтрихкода");
	Результат.Добавить("ТипУпаковки");
	Результат.Добавить("ТипШтрихкода");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Формирует табличный документ "Штрихкоды упаковок".
//
Функция СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ШтрихкодыУпаковокТоваров_ШтрихкодыУпаковок";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Количество        КАК Количество,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&МассивОбъектов)
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В(&ДопустимыеТипыШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипШтрихкода");
	
	Запрос.УстановитьПараметр("МассивОбъектов",           МассивОбъектов);
	Запрос.УстановитьПараметр("ДопустимыеТипыШтрихкодов", ДопустимыеТипыШтрихкодовДляПечати());
	
	ПараметрыМакетов = ПараметрыМакетовДляПечати();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыШтрихкодовУпаковок = ПараметрыШтрихкодовУпаковокДляПечати();
		
		ЗаполнитьЗначенияСвойств(ПараметрыШтрихкодовУпаковок, Выборка);
		
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
		РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Выборка.Штрихкод, ВидыПродукции);
		
		Если РезультатРазбора <> Неопределено Тогда
			Если РезультатРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				ПараметрыШтрихкодовУпаковок.СерияМарки = Сред(Выборка.Штрихкод, 4, 3);
				ПараметрыШтрихкодовУпаковок.НомерМарки = Сред(Выборка.Штрихкод, 7, 8);
			ИначеЕсли РезультатРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда
				ПараметрыШтрихкодовУпаковок.СерияМарки = Сред(Выборка.Штрихкод, 20, 12);
				ПараметрыШтрихкодовУпаковок.НомерМарки = Сред(Выборка.Штрихкод, 32, 6);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетов, ПараметрыШтрихкодовУпаковок);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует табличный документ "Этикетка ИС МП (обувь/табак)".
//
Функция СформироватьПечатнуюФормуЭтикеткаИСМП(МассивОбъектов, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	СтруктураНастроек = Неопределено;
	
	СтруктураОбъектовПечати = Новый Структура;
	СтруктураОбъектовПечати.Вставить("РежимПечати", "Выборочно");
	СтруктураОбъектовПечати.Вставить("ОбъектыПечати", ДанныеДляПечатиШтрихкодовУпаковокИСМП(МассивОбъектов));
	ПараметрыПечати.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(СтруктураОбъектовПечати));
	
	ПроверятьДоступность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПечати, "ПроверятьДоступность");
	
	Если ПроверятьДоступность = Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		ПараметрыПечати.Вставить("РазрешитьПовторнуюПечать", Модуль.РазрешенаПовторнаяПечатьКодовМаркировки());
	Иначе
		ПараметрыПечати.Вставить("РазрешитьПовторнуюПечать", Не ПроверятьДоступность);
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте") Тогда
		ПараметрыПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте", Истина);
	КонецЕсли;
	
	РегистрыСведений["ПулКодовМаркировкиСУЗ"].РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
		ПараметрыПечати, ТабличныйДокумент, СтруктураНастроек,, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДопустимыеТипыШтрихкодовДляПечати()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки)
	
	ПараметрыОбласти = Новый Структура;
	
	ПараметрыОбласти.Вставить("ПредставлениеНоменклатуры", "");
	
	КолонкиПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	Для каждого ИдентификаторИтипКолонки Из КолонкиПечати Цикл
		ИдентификаторКолонки = ИдентификаторИтипКолонки.Ключ;
		ТипКолонки = ИдентификаторИтипКолонки.Значение;
		ЗначениеПоУмолчанию = ТипКолонки.ПривестиЗначение(Неопределено);
		
		Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128
			ИЛИ ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			ИЛИ ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
		Иначе
			ИмяКолонки = ИдентификаторКолонки;
		КонецЕсли;
		
		ПараметрыОбласти.Вставить(ИмяКолонки, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат ПараметрыОбласти;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаполнениеХешСуммаЗначенияШтрихкодаGS1(Параметры) Экспорт
	
	ТипШтрихкода = Новый Массив;
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ХэшСуммаНормализации = """"
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В(&ТипШтрихкода)";
	Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеХешСуммаЗначенияШтрихкодаGS1(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Справочник.ШтрихкодыУпаковокТоваров";
	МетаданныеОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСсылкиДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	&ВТСсылкиДляОбработки КАК ВТСсылкиДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТСсылкиДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СправочникОбъект.ХэшСуммаНормализации) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьСвойствоХешСуммаЗначенияШтрихкода(СправочникОбъект);
			
			Если ЗначениеЗаполнено(СправочникОбъект.ХэшСуммаНормализации) Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %Справочник% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

// Параметры создания элемента справочника ШтрикходыУпаковокТоваров.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОтключитьПоискСуществующего - Булево - Отключает поиск дублей по значению штрихкода.
Функция ПараметрыСозданияШтрихкода()
	
	ПараметрыСоздания = Новый Структура();
	ПараметрыСоздания.Вставить("ОтключитьПоискСуществующего", Ложь);
	Возврат ПараметрыСоздания;
	
КонецФункции

Процедура ЗаполнитьСвойствоХешСуммаЗначенияШтрихкода(ДанныеШтрихкодаУпаковок, ПараметрыШтрихкода = Неопределено) Экспорт
	
	ЗначениеШтрихкода = ДанныеШтрихкодаУпаковок.ЗначениеШтрихкода;
	ТипШтрихкода      = ДанныеШтрихкодаУпаковок.ТипШтрихкода;
	
	Если Не ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		Или ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
		Или ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыШтрихкода = Неопределено Тогда
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода.Результат, Ложь);
	Иначе
		ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ПараметрыШтрихкода.Результат, Ложь, "");
	КонецЕсли;
	
	ДанныеШтрихкодаУпаковок.ХэшСуммаНормализации = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗначениеШтрихкодаБезСкобок);
	
КонецПроцедуры

#КонецОбласти

//Создает и заполняет штрихкоды упаковок для строк дерева. Исключением может быть существующий маркированный товар.
//
//Параметры:
//   СтрокиДерева - КоллекцияСтрокДереваЗначений - источник генерации штрихкодов упаковок
//   ТаблицаШтрихкодыУпаковок - ТаблицаЗначений - уже записанный в справочнике маркированный товар:
//    * Штрихкод - Строка - Штрихкод.
//    * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Существующий элемент справочника.
//   КэшСтрокДерева - Соответствие - Ключ - Строка дерева, Значение - вложенные упаковки и их хеш суммы.
//   КэшСтатусовУказанияСерий - Произвольный - кэш статусов указания серий
//
Процедура СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокиДерева, ТаблицаШтрихкодыУпаковок, КэшСтрокДерева, КэшСтатусовУказанияСерий)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		КэшСтроки = КэшСтрокДерева.Получить(СтрокаДерева);
		Если КэшСтроки = Неопределено Тогда

			КэшСтроки = Новый Структура;
			КэшСтроки.Вставить("ВложенныеУпаковки", Новый Массив);
			КэшСтроки.Вставить("ВложенныеХешСуммы", Новый СписокЗначений);
			КэшСтрокДерева.Вставить(СтрокаДерева, КэшСтроки);

		КонецЕсли;

		КэшСтрокиРодителя = КэшСтрокДерева.Получить(СтрокаДерева.Родитель);

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

			НайденнаяСтрока = ТаблицаШтрихкодыУпаковок.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			Если НайденнаяСтрока = Неопределено Тогда

				СтрокаДерева.ШтрихкодУпаковки = СоздатьЭлементСправочникаШтрихкодыУпаковок(
					СтрокаДерева, КэшСтатусовУказанияСерий);
			
			ИначеЕсли СтрокаДерева.Серия <> НайденнаяСтрока.Серия Тогда
				
				ЗначенияРеквизитов = Новый Структура("Серия", СтрокаДерева.Серия);
				ИзменитьШтрихкодУпаковки(НайденнаяСтрока.Ссылка, ЗначенияРеквизитов);
				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;
			
			Иначе

				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;

			КонецЕсли;

			Если КэшСтрокиРодителя <> Неопределено Тогда
				КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.Штрихкод);
				КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			КонецЕсли;

		Иначе

			СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокаДерева.Строки, ТаблицаШтрихкодыУпаковок,
				КэшСтрокДерева,  КэшСтатусовУказанияСерий);

			ХешСуммаУпаковки = ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы);
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.ШтрихкодУпаковки);
			ПараметрыОтбора.Вставить("ХешСумма", ХешСуммаУпаковки);
			
			НайденныеСтроки = ТаблицаШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаДерева.ШтрихкодУпаковки = СоздатьЭлементСправочникаШтрихкодыУпаковок(
					СтрокаДерева, КэшСтатусовУказанияСерий, ХешСуммаУпаковки, КэшСтроки.ВложенныеУпаковки);
				
			КонецЕсли;
			
			Если КэшСтрокиРодителя <> Неопределено Тогда
				КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.Штрихкод);
				КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Создает элемент справочника "Штрихкоды упаковок" на основании строки дерева упаковок.
//
//Параметры:
//   СтрокаДерева             - СтрокаДереваЗначений - источник реквизитов для создания элемента справочника
//   КэшСтатусовУказанияСерий - Произвольный - кэш статусов указания серий
//   ХешСумма                 - Строка - Хеш сумма, которая рассчитывается на основании вложенных упаковок.
//   ВложенныеШтрихкоды       - Неопределено, Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - вложенные элементы в упаковке.
//Возвращаемое значение:
//   СправочникСсылка.ШтрихкодыУпаковокТоваров - созданные элемент справочника.
//
Функция СоздатьЭлементСправочникаШтрихкодыУпаковок(СтрокаДерева, КэшСтатусовУказанияСерий, 
	ХешСумма = "", ВложенныеШтрихкоды = Неопределено)

	Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;

	// Создание нового элемента справочника.
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ДанныеНовойУпаковки.ТипУпаковки       = СтрокаДерева.ТипУпаковки;
	ДанныеНовойУпаковки.ТипШтрихкода      = СтрокаДерева.ТипШтрихкода;
	ДанныеНовойУпаковки.Штрихкод          = СтрокаДерева.Штрихкод;
	ДанныеНовойУпаковки.ДатаУпаковки      = ТекущаяДатаСеанса();
	
	ДанныеНовойУпаковки.Номенклатура      = СтрокаДерева.Номенклатура;
	ДанныеНовойУпаковки.Характеристика    = СтрокаДерева.Характеристика;
	ДанныеНовойУпаковки.Серия             = СтрокаДерева.Серия;
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		ДанныеНовойУпаковки.ХешСумма = ХешСумма;
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоВложенныхЕдиниц;
		Иначе
			ДанныеНовойУпаковки.Количество = СтрокаДерева.Количество;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		ДанныеНовойУпаковки.ХешСумма = ХешСумма;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму",                      Истина);

	НоваяУпаковка = СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки, ВложенныеШтрихкоды, ПараметрыЗаписи, КэшСтатусовУказанияСерий);

	Возврат НоваяУпаковка;

КонецФункции

// Формирует таблицу элементов справочника "Штрихкоды упаковок", которые найдены по значениям штрихкодов дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ЗначениеШтрихкода - Строка - Код маркировки.
// * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
// * ХешСумма - Строка - Хеш сумма, которая рассчитывается на основании вложенных упаковок.
Функция СуществующиеЭлементыШтрихкодовДерева(ДеревоУпаковок)

	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
	ОписаниеСтроки      = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);

	ЗначенияШтрихкодов = Новый ТаблицаЗначений;
	ЗначенияШтрихкодов.Колонки.Добавить("Штрихкод", ОписаниеСтроки);
	ВсеЗначенияШтрихкодовСтрокДерева(ДеревоУпаковок.Строки, ЗначенияШтрихкодов);

	ТаблицаЭлементов = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов.ВыгрузитьКолонку("Штрихкод"));

	Возврат ТаблицаЭлементов;

КонецФункции

// Заполняет таблицу "Значения штрихкодов" кодами маркировки, присутствующими в строках дерева упаковок.
//
// Параметры:
// 	СтрокиДерева - КоллекцияСтрокДереваЗначений - Описание
// 	ЗначенияШтрихкодов - ТаблицаЗначений - таблица со кодами маркировок.
// * ЗначениеШтрихкода - Строка - Код маркировки.
Процедура ВсеЗначенияШтрихкодовСтрокДерева(СтрокиДерева, ЗначенияШтрихкодов)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		НоваяСтрока = ЗначенияШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод = СтрокаДерева.Штрихкод;
		ВсеЗначенияШтрихкодовСтрокДерева(СтрокаДерева.Строки, ЗначенияШтрихкодов);

	КонецЦикла;

КонецПроцедуры

Функция ЭтоПустаяУпаковка(ДанныеУпаковки)
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеУпаковки.ТипУпаковки) Тогда
		Возврат ПустаяСтрока(ДанныеУпаковки.ХешСумма);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

#КонецЕсли

