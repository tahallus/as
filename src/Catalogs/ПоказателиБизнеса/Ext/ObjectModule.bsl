#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Порядок) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоказателиБизнеса.Родитель КАК Родитель,
			|	МАКСИМУМ(ПоказателиБизнеса.Порядок) КАК Порядок
			|ИЗ
			|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
			|ГДЕ
			|	ПоказателиБизнеса.Родитель = &Родитель
			|	И ПоказателиБизнеса.ВидОтчета = &ВидОтчета
			|	И НЕ ПоказателиБизнеса.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоказателиБизнеса.Родитель";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		ВыборкаРодитель = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРодитель.Следующий() Цикл
			Порядок = ВыборкаРодитель.Порядок;
		КонецЦикла;
		
		Порядок = Порядок + 1;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(СокрЛП(ИдентификаторПоказателя)) Тогда
		 	ИдентификаторПоказателя = Ссылка.УникальныйИдентификатор();
		КонецЕсли;
	Иначе
		СсылкаНовогоЭлемента = Справочники.ПоказателиБизнеса.ПолучитьСсылку();
		ИдентификаторПоказателя = СсылкаНовогоЭлемента.УникальныйИдентификатор();
		УстановитьСсылкуНового(СсылкаНовогоЭлемента);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсточникДанных) И НеобходимоСоздатьИсточник() Тогда
		СоздатьИсточникДанныхПоПоказателю();
	КонецЕсли;
	
	ОбновитьПредставлениеПоказателя();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьИсточникДанныхПоПоказателю()
	
	Если ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы Тогда
			
			Счет = ПланыСчетов.Управленческий.СоздатьСчет();
			
			Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
				Счет.ТипСчета = Перечисления.ТипыСчетов.Доходы;
				Счет.Вид = ВидСчета.Пассивный;
				Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
			Иначе
				Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
				Счет.Вид = ВидСчета.Активный;
				Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
			КонецЕсли;
			
			Счет.Наименование = Наименование;
			
			ЗаполнитьКодИРодителяПоТипуСчета(Счет, Счет.ТипСчета);
			
			Счет.Записать();
			
			ИсточникДанных = Счет.Ссылка;
			СпособПолученияДанныхИсточника = Перечисления.СпособыПолученияДанныхИсточника.КтОборот;
			
		ИначеЕсли ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
			
			Статья = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
			Статья.Наименование = Наименование;
			
			Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
				Статья.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПоступления;
			Иначе
				Статья.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационныеПлатежи;
			КонецЕсли;
			
			Статья.Записать();
			
			ИсточникДанных = Статья.Ссылка;
			
			Если ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
				СпособПолученияДанныхИсточника = Перечисления.СпособыПолученияДанныхИсточника.КтОборот;
			Иначе
				СпособПолученияДанныхИсточника = Перечисления.СпособыПолученияДанныхИсточника.ДтОборот;
			КонецЕсли;
			
		КонецЕсли;
	

КонецПроцедуры

Функция НеобходимоСоздатьИсточник()
	
	НеобходимоСоздатьИсточник = (ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы 
								ИЛИ ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток) 
								И (ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход 
								ИЛИ ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход);
								
	Возврат НеобходимоСоздатьИсточник;
	
КонецФункции // ()
 
Процедура ЗаполнитьКодИРодителяПоТипуСчета(Счет, ТипСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Управленческий.Родитель КАК Родитель,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ РодителиПоТипу
		|ИЗ
		|	ПланСчетов.Управленческий КАК Управленческий
		|ГДЕ
		|	Управленческий.ТипСчета = &ТипСчета
		|
		|СГРУППИРОВАТЬ ПО
		|	Управленческий.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РодителиПоТипу.Родитель КАК Родитель,
		|	МАКСИМУМ(РодителиПоТипу.Количество) КАК Количество,
		|	МАКСИМУМ(Управленческий.Код) КАК Код,
		|	МАКСИМУМ(Управленческий.Порядок) КАК Порядок
		|ИЗ
		|	РодителиПоТипу КАК РодителиПоТипу
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Управленческий КАК Управленческий
		|		ПО РодителиПоТипу.Родитель = Управленческий.Родитель
		|
		|СГРУППИРОВАТЬ ПО
		|	РодителиПоТипу.Родитель";
	
	Запрос.УстановитьПараметр("ТипСчета", ТипСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Счет.Родитель = ВыборкаДетальныеЗаписи.Родитель;
		
		// Добавить установку корректного кода
		
		Счет.Порядок = ВыборкаДетальныеЗаписи.Порядок + "1";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеПоказателя()
	
	ШаблонПредставленияСтроки = "%1%2   %3";
	ПредставлениеСтроки = "";
	ПорядокСтрокой = "";
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоказателиБизнеса.Ссылка КАК Родитель,
			|	ПоказателиБизнеса.Порядок КАК Порядок
			|ИЗ
			|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
			|ГДЕ
			|	ПоказателиБизнеса.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	Родитель ТОЛЬКО ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Ссылка", Родитель);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЗаполнитьПорядокРекурсивно(ВыборкаРодитель, ПорядокСтрокой);
		
		ПорядокСтрокой = ПорядокСтрокой + Родитель.Порядок + ".";
		
	КонецЕсли;
	
	ПредставлениеСтроки = СтрШаблон(ШаблонПредставленияСтроки, ПорядокСтрокой, Порядок, Наименование);
	
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		ПредставлениеСтроки = ВРег(ПредставлениеСтроки);
	КонецЕсли;
	
	ПредставлениеПоказателя = ПредставлениеСтроки;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокРекурсивно(ВыборкаРодитель, ПорядокСтрокой)
	
	Если ВыборкаРодитель.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаРодитель.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаРодитель.Родитель) Тогда
			ПорядокСтрокой = ПорядокСтрокой + Строка(ВыборкаРодитель.Порядок) + ".";
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаРодитель = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаРодитель.Количество() <> 0 Тогда
		ЗаполнитьПорядокРекурсивно(ВыборкаРодитель, ПорядокСтрокой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли