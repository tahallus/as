
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Свойство("ТекущийЭлемент") Тогда
			
			ЭлементОснование = Параметры.ТекущийЭлемент;
			Объект.ВидОтчета = ЭлементОснование.ВидОтчета;
			
			Если ЭлементОснование.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
				Объект.Родитель = ЭлементОснование;
				Объект.СпособПолученияДанныхИсточника = Перечисления.СпособыПолученияДанныхИсточника.КтОборот;
				Объект.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход;
			Иначе
				ЗаполнитьЗначенияСвойств(Объект, ЭлементОснование, "Родитель,ТипПоказателя,СпособПолученияДанныхИсточника");
			КонецЕсли;
			
			Объект.Порядок = ПолучитьПорядокПоРодителю(Объект.Родитель);
			
		ИначеЕсли Параметры.Свойство("ВидОтчета") Тогда
			Объект.ВидОтчета = Параметры.ВидОтчета;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьВидимостьДоступность();
	ОбновитьПредставлениеФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидОтчета", Объект.ВидОтчета);
	
	Оповестить("ЗаписьПоказателяФинансовыхОтчетов", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступностьНаКлиенте();
	ОбновитьПараметрыВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступность();
	 
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
	
	ОткрытьКонструкторФормул();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Объект.Порядок = ПолучитьПорядокПоРодителю(Объект.Родитель);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьДоступность()
	
	// Настройка выпадающего списка типов показателей
	ПредставлениеГруппа = НСтр("ru = 'Группа'");
	ПредставлениеФормула = НСтр("ru = 'Формула'");
	
	Если Объект.ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
		ПредставлениеДоход  = НСтр("ru = 'Поступление'");
		ПредставлениеРасход = НСтр("ru = 'Выбытие'");
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.Баланс Тогда
		ПредставлениеДоход  = НСтр("ru = 'Актив'");
		ПредставлениеРасход = НСтр("ru = 'Пассив'");
	Иначе
		ПредставлениеДоход  = НСтр("ru = 'Доход'");
		ПредставлениеРасход = НСтр("ru = 'Расход'");
	КонецЕсли;
	
	Элементы.ТипПоказателя.СписокВыбора.Очистить();
	Элементы.ТипПоказателя.СписокВыбора.Добавить(Перечисления.ТипыПоказателейБизнеса.Доход,   ПредставлениеДоход,,   БиблиотекаКартинок.ПоказательДоход);
	Элементы.ТипПоказателя.СписокВыбора.Добавить(Перечисления.ТипыПоказателейБизнеса.Расход,  ПредставлениеРасход,,  БиблиотекаКартинок.ПоказательРасход);
	Элементы.ТипПоказателя.СписокВыбора.Добавить(Перечисления.ТипыПоказателейБизнеса.Группа,  ПредставлениеГруппа,,  БиблиотекаКартинок.ПоказательГруппа);
	Элементы.ТипПоказателя.СписокВыбора.Добавить(Перечисления.ТипыПоказателейБизнеса.Формула, ПредставлениеФормула,, БиблиотекаКартинок.ПоказательФормула);
	
	РассчитыватьПоДанным = (Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход")
							ИЛИ Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход"));
						  
	РассчитыватьПоФормуле = Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Формула");
	
	РассчитыватьПоПодчиненным = Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Группа");
	
	Элементы.ГруппаРасчетПоДанным.Видимость = РассчитыватьПоДанным;
	Элементы.ГруппаРасчетПоФормуле.Видимость = РассчитыватьПоФормуле;
	
	ОбновитьПараметрыВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьНаКлиенте()
	
	РассчитыватьПоДанным = (Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Доход")
							ИЛИ Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Расход"));
						  
	РассчитыватьПоФормуле = Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателейБизнеса.Формула");
	
	Элементы.ГруппаРасчетПоДанным.Видимость = РассчитыватьПоДанным;
	Элементы.ГруппаРасчетПоФормуле.Видимость = РассчитыватьПоФормуле;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВыбора()
	
	Если Объект.ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы Тогда
		
		Элементы.ИсточникДанных.ВыбиратьТип = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда
			Объект.ИсточникДанных = ПланыСчетов.Управленческий.ПустаяСсылка();
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		
		Если Объект.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Доход Тогда
			
			ТипыСчетов = Новый Массив;
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.Доходы);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.НалогНаПрибыль);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ТипыСчетов));
			МассивПараметров.Добавить(НовыйПараметр);
			
		ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Расход Тогда
			
			ТипыСчетов = Новый Массив;
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.Расходы);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.СебестоимостьПродаж);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.ПроцентыПоКредитам);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
			ТипыСчетов.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ТипыСчетов));
			МассивПараметров.Добавить(НовыйПараметр);
			
		КонецЕсли;
		
		Элементы.ИсточникДанных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров); 
		
	ИначеЕсли Объект.ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
		
		Элементы.ИсточникДанных.ВыбиратьТип = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда
			Объект.ИсточникДанных = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Элементы.ИсточникДанных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	Иначе // Баланс
		
		Элементы.ИсточникДанных.ВыбиратьТип = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда
			Объект.ИсточникДанных = ПланыСчетов.Управленческий.ПустаяСсылка();
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Элементы.ИсточникДанных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеФормулы()
	
	Если НЕ Объект.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивОперандов = Новый Массив;
	ТекстФормулы = Объект.СтрокаФормулы;
	
	ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(ТекстФормулы, МассивОперандов);
	
	Для каждого Операнд Из МассивОперандов Цикл
		
		СтрокаДоОперанда = Лев(ТекстФормулы, СтрНайти(ТекстФормулы, Операнд)-2);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаДоОперанда));
		Показатель = ПоказателиБизнесаФормулы.НайтиПоказательПоИдентификатору(Операнд);
		
		Если ЗначениеЗаполнено(Показатель.Показатель) Тогда
			СтрокаОперанда = Новый ФорматированнаяСтрока(Строка(Показатель.Показатель),,,,ПолучитьНавигационнуюСсылку(Показатель.Показатель));
			МассивСтрок.Добавить(СтрокаОперанда);
			ТекстФормулы = СтрЗаменить(ТекстФормулы, СтрокаДоОперанда + "[" + Операнд + "]", "");
			
			// Если в формуле несколько вхождений - необходимо выделить операнд повторно
			Если СтрНайти(ТекстФормулы, Операнд) <> 0 Тогда
				МассивОперандов.Добавить(Операнд);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстФормулы));
	
	ПредставлениеФормулы = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПорядокПоРодителю(Родитель)
	
	Порядок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиБизнеса.Родитель КАК Родитель,
		|	МАКСИМУМ(ПоказателиБизнеса.Порядок) КАК Порядок
		|ИЗ
		|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
		|ГДЕ
		|	ПоказателиБизнеса.Родитель = &Родитель
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиБизнеса.Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	ВыборкаРодитель = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРодитель.Следующий() Тогда
		Порядок = ВыборкаРодитель.Порядок;
	КонецЕсли;
	
	Порядок = Порядок + 1;
	
	Возврат Порядок;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКонструкторФормул()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидОтчета", Объект.ВидОтчета);
	ПараметрыОткрытия.Вставить("ТекущийПоказатель", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("СтрокаФормулы", Объект.СтрокаФормулы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораФормул", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПоказателиБизнеса.Форма.КонструкторФормул", ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораФормул(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗакрытия) ИЛИ ПараметрыЗакрытия.Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.СтрокаФормулы = ПараметрыЗакрытия.СтрокаФормулы;
	ОбновитьПредставлениеФормулы();
	
КонецПроцедуры

#КонецОбласти













