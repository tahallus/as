
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ТекущийПоказатель", Ссылка);
	Параметры.Свойство("СтрокаФормулы", 	СтрокаФормулы);
	Параметры.Свойство("ВидОтчета", 		ВидОтчета);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПреобразоватьФормулуДляКонструктора();
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ОперандНачало", ПоказателиБизнесаФормулы.СтрокаНачалаОперанда());
	КэшЗначений.Вставить("ОперандКонец", ПоказателиБизнесаФормулы.СтрокаКонцаОперанда());
	
	ЗаполнитьДеревоОперандов();
	ЗаполнитьДеревоОператоров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	ОператорыДопускающуюЗапятую = Новый Массив;
	ОператорыДопускающуюЗапятую.Добавить("Мин");
	ОператорыДопускающуюЗапятую.Добавить("Макс");
	ОператорыДопускающуюЗапятую.Добавить("Окр");
	
	КоличествоДопустимыхЗапятых = 0;
	Для каждого ЭлементМассива Из ОператорыДопускающуюЗапятую Цикл
		
		КоличествоДопустимыхЗапятых = КоличествоДопустимыхЗапятых + СтрЧислоВхождений(ВРЕГ(Формула), ВРЕГ(ЭлементМассива));
		
	КонецЦикла;
	
	КоличествоЗапятых = СтрЧислоВхождений(Формула, ",");
	Если КоличествоЗапятых > КоличествоДопустимыхЗапятых Тогда
		
		ТекстСообщения = НСтр("ru ='Для указания дробной части необходимо использовать точку, а не запятую.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Формула");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВставки = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
	
	ВставитьТекстВФормулу(ТекстВставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Операторы.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.Количество() < 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПараметрыПеретаскивания.Значение[0];
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ДополнительнаяОбработкаФормулы();
	ПривестиФормулуКВычисляемомуВиду();
	Закрыть(Новый Структура("Результат, СтрокаФормулы", КодВозвратаДиалога.Да, СтрокаФормулы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	Перем Ошибки;
	
	ОчиститьСообщения();
	ПроверитьФормулуНаСервере(Ошибки);
	
	Если Ошибки = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru ='Формула пригодна для расчетов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru ='Проверка формулы'"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоОперандов()
	
	Выборка = ПоказателиБизнеса.ВыборкаДереваПоказателей(ВидОтчета);
	
	ВременныеИдентификаторыПоказателей = Новый Соответствие;
	
	ВременноеДеревоПоказателей = ДанныеФормыВЗначение(ДеревоОперандов, Тип("ДеревоЗначений"));
	ВременноеДеревоПоказателей.Строки.Очистить();
	
	Пока Выборка.Следующий() Цикл
			
		СтрокаРодителя = Неопределено;
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			СтрокаРодителя = ВременноеДеревоПоказателей.Строки.Найти(Выборка.Родитель, "Показатель", Истина);
		КонецЕсли;
		
		Если Выборка.Показатель = Ссылка Тогда // Исключаем текущий показатель, чтобы избежать бесконечных вычислений
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ?(СтрокаРодителя = Неопределено, ВременноеДеревоПоказателей.Строки.Добавить(), СтрокаРодителя.Строки.Добавить());
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Операнд = Строка(Выборка.Показатель);
		ВременныеИдентификаторыПоказателей.Вставить(НоваяСтрока.Операнд, Выборка.ИдентификаторПоказателя);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВременноеДеревоПоказателей, "ДеревоОперандов");
	КэшЗначений.Вставить("ИдентификаторыПоказателей", Новый ФиксированноеСоответствие(ВременныеИдентификаторыПоказателей));
	
КонецПроцедуры

&НаКлиенте
Функция ПередДобавлениемТекстаВФормулу(ЗНАЧ ТекстВставки)
	
	ПараметрыДобавленияТекста = Новый Структура("ТекстВставки, ЗаменитьТекстФормулы, Отказ", ТекстВставки, Ложь, Ложь);
	
	ДанныеОперанда = Элементы.ДеревоОперандов.ТекущиеДанные;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%1"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%5"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%20"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%50"
		Тогда
		
		Если ДанныеОперанда = Неопределено 
			ИЛИ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ТекстСообщения = НСтр("ru ='Укажите вид цен, от которого необходимо вычислить процент'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДеревоОперандов");
			
			ПараметрыДобавленияТекста.Отказ = Истина;
			Возврат ПараметрыДобавленияТекста;
			
		Иначе
			
			ПредставлениеЧисло = СтрЗаменить(ТекстВставки, "%", "");
			ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон(" + (%1", КэшЗначений.ОперандНачало) + ДанныеОперанда.Операнд + СтрШаблон("%1 / 100 * ", КэшЗначений.ОперандКонец) + ПредставлениеЧисло + ".0)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "ЕСЛИ" Тогда
		
		ПервоеЗначениеУсловногоОператора = "<?>";
		Если НЕ ПустаяСтрока(Формула) Тогда
			
			ПервоеЗначениеУсловногоОператора = Формула;
			Формула = "";
			ПараметрыДобавленияТекста.ЗаменитьТекстФормулы = Истина;
			
		ИначеЕсли ДанныеОперанда <> Неопределено 
			И НЕ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ПервоеЗначениеУсловногоОператора = КэшЗначений.ОперандНачало + ДанныеОперанда.Операнд + КэшЗначений.ОперандКонец;
			
		КонецЕсли;
		
		ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон("#ЕСЛИ <Условие>%1%2#ТОГДА %3%1%2#ИНАЧЕ <?>%1#КОНЕЦЕСЛИ", Символы.ПС, Символы.Таб, ПервоеЗначениеУсловногоОператора);
		
	КонецЕсли;
	
	Возврат ПараметрыДобавленияТекста;
	
КонецФункции

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки, ЗаменитьТекстФормулы = Ложь)
	
	Если ПустаяСтрока(ТекстВставки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаменитьТекстФормулы Тогда
		
		Формула = ТекстВставки;
		Возврат;
		
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		
		Формула = Формула + ТекстВставки;
		
	#Иначе
		
		СтрокаНач = 0;
		СтрокаКон = 0;
		КолонкаНач = 0;
		КолонкаКон = 0;
		
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстВставки)) > Элементы.Формула.Ширина / 8 Тогда
			
			Элементы.Формула.ВыделенныйТекст = "";
			
		КонецЕсли;
			
		Элементы.Формула.ВыделенныйТекст = ТекстВставки;
		
	#КонецЕсли
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОператоров()
	
	ДеревоОператоров = РеквизитФормыВЗначение("Операторы", Тип("ДеревоЗначений"));
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='АРИФМЕТИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Сложение ""+""'");
	НоваяСтрока.Оператор		= " + ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Вычитание ""-""'");
	НоваяСтрока.Оператор		= " - ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Умножение ""*""'");
	НоваяСтрока.Оператор		= " * ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Деление ""/""'");
	НоваяСтрока.Оператор		= " / ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ЛОГИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Если...Иначе...КонецЕсли'");
	НоваяСтрока.Оператор		= "ЕСЛИ"; // "#ЕСЛИ <Условие> #ТОГДА <?> #ИНАЧЕ <?> #КОНЕЦЕСЛИ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>'");
	НоваяСтрока.Оператор		= " > ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>='");
	НоваяСтрока.Оператор		= " >= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<'");
	НоваяСтрока.Оператор		= " < ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<='");
	НоваяСтрока.Оператор		= " <= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='='");
	НоваяСтрока.Оператор		= " = ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<>'");
	НоваяСтрока.Оператор		= " <> ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='И'");
	НоваяСтрока.Оператор		= " И ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИЛИ'");
	НоваяСтрока.Оператор		= " ИЛИ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='НЕ'");
	НоваяСтрока.Оператор		= " НЕ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИСТИНА'");
	НоваяСтрока.Оператор		= " ИСТИНА ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ЛОЖЬ'");
	НоваяСтрока.Оператор		= " ЛОЖЬ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Открывающая скобка ""(""'");
	НоваяСтрока.Оператор		= " (";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Закрывающая скобка "")""'");
	НоваяСтрока.Оператор		= ") ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ФУНКЦИИ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Максимум'");
	НоваяСтрока.Оператор		= " Макс(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Минимум'");
	НоваяСтрока.Оператор		= " Мин(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Целая часть'");
	НоваяСтрока.Оператор		= " Цел(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Округление'");
	НоваяСтрока.Оператор		= " Окр(<?>,<Точность?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Предопределенное значение'");
	НоваяСтрока.Оператор		= " ПредопределенноеЗначение(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Значение заполнено'");
	НоваяСтрока.Оператор		= " ЗначениеЗаполнено(<?>)";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ШАБЛОНЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""1%""'");
	НоваяСтрока.Оператор		= " %1";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""5%""'");
	НоваяСтрока.Оператор		= " %5";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""20%""'");
	НоваяСтрока.Оператор		= " %20";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""50%""'");
	НоваяСтрока.Оператор		= " %50";
	
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуНаСервере(Ошибки)
	
	ПривестиФормулуКВычисляемомуВиду();
	ПоказателиБизнесаФормулы.ПроверитьФормулу(Ошибки, СтрокаФормулы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУмножениеВФормулу()
	
	// Процедура заменяет "][" на "]*["
	ТаблицаВставок = Новый ТаблицаЗначений;
	ТаблицаВставок.Колонки.Добавить("ПозицияНачалаОперанда");
	ТаблицаВставок.Колонки.Добавить("ПозицияКонцаОперанда");
	
	НачалоОперанда	= ПоказателиБизнесаФормулы.СтрокаНачалаОперанда();
	КонецОперанда	= ПоказателиБизнесаФормулы.СтрокаКонцаОперанда();
	
	ПозицияНачалаОперанда = 0;
	ПозицияКонцаОперанда = 0;
	
	СтрокаМежду			= "";
	ДлинаСтроки 		= СтрДлина(Формула);
	Для ИндексСимвола = 0 По ДлинаСтроки Цикл
		
		Символ = Сред(Формула, ИндексСимвола, 1);
		Если Символ = КонецОперанда Тогда
			
			СтрокаМежду 			= "";
			ПозицияКонцаОперанда 	= ИндексСимвола;
			ПозицияНачалаОперанда	= 0;
			
		ИначеЕсли Символ = НачалоОперанда Тогда
			
			ПозицияНачалаОперанда	= ИндексСимвола;
			
		КонецЕсли;
			
		Если ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда = 0
			И Символ <> КонецОперанда Тогда
			
			СтрокаМежду = СтрокаМежду + Символ;
			
		ИначеЕсли ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда <> 0 Тогда
			
			Если ПустаяСтрока(СокрЛП(СтрокаМежду)) Тогда
				
				НоваяСтрока							= ТаблицаВставок.Добавить();
				НоваяСтрока.ПозицияНачалаОперанда	= ПозицияНачалаОперанда;
				НоваяСтрока.ПозицияКонцаОперанда	= ПозицияКонцаОперанда;
				
			КонецЕсли;
			
			СтрокаМежду				= "";
			ПозицияНачалаОперанда	= 0;
			ПозицияКонцаОперанда	= 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВставок = ТаблицаВставок.Количество();
	Если КоличествоВставок > 0 Тогда
		
		Пока КоличествоВставок <> 0 Цикл
			
			СтрокаТаблицы = ТаблицаВставок.Получить(КоличествоВставок - 1);
			
			ПерваяПодстрока = Лев(Формула, СтрокаТаблицы.ПозицияКонцаОперанда);
			ВтораяПодстрока = Сред(Формула, СтрокаТаблицы.ПозицияНачалаОперанда);
			
			Формула 		= ПерваяПодстрока + " * " + ВтораяПодстрока;
			
			КоличествоВставок = КоличествоВставок - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительнаяОбработкаФормулы()
	
	ДобавитьУмножениеВФормулу();
	
КонецПроцедуры

&НаСервере
Процедура ПривестиФормулуКВычисляемомуВиду()
	
	СтрокаФормулы = Формула;
	МассивОперандов = Новый Массив;
	
	ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(Формула, МассивОперандов);
	
	Для каждого Операнд Из МассивОперандов Цикл
		
		Идентификатор = КэшЗначений.ИдентификаторыПоказателей.Получить(Операнд);
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			СтрокаФормулы = СтрЗаменить(СтрокаФормулы, Операнд, Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьФормулуДляКонструктора()
	
	Формула = СтрокаФормулы;
	МассивОперандов = Новый Массив;
	
	ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(СтрокаФормулы, МассивОперандов);
	
	Для каждого Операнд Из МассивОперандов Цикл
		
		Показатель = ПоказателиБизнесаФормулы.НайтиПоказательПоИдентификатору(Операнд);
		
		Если ЗначениеЗаполнено(Показатель.Показатель) Тогда
			Формула = СтрЗаменить(Формула, Операнд, Строка(Показатель.Показатель));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
