
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	ЗаполнитьДанныеПравил();
	ОбновитьЭлементыПравил();
	ЗаполнитьСписокВыбораЭлементовФормы();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ТекущийОбъект.Порядок = 
			Справочники.КолонкиКалендарейСотрудников.РеквизитДопУпорядочиванияДляЗаписи(Объект.Владелец);
		
	КонецЕсли;
	
	СохранитьПравилаТекущейКолонки(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПравилаТекущейКолонки.Очистить();
	ЗаполнитьДанныеПравил();
	ОбновитьЭлементыПравил();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_КолонкиКалендаряСотрудника");
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ИндексЭлемента(ИмяЭлемента)
	
	Возврат Число(Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "_")));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПравил()
	
	ПравилаТекущейКолонки.Очистить();
	
	Для Каждого Правило Из Объект.ПравилаКолонки Цикл
		НоваяСтрока = ПравилаТекущейКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Правило);
		НоваяСтрока.СостояниеСобытия = Правило.Состояние;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПравил()
	
	УдаляемыеЭлементы = Новый Массив;
	// Группа первой задачи создана в конфигураторе
	Для ИндексГруппы = 0 По Элементы.ГруппаПравила.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаПравила.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	Для Каждого Правило Из ПравилаТекущейКолонки Цикл
		
		Если Правило.Удалено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексНастройки = ПравилаТекущейКолонки.Индекс(Правило);
		
		ОбщаяГруппаПравило = Элементы.Добавить("ГруппаПравило_" + ИндексНастройки, Тип("ГруппаФормы"), Элементы.ГруппаПравила);
		ОбщаяГруппаПравило.Вид = Элементы.ГруппаПравилоПример.Вид;
		ОбщаяГруппаПравило.Отображение = Элементы.ГруппаПравилоПример.Отображение;
		ОбщаяГруппаПравило.Группировка = Элементы.ГруппаПравилоПример.Группировка;
		ОбщаяГруппаПравило.ОтображатьЗаголовок = Элементы.ГруппаПравилоПример.ОтображатьЗаголовок;
		ОбщаяГруппаПравило.ЦветФона = Элементы.ГруппаПравилоПример.ЦветФона;
		
		ПолеОбъектПравила = Элементы.Добавить("ПолеОбъектПравила_" + ИндексНастройки, Тип("ПолеФормы"), ОбщаяГруппаПравило);
		ПолеОбъектПравила.Вид = Элементы.ПолеОбъектПравила_Пример.Вид;
		ПолеОбъектПравила.ПутьКДанным = "ПравилаТекущейКолонки[" + ИндексНастройки + "].ОбъектПравила";
		ПолеОбъектПравила.ПоложениеЗаголовка = Элементы.ПолеОбъектПравила_Пример.ПоложениеЗаголовка;
		ПолеОбъектПравила.Заголовок = Элементы.ПолеОбъектПравила_Пример.Заголовок;
		ПолеОбъектПравила.АвтоМаксимальнаяШирина = Элементы.ПолеОбъектПравила_Пример.АвтоМаксимальнаяШирина;
		ПолеОбъектПравила.МаксимальнаяШирина = Элементы.ПолеОбъектПравила_Пример.МаксимальнаяШирина;
		ПолеОбъектПравила.УстановитьДействие("ПриИзменении","Подключаемый_ПолеОбъектПравилаПриИзменении");
		ПолеОбъектПравила.АвтоОтметкаНезаполненного = Элементы.ПолеОбъектПравила_Пример.АвтоОтметкаНезаполненного;
		ПолеОбъектПравила.КнопкаОткрытия = Элементы.ПолеОбъектПравила_Пример.КнопкаОткрытия;
		ПолеОбъектПравила.РежимВыбораИзСписка = Элементы.ПолеОбъектПравила_Пример.РежимВыбораИзСписка;
		
		ПолеСостояниеСобытия = Элементы.Добавить("ПолеСостояниеСобытия_" + ИндексНастройки, Тип("ПолеФормы"), ОбщаяГруппаПравило);
		ПолеСостояниеСобытия.Вид = Элементы.ПолеСостояниеСобытия_Пример.Вид;
		ПолеСостояниеСобытия.ПутьКДанным = "ПравилаТекущейКолонки[" + ИндексНастройки + "].СостояниеСобытия";
		ПолеСостояниеСобытия.ПоложениеЗаголовка = Элементы.ПолеСостояниеСобытия_Пример.ПоложениеЗаголовка;
		ПолеСостояниеСобытия.Заголовок = Элементы.ПолеСостояниеСобытия_Пример.Заголовок;
		ПолеСостояниеСобытия.АвтоМаксимальнаяШирина = Элементы.ПолеСостояниеСобытия_Пример.АвтоМаксимальнаяШирина;
		ПолеСостояниеСобытия.МаксимальнаяШирина = Элементы.ПолеСостояниеСобытия_Пример.МаксимальнаяШирина;
		ПолеСостояниеСобытия.ОтображениеПодсказки = Элементы.ПолеСостояниеСобытия_Пример.ОтображениеПодсказки;
		ПолеСостояниеСобытия.КнопкаОткрытия = Элементы.ПолеСостояниеСобытия_Пример.КнопкаОткрытия;
		ПолеСостояниеСобытия.Подсказка = Элементы.ПолеСостояниеСобытия_Пример.Подсказка;
		ПолеСостояниеСобытия.АвтоОтметкаНезаполненного = Элементы.ПолеСостояниеСобытия_Пример.АвтоОтметкаНезаполненного;
		
		ПолеСостояниеЗадачи = Элементы.Добавить("ПолеСостояниеЗадачи_" + ИндексНастройки, Тип("ПолеФормы"), ОбщаяГруппаПравило);
		ПолеСостояниеЗадачи.Вид = Элементы.ПолеСостояниеЗадачи_Пример.Вид;
		ПолеСостояниеЗадачи.ПутьКДанным = "ПравилаТекущейКолонки[" + ИндексНастройки + "].СостояниеЗадачи";
		ПолеСостояниеЗадачи.ПоложениеЗаголовка = Элементы.ПолеСостояниеЗадачи_Пример.ПоложениеЗаголовка;
		ПолеСостояниеЗадачи.Заголовок = Элементы.ПолеСостояниеЗадачи_Пример.Заголовок;
		ПолеСостояниеЗадачи.АвтоМаксимальнаяШирина = Элементы.ПолеСостояниеЗадачи_Пример.АвтоМаксимальнаяШирина;
		ПолеСостояниеЗадачи.МаксимальнаяШирина = Элементы.ПолеСостояниеЗадачи_Пример.МаксимальнаяШирина;
		ПолеСостояниеЗадачи.ОтображениеПодсказки = Элементы.ПолеСостояниеЗадачи_Пример.ОтображениеПодсказки;
		ПолеСостояниеЗадачи.КнопкаОткрытия = Элементы.ПолеСостояниеЗадачи_Пример.КнопкаОткрытия;
		ПолеСостояниеЗадачи.Подсказка = Элементы.ПолеСостояниеЗадачи_Пример.Подсказка;
		ПолеСостояниеЗадачи.АвтоОтметкаНезаполненного = Элементы.ПолеСостояниеЗадачи_Пример.АвтоОтметкаНезаполненного;
		ПолеСостояниеЗадачи.АвтоОтметкаНезаполненного = Элементы.ПолеСостояниеЗадачи_Пример.АвтоОтметкаНезаполненного;
		ПолеСостояниеЗадачи.РедактированиеТекста      = Элементы.ПолеСостояниеЗадачи_Пример.РедактированиеТекста;
		
		ДекорацияУдалить = Элементы.Добавить("ДекорацияУдалить_" + ИндексНастройки, Тип("ДекорацияФормы"), ОбщаяГруппаПравило);
		ДекорацияУдалить.Вид = Элементы.ДекорацияУдалить_Пример.Вид;
		ДекорацияУдалить.Заголовок = Элементы.ДекорацияУдалить_Пример.Заголовок;
		ДекорацияУдалить.Ширина = Элементы.ДекорацияУдалить_Пример.Ширина;
		ДекорацияУдалить.Высота = Элементы.ДекорацияУдалить_Пример.Высота;
		ДекорацияУдалить.Картинка = Элементы.ДекорацияУдалить_Пример.Картинка;
		ДекорацияУдалить.РазмерКартинки = Элементы.ДекорацияУдалить_Пример.РазмерКартинки;
		ДекорацияУдалить.Гиперссылка = Элементы.ДекорацияУдалить_Пример.Гиперссылка;
		ДекорацияУдалить.УстановитьДействие("Нажатие", "Подключаемый_УдалениеНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	АктивныеПравила = ПравилаТекущейКолонки.НайтиСтроки(Новый Структура("Удалено", Ложь));
	Элементы.ДекорацияНетПравил.Видимость = АктивныеПравила.Количество() = 0;
	Элементы.ГруппаПравила.Видимость = АктивныеПравила.Количество() <> 0;
	
	Для Каждого Правило Из ПравилаТекущейКолонки Цикл
		
		Если Правило.Удалено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = ПравилаТекущейКолонки.Индекс(Правило);
		Элементы["ПолеСостояниеСобытия_"+Индекс].Видимость = Правило.ОбъектПравила <> "ЗадачаСотрудника";
		Элементы["ПолеСостояниеЗадачи_"+Индекс].Видимость = Правило.ОбъектПравила = "ЗадачаСотрудника";
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалениеНажатие(Элемент)
	Индекс = ИндексЭлемента(Элемент.Имя);
	ПравилаТекущейКолонки[Индекс].Удалено = Истина;
	УдалитьПравилоСервер();
КонецПроцедуры

&НаСервере
Процедура УдалитьПравилоСервер()
	ОбновитьЭлементыПравил();
	ЗаполнитьСписокВыбораЭлементовФормы();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеОбъектПравилаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПравило(Команда)
	ДобавитьНастройкуПравил();
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкуПравил()
	
	НоваяСтрока = ПравилаТекущейКолонки.Добавить();
	НоваяСтрока.ОбъектПравила = "ЗадачаСотрудника";
	НоваяСтрока.СостояниеЗадачи = "Выполнена";

	ОбновитьЭлементыПравил();
	ЗаполнитьСписокВыбораЭлементовФормы();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовФормы()
	
	Для Итератор = 0 По ПравилаТекущейКолонки.Количество() - 1 Цикл
		
		Если ПравилаТекущейКолонки[Итератор].Удалено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы["ПолеОбъектПравила_" + Итератор].СписокВыбора.Очистить();
		Элементы["ПолеОбъектПравила_" + Итератор].СписокВыбора.Добавить("ЗадачаСотрудника", НСтр("ru='Задачу'"));
		Элементы["ПолеОбъектПравила_" + Итератор].СписокВыбора.Добавить("Событие", НСтр("ru='Событие'"));
		Элементы["ПолеОбъектПравила_" + Итератор].СписокВыбора.Добавить("ЗаданиеНаРаботу", НСтр("ru='Задание на работу'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПравилаТекущейКолонки(ТекущийОбъект)
	
	ТекущийОбъект.ПравилаКолонки.Очистить();
	
	Для Каждого Правило Из ПравилаТекущейКолонки Цикл
		Если Правило.Удалено Тогда
			Продолжить;
		КонецЕсли;
		НовоеПравило = ТекущийОбъект.ПравилаКолонки.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПравило,Правило);
		НовоеПравило.Состояние = Правило.СостояниеСобытия;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
