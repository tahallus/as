
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МобильныйКлиентУНФ.НастроитьВспомогательнуюФормуМобильныйКлиент(ЭтотОбъект);
	
	ВыделенныеКонтактыМассив = Новый Массив;
	Параметры.Свойство("ВыделенныеКонтакты",ВыделенныеКонтактыМассив);
	ЗаполнитьТаблицуКонтрагентов(ВыделенныеКонтактыМассив);
	
	Если ВыделенныеКонтактыМассив <> Неопределено И ВыделенныеКонтактыМассив.Количество()> 0 Тогда
		Для Каждого Контакт Из ВыделенныеКонтактыМассив Цикл
			НовыйКонтакт = ВыделенныеКонтакты.Добавить();
			НовыйКонтакт.Контакт = Контакт.Ссылка;
		КонецЦикла;
		Заголовок = НСтр("ru='Контрагенты'");
	КонецЕсли;
	Если ВыделенныеКонтакты.Количество() > 1 Тогда
		Заголовок = НСтр("ru='Общие контрагенты'");
	КонецЕсли;
	
	ОбновитьЭлементыКонтрагентов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Выбор_Контрагент" Тогда
		Если Источник.ВладелецФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник.ВладелецФормы = ЭтотОбъект Тогда
			ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент = Параметр.Контрагент;
			Строки = НедействительныеСвязиСКонтрагентами.НайтиСтроки(Новый Структура("Контрагент",Параметр.Контрагент));
			Если Строки.Количество()>0 Тогда
				Для Каждого Строка Из Строки Цикл
					НедействительныеСвязиСКонтрагентами.Удалить(НедействительныеСвязиСКонтрагентами.Индекс(Строка));
				КонецЦикла;
			КонецЕсли;
			ОбновитьЭлементыКонтрагентов();
			ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтакта",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	Модифицированность = Истина;
	
	Строки = НедействительныеСвязиСКонтрагентами.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиСКонтрагентами.Удалить(НедействительныеСвязиСКонтрагентами.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;

	ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент = ВыбранноеЗначение;
	Модифицированность = Истина;
	ОбновитьЭлементыКонтрагентов();
	ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСвязь(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаУстановитьСвязь_")+1));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтакта",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаРазорватьСвязь_")+1));
	
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Подписант;
	
	Если НЕ ЗначениеЗаполнено(КонтактОсновноеКЛ) И НЕ ЗначениеЗаполнено(КонтактПодписант) Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ВыделенныеКонтакты, ДанныеКонтрагента);
		ОбновитьЭлементыКонтрагентов();
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛРазрывСвязи", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоляКонтрагента(Команда)
	ДанныеКонтрагентов.Добавить();
	ОбновитьЭлементыКонтрагентов();
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если Модифицированность = Ложь Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеПоСвязямВРегистр();
	Если ИзмененыСвязиСКонтрагентами Тогда
		СтрокаСЧислом = НСтр("ru='Связи изменены для'");
		Шаблон = НСтр("ru=';%1 контакта;;%1 контактов;%1 контактов;%1 контактов'");
		СтрокаСЧислом = СтрокаСЧислом + Символы.ПС + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, ВыделенныеКонтакты.Количество());
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение связей с контрагентами'"), , СтрокаСЧислом, БиблиотекаКартинок.Информация32);
		Оповестить("ИзменениеСвязейСКонтрагентами_КонтактноеЛицо");
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуКонтрагентов(ВыделенныеКонтактыМассив)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.КонтактноеЛицо КАК КонтактноеЛицо,
	|	Контрагенты.КонтактноеЛицоПодписант КАК Подписант,
	|	КОЛИЧЕСТВО(СвязиКонтрагентКонтактСрезПоследних.Контрагент) КАК КоличествоКонтрагент
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СвязиКонтрагентКонтактСрезПоследних.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтактСрезПоследних.Контакт В(&СписокКонтактов)
	|	И СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна = ЛОЖЬ
	|	И Контрагенты.Недействителен = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязиКонтрагентКонтактСрезПоследних.Контрагент,
	|	Контрагенты.Ссылка,
	|	Контрагенты.КонтактноеЛицо,
	|	Контрагенты.КонтактноеЛицоПодписант
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СвязиКонтрагентКонтактСрезПоследних.Контрагент) = &КоличествоКонтактов";
	
	Запрос.УстановитьПараметр("СписокКонтактов", ВыделенныеКонтактыМассив);
	Запрос.УстановитьПараметр("КоличествоКонтактов", ВыделенныеКонтактыМассив.Количество());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ДанныеКонтрагентов.Добавить();
		Возврат;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		НовыйКонтрагент.Контрагент = Выборка.Контрагент;
		ВыделенныеКонтактыОсновной = ВыделенныеКонтактыМассив.Найти(Выборка.КонтактноеЛицо);
		Если ВыделенныеКонтактыОсновной <> Неопределено Тогда
			НовыйКонтрагент.ОсновноеКЛ = ВыделенныеКонтактыМассив[ВыделенныеКонтактыОсновной];
		КонецЕсли;
		ВыделенныеКонтактыПодписант = ВыделенныеКонтактыМассив.Найти(Выборка.Подписант);
		Если ВыделенныеКонтактыПодписант <> Неопределено  Тогда
			НовыйКонтрагент.Подписант = ВыделенныеКонтактыМассив[ВыделенныеКонтактыПодписант];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтрагентов()
	
	Элементы.Переместить(Элементы.ДобавитьПоляКонтрагента, Элементы.КомандыДобавленияКонтрагент_0);
	Элементы.Переместить(Элементы.КомандыДобавленияРастяжение, Элементы.КомандыДобавленияКонтрагент_0,Элементы.ДобавитьПоляКонтрагента);
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы[ИндексГруппы]);
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаУстановитьСвязь_"+ИндексГруппы));
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаРазорватьСвязь_"+ИндексГруппы));
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		
		ИндексКонтрагента = ДанныеКонтрагентов.Индекс(Контрагент);
		
		Если Элементы.Найти("Контрагент_"+ ИндексКонтрагента)<> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИндексКонтрагента > 0 Тогда
			ГруппаКонтрагент = Элементы.Добавить("ГруппаКонтрагент_" + ИндексКонтрагента, Тип("ГруппаФормы"), Элементы.СвязанныеКонтрагенты);
			ГруппаКонтрагент.Вид = Элементы.ГруппаКонтрагент_0.Вид;
			ГруппаКонтрагент.Отображение = Элементы.ГруппаКонтрагент_0.Отображение;
			ГруппаКонтрагент.Группировка = Элементы.ГруппаКонтрагент_0.Группировка;
			ГруппаКонтрагент.ОтображатьЗаголовок = Ложь;

			ГруппаНаименованиеКонтрагента = Элементы.Добавить("ГруппаНаименованиеКонтрагента_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаКонтрагент);
			ГруппаНаименованиеКонтрагента.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНаименованиеКонтрагента.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаНаименованиеКонтрагента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаНаименованиеКонтрагента.ОтображатьЗаголовок = Ложь;
			
			ПолеКонтрагент = Элементы.Добавить("Контрагент_" + ИндексКонтрагента, Тип("ПолеФормы"), ГруппаНаименованиеКонтрагента);
			ПолеКонтрагент.Вид = Элементы.Контрагент_0.Вид;
			ПолеКонтрагент.ПутьКДанным = "ДанныеКонтрагентов[" + ИндексКонтрагента + "].Контрагент";
			ПолеКонтрагент.ПодсказкаВвода = НСтр("ru = 'Связать с контрагентом'");
			ПолеКонтрагент.Заголовок = НСтр("ru = 'Контрагент'");
			ПолеКонтрагент.КнопкаВыпадающегоСписка = Ложь;
			ПолеКонтрагент.КнопкаСоздания = Ложь;
			ПолеКонтрагент.ПоложениеЗаголовка = Элементы.Контрагент_0.ПоложениеЗаголовка;
			ПолеКонтрагент.Ширина = Элементы.Контрагент_0.Ширина;
			ПолеКонтрагент.АвтоМаксимальнаяШирина = Элементы.Контрагент_0.АвтоМаксимальнаяШирина;
			ПолеКонтрагент.МаксимальнаяШирина = Элементы.Контрагент_0.МаксимальнаяШирина;
			ПолеКонтрагент.ТолькоПросмотр = ЗначениеЗаполнено(Контрагент.Контрагент);
			ПолеКонтрагент.УстановитьДействие("ОбработкаВыбора","КонтрагентОбработкаВыбора");
			ПолеКонтрагент.УстановитьДействие("НачалоВыбора","КонтрагентНачалоВыбора");
			
			КомандыСвязей = Элементы.Добавить("КоманднаяПанельСвязей_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаНаименованиеКонтрагента);
			КомандыСвязей.Вид = ВидГруппыФормы.КоманднаяПанель;
			КомандыСвязей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			КомандыСвязей.РастягиватьПоГоризонтали = Ложь;
			
			ГруппаКомандСвязейСКонтрагентом = Элементы.Добавить("КомандыСвязейСКонтрагентом_" + ИндексКонтрагента, Тип("ГруппаФормы"), КомандыСвязей);
			ГруппаКомандСвязейСКонтрагентом.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКомандСвязейСКонтрагентом.Отображение = ОтображениеГруппыКнопок.Компактное;
			
			
			КнопкаУстановитьСвязь = Элементы.Добавить("УстановитьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаУстановитьСвязь = ЭтаФорма.Команды.Добавить("КомандаУстановитьСвязь_" + ИндексКонтрагента);
			КомандаУстановитьСвязь.Действие = "УстановитьСвязь";
			КомандаУстановитьСвязь.Подсказка = НСтр("ru = 'Установить связь с существующим контрагентом'");
			КомандаУстановитьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаУстановитьСвязь.ИмяКоманды = КомандаУстановитьСвязь.Имя;
			КнопкаУстановитьСвязь.АвтоМаксимальнаяШирина = Ложь;
			КнопкаУстановитьСвязь.МаксимальнаяШирина = 3;
			КнопкаУстановитьСвязь.Картинка = БиблиотекаКартинок.УстановитьСвязь;
			КнопкаУстановитьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаУстановитьСвязь.ТолькоВоВсехДействиях = Ложь;
			
			КнопкаРазорватьСвязь = Элементы.Добавить("РазорватьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаРазорватьСвязь = ЭтаФорма.Команды.Добавить("КомандаРазорватьСвязь_" + ИндексКонтрагента);
			КомандаРазорватьСвязь.Действие = "РазорватьСвязь";
			КомандаРазорватьСвязь.Подсказка = НСтр("ru = 'Разорвать связь с контрагентом'");
			КомандаРазорватьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаРазорватьСвязь.ИмяКоманды = КомандаРазорватьСвязь.Имя;
			КнопкаРазорватьСвязь.АвтоМаксимальнаяШирина = Ложь;
			КнопкаРазорватьСвязь.МаксимальнаяШирина = 3;
			КнопкаРазорватьСвязь.Картинка = БиблиотекаКартинок.РазорватьСвязь;
			КнопкаРазорватьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаРазорватьСвязь.ТолькоВоВсехДействиях = Ложь;
			
			КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
			
			ГруппаКомандСвязейСКонтрагентом.РастягиватьПоГоризонтали = Элементы.КоманднаяПанельСвязей_0.РастягиватьПоГоризонтали;
			
			ГруппаДобавление = Элементы.Добавить("КомандыДобавленияКонтрагент_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаКонтрагент);
			ГруппаДобавление.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавление.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаДобавление.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаДобавление.ОтображатьЗаголовок = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	ПолеКонтрагент = Элементы.Контрагент_0;
	ПолеКонтрагент.ТолькоПросмотр = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаРазорватьСвязь = Элементы.РазорватьСвязь_0;
	КнопкаУстановитьСвязь = Элементы.УстановитьСвязь_0;

	КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	
	ИндексПоследнегоКЛ = ДанныеКонтрагентов.Количество()-1;
	КомандаДобавленияКИ = Элементы["КомандыДобавленияКонтрагент_" + ИндексПоследнегоКЛ];
	Элементы.Переместить(Элементы.ДобавитьПоляКонтрагента, КомандаДобавленияКИ);
	Элементы.Переместить(Элементы.КомандыДобавленияРастяжение, КомандаДобавленияКИ,Элементы.ДобавитьПоляКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПоСвязямВРегистр()
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();

	// Установить связи с контрагентами
	Для Каждого Контакт Из ВыделенныеКонтакты Цикл
		Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
			Если Не ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(
				Контрагент.Контрагент, Контакт.Контакт,,ТекущийПользователь,);
			ИзмененыСвязиСКонтрагентами = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// Разорвать связи с контрагентами
	Для Каждого Контрагент Из НедействительныеСвязиСКонтрагентами Цикл
		Если Не ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.СвязиКонтрагентКонтакт.УстановитьНедействительной(Контрагент.Контрагент, Контрагент.Контакт);
		ИзмененыСвязиСКонтрагентами = Истина;
		
		Если НЕ Контрагент.ЭтоОсновноеКЛ И НЕ Контрагент.ЭтоПодписант Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяемыйКонтрагент = ИзменяемыеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент.Контрагент));
		Если ИзменяемыйКонтрагент.Количество() = 0 Тогда
			НоваяСтрока = ИзменяемыеКонтрагенты.Добавить();
			НоваяСтрока.Контрагент = Контрагент.Контрагент;
			Если Контрагент.Контрагент.КонтактноеЛицо = Контрагент.Контакт И Контрагент.ЭтоОсновноеКЛ Тогда
				НоваяСтрока.ИзменитьОсновной = Контрагент.ЭтоОсновноеКЛ;
			КонецЕсли;
			Если Контрагент.Контрагент.КонтактноеЛицоПодписант = Контрагент.Контакт И Контрагент.ЭтоПодписант Тогда
				НоваяСтрока.ИзменитьПодписанта = Контрагент.ЭтоПодписант;
			КонецЕсли;
		Иначе
			НоваяСтрока = ИзменяемыйКонтрагент[0];
			Если НЕ НоваяСтрока.ИзменитьОсновной И Контрагент.Контрагент.КонтактноеЛицо = Контрагент.Контакт Тогда
				НоваяСтрока.ИзменитьОсновной = Контрагент.ЭтоОсновноеКЛ;
			КонецЕсли;
			Если НЕ НоваяСтрока.ИзменитьПодписанта И Контрагент.Контрагент.КонтактноеЛицоПодписант = Контрагент.Контакт Тогда
				НоваяСтрока.ИзменитьПодписанта = Контрагент.ЭтоПодписант;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Контрагент Из ИзменяемыеКонтрагенты Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			КонтрагентОбъект = Контрагент.Контрагент.ПолучитьОбъект();
			
			Если Контрагент.ИзменитьОсновной Тогда
				КонтрагентОбъект.КонтактноеЛицо = Неопределено;
			КонецЕсли;
			
			Если Контрагент.ИзменитьПодписанта Тогда
				КонтрагентОбъект.КонтактноеЛицоПодписант = Неопределено;
			КонецЕсли;
			
			КонтрагентОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
		КонецПопытки;

	КонецЦикла;

	НедействительныеСвязиСКонтрагентами.Очистить();
	ИзменяемыеКонтрагенты.Очистить();
	
	Модифицированность = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСохранениеИзменений",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохранениеИзменений(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанныеПоСвязямВРегистр();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВТаблицуНедействительных(Контакты, Контрагент ,НовоеЗначение = Неопределено)
	
	Для Каждого Контакт Из Контакты Цикл
		
		Если ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
			НедействительнаяСвязьСКонтрагентом = НедействительныеСвязиСКонтрагентами.Добавить();
			НедействительнаяСвязьСКонтрагентом.Контакт = Контакт.Контакт;
			НедействительнаяСвязьСКонтрагентом.Контрагент = Контрагент.Контрагент;
			Если Контрагент.ОсновноеКЛ = Контакт.Контакт Тогда
				НедействительнаяСвязьСКонтрагентом.ЭтоОсновноеКЛ = Истина;
			КонецЕсли;
			Если Контрагент.Подписант = Контакт.Контакт Тогда
				НедействительнаяСвязьСКонтрагентом.ЭтоПодписант = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКонтрагентов.Удалить(Контрагент);
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		ДанныеКонтрагентов.Добавить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагента,Оповещение)
	
	КонтактОсновноеКЛ = ДанныеКонтрагента.ОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагента.Подписант;
	
	Если ЗначениеЗаполнено(КонтактОсновноеКЛ) И ЗначениеЗаполнено(КонтактПодписант) Тогда
		Если ВыделенныеКонтакты.Количество() > 1 Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Среди выделенных контактов есть контакты, которые используются " + Символы.ПС+
			"как основной/подписант для контрагента %1"+Символы.ПС+
			"При записи данные признаки контрагента станут незаполненными'"),
			ДанныеКонтрагента.Контрагент);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как основной и подписант для контрагента %1" + Символы.ПС+
			"При записи данные признаки контрагента станут незаполненными'"),
			ДанныеКонтрагента.Контрагент);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(КонтактОсновноеКЛ) Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт %1 используется как основной для контрагента %2"+Символы.ПС+
			"При записи основной контакт контрагента станет незаполненным'"),КонтактОсновноеКЛ,ДанныеКонтрагента.Контрагент);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт %1 используется как подписант для контрагента %2"+Символы.ПС+
			"При записи подписант станет незаполненным'"),КонтактПодписант,ДанныеКонтрагента.Контрагент);
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛРазрывСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ВыделенныеКонтакты,ДанныеКонтрагента);
		
		Модифицированность = Истина;
		ОбновитьЭлементыКонтрагентов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
