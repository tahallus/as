
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КомандыГлобальные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	АвтоподборКонтактов.ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(ЭтотОбъект, Параметры);
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	
	ОбязательноЗаполнятьИсточникВКонтактах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Контакт", "ИсточникПривлечения");
		
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
			ЗаполнитьКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательноЗаполнятьИсточникВКонтактах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	ТекущийКонтрагент = Неопределено;
	Если Параметры.Свойство("ТекущийКонтрагент", ТекущийКонтрагент) Тогда
		
		ТекущиеКонтрагенты = ДанныеКонтрагентов.НайтиСтроки(Новый Структура("Контрагент", ТекущийКонтрагент));
		Если ТекущиеКонтрагенты.Количество() <> 0 Тогда
			ТекущийЭлемент = Элементы.Найти("Контрагент_" + ДанныеКонтрагентов.Индекс(ТекущиеКонтрагенты[0]));
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.СобытиеДляПоказаПослеЗакрытия = Параметры.СобытиеДляПоказаПослеЗакрытия;
	ЗаполнитьСписокВыбораПолейДолжность();
	УстановитьНастройкиКонтроляДублей();
	СозданКопированием = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	Элементы.ФормаПроверитьКонтактНаДубли.Видимость = ПроверятьПредставлениеНаДублиКонтакт ИЛИ ПроверятьАдресЭПНаДублиКонтакт 
		ИЛИ ПроверятьНомерТелефонаНаДублиКонтакт;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗначениеЗаполнено(СобытиеДляПоказаПослеЗакрытия) Тогда
		ПоказатьЗначение(, СобытиеДляПоказаПослеЗакрытия);
	КонецЕсли;
	
	Если КонтактЗамененНаДубль Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ДанныеКонтрагентов.НайтиСтроки(Новый Структура("Контрагент",Параметр)).Количество() <> 0
			ИЛИ (Источник <> Неопределено  И Источник.ВладелецФормы = ЭтотОбъект)
			ИЛИ (ИмяСобытия = "ИзменениеКонтактногоЛица_Контрагент" И Параметр = Объект.Ссылка) Тогда
			ОбновитьДанныеОбъекта();
			ОбновитьДанныеСвязанныхКонтрагентов();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Выбор_Контрагент" Тогда
		Если Источник.ВладелецФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник.ВладелецФормы = ЭтотОбъект Тогда
			ОбновитьЭлементТаблицыКонтрагентов(ИндексВыбранногоКонтрагента,Параметр.Контрагент);
			ТекущийЭлемент = Элементы.Найти("Должность_" + ИндексВыбранногоКонтрагента);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "УстановитьСвязь_Дубли" И (Источник <> Неопределено И Источник.ВладелецФормы = ЭтотОбъект) Тогда
		
		Если ДанныеКонтрагентов.Количество() > 1 ИЛИ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент) Тогда
			НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		Иначе
			НовыйКонтрагент = ДанныеКонтрагентов[0];
		КонецЕсли;
		
		ИндексКонтрагента = ДанныеКонтрагентов.Индекс(НовыйКонтрагент);
		ОбновитьЭлементТаблицыКонтрагентов(ИндексКонтрагента,Параметр.Контрагент);
		
	КонецЕсли;
		
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СозданКопированием И Элементы.ФормаПроверитьКонтактНаДубли.Видимость Тогда
		
		Состояние(НСтр("ru='Проверка контакта на дубли'"), 49);
		ПроверитьКонтрагентаНаДублиСервер();
		Состояние(НСтр("ru='Проверка контакта на дубли'"), 100);
		
		ПоказатьСообщениеОДублях();
	КонецЕсли;

	Если Элементы.ДублиНаименование.Видимость ИЛИ ДублиКИ.Количество() > 0 Тогда
		ПоказатьПредупреждениеОДублях();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРолей(ТекущийОбъект);
	
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПроигнорированоСообщениеОДублях Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоЗаписьДубля");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СообщениеОДублированииИнформации", СообщениеОДублированииИнформации);
	КонецЕсли;
	
	ПроигнорированоСообщениеОДублях = Ложь;
	СообщениеОДублированииИнформации = "";

	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСвязиКонтрагентКонтакт(ТекущийОбъект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(
		ЭтотОбъект,
		Объект.Наименование,
		ТекущийОбъект.Ссылка,
		ПараметрыСклоненияФИО(ТекущийОбъект));
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого Контрагент Из ДанныеКонтрагентов Цикл
		
		Если ПустаяСтрока(Контрагент.Должность) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеДолжность = Элементы.Найти("Должность_" + ДанныеКонтрагентов.Индекс(Контрагент));
		// Удалим если значение уже было
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив);
		НайденныйЭлемент = ПолеДолжность.СписокВыбора.НайтиПоЗначению(СокрЛП(Контрагент.Должность));
		Если НайденныйЭлемент <> Неопределено Тогда
			ПолеДолжность.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		// Вставим на первое место
		ПолеДолжность.СписокВыбора.Вставить(0, СокрЛП(Контрагент.Должность));
		// Сократим список выбора до 10 значений
		Пока ПолеДолжность.СписокВыбора.Количество() > 10 Цикл
			ПолеДолжность.СписокВыбора.Удалить(ПолеДолжность.СписокВыбора.Количество()-1);
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СпискиВыбора", "ДолжностиКонтактныхЛиц", ПолеДолжность.СписокВыбора.ВыгрузитьЗначения());
			
	КонецЦикла;
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		ТекущийОбъект.Ссылка,
		АдресЭП(),
		УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
	КонецЕсли;
	
	ОбновитьЭлементыСвязанныхКонтрагентов();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("КонтактноеЛицо",	Объект.Ссылка);
	ПараметрОповещения.Вставить("СвязанныеКонтрагенты", ДанныеКонтрагентов);
	ПараметрОповещения.Вставить("Наименование",		Объект.Наименование);
	
	Оповестить("Запись_КонтактноеЛицо", ПараметрОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ); // для проверки
	// внедрения БСП
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДокументУдостоверяющийЛичностьПриИзменении(Элемент)
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклоненияФИО(Объект));
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	Если НЕ ПроверятьПредставлениеНаДублиКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.Наименование)) Тогда
		Элементы.ДублиНаименование.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	ПроверитьНаДубли();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// УНФ Автоподбор контактов
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ОписаниеОповещения") Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьКонтактнуюИнформацию(ВыбранноеЗначение);
		ОбновитьЭлементыКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ Автоподбор контактов
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.НаименованиеАвтоПодбор(ЭтотОбъект, Элемент.Имя, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, Объект.Наименование, ПараметрыСклоненияФИО(Объект));
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоРолейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РольИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Роль_")+1);
	СтрокаРолей = ДанныеРолей.НайтиПоИдентификатору(РольИД);
	ДанныеРолей.Удалить(СтрокаРолей);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	Если ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент = ВыбранноеЗначение Тогда
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
		Если Строки.Количество()>0 Тогда
			Для Каждого Строка Из Строки Цикл
				НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если КонтактОсновноеКЛ ИЛИ КонтактПодписант Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИндексКонтрагента", ИндексВыбранногоКонтрагента);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛВыборКонтрагента", ЭтотОбъект, ДополнительныеПараметры);
		ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента]);
	
	Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьЭлементыСвязанныхКонтрагентов();
	ТекущийЭлемент = Элементы.Найти(Строка("Должность_" + ИндексВыбранногоКонтрагента));
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	Если ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СозданиеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	Если ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СозданиеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ДанныеКонтрагентов[Индекс].Контрагент);
	ПараметрыФормы.Вставить("ТекущийКонтакт", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛРазрывСвязи", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ Объект.Недействителен Тогда
		Возврат;
	КонецЕсли;
	
	КонтактОсновноеКЛ = Ложь;
	КонтактПодписант = Ложь;
	
	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		
		Если НЕ Контрагент.ЭтоОсновноеКЛ И НЕ Контрагент.ЭтоПодписант Тогда
			Продолжить;
		КонецЕсли;
		
		Если Контрагент.ЭтоОсновноеКЛ Тогда
			КонтактОсновноеКЛ = Истина;
		КонецЕсли;
		
		Если Контрагент.ЭтоПодписант Тогда
			КонтактПодписант = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛНедействителен",ЭтотОбъект);
	
	Если КонтактОсновноеКЛ И КонтактПодписант Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основное контактное лицо и подписант контрагента. Пометить его недействительным?'");
	ИначеЕсли КонтактОсновноеКЛ Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основное контактное лицо контрагента. Пометить его недействительным?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Контакт используется как как подписант контрагента. Пометить его недействительным?'");
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиПоПредставлениюНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	
	Для Каждого Контрагент Из ЭтотОбъект.ДанныеКонтрагентов Цикл
		МассивКонтактов.Добавить(Контрагент.Контрагент);
	КонецЦикла;
	
	ПараметрыДублей.Вставить("ИсключаяКонтрагентов", МассивКонтактов);
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактныеЛица.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаПоказатьВСписке_")+1));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",Новый Структура);
	ПараметрыФормы.Отбор.Вставить("Контакт",Объект.Ссылка);
	ПараметрыФормы.Отбор.Вставить("ТекущийКонтрагент", ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаСписка",ПараметрыФормы,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСКонтрагентом(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаУстановитьСвязь_")+1));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтакта",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагента()
	ДобавитьКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтрагентаНаСервере()
	ДанныеКонтрагентов.Добавить();
	ОбновитьЭлементыСвязанныхКонтрагентов();
	ИндексПоследнегоКА = ДанныеКонтрагентов.Количество() - 1;
	ТекущийЭлемент = Элементы["Контрагент_" + ИндексПоследнегоКА];
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаРазорватьСвязь_")+1));
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ 
		(НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант) Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛРазрывСвязи", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКонтрагента()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСозданиеКонтрагента",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + Символы.ПС + "Переход к созданию контрагента возможен только после записи данных." + Символы.ПС + "Данные будут записаны'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование",Элементы["Контрагент_"+ИндексВыбранногоКонтрагента].ТекстРедактирования);
		ПараметрыФормы.Вставить("Контакт",Объект.Ссылка);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛица"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагента,Оповещение)
	
	КонтактОсновноеКЛ = ДанныеКонтрагента.ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагента.ЭтоПодписант;
	
	Если КонтактОсновноеКЛ И КонтактПодписант Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как основной и подписант для контрагента %1."+Символы.ПС+
			"При записи основной контакт и подписант контрагента станут незаполненными'"),ДанныеКонтрагента.Контрагент);
	ИначеЕсли КонтактОсновноеКЛ Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как основной для контрагента %1."+Символы.ПС+
			"При записи основной контакт контрагента станет незаполненным'"),ДанныеКонтрагента.Контрагент);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как подписант для контрагента %1"+Символы.ПС+
			"При записи подписант станет незаполненным'"),ДанныеКонтрагента.Контрагент);
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактНаДубли(Команда)
	
	Состояние(НСтр("ru='Проверка контрагента на дубли'"), 49);
	ПроверитьКонтрагентаНаДублиСервер();
	Состояние(НСтр("ru='Проверка контрагента на дубли'"), 100);
	
	ПоказатьСообщениеОДублях();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ПрочитатьДанныеРолей();
	ОбновитьЭлементыРолей();
	
	ТегированиеОбъектов.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, Объект);
	
	ОбновитьДанныеСвязанныхКонтрагентов();
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	Если Параметры.Свойство("ДанныеИзКонтактнойФормы") Тогда
		ЗаполнитьПоДаннымКонтактнойФормы(Параметры);
	КонецЕсли;
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
		
		ДанныеКонтрагентов.Очистить();
		
		Если ТипЗнч(Параметры.ЗначенияЗаполнения.Контрагент) = Тип("Массив")
			И Параметры.ЗначенияЗаполнения.Контрагент.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(Параметры.ЗначенияЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
			НовыйКонтрагент.Контрагент = Параметры.ЗначенияЗаполнения.Контрагент;
			ОбновитьЭлементыСвязанныхКонтрагентов();
			Возврат;
		КонецЕсли;
		
		Для Каждого Контрагент Из Параметры.ЗначенияЗаполнения.Контрагент Цикл
			НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
			НовыйКонтрагент.Контрагент = Контрагент;
		КонецЦикла;
		
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент",ПривязанныйКонтрагент) Тогда
		ДанныеКонтрагентов.Очистить();
		НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		НовыйКонтрагент.Контрагент = ПривязанныйКонтрагент;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Если Параметры.Свойство("НаименованиеКонтакта") Тогда
			Объект.Наименование = Параметры.НаименованиеКонтакта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Контакт");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбновитьЭлементыКонтактнойИнформации(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСвязанныхКонтрагентов()
	
	ДанныеКонтрагентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Недействителен КАК Недействителен,
	|	Контрагенты.КонтактноеЛицо КАК ОсновноеКЛ,
	|	Контрагенты.КонтактноеЛицоПодписант КАК Подписант,
	|	СвязиКонтрагентКонтакт.Должность КАК Должность,
	|	СвязиКонтрагентКонтакт.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = СвязиКонтрагентКонтакт.Контрагент)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|	И Контрагенты.Недействителен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Контакт", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура("Контрагент",ВыборкаДетальныеЗаписи.Контрагент);
		НедействительнаяСвязь = НедействительныеСвязиКонтрагенты.НайтиСтроки(Отбор);
		
		Если НедействительнаяСвязь.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		НовыйКонтрагент.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		НовыйКонтрагент.Должность = Строка(ВыборкаДетальныеЗаписи.Должность);
		НовыйКонтрагент.Порядок   = ВыборкаДетальныеЗаписи.Порядок;
		НовыйКонтрагент.ЭтоОсновноеКл = ?(ВыборкаДетальныеЗаписи.ОсновноеКЛ = Объект.Ссылка,Истина,Ложь);
		НовыйКонтрагент.ЭтоПодписант = ?(ВыборкаДетальныеЗаписи.Подписант = Объект.Ссылка,Истина,Ложь);
	КонецЦикла;
	
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
	КонецЕсли;
	
	ОбновитьЭлементыСвязанныхКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыСвязанныхКонтрагентов()
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы[ИндексГруппы]);
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаУстановитьСвязь_"+ИндексГруппы));
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаРазорватьСвязь_"+ИндексГруппы));
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаПоказатьВСписке_"+ИндексГруппы));
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	ПолеКонтрагент = Элементы.Контрагент_0;
	КнопкаРазорватьСвязь = Элементы.РазорватьСвязь_0;
	КнопкаУстановитьСвязь = Элементы.УстановитьСвязь_0;
	ПолеДолжность = Элементы.Должность_0;
	ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
	ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
	
	ПолеКонтрагент.КнопкаОткрытия = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	ПолеКонтрагент.КнопкаВыбора = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	ПолеКонтрагент.КнопкаСоздания = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент) Тогда
		ПолеКонтрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		ПолеКонтрагент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Плюс;
	КонецЕсли;
	ПолеДолжность.Доступность = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);

	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		
		ИндексКонтрагента = ДанныеКонтрагентов.Индекс(Контрагент);
		
		Если Элементы.Найти("Контрагент_"+ ИндексКонтрагента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКонтрагента > 0 Тогда
			ГруппаКонтрагент = Элементы.Добавить("ГруппаКонтрагент_" + ИндексКонтрагента, Тип("ГруппаФормы"), Элементы.СвязанныеКонтрагенты);
			ГруппаКонтрагент.Вид = Элементы.ГруппаКонтрагент_0.Вид;
			ГруппаКонтрагент.Отображение = Элементы.ГруппаКонтрагент_0.Отображение;
			ГруппаКонтрагент.Группировка = Элементы.ГруппаКонтрагент_0.Группировка;
			ГруппаКонтрагент.СквозноеВыравнивание = Элементы.ГруппаКонтрагент_0.СквозноеВыравнивание;
			ГруппаКонтрагент.ОтображатьЗаголовок = Элементы.ГруппаКонтрагент_0.ОтображатьЗаголовок;
			ГруппаКонтрагент.Ширина = Элементы.ГруппаКонтрагент_0.Ширина;
			
			ГруппаНаименованиеКонтрагента = Элементы.Добавить("ГруппаНаименованиеКонтрагента_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаКонтрагент);
			ГруппаНаименованиеКонтрагента.Вид = Элементы.ГруппаНаименованиеКонтрагента_0.Вид;
			ГруппаНаименованиеКонтрагента.Отображение = Элементы.ГруппаНаименованиеКонтрагента_0.Отображение;
			ГруппаНаименованиеКонтрагента.Группировка = Элементы.ГруппаНаименованиеКонтрагента_0.Группировка;
			ГруппаНаименованиеКонтрагента.СквозноеВыравнивание = Элементы.ГруппаНаименованиеКонтрагента_0.СквозноеВыравнивание;
			ГруппаНаименованиеКонтрагента.ОтображатьЗаголовок = Элементы.ГруппаНаименованиеКонтрагента_0.ОтображатьЗаголовок;
			
			ПолеКонтрагент = Элементы.Добавить("Контрагент_" + ИндексКонтрагента, Тип("ПолеФормы"), ГруппаНаименованиеКонтрагента);
			ПолеКонтрагент.Вид = Элементы.Контрагент_0.Вид;
			ПолеКонтрагент.ПутьКДанным = "ДанныеКонтрагентов[" + ИндексКонтрагента + "].Контрагент";
			ПолеКонтрагент.ПодсказкаВвода = Элементы.Контрагент_0.ПодсказкаВвода;
			ПолеКонтрагент.Заголовок = Элементы.Контрагент_0.Заголовок;
			ПолеКонтрагент.КнопкаВыпадающегоСписка = Элементы.Контрагент_0.КнопкаВыпадающегоСписка;
			ПолеКонтрагент.ПоложениеЗаголовка = Элементы.Контрагент_0.ПоложениеЗаголовка;
			ПолеКонтрагент.АвтоМаксимальнаяШирина = Элементы.Контрагент_0.АвтоМаксимальнаяШирина;
			ПолеКонтрагент.МаксимальнаяШирина = Элементы.Контрагент_0.МаксимальнаяШирина;
			ПолеКонтрагент.УстановитьДействие("ПриИзменении","КонтрагентПриИзменении");
			ПолеКонтрагент.УстановитьДействие("ОбработкаВыбора","КонтрагентОбработкаВыбора");
			ПолеКонтрагент.УстановитьДействие("НачалоВыбора","КонтрагентНачалоВыбора");
			ПолеКонтрагент.УстановитьДействие("Создание","КонтрагентСоздание");
			ПолеКонтрагент.УстановитьДействие("Открытие","КонтрагентОткрытие");
			ПолеКонтрагент.УстановитьДействие("ИзменениеТекстаРедактирования","КонтрагентИзменениеТекстаРедактирования");
			
			ГруппаКонтрагент.ВертикальныйИнтервал = Элементы.ГруппаКонтрагент_0.ВертикальныйИнтервал;
			
			КомандыСвязей = Элементы.Добавить("КоманднаяПанельСвязей_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаНаименованиеКонтрагента);
			КомандыСвязей.Вид = Элементы.КоманднаяПанельСвязей_0.Вид;
			КомандыСвязей.РастягиватьПоГоризонтали = Элементы.КоманднаяПанельСвязей_0.РастягиватьПоГоризонтали;
			
			ГруппаКомандСвязейСКонтрагентом = Элементы.Добавить("КомандыСвязейСКонтрагентом_" + ИндексКонтрагента, Тип("ГруппаФормы"), КомандыСвязей);
			ГруппаКомандСвязейСКонтрагентом.Вид = Элементы.КомандыСвязейСКонтрагентом_0.Вид;
			ГруппаКомандСвязейСКонтрагентом.Отображение = Элементы.КомандыСвязейСКонтрагентом_0.Отображение;
						
			КнопкаУстановитьСвязь = Элементы.Добавить("УстановитьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаУстановитьСвязь = Команды.Добавить("КомандаУстановитьСвязь_" + ИндексКонтрагента);
			КомандаУстановитьСвязь.Действие = "УстановитьСвязьСКонтрагентом";
			КомандаУстановитьСвязь.Подсказка = НСтр("ru = 'Установить связь с существующим контрагентом'");
			КомандаУстановитьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаУстановитьСвязь.ИмяКоманды = КомандаУстановитьСвязь.Имя;
			КнопкаУстановитьСвязь.Высота = 1;
			КнопкаУстановитьСвязь.Картинка = БиблиотекаКартинок.УстановитьСвязь;
			КнопкаУстановитьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаУстановитьСвязь.АвтоМаксимальнаяШирина = Элементы.УстановитьСвязь_0.АвтоМаксимальнаяШирина;
			КнопкаУстановитьСвязь.МаксимальнаяШирина = Элементы.УстановитьСвязь_0.МаксимальнаяШирина;
			
			КнопкаРазорватьСвязь = Элементы.Добавить("РазорватьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаРазорватьСвязь = Команды.Добавить("КомандаРазорватьСвязь_" + ИндексКонтрагента);
			КомандаРазорватьСвязь.Действие = "РазорватьСвязь";
			КомандаРазорватьСвязь.Подсказка = НСтр("ru = 'Разорвать связь с контрагентом'");
			КомандаРазорватьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаРазорватьСвязь.ИмяКоманды = КомандаРазорватьСвязь.Имя;
			КнопкаРазорватьСвязь.Высота = 1;
			КнопкаРазорватьСвязь.Картинка = БиблиотекаКартинок.РазорватьСвязь;
			КнопкаРазорватьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаРазорватьСвязь.АвтоМаксимальнаяШирина = Элементы.РазорватьСвязь_0.АвтоМаксимальнаяШирина;
			КнопкаРазорватьСвязь.МаксимальнаяШирина = Элементы.РазорватьСвязь_0.МаксимальнаяШирина;

			ГруппаНаименованиеКонтрагента.ГоризонтальныйИнтервал = Элементы.ГруппаНаименованиеКонтрагента_0.ГоризонтальныйИнтервал;
			
			ГруппаДолжность = Элементы.Добавить("ГруппаДолжность_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаКонтрагент);
			ГруппаДолжность.Вид = Элементы.ГруппаДолжность_0.Вид;
			ГруппаДолжность.Отображение = Элементы.ГруппаДолжность_0.Отображение;
			ГруппаДолжность.Группировка = Элементы.ГруппаДолжность_0.Группировка;
			ГруппаДолжность.СквозноеВыравнивание = Элементы.ГруппаДолжность_0.СквозноеВыравнивание;
			ГруппаДолжность.ОтображатьЗаголовок = Элементы.ГруппаДолжность_0.ОтображатьЗаголовок;
			ГруппаДолжность.Ширина = Элементы.ГруппаДолжность_0.Ширина;
			ГруппаДолжность.ГоризонтальныйИнтервал = Элементы.ГруппаДолжность_0.ГоризонтальныйИнтервал;
			
			ПолеДолжность = Элементы.Добавить("Должность_" + ИндексКонтрагента, Тип("ПолеФормы"), ГруппаДолжность);
			ПолеДолжность.Вид = Элементы.Должность_0.Вид;
			ПолеДолжность.ПутьКДанным = "ДанныеКонтрагентов[" + ИндексКонтрагента + "].Должность";
			ПолеДолжность.Заголовок = Элементы.Должность_0.Заголовок;
			ПолеДолжность.ПоложениеЗаголовка = Элементы.Должность_0.ПоложениеЗаголовка;
			ПолеДолжность.ПодсказкаВвода = Элементы.Должность_0.ПодсказкаВвода;
			ПолеДолжность.АвтоМаксимальнаяШирина = Элементы.Должность_0.АвтоМаксимальнаяШирина;
			ПолеДолжность.МаксимальнаяШирина = Элементы.Должность_0.МаксимальнаяШирина;
			ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
			ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
			ПолеДолжность.РастягиватьПоГоризонтали = Элементы.Должность_0.РастягиватьПоГоризонтали;
			ПолеДолжность.Ширина = Элементы.Должность_0.Ширина;
			
			КнопкаПоказатьВСписке = Элементы.Добавить("ПоказатьВСписке_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаДолжность);
			КомандаПоказатьВСписке = Команды.Добавить("КомандаПоказатьВСписке_" + ИндексКонтрагента);
			КомандаПоказатьВСписке.Действие = "ПоказатьВСписке";
			КомандаПоказатьВСписке.Подсказка = НСтр("ru = 'Показать в списке'");
			
			КнопкаПоказатьВСписке.ИмяКоманды = КомандаПоказатьВСписке.Имя;
			КнопкаПоказатьВСписке.Высота = 1;
			КнопкаПоказатьВСписке.Картинка = БиблиотекаКартинок.ПоказатьВСписке;
			КнопкаПоказатьВСписке.Отображение = ОтображениеКнопки.Картинка;
			КнопкаПоказатьВСписке.АвтоМаксимальнаяШирина = Элементы.ПоказатьВСписке_0.АвтоМаксимальнаяШирина;
			КнопкаПоказатьВСписке.МаксимальнаяШирина = Элементы.ПоказатьВСписке_0.МаксимальнаяШирина;
			
			ПолеКонтрагент.КнопкаОткрытия = ЗначениеЗаполнено(Контрагент.Контрагент);
			ПолеКонтрагент.КнопкаВыбора = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
			ПолеКонтрагент.КнопкаСоздания = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
			
			Если НЕ ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
				ПолеКонтрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
				ПолеКонтрагент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Плюс;
			КонецЕсли;
			
			ПолеДолжность.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаПоказатьВСписке.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементТаблицыКонтрагентов(Индекс,Контрагент)
	ДанныеКонтрагентов[Индекс].Контрагент = Контрагент;
	ДанныеКонтрагентов[Индекс].Должность = Неопределено;
	Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",Контрагент));
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	ОбновитьЭлементыСвязанныхКонтрагентов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПолейДолжность()
	
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Индекс = 0;
	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		ПолеДолжность = Элементы.Найти("Должность_" + Индекс);
		Если ПолеДолжность.Доступность Тогда
			ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
			ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымКонтактнойФормы(Параметры)
	
	ДанныеКФ = Параметры.ДанныеИзКонтактнойФормы;
	Объект.Наименование = Параметры.Контакт;
	
	Если ДанныеКФ["НомераТелефонов"].Количество()>0 Тогда
		КИТелефон = ДанныеКФ["НомераТелефонов"][0];
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ТипКИ);
		СтрокаКИ.Представление = КИТелефон;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИТелефон, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЕсли;
	
	Для Каждого КИ Из ДанныеКФ["АдресаЭП"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Скайп"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Другое"] Цикл
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица;
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ТипКИ);
		СтрокаКИ.Представление = КИ;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КИ, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта()
	НовыйОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛНедействителен(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Недействителен = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Недействителен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛРазрывСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛВыборКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ДополнительныеПараметры.ИндексКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента,ДополнительныеПараметры.ВыбранноеЗначение);
		
		Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ДополнительныеПараметры.ВыбранноеЗначение));
		Если Строки.Количество()>0 Тогда
			Для Каждого Строка Из Строки Цикл
				НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
			КонецЦикла;
		КонецЕсли;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы.Найти(Строка("Должность_" + ДополнительныеПараметры.ИндексКонтрагента));
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ОбновитьЭлементыСвязанныхКонтрагентов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСозданиеКонтрагента(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		Записать();
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контакт",Объект.Ссылка);
		ПараметрыФормы.Вставить("НаименованиеКонтрагента",Элементы["Контрагент_"+ИндексВыбранногоКонтрагента].ТекстРедактирования);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЮридическихДанных(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
		
	Если НЕ ПустаяСтрока(Объект.ДокументУдостоверяющийЛичность) Тогда
		ДинамическиеПараметры.Добавить(СтрШаблон(НСтр("ru='Документ: %1'"), Объект.ДокументУдостоверяющийЛичность));
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='<Документ>'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		ДинамическиеПараметры.Добавить(СтрШаблон(НСтр("ru='Дата рождения: %1'"), Формат(Объект.ДатаРождения,"ДЛФ= ДД")));
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='<Дата рождения>'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаЮрДанныеВсплывающая", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	Заголовок = Новый Массив;
	
	Для Каждого Параметр Из ДинамическиеПараметры Цикл
		Заголовок.Добавить(Параметр);
	КонецЦикла;
	
	Если Заголовок.Количество() > 0 Тогда
		Форма.Элементы[НазваниеГруппы].Заголовок = СтрСоединить(Заголовок, " / ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязиКонтрагентКонтакт(ТекущийОбъект)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(ДанныеКонтрагента.Контрагент, 
			ТекущийОбъект.Ссылка,
			ДанныеКонтрагента.Должность, 
			ТекущийПользователь,
			,
			ДанныеКонтрагента.Порядок);
	КонецЦикла;
	
	Для Каждого ДанныеКонтрагента Из НедействительныеСвязиКонтрагенты Цикл
		
		РегистрыСведений.СвязиКонтрагентКонтакт.УстановитьНедействительной(ДанныеКонтрагента.Контрагент, ТекущийОбъект.Ссылка);

		Если НЕ ДанныеКонтрагента.ЭтоОсновноеКЛ И НЕ ДанныеКонтрагента.ЭтоПодписант Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Контрагент = ДанныеКонтрагента.Контрагент.ПолучитьОбъект();
			
			Если Контрагент.КонтактноеЛицо = ТекущийОбъект.Ссылка Тогда
				Контрагент.КонтактноеЛицо = Неопределено;
			КонецЕсли;
			
			Если Контрагент.КонтактноеЛицоПодписант = ТекущийОбъект.Ссылка Тогда
				Контрагент.КонтактноеЛицоПодписант = Неопределено;
			КонецЕсли;
			
			Контрагент.Записать();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
		
		КонецПопытки;
		
	КонецЦикла;
	
	НедействительныеСвязиКонтрагенты.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВсегдаВыводимыеВидыКИ(КИ, СвойстваВидовКонтактнойИнформацииКонтактныхЛиц)
	
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрокаКИ = КИ.Добавить();
		НоваяСтрокаКИ.Вид = НайденнаяСтрока.Вид;
		НоваяСтрокаКИ.Тип = НайденнаяСтрока.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
	ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
	КонецЕсли;
	Если ВидКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактКакСвязаться.Свойство("Контрагент") Тогда
		СвязьСКонтрагентом = ДанныеКонтрагентов[0];
		СвязьСКонтрагентом.Контрагент = КонтактКакСвязаться.Контрагент;
	КонецЕсли;
	
	Объект.Наименование = КонтактКакСвязаться.Контакт;
	
	СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(КонтактКакСвязаться.ТипКИ);
	СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
	СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
	СтрокаКИ.Вид = ВидКИ;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВТаблицуНедействительных(Контрагент,НовоеЗначение = Неопределено)
	
	Если ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
		НедействительнаяСвязьСКонтрагентом = НедействительныеСвязиКонтрагенты.Добавить();
		НедействительнаяСвязьСКонтрагентом.Контрагент = Контрагент.Контрагент;
		НедействительнаяСвязьСКонтрагентом.Должность = Контрагент.Должность;
		НедействительнаяСвязьСКонтрагентом.ЭтоОсновноеКЛ = Контрагент.ЭтоОсновноеКЛ;
		НедействительнаяСвязьСКонтрагентом.ЭтоПодписант = Контрагент.ЭтоПодписант;
	КонецЕсли;
	
	Контрагент.Контрагент = НовоеЗначение;
	Контрагент.Должность = Неопределено;
	Контрагент.ЭтоОсновноеКЛ = Ложь;
	Контрагент.ЭтоПодписант = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСклоненияФИО(Объект)
	
	Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской") Тогда
		ПолФизическогоЛицаЧислом = 1;
	ИначеЕсли Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский") Тогда
		ПолФизическогоЛицаЧислом = 2;
	Иначе
		ПолФизическогоЛицаЧислом = Неопределено;
	КонецЕсли;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	Если ПолФизическогоЛицаЧислом <> Неопределено Тогда
		ПараметрыСклонения.Пол = ПолФизическогоЛицаЧислом;
	КонецЕсли;
	
	Возврат ПараметрыСклонения;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область Роли

&НаСервере
Процедура ПрочитатьДанныеРолей()
	
	ДанныеРолей.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаРоли.Роль КАК Роль,
		|	КонтактныеЛицаРоли.Роль.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛицаРоли.Роль.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КонтактныеЛица.Роли КАК КонтактныеЛицаРоли
		|ГДЕ
		|	КонтактныеЛицаРоли.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыеДанныеРоли = ДанныеРолей.Добавить();
		НавигационнаяСсылкаФС = "Роль_" + НовыеДанныеРоли.ПолучитьИдентификатор();
		
		НовыеДанныеРоли.Роль = Выборка.Роль;
		НовыеДанныеРоли.ПометкаУдаления = Выборка.ПометкаУдаления;
		НовыеДанныеРоли.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(Выборка.Наименование, Выборка.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеРоли.ДлинаРоли = СтрДлина(Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРолей()
	
	ФС = ДанныеРолей.Выгрузить(, "ПредставлениеРоли").ВыгрузитьКолонку("ПредставлениеРоли");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоРолей.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Элементы.РолиИОтступ.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРолей(ТекущийОбъект)
	
	ТекущийОбъект.Роли.Загрузить(ДанныеРолей.Выгрузить(,"Роль"));
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьРольНаСервере(Роль)
	
	Если ДанныеРолей.НайтиСтроки(Новый Структура("Роль", Роль)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Роль, "Наименование, ПометкаУдаления");
	
	СтрокаРолей = ДанныеРолей.Добавить();
	НавигационнаяСсылкаФС = "Роль_" + СтрокаРолей.ПолучитьИдентификатор();
	
	СтрокаРолей.Роль = Роль;
	СтрокаРолей.ПометкаУдаления = ДанныеРоли.ПометкаУдаления;
	СтрокаРолей.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(ДанныеРоли.Наименование, ДанныеРоли.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаРолей.ДлинаРоли = СтрДлина(ДанныеРоли.Наименование);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьРольНаСервере(знач ЗаголовокРоли)
	
	Роль = НайтиСоздатьРоль(ЗаголовокРоли);
	ПрикрепитьРольНаСервере(Роль);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьРоль(Знач ЗаголовокРоли)
	
	Роль = Справочники.РолиКонтактныхЛиц.НайтиПоНаименованию(ЗаголовокРоли, Истина);
	
	Если Роль.Пустая() Тогда
		
		РольОбъект = Справочники.РолиКонтактныхЛиц.СоздатьЭлемент();
		РольОбъект.Наименование = ЗаголовокРоли;
		РольОбъект.Записать();
		Роль = РольОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Роль;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияРоли(НаименованиеРоли, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеРоли + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаКлиенте
Процедура ПолеВводаРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
		ПрикрепитьРольНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьРольНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаРоли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	ТегированиеОбъектов.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(Знач КлассификаторСсылка)
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Объект.Наименование = ДанныеКонтакта.Title;
	
	ЭтотОбъект.КонтактнаяИнформация.Очистить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
			ЭтотОбъект.КонтактнаяИнформация,
			СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
			
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ЭтотОбъект.КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиенте
Процедура Склонения(Команда)
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(
		ЭтотОбъект, Объект.Наименование, ПараметрыСклоненияФИО(Объект));
КонецПроцедуры
// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтактнаяИнформацияУНФ

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(ТипКонтактнойИнформации)
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("Тип,Значение", ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = ЭтотОбъект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ЭтотОбъект.КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЭтотОбъект.КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Значение;
	
КонецФункции

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	ДобавитьЭлементыДублей();
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
	ИндексКИ = Число(Сред(Элемент.Имя, СтрДлина("ПредставлениеКИ_")+1));
	ДанныеКИ = ЭтотОбъект.КонтактнаяИнформация[ИндексКИ];
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) И ДублиКИ.Количество() <> 0 Тогда
		УдалитьНеактивныеДублиИЭлементы();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКИНаДубли(ДанныеКИ.Представление, ИндексКИ, ДанныеКИ.Тип);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Истина Тогда
		
		КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Иначе
		
		// вызов оставлен для проверки внедрения БСП
		УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Истина Тогда
		
		КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
		
	Иначе
		
		// вызов оставлен для проверки внедрения БСП
		УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаВнедренияБСП
// СтандартныеПодсистемы.КонтактнаяИнформация
// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если 1=0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	Если 1=0 Тогда
		УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация
#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область КонтрольДублей

&НаСервере
Процедура УстановитьНастройкиКонтроляДублей()
	
	Элементы.ДублиНаименование.Видимость       = Ложь;
	НастройкиКонтроляДублейКонтакты    = Константы.НастройкиКонтроляДублейКонтакты.Получить().Получить();
	
	Если НастройкиКонтроляДублейКонтакты <> Неопределено Тогда
		ПроверятьПредставлениеНаДублиКонтакт = НастройкиКонтроляДублейКонтакты.Получить("ПроверятьНаименование");
		ПроверятьНомерТелефонаНаДублиКонтакт = НастройкиКонтроляДублейКонтакты.Получить("ПроверятьТелефон");
		ПроверятьАдресЭПНаДублиКонтакт       = НастройкиКонтроляДублейКонтакты.Получить("ПроверятьАдресЭП");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаДубли()
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Ссылка В (&Контрагенты)
	|	И (Контрагенты.Наименование ПОДОБНО &Наименование
	|			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Наименование)";
	
	ЗапросКонтрагенты.УстановитьПараметр("Наименование", НаименованиеДляПоискаДублей);
	ЗапросКонтрагенты.УстановитьПараметр("Контрагенты", ДанныеКонтрагентов.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	Контакты.Наименование ПОДОБНО &Наименование
		|	И НЕ Контакты.Ссылка = &Ссылка";
		
		ЗапросКонтакты.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ЗапросКонтакты.УстановитьПараметр("Наименование", НаименованиеДляПоискаДублей);
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.СостояниеЛида = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
			|	И (Лиды.Наименование ПОДОБНО &Наименование
			|			ИЛИ Лиды.НаименованиеКомпании ПОДОБНО &Наименование)";
			
			ЗапросЛиды.УстановитьПараметр("Наименование", НаименованиеДляПоискаДублей);
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);		
	Элементы.ДублиНаименование.Видимость = НЕ Результат.Пустой();

КонецПроцедуры

&НаСервере
Процедура ПроверитьКИНаДубли(ПредставлениеКИ, ИндексКИ, ТипКИ, ИндексКЛ = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеКИ) Тогда
		Возврат;
	КонецЕсли;
	
	ТипКИАдресЭП = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ТипКИНомер   = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Если ТипКИ <> ТипКИАдресЭП И ТипКИ <> ТипКИНомер Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКИ = ТипКИАдресЭП И НЕ ПроверятьАдресЭПНаДублиКонтакт И ИндексКЛ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКИ = ТипКИАдресЭП И НЕ ПроверятьНомерТелефонаНаДублиКонтакт И ИндексКЛ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Ссылка В (&Контрагенты)
	|	И Контрагенты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
	
	ПоисковоеВыражение = ПредставлениеКИ;
	
	Если ТипКИ = ТипКИНомер Тогда
		ПоисковоеВыражение = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(ПредставлениеКИ);
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "+", "");
		Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Тогда
			ПоисковоеВыражение = Сред(ПоисковоеВыражение, 2, СтрДлина(ПоисковоеВыражение) - 1);
		КонецЕсли;

		ЗапросКонтрагенты.Текст = СтрЗаменить(ЗапросКонтрагенты.Текст, "АдресЭП", "НомерТелефона");
	КонецЕсли;
	
	ЗапросКонтрагенты.УстановитьПараметр("Контрагенты", ДанныеКонтрагентов.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	ЗапросКонтрагенты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	НЕ Контакты.Ссылка = &Ссылка
		|	И Контакты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
		
		Если ТипКИ = ТипКИНомер Тогда
			ЗапросКонтакты.Текст = СтрЗаменить(ЗапросКонтакты.Текст, "АдресЭП", "НомерТелефона");
		КонецЕсли;
		
		ЗапросКонтакты.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ЗапросКонтакты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
		
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.СостояниеЛида = ЗНАЧЕНИЕ(Справочник.СостоянияЛидов.Завершен)
			|	И Лиды.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
			
			Если ТипКИ = ТипКИНомер Тогда
				ЗапросЛиды.Текст = СтрЗаменить(ЗапросЛиды.Текст, "АдресЭП", "НомерТелефона");
			КонецЕсли;

			ЗапросЛиды.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьДубли = НЕ Результат.Пустой();
	ПоказатьСкрытьНадписьОДубляхКИ(ПредставлениеКИ, ТипКИ, ИндексКИ, ЕстьДубли, ИндексКЛ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьНадписьОДубляхКИ(ПредставлениеКИ, ТипКИ, ИндексКИ, ЕстьДубли, ИндексКЛ = Неопределено)
	
	УдалитьНеактивныеДублиИЭлементы(ИндексКЛ);
	
	Дубли = ДублиКИ.НайтиСтроки(Новый Структура("Представление", ПредставлениеКИ));
	
	Если Дубли.Количество() <> 0 Тогда
		СообщениеОДублях = Элементы.Найти("СообщениеОДублях_" + Строка(Дубли[0].ИндексДекорации));
		СообщениеОДублях.Видимость = ЕстьДубли;
		Возврат;
	КонецЕсли;

	Если НЕ ЕстьДубли Тогда
		Возврат;
	КонецЕсли;
	
	ДублиКИ.Сортировать("ИндексДекорации УБЫВ");
	
	НовыйДубль = ДублиКИ.Добавить();
	НовыйДубль.ТипКИ           = ТипКИ;
	НовыйДубль.Представление   = ПредставлениеКИ;
	НовыйДубль.ИндексДекорации = ДублиКИ[0].ИндексДекорации + 1;
	НовыйДубль.ЭтоДубльКЛ      = ?(ИндексКЛ = Неопределено, Ложь, Истина);
	НовыйДубль.ИндексКЛ        = ?(ИндексКЛ = Неопределено, 0, ИндексКЛ);
	
	ЭлементыКИ = ?(ИндексКЛ = Неопределено, Элементы["ЗначенияКонтактнойИнформации"], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
	
	СообщениеОДублях = Элементы.Добавить("СообщениеОДублях_" + Строка(НовыйДубль.ИндексДекорации), Тип("ДекорацияФормы"), ЭлементыКИ);
	СообщениеОДублях.Заголовок = СообщенияОДубляхКИПоТипу(ТипКИ);
	СообщениеОДублях.Гиперссылка = Истина;
	СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхНажатие");
	
	Если ИндексКЛ = Неопределено Тогда
		ЭлементКИ = Элементы.Найти("КИ_"+Строка(ИндексКИ + 1));
	Иначе
		ЭлементКИ = Элементы.Найти("Контакт_"+ Строка(ИндексКЛ) +"_КИ_"+Строка(ИндексКИ + 1));
	КонецЕсли;
	
	Если ЭлементКИ = Неопределено Тогда
		Элементы.Переместить(СообщениеОДублях, ЭлементыКИ);
	Иначе
		Элементы.Переместить(СообщениеОДублях, ЭлементыКИ, ЭлементКИ);
	КонецЕсли;
		
	СообщениеОДублях.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СообщенияОДубляхКИПоТипу(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат НСтр("ru = 'Найдены дубли по e-mail'");
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат НСтр("ru = 'Найдены дубли по номеру телефона'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьНеактивныеДублиИЭлементы(ИндексКЛ = Неопределено)
	
	Если ИндексКЛ = Неопределено Тогда
		ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформация;
	Иначе
		ТаблицаКИ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация;
	КонецЕсли;
	
	Если ДублиКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндекс = ДублиКИ.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		
		Дубль = ДублиКИ[ТекущийИндекс];
		ТекущийИндекс = ТекущийИндекс - 1;
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ <> Неопределено И НЕ Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.НайтиСтроки(Новый Структура("Представление", Дубль.Представление));
		Если СтрокаКИ.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
		ДублиКИ.Удалить(ДублиКИ.Индекс(Дубль));
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция НаименованиеДляПоискаДублей(Наименование)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Наименование))Тогда
		Возврат "";
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(Наименование, "-", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	
	Возврат СокрЛП("%"+ПоисковоеВыражение+"%");
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборДублей(ВыбранныйКонтрагент)
	
	ЗакрыватьПриВыборе = Ложь;
	ЗначениеВРеквизитФормы(ВыбранныйКонтрагент.ПолучитьОбъект(), "Объект");
	УдалитьЭлементыДублейКИ();
	ДублиКИ.Очистить();
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОДублях()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПредупреждениеДублей",ЭтотОбъект);
	ТекстПредупреждения = ТекстПредупрежденияПоДублям();

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Проигнорировать и записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, СписокКнопок,,КодВозвратаДиалога.Отмена, НСтр("ru = 'Контроль дублей'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыПредупреждениеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СозданКопированием = Ложь;
	ПроигнорированоСообщениеОДублях = Истина;
	СообщениеОДублированииИнформации = ТекстПредупрежденияПоДублям(Истина);
	
	УдалитьЭлементыДублейКИ();
	Элементы.ДублиНаименование.Видимость = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыДублейКИ()
	
	Для Каждого Дубль Из ДублиКИ Цикл
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
	КонецЦикла;
	
	ДублиКИ.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиСервер()
	
	Если ПроверятьПредставлениеНаДублиКонтакт  Тогда
		ПроверитьНаДубли();
	КонецЕсли;
			
	УдалитьЭлементыДублейКИ();	
	ПроверитьКонтрагентаНаДублиКИ();
	
КонецПроцедуры

&НаКлиенте
Функция ТекстПредупрежденияПоДублям(СообщениеПриЗаписи = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если Элементы.ДублиНаименование.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'представлению'"));
	КонецЕсли;
		
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ДублиПоНомеру = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоНомеру.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'номеру телефона'"));
	КонецЕсли;
	
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ДублиПоАдресуЭП = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоАдресуЭП.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'e-mail'"));
	КонецЕсли;
	
	Если СообщениеПриЗаписи Тогда
		Возврат НСтр("ru = 'Проигнорировано сообщение о дублировании информации по '") + СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Найдены дубли по '") + СтрСоединить(МассивСтрок,", ");
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеОДублях()
	
	Если НЕ Элементы.ДублиНаименование.Видимость 
		И ДублиКИ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дублей не найдено'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупрежденияПоДублям());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыДублей()
	
	Для Каждого Дубль Из ДублиКИ Цикл
		
		Если Дубль.ЭтоДубльКЛ Тогда
			ТаблицаКИ = ЭтотОбъект.ДанныеКонтактныхЛиц[Дубль.ИндексКЛ].КонтактнаяИнформация;
		Иначе
			ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформация;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.НайтиСтроки(Новый Структура("Представление", Дубль.Представление));
		Если СтрокаКИ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКИ = ТаблицаКИ.Индекс(СтрокаКИ[0]);
		ИндексКЛ = Дубль.ИндексКЛ;
		ТипКИ    = СтрокаКИ[0].Тип;
		
		ЭлементыКИ = ?(НЕ Дубль.ЭтоДубльКЛ, Элементы["ЗначенияКонтактнойИнформации"], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
	
		СообщениеОДублях = Элементы.Найти("СообщениеОДублях_" + Строка(Дубль.ИндексДекорации));
		
		Если СообщениеОДублях = Неопределено Тогда
			СообщениеОДублях = Элементы.Добавить("СообщениеОДублях_" + Строка(Дубль.ИндексДекорации), Тип("ДекорацияФормы"), ЭлементыКИ);
			СообщениеОДублях.Заголовок = СообщенияОДубляхКИПоТипу(ТипКИ);
			СообщениеОДублях.Гиперссылка = Истина;
			СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхНажатие");
		КонецЕсли;
		
		Если НЕ Дубль.ЭтоДубльКЛ Тогда
			ЭлементКИ = Элементы.Найти("КИ_"+Строка(ИндексКИ + 1));
		Иначе
			ЭлементКИ = Элементы.Найти("Контакт_"+ Строка(ИндексКЛ) +"_КИ_"+Строка(ИндексКИ + 1));
		КонецЕсли;
		
		Если ЭлементКИ = Неопределено Тогда
			Элементы.Переместить(СообщениеОДублях, ЭлементыКИ);
		Иначе
			Элементы.Переместить(СообщениеОДублях, ЭлементыКИ, ЭлементКИ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхКЛНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	НаименованиеКЛ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексДекорации].Наименование;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	Для Каждого Контрагент Из ЭтотОбъект.ДанныеКонтрагентов Цикл
		МассивКонтактов.Добавить(Контрагент.Контрагент);
	КонецЦикла;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеКЛ);
	ПараметрыДублей.Вставить("ИсключаяКонтрагентов", МассивКонтактов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактныеЛица.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	Дубль = ДублиКИ.НайтиСтроки(Новый Структура("ИндексДекорации", ИндексДекорации));
	СтрокаКИ = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Представление", Дубль[0].Представление));
	
	Если СтрокаКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексКИ = ЭтотОбъект.КонтактнаяИнформация.Индекс(СтрокаКИ[0]);
	ТипКИ    = ЭтотОбъект.КонтактнаяИнформация[ИндексКИ].Тип;
	ПредставлениеКИ = ЭтотОбъект.КонтактнаяИнформация[ИндексКИ].Представление;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтрагентов = Новый Массив;
	Для Каждого Контрагент Из ЭтотОбъект.ДанныеКонтрагентов Цикл
		МассивКонтрагентов.Добавить(Контрагент.Контрагент);
	КонецЦикла;
	ПараметрыДублей.Вставить("ПредставлениеКИ", ПредставлениеКИ);
	ПараметрыДублей.Вставить("ТипКИ",           ТипКИ);
	ПараметрыДублей.Вставить("ИсключаяКонтрагентов", МассивКонтрагентов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактныеЛица.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("ВыбранДубльКонтакта") Тогда
		
		ОбработатьВыборДублей(РезультатЗакрытия.ВыбранныйКонтакт);
		Элементы.ДублиНаименование.Видимость = Ложь;
		КонтактЗамененНаДубль = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиКИ()
	
	Для Каждого КИ Из ЭтотОбъект.КонтактнаяИнформация Цикл
		ИндексКИ = ЭтотОбъект.КонтактнаяИнформация.Индекс(КИ);
		ПроверитьКИНаДубли(КИ.Представление, ИндексКИ, КИ.Тип);
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
