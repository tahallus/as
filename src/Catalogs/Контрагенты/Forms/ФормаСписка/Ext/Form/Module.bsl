
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
		Отношения = КлассификацияКонтактов.ТипОтношенийСКонтрагентомПоВидуОперации(Параметры.ДополнительныеПараметры.ВидОперации);
		ОтборПокупатель			= Отношения.Покупатель;
		ОтборПоставщик			= Отношения.Поставщик;
		ОтборПрочиеОтношения	= Отношения.ПрочиеОтношения;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Покупатель") Тогда
		ОтборПокупатель = Параметры.Отбор.Покупатель;
		Параметры.Отбор.Удалить("Покупатель");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Поставщик") Тогда
		ОтборПоставщик = Параметры.Отбор.Поставщик;
		Параметры.Отбор.Удалить("Поставщик");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ПрочиеОтношения") Тогда
		ОтборПрочиеОтношения = Параметры.Отбор.ПрочиеОтношения;
		Параметры.Отбор.Удалить("ПрочиеОтношения");
	КонецЕсли;
	
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "Покупатель",		ОтборПокупатель);
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "Поставщик",		ОтборПоставщик);
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "ПрочиеОтношения",	ОтборПрочиеОтношения);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	Если Параметры.Отбор.Свойство("Контакт") Тогда
		Если ЗначениеЗаполнено(Параметры.Отбор.Контакт) Тогда
			УстановитьМеткуИОтборСписка("Контакт", "Контакт", Параметры.Отбор.Контакт);
		КонецЕсли;
		Элементы.Список.ТекущаяСтрока = Параметры.Отбор.ТекущийКонтрагент;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Недействителен",
		Ложь,,,
		Не Элементы.ПоказыватьНедействительных.Пометка);
		
	ПрочитатьИерархию();
	
	Параметры.Свойство("Контакт", ПривязанныйКонтакт);
	Параметры.Свойство("ЭтоЗагрузкаИзВнешнегоИсточника", ЭтоЗагрузкаИзВнешнегоИсточника);
	
	// Установим видимость подменю в зависимости от наличия прав
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ПодменюПродать.Видимость = ДоступноПравоСозданияДокументовРазделаПродажи();
		Элементы.ПодменюКупить.Видимость = ДоступноПравоСозданияДокументовРазделаЗакупки();
	КонецЕсли;
	
	// Установим настройки формы для случая открытия в режиме выбора
	Элементы.ГруппаКомандДействий.Видимость = Не Параметры.РежимВыбора;
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	Элементы.Список.МножественныйВыбор = ?(Параметры.ЗакрыватьПриВыборе = Неопределено, Ложь, Не Параметры.ЗакрыватьПриВыборе);
	Если Параметры.РежимВыбора Тогда
		КлючНазначенияИспользования = "ВыборПодбор";
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Параметры.Свойство("ОткрытиеИзФормыКонтакта", ОткрытиеИзФормыКонтакта);
		Если ОткрытиеИзФормыКонтакта Тогда
			Элементы.Создать.Видимость = Ложь;
			Элементы.Скопировать.Видимость = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Видимость = Ложь;
			Элементы.СписокКонтекстноеМенюСкопировать.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КлючНазначенияИспользования = "Список";
	КонецЕсли;
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ИмяФормы, "ВключаяВложенные", Ложь);
		
	НастроитьКомандуЭкспортВАдреснуюКнигу();
	
	// УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	ВариантОтборовФормы = ВариантОтбораДляНастроек();
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,Новый Структура("ОтборПериод", "ДатаСоздания"), ВариантОтборовФормы);
	// Конец УНФ.ОтборыСписка
	
	УстановитьОтборПоДействительнымСвязям();
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски") Тогда
		// Команды1СПАРКРиски
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Список, Элементы.Подменю1СПАРКРиски);
		// Конец Команды1СПАРКРиски
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаСпискаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Контрагенты, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
	Элементы.ФормаИзменитьВыделенные.Видимость = МожноРедактировать;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	УстановитьВидимостьИДоступностьМобильноеПриложениеИРМК();
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоЗагрузкаИзВнешнегоИсточника = Истина Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника", 0.2, Истина);
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеУНФКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	//УНФ.ОтборыСписка
	СохранитьНастройкиОтборов();
	//Конец УНФ.ОтборыСписка

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КонтрагентГруппа" Тогда
		
		НоваяГруппа = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Количество() <> 0 Тогда
			НоваяГруппа = Параметр[0];
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			НоваяГруппа = Параметр;
		КонецЕсли;
		
		ПрочитатьИерархию(НоваяГруппа);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент" ИЛИ ИмяСобытия = "Запись_КонтактноеЛицо" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСвязейСКонтактами_Контрагент" Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И Параметр.Свойство("Назначение") Тогда
		
		Если Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
			ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
		
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеУНФКлиент.КомандыЭДО_ФормаСпискаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПокупательПриИзменении(Элемент)
	
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "Покупатель", ОтборПокупатель);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоставщикПриИзменении(Элемент)
	
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "Поставщик", ОтборПоставщик);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочиеОтношенияПриИзменении(Элемент)
	
	УстановитьОтборДеловыеОтношения(ЭтотОбъект, "ПрочиеОтношения", ОтборПрочиеОтношения);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "ДатаСоздания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегментОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментамНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контакт", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("ИсточникПривлеченияПокупателя", Элемент.Родитель.Имя, ВыбранноеЗначение);
	
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ПриАктивизацииДинамическогоСписка(ЭтотОбъект, Элемент, ТекущийКонтрагент,
		"Ссылка");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если ОткрытиеИзФормыКонтакта И Параметры.РежимВыбора Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормы"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	
	Если Не Копирование И Не ЭтоГруппа Тогда
		
		// Требуется специальная обработка, иначе признаки "Покупатель" / "Поставщик" / "Прочие отношения" не заполнятся в
		// форме нового, т.к. они объединяются в группе отбора "ИЛИ"
		Отказ = Ложь;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Покупатель",		ОтборПокупатель);
		ЗначенияЗаполнения.Вставить("Поставщик",		ОтборПоставщик);
		ЗначенияЗаполнения.Вставить("ПрочиеОтношения",	ОтборПрочиеОтношения);
		
		ОтборыПоРодителю = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, "Родитель");
		Если ОтборыПоРодителю.Количество() > 0
			И ОтборыПоРодителю[0].Использование
			И ЗначениеЗаполнено(ОтборыПоРодителю[0].ПравоеЗначение) Тогда
			
			ЗначенияЗаполнения.Вставить("Родитель",		ОтборыПоРодителю[0].ПравоеЗначение);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Контрагент",Значение);
	Оповестить("Выбор_Контрагент",ПараметрыВыбора,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	
	Если Поле.Имя = "ОсновныеСведенияГоловной" ИЛИ Поле.Имя = "КартинкаИерархия" Тогда
		
		Если НЕ ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.ОсновныеСведенияГоловной) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоМобильныйКлиент Тогда
			Возврат
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ОповещениеОВыбореКонтрагента = Новый ОписаниеОповещения("ВыборКонтрагентаИзИерархии",ЭтотОбъект);
		СписокИерархии = СписокЗначенийИерархииКонтрагента(Элементы.Список.ТекущиеДанные.ГоловнойКонтрагент,
			Элементы.Список.ТекущиеДанные.Ссылка);
		ПоказатьВыборИзМеню(ОповещениеОВыбореКонтрагента,СписокИерархии,Элементы.КартинкаИерархия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборИерархия

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархии(ЭтотОбъект);
	
	#Если МобильныйКлиент Тогда
		НастроитьПанельОтборовМобильныйКлиент();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаИерархии = Неопределено
		Или СтрокаИерархии.ГруппаКонтрагентов = "Все"
		Или СтрокаИерархии.ГруппаКонтрагентов = "БезГруппы" Тогда
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИерархии.ГруппаКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаКонтрагентов = "Все" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("СправочникСсылка.Контрагенты")Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.ГруппаКонтрагентов = "Все" Тогда
		Возврат;
	КонецЕсли;
	
	НоваяГруппа = ?(СтрокаИерархии.ГруппаКонтрагентов = "БезГруппы", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), СтрокаИерархии.ГруппаКонтрагентов);
	ИерархияПеретаскиваниеСервер(ПараметрыПеретаскивания.Значение, НоваяГруппа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура SMS(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("СообщениеSMS", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("ЛичнаяВстреча", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("Прочее", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Запись(Команда)
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("Запись", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("ТелефонныйЗвонок", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмо(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные.Ссылка) Тогда
		СоздатьСобытиеПоКонтрагенту("ЭлектронноеПисьмо", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительных(Команда)
	
	Элементы.ПоказыватьНедействительных.Пометка = Не Элементы.ПоказыватьНедействительных.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Элементы.ПоказыватьНедействительных.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияИзменить(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.Контрагенты")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСоздатьГруппу(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаГруппы",
		Новый Структура("ЗначенияЗаполнения, ЭтоГруппа", ЗначенияЗаполнения, Истина),
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСкопировать(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.Контрагенты")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаГруппы",
		Новый Структура("ЗначениеКопирования, ЭтоГруппа", Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов, Истина),
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияУстановитьПометкуУдаления(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) <> Тип("СправочникСсылка.Контрагенты")
		Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = ИзменитьПометкуУдаленияГруппыСервер(Элементы.ОтборИерархия.ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекстОповещения = СтрШаблон(НСтр("ru='Пометка удаления %1'"),
		?(ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'")));
		
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов),
		Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов,
		БиблиотекаКартинок.Информация32);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВАдреснуюКнигуСервисаРассылок(Команда)
	
	МассовыеРассылкиКлиент.ЭкспортКонтактовВСервисРассылок(ВыделенныеКонтрагенты());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВыделенные(Команда)
	
	ПоискИУдалениеДублейКлиент.ОбъединитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область Иерархия

&НаСервере
Процедура ПрочитатьИерархию(ГруппаТекущейСтроки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Контрагенты.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексПиктограммы,
		|	Контрагенты.Ссылка КАК ГруппаКонтрагентов,
		|	ПРЕДСТАВЛЕНИЕ(Контрагенты.Ссылка) КАК ПредставлениеГруппы
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагенты.Ссылка ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "ОтборИерархия");
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборИерархия, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
	ЭлементыКоллекции = ОтборИерархия.ПолучитьЭлементы();
	
	СтрокаДерева = ЭлементыКоллекции.Вставить(0);
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаКонтрагентов = "Все";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Все группы>'");
	
	СтрокаДерева = ЭлементыКоллекции.Добавить();
	СтрокаДерева.ИндексПиктограммы = -1;
	СтрокаДерева.ГруппаКонтрагентов = "БезГруппы";
	СтрокаДерева.ПредставлениеГруппы = НСтр("ru='<Нет группы>'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархии(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоГруппе = ТипЗнч(Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов) = Тип("СправочникСсылка.Контрагенты");
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияИзменить.Доступность					= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияСкопировать.Доступность				= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюИерархияУстановитьПометкуУдаления.Доступность	= ЭтоОтборПоГруппе;
	
	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	
	Если ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов = "Все" Тогда
		
		Использование = Ложь;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.ГруппаКонтрагентов = "БезГруппы" Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		,
		Использование
	);
	
	Форма.ОтборИерархияТекущая = ПравоеЗначение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаления(Контрагент)
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.УстановитьПометкуУдаления(Не КонтрагентОбъект.ПометкаУдаления, Истина);
	
	Возврат КонтрагентОбъект.ПометкаУдаления;
	
КонецФункции

&НаСервере
Функция ИзменитьПометкуУдаленияГруппыСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПометкаУдаления = ИзменитьПометкуУдаления(ТекущаяСтрокаДерева.ГруппаКонтрагентов);
	ИзменитьПиктограммуРекурсивно(ТекущаяСтрокаДерева, ПометкаУдаления);
	
	Возврат ПометкаУдаления;
	
КонецФункции

&НаСервере
Процедура ИзменитьПиктограммуРекурсивно(СтрокаДерева, ПометкаУдаления)
	
	СтрокаДерева.ИндексПиктограммы = ?(ПометкаУдаления, 1, 0);
	
	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаПодчиненная Из СтрокиДерева Цикл
		ИзменитьПиктограммуРекурсивно(СтрокаПодчиненная, ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИерархияПеретаскиваниеСервер(МассивКонтрагентов, НоваяГруппа)
	
	УстановитьНовуюГруппуКонтрагентов(МассивКонтрагентов, НоваяГруппа);
	
	Если МассивКонтрагентов[0].ЭтоГруппа Тогда
		
		ПрочитатьИерархию();
		
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ГруппаКонтрагентов",
			ИдентификаторСтроки,
			ОтборИерархия.ПолучитьЭлементы(),
			МассивКонтрагентов[0],
			Ложь
		);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
		
	Иначе
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНовуюГруппуКонтрагентов(МассивКонтрагентов, НоваяГруппа)
	
	Для Каждого Контрагент Из МассивКонтрагентов Цикл
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.Родитель = НоваяГруппа;
		КонтрагентОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПанельСвязей()
	
	ТаблицаСвязей.Очистить();
	ОтборПоКонтакту = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор,"Контакт");
	
	УстановленОтборПоОдномуКонтрагенту = ОтборПоКонтакту.Количество() <> 0 
		И ТипЗнч(ОтборПоКонтакту[0].ПравоеЗначение) = Тип("СписокЗначений") 
		И ОтборПоКонтакту[0].ПравоеЗначение.Количество() = 1
		И ОтборПоКонтакту[0].Использование;
		
	Если НЕ УстановленОтборПоОдномуКонтрагенту Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСвязиКонтакта", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ТекущийКонтакт = ОтборПоКонтакту[0].ПравоеЗначение[0].Значение;
	Отбор = Новый Структура("Контакт",ТекущийКонтакт);
	Выборка = РегистрыСведений.СвязиКонтрагентКонтакт.Выбрать(,,Отбор,"Убыв");
	Пока Выборка.Следующий() Цикл
		Если Выборка.Контрагент <> ТекущийКонтрагент Тогда
			Продолжить;
		КонецЕсли;
		НоваяСвязь = ТаблицаСвязей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСвязь,Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСвязь.Должность) Тогда
			НоваяСвязь.Должность = НСтр("ru = '<Не указана>'");
		КонецЕсли;
		Если Выборка.СвязьНедействительна Тогда
			НоваяСвязь.Картинка = 1;
		Иначе
			НоваяСвязь.Картинка = 3;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСвязиКонтакта", "Видимость", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДействительнымСвязям()
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, "Контакт");
	ОтборНеУстановлен = (ЭлементыОтбора.Количество() = 0 ИЛИ (ТипЗнч(ЭлементыОтбора[0].ПравоеЗначение) = Тип("Массив") 
		И ЭлементыОтбора[0].ПравоеЗначение.Количество() = 0)
		ИЛИ (ТипЗнч(ЭлементыОтбора[0].ПравоеЗначение) = Тип("СписокЗначений") 
		И ЭлементыОтбора[0].ПравоеЗначение.Количество() = 0)
		ИЛИ ЭлементыОтбора[0].Использование = Ложь);
	
	Если ОтборНеУстановлен Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "ЕстьСвязи","");
		Возврат;
	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЕстьСвязи", МассивОтбора,
			ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаИзИерархии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = Результат.Значение;
	
КонецПроцедуры

&НаСервере
Функция СписокЗначенийИерархииКонтрагента(ТекущийГоловной, ТекущийКонтрагент)
		
	Возврат Справочники.Контрагенты.СписокПодразделенийГоловногоКонтрагента(ТекущийГоловной, ТекущийКонтрагент);
	
КонецФункции

&НаСервере
Функция ДоступноПравоСозданияДокументовРазделаПродажи()

	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетНаОплату) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПокупателя) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ПравоДоступа("Добавление", Метаданные.Документы.РасходнаяНакладная) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ПравоДоступа("Добавление", Метаданные.Документы.АктВыполненныхРабот) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Функция ДоступноПравоСозданияДокументовРазделаЗакупки()

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ПравоДоступа("Добавление", Метаданные.Документы.ПриходнаяНакладная) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Некорректный ИНН
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ИННВведенКорректно");
	Отбор.ПравоеЗначение 	= Ложь;
	
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле			= Новый ПолеКомпоновкиДанных("ИНН");
	ОформляемоеПоле.Использование	= Истина;
	
	// 2. Некорректный КПП
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КППВведенКорректно");
	Отбор.ПравоеЗначение 	= Ложь;
	
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле			= Новый ПолеКомпоновкиДанных("КПП");
	ОформляемоеПоле.Использование	= Истина;
	
	// 3. Есть дубли
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ЕстьДубли");
	Отбор.ПравоеЗначение 	= Истина;
	
	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле			= Новый ПолеКомпоновкиДанных("ИНН");
	ОформляемоеПоле.Использование	= Истина;
	
	// 4. Недействительный контрагент отображается серым
	НовоеУсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборДеловыеОтношения(Форма, ИмяПоля, Использование)
	
	ЧислоИзмененных = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		,
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если ЧислоИзмененных = 0 Тогда
		
		ГруппаДеловыеОтношения = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, "ДеловыеОтношения");
		
		Если ГруппаДеловыеОтношения = Неопределено Тогда
			ГруппаДеловыеОтношения = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
				"ДеловыеОтношения",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДеловыеОтношения,
			ИмяПоля,
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			,
			Использование,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	ВидыОтношений = Новый Массив;
	
	Если Форма.ОтборПокупатель Тогда
		ВидыОтношений.Добавить(НСтр("ru='Покупатели'"));
	КонецЕсли;
	
	Если Форма.ОтборПоставщик Тогда
		ВидыОтношений.Добавить(НСтр("ru='Поставщики'"));
	КонецЕсли;
	
	Если Форма.ОтборПрочиеОтношения Тогда
		ВидыОтношений.Добавить(НСтр("ru='Прочие отношения'"));
	КонецЕсли;
	
	Заголовок = НСтр("ru='Контрагенты'");
	
	Если ВидыОтношений.Количество() > 0 Тогда
		Заголовок = Заголовок + ": ";
		Для Каждого Вид Из ВидыОтношений Цикл
			Заголовок = Заголовок + Вид + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Заголовок, 2);
	КонецЕсли;
	
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентыСегментов(Сегмент)
	
	КонтрагентыСегментов = Новый Массив;
	
	СоставСегмента = Справочники.СегментыКонтрагентов.ПолучитьСоставСегмента(Сегмент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтрагентыСегментов, СоставСегмента, Истина);
	
	Возврат КонтрагентыСегментов;

КонецФункции

&НаКлиенте
Процедура СоздатьСобытиеПоКонтрагенту(ИмяТипаСобытия, Контрагент)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + ИмяТипаСобытия));
	ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьМобильноеПриложениеИРМК()
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		ИЛИ УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		
		Элементы.ПраваяПанельСтраницы.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ДокументСчетНаОплатуСоздатьНаОсновании","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"СправочникКонтрагентыКомандаЗаказНарядСоздатьНаОсновании","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ДокументАктВыполненныхРаботСоздатьНаОсновании","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ДокументЗаказПоставщикуСоздатьНаОсновании","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"СправочникКонтрагентыДосьеКонтрагента","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ОбработкаНастройкаПрограммыБольшеВозможностейКонтекст","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ЭДО","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ЗагрузкаДанныхИзВнешнегоИсточника","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПодменюСобытия","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ГлобальныеКоманды","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ГруппаНапомнить","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"КонтактноеЛицо","Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"Отношения","Видимость", Ложь);
	КонецЕсли;
	
	Если УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"Взаиморасчеты","Видимость", Ложь);
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.ГруппаКонтрагентов = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура НастроитьПанельОтборовМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,,, "ОтборСегмент,ОтборТег,ОтборИсточник,ОтборОтветственный,ОтборИерархияТекущая");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМобильныйКлиент = Истина;
	Элементы.СписокПодменюПродать.Видимость = Истина;
	Элементы.СписокПодменюКупить.Видимость = Истина;
	Элементы.СписокПодменюСобытия.Видимость = Истина;
	
	Элементы.ПодменюПродать.Видимость = Ложь;
	Элементы.ПодменюКупить.Видимость = Ложь;
	Элементы.ПодменюСобытия.Видимость = Ложь;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И МобильныйКлиентУНФКлиентСервер.ЭтоБольшойЭкранИлиПланшет() Тогда
		Элементы.ПраваяПанельСтраницы.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандуЭкспортВАдреснуюКнигу()
	
	ИспользоватьМассовыеРассылкиИнтеграция = ПолучитьФункциональнуюОпцию("ИспользоватьМассовыеРассылкиИнтеграция")
		И ЗначениеЗаполнено(МассовыеРассылкиИнтеграция.ПодключенныйСервис());
	
	Элементы.ФормаЭкспортВАдреснуюКнигуСервисаРассылок.Видимость = ИспользоватьМассовыеРассылкиИнтеграция;
	Элементы.СписокКонтекстноеМенюЭкспортВАдреснуюКнигуСервисаРассылок.Видимость = ИспользоватьМассовыеРассылкиИнтеграция;
	
	Если Не ИспользоватьМассовыеРассылкиИнтеграция Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокКомандыЭкспорта = СтрШаблон(НСтр("ru='Экспорт в адресную книгу %1'"), МассовыеРассылкиИнтеграция.ПредставлениеСервиса());
	
	Элементы.ФормаЭкспортВАдреснуюКнигуСервисаРассылок.Заголовок = ЗаголовокКомандыЭкспорта;
	Элементы.СписокКонтекстноеМенюЭкспортВАдреснуюКнигуСервисаРассылок.Заголовок = ЗаголовокКомандыЭкспорта;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеКонтрагенты()
	
	ВыделенныеКонтрагенты = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			ВыделенныеКонтрагенты.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыделенныеКонтрагенты;
	
КонецФункции

#КонецОбласти

#Область ПанельКонтактнойИнформации

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	ОбновитьПанельСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьОтборПоСегментамНаСервере(ВыбранноеЗначение)
	
	ИмяГруппы = Элементы.ОтборСегмент.Родитель.Имя;
	
	КонтрагентыСегментов = КонтрагентыСегментов(ВыбранноеЗначение);
	УстановитьМеткуИОтборСписка("Ссылка", ИмяГруппы, КонтрагентыСегментов, Строка(ВыбранноеЗначение));
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка,,Истина);
	УстановитьОтборПоДействительнымСвязям();
	ОбновитьПанельСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	УстановитьОтборПоДействительнымСвязям();
	ОбновитьПанельСвязей();

КонецПроцедуры

&НаСервере
Функция ВариантОтбораДляНастроек()
	
	Если ОтборПокупатель И НЕ ОтборПоставщик Тогда
		// Отбор только покупателей
		ВариантОтборовФормы = "Покупатели";
	ИначеЕсли НЕ ОтборПокупатель И ОтборПоставщик Тогда
		// Отбор только поставщиков
		ВариантОтборовФормы = "Поставщики";
	Иначе
		// //Отбор покупатель+поставщик, или без отбора
		ВариантОтборовФормы = "";
	КонецЕсли; 

	Возврат ВариантОтборовФормы;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	ВариантОтборовФормы = ВариантОтбораДляНастроек();
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,,ВариантОтборовФормы);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		ИмяФормы,
		"ВключаяВложенные",
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец Команды1СПАРКРиски

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайла");
	НастройкиЗагрузкиДанных.Вставить("ОписаниеСтрокиВыбора", Новый Структура("ПолноеИмяОбъектаМетаданных, Тип", "Контрагенты", "ПрикладнаяЗагрузка"));
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
	
		ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
		ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
		
	ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
		
		ДлительнаяОперация = ЗапуститьОбработкуПодготовленныхДанных(РезультатЗагрузки);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		
		ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru='Контрагенты'");
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru='Загрузка данных завершена.'");
		ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = Окно.ПолучитьНавигационнуюСсылку();
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ЗавершениеОбработкиПодготовленныхДанных", ЭтотОбъект), ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбработкуПодготовленныхДанных(РезультатЗагрузки)
	
	ИмяПроцедуры = "Справочники.Контрагенты.ОбработатьПодготовленныеДанные";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеОбработкиПодготовленныхДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

#КонецОбласти
