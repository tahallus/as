
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетУчетаРасчетовСПокупателем = Параметры.СчетУчетаРасчетовСПокупателем;
	СчетУчетаАвансовПокупателя    = Параметры.СчетУчетаАвансовПокупателя;
	СчетУчетаРасчетовСПоставщиком = Параметры.СчетУчетаРасчетовСПоставщиком;
	СчетУчетаАвансовПоставщику    = Параметры.СчетУчетаАвансовПоставщику;
	Контрагент = Параметры.Ссылка;
	
	Если ОтказИзменитьСчетУчетаСПокупателем() Тогда
		Элементы.ЗапретРедактированияПокупатель.Видимость = Истина;
		Элементы.ГруппаПокупатель.ТолькоПросмотр = Истина;
	КонецЕсли;
		
	Если ОтказИзменитьСчетУчетаСПоставщиком() Тогда
		Элементы.ЗапретРедактированияПоставщик.Видимость = Истина;
		Элементы.ГруппаПоставщик.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Контрагент.Метаданные()) Тогда
		Элементы.ГруппаПокупатель.ТолькоПросмотр = Истина;
		Элементы.ГруппаПоставщик.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Элементы.ГруппаПокупатель.ТолькоПросмотр
		И Элементы.ГруппаПоставщик.ТолькоПросмотр Тогда
		Элементы.ПоУмолчанию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетУчетаРасчетовСПокупателемПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСПокупателем) Тогда
		СчетУчетаРасчетовСПокупателем = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАвансовПокупателяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаАвансовПокупателя) Тогда
		СчетУчетаАвансовПокупателя = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамПолученным");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСПоставщикомПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСПоставщиком) Тогда
		СчетУчетаРасчетовСПоставщиком = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАвансовПоставщикуПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаАвансовПоставщику) Тогда
		СчетУчетаАвансовПоставщику = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамВыданным");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	Если Не Элементы.ГруппаПокупатель.ТолькоПросмотр Тогда
		СчетУчетаРасчетовСПокупателем = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
		СчетУчетаАвансовПокупателя = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамПолученным");
	КонецЕсли;
	
	Если Не Элементы.ГруппаПоставщик.ТолькоПросмотр Тогда
		СчетУчетаРасчетовСПоставщиком = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
		СчетУчетаАвансовПоставщику = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамВыданным");
	КонецЕсли;
	
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОтказИзменитьСчетУчетаСПокупателем()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.Период,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.НомерСтроки,
	|	РасчетыСПокупателями.Активность,
	|	РасчетыСПокупателями.ВидДвижения,
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Контрагент = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Функция ОтказИзменитьСчетУчетаСПоставщиком()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.НомерСтроки,
	|	РасчетыСПоставщиками.Активность,
	|	РасчетыСПоставщиками.ВидДвижения,
	|	РасчетыСПоставщиками.Организация,
	|	РасчетыСПоставщиками.ТипРасчетов,
	|	РасчетыСПоставщиками.Контрагент,
	|	РасчетыСПоставщиками.Договор,
	|	РасчетыСПоставщиками.Документ,
	|	РасчетыСПоставщиками.Заказ,
	|	РасчетыСПоставщиками.Сумма,
	|	РасчетыСПоставщиками.СуммаВал,
	|	РасчетыСПоставщиками.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Контрагент = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииСчетовРасчетов()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("СчетУчетаРасчетовСПокупателем", СчетУчетаРасчетовСПокупателем);
	СтруктураПараметры.Вставить("СчетУчетаАвансовПокупателя", СчетУчетаАвансовПокупателя);
	СтруктураПараметры.Вставить("СчетУчетаРасчетовСПоставщиком", СчетУчетаРасчетовСПоставщиком);
	СтруктураПараметры.Вставить("СчетУчетаАвансовПоставщику", СчетУчетаАвансовПоставщику);
	
	Оповестить("ИзменилисьСчетаРасчетов", СтруктураПараметры, Контрагент);
	
КонецПроцедуры

#КонецОбласти
