#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И Не ЭтоГруппа Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("НомерТелефона") Тогда
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
				ЭтотОбъект,
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ДанныеЗаполнения.НомерТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента),
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
				Перечисления.ТипыКонтактнойИнформации.Телефон
			);
		КонецЕсли;
		
	КонецЕсли;
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Справочники.ГруппыДоступаКонтрагентов.ИспользуютсяГруппыДоступа() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаДоступа");
	КонецЕсли;
	
	Если Не ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидГосударственногоОргана");
		МассивНепроверяемыхРеквизитов.Добавить("КодГосударственногоОргана");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Проверка признака ОбменДанными.Загрузка выполняется ниже по коду.
	ДополнительныеСвойства.Вставить("НужноЗаписыватьВРегистрПриЗаписи", Ложь);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		ПроверитьВозможностьИзменений(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность ИНН, КПП и зарегистрируем дубли контрагентов,
	// кроме случая загрузки/выгрузки из локальной версии в модель сервиса.
	Если Не (ДополнительныеСвойства.Свойство("РегистрироватьДублиКонтрагентов") И ДополнительныеСвойства.РегистрироватьДублиКонтрагентов = Ложь) Тогда
		ЗарегистрироватьДублиКонтрагентов();
	КонецЕсли;
	
	// Дополнительно заполним реквизиты
	Если Не ЭтоГруппа И ЭтоНовый() Тогда
		ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЭтоГруппа Тогда
		СформироватьОсновныеСведения();
		ЗаполнитьНомерТелефона();
		ЗаполнитьАдресЭП();
	КонецЕсли;
			
	// Заполним договор по умолчанию: подставляем любой существующий или создаем новый
	Если Не ЭтоГруппа И Не ЗначениеЗаполнено(Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Ссылка)) Тогда
		
		НадоСоздатьДоговор = Истина;
		
		Если Не ЭтоНовый() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	1 КАК Приоритет,
			|	ДоговорыКонтрагентов.Ссылка КАК Договор,
			|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
			|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
			|	ДоговорыКонтрагентов.Организация КАК Организация
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2,
			|	ДоговорыКонтрагентов.Ссылка,
			|	ДоговорыКонтрагентов.ВидДоговора,
			|	ДоговорыКонтрагентов.НомерДоговора,
			|	ДоговорыКонтрагентов.Организация
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	НомерДоговора УБЫВ";
			
			Запрос.УстановитьПараметр("Владелец", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				РегистрыСведений.ОсновныеДоговорыКонтрагента.ОчиститьЗаписиСДоговором(Выборка.Договор);
				ЗаписьОсновногоДоговора = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
				ЗаписьОсновногоДоговора.Организация = Выборка.Организация;
				ЗаписьОсновногоДоговора.Договор = Выборка.Договор;
				ЗаписьОсновногоДоговора.Контрагент = Ссылка;
				ЗаписьОсновногоДоговора.ВидДоговора = Выборка.ВидДоговора;
				ЗаписьОсновногоДоговора.Записать();
				
				НадоСоздатьДоговор = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НадоСоздатьДоговор Тогда
			ДополнительныеСвойства.Вставить("НовыйОсновнойДоговор", Справочники.ДоговорыКонтрагентов.ПолучитьСсылку());
		КонецЕсли;
		
	КонецЕсли;
	
	// Настройка данных реквизитов в зависимости от других реквизитов
	ПривестиДанныеКСогласованномуСостоянию();
	ОбработатьИсториюРеквизитовПередЗаписью();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Требуется выполнить движения по регистру дублей в режиме ОбменДанными.Загрузка
	Если ДополнительныеСвойства.НужноЗаписыватьВРегистрПриЗаписи Тогда
		Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(Ссылка, ИНН, КПП, Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим договор контрагента по ссылке, созданной в событии ПередЗаписью()
	Если Не ЭтоГруппа И ДополнительныеСвойства.Свойство("НовыйОсновнойДоговор") Тогда
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		Если ДополнительныеСвойства.Свойство("ВидОперацииКомиссия") Тогда
			СтруктураЗаполнения = Новый Структура("ОснованиеЗаполнения, ВидОперацииКомиссия", Ссылка, ДополнительныеСвойства.ВидОперацииКомиссия);
			ДоговорОбъект.Заполнить(СтруктураЗаполнения);
		Иначе
			ДоговорОбъект.Заполнить(Ссылка);
		КонецЕсли;
		ДоговорОбъект.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(ДоговорОбъект);
		
		ДоговорОбъект.УстановитьСсылкуНового(ДополнительныеСвойства.НовыйОсновнойДоговор);
		ДоговорОбъект.Записать();
		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(ДоговорОбъект);
		
		ДополнительныеСвойства.Удалить("НовыйОсновнойДоговор");
		
	КонецЕсли;
	
	ЗаполнитьИННПодчиненныхКонтрагентов(Ссылка, ИНН, Отказ);
	
	Если НЕ ЭтоГруппа И (ЗначениеЗаполнено(ГоловнойКонтрагент) 
		ИЛИ ДополнительныеСвойства.Свойство("ЭтоГоловной") И ДополнительныеСвойства.ЭтоГоловной) Тогда
		СформироватьОсновныеСведенияГоловногоИПодразделений();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		БанковскийСчетПоУмолчанию	= Неопределено;
		УдалитьДоговорПоУмолчанию			= Неопределено;
		КонтактноеЛицо				= Неопределено;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Справочники.СтатьиДвиженияДенежныхСредств) Тогда
			СтатьяДДСПоУмолчанию = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРегистрациюДублейПередУдалением();
	РегистрыСведений.ТекущиеВходящиеЗвонки.ПередУдалениемКонтакта(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура заполняет вспомогательный реквизит "ОсновныеСведения"
//
Процедура СформироватьОсновныеСведения() Экспорт
	
	МассивСтрок = Новый Массив;
	
	Если Не ПустаяСтрока(НаименованиеПолное) Тогда
		МассивСтрок.Добавить(НаименованиеПолное);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИНН) Тогда
		МассивСтрок.Добавить(НСтр("ru='ИНН'") + " " + ИНН);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КПП) Тогда
		МассивСтрок.Добавить(НСтр("ru='КПП'") + " " + КПП);
	КонецЕсли;
	
	Если Не ПустаяСтрока(РегистрационныйНомер) Тогда
		Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо И СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			ЗаголовокРегНомера = НСтр("ru='ОГРН'");
		ИначеЕсли ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
			ЗаголовокРегНомера = НСтр("ru='ОГРН ИП'");
		Иначе
			ЗаголовокРегНомера = НСтр("ru='Регистрационный номер'");
		КонецЕсли;
		МассивСтрок.Добавить(ЗаголовокРегНомера + " " + РегистрационныйНомер);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КодПоОКПО) Тогда
		МассивСтрок.Добавить(НСтр("ru='ОКПО'") + " " + КодПоОКПО);
	КонецЕсли;
	
	Если Не ПустаяСтрока(СвидетельствоСерияНомер) Тогда
		МассивСтрок.Добавить(НСтр("ru='Свидетельство'") + " " + СвидетельствоСерияНомер);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДокументУдостоверяющийЛичность) Тогда
		МассивСтрок.Добавить(НСтр("ru='Документ'") + " " + ДокументУдостоверяющийЛичность);
	КонецЕсли;
	
	КИ = КонтактнаяИнформация.Выгрузить();
	КИ.Сортировать("Вид");
	
	РеквизитыВид = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КИ.ВыгрузитьКолонку("Вид"),
		"ХранитьИсториюИзменений");
	
	ВидКИ = Неопределено;
	ДатаКИ = Дата(1,1,1,0,0,0);
	СтрокаКИДляДобавления = "";
	
	Для Каждого СтрокаКИ Из КИ Цикл
		
		Если ПустаяСтрока(СтрокаКИ.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыВид[СтрокаКИ.Вид] Тогда
			Если СтрокаКИ.Вид = ВидКИ Тогда
				Продолжить;
			КонецЕсли;
			ОбработатьЗаписьСИсториейКИ(КИ, СтрокаКИ, ДатаКИ, СтрокаКИДляДобавления);
			МассивСтрок.Добавить(СтрокаКИДляДобавления);
			ВидКИ = СтрокаКИ.Вид;
			Продолжить;	
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаКИ.Представление);
	КонецЦикла;
	
	Если ДополнительныеСвойства.Свойство("ОсновныеСведенияКонтактныхЛиц") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, ДополнительныеСвойства.ОсновныеСведенияКонтактныхЛиц);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Наименование КАК Наименование,
			|	КонтактныеЛица.КонтактнаяИнформация.(
			|		Представление КАК Представление,
			|		Вид КАК ВидКИ
			|	) КАК КонтактнаяИнформация
			|ИЗ
			|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контрагент) КАК СвязиКонтрагентКонтакт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
			|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
			|ГДЕ
			|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
			|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование,
			|	ВидКИ";
		
		Запрос.УстановитьПараметр("Контрагент", Ссылка);
		
		ВыборкаКЛ = Запрос.Выполнить().Выбрать();
		Пока ВыборкаКЛ.Следующий() Цикл
			
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
			МассивСтрок.Добавить(ВыборкаКЛ.Наименование);
			
			ВыборкаКИ = ВыборкаКЛ.КонтактнаяИнформация.Выбрать();
			Пока ВыборкаКИ.Следующий() Цикл
				Если ПустаяСтрока(ВыборкаКИ.Представление) Тогда
					Продолжить;
				КонецЕсли;
				МассивСтрок.Добавить(ВыборкаКИ.Представление);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Комментарий) Тогда
		МассивСтрок.Добавить(Комментарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "Наименование"));
	КонецЕсли;
	
	ОсновныеСведения = СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

// Процедура заполняет вспомогательный реквизит "ОсновныеСведения" для головного контрагента и подразделений
//
Процедура СформироватьОсновныеСведенияГоловногоИПодразделений() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ОсновныеСведения КАК ОсновныеСведения
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &Контрагент";
	
	Если ДополнительныеСвойства.Свойство("ЭтоГоловной") И ДополнительныеСвойства.ЭтоГоловной Тогда
		ГоловнойКонтрагентДляЗаписи = Ссылка;
	Иначе
		ГоловнойКонтрагентДляЗаписи = ГоловнойКонтрагент;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", ГоловнойКонтрагентДляЗаписи);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Формирование основных сведений головного контрагента для подразделений
	ОсновныеСведенияГоловного = Новый Массив;
	СведенияДляПодразделений = "";
	
	Если ДополнительныеСвойства.Свойство("ЭтоГоловной") И ДополнительныеСвойства.ЭтоГоловной Тогда
		СведенияДляПодразделений = ОсновныеСведения;
	Иначе
		СтрокаРеквизитов = "ОсновныеСведения";
		СведенияДляПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент,"ОсновныеСведения");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СвязиГоловнойКонтрагентПодразделение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГоловнойКонтрагент.Установить(ГоловнойКонтрагентДляЗаписи);
	
	// Запись для подразделений с основными сведениями головного
	Пока Выборка.Следующий() Цикл
		
		ОсновныеСведенияГоловного.Добавить(Выборка.ОсновныеСведения);
		НоваяЗапись = НаборЗаписей.Добавить(); 
		
		НоваяЗапись.Подразделение = Выборка.Ссылка; 
		НоваяЗапись.ГоловнойКонтрагент = ГоловнойКонтрагентДляЗаписи; 
		НоваяЗапись.ОсновныеСведения = СведенияДляПодразделений;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ОсновныеСведенияГоловного.Вставить(0, НСтр("ru = 'Подразделения:'"));
	
	// Запись для головного контрагента с основными сведениями подразделений
	МенеджерЗаписи = РегистрыСведений.СвязиГоловнойКонтрагентПодразделение.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка(); 
	МенеджерЗаписи.Подразделение = ГоловнойКонтрагентДляЗаписи; 
	МенеджерЗаписи.ОсновныеСведения = СтрСоединить(ОсновныеСведенияГоловного, Символы.ПС);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Процедура заполняет вспомогательный реквизит "НомерТелефона"
//
Процедура ЗаполнитьНомерТелефона() Экспорт
	
	НомераТелефонов = Новый Массив;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			НомераТелефонов.Добавить(СтрокаКИ.НомерТелефона);
		КонецЕсли;
	КонецЦикла;
	
	НомерТелефонаДляПоиска = СтрСоединить(НомераТелефонов, ", ");
	
КонецПроцедуры

// Процедура заполняет вспомогательный реквизит "АдресЭП"
//
Процедура ЗаполнитьАдресЭП() Экспорт
	
	АдресаЭП = Новый Массив;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			АдресаЭП.Добавить(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;
	
	АдресЭПДляПоиска = СтрСоединить(АдресаЭП, ", ");
	
КонецПроцедуры

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения, Изменение: объект разрешен по виду доступа ГруппыДоступаКонтрагентов.
	
	Строка = Таблица.Добавить();
	Строка.ЗначениеДоступа = Ссылка;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЗаписьСИсториейКИ(ТаблицаКИ, СтрокаКИ, ДатаКИ, СтрокаКИДляДобавления)
		
	ВидКИ = СтрокаКИ.Вид;
	ДатаКИ = Дата(1,1,1,0,0,0);
	
	ОтборПоВиду = Новый Структура("Вид", ВидКИ);
	КИПоВиду = ТаблицаКИ.НайтиСтроки(ОтборПоВиду);
	Для Каждого СтрокаКИ Из КИПоВиду Цикл
		
		Если СтрокаКИ.ДействуетС >= ДатаКИ Тогда
			ДатаКИ = СтрокаКИ.ДействуетС;
			СтрокаКИДляДобавления = СтрокаКИ.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИсториюРеквизитовПередЗаписью()

	// Если запись в истории одна, то считается, что изменений нет,
	// нужно определять значение из данных объекта, а таблицу истории очистить.
	// Если записей в истории более 1, последняя запись всегда должна соответствовать данным объекта,
	// а первая запись должна иметь пустую дату.
	
	Если ИсторияКПП.Количество() = 1 Тогда
		ИсторияКПП.Очистить();
	ИначеЕсли ИсторияКПП.Количество() > 1 Тогда
		Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП);
		ИсторияКПП[0].Период = '00010101';
		ВсеПериоды = ОбщегоНазначения.ВыгрузитьКолонку(ИсторияКПП, "Период", Истина);
		Если ВсеПериоды.Количество() <> ИсторияКПП.Количество() Тогда
			ТекстСообщения = НСтр("ru='В истории КПП есть записи с одинаковым периодом.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() = 1 Тогда
		ИсторияНаименований.Очистить();
	ИначеЕсли ИсторияНаименований.Количество() > 1 Тогда
		Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований);
		ИсторияНаименований[0].Период = '00010101';
		ВсеПериоды = ОбщегоНазначения.ВыгрузитьКолонку(ИсторияНаименований, "Период", Истина);
		Если ВсеПериоды.Количество() <> ИсторияНаименований.Количество() Тогда
			ТекстСообщения = НСтр("ru='В истории полного наименования есть записи с одинаковым периодом.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГруппаДоступа) Тогда
		ГруппаДоступа = Справочники.ГруппыДоступаКонтрагентов.ГруппаДоступаПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда
		ВидКонтрагента = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойВидКонтрагента");
	КонецЕсли;
	
	Если ВалютаРасчетовПоУмолчанию.Пустая() Тогда
		ВалютаРасчетовПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	КонецЕсли;
	
	Если СпособЗачетаПредоплатыПоУмолчанию.Пустая() Тогда
		СпособЗачетаПредоплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	КонецЕсли;
	Если СпособРазнесенияОплатыПоУмолчанию.Пустая() Тогда
		СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность ИНН, КПП и фиксирует наличие дублей контрагента
//
Процедура ЗарегистрироватьДублиКонтрагентов()
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НужноВыполнятьПроверку = ЭтоНовый();
	
	ЭтоЮрЛицо = ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	
	ИзменилсяИНН = НужноВыполнятьПроверку;
	ИзменилсяКПП = НужноВыполнятьПроверку;
	
	Если НЕ НужноВыполнятьПроверку Тогда
		
		СтруктураПрежнихЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
																			  "ИНН,
																			  |КПП,
																			  |ИННВведенКорректно,
																			  |КППВведенКорректно, 
																			  |ВидКонтрагента");
																			  
		Если НЕ СтруктураПрежнихЗначений.ИНН = ИНН 
			Или НЕ СтруктураПрежнихЗначений.КПП = КПП 
			Или НЕ СтруктураПрежнихЗначений.ВидКонтрагента = ВидКонтрагента Тогда
			
			НужноВыполнятьПроверку = Истина;
			
		КонецЕсли;
		
		ИзменилсяИНН = НЕ СтруктураПрежнихЗначений.ИНН = ИНН;
		ИзменилсяКПП = НЕ СтруктураПрежнихЗначений.КПП = КПП;
		
		ЭтоЮрЛицоБыло = СтруктураПрежнихЗначений.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		
		Если НужноВыполнятьПроверку 
			И СтруктураПрежнихЗначений.ИННВведенКорректно 
			И (СтруктураПрежнихЗначений.КППВведенКорректно Или ПустаяСтрока(СтруктураПрежнихЗначений.КПП)) Тогда
			
			Если НЕ СтруктураПрежнихЗначений.ИНН = ИНН
				Или НЕ СтруктураПрежнихЗначений.КПП = КПП Тогда
			
				Блокировка = Новый БлокировкаДанных;
				
				Если НЕ СтруктураПрежнихЗначений.ИНН = ИНН Тогда
			
					ЭлементБлокировкиПоПрежнемуИНН = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
					ЭлементБлокировкиПоПрежнемуИНН.УстановитьЗначение("ИНН", СтруктураПрежнихЗначений.ИНН);
					ЭлементБлокировкиПоПрежнемуИНН.Режим = РежимБлокировкиДанных.Исключительный;
					
				КонецЕсли;
				
				Если НЕ СтруктураПрежнихЗначений.КПП = КПП И ЭтоЮрЛицоБыло Тогда
			
					ЭлементБлокировкиПоПрежнемуКПП = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
					ЭлементБлокировкиПоПрежнемуКПП.УстановитьЗначение("КПП", СтруктураПрежнихЗначений.КПП);
					ЭлементБлокировкиПоПрежнемуКПП.Режим = РежимБлокировкиДанных.Исключительный;
					
				КонецЕсли;
			
				Блокировка.Заблокировать();
				
			КонецЕсли;
			
			ПрежнийМассивДублей = Справочники.Контрагенты.ЕстьЗаписиВРегистреДублей(СокрЛП(СтруктураПрежнихЗначений.ИНН), 
																								  СокрЛП(СтруктураПрежнихЗначений.КПП), 
																								  Ссылка);
		Иначе
			ПрежнийМассивДублей = Новый Массив;
		КонецЕсли;
		
	Иначе
		
		ПрежнийМассивДублей = Новый Массив;
		
	КонецЕсли;
	
	Если НужноВыполнятьПроверку Тогда
		
		ОписаниеОшибки = "";
		Если ПустаяСтрока(ИНН) Тогда
			ИННВведенКорректно = Истина;
		Иначе
			ИННВведенКорректно = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ОписаниеОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(КПП) Тогда
			КППВведенКорректно = Истина;
		Иначе
			КППВведенКорректно = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ОписаниеОшибки);
		КонецЕсли;
		
		Если (ИзменилсяИНН Или ИзменилсяКПП)
			И (ИННВведенКорректно И Не ПустаяСтрока(ИНН))
			И (Не ЭтоЮрЛицо Или (КППВведенКорректно И Не ПустаяСтрока(КПП))) Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировкиПоИНН = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
			ЭлементБлокировкиПоИНН.УстановитьЗначение("ИНН", ИНН);
			ЭлементБлокировкиПоИНН.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если ЭтоЮрЛицо Тогда
				
				ЭлементБлокировкиПоКПП = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
				ЭлементБлокировкиПоКПП.УстановитьЗначение("КПП", КПП);
				ЭлементБлокировкиПоКПП.Режим = РежимБлокировкиДанных.Исключительный;
				
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			МассивДублей = Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(СокрЛП(ИНН), 
																								СокрЛП(КПП), 
																								Ссылка, Истина);
																								
			Если МассивДублей.Количество() > 0 Тогда
				
				// Для нового элемента Ссылка будет доступна только ПриЗаписи, там и запишем.
				ДополнительныеСвойства.НужноЗаписыватьВРегистрПриЗаписи = Истина;
				
				Для Каждого ЭлементМассива Из МассивДублей Цикл
					Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(ЭлементМассива, ИНН, КПП, Ложь);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПрежнийМассивДублей.Количество() > 0 Тогда
				
				Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(Ссылка, СтруктураПрежнихЗначений.ИНН, СтруктураПрежнихЗначений.КПП, Истина);
				
				Если ПрежнийМассивДублей.Количество() = 1 Тогда
					Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(ПрежнийМассивДублей[0], СтруктураПрежнихЗначений.ИНН, СтруктураПрежнихЗначений.КПП, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ПрежнийМассивДублей.Количество() > 0 Тогда
				
				Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(Ссылка, СтруктураПрежнихЗначений.ИНН, СтруктураПрежнихЗначений.КПП, Истина);
			
				Если ПрежнийМассивДублей.Количество() = 1 Тогда
					Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(ПрежнийМассивДублей[0], СтруктураПрежнихЗначений.ИНН, СтруктураПрежнихЗначений.КПП, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает регистр НаличиеДублейУКонтрагентов
//
Процедура УдалитьРегистрациюДублейПередУдалением()
	
	МассивДублей = Справочники.Контрагенты.ЕстьЗаписиВРегистреДублей(СокрЛП(ИНН), СокрЛП(КПП), Ссылка);
	
	Если МассивДублей.Количество() = 1 Тогда
		
		ЭтоЮрЛицо = (ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо) Или (ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиПоПрежнемуИНН = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
		ЭлементБлокировкиПоПрежнемуИНН.УстановитьЗначение("ИНН", ИНН);
		ЭлементБлокировкиПоПрежнемуИНН.Режим = РежимБлокировкиДанных.Исключительный;
		
		Если ЭтоЮрЛицо Тогда
			
			ЭлементБлокировкиПоПрежнемуКПП = Блокировка.Добавить("РегистрСведений.НаличиеДублейУКонтрагентов");
			ЭлементБлокировкиПоПрежнемуКПП.УстановитьЗначение("КПП", КПП);
			ЭлементБлокировкиПоПрежнемуКПП.Режим = РежимБлокировкиДанных.Исключительный;
			
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		Справочники.Контрагенты.ВыполнитьДвиженияПоРегиструДублей(МассивДублей[0], ИНН, КПП, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет согласованность данных в ИБ с измененным состоянием контрагента
//
// Параметры:
//  Отказ	 - 	Булево - Устанавливается Истина в случае несогласованных данных
//
Процедура ПроверитьВозможностьИзменений(Отказ)
	
	// Запрет изменения аналитики учета взаиморасчетов по контрагенту при наличии движений по регистрам взаиморасчетов.
	
	ПредыдущиеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ВестиРасчетыПоДоговорам,ВестиРасчетыПоДокументам,ВестиРасчетыПоЗаказам");
		
	Если ВестиРасчетыПоДоговорам <> ПредыдущиеЗначения.ВестиРасчетыПоДоговорам
		Или ВестиРасчетыПоДокументам <> ПредыдущиеЗначения.ВестиРасчетыПоДокументам
		Или ВестиРасчетыПоЗаказам <> ПредыдущиеЗначения.ВестиРасчетыПоЗаказам Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РасчетыСПокупателями.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Контрагент = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщиками.Контрагент
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Контрагент = &Контрагент";
		
		Если ВестиРасчетыПоДоговорам <> ПредыдущиеЗначения.ВестиРасчетыПоДоговорам Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасчетыСПрочимиКонтрагентами.Контрагент
			|ИЗ
			|	РегистрНакопления.РасчетыСПрочимиКонтрагентами КАК РасчетыСПрочимиКонтрагентами
			|ГДЕ
			|	РасчетыСПрочимиКонтрагентами.Контрагент = &Контрагент";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Контрагент", Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр(
				"ru = 'В базе присутствуют движения по взаиморасчетам с контрагентом.
				|Изменение аналитики учета взаиморасчетов запрещено.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура согласовывает состояние одних реквизитов объекта в зависимости от других
//
Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	ЭтоЮридическоеЛицо = (ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	
	Если ЭтоЮридическоеЛицо Тогда
		
		ФИО = "";
		ИНН = Лев(ИНН, 10); // ИНН 10 цифр
		ВидГосударственногоОргана = Неопределено;
		КодГосударственногоОргана = "";
		СвидетельствоСерияНомер = "";
		СвидетельствоДатаВыдачи = '00010101';
		ДокументУдостоверяющийЛичность = "";
		Пол = Неопределено;
		ДатаРождения = '00010101';
		
		Если СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			РегистрационныйНомер = Лев(РегистрационныйНомер, 13); // ОГРН 13 цифр
			КодПоОКПО = Лев(КодПоОКПО, 8); // ОКПО 8 цифр
		Иначе
			КПП = "";
			КодПоОКПО = "";
		КонецЕсли;
		
	ИначеЕсли ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		
		СтранаРегистрации = Неопределено;
		КПП = "";
		РегистрационныйНомер = Лев(РегистрационныйНомер, 15); // ОГРН 15 цифр
		ВидГосударственногоОргана = Неопределено;
		КодГосударственногоОргана = "";
		
	ИначеЕсли ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		
		СтранаРегистрации = Неопределено;
		КПП = "";
		КодПоОКПО = "";
		РегистрационныйНомер = "";
		ВидГосударственногоОргана = Неопределено;
		КодГосударственногоОргана = "";
		СвидетельствоСерияНомер = "";
		СвидетельствоДатаВыдачи = '00010101';
		
	ИначеЕсли ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган Тогда
		
		СтранаРегистрации = Неопределено;
		ФИО = "";
		КодПоОКПО = "";
		РегистрационныйНомер = "";
		СвидетельствоСерияНомер = "";
		СвидетельствоДатаВыдачи = '00010101';
		ДокументУдостоверяющийЛичность = "";
		Пол = Неопределено;
		ДатаРождения = '00010101';
		
	КонецЕсли;
	
	Если НЕ ЭтоЮридическоеЛицо
		И ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		
		ГоловнойКонтрагент = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИННПодчиненныхКонтрагентов(КонтрагентСсылка, ИНН, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтрагентСсылка", КонтрагентСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СпрКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК СпрКонтрагенты
	|ГДЕ
	|	СпрКонтрагенты.ГоловнойКонтрагент = &КонтрагентСсылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка 
				
				КонтрагентОбъект.Заблокировать();
				КонтрагентОбъект.ИНН = ИНН;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект, Истина, Истина);
				КонтрагентОбъект.Разблокировать(); 
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ИзменениеИНН'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты, Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ТекстСообщения = СтрШаблон(НСтр(
					"ru ='Обновление ИНН подчиненного контрагента завершилось с ошибкой (%1)'"), Выборка.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли