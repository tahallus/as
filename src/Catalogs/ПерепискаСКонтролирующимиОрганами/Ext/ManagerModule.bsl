#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Функция - Получить текстовое вложение
Функция ПолучитьТекстовоеВложение(Ссылка, ИмяФайла, ВАрхиве = Ложь) Экспорт
	
	ВАрхиве = Ложь;
	
	// получаем вложение
	СтрВложения = КонтекстЭДО().ПолучитьВложения(Ссылка, ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрВложение = СтрВложения[0];
	
	Если СтрВложение.ВАрхиве Тогда 
		ВАрхиве = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем вложение на диск
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	СтрВложение.Данные.Получить().Записать(ИмяВременногоФайла);
	
	// считываем при помощи ЧтениеТекста, чтобы автоматически распозналась кодировка UTF? или ANSI
	ОбъектЧтение = Новый ЧтениеТекста(ИмяВременногоФайла);
	СтрТекст = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	// удаляем временный файл
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат СтрТекст;
	
КонецФункции

// Функция - Получить вложение на сервере
Функция ПолучитьВложениеНаСервере(Ссылка, ИмяФайла, Идентификатор, ВАрхиве = Ложь) Экспорт
	
	ВАрхиве = Ложь;
	
	СтрВложения = КонтекстЭДО().ПолучитьВложения(Ссылка, ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Вложение = СтрВложения[0];
	
	Если Вложение.ВАрхиве Тогда 
		ВАрхиве = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), Идентификатор);

КонецФункции

// Функция - Печатная форма
Функция ПечатнаяФорма(Письмо) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// получаем бланк отчета из макета
	Бланк = КонтекстЭДО().ПолучитьМакетОбработки("Письмо");
	ЗаполнитьОтправителяИПолучателя(Письмо, ТабДокумент, Бланк);
	ЗаполнитьЗаголовокИТекст(Письмо, ТабДокумент, Бланк);
	ЗаполнитьПодписи(Письмо, ТабДокумент, Бланк);
	ЗаполнитьПриложения(Письмо, ТабДокумент, Бланк);
	ЗаполнитьПодпись(Письмо, ТабДокумент);
	
	ТабДокумент.МасштабПечати = 100;
	Возврат ТабДокумент;
	
КонецФункции

#Область КонтрольОтправки

// Возвращает количество байтов в одном МегаБайте
//
// Возвращаемое значение:
//	Число
//
Функция ОдинМегабайт() Экспорт
	
	Возврат 1024 * 1024;

КонецФункции

// Описывает параметры ограничений на контейнер в зависимости от типа контролирующего органа
//
// Параметры:
//	ТипКО - ПеречислениеСсылка.ТипыПерепискиСКонтролирующимиОрганами
//
// Возвращаемое значение:
//	Структура - содержит поля:
//		* РазмерКонтейнера 	- Число - максимальный размер контейнера
//		* КоличествоФайлов 	- ЧИсло - количество файлов в контейнера
//		* РазмерФайла 		- Число - максимальный размер одного файла
//		* СжатиеКонтейнера 	- Булево - признак использования сжатия контейнера
//
Функция МаксимальныйРазмерВложений(ТипКО) Экспорт
	
	ОдинМегабайт = ОдинМегабайт();
	
	Результат = Новый Структура();
	Результат.Вставить("РазмерКонтейнера", 999);
	Результат.Вставить("КоличествоФайлов", 999);
	Результат.Вставить("РазмерФайла", 999);
	Результат.Вставить("СжатиеКонтейнера", Истина);
	
	Если ТипКО = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС Тогда
		Результат.РазмерКонтейнера = 72;
		Результат.РазмерФайла = 60;
		Результат.КоличествоФайлов = 99;
		Результат.СжатиеКонтейнера = Ложь;
		
	ИначеЕсли ТипКО = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС Тогда
		Результат.РазмерКонтейнера = 100;
		
	КонецЕсли;
	
	Результат.РазмерКонтейнера = Результат.РазмерКонтейнера * ОдинМегабайт;
	Результат.РазмерФайла = Результат.РазмерФайла * ОдинМегабайт;
	
	Возврат Результат;
	
КонецФункции

// Подбирает письма входящий в одну группу после разбиения.
// Фильтр поиска дата и время создания и наличие темы
//
// Параметры:
//	СсылкаПисьма - СправочникСсылка.ПерепискаСКонтролирующимиОрганами
//
// Возвращаемое значение:
//	Массив - содержит элементы СправочникСсылка.ПерепискаСКонтролирующимиОрганами
//	
Функция ОбъектыГрупповойОтправки(СсылкаПисьма) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПисьма) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаПисьма, "Наименование, ДатаСообщения", Истина);
	ПозицияНачало = СтрНайти(РеквизитыПисьма.Наименование, НСтр("ru = '(Часть'"));
	ПозицияСледующая = СтрНайти(РеквизитыПисьма.Наименование, ")");
	
	Если ПозицияНачало = 1 И ПозицияСледующая > 1 Тогда
		ТемаПисьма = СокрЛП(Сред(РеквизитыПисьма.Наименование, ПозицияСледующая + 1));
	Иначе
		ТемаПисьма = РеквизитыПисьма.Наименование;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерепискаСКонтролирующимиОрганами.Ссылка КАК Ссылка,
	|	ПерепискаСКонтролирующимиОрганами.Наименование КАК Тема
	|ИЗ
	|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
	|ГДЕ
	|	ПерепискаСКонтролирующимиОрганами.ДатаСообщения = &ДатаСообщения
	|	И ПерепискаСКонтролирующимиОрганами.Наименование ПОДОБНО ""(Часть % из %)%""
	|	И ПерепискаСКонтролирующимиОрганами.Ссылка <> &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСообщения", РеквизитыПисьма.ДатаСообщения);
	Запрос.УстановитьПараметр("Ссылка", СсылкаПисьма);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТемаПисьма = Выборка.Тема;
			ПозицияНачало = СтрНайти(ТемаПисьма, НСтр("ru = '(Часть'"));
			ПозицияСледующая = СтрНайти(ТемаПисьма, ")");
			Если НЕ (ПозицияНачало = 1 И ПозицияСледующая > 1) Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяТема = СокрЛП(Сред(ТемаПисьма, ПозицияСледующая + 1));
			Если СтрНайти(ТемаПисьма, ТекущаяТема) > 0
				ИЛИ СтрНайти(ТекущаяТема, ТемаПисьма) > 0 Тогда
				Результат.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу значений связанных писем с дополнительной информацией о каждом из них.
//
// Параметры:
//	СсылкаПисьма - СправочникСсылка.ПерепискаСКонтролирующимиОрганами - письмо из группы
//
// Возвращаемое значение:
//	ТаблицаЗначений - содеджит колонки
//		Статус 				- Число
//		Ссылка				- СправочникСсылка.ПерепискаСКонтролирующимиОрганами
//		РазмерВложений		- Число
//		КоличествоВложений	- Число
//		Организация 		- СправочникСсылка.Организации
//		Тип 				- ПеречислениеСсылка.ТипыПерепискиСКонтролирующимиОрганами
//		Тема 				- Строка
//
Функция СостояниеГрупповойОтправки(СсылкаПисьма) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	МассивПисем = ОбъектыГрупповойОтправки(СсылкаПисьма);
	
	Если МассивПисем.Количество() > 0 Тогда
		МассивПисем.Добавить(СсылкаПисьма);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенияНеформализованныхДокументов.Размер) КАК Размер,
		|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент КАК ВладелецФайла,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ РазмерВложений
		|ИЗ
		|	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
		|ГДЕ
		|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент В(&СписокПисем)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ПерепискаСКонтролирующимиОрганами.ПометкаУдаления
		|			ТОГДА 7
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Отправлен)
		|			ТОГДА 3
		|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Доставлен)
		|			ТОГДА 4
		|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.НеПринят)
		|			ТОГДА 5
		|		КОГДА СтатусыОтправки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправки.Сдан)
		|			ТОГДА 6
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Статус,
		|	ПерепискаСКонтролирующимиОрганами.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(РазмерВложений.Размер, 0) КАК РазмерВложений,
		|	ЕСТЬNULL(РазмерВложений.Количество, 0) КАК КоличествоВложений,
		|	ПерепискаСКонтролирующимиОрганами.Организация КАК Организация,
		|	ПерепискаСКонтролирующимиОрганами.Тип КАК Тип,
		|	ПерепискаСКонтролирующимиОрганами.Наименование КАК Тема
		|ИЗ
		|	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|		ПО (СтатусыОтправки.Объект = ПерепискаСКонтролирующимиОрганами.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазмерВложений КАК РазмерВложений
		|		ПО ПерепискаСКонтролирующимиОрганами.Ссылка = РазмерВложений.ВладелецФайла
		|ГДЕ
		|	ПерепискаСКонтролирующимиОрганами.Ссылка В(&СписокПисем)";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ОдинМегабайт = ОдинМегабайт();
	Для Каждого СтрокаТаблицы Из Результат Цикл
		СтрокаТаблицы.РазмерВложений = Окр(СтрокаТаблицы.РазмерВложений / ОдинМегабайт, 2);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует новую тему письма с учетом количества писем в группе и текущего номера
//
// Параметры:
//	ТемаПисьма 		- Строка - текущее значение темы письма
//	Всего			- Число
//	ТекущийНомер    - Число
//
// Возвращаемое значение:
//	Строка
//
Функция ДополнениеДляГрупповойОтправки(Знач ТемаПисьма, Всего, ТекущийНомер)
	
	ПозицияНачало = СтрНайти(ТемаПисьма, "(Часть");
	ПозицияСледующая = СтрНайти(ТемаПисьма, ")");
	
	Если ПозицияНачало = 1 И ПозицияСледующая > 1 Тогда
		ТемаПисьма = СокрЛП(Сред(ТемаПисьма, ПозицияСледующая + 1));
	КонецЕсли;
	
	Результат = ТемаПисьма;
	
	Если Всего > 1 И ТекущийНомер > 0 Тогда
		Добавка = НСтр("ru = '(Часть %1 из %2)'");
		Результат = СтрШаблон(Добавка, ТекущийНомер, Всего) + " " + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Служит для раздения письма в соответствии с параметрами
//
// Параметры:
//	ПараметрыОперации 		- Структура - содержим обязательные поля
//		* Индекс 			- Число - должно быть больше 1
//		* ТекущееПисьмо		- СправочникСсылка.ПерепискаСКонтролирующимиОрганами - исходное письмо для разбития
//		* ФайлыПисем		- Массив - содержит структуры с полями
//			** Ссылка 		- СправочникСсылка.ПерепискаСКонтролирующимиОрганамиПрисоединенныйФайл
//			** ИмяФайла     - Строка
//	АдресХранилища			- Строка
//
// Возращаемое значение
//	Структура - содержим поля
//		* Выполнено 		- Булево
//		* Ошибка			- Строка
//
Функция РазделитьПисьма(ПараметрыОперации, АдресХранилища = "") Экспорт
	
	ТекущийИндекс = ПараметрыОперации.Индекс;
	ВсегоПисем = ПараметрыОперации.ВсегоПисем;
	ФайлыПисьма = ПараметрыОперации.ФайлыПисьма;
	ТекущееПисьмо = ПараметрыОперации.ТекущееПисьмо;
	ИсходноеПисьмо = ПараметрыОперации.ИсходноеПисьмо;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("Ошибка", "");
	
	Если ФайлыПисьма.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееПисьмо, "Наименование, ДатаСообщения, ИдентификаторОснования", Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ИсходноеПисьмо Тогда
			Если СтрНайти(РеквизитыПисьма.Наименование, "(" + НСтр("ru = 'Часть'"),) = 0 Тогда
				НоваяТема = ДополнениеДляГрупповойОтправки(РеквизитыПисьма.Наименование, ВсегоПисем, ТекущийИндекс);
				Если НоваяТема <> РеквизитыПисьма.Наименование Тогда
					ОбъектПереписки = ТекущееПисьмо.ПолучитьОбъект();
					ОбъектПереписки.Наименование = НоваяТема;
					ОбъектПереписки.Записать();
				КонецЕсли;
			КонецЕсли;
			НоваяСсылка = ТекущееПисьмо;
		Иначе
			ОбъектПереписки = ТекущееПисьмо.Скопировать();
			ОбъектПереписки.ИдентификаторОснования = РеквизитыПисьма.ИдентификаторОснования;
			ОбъектПереписки.ДатаСообщения = РеквизитыПисьма.ДатаСообщения;
			ОбъектПереписки.Наименование = ДополнениеДляГрупповойОтправки(РеквизитыПисьма.Наименование, ВсегоПисем, ТекущийИндекс);
			ОбъектПереписки.Записать();
			
			НоваяСсылка = ОбъектПереписки.Ссылка;
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ФайлыПисьма Цикл
			МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.НеформализованныйДокумент = ТекущееПисьмо;
			МенеджерЗаписи.ИмяФайла = СтрокаМассива.ИмяФайла;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.НеформализованныйДокумент <> НоваяСсылка Тогда
				МенеджерЗаписи.НеформализованныйДокумент = НоваяСсылка;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаМассива.Ссылка) И НоваяСсылка <> СтрокаМассива.Ссылка.ВладелецФайла Тогда
				ПрисоединенныйФайлОбъект = СтрокаМассива.Ссылка.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ВладелецФайла = НоваяСсылка;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ДанныеОшибки = ИнформацияОбОшибке();
		Результат.Выполнено = Ложь;
		Результат.Ошибка = КраткоеПредставлениеОшибки(ДанныеОшибки); 
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Разбиение писем: '", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ДанныеОшибки));
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция КонтекстЭДО()
	
	Возврат ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
КонецФункции

Процедура ЗаполнитьОтправителяИПолучателя(Письмо, ТабДокумент, Бланк)

	Область = Бланк.ПолучитьОбласть("Наименования");
	ЗаполнитьНаименованиеОрганизации(Письмо, Бланк, Область);
	ЗаполнитьНаименованиеИКодКонтролирующегоОргана(Письмо, Бланк, Область);
	ЗаполнитьКонтактыОрганизации(Письмо, ТабДокумент, Бланк, Область);
	
	ТабДокумент.Вывести(Область);

КонецПроцедуры

Процедура ЗаполнитьНаименованиеИКодКонтролирующегоОргана(Письмо, Бланк, ОбластьНаименований)
	
	Если Письмо.Статус = Перечисления.СтатусыПисем.Полученное Тогда 
		Постфикс 	= "Отправителя";
		Орган 		= Письмо.Отправитель;
	Иначе
		Постфикс	= "Получателя";
		Орган 		= Письмо.Получатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Орган) Тогда
		Возврат;
	КонецЕсли;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СвойстваПереписки = КонтекстЭДОСервер.СвойстваПерепискиСКонтролирующими(Письмо);
	
	НаименованиеОргана 	= Орган.Наименование;
	Если НЕ ЗначениеЗаполнено(НаименованиеОргана) Тогда
		НаименованиеОргана = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(СвойстваПереписки);
	КонецЕсли;
	
	Если (ТипЗнч(Орган) = Тип("СправочникСсылка.НалоговыеОрганы")
		ИЛИ ТипЗнч(Орган) = Тип("СправочникСсылка.ОрганыПФР")
		ИЛИ ТипЗнч(Орган) = Тип("СправочникСсылка.ОрганыФСГС")) 
		И СтрНайти(НаименованиеОргана, СвойстваПереписки.КодКонтролирующегоОргана) = 0 Тогда
		НаименованиеОргана = НаименованиеОргана + ", код " + СокрЛП(СвойстваПереписки.КодКонтролирующегоОргана);
	КонецЕсли;
	
	ОбластьНаименований.Параметры["Наименование" + Постфикс] = НаименованиеОргана;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеОрганизации(Письмо, Бланк, ОбластьНаименований)
	
	Если Письмо.Статус = Перечисления.СтатусыПисем.Полученное Тогда 
		Постфикс = "Получателя";
		Организация = Письмо.Получатель;
	Иначе
		Постфикс = "Отправителя";
		Организация = Письмо.Отправитель;
	КонецЕсли;
	
	ОбластьНаименований.Параметры["Наименование" + Постфикс] = Организация;

КонецПроцедуры

Процедура ЗаполнитьКонтактыОрганизации(Письмо, ТабДокумент, Бланк, Область)
	
	Если Письмо.Статус = Перечисления.СтатусыПисем.Полученное Тогда 
		Постфикс = "Получателя";
		Организация = Письмо.Получатель;
	Иначе
		Постфикс = "Отправителя";
		Организация = Письмо.Отправитель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеСведения = "ИННЮЛ, КППЮЛ, АдрЮР, АдрЮР_XML, АдрМЖ, АдрМЖ_XML, ТелОрганизации";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		Письмо.ДатаСообщения,
		ТребуемыеСведения);
		
	// ИНН и КПП.
	Если ЗначениеЗаполнено(СведенияОбОрганизации.ИННЮЛ) Тогда
		
		НадписьИННиКПП = НСтр("ru = 'ИНН '") + СведенияОбОрганизации.ИННЮЛ;
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КППЮЛ) Тогда 
			 НадписьИННиКПП = НадписьИННиКПП + НСтр("ru = ' КПП '") + СведенияОбОрганизации.КППЮЛ;
		КонецЕсли;
		
		Область.Параметры["ИННиКПП" + Постфикс] = НадписьИННиКПП;
		
	КонецЕсли;
	
	// Адрес.
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР_XML) Тогда
		Адрес = КонтекстЭДОСервер.ПредставлениеАдресаИзДанныхОрганизации(СведенияОбОрганизации.АдрЮР_XML);
	Иначе
		Адрес = КонтекстЭДОСервер.ПредставлениеАдресаИзДанныхОрганизации(СведенияОбОрганизации.АдрМЖ_XML);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР)
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР) Тогда
		
		Область.Параметры["Адрес" + Постфикс] = Адрес;
		
	КонецЕсли;

	// Телефон.
	Если ЗначениеЗаполнено(СведенияОбОрганизации.ТелОрганизации)
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.ТелОрганизации) Тогда
		
		Область.Параметры["Телефон" + Постфикс] = НСтр("ru = 'тел: '") + СведенияОбОрганизации.ТелОрганизации;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗаголовокИТекст(Письмо, ТабДокумент, Бланк)

	ОбластьЗаголовок = Бланк.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заголовок = Письмо.Наименование;
	ОбластьЗаголовок.Параметры.Дата      = Письмо.ДатаСообщения;
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СокрЛП(Письмо.Содержание)) Цикл
		ОбластьТекстПисьма = Бланк.ПолучитьОбласть("ТекстПисьма");
		ОбластьТекстПисьма.Параметры.ТекстПисьма = СтрПолучитьСтроку(СокрЛП(Письмо.Содержание), НомерСтроки);
		ТабДокумент.Вывести(ОбластьТекстПисьма);
	КонецЦикла;  

КонецПроцедуры

Процедура ЗаполнитьПодписи(Письмо, ТабДокумент, Бланк)
	
	Если Письмо.Статус = Перечисления.СтатусыПисем.Полученное Тогда 
		ЗаполнитьПодписиКонтролирующегоОргана(Письмо, ТабДокумент, Бланк);
	Иначе
		ЗаполнитьПодписиОрганизации(Письмо, ТабДокумент, Бланк);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодписиКонтролирующегоОргана(Письмо, ТабДокумент, Бланк)
	
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Подписи = КонтекстЭДОСервер.ПодписиПодСообщениями(Письмо, ТипыСообщений);
	
	ПодписьВыведена = Ложь;
	
	ПодписьОргана = Неопределено;
	Для каждого Подпись Из Подписи Цикл
		Если НЕ Подпись.ЭЦПЭтоПодписьАбонента Тогда
			
			Если Подпись.Данные.Получить() = Неопределено Тогда
				
				МассивФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
					Подпись.ТранспортноеСообщение,
					"ТранспортноеСообщениеПрисоединенныеФайлы",
					Подпись.ИмяФайла);
					
				Если МассивФайлов.Количество() > 0 Тогда
					ПодписьОргана = РаботаСФайлами.ДвоичныеДанныеФайла(МассивФайлов[0]);
				КонецЕсли;
				
			Иначе
				ПодписьОргана = Подпись.Данные.Получить();
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодписьОргана <> Неопределено Тогда
		
		Попытка
			СвойстваПодписи = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(ПодписьОргана);
		Исключение
			СвойстваПодписи = Неопределено;
		КонецПопытки;
		
		Если СвойстваПодписи <> Неопределено Тогда
			
			Для каждого Подписант Из СвойстваПодписи.Подписанты Цикл
			
				Если НЕ Подписант.Сертификат.Свойство("Сертификат") Тогда
					Продолжить;
				КонецЕсли;
				
				ДвДанныеСертификат = Подписант.Сертификат.Сертификат; 
				Сертификат = Новый СертификатКриптографии(ДвДанныеСертификат);
				
				ОбластьПодписей = Бланк.ПолучитьОбласть("Подписи");
				ОбластьПодписей.Параметры.Руководитель 	= ПолучитьФИОСтрокойИзСвойствСертификата(Сертификат.Субъект);
				ОбластьПодписей.Параметры.Должность 	= ПолучитьДолжностьИзСвойствСертификата(Сертификат.Субъект);
				ТабДокумент.Вывести(ОбластьПодписей);

				ПодписьВыведена = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПодписьВыведена Тогда
 		ОбластьПодписей = Бланк.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьПодписей);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДолжностьИзСвойствСертификата(СвойстваСертификата)
	
	OID       = "OID2_5_4_12";
	Должность = "";
	
	Если СвойстваСертификата.Свойство(OID) Тогда
		Должность = СвойстваСертификата[OID];
	ИначеЕсли СвойстваСертификата.Свойство("T") Тогда
		Должность = СвойстваСертификата["T"];
	КонецЕсли;
	
	Возврат Должность;
	
КонецФункции

Функция ПолучитьФИОСтрокойИзСвойствСертификата(СвойстваСертификата)
	
	Если СвойстваСертификата.Свойство("SN") И (СвойстваСертификата.Свойство("G") ИЛИ СвойстваСертификата.Свойство("GN")) Тогда
		Если СвойстваСертификата.Свойство("G") Тогда
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["G"]), "_", " ");	
		Иначе
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["GN"]), "_", " ");	
		КонецЕсли;
	ИначеЕсли СвойстваСертификата.Свойство("CN") Тогда
		Возврат СокрЛП(СвойстваСертификата["CN"]); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции 

Процедура ЗаполнитьПодписиОрганизации(Письмо, ТабДокумент, Бланк)
	
	Организация 	= Письмо.Отправитель;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПодписей = Бланк.ПолучитьОбласть("Подписи");
	
	ТребуемыеСведения = "ФамилияРук, ИмяРук, ОтчествоРук, ДолжнРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		Письмо.ДатаСообщения,
		ТребуемыеСведения);
		
	ФИО = Новый Структура();
	ФИО.Вставить("Фамилия", 	СведенияОбОрганизации.ФамилияРук);
	ФИО.Вставить("Имя", 		СведенияОбОрганизации.ИмяРук);
	ФИО.Вставить("Отчество", 	СведенияОбОрганизации.ОтчествоРук);
		
	Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
	
	ОбластьПодписей.Параметры.Должность 	= СведенияОбОрганизации.ДолжнРук;
	ОбластьПодписей.Параметры.Руководитель 	= Руководитель;
	
	ДвДанныеПодписи = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПодписьРуководителя(Организация, ДвДанныеПодписи);
		
	Если ЗначениеЗаполнено(ДвДанныеПодписи) Тогда
		ОбластьПодписей.Рисунки.Роспись.Картинка = Новый Картинка(ДвДанныеПодписи);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьПодписей);
	
КонецПроцедуры

Процедура ЗаполнитьПриложения(Письмо, ТабДокумент, Бланк)
	
	Вложения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьСписокВложений(Письмо);
	Если Вложения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок.
	ОбластьЗаголовкаПриложения = Бланк.ПолучитьОбласть("ЗаголовокПриложения");
	ТабДокумент.Вывести(ОбластьЗаголовкаПриложения);
	
	// Список приложений.
	ОбластьПриложений = Бланк.ПолучитьОбласть("Приложения");
	НомерПриложения = 0;
	Для каждого Вложение Из Вложения Цикл
		
		НомерПриложения = НомерПриложения + 1;
		ИмяПриложения 	= ИмяФайлаБезРасширения(Вложение.ИмяФайла);
		
		ОбластьПриложений.Параметры.Приложение = Строка(НомерПриложения) + ". " + ИмяПриложения;
		ТабДокумент.Вывести(ОбластьПриложений);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ИмяФайлаБезРасширения(ИмяФайлаСРасширением)
	
	ДлинаИмениФайла = СтрДлина(ИмяФайлаСРасширением);
	Для Инд = 1 По ДлинаИмениФайла Цикл
		Если Сред(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд + 1, 1) = "." Тогда
			Возврат Лев(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд);
		КонецЕсли;
	КонецЦикла;
	Возврат ИмяФайлаСРасширением;
	
КонецФункции

Процедура ЗаполнитьПодпись(Письмо, ТабДокумент)
	
	// Типы не содержат квитанций, так как квитанции не содержат подписи под самим письмом, только под квитанцией.
	ТипыСообщений = Новый Массив;
	// ФНС
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);

	// ПФР
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);

	// ФСГС
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДобавитьШтампПодписиПодДокументом(
		Письмо,
		ТипыСообщений,
		ТабДокумент,
		2,
		Ложь); 

КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ)
		И Параметры.Ключ.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		ВыбраннаяФорма = "ФормаВходящееПисьмо";
	Иначе
		ВыбраннаяФорма = "ФормаИсходящееПисьмо";
	КонецЕсли;
	
	КонтекстЭДО.ОбработкаПолученияФормы("Справочник", "ПерепискаСКонтролирующимиОрганами", ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли


