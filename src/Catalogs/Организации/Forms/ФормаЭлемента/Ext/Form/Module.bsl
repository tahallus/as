#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ТекстОшибки = НСтр(
			"ru = 'Запрещено создавать новую организацию
			|при выключенной настройке параметра учета ""Учет по нескольким организациям"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветТекстаНекорректногоЗаполнения = ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;

	РежимИсправленияОшибок = Параметры.ОшибкиЗаполнения;

	Если РежимИсправленияОшибок Тогда
		ПроверкаДанных.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
		ОтметитьОшибки(Параметры.ПереченьОшибок);
	КонецЕсли;
	
	УстановитьРеквизитФормыКлассификаторОПФ();
	Для Каждого СтрокаТаблицы Из КлассификаторОПФ Цикл
		Элементы.КодОКОПФ.СписокВыбора.Добавить(СтрокаТаблицы.Код, СтрокаТаблицы.Код + " - "
			+ СтрокаТаблицы.ПолнаяФорма);
	КонецЦикла;

	ТаблицаКлассификатора = РегламентированныеДанныеПовтИсп.КлассификаторФормСобственности();
	Для Каждого СтрокаТаблицы Из ТаблицаКлассификатора Цикл
		Элементы.КодОКФС.СписокВыбора.Добавить(СтрокаТаблицы.Код, СтрокаТаблицы.Код + " - "
			+ СтрокаТаблицы.Наименование);
	КонецЦикла;

	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОрганаПолучателя,
		ПлатежныеРеквизитыФНСПредставление);

	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.ОрганФСС, Объект.КодОрганаФСС + ?(Объект.ЮридическоеФизическоеЛицо
		= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, 3, 1), ПлатежныеРеквизитыФССПредставление);

	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.ОрганПФР, Объект.КодОрганаПФР, ПлатежныеРеквизитыПФРПредставление);

	ГоловныеОрганизацииОбособленногоПодразделения();

	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

	ВыполнитьВсеПроверки(ЭтотОбъект);

	Если Параметры.Ключ.Пустая() Тогда

		ФормироватьНаименованиеАвтоматически = Истина;
		
		// УНФ.КонтактнаяИнформация
		КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
		// Конец УНФ.КонтактнаяИнформация

		УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);

		Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
			ПрочитатьФизЛицо(Объект.ФизическоеЛицо);
		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.ОбъектНалогообложения) Тогда
		КлючСистемыНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
		КлючСистемыНалогообложения.СтавкаНалога           = 6;
		КлючСистемыНалогообложения.ПовышеннаяСтавкаНалога = 8;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Элементы.Фамилия.АвтоОтметкаНезаполненного	= Неопределено;
		Элементы.Имя.АвтоОтметкаНезаполненного		= Неопределено;
		Элементы.Отчество.АвтоОтметкаНезаполненного	= Неопределено;
	КонецЕсли;

	ИзменилиРуководителя = Ложь;
	ИзменилиБанковскийСчет = Ложь;
	
	// Если форма открыта из календаря подготовки отчетности, то необходимо показать сообщение, где включить
	// соответствующую задаче опцию.
	Если Не Параметры.ЗадачаНалогов.Пустая() Тогда
		ОбработатьПараметрыЗадачиНалогов();
	КонецЕсли;

	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УстновитьВидимостьНастроекЕНВД();
	
	УстановитьСписокРежимовНалогообложения(ЭтотОбъект, ПоказыватьНастройкиЕНВД);
	УправлениеФормой(ЭтотОбъект);

	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ЮридическоеФизическоеЛицо.Видимость = Ложь;
		Элементы.ЮридическиеДанные.Видимость = Ложь;
		Элементы.КонтактнаяИнформация.Видимость = Ложь;
		Элементы.ОсновнойБанковскийСчет.Видимость = Ложь;
		Элементы.ОсновнаяКасса.Видимость = Ложь;
		Элементы.Налогообложение.Видимость = Ложь;
		Элементы.ФормаЗаполнитьРеквизитыПоДаннымЕГР.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект, "УНФ.Справочник.Организации", "ФормаЭлемента", Неопределено, НСтр("ru='Новости: Организации'"), Ложь,
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Истина),
		"ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Элементы.ВидСтавкиНДСПоУмолчанию.РежимВыбораИзСписка = Истина;
	Элементы.ВидСтавкиНДСПоУмолчанию.СписокВыбора.Очистить();
	СоответствиеСтавок = Справочники.СтавкиНДС.СоответствиеСтавокНДС(ТекущаяДатаСеанса());
	Для Каждого ЗначениеСоответствия Из СоответствиеСтавок Цикл
		Если ЗначениеЗаполнено(ЗначениеСоответствия.Значение) Тогда
			Элементы.ВидСтавкиНДСПоУмолчанию.СписокВыбора.Добавить(ЗначениеСоответствия.Ключ, Строка(
				ЗначениеСоответствия.Значение));
		КонецЕсли;
	КонецЦикла;
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Объект.ВидСтавкиНДСПоУмолчанию = ПредопределенноеЗначение(
		"Перечисление.ВидыСтавокНДС.Общая") Или Объект.ВидСтавкиНДСПоУмолчанию = ПредопределенноеЗначение(
		"Перечисление.ВидыСтавокНДС.ОбщаяРасчетная");     
	
	КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьМаскуНомераСчета();
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	УправлениеНебольшойФирмойЭлектронныеДокументыКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Попытка
		ИмяСправочникаХранилищаФайлов = ИсточникВыбора.ИмяСправочникаХранилищаФайлов;
	Исключение
		ИмяСправочникаХранилищаФайлов = "";
	КонецПопытки;

	Если ИмяСправочникаХранилищаФайлов = "ОрганизацииПрисоединенныеФайлы" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда

		Если РаботаСЛоготипом Тогда

			Объект.ФайлЛоготип = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = РаботаСФайламиУНФВызовСервера.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип,
				УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготипа = ДвоичныеДанныеКартинки;
			КонецЕсли;

			РаботаСЛоготипом = Ложь;

		ИначеЕсли РаботаСФаксимиле Тогда

			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = РаботаСФайламиУНФВызовСервера.СсылкаНаДвоичныеДанныеФайла(
				Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
			КонецЕсли;

			РаботаСФаксимиле = Ложь;

		КонецЕсли;

	КонецЕсли;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Организации.Форма.РедактированиеИсторииНаименований") Тогда
				
		УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Организации.Форма.РедактированиеИсторииКПП") Тогда
		
		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда

		Объект.БанковскийСчетПоУмолчанию = Параметр.НовыйОсновнойСчет;
		ПрочитатьБанковскийСчетПоУмолчанию(Объект.БанковскийСчетПоУмолчанию);
		Если Не Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаОсновногоСчетаВыполнена");

	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда

		Модифицированность	= Истина;
		Если РаботаСЛоготипом Тогда

			Объект.ФайлЛоготип = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = РаботаСФайламиУНФВызовСервера.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип,
				УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготипа = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСЛоготипом = Ложь;

		ИначеЕсли РаботаСФаксимиле Тогда

			Объект.ФайлФаксимильнаяПечать = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = РаботаСФайламиУНФВызовСервера.СсылкаНаДвоичныеДанныеФайла(
				Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСФаксимиле = Ложь;

		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" И Источник <> Объект.Ссылка И Параметр = Объект.ФизическоеЛицо Тогда

		ПрочитатьФизЛицо(Параметр);
		
	// РегламентированнаяОтчетность
	ИначеЕсли ИмяСобытия = "ПривязатьУчетнуюЗаписьКОрганизации" И Объект.Ссылка = Параметр.Организация Тогда

		Параметр.Вставить("ОповещениеОтработано", Истина);

	ИначеЕсли ИмяСобытия = "ЗаписьВидаДеятельностиЕНВД" И Параметр.Свойство("Организация") И Объект.Ссылка
		= Параметр.Организация Тогда

		СформироватьНадписьНастройкиЕНВД();
	ИначеЕсли ИмяСобытия = "ЗаписьПатента" И Параметр.Свойство("Организация") И Объект.Ссылка = Параметр.Организация Тогда

		СформироватьНадписьНастройкиПатента();
	// Конец РегламентированнаяОтчетность

	ИначеЕсли ИмяСобытия = "ЗаписьСистемыНалогообложения" И Параметр.Свойство("Организация") И Объект.Ссылка
		= Параметр.Организация Тогда

		БылПлательщикомЕНВД = КлючСистемыНалогообложения.ПлательщикЕНВД;
		ПрочитатьНастройкиСистемыНалогообложения(Объект.Ссылка);
		ОсталсяПлательщикомЕНВД = КлючСистемыНалогообложения.ПлательщикЕНВД;

		Если БылПлательщикомЕНВД И Не ОсталсяПлательщикомЕНВД Тогда
			СбрасыватьФлагОПримененииЕНВДПоСкладамПослеЗаписи = Истина;
		КонецЕсли;

		УправлениеФормой(ЭтотОбъект);

	ИначеЕсли ИмяСобытия = "ИзмененТарифСтраховыхВзносов" Тогда

		ПрочитатьНастройкиСтраховыхВзносов(Объект.Ссылка);
		УправлениеФормой(ЭтотОбъект);
	Иначе 
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		УправлениеНебольшойФирмойЭлектронныеДокументыКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлЛоготип) Тогда
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(ТекущийОбъект.ФайлЛоготип,
			УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресЛоготипа = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлФаксимильнаяПечать) Тогда
		ДвоичныеДанныеКартинки = РаботаСФайламиУНФ.СсылкаНаДвоичныеДанныеФайла(
			ТекущийОбъект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;

	Если ТекущийОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПрочитатьФизЛицо(ТекущийОбъект.ФизическоеЛицо);
	КонецЕсли;

	ПрочитатьНастройкиСтраховыхВзносов(ТекущийОбъект.Ссылка);
	ПрочитатьНастройкиСистемыНалогообложения(ТекущийОбъект.Ссылка);
	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
	КонецЕсли;

	СформироватьНадписьНастройкиЕНВД();
	СформироватьНадписьНастройкиПатента();

	ЗначениеВРеквизитФормы(РегламентированнаяОтчетностьУСН.ПолучитьРегистрациюВИФНС(
		ТекущийОбъект.Ссылка).ПолучитьОбъект(), "РегистрацияВНалоговомОргане");
	Объект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;

	ПрочитатьБанковскийСчетПоУмолчанию(ТекущийОбъект.БанковскийСчетПоУмолчанию);
	
	// Заполним список возможных кратких наименований и определим флаг автоматической смены краткого наименования
	УстановитьРеквизитФормыКлассификаторОПФ();
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено;
		
	
	// Алгоритм формирования наименования зависит от юридического адреса. Необходимо вызывать после УНФ.КонтактнаяИнформация
	ФормироватьНаименованиеПлательщикаАвтоматически = ?(НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект)
		= ТекущийОбъект.НаименованиеПлательщикаПриПеречисленииНалогов, 0, 1);
	
	// Алгоритм формирования заголовка контактной информации зависит от юридического адреса. Необходимо вызывать после УНФ.КонтактнаяИнформация
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ПроверитьЧтоПересталБытьПлательщикомЕНВД(ТекущийОбъект.Ссылка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект); // для проверки внедрения БСП
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Сохраним предыдущие значения для последующего анализа
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПрежнийВидОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийОбъект.Ссылка, "ЮридическоеФизическоеЛицо"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", ТекущийОбъект.ЭтоНовый());
	
	// Заполним основной банковский счет
	УстановитьБанковскийСчетПоУмолчанию(ТекущийОбъект);
	
	// Физическое лицо, будет создано в ПриЗаписи()
	Если ТекущийОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Не ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	КонецЕсли;

	ОбновлятьИнтерфейс = Ложь;
	Если Объект.ИспользуетсяОтчетность И Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		ОбновлятьИнтерфейс = Истина;
	КонецЕсли;

	Если Объект.ИспользуетсяОтчетность И (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		Или Объект.ИПИспользуетТрудНаемныхРаботников) Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;

		Если Не ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ИспользуетсяОтчетность И КлючСистемыНалогообложения.РозничнаяПродажаАлкоголя Тогда
		Если Не ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;

		Если Не Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Получить() Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЗаписатьНастройкиСтраховыхВзносов(ТекущийОбъект.Ссылка);
	ЗаписатьНастройкиСистемыНалогообложения(ТекущийОбъект.Ссылка);
	Если ИзменилиБанковскийСчет Тогда
		ЗаписатьБанковскийСчетПоУмолчанию(ТекущийОбъект);
	КонецЕсли;
	ЗаписатьФизЛицо(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// РегламентированнаяОтчетность 	
	РезультатВыполнения = КалендарьОтчетности.ЗапуститьЗаполнениеВФоне(
		УникальныйИдентификатор, ТекущийОбъект.Ссылка, ?(ТекущийОбъект.ДополнительныеСвойства.Свойство(
		"ПрежнийВидОрганизации"), ТекущийОбъект.ДополнительныеСвойства.ПрежнийВидОрганизации
		<> ТекущийОбъект.ЮридическоеФизическоеЛицо, Ложь));

	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииЗадачОтчетности", РезультатВыполнения.Статус = "Выполнено");

	Если ОбновлятьИнтерфейс Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	// Конец РегламентированнаяОтчетность

	ПрочитатьФизЛицо(ТекущийОбъект.ФизическоеЛицо);

	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	Если СбрасыватьФлагОПримененииЕНВДПоСкладамПослеЗаписи Тогда
		СбрасыватьФлагОПримененииЕНВДПоСкладамПослеЗаписи = Ложь;
		СброситьФлагОПримененииЕНВДПоСкладамПослеЗаписи(ТекущийОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

	Оповестить("Запись_Организации", Объект.Ссылка, Объект.Ссылка);
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Оповестить("Запись_ФизическиеЛица", Объект.ФизическоеЛицо, Объект.Ссылка);
	КонецЕсли;

	Если ИзменилиРуководителя Или ИзменилиГлавногоБухгалтера Тогда

		ПодписиДолжностныхЛиц = Новый Массив(2);

		Если ИзменилиРуководителя Тогда

			ПодписьРуководителя = Новый Структура;
			ПодписьРуководителя.Вставить("Роль", "Руководитель");
			ПодписьРуководителя.Вставить("Подпись", Объект.ПодписьРуководителя);
			ПодписьРуководителя.Вставить("ФизическоеЛицо", ФизическоеЛицоРуководитель);

			ПодписиДолжностныхЛиц.Добавить(ПодписьРуководителя);

		КонецЕсли;

		Если ИзменилиГлавногоБухгалтера Тогда

			ПодписьГлавногоБухгалтера = Новый Структура;
			ПодписьГлавногоБухгалтера.Вставить("Роль", "ГлавныйБухгалтер");
			ПодписьГлавногоБухгалтера.Вставить("Подпись", Объект.ПодписьГлавногоБухгалтера);
			ПодписьГлавногоБухгалтера.Вставить("ФизическоеЛицо", ФизическоеЛицоГлавныйБухгалтер);

			ПодписиДолжностныхЛиц.Добавить(ПодписьГлавногоБухгалтера);

		КонецЕсли;

		Оповестить("ОбновленыПодписиДолжностныхЛиц", ПодписиДолжностныхЛиц, Объект.Ссылка);

		ИзменилиРуководителя = Ложь;
		ИзменилиГлавногоБухгалтера = Ложь;

		ФизическоеЛицоРуководитель = Неопределено;
		ФизическоеЛицоГлавныйБухгалтер = Неопределено;

	КонецЕсли;
	
	// РегламентированнаяОтчетность
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииЗадачОтчетности")
		И ПараметрыЗаписи.ОповеститьОбИзмененииЗадачОтчетности Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	КонецЕсли;

	Если ОбновлятьИнтерфейс Тогда

		ОбновитьИнтерфейс();
	КонецЕсли;
	// Конец РегламентированнаяОтчетность

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	// УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ); // для проверки
	// внедрения БСП
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.Фамилия) И Не ЗначениеЗаполнено(ФИОФизическихЛиц.Имя)
			И Не ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) Тогда

			ТекстСообщения = НСтр("ru = 'Не заполнено ФИО'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Фамилия", "ФИОФизическихЛиц", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если Не ПустаяСтрока(ОсновнойСчет_Номер) И Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Банк", , Отказ);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОсновнойСчет_Банк) И ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Номер", , Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Запись" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(
		ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьИсториюНаименований();
КонецПроцедуры

&НаКлиенте
Процедура КППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Организации.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьРуководителяПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ИзменилиРуководителя = Истина;

		ФизическоеЛицоРуководитель = ФизическоеЛицоИзПодписи(Объект.ПодписьРуководителя);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписьГлавногоБухгалтераПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФизическоеЛицоГлавныйБухгалтер = ФизическоеЛицоИзПодписи(Объект.ПодписьГлавногоБухгалтера);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссийНажатие(Элемент)

	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Организация", Объект.Ссылка);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", ЗначениеОтбора);

	ОткрытьФорму("Справочник.Комиссии.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)

	Если СтрНайти(Объект.Префикс, "-") > 0 Тогда

		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;

	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Объект.КодОКОПФ = "50102";
	КонецЕсли;

	ВыполнитьВсеПроверки(ЭтотОбъект);
	УстановитьСписокРежимовНалогообложения(ЭтотОбъект, ПоказыватьНастройкиЕНВД);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)

	Если Не ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

	ОписаниеОповещения = Новый ОписаниеОповещения("ФизическоеЛицоФИОПриИзмененииЗавершение", ЭтотОбъект);
	Если Не ПустаяСтрока(ФИОФизическихЛиц.Фамилия) Тогда
		ПроверитьОднофамильцев(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)

	ЗаблокироватьФизическоеЛицоПриРедактировании();

КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)

	ЗаблокироватьФизическоеЛицоПриРедактировании();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)

	ЗаблокироватьФизическоеЛицоПриРедактировании();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)

	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

КонецПроцедуры

&НаКлиенте
Процедура БанкСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаОбъекта", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранноеЗначение = "ЗагрузитьКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСБанкамиКлиент.ОткрытьФормуЗагрузкиКлассификатора();
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Возврат;
	КонецЕсли;

	НайденныйБанк = РаботаСБанкамиВызовСервера.СсылкаНаБанкИзКлассификатора(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(НайденныйБанк) Тогда
		ВыбранноеЗначение = НайденныйБанк;
	Иначе
		Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	ИзменилиБанковскийСчет = Истина;

КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = РаботаСБанкамиВызовСервера.БанкАвтоПодборДанныеВыбора(Текст);

КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	ИзменилиБанковскийСчет = Истина;
	ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ОсновнойСчет_Банк);
	УстановитьМаскуНомераСчета();
КонецПроцедуры

&НаКлиенте
Процедура КассаПоУмолчаниюПриИзменении(Элемент)

	УстановитьЗаголовокКассы(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ФормироватьНаименованиеПлательщикаАвтоматическиПриИзменении(Элемент)

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИмеютсяСотрудникиПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПолучателяПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		КодНалоговогоОрганаПолучателяПриИзмененииНаСервере();
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	КонецЕсли;

	УстановитьЗаголовокНалоговойИнспекции(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	ПроверитьЗаполнениеЭлемента("ПлатежныеРеквизитыФНСПредставление");

КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)

	Объект.КодОКВЭД = СтрЗаменить(Объект.КодОКВЭД, ",", ".");
	СформироватьПредставлениеПроверкиОКВЭД(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если СтрЗаканчиваетсяНа(ВыбранноеЗначение, "0000") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru='Выберите код ОКОПФ, не являющийся группой кодов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.КодОКОПФ");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВыделитьНабранныйТекстВСпискеВыбора(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСПриИзменении(Элемент)
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ВыделитьНабранныйТекстВСпискеВыбора(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаПФРПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	КонецЕсли;
	УстановитьЗаголовокПенсионногоФонда(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФССПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	КонецЕсли;
	УстановитьЗаголовокФСС(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектНалогообложенияПриИзменении(Элемент)

	Если КлючСистемыНалогообложения.ОбъектНалогообложения = ПредопределенноеЗначение(
		"Перечисление.ВидыОбъектовНалогообложения.Доходы") Тогда
		КлючСистемыНалогообложения.СтавкаНалога           = 6;
		КлючСистемыНалогообложения.ПовышеннаяСтавкаНалога = 8;
	Иначе
		КлючСистемыНалогообложения.СтавкаНалога           = 15;
		КлючСистемыНалогообложения.ПовышеннаяСтавкаНалога = 20;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)

	СформироватьПредставлениеПроверкиОГРН(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);

	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПФР_ИППриИзменении(Элемент)

	КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.РегистрационныйНомерПФР_ИП);
	Если Не ПустаяСтрока(КодОрганаПФР) Тогда
		Объект.КодОрганаПФР = КодОрганаПФР;
		ПроверитьЗаполнениеЭлемента("КодОрганаПФР");
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПФРПриИзменении(Элемент)

	КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.РегистрационныйНомерПФР);
	Если Не ПустаяСтрока(КодОрганаПФР) Тогда
		Объект.КодОрганаПФР = КодОрганаПФР;
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерФССПриИзменении(Элемент)

	РегистрационныйНомерФСС = ПолучитьКодОрганаФСС(Объект.РегистрационныйНомерФСС);
	Если Не ПустаяСтрока(РегистрационныйНомерФСС) Тогда
		Объект.КодОрганаФСС = РегистрационныйНомерФСС;
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыПФРПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение(
		"Перечисление.ВидыГосударственныхОрганов.ОрганПФР"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаПФР);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовПФР", ЭтотОбъект,
		ПараметрыФормы);

	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект,
		ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФНСПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение(
		"Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодНалоговогоОрганаПолучателя);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", РегистрацияВНалоговомОргане.НаименованиеИФНС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект,
		ПараметрыФормы);

	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект,
		ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение(
		"Перечисление.ВидыГосударственныхОрганов.ОрганФСС"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаФСС);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаФСС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФСС", ЭтотОбъект,
		ПараметрыФормы);

	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект,
		ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяПатентПриИзменении(Элемент)

	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН
		Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;

	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;

	УстановитьЗаголовокНалогообложения(ЭтотОбъект);

КонецПроцедуры
&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)

	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН
		Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;

	Если СистемаНалогообложенияПредставление = 0 Тогда
		КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
			"Перечисление.СистемыНалогообложения.Общая");
		КлючСистемыНалогообложения.ПлательщикУСН = Ложь;
	ИначеЕсли СистемаНалогообложенияПредставление = 1 Тогда
		КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
			"Перечисление.СистемыНалогообложения.Упрощенная");
		КлючСистемыНалогообложения.ПлательщикУСН = Истина;
	ИначеЕсли СистемаНалогообложенияПредставление = 2 Тогда
		КлючСистемыНалогообложения.ПлательщикЕНВД = Истина;
		КлючСистемыНалогообложения.ПрименяетсяПатент = Ложь;
		КлючСистемыНалогообложения.ПлательщикУСН = Ложь;
		КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
			"Перечисление.СистемыНалогообложения.ОсобыйПорядок");
	ИначеЕсли СистемаНалогообложенияПредставление = 3 Тогда
		КлючСистемыНалогообложения.ПрименяетсяПатент = Истина;
		КлючСистемыНалогообложения.ПлательщикУСН = Ложь;
		КлючСистемыНалогообложения.ПлательщикЕНВД = Ложь;
		КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
			"Перечисление.СистемыНалогообложения.ОсобыйПорядок");
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);

	Если КлючСистемыНалогообложения.ПлательщикУСН Или КлючСистемыНалогообложения.СистемаНалогообложения
		= ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок") Тогда
		ВидСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС");
	Иначе
		ВидСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая");
	КонецЕсли;

	Если ВидСтавки <> Неопределено Тогда
		Объект.ВидСтавкиНДСПоУмолчанию = ВидСтавки;
	КонецЕсли;
	Модифицированность = Истина;

	УстановитьЗаголовокНалогообложения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)

	СформироватьПредставлениеПроверкиСтраховогоНомераПФР(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТарифСтраховыхВзносовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
		ОбновитьОтображениеДанных();
	Иначе
		Элементы.ДекорацияОписаниеТарифа.Заголовок = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТарифСтраховыхВзносовПриИзменении(Элемент)

	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
		ОбновитьОтображениеДанных();
	Иначе
		Элементы.ДекорацияОписаниеТарифа.Заголовок = "";
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)

	СформироватьПредставлениеПроверкиИНН(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);

	Если ПустаяСтрока(Объект.КПП) Тогда
		РаботаСКонтрагентамиКлиентСерверПереопределяемый.ЗаполнитьКПППоИНН(Объект.ИНН, Объект.КПП);
	КонецЕсли;

	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)

	СформироватьПредставлениеПроверкиКПП(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);

	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)

	СформироватьПредставлениеПроверкиОКПО(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	ЗаблокироватьДанныеФормыДляРедактирования();

	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	ЗаблокироватьДанныеФормыДляРедактирования();

	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПлательщикаПриПеречисленииНалоговПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМОПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТарифНаТравматизмПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	ИзменилиБанковскийСчет = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения",
		Новый ОписаниеОповещения("ОбработкаВыбораКодОрганаФСГСПолучателя", ЭтотОбъект));

	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	Иначе
		Отбор = Новый Структура("Тип,Вид");
		Отбор.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		Отбор.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
		ДанныеИсточника = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Отбор);
		Если ДанныеИсточника.Количество() > 0 Тогда
			Значение = ДанныеИсточника[0].Значение;
			КодРегиона = КодРегионаПоАдресу(Значение);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ДополнительныеПараметры.Вставить("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодОрганаФСГСПолучателя(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)

	ГоловнаяОрганизацияПриИзмененииНаСервере();

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН", "Доступность", Не ЗначениеЗаполнено(
		Объект.ГоловнаяОрганизация));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦифровойИндексОбособленногоПодразделения",
		"Видимость", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));

	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда

		СформироватьПредставлениеПроверкиИНН(ЭтотОбъект);
		СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);

		УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		ПроверитьЗаполнениеЭлемента(Элемент.Имя);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидСтавкиНДСПоУмолчаниюПриИзменении(Элемент)
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Объект.ВидСтавкиНДСПоУмолчанию = ПредопределенноеЗначение(
		"Перечисление.ВидыСтавокНДС.Общая") Или Объект.ВидСтавкиНДСПоУмолчанию = ПредопределенноеЗначение(
		"Перечисление.ВидыСтавокНДС.ОбщаяРасчетная");
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикЕНВДПриИзменении(Элемент)
	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН
		Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;

	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;

	УстановитьЗаголовокНалогообложения(ЭтотОбъект);

КонецПроцедуры

Процедура УстновитьВидимостьНастроекЕНВД()
	
	ПоказыватьНастройкиЕНВД = Ложь; 
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Ссылка, ТекущаяДата()); 
		
		Если СистемаНалогообложения.ПлательщикЕНВД Тогда
			ПоказыватьНастройкиЕНВД = Истина;  
		Иначе			
			Элементы.ГруппаЕНВДИстория.Видимость = Ложь;
			Элементы.ГруппаВидУчетаСтраховыхВзносов.Видимость = Ложь;       
			ВыборЕНВД = Элементы.СистемаНалогообложения.СписокВыбора.НайтиПоИдентификатору(2);
			Если ВыборЕНВД <> Неопределено Тогда
				Элементы.СистемаНалогообложения.СписокВыбора.Удалить(ВыборЕНВД);    
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)

	Если Не ПустаяСтрока(ПолеПоискаИНН) Или Не ПустаяСтрока(Объект.ИНН) Тогда
	// Выполняем заполнение по ИНН без открытия вспомогательной формы

		ЗначениеПоиска = ?(ПустаяСтрока(ПолеПоискаИНН), Объект.ИНН, ПолеПоискаИНН);
		Если КлючевыеРеквизитыЗаполнены(ЭтотОбъект) Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект,
				Новый Структура("ИНН", ЗначениеПоиска));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(ЗначениеПоиска);
		КонецЕсли;

	Иначе
	// Открываем форму заполнения реквизитов

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаПоиска", ?(ПустаяСтрока(Объект.НаименованиеПолное), Объект.ИНН,
			Объект.НаименованиеПолное));

		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеРеквизитовОрганизацияВыбрана", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтраховыхВзносов(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));

		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияИсторииСтраховыхВзносов", ЭтотОбъект);

		ПоказатьВопрос(
			Оповещение, НСтр("ru='Переход к истории страховых взносов возможен только после записи.
							 |Записать?'"), СписокКнопок);
		Возврат;
	КонецЕсли;

	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаСписка", Новый Структура("Отбор",
			Новый Структура("Организация", Объект.Ссылка)));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияНалогообложения(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));

		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияИсторииНалогообложения", ЭтотОбъект);

		ПоказатьВопрос(
			Оповещение, НСтр("ru='Переход к истории налогообложения возможен только после записи.
							 |Записать?'"), СписокКнопок);
		Возврат;
	КонецЕсли;

	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаСписка", Новый Структура("Организация",
			Объект.Ссылка));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрПечатнойФормыСчетНаОплату(Команда)

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.Организации", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка), ЭтотОбъект, Новый Структура);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;

	КонецЕсли;

	ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)

	ОчиститьСообщения();

	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда

		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлЛоготип);

	Иначе

		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "АдресЛоготипа");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)

	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";

КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)

	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;

	КонецЕсли;

	ДобавитьИзображениеФаксимилеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)

	ОчиститьСообщения();

	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда

		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлФаксимильнаяПечать);

	Иначе

		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "АдресЛоготипа");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)

	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";

КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)

	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)

	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Поле ""Код инспекции"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодНалоговогоОрганаПолучателя;
		Возврат;
	КонецЕсли;

	ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКоду(Команда)

	Если Не ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Поле ""Код органа ПФР"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаПФР;
		Возврат;
	КонецЕсли;

	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКоду(Команда)

	Если Не ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Поле ""Код органа ФСС"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаФСС;
		Возврат;
	КонецЕсли;

	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();

КонецПроцедуры

&НаКлиенте
Процедура ПримененияПатентов(Команда)
	ОткрытьФорму("РегистрСведений.ПримененияПатенты.ФормаСписка", Новый Структура("Отбор",
		Новый Структура("Организация", Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПатент(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	ОткрытьФорму("Справочник.Патенты.ФормаСписка", ПараметрыФормы, , УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НовыйТарифСтраховыхВзносов(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЕстьСобственныеДанныеЗаполнения", Истина);

	СобственныеДанныеЗаполнения = Новый Структура;
	СобственныеДанныеЗаполнения.Вставить("Организация", Объект.Ссылка);
	СобственныеДанныеЗаполнения.Вставить("Период", НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса()));
	ПараметрыФормы.Вставить("СобственныеДанныеЗаполнения", СобственныеДанныеЗаполнения);

	ОткрытьФорму("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаЗаписи", ПараметрыФормы, ,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЕНВД(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОткрытьФорму("Справочник.ВидыДеятельностиЕНВД.ФормаСписка", Новый Структура("Отбор", Новый Структура("Владелец",
		Объект.Ссылка)));

КонецПроцедуры

&НаКлиенте
Процедура ПримененияЕНВД(Команда)
	ОткрытьФорму("РегистрСведений.ПримененияЕНВД.ФормаСписка", Новый Структура("Отбор", Новый Структура("Организация",
		Объект.Ссылка)));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьРеквизитФормыКлассификаторОПФ()
	
	Если ЗначениеЗаполнено(КлассификаторОПФ) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОрганизационноПравовыхФорм = РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм();
	КлассификаторОПФ.Загрузить(ТаблицаОрганизационноПравовыхФорм);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформациюПослеВыбораСервер()
	КонтактнаяИнформацияУНФ.ОбновитьЭлементыКонтактнойИнформации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюНаименований()
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущееНаименованиеСокращенное", Объект.Наименование);
	ПараметрыФормы.Вставить("ТекущееНаименованиеПолное",      Объект.НаименованиеПолное);
	ПараметрыФормы.Вставить("ИсторияНаименований",            Объект.ИсторияНаименований);
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",                   Объект.Наименование);
	ПараметрыФормы.Вставить("ЮридическоеФизическоеЛицо",      Объект.ЮридическоеФизическоеЛицо);
	
	ОткрытьФорму("Справочник.Организации.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованиеПослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;

	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияНаименований.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияНаименований.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	АктуальнаяЗапись = НаборЗаписей[НаборЗаписей.Количество()-1];
	Объект.Наименование 		= АктуальнаяЗапись.Представление;
	Объект.НаименованиеПолное   = АктуальнаяЗапись.НаименованиеПолное;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0
		И НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	ПроверитьЗаполнениеЭлемента(Элементы.НаименованиеПолное.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКПП.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
	
	СформироватьПредставлениеПроверкиКПП(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);

	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элементы.КПП.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	ЭтоЮридическоеЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	// Установим видимость элементов формы в зависимости от вида организации
	Если ЭтоЮридическоеЛицо Тогда

		Элементы.ГруппаФИО.Видимость							= Ложь;
		Элементы.КПП.Видимость									= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Ложь;
		Элементы.ГруппаДанныеПФР_ИП.Видимость					= Ложь;
		Элементы.ГруппаФСС.Видимость							= Истина;
		Элементы.ГруппаИмеютсяСотрудники.Видимость				= Ложь;
		Элементы.РегистрационныйНомерПФР.Видимость				= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Ложь;
		Элементы.ГруппаДокументУдостоверяющийЛичность.Видимость	= Ложь;
		Элементы.Гражданство.Видимость							= Ложь;
		Элементы.Пол.Видимость									= Ложь;
		Элементы.ДатаРождения.Видимость							= Ложь;

		Элементы.ИНН.ПодсказкаВвода			= НСтр("ru = '10 цифр'");
		Элементы.ИНН.ОграничениеТипа		= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		Элементы.ОГРН.Заголовок				= НСтр("ru = 'ОГРН'");
		Элементы.ОГРН.Подсказка				= НСтр(
			"ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.ОГРН.ПодсказкаВвода		= НСтр("ru = '13 цифр'");
		Элементы.ОГРН.ОграничениеТипа		= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(13));
		Элементы.КодПоОКПО.ПодсказкаВвода	= НСтр("ru = '8 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8));

		Элементы.Налоговая.Видимость				= Истина; //для прослеживаемости
		Элементы.ГруппаКодыРосстатаКоды.Видимость	= Ложь;
		Элементы.ГруппаПФР.Видимость				= Ложь;
		Элементы.ГруппаФСС.Видимость				= Ложь;
		Элементы.ПлательщикЕНВДГруппа.Видимость		= Ложь;
		Элементы.ИспользуетсяОтчетность.Видимость	= Ложь;
		Элементы.ПлательщикУСНГруппа.Видимость		= Форма.КлючСистемыНалогообложения.ПлательщикУСН;
		Элементы.ГруппаПатент.Видимость 			= Ложь;
		Элементы.ПрименяетсяПатентГруппа.Видимость 	= Ложь;
		Элементы.ПлательщикТорговыйСборГруппа.Видимость = Ложь;
		Элементы.ГруппаТорговыйСборИстория.Видимость= Ложь;
		Элементы.ПродажиСлабогоАлкоголяГруппа.Видимость= Ложь;
		Элементы.ПострадавшаяИзРеестраМСП.Видимость = Ложь;
		Элементы.ПоддержкаИП.Видимость = Ложь;
		Объект.ИспользуетсяОтчетность = Ложь;

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН", "Доступность",
			Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ЦифровойИндексОбособленногоПодразделения", "Видимость", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));

	Иначе

		Элементы.ГруппаФИО.Видимость							= Истина;
		Элементы.КПП.Видимость									= Ложь;
		Элементы.СвидетельствоСерияНомер.Видимость				= Истина;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Истина;
		Элементы.ГруппаДанныеПФР_ИП.Видимость					= Истина;
		Элементы.ГруппаФСС.Видимость							= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.РегистрационныйНомерПФР.Видимость				= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.ГруппаИмеютсяСотрудники.Видимость				= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Истина;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Истина;
		Элементы.ГруппаДокументУдостоверяющийЛичность.Видимость	= Истина;
		Элементы.Гражданство.Видимость							= Истина;
		Элементы.Пол.Видимость									= Истина;
		Элементы.ДатаРождения.Видимость							= Истина;

		Элементы.ИНН.ПодсказкаВвода			= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа		= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
		Элементы.ОГРН.Заголовок				= НСтр("ru = 'ОГРН ИП'");
		Элементы.ОГРН.Подсказка 			= НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
												   |указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		Элементы.ОГРН.ПодсказкаВвода		= НСтр("ru = '15 цифр'");
		Элементы.ОГРН.ОграничениеТипа		= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
		Элементы.КодПоОКПО.ПодсказкаВвода	= НСтр("ru = '10 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));

		Элементы.Налоговая.Видимость				= Истина;
		Элементы.ГруппаКодыРосстатаКоды.Видимость	= Истина;
		Элементы.ГруппаПФР.Видимость				= Истина;
		Элементы.ГруппаПатент.Видимость 			= Истина;
		Элементы.ГруппаФСС.Видимость				= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.ПлательщикУСНГруппа.Видимость		= Форма.КлючСистемыНалогообложения.ПлательщикУСН;
		Элементы.ПлательщикЕНВДГруппа.Видимость		= Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
		Элементы.ИспользуетсяОтчетность.Видимость	= Форма.КлючСистемыНалогообложения.ПлательщикЕНВД
			Или Форма.КлючСистемыНалогообложения.ПлательщикУСН Или Форма.КлючСистемыНалогообложения.ПрименяетсяПатент;
		Элементы.ПрименяетсяПатент.Видимость 		= Форма.КлючСистемыНалогообложения.СистемаНалогообложения
			<> ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
		Элементы.ПрименяетсяПатентГруппа.Видимость	= Форма.КлючСистемыНалогообложения.ПрименяетсяПатент;
		Элементы.ГруппаТорговыйСборИстория.Видимость = Истина;
		Элементы.ПлательщикТорговыйСборГруппа.Видимость= Форма.КлючСистемыНалогообложения.ПлательщикТорговыйСбор;
		Элементы.ПродажиСлабогоАлкоголяГруппа.Видимость= Истина;

	КонецЕсли;
	Элементы.ПлательщикЕНВД.Видимость = Форма.КлючСистемыНалогообложения.СистемаНалогообложения
		<> ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
	ЭтаОрганизацияЯвляетсяГоловной = ОрганизацияЯвляетсяГоловной(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация", "Видимость",
		ЭтоЮридическоеЛицо И Не ЭтаОрганизацияЯвляетсяГоловной);
	
	// Установим видимость элементов формы в зависимости от применяемых схем налогообложения
	Элементы.ПримененияЕНВД.Видимость = Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
	Элементы.ПримененияПатентов.Видимость = Форма.КлючСистемыНалогообложения.ПрименяетсяПатент;
	Элементы.ГруппаВидУчетаСтраховыхВзносов.Видимость =  Форма.КлючСистемыНалогообложения.ПлательщикУСН
		И Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
	
	// Управление формированием наименования плательщика в бюджет
	Элементы.НаименованиеПлательщикаПриПеречисленииНалогов.Доступность = Форма.ФормироватьНаименованиеПлательщикаАвтоматически
		= 1;
	
	// Заполнение по ЕГР
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость			= Не ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ФормаЗаполнитьРеквизитыПоДаннымЕГР.Видимость	= ЗначениеЗаполнено(Объект.Ссылка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокРежимовНалогообложения(Форма, ПоказыватьНастройкиЕНВД)
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Элементы.СистемаНалогообложения.СписокВыбора.Очистить();
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить(0, НСтр("ru = 'Общая'"));
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить(1, НСтр("ru = 'Упрощенная'")); 
	Если ПоказыватьНастройкиЕНВД Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить(2, НСтр("ru = 'Только ЕНВД'"));  
	КонецЕсли;
	
	Если Не (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")) Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить(3, НСтр("ru = 'Только патент'"));
	Иначе
		Если Форма.КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
			"Перечисление.СистемыНалогообложения.ОсобыйПорядок") И Форма.КлючСистемыНалогообложения.ПрименяетсяПатент Тогда
			Форма.КлючСистемыНалогообложения.СистемаНалогообложения = ПредопределенноеЗначение(
				"Перечисление.СистемыНалогообложения.Общая");
			Форма.СистемаНалогообложенияПредставление = 0;
		КонецЕсли;
		Форма.КлючСистемыНалогообложения.ПрименяетсяПатент = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтметитьОшибки(ПереченьОшибок)

	ЦветПодсветки = ЦветТекстаНекорректногоЗаполнения;

	ОшибкаГруппаЮридическиеДанные      = Ложь;
	ОшибкаГруппаПенсионныйФонд         = Ложь;
	ОшибкаГруппаНастройкаЛоготипа      = Ложь;
	ОшибкаГруппаОсновнаяКасса          = Ложь;
	ОшибкаГруппаНалоговая              = Ложь;
	ОшибкаГруппаКодыРосстата           = Ложь;
	ОшибкаГруппаФСС                    = Ложь;
	ОшибкаГруппаАдресаТелефоны         = Ложь;
	ОшибкаГруппаОсновнойБанковскийСчет = Ложь;

	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Фамилия") <> Неопределено Тогда
		Элементы.Фамилия.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Фамилия";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Имя") <> Неопределено Тогда
		Элементы.Имя.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =  "Имя";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Отчество") <> Неопределено Тогда
		Элементы.Отчество.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Отчество";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.НаименованиеПолное") <> Неопределено Тогда
		Элементы.НаименованиеПолное.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НаименованиеПолное";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ФизическоеЛицо.Пол") <> Неопределено Тогда
		Элементы.Пол.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Пол";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ФизическоеЛицо.ДатаРождения") <> Неопределено Тогда
		Элементы.ДатаРождения.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ДатаРождения";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.ИНН") <> Неопределено Тогда
		Элементы.ИНН.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ИНН";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.ОГРН") <> Неопределено Тогда
		Элементы.ОГРН.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ОГРН";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерПФР_ИП") <> Неопределено Тогда
		Элементы.РегистрационныйНомерПФР_ИП.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерПФР_ИП";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.Наименование") <> Неопределено Тогда
		Элементы.Наименование.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Наименование";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КПП") <> Неопределено Тогда
		Элементы.КПП.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КПП";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодПоОКПО") <> Неопределено Тогда
		Элементы.КодПоОКПО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодПоОКПО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.НаименованиеПлательщикаПриПеречисленииНалогов") <> Неопределено Тогда
		Элементы.НаименованиеПлательщикаПриПеречисленииНалогов.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНастройкаЛоготипа = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НаименованиеПлательщикаПриПеречисленииНалогов";
		СтрокаОписанияОшибки.ИмяГруппы = "ОсновнойБанковскийСчет";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КассаПоУмолчанию") <> Неопределено Тогда
		Элементы.КассаПоУмолчанию.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаОсновнаяКасса = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КассаПоУмолчанию";
		СтрокаОписанияОшибки.ИмяГруппы = "ОсновнаяКасса";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодПоОКАТО") <> Неопределено Тогда
		Элементы.КодОКАТО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКАТО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодПоОКТМО") <> Неопределено Тогда
		Элементы.КодПоОКТМО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодПоОКТМО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодНалоговогоОрганаПолучателя") <> Неопределено Тогда
		Элементы.КодНалоговогоОрганаПолучателя.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодНалоговогоОрганаПолучателя";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ПлатежныеРеквизитыФНСПредставление") <> Неопределено Тогда
		Элементы.ПлатежныеРеквизитыФНСПредставление.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ПлатежныеРеквизитыФНСПредставление";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодОКОПФ") <> Неопределено Тогда
		Элементы.КодОКОПФ.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКОПФ";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодОКФС") <> Неопределено Тогда
		Элементы.КодОКФС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКФС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодОКВЭД") <> Неопределено Тогда
		Элементы.КодОКВЭД.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКВЭД";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.СтраховойНомерПФР") <> Неопределено Тогда
		Элементы.СтраховойНомерПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "СтраховойНомерПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерПФР") <> Неопределено Тогда
		Элементы.РегистрационныйНомерПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодОрганаПФР") <> Неопределено Тогда
		Элементы.КодОрганаПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОрганаПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.ДатаРегистрации") <> Неопределено Тогда
		Элементы.ДатаРегистрации.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ДатаРегистрации";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;

	Если ПереченьОшибок.Получить("КлючТарифаСтраховыхВзносов.ВидТарифа") <> Неопределено Тогда
		Элементы.ВидТарифа.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидТарифа";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.ТарифНаТравматизм") <> Неопределено Тогда
		Элементы.ТарифНаТравматизм.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ТарифНаТравматизм";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.КодОрганаФСС") <> Неопределено Тогда
		Элементы.КодОрганаФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОрганаФСС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерФСС") <> Неопределено Тогда
		Элементы.РегистрационныйНомерФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерФСС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ПредставлениеКИ_0") <> Неопределено Тогда
		НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидКИ_0", "ЦветТекста",
				ЦветПодсветки);
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_0";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";

	КонецЕсли;

	Если ПереченьОшибок.Получить("ПредставлениеКИ_2") <> Неопределено Тогда
		НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидКИ_2", "ЦветТекста",
				ЦветПодсветки);
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_2";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
	КонецЕсли;

	Если ПереченьОшибок.Получить("ПредставлениеКИ_1") <> Неопределено Тогда
		НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидКИ_1", "ЦветТекста",
				ЦветПодсветки);
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_1";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
	КонецЕсли;

	Если ПереченьОшибок.Получить("Объект.БанковскийСчетПоУмолчанию") <> Неопределено Тогда
		Элементы.НомерСчета.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаОсновнойБанковскийСчет = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НомерСчета";
		СтрокаОписанияОшибки.ИмяГруппы = "ОсновнойБанковскийСчет";
	КонецЕсли;

	Если ОшибкаГруппаЮридическиеДанные Тогда
		Элементы.ЮридическиеДанные.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаНастройкаЛоготипа Тогда
		Элементы.ОсновнойБанковскийСчет.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаПенсионныйФонд Тогда
		Элементы.ГруппаПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаОсновнаяКасса Тогда
		Элементы.ОсновнаяКасса.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаНалоговая Тогда
		Элементы.Налоговая.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаКодыРосстата Тогда
		Элементы.ГруппаКодыРосстатаКоды.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаФСС Тогда
		Элементы.ГруппаФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаАдресаТелефоны Тогда
		Элементы.КонтактнаяИнформация.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

	Если ОшибкаГруппаОсновнойБанковскийСчет Тогда
		Элементы.ОсновнойБанковскийСчет.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЭлемента(ИмяЭлемента)
	Если РежимИсправленияОшибок Тогда
		ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента)

	СтрокиОшибкиЗаполнения = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяПоля", ИмяЭлемента));
	Если СтрокиОшибкиЗаполнения.Количество() > 0 Тогда
		Строка = СтрокиОшибкиЗаполнения[0];
		ПроверкаВыполненаУспешно = Ложь;
		Если ИмяЭлемента = "Фамилия" Или ИмяЭлемента = "Имя" Или ИмяЭлемента = "Отчество" Тогда
			Если Не ПустаяСтрока(ФИОФизическихЛиц[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "НаименованиеПолное" Или ИмяЭлемента = "НаименованиеПлательщикаПриПеречисленииНалогов"
			Или ИмяЭлемента = "КодПоОКАТО" Или ИмяЭлемента = "КодПоОКТМО" Или ИмяЭлемента = "КодНалоговогоОрганаПолучателя"
			Или ИмяЭлемента = "КодОКОПФ" Или ИмяЭлемента = "КодОКФС" Или ИмяЭлемента = "КодОрганаПФР" Или ИмяЭлемента
			= "Наименование" Тогда
			Если Не ПустаяСтрока(Объект[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "Пол" Или ИмяЭлемента = "ДатаРождения" Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ИНН" Тогда
			Если Не ПустаяСтрока(Объект.ИНН) И РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СокрЛП(
				Объект.ИНН), Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
				"") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ОГРН" Тогда
			Если Не ПустаяСтрока(Объект.ОГРН) И РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(
				СокрЛП(Объект.ОГРН), Объект.ЮридическоеФизическоеЛицо
				= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерПФР_ИП" Тогда
			Если СтрДлина(СокрЛП(Объект.РегистрационныйНомерПФР_ИП)) = 14 Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КПП" Тогда
			Если Не ПустаяСтрока(Объект.КПП) И РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(СокрЛП(
				Объект.КПП), "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КодПоОКПО" Тогда
			Если Не ПустаяСтрока(Объект.КодПоОКПО)
				И РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(СокрЛП(Объект.КодПоОКПО),
				Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КассаПоУмолчанию" Или ИмяЭлемента = "КодОрганаФСС" Или ИмяЭлемента = "ТарифНаТравматизм"
			Или ИмяЭлемента = "ДатаРегистрации" Тогда
			Если ЗначениеЗаполнено(Объект[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ПлатежныеРеквизитыФНСПредставление" Тогда
			ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(
				Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОрганаПолучателя);
			Если ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КодОКВЭД" Тогда
			Если Не ПустаяСтрока(Объект.КодОКВЭД) И ПроверкаДанныхКлиентСервер.КодОКВЭДСоответствуетТребованиям(
				Объект.КодОКВЭД) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "СтраховойНомерПФР" Тогда
			Если Не ПустаяСтрока(Объект.СтраховойНомерПФР)
				И РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(
				Объект.СтраховойНомерПФР), "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерПФР" Тогда
			Если Не ПустаяСтрока(Объект.РегистрационныйНомерПФР)
				И ПроверкаДанныхКлиентСервер.РегНомерПФРСоответствуетТребованиям(СокрЛП(
				Объект.РегистрационныйНомерПФР)) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидТарифа" Тогда
			Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерФСС" Тогда
			Если СтрДлина(СокрЛП(Объект.РегистрационныйНомерФСС)) = 10 Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_0" Тогда
			Строки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
			Если Строки.Количество() > 0 И Не ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_1" Тогда
			Строки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
			Если Строки.Количество() > 0 И Не ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_2" Тогда
			Строки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
			Если Строки.Количество() > 0 И Не ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "НомерСчета" Тогда
			Если Не ПустаяСтрока(ОсновнойСчет_Номер) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ПроверкаВыполненаУспешно Тогда
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекста;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекста;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Истина;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				СтрокиГруппы = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяГруппы, ЗаполненоКорректно",
					Строка.ИмяГруппы, Ложь));
				Если СтрокиГруппы.Количество() = 0 Тогда
					Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = Новый Цвет;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекстаНекорректногоЗаполнения;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Ложь;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНабранныйТекстВСпискеВыбора(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	НабранныйТекст = СокрЛП(Текст);
	Если ПустаяСтрока(НабранныйТекст) Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Позиция = СтрНайти(ЭлементСписка.Представление, НабранныйТекст);
		Если Позиция > 0 Тогда
			Текст1 = Лев(ЭлементСписка.Представление, Позиция - 1);
			ДлинаНабранногоТекста = СтрДлина(НабранныйТекст);
			Текст2 = Сред(ЭлементСписка.Представление, Позиция, ДлинаНабранногоТекста);
			Текст3 = Сред(ЭлементСписка.Представление, Позиция + ДлинаНабранногоТекста);
			ПредставлениеПункта = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр(
				"ru = '%1<span style=""color:ЗеленыйТекстСтрок;font:ВажнаяНадписьШрифт"">%2</span>%3'"), Текст1,
				Текст2, Текст3);
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ПредставлениеПункта);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьНастройкиПатента()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Патенты.Ссылка) КАК КоличествоПатентов
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Патенты.Наименование КАК НазваниеПатента
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";

	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);

	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();

	Если Не Выборка.Следующий() Или Выборка.КоличествоПатентов = 0 Тогда
		Элементы.НастроитьПатент.Заголовок = НСтр("ru='<<Указать патент>>'");
	ИначеЕсли Выборка.КоличествоПатентов = 1 Тогда
		ВыборкаИмени = Результат[1].Выбрать();
		ВыборкаИмени.Следующий();
		Элементы.НастроитьПатент.Заголовок = ВыборкаИмени.НазваниеПатента;
	Иначе
		Элементы.НастроитьПатент.Заголовок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр(
			"ru = ';Заполнен %1 патент;;Заполнено %1 патента;Заполнено %1 патентов;Заполнено %1 патента'"),
			Выборка.КоличествоПатентов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуПоТарифу()

	СрезПоТарифу = РегистрыСведений.ТарифыСтраховыхВзносов.ПолучитьПоследнее(ТекущаяДатаСеанса(),
		Новый Структура("ВидТарифа", КлючТарифаСтраховыхВзносов.ВидТарифа));
	Элементы.ДекорацияОписаниеТарифа.Заголовок = СтрШаблон(
		НСтр("ru = 'Действует с %5 г.(ПФР - %1%4, ФСС - %2%4, ФФОМС - %3%4)'"), СрезПоТарифу.ПФР, СрезПоТарифу.ФСС,
		СрезПоТарифу.ФФОМС, "%", Формат(КлючТарифаСтраховыхВзносов.Период, "ДЛФ=D;"));

КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПлатежныхРеквизитов(Вид, Код, ПлатежныеРеквизитыПредставление)

	Если ЗначениеЗаполнено(Код) Тогда
		ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	Иначе
		ГосударственныйОрган = Неопределено;
	КонецЕсли;

	ПлатежныеРеквизитыПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(
		ГосударственныйОрган);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеПлательщикаПоУмолчанию(Форма)

	Объект = Форма.Объект;
	
	// Для организации заполняем из полного наименования
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
		"Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Возврат Объект.НаименованиеПолное;
	КонецЕсли;
	
	// Для ИП:
	// п.4 Приложения 1 к Приказу Минфина 107н:
	// Фамилия имя отчество "(ИП)" "//"Адрес регистрации"//"
	Шаблон = "%1 (ИП) //%2//";

	ФИО = Форма.ФИОФизическихЛиц.Фамилия + ?(ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя), "", " "
		+ Форма.ФИОФизическихЛиц.Имя) + ?(ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество), "", " "
		+ Форма.ФИОФизическихЛиц.Отчество);
	АдресРегистрации = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));

	Возврат СтрШаблон(Шаблон, ФИО, АдресРегистрации);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СписокВыбора = Элементы.Наименование.СписокВыбора;
	СписокВыбора.Очистить();

	Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда

		Форма.ОрганизационноПравоваяФорма = ВыделитьИзНаименованияОПФ(Форма.КлассификаторОПФ, Объект.НаименованиеПолное);

		СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);

		Если Не ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			СписокВыбора.Вставить(0, Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " "
				+ Форма.ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.КраткаяФорма + " "
				+ Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		КонецЕсли;

	КонецЕсли;

	Форма.Элементы.Наименование.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, Знач НаименованиеОрганизации)

	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);

	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если СледуетВыделитьКомпонентыНаименования(Слово, ДанныеОПФ) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				НаименованиеБезОПФ = СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, ""));
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(НаименованиеБезОПФ);
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СледуетВыделитьКомпонентыНаименования(Слово, ДанныеОПФ)

	Если ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.ПолнаяФорма) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция КодРегионаПоАдресу(Адрес)

	Регион = РаботаСАдресами.РегионАдресаКонтактнойИнформации(Адрес);
	Если Не ЗначениеЗаполнено(Регион) Тогда
		Возврат "";
	КонецЕсли;

	КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Регион);
	Если Не ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Возврат КодРегиона;

КонецФункции

&НаСервере
Процедура КодНалоговогоОрганаПолучателяПриИзмененииНаСервере()

	Регистрация = НайтиРегистрациюВИФНС(Объект.КодНалоговогоОрганаПолучателя, Объект.Ссылка);
	Если ЗначениеЗаполнено(Регистрация) Тогда
		Объект.РегистрацияВНалоговомОргане = Регистрация;
		ЗначениеВРеквизитФормы(Регистрация.ПолучитьОбъект(), "РегистрацияВНалоговомОргане");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиРегистрациюВИФНС(КодИФНС, Организация)

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Код = &Код
	|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
	|	И РегистрацииВНалоговомОргане.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ФизическоеЛицоИзПодписи(Подпись)

	Возврат ПодписьДокументовУНФ.ФизическоеЛицоИзПодписи(Подпись);

КонецФункции

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()

	УстановитьИННОбособленногоПодразделения(Объект);

КонецПроцедуры

&НаСервере
Процедура ГоловныеОрганизацииОбособленногоПодразделения()

	СписокВыбораОрганизаций = Элементы.ГоловнаяОрганизация.СписокВыбора;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСсылка", Объект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = Значение(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И Организации.ГоловнаяОрганизация = Значение(Справочник.Организации.ПустаяСсылка)
	|	И Организации.Ссылка <> &ТекущаяСсылка
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СписокВыбораОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияЯвляетсяГоловной(ОрганизацияСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", ОрганизацияСсылка);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИСТИНА
				   |ИЗ
				   |	Справочник.Организации КАК СпрОрганизации
				   |ГДЕ
				   |	СпрОрганизации.ГоловнаяОрганизация = &ОрганизацияСсылка";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИННОбособленногоПодразделения(Объект)

	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда

		ИННГоловнойОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнаяОрганизация, "ИНН");
		Если Объект.ИНН <> ИННГоловнойОрганизации Тогда

			Объект.ИНН = ИННГоловнойОрганизации;

		КонецЕсли;

	Иначе

		Объект.ИНН = "";

	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	Если 1 = 0 Тогда
		УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#Область БанковскийСчетПоУмолчанию

&НаСервере
Процедура ПрочитатьБанковскийСчетПоУмолчанию(БанковскийСчетПоУмолчанию)

	Если ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчетПоУмолчанию, "Банк, НомерСчета");
		ОсновнойСчет_Банк = ЗначенияРеквизитов.Банк;
		ОсновнойСчет_Номер = ЗначенияРеквизитов.НомерСчета;
		ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ЗначенияРеквизитов.Банк);
		ИзменилиБанковскийСчет = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПоУмолчанию(ТекущийОбъект)

	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Или ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОсновнойСчет_Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ОсновнойСчет_Банк = РаботаСБанкамиПереопределяемый.БанкИзКлассификатора(ОсновнойСчет_Банк);
	КонецЕсли;

	Если ТекущийОбъект.ЭтоНовый() Тогда
	// Если организация новая, банковский счет надо создавать новый
		НадоСоздаватьНовый = Истина;
	Иначе
	// Для существующей организации, надо проверять наличие банковского счета с такими же ключевыми полями

		Запрос = Новый Запрос;
		Запрос.Текст = "
					   |ВЫБРАТЬ ПЕРВЫЕ 1
					   |	БанковскиеСчета.Ссылка
					   |ИЗ
					   |	Справочник.БанковскиеСчета КАК БанковскиеСчета
					   |ГДЕ
					   |	БанковскиеСчета.Владелец = &Владелец
					   |	И БанковскиеСчета.Банк = &Банк
					   |	И БанковскиеСчета.НомерСчета = &НомерСчета";

		Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("Банк", ОсновнойСчет_Банк);
		Запрос.УстановитьПараметр("НомерСчета", ОсновнойСчет_Номер);

		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);

		Если РезультатЗапроса.Пустой() Тогда
			// Нет банковского счета с такими ключевыми полями
			Если ЗначениеЗаполнено(ТекущийОбъект.БанковскийСчетПоУмолчанию) Тогда
				// Модифицируется существующий основной счет
				НадоСоздаватьНовый = Ложь;
			Иначе
				// Создается новый
				НадоСоздаватьНовый = Истина;
			КонецЕсли;
		Иначе
			// Банковский счет есть, устанавливаем его в качестве основного
			НадоСоздаватьНовый = Ложь;

			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекущийОбъект.БанковскийСчетПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;

	КонецЕсли;

	Если НадоСоздаватьНовый Тогда
		ТекущийОбъект.БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПолучитьСсылку();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьБанковскийСчетПоУмолчанию(ТекущийОбъект)

	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Или ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	БанковскийСчетОбъект = ТекущийОбъект.БанковскийСчетПоУмолчанию.ПолучитьОбъект();

	Если БанковскийСчетОбъект = Неопределено Тогда
		
		// Создание
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(ТекущийОбъект.БанковскийСчетПоУмолчанию);
		БанковскийСчетОбъект.Заполнить(ТекущийОбъект.Ссылка);

	Иначе

		БанковскийСчетОбъект.Заблокировать();

	КонецЕсли;
	
	// Внесение изменений
	БанковскийСчетОбъект.Банк = ОсновнойСчет_Банк;
	БанковскийСчетОбъект.НомерСчета = ОсновнойСчет_Номер;
	БанковскийСчетОбъект.СформироватьНаименование();
	
	// Запись объекта
	БанковскийСчетОбъект.Записать();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

#Если Не ВебКлиент Тогда

	ТекущийТекстНомераСчета = СтрЗаменить(Текст, " ", "");

	Если ЯвляетсяБанкомРФ И ТекущийТекстНомераСчета <> Неопределено Тогда

		ДлинаСчетаРФ = БанковскиеПравилаКлиентСервер.ДлинаНомераСчета();
		КоличествоЦифрВСчете = СтрДлина(ТекущийТекстНомераСчета);

		Если ДлинаСчетаРФ <> КоличествоЦифрВСчете Тогда
			ТекстСообщения = НСтр("ru = 'Осталось ввести %1'");
			СклоняемыйТекст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							НСтр("ru = ';%1 цифру;;%1 цифры;%1 цифр;%1 цифры'"), ДлинаСчетаРФ - КоличествоЦифрВСчете);

			Элементы.НомерСчета.Подсказка = СтрШаблон(ТекстСообщения, СклоняемыйТекст);
		Иначе
			Элементы.НомерСчета.Подсказка = "";
		КонецЕсли;

	Иначе
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;

	ОсновнойСчет_Номер = ТекущийТекстНомераСчета;

#КонецЕсли

	ИзменилиБанковскийСчет = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯвляетсяБанкомРФ(Банк)

	Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
	Возврат (Страна = Справочники.СтраныМира.Россия);

КонецФункции

&НаКлиенте
Процедура УстановитьМаскуНомераСчета()

	Если ЯвляетсяБанкомРФ Тогда
		Элементы.НомерСчета.Маска = "99999999999999999999";
	Иначе
		Элементы.НомерСчета.Маска = "";
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СистемыНалогообложенияОрганизаций

&НаСервере
Процедура ПрочитатьНастройкиСистемыНалогообложения(Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СистемыНалогообложенияОрганизаций.Период,
				   |	СистемыНалогообложенияОрганизаций.Организация
				   |ИЗ
				   |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК
				   |		СистемыНалогообложенияОрганизаций";

	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "КлючСистемыНалогообложения");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.ОбъектНалогообложения) Тогда
		КлючСистемыНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
		КлючСистемыНалогообложения.СтавкаНалога           = 6;
		КлючСистемыНалогообложения.ПовышеннаяСтавкаНалога = 8;
	КонецЕсли;

	Если КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		СистемаНалогообложенияПредставление = 0;
	ИначеЕсли КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		СистемаНалогообложенияПредставление = 1;
	ИначеЕсли КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
		Если КлючСистемыНалогообложения.ПрименяетсяПатент Тогда
			СистемаНалогообложенияПредставление = 3;
		Иначе
			СистемаНалогообложенияПредставление = 2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСистемыНалогообложения(Организация)

	Если КлючСистемыНалогообложения.Организация.Пустая() Тогда
		КлючСистемыНалогообложения.Организация = Организация;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.Период) Тогда
		КлючСистемыНалогообложения.Период = '20000101';
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.СистемаНалогообложения) Тогда
		Если СистемаНалогообложенияПредставление = 0 Тогда
			КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ИначеЕсли СистемаНалогообложенияПредставление = 1 Тогда
			КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
		ИначеЕсли СистемаНалогообложенияПредставление = 2 Или СистемаНалогообложенияПредставление = 3 Тогда
			КлючСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок;
		КонецЕсли;
	КонецЕсли;

	МенеджерЗаписи = РеквизитФормыВЗначение("КлючСистемыНалогообложения");

	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияИсторииНалогообложения(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;

	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаСписка", Новый Структура("Организация",
			Объект.Ссылка));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыЗадачиНалогов()

	Если Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда

		ТекстСообщения = НСтр("ru='Включите опцию применения ЕНВД в разделе Налогообложение'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
			"КлючСистемыНалогообложения.ПлательщикЕНВД");

	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда

		ТекстСообщения = НСтр("ru='Включите использование труда наемный рабочих в разделе Налогообложение'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.ИПИспользуетТрудНаемныхРаботников");

	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН
		Или Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда

		ТекстСообщения = НСтр("ru='Включите опцию применения УСН в разделе Налогообложение'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "КлючСистемыНалогообложения.ПлательщикУСН");

	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда

		ТекстСообщения = НСтр("ru='Включите опцию применения патента в разделе Налогообложение'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
			"КлючСистемыНалогообложения.ПрименяетсяПатент");

	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда

		ТекстСообщения = НСтр("ru='Включите опцию применения торгового сбора в разделе Налогообложение'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка,
			"КлючСистемыНалогообложения.ПлательщикТорговыйСбор");

	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПлательщикЕНВД(Организация)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	СистемыНалогообложенияОрганизаций.Период,
						  |	СистемыНалогообложенияОрганизаций.Организация
						  |ИЗ
						  |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций");

	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();

		Возврат МенеджерЗаписи.ПлательщикЕНВД;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ПроверитьЧтоПересталБытьПлательщикомЕНВД(пСсылка)

	Если Не пСсылка.Пустая() Тогда
		ПересталБытьПлательщикомЕНВД = (ЭтоПлательщикЕНВД(пСсылка) И Не КлючСистемыНалогообложения.ПлательщикЕНВД);
		Если ПересталБытьПлательщикомЕНВД Тогда
			СбрасыватьФлагОПримененииЕНВДПоСкладамПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;

	Если КлючСистемыНалогообложения.ПлательщикЕНВД Тогда
		СбрасыватьФлагОПримененииЕНВДПоСкладамПослеЗаписи = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьФлагОПримененииЕНВДПоСкладамПослеЗаписи(Организация)

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПримененияЕНВД");
		ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		БлокировкаДанных.Заблокировать();

		// Выберем все склады, по которым розничная торговля облагается ЕНВД.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПримененияЕНВДСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&ТекущаяДатаСеанса, Организация = &Организация) КАК ПримененияЕНВДСрезПоследних
		|ГДЕ
		|	ПримененияЕНВДСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД";

		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		// Создадим для каждого склада запись со сброшенным флагом РозничнаяТорговляОблагаетсяЕНВД.
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			НаборЗаписей = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница);
			НаборЗаписей.Отбор.Период.Установить(НачалоМесяца(ТекущаяДатаСеанса));

			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ТекущаяДатаСеанса;
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.СтруктурнаяЕдиница;

			НоваяЗапись.РозничнаяТорговляОблагаетсяЕНВД = Ложь;

			НаборЗаписей.Записать(Истина);

		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'СброситьФлагОПримененииЕНВДПоСкладамПослеЗаписи'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПрименяемыеТарифыСтраховыхВзносов

&НаСервере
Процедура ПрочитатьНастройкиСтраховыхВзносов(Организация)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.Период,
						  |	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.Организация
						  |ИЗ
						  |	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(, Организация = &Организация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних");

	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "КлючТарифаСтраховыхВзносов");
	КонецЕсли;
	УстановитьПодсказкуПоТарифу();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСтраховыхВзносов(Организация)

	Если КлючТарифаСтраховыхВзносов.Организация.Пустая() Тогда
		КлючТарифаСтраховыхВзносов.Организация = Организация;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.Период) Тогда
		КлючТарифаСтраховыхВзносов.Период = '20000101';
	КонецЕсли;

	МенеджерЗаписи = РеквизитФормыВЗначение("КлючТарифаСтраховыхВзносов");
	МенеджерЗаписи.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияИсторииСтраховыхВзносов(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;

	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаСписка");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФизЛицо

&НаСервере
Процедура ПрочитатьФизЛицо(ФизЛицо)

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;

	ЗначениеВРеквизитФормы(ФизЛицо.ПолучитьОбъект(), "ФизическоеЛицо");

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период КАК Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";

	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ФИОФизическихЛиц");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Период КАК Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			ФизЛицо = &ФизЛицо
	|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних";

	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизЛицо(ТекущийОбъект)

	Если Объект.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.Период) Тогда
		ФИОФизическихЛиц.Период = '19800101';
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.ФизЛицо) Тогда
		ФИОФизическихЛиц.ФизЛицо = ТекущийОбъект.ФизическоеЛицо;
	КонецЕсли;
	МенеджерЗаписи = РеквизитФормыВЗначение("ФИОФизическихЛиц");
	МенеджерЗаписи.Записать();

	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.Период) Тогда
		ДокументыФизическихЛиц.Период = '19800101';
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.Физлицо) Тогда
		ДокументыФизическихЛиц.Физлицо = ТекущийОбъект.ФизическоеЛицо;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента) Тогда
		ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	КонецЕсли;
	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	МенеджерЗаписи = РеквизитФормыВЗначение("ДокументыФизическихЛиц");
	МенеджерЗаписи.Записать();

	ФизическоеЛицо.Наименование = ФИОФизическихЛиц.Фамилия + ?(ПустаяСтрока(ФИОФизическихЛиц.Имя), "", " "
		+ ФИОФизическихЛиц.Имя) + ?(ПустаяСтрока(ФИОФизическихЛиц.Отчество), "", " " + ФИОФизическихЛиц.Отчество);

	ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	Если ФизЛицоОбъект.Ссылка.Пустая() Тогда
		ФизЛицоОбъект.УстановитьСсылкуНового(ТекущийОбъект.ФизическоеЛицо);
	КонецЕсли;
	ФизЛицоОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицоПриРедактировании()

	Если Не Параметры.Ключ.Пустая() И Не ФизическоеЛицоЗаблокировано Тогда
		Если Не ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере() Тогда
			ПоказатьПредупреждение( , НСтр(
				"ru='Не удается внести изменения в личные данные физического лица. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьФизЛицо(Объект.ФизическоеЛицо);
			Возврат Ложь;
		Иначе
			ФизическоеЛицоЗаблокировано = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере()

	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, ФизическоеЛицо.ВерсияДанных,
			УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

&НаКлиенте
Процедура ПроверитьОднофамильцев(ОповещениеЗавершения = Неопределено)

	Однофамильцы = ПодобратьСписокФизЛицСервер();

	Если Однофамильцы.Количество() > 0 Тогда

		ПараметрыОткрытия = Новый Структура("ЗаголовокФормы,ТекстИнформационнойНадписи,ФизическиеЛица");

		Если Однофамильцы.Количество() = 1 Тогда
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = НСтр(
			"ru = 'Если хотите указать в качестве индивидуального предпринимателя это физическое лицо, нажмите ""Да, это тот, кто мне нужен"".
			|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		Иначе
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = НСтр(
			"ru = 'Если хотите указать в качестве индивидуального предпринимателя одно из приведенных в списке физических лиц, выберите его и нажмите ""Отмеченный человек тот, кто мне нужен"".
			|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		КонецЕсли;

		ПараметрыОткрытия.ФизическиеЛица = Однофамильцы;

		Оповещение = Новый ОписаниеОповещения("ПроверитьОднофамильцевЗавершение", ЭтотОбъект, ОповещениеЗавершения);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, , , , ,
			Оповещение);

	Иначе

		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднофамильцевЗавершение(ВыбранноеФизлицоСсылка, ОповещениеЗавершения) Экспорт

	Если ВыбранноеФизлицоСсылка <> Неопределено Тогда
		Объект.ФизическоеЛицо = ВыбранноеФизлицоСсылка;
		ПрочитатьФизЛицо(ВыбранноеФизлицоСсылка);
	КонецЕсли;

	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПодобратьСписокФизЛицСервер()

	Возврат Справочники.ФизическиеЛица.ПодобратьСписокФизЛиц(
		ФИОФизическихЛиц.Фамилия, ФИОФизическихЛиц.Имя, ФИОФизическихЛиц.Отчество, Объект.ФизическоеЛицо);

КонецФункции

&НаКлиенте
Процедура ФизическоеЛицоФИОПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиРегламентированныхДанных

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьВсеПроверки(Форма)

	СформироватьПредставлениеПроверкиИНН(Форма);
	СформироватьПредставлениеПроверкиКПП(Форма);
	СформироватьПредставлениеПроверкиОКПО(Форма);
	СформироватьПредставлениеПроверкиОГРН(Форма);
	СформироватьПредставлениеПроверкиОКВЭД(Форма);
	СформироватьПредставлениеПроверкиСтраховогоНомераПФР(Форма);

	СформироватьПредставлениеПроверкиДанных(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиДанных(Форма)

	КомпонентыФС = Новый Массив;

	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиИНН) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиИНН);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;

	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиКПП) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиКПП);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;

	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиОКПО) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиОКПО);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;

	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиОГРН) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиОГРН);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	Если КомпонентыФС.Количество() > 0 Тогда
		КомпонентыФС.Удалить(КомпонентыФС.ВГраница());
	КонецЕсли;

	Форма.ПредставлениеПроверкиДанных = Новый ФорматированнаяСтрока(КомпонентыФС);
	Форма.Элементы.ПредставлениеПроверкиДанных.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных);
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных) Тогда
		Форма.Элементы.ПредставлениеПроверкиДанных.Высота = СтрЧислоСтрок(Форма.ПредставлениеПроверкиДанных);
	КонецЕсли;

	Форма.Элементы.ПредставлениеПроверкиСтраховогоНомераПФР.Видимость = Не ПустаяСтрока(
		Форма.ПредставлениеПроверкиСтраховогоНомераПФР);
	Форма.Элементы.ПредставлениеПроверкиОКВЭД.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиОКВЭД);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиИНН(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо(
			Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиИНН = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиКПП(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КПП) Тогда
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиКПП = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОКПО(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КодПоОКПО) Тогда
		РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Объект.КодПоОКПО, ЭтоЮрЛицо(
			Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиОКПО = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОГРН(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.ОГРН) И Не Объект.ИностраннаяОрганизация Тогда
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(Объект.ОГРН, ЭтоЮрЛицо(
			Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиОГРН = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОКВЭД(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КодОКВЭД) Тогда
		Если Не ПроверкаДанныхКлиентСервер.КодОКВЭДСоответствуетТребованиям(СокрЛП(Объект.КодОКВЭД)) Тогда
			ОписаниеОшибки = НСтр("ru='Код ОКВЭД не соответствует требованиям'");
		КонецЕсли;
	КонецЕсли;
	Форма.ПредставлениеПроверкиОКВЭД = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиСтраховогоНомераПФР(Форма)

	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(СтрЗаменить(Объект.СтраховойНомерПФР, "-", "")) Тогда
		РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(
			Объект.СтраховойНомерПФР), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиСтраховогоНомераПФР = Новый ФорматированнаяСтрока(ОписаниеОшибки, ,
		Форма.ЦветТекстаНекорректногоЗаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ЮрФизЛицо)

	Возврат ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");

КонецФункции

#КонецОбласти

#Область ФаксимилеИЛоготип

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)

	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;

	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);

КонецФункции

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)

	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()

	ОчиститьСообщения();

	ИмяРеквизитаОбъекта = "";

	Если РаботаСЛоготипом Тогда

		ИмяРеквизитаОбъекта = "ФайлЛоготип";

	ИначеЕсли РаботаСФаксимиле Тогда

		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";

	КонецЕсли;

	Если Не ПустаяСтрока(ИмяРеквизитаОбъекта) И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда

		ДанныеФайла = ПолучитьДанныеФайла(Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);

	Иначе

		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "АдресКартинки");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;

	КонецЕсли;

	ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Возврат;

	КонецЕсли;

	Записать();
	ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()

	Перем ИдентификаторФайла, ИмяРеквизитаОбъекта, Фильтр;

	Если РаботаСЛоготипом Тогда

		ИмяРеквизитаОбъекта = "ФайлЛоготип";

	ИначеЕсли РаботаСФаксимиле Тогда

		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";

	КонецЕсли;

	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда

		ПросмотретьПрисоединенныйФайл();

	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ИдентификаторФайла = Новый УникальныйИдентификатор;

		Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();

		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()

	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Записать();
	ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()

	Перем ИдентификаторФайла;

	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);

	ИдентификаторФайла = Новый УникальныйИдентификатор;
	Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Записать();

	ДобавитьИзображениеФаксимилеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()

	Перем ИдентификаторФайла;

	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);

	ИдентификаторФайла = Новый УникальныйИдентификатор;
	Фильтр = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);

КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеЗаполнениеРеквизитов

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(Знач ИНН)

	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ИНН, ОписаниеОшибки);

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
	// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда

			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов организации
								|необходимо подключиться к интернет-поддержке пользователей.
								|Подключиться сейчас?'");
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения, ИНН", "ЗаполнитьРеквизитыПоИНН", ИНН);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект,
				ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Иначе
			ПоказатьПредупреждение( , ОписаниеОшибки);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииПФР()

	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда

			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ПФ РФ
								|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
								|пользователей. Данные по отделению ПФ РФ пригодятся при уплате налогов.
								|Подключиться сейчас?'");

			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииПФР");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект,
				ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Иначе
			ПоказатьПредупреждение( , ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииФСС()

	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда

			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ФСС
								|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
								|пользователей. Данные по отделению ФСС пригодятся при уплате налогов.
								|Подключиться сейчас?'");

			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииФСС");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект,
				ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Иначе
			ПоказатьПредупреждение( , ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции()

	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда

			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
								|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
								|пользователей. Данные по налоговому органу пригодятся при уплате налогов.
								|Подключиться сейчас?'");

			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект,
				ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Иначе
			ПоказатьПредупреждение( , ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ИНН, ОписаниеОшибки = "")

	Если СтрДлина(ИНН) = 12 Тогда
		ЭтоЮрЛицо = Ложь;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;

	Если ЭтоЮрЛицо Тогда
		РеквизитыОрганизации = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование       = РеквизитыОрганизации.ЕГРЮЛ.Наименование;
		Объект.НаименованиеПолное = РеквизитыОрганизации.ЕГРЮЛ.НаименованиеСокращенное;
		Объект.ИНН                = РеквизитыОрганизации.ИНН;
		Объект.КПП                = РеквизитыОрганизации.ЕГРЮЛ.КПП;
		Объект.ОГРН               = РеквизитыОрганизации.ЕГРЮЛ.РегистрационныйНомер;
		Объект.КодОКВЭД = РеквизитыОрганизации.ЕГРЮЛ.ВидДеятельности.Код;
		
		ДанныеЗаполненияКИ = Новый Структура("Представление,Комментарий,Значение");
		
		Если РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес <> Неопределено Тогда
			ДанныеЗаполненияКИ.Представление = РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес.Представление;
			ДанныеЗаполненияКИ.Комментарий = РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес.Комментарий;
			ДанныеЗаполненияКИ.Значение = РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес.КонтактнаяИнформация;
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(ЭтотОбъект, ВидКИ, ДанныеЗаполненияКИ, Истина);
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(ЭтотОбъект, ВидКИ, ДанныеЗаполненияКИ, Ложь);
		КонецЕсли;
		
		Если РеквизитыОрганизации.ЕГРЮЛ.Телефон <> Неопределено Тогда
			ДанныеЗаполненияКИ.Представление = РеквизитыОрганизации.ЕГРЮЛ.Телефон.Представление;
			ДанныеЗаполненияКИ.Комментарий = РеквизитыОрганизации.ЕГРЮЛ.Телефон.Комментарий;
			ДанныеЗаполненияКИ.Значение = РеквизитыОрганизации.ЕГРЮЛ.Телефон.КонтактнаяИнформация;
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(ЭтотОбъект, ВидКИ, ДанныеЗаполненияКИ, Истина);
		КонецЕсли;
		
		ЮридическийАдресПоИНН = РеквизитыОрганизации.ЕГРЮЛ.ЮридическийАдрес;
		ДанныеПоИННРегистрацияВНалоговомОргане = РеквизитыОрганизации.ЕГРЮЛ.РегистрацияВНалоговомОргане;
		ДанныеПоИННРегистрацияВПенсионномФонде = РеквизитыОрганизации.ЕГРЮЛ.РегистрацияВПенсионномФонде;
		ДанныеПоИННРегистрацияВФСС = РеквизитыОрганизации.ЕГРЮЛ.РегистрацияВФСС;
	Иначе
		РеквизитыПредпринимателя = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыПредпринимателя.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование			= РеквизитыПредпринимателя.Наименование;
		Объект.НаименованиеПолное	= РеквизитыПредпринимателя.НаименованиеСокращенное;
		Объект.ИНН					= РеквизитыПредпринимателя.ИНН;
		Объект.ОГРН					= РеквизитыПредпринимателя.РегистрационныйНомер;
		
		Если РеквизитыПредпринимателя.СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = "" + РеквизитыПредпринимателя.СвидетельствоОРегистрации.Серия + " "
				+ РеквизитыПредпринимателя.СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = РеквизитыПредпринимателя.СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Фамилия) Тогда
				ФИОФизическихЛиц.Фамилия = РеквизитыПредпринимателя.Фамилия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Имя) Тогда
				ФИОФизическихЛиц.Имя = РеквизитыПредпринимателя.Имя;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Отчество) Тогда
				ФИОФизическихЛиц.Отчество = РеквизитыПредпринимателя.Отчество;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Пол) Тогда
				ФизическоеЛицо.Пол = ?(РеквизитыПредпринимателя.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской,
					Перечисления.ПолФизическогоЛица.Женский);
			КонецЕсли;
		КонецЕсли;
		
		ЮридическийАдресПоИНН = Неопределено;
		ДанныеПоИННРегистрацияВНалоговомОргане = РеквизитыПредпринимателя.РегистрацияВНалоговомОргане;
		ДанныеПоИННРегистрацияВПенсионномФонде = РеквизитыПредпринимателя.РегистрацияВПенсионномФонде;
		ДанныеПоИННРегистрацияВФСС = РеквизитыПредпринимателя.РегистрацияВФСС;
	КонецЕсли;
	
	Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	// Устанавливаем сведения о налоговой инспекции
	// В том случае, если указан юридический адрес, получаем код налоговой инспекции по адресу
	// и заполняем реквизиты инспекции по коду
	// В том случае, если юридического адреса нет - заполняем данные о налоговой инспекции
	// из кода в ЕГРЮЛ/ЕГРИП
	Если ЗначениеЗаполнено(ЮридическийАдресПоИНН) Тогда
		ОписаниеОшибкиАдрес = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЮридическийАдресПоИНН.КонтактнаяИнформация, ОписаниеОшибкиАдрес);
		Если ЗначениеЗаполнено(ОписаниеОшибкиАдрес) И ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане)
			И ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане.Код) Тогда
			
			Объект.КодНалоговогоОрганаПолучателя = ДанныеПоИННРегистрацияВНалоговомОргане.Код;
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоИННРегистрацияВНалоговомОргане) Тогда
		Объект.КодНалоговогоОрганаПолучателя = ДанныеПоИННРегистрацияВНалоговомОргане.Код;
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоИННРегистрацияВПенсионномФонде) Тогда
		Объект.КодОрганаПФР = ДанныеПоИННРегистрацияВПенсионномФонде.КодОрганаПФР;
		Если ЭтоЮрЛицо Тогда
			Объект.РегистрационныйНомерПФР = ДанныеПоИННРегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		Иначе
			Объект.РегистрационныйНомерПФР_ИП = ДанныеПоИННРегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОтделенииПФР();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоИННРегистрацияВФСС) Тогда
		Объект.КодОрганаФСС = ДанныеПоИННРегистрацияВФСС.КодОрганаФСС;
		
		Объект.НаименованиеТерриториальногоОрганаФСС = ДанныеПоИННРегистрацияВФСС.НаименованиеОрганаФСС;
		Объект.РегистрационныйНомерФСС = ДанныеПоИННРегистрацияВФСС.РегистрационныйНомерФСС;
		
		ЗаполнитьСведенияОбОтделенииФСС();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Элементы.Наименование.СписокВыбора.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(ЭтотОбъект);
	ВыполнитьВсеПроверки(ЭтотОбъект);
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки = "")

	Если Не ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		Возврат;
	КонецЕсли;

	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Объект.КодОрганаПФР, 3));

	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
	КонецЕсли;

	Модифицированность = Истина;

	ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(
		РеквизитыОтделенияПФР);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки = "")

	Если Не ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		Возврат;
	КонецЕсли;
	КодПодчиненностиФСС = Объект.КодОрганаФСС + ?(Объект.ЮридическоеФизическоеЛицо
		= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, 3, 1);
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(КодПодчиненностиФСС);

	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
	КонецЕсли;

	Модифицированность = Истина;

	ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(
		РеквизитыОтделенияФСС);

	Объект.НаименованиеТерриториальногоОрганаФСС = РеквизитыОтделенияФСС.Наименование;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "")

	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		Возврат;
	КонецЕсли;

	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
		Объект.КодНалоговогоОрганаПолучателя);

	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;

	Модифицированность = Истина;

	ПлатежныеРеквизитыФНСПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(
		РеквизитыНалоговогоОргана);

	РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЗначениеАдреса, ОписаниеОшибки = "")

	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	Если Не ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Возврат;
	КонецЕсли;

	СведенияОНалоговомОрганеПоАдресу = ДанныеАдресногоКлассификатора.НалоговыйОрганПоАдресу(ЗначениеАдреса);

	Если СведенияОНалоговомОрганеПоАдресу <> Неопределено Тогда
		Объект.КодНалоговогоОрганаПолучателя = ?(ЭтоФизЛицо,
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляФизическихЛиц,
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляЮридическихЛиц);
	КонецЕсли;

	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();

	Если СведенияОНалоговомОрганеПоАдресу <> Неопределено Тогда
		РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОрганеПоАдресу.КодПоОКАТО;
		РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОрганеПоАдресу.КодПоОКТМО;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовПФР(Ответ, ДопПараметры) Экспорт

	Если ТипЗнч(Ответ) = Тип("Структура") Тогда

		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана, Ответ.Код, ПлатежныеРеквизитыПФРПредставление);
		Объект.КодОрганаПФР = Ответ.Код;

		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт

	Если ТипЗнч(Ответ) = Тип("Структура") Тогда

		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана, Ответ.Код, ПлатежныеРеквизитыФНСПредставление);
		Объект.КодНалоговогоОрганаПолучателя = Ответ.Код;
		РегистрацияВНалоговомОргане.Наименование     = Ответ.Наименование;
		РегистрацияВНалоговомОргане.НаименованиеИФНС = Ответ.НаименованиеПолное;

		Модифицированность = Истина;
		ПроверитьЗаполнениеЭлемента("ПлатежныеРеквизитыФНСПредставление");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФСС(Ответ, ДопПараметры) Экспорт

	Если ТипЗнч(Ответ) = Тип("Структура") Тогда

		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана, Ответ.Код, ПлатежныеРеквизитыФССПредставление);

		Объект.КодОрганаФСС = Ответ.Код;
		Объект.НаименованиеТерриториальногоОрганаФСС = Ответ.Наименование;

		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполнены(Форма)

	Результат = Ложь;
	Объект = Форма.Объект;

	Если ЗначениеЗаполнено(Объект.Наименование) Или Объект.КонтактнаяИнформация.Количество() > 0 Тогда

		Результат = Истина;

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВопросПерезаполнитьРеквизитыПоИННЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(ДополнительныеПараметры.ИНН);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовОрганизацияВыбрана(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Или ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;

	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Результат);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПодключитьИнтернетПоддержкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеИнтернетПоддержкиЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеИнтернетПоддержкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда

		Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьРеквизитыПоИНН"
			И ДополнительныеПараметры.Свойство("ИНН") Тогда

			ВыполнитьЗаполнениеРеквизитовПоИНН(ДополнительныеПараметры.ИНН);

		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда

			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();

		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииФСС" Тогда

			ЗаполнитьСведенияОбОтделенииФСС();

		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииПФР" Тогда

			ЗаполнитьСведенияОбОтделенииПФР();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодОрганаПФР(РегНомерПФР)

	Результат = Лев(СокрЛ(РегНомерПФР), 7);

	Если СтрДлина(СокрЛП(Результат)) < 7 Тогда
		Результат = "";
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПолучитьКодОрганаФСС(РегНомерФСС)
	Результат = Лев(СокрЛ(РегНомерФСС), 4);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт

	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)

	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)

	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	ПроверитьЗаполнениеЭлемента("ВидКИ_" + Прав(Элемент.Имя, 1));

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДополнительныеПараметры = Новый Структура("ИмяЭлемента", "ВидКИ_" + Прав(Элемент.Имя, 1));
	ОповещениеОЗакрытииДиалога = Новый ОписаниеОповещения("ДополнительныеДействияПриЗакрытииДиалога", ЭтотОбъект,
		ДополнительныеПараметры);
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		ОповещениеОЗакрытииДиалога);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)

	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)

	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)

	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);

КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформациюПослеВыбораСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДействияПриЗакрытииДиалога(Результат, ДополнительныеПараметры) Экспорт

	ПроверитьЗаполнениеЭлемента(ДополнительныеПараметры.ИмяЭлемента);

	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)

	Если Истина Тогда

		КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);

	Иначе

		УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка);

	КонецЕсли;

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Истина Тогда

		КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);

	Иначе

		УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя,
			СтандартнаяОбработка);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВсеЗаголовкиСвернутогоОтображения(Форма)

	УстановитьЗаголовокЮридическихДанных(Форма);
	УстановитьЗаголовокБанковскогоСчета(Форма);
	УстановитьЗаголовокКассы(Форма);
	УстановитьЗаголовокКонтактнойИнформации(Форма);
	УстановитьЗаголовокНалогообложения(Форма);
	УстановитьЗаголовокНалоговойИнспекции(Форма);
	УстановитьЗаголовокКодовСтатистики(Форма);
	УстановитьЗаголовокПенсионногоФонда(Форма);
	УстановитьЗаголовокФСС(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЮридическихДанных(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН'") + " " + Объект.ИНН);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН ...'"));
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.КПП) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='КПП'") + " " + Объект.КПП);
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.ОГРН) Тогда
		Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение(
			"Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			ДинамическиеПараметры.Добавить(НСтр("ru='ОГРН'") + " " + Объект.ОГРН);
		Иначе
			ДинамическиеПараметры.Добавить(НСтр("ru='ОГРН ИП'") + " " + Объект.ОГРН);
		КонецЕсли;
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ЮридическиеДанные", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокБанковскогоСчета(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		ДинамическиеПараметры.Добавить(Объект.БанковскийСчетПоУмолчанию);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ОсновнойБанковскийСчет", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКассы(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если ЗначениеЗаполнено(Объект.КассаПоУмолчанию) Тогда
		ДинамическиеПараметры.Добавить(Объект.КассаПоУмолчанию);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ОсновнаяКасса", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКонтактнойИнформации(Форма)

	ДинамическиеПараметры = Новый Массив;

	ЮрАдрес = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма, ПредопределенноеЗначение(
		"Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Если ЗначениеЗаполнено(ЮрАдрес) Тогда
		ДинамическиеПараметры.Добавить(ЮрАдрес);
	КонецЕсли;

	Телефон = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма, ПредопределенноеЗначение(
		"Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='тел.:'") + " " + Телефон);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "КонтактнаяИнформация", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалогообложения(Форма)

	Объект = Форма.КлючСистемыНалогообложения;
	ДинамическиеПараметры = Новый Массив;
	Если ЭтоЮрЛицо(Форма.Объект.ЮридическоеФизическоеЛицо) Тогда
		НадписьСтавка = "";
	Иначе
		НадписьСтавка =  ?(Не ПустаяСтрока(Объект.СтавкаНалога), "- " + Объект.СтавкаНалога + "%", "");
	КонецЕсли;

	Если Объект.ПлательщикУСН Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='УСН'") + НадписьСтавка);
	КонецЕсли;

	Если Объект.ПлательщикЕНВД Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ЕНВД'"));
	КонецЕсли;

	Если Объект.ПрименяетсяПатент Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Патент'"));
	КонецЕсли;

	Если Объект.ПлательщикТорговыйСбор Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Торговый сбор'"));
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "Налогообложение", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалоговойИнспекции(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если Не ПустаяСтрока(Объект.КодНалоговогоОрганаПолучателя) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодНалоговогоОрганаПолучателя);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "Налоговая", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКодовСтатистики(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если Не ПустаяСтрока(Объект.КодОКВЭД) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКВЭД'") + " " + Объект.КодОКВЭД);
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.КодОКФС) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКФС'") + " " + Объект.КодОКФС);
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.КодОКОПФ) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКОПФ'") + " " + Объект.КодОКОПФ);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаКодыРосстатаКоды", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокПенсионногоФонда(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если Не ПустаяСтрока(Объект.КодОрганаПФР) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодОрганаПФР);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаПФР", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФСС(Форма)

	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;

	Если Не ПустаяСтрока(Объект.КодОрганаФСС) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодОрганаФСС);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаФСС", ДинамическиеПараметры);

КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)

	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;

	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикТорговыйСборПриИзменении(Элемент)

	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН
		Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПлательщикТорговыйСбор;

	УправлениеФормой(ЭтотОбъект);

	Модифицированность = Истина;

	УстановитьЗаголовокНалогообложения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочки(Команда)
	ОткрытьФорму("Справочник.ТорговыеТочки.ФормаСписка", Новый Структура("Организация", Объект.Ссылка));
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ИнтернетПоддержкаПользователей.Новости
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");

КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.Новости

#КонецОбласти

&НаСервере
Процедура СформироватьНадписьНастройкиЕНВД()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыДеятельностиЕНВД.Ссылка) КАК КоличествоВидов
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Владелец
	|	И ВидыДеятельностиЕНВД.Актуально
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыДеятельностиЕНВД.Наименование КАК НазваниеВидаДеятельности
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Владелец
	|	И ВидыДеятельностиЕНВД.Актуально";

	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);

	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();

	Если Не Выборка.Следующий() Или Выборка.КоличествоВидов = 0 Тогда
		Элементы.НастроитьЕНВД.Заголовок = НСтр("ru='<<Указать виды деятельности для ЕНВД>>'");
	ИначеЕсли Выборка.КоличествоВидов = 1 Тогда
		ВыборкаИмени = Результат[1].Выбрать();
		ВыборкаИмени.Следующий();
		Элементы.НастроитьЕНВД.Заголовок = ВыборкаИмени.НазваниеВидаДеятельности;
	Иначе
		Элементы.НастроитьЕНВД.Заголовок= СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр(
			"ru = ';Заполнен %1 вид деятельности по ЕНВД;;Заполнено %1 вида деятельности по ЕНВД;Заполнено %1 видов деятельности по ЕНВД;Заполнено %1 вида деятельности по ЕНВД'"),
			Выборка.КоличествоВидов);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
