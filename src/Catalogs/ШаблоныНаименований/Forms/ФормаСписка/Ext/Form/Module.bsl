
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("КатегорияНоменклатуры") Тогда
		КатегорияНоменклатуры = Параметры.Отбор.КатегорияНоменклатуры;
	ИначеЕсли Параметры.Отбор.Свойство("Владелец") Тогда
		КатегорияНоменклатуры = Параметры.Отбор.Владелец;
	Иначе
		КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ВидНаименования") Тогда
		ВидНаименования = Параметры.Отбор.ВидНаименования;
	КонецЕсли;
	
	УправлениеВидимостьюФормы(ВидНаименования);
	
	ПриИзмененииКатегорииНоменклатуры();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура СоздатьШаблонДляНоменклатуры(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,КатегорияНоменклатуры", Ложь, КатегорияНоменклатуры);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонДляХарактеристики(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,КатегорияНоменклатуры", Истина, КатегорияНоменклатуры);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблон(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,ВидНаименования,КатегорияНоменклатуры", ДляХарактеристики, ВидНаименования, КатегорияНоменклатуры);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновной(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновнойШаблон Тогда
		
		Возврат;
	КонецЕсли;
	
	
	ЗаписатьОсновнойШаблонДоговоров(Элементы.Список.ТекущиеДанные.Ссылка);
	
	Оповестить("Запись_ШаблоныНаименований");
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Обновим динамический список
	Элементы.Список.Обновить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьОсновнойШаблонДоговоров(Шаблон)
	УстановитьПривилегированныйРежим(Истина);
	Константы.ШаблонНаименованияДоговоров.Установить(Шаблон);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КатегорияНоменклатурыПриИзменении(Элемент)
	
	ПриИзмененииКатегорииНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииКатегорииНоменклатуры()
	
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "КатегорияНоменклатуры", КатегорияНоменклатуры
		);
		
		Элементы.СписокКатегорияНоменклатуры.Видимость = Ложь;
		Элементы.СоздатьШаблон.Доступность = Истина;
		Элементы.ГруппаСоздать.Доступность = Истина;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "КатегорияНоменклатуры"
		);
		
		Если ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ДоговорКонтрагента Тогда
			Элементы.СписокКатегорияНоменклатуры.Видимость  = Ложь;
			Элементы.ДляХарактеристикиПредставление.Видимость  = Ложь;
			Элементы.КатегорияНоменклатуры.Видимость		   = Ложь;
			Элементы.СоздатьШаблон.Доступность = Истина;
			Элементы.ГруппаСоздать.Доступность = Ложь;
		Иначе
			Элементы.СписокКатегорияНоменклатуры.Видимость = Истина;
			Элементы.СоздатьШаблон.Доступность = Ложь;
			Элементы.ГруппаСоздать.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюФормы(ВидНаименования)
	
	ГруппаКоманд = Элементы.Найти("НастройкаПорядкаЭлементов");
	Элементы.ЭтоОсновнойШаблон.Видимость = Ложь;
	Элементы.ИспользоватьКакОсновной.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		Если ГруппаКоманд <> Неопределено Тогда
			ГруппаКоманд.Видимость = Истина;
		КонецЕсли;
		Элементы.КатегорияНоменклатуры.Видимость = Ложь;
	Иначе
		Если ГруппаКоманд <> Неопределено Тогда
			ГруппаКоманд.Видимость = Ложь;
		КонецЕсли;
		Элементы.КатегорияНоменклатуры.Видимость = Истина;
	КонецЕсли;
	
	Если ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ДоговорКонтрагента Тогда
		Элементы.ЭтоОсновнойШаблон.Видимость = Истина;
		Элементы.ИспользоватьКакОсновной.Видимость = Истина;
		Элементы.ГруппаСоздать.Видимость = Ложь;
		Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
	ИначеЕсли ВидНаименования = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		
		Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
			ЕстьХарактеристики = КатегорияНоменклатуры.ИспользоватьХарактеристики;
		Иначе
			ЕстьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
		КонецЕсли;
		
		Если ЕстьХарактеристики Тогда
			Элементы.СоздатьШаблон.Видимость = Ложь;
			Элементы.ГруппаСоздать.Видимость = Истина;
			Элементы.ДляХарактеристикиПредставление.Видимость = Истина;
		Иначе
			Элементы.СоздатьШаблон.Видимость = Истина;
			Элементы.ГруппаСоздать.Видимость = Ложь;
			Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		КонецЕсли;
		
		Если ЕстьХарактеристики Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДляХарактеристики", Ложь);
		
	ИначеЕсли ВидНаименования = Перечисления.ВидыНаименованийОбъектов.НоменклатураРабочее
		ИЛИ ВидНаименования = Перечисления.ВидыНаименованийОбъектов.НоменклатураДляПечати Тогда
		
		ДляХарактеристики = Ложь;
		
		Элементы.СоздатьШаблон.Видимость = Истина;
		Элементы.ГруппаСоздать.Видимость = Ложь;
		Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДляХарактеристики",
			ДляХарактеристики);
		
	ИначеЕсли ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ХарактеристикаРабочее
		ИЛИ ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ХарактеристикаДляПечати Тогда
		
		ДляХарактеристики = Истина;
		
		Элементы.СоздатьШаблон.Видимость = Истина;
		Элементы.ГруппаСоздать.Видимость = Ложь;
		Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДляХарактеристики",
			ДляХарактеристики);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
