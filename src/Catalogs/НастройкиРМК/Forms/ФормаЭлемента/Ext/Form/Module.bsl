#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

// Хранит Акселератор кнопки для редактирования
&НаКлиенте
Перем СтарыйАкселератор;

#КонецОбласти

#Область ПроцедурыОбработчикиКомандФормы

&НаКлиенте
Процедура СкопироватьВсеСкладыВДругоеРабочееМесто(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьВсеСкладыВДругоеРабочееМестоЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.НастройкиРМК.ФормаВыбора",,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеСкладыИзДругогоРабочегоМеста(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьВсеСкладыИзДругогоРабочегоМестаЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.НастройкиРМК.ФормаВыбора",,,,,,Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьГруппКатегорий();
	
КонецПроцедуры

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуКнопокИзМакета();
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если ЭтоМобильныйКлиент Тогда
		НастроитьЭлементыМобильныйКлиент();
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяСтраницы") Тогда
		
		Если Параметры.ИмяСтраницы = "НастройкаБыстрыхТоваров_2" Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаДополнительно;
		ИначеЕсли Параметры.ИмяСтраницы = "РаспределениеНоменклатуры" Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаРаспределениеНоменклатуры;
		Иначе
			ЭтаФорма.ТекущийЭлемент = Элементы.БыстрыеТовары;
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкаПредупрежденияОРаспределении();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыМобильныйКлиент()
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	Заголовок = НСтр("ru = 'Быстрые товары'");
	АвтоЗаголовок = Ложь;
	
	Элементы.БыстрыеТоварыИКнопки.ТекущаяСтраница = Элементы.СтраницаБыстрыеТовары;
	Элементы.БыстрыеТоварыИКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаШапка.Видимость = Ложь;
	
	Элементы.НастройкаОтображения.Видимость = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаНастройкаРМК", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура СочетаниеКлавишНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ОчиститьСочетаниеКлавиш(Результат, ТекущиеДанные);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
		
		ТекущиеДанные.СочетаниеКлавиш = ПредставлениеСочетанияКлавиш(Результат, Истина);
		
		Если ДополнительныеПараметры.ИмяТЧ = "КнопкиНижнейПанели" Тогда
			Если ТекущиеДанные.СочетаниеКлавиш <> ТекущиеДанные.СочетаниеКлавишПредыдущееЗначение Тогда
				ТекущиеДанные.ЗаголовокКнопки = СтрЗаменить(ТекущиеДанные.ЗаголовокКнопки, "("+СокрЛП(ТекущиеДанные.СочетаниеКлавишПредыдущееЗначение)+")", "("+СокрЛП(ТекущиеДанные.СочетаниеКлавиш)+")");
				ТекущиеДанные.СочетаниеКлавишПредыдущееЗначение = ТекущиеДанные.СочетаниеКлавиш;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура очищает данные о сочетании клавиш в текущей строке табличной части, которая передается через параметр.
//
&НаКлиенте
Процедура ОчиститьСочетаниеКлавиш(СочетаниеКлавиш, ТекущиеДанные)
	
	ПредставлениеСочетанияКлавиш = ПредставлениеСочетанияКлавиш(СочетаниеКлавиш);
	ТекущиеДанные.Клавиша = Строка(Клавиша.Нет);
	ТекущиеДанные.Ctrl = Ложь;
	ТекущиеДанные.Shift = Ложь;
	ТекущиеДанные.Alt = Ложь;
	ТекущиеДанные.СочетаниеКлавиш = "";
	
КонецПроцедуры

// Функция возвращает представление клавиши
// Параметры:
//	ЗначениеКлавиша						- Клавиша
//
// Возвращаемое значение
//	Строка - Представление клавиши
//
&НаКлиенте
Функция ПредставлениеКлавиши(ЗначениеКлавиша) Экспорт
	
	Если Строка(Клавиша._1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "1";
	ИначеЕсли Строка(Клавиша._2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "2";
	ИначеЕсли Строка(Клавиша._3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "3";
	ИначеЕсли Строка(Клавиша._4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "4";
	ИначеЕсли Строка(Клавиша._5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "5";
	ИначеЕсли Строка(Клавиша._6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "6";
	ИначеЕсли Строка(Клавиша._7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "7";
	ИначеЕсли Строка(Клавиша._8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "8";
	ИначеЕсли Строка(Клавиша._9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "9";
	ИначеЕсли Строка(Клавиша.Num0) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 0";
	ИначеЕсли Строка(Клавиша.Num1) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 1";
	ИначеЕсли Строка(Клавиша.Num2) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 2";
	ИначеЕсли Строка(Клавиша.Num3) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 3";
	ИначеЕсли Строка(Клавиша.Num4) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 4";
	ИначеЕсли Строка(Клавиша.Num5) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 5";
	ИначеЕсли Строка(Клавиша.Num6) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 6";
	ИначеЕсли Строка(Клавиша.Num7) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 7";
	ИначеЕсли Строка(Клавиша.Num8) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 8";
	ИначеЕсли Строка(Клавиша.Num9) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num 9";
	ИначеЕсли Строка(Клавиша.NumAdd) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num +";
	ИначеЕсли Строка(Клавиша.NumDecimal) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num .";
	ИначеЕсли Строка(Клавиша.NumDivide) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num /";
	ИначеЕсли Строка(Клавиша.NumMultiply) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num *";
	ИначеЕсли Строка(Клавиша.NumSubtract) = Строка(ЗначениеКлавиша) Тогда
		Возврат "Num -";
	Иначе
		Возврат Строка(ЗначениеКлавиша);
	КонецЕсли;
	
КонецФункции

// Функция возвращает представление клавиши
// Параметры:
//	СочетаниеКлавиш						- Сочетание клавиш для которого нужно сформировать представление
//	БезСкобок							- Флаг, указывающий, что представление должно быть сформировано без скобок
//
// Возвращаемое значение
//	Строка - Представление сочетания клавиш
//
&НаКлиенте
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавиш, БезСкобок = Ложь) Экспорт
	
	Если СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(БезСкобок, "", "(");
	Если СочетаниеКлавиш.Ctrl Тогда
		Наименование = Наименование + "Ctrl+"
	КонецЕсли;
	Если СочетаниеКлавиш.Alt Тогда
		Наименование = Наименование + "Alt+"
	КонецЕсли;
	Если СочетаниеКлавиш.Shift Тогда
		Наименование = Наименование + "Shift+"
	КонецЕсли;
	Наименование = Наименование + ПредставлениеКлавиши(СочетаниеКлавиш.Клавиша) + ?(БезСкобок, "", ")");
	
	Возврат Наименование;
	
КонецФункции

// Функция возвращает представление клавиши
// Параметры:
//	СочетаниеКлавиш						- Сочетание клавиш для которого нужно сформировать представление
//	БезСкобок							- Флаг, указывающий, что представление должно быть сформировано без скобок
//
// Возвращаемое значение
//	Строка - Представление сочетания клавиш
//
&НаКлиенте
Функция ПредставлениеСочетанияКлавишПоЭлементам(Клавиша, Alt, Ctrl, Shift, БезСкобок = Ложь) Экспорт
	
	Если Клавиша = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(БезСкобок, "", "(");
	Если Ctrl Тогда
		Наименование = Наименование + "Ctrl+"
	КонецЕсли;
	Если Alt Тогда
		Наименование = Наименование + "Alt+"
	КонецЕсли;
	Если Shift Тогда
		Наименование = Наименование + "Shift+"
	КонецЕсли;
	Наименование = Наименование + ПредставлениеКлавиши(Клавиша) + ?(БезСкобок, "", ")");
	
	Возврат Наименование;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеТовары

// Процедура - обработчик события НачалоВыбора в колонке СочетаниеКлавиш табличной части БыстрыеТовары формы.
//
&НаКлиенте
Процедура БыстрыеТоварыСочетаниеКлавишНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БыстрыеТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИмяТЧ", ТекущиеДанные, "БыстрыеТовары");
	ОписаниеОповещения = Новый ОписаниеОповещения("СочетаниеКлавишНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НастройкиРМК.Форма.ФормаВыборСочетанияКлавиш", 
		Новый Структура("РабочееМесто", Объект.РабочееМесто), 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события Очистка в колонке СочетаниеКлавиш табличной части БыстрыеТовары формы.
//
&НаКлиенте
Процедура БыстрыеТоварыСочетаниеКлавишОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БыстрыеТовары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Клавиша = Строка(Клавиша.Нет);
	ТекущиеДанные.Ctrl = Ложь;
	ТекущиеДанные.Shift = Ложь;
	ТекущиеДанные.Alt = Ложь;
	ТекущиеДанные.СочетаниеКлавиш = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКнопкиНижнейПанели

// Процедура - обработчик команды ЗаполнитьПоУмолчанию формы.
//
&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.КнопкиНижнейПанели.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Таблица кнопок заполнена. Очистить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросОчиститьТаблицуКнопок", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоУмолчаниюНижнююПанельКлиент();
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет ТЧ КнопкиНижнейПанели по данным ТЗ ТаблицаДействииКнопокНижнейПанели.
//
&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюНижнююПанельКлиент()
	
	Объект.КнопкиНижнейПанели.Очистить();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоУмолчанию", Истина);
	СтрокиТаблицы = ТаблицаДействииКнопокНижнейПанели.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ТекущиеДанные = Объект.КнопкиНижнейПанели.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТаблицы);
		
		ТекущиеДанные.СочетаниеКлавиш = ПредставлениеСочетанияКлавишПоЭлементам(ТекущиеДанные.Клавиша, ТекущиеДанные.Alt, ТекущиеДанные.Ctrl, ТекущиеДанные.Shift, Истина);
		ТекущиеДанные.СочетаниеКлавишПредыдущееЗначение = ТекущиеДанные.СочетаниеКлавиш;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает ответ на вопрос об очистке ТЧ КнопкиНижнейПанели.
//
&НаКлиенте
Процедура ОповещениеВопросОчиститьТаблицуКнопок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоУмолчаниюНижнююПанельКлиент();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора в колонке СочетаниеКлавиш табличной части КнопкиНижнейПанели формы.
//
&НаКлиенте
Процедура КнопкиНижнейПанелиСочетаниеКлавишНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КнопкиНижнейПанели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СочетаниеКлавишПредыдущееЗначение = ТекущиеДанные.СочетаниеКлавиш;
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные, ИмяТЧ", ТекущиеДанные, "КнопкиНижнейПанели");
	ОписаниеОповещения = Новый ОписаниеОповещения("СочетаниеКлавишНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.НастройкиРМК.Форма.ФормаВыборСочетанияКлавиш", 
		Новый Структура("РабочееМесто", Объект.РабочееМесто), 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Процедура - обработчик события Очистка в колонке СочетаниеКлавиш табличной части КнопкиНижнейПанели формы.
//
&НаКлиенте
Процедура КнопкиНижнейПанелиСочетаниеКлавишОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КнопкиНижнейПанели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Клавиша = Строка(Клавиша.Нет);
	ТекущиеДанные.Ctrl = Ложь;
	ТекущиеДанные.Shift = Ложь;
	ТекущиеДанные.Alt = Ложь;
	ТекущиеДанные.СочетаниеКлавиш = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеНоменклатуры

&НаКлиенте
Процедура ГруппыКатегорииПриИзменении(Элемент)
	
	Если Объект.РаспределениеНоменклатуры.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОбОчисткеРаспределения", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки распределения будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьВидимостьГруппКатегорий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНоменклатурыГруппаНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеСтроки = Объект.РаспределениеНоменклатуры.НайтиСтроки(Новый Структура("ГруппаНоменклатуры", ВыбранноеЗначение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранная группа уже присутствует в таблице'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНоменклатурыКатегорияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеСтроки = Объект.РаспределениеНоменклатуры.НайтиСтроки(Новый Структура("КатегорияНоменклатуры", ВыбранноеЗначение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбранная категория уже присутствует в таблице'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбОчисткеРаспределения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.РаспределениеНоменклатуры.Очистить();
		УстановитьВидимостьГруппКатегорий();
	Иначе
		Объект.ГруппыКатегории = Число(Не Булево(Объект.ГруппыКатегории));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеБыстрыхТоваров

// Процедура - обработчик команды ЗаполнитьИзГруппыНоменклатуры формы.
//
&НаКлиенте
Процедура ЗаполнитьИзГруппыНоменклатуры(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИзГруппыНоменклатурыЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",,,,,,Оповещение);
	
КонецПроцедуры

// Процедура обрабатывает выбор группы номенклатуры и заполнят табличную часть БыстрыеТовары элементами это группы.
//
&НаКлиенте
Процедура ЗаполнитьИзГруппыНоменклатурыЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ЗаполнитьПоГруппеНоменклатурыНаСервере(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнят табличную часть БыстрыеТовары элементами группы номенклатуры.
//
&НаСервере
Процедура ЗаполнитьПоГруппеНоменклатурыНаСервере(ГруппаНоменклатуры)

	Если Объект.РабочееМесто.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите рабочее'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Объект.РабочееМесто;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БыстрыеТовары.Номенклатура
		|ПОМЕСТИТЬ БыстрыеТовары
		|ИЗ
		|	&БыстрыеТовары КАК БыстрыеТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураСправочник.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК НоменклатураСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ БыстрыеТовары КАК БыстрыеТовары
		|		ПО (БыстрыеТовары.Номенклатура = НоменклатураСправочник.Ссылка)
		|ГДЕ
		|	БыстрыеТовары.Номенклатура ЕСТЬ NULL 
		|	И НЕ НоменклатураСправочник.ЭтоГруппа
		|	И НЕ НоменклатураСправочник.ПометкаУдаления
		|	И НоменклатураСправочник.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураСправочник.Наименование";
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("БыстрыеТовары", Объект.БыстрыеТовары.Выгрузить(, "Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.БыстрыеТовары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Ссылка;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Заполнение завершилось.'");
	Сообщение.Сообщить();
	
КонецПроцедуры

// Процедура - обработчик команды СкопироватьВсеВДругоеРабочееМесто формы.
//
&НаКлиенте
Процедура СкопироватьВсеВДругоеРабочееМесто(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьВсеВДругоеРабочееМестоЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.НастройкиРМК.ФормаВыбора",,,,,,Оповещение);
	
КонецПроцедуры

// Процедура обрабатывает выбор элемента справочника НастройкиРМК и заполнят табличную часть БыстрыеТовары выбранного элемента.
//
&НаКлиенте
Процедура СкопироватьВсеВДругоеРабочееМестоЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СкопироватьНастройкиВИсточникИзПриемника(Результат, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СкопироватьВсеТоварыИзДругогоРабочегоМеста формы.
//
&НаКлиенте
Процедура СкопироватьВсеТоварыИзДругогоРабочегоМеста(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьВсеТоварыИзДругогоРабочегоМестаЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.НастройкиРМК.ФормаВыбора",,,,,,Оповещение);
	
КонецПроцедуры

// Процедура обрабатывает выбор элемента справочника НастройкиРМК и заполнят табличную часть БыстрыеТовары текущего элемента.
//
&НаКлиенте
Процедура СкопироватьВсеТоварыИзДругогоРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СкопироватьНастройкиВИсточникИзПриемника(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура копирует табличную часть БыстрыеТовары одного элемента справочника НастройкиРМК в другой. 
// Текущий элемент может выступать как приемник и как источник.
//
&НаСервере
Процедура СкопироватьНастройкиВИсточникИзПриемника(Настройки, ЭтоПриемник = Ложь)
	
	Если ЭтоПриемник Тогда
		НастройкиИсточник = Объект;
		НастройкиПриемник = Настройки.ПолучитьОбъект();
	Иначе
		НастройкиИсточник = Настройки;
		НастройкиПриемник = Объект;
	КонецЕсли;
	
	Если НастройкиИсточник.Ссылка = НастройкиПриемник.Ссылка Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выбраны текущие настройки. Копирование не выполнено.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИсточник Из НастройкиИсточник.БыстрыеТовары Цикл
		СПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаИсточник.Номенклатура, СтрокаИсточник.Характеристика);
		НайденныеСтроки = НастройкиПриемник.БыстрыеТовары.НайтиСтроки(СПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаПриемник = НастройкиПриемник.БыстрыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		Иначе
			Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПриемник Тогда
		Попытка
			НастройкиПриемник.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Заполнение завершилось.'");
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#Область СтруктурныеЕдиницы

// Процедура обрабатывает выбор элемента справочника НастройкиРМК и заполнят табличную часть СтруктурныеЕдиницы
// выбранного элемента.
//
&НаКлиенте
Процедура СкопироватьВсеСкладыВДругоеРабочееМестоЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СкопироватьНастройкиСкладовВИсточникИзПриемника(Результат, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает выбор элемента справочника НастройкиРМК и заполнят табличную часть СтруктурныеЕдиницы текущего
// элемента.
//
&НаКлиенте
Процедура СкопироватьВсеСкладыИзДругогоРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СкопироватьНастройкиСкладовВИсточникИзПриемника(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура копирует табличную часть СтруктурныеЕдиницы одного элемента справочника НастройкиРМК в другой. 
// Текущий элемент может выступать как приемник и как источник.
//
&НаСервере
Процедура СкопироватьНастройкиСкладовВИсточникИзПриемника(Настройки, ЭтоПриемник = Ложь)
	
	Если ЭтоПриемник Тогда
		НастройкиИсточник = Объект;
		НастройкиПриемник = Настройки.ПолучитьОбъект();
	Иначе
		НастройкиИсточник = Настройки;
		НастройкиПриемник = Объект;
	КонецЕсли;
	
	Если НастройкиИсточник.Ссылка = НастройкиПриемник.Ссылка Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выбраны текущие настройки. Копирование не выполнено.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИсточник Из НастройкиИсточник.СтруктурныеЕдиницы Цикл
		СтруктураПоиска = Новый Структура("СтруктурнаяЕдиница", СтрокаИсточник.СтруктурнаяЕдиница);
		НайденныеСтроки = НастройкиПриемник.СтруктурныеЕдиницы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаПриемник = НастройкиПриемник.СтруктурныеЕдиницы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		Иначе
			Для Каждого СтрокаПриемник Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПриемник Тогда
		Попытка
			НастройкиПриемник.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Заполнение завершилось.'");
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет ТЗ ТаблицаДействииКнопокНижнейПанели по данным макета СтандартныеДействияКнопокНижнейПанели.
//
&НаСервере
Процедура ЗаполнитьТаблицуКнопокИзМакета()

	Макет = Справочники.НастройкиРМК.ПолучитьМакет("СтандартныеДействияКнопокНижнейПанели");
	
	ТаблицаДействииКнопокНижнейПанели.Очистить();
	
	КолСтрок = Макет.ВысотаТаблицы;
	
	Для НомерСтрокиМакета = 2 По КолСтрок Цикл
		
		СтрокаТаблицы = ТаблицаДействииКнопокНижнейПанели.Добавить();
		СтрокаТаблицы.ПредставлениеКнопки = Макет.Область(НомерСтрокиМакета,1,НомерСтрокиМакета,1).Текст;
		СтрокаТаблицы.ИмяКоманды          = Макет.Область(НомерСтрокиМакета,2,НомерСтрокиМакета,2).Текст;
		СтрокаТаблицы.ИмяКнопки           = Макет.Область(НомерСтрокиМакета,3,НомерСтрокиМакета,3).Текст;
		СтрокаТаблицы.ЗаголовокКнопки     = Макет.Область(НомерСтрокиМакета,4,НомерСтрокиМакета,4).Текст;
		СтрокаТаблицы.Клавиша             = Макет.Область(НомерСтрокиМакета,6,НомерСтрокиМакета,6).Текст;
		СтрокаТаблицы.Alt      = Булево(Макет.Область(НомерСтрокиМакета,7,НомерСтрокиМакета,7).Текст);
		СтрокаТаблицы.Ctrl     = Булево(Макет.Область(НомерСтрокиМакета,8,НомерСтрокиМакета,8).Текст);
		СтрокаТаблицы.Shift    = Булево(Макет.Область(НомерСтрокиМакета,9,НомерСтрокиМакета,9).Текст);
		СтрокаТаблицы.ПоУмолчанию         = Булево(Макет.Область(НомерСтрокиМакета,10,НомерСтрокиМакета,10).Текст);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуКнопокИзМакета()

&НаКлиенте
Процедура УстановитьВидимостьГруппКатегорий()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеНоменклатурыГруппаНоменклатуры", "Видимость", Объект.ГруппыКатегории = 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеНоменклатурыКатегорияНоменклатуры", "Видимость", Объект.ГруппыКатегории = 1);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПредупрежденияОРаспределении()
	
	НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ЗаказыВРознице = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	Если НесколькоОрганизаций И ЗаказыВРознице И Не УчетПоКомпании Тогда
		Видимость = Истина;
	Иначе
		Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждениеОРаспределении", "Видимость", Видимость);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Выбрать_МК(Команда)
	
	ТекущиеДанные = Элементы.БыстрыеТовары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		СтруктураДляВозврата = Новый Структура;
		СтруктураДляВозврата.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураДляВозврата.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		
		Закрыть(СтруктураДляВозврата);
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Выбрать_МК(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
