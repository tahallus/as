
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если МобильныйКлиентУНФ.ФункциональностьВременноНедоступна(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииКонтактныхФорм.УчетнаяЗаписьЭП КАК УчетнаяЗаписьЭП,
	|	НастройкиИнтеграцииКонтактныхФорм.СсылкаНаПриложение КАК СсылкаНаПриложение
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииКонтактныхФорм КАК НастройкиИнтеграцииКонтактныхФорм";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СсылкаНаПриложение = Выборка.СсылкаНаПриложение;
		АдресЭПИнтеграции = Выборка.УчетнаяЗаписьЭП;
	КонецЦикла;

	ЗаполнитьДанныеСозданныхФорм();
	ОбновитьЭлементыФормЗаявок();
	ОбновитьЭлементыСозданныхФорм();
	
	Элементы["ДекорацияРедакторФормыАктивна"].Видимость = Истина;
	Элементы["КомандаРедакторФормыНеактивна"].Видимость = Ложь;
	
	Элементы["ДекорацияНастройкиПубликацииАктивна"].Видимость = Ложь;
	Элементы["НастройкиПубликацииНеактивна"].Видимость = Истина;
	
	ИндексТекущейКартинки = 1;
	ОбновитьКартинкуПримераФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СопоставлениеПолей" Тогда
		
		ТекущаяСтрокаФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
		СтрокаКонструктора = ТекущаяСтрокаФормы.ПоляКонструктора[Параметр.ИндексПоля];
		СтрокаКонструктора.ПолеПоискаУНФ = Параметр.ПолеУНФ;
		ОбновитьЭлементыФормЗаявок();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыНастроек",ЭтотОбъект);
	ПараметрыНастроек = Новый Структура;
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	АдресЭП = ТекущаяСтрока.АдресЭП;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьАдресЭП(АдресЭП)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru ='Не заполнена электронная почта для получения ответов'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыНастроек.Вставить("АдресЭП", УчетнаяЗаписьАдресЭП(АдресЭП));
	ОткрытьФорму("Справочник.КонтактныеФормыGoogle.Форма.НастройкаПубликации",ПараметрыНастроек,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьНажатие(Элемент)
	
	СвернутьПредпросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьПредпросмотрНажатие(Элемент)
	
	РазвернутьПредпросмотр();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиентеНаСервереБезКонтекста
Функция ИндексТекущейФормы(Форма)
	СозданнаяФорма = Форма.СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", Форма.ТекущаяФормаКонструктора));
	Возврат Форма.СозданныеФормы.Индекс(СозданнаяФорма[0]);
КонецФункции

&НаКлиенте
Процедура ДобавитьПоле(Команда)
	
	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения("ОбработатьВыборТипаПоля", ЭтотОбъект);
	СписокТиповПолей = Новый СписокЗначений;
	СформироватьСписокПолей(СписокТиповПолей);
	ПоказатьВыборИзМеню(ОписаниеОповещенияОВыборе,СписокТиповПолей,Элементы.ДобавитьПоле); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВариант(Команда)
	
	ИндексВыбранногоПоля = Число(Сред(Команда.Имя, СтрДлина("ДобавитьВариант_")+1));
	ТекущаяСтрокаФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	
	СтрокаКонструктора = ТекущаяСтрокаФормы.ПоляКонструктора[ИндексВыбранногоПоля];
	НовыйВариант = ТекущаяСтрокаФормы.ВариантыОтветов.Добавить();
	НовыйВариант.ИдентификаторСтроки = ТекущаяСтрокаФормы.ПоляКонструктора[ИндексВыбранногоПоля].ИдентификаторСтроки;
	ОбновитьЭлементыФормЗаявок();
	ТекущийЭлемент = Элементы["Поле_"+ИндексВыбранногоПоля+"_ВариантОтвета_"+ТекущаяСтрокаФормы.ВариантыОтветов.Индекс(НовыйВариант)];
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторФормы(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.РедакторФормы;
	
	ВидимостьТекущейСтраницы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубликацияФормы(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ПубликацияФормы;
	ВидимостьТекущейСтраницы(Ложь);
КонецПроцедуры

&НаСервере
Процедура ВидимостьТекущейСтраницы(Редактор)
	
	Элементы["ДекорацияРедакторФормыАктивна"].Видимость = Редактор;
	Элементы["КомандаРедакторФормыНеактивна"].Видимость = НЕ Редактор;
	
	Элементы["ДекорацияНастройкиПубликацииАктивна"].Видимость = НЕ Редактор;
	Элементы["НастройкиПубликацииНеактивна"].Видимость = Редактор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьФорму(Команда)
	
	Если ЕстьОшибкиЗаполненияЭлементов() Тогда
		Возврат;
	КонецЕсли;
		
	ФормаСоздана = Ложь;
	Состояние(НСтр("ru='Публикация формы'"), 49);
	ФормаСоздана = ОпубликоватьФормуНаСервере();
	Состояние(НСтр("ru='Публикация формы'"), 100);
	
	Если ФормаСоздана Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Форма успешно опубликована'"));
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При публикации формы произошли ошибки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиЗаполненияЭлементов()
	
	ЕстьОшибки = Ложь;
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	
	Если НЕ ЗначениеЗаполнено(СтрокаТекущейФормы.Заголовок) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен заголовок формы'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТекущейФормы.АдресЭП) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена электронная почта для получения ответов'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Для Каждого ПолеКонструктора Из СтрокаТекущейФормы.ПоляКонструктора Цикл
		
		Если НЕ ТипПоляСВариантамиОтвета(ПолеКонструктора.ТипПоля) Тогда
			Продолжить;
		КонецЕсли;
		ВариантыОтветаСтроки = СтрокаТекущейФормы.ВариантыОтветов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ПолеКонструктора.ИдентификаторСтроки));
		Если ВариантыОтветаСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПолеКонструктора.ЭтоТовар И ВТаблицеЕстьТовары(ПолеКонструктора.КаталогТоваров) Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблон = СтрШаблон(НСтр("ru = 'Для поля ""%1"" не указаны варианты ответов'"),ПолеКонструктора.Заголовок);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Шаблон);
		ЕстьОшибки = Истина;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьВидимостьКнопокКопирования()
	#Если ВебКлиент Тогда
		Элементы["ДекорацияКопированиеСсылки"].Видимость = Ложь;
		Элементы["ДекорацияКопированиеКодаДляСайта"].Видимость = Ложь;
		Элементы["ПолеСсылкаНаФорму"].Видимость = Истина;
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура СвернутьПредпросмотр()
	
	Элементы.ГруппаПримерФормы.Видимость = Ложь;
	Элементы.ДекорацияРазвернутьПредпросмотр.Видимость = Истина;
	Элементы.ДекорацияВертикальнаяЛиния1.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьПредпросмотр()
	
	Элементы.ГруппаПримерФормы.Видимость = Истина;
	Элементы.ДекорацияРазвернутьПредпросмотр.Видимость = Ложь;
	Элементы.ДекорацияВертикальнаяЛиния1.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВТаблицеЕстьТовары(КаталогТоваров)
	
	Каталог = ПолучитьИзВременногоХранилища(КаталогТоваров);
	Возврат Каталог.Количество()>0;
	
КонецФункции

&НаСервере
Функция ТипПоляСВариантамиОтвета(ТипПоля)
	
	Возврат ТипПоля = ОдинИзСписка() 
		ИЛИ ТипПоля = НесколькоИзСписка() 
		ИЛИ ТипПоля = РаскрывающийсяСписок();
	
КонецФункции

&НаСервере
Процедура ОбновитьКартинкуПримераФорм()
	
	Если ИндексТекущейКартинки = 5 ИЛИ ИндексТекущейКартинки = 5 Тогда
		ИндексТекущейКартинки = 1;
	КонецЕсли;
	
	Если ИндексТекущейКартинки = 0 Тогда
		ИндексТекущейКартинки = 4;
	КонецЕсли;
	
	Элементы.КартинкаПримерФормы.Картинка = БиблиотекаКартинок["ПримерФормыGoogle_"+ИндексТекущейКартинки];
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормЗаявок()
	
	Элементы.Переместить(Элементы.ДобавитьПоле, Элементы.ГруппаКомандыДобавления_0);
	Элементы.Переместить(Элементы.ГруппаКомандыДобавления_0, Элементы.РедакторФормы);
	Элементы.ДобавитьВариантПоле_0.Видимость = Ложь;
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	
	Для ИндексГруппы = 1 По СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Количество()-1 Цикл
		Если Команды.Найти("ДобавитьВариант_"+ИндексГруппы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеКоманды.Добавить(Команды.Найти("ДобавитьВариант_"+ИндексГруппы));
	КонецЦикла;
	
	Для ИндексГруппы = 0 По СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Количество()-1 Цикл
		Если Команды.Найти("ПолеСопоставленияУНФ_"+ИндексГруппы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеКоманды.Добавить(Команды.Найти("ПолеСопоставленияУНФ_"+ИндексГруппы));
	КонецЦикла;

	Для ИндексГруппы = 0 По Элементы.ГруппаПоляКонструктора.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаПоляКонструктора.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	
	Для ИндексГруппы = 0 По Элементы.ГруппаОписаниеФормы.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаОписаниеФормы.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	
	Для ИндексГруппы = 0 По Элементы.ГруппаШаг1.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаШаг1.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
				
	ПоляТекущейФормы = СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяФормаКонструктора));
	ИндексТекущейФормы = СозданныеФормы.Индекс(ПоляТекущейФормы[0]);
	ПоляКонструктораТекущее = СозданныеФормы[ИндексТекущейФормы].ПоляКонструктора;
	
	Элементы.ГруппаНетФорм.Видимость = СозданныеФормы.Количество() = 1;
	ЭлементЗаголовокКонструктора = Элементы.Добавить("ЗаголовокКонструктора", Тип("ПолеФормы"), Элементы.ГруппаОписаниеФормы);
	ЭлементЗаголовокКонструктора.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].Заголовок";
	ЭлементЗаголовокКонструктора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементЗаголовокКонструктора.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементЗаголовокКонструктора.ПодсказкаВвода = НСтр("ru = 'Заголовок'");
	ЭлементЗаголовокКонструктора.АвтоМаксимальнаяШирина = Ложь;
	ЭлементЗаголовокКонструктора.МаксимальнаяШирина     = 63;
	ЭлементЗаголовокКонструктора.УстановитьДействие("ПриИзменении", "Подключаемый_ЗаголовокПриИзменении");
	ЭлементЗаголовокКонструктора.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементОписаниеКонструктора = Элементы.Добавить("ОписаниеКонструктора", Тип("ПолеФормы"), Элементы.ГруппаОписаниеФормы);
	ЭлементОписаниеКонструктора.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].Описание";
	ЭлементОписаниеКонструктора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементОписаниеКонструктора.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОписаниеКонструктора.ПодсказкаВвода = НСтр("ru = 'Описание'");
	ЭлементОписаниеКонструктора.АвтоМаксимальнаяШирина = Ложь;
	ЭлементОписаниеКонструктора.МаксимальнаяШирина     = 63;
	ЭлементОписаниеКонструктора.Высота     = 2;
	ЭлементОписаниеКонструктора.РастягиватьПоВертикали=Ложь;
	ЭлементОписаниеКонструктора.МногострочныйРежим = Истина;
	ЭлементОписаниеКонструктора.УстановитьДействие("ПриИзменении", "Подключаемый_ОписаниеПриИзменении");
	
	ЭлементНаименованиеФормы = Элементы.Добавить("НаименованиеФормы", Тип("ПолеФормы"), Элементы.ГруппаШаг1);
	ЭлементНаименованиеФормы.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].Наименование";
	ЭлементНаименованиеФормы.Заголовок = НСтр("ru='Представление в программе'");
	ЭлементНаименованиеФормы.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНаименованиеФормы.ПодсказкаВвода =  НСтр("ru='Название формы для отображения в программе'");
	ЭлементНаименованиеФормы.АвтоМаксимальнаяШирина = Ложь;
	ЭлементНаименованиеФормы.МаксимальнаяШирина     = 44;
	ЭлементНаименованиеФормы.УстановитьДействие("ПриИзменении", "Подключаемый_НаименованиеПриИзменении");
	
	ЭлементАдресЭП = Элементы.Добавить("АдресЭП", Тип("ПолеФормы"), Элементы.ГруппаШаг1);
	ЭлементАдресЭП.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].АдресЭП";
	ЭлементАдресЭП.Заголовок = НСтр("ru='Прислать ответ на почту'");
	ЭлементАдресЭП.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементАдресЭП.АвтоМаксимальнаяШирина = Ложь;
	ЭлементАдресЭП.МаксимальнаяШирина     = 44;
	ЭлементАдресЭП.АвтоОтметкаНезаполненного = Истина;
	ЭлементАдресЭП.УстановитьДействие("ПриИзменении", "Подключаемый_АдресЭППриИзменении");
	
	ЭлементТекстПослеОтправкиОтвета = Элементы.Добавить("ТекстПослеОтправкиОтвета", Тип("ПолеФормы"), Элементы.ГруппаШаг1);
	ЭлементТекстПослеОтправкиОтвета.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].ТекстПослеОтправки";
	ЭлементТекстПослеОтправкиОтвета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТекстПослеОтправкиОтвета.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементТекстПослеОтправкиОтвета.ПодсказкаВвода = НСтр("ru = 'Текст после успешной отправки ответа'");
	ЭлементТекстПослеОтправкиОтвета.АвтоМаксимальнаяШирина = Ложь;
	ЭлементТекстПослеОтправкиОтвета.МаксимальнаяШирина     = 62;
	ЭлементТекстПослеОтправкиОтвета.Высота     = 2;
	ЭлементТекстПослеОтправкиОтвета.РастягиватьПоВертикали=Ложь;
	ЭлементТекстПослеОтправкиОтвета.МногострочныйРежим = Истина;
	ЭлементТекстПослеОтправкиОтвета.УстановитьДействие("ПриИзменении", "Подключаемый_АдресЭППриИзменении");
	
	ОбновитьЭлементыКонструктора(ПоляКонструктораТекущее, ИндексТекущейФормы);
	ОбновитьЭлементыРазмещенияФормы(ИндексТекущейФормы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонструктора(ПоляКонструктораТекущее, ИндексТекущейФормы)
	
	Для Каждого ПолеКонструктора Из ПоляКонструктораТекущее Цикл
		
		ИндексПоляКонструктора = ПоляКонструктораТекущее.Индекс(ПолеКонструктора);
		ГруппаПолеКонструктора = Элементы.Добавить("ГруппаПолеКонструктора_" + ИндексПоляКонструктора, Тип("ГруппаФормы"), Элементы.ГруппаПоляКонструктора);
		ГруппаПолеКонструктора.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПолеКонструктора.ОтображатьЗаголовок = Ложь;
		ГруппаПолеКонструктора.Группировка=ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ГруппаПоляВарианта = Элементы.Добавить("ГруппаПоляВарианта_" + ИндексПоляКонструктора, Тип("ГруппаФормы"), ГруппаПолеКонструктора);
		ГруппаПоляВарианта.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПоляВарианта.ОтображатьЗаголовок = Ложь;
		
		ПереместитьПолеВверх = Элементы.Добавить("ПереместитьВверхПоле_" + ИндексПоляКонструктора, Тип("ДекорацияФормы"), ГруппаПоляВарианта);
		ПереместитьПолеВверх.Вид=ВидДекорацииФормы.Картинка;
		ПереместитьПолеВверх.Картинка = БиблиотекаКартинок.СтрелкаВверх;
		ПереместитьПолеВверх.Ширина = 2;
		ПереместитьПолеВверх.Высота = 1;
		ПереместитьПолеВверх.Гиперссылка = Истина;
		ПереместитьПолеВверх.УстановитьДействие("Нажатие","Подключаемый_ПереместитьПолеВверх");
		
		ПереместитьПолеВниз = Элементы.Добавить("ПереместитьВнизПоле_"+ ИндексПоляКонструктора,Тип("ДекорацияФормы"),ГруппаПоляВарианта);
		ПереместитьПолеВниз.Вид=ВидДекорацииФормы.Картинка;
		ПереместитьПолеВниз.Ширина = 2;
		ПереместитьПолеВниз.Высота = 1;
		ПереместитьПолеВниз.Гиперссылка = Истина;
		ПереместитьПолеВниз.Картинка = БиблиотекаКартинок.СтрелкаВниз;
		ПереместитьПолеВниз.УстановитьДействие("Нажатие","Подключаемый_ПереместитьПолеВниз");
		
		ИконкаПоля = Элементы.Добавить("ИконкаПоля_"+ ИндексПоляКонструктора,Тип("ДекорацияФормы"),ГруппаПоляВарианта);
		ИконкаПоля.Вид=ВидДекорацииФормы.Картинка;
		ИконкаПоля.Ширина = 2;
		ИконкаПоля.Высота = 1;
		ИконкаПоля.Картинка = КартинкаПоТипу(,ПолеКонструктора);
		ИконкаПоля.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		
		ГруппаПолеКонструктораУНФ = Элементы.Добавить("ГруппаПолеКонструктораУНФ_" + ИндексПоляКонструктора, Тип("ГруппаФормы"), ГруппаПоляВарианта);
		ГруппаПолеКонструктораУНФ.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПолеКонструктораУНФ.ОтображатьЗаголовок = Ложь;
		ГруппаПолеКонструктораУНФ.Группировка=ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаПолеКонструктораУНФ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ЭлементПолеКонструктора = Элементы.Добавить("ПолеКонструктора_" + ИндексПоляКонструктора, Тип("ПолеФормы"), ГруппаПолеКонструктораУНФ);
		ЭлементПолеКонструктора.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].ПоляКонструктора[" + ИндексПоляКонструктора + "].Заголовок";
		ЭлементПолеКонструктора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементПолеКонструктора.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПолеКонструктора.ПодсказкаВвода = НСтр("ru = 'Вопрос'");
		ЭлементПолеКонструктора.АвтоМаксимальнаяШирина = Ложь;
		ЭлементПолеКонструктора.МаксимальнаяШирина     = 48;
		ЭлементПолеКонструктора.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеКонструктораПриИзменении");
		
		Если ПолеКонструктора.ТипПоля = ТипСтрока() ИЛИ ПолеКонструктора.ТипПоля = ТипАбзац() ИЛИ ПолеКонструктора.ЭтоТовар Тогда
			ДекорацияПолеУНФ = Элементы.Добавить("ДекорацияПолеУНФ_" + ИндексПоляКонструктора, Тип("КнопкаФормы"), ГруппаПолеКонструктораУНФ);
			ДекорацияПолеУНФКоманда = ЭтаФорма.Команды.Добавить("ПолеСопоставленияУНФ_" + ИндексПоляКонструктора);
			Если ПолеКонструктора.ЭтоТовар Тогда
				ДекорацияПолеУНФКоманда.Действие = "Подключаемый_ОткрытьФормуСопоставленияТоваров";
				ДекорацияПолеУНФКоманда.Подсказка = "";
			Иначе
				ДекорацияПолеУНФКоманда.Действие = "Подключаемый_ОткрытьФормуСопоставления";
				ДекорацияПолеУНФКоманда.Подсказка = НСтр("ru = 'Сопоставление полей для поиска клиента в УНФ'");
			КонецЕсли;
			ДекорацияПолеУНФ.ИмяКоманды = ДекорацияПолеУНФКоманда.Имя;
			ДекорацияПолеУНФ.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			ДекорацияПолеУНФ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ДекорацияПолеУНФ.Заголовок = ЗаголовокПоляСопоставлений(ПолеКонструктора);
			ДекорацияПолеУНФ.ЦветТекста = ЦветаСтиля.ЦветРамки;
			ДекорацияПолеУНФ.Шрифт = Новый Шрифт(,,,,Истина);
			ДекорацияПолеУНФ.ГоризонтальноеПоложениеВГруппе=ГоризонтальноеПоложениеЭлемента.Право;
		КонецЕсли;
			
		ПолеОбязательно = Элементы.Добавить("ПолеОбязательно_" + ИндексПоляКонструктора, Тип("ПолеФормы"), ГруппаПоляВарианта);
		ПолеОбязательно.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].ПоляКонструктора[" + ИндексПоляКонструктора + "].Обязательно";
		ПолеОбязательно.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеОбязательно.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеОбязательно.ВидФлажка = ВидФлажка.Выключатель;
		
		ДекорацияУдалитьПоле = Элементы.Добавить("ДекорацияУдалитьПоле_"+ ИндексПоляКонструктора,Тип("ДекорацияФормы"),ГруппаПоляВарианта);
		ДекорацияУдалитьПоле.Вид=ВидДекорацииФормы.Картинка;
		ДекорацияУдалитьПоле.Ширина = 1;
		ДекорацияУдалитьПоле.Высота = 1;
		ДекорацияУдалитьПоле.Картинка = БиблиотекаКартинок.Закрыть;
		ДекорацияУдалитьПоле.Гиперссылка = Истина;
		ДекорацияУдалитьПоле.РазмерКартинки=РазмерКартинки.Пропорционально;
		ДекорацияУдалитьПоле.УстановитьДействие("Нажатие","Подключаемый_ДекорацияУдалитьПолеНажатие");
		
		Если ПолеКонструктора.ТипПоля = РаскрывающийсяСписок() ИЛИ ПолеКонструктора.ТипПоля = ОдинИзСписка() 
			ИЛИ ПолеКонструктора.ТипПоля = НесколькоИзСписка() Тогда
			ДобавитьПоляВариантов(ИндексПоляКонструктора, ИндексТекущейФормы);
		КонецЕсли;
		
		Если ИндексПоляКонструктора = 0 Тогда
			
			Элементы.Переместить(Элементы.ГруппаКомандыДобавления_0, ГруппаПолеКонструктора);
			Элементы.ДобавитьВариантПоле_0.Видимость = (ПолеКонструктора.ТипПоля = РаскрывающийсяСписок() ИЛИ ПолеКонструктора.ТипПоля = ОдинИзСписка() 
				ИЛИ ПолеКонструктора.ТипПоля = НесколькоИзСписка()) И НЕ ПолеКонструктора.ЭтоТовар;
				
		Иначе
			
			ГруппаКомандыДобавления = Элементы.Добавить("ГруппаКомандыДобавления_" + ИндексПоляКонструктора, Тип("ГруппаФормы"), ГруппаПолеКонструктора);
			ГруппаКомандыДобавления.Вид = Элементы.ГруппаКомандыДобавления_0.Вид;
			ГруппаКомандыДобавления.Отображение = Элементы.ГруппаКомандыДобавления_0.Отображение;
			ГруппаКомандыДобавления.ГоризонтальноеПоложениеВГруппе = Элементы.ГруппаКомандыДобавления_0.ГоризонтальноеПоложениеВГруппе;
			ГруппаКомандыДобавления.ГоризонтальноеПоложениеПодчиненных = Элементы.ГруппаКомандыДобавления_0.ГоризонтальноеПоложениеПодчиненных;
			ГруппаКомандыДобавления.ОтображатьЗаголовок = Ложь;
			
			ДобавитьВариантОтветаПоле = Элементы.Добавить("ДобавитьВариантПоле_" + ИндексПоляКонструктора, Тип("КнопкаФормы"), ГруппаКомандыДобавления);
			ДобавитьВариантОтветаКоманда = ЭтаФорма.Команды.Добавить("ДобавитьВариант_" + ИндексПоляКонструктора);
			ДобавитьВариантОтветаКоманда.Действие = "ДобавитьВариант";
			ДобавитьВариантОтветаКоманда.Подсказка = НСтр("ru = 'Добавить вариант ответа'");
			
			ДобавитьВариантОтветаПоле.ИмяКоманды = ДобавитьВариантОтветаКоманда.Имя;
			ДобавитьВариантОтветаПоле.Вид = Элементы.ДобавитьВариантПоле_0.Вид;
			ДобавитьВариантОтветаПоле.ОтображениеФигуры = Элементы.ДобавитьВариантПоле_0.ОтображениеФигуры;
			ДобавитьВариантОтветаПоле.Заголовок = НСтр("ru = '+ вариант ответа'");
			
			ДобавитьВариантОтветаПоле.Видимость = (ПолеКонструктора.ТипПоля = РаскрывающийсяСписок() ИЛИ ПолеКонструктора.ТипПоля = ОдинИзСписка() 
				ИЛИ ПолеКонструктора.ТипПоля = НесколькоИзСписка()) И НЕ ПолеКонструктора.ЭтоТовар;
				
		КонецЕсли;
		
		Элементы.Переместить(Элементы.ДобавитьПоле, Элементы["ГруппаКомандыДобавления_"+ИндексПоляКонструктора]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРазмещенияФормы(ИндексТекущейФормы)
	
	УдаляемыеЭлементы = Новый Массив;
	Для ИндексГруппы = 0 По Элементы.ГруппаСсылкаНаФорму.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаСсылкаНаФорму.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для ИндексГруппы = 0 По Элементы.ГруппаКодДляСайта.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаКодДляСайта.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;
	Для ИндексГруппы = 0 По Элементы.ГруппаОтветыНаФорму.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ГруппаОтветыНаФорму.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ГруппаСсылкиВсплывающая = Элементы.Добавить("ГруппаСсылкиВсплывающая", Тип("ГруппаФормы"), Элементы.ГруппаСсылкаНаФорму);
	ГруппаСсылкиВсплывающая.Вид=ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСсылкиВсплывающая.ОтображатьЗаголовок = Истина;
	ГруппаСсылкиВсплывающая.Заголовок = НСтр("ru = 'Ссылка для клиентов'");
	ГруппаСсылкиВсплывающая.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылки;
	ГруппаСсылкиВсплывающая.Поведение=ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаСсылкиВсплывающая.ОтображениеУправления=ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
	ГруппаСсылкиВсплывающая.ШрифтЗаголовка=Новый Шрифт(,10);
	
	ЗаголовокСсылкаНаФорму = Элементы.Добавить("ЗаголовокСсылкаНаФорму",Тип("ДекорацияФормы"),ГруппаСсылкиВсплывающая);
	ЗаголовокСсылкаНаФорму.Вид=ВидДекорацииФормы.Надпись;
	ЗаголовокСсылкаНаФорму.Заголовок = НСтр("ru = 'Ссылка на форму:'");
	
	ГруппаСсылкиОбщая = Элементы.Добавить("ГруппаСсылкиОбщая", Тип("ГруппаФормы"), ГруппаСсылкиВсплывающая);
	ГруппаСсылкиОбщая.Вид=ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСсылкиОбщая.ОтображатьЗаголовок = Ложь;
	ГруппаСсылкиОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСсылкиОбщая.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		
	ПолеСсылкаНаФорму = Элементы.Добавить("ПолеСсылкаНаФорму",Тип("ПолеФормы"),ГруппаСсылкиОбщая);
	ПолеСсылкаНаФорму.Вид=ВидПоляФормы.ПолеВвода;
	ПолеСсылкаНаФорму.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеСсылкаНаФорму.АвтоМаксимальнаяШирина = Ложь;
	ПолеСсылкаНаФорму.МаксимальнаяШирина = 27;
	ПолеСсылкаНаФорму.РастягиватьПоГоризонтали = Истина;
	ПолеСсылкаНаФорму.ПутьКДанным = "СозданныеФормы[" + ИндексТекущейФормы + "].СсылкаНаФорму";
	ПолеСсылкаНаФорму.Видимость = Ложь;
	ПолеСсылкаНаФорму.ТолькоПросмотр = Истина;
	
	ДекорацияСсылкаНаФорму = Элементы.Добавить("ДекорацияСсылкаНаФорму",Тип("ДекорацияФормы"),ГруппаСсылкиОбщая);
	ДекорацияСсылкаНаФорму.Вид=ВидДекорацииФормы.Надпись;
	ДекорацияСсылкаНаФорму.Гиперссылка = Истина;
	ДекорацияСсылкаНаФорму.Заголовок = СозданныеФормы[ИндексТекущейФормы].СсылкаНаФорму;
	ДекорацияСсылкаНаФорму.УстановитьДействие("Нажатие","Подключаемый_НажатиеНаСсылку");
	ДекорацияСсылкаНаФорму.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияСсылкаНаФорму.МаксимальнаяШирина = 27;
	ДекорацияСсылкаНаФорму.РастягиватьПоГоризонтали = Истина;

	ДекорацияКопированиеСсылки = Элементы.Добавить("ДекорацияКопированиеСсылки",Тип("ДекорацияФормы"),Элементы.ГруппаСсылкаНаФорму);
	ДекорацияКопированиеСсылки.Вид=ВидДекорацииФормы.Картинка;
	ДекорацияКопированиеСсылки.Гиперссылка = Истина;
	ДекорацияКопированиеСсылки.Ширина = 2;
	ДекорацияКопированиеСсылки.Высота = 1;
	ДекорацияКопированиеСсылки.Картинка = БиблиотекаКартинок.КопированиеСтрок;
	ДекорацияКопированиеСсылки.УстановитьДействие("Нажатие","Подключаемый_КопированиеСсылкиНажатие");
	
	ВсплывающаяКодДляСайта = Элементы.Добавить("ВсплывающаяКодДляСайта", Тип("ГруппаФормы"), Элементы.ГруппаКодДляСайта);
	ВсплывающаяКодДляСайта.Вид=ВидГруппыФормы.ОбычнаяГруппа;
	ВсплывающаяКодДляСайта.ОтображатьЗаголовок = Истина;
	ВсплывающаяКодДляСайта.Заголовок = НСтр("ru='Код для сайта'");
	ВсплывающаяКодДляСайта.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ВсплывающаяКодДляСайта.ШрифтЗаголовка=Новый Шрифт(,10);
	ВсплывающаяКодДляСайта.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылки;
	ВсплывающаяКодДляСайта.ОтображениеУправления=ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
	ВсплывающаяКодДляСайта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементПолеКод = Элементы.Добавить("ПолеКодДляСайта", Тип("ПолеФормы"), ВсплывающаяКодДляСайта);
	ЭлементПолеКод.ПутьКДанным = "СозданныеФормы[" + ИндексТекущейФормы + "].КодДляСайта";
	ЭлементПолеКод.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементПолеКод.Заголовок = НСтр("ru = 'Разместите код у себя на сайте'");
	ЭлементПолеКод.Вид=ВидПоляФормы.ПолеВвода;
	ЭлементПолеКод.МногострочныйРежим = Истина;
	ЭлементПолеКод.Высота = 2;
	ЭлементПолеКод.РастягиватьПоВертикали = Ложь;
	ЭлементПолеКод.АвтоМаксимальнаяШирина = Ложь;
	ЭлементПолеКод.МаксимальнаяШирина     = 45;
	ЭлементПолеКод.ТолькоПросмотр = Истина;
	
	ДекорацияКопированиеКодаДляСайта = Элементы.Добавить("ДекорацияКопированиеКодаДляСайта",Тип("ДекорацияФормы"),Элементы.ГруппаКодДляСайта);
	ДекорацияКопированиеКодаДляСайта.Вид=ВидДекорацииФормы.Картинка;
	ДекорацияКопированиеКодаДляСайта.Гиперссылка = Истина;
	ДекорацияКопированиеКодаДляСайта.Ширина = 2;
	ДекорацияКопированиеКодаДляСайта.Высота = 1;
	ДекорацияКопированиеКодаДляСайта.Картинка = БиблиотекаКартинок.КопированиеСтрок;
	ДекорацияКопированиеКодаДляСайта.УстановитьДействие("Нажатие","Подключаемый_КопированиеКодаДляСайтаНажатие");
	
	ГруппаШиринаВысота = Элементы.Добавить("ГруппаШиринаВысота", Тип("ГруппаФормы"), ВсплывающаяКодДляСайта);
	ГруппаШиринаВысота.Вид=ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШиринаВысота.ОтображатьЗаголовок = Ложь;
	ГруппаШиринаВысота.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Двойной;
	
	ЭлементПолеШирина = Элементы.Добавить("ПолеШирина", Тип("ПолеФормы"), ГруппаШиринаВысота);
	ЭлементПолеШирина.ПутьКДанным = "СозданныеФормы[" + ИндексТекущейФормы + "].Ширина";
	ЭлементПолеШирина.Заголовок = НСтр("ru = 'Ширина формы'");
	ЭлементПолеШирина.Вид=ВидПоляФормы.ПолеВвода;
	ЭлементПолеШирина.РастягиватьПоВертикали = Ложь;
	ЭлементПолеШирина.АвтоМаксимальнаяШирина = Ложь;
	ЭлементПолеШирина.МаксимальнаяШирина     = 5;
	ЭлементПолеШирина.УстановитьДействие("ПриИзменении","Подключаемый_ШиринаПриИзменении");
	
	ЭлементПолеВысота = Элементы.Добавить("ВысотаФормы", Тип("ПолеФормы"), ГруппаШиринаВысота);
	ЭлементПолеВысота.ПутьКДанным = "СозданныеФормы[" + ИндексТекущейФормы + "].Высота";
	ЭлементПолеВысота.Заголовок = НСтр("ru = 'Высота формы'");
	ЭлементПолеВысота.Вид=ВидПоляФормы.ПолеВвода;
	ЭлементПолеВысота.РастягиватьПоВертикали = Ложь;
	ЭлементПолеВысота.АвтоМаксимальнаяШирина = Ложь;
	ЭлементПолеВысота.МаксимальнаяШирина     = 5;
	ЭлементПолеВысота.УстановитьДействие("ПриИзменении","Подключаемый_ВысотаПриИзменении");
	
	ВсплывающаяГруппаОтветыНаФорму = Элементы.Добавить("ВсплывающаяГруппаОтветыНаФорму", Тип("ГруппаФормы"), Элементы.ГруппаОтветыНаФорму);
	ВсплывающаяГруппаОтветыНаФорму.Вид=ВидГруппыФормы.ОбычнаяГруппа;
	ВсплывающаяГруппаОтветыНаФорму.ОтображатьЗаголовок = Истина;
	ВсплывающаяГруппаОтветыНаФорму.Заголовок = НСтр("ru='Ответы'");
	ВсплывающаяГруппаОтветыНаФорму.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ВсплывающаяГруппаОтветыНаФорму.ШрифтЗаголовка=Новый Шрифт(,10);
	ВсплывающаяГруппаОтветыНаФорму.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылки;
	ВсплывающаяГруппаОтветыНаФорму.ОтображениеУправления=ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
	ВсплывающаяГруппаОтветыНаФорму.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЗаголовокСсылкаНаОтветы = Элементы.Добавить("ЗаголовокСсылкаНаОтветы",Тип("ДекорацияФормы"),ВсплывающаяГруппаОтветыНаФорму);
	ЗаголовокСсылкаНаОтветы.Вид=ВидДекорацииФормы.Надпись;
	ЗаголовокСсылкаНаОтветы.Заголовок = НСтр("ru = 'Ссылка для просмотра ответов:'");
	
	ДекорацияСсылкаНаОтветы = Элементы.Добавить("ДекорацияСсылкаНаОтветы",Тип("ДекорацияФормы"),ВсплывающаяГруппаОтветыНаФорму);
	ДекорацияСсылкаНаОтветы.Вид=ВидДекорацииФормы.Надпись;
	ДекорацияСсылкаНаОтветы.Гиперссылка = Истина;
	ДекорацияСсылкаНаОтветы.Заголовок = СозданныеФормы[ИндексТекущейФормы].СсылкаНаОтветы;
	ДекорацияСсылкаНаОтветы.УстановитьДействие("Нажатие","Подключаемый_НажатиеНаСсылкуОтветов");
	ДекорацияСсылкаНаОтветы.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияСсылкаНаОтветы.МаксимальнаяШирина = 27;
	ДекорацияСсылкаНаОтветы.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылку(Элемент)
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущаяСтрока.СсылкаНаФорму);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуОтветов(Элемент)
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущаяСтрока.СсылкаНаОтветы);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КопированиеКодаДляСайтаНажатие(Элемент)
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ОбщегоНазначенияБЭДКлиент.СкопироватьВБуферОбмена(ТекущаяСтрока.КодДляСайта, НСтр("ru = 'Код для сайта скопирован'"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КопированиеСсылкиНажатие(Элемент)
	
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ОбщегоНазначенияБЭДКлиент.СкопироватьВБуферОбмена(ТекущаяСтрока.СсылкаНаФорму, НСтр("ru = 'Ссылка на форму скопирована'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШиринаПриИзменении(Элемент)
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ТекущаяСтрока.КодДляСайта = КодДляСайта(ТекущаяСтрока.СсылкаНаФорму, ТекущаяСтрока.Ширина, ТекущаяСтрока.Высота);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВысотаПриИзменении(Элемент)
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ТекущаяСтрока.КодДляСайта = КодДляСайта(ТекущаяСтрока.СсылкаНаФорму, ТекущаяСтрока.Ширина, ТекущаяСтрока.Высота);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокПолей(СписокТиповПолей)
	
	СписокТиповПолей.Добавить(ТипСтрока(), НСтр("ru='Текст (строка)'"),,КартинкаПоТипу(ТипСтрока()));
	СписокТиповПолей.Добавить(ТипАбзац(),НСтр("ru='Текст (абзац)'"),,КартинкаПоТипу(ТипАбзац()));
	СписокТиповПолей.Добавить(ОдинИзСписка(), НСтр("ru='Один из списка'"),,КартинкаПоТипу(ОдинИзСписка()));
	СписокТиповПолей.Добавить(НесколькоИзСписка(), НСтр("ru='Несколько из списка'"),,КартинкаПоТипу(НесколькоИзСписка()));
	СписокТиповПолей.Добавить(РаскрывающийсяСписок(), НСтр("ru='Раскрывающийся список'"),,КартинкаПоТипу(РаскрывающийсяСписок()));
	СписокТиповПолей.Добавить(ТипДата(), НСтр("ru='Дата'"),,КартинкаПоТипу(ТипДата()));
	СписокТиповПолей.Добавить(ТипВремя(), НСтр("ru='Время'"),,КартинкаПоТипу(ТипВремя()));
	СписокТиповПолей.Добавить(ТипТовар(), НСтр("ru='Товар/Услуга'"),,КартинкаПоТипу(ТипТовар()));
	
КонецФункции

&НаСервере
Процедура ДобавитьПоляВариантов(ИндексПоляКонструктора, ИндексТекущейФормы)
	
	ПоляТекущейФормы = СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяФормаКонструктора));
	ИндексТекущейФормы = СозданныеФормы.Индекс(ПоляТекущейФормы[0]);
	ПоляКонструктораТекущее = СозданныеФормы[ИндексТекущейФормы].ПоляКонструктора;
	
	ИдентификаторВарианта = ПоляКонструктораТекущее[ИндексПоляКонструктора].ИдентификаторСтроки;
	ВариантыОтветовПоля = СозданныеФормы[ИндексТекущейФормы].ВариантыОтветов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторВарианта));
	
	ИндексДляЗаголовка = 1;
	
	Для Каждого Вариант Из ВариантыОтветовПоля Цикл
		
		ИндексВарианта = СозданныеФормы[ИндексТекущейФормы].ВариантыОтветов.Индекс(Вариант);
		ГруппаВариантОтвета = Элементы.Добавить("ГруппаПоле_" + ИндексПоляКонструктора + "_ВариантОтвета_"+ИндексВарианта, Тип("ГруппаФормы"), Элементы["ГруппаПолеКонструктора_"+ИндексПоляКонструктора]);
		ГруппаВариантОтвета.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВариантОтвета.ОтображатьЗаголовок = Ложь;
		
		ДекорацияОтступВарианта = Элементы.Добавить("ОтступПоле_" + ИндексПоляКонструктора+"_Вариант_"+ИндексВарианта, Тип("ДекорацияФормы"), ГруппаВариантОтвета);
		ДекорацияОтступВарианта.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияОтступВарианта.Заголовок = "";
		ДекорацияОтступВарианта.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияОтступВарианта.МаксимальнаяШирина = 8;
		ДекорацияОтступВарианта.Ширина = 8;
		ДекорацияОтступВарианта.РастягиватьПоГоризонтали = Истина;
		
		ПолеВарианта = Элементы.Добавить("Поле_"+ИндексПоляКонструктора+"_ВариантОтвета_" +ИндексВарианта , Тип("ПолеФормы"), ГруппаВариантОтвета);
		ПолеВарианта.ПутьКДанным = "СозданныеФормы["+ИндексТекущейФормы+"].ВариантыОтветов[" + ИндексВарианта + "].ВариантОтвета";
		ПолеВарианта.Вид=ВидПоляФормы.ПолеВвода;
		ПолеВарианта.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеВарианта.Заголовок = НСтр("ru = 'Вариант'") + Символы.НПП +ИндексДляЗаголовка;
		ПолеВарианта.ПодсказкаВвода = НСтр("ru = 'Вариант ответа'");
		ПолеВарианта.АвтоМаксимальнаяШирина = Ложь;
		ПолеВарианта.МаксимальнаяШирина     = 46;
		ПолеВарианта.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВариантаПриИзменении");
		
		ПереместитьОтветВверх = Элементы.Добавить("ВверхПоле_" + ИндексПоляКонструктора+"_Вариант_"+ИндексВарианта, Тип("ДекорацияФормы"), ГруппаВариантОтвета);
		ПереместитьОтветВверх.Вид=ВидДекорацииФормы.Картинка;
		ПереместитьОтветВверх.Картинка = БиблиотекаКартинок.СтрелкаВверх;
		ПереместитьОтветВверх.Ширина = 2;
		ПереместитьОтветВверх.Высота = 1;
		ПереместитьОтветВверх.Гиперссылка = Истина;
		ПереместитьОтветВверх.УстановитьДействие("Нажатие","Подключаемый_ПереместитьВариантВверх");
		
		ПереместитьОтветВниз = Элементы.Добавить("ВнизПоле_"+ИндексПоляКонструктора+"_Вариант_"+ИндексВарианта,Тип("ДекорацияФормы"),ГруппаВариантОтвета);
		ПереместитьОтветВниз.Вид=ВидДекорацииФормы.Картинка;
		ПереместитьОтветВниз.Ширина = 2;
		ПереместитьОтветВниз.Высота = 1;
		ПереместитьОтветВниз.Гиперссылка = Истина;
		ПереместитьОтветВниз.Картинка = БиблиотекаКартинок.СтрелкаВниз;
		ПереместитьОтветВниз.УстановитьДействие("Нажатие","Подключаемый_ПереместитьВариантВниз");
		
		ДекорацияУдалитьПоле = Элементы.Добавить("УдалитьПоле_"+ИндексПоляКонструктора+"_Вариант_"+ИндексВарианта,Тип("ДекорацияФормы"),ГруппаВариантОтвета);
		ДекорацияУдалитьПоле.Вид=ВидДекорацииФормы.Картинка;
		ДекорацияУдалитьПоле.Ширина = 1;
		ДекорацияУдалитьПоле.Высота = 1;
		ДекорацияУдалитьПоле.Картинка = БиблиотекаКартинок.Закрыть;
		ДекорацияУдалитьПоле.Гиперссылка = Истина;
		ДекорацияУдалитьПоле.РазмерКартинки=РазмерКартинки.Пропорционально;
		ДекорацияУдалитьПоле.УстановитьДействие("Нажатие","Подключаемый_ДекорацияУдалитьВариантНажатие");
		ИндексДляЗаголовка = ИндексДляЗаголовка + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаПоля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = ТипТовар() Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборНоменклатурыЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.КонтактныеФормыGoogle.Форма.ФормаВыборНоменклатуры",,,,,,ОповещениеОЗакрытии);
		Возврат;
	КонецЕсли;
	
	НовыйЭлементКонструктора = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Добавить();
	НовыйЭлементКонструктора.ТипПоля = Результат.Значение;
	НовыйЭлементКонструктора.ИдентификаторСтроки = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Индекс(НовыйЭлементКонструктора);
	СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].Модифицирована = Истина;
	
	ОбработатьВыборТипаПоляСервер(Результат.Значение, НовыйЭлементКонструктора.ИдентификаторСтроки);
	ТекущийЭлемент = Элементы["ПолеКонструктора_"+СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Индекс(НовыйЭлементКонструктора)];
КонецПроцедуры

&НаКлиенте
Процедура ВыборНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборНоменклатурыСервер(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ВыборНоменклатурыСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СозданнаяФорма = СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяФормаКонструктора));
		ИндексТекущейФормы = СозданныеФормы.Индекс(СозданнаяФорма[0]);
		Если ДополнительныеПараметры = Неопределено Тогда
			НовыйЭлементКонструктора = СозданныеФормы[ИндексТекущейФормы].ПоляКонструктора.Добавить();
		Иначе
			НовыйЭлементКонструктора = СозданныеФормы[ИндексТекущейФормы].ПоляКонструктора.Получить(ДополнительныеПараметры.Индекс);
		КонецЕсли;
		НовыйЭлементКонструктора.ТипПоля = Результат.ТипПоля;
		НовыйЭлементКонструктора.Заголовок = Результат.Заголовок;
		НовыйЭлементКонструктора.ИдентификаторСтроки = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Индекс(НовыйЭлементКонструктора);
		НовыйЭлементКонструктора.ВидЦен = Результат.ВидЦен;
		НовыйЭлементКонструктора.ВидОтбораНоменклатура = Результат.ОтборНоменклатуры;
		НовыйЭлементКонструктора.ЭтоТовар = Истина;
		НовыйЭлементКонструктора.КаталогТоваров = Результат.АдресВХранилище;
		СозданнаяФорма[0].Модифицирована = Истина;
	КонецЕсли;
	
	ОбновитьЭлементыРедактораИФорм();
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТипаПоляСервер(Результат, ИдентификаторСтроки)
	
	Если Результат = РаскрывающийсяСписок() ИЛИ Результат = ОдинИзСписка() 
				ИЛИ Результат = НесколькоИзСписка() Тогда
		СозданнаяФорма = СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяФормаКонструктора));
		ИндексТекущейФормы = СозданныеФормы.Индекс(СозданнаяФорма[0]);
		
		НовыйВариант = СозданныеФормы[ИндексТекущейФормы].ВариантыОтветов.Добавить();
		НовыйВариант.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	ОбновитьЭлементыРедактораИФорм();
	
КонецПроцедуры

#Область ТипыПолейКонструктора

&НаСервере
Функция ТипСтрока()
	Возврат Перечисления.ТипыПолейКонструктораФорм.ТекстСтрока;
КонецФункции

&НаСервере
Функция ТипАбзац()
	Возврат Перечисления.ТипыПолейКонструктораФорм.ТекстАбзац;
КонецФункции

&НаСервере
Функция ОдинИзСписка()
	Возврат Перечисления.ТипыПолейКонструктораФорм.ОдинИзСписка;
КонецФункции

&НаСервере
Функция НесколькоИзСписка()
	Возврат Перечисления.ТипыПолейКонструктораФорм.НесколькоИзСписка;
КонецФункции

&НаСервере
Функция РаскрывающийсяСписок()
	Возврат Перечисления.ТипыПолейКонструктораФорм.РаскрывающийсяСписок;
КонецФункции

&НаСервере
Функция ТипДата()
	Возврат Перечисления.ТипыПолейКонструктораФорм.Дата;
КонецФункции

&НаСервере
Функция ТипВремя()
	Возврат Перечисления.ТипыПолейКонструктораФорм.Время;
КонецФункции

&НаСервере
Функция ТипТовар()
	Возврат Перечисления.ТипыПолейКонструктораФорм.Товар;
КонецФункции

#КонецОбласти

&НаСервере
Функция КартинкаПоТипу(ТипПоля = Неопределено, ПолеКонструктора = Неопределено)
	
	Если ПолеКонструктора = Неопределено Тогда
		Тип = ТипПоля;
	Иначе
		Тип = ПолеКонструктора.ТипПоля;
		Если ПолеКонструктора.ЭтоТовар Тогда
			Возврат БиблиотекаКартинок.КонтактныеФормыТовар;
		КонецЕсли;
	КонецЕсли;

	Если Тип = ТипТовар() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыТовар;
	КонецЕсли;
		
	Если Тип = ТипСтрока() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыТекстСтрока;
	КонецЕсли;
	
	Если Тип = ТипАбзац() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыТекстАбзац;
	КонецЕсли;

	Если Тип = ОдинИзСписка() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыОдинИзСписка;
	КонецЕсли;
	
	Если Тип = НесколькоИзСписка() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыНесколькоИзСписка;
	КонецЕсли;
	
	Если Тип = РаскрывающийсяСписок() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыРаскрывающийсяСписок;
	КонецЕсли;
	
	Если Тип = ТипДата() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыДата;
	КонецЕсли;
	
	Если Тип = ТипВремя() Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыВремя;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДекорацияУдалитьПолеНажатие(Элемент)
	
	ИндексСтрокиКонструктора = Число(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_")));
	ТекущаяСтрокаФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	Отбор = Новый Структура("ИдентификаторСтроки", ТекущаяСтрокаФормы.ПоляКонструктора[ИндексСтрокиКонструктора].ИдентификаторСтроки);
	ВариантыСтроки = ТекущаяСтрокаФормы.ВариантыОтветов.НайтиСтроки(Отбор);
	
	Для Каждого Вариант Из ВариантыСтроки Цикл
		ИндексВарианта = ТекущаяСтрокаФормы.ВариантыОтветов.Индекс(Вариант);
		ТекущаяСтрокаФормы.ВариантыОтветов.Удалить(ТекущаяСтрокаФормы.ВариантыОтветов[ИндексВарианта]);
	КонецЦикла;
	
	СтрокаКонструктора = ТекущаяСтрокаФормы.ПоляКонструктора.Получить(ИндексСтрокиКонструктора);
	ТекущаяСтрокаФормы.ПоляКонструктора.Удалить(ИндексСтрокиКонструктора);
	ТекущаяСтрокаФормы.Модифицирована = Истина;
	ОбновитьЭлементыРедактораИФорм();
	
	Индекс = ИндексСтрокиКонструктора-1;
	Если Индекс < 0 Тогда
		Индекс = Индекс+1;
	КонецЕсли;
	Если Индекс < СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Количество() Тогда
		ТекущийЭлемент = Элементы["ПолеКонструктора_"+Индекс];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияУдалитьВариантНажатие(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексСтроки = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексВарианта = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
		
	СтрокаВарианта = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов[ИндексВарианта];
	СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.Удалить(ИндексВарианта);
	
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьЭлементыРедактораИФорм();
		
	Индекс = ИндексСтроки-1;
	Если Индекс < 0 Тогда
		Индекс = Индекс+1;
	КонецЕсли;

	Если Индекс < СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Количество() Тогда
		ТекущийЭлемент = Элементы["ПолеКонструктора_"+Индекс];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьПолеВверх(Элемент)
	ИндексСтрокиКонструктора = Число(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_")));
	Если ИндексСтрокиКонструктора <> 0 Тогда
		СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Сдвинуть(ИндексСтрокиКонструктора,-1);
		
		СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
		СтрокаТекущейФормы.Модифицирована = Истина;
		ОбновитьЭлементыРедактораИФорм();
		
		Индекс = ИндексСтрокиКонструктора-1;
		ТекущийЭлемент = Элементы["ПолеКонструктора_"+Индекс];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьПолеВниз(Элемент)
	ИндексСтрокиКонструктора = Число(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_")));
	Если ИндексСтрокиКонструктора <> СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Количество()-1 Тогда
		СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора.Сдвинуть(ИндексСтрокиКонструктора,1);
		
		СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
		СтрокаТекущейФормы.Модифицирована = Истина;
		ОбновитьЭлементыРедактораИФорм();
		
		Индекс = ИндексСтрокиКонструктора+1;
		ТекущийЭлемент = Элементы["ПолеКонструктора_"+Индекс];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьВариантВверх(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексСтроки = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексВарианта = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	СтрокаКонструктора = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора[ИндексСтроки];
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторСтроки", СтрокаКонструктора.ИдентификаторСтроки);
	Варианты = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.НайтиСтроки(Отбор);

	Если ИндексВарианта <> СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.Индекс(Варианты[0]) Тогда
		СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.Сдвинуть(ИндексВарианта,-1);
		Индекс = ИндексВарианта - 1;
		
		СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
		СтрокаТекущейФормы.Модифицирована = Истина;
		ОбновитьЭлементыРедактораИФорм();
		
		ТекущийЭлемент = Элементы["Поле_"+ИндексСтроки+"_ВариантОтвета_" +Индекс];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьВариантВниз(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексСтроки = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексВарианта = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	СтрокаКонструктора = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора[ИндексСтроки];
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторСтроки", СтрокаКонструктора.ИдентификаторСтроки);
	Варианты = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.НайтиСтроки(Отбор);

	Если ИндексВарианта <> СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.Индекс(Варианты[Варианты.ВГраница()]) Тогда
		СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов.Сдвинуть(ИндексВарианта,1);
		Индекс = ИндексВарианта + 1;
		
		СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
		СтрокаТекущейФормы.Модифицирована = Истина;
		ОбновитьЭлементыРедактораИФорм();
		ТекущийЭлемент = Элементы["Поле_"+ИндексСтроки+"_ВариантОтвета_" +Индекс];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаголовокПриИзменении(Элемент)
	
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТекущейФормы.Наименование) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТекущейФормы.Ссылка) Тогда
		СтрокаТекущейФормы.Наименование = СтрокаТекущейФормы.Заголовок;
	КонецЕсли;
	
	ОбновитьЭлементыСозданныхФорм();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеПриИзменении(Элемент)
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеПриИзменении(Элемент)
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АдресЭППриИзменении(Элемент)
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьСсылкуНаПриложение();
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСсылкуНаПриложение()
	
	ТекущаяСтрока = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииКонтактныхФорм.УчетнаяЗаписьЭП КАК УчетнаяЗаписьЭП,
	|	НастройкиИнтеграцииКонтактныхФорм.СсылкаНаПриложение КАК СсылкаНаПриложение
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииКонтактныхФорм КАК НастройкиИнтеграцииКонтактныхФорм
	|ГДЕ
	|	НастройкиИнтеграцииКонтактныхФорм.УчетнаяЗаписьЭП = &АдресЭП";
	
	Запрос.УстановитьПараметр("АдресЭП", ТекущаяСтрока.АдресЭП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СсылкаНаПриложение = "";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СсылкаНаПриложение = Выборка.СсылкаНаПриложение;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("АдресЭП", ТекущаяСтрока.АдресЭП);
	Отбор.Вставить("СсылкаПриложения", СсылкаНаПриложение);
	
	ФормыПоАдресуЭП = СозданныеФормы.НайтиСтроки(Отбор);
	ПревышенЛимит = ФормыПоАдресуЭП.Количество()>=20 И НЕ ЗначениеЗаполнено(ТекущаяФормаКонструктора);
	ИнтеграцияНеНастроена = НЕ ЗначениеЗаполнено(СсылкаНаПриложение);
	ЕстьФормы = СозданныеФормы.Количество() > 1;
	
	Элементы.ГруппаНастройкаИнтеграции.Видимость = ИнтеграцияНеНастроена ИЛИ ПревышенЛимит;
	Элементы.ГруппаПодсказкаШаг2.Видимость = (ЕстьФормы И ИнтеграцияНеНастроена) ИЛИ ПревышенЛимит;
	Элементы.ДекорацияПодсказкаШаг2.Заголовок = ТекстПодсказкиИнтеграции(ИнтеграцияНеНастроена, ПревышенЛимит);
	
	Элементы.ГруппаПоложительныйОтвет.Видимость = ЗначениеЗаполнено(СсылкаНаПриложение) И НЕ ПревышенЛимит;
	Элементы.ОпубликоватьФорму.Доступность      = ЗначениеЗаполнено(СсылкаНаПриложение) И НЕ ПревышенЛимит;
	
КонецПроцедуры

&НаСервере
Функция ТекстПодсказкиИнтеграции(ИнтеграцияНеНастроена, ПревышенЛимит)
	
	Если ПревышенЛимит Тогда
		Возврат НСтр("ru = 'Превышен лимит создания форм. Удалите неиспользуемые или настройте интеграцию заново'");
	КонецЕсли;
	
	Если ИнтеграцияНеНастроена Тогда
		Возврат НСтр("ru = 'Для заданной электронной почты интеграция не настроена'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолеКонструктораПриИзменении(Элемент)
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРедактораИФорм()
	ОбновитьЭлементыФормЗаявок();
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВариантОтветаПриИзменении(Элемент)
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	СтрокаТекущейФормы.Модифицирована = Истина;
	ОбновитьЭлементыСозданныхФорм();
КонецПроцедуры

&НаСервере
Функция ОпубликоватьФормуНаСервере()
	
	Соединение = Новый HTTPСоединение("script.google.com",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	СсылкаДляПодключения = Прав(СсылкаНаПриложение, СтрДлина(СсылкаНаПриложение) - СтрНайти(СсылкаНаПриложение,"/macros") + 1);
	Запрос = Новый HTTPЗапрос(СсылкаДляПодключения, Заголовки);
	
	ПоляДляЗапроса = Новый Массив;
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	ВариантыДляЗапроса = Новый Массив;
	
	Для Каждого ПолеКонструктора Из СтрокаТекущейФормы.ПоляКонструктора Цикл
		СтруктураКонструктораФормы = Новый Структура;
		СтруктураКонструктораФормы.Вставить("title", ПолеКонструктора.Заголовок);
		СтруктураКонструктораФормы.Вставить("type", ТипПоляКонструктораДляЗапроса(ПолеКонструктора.ТипПоля));
		СтруктураКонструктораФормы.Вставить("isRequired", ?(ПолеКонструктора.Обязательно,"true","false"));
		СтруктураКонструктораФормы.Вставить("id",ПолеКонструктора.ИдентификаторСтроки);
		ПоляДляЗапроса.Добавить(СтруктураКонструктораФормы);
		
		Если ПолеКонструктора.ЭтоТовар Тогда
			ТаблицаТоваров = ПолучитьИзВременногоХранилища(ПолеКонструктора.КаталогТоваров);
			
			Для Каждого Товар Из ТаблицаТоваров Цикл
				МассивСтрок = Новый Массив;
				Если ЗначениеЗаполнено(Товар.Артикул) Тогда
					МассивСтрок.Добавить(Строка(Товар.Артикул));
				КонецЕсли;
				Если ЗначениеЗаполнено(Товар.Наименование)Тогда
					МассивСтрок.Добавить(Строка(Товар.Наименование));
				КонецЕсли;
				Если ЗначениеЗаполнено(Товар.Цена) Тогда
					МассивСтрок.Добавить(Строка(Товар.Цена) + Символы.НПП+ Строка(Товар.Валюта));
				КонецЕсли;
				
				СтруктураВариант = Новый Структура;
				СтруктураВариант.Вставить("title",СтрСоединить(МассивСтрок,", ") + " ;");
				СтруктураВариант.Вставить("id",ПолеКонструктора.ИдентификаторСтроки);
				ВариантыДляЗапроса.Добавить(СтруктураВариант);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Вариант Из СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ВариантыОтветов Цикл
		СтруктураВариант = Новый Структура;
		СтруктураВариант.Вставить("title",Вариант.ВариантОтвета);
		СтруктураВариант.Вставить("id",Вариант.ИдентификаторСтроки);
		ВариантыДляЗапроса.Добавить(СтруктураВариант);
	КонецЦикла;
		
	ПараметрыТела = Новый Соответствие;
	Если НЕ ЗначениеЗаполнено(СтрокаТекущейФормы.Наименование) Тогда
		СтрокаТекущейФормы.Наименование = СтрокаТекущейФормы.Заголовок;
	КонецЕсли;
	
	ПараметрыТела.Вставить("formName", СтрокаТекущейФормы.Наименование);
	ПараметрыТела.Вставить("formItems", ОтправкаЗапросов.СоздатьJSONИзСтруктуры(ПоляДляЗапроса));
	ПараметрыТела.Вставить("formChoices", ОтправкаЗапросов.СоздатьJSONИзСтруктуры(ВариантыДляЗапроса));
	ПараметрыТела.Вставить("formTitle", СтрокаТекущейФормы.Заголовок);
	ПараметрыТела.Вставить("formDescription", СтрокаТекущейФормы.Описание);
	ПараметрыТела.Вставить("itemsValue", СтрокаТекущейФормы.ПоляКонструктора.Количество());
	ПараметрыТела.Вставить("choicesValue", ВариантыДляЗапроса.Количество());
	ПараметрыТела.Вставить("formClosedMsg", СтрокаТекущейФормы.ТекстПослеОтправки);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяФормаКонструктора) Тогда
		ПараметрыТела.Вставить("method", "create");
	Иначе
		ПараметрыТела.Вставить("method", "edit");
		ПараметрыТела.Вставить("formId", СтрокаТекущейФормы.ИдентификаторФормы);
	КонецЕсли;

	ПараметрыТелаМассив = Новый Массив;
	Для каждого КлючЗначение Из ПараметрыТела Цикл
		ПараметрТела = КлючЗначение.Ключ + "=" + ОтправкаЗапросов.ЗначениеПараметраДляURL(КлючЗначение.Значение);
		ПараметрыТелаМассив.Добавить(ПараметрТела);
	КонецЦикла;
	
	ТелоЗапроса = СтрСоединить(ПараметрыТелаМассив, "&");
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	ФормаСоздана = Ложь;
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		ФормаСоздана = СоздатьФормуВУнф(Ответ);
	КонецЕсли;
	
	Возврат ФормаСоздана;
	
КонецФункции

&НаСервере
Функция ТипПоляКонструктораДляЗапроса(Тип)
	
	Если Тип = ТипСтрока() Тогда
		Возврат "text";
	КонецЕсли;
	
	Если Тип = ТипАбзац() Тогда
		Возврат "paragraphText";
	КонецЕсли;

	Если Тип = ОдинИзСписка() Тогда
		Возврат "multipleChoice";
	КонецЕсли;
	
	Если Тип = НесколькоИзСписка() Тогда
		Возврат "checkbox";
	КонецЕсли;
	
	Если Тип = РаскрывающийсяСписок() Тогда
		Возврат "list";
	КонецЕсли;
	
	Если Тип = ТипДата() Тогда
		Возврат "date";
	КонецЕсли;
	
	Если Тип = ТипВремя() Тогда
		Возврат "time";
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПриложение = Результат;
	Если ЗначениеЗаполнено(СсылкаНаПриложение) И СтрНайти(СсылкаНаПриложение,"script.google.com/macros/s/") <> 0 Тогда
		ОбработатьЗакрытиеФормыНастроекНаСервере(СсылкаНаПриложение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗакрытиеФормыНастроекНаСервере(СсылкаАвторизации)
	
	Элементы.ОпубликоватьФорму.Доступность = Истина;
	Элементы.ГруппаНастройкаИнтеграции.Видимость = Ложь;
	Элементы.ГруппаПодсказкаШаг2.Видимость = Ложь;
	Элементы.ГруппаПоложительныйОтвет.Видимость = Истина;
	
	СтрокаТекущейФормы = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)];
	
	НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииКонтактныхФорм.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.УчетнаяЗаписьЭП.Установить(СтрокаТекущейФормы.АдресЭП); 
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.УчетнаяЗаписьЭП = СтрокаТекущейФормы.АдресЭП;
	НоваяЗапись.СсылкаНаПриложение = СсылкаАвторизации;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Функция СоздатьФормуВУнф(Ответ)
	
	ФормаСоздана = Ложь;
	Результат = Ответ.ПолучитьТелоКакСтроку();
	Результат = ДекодироватьURL(Ответ.ПолучитьТелоКакСтроку());
	ИндексИдентификатора = СтрНайти(Результат,"FormId:");
	
	Если ИндексИдентификатора > 0 Тогда
		
		ИндексИдентификатора = ИндексИдентификатора+7;
		КонецСтроки = СтрНайти(Результат,"EndFormId");
		ИдентификаторФормы = Сред(Результат, ИндексИдентификатора, КонецСтроки - ИндексИдентификатора);
		
		ИндексСсылки = СтрНайти(Результат,"URL:") + 4;
		КонецСтроки = СтрНайти(Результат,"EndUrl",,ИндексСсылки);
		СсылкаНаФорму = Сред(Результат, ИндексСсылки, КонецСтроки-ИндексСсылки);
		
		ИндексОтветов = СтрНайти(Результат,"FormAnswers:") + 12;
		КонецСтроки = СтрНайти(Результат,"EndFormAnswers");
		
		СсылкаДляОтветов = Сред(Результат, ИндексОтветов, КонецСтроки-ИндексОтветов);
		
		ИндексТекущейФормы = ИндексТекущейФормы(ЭтотОбъект);
				
		Если ЗначениеЗаполнено(ТекущаяФормаКонструктора) Тогда
			НовыйКонструктор = ТекущаяФормаКонструктора.Ссылка.ПолучитьОбъект();
		Иначе
			НовыйКонструктор = Справочники.КонтактныеФормыGoogle.СоздатьЭлемент();
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(НовыйКонструктор, СозданныеФормы[ИндексТекущейФормы],,"ПоляКонструктора, ВариантыОтветов");
		НовыйКонструктор.ИдентификаторФормы = ИдентификаторФормы;
		
		Если НЕ ЗначениеЗаполнено(ТекущаяФормаКонструктора)Тогда
			НовыйКонструктор.Ширина = 640;
			НовыйКонструктор.Высота = 1083;
		КонецЕсли;

		НовыйКонструктор.КодДляСайта    = КодДляСайта(СсылкаНаФорму, НовыйКонструктор.Ширина, НовыйКонструктор.Высота);
		НовыйКонструктор.СсылкаНаФорму  = СсылкаНаФорму;
		НовыйКонструктор.Наименование   = СозданныеФормы[ИндексТекущейФормы].Наименование;
		НовыйКонструктор.СсылкаНаОтветы = СсылкаДляОтветов;
		НовыйКонструктор.СсылкаПриложения = СсылкаНаПриложение;
		
		НовыйКонструктор.ПоляКонструктора.Очистить();
		НовыйКонструктор.ВариантыОтветов.Очистить();
		
		Для Каждого ПолеКонструктора Из СозданныеФормы[ИндексТекущейФормы].ПоляКонструктора Цикл
			НовоеПолеКонструктора = НовыйКонструктор.ПоляКонструктора.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПолеКонструктора,ПолеКонструктора,,"КаталогТоваров");
			Если ПолеКонструктора.ЭтоТовар Тогда
				КаталогТоваров = ПолучитьИзВременногоХранилища(ПолеКонструктора.КаталогТоваров);
				НовоеПолеКонструктора.КаталогТоваров = Новый ХранилищеЗначения(КаталогТоваров, Новый СжатиеДанных(9));
			КонецЕсли;
		КонецЦикла;
		
		НовыйКонструктор.ВариантыОтветов.Загрузить(СозданныеФормы[ИндексТекущейФормы].ВариантыОтветов.Выгрузить());
		НовыйКонструктор.Записать();
		СозданныеФормы[ИндексТекущейФормы].Модифицирована = Ложь;
		
		ТекущаяФормаКонструктора = НовыйКонструктор.Ссылка;
		Элементы.ДекорацияНазваниеФормы.Заголовок = ТекущаяФормаКонструктора.Наименование;
		ФормаСоздана = Истина;
	КонецЕсли;
	
	ЗаполнитьДанныеСозданныхФорм();
	ОбновитьЭлементыСозданныхФорм();
	ОбновитьЭлементыФормЗаявок();
	Возврат ФормаСоздана;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСозданныхФорм()
	
	МодифицированныеФормыМассив = Новый Массив;
	МодифицированныеФормы = СозданныеФормы.НайтиСтроки(Новый Структура("Модифицирована", Истина));

	Для Каждого МодифицированнаяФорма Из МодифицированныеФормы Цикл
		МодифицированныеФормыМассив.Добавить(МодифицированнаяФорма.Ссылка);
	КонецЦикла;
	
	СозданныеФормы.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеФормыGoogle.Ссылка КАК Ссылка,
	|	КонтактныеФормыGoogle.ВерсияДанных КАК ВерсияДанных,
	|	КонтактныеФормыGoogle.ПометкаУдаления КАК ПометкаУдаления,
	|	КонтактныеФормыGoogle.Код КАК Код,
	|	КонтактныеФормыGoogle.Наименование КАК Наименование,
	|	КонтактныеФормыGoogle.АдресЭП КАК АдресЭП,
	|	КонтактныеФормыGoogle.Заголовок КАК Заголовок,
	|	КонтактныеФормыGoogle.Описание КАК Описание,
	|	КонтактныеФормыGoogle.ТекстПослеОтправки КАК ТекстПослеОтправкиОтвета,
	|	КонтактныеФормыGoogle.ИдентификаторФормы КАК ИдентификаторФормы,
	|	КонтактныеФормыGoogle.КодДляСайта КАК КодДляСайта,
	|	КонтактныеФормыGoogle.Ширина КАК Ширина,
	|	КонтактныеФормыGoogle.Высота КАК Высота,
	|	КонтактныеФормыGoogle.Предопределенный КАК Предопределенный,
	|	КонтактныеФормыGoogle.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	КонтактныеФормыGoogle.Представление КАК Представление,
	|	КонтактныеФормыGoogle.СсылкаНаФорму КАК СсылкаНаФорму,
	|	КонтактныеФормыGoogle.ВариантыОтветов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ВариантОтвета КАК ВариантОтвета
	|	) КАК ВариантыОтветов,
	|	КонтактныеФормыGoogle.ПоляКонструктора.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ТипПоля КАК ТипПоля,
	|		Заголовок КАК Заголовок,
	|		Обязательно КАК Обязательно,
	|		ВидЦен КАК ВидЦен,
	|		КаталогТоваров КАК КаталогТоваров,
	|		ВидОтбораНоменклатура КАК ВидОтбораНоменклатура,
	|		ЭтоТовар КАК ЭтоТовар,
	|		ПолеПоискаУНФ КАК ПолеПоискаУНФ
	|	) КАК ПоляКонструктора,
	|	КонтактныеФормыGoogle.СсылкаНаОтветы КАК СсылкаНаОтветы,
	|	КонтактныеФормыGoogle.СсылкаПриложения КАК СсылкаПриложения
	|ИЗ
	|	Справочник.КонтактныеФормыGoogle КАК КонтактныеФормыGoogle
	|ГДЕ
	|	НЕ КонтактныеФормыGoogle.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяФорма = СозданныеФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяФорма,Выборка,,"ПоляКонструктора, ВариантыОтветов");
		ПоляКонструктораВыборки = Выборка.ПоляКонструктора.Выбрать();
		Пока ПоляКонструктораВыборки.Следующий() Цикл
			
			НовоеПолеКонструктора = НоваяФорма.ПоляКонструктора.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПолеКонструктора,ПоляКонструктораВыборки,,"КаталогТоваров");
			НовоеПолеКонструктора.КаталогТоваров = ПоместитьВоВременноеХранилище(ПоляКонструктораВыборки.КаталогТоваров.Получить(), Новый УникальныйИдентификатор);
		КонецЦикла;
		НоваяФорма.Модифицирована = МодифицированныеФормыМассив.Найти(ПоляКонструктораВыборки.Ссылка) <> Неопределено;
		НоваяФорма.ВариантыОтветов.Загрузить(Выборка.ВариантыОтветов.Выгрузить());
	КонецЦикла;
		
	ДобавитьПустуюФорму();
	ОбновитьСсылкуНаПриложение();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустуюФорму()
	
	НоваяФорма = СозданныеФормы.Добавить();
	НоваяФорма.Ссылка = Справочники.КонтактныеФормыGoogle.ПустаяСсылка();
	НоваяФорма.АдресЭП = АдресЭПИнтеграции;
	
	НовоеПоле = НоваяФорма.ПоляКонструктора.Добавить();
	НовоеПоле.Заголовок = НСтр("ru = 'ФИО'");
	НовоеПоле.ТипПоля = ТипСтрока();
	НовоеПоле.ИдентификаторСтроки = НоваяФорма.ПоляКонструктора.Индекс(НовоеПоле);
	НовоеПоле.ПолеПоискаУНФ       = "Наименование";
	
	НовоеПоле = НоваяФорма.ПоляКонструктора.Добавить();
	НовоеПоле.Заголовок = НСтр("ru = 'Телефон'");
	НовоеПоле.ТипПоля = ТипСтрока();
	НовоеПоле.ИдентификаторСтроки = НоваяФорма.ПоляКонструктора.Индекс(НовоеПоле);
	НовоеПоле.ПолеПоискаУНФ       = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	НовоеПоле = НоваяФорма.ПоляКонструктора.Добавить();
	НовоеПоле.Заголовок = "E-mail";
	НовоеПоле.ТипПоля = ТипСтрока();
	НовоеПоле.ИдентификаторСтроки = НоваяФорма.ПоляКонструктора.Индекс(НовоеПоле);
	НовоеПоле.ПолеПоискаУНФ       = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
КонецПроцедуры

&НаСервере
Функция УчетнаяЗаписьАдресЭП(АдресЭП)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АдресЭП.Ссылка, "АдресЭлектроннойПочты");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыСозданныхФорм()
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	
	Для ИндексГруппы = 0 По Элементы.СписокСозданныхФорм.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.СписокСозданныхФорм.ПодчиненныеЭлементы[ИндексГруппы]);
	КонецЦикла;

	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для ИндексГруппы = 0 По СозданныеФормы.Количество()-1 Цикл
		Если Команды.Найти("ОткрытьФорму_"+ИндексГруппы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеКоманды.Добавить(Команды.Найти("ОткрытьФорму_"+ИндексГруппы));
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	СтрокаТекущейФормы = СозданныеФормы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяФормаКонструктора));
	ИндексТекущейФормы = СозданныеФормы.Индекс(СтрокаТекущейФормы[0]);
	
	Элементы.ДекорацияВыделениеСозданиеФормы.Видимость = НЕ ЗначениеЗаполнено(ТекущаяФормаКонструктора);
	Элементы.ДекорацияОтступСозданиеФормы.Видимость = ЗначениеЗаполнено(ТекущаяФормаКонструктора);
	Элементы.ГруппаРазмещениеФормы.Видимость = ЗначениеЗаполнено(ТекущаяФормаКонструктора);
	
	Наименование = ?(ЗначениеЗаполнено(ТекущаяФормаКонструктора), СтрокаТекущейФормы[0].Наименование, "Контактные формы (создание)");

	Если СтрокаТекущейФормы[0].Модифицирована Тогда
		Элементы.ДекорацияНазваниеФормы.Заголовок = Наименование + " *";
	Иначе
		Элементы.ДекорацияНазваниеФормы.Заголовок = Наименование;
	КонецЕсли;
	
	
	Для Каждого КонструкторФорм Из СозданныеФормы Цикл
		
		Если НЕ ЗначениеЗаполнено(КонструкторФорм.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКонструктора = СозданныеФормы.Индекс(КонструкторФорм);
		ГруппаСозданнойФормы = Элементы.Добавить("ГруппаСозданнаяФорма_" + ИндексКонструктора, Тип("ГруппаФормы"), Элементы.СписокСозданныхФорм);
		ГруппаСозданнойФормы.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСозданнойФормы.ОтображатьЗаголовок = Ложь;
		ГруппаСозданнойФормы.ГоризонтальныйИнтервал=ИнтервалМеждуЭлементамиФормы.Половинный;
		
		ДекорацияОтступ = Элементы.Добавить("ДекорацияОтступФорма_"+ ИндексКонструктора,Тип("ДекорацияФормы"),ГруппаСозданнойФормы);
		ДекорацияОтступ.Вид=ВидДекорацииФормы.Картинка;
		ДекорацияОтступ.Ширина = 1;
		ДекорацияОтступ.Высота = 1;
		ДекорацияОтступ.РазмерКартинки = РазмерКартинки.Растянуть;
		
		Если ИндексКонструктора = ИндексТекущейФормы Тогда
			ДекорацияОтступ.Картинка = БиблиотекаКартинок.ВыделениеГруппы;
		КонецЕсли;
		
		ИконкаПоля = Элементы.Добавить("ИконкаФормы_"+ ИндексКонструктора,Тип("ДекорацияФормы"),ГруппаСозданнойФормы);
		ИконкаПоля.Вид=ВидДекорацииФормы.Картинка;
		ИконкаПоля.Ширина = 2;
		ИконкаПоля.Высота = 1;
		ИконкаПоля.Картинка = КартинкаПоТипуФормы(КонструкторФорм);
		ИконкаПоля.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		
		ДекорацияНазваниеФормы = Элементы.Добавить("ДекорацияНазваниеФормы_"+ ИндексКонструктора,Тип("КнопкаФормы"),ГруппаСозданнойФормы);
		ДекорацияНазваниеФормыКоманда = ЭтаФорма.Команды.Добавить("ОткрытьФорму_" + ИндексКонструктора);
		ДекорацияНазваниеФормыКоманда.Действие = "ВыборФормы";
		ДекорацияНазваниеФормыКоманда.Подсказка = "";
		ДекорацияНазваниеФормы.ИмяКоманды = ДекорацияНазваниеФормыКоманда.Имя;
		ДекорацияНазваниеФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		ДекорацияНазваниеФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Если КонструкторФорм.Модифицирована Тогда
			ДекорацияНазваниеФормы.Заголовок = КонструкторФорм.Наименование + " *";
		Иначе
			ДекорацияНазваниеФормы.Заголовок = КонструкторФорм.Наименование;
		КонецЕсли;
		ДекорацияНазваниеФормыКоманда.Подсказка = ДекорацияНазваниеФормы.Заголовок;
		ДекорацияНазваниеФормы.Шрифт = Новый Шрифт(,10);
		ДекорацияНазваниеФормы.Ширина = 15;
		ДекорацияНазваниеФормы.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияНазваниеФормы.МаксимальнаяШирина = 20;
		
		ДекорацияУдалитьФорму = Элементы.Добавить("ДекорацияУдалитьФорму_"+ ИндексКонструктора,Тип("ДекорацияФормы"),ГруппаСозданнойФормы);
		ДекорацияУдалитьФорму.Вид=ВидДекорацииФормы.Картинка;
		ДекорацияУдалитьФорму.Гиперссылка = Истина;
		ДекорацияУдалитьФорму.Ширина = 2;
		ДекорацияУдалитьФорму.Высота = 1;
		ДекорацияУдалитьФорму.Картинка = БиблиотекаКартинок.УдалитьПунктМеню;
		ДекорацияУдалитьФорму.УстановитьДействие("Нажатие","Подключаемый_УдалитьВыбраннуюФорму");
		ДекорацияУдалитьФорму.Подсказка = НСтр("ru = 'Удалить форму'");
		ДекорацияУдалитьФорму.ГоризонтальноеПоложениеВГруппе=ГоризонтальноеПоложениеЭлемента.Право;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КодДляСайта(СсылкаНаФорму,Ширина,Высота)
	
	СтрокаШирина = СтрЗаменить(Строка(Ширина),Символы.НПП,"");
	СтрокаВысота = СтрЗаменить(Строка(Высота),Символы.НПП,"");
	
	Возврат "<iframe src="""+СсылкаНаФорму+"?embedded=true"" width="""+СтрокаШирина+""" height="""+СтрокаВысота+""" frameborder=""0"" marginheight=""0"" marginwidth=""0"">Загрузка…</iframe>";
КонецФункции

&НаКлиенте
Процедура Подключаемый_УдалитьВыбраннуюФорму(Элемент)
	
	
	Индекс = Число(Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_")));
	ТекстВопроса = НСтр("ru = 'Удалить выбранную форму?'");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	ОповещениеОбУдалении = Новый ОписаниеОповещения("УдалитьФормуВопрос", ЭтотОбъект,ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеОбУдалении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервере
Функция КартинкаПоТипуФормы(СтрокаФорм)
	
	ЕстьТовары = СтрокаФорм.ПоляКонструктора.НайтиСтроки(Новый Структура("ЭтоТовар", Истина));
	ЕстьВопросСВариантомНесколько = СтрокаФорм.ПоляКонструктора.НайтиСтроки(Новый Структура("ТипПоля", Перечисления.ТипыПолейКонструктораФорм.НесколькоИзСписка));
	ЕстьВопросСВариантомОдин = СтрокаФорм.ПоляКонструктора.НайтиСтроки(Новый Структура("ТипПоля", Перечисления.ТипыПолейКонструктораФорм.ОдинИзСписка));
	ЕстьВопросСВариантомCРаскрывающимся = СтрокаФорм.ПоляКонструктора.НайтиСтроки(Новый Структура("ТипПоля", Перечисления.ТипыПолейКонструктораФорм.РаскрывающийсяСписок));
	
	Если ЕстьТовары.Количество() <> 0 Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыТовар;
	КонецЕсли;
	
	Если ЕстьВопросСВариантомНесколько.Количество() <> 0 ИЛИ ЕстьВопросСВариантомНесколько.Количество() <> 0 
		ИЛИ ЕстьВопросСВариантомCРаскрывающимся.Количество()<>0 Тогда
		Возврат БиблиотекаКартинок.КонтактныеФормыНесколькоИзСписка;
	КонецЕсли;
	
	Возврат БиблиотекаКартинок.КонтактныеФормыТекстАбзац;
	
КонецФункции

&НаКлиенте
Процедура УдалитьФормуВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьВыбраннуюФормуНаСервере(ДополнительныеПараметры.Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбраннуюФормуНаСервере(Индекс)
	
	КонструкторОбъект = СозданныеФормы[Индекс].Ссылка.ПолучитьОбъект();
	КонструкторОбъект.ПометкаУдаления = Истина;
	КонструкторОбъект.Записать();
	
	Соединение = Новый HTTPСоединение("script.google.com",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		
	СсылкаДляПодключения = Прав(СозданныеФормы[Индекс].СсылкаПриложения, СтрДлина(СсылкаНаПриложение) - СтрНайти(СсылкаНаПриложение,"/macros") + 1);
	Запрос = Новый HTTPЗапрос(СсылкаДляПодключения, Заголовки);
	
	ПараметрыТела = Новый Соответствие;
	ПараметрыТела.Вставить("formId", СозданныеФормы[Индекс].ИдентификаторФормы);
	ПараметрыТела.Вставить("method", "delete");
	
	ПараметрыТелаМассив = Новый Массив;
	Для каждого КлючЗначение Из ПараметрыТела Цикл
		ПараметрТела = КлючЗначение.Ключ + "=" + ОтправкаЗапросов.ЗначениеПараметраДляURL(КлючЗначение.Значение);
		ПараметрыТелаМассив.Добавить(ПараметрТела);
	КонецЦикла;
	
	ТелоЗапроса = СтрСоединить(ПараметрыТелаМассив, "&");
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ТекущаяФормаКонструктора = Справочники.КонтактныеФормыGoogle.ПустаяСсылка();
	Элементы.ДекорацияНазваниеФормы.Заголовок = НСтр("ru = 'Контактные формы (создание)'");
	
	ЗаполнитьДанныеСозданныхФорм();
	ОбновитьЭлементыСозданныхФорм();
	ОбновитьЭлементыФормЗаявок();
	
КонецПроцедуры

&НаСервере
Функция ДекодироватьURL(URL)
	
	URL = СтрЗаменить(URL,"\\u003d","=");
	URL = СтрЗаменить(URL,"\x5b","[");
	URL = СтрЗаменить(URL,"\x5d","]");
	URL = СтрЗаменить(URL,"\\\x22","""");
	URL = СтрЗаменить(URL,"\x7d","}");
	URL = СтрЗаменить(URL,"\x7b","{");
	URL = СтрЗаменить(URL,"\x7b","{");
	URL = СтрЗаменить(URL,"\/","/");
	Возврат URL;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуСопоставленияТоваров(Команда)
	
	ИндексКонструктора = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрНайти(Команда.Имя, "_")));
	СтрокаКонструктора = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора[ИндексКонструктора];
	
	ПараметрыКонструктора = Новый Структура;
	ПараметрыКонструктора.Вставить("ВидЦен", СтрокаКонструктора.ВидЦен);
	ПараметрыКонструктора.Вставить("ОтборНоменклатуры", СтрокаКонструктора.ВидОтбораНоменклатура);
	ПараметрыКонструктора.Вставить("АдресКаталогаТоваров", СтрокаКонструктора.КаталогТоваров);
	ПараметрыКонструктора.Вставить("ТипПоля", СтрокаКонструктора.ТипПоля);
	ПараметрыКонструктора.Вставить("ЗаголовокПоля", СтрокаКонструктора.Заголовок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Индекс",ИндексКонструктора);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборНоменклатурыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.КонтактныеФормыGoogle.Форма.ФормаВыборНоменклатуры",ПараметрыКонструктора,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуСопоставления(Команда)
	
	ИндексКонструктора = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрНайти(Команда.Имя, "_")));
	СтрокаКонструктора = СозданныеФормы[ИндексТекущейФормы(ЭтотОбъект)].ПоляКонструктора[ИндексКонструктора];
	
	ПараметрыКонструктора = Новый Структура;
	ПараметрыКонструктора.Вставить("Заголовок", СтрокаКонструктора.Заголовок);
	ПараметрыКонструктора.Вставить("ПолеПоискаУНФ", СтрокаКонструктора.ПолеПоискаУНФ);
	ПараметрыКонструктора.Вставить("ИндексПоля", ИндексКонструктора);

	ОткрытьФорму("Справочник.КонтактныеФормыGoogle.Форма.ФормаСопоставления",ПараметрыКонструктора);
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокПоляСопоставлений(ПолеКонструктора)
	
	Если ПолеКонструктора.ЭтоТовар Тогда
		Каталог = ПолучитьИзВременногоХранилища(ПолеКонструктора.КаталогТоваров);
		Возврат НСтр("ru = 'Выбрано товаров/услуг: '") + Каталог.Количество();
	КонецЕсли;
	
	Если ПолеКонструктора.ПолеПоискаУНФ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат НСтр("ru = 'Телефон'");
	КонецЕсли;
	
	Если ПолеКонструктора.ПолеПоискаУНФ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат НСтр("ru = 'E-mail'");
	КонецЕсли;
	
	Если ПолеКонструктора.ПолеПоискаУНФ = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат НСтр("ru = 'Skype'");
	КонецЕсли;
	
	Если ПолеКонструктора.ПолеПоискаУНФ = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат НСтр("ru = 'Мессенджер'");
	КонецЕсли;

	Если ПолеКонструктора.ПолеПоискаУНФ = "Наименование" Тогда
		Возврат НСтр("ru = 'Наименование'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолеКонструктора.ПолеПоискаУНФ) Тогда
		Возврат НСтр("ru = 'Нет'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Нет'");
	
КонецФункции

&НаКлиенте
Процедура ВыборФормы(Команда)
	ИндексКонструктора = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрНайти(Команда.Имя, "_")));
	СтрокаКонструктора = СозданныеФормы[ИндексКонструктора];
	
	ТекущаяФормаКонструктора = СтрокаКонструктора.Ссылка;
	Элементы.ДекорацияНазваниеФормы.Заголовок = СтрокаКонструктора.Наименование;
	ОбновитьЭлементыИСсылку();
	ОбновитьВидимостьКнопокКопирования();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыИСсылку()
	ОбновитьЭлементыФормЗаявок();
	ОбновитьЭлементыСозданныхФорм();
	ОбновитьСсылкуНаПриложение();
КонецПроцедуры

&НаСервере
Процедура СозданиеФормыСервер()
	
	ТекущаяФормаКонструктора = Справочники.КонтактныеФормыGoogle.ПустаяСсылка();
	ОбновитьЭлементыФормЗаявок();
	ОбновитьЭлементыСозданныхФорм();
	Элементы.ДекорацияНазваниеФормы.Заголовок = НСтр("ru = 'Контактные формы (создание)'");
	Элементы.ГруппаЗаголовокСоздания.Отображение=ОтображениеОбычнойГруппы.СильноеВыделение;
	Элементы.ГруппаРазмещениеФормы.Видимость = ЗначениеЗаполнено(ТекущаяФормаКонструктора);
	ОбновитьСсылкуНаПриложение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФорму(Команда)
	
	СозданиеФормыСервер();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.РедакторФормы;
	ВидимостьТекущейСтраницы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрелкаВправоПримерНажатие(Элемент)
	ИндексТекущейКартинки = ИндексТекущейКартинки + 1;
	ОбновитьКартинкуПримераФорм();
КонецПроцедуры

&НаКлиенте
Процедура СтрелкаВлевоПримерНажатие(Элемент)
	ИндексТекущейКартинки = ИндексТекущейКартинки - 1;
	ОбновитьКартинкуПримераФорм();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	МодифицированныеФормы = СозданныеФормы.НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Если МодифицированныеФормы.Количество() > 0 Тогда
		Отказ = Истина;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("МодифицированностьФормЗавершение",ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Вернуться для публикации'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
		
		Текст = НСтр("ru = 'Данные форм были изменены. Для того, чтобы изменения сохранились, необходимо их опубликовать'");
		ПоказатьВопрос(ОповещениеОЗакрытии,Текст,СписокКнопок,,КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МодифицированностьФормЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Для Каждого СозданнаяФорма Из СозданныеФормы Цикл
			Если НЕ СозданнаяФорма.Модифицирована Тогда
				Продолжить;
			КонецЕсли;
			СозданнаяФорма.Модифицирована = Ложь;
		КонецЦикла;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БольшеВозможностей

&НаКлиенте
Процедура ПредложитьВозможностьНажатие(Элемент)
	
	ТекстДляПисьма = НСтр("ru = 'Опишите, каких возможностей вам не хватает для контактных форм:'");
	Тег = НСтр("ru = 'Контактные формы'");
	
	УправлениеНебольшойФирмойКлиент.ПредложитьВозможностьНажатие(Тег, ТекстДляПисьма);
	
КонецПроцедуры

#КонецОбласти