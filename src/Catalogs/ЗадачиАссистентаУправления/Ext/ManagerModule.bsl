#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НовыйОтборЗадач() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОсновнаяЗадача", Справочники.ЗадачиАссистентаУправления.ПустаяСсылка());
	Отбор.Вставить("СобытиеИдентификатор", Новый Массив);
	Отбор.Вставить("ДействиеИдентификатор", Новый Массив);
	Отбор.Вставить("ЗначенияЗаполнения", НовыйТаблицаОтбораПараметров());
	Отбор.Вставить("ПараметрыУсловия", НовыйТаблицаОтбораПараметров());
	Отбор.Вставить("СобытияКоличество", 0);
	
	Возврат Отбор;
	
КонецФункции

// Получает задачи ассистента по указанным отборам.
//
// Параметры:
//  Отбор - Структура - См. Справочники.ЗадачиАссистентаУправления.НовыйОтборЗадач()
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьЗадачи(Знач Отбор) Экспорт
	
	Если НЕ Отбор.Свойство("СобытиеИдентификатор") Тогда
		Отбор.Вставить("СобытиеИдентификатор", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнч(Отбор.СобытиеИдентификатор) <> Тип("Массив") Тогда
		Отбор.СобытиеИдентификатор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.СобытиеИдентификатор);
	КонецЕсли;
	
	Если НЕ Отбор.Свойство("ДействиеИдентификатор") Тогда
		Отбор.Вставить("ДействиеИдентификатор", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнч(Отбор.ДействиеИдентификатор) <> Тип("Массив") Тогда
		Отбор.ДействиеИдентификатор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ДействиеИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка,
	|	ЗадачиАссистентаУправления.События.(
	|		СобытиеИдентификатор КАК СобытиеИдентификатор
	|	) КАК События,
	|	ЗадачиАссистентаУправления.ЗначенияЗаполнения.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Параметр КАК Параметр,
	|		ВариантЗаполнения КАК ВариантЗаполнения,
	|		Значение КАК Значение
	|	) КАК ЗначенияЗаполнения,
	|	ЗадачиАссистентаУправления.ПараметрыУсловия.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Параметр КАК Параметр,
	|		Значение КАК Значение
	|	) КАК ПараметрыУсловия
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	ЗадачиАссистентаУправления.ОсновнаяЗадача = &ОсновнаяЗадача
	|	И (&ОтборПоСобытиям
	|			ИЛИ ЗадачиАссистентаУправления.События.СобытиеИдентификатор В (&МассивСобытий))
	|	И (&ОтборПоДействиям
	|			ИЛИ ЗадачиАссистентаУправления.ДействиеИдентификатор В (&МассивДействий))";
	
	Запрос.УстановитьПараметр("ОсновнаяЗадача",   Отбор.ОсновнаяЗадача);
	Запрос.УстановитьПараметр("ОтборПоСобытиям",  Отбор.СобытиеИдентификатор.Количество() = 0);
	Запрос.УстановитьПараметр("МассивСобытий",    Отбор.СобытиеИдентификатор);
	Запрос.УстановитьПараметр("ОтборПоДействиям", Отбор.ДействиеИдентификатор.Количество() = 0);
	Запрос.УстановитьПараметр("МассивДействий",   Отбор.ДействиеИдентификатор);
	
	МассивЗадач = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УсловиеВыполнено = Истина;
		
		Если Отбор.СобытияКоличество <> 0 Тогда
			УсловиеВыполнено = Выборка.События.Выгрузить().Количество() = Отбор.СобытияКоличество;
		КонецЕсли;
		Если НЕ УсловиеВыполнено Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеВыполнено = ТаблицаПараметровПодходитПодУсловия(Выборка.ЗначенияЗаполнения.Выгрузить(), Отбор.ЗначенияЗаполнения);
		Если НЕ УсловиеВыполнено Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеВыполнено = ТаблицаПараметровПодходитПодУсловия(Выборка.ПараметрыУсловия.Выгрузить(), Отбор.ПараметрыУсловия);
		Если НЕ УсловиеВыполнено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗадач.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ЗначенияЗаполнения(Задача) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияЗаполнения.Параметр КАК Параметр,
	|	ЗначенияЗаполнения.Значение КАК Значение
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления.ЗначенияЗаполнения КАК ЗначенияЗаполнения
	|ГДЕ
	|	ЗначенияЗаполнения.Ссылка = &Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначенияЗаполнения.Вставить(Выборка.Параметр, Выборка.Значение.Получить());
		
	КонецЦикла;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Функция ПараметрыУсловия(Задача) Экспорт
	
	ПараметрыУсловия = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыУсловия.Параметр КАК Параметр,
	|	ПараметрыУсловия.Значение КАК Значение,
	|	ПараметрыУсловия.ВидСравнения КАК ВидСравнения
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления.ПараметрыУсловия КАК ПараметрыУсловия
	|ГДЕ
	|	ПараметрыУсловия.Ссылка = &Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыУсловия.Добавить(Новый Структура("Параметр,Значение,ВидСравнения", Выборка.Параметр, Выборка.Значение.Получить(), Выборка.ВидСравнения));
	КонецЦикла;
	
	Возврат ПараметрыУсловия;
	
КонецФункции

Функция ПредставленияПараметровУсловия(Задача) Экспорт
	
	ПараметрыЗадачи = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыУсловия.Параметр КАК Параметр,
	|	ПараметрыУсловия.ЗначениеПредставление КАК ЗначениеПредставление
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления.ПараметрыУсловия КАК ПараметрыУсловия
	|ГДЕ
	|	ПараметрыУсловия.Ссылка = &Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыЗадачи.Вставить(Выборка.Параметр, Выборка.ЗначениеПредставление.Получить());
		
	КонецЦикла;
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

// Получает ссылку группы задач по идентификатору группы
//
// Параметры:
//  ИдентификаторГруппы	 - Строка - 
// 
// Возвращаемое значение:
//   - СправочникСсылка.ЗадачиАссистентаУправления
//
Функция СсылкаНаГруппуЗадач(ИдентификаторГруппы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиАссистента.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистента
	|ГДЕ
	|	ЗадачиАссистента.ЭтоГруппа = ИСТИНА
	|	И ЗадачиАссистента.ИдентификаторГруппы = &ИдентификаторГруппы
	|	И ЗадачиАссистента.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ИдентификаторГруппы",ИдентификаторГруппы);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ЗадачиАссистентаУправления.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьЗадачиПоГруппе(ГруппаЗадач) Экспорт
	
	МассивЗадач = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка,
	|	ЗадачиАссистентаУправления.События.(
	|		СобытиеИдентификатор КАК СобытиеИдентификатор
	|	) КАК События,
	|	ЗадачиАссистентаУправления.ЗначенияЗаполнения.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Параметр КАК Параметр,
	|		ВариантЗаполнения КАК ВариантЗаполнения,
	|		Значение КАК Значение
	|	) КАК ЗначенияЗаполнения,
	|	ЗадачиАссистентаУправления.ПараметрыУсловия.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Параметр КАК Параметр,
	|		Значение КАК Значение
	|	) КАК ПараметрыУсловия
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	ЗадачиАссистентаУправления.ОсновнаяЗадача = &ОсновнаяЗадача
	|	И ЗадачиАссистентаУправления.Родитель = &ГруппаЗадачи
	|	И ЗадачиАссистентаУправления.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ОсновнаяЗадача", Справочники.ЗадачиАссистентаУправления.ПустаяСсылка());
	Запрос.УстановитьПараметр("ГруппаЗадачи",ГруппаЗадач);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивЗадач.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Возврат МассивЗадач;
	
КонецФункции

// Выключает задачи указанных групп
//
// Параметры:
//  ГруппыЗадач	 - 	 Массив идентификаторов групп задач, которые необходимо выключить 
//
Процедура ВыключитьГруппыЗадач(ГруппыЗадач) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ГруппыЗадач
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	ЗадачиАссистентаУправления.ИдентификаторГруппы В (&ГруппыЗадач)
	|	И ЗадачиАссистентаУправления.ЭтоГруппа = ИСТИНА
	|	И ЗадачиАссистентаУправления.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка,
	|	ЗадачиАссистентаУправления.Используется КАК Используется
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыЗадач КАК ГруппыЗадач
	|		ПО (ГруппыЗадач.Ссылка = ЗадачиАссистентаУправления.Родитель)
	|ГДЕ
	|	ЗадачиАссистентаУправления.ПометкаУдаления = ЛОЖЬ
	|	И ЗадачиАссистентаУправления.Используется = ИСТИНА";
	
	Запрос.УстановитьПараметр("ГруппыЗадач",   ГруппыЗадач);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Используется = Ложь;
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьЗадачиПользователя(Пользователь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиАссистентаУправления.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистентаУправления
	|ГДЕ
	|	ЗадачиАссистентаУправления.Автор = &Автор";
	
	Запрос.УстановитьПараметр("Автор", Пользователь);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаОтбораПараметров()
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Параметр", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("ОбязательноПрисутствует", Новый ОписаниеТипов("Булево"));
	ТаблицаОтбора.Колонки.Добавить("ОбязательноОтсутствует", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОтбора;
	
КонецФункции

Функция ТаблицаПараметровПодходитПодУсловия(ТаблицаПараметров, Отбор)
	
	Для каждого СтрокаОтбора Из Отбор Цикл
		
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СтрокаОтбора.Параметр));
		
		Если СтрокаОтбора.ОбязательноПрисутствует Тогда
			Если СтрокиПараметров.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокиПараметров[0].Значение.Получить()) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли СтрокаОтбора.ОбязательноОтсутствует Тогда
			Если СтрокиПараметров.Количество() <> 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если СтрокиПараметров.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			Для каждого Параметр Из СтрокиПараметров Цикл
				Если Параметр.Получить() <> СтрокаОтбора.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли