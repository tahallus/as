#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает состав сегмента
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментНоменклатуры, Массив	 - сегменты для которых необходимо получить состав
//  СпособДобавления - ПеречисленияСсылка.СпособыДобавленияВСегмент - способ добавления в сегмент (вручную, по правилам)
// Возвращаемое значение:
//  Массив - массив номенклатуры, входящей в сегмент
//
Функция ПолучитьСоставСегмента(Сегмент, СпособДобавления = Неопределено) Экспорт
	
	ОтборПоСегменту = Новый Массив;
	Если ТипЗнч(Сегмент) <> Тип("Массив") Тогда
		ОтборПоСегменту.Добавить(Сегмент);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСегменту, Сегмент);
	КонецЕсли;
	
	МассивНоменклатуры = 
		РегистрыСведений.СоставСегментаНоменклатуры.СоставВыбранногоСегмента(ОтборПоСегменту, СпособДобавления);
	
	Возврат МассивНоменклатуры;
	
КонецФункции

// Процедура обновляет состав сегмента по заданным правилам
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментНоменклатуры	 - сегмент для которого необходимо обновить состав
//  СКД - СхемаКомпоновкиДанных - схема, по правилам который будет получен состав сегмента
//
Процедура ОбновитьСоставСегментаПоПравилам(Сегмент, СКД = Неопределено) Экспорт
	
	РегистрыСведений.СоставСегментаНоменклатуры.ОбновитьСоставВыбранногоСегментаПоПравилам(Сегмент, СКД);
		
КонецПроцедуры

// Процедура добавляет выбранных вручную контрагентов в сегмент
//
// Параметры:
//  Сегмент			 - СправочникСсылка.Сегмент	 - сегмент, который нужно обновить
//  СоставСегмента	 - Массив					 - контрагенты, которых нужно добавить в сегмент
//
Процедура ОбновитьСоставСегментаВручную(Сегмент, СоставСегмента) Экспорт
	
	РегистрыСведений.СоставСегментаНоменклатуры.ОбновитьСоставВыбранногоСегментаВручную(Сегмент, СоставСегмента);
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Наименование");
	Поля.Добавить("Обновляемый");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("ЭтоГруппа");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеСегментовНоменклатуры.Сегмент КАК Сегмент,
	|	ФормированиеСегментовНоменклатуры.ДатаПоследнегоФормирования КАК ДатаПоследнегоФормирования
	|ИЗ
	|	РегистрСведений.ФормированиеСегментовНоменклатуры КАК ФормированиеСегментовНоменклатуры
	|ГДЕ
	|	ФормированиеСегментовНоменклатуры.Сегмент = &Сегмент";
	
	Запрос.УстановитьПараметр("Сегмент", Данные.Ссылка); 
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаОбновления = Дата(1, 1, 1, 0, 0, 0);
	
	Пока Выборка.Следующий() Цикл
		ДатаОбновления = Выборка.ДатаПоследнегоФормирования;	
	КонецЦикла;
	
	Состояние = "";
	ДатаСтрокой = "";
	Если НачалоДня(ДатаОбновления) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаСтрокой = СтрШаблон(НСтр("ru = 'сегодня в %1'"), Формат(ДатаОбновления, "ДФ = ЧЧ:мм"));
	Иначе
		ДатаСтрокой = Формат(ДатаОбновления, "ДФ = дд.ММ.гггг ЧЧ:мм");
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОбновления) Тогда
		Состояние = СтрШаблон(НСтр("ru = '(сформирован %1)'"), ДатаСтрокой);
	Иначе
		Состояние = НСтр("ru='(не сформирован)'");
	КонецЕсли;
			
	Представление = СтрШаблон(НСтр("ru = '%1 %2'"), Данные.Наименование, Состояние);
	
КонецПроцедуры

#КонецОбласти