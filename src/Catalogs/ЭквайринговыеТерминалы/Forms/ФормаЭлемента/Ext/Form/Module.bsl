
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяОрганизация"
		);
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Объект.Организация = ЗначениеНастройки;
		Иначе
			Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		Если НЕ Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить() Тогда
			Объект.ИспользоватьБезПодключенияОборудования = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьБезПодключенияОборудования
		И НЕ Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить() Тогда
		Элементы.ИспользоватьБезПодключенияОборудования.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ПодключаемоеОборудование.Доступность = НЕ Объект.ИспользоватьБезПодключенияОборудования;
	
	// Настройки налогового учета
	Валюта = Объект.Договор.ВалютаРасчетов;
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.Валюта.Видимость = УчетВалютныхОпераций;
	Элементы.Договор.АвтоМаксимальнаяШирина = НЕ УчетВалютныхОпераций;
	
	Элементы.ГруппаНастройкиНалоговогоУчета.Видимость = Объект.СобственныеНастройкиНалоговогоУчета;
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Установка видимости полей комиссии
	УстановитьВидимостьКомиссии();
	
	// Установка видимости вида кассы.
	НастроитьВидКассы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьАвтоНаименование();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	
	Если Объект.СчетЗатрат.Пустая() Тогда
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеРасходы");
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверим договор.
	ТекстСообщения = "";
	Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения,
		Объект.Договор,
		Объект.Ссылка,
		Объект.Организация,
		Объект.Эквайрер,
		Отказ
	);
	Если ТекстСообщения <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Если Отказ Тогда
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Элемент не записан. %1'"), ТекстСообщения);
		Иначе
			Сообщение.Текст = ТекстСообщения;
		КонецЕсли;
		
		Если Отказ Тогда
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Поле = "Договор";
			Сообщение.Сообщить();
			Возврат;
		Иначе
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	// Проверим валюты договора и банковского счета.
	ВалютаДоговора = ТекущийОбъект.Договор.ВалютаРасчетов;
	ВалютаСчета = ТекущийОбъект.БанковскийСчетЭквайринг.ВалютаДенежныхСредств;
	Если ВалютаДоговора <> ВалютаСчета Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр(
			"ru = 'Элемент не записан: валюта договора эквайринга (%1) должна совпадать с валютой банковского счета (%2).'"),
			ВалютаДоговора, ВалютаСчета);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилсяСчетУчетаЭквайринговыеТерминалы" Тогда
		Объект.СчетУчета = Параметр.СчетУчета;
		Объект.СчетЗатрат = Параметр.СчетЗатрат;
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Эквайрер = Параметр Тогда
		УстановитьВидимостьДоговора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭквайрерПриИзменении(Элемент)
	
	ЭквайрерПередИзменением = Эквайрер;
	Эквайрер = Объект.Эквайрер;
	
	Если ЭквайрерПередИзменением <> Объект.Эквайрер Тогда
		
		Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Эквайрер, Объект.Организация);
		Договор = Объект.Договор;
		ДоговорПриИзмененииНаСервере();
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищенный договор.
		
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Эквайрер, Объект.Организация);
	ДоговорПриИзмененииНаСервере();
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКассыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ВидКассы) Тогда
		 ВидКассы = "Касса";
	КонецЕсли;
	
	Если ВидКассы = "КассаККМ" Тогда
		Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
		Если ТипЗнч(Объект.Касса) <> Тип("СправочникСсылка.КассыККМ") Тогда
			Объект.Касса = Неопределено;
		КонецЕсли;
	Иначе
		Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
		Если ТипЗнч(Объект.Касса) <> Тип("СправочникСсылка.Кассы") Тогда
			Объект.Касса = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	СформироватьАвтоНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Эквайрер, Объект.Договор);
	ПараметрыФормы.Вставить("ЭтоДоговорЭквайринга", Истина);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыПлатежныхКартПриАктивизацииСтроки(Элемент)
	
	ОбновитьПредставлениеКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПлатежныхКартПроцентКомиссииПриИзменении(Элемент)
	
	ОбновитьПредставлениеКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПлатежныхКартПроцентКомиссииПриОтменеПриИзменении(Элемент)
	
	ОбновитьПредставлениеКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПлатежныхКартПроцентКомиссииПриВозвратеПриИзменении(Элемент)
	
	ОбновитьПредставлениеКомиссии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует наименование банковского счета.
//
&НаКлиенте
Функция СформироватьАвтоНаименование()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = НСтр("ru='Эквайринговый терминал '") + " (" + Строка(Объект.Касса) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции // СформироватьАвтоНаименование()

&НаКлиенте
Процедура ИспользоватьБезПодключенияОборудованияПриИзменении(Элемент)
	
	Элементы.ПодключаемоеОборудование.Доступность = НЕ Объект.ИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если Валюта <> Объект.Договор.ВалютаРасчетов Тогда
		Валюта = Объект.Договор.ВалютаРасчетов;
		Объект.БанковскийСчетЭквайринг = Неопределено;
	КонецЕсли;
	
	УстановитьВидимостьКомиссии();
	
КонецПроцедуры

// Процедура устанавливает видимость договора в зависимости от установленного параметра эквайрера (контрагента).
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Эквайрер) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Эквайрер, "ВестиРасчетыПоДоговорам");
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.Валюта.Видимость = Элементы.Договор.Видимость;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ЭтоДоговорЭквайринга
		|	И НЕ ДоговорыКонтрагентов.Недействителен
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДоговоров.Следующий() Тогда
		ДоговорПоУмолчанию = ВыборкаДоговоров.Договор;
	Иначе
		МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
		ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура НастроитьВидКассы()
	
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	Если УчетРозничныхПродаж Тогда
		Элементы.ВидКассы.Видимость = Истина;
		Элементы.Касса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Если ТипЗнч(Объект.Касса) = Тип("СправочникСсылка.КассыККМ") Тогда
			ВидКассы = "КассаККМ";
			Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
		Иначе
			ВидКассы = "Касса";
			Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
		КонецЕсли;
	// Если нет розничных продаж и касса не выбрана.
	ИначеЕсли Объект.Касса.Пустая() Тогда
		Элементы.ВидКассы.Видимость = Ложь;
		Элементы.Касса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		
		ВидКассы = "Касса";
		Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	// Если нет розничных продаж и выбрана касса ККМ.
	ИначеЕсли ТипЗнч(Объект.Касса) = Тип("СправочникСсылка.КассыККМ") Тогда
		Элементы.ВидКассы.Видимость = Истина;
		Элементы.Касса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ВидКассы = "КассаККМ";
		Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
	// Если нет розничных продаж и выбрана касса ОРГАНИЗАЦИИ.
	Иначе
		Элементы.ВидКассы.Видимость = Ложь;
		Элементы.Касса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		
		ВидКассы = "Касса";
		Элементы.Касса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Ссылка, Организация, Контрагент, Договор)
	
	Возврат Справочники.ДоговорыКонтрагентов.ПолучитьПараметрыФормыВыбора(Ссылка, Организация, Контрагент, Договор);
	
КонецФункции

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, ТекущаяДатаСеанса());
	Элементы.УчитыватьВНУ.Видимость =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	Элементы.Патент.Видимость 		= СистемаНалогообложенияСтруктура.ПрименяетсяПатент;
	
	// Если только патент и он только один, подставим его
	Если СистемаНалогообложенияСтруктура.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
		И СистемаНалогообложенияСтруктура.ПрименяетсяПатент
		И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.Патент = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеНастройкиНалоговогоУчетаПриИзменении(Элемент)
	Элементы.ГруппаНастройкиНалоговогоУчета.Видимость = Объект.СобственныеНастройкиНалоговогоУчета;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомиссии()
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетКомиссииВОтчетеЭквайера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "РасчетКомиссииВОтчетеЭквайера");
	
	Элементы.ГруппаПояснениеНастроекКомиссии.Видимость = РасчетКомиссииВОтчетеЭквайера;
	Элементы.ВидыПлатежныхГруппаПроцентыКомиссии.Видимость = НЕ РасчетКомиссииВОтчетеЭквайера;
	Элементы.ГруппаОписаниеСтрокиКомиссии.Видимость = НЕ РасчетКомиссииВОтчетеЭквайера;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеКомиссии()
	
	ТекущиеДанные = Элементы.ВидыПлатежныхКарт.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОписаниеСтрокиКомиссии = Новый ФорматированнаяСтрока("");
		Возврат;
	КонецЕсли;
	
	МассивФорматированныхСтрок = Новый Массив;
	
	МассивФорматированныхСтрок.Добавить(СтрШаблон(НСтр("ru = 'Вид платежной карты: %1'"), ТекущиеДанные.ВидПлатежнойКарты));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	
	МассивФорматированныхСтрок.Добавить(ФорматированнаяСтрокаПроцентаКомиссии(НСтр("ru = 'продажи'"), ТекущиеДанные.ПроцентКомиссии));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(ФорматированнаяСтрокаПроцентаКомиссии(НСтр("ru = 'возврата до закрытия смены'"), ТекущиеДанные.ПроцентКомиссииПриОтмене));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(ФорматированнаяСтрокаПроцентаКомиссии(НСтр("ru = 'возврата после закрытия смены'"), ТекущиеДанные.ПроцентКомиссииПриВозврате));
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(Символы.ПС);
	МассивФорматированныхСтрок.Добавить(СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'Если банк возвращает комиссию за возврат или отмену платежа, ее необходимо указать со знаком <span style=""color: ЦветТекстаОтрицательногоЗначения>""минус""</span>'")));
	
	ОписаниеСтрокиКомиссии = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ФорматированнаяСтрокаПроцентаКомиссии(ВидОперации, Знач ПроцентКомиссии)
	
	ШаблонСтроки = НСтр("ru = 'При операции [ВидОперации] [ТекстКомиссии] <b>[ПроцентСтрокой]</b>'");
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("ВидОперации", ВидОперации);
	Если ПроцентКомиссии = 0 Тогда
		ТекстКомиссии = НСтр("ru = 'комиссия браться не будет'");
		ПроцентСтрокой = "";
	ИначеЕсли ПроцентКомиссии > 0 Тогда
		ТекстКомиссии = НСтр("ru = 'комиссия в пользу банка в размере'");
		ПроцентСтрокой = Формат(ПроцентКомиссии, "ЧЦ=5; ЧДЦ=2") + "%";
	Иначе
		ТекстКомиссии = НСтр("ru = 'комиссия <span style=""color: ЦветТекстаОтрицательногоЗначения>возвращается</span> банком в размере '");
		ПроцентСтрокой = Формат(ПроцентКомиссии * -1, "ЧЦ=5; ЧДЦ=2") + "%";
	КонецЕсли;
	
	ПараметрыСтроки.Вставить("ТекстКомиссии", ТекстКомиссии);
	ПараметрыСтроки.Вставить("ПроцентСтрокой", ПроцентСтрокой);
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ПараметрыСтроки);
	
	Возврат СтроковыеФункцииКлиент.ФорматированнаяСтрока(ИтоговаяСтрока);
	
КонецФункции

#КонецОбласти
