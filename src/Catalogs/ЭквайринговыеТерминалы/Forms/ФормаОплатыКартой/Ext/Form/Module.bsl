#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("КассаККМ") Тогда
		КассаККМ = Параметры.КассаККМ;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭквайринговыйТерминал") Тогда
		ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидПлатежнойКарты") Тогда
		ВидПлатежнойКарты = Параметры.ВидПлатежнойКарты;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерПлатежнойКарты") Тогда
		НомерПлатежнойКарты = Параметры.НомерПлатежнойКарты;
	КонецЕсли;
	
	Если Параметры.Свойство("СсылочныйНомер") Тогда
		СсылочныйНомер = Параметры.СсылочныйНомер;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерЧекаЭТ") Тогда
		НомерЧекаЭТ = Параметры.НомерЧекаЭТ;
	КонецЕсли;
	
	Если Параметры.Свойство("КОплате") Тогда
		КОплате = Параметры.КОплате;
	КонецЕсли;
	
	Если Параметры.Свойство("Сумма") Тогда
		Сумма = Параметры.Сумма;
	КонецЕсли;
	
 	Если ЗначениеЗаполнено(КОплате) Тогда
		Элементы.Сумма.СписокВыбора.Очистить();
		Элементы.Сумма.СписокВыбора.Добавить(КОплате, СтрШаблон(НСтр("ru = '%1 (к оплате)'"), КОплате));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(КассаККМ);
	КонецЕсли;
	
	Если Параметры.Свойство("РедактироватьОплату") Тогда
		РедактированиеОплаты = Параметры.РедактироватьОплату;
	КонецЕсли;
	
	ЗаполнитьВидыКарт();
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование()
		И Не Параметры.Свойство("ЗапретАвтоматизированнойОплаты");
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	Иначе
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	
	КассаККМИспользоватьБезПодключенияОборудования = КассаККМ.ИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЗаполнитьВидыКарт();
	ПолучитьСсылкиНаОборудование();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		ПараметрыЗакрытия = Неопределено;
	Иначе
		ПараметрыЗакрытия = Новый Структура();
		ПараметрыЗакрытия.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
		ПараметрыЗакрытия.Вставить("ВидПлатежнойКарты", ВидПлатежнойКарты);
		ПараметрыЗакрытия.Вставить("НомерПлатежнойКарты", НомерПлатежнойКарты);
		ПараметрыЗакрытия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
		ПараметрыЗакрытия.Вставить("СсылочныйНомер", СсылочныйНомер);
		ПараметрыЗакрытия.Вставить("Сумма", Сумма);
		ПараметрыЗакрытия.Вставить("СуммаКомиссии", ПосчитатьКомиссию(Сумма, ЭквайринговыйТерминал, ВидПлатежнойКарты));
		ПараметрыЗакрытия.Вставить("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта"));
	КонецЕсли;
		
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартой(Команда)
	
	НомерПлатежнойКарты = "";
	
	ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ОплатаКартой_ПроверитьВозможностьПечатиЧека", Истина, Ложь);
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ВладелецФормы, НСтр(
		"ru = 'Не удалось выполнить оплату через платежный терминал'")) Тогда
		Возврат;
	КонецЕсли;
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИДЗамера, Ложь);
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
		
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО),
		ЭквайринговыйТерминал_ПО,
		Неопределено
	);
	
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор_ПО),
		ФискальныйРегистратор_ПО,
		Неопределено
	);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
		И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		Результат = Неопределено;
		
		ДополнительныеПараметры = Новый Структура(
			"ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерКарты",
			ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ, НомерПлатежнойКарты
		);
		
		// Сразу отправим данные на терминал.
		Результат = Новый Структура("ВидКарты, НомерКарты, Сумма, НомерЧека, СсылочныйНомер",
			ВидПлатежнойКарты, "", Сумма, "", ""
		);
		ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ВидКарты") Тогда
			ВидКарты = Результат.ВидКарты;
		Иначе
			ВидКарты = Элементы.ВидКарты.СписокВыбора[Результат.ТипКарты].Значение;
		КонецЕсли;
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.НомерКарты     = Результат.НомерКарты;
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ВидКарты", ВидКарты);
		
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ОплатаКартой_НачатьВыполнениеОперацииНаЭквайринговомТерминале_AuthorizeSales", Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		ВидПлатежнойКарты   = Параметры.ВидКарты;
		НомерПлатежнойКарты = РезультатВыполнения.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
		Сумма               = РезультатВыполнения.СуммаОперации;
		СсылочныйНомер      = РезультатВыполнения.СсылочныйНомер;
		НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		
		ОК(Неопределено);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(Команда)
	
	Если ПечатьДокументовУНФКлиент.ПечатьЧекаНевозможна(ВладелецФормы, НСтр(
		"ru = 'Не удалось выполнить отмену оплаты картой.'")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
	
	СуммаОперации       = Сумма;
	НомерСсылкиОперации	= СсылочныйНомер;
	НомерЧекаЭТОперации	= НомерЧекаЭТ;
	
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО),
		ЭквайринговыйТерминал_ПО,
		Неопределено);
		
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор_ПО),
		ФискальныйРегистратор_ПО,
		Неопределено);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТОперации;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		ДополнительныеПараметры = Новый Структура; 
		ИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ОплатаКартой_НачатьВыполнениеОперацииНаЭквайринговомТерминале_AuthorizeVoid", Истина, Ложь);
		ДополнительныеПараметры.Вставить("ИДЗамера", ИДЗамера);
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(Параметры.ИДЗамера, Ложь);
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		Закрыть("Удалить строку");
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПосчитатьКомиссию(Сумма, ЭквайринговыйТерминал, ВидПлатежнойКарты)
	
	ТаблицаВидовКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКартИПроцентыКомиссии(ЭквайринговыйТерминал);
	НайденныеСтроки = ТаблицаВидовКарт.НайтиСтроки(Новый Структура("ВидПлатежнойКарты", ВидПлатежнойКарты));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СуммаКомиссии = Сумма * НайденныеСтроки[0].ПроцентКомиссии/100;
	Иначе
		СуммаКомиссии = 0;
	КонецЕсли;
	
	Возврат СуммаКомиссии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(ЭквайринговыйТерминал);
	
	Элементы.ВидКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
	Если МассивВидовПлатежныхКарт.Количество() > 0 Тогда
		ВидПлатежнойКарты = МассивВидовПлатежныхКарт[0];
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор_ПО = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(КассаККМ)
	  И ЗначениеЗаполнено(КассаККМ.ПодключаемоеОборудование),
	  КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал_ПО = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаАвтоматизированнойОплатыКартами.Видимость = ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО);
	
	Элементы.ФормаОК.Доступность	= Не ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО);
	Элементы.НомерКарты.Доступность	= Не ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО);
	
	Если РедактированиеОплаты И ЗначениеЗаполнено(ЭквайринговыйТерминал_ПО) Тогда
		Элементы.ОплатаПлатежнымиКартамиДобавитьОплатуКартой.Доступность = Ложь;
		Элементы.Сумма.Доступность = Ложь;
		Элементы.ВидКарты.Доступность = Ложь;
		Элементы.ЭквайринговыйТерминал.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
