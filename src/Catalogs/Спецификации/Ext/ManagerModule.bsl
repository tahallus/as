#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Установка / снятие основной спецификации
//
// Параметры:
//  Номенклатура	 - 	СправочникСсылка.Номенклатура - Номенклатура, для которой изменяется основная комплектация
//  Характеристика	 - 	СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика, для которой изменяется основная комплектация
//  Спецификация	 - 	СправочникСсылка.Спецификации - Устанавливаемая / снимаемая основная спецификация
//
Процедура ИзменитьПризнакОсновнаяСпецификация(Номенклатура, Характеристика, Спецификация) Экспорт
	
	Менеджер = РегистрыСведений.СпецификацииПоУмолчанию.СоздатьМенеджерЗаписи();
	Менеджер.Номенклатура = Номенклатура;
	Менеджер.Характеристика = Характеристика;
	Менеджер.Прочитать();
	Если Менеджер.Выбран() И Менеджер.Спецификация=Спецификация Тогда
		Менеджер.Удалить();
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спецификация, "ПометкаУдаления, Заказ");
		Если ЗначенияРеквизитов.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Спецификация %1 помечена на удаление. Установка признака <основная> невозможна.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Спецификация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Заказ) Тогда
			ТекстСообщения = НСтр("ru = 'Для спецификации заказа установка признака <основная> невозможна.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Спецификация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		Менеджер.Номенклатура = Номенклатура;
		Менеджер.Характеристика = Характеристика;
		Менеджер.Спецификация = Спецификация;
		Менеджер.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает спецификацию по-умолчанию для номенклатуры, характеристики.
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры, Неопределено - характеристики.
// 	ВключаяШаблоны - Булево - включая шаблоны.
//
// Возвращаемое значение:
// 	СправочникСсылка.Спецификации - спецификация по-умолчанию.
//
Функция СпецификацияПоУмолчанию(Номенклатура, Характеристика = Неопределено, ВключаяШаблоны = Ложь) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Спецификации) Тогда
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СпецификацииПоУмолчанию) Тогда
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если Характеристика = Неопределено Тогда
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Характеристика",  Характеристика);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВключаяШаблоны", ВключаяШаблоны);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииПоУмолчанию.Спецификация КАК Спецификация,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|ГДЕ
	|	СпецификацииПоУмолчанию.Номенклатура = &Номенклатура
	|	И СпецификацииПоУмолчанию.Характеристика = &Характеристика
	|	И СпецификацииПоУмолчанию.Спецификация.Владелец = СпецификацииПоУмолчанию.Номенклатура
	|	И СпецификацииПоУмолчанию.Спецификация.ХарактеристикаПродукции = СпецификацииПоУмолчанию.Характеристика
	|	И (&ВключаяШаблоны
	|			ИЛИ НЕ СпецификацииПоУмолчанию.Спецификация.ЭтоШаблон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииПоУмолчанию.Спецификация,
	|	1
	|ИЗ
	|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|ГДЕ
	|	СпецификацииПоУмолчанию.Номенклатура = &Номенклатура
	|	И СпецификацииПоУмолчанию.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И СпецификацииПоУмолчанию.Спецификация.Владелец = СпецификацииПоУмолчанию.Номенклатура
	|	И СпецификацииПоУмолчанию.Спецификация.ХарактеристикаПродукции = СпецификацииПоУмолчанию.Характеристика
	|	И (&ВключаяШаблоны
	|			ИЛИ НЕ СпецификацииПоУмолчанию.Спецификация.ЭтоШаблон)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Спецификация;
	Иначе
		Возврат Справочники.Спецификации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура обработчик события ОбработкаПолученияДанныхВыбора.
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Отказ = Ложь;
	ПроизводствоСервер.ДобавитьОтборыСпецификации(Параметры, Отказ);
	
КонецПроцедуры // ОбработкаПолученияДанныхВыбора()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтрокСоставаСпецификации");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТипСтрокиСостава", 
		НСтр("ru = 'Тип строки'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 
		НСтр("ru = 'Штрихкод'"), ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 
		НСтр("ru = 'Артикул'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", 
		НСтр("ru = 'Номенклатура (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,
		"НоменклатураНаименованиеПолное", НСтр("ru = 'Номенклатура (полное наименование)'"), ОписаниеТиповСтрока1000,
		ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаНаименование", 
			НСтр("ru = 'Характеристика (наименование)'"), ОписаниеТиповСтрока150, ОписаниеТиповКолонка, "Характеристика", 1);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ХарактеристикаАртикул", 
			НСтр("ru = 'Характеристика (артикул)'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Характеристика", 2);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", НСтр("ru = 'Количество'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", 
		НСтр("ru = 'Ед. изм.'"), ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДоляСтоимости", 
		НСтр("ru = 'Доля стоимости'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КоличествоПродукции", 
		НСтр("ru = 'Количество продукции'"), ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Спецификации");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Спецификация", 
		НСтр("ru = 'Спецификация (наименование)'"), ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
КонецПроцедуры

// АПК:299-выкл процедура вызывается программно в форме ПомощникЗагрузкиДанныхИзВнешнегоИсточника обработки ЗагрузкаДанныхИзВнешнегоИсточника

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		// ТипСтроки по ТипСтроки.Наименование
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьТипСтроки(СтрокаТаблицыФормы.ТипСтрокиСостава, СтрокаТаблицыФормы.ТипСтрокиСостава_ВходящиеДанные, Перечисления.ТипыСтрокСоставаСпецификации.Материал);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				// Характеристика по Владельцу, Наименованию и Артикулу
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию 
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Доля стоимости
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ДоляСтоимости, СтрокаТаблицыФормы.ДоляСтоимости_ВходящиеДанные, 1);
		
		// Количество продукции
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.КоличествоПродукции, СтрокаТаблицыФормы.КоличествоПродукции_ВходящиеДанные, 1);
		
		// Спецификации по владельцу, наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпецификацию(СтрокаТаблицыФормы.Спецификация, СтрокаТаблицыФормы.Спецификация_ВходящиеДанные, СтрокаТаблицыФормы.Номенклатура);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

// АПК:299-вкл

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НоменклатураЗаполнена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	ЗагрузкаНоменклатурыВозможна = Ложь;
	Если НЕ НоменклатураЗаполнена Тогда
		ЗагрузкаНоменклатурыВозможна = (ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное));
	КонецЕсли;
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = НоменклатураЗаполнена;
	
	Если НоменклатураЗаполнена Тогда			
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = Не СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы 
			И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			   Или СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
			И СтрокаТаблицыФормы.Количество <> 0;		
		
	Иначе
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗагрузкаНоменклатурыВозможна;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповаяОбработка

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
// 	Массив - реквизиты, которые разрешается редактировать в обработке группового изменения.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("Владелец");
	РедактируемыеРеквизиты.Добавить("ХарактеристикаПродукции");
	РедактируемыеРеквизиты.Добавить("ВидПроизводства");
	РедактируемыеРеквизиты.Добавить("Заказ");
	РедактируемыеРеквизиты.Добавить("Комментарий");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти 

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Спецификация";
	КомандаПечати.Представление = НСтр("ru = 'Спецификация'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СпецификацияРазвернуто";
	КомандаПечати.Представление = НСтр("ru = 'Спецификация (развернуто)'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 8;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Спецификация");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Спецификации_Спецификация";
		ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Спецификации.ПФ_MXL_Спецификация";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Спецификация'");
		
		СформироватьСпецификацию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки);
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "СпецификацияРазвернуто");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Спецификации_СпецификацияРазвернуто";
		ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Спецификации.ПФ_MXL_Спецификация";
		ПечатнаяФорма.СинонимМакета = НСтр("ru ='Спецификация (развернуто)'");
		
		СформироватьСпецификацию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	// параметры отправки печатных форм по электронной почте
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, 
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

Процедура СформироватьСпецификацию(ПечатнаяФорма, МассивОбъектов, ОбъектыПечати, Ошибки, Развернуто = Ложь)
	Перем ПервыйДокумент, НомерСтрокиНачало;
	
	ДанныеПечати = Новый Структура;
	ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаПечатьСпецификации();
	ТаблицаСпецификаций = Запрос.Выполнить().Выгрузить();
	
	ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		ЗапросОрганизация = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИмяПредопределенныхДанных = ""ОсновнаяОрганизация""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации");
		Выборка = ЗапросОрганизация.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Шапка Из ТаблицаСпецификаций Цикл
		
		Если ЗначениеЗаполнено(Шапка.Организация) Тогда
			ОрганизацияСпецификации = Шапка.Организация;
		Иначе
			ОрганизацияСпецификации = ОрганизацияПоУмолчанию;
		КонецЕсли; 
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ОрганизацияСпецификации, ТекущаяДатаСеанса());
		ПредставлениеПоставщика = ПечатьДокументовУНФ.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		
		Если Развернуто Тогда
			РазвернутьСпецификации(Шапка);
		КонецЕсли;
		Если Шапка.Состав.Количество() = 0 И Шапка.Операции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ВидПроизводства) Тогда
			// Группировка по этапам
			ПорядокЭтапов = Новый Соответствие;
			Для каждого СтрокаЭтап Из Шапка.Этапы Цикл
				ПорядокЭтапов.Вставить(СтрокаЭтап.этап, СтрокаЭтап.НомерСтроки);
			КонецЦикла;
			Для каждого СтрокаСостава Из Шапка.Состав Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаСостава.Этап) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаСостава.Порядок = ПорядокЭтапов.Получить(СтрокаСостава.Этап);
			КонецЦикла; 
			Для каждого СтрокаОперации Из Шапка.Операции Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаОперации.Этап) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаОперации.Порядок = ПорядокЭтапов.Получить(СтрокаОперации.Этап);
			КонецЦикла;
		Иначе
			Для каждого СтрокаСостав Из Шапка.Состав Цикл
				СтрокаСостав.Порядок = 0;
			КонецЦикла; 
			Для каждого СтрокаОперации Из Шапка.Операции Цикл
				СтрокаОперации.Порядок = 0;
			КонецЦикла; 
		КонецЕсли; 
		Шапка.Состав.Сортировать("Порядок, НомерСтроки");
		Шапка.Операции.Сортировать("Порядок, НомерСтроки");
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru='Спецификация ""%1""'"), Шапка.Наименование);
		
		ДанныеПечати.Очистить();
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		
		ПараметрыНоменклатуры = Новый Структура;
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", Шапка.Номенклатура);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", Шапка.Характеристика);
		ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", Шапка.Артикул);
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
		
		ВывестиЗаголовок(ТабличныйДокумент, Макет, ДанныеПечати);
		
		Если ЗначениеЗаполнено(Шапка.Заказ) Тогда
			ДанныеПечати.Очистить();
			Если ТипЗнч(Шапка.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ДанныеПечати.Вставить("ПредставлениеЗаказа", СтрШаблон("%1 (%2)", Шапка.Заказ, Шапка.Контрагент));
			Иначе
				ДанныеПечати.Вставить("ПредставлениеЗаказа", Строка(Шапка.Заказ));
			КонецЕсли; 
			ВывестиЗаказ(ТабличныйДокумент, Макет, ДанныеПечати);
		КонецЕсли; 
		
		ВывестиТаблицу(Шапка.Состав, ТабличныйДокумент, Макет, "Состав");
		ВывестиТаблицу(Шапка.Операции, ТабличныйДокумент, Макет, "Операции");
		ВывестиПодписи(ТабличныйДокумент, Макет);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.ОтображатьГруппировки = Истина;
	
КонецПроцедуры

Функция ТекстЗапросаПечатьСпецификации()
		
	Возврат "ВЫБРАТЬ
	        |	Спецификации.Ссылка КАК Ссылка,
	        |	Спецификации.Наименование КАК Наименование,
	        |	Спецификации.Владелец КАК Номенклатура,
	        |	Спецификации.ХарактеристикаПродукции КАК Характеристика,
	        |	Спецификации.Владелец.Артикул КАК Артикул,
	        |	Спецификации.Владелец.Штрихкод КАК Штрихкод,
	        |	Спецификации.Заказ КАК Заказ,
	        |	ВЫБОР
	        |		КОГДА Спецификации.Заказ = НЕОПРЕДЕЛЕНО
	        |			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	        |		ИНАЧЕ Спецификации.Заказ.Организация
	        |	КОНЕЦ КАК Организация,
	        |	Спецификации.Состав.(
	        |		ВЫБОР
	        |			КОГДА Спецификации.ВидПроизводства = ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	        |				ТОГДА 1
	        |			ИНАЧЕ 2
	        |		КОНЕЦ КАК Уровень,
	        |		0 КАК Порядок,
	        |		ЛОЖЬ КАК Обработано,
	        |		НомерСтроки КАК НомерСтроки,
	        |		ТипСтрокиСостава КАК ТипСтрокиСостава,
	        |		Номенклатура КАК Номенклатура,
	        |		Номенклатура.Артикул КАК Артикул,
	        |		Номенклатура.Штрихкод КАК Штрихкод,
	        |		Характеристика КАК Характеристика,
	        |		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	        |		ВЫБОР
	        |			КОГДА Спецификации.Состав.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	        |				ТОГДА Спецификации.Состав.ЕдиницаИзмерения.Коэффициент
	        |			ИНАЧЕ 1
	        |		КОНЕЦ КАК Коэффициент,
	        |		Спецификация КАК Спецификация,
	        |		Количество КАК Количество,
	        |		КоличествоПродукции КАК КоличествоПродукции,
	        |		ВЫБОР
	        |			КОГДА Спецификации.ВидПроизводства = ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	        |				ТОГДА ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	        |			ИНАЧЕ Спецификации.Состав.Этап
	        |		КОНЕЦ КАК Этап,
	        |		ФормулаНоменклатура КАК ФормулаНоменклатура,
	        |		ФормулаКоличество КАК ФормулаКоличество,
	        |		ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	        |		Описание КАК Описание
	        |	) КАК Состав,
	        |	Спецификации.Операции.(
	        |		0 КАК Порядок,
	        |		НомерСтроки КАК НомерСтроки,
	        |		Операция КАК Операция,
	        |		НормаВремени КАК НормаВремени,
	        |		Количество КАК Количество,
	        |		КоличествоПродукции КАК КоличествоПродукции,
	        |		ВЫБОР
	        |			КОГДА Спецификации.ВидПроизводства = ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	        |				ТОГДА ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	        |			ИНАЧЕ Спецификации.Операции.Этап
	        |		КОНЕЦ КАК Этап,
	        |		ФормулаОперация КАК ФормулаОперация,
	        |		ФормулаКоличество КАК ФормулаКоличество,
	        |		ФормулаНормаВремени КАК ФормулаНормаВремени,
	        |		ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	        |		Описание КАК Описание
	        |	) КАК Операции,
	        |	Спецификации.ВидПроизводства КАК ВидПроизводства,
	        |	Спецификации.ВидПроизводства.Этапы.(
	        |		НомерСтроки КАК НомерСтроки,
	        |		Этап КАК Этап
	        |	) КАК Этапы,
	        |	ЕСТЬNULL(Спецификации.Заказ.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент
	        |ИЗ
	        |	Справочник.Спецификации КАК Спецификации
	        |ГДЕ
	        |	Спецификации.Ссылка В(&МассивОбъектов)";
	
КонецФункции

Процедура ВывестиЗаголовок(ТабличныйДокумент, Макет, ДанныеПечати)
		
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьМакета);
 
КонецПроцедуры

Процедура ВывестиЗаказ(ТабличныйДокумент, Макет, ДанныеПечати)
		
	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьМакета);
 
КонецПроцедуры

Процедура ВывестиТаблицу(ТаблицаДанных, ТабличныйДокумент, Макет, ТипОбласти)
		
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПродукцииЗаполнено = Ложь;
	ВывестиШапку(ТаблицаДанных, ТабличныйДокумент, Макет, "Шапка" + ТипОбласти, КоличествоПродукцииЗаполнено);
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Этап = Неопределено;
	Для каждого СтрокаСостава Из ТаблицаДанных Цикл
		ВывестиЭтап(СтрокаСостава, Этап, ТабличныйДокумент, Макет, "Этап" + ТипОбласти, КоличествоПродукцииЗаполнено);
		ВывестиСтроку(СтрокаСостава, Этап, ТабличныйДокумент, Макет, "Строка" + ТипОбласти, КоличествоПродукцииЗаполнено);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ВывестиКонецТаблицы(ТабличныйДокумент, Макет, КоличествоПродукцииЗаполнено);
		
КонецПроцедуры

Процедура ВывестиШапку(ТаблицаДанных, ТабличныйДокумент, Макет, ИмяОбласти, КоличествоПродукцииЗаполнено)
	
	ЕстьЭтапы = Ложь;
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если СтрокаТаблицы.КоличествоПродукции <> 1 И СтрокаТаблицы.КоличествоПродукции <> 0 Тогда
			КоличествоПродукцииЗаполнено = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаТаблицы.Этап) Тогда
			ЕстьЭтапы = Истина;
		КонецЕсли; 
	КонецЦикла; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|Основа");
	ДанныеЗаполнения = Новый Структура;
	Если ЕстьЭтапы Тогда
		ДанныеЗаполнения.Вставить("ЭтапСоставЗаголовок", НСтр("ru = 'Этап / Состав'"));
	Иначе
		ДанныеЗаполнения.Вставить("ЭтапСоставЗаголовок", НСтр("ru = 'Состав'"));
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(ДанныеЗаполнения);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КоличествоПродукции");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЕсли; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КонецСтроки");
	ТабличныйДокумент.Присоединить(ОбластьМакета);
			
КонецПроцедуры

Процедура ВывестиЭтап(СтрокаТаблицы, Этап, ТабличныйДокумент, Макет, ИмяОбласти, КоличествоПродукцииЗаполнено)
		
	Если ЗначениеЗаполнено(СтрокаТаблицы.Этап) И Этап <> СтрокаТаблицы.Этап Тогда
		Этап = СтрокаТаблицы.Этап;
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|Основа");
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		ТабличныйДокумент.Вывести(ОбластьМакета, 1);
		Если КоличествоПродукцииЗаполнено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КоличествоПродукции");
			ТабличныйДокумент.Присоединить(ОбластьМакета, 1);
		КонецЕсли; 
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КонецСтроки");
		ТабличныйДокумент.Присоединить(ОбластьМакета, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСтроку(СтрокаТаблицы, Этап, ТабличныйДокумент, Макет, ИмяОбласти, КоличествоПродукцииЗаполнено)
	
	ДанныеПечати = Новый Структура;
	Если ИмяОбласти = "СтрокаСостав" Тогда
		ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиСостав(СтрокаТаблицы, ДанныеПечати);
	ИначеЕсли ИмяОбласти = "СтрокаОперации" Тогда
		ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиОперации(СтрокаТаблицы, ДанныеПечати);
	КонецЕсли; 
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "Уровень") Тогда
		Уровень = СтрокаТаблицы.Уровень;
	ИначеЕсли ЗначениеЗаполнено(Этап) Тогда 
		Уровень = 2;
	Иначе
		Уровень = 1;
	КонецЕсли; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|Основа");
	ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьМакета, Уровень);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КоличествоПродукции");
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Присоединить(ОбластьМакета, Уровень);
	КонецЕсли; 
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти + "|КонецСтроки");
	ТабличныйДокумент.Присоединить(ОбластьМакета, Уровень);
	
КонецПроцедуры

Процедура ВывестиКонецТаблицы(ТабличныйДокумент, Макет, КоличествоПродукцииЗаполнено)
		
	ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы|Основа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Если КоличествоПродукцииЗаполнено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КонецТаблицы|КоличествоПродукции");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодписи(ТабличныйДокумент, Макет)
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиСостав(СтрокаТабличнойЧасти, ДанныеПечати)
	
	ДанныеПечати.Очистить();
	ПараметрыНоменклатуры = Новый Структура;
	
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	
	Если СтрокаТабличнойЧасти.ИспользуетсяСопоставление Тогда
		Если ПустаяСтрока(СтрокаТабличнойЧасти.Описание) Тогда
			Описание = "";
		Иначе
			Описание = СтрШаблон(": %1", СтрокаТабличнойЧасти.Описание);
		КонецЕсли; 
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", СтрШаблон(НСтр("ru = '<Сопоставление%1>'"), Описание));
		ДанныеПечати.Вставить("ЕдиницаИзмерения", "-");
	ИначеЕсли НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаНоменклатура) Тогда
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", НСтр("ru = '<Формула>'"));
		ДанныеПечати.Вставить("ЕдиницаИзмерения", "-");
	Иначе
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипСтрокиСостава) 
		И СтрокаТабличнойЧасти.ТипСтрокиСостава <> Перечисления.ТипыСтрокСоставаСпецификации.Материал Тогда
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", 
			СтрШаблон("%1, %2", ДанныеПечати.ПредставлениеНоменклатуры, СтрокаТабличнойЧасти.ТипСтрокиСостава));
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаКоличество) Тогда
		ДанныеПечати.Вставить("Количество", НСтр("ru = '<Формула>'"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиОперации(СтрокаТабличнойЧасти, ДанныеПечати)
	
	ДанныеПечати.Очистить();
	ПараметрыНоменклатуры = Новый Структура;
	
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Операция);
	
	Если СтрокаТабличнойЧасти.ИспользуетсяСопоставление Тогда
		Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.Описание) Тогда
			Описание = "";
		Иначе
			Описание = СтрШаблон(": %1", СтрокаТабличнойЧасти.Описание);
		КонецЕсли; 
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", СтрШаблон(НСтр("ru = '<Сопоставление%1>'"), Описание));
	ИначеЕсли НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаОперация) Тогда
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", НСтр("ru = '<Формула>'"));
	Иначе
		ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаКоличество) Тогда
		ДанныеПечати.Вставить("Количество", НСтр("ru = '<Формула>'"));
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаНормаВремени) Тогда
		ДанныеПечати.Вставить("НормаВремени", НСтр("ru = '<Формула>'"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура РазвернутьСпецификации(ДанныеСпецификации)
	
	РазворачиваемыеСпецификации = ПустаяТаблицаРазворачиваемыхСпецификаций();
	Итерация = 0;
	Пока Итерация < МаксимальноеКоличествоИтераций() И ЕстьСпецификации(ДанныеСпецификации.Состав) Цикл
		Итерация = Итерация + 1;
		РазворачиваемыеСпецификации.Очистить();
		Для каждого СтрокаСостава Из ДанныеСпецификации.Состав Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСостава.Спецификация) ИЛИ СтрокаСостава.Обработано Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = РазворачиваемыеСпецификации.Добавить();
			НоваяСтрока.Спецификация = СтрокаСостава.Спецификация;
			НоваяСтрока.Индекс = ДанныеСпецификации.Состав.Индекс(СтрокаСостава);
			НоваяСтрока.Уровень = СтрокаСостава.Уровень;
			НоваяСтрока.Этап = СтрокаСостава.Этап;
			НоваяСтрока.Количество = СтрокаСостава.Количество * СтрокаСостава.Коэффициент;
		КонецЦикла;
		СоставИОперации = СоставИОперации(РазворачиваемыеСпецификации);
		Для каждого СтрокаСостава Из СоставИОперации.Состав Цикл
			РазворачиваемаяСтрока = ДанныеСпецификации.Состав[СтрокаСостава.Индекс];
			Если НЕ РазворачиваемаяСтрока.Обработано Тогда
				РазворачиваемаяСтрока.Обработано = Истина;
			КонецЕсли; 
			Если СтрокаСостава.Индекс >= ДанныеСпецификации.Состав.Количество() - 1 Тогда
				НоваяСтрока = ДанныеСпецификации.Состав.Добавить();
			Иначе
				НоваяСтрока = ДанныеСпецификации.Состав.Вставить(СтрокаСостава.Индекс + 1);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
		КонецЦикла;
		Для каждого СтрокаОперации Из СоставИОперации.Операции Цикл
			НоваяСтрока = ДанныеСпецификации.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОперации);
		КонецЦикла; 
	КонецЦикла;
	
	ПронумероватьТаблицу(ДанныеСпецификации.Состав);
	ПронумероватьТаблицу(ДанныеСпецификации.Операции);
	
	Если Итерация >= МаксимальноеКоличествоИтераций() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Превышено максимальное значение вложенных спецификаций, печать невозможна'"));
		ДанныеСпецификации.Состав.Очистить();
		ДанныеСпецификации.Операции.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

Функция ПустаяТаблицаРазворачиваемыхСпецификаций()
		
	РазворачиваемыеСпецификации = Новый ТаблицаЗначений;
	РазворачиваемыеСпецификации.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	РазворачиваемыеСпецификации.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	РазворачиваемыеСпецификации.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	РазворачиваемыеСпецификации.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	РазворачиваемыеСпецификации.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Возврат РазворачиваемыеСпецификации;
	
КонецФункции
 
Функция МаксимальноеКоличествоИтераций()
	
	Возврат 50;
	
КонецФункции

Функция ЕстьСпецификации(ТаблицаСостава)
	
	Для каждого СтрокаСостава Из ТаблицаСостава Цикл
		Если ЗначениеЗаполнено(СтрокаСостава.Спецификация) И НЕ СтрокаСостава.Обработано Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

Функция СоставИОперации(РазворачиваемыеСпецификации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РазворачиваемыеСпецификации", РазворачиваемыеСпецификации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазворачиваемыеСпецификации.Спецификация КАК Спецификация,
	|	РазворачиваемыеСпецификации.Индекс КАК Индекс,
	|	РазворачиваемыеСпецификации.Уровень КАК Уровень,
	|	РазворачиваемыеСпецификации.Этап КАК Этап,
	|	РазворачиваемыеСпецификации.Количество КАК Количество
	|ПОМЕСТИТЬ РазворачиваемыеСпецификации
	|ИЗ
	|	&РазворачиваемыеСпецификации КАК РазворачиваемыеСпецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Обработано,
	|	РазворачиваемыеСпецификации.Индекс КАК Индекс,
	|	РазворачиваемыеСпецификации.Уровень + 1 КАК Уровень,
	|	РазворачиваемыеСпецификации.Этап КАК Этап,
	|	СпецификацииСостав.НомерСтроки КАК НомерСтроки,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.Номенклатура.Артикул КАК Артикул,
	|	СпецификацииСостав.Номенклатура.Штрихкод КАК Штрихкод,
	|	СпецификацииСостав.Характеристика КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СпецификацииСостав.Количество * РазворачиваемыеСпецификации.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СпецификацииСостав.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	СпецификацииСостав.КоличествоПродукции КАК КоличествоПродукции,
	|	СпецификацииСостав.ФормулаНоменклатура КАК ФормулаНоменклатура,
	|	СпецификацииСостав.ФормулаКоличество КАК ФормулаКоличество,
	|	СпецификацииСостав.ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	|	СпецификацииСостав.Описание КАК Описание
	|ИЗ
	|	РазворачиваемыеСпецификации КАК РазворачиваемыеСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО РазворачиваемыеСпецификации.Спецификация = СпецификацииСостав.Ссылка
	|ГДЕ
	|	НЕ СпецификацииСостав.Номенклатура ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс УБЫВ,
	|	НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазворачиваемыеСпецификации.Индекс КАК Индекс,
	|	РазворачиваемыеСпецификации.Этап КАК Этап,
	|	СпецификацииОперации.НомерСтроки КАК НомерСтроки,
	|	СпецификацииОперации.Операция КАК Операция,
	|	СпецификацииОперации.НормаВремени КАК НормаВремени,
	|	СпецификацииОперации.Количество * РазворачиваемыеСпецификации.Количество КАК Количество,
	|	СпецификацииОперации.КоличествоПродукции КАК КоличествоПродукции,
	|	СпецификацииОперации.ФормулаОперация КАК ФормулаОперация,
	|	СпецификацииОперации.ФормулаКоличество КАК ФормулаКоличество,
	|	СпецификацииОперации.ФормулаНормаВремени КАК ФормулаНормаВремени,
	|	СпецификацииОперации.ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	|	СпецификацииОперации.Описание КАК Описание
	|ИЗ
	|	РазворачиваемыеСпецификации КАК РазворачиваемыеСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Операции КАК СпецификацииОперации
	|		ПО РазворачиваемыеСпецификации.Спецификация = СпецификацииОперации.Ссылка
	|ГДЕ
	|	НЕ СпецификацииОперации.Операция ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить("Состав", РезультатЗапроса[1].Выгрузить());
	Результат.Вставить("Операции", РезультатЗапроса[2].Выгрузить());
	Возврат Результат;
	
КонецФункции

Процедура ПронумероватьТаблицу(Таблица)
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#КонецЕсли
