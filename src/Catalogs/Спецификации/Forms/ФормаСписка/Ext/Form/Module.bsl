
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Параметры.Отбор.Свойство("Владелец", Номенклатура);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
	    ПроверкаИспользованияСпецификаций();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") Тогда
		Элементы.ОтборМатериалОперация.ПодсказкаВвода = НСтр("ru = 'Материал'");
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		Элементы.ОтборЭтап.Видимость = Ложь;
		Элементы.ГруппаОтборЭтап.Видимость = Элементы.ОтборЭтап.Видимость;
	КонецЕсли; 
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, , , , "ДляНоменклатуры", Ложь);
	Иначе
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, , , , , Ложь);
	КонецЕсли; 
	ВыполнитьЗагрузкуНестандартныхОтборов();
	//Конец УНФ.ОтборыСписка
	
	Если НЕ ОтображатьСпецификацииЗаказов Тогда
		СписокПустыхЗначений = Новый СписокЗначений;
		СписокПустыхЗначений.Добавить(Неопределено);
		СписокПустыхЗначений.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
		СписокПустыхЗначений.Добавить(Документы.ЗаказНаПроизводство.ПустаяСсылка());
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Заказ", СписокПустыхЗначений,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Если Элементы.Найти("СписокГрупповоеИзменениеОбъектов") <> Неопределено Тогда
		
		МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокГрупповоеИзменениеОбъектов", "Видимость", МожноРедактировать);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	ЗаполнитьХарактеристики();
	ОбновитьПараметрыОтображения();
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьОтборНедействительная(ЭтотОбъект);
	
	// МобильныйКлиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ЭтоМобильныйКлиент = Истина;
	КонецЕсли;
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСпецификаций" И ЗначениеЗаполнено(Номенклатура) И Параметр = Номенклатура Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "СпецификацияЗаписана" Тогда
		
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		Если СтрокаСписка <> Неопределено И Параметр.Ссылка = СтрокаСписка.Ссылка Тогда
			ОтразитьВозможностьУстановкиСпецификацииКакОсновной(Параметр.Недействителен, Параметр.Заказ);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтоМобильныйКлиент Тогда
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	КонецЕсли;
	
	ОтразитьВозможностьУстановкиСпецификацииКакОсновной();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	Если Режим = 0 Тогда
		ТекущаяХарактеристика = Неопределено;
		УстановитьОтбор(Список.Отбор, "ХарактеристикаПродукции", ТекущаяХарактеристика);
	ИначеЕсли Режим = 2 Тогда
		ТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		УстановитьОтбор(Список.Отбор, "ХарактеристикаПродукции", ТекущаяХарактеристика);
	ИначеЕсли Режим = 1 И Элементы.Характеристики.ТекущиеДанные <> Неопределено Тогда
		ТекущаяХарактеристика = Элементы.Характеристики.ТекущиеДанные.Характеристика;
		УстановитьОтбор(Список.Отбор, "ХарактеристикаПродукции", ТекущаяХарактеристика);
	Иначе
		ТекущаяХарактеристика = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСпецификацииЗаказовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "Заказ");
	Строки = ДанныеМеток.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаМетки Из Строки Цикл
		УдалитьМеткуОтбора(ДанныеМеток.Индекс(СтрокаМетки));
	КонецЦикла;
	
	Если НЕ ОтображатьСпецификацииЗаказов Тогда
		СписокПустыхЗначений = Новый СписокЗначений;
		СписокПустыхЗначений.Добавить(Неопределено);
		СписокПустыхЗначений.Добавить(ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
		СписокПустыхЗначений.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПроизводство.ПустаяСсылка"));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Заказ", СписокПустыхЗначений,
			ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Заказ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Владелец", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Владелец.КатегорияНоменклатуры", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Заказ", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборМатериалОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНестандартныеОтборы("Состав.Материал", ВыбранноеЗначение, Элемент.Родитель.Имя);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭтапОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидПроизводства.Этапы.Этап", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПроизводстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидПроизводства", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ Элемент.ТекущиеДанные.Характеристика = ТекущаяХарактеристика Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяХарактеристика = Элемент.ТекущиеДанные.Характеристика;
	УстановитьОтбор(Список.Отбор, "ХарактеристикаПродукции", ТекущаяХарактеристика);	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ХарактеристикиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаТабличнойЧасти = Характеристики.НайтиПоИдентификатору(Строка);
	
	МассивСпецификаций = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("СправочникСсылка.Спецификации") Тогда
		МассивСпецификаций.Добавить(ПараметрыПеретаскивания.Значение);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Массив") Тогда
		Для каждого Спецификация Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
				МассивСпецификаций.Добавить(Спецификация);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если МассивСпецификаций.Количество()=0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИзменитьХарактеристикуСпецификаций(МассивСпецификаций, СтрокаТабличнойЧасти.Характеристика);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьКакОсновную(Команда)
	
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	Если СтрокаСписка=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИспользоватьКакОсновнуюСервер(СтрокаСписка.Владелец, СтрокаСписка.ХарактеристикаПродукции, СтрокаСписка.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьКакОсновнуюСервер(Номенклатура, Характеристика, Спецификация)
	
	Справочники.Спецификации.ИзменитьПризнакОсновнаяСпецификация(Номенклатура, Характеристика, Спецификация); 
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ФормаПоказыватьНедействительную.Пометка = Не Элементы.ФормаПоказыватьНедействительную.Пометка;
	
	УстановитьОтборНедействительная(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОт(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", Номенклатура);
	СтруктураОткрытия.Вставить("КопироватьСпецификации", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Истина);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДругим(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Номенклатура", Номенклатура);
	СтруктураОткрытия.Вставить("КопироватьСпецификации", Истина);
	СтруктураОткрытия.Вставить("КопироватьИзВыбранных", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКопированияСвязаннойИнформации", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Недействителен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти); 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	ОткрытаИзНоменклатуры = ЗначениеЗаполнено(Форма.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтборЗаказ", "Видимость", Форма.ОтображатьСпецификацииЗаказов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Владелец", "Видимость", НЕ ОткрытаИзНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Заказ", "Видимость", Форма.ОтображатьСпецификацииЗаказов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаКопирование", "Видимость", ОткрытаИзНоменклатуры);
	
	ДанныеМеток = Форма.ДанныеМеток;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "Владелец");
	МенятьОсновнуюСпецификацию = (ДанныеМеток.НайтиСтроки(СтруктураОтбора).Количество() > 0 ИЛИ ОткрытаИзНоменклатуры) 
		И НЕ Элементы.Список.ТолькоПросмотр;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ФормаИспользоватьКакОсновную", "Видимость", МенятьОсновнуюСпецификацию);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СписокКонтекстноеМенюИспользоватьКакОсновную", "Видимость", МенятьОсновнуюСпецификацию);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Основная", "Видимость", МенятьОсновнуюСпецификацию);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтборВладелец", "Видимость", НЕ ОткрытаИзНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтборКатегорияПродукции", "Видимость", НЕ ОткрытаИзНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтборВидПроизводства", "Видимость", НЕ ОткрытаИзНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаОтборЭтап", "Видимость", НЕ ОткрытаИзНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Режим", "Видимость", ОткрытаИзНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ХарактеристикаПродукции", "Видимость", Форма.ИспользуютсяХарактеристики И Форма.Режим = 0);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаХарактеристики", "Видимость", ОткрытаИзНоменклатуры И Форма.ИспользуютсяХарактеристики И Форма.Режим = 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"Отступ", "Видимость", НЕ ОткрытаИзНоменклатуры ИЛИ НЕ Форма.ИспользуютсяХарактеристики ИЛИ Форма.Режим <> 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ОтображатьСпецификацииЗаказов", "Видимость", Форма.ИспользуютсяЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВозможностьУстановкиСпецификацииКакОсновной(Недействителен = Неопределено, Заказ = Неопределено)
	
	Если Недействителен = Неопределено Тогда
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		Если СтрокаСписка = Неопределено 
			ИЛИ НЕ СтрокаСписка.Свойство("Недействителен") 
			ИЛИ НЕ СтрокаСписка.Свойство("Заказ") Тогда
			Недействителен = Ложь;
			Заказ = Неопределено;
		Иначе
			Недействителен = СтрокаСписка.Недействителен;
			Заказ = СтрокаСписка.Заказ;
		КонецЕсли; 
	КонецЕсли;
	ДоступностьКнопки = НЕ Недействителен И НЕ ЗначениеЗаполнено(Заказ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", ДоступностьКнопки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительная(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ФормаПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыОтображения()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ИспользуютсяХарактеристики = (Характеристики.Количество() > 0);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Спецификации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Спецификации КАК Спецификации
		|ГДЕ
		|	Спецификации.Владелец = &Номенклатура
		|	И Спецификации.Заказ <> НЕОПРЕДЕЛЕНО
		|	И Спецификации.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И Спецификации.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)";
		ИспользуютсяЗаказы = НЕ Запрос.Выполнить().Пустой();
	Иначе
		ИспользуютсяХарактеристики = Ложь;
		ИспользуютсяЗаказы = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаИспользованияСпецификаций()
	
	ИспользоватьПодсистемуПроизводство = Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить();
	ИспользоватьПодсистемуРаботы = Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить();
		
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ЭтоНабор");
	Если НЕ ЗначениеЗаполнено(Номенклатура)
		ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот
		ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
		
		АвтоЗаголовок = Ложь;
		Если ИспользоватьПодсистемуПроизводство И ИспользоватьПодсистемуРаботы Тогда
			Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов и работ'");
		ИначеЕсли ИспользоватьПодсистемуПроизводство Тогда
			Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов'");
		Иначе
			Заголовок = НСтр("ru = 'Спецификации хранятся только для работ'");
		КонецЕсли;
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ФильтрыНастройкиИДопИнфо.Доступность = Ложь;
		Элементы.ФормаИспользоватьКакОсновную.Видимость = Ложь;
		Элементы.ГруппаКопирование.Доступность = Ложь;
		
	// Наборы
	ИначеЕсли ЗначенияРеквизитов.ЭтоНабор Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Спецификации недоступны для наборов'");
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ФильтрыНастройкиИДопИнфо.Доступность = Ложь;
		Элементы.ФормаИспользоватьКакОсновную.Видимость = Ложь;
		Элементы.ГруппаКопирование.Доступность = Ложь;
	
	// Конец Наборы
	ИначеЕсли ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас И НЕ ИспользоватьПодсистемуПроизводство Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Спецификации хранятся только для работ'");
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ФильтрыНастройкиИДопИнфо.Доступность = Ложь;
		Элементы.ФормаИспользоватьКакОсновную.Видимость = Ложь;
		Элементы.ГруппаКопирование.Доступность = Ложь;
		
	ИначеЕсли ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа И НЕ ИспользоватьПодсистемуРаботы Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов'");
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ФильтрыНастройкиИДопИнфо.Доступность = Ложь;
		Элементы.ФормаИспользоватьКакОсновную.Видимость = Ложь;
		Элементы.ГруппаКопирование.Доступность = Ложь;
		
	ИначеЕсли НЕ ПравоДоступа("Добавление", Метаданные.Справочники.Спецификации) Тогда
		
		Элементы.ГруппаКопирование.Доступность = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХарактеристики()
	
	Характеристики.Очистить();
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТабХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	(ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|			ИЛИ ХарактеристикиНоменклатуры.Владелец = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).КатегорияНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Характеристики.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК Устарела,
	|	Характеристики.Наименование КАК Представление,
	|	0 КАК Порядок
	|ИЗ
	|	ТабХарактеристики КАК Характеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Спецификации.ХарактеристикаПродукции,
	|	ИСТИНА,
	|	Спецификации.ХарактеристикаПродукции.Наименование,
	|	1
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.ХарактеристикаПродукции <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И Спецификации.Владелец = &Номенклатура
	|	И НЕ Спецификации.ХарактеристикаПродукции В
	|				(ВЫБРАТЬ
	|					ТабХарактеристики.Характеристика
	|				ИЗ
	|					ТабХарактеристики)
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.ХарактеристикаПродукции,
	|	Спецификации.ХарактеристикаПродукции.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Представление";
	Характеристики.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого СтрХарактеристика Из Характеристики Цикл
		Если НЕ СтрХарактеристика.Устарела Тогда
			Продолжить;
		КонецЕсли; 
		СтрХарактеристика.Представление = СтрШаблон(НСтр("ru = '%1 (устарела)'"), СтрХарактеристика.Представление);
	КонецЦикла; 
	
	ТекущаяХарактеристика = Неопределено;
	УстановитьОтбор(Список.Отбор, "ХарактеристикаПродукции", Неопределено);
	Если Характеристики.Количество() > 0 Тогда
		Элементы.Характеристики.ТекущаяСтрока = Характеристики[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтбор(ГруппаЭлементовОтбора, ПутьКДаннымПоля, Значение)
	
	НайденныйЭлемент = Неопределено;
	Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	Для каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение=Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НайденныйЭлемент = Неопределено И Значение = Неопределено Тогда
		Возврат;
	ИначеЕсли НайденныйЭлемент=Неопределено Тогда
		Отбор = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение  = Поле;
	Иначе
		Отбор = НайденныйЭлемент;
	КонецЕсли; 
	Отбор.Использование  = Значение <> Неопределено;
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли; 
	Отбор.ПравоеЗначение = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьХарактеристикуСпецификаций(МассивСпецификаций, Характеристика)

	НачатьТранзакцию();
	Попытка
		Для каждого Спецификация Из МассивСпецификаций Цикл
			СпецификацияОбъект = Спецификация.ПолучитьОбъект();
			СпецификацияОбъект.Заблокировать();
			СпецификацияОбъект.ХарактеристикаПродукции = Характеристика;
			СпецификацияОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось изменить характеристику спецификаций.'"));
	КонецПопытки; 
	
	Элементы.Список.Обновить();
	
КонецПроцедуры 

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСпецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСпецификации");
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, 
		ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНестандартныхОтборов()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ИмяКлючаОбъекта = СтрШаблон("%1%2", СтрЗаменить(ИмяФормы,".",""), "ДляНоменклатуры");		
	Иначе
		ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	КонецЕсли; 
	ОтображатьСпецификацииЗаказов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, 
		"ОтображатьСпецификацииЗаказов", Ложь);
	
	ИменаНестандартныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Состав.Материал");
	Для каждого ИмяПоляКД Из ИменаНестандартныхПолей Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, СокрЛП(ИмяПоляКД));
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, СокрЛП(ИмяПоляКД));
		ОбновитьНестандартныеОтборы(СокрЛП(ИмяПоляКД));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНестандартныеОтборы(ИмяПоляОтбора, ВыбранноеЗначение = Неопределено, ИмяГруппы = "")
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, ИмяГруппы, ВыбранноеЗначение, 
			ПредставлениеЗначения);
	КонецЕсли; 
	
	Значения = Новый СписокЗначений;
	Для каждого Стр Из ДанныеМеток Цикл
		Если Стр.ИмяПоляОтбора = ИмяПоляОтбора Тогда
			Если ТипЗнч(Стр.Метка) = Тип("СписокЗначений") Тогда
				Для каждого значениеСписка Из Стр.Метка Цикл
				    Значения.Добавить(значениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				Значения.Добавить(стр.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ИспользованиеОтбора = Значения.Количество() > 0;
	
	ГруппаОтборов = Неопределено; 
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Представление = ИмяПоляОтбора Тогда
			ГруппаОтборов = ЭлементОтбора;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если ГруппаОтборов = Неопределено Тогда
		ГруппаОтборов = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтборов.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтборов.Представление = ИмяПоляОтбора;
		Если ИмяПоляОтбора="Состав.Материал" Тогда
			ИменаПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Состав.Номенклатура,Операции.Операция");
			Для каждого ИмяПоля Из ИменаПолей Цикл
				ЭлементОтбора = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	ГруппаОтборов.Использование = ИспользованиеОтбора;
	Для каждого ЭлементОтбора Из ГруппаОтборов.Элементы Цикл
		ЭлементОтбора.ПравоеЗначение = Значения;
	КонецЦикла; 
	
	// МобильныйКлиент
	Если ВыбранноеЗначение = Неопределено Тогда
		РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект);
	КонецЕсли; 
	// Конец МобильныйКлиент
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);

КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	Если ИмяПоляОтбора="Состав.Материал" Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = РаботаСОтборами.ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
		ДанныеМеток.Удалить(СтрокаМеток);
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов);
		ОбновитьНестандартныеОтборы(ИмяПоляОтбора);
	Иначе
		РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	КонецЕсли;
	
	Если ИмяПоляОтбора="Владелец" Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, , , "ДляНоменклатуры", Ложь);
		ИмяКлючаОбъекта = СтрШаблон("%1%2", СтрЗаменить(ИмяФормы,".",""), "ДляНоменклатуры");
	Иначе
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, , , , Ложь);
		ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	КонецЕсли; 
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, "ОтображатьСпецификацииЗаказов", ОтображатьСпецификацииЗаказов);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды


//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 


