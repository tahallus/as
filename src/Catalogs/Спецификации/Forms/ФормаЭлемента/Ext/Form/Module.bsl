
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийТипСтрокиСостава;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьКэшЗначений();
		ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект, КэшЗначений);
	КонецЕсли;
	
	УстановитьУсловноеОформлениеФормы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСостав(ЭтотОбъект), ЭтотОбъект.СоставИзменениеСтрокДействие);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокОперации(ЭтотОбъект), ЭтотОбъект.ОперацииИзменениеСтрокДействие);
	СоставИзменениеСтрокДействиеПриОткрытии = СоставИзменениеСтрокДействие;
	ОперацииИзменениеСтрокДействиеПриОткрытии = ОперацииИзменениеСтрокДействие;
	// Конец ГрупповоеИзменениеСтрок
	
	ИспользоватьТехоперации = Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить();
	ИспользоватьДопРеквизиты = (Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Свойства_ИспользоватьДопРеквизиты") 
		И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты);
	Если НЕ (ИспользоватьТехоперации ИЛИ ИспользоватьДопРеквизиты) Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	Если НЕ ИспользоватьДопРеквизиты Тогда
		Элементы.Дополнительно.Видимость = Ложь;
	КонецЕсли; 
	Если НЕ ИспользоватьТехоперации Тогда
		Элементы.ГруппаОперации.Видимость = Ложь;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// Калькуляция
	Элементы.Заказ.Видимость = ЗначениеЗаполнено(Объект.Заказ);
	// Конец Калькуляция
	// ПараметрическиеСпецификации
	Элементы.ГруппаБазоваяСпецификация.Видимость = ЗначениеЗаполнено(Объект.БазоваяСпецификация);
	// Конец ПараметрическиеСпецификации
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Состав");
	
	ОбновитьСписокВыбораЭтапы();
	
	УправлениеФормой(ЭтотОбъект);
	
	МобильныйКлиентУНФ.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьКэшЗначений();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект, КэшЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзмененийСостав();
	ОпределитьОбъектИзмененийОперации();
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПараметрическиеСпецификации
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// ПараметрическиеСпецификации
		ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект, Истина);
		// Конец ПараметрическиеСпецификации
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Состав");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ЭтоШаблон = Ложь;
	Если КэшЗначений.ИспользоватьПараметрическиеСпецификации Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
			Если ЗначениеЗаполнено(Объект.Заказ) Тогда
				// Привязанные к заказу спецификации не могут быть параметрическими
				СтрокаТабличнойЧасти.ФормулаНоменклатура = "";
				СтрокаТабличнойЧасти.ФормулаКоличество = "";
				СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
				СтрокаТабличнойЧасти.ИспользоватьФормулуНоменклатура = Ложь;
				СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество = Ложь;
			КонецЕсли; 
			Если СтрокаТабличнойЧасти.ИспользоватьФормулуНоменклатура Тогда
				СтрокаТабличнойЧасти.Номенклатура = Неопределено;
				СтрокаТабличнойЧасти.Характеристика = Неопределено;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
				Объект.ЭтоШаблон = Истина;
			Иначе
				СтрокаТабличнойЧасти.ФормулаНоменклатура = "";
				СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
			КонецЕсли; 
			Если СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество Тогда
				СтрокаТабличнойЧасти.Количество = 0;
				Объект.ЭтоШаблон = Истина;
			Иначе
				СтрокаТабличнойЧасти.ФормулаКоличество = "";
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			Если ЗначениеЗаполнено(Объект.Заказ) Тогда
				// Привязанные к заказу спецификации не могут быть параметрическими
				СтрокаТабличнойЧасти.ФормулаОперация = "";
				СтрокаТабличнойЧасти.ФормулаНормаВремени = "";
				СтрокаТабличнойЧасти.ФормулаКоличество = "";
				СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
				СтрокаТабличнойЧасти.ИспользоватьФормулуОперация = Ложь;
				СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество = Ложь;
			КонецЕсли; 
			Если СтрокаТабличнойЧасти.ИспользоватьФормулуОперация Тогда
				СтрокаТабличнойЧасти.Операция = Неопределено;
				Объект.ЭтоШаблон = Истина;
			Иначе
				СтрокаТабличнойЧасти.ФормулаОперация = "";
				СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
			КонецЕсли; 
			Если СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество Тогда
				СтрокаТабличнойЧасти.Количество = 0;
				СтрокаТабличнойЧасти.НормаВремени = 0;
				Объект.ЭтоШаблон = Истина;
			Иначе
				СтрокаТабличнойЧасти.ФормулаКоличество = "";
				СтрокаТабличнойЧасти.ФормулаНормаВремени = "";
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
			СтрокаТабличнойЧасти.ФормулаНоменклатура = "";
			СтрокаТабличнойЧасти.ФормулаКоличество = "";
			СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.ФормулаОперация = "";
			СтрокаТабличнойЧасти.ФормулаНормаВремени = "";
			СтрокаТабличнойЧасти.ФормулаКоличество = "";
			СтрокаТабличнойЧасти.ИспользуетсяСопоставление = Ложь;
		КонецЦикла;
		Объект.СопоставлениеСостава.Очистить();
		Объект.СопоставлениеОпераций.Очистить();
	КонецЕсли; 		
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Параметр = Новый Структура("Ссылка, Недействителен, Заказ", Объект.Ссылка, Объект.Недействителен, Объект.Заказ);
	Оповестить("СпецификацияЗаписана", Параметр, Объект.Владелец);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект, КэшЗначений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Состав

&НаКлиенте
Процедура СоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		КлючСвязиОснование = ТекущаяСтрока.КлючСвязи;
		ТекущаяСтрока.КлючСвязи = 0;
		Если КэшЗначений.ИспользоватьПараметрическиеСпецификации 
			И ТекущаяСтрока.ИспользуетсяСопоставление 
			И КлючСвязиОснование <> 0 Тогда
			// Требуется скопировать настройки сопоставления
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", КлючСвязиОснование);
			Строки = Объект.СопоставлениеСостава.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество() > 0 Тогда
				ИмяТабличнойЧасти = "Состав";
				ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
				Для каждого СтрокаСопоставления Из Строки Цикл
					НоваяСтрока = Объект.СопоставлениеСостава.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления);
					НоваяСтрока.КлючСвязи = ТекущаяСтрока.КлючСвязи;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 	
	
	Если ТекущаяСтрока.ИспользоватьФормулуНоменклатура И Элемент.ТекущийЭлемент = Элементы.СоставНоменклатура Тогда
		Элемент.ТекущийЭлемент = Элементы.СоставФормулаНоменклатура;
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	ТекущаяСтрока.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЗначениеВыбора Из ВыбранноеЗначение Цикл
		
		СтруктураДанные = Новый Структура();
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			Номенклатура = ЗначениеВыбора.Номенклатура;
			Характеристика = ЗначениеВыбора.Характеристика;
			СтруктураДанные.Вставить("Характеристика", Характеристика);
		Иначе
			Номенклатура = ЗначениеВыбора;
			Характеристика = Неопределено;
		КонецЕсли;
		
		СтруктураДанные.Вставить("Номенклатура", Номенклатура);
		СуществующиеСтроки = Объект.Состав.НайтиСтроки(СтруктураДанные);
		Если СуществующиеСтроки.Количество()<>0 Тогда
			Для Каждого СтрокаТабличнойЧасти Из СуществующиеСтроки Цикл
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		
		НоваяСрока = Объект.Состав.Добавить();
		НоваяСрока.Номенклатура = Номенклатура;
		НоваяСрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Материал");
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСрока.Характеристика = Характеристика;
		НоваяСрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСрока.Спецификация = СтруктураДанные.Спецификация;
		НоваяСрока.Количество = 1;
		НоваяСрока.КоличествоПродукции = 1;
		НоваяСрока.ДоляСтоимости = 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СоставФормулаНоменклатура Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаНоменклатураНачалоВыбора();
	ИначеЕсли Поле = Элементы.СоставФормулаХарактеристика Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаХарактеристикаНачалоВыбора();
	ИначеЕсли Поле = Элементы.СоставФормулаКоличество Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаКоличествоНачалоВыбора();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПослеУдаления(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТипСтрокиСоставаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипСтрокиСостава)
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("ТипСтрокиСостава", СтрокаТабличнойЧасти.ТипСтрокиСостава);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		Если НЕ СоответствуетТипСтрокиТипНоменклатуры(СтруктураДанные) Тогда
			
			СтрокаТабличнойЧасти.Номенклатура = Неопределено;
			СтрокаТабличнойЧасти.Характеристика = Неопределено;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
			СтрокаТабличнойЧасти.Спецификация = Неопределено;
			СтрокаТабличнойЧасти.Количество = 1;
			СтрокаТабличнойЧасти.КоличествоПродукции = 1;
			СтрокаТабличнойЧасти.ДоляСтоимости = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СоставТипСтрокиСоставаПриИзменении()

&НаКлиенте
Процедура СоставИспользоватьФормулуНоменклатураПриИзменении(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика = Неопределено;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.КоличествоПродукции = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	
КонецПроцедуры // СоставНоменклатураПриИзменении()

&НаКлиенте
Процедура СоставНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбновитьПараметрыВыбораНоменклатуры();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.КоличествоПродукции = 1;
		СтрокаТабличнойЧасти.ДоляСтоимости = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание=0 Тогда
		ОбновитьПараметрыВыбораНоменклатуры();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаНоменклатураНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНоменклатураНачалоВыбора()
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекущаяСтрока.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Состав";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СоставФормулаНоменклатураЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаНоменклатура);
	ПараметрыОткрытия.Вставить("Описание", ТекущаяСтрока.Описание);
	ПараметрыОткрытия.Вставить("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
	ПараметрыОткрытия.Вставить("ИмяТЧ", "Состав");
	Если ТекущаяСтрока.ИспользуетсяСопоставление Тогда
		ДобавитьПараметрыСопоставленияВСтруктуруОткрытия(ПараметрыОткрытия, ТекущаяСтрока.КлючСвязи, "СопоставлениеСостава");
	КонецЕсли; 
	ПараметрыОткрытия.Вставить("ОграничениеТипа", Тип("СправочникСсылка.Номенклатура"));
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Элементы.СоставНоменклатура.ПараметрыВыбора);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаНоменклатураЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
		ВыбранноеЗначение.Свойство("Описание", ТекущаяСтрока.Описание);
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаНоменклатура);
		ОбновитьСопоставление(ТекущаяСтрока, ВыбранноеЗначение, "СопоставлениеСостава");
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли;	
	Если ТекущаяСтрока.Количество = 0 И НЕ ТекущаяСтрока.ИспользоватьФормулуКоличество Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли; 
	Если ТекущаяСтрока.ДоляСтоимости = 0 Тогда
		ТекущаяСтрока.ДоляСтоимости = 1;
	КонецЕсли; 
	Если ТекущаяСтрока.КоличествоПродукции = 0 Тогда
		ТекущаяСтрока.КоличествоПродукции = 1;
	КонецЕсли; 
 	
КонецПроцедуры

&НаКлиенте
Процедура СоставХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаХарактеристикаНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаХарактеристикаНачалоВыбора()
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекущаяСтрока.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Состав";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СоставФормулаХарактеристикаЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаХарактеристика);
	ПараметрыОткрытия.Вставить("Описание", ТекущаяСтрока.Описание);
	ПараметрыОткрытия.Вставить("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
	ПараметрыОткрытия.Вставить("ИмяТЧ", "Состав");
	Если ТекущаяСтрока.ИспользуетсяСопоставление Тогда
		ДобавитьПараметрыСопоставленияВСтруктуруОткрытия(ПараметрыОткрытия, ТекущаяСтрока.КлючСвязи, "СопоставлениеСостава");
	КонецЕсли; 
	ПараметрыОткрытия.Вставить("ОграничениеТипа", Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Элементы.СоставХарактеристика.ПараметрыВыбора);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаХарактеристикаЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
		ВыбранноеЗначение.Свойство("Описание", ТекущаяСтрока.Описание);
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаХарактеристика);
		ОбновитьСопоставление(ТекущаяСтрока, ВыбранноеЗначение, "СопоставлениеСостава");
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли;	
	Если ТекущаяСтрока.Количество = 0 И НЕ ТекущаяСтрока.ИспользоватьФормулуКоличество Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли; 
	Если ТекущаяСтрока.ДоляСтоимости = 0 Тогда
		ТекущаяСтрока.ДоляСтоимости = 1;
	КонецЕсли; 
	Если ТекущаяСтрока.КоличествоПродукции = 0 Тогда
		ТекущаяСтрока.КоличествоПродукции = 1;
	КонецЕсли; 
 	
КонецПроцедуры

&НаКлиенте
Процедура СоставИспользоватьФормулуКоличествоПриИзменении(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаКоличествоНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаКоличествоНачалоВыбора()
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("СоставФормулаКоличествоЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаКоличество);
	ПараметрыОткрытия.Вставить("ПростыеТипы", Истина);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставФормулаКоличествоЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаКоличество);
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Не Объект.Недействителен Тогда Возврат КонецЕсли;
	
	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр("ru = 'Для установки ""Недействителен"" необходимо снять свойство ""Основной"".'"), , НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

#КонецОбласти 

#Область Операции

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Копирование Тогда
		КлючСвязиОснование = ТекущаяСтрока.КлючСвязи;
		ТекущаяСтрока.КлючСвязи = 0;
		Если КэшЗначений.ИспользоватьПараметрическиеСпецификации 
			И ТекущаяСтрока.ИспользуетсяСопоставление 
			И КлючСвязиОснование<>0 Тогда
			// Требуется скопировать настройки сопоставления
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", КлючСвязиОснование);
			Строки = Объект.СопоставлениеОпераций.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()>0 Тогда
				ИмяТабличнойЧасти = "Операции";
				ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
				Для каждого СтрокаСопоставления Из Строки Цикл
					НоваяСтрока = Объект.СопоставлениеОпераций.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления);
					НоваяСтрока.КлючСвязи = ТекущаяСтрока.КлючСвязи;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТекущаяСтрока.ИспользоватьФормулуОперация И Элемент.ТекущийЭлемент=Элементы.ОперацииОперация Тогда
		Элемент.ТекущийЭлемент = Элементы.ОперацииФормулаОперация;
	КонецЕсли; 
	
	// ГрупповоеИзменениеСтрок
	ТекущаяСтрока.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для каждого Операция Из ВыбранноеЗначение Цикл
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Операция", Операция);
		СуществующиеСтроки = Объект.Операции.НайтиСтроки(СтруктураДанные);
		Если СуществующиеСтроки.Количество()<>0 Тогда
			Для каждого СтрокаТабличнойЧасти Из СуществующиеСтроки Цикл
				СтрокаТабличнойЧасти.НормаВремени = СтрокаТабличнойЧасти.НормаВремени + 1;
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		
		НоваяСрока = Объект.Операции.Добавить();
		НоваяСрока.Операция = Операция;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", Операция);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСрока.НормаВремени = СтруктураДанные.НормаВремени;
		НоваяСрока.ФиксированнаяСтоимость = СтруктураДанные.ФиксированнаяСтоимость;
		Если ЗначениеЗаполнено(НоваяСрока.Операция) И КэшЗначений.ОперацияФиксированнаяСтоимость.Получить(НоваяСрока.Операция)=Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие(КэшЗначений.ОперацияФиксированнаяСтоимость);
			СоответствиеЗначений.Вставить(НоваяСрока.Операция, СтруктураДанные.ФиксированнаяСтоимость);
			КэшЗначений.ОперацияФиксированнаяСтоимость = Новый ФиксированноеСоответствие(СоответствиеЗначений);
		КонецЕсли; 
		НоваяСрока.КоличествоПродукции = 1;
		НоваяСрока.Количество = 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле=Элементы.ОперацииФормулаОперация Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаОперацияНачалоВыбора();
	ИначеЕсли Поле=Элементы.ОперацииФормулаКоличество Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаКоличествоОперацийНачалоВыбора();
	ИначеЕсли Поле=Элементы.ОперацииФормулаНормаВремени Тогда
		СтандартнаяОбработка = Ложь;
		ФормулаНормаВремениНачалоВыбора();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПослеУдаления(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИспользоватьФормулуОперацияПриИзменении(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОперацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Операция);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.НормаВремени = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.ФиксированнаяСтоимость = СтруктураДанные.ФиксированнаяСтоимость;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Операция) И КэшЗначений.ОперацияФиксированнаяСтоимость.Получить(СтрокаТабличнойЧасти.Операция)=Неопределено Тогда
		СоответствиеЗначений = Новый Соответствие(КэшЗначений.ОперацияФиксированнаяСтоимость);
		СоответствиеЗначений.Вставить(СтрокаТабличнойЧасти.Операция, СтруктураДанные.ФиксированнаяСтоимость);
		КэшЗначений.ОперацияФиксированнаяСтоимость = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	КонецЕсли; 
	СтрокаТабличнойЧасти.КоличествоПродукции = 1;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаОперацияНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаОперацияНачалоВыбора()
	
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТекущаяСтрока.КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Операции";
		ТабличныеЧастиУНФКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("ОперацииФормулаОперацияЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаОперация);
	ПараметрыОткрытия.Вставить("Описание", ТекущаяСтрока.Описание);
	ПараметрыОткрытия.Вставить("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
	ПараметрыОткрытия.Вставить("ИмяТЧ", "Операции");
	Если ТекущаяСтрока.ИспользуетсяСопоставление Тогда
		ДобавитьПараметрыСопоставленияВСтруктуруОткрытия(ПараметрыОткрытия, ТекущаяСтрока.КлючСвязи, "СопоставлениеОпераций");
	КонецЕсли; 
	ПараметрыОткрытия.Вставить("ОграничениеТипа", Тип("СправочникСсылка.Номенклатура"));
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Элементы.ОперацииОперация.ПараметрыВыбора);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаОперацияЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("ИспользуетсяСопоставление", ТекущаяСтрока.ИспользуетсяСопоставление);
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаОперация);
		ВыбранноеЗначение.Свойство("Описание", ТекущаяСтрока.Описание);
		ОбновитьСопоставление(ТекущаяСтрока, ВыбранноеЗначение, "СопоставлениеОпераций");
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли;
	Если НЕ ТекущаяСтрока.ИспользоватьФормулуКоличество И ТекущаяСтрока.НормаВремени = 0 Тогда
		ТекущаяСтрока.НормаВремени = 1;
	КонецЕсли; 
	Если НЕ ТекущаяСтрока.ИспользоватьФормулуКоличество И ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Количество = 1;
	КонецЕсли; 
	Если ТекущаяСтрока.КоличествоПродукции = 0 Тогда
		ТекущаяСтрока.КоличествоПродукции = 1;
	КонецЕсли;
	ТекущаяСтрока.ФиксированнаяСтоимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИспользоватьФормулуКоличествоПриИзменении(Элемент)
	
	ОбновитьОбязательностьДопРеквизитов(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаНормаВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаНормаВремениНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНормаВремениНачалоВыбора()
	
	Оповещение = Новый ОписаниеОповещения("ОперацииФормулаНормаВремениЗавершениеВыбора", ЭтотОбъект);
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаНормаВремени);
	ПараметрыОткрытия.Вставить("ПростыеТипы", Истина);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
 
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаНормаВремениЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаНормаВремени);
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормулаКоличествоОперацийНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаКоличествоОперацийНачалоВыбора()
	
	Оповещение = Новый ОписаниеОповещения("ОперацииФормулаКоличествоЗавершениеВыбора", ЭтотОбъект);
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КатегорияНоменклатуры", КэшЗначений.КатегорияНоменклатуры);
	ПараметрыОткрытия.Вставить("Продукция", Объект.Владелец);
	ПараметрыОткрытия.Вставить("Формула", ТекущаяСтрока.ФормулаКоличество);
	ПараметрыОткрытия.Вставить("ПростыеТипы", Истина);
	Если Объект.ФиксированныеЗначения.Количество() > 0 Тогда
		ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия);
	КонецЕсли; 
	ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение);
 
КонецПроцедуры

&НаКлиенте
Процедура ОперацииФормулаКоличествоЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ТекущаяСтрока <> Неопределено Тогда
		ВыбранноеЗначение.Свойство("Формула", ТекущаяСтрока.ФормулаКоличество);
		ОбновитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииСервер()
	
	ЗаполнитьКэшЗначений();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроизводстваПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла; 
	КонецЕсли; 
	
	ВидПроизводстваПриИзмененииСервер();
	ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ВидПроизводстваПриИзмененииСервер()
	
	ОбновитьСписокВыбораЭтапы();
	ЗаполнитьСписокДействий();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСостав(Команда)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ПараметрВыбора Из Элементы.СоставНоменклатура.ПараметрыВыбора Цикл
		ИмяРеквизита = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
		ЗначениеОтбора = ?(ТипЗнч(ПараметрВыбора.Значение)=Тип("ФиксированныйМассив"), Новый Массив(ПараметрВыбора.Значение), ПараметрВыбора.Значение);
		СтруктураОтбора.Вставить(ИмяРеквизита, ЗначениеОтбора); 
	КонецЦикла;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Отбор", СтруктураОтбора);
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	Если Элементы.Состав.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.Состав.ТекущиеДанные.Номенклатура) Тогда
		СтруктураОткрытия.Вставить("ТекущаяСтрока", Элементы.Состав.ТекущиеДанные.Номенклатура);
	КонецЕсли; 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", СтруктураОткрытия, Элементы.Состав, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперации(Команда)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ПараметрВыбора Из Элементы.ОперацииОперация.ПараметрыВыбора Цикл
		ИмяРеквизита = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
		ЗначениеОтбора = ?(ТипЗнч(ПараметрВыбора.Значение)=Тип("ФиксированныйМассив"), Новый Массив(ПараметрВыбора.Значение), ПараметрВыбора.Значение);
		СтруктураОтбора.Вставить(ИмяРеквизита, ЗначениеОтбора); 
	КонецЦикла;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Отбор", СтруктураОтбора);
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	Если Элементы.Операции.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.Операции.ТекущиеДанные.Операция) Тогда
		СтруктураОткрытия.Вставить("ТекущаяСтрока", Элементы.Операции.ТекущиеДанные.Операция);
	КонецЕсли; 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", СтруктураОткрытия, Элементы.Операции, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = ПараметрыСозданияДопРеквизита();
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБазовой(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБазовойЗавершение", ЭтотОбъект), НСтр("ru = 'Спецификация будет полностью перезаполнена по базовой. Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБазовойЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоБазовойСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоБазовойСервер()
	
	Отказ = Ложь;
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.Свойства
	ПроизводствоФормулыСервер.ЗаполнитьСпецификацию(Объект, Отказ);
	
	ЗаполнитьКэшЗначений();
	ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект, КэшЗначений);
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Операции
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ФиксированнаяСтоимость", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииКоличество.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ФиксированнаяСтоимость", Ложь);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.НормаВремени", 0);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииНормаВремени.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		
	Если КэшЗначений.ИспользоватьПараметрическиеСпецификации Тогда
		
		// Формулы
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуНоменклатура", Истина, ВидСравненияКомпоновкиДанных.НеРавно);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставФормулаНоменклатура.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставФормулаХарактеристика.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуНоменклатура", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставНоменклатура.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставХарактеристика.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуКоличество", Ложь);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставФормулаКоличество.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуКоличество", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставКоличество.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуНоменклатура", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставЕдиницаИзмерения.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Основная единица измерения>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользоватьФормулуНоменклатура", Истина, ВидСравненияКомпоновкиДанных.НеРавно);
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ЕдиницаИзмерения", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставЕдиницаИзмерения.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьФормулуОперация", Ложь);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииФормулаОперация.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьФормулуОперация", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииОперация.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьФормулуКоличество", Ложь);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииФормулаНормаВремени.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииФормулаКоличество.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользоватьФормулуКоличество", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииНормаВремени.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииКоличество.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		// Сопоставление
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользуетсяСопоставление", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставФормулаНоменклатура.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Состав.ИспользуетсяСопоставление", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставХарактеристика.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоставФормулаХарактеристика.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Операции.ИспользуетсяСопоставление", Истина);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ОперацииФормулаОперация.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	
	// Этапы производства
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЭтап", "Видимость", ЗначениеЗаполнено(Объект.ВидПроизводства));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЭтап", "Видимость", ЗначениеЗаполнено(Объект.ВидПроизводства));
	
	// Параметрические спецификации
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставИспользоватьФормулуНоменклатура", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставФормулаНоменклатура", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставФормулаХарактеристика", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставИспользоватьФормулуКоличество", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставФормулаКоличество", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииИспользоватьФормулуОперация", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииФормулаОперация", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииИспользоватьФормулуКоличество", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииФормулаНормаВремени", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииФормулаКоличество", "Видимость", КэшЗначений.ИспользоватьПараметрическиеСпецификации И НЕ ЗначениеЗаполнено(Объект.Заказ));	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭлементОсновной()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПоУмолчанию.Спецификация КАК Спецификация
	|ИЗ
	|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|ГДЕ
	|	СпецификацииПоУмолчанию.Спецификация = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("НормаВремени", СтруктураДанные.Номенклатура.НормаВремени);
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	СтруктураДанные.Вставить("ФиксированнаяСтоимость", СтруктураДанные.Номенклатура.ФиксированнаяСтоимость);
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура,
			СтруктураДанные.Характеристика);
	Иначе
		Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура);
	КонецЕсли;
	СтруктураДанные.Вставить("Спецификация", Спецификация);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
		СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
// Возвращает результат проверки соответствия типа строки состава типу номенклатуры.
//
Функция СоответствуетТипСтрокиТипНоменклатуры(СтруктураДанные)
	
	Если (СтруктураДанные.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход")
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
		ИЛИ (СтруктураДанные.ТипСтрокиСостава <> ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход")
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Функция ПараметрыСозданияДопРеквизита()
	
	ПараметрыФормы = Новый Структура;
	
	ТекущийНаборСвойств = Неопределено;
	Если ЗначениеЗаполнено(КэшЗначений.КатегорияНоменклатуры) Тогда
		ТекущийНаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшЗначений.КатегорияНоменклатуры, "НаборСвойствСпецификации");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущийНаборСвойств) Тогда
		ТекущийНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Спецификации_Общие;
	КонецЕсли; 
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНаборСвойств);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокВыбораЭтапы()
	
	Элементы.СоставЭтап.СписокВыбора.Очистить();
	Элементы.ОперацииЭтап.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПроизводства", Объект.ВидПроизводства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыПроизводстваЭтапы.Этап КАК Этап
	|ИЗ
	|	Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|ГДЕ
	|	ВидыПроизводстваЭтапы.Ссылка = &ВидПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыПроизводстваЭтапы.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Элементы.СоставЭтап.СписокВыбора.НайтиПоЗначению(Выборка.Этап)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Элементы.СоставЭтап.СписокВыбора.Добавить(Выборка.Этап);
		Элементы.ОперацииЭтап.СписокВыбора.Добавить(Выборка.Этап);
	КонецЦикла;
	Если Элементы.СоставЭтап.СписокВыбора.Количество()=0 Тогда
		Элементы.СоставЭтап.СписокВыбора.Добавить(Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
		Элементы.ОперацииЭтап.СписокВыбора.Добавить(Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыВыбораНоменклатуры(ВсеТипы = Ложь)
	
	ТекСтр = Элементы.Состав.ТекущиеДанные;
	Если ТекСтр=Неопределено И НЕ ВсеТипы Тогда
		Возврат;
	КонецЕсли; 
	
	// Установим параметры выбора номенклатуры в зависимости от типа строки состава
	МассивОтбора = Новый Массив;
	
	Если ВсеТипы Тогда
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ИначеЕсли ТекСтр.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход") Тогда
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Иначе
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	КонецЕсли;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивОтбора));
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	// Наборы
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	// Конец Наборы
	
	// Подбирать характеристику
	ПараметрВыбора = Новый ПараметрВыбора("ДополнительныеПараметры.ТипВладельца", "Спецификация");
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	Элементы.СоставНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИспользоватьПараметрическиеСпецификации", ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации"));
	КэшЗначений.Вставить("ОперацияФиксированнаяСтоимость", Новый ФиксированноеСоответствие(Новый Соответствие));
	КэшЗначений.Вставить("КатегорияНоменклатуры", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "КатегорияНоменклатуры"));
	
	ДополнитьКэшЗначений(Объект.Операции, КэшЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФормул(ПараметрыОткрытия, Оповещение)
	
	ОткрытьФорму("Справочник.Спецификации.Форма.КонструкторФормул", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьКэшЗначений(Операции, КэшЗначений)
	
	МассивОпераций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Операции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Операция) Тогда
			Продолжить;
		КонецЕсли; 
		Если КэшЗначений.ОперацияФиксированнаяСтоимость.Получить(СтрокаТабличнойЧасти.Операция)=Неопределено Тогда
			МассивОпераций.Добавить(СтрокаТабличнойЧасти.Операция);
		КонецЕсли; 
	КонецЦикла;
	Если МассивОпераций.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	СоответствиеЗначений = Новый Соответствие(КэшЗначений.ОперацияФиксированнаяСтоимость);
	
	РеквизитыОпераций = РеквизитыОпераций(МассивОпераций);
	Для каждого КлючИЗначение Из РеквизитыОпераций Цикл
		СоответствиеЗначений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	КэшЗначений.ОперацияФиксированнаяСтоимость = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыОпераций(Операции)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Операции)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.ФиксированнаяСтоимость);	
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеДанныеПослеЧтенияОбъекта(Объект, КэшЗначений)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
		СтрокаТабличнойЧасти.ИспользоватьФормулуНоменклатура = НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаНоменклатура);
		СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество = НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаКоличество);
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
		СтрокаТабличнойЧасти.ФиксированнаяСтоимость = КэшЗначений.ОперацияФиксированнаяСтоимость.Получить(СтрокаТабличнойЧасти.Операция);
		СтрокаТабличнойЧасти.ИспользоватьФормулуОперация = НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаОперация) И НЕ ЗначениеЗаполнено(Объект.Заказ);
		СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество = (НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаКоличество) ИЛИ НЕ ПустаяСтрока(СтрокаТабличнойЧасти.ФормулаНормаВремени)) И НЕ ЗначениеЗаполнено(Объект.Заказ);
	КонецЦикла; 	
		
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаСоставИзменениеСтрок.Видимость Тогда
		УстановитьПометкуСостав(Истина);
	КонецЕсли;
	Если Элементы.ГруппаОперацииИзменениеСтрок.Видимость Тогда
		УстановитьПометкуОперации(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыСопоставленияВСтруктуруОткрытия(ПараметрыОткрытия, КлючСвязи, ИмяТабличнойЧасти)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	ПараметрыОткрытия.Вставить("Сопоставление", Новый Массив);
	Если ИмяТабличнойЧасти="СопоставлениеСостава" Тогда
		СтруктураСтроки = Новый Структура("КлючСтрокиПравил, Номенклатура, Характеристика, РеквизитСопоставления, ЗначениеРеквизита");
	ИначеЕсли ИмяТабличнойЧасти="СопоставлениеОпераций" Тогда
		СтруктураСтроки = Новый Структура("КлючСтрокиПравил, Операция, РеквизитСопоставления, ЗначениеРеквизита");
	Иначе
		Возврат;
	КонецЕсли; 
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		НоваяСтруктура = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтруктура, СтрокаТабличнойЧасти);
		ПараметрыОткрытия.Сопоставление.Добавить(НоваяСтруктура);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФиксированныеЗначенияВСтруктуруОткрытия(ПараметрыОткрытия)
	
	ПараметрыОткрытия.Вставить("ФиксированныеЗначения", Новый Массив);
	СтруктураСтроки = Новый Структура("Идентификатор, Значение");
	Для каждого СтрокаТабличнойЧасти Из Объект.ФиксированныеЗначения Цикл
		НоваяСтруктура = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтруктура, СтрокаТабличнойЧасти);
		ПараметрыОткрытия.ФиксированныеЗначения.Добавить(НоваяСтруктура);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСопоставление(ТекущаяСтрока, ДанныеКонструктора, ИмяТабличнойЧасти)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Для каждого НайденнаяСтрока Из Строки Цикл
		Объект[ИмяТабличнойЧасти].Удалить(НайденнаяСтрока);
	КонецЦикла;
	Если ТекущаяСтрока.ИспользуетсяСопоставление Тогда
		Для каждого ЭлементСопоставления Из ДанныеКонструктора.Сопоставление Цикл
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСопоставления);
			НоваяСтрока.КлючСвязи = ТекущаяСтрока.КлючСвязи;
		КонецЦикла;
		Если ИмяТабличнойЧасти="СопоставлениеОпераций" Тогда
			ИмяПоляФормула = "ФормулаОперация";
		Иначе
			ИмяПоляФормула = "ФормулаНоменклатура";
		КонецЕсли; 
		Если НЕ ПустаяСтрока(ДанныеКонструктора.Описание) Тогда
			ТекущаяСтрока[ИмяПоляФормула] = СтрШаблон(НСтр("ru = '<Сопоставление: %1>'"), ДанныеКонструктора.Описание);
		Иначе
			ТекущаяСтрока[ИмяПоляФормула] = НСтр("ru = '<Сопоставление>'");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФиксированныеЗначения(ДанныеКонструктора)
	
	Объект.ФиксированныеЗначения.Очистить();
	Для каждого ОписаниеЗначения Из ДанныеКонструктора.ФиксированныеЗначения Цикл
		НоваяСтрока = Объект.ФиксированныеЗначения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОбязательностьДопРеквизитов(Форма, ТолькоОбновитьПризнаки = Ложь)
	
	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	ЭтоШаблонТекущееЗначение = Объект.ЭтоШаблон;
	Если НЕ КэшЗначений.Свойство("ПроверяемыеДопРеквизиты") Тогда
		КэшЗначений.Вставить("ПроверяемыеДопРеквизиты", Новый Массив);
	КонецЕсли;
	
	Если НЕ ТолькоОбновитьПризнаки Тогда
		
		Объект.ЭтоШаблон = Ложь;
		Если КэшЗначений.ИспользоватьПараметрическиеСпецификации Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
				Если СтрокаТабличнойЧасти.ИспользоватьФормулуНоменклатура
					ИЛИ СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество Тогда
					Объект.ЭтоШаблон = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если НЕ Объект.ЭтоШаблон Тогда
				Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
					Если СтрокаТабличнойЧасти.ИспользоватьФормулуОперация
						ИЛИ СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество Тогда
						Объект.ЭтоШаблон = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Свойства_ИспользоватьДопРеквизиты") 
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	Если Форма.Свойства_ОписаниеДополнительныхРеквизитов.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если Объект.ЭтоШаблон<>ЭтоШаблонТекущееЗначение ИЛИ ТолькоОбновитьПризнаки Тогда
		Если Объект.ЭтоШаблон Тогда
			// Отключение обязательности доп. реквизитов
			КэшЗначений.ПроверяемыеДопРеквизиты.Очистить();
			Для каждого СтрокаТабличнойЧасти Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
				Если НЕ СтрокаТабличнойЧасти.ЗаполнятьОбязательно Тогда
					Продолжить;
				КонецЕсли; 
				Если КэшЗначений.ПроверяемыеДопРеквизиты.Найти(СтрокаТабличнойЧасти.Свойство)=Неопределено Тогда
					КэшЗначений.ПроверяемыеДопРеквизиты.Добавить(СтрокаТабличнойЧасти.Свойство);
				КонецЕсли;
				СтрокаТабличнойЧасти.ЗаполнятьОбязательно = Ложь;
				Элемент = Форма.Элементы.Найти(СтрокаТабличнойЧасти.ИмяРеквизитаЗначение);
				Если Элемент<>Неопределено И ТипЗнч(Элемент)=Тип("ПолеФормы") И Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
					Элемент.АвтоОтметкаНезаполненного = Ложь;
					Элемент.ОтметкаНезаполненного = Ложь;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			// Включение обязательности доп. реквизитов
			Для каждого Свойство Из КэшЗначений.ПроверяемыеДопРеквизиты Цикл
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Свойство", Свойство);
				Строки = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаТабличнойЧасти Из Строки Цикл
					СтрокаТабличнойЧасти.ЗаполнятьОбязательно = Истина;
					Элемент = Форма.Элементы.Найти(СтрокаТабличнойЧасти.ИмяРеквизитаЗначение);
					Если Элемент<>Неопределено И ТипЗнч(Элемент)=Тип("ПолеФормы") И Элемент.Вид=ВидПоляФормы.ПолеВвода Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
			Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
				
				Если СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()] Тогда
					
					ЗаполнитьЗначенияСвойств(Объект.Состав.Добавить(), СтрокаТаблицы);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура СоставКопироватьСтроки(Команда)
	
	Если КэшЗначений.ИспользоватьПараметрическиеСпецификации Тогда
		Для каждого Идентификатор Из Элементы.Состав.ВыделенныеСтроки Цикл
			СтрокаТабличнойЧасти = Объект.Состав.НайтиПоИдентификатору(Идентификатор);
			Если СтрокаТабличнойЧасти.ИспользоватьФормулуНоменклатура ИЛИ СтрокаТабличнойЧасти.ИспользоватьФормулуКоличество Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Копирование строк с формулами не поддерживается.'"));
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	КопироватьСтроки("Состав", "Состав");
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВставитьСтроки(Команда)
	
	ВставитьСтроки("Состав", "Состав");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ, ИмяЭлемента)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ, ИмяЭлемента)
	
	ОбновитьПараметрыВыбораНоменклатуры(Истина);
	
	ИмяТабличнойЧасти = ИмяТЧ;
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
	ОбновитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных)
	
	ИмяТЧ = Новый Структура("ИмяТЧ, ИмяЭлемента", ИмяТЧ, ИмяЭлемента);
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоПродукции) Тогда
			Строка.КоличествоПродукции = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.ДоляСтоимости) Тогда
			Строка.ДоляСтоимости = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.ТипСтрокиСостава) Тогда
			Если СтруктураДанные.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда
				Строка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Расход;
			Иначе 
				Строка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Материал;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

#Область Состав

&НаКлиенте
Процедура СоставСнятьФлажки(Команда)
	
	УстановитьПометкуСостав(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУстановитьФлажки(Команда)
	
	УстановитьПометкуСостав(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактированияСостав(Истина);
	ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактированияСостав(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСостав(ЭтотОбъект),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицыСостав(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВыполнитьДействие(Команда)
	
	ОбработатьТаблицуСостав();
	НастроитьОформлениеПанелиРедактированияСостав(4);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактированияСостав();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзмененийСостав();
	НастроитьОформлениеПанелиРедактированияСостав(2);
	ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактированияСостав(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуСостав(Пометка)
	
	Элементы.СоставСнятьФлажки.Видимость = НЕ Элементы.СоставСнятьФлажки.Видимость;
	Элементы.СоставУстановитьФлажки.Видимость = НЕ Элементы.СоставУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Состав Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицыСостав(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Состав,
		СоставРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаборЭлементовГрупповогоИзмененияСтрокСостав(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Состав");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаСоставИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.СоставВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.СоставИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.СоставПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.СоставНомерСтроки);
	НаборЭлементов.Вставить("Действие", Форма.СоставИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.СоставИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", Форма.СоставИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.СоставИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", Форма.СоставИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(Форма.СоставИзменениеСтрокОбъектИзмененийЭлемент), Элементы[Форма.СоставИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактированияСостав(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСостав(ЭтотОбъект),
		Состояние,
		СоставИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицуСостав()
	
	ОбработатьТаблицуСоставНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуСоставНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Состав,
		СоставИзменениеСтрокДействие,
		СоставИзменениеСтрокОбъектИзмененийРеквизит,
		СоставИзменениеСтрокЗначение,
		"СоставНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзмененийСостав()
	
	Если СоставИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЭтап") Тогда
		
		СоставИзменениеСтрокОбъектИзмененийРеквизит = "Этап";
		СоставИзменениеСтрокОбъектИзмененийЭлемент = "СоставЭтап";
		
	ИначеЕсли СоставИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		СоставИзменениеСтрокОбъектИзмененийРеквизит = "";
		СоставИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПометкаПриИзменении(Элемент)
	
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Состав, Элементы.СоставУстановитьФлажки, Элементы.СоставСнятьФлажки);
	
КонецПроцедуры

#КонецОбласти 

#Область Операции

&НаКлиенте
Процедура ОперацииСнятьФлажки(Команда)
	
	УстановитьПометкуОперации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииУстановитьФлажки(Команда)
	
	УстановитьПометкуОперации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактированияОперации(Истина);
	ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактированияОперации(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокОперации(ЭтотОбъект),
		СостояниеПерехода,
		ИзменяетДанные);
	
	УправлениеРезервнымиКопиямиТаблицыОперации(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыполнитьДействие(Команда)
	
	ОбработатьТаблицуОперации();
	НастроитьОформлениеПанелиРедактированияОперации(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактированияОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзмененийОперации();
	НастроитьОформлениеПанелиРедактированияОперации(2);
	ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактированияОперации(3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуОперации(Пометка)
	
	Элементы.ОперацииСнятьФлажки.Видимость = НЕ Элементы.ОперацииСнятьФлажки.Видимость;
	Элементы.ОперацииУстановитьФлажки.Видимость = НЕ Элементы.ОперацииУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Операции Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицыОперации(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Операции,
		ОперацииРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаборЭлементовГрупповогоИзмененияСтрокОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Операции");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаОперацииИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ОперацииВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаИзменитьСтроки", Элементы.ОперацииИзменитьСтроки);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ОперацииПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ОперацииНомерСтроки);
	НаборЭлементов.Вставить("Действие", Форма.ОперацииИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ОперацииИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", Форма.ОперацииИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ОперацииИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", Форма.ОперацииИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(Форма.ОперацииИзменениеСтрокОбъектИзмененийЭлемент), Элементы[Форма.ОперацииИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактированияОперации(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокОперации(ЭтотОбъект),
		Состояние,
		ОперацииИзменениеСтрокЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицуОперации()
	
	ОбработатьТаблицуОперацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуОперацииНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Операции,
		ОперацииИзменениеСтрокДействие,
		ОперацииИзменениеСтрокОбъектИзмененийРеквизит,
		ОперацииИзменениеСтрокЗначение,
		"ОперацииНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзмененийОперации()
	
	Если ОперацииИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЭтап") Тогда
		
		ОперацииИзменениеСтрокОбъектИзмененийРеквизит = "Этап";
		ОперацииИзменениеСтрокОбъектИзмененийЭлемент = "ОперацииЭтап";
		
	ИначеЕсли ОперацииИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		ОперацииИзменениеСтрокОбъектИзмененийРеквизит = "";
		ОперацииИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПометкаПриИзменении(Элемент)
	
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Операции, Элементы.ОперацииУстановитьФлажки, Элементы.ОперацииСнятьФлажки);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЭтаповГрупповоеИзменениеСтрок()
	
	Элементы.СоставИзменениеСтрокЗначение.СписокВыбора.Очистить();
	Элементы.ОперацииИзменениеСтрокЗначение.СписокВыбора.Очистить();
	Если СоставИзменениеСтрокДействие=ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЭтап") И ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Для каждого ЭлементСписка Из Элементы.СоставЭтап.СписокВыбора Цикл
			Элементы.СоставИзменениеСтрокЗначение.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
		Если ЗначениеЗаполнено(СоставИзменениеСтрокЗначение) И Элементы.СоставИзменениеСтрокЗначение.СписокВыбора.НайтиПоЗначению(СоставИзменениеСтрокЗначение)=Неопределено Тогда
			СоставИзменениеСтрокЗначение = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	Если ОперацииИзменениеСтрокДействие=ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЭтап") И ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Для каждого ЭлементСписка Из Элементы.СоставЭтап.СписокВыбора Цикл
			Элементы.ОперацииИзменениеСтрокЗначение.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 
		Если ЗначениеЗаполнено(ОперацииИзменениеСтрокЗначение) И Элементы.ОперацииИзменениеСтрокЗначение.СписокВыбора.НайтиПоЗначению(ОперацииИзменениеСтрокЗначение)=Неопределено Тогда
			ОперацииИзменениеСтрокЗначение = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если СоставИзменениеСтрокДействие = СоставИзменениеСтрокДействиеПриОткрытии 
		И ОперацииИзменениеСтрокДействие = ОперацииИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСостав(ЭтотОбъект));
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокОперации(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	Действия = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") И ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЭтап);
	КонецЕсли; 
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Элементы.СоставИзменениеСтрокДействие.СписокВыбора.Очистить();
	Элементы.ОперацииИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.СоставИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		Элементы.ОперацииИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

