
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("КатегорияНоменклатуры", КатегорияНоменклатуры);
	Параметры.Свойство("Продукция", Продукция);
	Параметры.Свойство("ПростыеТипы", ПростыеТипы);
	Параметры.Свойство("ОграничениеТипа", ОграничениеТипа);
	Параметры.Свойство("Описание", Описание);
	Параметры.Свойство("ИмяТЧ", ИмяТЧ);
	Если Параметры.Свойство("ПараметрыВыбора") Тогда
		Элементы.СопоставлениеНоменклатура.ПараметрыВыбора = Параметры.ПараметрыВыбора;
	КонецЕсли; 
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ОперандНачало", ПроизводствоФормулыСервер.СтрокаНачалаОперанда());
	КэшЗначений.Вставить("ОперандКонец", ПроизводствоФормулыСервер.СтрокаКонцаОперанда());
	
	Схема = Справочники.Спецификации.ПолучитьМакет("СхемаКонструктораФормул");
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		РеквизитыКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияНоменклатуры, "НаборСвойств, НаборСвойствХарактеристики, НаборСвойствСпецификации");
		Схема.Параметры.НаборСвойств.Значение = РеквизитыКатегории.НаборСвойств;
		Схема.Параметры.НаборСвойствХарактеристики.Значение = РеквизитыКатегории.НаборСвойствХарактеристики;
		Схема.Параметры.НаборСвойствСпецификации.Значение = РеквизитыКатегории.НаборСвойствСпецификации;
	КонецЕсли; 
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Если Параметры.Свойство("ФиксированныеЗначения") Тогда
		Для каждого ОписаниеЗначения Из Параметры.ФиксированныеЗначения Цикл
			НоваяСтрока = ФиксированныеЗначения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЗначения);
		КонецЦикла; 
	КонецЕсли; 
	
	ЗаполнитьДеревоОперандов();
	ЗаполнитьДеревоОператоров();
	
	Если НЕ ПростыеТипы И Параметры.Свойство("ИспользуетсяСопоставление") И Параметры.ИспользуетсяСопоставление Тогда
		Режим = 1;
		ЗаполнитьТаблицуСопоставления(Параметры);
	Иначе
		Параметры.Свойство("Формула", Формула);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для каждого СтрокаДерева Из ДеревоОперандов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОперандов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		// Выбор фиксированных значений
		ДобавитьФиксированныеЗначения(ВыбранноеЗначение);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И Модифицированность И НЕ ПустаяСтрока(Формула) Тогда
		Отказ = Истина;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПроверкаМодифицированности", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
		Текст = НСтр("ru = 'Формула была изменена. Закрыть редактор без сохранения изменений?'");
		ПоказатьВопрос(ОповещениеОЗакрытии, Текст, СписокКнопок, , КодВозвратаДиалога.Отмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМодифицированности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	Если РеквизитыСопоставления.Количество() = 0 Тогда
		ЗаполнитьТаблицуСопоставления(Новый Структура("Сопоставление", Новый Массив));
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	ОператорыДопускающуюЗапятую = Новый Массив;
	ОператорыДопускающуюЗапятую.Добавить("Мин");
	ОператорыДопускающуюЗапятую.Добавить("Макс");
	ОператорыДопускающуюЗапятую.Добавить("Окр");
	
	КоличествоДопустимыхЗапятых = 0;
	Для каждого ЭлементМассива Из ОператорыДопускающуюЗапятую Цикл
		
		КоличествоДопустимыхЗапятых = КоличествоДопустимыхЗапятых + СтрЧислоВхождений(ВРЕГ(Формула), ВРЕГ(ЭлементМассива));
		
	КонецЦикла;
	
	КоличествоЗапятых = СтрЧислоВхождений(Формула, ",");
	Если КоличествоЗапятых > КоличествоДопустимыхЗапятых Тогда
		
		ТекстСообщения = НСтр("ru ='Для указания дробной части необходимо использовать точку, а не запятую.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Формула");
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовПриАктивизацииСтроки(Элемент)
	
	ДоступностьУдаление = Истина;
	ДоступностьДобавление = Истина;
	СтрокаДерева = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		ДоступностьУдаление = Ложь;
		ДоступностьДобавление = Ложь;
	Иначе
		ОписаниеТипов = СтрокаДерева.Тип;
		Если СтрокаДерева.Операнд = ОперандНовоеЗначение() Тогда
			ДоступностьУдаление = Ложь;
		КонецЕсли; 
		СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено ИЛИ СтрокаРодитель.Операнд <> ОперандФиксированныеЗначения() Тогда
			ДоступностьУдаление = Ложь;
		КонецЕсли;
		Если ОписаниеТипов.Типы().Количество() = 0 
			И СтрокаДерева.Операнд <> ОперандФиксированныеЗначения() 
			И СтрокаДерева.Операнд <> ОперандНовоеЗначение() Тогда
			ДоступностьДобавление = Ложь;
		ИначеЕсли ОписаниеТипов.Типы().Количество() = 1 Тогда
			Тип = ОписаниеТипов.Типы()[0];
			Если Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Булево") ИЛИ Тип = Тип("Дата") Тогда
				// Константы простых типов указываются непосредственно в формуле
				ДоступностьДобавление = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Если Элементы.ДеревоОперандовКонтекстноеМенюДобавитьФиксированноеЗначение.Доступность <> ДоступностьДобавление Тогда
		Элементы.ДеревоОперандовКонтекстноеМенюДобавитьФиксированноеЗначение.Доступность = ДоступностьДобавление;
	КонецЕсли; 
	Если Элементы.ДеревоОперандовКонтекстноеМенюУдалитьФиксированноеЗначение.Доступность <> ДоступностьУдаление Тогда
		Элементы.ДеревоОперандовКонтекстноеМенюУдалитьФиксированноеЗначение.Доступность = ДоступностьУдаление;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеТекущейСтроки.Операнд = ОперандФиксированныеЗначения() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеТекущейСтроки.Операнд = ОперандНовоеЗначение() Тогда
		ОткрытьФорму("Справочник.Спецификации.Форма.ДобавлениеФиксированногоЗначения", , ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		// Вставка идентификатора операнда в формулу
		ТекстВставки = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
		ВставитьТекстВФормулу(ТекстВставки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеТекущейСтроки = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеТекущейСтроки.Операнд = ОперандНовоеЗначение()
		ИЛИ ДанныеТекущейСтроки.Операнд = ОперандФиксированныеЗначения() Тогда
		// Строка предназначения для добавления новых значений, не перетаскивается
		Выполнение = Ложь;
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания.Значение = КэшЗначений.ОперандНачало + ДанныеТекущейСтроки.Операнд + КэшЗначений.ОперандКонец;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Операторы.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.Количество() < 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = ПараметрыПеретаскивания.Значение[0];
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДобавленияТекста = ПередДобавлениемТекстаВФормулу(ДанныеТекущейСтроки.Оператор);
	Если НЕ ПараметрыДобавленияТекста.Отказ = Истина Тогда
		
		ВставитьТекстВФормулу(ПараметрыДобавленияТекста.ТекстВставки, ПараметрыДобавленияТекста.ЗаменитьТекстФормулы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РеквизитСопоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексСтроки", Элементы.ГруппаРеквизитыСопоставления.ПодчиненныеЭлементы.Индекс(Элемент));
	Оповещение = Новый ОписаниеОповещения("РеквизитСопоставленияЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Поля сопоставления'"));
	ПараметрыОткрытия.Вставить("Режим", "ПоляГруппировки");
	ПараметрыОткрытия.Вставить("АдресСхемы", АдресСхемы);
	ПараметрыОткрытия.Вставить("АдресНастроек", ПоместитьВоВременноеХранилище(Компоновщик.Настройки, УникальныйИдентификатор));
	СписокПолей = Новый СписокЗначений;
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Если ТипЗнч(СтрокаРеквизита.Реквизит)<>Тип("Строка") ИЛИ ПустаяСтрока(СтрокаРеквизита.Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		СписокПолей.Добавить(СтрокаРеквизита.Реквизит);
	КонецЦикла; 
	ПараметрыОткрытия.Вставить("СуществующийПоля", СписокПолей);
	ОткрытьФорму("ОбщаяФорма.ФормаСпискаПолей", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСопоставленияЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизита = РеквизитыСопоставления[ДополнительныеПараметры.ИндексСтроки];
	СтрокаРеквизита.Реквизит = ВыбранноеЗначение;
	РеквизитСопоставленияЗавершениеВыбораСервер(СтрокаРеквизита.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура РеквизитСопоставленияЗавершениеВыбораСервер(Идентификатор)
	
	ЗаполнитьТипЗаголовокРеквизита(Идентификатор);
	ОбновитьРеквизитыНаФорме(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РеквизитСопоставленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя;
	РеквизитСопоставленияОчисткаСервер(ИмяРеквизита);	
	
КонецПроцедуры

&НаСервере
Процедура РеквизитСопоставленияОчисткаСервер(ИмяРеквизита)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяРеквизита", ИмяРеквизита);
	Строки = РеквизитыСопоставления.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Элемент = Элементы.Найти(СтрокаРеквизита.ИмяРеквизита);
		Если Элемент<>Неопределено Тогда
			УдаляемыеЭлементы.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	Элемент = Элементы.Найти("Колонка"+ИмяРеквизита);
	Если Элемент<>Неопределено Тогда
		УдаляемыеЭлементы.Добавить(Элемент);
		УдаляемыеРеквизиты.Добавить("Сопоставление." + ИмяРеквизита);
	КонецЕсли;
	
	СтрокаРеквизита = Строки[0];
	РеквизитыСопоставления.Удалить(СтрокаРеквизита);
	
	Для каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	Если УдаляемыеРеквизиты.Количество()>0 Тогда
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Элемент = Элементы.Добавить(СтрокаРеквизита.ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаРеквизитыСопоставления);
		ЗаполнитьСвойстваЭлементаОтбора(Элемент, СтрокаРеквизита);
	КонецЦикла; 
	
	ОбновитьКнопкиОчистки();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Сопоставление.ТекущиеДанные;
	
	// Заполнение ключей строк правил
	Если Копирование Тогда
		ТекущаяСтрока.КлючСтрокиПравил = 0;
	КонецЕсли; 
	Если НоваяСтрока Тогда
		СписокНомеров = Новый СписокЗначений;
		Для каждого СтрокаТабличнойЧасти Из Сопоставление Цикл
			Если СтрокаТабличнойЧасти.КлючСтрокиПравил=0 И СтрокаТабличнойЧасти<>ТекущаяСтрока Тогда
				// Ошибка нумерации, незаполненные номера. Требуется перенумерация всей таблицы
				ЗаполнитьКлючиПравил(Сопоставление);
				Возврат;
			КонецЕсли; 
			Если СтрокаТабличнойЧасти.КлючСтрокиПравил=0 Тогда
				Продолжить;
			КонецЕсли; 
			СписокНомеров.Добавить(СтрокаТабличнойЧасти.КлючСтрокиПравил);
		КонецЦикла;
		СписокНомеров.СортироватьПоЗначению();
		ТекущийНомер = 1;
		Для каждого ЭлементНомера Из СписокНомеров Цикл
			Если ЭлементНомера.Значение>ТекущийНомер Тогда
				Прервать;
			ИначеЕсли ЭлементНомера.Значение<ТекущийНомер Тогда
				// Ошибка нумерации, повторяющиеся номера. Требуется перенумерация всей таблицы
				ЗаполнитьКлючиПравил(Сопоставление);
				Возврат;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
		ТекущаяСтрока.КлючСтрокиПравил = ТекущийНомер;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКлючиПравил(Таблица)
	
	ТекущийНомер = 1;
	Для каждого СтрокаТабличнойЧасти Из Таблица Цикл
		СтрокаТабличнойЧасти.КлючСтрокиПравил = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнительнаяОбработкаФормулы();
	
	РежимСопоставления = (Режим=1);
	Результат = Новый Структура;
	Результат.Вставить("Результат", КодВозвратаДиалога.Да);
	Результат.Вставить("ИспользуетсяСопоставление", РежимСопоставления);
	Результат.Вставить("Формула", ?(РежимСопоставления, "", Формула));
	Результат.Вставить("Сопоставление", Новый Массив);
	Результат.Вставить("ФиксированныеЗначения", Новый Массив);
	Для каждого СтрокаТаблицы Из ФиксированныеЗначения Цикл
		СтруктураОписания = Новый Структура;
		СтруктураОписания.Вставить("Идентификатор", СтрокаТаблицы.Идентификатор);
		СтруктураОписания.Вставить("Значение", СтрокаТаблицы.Значение);
		Результат.ФиксированныеЗначения.Добавить(СтруктураОписания);
	КонецЦикла; 
	Если РежимСопоставления Тогда
		Для каждого СтрокаТаблицы Из Сопоставление Цикл
			Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
				СтруктураОписания = Новый Структура;
				СтруктураОписания.Вставить("КлючСтрокиПравил", СтрокаТаблицы.КлючСтрокиПравил);
				Если ИмяТЧ="Операции" Тогда
					СтруктураОписания.Вставить("Операция", СтрокаТаблицы.Номенклатура);
				Иначе
					СтруктураОписания.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
					СтруктураОписания.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
				КонецЕсли; 
				СтруктураОписания.Вставить("РеквизитСопоставления", СтрокаРеквизита.Реквизит);
				СтруктураОписания.Вставить("ЗначениеРеквизита", СтрокаТаблицы[СтрокаРеквизита.ИмяРеквизита]);
				Результат.Сопоставление.Добавить(СтруктураОписания);
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("Описание", Описание);
	
	Модифицированность = Ложь;
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	Перем Ошибки;
	
	ОчиститьСообщения();
	ПроверитьФормулуНаСервере(Ошибки);
	
	Если Ошибки = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru ='Формула пригодна для расчетов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru ='Проверка формулы'"));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитСопоставления(Команда)
	
	ДобавитьРеквизитСопоставленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитСопоставленияСервер()
	
	СтрокаРеквизита = РеквизитыСопоставления.Добавить();
	СтрокаРеквизита.ИмяРеквизита = НовоеИмяРеквизита();
	ОбновитьРеквизитыНаФорме(СтрокаРеквизита.ПолучитьИдентификатор());
 
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
			ТекстСообщения = НСтр("ru = 'Заполнены не все реквизиты сопоставления.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , СтрокаРеквизита.ИмяРеквизита);
			Возврат;
		КонецЕсли; 
	КонецЦикла;  
	Если Сопоставление.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Данные сопоставления будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.Отмена); 
	Иначе
		ЗаполнитьФрагмент();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
	
	ЗаполнитьСопоставлениеСервер();
	Модифицированность = Истина;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьФиксированноеЗначение(Команда)
	
	СтрокаДерева = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ОписаниеТипов = СтрокаДерева.Тип;
	Если ОписаниеТипов.Типы().Количество() = 0 
		И СтрокаДерева.Операнд <> ОперандФиксированныеЗначения() 
		И СтрокаДерева.Операнд <> ОперандНовоеЗначение() Тогда
		Возврат;
	КонецЕсли;
	ОграниченияТипов = Новый Массив;
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		ОграниченияТипов.Добавить(Тип);
	КонецЦикла; 
	СтруктураОткрытия = Новый Структура;
	Если ОграниченияТипов.Количество() > 0 Тогда
		СтруктураОткрытия.Вставить("ОграниченияТипов", ОграниченияТипов);
	КонецЕсли; 
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) И СтрокаРодитель <> Неопределено Тогда
		ЗаголовокПоля = ЗаголовокПоля(СтрокаДерева, СтрокаДерева.Операнд, КэшЗначений);
		Свойство = СвойствоПоНаименованию(СтрокаРодитель.Операнд, ЗаголовокПоля);
		Если ЗначениеЗаполнено(Свойство) Тогда
			СтруктураОткрытия.Вставить("Свойство", Свойство);
		КонецЕсли; 
	КонецЕсли; 
	ОткрытьФорму("Справочник.Спецификации.Форма.ДобавлениеФиксированногоЗначения", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФиксированноеЗначение(Команда)
	
	СтрокаДерева = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаДерева.Операнд = ОперандНовоеЗначение() Тогда
		Возврат;
	КонецЕсли; 
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено ИЛИ СтрокаРодитель.Операнд <> ОперандФиксированныеЗначения() Тогда
		Возврат;
	КонецЕсли;
	ИскомаяСтрока = КэшЗначений.ОперандНачало + СтрокаДерева.Операнд + КэшЗначений.ОперандКонец;
	Если СтрНайти(Формула, ИскомаяСтрока) > 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Значение используется в формуле'"), , "Формула");
		Возврат;
	КонецЕсли; 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", СтрокаДерева.Операнд);
	СтрокиКУдалению = ФиксированныеЗначения.НайтиСтроки(СтруктураОтбора);
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ФиксированныеЗначения.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	СтрокаРодитель.ПолучитьЭлементы().Удалить(СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаДерева));
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого СтрокаДерева Из ДеревоОперандов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОперандов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого СтрокаДерева Из ДеревоОперандов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОперандов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Если Форма.Режим = 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФормула;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставление;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Проверить", "Видимость", Форма.Режим=0);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Режим", "Видимость", Форма.ОграничениеТипа = Тип("СправочникСсылка.Номенклатура"));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СопоставлениеХарактеристика", "Видимость", Форма.ИмяТЧ="Состав");
	Если Форма.ИмяТЧ = "Операции" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СопоставлениеНоменклатура", "Заголовок", НСтр("ru = 'Операция'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеФормы()
	
	Результат = Истина;
	
	РежимСопоставления = (Режим=1);
	Если НЕ РежимСопоставления И ПустаяСтрока(Формула) Тогда
		ТекстСообщения = НСтр("ru ='Не задана формула расчета.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Формула");
		Результат = Ложь;
	КонецЕсли; 
	Если РежимСопоставления Тогда
		Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
				ТекстСообщения = НСтр("ru ='Не задан реквизит сопоставления.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , СтрокаРеквизита.ИмяРеквизита);
				Результат = Ложь;
			КонецЕсли; 
		КонецЦикла;
		Если Сопоставление.Количество()=0 Тогда
			ТекстСообщения = НСтр("ru ='Не заданы правила сопоставления.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Сопоставление");
			Результат = Ложь;
		КонецЕсли;
		Для каждого СтрокаСопоставления Из Сопоставление Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСопоставления.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru ='Не указана заполняемая номенклатура.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , СтрШаблон("Сопоставление[%1].Номенклатура", Сопоставление.Индекс(СтрокаСопоставления)));
				Результат = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОперандов()
	
	ДеревоОперандов.ПолучитьЭлементы().Очистить();
	ДоступныеПоля = Компоновщик.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	Для каждого Поле Из ДоступныеПоля Цикл
		Если Поле.Папка ИЛИ Поле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = Строка(Поле.Поле);
		СтрокаОбъекта = ДеревоОперандов.ПолучитьЭлементы().Добавить();
		СтрокаОбъекта.Операнд = ИмяПоля;
		СтрокаОбъекта.Представление = Поле.Заголовок;
		СтрокаОбъекта.Тип = Поле.Тип;
		Если ИмяПоля = "ЗаказПокупателя" ИЛИ ИмяПоля = "ЗаказНаПроизводство" Тогда
			СтрокаОбъекта.Картинка = БиблиотекаКартинок.Документ;
		Иначе
			СтрокаОбъекта.Картинка = БиблиотекаКартинок.Справочник;
		КонецЕсли;
		Для каждого Реквизит Из Поле.Элементы Цикл
			ИмяРеквизита = Строка(Реквизит.Поле);
			ЭтоСтрокаПродукции = (ИмяРеквизита = "ЗаказПокупателя.Запасы" ИЛИ ИмяРеквизита = "ЗаказНаПроизводство.Продукция");
			Если Реквизит.Папка И НЕ ЭтоСтрокаПродукции Тогда
				// Прочие табличные части
				Продолжить;
			КонецЕсли;
			Если НЕ Реквизит.Папка Тогда
				Если НЕ СодержитСсылочныйТип(Реквизит) И НЕ СодержитПростойТип(Реквизит) Тогда
					// Неподходящий тип реквизита
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			СтрокаРеквизита = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
			СтрокаРеквизита.Операнд = ИмяРеквизита;
			СтрокаРеквизита.Представление = ПоследняяЧастьЗаголовка(Реквизит.Заголовок, 1);
			СтрокаРеквизита.Тип = Реквизит.Тип;
			Если Реквизит.Папка Тогда
				// ТЧ Запасы заказа покупателя и Продукция заказа на производство разворачиваем до реквизитов
				Для каждого РеквизитТЧ Из Реквизит.Элементы Цикл
					Если НЕ СодержитСсылочныйТип(РеквизитТЧ) И НЕ СодержитПростойТип(РеквизитТЧ) Тогда
						// Неподходящий тип реквизита
						Продолжить;
					КонецЕсли; 
					СтрокаРеквизитаТЧ = СтрокаРеквизита.ПолучитьЭлементы().Добавить();
					СтрокаРеквизитаТЧ.Операнд = Строка(РеквизитТЧ.Поле);
					СтрокаРеквизитаТЧ.Представление = ПоследняяЧастьЗаголовка(РеквизитТЧ.Заголовок, 2);
					СтрокаРеквизитаТЧ.Тип = РеквизитТЧ.Тип;
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	СтрокаОбъекта = ДеревоОперандов.ПолучитьЭлементы().Добавить();
	СтрокаОбъекта.Операнд = ОперандФиксированныеЗначения();
	СтрокаОбъекта.Представление = НСтр("ru = 'Фиксированные значения'");
	СтрокаЗначения = СтрокаОбъекта.ПолучитьЭлементы().Добавить(); 
	СтрокаЗначения.Операнд = ОперандНовоеЗначение();
	СтрокаЗначения.Представление = НСтр("ru = '<Новое значение>'");
	Для каждого СтрокаТаблицы Из ФиксированныеЗначения Цикл
		СтрокаЗначения = СтрокаОбъекта.ПолучитьЭлементы().Добавить(); 
		СтрокаЗначения.Операнд = СтрокаТаблицы.Идентификатор;
		СтрокаЗначения.Представление = Строка(СтрокаТаблицы.Значение);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СодержитСсылочныйТип(Реквизит)
	
	Для каждого Тип Из Реквизит.Тип.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СодержитПростойТип(Реквизит)
	
	Возврат (Реквизит.Тип.СодержитТип(Тип("Число")) 
		ИЛИ Реквизит.Тип.СодержитТип(Тип("Строка")) 
		ИЛИ Реквизит.Тип.СодержитТип(Тип("Булево")) 
		ИЛИ Реквизит.Тип.СодержитТип(Тип("Дата")));
	
КонецФункции

&НаСервере
Функция ПоследняяЧастьЗаголовка(Строка, Уровень)
	
	Результат = Строка;
	Позиция = СтрНайти(Результат, ".", НаправлениеПоиска.СНачала, , Уровень);
	Если Позиция>0 Тогда
		Результат = Сред(Результат, Позиция + 1);
	КонецЕсли; 
	Возврат Результат;
					
КонецФункции

&НаКлиенте
Функция ПередДобавлениемТекстаВФормулу(ЗНАЧ ТекстВставки)
	
	ПараметрыДобавленияТекста = Новый Структура("ТекстВставки, ЗаменитьТекстФормулы, Отказ", ТекстВставки, Ложь, Ложь);
	
	ДанныеОперанда = Элементы.ДеревоОперандов.ТекущиеДанные;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%1"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%5"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%20"
		ИЛИ СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "%50"
		Тогда
		
		Если ДанныеОперанда = Неопределено 
			ИЛИ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ТекстСообщения = НСтр("ru ='Укажите значение, от которого необходимо вычислить процент'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДеревоОперандов");
			
			ПараметрыДобавленияТекста.Отказ = Истина;
			Возврат ПараметрыДобавленияТекста;
			
		Иначе
			
			ПредставлениеЧисло = СтрЗаменить(ТекстВставки, "%", "");
			ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон(" + (%1", КэшЗначений.ОперандНачало) + ДанныеОперанда.Операнд + СтрШаблон("%1 / 100 * ", КэшЗначений.ОперандКонец) + ПредставлениеЧисло + ".0)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СокрЛП(ПараметрыДобавленияТекста.ТекстВставки) = "ЕСЛИ" Тогда
		
		ПервоеЗначениеУсловногоОператора = "<?>";
		Если НЕ ПустаяСтрока(Формула) Тогда
			
			ПервоеЗначениеУсловногоОператора = Формула;
			Формула = "";
			ПараметрыДобавленияТекста.ЗаменитьТекстФормулы = Истина;
			
		ИначеЕсли ДанныеОперанда <> Неопределено 
			И НЕ ПустаяСтрока(ДанныеОперанда.Операнд) Тогда
			
			ПервоеЗначениеУсловногоОператора = КэшЗначений.ОперандНачало + ДанныеОперанда.Операнд + КэшЗначений.ОперандКонец;
			
		КонецЕсли;
		
		ПараметрыДобавленияТекста.ТекстВставки = СтрШаблон("#ЕСЛИ <Условие>%1%2#ТОГДА %3%1%2#ИНАЧЕ <?>%1#КОНЕЦЕСЛИ", Символы.ПС, Символы.Таб, ПервоеЗначениеУсловногоОператора);
		
	КонецЕсли;
	
	Возврат ПараметрыДобавленияТекста;
	
КонецФункции

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстВставки, ЗаменитьТекстФормулы = Ложь)
	
	Если ПустаяСтрока(ТекстВставки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЗаменитьТекстФормулы Тогда
		
		Формула = ТекстВставки;
		Возврат;
		
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		
		Формула = Формула + ТекстВставки;
		
	#Иначе
		
		СтрокаНач = 0;
		СтрокаКон = 0;
		КолонкаНач = 0;
		КолонкаКон = 0;
		
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстВставки)) > Элементы.Формула.Ширина / 8 Тогда
			
			Элементы.Формула.ВыделенныйТекст = "";
			
		КонецЕсли;
			
		Элементы.Формула.ВыделенныйТекст = ТекстВставки;
		
	#КонецЕсли
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОператоров()
	
	ДеревоОператоров = РеквизитФормыВЗначение("Операторы", Тип("ДеревоЗначений"));
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='АРИФМЕТИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Сложение ""+""'");
	НоваяСтрока.Оператор		= " + ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Вычитание ""-""'");
	НоваяСтрока.Оператор		= " - ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Умножение ""*""'");
	НоваяСтрока.Оператор		= " * ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Деление ""/""'");
	НоваяСтрока.Оператор		= " / ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Остаток от деления ""%""'");
	НоваяСтрока.Оператор		= " % ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ЛОГИЧЕСКИЕ ОПЕРАТОРЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Если...Иначе...КонецЕсли'");
	НоваяСтрока.Оператор		= "ЕСЛИ"; // "#ЕСЛИ <Условие> #ТОГДА <?> #ИНАЧЕ <?> #КОНЕЦЕСЛИ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>'");
	НоваяСтрока.Оператор		= " > ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='>='");
	НоваяСтрока.Оператор		= " >= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<'");
	НоваяСтрока.Оператор		= " < ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<='");
	НоваяСтрока.Оператор		= " <= ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='='");
	НоваяСтрока.Оператор		= " = ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='<>'");
	НоваяСтрока.Оператор		= " <> ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='И'");
	НоваяСтрока.Оператор		= " И ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИЛИ'");
	НоваяСтрока.Оператор		= " ИЛИ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='НЕ'");
	НоваяСтрока.Оператор		= " НЕ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ИСТИНА'");
	НоваяСтрока.Оператор		= " ИСТИНА ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='ЛОЖЬ'");
	НоваяСтрока.Оператор		= " ЛОЖЬ ";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Открывающая скобка ""(""'");
	НоваяСтрока.Оператор		= " (";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Закрывающая скобка "")""'");
	НоваяСтрока.Оператор		= ") ";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ФУНКЦИИ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Максимум'");
	НоваяСтрока.Оператор		= " Макс(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Минимум'");
	НоваяСтрока.Оператор		= " Мин(<?>,<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Целая часть'");
	НоваяСтрока.Оператор		= " Цел(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Округление'");
	НоваяСтрока.Оператор		= " Окр(<?>,<Точность?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Предопределенное значение'");
	НоваяСтрока.Оператор		= " ПредопределенноеЗначение(<?>)";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Значение заполнено'");
	НоваяСтрока.Оператор		= " ЗначениеЗаполнено(<?>)";
	
	ГруппаСтрок 				= ДеревоОператоров.Строки.Добавить();
	ГруппаСтрок.Наименование	= НСтр("ru ='ШАБЛОНЫ'");
	ГруппаСтрок.Картинка		= 1;
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""1%""'");
	НоваяСтрока.Оператор		= " %1";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""5%""'");
	НоваяСтрока.Оператор		= " %5";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""20%""'");
	НоваяСтрока.Оператор		= " %20";
	
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='Процент ""50%""'");
	НоваяСтрока.Оператор		= " %50";
		
	НоваяСтрока 				= ГруппаСтрок.Строки.Добавить();
	НоваяСтрока.Наименование	= НСтр("ru ='НЕОПРЕДЕЛЕНО'");
	НоваяСтрока.Оператор		= " НЕОПРЕДЕЛЕНО ";
		
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуНаСервере(Ошибки)
	
	МассивТипов = Новый Массив;
	Если ПростыеТипы Тогда
		МассивТипов.Добавить(Тип("Число"));
	Иначе
		МассивТипов.Добавить(ОграничениеТипа);
	КонецЕсли; 
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	ПроизводствоФормулыСервер.ПроверитьФормулу(Ошибки, Формула, ФиксированныеЗначения, ОписаниеТипов, КатегорияНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУмножениеВФормулу()
	
	// Процедура заменяет "][" на "]*["
	ТаблицаВставок = Новый ТаблицаЗначений;
	ТаблицаВставок.Колонки.Добавить("ПозицияНачалаОперанда");
	ТаблицаВставок.Колонки.Добавить("ПозицияКонцаОперанда");
	
	НачалоОперанда = ПроизводствоФормулыСервер.СтрокаНачалаОперанда();
	КонецОперанда = ПроизводствоФормулыСервер.СтрокаКонцаОперанда();
	
	ПозицияНачалаОперанда = 0;
	ПозицияКонцаОперанда = 0;
	
	СтрокаМежду			= "";
	ДлинаСтроки 		= СтрДлина(Формула);
	Для ИндексСимвола = 0 По ДлинаСтроки Цикл
		
		Символ = Сред(Формула, ИндексСимвола, 1);
		Если Символ = КонецОперанда Тогда
			
			СтрокаМежду 			= "";
			ПозицияКонцаОперанда 	= ИндексСимвола;
			ПозицияНачалаОперанда	= 0;
			
		ИначеЕсли Символ = НачалоОперанда Тогда
			
			ПозицияНачалаОперанда	= ИндексСимвола;
			
		КонецЕсли;
			
		Если ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда = 0
			И Символ <> КонецОперанда Тогда
			
			СтрокаМежду = СтрокаМежду + Символ;
			
		ИначеЕсли ПозицияКонцаОперанда <> 0 
			И ПозицияНачалаОперанда <> 0 Тогда
			
			Если ПустаяСтрока(СокрЛП(СтрокаМежду)) Тогда
				
				НоваяСтрока							= ТаблицаВставок.Добавить();
				НоваяСтрока.ПозицияНачалаОперанда	= ПозицияНачалаОперанда;
				НоваяСтрока.ПозицияКонцаОперанда	= ПозицияКонцаОперанда;
				
			КонецЕсли;
			
			СтрокаМежду				= "";
			ПозицияНачалаОперанда	= 0;
			ПозицияКонцаОперанда	= 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВставок = ТаблицаВставок.Количество();
	Если КоличествоВставок > 0 Тогда
		
		Пока КоличествоВставок <> 0 Цикл
			
			СтрокаТаблицы = ТаблицаВставок.Получить(КоличествоВставок - 1);
			
			ПерваяПодстрока = Лев(Формула, СтрокаТаблицы.ПозицияКонцаОперанда);
			ВтораяПодстрока = Сред(Формула, СтрокаТаблицы.ПозицияНачалаОперанда);
			
			Формула 		= ПерваяПодстрока + " * " + ВтораяПодстрока;
			
			КоличествоВставок = КоличествоВставок - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительнаяОбработкаФормулы()
	
	ДобавитьУмножениеВФормулу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставления(ПараметрыОткрытия)
	
	РеквизитыСопоставления.Очистить();
	Сопоставление.Очистить();
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСопоставления.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСопоставления.Колонки.Добавить("КлючСтрокиПравил", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	Для каждого ЭлементСопоставления Из ПараметрыОткрытия.Сопоставление Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Реквизит", ЭлементСопоставления.РеквизитСопоставления);
		Строки = РеквизитыСопоставления.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			ИмяРеквизита = НовоеИмяРеквизита();
			ТаблицаСопоставления.Колонки.Добавить(ИмяРеквизита);
			СтрокаРеквизита = РеквизитыСопоставления.Добавить();
			СтрокаРеквизита.Реквизит = ЭлементСопоставления.РеквизитСопоставления;
			СтрокаРеквизита.ИмяРеквизита = ИмяРеквизита;
			ЗаполнитьТипЗаголовокРеквизита(СтрокаРеквизита.ПолучитьИдентификатор());
		Иначе
			ИмяРеквизита = Строки[0].ИмяРеквизита;
		КонецЕсли;
		СтрокаСопоставления = ТаблицаСопоставления.Найти(ЭлементСопоставления.КлючСтрокиПравил, "КлючСтрокиПравил");
		Если СтрокаСопоставления = Неопределено Тогда
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ЭлементСопоставления);
			Если ИмяТЧ="Операции" Тогда
				СтрокаСопоставления.Номенклатура = ЭлементСопоставления.Операция;
			КонецЕсли; 
		КонецЕсли;
		СтрокаСопоставления[ИмяРеквизита] = ЭлементСопоставления.ЗначениеРеквизита;
	КонецЦикла;
	
	Если РеквизитыСопоставления.Количество()=0 Тогда
		СтрокаРеквизита = РеквизитыСопоставления.Добавить();
		СтрокаРеквизита.Реквизит = "";
		СтрокаРеквизита.ИмяРеквизита = НовоеИмяРеквизита();
	КонецЕсли; 
	
	ОбновитьРеквизитыНаФорме();
	
	Для каждого СтрокаСопоставления Из ТаблицаСопоставления Цикл
		НоваяСтрока = Сопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыНаФорме(Идентификатор = Неопределено)
	
	Если Идентификатор<>Неопределено Тогда
		ИзменяемаяСтрока = РеквизитыСопоставления.НайтиПоИдентификатору(Идентификатор);
		ПоследняяСтрока = (РеквизитыСопоставления.Индекс(ИзменяемаяСтрока)=РеквизитыСопоставления.Количество()-1);
		ИндексВставки = РеквизитыСопоставления.Индекс(ИзменяемаяСтрока);
	Иначе
		ИзменяемаяСтрока = Неопределено;
		ПоследняяСтрока = Ложь;
		ИндексВставки = 0;
	КонецЕсли; 
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Если Идентификатор<>Неопределено И СтрокаРеквизита.ПолучитьИдентификатор()<>Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		Реквизит = Новый РеквизитФормы(
		СтрокаРеквизита.ИмяРеквизита,
		СтрокаРеквизита.Тип,
		"Сопоставление",
		СтрокаРеквизита.Заголовок);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	Для каждого Элемент Из Элементы.СопоставлениеГруппаРеквизиты.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)<>Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИзменяемаяСтрока<>Неопределено И "Колонка"+ИзменяемаяСтрока.ИмяРеквизита<>Элемент.Имя Тогда
			Продолжить;
		КонецЕсли; 
		УдаляемыеЭлементы.Добавить(Элемент);
		УдаляемыеРеквизиты.Добавить(Элемент.ПутьКДанным);
	КонецЦикла;
	Для каждого Элемент Из Элементы.ГруппаРеквизитыСопоставления.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)<>Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИзменяемаяСтрока<>Неопределено И ИзменяемаяСтрока.ИмяРеквизита<>Элемент.Имя Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	
	Для каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Если Идентификатор<>Неопределено И СтрокаРеквизита.ПолучитьИдентификатор()<>Идентификатор Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
			Если Идентификатор=Неопределено ИЛИ ПоследняяСтрока Тогда
				Элемент = Элементы.Добавить("Колонка" + СтрокаРеквизита.ИмяРеквизита, Тип("ПолеФормы"), Элементы.СопоставлениеГруппаРеквизиты);
			Иначе
				Элемент = Элементы.Вставить("Колонка" + СтрокаРеквизита.ИмяРеквизита, Тип("ПолеФормы"), Элементы.СопоставлениеГруппаРеквизиты, Элементы.СопоставлениеГруппаРеквизиты.ПодчиненныеЭлементы[ИндексВставки]);
			КонецЕсли; 
			Элемент.ПутьКДанным = "Сопоставление." + СтрокаРеквизита.ИмяРеквизита;
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.Заголовок = СтрокаРеквизита.Заголовок;
			Если ТипЗнч(СтрокаРеквизита.ПараметрыВыбора)=Тип("ФиксированныйМассив") Тогда
				Элемент.ПараметрыВыбора = СтрокаРеквизита.ПараметрыВыбора;
			КонецЕсли;
			Если РеквизитПодчиненНоменклатуре(СтрокаРеквизита.Реквизит) Тогда
				МассивПараметров = Новый Массив(Элемент.ПараметрыВыбора);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Продукция));
				Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			КонецЕсли; 
		КонецЕсли;
		Если Идентификатор=Неопределено ИЛИ ПоследняяСтрока Тогда
			Элемент = Элементы.Добавить(СтрокаРеквизита.ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаРеквизитыСопоставления);
		Иначе
			Элемент = Элементы.Вставить(СтрокаРеквизита.ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаРеквизитыСопоставления, Элементы.ГруппаРеквизитыСопоставления.ПодчиненныеЭлементы[ИндексВставки]);
		КонецЕсли;
		ЗаполнитьСвойстваЭлементаОтбора(Элемент, СтрокаРеквизита);
	КонецЦикла;
	
	ОбновитьКнопкиОчистки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитПодчиненНоменклатуре(ИмяРеквизита)
	
	Возврат ИмяРеквизита = "Характеристика" 
	ИЛИ ИмяРеквизита = "Характеристика.Ссылка" 
	ИЛИ ИмяРеквизита = "Спецификация" 
	ИЛИ ИмяРеквизита = "Спецификация.Ссылка";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвойстваЭлементаОтбора(Элемент, СтрокаРеквизита)
	
	Элемент.ПутьКДанным = СтрШаблон("РеквизитыСопоставления[%1].Реквизит", РеквизитыСопоставления.Индекс(СтрокаРеквизита));
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Элемент.КнопкаВыбора = Истина;
	Элемент.КнопкаВыпадающегоСписка = Ложь;
	Элемент.КнопкаОткрытия = Ложь;
	Элемент.ВыбиратьТип = Ложь;
	Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	Элемент.РедактированиеТекста = Ложь;
	Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_РеквизитСопоставленияНачалоВыбора");
	Элемент.УстановитьДействие("Очистка", "Подключаемый_РеквизитСопоставленияОчистка");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиОчистки()
	
	КнопкаОчистки = ?(РеквизитыСопоставления.Количество()<=1, Ложь, Истина);
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Элемент = Элементы[СтрокаРеквизита.ИмяРеквизита];
		Если ТипЗнч(Элемент)<>Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.КнопкаОчистки<>КнопкаОчистки Тогда
			Элемент.КнопкаОчистки = КнопкаОчистки;
		КонецЕсли; 
	КонецЦикла; 
 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипЗаголовокРеквизита(Идентификатор)
	
	СтрокаРеквизита = РеквизитыСопоставления.НайтиПоИдентификатору(Идентификатор);
	Если НЕ ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
		СтрокаРеквизита.Тип = Новый ОписаниеТипов("Неопределено");
		Возврат;
	КонецЕсли; 
	
	ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаРеквизита.Реквизит));
	Если ДоступноеПоле=Неопределено Тогда
		СтрокаРеквизита.Тип = Новый ОписаниеТипов("Неопределено");
		СтрокаРеквизита.Заголовок = "";
	Иначе
		СтрокаРеквизита.Тип = ДоступноеПоле.ТипЗначения;
		СтрокаРеквизита.Заголовок = ЗаголовокПоля(СтрокаРеквизита, ДоступноеПоле.Заголовок, КэшЗначений);
		Если ДоступноеПоле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			// Требуется определить свойство-владелец значений
			Свойство = СвойствоПоНаименованию(Строка(ДоступноеПоле.Родитель.Поле), СтрокаРеквизита.Заголовок);
			Если Свойство<>Неопределено Тогда
				ПараметрыВыбора = Новый Массив;
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Свойство));
				СтрокаРеквизита.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПоля(СтрокаРеквизита, ПолныйЗаголовок, КэшЗначений)
	
	Позиция = СтрНайти(ПолныйЗаголовок, ".", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		ЗаголовокПоля = Сред(ПолныйЗаголовок, Позиция + 1);
		ПолеРодитель = Лев(ПолныйЗаголовок, Позиция - 1);
	Иначе
		ЗаголовокПоля = ПолныйЗаголовок;
		ПолеРодитель = "";
	КонецЕсли;
	Если Лев(ЗаголовокПоля, 1) = КэшЗначений.ОперандНачало Тогда
		ЗаголовокПоля = Сред(ЗаголовокПоля, 2);
	КонецЕсли;
	Если Прав(ЗаголовокПоля, 1) = КэшЗначений.ОперандКонец Тогда
		ЗаголовокПоля = Лев(ЗаголовокПоля, СтрДлина(ЗаголовокПоля) - 1);
	КонецЕсли; 
	Позиция = СтрНайти(ЗаголовокПоля, "(", НаправлениеПоиска.СКонца);
	ПоКатегориям = (ПолеРодитель = "Номенклатура" ИЛИ ПолеРодитель = "Характеристика" ИЛИ ПолеРодитель = "Спецификация");
	Если Позиция > 0 И ПоКатегориям Тогда
		ЗаголовокПоля = Лев(ЗаголовокПоля, Позиция - 2);	
	КонецЕсли;
	Возврат ЗаголовокПоля;
	
КонецФункции 

&НаСервере
Функция НовоеИмяРеквизита()
	
	Возврат СтрШаблон("Реквизит%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	
КонецФункции

&НаСервере
Функция СвойствоПоНаименованию(ИмяОбъекта, Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивНаборов = Новый Массив;
	Если ИмяОбъекта = "Номенклатура" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	ИначеЕсли ИмяОбъекта = "Характеристика" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	ИначеЕсли ИмяОбъекта = "Спецификация" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Спецификации);
	ИначеЕсли ИмяОбъекта = "ЗаказНаПроизводство" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказНаПроизводство);
	ИначеЕсли ИмяОбъекта = "ЗаказПокупателя" Тогда
		МассивНаборов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наборы", МассивНаборов);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ (&Наборы)
	|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСопоставлениеСервер()
	
	Запрос = Новый Запрос;
	
	// Формирование текста запроса для выборки всех значений реквизитов сопоставления
	// Связь значений по принципу "все со всеми"
	// Учитываются только реквизиты с ограниченным количеством значений (ссылки, булево)
	ПростойТип = Новый ОписаниеТипов("Строка, Число, Дата");
	Подзапросы = Новый Массив;
	ЧитаемыеРеквизиты = Новый Массив;
	Для каждого СтрокаРеквизита Из РеквизитыСопоставления Цикл
		Типы = СтрокаРеквизита.Тип.Типы();
		ЧитаемыеТипы = Новый Массив;
		Для каждого Тип Из Типы Цикл
			Если ПростойТип.СодержитТип(Тип) Тогда
				Продолжить;
			КонецЕсли;
			ЧитаемыеТипы.Добавить(Тип);
		КонецЦикла;
		ОбъединяемыеЗапросы = Новый Массив;
		Для каждого Тип Из ЧитаемыеТипы Цикл
			Если Тип=Тип("Булево") Тогда
				Если ОбъединяемыеЗапросы.Количество()=0 Тогда
					СекцияПоместить = СтрШаблон("ПОМЕСТИТЬ ВсеОбъекты%1", СтрокаРеквизита.ИмяРеквизита);
				Иначе
					СекцияПоместить = "";
				КонецЕсли; 
				ТекстЗапроса = СтрШаблон("ВЫБРАТЬ ИСТИНА КАК Ссылка %1 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ЛОЖЬ", СекцияПоместить);
				ОбъединяемыеЗапросы.Добавить(ТекстЗапроса);
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Ссылка = Новый(Тип);
				МетаданныеОбъекта = Ссылка.Метаданные();
				Для каждого Значение Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
					Если ОбъединяемыеЗапросы.Количество() = 0 Тогда
						СекцияПоместить = СтрШаблон("ПОМЕСТИТЬ ВсеОбъекты%1", СтрокаРеквизита.ИмяРеквизита);
					Иначе
						СекцияПоместить = "";
					КонецЕсли; 
					ТекстЗапроса = СтрШаблон("ВЫБРАТЬ ЗНАЧЕНИЕ(%2.%3) КАК Ссылка %1", СекцияПоместить, МетаданныеОбъекта.ПолноеИмя(), Значение.Имя);
					ОбъединяемыеЗапросы.Добавить(ТекстЗапроса);
				КонецЦикла; 
			Иначе
				Ссылка = Новый(Тип);
				МетаданныеОбъекта = Ссылка.Метаданные();
				Если ОбъединяемыеЗапросы.Количество() = 0 Тогда
					СекцияПоместить = СтрШаблон("ПОМЕСТИТЬ ВсеОбъекты%1", СтрокаРеквизита.ИмяРеквизита);
				Иначе
					СекцияПоместить = "";
				КонецЕсли;
				МассивЭлементовОтбора = Новый Массив;
				Если ТипЗнч(СтрокаРеквизита.ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда
					Для каждого ПараметрВыбора Из СтрокаРеквизита.ПараметрыВыбора Цикл
						ИмяПараметра = СтрШаблон("Параметр%1", Запрос.Параметры.Количество() + 1);
						МассивЭлементовОтбора.Добавить(СтрШаблон("%1 = &%2", СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ИмяПараметра));
						Запрос.УстановитьПараметр(ИмяПараметра, ПараметрВыбора.Значение);
					КонецЦикла;
				КонецЕсли;
				Если РеквизитПодчиненНоменклатуре(СтрокаРеквизита.Реквизит) Тогда
					КатегорияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "КатегорияНоменклатуры", Истина);
					ИмяПараметраПродукция = СтрШаблон("Параметр%1", Запрос.Параметры.Количество() + 1);
					ИмяПараметраКатегория = СтрШаблон("Параметр%1", Запрос.Параметры.Количество() + 2);
					МассивЭлементовОтбора.Добавить(СтрШаблон("(%1 = &%2 ИЛИ %1 = &%3)", "Владелец", ИмяПараметраПродукция, ИмяПараметраКатегория));
					Запрос.УстановитьПараметр(ИмяПараметраПродукция, Продукция);
					Запрос.УстановитьПараметр(ИмяПараметраКатегория, КатегорияНоменклатуры);
				КонецЕсли; 
				Если МассивЭлементовОтбора.Количество() > 0 Тогда
					СекцияГде = СтрШаблон("ГДЕ %1", СтрСоединить(МассивЭлементовОтбора, " И "));
				Иначе
					СекцияГде = "";
				КонецЕсли; 
				ТекстЗапроса = СтрШаблон("ВЫБРАТЬ Ссылка КАК Ссылка %1 ИЗ %2 %3", СекцияПоместить, МетаданныеОбъекта.ПолноеИмя(), СекцияГде);
				ОбъединяемыеЗапросы.Добавить(ТекстЗапроса);
			КонецЕсли;
		КонецЦикла;
		Если ОбъединяемыеЗапросы.Количество() > 0 Тогда
			ТекстЗапроса = СтрСоединить(ОбъединяемыеЗапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
			Подзапросы.Добавить(ТекстЗапроса);
			ЧитаемыеРеквизиты.Добавить(СтрокаРеквизита.ИмяРеквизита);
		КонецЕсли; 
	КонецЦикла;
	Если Подзапросы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет читаемых реквизитов.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "РеквизитыСопоставления");
		Возврат;
	КонецЕсли; 
	ТекстЗапроса = СтрСоединить(Подзапросы, ";" + Символы.ПС);
	ПоляВыборки = Новый Массив;
	ТаблицыВыборки = Новый Массив;
	Для каждого ИмяРеквизита Из ЧитаемыеРеквизиты Цикл
		ПоляВыборки.Добавить(СтрШаблон("ВсеОбъекты%1.Ссылка КАК %1", ИмяРеквизита));
		ТаблицыВыборки.Добавить(СтрШаблон("ВсеОбъекты%1", ИмяРеквизита));
	КонецЦикла; 
	ФинальныйЗапрос = СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1000 %1 ИЗ %2",
	СтрСоединить(ПоляВыборки, "," + Символы.ПС),
	СтрСоединить(ТаблицыВыборки, "," + Символы.ПС));
	
	Запрос.Текст = ТекстЗапроса + ";" + Символы.ПС + ФинальныйЗапрос;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>=1000 Тогда
		ТекстСообщения = НСтр("ru = 'Слишком большой объем получаемых данных. Возможно, неверно настроены сопоставляемые 
                               |реквизиты или для сопоставления будет использоваться только часть имеющейся информации. 
                               |Автоматическое заполнение невозможно.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Сопоставление");
		Возврат;
	КонецЕсли; 
	
	Сопоставление.Очистить();
	
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Сопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.КлючСтрокиПравил = НомерСтроки;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФиксированныеЗначения(ВыбранноеЗначение)
		
	СтрокаРодитель = ДеревоОперандов.ПолучитьЭлементы().Получить(ДеревоОперандов.ПолучитьЭлементы().Количество() - 1);
	СтруктураПоиска = Новый Структура;
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Значение", Значение);
		Если ФиксированныеЗначения.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли; 
		Идентификатор = ИдентификаторПоЗначению(Значение);
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Идентификатор", Идентификатор);
		КоличествоНайденных = ФиксированныеЗначения.НайтиСтроки(СтруктураПоиска).Количество();
		Если КоличествоНайденных > 999 Тогда
			// Слишком много значений с одинаковым представлением
			Продолжить;
		КонецЕсли; 
		СтрокаТаблицы = ФиксированныеЗначения.Добавить();
		СтрокаТаблицы.Значение = Значение;
		Если КоличествоНайденных > 0 Тогда
			// Дублирование идентификатора
			Идентификатор = СтрШаблон("%1_%2", Идентификатор, Формат(КоличествоНайденных, "ЧЦ=3; ЧВН="));
		КонецЕсли; 
		СтрокаТаблицы.Идентификатор = Идентификатор;
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Операнд = СтрокаТаблицы.Идентификатор;
		НоваяСтрока.Представление = Строка(Значение);
		Если КоличествоНайденных > 0 Тогда
			// В случае дублирование включаем цифру в представление
			НоваяСтрока.Представление = СтрШаблон("%1 (%2)", НоваяСтрока.Представление, КоличествоНайденных);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПоЗначению(Значение)
	
	Тип = ТипЗнч(Значение);
	СтрНаименование = Строка(Значение);
	Идентификатор = УбратьСпецСимволы(СтрНаименование);
	ИдентификаторТипа = УбратьСпецСимволы(Строка(Тип));
	
	Возврат СтрШаблон("%1_%2", ИдентификаторТипа, Идентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьСпецСимволы(СтрНаименование)
		
	Разделители = " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	 
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
	  	Символ = Сред(СтрНаименование,НомСимвола,1);
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
		   БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
		   БылСпецСимвол = Ложь;
		   Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
		   Идентификатор = Идентификатор + Символ;          
		КонецЕсли;
	КонецЦикла;
	Возврат Идентификатор;
	
КонецФункции

#Область ФиксированныеСтроки

&НаКлиентеНаСервереБезКонтекста
Функция ОперандФиксированныеЗначения()
	
	Возврат "ФиксированныеЗначения";
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОперандНовоеЗначение()
	
	Возврат "НовоеЗначение";
	
КонецФункции 

#КонецОбласти 

#КонецОбласти


