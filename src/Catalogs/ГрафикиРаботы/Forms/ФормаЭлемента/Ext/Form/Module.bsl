
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НомерИзменяемогоМесяца = 0;
	НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	
	Элементы.ДатаОтсчета.Видимость = ?(ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный, Истина, Ложь);
	
	Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		
		ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный;
		
		Объект.ПроизводственныйКалендарь = ПроизводственныйКалендарь();
		
		ОбновитьПроизводственныйКалендарьГрафика(Истина);
		
	Иначе
		
		Цвет = Объект.Ссылка.Цвет.Получить();
		
		ПараметрыОтбора = Новый Структура("Год", НомерТекущегоГода);
		СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокаШаблоныПоГоду.Количество() Тогда
			ШаблонЗаполненияГрафика = СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика;
			ДатаОтсчета = СтрокаШаблоныПоГоду[0].ДатаОтсчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь)
			И ЗначениеЗаполнено(ШаблонЗаполненияГрафика) Тогда
			
			ЗаполнитьГрафикНаСервере();
			
			Элементы.ДатаОтсчета.Видимость = ?(ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный, Истина, Ложь);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Цвет = Объект.Ссылка.Цвет.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ШаблонЗаполненияГрафика) Тогда
		
		НомерГода = ?(ПараметрыЗаписи.Свойство("НомерТекущегоГода") И ЗначениеЗаполнено(ПараметрыЗаписи.НомерТекущегоГода)
		, ПараметрыЗаписи.НомерТекущегоГода, НомерТекущегоГода);
		
		ПараметрыОтбора = Новый Структура("Год", НомерГода);
		СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокаШаблоныПоГоду.Количество() Тогда
			НоваяСтрока = Объект.ШаблоныПоГоду.Добавить();
			НоваяСтрока.Год = НомерГода;
			НоваяСтрока.ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
			НоваяСтрока.ДатаОтсчета = ДатаОтсчета;
			НоваяСтрока.ТипГрафика = ТипГрафика;
			
		Иначе
			СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
			СтрокаШаблоныПоГоду[0].ДатаОтсчета = ДатаОтсчета;
			СтрокаШаблоныПоГоду[0].ТипГрафика = ТипГрафика;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Цвет = Новый ХранилищеЗначения(Цвет);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	НомерГода = ?(ПараметрыЗаписи.Свойство("НомерТекущегоГода") И ЗначениеЗаполнено(ПараметрыЗаписи.НомерТекущегоГода)
	, ПараметрыЗаписи.НомерТекущегоГода, НомерТекущегоГода);
	
	ЗаписатьДанныеВРегистр(НомерГода, Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	
	ОбновитьПроизводственныйКалендарьГрафика(Истина);
	
	ОбработатьДанныеГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если МобильныйКлиент Тогда
		Элементы.ПолеЦвет.МаксимальнаяШирина = 45; 
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ШаблонЗаполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
		ТекстСообщения = НСтр("ru ='Не указан производственный календарь'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЗаполненияПриИзменении(Элемент)
	
	ЗаполнитьПоШаблону();
	
	Если ДанныеГрафика.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)
	
	ОбновитьПроизводственныйКалендарьГрафика();
	
	Если ДанныеГрафика.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если ЭтаФорма.Модифицированность И ДанныеГрафика.Количество() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Если Не ЗначениеЗаполнено(Объект.Наименование)
			Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Поле наименование не заполнено!' ");
			Сообщение.Поле = "Объект.Наименование";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			//СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("Направление", Направление);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьГрафик", ЭтаФорма, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'Данные графика за %1% год изменены. Сохранить данные графика?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%1%", Строка(НомерТекущегоГода));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ДатаОтсчета = Дата(НомерТекущегоГода + Направление,1,1);
		ОбработатьДанныеГрафика(НомерТекущегоГода + Направление);
	КонецЕсли;
	
	НомерТекущегоГода = НомерТекущегоГода + Направление;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если ЭтаФорма.Модифицированность И ДанныеГрафика.Количество() Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Если Не ЗначениеЗаполнено(Объект.Наименование)
			Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Поле наименование не заполнено!' ");
			Сообщение.Поле = "Объект.Наименование";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("Направление", "ЭтоСобытиеПриИзменении");
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьГрафик", ЭтаФорма, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'Данные графика за %1% год изменены. Сохранить данные графика?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%1%", Строка(НомерТекущегоГода));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		ОбработатьДанныеГрафика(НомерТекущегоГода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтсчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
		
		Если Не Год(ДатаОтсчета) = НомерТекущегоГода Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Год даты отсчета не совпадает с годом графика!' ");
			Сообщение.Поле = "ДатаОтсчета";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
			
			Возврат;
			
		КонецЕсли;
		
		ДеньДатыОтсчета = День(ДатаОтсчета);
		МесяцДатыОтсчета = Месяц(ДатаОтсчета);
		
		Для СчетчикМесяц = 1 По МесяцДатыОтсчета Цикл
			
			НомерСтроки = СчетчикМесяц - 1;
			
			КоличествоДнейВМесяце = ДанныеГрафика[НомерСтроки].КоличествоДнейВМесяце;
			
			Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
				
				Если МесяцДатыОтсчета = СчетчикМесяц
					И НомерДня = ДеньДатыОтсчета Тогда
					Прервать
				КонецЕсли;
				
				ДанныеГрафика[НомерСтроки]["День"+Строка(НомерДня)] = 0;
				
			КонецЦикла;
		КонецЦикла;
	Иначе
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	ЕстьОбработанныеОбласти = Ложь;
	
	ЗначениеПоля = Область.Текст;
	
	СписокДней = Новый СписокЗначений;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
					СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
					
					Если Не СтрокиДанных.Количество() Тогда Продолжить КонецЕсли;
					СтрокаДанных = СтрокиДанных[0];
					
					Изменен = СтрокаДанных["Изменен"+НомерДня];
					НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
					
					СписокДней.Добавить(ДатаДня,Строка(НомерДняЦикла),Изменен);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не УДнейЕстьПерерывы(СписокДней) Тогда
		ИзменитьДниБезПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти);
	Иначе
		ИзменитьДниСУчетомПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти);
	КонецЕсли;
	
	Если ЕстьОбработанныеОбласти Тогда
		ВывестиРасписаниеПоГрафику();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УДнейЕстьПерерывы(СписокДней)
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		Если ЭлементСписка.Пометка Тогда
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиИзмененныхДней.Количество() > 1 Тогда
				Возврат Истина
			КонецЕсли;
			
			Продолжить
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("НомерДняЦикла", Число(ЭлементСписка.Представление));
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиДнейЦикла.Количество() > 1 Тогда
			Возврат Истина
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДниБезПерерывов(СписокДней, ЗначениеПоля, ЕстьОбработанныеОбласти = Ложь)
	
	ИзмененныеДни.Сортировать("ДатаДня Возр, ВремяНачала Возр");
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		Если (Не ЗначениеЗаполнено(ЗначениеПоля) ИЛИ ЗначениеПоля = "0") И Не ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(ЗначениеПоля) ИЛИ ЗначениеПоля = "0") Тогда
			Если ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
				Если ЭлементСписка.Пометка Тогда
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
				КонецЕсли;
				ОчиститьРасписаниеКлиент(Истина);
				СтрокаДанных["День"+НомерДня] = 0;
			КонецЕсли;
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Попытка
			НовоеЗначениеПоля = Число(ЗначениеПоля);
			
			Если НовоеЗначениеПоля = ПрошлоеЗначениеПоля Тогда Продолжить КонецЕсли;
			
			Если НовоеЗначениеПоля > 24 Тогда
				
				ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
				ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
				Прервать;
				
			КонецЕсли;
			
			СтрокаДанных["День"+НомерДня] = НовоеЗначениеПоля;
			ТекущаяОбластьЦикла.Текст = НовоеЗначениеПоля;
			
			Если ЭлементСписка.Пометка Тогда
			
				ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
				СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
				
				Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
				
				ЧасовПерерывов = СтрокиИзмененныхДней[0].ЧасовПерерывов;
				ЧасовПерерывов= ?(НовоеЗначениеПоля = 24, 0, СтрокиИзмененныхДней[0].ЧасовПерерывов);
				
				Если НовоеЗначениеПоля + ЧасовПерерывов>24
					Тогда
					ЧасовПерерывов = 24 - НовоеЗначениеПоля;
				КонецЕсли;
					
				СтрокиИзмененныхДней[0].ЧасовПерерывов = ЧасовПерерывов;
				
				ВремяНачала = ?(ЗначениеЗаполнено(СтрокиИзмененныхДней[0].ВремяНачала),СтрокиИзмененныхДней[0].ВремяНачала,Дата(1,1,1,8,0,0));
				
				РазностьВремениДата = (ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
				РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
				ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
				
				Если ВремяОкончания>=86400 Тогда
					ВремяНачала = Дата(1,1,1) + (86400 - (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
					ВремяОкончания = Дата(1,1,1);
				Иначе
					ВремяНачала = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяНачала;
					ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
				КонецЕсли;
				
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяНачала = ВремяНачала;
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания = ВремяОкончания;
				СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].Длительность = НовоеЗначениеПоля;
				
				ЕстьОбработанныеОбласти = Истина;
				
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовоеЗначениеПоля) Тогда
				
				ЧасовПерерывов = 0;
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				
				ВремяНачала = 28800;
				ВремяОкончания = ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60;
				
				Если ВремяОкончания>=86400 Тогда
					ВремяНачала = Дата(1,1,1) + (86400 - (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
					ВремяОкончания = Дата(1,1,1);
				Иначе
					ВремяНачала = Дата(1,1,1) + 28800;
					ВремяОкончания = ВремяНачала + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60;
				КонецЕсли;
				
				НоваяСтрока.ВремяНачала = ВремяНачала;
				НоваяСтрока.ВремяОкончания = ВремяОкончания;
				
				НоваяСтрока.Длительность = (НовоеЗначениеПоля+ЧасовПерерывов);
				НоваяСтрока.ДатаДня = ДатаДня;
				СтрокаДанных["Изменен"+НомерДня] = Истина;
				
				//Продолжить;
				
			КонецЕсли;
			
			ЕстьОбработанныеОбласти = Истина;
			
			РассчитатьРабочиеЧасы(НомерМесяца);
			
		Исключение
			ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ИнтервалыПерерывовКорректны(СписокДней, НовоеЗначениеПоля)
	
	ИзмененныеДни.Сортировать("ДатаДня Возр, ВремяНачала Возр");
	
	Если НовоеЗначениеПоля = 24 Тогда Возврат Ложь КонецЕсли;
	Если НовоеЗначениеПоля = 0 Тогда Возврат Истина КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Продолжить КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		ПрошлоеЗначениеРабочегоВремени = СтрокаДанных["День"+НомерДня];
		
		Если ЭлементСписка.Пометка Тогда
			
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
			
			ВремяНачалаРабочегоДня = СтрокиИзмененныхДней[0].ВремяНачала;
			ВремяОкончанияРабочегоДня = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания;
			
			РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
			ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
			ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеРабочегоВремени;
			
			РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
			РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
			ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
			
			Если ВремяОкончания>=86400 Тогда Возврат Ложь КонецЕсли;
			
			ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
			
			ИндексСтроки = 1;
			
			Для Каждого СтрокаДня Из СтрокиИзмененныхДней Цикл
				
				Если СтрокаДня.ВремяНачала>=ВремяОкончания Тогда
					Возврат Ложь
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки+1;
				
			КонецЦикла;
			
			Продолжить
			
		КонецЕсли;
		
		НомерДняЦикла = Число(ЭлементСписка.Представление);
		ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерДняЦикла);
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДнейЦикла.Количество() Тогда Продолжить КонецЕсли;
		
		ВремяНачалаРабочегоДня = СтрокиДнейЦикла[0].ВремяНачала;
		ВремяОкончанияРабочегоДня = СтрокиДнейЦикла[СтрокиДнейЦикла.Количество()-1].ВремяОкончания;
		
		РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
		ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
		ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеРабочегоВремени;
		
		РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
		РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
		ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
		
		Если ВремяОкончания>=86400 Тогда Возврат Ложь КонецЕсли;
		
		ВремяОкончания = Дата(1,1,1)+ВремяОкончания;
		
		ИндексСтроки = 1;
		
		Для Каждого СтрокаДня Из СтрокиДнейЦикла Цикл
			
			Если СтрокаДня.ВремяОкончания>ВремяОкончания Тогда
				Возврат Ложь
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки+1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьПредыдущиеЗначенияПолей(СписокДней)
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДниСУчетомПерерывов(СписокДней, НовоеЗначениеПоля, ЕстьОбработанныеОбласти = Ложь)
	
	НовоеЗначениеПоляКорректно = Истина;
	
	Попытка
		НовоеЗначениеПоля = Число(НовоеЗначениеПоля);
		
		Если НовоеЗначениеПоля>24 Тогда
			НовоеЗначениеПоляКорректно = Ложь
		КонецЕсли;
		
	Исключение 
		ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
		Возврат;
	КонецПопытки;
	
	Если НовоеЗначениеПоляКорректно И Не ИнтервалыПерерывовКорректны(СписокДней, НовоеЗначениеПоля) Тогда
		
		Если Не СписокДней.Количество() Тогда Возврат КонецЕсли;
		
		ДопПараметрыОповещения = Новый Структура("СписокДней", СписокДней);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗафиксироватьИзмененныйПериодВыделенныеДни",
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДня", Дата(1,1,1));
		ПараметрыОткрытия.Вставить("Объект", Объект);
		ПараметрыОткрытия.Вставить("НомерДняЦикла", 0);
		ПараметрыОткрытия.Вставить("Изменен", Ложь);
		ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", 0);
		ПараметрыОткрытия.Вставить("ВыбранИнтервал", Истина);
		ПараметрыОткрытия.Вставить("СписокДней", СписокДней);
		ПараметрыОткрытия.Вставить("ТекстОшибки", "Границы периодов выходят за границы рабочего дня. При редактировании расписание будет обновлено текущим.");
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ДатаДня = ЭлементСписка.Значение;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ТекущаяОбластьЦикла = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца+1) + "C" + Строка(НомерДня+2));
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		ПрошлоеЗначениеПоля = СтрокаДанных["День"+НомерДня];
		
		Если (Не ЗначениеЗаполнено(НовоеЗначениеПоля) ИЛИ НовоеЗначениеПоля = "0") И Не ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(НовоеЗначениеПоля) ИЛИ НовоеЗначениеПоля = "0") Тогда
			Если ЗначениеЗаполнено(ПрошлоеЗначениеПоля) Тогда
				Если ЭлементСписка.Пометка Тогда
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
				КонецЕсли;
				ОчиститьРасписаниеКлиент(Истина);
				СтрокаДанных["День"+НомерДня] = 0;
			КонецЕсли;
			ТекущаяОбластьЦикла.Текст = "";
			Продолжить
		КонецЕсли;
		
		Если НовоеЗначениеПоля = ПрошлоеЗначениеПоля Тогда Продолжить КонецЕсли;
		
		Если НовоеЗначениеПоля > 24 Тогда 
			
			ТекущаяОбластьЦикла.Текст = Строка(?(ПрошлоеЗначениеПоля = 0,"",ПрошлоеЗначениеПоля));
			ВосстановитьПредыдущиеЗначенияПолей(СписокДней);
			Прервать;
			
		КонецЕсли;
		
		СтрокаДанных["День"+НомерДня] = НовоеЗначениеПоля;
		ТекущаяОбластьЦикла.Текст = НовоеЗначениеПоля;
		
		Если ЭлементСписка.Пометка Тогда
			
			ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
			СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если Не СтрокиИзмененныхДней.Количество() Тогда Продолжить КонецЕсли;
			
			ВремяНачалаРабочегоДня = СтрокиИзмененныхДней[0].ВремяНачала;
			ВремяОкончанияРабочегоДня = СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания;
			
			РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
			ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
			ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеПоля;
			
			РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
			РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
			ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
			
			Если ВремяОкончания=86400 Тогда
				ВремяОкончания = Дата(1,1,1);
			Иначе
				ВремяОкончания = Дата(1,1,1) + ВремяОкончания;
			КонецЕсли;
			
			СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].ВремяОкончания = ВремяОкончания;
			СтрокиИзмененныхДней[СтрокиИзмененныхДней.Количество()-1].Длительность = НовоеЗначениеПоля;
			
			ЕстьОбработанныеОбласти = Истина;
			
			Продолжить
		КонецЕсли;
		
		НомерДняЦикла = Число(ЭлементСписка.Представление);
		ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерДняЦикла);
		СтрокиДнейЦикла = Объект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДнейЦикла.Количество() Тогда Продолжить КонецЕсли;
		
		ВремяНачалаРабочегоДня = СтрокиДнейЦикла[0].ВремяНачала;
		ВремяОкончанияРабочегоДня = СтрокиДнейЦикла[СтрокиДнейЦикла.Количество()-1].ВремяОкончания;
		
		РазностьИнтервалаРабочегоДня = (ВремяОкончанияРабочегоДня-ВремяНачалаРабочегоДня)/3600;
		ДлительностьПериода = ?(РазностьИнтервалаРабочегоДня < 0,24 + РазностьИнтервалаРабочегоДня, РазностьИнтервалаРабочегоДня);
		ЧасовПерерывов = ДлительностьПериода - ПрошлоеЗначениеПоля;
		
		РазностьВремениДата = (ВремяНачалаРабочегоДня + (НовоеЗначениеПоля+ЧасовПерерывов)*60*60);
		РазностьВремени = (Дата(1,1,1)-РазностьВремениДата)*-1;
		ВремяОкончания = ?(РазностьВремени<0, РазностьВремени* -1, РазностьВремени);
		
		ВремяОкончания = Дата(1,1,1)+ ВремяОкончания;
		
		КоличествоПериодов = СтрокиДнейЦикла.Количество();
		ИндексПериода = 1;
		
		Для Каждого СтрокаДняЦикла Из СтрокиДнейЦикла Цикл
			
			НоваяСтрока = ИзмененныеДни.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДняЦикла);
			
			НоваяСтрока.ДатаДня = ДатаДня;
			СтрокаДанных["Изменен"+НомерДня] = Истина;
			
			Если ИндексПериода = КоличествоПериодов Тогда
				НоваяСтрока.ВремяОкончания = ВремяОкончания;
				НоваяСтрока.Длительность = (НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600;
			КонецЕсли;
			
			ИндексПериода = ИндексПериода + 1;
		КонецЦикла;
		
		СтрокаДанных["Изменен"+НомерДня] = Истина;
		
		ЕстьОбработанныеОбласти = Истина;
		
		РассчитатьРабочиеЧасы(НомерМесяца);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуПриАктивизации(Элемент)
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	ЕстьОбластиСДатами = Ложь;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ЕстьОбластиСДатами = Истина;
						Прервать;
					Исключение
						Продолжить;
					КонецПопытки;
				КонецЕсли
			КонецЦикла
		КонецЦикла;
	КонецЦикла;
	
	Элементы.РасписаниеПоГрафикуКонтекстноеМенюГруппаИзменить.Доступность = ЕстьОбластиСДатами;
	Элементы.ГруппаПодменю.Доступность = ЕстьОбластиСДатами;
	Элементы.ГруппаРедактированияТабДокумента.Доступность = ЕстьОбластиСДатами;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПоГрафикуВыбор(Элемент, Область, СтандартнаяОбработка)
	
	#Если НЕ МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура;
	
	Список = Новый СписокЗначений;
	Список.Добавить("Редактировать",,Ложь, БиблиотекаКартинок.Изменить);
	Список.Добавить("Очистить",,Ложь,БиблиотекаКартинок.Очистить);
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню",ЭтаФорма,ПараметрыОповещения);
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.РасписаниеПоГрафику);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	
	ИзменитьРасписаниеПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
		ТекстСообщения = НСтр("ru ='Не указан производственный календарь'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафикНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоПроизводственномуКалендарю(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда Возврат КонецЕсли;
	
	ОбновитьПроизводственныйКалендарьГрафика();
	
	Если ДанныеГрафика.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоШаблону(Команда)
	
	ОбновитьГрафикПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасписание(Команда)
	ОчиститьРасписаниеКлиент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиРасписаниеПоГрафику(НомерГода = Неопределено)
	
	НомерГода = ?(ЗначениеЗаполнено(НомерГода), НомерГода, НомерТекущегоГода);
	
	РасписаниеПоГрафику.Очистить();
	
	Если Не ДанныеГрафика.Количество() Тогда Возврат КонецЕсли;
	
	РасписаниеПоГрафику.ФиксацияСлева = 2;
	РасписаниеПоГрафику.ФиксацияСверху = 1;
	
	МакетРасписаниеПоГрафику = Справочники.ГрафикиРаботы.ПолучитьМакет("ГрафикРаботы");
	
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Календарь");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	ЦветФонаПотенциальныхВозможностей = ЦветаСтиля.ЦветФонаПотенциальныхВозможностей;
	НерабочееВремяВыходной = ЦветаСтиля.НерабочееВремяВыходной;
	НедоступныеДанныеЦвет = ЦветаСтиля.НедоступныеДанныеЦвет;
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		НомерМесяца = СтрокаДанных.НомерМесяца;
		
		КоличествоДней = СтрокаДанных.КоличествоДнейВМесяце;
		
		Для НомерДня = 1 По 31 Цикл
			
			Если НомерДня = 1 Тогда
				Область = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца + 1) + "C" + Строка(НомерДня + 1));
				Область.Текст = СтрокаДанных.ДнейЧасовПредставление;
			КонецЕсли;
			
			Область = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца + 1) + "C" + Строка(НомерДня + 2));
			Область.Текст = "";
			Если НомерДня > КоличествоДней Тогда
				
				Область.Шрифт = Новый Шрифт(, 10, Истина, , , );
				Область.ЦветФона = НедоступныеДанныеЦвет;
				Область.Текст = "X";
				
			Иначе
				
				ДатаДня = Дата(НомерГода, НомерМесяца, НомерДня, 0, 0, 0);
				НомерДняСтрокой = Строка(НомерДня);
				
				КолонкаВидДня = "ВидДня"+НомерДняСтрокой;
				КолонкаДень = "День"+ НомерДняСтрокой; 
				
				Если ЗначениеЗаполнено(ДатаОтсчета) И ДатаДня < ДатаОтсчета Тогда
					
					Область.Защита = Истина;
					Область.Текст = "";
					
				Иначе
					
					// Раскраска выходных дней.
					Если СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье
						ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
						ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник
						ИЛИ СтрокаДанных[КолонкаВидДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий Тогда
						Область.ЦветФона = НерабочееВремяВыходной;
					Иначе
						Область.ЦветФона = ЦветФонаПотенциальныхВозможностей;
					КонецЕсли;
					
					Область.Текст = СтрокаДанных[КолонкаДень];
					Область.Защита = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйКалендарь()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроизводственныеКалендари.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	НЕ ПроизводственныеКалендари.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Справочники.ПроизводственныеКалендари.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикНаСервере(ИзменениеГодаИлиДатыОтсчета = Ложь)
	
	ДанныеГрафика.Очистить();
	
	ДатаОтсчетаДляЗаполнения = ДатаОтсчета;
	
	Если Не ЗначениеЗаполнено(ДатаОтсчетаДляЗаполнения) И Объект.ШаблоныПоГоду.Количество() Тогда
		Объект.ШаблоныПоГоду.Сортировать("Год Убыв");
		Для Каждого СтрокаШаблонаПоГоду Из Объект.ШаблоныПоГоду Цикл
			Если ЗначениеЗаполнено(СтрокаШаблонаПоГоду.ДатаОтсчета) Тогда
				ДатаОтсчетаДляЗаполнения = СтрокаШаблонаПоГоду.ДатаОтсчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменениеГодаИлиДатыОтсчета Тогда
		ГрафикМенеджер = Справочники.ГрафикиРаботы;
		ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерТекущегоГода,,,,ДатаОтсчетаДляЗаполнения, ТипГрафика, ИзмененныеДни, Объект);
		Возврат
	КонецЕсли;
	
	Объект.РасписаниеРаботы.Загрузить(ШаблонЗаполненияГрафика.РасписаниеРаботы.Выгрузить());
	Объект.ПериодыГрафика.Загрузить(ШаблонЗаполненияГрафика.Периоды.Выгрузить());
	Объект.Перерывы.Загрузить(ШаблонЗаполненияГрафика.Перерывы.Выгрузить());
	Объект.ДополнительныеНастройкиЗаполнения.Загрузить(ШаблонЗаполненияГрафика.ДополнительныеНастройкиЗаполнения.Выгрузить());
	Объект.ПериодыДополнительныхНастроекЗаполнения.Загрузить(ШаблонЗаполненияГрафика.ПериодыДополнительныхНастроекЗаполнения.Выгрузить());
	Объект.УчитыватьПраздничныеДни = ШаблонЗаполненияГрафика.УчитыватьПраздничныеДни;
	
	ПараметрыОтбора = Новый Структура("Год", НомерТекущегоГода);
	СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
	
	Если Не СтрокаШаблоныПоГоду.Количество() Тогда
		НоваяСтрока = Объект.ШаблоныПоГоду.Добавить();
		НоваяСтрока.Год = НомерТекущегоГода;
		НоваяСтрока.ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
		НоваяСтрока.ДатаОтсчета = ДатаОтсчета;
		НоваяСтрока.ТипГрафика = ?(Не ЗначениеЗаполнено(ШаблонЗаполненияГрафика.ТипГрафика)
		, Перечисления.ТипыГрафикаРаботы.Сменный, ШаблонЗаполненияГрафика.ТипГрафика);
		
		ТипГрафика = НоваяСтрока.ТипГрафика;
	Иначе
		СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
		СтрокаШаблоныПоГоду[0].ДатаОтсчета = ДатаОтсчета;
		СтрокаШаблоныПоГоду[0].ТипГрафика = ?(Не ЗначениеЗаполнено(ШаблонЗаполненияГрафика.ТипГрафика)
		, Перечисления.ТипыГрафикаРаботы.Сменный, ШаблонЗаполненияГрафика.ТипГрафика);
		
		ТипГрафика = СтрокаШаблоныПоГоду[0].ТипГрафика;
	КонецЕсли;
	
	ГрафикМенеджер = Справочники.ГрафикиРаботы;
	ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерТекущегоГода,,,,ДатаОтсчетаДляЗаполнения, ТипГрафика, ИзмененныеДни, Объект);
	
	Элементы.ДатаОтсчета.Видимость = ?(ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный, Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеГрафика(НомерГода = Неопределено, ЗаполнениеСледГода = Ложь)
	
	ДанныеГрафика.Очистить();
	
	НомерГода = ?(Не НомерГода = Неопределено, НомерГода, НомерТекущегоГода);
	
	ПараметрыОтбора = Новый Структура("Год", НомерГода);
	СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокаШаблоныПоГоду.Количество() Тогда
		ШаблонЗаполненияГрафика = СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика;
		ДатаОтсчета = СтрокаШаблоныПоГоду[0].ДатаОтсчета;
		ТипГрафика = СтрокаШаблоныПоГоду[0].ТипГрафика;
	КонецЕсли;
	
	ОбновитьПроизводственныйКалендарьГрафика(Истина, НомерГода);
	
	Если Не ДанныеГрафика.Количество() Тогда 
		ВывестиРасписаниеПоГрафику(НомерГода);
		Возврат
	КонецЕсли;
	
	ПодготовитьИзмененныеДни(НомерГода);
	ЗаполнитьДанныеГрафика(НомерГода);
	
	Элементы.ДатаОтсчета.Видимость = ?(ТипГрафика = Перечисления.ТипыГрафикаРаботы.Сменный, Истина, Ложь);
	
	ВывестиРасписаниеПоГрафику(НомерГода);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГрафика(НомерГода = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.УстановитьПараметр("Год", НомерГода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК Длительность,
	|	ГрафикиРаботы.НомерДняЦикла КАК НомерДняЦикла,
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала) КАК ДеньМесяца,
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала) КАК НомерМесяца,
	|	ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка) КАК Изменен,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ВремяНачала
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.Год = &Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.НомерДняЦикла,
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала),
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала),
	|	ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка),
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМесяца,
	|	ДеньМесяца,
	|	НомерДняЦикла";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		НомерДняСтрокой = Строка(РезультатЗапроса.ДеньМесяца);
		
		ИмяПоляДень = "День" + НомерДняСтрокой;
		ИмяПоляДеньЦикла = "НомерДняЦикла"+НомерДняСтрокой;
		ИмяПоляИзменен = "Изменен"+НомерДняСтрокой;
		
		СтрокаДанныхГрафика = ДанныеГрафика[РезультатЗапроса.НомерМесяца - 1];
		
		СтрокаДанныхГрафика[ИмяПоляДень] = РезультатЗапроса.Длительность;
		СтрокаДанныхГрафика[ИмяПоляДеньЦикла] = РезультатЗапроса.НомерДняЦикла;
		СтрокаДанныхГрафика[ИмяПоляИзменен] = РезультатЗапроса.Изменен;
		СтрокаДанныхГрафика.ИтогЧасы = СтрокаДанныхГрафика.ИтогЧасы + РезультатЗапроса.Длительность;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		СтрокаДанных.ДнейЧасовПредставление = Строка(СтрокаДанных.ИтогДни) + " / " + Строка(СтрокаДанных.ИтогЧасы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИзмененныеДни(НомерГода = Неопределено)
	
	ИзмененныеДни.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.УстановитьПараметр("Год", НомерГода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.ЧасыРаботы КАК Длительность,
	|	МЕСЯЦ(ГрафикиРаботы.ВремяНачала) КАК НомерМесяца,
	|	ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка) КАК Изменен,
	|	ГрафикиРаботы.ЧасовПерерывов КАК ЧасовПерерывов,
	|	ГрафикиРаботы.Год КАК Год,
	|	ГрафикиРаботы.НомерДняЦикла КАК НомерДняЦикла,
	|	ДЕНЬ(ГрафикиРаботы.ВремяНачала) КАК ДеньМесяца,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ) = ГрафикиРаботы.ВремяОкончания
	|			ТОГДА НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ)
	|		ИНАЧЕ ГрафикиРаботы.ВремяОкончания
	|	КОНЕЦ КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ШаблонЗаполнения = ЗНАЧЕНИЕ(Справочник.ШаблоныЗаполненияГрафиковРабочегоВремени.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМесяца";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		НоваяСтрока = ИзмененныеДни.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
		НоваяСтрока.ДатаДня = НачалоДня(РезультатЗапроса.ВремяНачала);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону()
	
	Объект.ДополнительныеНастройкиЗаполнения.Очистить();
	Объект.ПериодыДополнительныхНастроекЗаполнения.Очистить();
	ИзмененныеДни.Очистить();
	Объект.ПериодыГрафика.Очистить();
	Объект.УчитыватьПраздничныеДни = Ложь;
	ТипГрафика = Неопределено;
	
	ДатаОтсчета = ?(Не ЗначениеЗаполнено(ДатаОтсчета), Дата(НомерТекущегоГода,1,1), ДатаОтсчета);
	
	Если Не ЗначениеЗаполнено(ШаблонЗаполненияГрафика) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПараметрыОповещения = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаГрафика", ЭтаФорма, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'Очистить данные графика за %1% год?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%1%", Строка(НомерТекущегоГода));
		
		ПараметрыОтбора = Новый Структура("Год", НомерТекущегоГода);
		СтрокаШаблоныПоГоду = Объект.ШаблоныПоГоду.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокаШаблоныПоГоду.Количество() Тогда
			НоваяСтрока = Объект.ШаблоныПоГоду.Добавить();
			НоваяСтрока.Год = НомерТекущегоГода;
			НоваяСтрока.ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
			НоваяСтрока.ДатаОтсчета = ДатаОтсчета;
			НоваяСтрока.ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.Сменный");
		Иначе
			СтрокаШаблоныПоГоду[0].ШаблонЗаполненияГрафика = ШаблонЗаполненияГрафика;
			СтрокаШаблоныПоГоду[0].ДатаОтсчета = ДатаОтсчета;
			СтрокаШаблоныПоГоду[0].ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.Сменный");
		КонецЕсли;
		
		ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.Сменный");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Возврат
	КонецЕсли;
	
	Если Не ПроизводственныйКалендарьЗаполнен(Объект.ПроизводственныйКалендарь, НомерТекущегоГода) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для заполнения по шаблону необходимо заполнить производственный календарь на %ГодКалендаря% год.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГодКалендаря%", Строка(НомерТекущегоГода));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафикНаСервере();
	
	Если Не ТипГрафика = ПредопределенноеЗначение("Перечисление.ТипыГрафикаРаботы.Сменный") Тогда
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		Элементы.ДатаОтсчета.Видимость = Ложь;
	Иначе
		Элементы.ДатаОтсчета.Видимость = Истина;
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаГрафика(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафикНаСервере();
	
	ОбновитьПроизводственныйКалендарьГрафика(Истина,,Истина);
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроизводственныйКалендарьГрафика(ПриОткрытииФормы = Ложь, НомерГода = Неопределено, ЭтоОчисткаГрафика = Ложь)
	
	НомерГода = ?(Не НомерГода = Неопределено, НомерГода, НомерТекущегоГода);
	
	ГрафикМенеджер = Справочники.ГрафикиРаботы;
	
	Если ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
		
		Если ПроизводственныйКалендарьЗаполнен(Объект.ПроизводственныйКалендарь, НомерГода) Тогда
			ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерГода, Истина,,ПриОткрытииФормы, ДатаОтсчета, ТипГрафика,,Объект);
		Иначе
			ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерГода, Истина, Истина, ПриОткрытииФормы, ДатаОтсчета, ТипГрафика,,Объект);
			
			Если Не ЭтоОчисткаГрафика Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнен производственный календарь на %ГодКалендаря% год.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГодКалендаря%", Строка(НомерГода));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ГрафикМенеджер.ЗаполнитьДаннымиПроизводственногоКалендаря(ДанныеГрафика, НомерГода, Истина, Истина, ПриОткрытииФормы, ДатаОтсчета, ТипГрафика,,Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьГрафик(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения.Направление = "ЭтоСобытиеПриИзменении" Тогда
		НомерГодаДляЗаписи = ?(ПараметрыОповещения.Направление<0, НомерТекущегоГода-ПараметрыОповещения.Направление
		, НомерТекущегоГода-ПараметрыОповещения.Направление);
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОбработатьДанныеГрафика(НомерТекущегоГода);
		ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
		ЭтаФорма.Модифицированность = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("НомерТекущегоГода", НомерГодаДляЗаписи);
	
	ЭтаФорма.Записать(ПараметрыЗаписи);
	
	ДатаОтсчета = Дата(НомерТекущегоГода,1,1);
	ОбработатьДанныеГрафика(НомерТекущегоГода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьИзмененныйПериодОдинДень(Результат, ДопПараметрыОповещения) Экспорт
	
	Если Не Результат = Неопределено И Результат.Свойство("Периоды") Тогда
		
		ОчиститьСтрокиИзмененныхДней(Результат.ДатаДня);
		
		Для Каждого СтрокаПериод Из Результат.Периоды Цикл
			
			НоваяСтрока = ИзмененныеДни.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
			НоваяСтрока.ДатаДня = Результат.ДатаДня;
			НоваяСтрока.Длительность = СтрокаПериод.Длительность;
			
		КонецЦикла;
		
		Если Не Результат.Периоды.Количество() Тогда
			Если (ЗначениеЗаполнено(Результат.ВремяНачала) ИЛИ ЗначениеЗаполнено(Результат.ВремяОкончания)) Тогда
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				НоваяСтрока.ДатаДня = Результат.ДатаДня;
				НоваяСтрока.ВремяНачала = Результат.ВремяНачала;
				НоваяСтрока.ВремяОкончания = Результат.ВремяОкончания;
				
				Длительность = Окр((Результат.ВремяОкончания - Результат.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
				ЧасовПоДню = ?(Длительность < 0, 24 + Длительность, Длительность)-Результат.ВремяПерерывов;
				
				НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
				НоваяСтрока.Длительность = ЧасовПоДню;
				
			Иначе
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				НоваяСтрока.ДатаДня = Результат.ДатаДня;
				НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
				НоваяСтрока.Длительность = ЧасовПоДню;
				
			КонецЕсли;
		КонецЕсли;
		
		ЧасовПоДню = Результат.ЧасовРаботы;
		
		Если Не ЧасовПоДню = 0 Тогда
			
			СтрокаДанных = ДанныеГрафика[Месяц(Результат.ДатаДня)-1];
			
			СтрокаДанных["День"+Строка(ДопПараметрыОповещения.НомерДня)] = ЧасовПоДню;
			СтрокаДанных["Изменен"+Строка(ДопПараметрыОповещения.НомерДня)] = Истина;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		
		РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
		
		ВывестиРасписаниеПоГрафику(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьИзмененныйПериодВыделенныеДни(Результат, ДопПараметрыОповещения) Экспорт
	
	
	Если Не Результат = Неопределено И Результат.Свойство("Периоды") Тогда
		
		Для Каждого ВыделенныйДень Из ДопПараметрыОповещения.СписокДней Цикл
			
			ОчиститьСтрокиИзмененныхДней(ВыделенныйДень.Значение);
			
			Для Каждого СтрокаПериод Из Результат.Периоды Цикл
				
				НоваяСтрока = ИзмененныеДни.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
				НоваяСтрока.ДатаДня = ВыделенныйДень.Значение;
				НоваяСтрока.Длительность = СтрокаПериод.Длительность;
				
			КонецЦикла;
			
			Если Не Результат.Периоды.Количество() Тогда
				Если (ЗначениеЗаполнено(Результат.ВремяНачала) ИЛИ ЗначениеЗаполнено(Результат.ВремяОкончания)) Тогда
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.ДатаДня = ВыделенныйДень.Значение;
					НоваяСтрока.ВремяНачала = Результат.ВремяНачала;
					НоваяСтрока.ВремяОкончания = Результат.ВремяОкончания;
					
					Длительность = Окр((Результат.ВремяОкончания - Результат.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
					ЧасовПоДню = ?(Длительность < 0, 24 + Длительность, Длительность)-Результат.ВремяПерерывов;
					
					НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
					НоваяСтрока.Длительность = ЧасовПоДню;
					
				Иначе
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.ДатаДня = ВыделенныйДень.Значение;
					НоваяСтрока.ЧасовПерерывов = Результат.ВремяПерерывов;
					НоваяСтрока.Длительность = Результат.ЧасовРаботы;
					
					ОбщаяДлительностьРабочегоДня = Результат.ВремяПерерывов + Результат.ЧасовРаботы;
					
					Если Не ОбщаяДлительностьРабочегоДня = 24 Тогда
						
						ВремяНачала = 28800;
						ВремяОкончания = ВремяНачала + (ОбщаяДлительностьРабочегоДня)*60*60;
						
						Если ВремяОкончания>=86400 Тогда
							ВремяНачала = Дата(1,1,1) + (86400 - (ОбщаяДлительностьРабочегоДня)*60*60);
							ВремяОкончания = Дата(1,1,1);
						Иначе
							ВремяНачала = Дата(1,1,1) + 28800;
							ВремяОкончания = ВремяНачала + (ОбщаяДлительностьРабочегоДня)*60*60;
						КонецЕсли;
						
						НоваяСтрока.ВремяНачала = ВремяНачала;
						НоваяСтрока.ВремяОкончания = ВремяОкончания;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ЧасовПоДню = Результат.ЧасовРаботы;
			
			Если Не ЧасовПоДню = 0 Тогда
				СтрокаДанных = ДанныеГрафика[Месяц(ВыделенныйДень.Значение)-1];
				
				НомерДня = День(ВыделенныйДень.Значение);
				
				СтрокаДанных["День"+Строка(НомерДня)] = ЧасовПоДню;
				СтрокаДанных["Изменен"+Строка(НомерДня)] = Истина;
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
			
			РассчитатьРабочиеЧасы(СтрокаДанных.НомерМесяца);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРабочиеЧасы(НомерМесяца)
	
	Если НомерМесяца = 0 Тогда Возврат КонецЕсли;
	
	КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерТекущегоГода,НомерМесяца, 1)));
	
	РабочиеЧасыЗаМесяц = 0;
	
	Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
		ИмяПоляДень = "День" + Строка(НомерДня);
		
		РабочиеЧасыЗаМесяц = РабочиеЧасыЗаМесяц + ДанныеГрафика[НомерМесяца-1][ИмяПоляДень];
	КонецЦикла;
	
	ДанныеГрафика[НомерМесяца-1].ИтогЧасы = РабочиеЧасыЗаМесяц;
	ДанныеГрафика[НомерМесяца-1].ДнейЧасовПредставление = Строка(КоличествоДнейВМесяце) + " / " + Строка(РабочиеЧасыЗаМесяц);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиИзмененныхДней(ДатаДня)
	
	ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
	СтрокиИзмененныхДней = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаИзмененныхДней Из СтрокиИзмененныхДней Цикл
		ИзмененныеДни.Удалить(СтрокаИзмененныхДней);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(ГодЗаписи, Отказ = Ложь, ТекущийОбъект)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГрафикРаботы.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Отбор.Год.Установить(ГодЗаписи);
	НаборЗаписей.Записать();
	
	Если Не ДанныеГрафика.Количество() Тогда
		ЗафиксироватьТранзакцию();
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		Для НомерДня = 1 По СтрокаДанных.КоличествоДнейВМесяце Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных["День"+НомерДня]) Тогда
				Продолжить
			КонецЕсли;
			
			РучнойВвод = СтрокаДанных["Изменен"+НомерДня];
			ДатаДня = Дата(ГодЗаписи, СтрокаДанных.НомерМесяца, НомерДня);
			НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
			
			Если ДатаДня<ДатаОтсчета Тогда Продолжить КонецЕсли;
			
			Если РучнойВвод Тогда
				
				ПараметрыОтбора = Новый Структура("ДатаДня", ДатаДня);
				НайденныеСтроки = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() Тогда
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						ВремяНачалаСек = НайденнаяСтрока.ВремяНачала-Дата(1,1,1);
						ВремяОкончанияСек = НайденнаяСтрока.ВремяОкончания-Дата(1,1,1);
						
						Если ВремяНачалаСек = 0 И ВремяОкончанияСек = 0
							И НайденнаяСтрока.Длительность+НайденнаяСтрока.ЧасовПерерывов < 24 Тогда
							
							ВремяНачалаСек = 28800;
							ВремяОкончанияСек = ВремяНачалаСек+НайденнаяСтрока.Длительность*3600+НайденнаяСтрока.ЧасовПерерывов*3600;
							
							Если ВремяОкончанияСек > 86400 Тогда
								ВремяНачалаСек = ВремяНачалаСек-(ВремяОкончанияСек-86400);
								ВремяОкончанияСек = 0;
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Год = ГодЗаписи;
						НоваяЗапись.ВремяНачала = ДатаДня+ВремяНачалаСек;
						НоваяЗапись.ВремяОкончания = ДатаДня+ВремяОкончанияСек;
						
						Если НачалоДня(НоваяЗапись.ВремяНачала) = НоваяЗапись.ВремяОкончания Тогда
							НоваяЗапись.ВремяОкончания = НоваяЗапись.ВремяОкончания + 86399;
						КонецЕсли;
						
						НоваяЗапись.ГрафикРаботы = ТекущийОбъект.Ссылка;
						НоваяЗапись.ШаблонЗаполнения = Неопределено;
						НоваяЗапись.ЧасыРаботы = НайденнаяСтрока.Длительность;
						НоваяЗапись.ЧасовПерерывов = НайденнаяСтрока.ЧасовПерерывов;
						
					КонецЦикла;
					
					Продолжить;
					
				Иначе
					ВремяНачалаСек = 28800;
					ЧасыРаботы = СтрокаДанных["День"+НомерДня];
					ВремяОкончанияСек = ВремяНачалаСек+ЧасыРаботы*3600;
					
					Если ВремяОкончанияСек > 86400 Тогда
						ВремяНачалаСек = ВремяНачалаСек-(ВремяОкончанияСек-86400);
						ВремяОкончанияСек = 0;
					КонецЕсли;
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Год = ГодЗаписи;
					НоваяЗапись.ВремяНачала = ДатаДня+ВремяНачалаСек;
					НоваяЗапись.ВремяОкончания = ДатаДня+ВремяОкончанияСек;
					
					Если НачалоДня(НоваяЗапись.ВремяНачала) = НоваяЗапись.ВремяОкончания Тогда
						НоваяЗапись.ВремяОкончания = НоваяЗапись.ВремяОкончания + 86399;
					КонецЕсли;
					
					НоваяЗапись.ГрафикРаботы = ТекущийОбъект.Ссылка;
					НоваяЗапись.ШаблонЗаполнения = Неопределено;
					НоваяЗапись.ЧасыРаботы = ЧасыРаботы;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НомерДняЦикла = 0 Тогда Продолжить КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("НомерДняЦикла", НомерДняЦикла);
			НайденныеСтроки = ТекущийОбъект.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ВремяНачалаСек = НайденнаяСтрока.ВремяНачала - Дата(1,1,1);
				ВремяОкончанияСек = НайденнаяСтрока.ВремяОкончания - Дата(1,1,1);
				
				Если ВремяНачалаСек = 0 И ВремяОкончанияСек = 0
					И НайденнаяСтрока.Длительность + НайденнаяСтрока.ЧасовПерерывов<24 Тогда
					
					ВремяНачалаСек = 28800;
					ВремяОкончанияСек = ВремяНачалаСек+НайденнаяСтрока.Длительность*3600+НайденнаяСтрока.ЧасовПерерывов*3600;
					
					Если ВремяОкончанияСек > 86400 Тогда
						ВремяНачалаСек = ВремяНачалаСек-(ВремяОкончанияСек-86400);
						ВремяОкончанияСек = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Год = ГодЗаписи;
				НоваяЗапись.ВремяНачала = ДатаДня+ВремяНачалаСек;
				НоваяЗапись.ВремяОкончания = ДатаДня+ВремяОкончанияСек;
				
				Если НачалоДня(НоваяЗапись.ВремяНачала) = НоваяЗапись.ВремяОкончания Тогда
					НоваяЗапись.ВремяОкончания = НоваяЗапись.ВремяОкончания + 86399;
				КонецЕсли;
				
				НоваяЗапись.ГрафикРаботы = ТекущийОбъект.Ссылка;
				НоваяЗапись.ШаблонЗаполнения = ШаблонЗаполненияГрафика;
				НоваяЗапись.ЧасыРаботы = НайденнаяСтрока.Длительность;
				НоваяЗапись.ЧасовПерерывов = НайденнаяСтрока.ЧасовПерерывов;
				НоваяЗапись.НомерДняЦикла = НайденнаяСтрока.НомерДняЦикла;
				
			КонецЦикла;
			
		КонецЦикла
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи графика произошла ошибка!
		|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ОтменитьТранзакцию();
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафикПоШаблону()
	
	ОчиститьСообщения();
	
	ДатаОтсчета = ?(Не ЗначениеЗаполнено(ДатаОтсчета), Дата(НомерТекущегоГода,1,1), ДатаОтсчета);
	
	Если Не ЗначениеЗаполнено(ШаблонЗаполненияГрафика) Тогда Возврат КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для заполнения по шаблону, необходимо указать производственный календарь!' ");
		Сообщение.Поле = "Объект.ПроизводственныйКалендарь";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		
		Возврат
		
	КонецЕсли;
	
	Если ГрафикНеЗаполнен() Тогда
		
		ЗаполнитьПоШаблону();
		
		Если ДанныеГрафика.Количество() Тогда
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПараметрыОповещения = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбновитьГрафик", ЭтаФорма, ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru = 'После обновления, данные графика будут перезаполнены. Продолжить?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновитьГрафик(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШаблону();
	
	Если ДанныеГрафика.Количество() Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ГрафикНеЗаполнен()
	
	Для Каждого СтрокаДанных Из ДанныеГрафика Цикл
		
		Если Не СтрокаДанных.ИтогЧасы = 0 Тогда
			Возврат Ложь
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьРасписаниеКлиент(ЕстьОбработанныеОбласти = Ложь)
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					СтрокаДанных = ДанныеГрафика[Месяц(ДатаДня)-1];
					
					Если СтрокаДанных["День"+Строка(НомерДня)] = 0 Тогда Продолжить КонецЕсли;
					
					ОчиститьСтрокиИзмененныхДней(ДатаДня);
					
					СтрокаДанных["День"+Строка(НомерДня)] = 0;
					СтрокаДанных["Изменен"+Строка(НомерДня)] = Истина;
					
					НоваяСтрока = ИзмененныеДни.Добавить();
					НоваяСтрока.Длительность = 0;
					НоваяСтрока.ДатаДня = ДатаДня;
					
					ЕстьОбработанныеОбласти = Истина;
					
					РассчитатьРабочиеЧасы(НомерМесяца);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОбработанныеОбласти Тогда
		ЭтаФорма.Модифицированность = Истина;
		ВывестиРасписаниеПоГрафику();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроизводственныйКалендарьЗаполнен(ПроизводственныйКалендарь, НомерГода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ТекущийГод",	НомерГода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня,
	|	ДанныеПроизводственногоКалендаря.ДатаПереноса
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = &ТекущийГод
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРасписаниеПериода()
	
	ВыделенныеОбласти = Элементы.РасписаниеПоГрафику.ПолучитьВыделенныеОбласти();
	
	Если ВыделенныеОбласти.Количество() = 1 
		И ВыделенныеОбласти[0].Верх = ВыделенныеОбласти[0].Низ И ВыделенныеОбласти[0].Лево = ВыделенныеОбласти[0].Право Тогда
		
		ТекОбласть = ВыделенныеОбласти[0];
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДатаДня = Дата(НомерТекущегоГода, ТекОбласть.Низ-1, ТекОбласть.Право-2, 0, 0, 0);
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выделите день или период календаря в таблице'");
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			Возврат;
		КонецПопытки;
		
		НомерДня = День(ДатаДня);
		НомерМесяца = Месяц(ДатаДня);
		
		ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
		
		СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
		
		Если Не СтрокиДанных.Количество() Тогда Возврат КонецЕсли;
		
		СтрокаДанных = СтрокиДанных[0];
		
		НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
		Изменен = СтрокаДанных["Изменен"+НомерДня];
		ЧасовРаботы = СтрокаДанных["День"+НомерДня];
		
		ДопПараметрыОповещения = Новый Структура("НомерДня", НомерДня);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗафиксироватьИзмененныйПериодОдинДень",
		ЭтотОбъект,
		ДопПараметрыОповещения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДня", ДатаДня);
		ПараметрыОткрытия.Вставить("Объект", Объект);
		ПараметрыОткрытия.Вставить("НомерДняЦикла", НомерДняЦикла);
		ПараметрыОткрытия.Вставить("Изменен", Изменен);
		ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
		ПараметрыОткрытия.Вставить("ЧасовРаботы", ЧасовРаботы);
		ПараметрыОткрытия.Вставить("ВыбранИнтервал", Ложь);
		
		ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат
	КонецЕсли;
	
	СписокДней = Новый СписокЗначений;
	ЧасовРаботы = 0;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ТекКолонка >= 3 И ТекКолонка <= 33 И ТекСтрока >= 2 И ТекСтрока <= 13 Тогда
					Попытка
						ДатаДня = Дата(НомерТекущегоГода, ТекСтрока - 1, ТекКолонка - 2, 0, 0, 0);
					Исключение
						Продолжить;
					КонецПопытки;
					
					НомерДня = День(ДатаДня);
					НомерМесяца = Месяц(ДатаДня);
					
					ПараметрыОтбора = Новый Структура("НомерМесяца",НомерМесяца);
					
					СтрокиДанных = ДанныеГрафика.НайтиСтроки(ПараметрыОтбора);
					СтрокаДанных = СтрокиДанных[0];
					
					Изменен = СтрокаДанных["Изменен"+НомерДня];
					НомерДняЦикла = СтрокаДанных["НомерДняЦикла"+НомерДня];
					
					СписокДней.Добавить(ДатаДня, Строка(НомерДняЦикла), Изменен);
					ЧасовРаботы = СтрокаДанных["День"+НомерДня];
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не СписокДней.Количество() Тогда Возврат КонецЕсли;
	
	ДопПараметрыОповещения = Новый Структура("СписокДней", СписокДней);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ЗафиксироватьИзмененныйПериодВыделенныеДни",
	ЭтотОбъект,
	ДопПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДня", Дата(1,1,1));
	ПараметрыОткрытия.Вставить("Объект", Объект);
	ПараметрыОткрытия.Вставить("НомерДняЦикла", 0);
	ПараметрыОткрытия.Вставить("Изменен", Ложь);
	ПараметрыОткрытия.Вставить("ИзмененныеДни", ИзмененныеДни);
	ПараметрыОткрытия.Вставить("ЧасовРаботы", ЧасовРаботы);
	ПараметрыОткрытия.Вставить("ВыбранИнтервал", Истина);
	ПараметрыОткрытия.Вставить("СписокДней", СписокДней);
	
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.ФормаИзменитьРасписание", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Редактировать" Тогда
		ИзменитьРасписаниеПериода();
	Иначе
		ОчиститьРасписаниеКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

