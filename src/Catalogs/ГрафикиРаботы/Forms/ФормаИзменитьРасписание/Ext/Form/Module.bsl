#Область ОписаниеПеременных

&НаКлиенте
Перем ВремяОкончанияРегулирование;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ДатаДня = Параметры.ДатаДня;
	ЭтоИзменениеИнтервалаГрафика = Параметры.ВыбранИнтервал;
	
	ВремяПерерывов = 0;
	
	Если Не ЗначениеЗаполнено(ДатаДня) И Не ЭтоИзменениеИнтервалаГрафика Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ссылка") Тогда
		ГрафикСсылка = Параметры.Ссылка;
	ИначеЕсли Параметры.Свойство("Объект") Тогда
		ГрафикСсылка = Параметры.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоИзменениеИнтервалаГрафика Тогда
	
		ЭтаФорма.Заголовок = СтрШаблон(НСтр("ru = 'Расписание на дату: %1'"), Формат(ДатаДня,"ДЛФ=Д"));
		
		Если Параметры.Изменен Тогда
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ДатаДня",ДатаДня);
			
			ИзмененныйПериод_Строки = Параметры.ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			Если ИзмененныйПериод_Строки.Количество() Тогда
				
				ТаблицаПериодов = ПериодыВПерерывы(Параметры.ИзмененныеДни.Выгрузить(ИзмененныйПериод_Строки));
				Перерывы.Загрузить(ТаблицаПериодов);
				
			КонецЕсли;
			
		Иначе
			
			НомерДня = Параметры.НомерДняЦикла;
			
			Если Не НомерДня = 0 Тогда
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("НомерДняЦикла",НомерДня);
				
				СтрокиПериодов = ГрафикСсылка.ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
				
				ТаблицаПериодов = ПериодыВПерерывы(ГрафикСсылка.ПериодыГрафика.Выгрузить(СтрокиПериодов));
				
				Перерывы.Загрузить(ТаблицаПериодов);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЧасовРаботыСУчетомПерерывов = Параметры.ЧасовРаботы;
		Элементы.ВремяПерерывов.ТолькоПросмотр = Перерывы.Количество();
		
		ВремяОкончания = ?(ВремяОкончания = Дата(1,1,1) И ЧасовРаботыСУчетомПерерывов > 0, Дата(1,1,1, 23,59,0), ВремяОкончания);
		ВремяОкончанияДляРасчетов = ?(ВремяОкончания =Дата(1,1,1, 23,59,0) И ЧасовРаботыСУчетомПерерывов > 0, Дата(1,1,1), ВремяОкончания);
		
		Если Не ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов)
			Тогда
			
			Если Не Параметры.ЧасовРаботы = 24 Тогда
				ДатаНачалаРасчет = 28800+ Параметры.ЧасовРаботы * 3600;
				ВремяНачала = ?(ДатаНачалаРасчет>86400, 28800 - (ДатаНачалаРасчет - 86400), ДатаНачалаРасчет);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
		
	Если Не Параметры.Свойство("СписокДней") Тогда
		Возврат
	КонецЕсли;
	
	СоответствиеПереданныхДатГрафикам = ?(Параметры.Свойство("СоответствиеПереданныхДатГрафикам")
										, Параметры.СоответствиеПереданныхДатГрафикам, Неопределено);
	
	Если Не ПараметрыДнейСовпадают(Параметры.СписокДней, Параметры.ИзмененныеДни, ГрафикСсылка.ПериодыГрафика, СоответствиеПереданныхДатГрафикам)
		ИЛИ Параметры.Свойство("ТекстОшибки") Тогда
		
		Элементы.ГруппаТекстОшибки.Видимость = Истина;
		
		ТекстОшибки = ?(Параметры.Свойство("ТекстОшибки"), Параметры.ТекстОшибки
		,"Параметры выделенных дней не совпадают. При редактировании расписание будет обновлено текущим.");
		
	Иначе
		Элементы.ВремяПерерывов.ТолькоПросмотр = Перерывы.Количество();
		ЧасовРаботыСУчетомПерерывов = Параметры.ЧасовРаботы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьВремяПерерывовИСформироватьПредставлениеРасписанияПриОткрытии();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЧасовРаботыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление> 0 И ВремяОкончания = Дата(1,1,1,23,59,0) Тогда
		ВремяОкончанияДляРасчетов = Дата(1,1,1);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыОкончаниеРабочегоДняРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВремяОкончанияРегулирование = ?(Направление>0,ВремяОкончания, Неопределено);
	ВремяОкончания = ?(ВремяОкончания = Дата(1,1,1,23,59,0), Дата(1,1,1), ВремяОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПерерывовПриИзменении(Элемент)
	
	ОбработкаИзмененияВремениПерерывов();
	ПриИзмененииЧасовРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Перерывы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	ВремяПерерывов = ВремяПерерывов - ТекущиеДанные.Длительность;
	
	ОбработкаИзмененияВремениПерерывов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыВремяНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перерывы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяНачала) И ТекущиеДанные.ВремяНачала < ВремяНачала Тогда
		ТекущиеДанные.ВремяНачала = ВремяНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) И ТекущиеДанные.ВремяНачала >= ТекущиеДанные.ВремяОкончания Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
	КонецЕсли;
	
	РассчитатьВремяПерерывовИСформироватьПредставлениеРасписания();
	
	ОшибкаВремениПерерывов = ?(ВремяПерерывов+ЧасовРаботыСУчетомПерерывов>ЧасовРаботыИнтервал, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыОкончаниеРабочегоДняПриИзменении(Элемент)
	
	Если ВремяОкончания = Дата(1,1,1) И ЧасовРаботыСУчетомПерерывов = 0 Тогда
		ВремяОкончанияДляРасчетов = Дата(1,1,1);
	ИначеЕсли ВремяОкончания = Дата(1,1,1) И ЧасовРаботыСУчетомПерерывов > 0 Тогда
		 ВремяОкончания = Дата(1,1,1,23,59,0);
		 ВремяОкончанияДляРасчетов = Дата(1,1,1);
	 ИначеЕсли Не(ВремяОкончанияРегулирование) = Неопределено
		 И ВремяОкончанияРегулирование = Дата(1,1,1,23,59,0) 
		 И ВремяОкончанияДляРасчетов = Дата(1,1,1) Тогда
		 
		ВремяОкончания = Дата(1,1,1);
	 Иначе
		ВремяОкончанияДляРасчетов = ?(ВремяОкончания =Дата(1,1,1, 23,59,0), Дата(1,1,1), ВремяОкончания);
	КонецЕсли;
	
	ОбработатьИзменениеПериодаРабочегоДня(Ложь);
	ПроверитьГраницыПерерывовПриИзмененииПериодаРабочегоДня(Ложь);
	
	ВремяОкончанияРегулирование = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРаботыНачалоРабочегоДняПриИзменении(Элемент)
	
	ОбработатьИзменениеПериодаРабочегоДня();
	ПроверитьГраницыПерерывовПриИзмененииПериодаРабочегоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыВремяОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перерывы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВремяОкончания) И ТекущиеДанные.ВремяОкончания > ВремяОкончания Тогда
		ТекущиеДанные.ВремяОкончания = ВремяОкончания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) 
		И ТекущиеДанные.ВремяОкончания <= ТекущиеДанные.ВремяНачала Тогда
		ТекущиеДанные.ОшибкаПериода = Истина;
	Иначе
		ТекущиеДанные.ОшибкаПериода = Ложь;
	КонецЕсли;
	
	РассчитатьВремяПерерывовИСформироватьПредставлениеРасписания(Ложь);
	
	ОшибкаВремениПерерывов = ?(ВремяПерерывов+ЧасовРаботыСУчетомПерерывов>ЧасовРаботыИнтервал, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧасовРаботыПриИзменении(Элемент)
	
	ПриИзмененииЧасовРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыПослеУдаления(Элемент)
	
	Если Не Перерывы.Количество() Тогда
		ВремяПерерывов = 0;
		ЧасовРаботыСУчетомПерерывов = ЧасовРаботыИнтервал;
		Если ЗначениеЗаполнено(ВремяНачала) ИЛИ ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) Тогда
			ОбработатьИзменениеПериодаРабочегоДня();
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииЧасовРаботы();
	ОшибкаВремениПерерывов = ?(ЧасовРаботыСУчетомПерерывов + ВремяПерерывов > ЧасовРаботыИнтервал, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыПриИзменении(Элемент)
	Элементы.ВремяПерерывов.ТолькоПросмотр = Перерывы.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ПерерывыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Перерывы.ТекущиеДанные;
		ТекущиеДанные.НомерСтроки = Перерывы.Количество();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВСправочник(Команда)
	
	Если Не ПроверитьГраницыПерерывов() Тогда Возврат КонецЕсли;
	
	Перерывы.Сортировать("ВремяНачала");
	
	Периоды.Очистить();
	
	ПоследнееВремяОкончанияПерерыва = Дата(1,1,1);
	КоличествоПерерывов = Перерывы.Количество();
	ИндексСтроки = 1;
	
	Для Каждого СтрокаПерерыва Из Перерывы Цикл
		
		Если ИндексСтроки = 1 Тогда
			
			НоваяСтрока = Периоды.Добавить();
			НоваяСтрока.НомерДняЦикла = НомерДня;
			
			НоваяСтрока.ВремяНачала = ВремяНачала;
			НоваяСтрока.ВремяОкончания = ?(ЗначениеЗаполнено(СтрокаПерерыва.ВремяНачала),СтрокаПерерыва.ВремяНачала, СтрокаПерерыва.ВремяОкончания);
			
			НоваяСтрока.Длительность = Окр((НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
			
			// Если всего один перерыв
			Если ИндексСтроки = КоличествоПерерывов Тогда
				
				НоваяСтрока = Периоды.Добавить();
				НоваяСтрока.НомерДняЦикла = НомерДня;
				
				НоваяСтрока.ВремяНачала = СтрокаПерерыва.ВремяОкончания;
				НоваяСтрока.ВремяОкончания = ВремяОкончанияДляРасчетов;
				
				Длительность = Окр((НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
				НоваяСтрока.Длительность = ?(Длительность < 0, 24 + Длительность, Длительность);
				
			КонецЕсли;
			
		ИначеЕсли ИндексСтроки = КоличествоПерерывов Тогда
			
			Если Не СтрокаПерерыва.ВремяНачала = ПоследнееВремяОкончанияПерерыва Тогда
				
				НоваяСтрока = Периоды.Добавить();
				НоваяСтрока.НомерДняЦикла = НомерДня;
				
				НоваяСтрока.ВремяНачала = ПоследнееВремяОкончанияПерерыва;
				НоваяСтрока.ВремяОкончания = СтрокаПерерыва.ВремяНачала;
				
				НоваяСтрока.Длительность = Окр((НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20)
				
			КонецЕсли;
			
			НоваяСтрока = Периоды.Добавить();
			НоваяСтрока.НомерДняЦикла = НомерДня;
			
			НоваяСтрока.ВремяНачала = СтрокаПерерыва.ВремяОкончания;
			НоваяСтрока.ВремяОкончания = ВремяОкончанияДляРасчетов;
			
			Длительность = Окр((НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
			НоваяСтрока.Длительность = ?(Длительность < 0, 24 + Длительность, Длительность);
			
		Иначе
			
			Если СтрокаПерерыва.ВремяНачала = ПоследнееВремяОкончанияПерерыва Тогда
				ПоследнееВремяОкончанияПерерыва = СтрокаПерерыва.ВремяОкончания;
				ИндексСтроки = ИндексСтроки + 1;
				Продолжить
			КонецЕсли;
			
			НоваяСтрока = Периоды.Добавить();
			НоваяСтрока.НомерДняЦикла = НомерДня;
			
			НоваяСтрока.ВремяНачала = ПоследнееВремяОкончанияПерерыва;
			НоваяСтрока.ВремяОкончания = СтрокаПерерыва.ВремяНачала;
			
			НоваяСтрока.Длительность = Окр((НоваяСтрока.ВремяОкончания - НоваяСтрока.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20)
			
		КонецЕсли;
		
		ПоследнееВремяОкончанияПерерыва = СтрокаПерерыва.ВремяОкончания;
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("НомерДняЦикла", НомерДня);
	ПараметрыЗакрытия.Вставить("ДатаДня", ДатаДня);
	ПараметрыЗакрытия.Вставить("Периоды", Периоды);
	ПараметрыЗакрытия.Вставить("ВремяНачала", ВремяНачала);
	ПараметрыЗакрытия.Вставить("ВремяОкончания", ВремяОкончанияДляРасчетов);
	ПараметрыЗакрытия.Вставить("ВремяПерерывов", ВремяПерерывов);
	ПараметрыЗакрытия.Вставить("ЧасовРаботы", ЧасовРаботыСУчетомПерерывов);
	
	ЭтаФорма.Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаИзмененияВремениПерерывов(ЭтоУдалениеСтроки = Ложь, ЭтоИзменениеПериодаВПерерывах = Ложь)
	
	Если ЭтоУдалениеСтроки Тогда
			Возврат;
	КонецЕсли;
	
	Если ЭтоИзменениеПериодаВПерерывах И ВремяПерерывов > ЧасовРаботыИнтервал Тогда
		Возврат
	КонецЕсли;
	
	Если ВремяПерерывов>=24 Тогда
		ВремяПерерывов = ЧасовРаботыИнтервал - ЧасовРаботыСУчетомПерерывов;
		Возврат;
	КонецЕсли;
	
	Если ВремяПерерывов = 0 И ЧасовРаботыСУчетомПерерывов = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если ЧасовРаботыИнтервал - ВремяПерерывов<0 Тогда
		
		ЧасовРаботыСУчетомПерерывов = ЧасовРаботыИнтервал + (ЧасовРаботыИнтервал - ВремяПерерывов);
		ВремяПерерывов = (ЧасовРаботыИнтервал - ВремяПерерывов) * -1;
		
		Возврат;
	ИначеЕсли ЧасовРаботыИнтервал - ВремяПерерывов = 0 И НЕ ЭтоИзменениеПериодаВПерерывах Тогда
		ЧасовРаботыСУчетомПерерывов = ЧасовРаботыИнтервал;
		ВремяПерерывов = 0;
		Возврат;
		
	КонецЕсли;
	
	ЧасовРаботыСУчетомПерерывов = ЧасовРаботыИнтервал - ВремяПерерывов;
	ВремяПерерывов = ?(ЧасовРаботыИнтервал - ВремяПерерывов<0,0, ВремяПерерывов);
	
	ОшибкаВремениПерерывов = ?(ВремяПерерывов+ЧасовРаботыСУчетомПерерывов>ЧасовРаботыИнтервал, Истина, Ложь);
	
	
КонецПроцедуры

&НаСервере
Функция ПериодыВПерерывы(ТаблицаПериодов)
	
	ТаблицаПерерывов = Новый ТаблицаЗначений;
	ТаблицаПерерывов.Колонки.Добавить("ВремяНачала");
	ТаблицаПерерывов.Колонки.Добавить("ВремяОкончания");
	ТаблицаПерерывов.Колонки.Добавить("НомерСтроки");
	
	КоличествоПериодов = ТаблицаПериодов.Количество();
	
	Если КоличествоПериодов = 0 Тогда
		
		Возврат ТаблицаПерерывов;
		
	ИначеЕсли КоличествоПериодов = 1 Тогда
		
		ВремяНачала = ТаблицаПериодов[0].ВремяНачала;
		ВремяОкончанияДляРасчетов = ТаблицаПериодов[0].ВремяОкончания;
		ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЧасовРаботыСУчетомПерерывов = 24, Дата(1,1,1, 23, 59, 0), ВремяОкончанияДляРасчетов);
		
		ВремяПерерывов = ТаблицаПериодов[0].ЧасовПерерывов;
		
		Возврат ТаблицаПерерывов;
		
	ИначеЕсли КоличествоПериодов > 1 Тогда
		
		ВремяНачала = ТаблицаПериодов[0].ВремяНачала;
		ВремяОкончанияДляРасчетов = ТаблицаПериодов[КоличествоПериодов-1].ВремяОкончания;
		ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЧасовРаботыСУчетомПерерывов = 24, Дата(1,1,1, 23, 59, 0), ВремяОкончанияДляРасчетов);
		
	КонецЕсли;
	
	Для НомерСтроки = 0 По КоличествоПериодов-1 Цикл
		
		ВремяНачалаПериода = ТаблицаПериодов[НомерСтроки].ВремяОкончания;
		ВремяОкончанияПериода = ТаблицаПериодов[НомерСтроки+1].ВремяНачала;
		
		Если ВремяНачалаПериода = ВремяОкончанияПериода 
			Тогда
			
			Если НомерСтроки+1 = КоличествоПериодов-1 Тогда 
				Прервать
			Иначе
				Продолжить
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПерерывов.Добавить();
		НоваяСтрока.ВремяНачала = ВремяНачалаПериода;
		НоваяСтрока.ВремяОкончания = ВремяОкончанияПериода;
		НоваяСтрока.НомерСтроки = НомерСтроки+1;
		
		Если НомерСтроки+1 = КоличествоПериодов-1 Тогда Прервать КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПерерывов;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Перерывы.ОшибкаПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПерерывыВремяНачала");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПерерывыВремяОкончания");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ОшибкаВремениПериода", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыНачалоРабочегоДня");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РасписаниеРаботыОкончаниеРабочегоДня");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ОшибкаВремениПерерывов", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЧасовРаботыСУчетомПерерывов");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВремяПерерывов");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьГраницыПерерывов()
	
	ОчиститьСообщения();
	
	Если ЧасовРаботыСУчетомПерерывов = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Заполните часы работы.' ");
		Сообщение.Поле = "ЧасовРаботыСУчетомПерерывов";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ВремяПерерывов + ЧасовРаботыСУчетомПерерывов > 24 Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Сумма перерывов и часов работы больше 24 часов.' ");
		Сообщение.Поле = "ЧасовРаботыСУчетомПерерывов";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ОшибкаВремениПериода Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Начало и окончание рабочего дня не могут совпадать.' ");
		Сообщение.Поле = "ВремяОкончания";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ПроверяемаяСтрока Из Перерывы Цикл
		
		НомерТекущейСтроки = ПроверяемаяСтрока.НомерСтроки;
		
		Если ПроверяемаяСтрока.ОшибкаПериода 
			Или (Не ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяНачала) И Не ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяОкончания)) Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Границы перерыва введены не верно.' ");
			Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяНачала";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для Каждого СтрокаПерерывов Из Перерывы Цикл
			
			// Проверка на поглощенные перерывы
			Если Не СтрокаПерерывов.НомерСтроки = НомерТекущейСтроки 
				И ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяОкончания) И ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяНачала) Тогда
				
				Если ЗначениеЗаполнено(СтрокаПерерывов.ВремяОкончания) 
					И ПроверяемаяСтрока.ВремяОкончания >= СтрокаПерерывов.ВремяОкончания
					И ПроверяемаяСтрока.ВремяНачала <= СтрокаПерерывов.ВремяНачала Тогда
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = НСтр("ru = 'Существует перерыв включенный в данный период.' ");
					Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
					Сообщение.УстановитьДанные(ЭтаФорма);
					Сообщение.Сообщить();
					Возврат Ложь;
				КонецЕсли;
				
				Если ПроверяемаяСтрока.ВремяОкончания <= СтрокаПерерывов.ВремяОкончания
					И ПроверяемаяСтрока.ВремяНачала >= СтрокаПерерывов.ВремяНачала Тогда
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = НСтр("ru = 'Данный период включен в другой перерыв.' ");
					Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
					Сообщение.УстановитьДанные(ЭтаФорма);
					Сообщение.Сообщить();
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			// --------------
			
			Если Не СтрокаПерерывов.НомерСтроки = НомерТекущейСтроки И ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяНачала)
				И (ПроверяемаяСтрока.ВремяНачала >= СтрокаПерерывов.ВремяНачала И ПроверяемаяСтрока.ВремяНачала < СтрокаПерерывов.ВремяОкончания) Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время окончания перерыва пересекается с периодом другого перерыва.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если Не СтрокаПерерывов.НомерСтроки = НомерТекущейСтроки И ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяОкончания)
				И (ПроверяемаяСтрока.ВремяОкончания <= СтрокаПерерывов.ВремяОкончания И ПроверяемаяСтрока.ВремяОкончания > СтрокаПерерывов.ВремяНачала) Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.
				Сообщение.Текст = НСтр("ru = 'Время начала перерыва пересекается с периодом другого перерыва.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяНачала";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяНачала)Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Задано начало раб. дня. Время начала перерыва не может быть пустым.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяНачала";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И Не ЗначениеЗаполнено(ПроверяемаяСтрока.ВремяОкончания)Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Задано окончание раб. дня. Время окончания перерыва не может быть пустым.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ВремяОкончанияДляРасчетов = ПроверяемаяСтрока.ВремяОкончания Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время окончания перерыва не может совпадать с окончанием рабочего дня.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяНачала) И ВремяНачала = ПроверяемаяСтрока.ВремяНачала Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время начала перерыва не может совпадать с началом рабочего дня.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяНачала";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ВремяОкончанияДляРасчетов < ПроверяемаяСтрока.ВремяОкончания Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время окончания перерыва не может превышать окончание рабочего дня.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяОкончания";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяНачала) И ВремяНачала > ПроверяемаяСтрока.ВремяНачала Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время начала перерыва не может быть меньше времени начала рабочего дня.' ");
				Сообщение.Поле = "Перерывы[" + Строка(ПроверяемаяСтрока.НомерСтроки-1)+"]" + ".ВремяНачала";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьВремяПерерывовИСформироватьПредставлениеРасписания(ЭтоВремяНачалаПерерыва = Истина)
	
	ТекущиеДанные = Элементы.Перерывы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Перерывы.Количество() Тогда
		
		ИтогДлительностиПерерывов = 0;
		ИтогДлительностиПерерывовСек = 0;
		ИтогДлительностьПерерывовСек = 0;
		
		Для Каждого СтрокаПерерывов Из Перерывы Цикл
			
			Если СтрокаПерерывов.ВремяНачала < СтрокаПерерывов.ВремяОкончания
				Или (ЗначениеЗаполнено(СтрокаПерерывов.ВремяНачала) И Не ЗначениеЗаполнено(СтрокаПерерывов.ВремяОкончания)) Тогда
				
				ДлительностьПерерываСек = СтрокаПерерывов.ВремяОкончания - СтрокаПерерывов.ВремяНачала;
				ДлительностьПерерываСек = ?(ДлительностьПерерываСек > 0, ДлительностьПерерываСек, 86400 + ДлительностьПерерываСек);
				
				ДлительностьПерерыва = Окр(ДлительностьПерерываСек/3600, 2, РежимОкругления.Окр15как20);
				СтрокаПерерывов.Длительность = ?(ДлительностьПерерыва > 0, ДлительностьПерерыва, 24 + ДлительностьПерерыва);
				
				ИтогДлительностиПерерывов = ИтогДлительностиПерерывов + СтрокаПерерывов.Длительность;
				ИтогДлительностьПерерывовСек = ИтогДлительностьПерерывовСек + ДлительностьПерерываСек;
				
			КонецЕсли;
		КонецЦикла;
		ВремяПерерывов = ИтогДлительностиПерерывов;
		
	КонецЕсли;
	
	ОбработкаИзмененияВремениПерерывов(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВремяПерерывовИСформироватьПредставлениеРасписанияПриОткрытии(ЭтоВремяНачалаПерерыва = Истина, ОткрытиеФормы = Ложь)
	
	Если Перерывы.Количество() Тогда
		
		ИтогДлительностиПерерывов = 0;
		
		Для Каждого СтрокаПерерывов Из Перерывы Цикл
			
			//Если Не ЗначениеЗаполнено(СтрокаПерерывов.ВремяНачала) или Не ЗначениеЗаполнено(СтрокаПерерывов.ВремяОкончания) Тогда
			//	Продолжить
			//КонецЕсли;
			
			Если СтрокаПерерывов.ВремяНачала < СтрокаПерерывов.ВремяОкончания
				Или (ЗначениеЗаполнено(СтрокаПерерывов.ВремяНачала) И Не ЗначениеЗаполнено(СтрокаПерерывов.ВремяОкончания)) Тогда
				
				ДлительностьПерерыва = Окр((СтрокаПерерывов.ВремяОкончания - СтрокаПерерывов.ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
				СтрокаПерерывов.Длительность = ?(ДлительностьПерерыва > 0, ДлительностьПерерыва, 24 + ДлительностьПерерыва);
				
				ИтогДлительностиПерерывов = ИтогДлительностиПерерывов + СтрокаПерерывов.Длительность;
				
			КонецЕсли;
		КонецЦикла;
		
		ВремяПерерывов = ИтогДлительностиПерерывов;
	КонецЕсли;
	
	ЧасовРаботыИнтервал = ЧасовРаботыСУчетомПерерывов + ВремяПерерывов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПериодаРабочегоДня(ЭтоВремяНачала = Истина)
	
	Если Не ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов)
		И Не ВремяОкончания = Дата(1,1,1,23,59,0) Тогда
		ЧасовРаботыСУчетомПерерывов = 0;
		ЧасовРаботыИнтервал = 24 - ВремяПерерывов;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяНачала) И ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) Тогда
		Если ВремяОкончанияДляРасчетов < ВремяНачала ИЛИ ВремяНачала > ВремяОкончанияДляРасчетов Тогда
			ВремяОкончанияДляРасчетов = ВремяНачала;
			ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЧасовРаботыСУчетомПерерывов = 24, Дата(1,1,1, 23, 59, 0), ВремяОкончанияДляРасчетов);
		КонецЕсли
	КонецЕсли;
		
	ЧасовРаботыСУчетомПерерывовРасчет = Окр((ВремяОкончанияДляРасчетов-ВремяНачала)/60/60, 2, РежимОкругления.Окр15как20);
	
	ЧасовРаботыСУчетомПерерывовРасчет = ?(ЧасовРаботыСУчетомПерерывовРасчет > 0, ЧасовРаботыСУчетомПерерывовРасчет, 24 + ЧасовРаботыСУчетомПерерывовРасчет );
	
	ЧасовРаботыСУчетомПерерывов = ЧасовРаботыСУчетомПерерывовРасчет;
	
	Если ЗначениеЗаполнено(ВремяНачала) Или ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) Тогда
		ЧасовРаботыСУчетомПерерывов = ?(ЧасовРаботыСУчетомПерерывов > 0, ЧасовРаботыСУчетомПерерывов - ВремяПерерывов
		, 24 + ЧасовРаботыСУчетомПерерывов - ВремяПерерывов);
		
		Если ЧасовРаботыСУчетомПерерывов < 0 Тогда
			Если ЭтоВремяНачала Тогда
				ВремяНачала = ВремяНачала + (ЧасовРаботыСУчетомПерерывов*3600)
			Иначе
				ВремяОкончанияДляРасчетов = ВремяОкончанияДляРасчетов - (ЧасовРаботыСУчетомПерерывов*3600);
				ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЧасовРаботыСУчетомПерерывов = 24, Дата(1,1,1, 23, 59, 0), ВремяОкончанияДляРасчетов);
			КонецЕсли;
			
			ЧасовРаботыСУчетомПерерывов = 0;
		КонецЕсли;
		
	Иначе
		ЧасовРаботыСУчетомПерерывов = 24 - ВремяПерерывов;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) ИЛИ ЗначениеЗаполнено(ВремяНачала))
		И ВремяНачала = ВремяОкончания Тогда
		ЧасовРаботыСУчетомПерерывов = 0;
	КонецЕсли;
	
	ЧасовРаботыИнтервал = ЧасовРаботыСУчетомПерерывов + ВремяПерерывов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГраницыПерерывовПриИзмененииПериодаРабочегоДня(ЭтоВремяНачала = Истина)
	
	ОчиститьСообщения();
	
	ОшибкаВремениПериода = ?(ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЗначениеЗаполнено(ВремяНачала)
	И ВремяОкончанияДляРасчетов = ВремяНачала, Истина, Ложь);
	
	Если (Не ЗначениеЗаполнено(ВремяНачала) И Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов))
		Или Не Перерывы.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ОшибкаПериода = Ложь;
	
	Если ЭтоВремяНачала И ЗначениеЗаполнено(ВремяНачала) Тогда
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаПерерывов Из Перерывы Цикл
			
			Если ВремяНачала > СтрокаПерерывов.ВремяНачала Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время начала рабочего дня больше времени начала перерыва' ");
				Сообщение.Поле = "Перерывы[" + Строка(НомерСтроки-1)+"]" + ".ВремяНачала";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				
				ВремяНачала = СтрокаПерерывов.ВремяНачала;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЭтоВремяНачала И ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) Тогда
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаПерерывов Из Перерывы Цикл
			
			Если ВремяОкончанияДляРасчетов < СтрокаПерерывов.ВремяОкончания Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Время окончания рабочего дня меньше времени окончания перерыва' ");
				Сообщение.Поле = "Перерывы[" + Строка(НомерСтроки-1)+"]" + ".ВремяОкончания";
				Сообщение.УстановитьДанные(ЭтаФорма);
				Сообщение.Сообщить();
				
				ВремяОкончанияДляРасчетов = СтрокаПерерывов.ВремяОкончания;
				ВремяОкончания = ?(Не ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЧасовРаботыСУчетомПерерывов = 24, Дата(1,1,1, 23, 59, 0), ВремяОкончанияДляРасчетов);
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДнейСовпадают(СписокДней, Знач ИзмененныеДни, Знач ПериодыГрафика, СоответствиеПереданныхДатГрафикам = Неопределено)
	
	НетОшибокИнтервала = Истина;
	НетОшибокНачалаИнтервала = Истина;
	НетОшибокОкончанияИнтервала = Истина;
	НетОшибокВремениРабДня = Истина;
	НетОшибокИнтерваловПерерывов = Истина;
	НетОшибокДлительностиПерерывов = Истина;
	
	ЭтоФормаВводаОтклонений = ?(СоответствиеПереданныхДатГрафикам = Неопределено, Ложь, Истина);
	
	ИзмененныеДни.Сортировать("ДатаДня Возр, ВремяНачала Возр");
	ПериодыГрафика.Сортировать("НомерДняЦикла Возр, ВремяНачала Возр");
	
	СоответствиеПараметровПоДням = Новый Соответствие;
	
	ДлительностьПерерывовТекДня = 25;
	КоличествоПерерывов = -1;
	
	ПоследнийДеньСписка = Неопределено;
	ТаблицаПерерывов = Новый ТаблицаЗначений;
	
	ИндексДняСписка = 1;
	
	ВремяНачалаЭталон = Дата(1,1,1);
	ВремяОкончанияЭталон = Дата(1,1,1);
	
	СтруктураШапки = СтруктураШапкиДня();
	
	РабочихЧасов = 0;
	
	Для Каждого ЭлементСписка Из СписокДней Цикл
		
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("ДатаДня");
		ТаблицаПараметров.Колонки.Добавить("ВремяНачала");
		ТаблицаПараметров.Колонки.Добавить("ВремяОкончания");
		ТаблицаПараметров.Колонки.Добавить("Длительность");
		
		Если ЭлементСписка.Пометка Тогда
			
			ДлительностьПерерывовПредДня = ДлительностьПерерывовТекДня;
			КоличествоПериодовПредДень = КоличествоПерерывов;
			
			КоличествоПерерывов = 0;
			СуммаПерерывов = 0;
			РабочихЧасовЗаДень = 0;
			
			ПараметрыОтбора = Новый Структура("ДатаДня",ЭлементСписка.Значение);
			ИзмененныйПериод_Строки = ИзмененныеДни.НайтиСтроки(ПараметрыОтбора);
			
			ТабИзмененныеДни = ИзмененныеДни.Выгрузить(ИзмененныйПериод_Строки);
			
			СтруктураШапки = СтруктураШапкиДня(ТабИзмененныеДни);
			РабочихЧасовЗаДень = СтруктураШапки.ЧасовРаботы;
			
			Если ИзмененныйПериод_Строки.Количество() Тогда 
				
				Если ИндексДняСписка = 1 Тогда
					ВремяНачалаЭталон = ИзмененныйПериод_Строки[0].ВремяНачала;
					ВремяОкончанияЭталон = ИзмененныйПериод_Строки[ИзмененныйПериод_Строки.Количество()-1].ВремяОкончания;
				КонецЕсли;
				
				ТаблицаПерерывов = ПериодыВПерерывы(ТабИзмененныеДни);
				
				Для Каждого СтрокаПериод Из ТаблицаПерерывов Цикл
					НоваяСтрока = ТаблицаПараметров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
					НоваяСтрока.ДатаДня = ЭлементСписка.Значение;
					СуммаПерерывов = СуммаПерерывов + (НоваяСтрока.ВремяОкончания-НоваяСтрока.ВремяНачала)/3600;
				КонецЦикла;
				
				КоличествоПерерывов = ТаблицаПараметров.Количество();
				
				Если СуммаПерерывов = 0
					И (ЗначениеЗаполнено(ВремяНачала)
					ИЛИ ЗначениеЗаполнено(ВремяОкончанияДляРасчетов)) Тогда
					
					Длительность = Окр((ВремяОкончанияДляРасчетов -ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
					СуммаПерерывов = ?(Длительность < 0, 24 + Длительность, Длительность);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДлительностьПерерывовТекДня = СуммаПерерывов;
			
		Иначе
			
			ДлительностьПерерывовПредДня = ДлительностьПерерывовТекДня;
			КоличествоПериодовПредДень = КоличествоПерерывов;
			
			НомерДня = Число(ЭлементСписка.Представление);
			
			КоличествоПерерывов = 0;
			СуммаПерерывов = 0;
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("НомерДняЦикла",НомерДня);
			
			Если ЭтоФормаВводаОтклонений Тогда
				ПараметрыОтбора.Вставить("ГрафикРаботы",СоответствиеПереданныхДатГрафикам.Получить(ЭлементСписка.Значение));
			КонецЕсли;
			
			СтрокиПериодов = ПериодыГрафика.НайтиСтроки(ПараметрыОтбора);
			
			ТабПериодыГрафика = ПериодыГрафика.Выгрузить(СтрокиПериодов);
			
			СтруктураШапки = СтруктураШапкиДня(ТабПериодыГрафика);
			РабочихЧасовЗаДень = СтруктураШапки.ЧасовРаботы;
			
			Если СтрокиПериодов.Количество() Тогда
				
				ТаблицаПерерывов = ПериодыВПерерывы(ТабПериодыГрафика);
				
				Если ИндексДняСписка = 1 Тогда
					ВремяНачалаЭталон = СтрокиПериодов[0].ВремяНачала;
					ВремяОкончанияЭталон = СтрокиПериодов[СтрокиПериодов.Количество()-1].ВремяОкончания;
				КонецЕсли;
			
				Для Каждого СтрокаПериод Из ТаблицаПерерывов Цикл
					НоваяСтрока = ТаблицаПараметров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод);
					НоваяСтрока.ДатаДня = ЭлементСписка.Значение;
					СуммаПерерывов = СуммаПерерывов + (НоваяСтрока.ВремяОкончания-НоваяСтрока.ВремяНачала)/3600;
				КонецЦикла;
				
				Если СуммаПерерывов = 0
					И (ЗначениеЗаполнено(ВремяНачала) 
					ИЛИ ЗначениеЗаполнено(ВремяОкончанияДляРасчетов)) Тогда
					
					Длительность = Окр((ВремяОкончанияДляРасчетов -ВремяНачала)/3600, 2, РежимОкругления.Окр15как20);
					СуммаПерерывов = ?(Длительность < 0, 24 + Длительность, Длительность);
					
				КонецЕсли;
				
				КоличествоПерерывов = ТаблицаПараметров.Количество();
				
			КонецЕсли;
			
			ДлительностьПерерывовТекДня = СуммаПерерывов;
			
		КонецЕсли;
		
		Если (ДлительностьПерерывовПредДня < 25 И Не ДлительностьПерерывовПредДня = ДлительностьПерерывовТекДня) 
			ИЛИ (КоличествоПериодовПредДень > 0 И Не КоличествоПериодовПредДень = КоличествоПерерывов) Тогда
			НетОшибокДлительностиПерерывов = Ложь;
		КонецЕсли;
		
		Если Не СтруктураШапки.ВремяНачала = ВремяНачалаЭталон ИЛИ Не СтруктураШапки.ВремяОкончания = ВремяОкончанияЭталон Тогда
			
			НетОшибокНачалаИнтервала = ?(Не СтруктураШапки.ВремяНачала = ВремяНачалаЭталон, Ложь, Истина);
			НетОшибокОкончанияИнтервала = ?(Не СтруктураШапки.ВремяОкончания = ВремяОкончанияЭталон, Ложь, Истина);
			
			НетОшибокИнтервала = Ложь;
			
		КонецЕсли;
		
		ТаблицаПараметров.Сортировать("ВремяНачала Возр");
		СоответствиеПараметровПоДням.Вставить(ЭлементСписка.Значение,ТаблицаПараметров);
		
		ПоследнийДеньСписка = ЭлементСписка.Значение;
		
		РабочихЧасов = РабочихЧасов + РабочихЧасовЗаДень;
		
		Если Не РабочихЧасов/ИндексДняСписка = РабочихЧасовЗаДень Тогда
			НетОшибокВремениРабДня = Ложь
		КонецЕсли;
		
		ИндексДняСписка = ИндексДняСписка + 1;
		
	КонецЦикла;
	
	Если НетОшибокДлительностиПерерывов Тогда
		
		НайденноеЗначение = СписокДней.НайтиПоЗначению(ПоследнийДеньСписка);
		
		СписокДней.Удалить(НайденноеЗначение);
		
		ТабЗначенийПерерывыПервыйДень = СоответствиеПараметровПоДням.Получить(ПоследнийДеньСписка);
		КоличествоПерерывовПервыйДень = ТабЗначенийПерерывыПервыйДень.Количество();
		
		Для Каждого ЭлементСписка Из СписокДней Цикл
			
			ТабЗначенийПерерывыТекущийДень = СоответствиеПараметровПоДням.Получить(ЭлементСписка.Значение);
			
			Если Не КоличествоПерерывовПервыйДень = ТабЗначенийПерерывыТекущийДень.Количество() Тогда
				НетОшибокИнтерваловПерерывов = Ложь;
				Прервать;
			КонецЕсли;
			
			ИндексСтрокиПервойТаблицы = 0;
			
			Для Каждого СтрокаТаблицы Из ТабЗначенийПерерывыТекущийДень Цикл
				
				Если Не СтрокаТаблицы.ВремяНачала = ТабЗначенийПерерывыПервыйДень[ИндексСтрокиПервойТаблицы].ВремяНачала
					Или Не СтрокаТаблицы.ВремяОкончания = ТабЗначенийПерерывыПервыйДень[ИндексСтрокиПервойТаблицы].ВремяОкончания Тогда
					НетОшибокИнтерваловПерерывов = Ложь;
					Прервать;
				КонецЕсли;
				
				ИндексСтрокиПервойТаблицы = ИндексСтрокиПервойТаблицы + 1;
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		НетОшибокИнтерваловПерерывов = Ложь;
	КонецЕсли;
	
	Если НетОшибокВремениРабДня И НетОшибокДлительностиПерерывов
		И НетОшибокИнтервала И НетОшибокИнтерваловПерерывов Тогда
		
		Перерывы.Загрузить(ТаблицаПерерывов);
		Возврат Истина;
		
	КонецЕсли;
	
	Если Не НетОшибокДлительностиПерерывов Тогда ВремяПерерывов = 0 КонецЕсли;
	Если Не НетОшибокВремениРабДня Тогда ЧасовРаботыСУчетомПерерывов = 0 КонецЕсли;
	
	ВремяНачала = ?(НетОшибокНачалаИнтервала, ВремяНачалаЭталон, Дата(1,1,1));
	ВремяОкончания = ?(НетОшибокОкончанияИнтервала, ВремяОкончанияЭталон, Дата(1,1,1));
	
	Если НетОшибокИнтерваловПерерывов Тогда
		Перерывы.Загрузить(ТаблицаПерерывов);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СтруктураШапкиДня(ТаблицаПериодов = Неопределено)
	
	СтруктураДня = Новый Структура("ВремяНачала, ВремяОкончания, ЧасовРаботы");
	
	Если ТаблицаПериодов = Неопределено ИЛИ Не ТаблицаПериодов.Количество() Тогда
		
		СтруктураДня.ЧасовРаботы = 0;
		СтруктураДня.ВремяНачала = Дата(1,1,1);
		СтруктураДня.ВремяОкончания = Дата(1,1,1);
		
		Возврат СтруктураДня;
		
	КонецЕсли;
	
	ЧасовРаботы = 0;
	
	Для Каждого СтрокаТаб Из ТаблицаПериодов Цикл
		ЧасовРаботы = ЧасовРаботы + СтрокаТаб.Длительность;
	КонецЦикла;
	
	СтруктураДня.ЧасовРаботы = ЧасовРаботы;
	СтруктураДня.ВремяНачала = ТаблицаПериодов[0].ВремяНачала;
	СтруктураДня.ВремяОкончания = ТаблицаПериодов[ТаблицаПериодов.Количество()-1].ВремяОкончания;
	
	Возврат СтруктураДня;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииЧасовРаботы()
	
	Если ЧасовРаботыСУчетомПерерывов = 24 Тогда
		ВремяНачала = Дата(1,1,1);
		ВремяОкончания = Дата(1,1,1,23,59,0);
		ВремяОкончанияДляРасчетов = Дата(1,1,1);
	КонецЕсли;
	
	Если ЧасовРаботыСУчетомПерерывов>24 - ВремяПерерывов Тогда
		ЧасовРаботыСУчетомПерерывов = 24 - ВремяПерерывов;
	КонецЕсли;
	
	Если ЧасовРаботыСУчетомПерерывов = 0 Тогда
		ВремяНачала = Дата(1,1,1);
		ВремяОкончанияДляРасчетов = Дата(1,1,1);
		ВремяОкончания = ВремяОкончанияДляРасчетов;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяНачала) Тогда
		ДоступныхЧасов =86400+(Дата(1,1,1) - ВремяНачала) - ВремяПерерывов*3600;
	Иначе
		ДоступныхЧасов = 86400 - ВремяПерерывов*3600;
	КонецЕсли;
	
	ВремяНачала = ?(Не ЗначениеЗаполнено(ВремяНачала), Дата(1,1,1,8,0,0), ВремяНачала);
	
	ВремяНачалаСек = (Дата(1,1,1) - ВремяНачала)*-1;
	
	ВремяОкончанияДляРасчетовСек = 86400 - (ВремяНачалаСек + (ЧасовРаботыСУчетомПерерывов+ВремяПерерывов)*3600);
	
	Если ВремяОкончанияДляРасчетовСек < 0 Тогда
		ВремяОкончания = Дата(1,1,1,23,59,0);
		ВремяНачала = Дата(1,1,1) + (ВремяНачалаСек + ВремяОкончанияДляРасчетовСек);
		ВремяОкончанияДляРасчетов = Дата(1,1,1);
	Иначе
		ВремяОкончания = Дата(1,1,1)+ВремяНачалаСек + (ЧасовРаботыСУчетомПерерывов+ВремяПерерывов)*3600;
		ВремяОкончанияДляРасчетов = ВремяОкончания;
		Если ВремяОкончания = Дата(1,1,1) Тогда
			ВремяОкончания = Дата(1,1,1,23,59,0);
			ВремяОкончанияДляРасчетов = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаВремениПериода = ?(ЗначениеЗаполнено(ВремяОкончанияДляРасчетов) И ЗначениеЗаполнено(ВремяНачала)
	И ВремяОкончанияДляРасчетов = ВремяНачала, Истина, Ложь);
	
	ЧасовРаботыИнтервал = ЧасовРаботыСУчетомПерерывов + ВремяПерерывов;
	
	ОшибкаВремениПерерывов = ?(ВремяПерерывов+ЧасовРаботыСУчетомПерерывов>24, Истина, Ложь);
	
КонецПроцедуры;

#КонецОбласти





