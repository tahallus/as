&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем МассивВыбранныхДокументов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Заголовок = Объект.Наименование;
		ОпределитьЭтоПакетСДопДокументами(ЭтотОбъект);
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		
	Иначе
	
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		ЗаполнитьОрганизациюИзПараметров(Параметры);
		
		// Основание
		Если Не ЗначениеЗаполнено(Объект.Основание) Тогда 
			Параметры.Свойство("ОснованиеПакета", Объект.Основание);
		КонецЕсли;
		
		ОпределитьЭтоПакетСДопДокументами(ЭтотОбъект);
		Если ЗначениеЗаполнено(Объект.Основание) Тогда
			ОснованиеПриИзмененииНаСервере();
		КонецЕсли;
		
		// Копируем табличную часть.
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьДеревоДокументов(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
		УстановитьМодифицированность(ЭтотОбъект);
		
	КонецЕсли;
	
	Элементы.ПредставляемыеДокументы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	СформироватьСоставМенюДобавитьИзБазы();
	
	УправлениеСтатусомИДоступностью();
	
	ОпределитьВложенияИРазмерВложений(Параметры);
	
	ИзменитьОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюИзПараметров(Параметры)
	
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
			ОрганизацияОтбор = Параметры.ЗначенияЗаполнения.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Параметры.Свойство("Организация", Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Заголовок = КонтекстЭДОСервер.НаименованиеОписиИсхДок(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Заголовок + НСтр("ru = ' (создание)'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Заголовок = Объект.Наименование;
	Оповестить("Запись_ОписиИсходящихДокументовВНалоговыеОрганы", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПроверкаЗаполнения() = Ложь Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СканированныеДокументыДляПередачиВЭлектронномВиде" Тогда
		ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
		ОбновитьРазмерыОписи(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПредставляемыеДокументы.Очистить();
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		//Обход групп документов
		
		Для каждого СтрокаДокумент Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			//Обход самих документов
			НоваяСтрока = ТекущийОбъект.ПредставляемыеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
			
			НоваяСтрока.ЯвляетсяИнформацией = ГруппаДокументов.ЯвляетсяИнформацией;
			НоваяСтрока.ПорядковыйНомер 	= ГруппаДокументов.ПорядковыйНомер;
			
			НоваяСтрока.НомерДокументаОснования 		= СтрокаДокумент.НомерДокОсн;
			НоваяСтрока.ДатаДокументаОснования 			= СтрокаДокумент.ДатаДокОсн;
			
			Если СтрокаДокумент.Загружен Тогда
				
				НоваяСтрока.СсылкаНаОбъект 				= Неопределено;
				НоваяСтрока.Загружен_Номер 				= СтрокаДокумент.ЗД_Номер;
				НоваяСтрока.Загружен_Дата 				= СтрокаДокумент.ЗД_Дата;
				НоваяСтрока.Загружен_Контрагент 		= СтрокаДокумент.ЗД_Контрагент;
				НоваяСтрока.Загружен_Направление 		= СтрокаДокумент.ЗД_Направление;
				
			КонецЕсли;
			
			НоваяСтрока.КНД 							= СтрокаДокумент.КНД;
			НоваяСтрока.ПодтверждениеКНД 				= СтрокаДокумент.ПодтверждениеКНД;
			НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= СтрокаДокумент.ПодтверждениеИмяФайлаДанных;
			НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= СтрокаДокумент.ПодтверждениеИмяФайлаПодписи;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	БольшеНеПоказыватьИнформационнуюПанель();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПунктТребования(ДанныеСтроки, ОписаниеОповещения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПункта", ?(ДанныеСтроки.ЯвляетсяИнформацией, "2", "1"));
	ПараметрыФормы.Вставить("НомерПункта", ДанныеСтроки.ПорядковыйНомер);
	
	ОткрытьФормуВыбораПунктаТребования(ОписаниеОповещения, ПараметрыФормы);
				
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуВыбораПунктаТребования(ОписаниеОповещения, ПараметрыФормы = Неопределено)
	
	ОткрытьФорму(
		"Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаВыбораПунктаТребования", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		, 
		,
		, 
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуВыбораПунктаТребованияСПроверкой(ОписаниеОповещения, ПараметрыФормы = Неопределено)
	
	Если ЭтоПакетСДопДокументами Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, "1.01");
	Иначе
		ОткрытьФормуВыбораПунктаТребования(ОписаниеОповещения, ПараметрыФормы);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		
		ПриВыбореГруппы(Элемент, Поле, ДанныеСтроки);
		
	ИначеЕсли ТипЗнч(ДанныеСтроки.СсылкаНаОбъект) = Тип("Строка") Тогда
		//ошибка: удалилась ссылка на объект
		Возврат;
	Иначе
		
		ПриВыбореСтроки(Элемент, ДанныеСтроки, Поле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоРедактированиеАкта(ДанныеСтроки, Поле)
		
	ЭтоСкан = ТипЗнч(ДанныеСтроки.СсылкаНаОбъект) = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	ЭтоАкт  = ДанныеСтроки.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот");
	ЭтоРедактированиеОснования = Поле.Имя = "ПредставляемыеДокументыПредставлениеОснования";
	
	ЭтоРедактированиеАкта = 
		ЭтоРедактированиеОснования
		И ЭтоАкт
		И НЕ ТолькоПросмотр
		И НЕ ЭтоСкан;
	
	Возврат ЭтоРедактированиеАкта;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореСтроки(Элемент, ДанныеСтроки, Поле)
		
	ЭтоРедактированиеАкта = ЭтоРедактированиеАкта(ДанныеСтроки, Поле);
	
	Если ЭтоРедактированиеАкта Тогда
		ПриВыбореАкта(Элемент, ДанныеСтроки, Поле);
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъект) Тогда
		//откроем объект по ссылке
		ОткрытьДокумент(ДанныеСтроки.СсылкаНаОбъект)
	ИначеЕсли ДанныеСтроки.Загружен Тогда
		
		Если ЭтоФайлБанковскойГарантии(ДанныеСтроки.ИмяФайлаДанных) Тогда
			ОткрытьФормуБанковскихГарантий(ДанныеСтроки.ИмяФайлаДанных, ДанныеСтроки.ИмяФайлаПодписи);
		Иначе
			ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, НЕ Элемент.ТолькоПросмотр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореАкта(Элемент, ДанныеСтроки, Поле)
		
	ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", Элемент.ТекущаяСтрока); 

	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РедактированиеДоговораЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НомерДоговора", ДанныеСтроки.НомерДокОсн);
	ПараметрыФормы.Вставить("ДатаДоговора",  ДанныеСтроки.ДатаДокОсн);

	//Открываем форму выбора пункта требования, результат закрытия передаем в ПеремещениеВыделенныхСтрокЗавершение
	ОткрытьФорму(
		"Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаРеквизитовДоговора", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореГруппы(Элемент, Поле, ДанныеСтроки)
		
	Если Поле.Имя = "ПредставляемыеДокументыСоставноеПоле" И НЕ ТолькоПросмотр Тогда
		
		// выберем пункт требования и перенесем в него документы
		//Описание оповещения
		ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", Элемент.ТекущаяСтрока); 
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПунктТребованияГруппыДокументов", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ЭтоПакетСДопДокументами Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, "1.01");
		Иначе
			ВыбратьПунктТребования(ДанныеСтроки, ОписаниеОповещения);
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПередУдалением(Элемент, Отказ)
	
	ПередИнтерактивнымУдалениемВыделенныхСтрокНаСервере(Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПослеУдаления(Элемент)
	
	УдалитьПустыеГруппыДокументов();
	Записать();
	Модифицированность = Ложь;
	ОбновитьРазмерыОписи(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;	

КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьОснованиеПослеВыбора", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СкрытьЕГРЮЛ",    		Истина);
	ДополнительныеПараметры.Вставить("ЭтоРежимВыбора", 		Истина);
	ДополнительныеПараметры.Вставить("ОтборОрган",     		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ДополнительныеПараметры.Вставить("ТолькоОтправленные", 	Истина);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДополнительныеПараметры.Вставить("Организация", 	Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ДополнитьДопПараметрыИнформациейПоОснованию(ДополнительныеПараметры);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.РегламентированнаяОтчетность", 
		ДополнительныеПараметры,
		,
		Новый УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//отрабатываем более логичное поведение:
	//если перемещают группы на другую группу, то не сливаем содержимое групп в целевую, а лишь выполняем стандартную обработку
	ЦелеваяСтрока = ДеревоДокументов.НайтиПоИдентификатору(Строка);
	Если ЦелеваяСтрока.ЭтоГруппа Тогда
		Для каждого ИдентификаторПереносимойСтроки Из ПараметрыПеретаскивания.Значение Цикл
			Если НЕ ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторПереносимойСтроки).ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		Возврат
	КонецЕсли;
	
	Если ЦелеваяСтрока.ЭтоГруппа Тогда
		ЦелевойПунктТребования = ЦелеваяСтрока.ПорядковыйНомерВыгрузки;
	Иначе
		ЦелевойПунктТребования = ЦелеваяСтрока.ПолучитьРодителя().ПорядковыйНомерВыгрузки;
	КонецЕсли;
	
	ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ЦелевойПунктТребования, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	УдалитьПустыеГруппыДокументов();
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПриИзменении(Элемент)
	
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Элементы.ПредставляемыеДокументыИзменить.Доступность = (ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.ЭтоГруппа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОснованияОчистка(Элемент, СтандартнаяОбработка)
	
	ПредставлениеОснования = "";
	Объект.Основание = Неопределено;
	ОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОснованияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПоказатьЗначение(,Объект.Основание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДопПараметрыИнформациейПоОснованию(ДополнительныеПараметры)

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Объект.Основание);
	
	ДополнительныеПараметры.Вставить("Раздел",     СведенияПоОбъекту.СтраницаЖурнала);
	ДополнительныеПараметры.Вставить("Организация", СведенияПоОбъекту.Организация);
	ДополнительныеПараметры.Вставить("Ссылка",     СведенияПоОбъекту.Ссылка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала выберите документ-основание'"));
		Возврат;
	КонецЕсли;
	
	МассивСвойствФайлов = Новый Массив;
	ФайлыИсточников = Новый Соответствие;
	ФайлыИсточников.Вставить(Объект.Основание, МассивСвойствФайлов);
	
	КонтекстЭДОКлиент.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
	МассивСвойствФайлов = ФайлыИсточников[Объект.Основание];
	
	Если МассивСвойствФайлов.Количество() = 0 Тогда
		Текст = НСтр("ru = 'У документа %1 нет присоединенных файлов'");
		Текст = СтрШаблон(Текст, ПредставлениеОснования);
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	АдресМассиваСвойствФайлов = ПоместитьВоВременноеХранилище(МассивСвойствФайлов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЭтоПакетСДопДокументами",    ЭтоПакетСДопДокументами);
	ПараметрыФормы.Вставить("АдресМассиваСвойствФайлов",  АдресМассиваСвойствФайлов);
	ПараметрыФормы.Вставить("Организация",  			  Объект.Организация);
	ПараметрыФормы.Вставить("СведенияДокумента", 		  ПредставлениеОснования);
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаЭлементаНовая", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПервичку(Команда)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ВыбратьПервичкуЗавершение", 
		ЭтотОбъект);

	КонтекстЭДОКлиент.ВыбратьПервичныйДокументВОтветеНаТребование(ВыполняемоеОповещение, Объект.Организация,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыделенныеСтроки(Команда)
	
	ДанныеСтроки = Элементы.ПредставляемыеДокументы.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивИдентификаторовВыделенныхСтрок = Элементы.ПредставляемыеДокументы.ВыделенныеСтроки;
	
	// выберем пункт требования и перенесем в него документы
	//Описание оповещения
	ДополнительныеПараметры = Новый Структура("МассивИдентификаторовВыделенныхСтрок", МассивИдентификаторовВыделенныхСтрок); 
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПеренестиВыделенныеСтрокиЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ВыбратьПунктТребования(ДанныеСтроки, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаНесколько(Команда)
	
	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо сохранить введеную информацию.
						|Продолжить?'");
						
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Попытка
		РезультатЗаписи = Записать();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Во время сохранения произошли ошибки! Продолжение невозможно.'"));
		Возврат;
	КонецЕсли;

	Если ЭтоПакетСДопДокументами Тогда
		ТекстВопроса = ДокументооборотСКОКлиентСервер.ПредставлениеПакетаСДопДокументами() + " будет разбит на несколько. Продолжить?";
	Иначе
		ТекстВопроса = "Ответ на требование о представлении документов (информации) будет разбит на несколько. Продолжить?";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьНаНесколькоЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументы(Команда)
	
	//Параметры формы
	ПараметрыФормы = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Основание");
		Возврат;
	КонецЕсли;
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыЗавершение", ЭтотОбъект);
	
	//Открываем форму выбора документов, результат закрытия передаем в ДобавитьДокументыЗавершение
	ОткрытьФорму("РегистрСведений.ДокументыПоТребованиюФНС.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетыПоНДС(Команда)
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Основание");
		Возврат;
	КонецЕсли;
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыНДСЗавершение", ЭтотОбъект);

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ВыбратьДокументНДСДляПередачиФНС(ОписаниеОповещения, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Попытка
		РезультатЗаписи = Записать();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Во время сохранения произошли ошибки! Продолжение невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаПередОтправкой(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//обновление файлов перед отправкой
	
	РезультатОбновления = ОбновитьФайлыДокументовИБНаСервере();

	Если РезультатОбновления Тогда
		
		РазвернутьДеревоДокументов();
		
	Иначе
		
		ПоказатьПредупреждение(, "Не удалось обновить файлы документов базы данных!");
		Возврат;
		
	КонецЕсли;
	
	Всего = 0;
	ВАрхиве = 0;
	ПроверитьТаблицуДокументов(Всего, ВАрхиве);
	
	Если ВАрхиве > 0 Тогда 
		ВсеВАрхиве = ?(ВАрхиве = Всего, 1, 0);
		КонтекстЭДОКлиент.ПоказатьУведомлениеАрхивныхФайлов(, 22 + ВсеВАрхиве, 2, Истина);
		Возврат;
	КонецЕсли;
	
	ТребуетсяРазбитьНаНесколько = (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0);
	
	Если ТребуетсяРазбитьНаНесколько Тогда
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			ТекстВопроса = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			ТекстВопроса = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
		ТекстВопроса = ТекстВопроса + "
		|Перед отправкой документ требуется разбить на несколько.";
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(Истина, "Разбить");
		СписокКнопок.Добавить(Ложь, "Отмена");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьВопросРазбитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Возврат;
		
	Иначе
		
		Если ЭтоПакетСДопДокументами Тогда
			ТекстВопроса = ДокументооборотСКОКлиентСервер.ПредставлениеПакетаСДопДокументами() + " будет отправлен в ФНС. Продолжить?";
		Иначе
			ТекстВопроса = "Ответ на требование о представлении документов (информации) будет отправлен в ФНС. Продолжить?";
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьВопросОписьБудетОтправленаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ДанныеСтроки = Элементы.ПредставляемыеДокументы.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.ЭтоГруппа Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъект) Тогда
			
			Если ТипЗнч(ДанныеСтроки.СсылкаНаОбъект) = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде") Тогда
				ОткрытьСкан(ДанныеСтроки.СсылкаНаОбъект);
			Иначе
				ПоказатьЗначение(, ДанныеСтроки.СсылкаНаОбъект);
			КонецЕсли;
			
		ИначеЕсли ДанныеСтроки.Загружен Тогда
			ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, Ложь);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлектронныйДокумент(Команда)
	ВыбратьЭлектронныйДокументИзБазы();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСкан(Команда)
	ВыбратьИДобавитьВложения();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыИзДругойБазы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДокументыИзДругойБазыПослеВыбораВидаДокумента", 
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаЗагрузкиИзФайлаОбмена", , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыИзДругойБазыПослеВыбораВидаДокумента(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = "xml" Тогда
		ДобавитьДокументыИзФайлаОбмена();
	ИначеЕсли Результат = "сканы" Тогда
		ЗагрузитьСканыИзФайлаОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеГарантии(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Основание""'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуБанковскихГарантий();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуБанковскихГарантий(ИмяФайлаДанных = "", ИмяФайлаПодписи = "")
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Опись",  				Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ИмяФайлаДанных",  	ИмяФайлаДанных);
	ДополнительныеПараметры.Вставить("ИмяФайлаПодписи", 	ИмяФайлаПодписи);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение", 	НЕ ЭтоИзменяемоеСообщение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"БанковскиеГарантии_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.БанковскиеГарантии", 
		ДополнительныеПараметры, 
		ЭтотОбъект, 
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеГарантии_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Пропустить = 
		Результат = Неопределено
		ИЛИ ВходящийКонтекст.ИмяФайлаДанных = Результат.XMLФайл.Имя
		ИЛИ ВходящийКонтекст.ИмяФайлаПодписи = Результат.Подпись.Имя;
	
	Если Пропустить Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьБанковскиеГарантииНаСервере("1.01", Результат);
		
	Записать();
	ОбновитьРазмерыОписи(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьБанковскиеГарантииНаСервере(ПунктТребования, Результат)
	
	XMLФайл = Результат.XMLФайл;
	Подпись = Результат.Подпись;
	
	ДокументыДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	СтрокиДерева = ДокументыДеревоЗначений.Строки;
	
	ЗагружаемыеДокументы = Новый Массив;
	ЗагружаемыеДокументы.Добавить(XMLФайл);
	ЗагружаемыеДокументы.Добавить(Подпись);

	Если НЕ ЕстьНовыеДокументы(ЗагружаемыеДокументы, СтрокиДерева, "Имя") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПунктаТребования = РазложитьПунктТребования(ПунктТребования);
	ГруппаДокументов = ОпределитьГруппуДокументовПоНомеруПункта(СтрокиДерева, СвойстваПунктаТребования, ПунктТребования);
	
	НоваяСтрока = ГруппаДокументов.Строки.Добавить();
	НоваяСтрока.Загружен 			= Истина;
	НоваяСтрока.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
	НоваяСтрока.КНД 				= ДокументооборотСКОВызовСервера.КНДФайлаПоАдресу(XMLФайл.Адрес, "windows-1251");
	НоваяСтрока.ИмяФайлаДанных 		= XMLФайл.Имя;
	НоваяСтрока.СоставноеПоле  		= XMLФайл.Имя;
	НоваяСтрока.ИмяФайлаПодписи 	= Подпись.Имя;
	
	СохранитьИзменения(ДокументыДеревоЗначений);
	
	Успешно = СохранитьФайлыБанковскойГарантии(Объект.Ссылка, XMLФайл, Подпись);
	Если НЕ Успешно Тогда
		
		// Откатываем
		ГруппаДокументов.Строки.Удалить(НоваяСтрока);
		СохранитьИзменения(ДокументыДеревоЗначений);
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Произошла ошибка при загрузке документов из файла обмена:'"));
		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура БольшеНеПоказыватьИнформационнуюПанель()
	
	ХранилищеОбщихНастроек.Сохранить(
		"ДокументооборотСКонтролирующимиОрганами_ПакетСДопДокументами_УбратьИнформационнуюПанель",
		,
		Истина);
	
	УстановитьВидимостьИнформационнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформационнойПанели()

	ПанельУбранаПользователем = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ПакетСДопДокументами_УбратьИнформационнуюПанель") = Истина;
	
	Если ПанельУбранаПользователем ИЛИ НЕ ЭтоПакетСДопДокументами Тогда
		Элементы.ИнформационнаяПанель.Видимость = Ложь;
	Иначе
		Элементы.ИнформационнаяПанель.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПервичкуЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если НЕ ЭтоСсылка(РезультатВыбора) 
		И ТипЗнч(РезультатВыбора) <> Тип("Массив")
		И ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") И РезультатВыбора.Количество() > 1 Тогда
		
		// Выбрано несколько документов
		Если РезультатВыбора.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивВыбранныхДокументов = РезультатВыбора;
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
		
	Иначе
		
		Если ТипЗнч(РезультатВыбора) = Тип("Массив") И РезультатВыбора.Количество() = 1 Тогда
			РезультатВыбора = РезультатВыбора[0];
		КонецЕсли;
		
		Если ТипЗнч(РезультатВыбора) = Тип("Структура") И РезультатВыбора.Свойство("Ссылка") Тогда
			ДокументИсточник = РезультатВыбора.Ссылка;
		Иначе
			ДокументИсточник = РезультатВыбора;
		КонецЕсли;
		
		// Выбран один документ
		ЭлектронныеДокументы_ЭДО = ЭлектронныеДокументыЭДО(ДокументИсточник);
		
		Если ЭлектронныеДокументы_ЭДО.ЕстьЭлектронныйДокумент Тогда
			
			// Выбран один документ 1С-ЭДО
			
			МассивВыбранныхДокументов = Новый Массив;
			
			ТекущийДокумент = Новый Структура;
		
			ТекущийДокумент.Вставить("ВыбранныйДокумент", 	ДокументИсточник);
			ТекущийДокумент.Вставить("ВидДокументаФНС", 	ЭлектронныеДокументы_ЭДО.ВидДокументаФНС);
			
			МассивВыбранныхДокументов.Добавить(ТекущийДокумент);
			
			ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
			
		ИначеЕсли ЭтоСсылка(РезультатВыбора) Тогда
			
			// Выбран один документ, на основе которого надо создать сканировнаный
			
			Свойства = Новый Структура;
			Свойства.Вставить("Ссылка", 	РезультатВыбора);
			Свойства.Вставить("Описание", 	Строка(РезультатВыбора));
			
			РезультатВыбораФайлов = Новый Структура;
			РезультатВыбораФайлов.Вставить("СвойстваВыбранногоДокумента", Свойства);
			
			СоздатьСканированныйДокумент(РезультатВыбораФайлов);
			
		ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") И РезультатВыбора.Свойство("ВыбранныйДокумент") Тогда
			
			// Выбран один документ из списка сканированных
			МассивВыбранныхДокументов = Новый Массив;
			МассивВыбранныхДокументов.Добавить(РезультатВыбора);
			
			ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
			
		ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") И РезультатВыбора.Свойство("Ссылка") Тогда
			
			// Выбран один обычный документ при помощи переопределяемой 
			// ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ВыбратьДокументИсточникДляПередачиФНС 
			
			РезультатВыбораФайлов = Новый Структура;
			РезультатВыбораФайлов.Вставить("СвойстваВыбранногоДокумента", РезультатВыбора);
			
			СоздатьСканированныйДокумент(РезультатВыбораФайлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭлектронныеДокументыЭДО(ДокументИсточник) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭлектронныеДокументыЭДО(ДокументИсточник);
		
КонецФункции

&НаСервере
Функция ЭтоСсылка(Источник) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
		
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСканыИзФайлаОбмена()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСканыИзФайлаОбменаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаЗагрузкаДокументовИзФайлаОбмена", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСканыИзФайлаОбменаЗавершение(СтуктураРезультат, ДополнительныеПараметры) Экспорт
	
	Если СтуктураРезультат <> Неопределено Тогда
		
		МассивВыбранныхДокументов = ОтработатьРезультатДобавленияСкановНаСервере(СтуктураРезультат);
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтработатьРезультатДобавленияСкановНаСервере(СтруктураРезультата)
	
	ДобавленныеСканы = Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ЗагрузитьИзВнешнегоИсточникаПоСтруктуреРезультатаВыбора(СтруктураРезультата);
	
	МассивВыбранныхДокументов = Новый Массив;
	
	Для каждого ДобавленныйСкан Из ДобавленныеСканы Цикл
		
		ТекущийДокумент = Новый Структура;
		
		ТекущийДокумент.Вставить("ВыбранныйДокумент", 	ДобавленныйСкан);
		ТекущийДокумент.Вставить("ВидДокументаФНС", 	Перечисления.ВидыПредставляемыхДокументов.ИныеДокументы);
		
		МассивВыбранныхДокументов.Добавить(ТекущийДокумент);
		
	КонецЦикла;
	
	Возврат МассивВыбранныхДокументов;
		
КонецФункции

&НаСервере
Процедура СформироватьСоставМенюДобавитьИзБазы()
	
	СоответствиеВидовДокументовНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
	
	Если СоответствиеВидовДокументовНДС.Количество() = 0 Тогда
		//В прикладном решении нет ни одного объекта метаданных, соответствующего хотя бы одному из видов документов категории "Отчеты по НДС"
		Элементы.ПредставляемыеДокументыДобавитьДокументыНДС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляДереваДокументов(Форма)
	
	ЕстьАкты = Ложь;
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	ДеревоДокументов = Форма.ДеревоДокументов;
	Группы = ДеревоДокументов.ПолучитьЭлементы();
	
	Для каждого Группа Из Группы Цикл
		
		// это строка группы документов
		Группа.ЭтоГруппа = Истина;
		
		ТекстПорядковыйНомерВыгрузки = ?(Группа.ЯвляетсяИнформацией, "2.", "1.");
		ТекстПорядковыйНомерВыгрузки = ТекстПорядковыйНомерВыгрузки + Формат(Группа.ПорядковыйНомер, "ЧЦ=2; ЧН=; ЧВН=");
		
		Группа.ПорядковыйНомерВыгрузки = ТекстПорядковыйНомерВыгрузки;
		Группа.ИсточникДокумента = 0;
		
		ДокументыГруппы = Группа.ПолучитьЭлементы();
		
		ЗаполнитьСоставноеПоле(Группа);
		
		Для каждого Документ Из ДокументыГруппы Цикл
			
			// это строка документа
			Документ.ЭтоГруппа = Ложь;
			
			Если Документ.Загружен Тогда
				
				Документ.ИсточникДокумента = 3;
				
				Если НЕ ЗначениеЗаполнено(Документ.СоставноеПоле) Тогда
					ЗаполнитьСоставноеПоле(Документ);
				КонецЕсли;
				
			Иначе
				
				Документ.СоставноеПоле = Документ.СсылкаНаОбъект;
				
				Если ТипЗнч(Документ.СсылкаНаОбъект) = ТипСкан Тогда
					Документ.ИсточникДокумента = 2;
				Иначе
					Документ.ИсточникДокумента = 1;
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоАкт = Документ.ИсточникДокумента <> 2 
				И Документ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот");
			
			Если ЭтоАкт Тогда
				
				ЕстьАкты = Истина;
				Если НЕ ЗначениеЗаполнено(Документ.НомерДокОсн) ИЛИ НЕ ЗначениеЗаполнено(Документ.ДатаДокОсн) Тогда
					Документ.ПредставлениеОснования = "Заполнить договор";
				Иначе
					//реквизиты договора заполнены
					Документ.ПредставлениеОснования = 
						"Договор " 
						+ Строка(Документ.НомерДокОсн) 
						+ " от " 
						+ Формат(Документ.ДатаДокОсн, "ДЛФ=D");
						
				КонецЕсли;
	            
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.Элементы.ПредставляемыеДокументыПредставлениеОснования.Видимость = ЕстьАкты;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДокументов(СсылкаНаДокумент)
	
	ДеревоОбъект  = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ЯвляетсяИнформацией КАК ЯвляетсяИнформацией,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВидДокумента КАК ВидДокумента,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Номер,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Дата,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Контрагент,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.КНД,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Направление,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.НомерДокументаОснования,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ДатаДокументаОснования,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаПодписи,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВерсияФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеКНД,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаПодписи,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СведенияДокументаОснования
		|ИЗ
		|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
		|ГДЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЯвляетсяИнформацией,
		|	ПорядковыйНомер
		|ИТОГИ ПО
		|	ЯвляетсяИнформацией,
		|	ПорядковыйНомер,
		|	ВидДокумента";

	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаДокумент);

	Результат = Запрос.Выполнить();

	ВыборкаЯвляетсяИнформацией = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоОбъект  = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	
	Пока ВыборкаЯвляетсяИнформацией.Следующий() Цикл
		
		ВыборкаПорядковыйНомер = ВыборкаЯвляетсяИнформацией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПорядковыйНомер.Следующий() Цикл
			
			// добавляем строку групп документов
			СтрокаГрупп = ДеревоОбъект.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрупп,ВыборкаПорядковыйНомер);

			ВыборкаВидДокумента = ВыборкаПорядковыйНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВидДокумента.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаВидДокумента.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					// добавляем строку документов
					НоваяСтрока = СтрокаГрупп.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					НоваяСтрока.НомерДокОсн 					= ВыборкаДетальныеЗаписи.НомерДокументаОснования;
					НоваяСтрока.ДатаДокОсн 						= ВыборкаДетальныеЗаписи.ДатаДокументаОснования;
					
					Если ВыборкаДетальныеЗаписи.Загружен Тогда
						
						НоваяСтрока.ЗД_Номер 					= ВыборкаДетальныеЗаписи.Загружен_Номер;
						НоваяСтрока.ЗД_Дата 					= ВыборкаДетальныеЗаписи.Загружен_Дата;
						НоваяСтрока.ЗД_Контрагент				= ВыборкаДетальныеЗаписи.Загружен_Контрагент;
						НоваяСтрока.ЗД_Контрагент				= ВыборкаДетальныеЗаписи.Загружен_Контрагент;
						НоваяСтрока.СведенияДокументаОснования  = ВыборкаДетальныеЗаписи.СведенияДокументаОснования;
						
					КонецЕсли;
					
					НоваяСтрока.КНД 							= ВыборкаДетальныеЗаписи.КНД;
					НоваяСтрока.ПодтверждениеКНД 				= ВыборкаДетальныеЗаписи.ПодтверждениеКНД;
					НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= ВыборкаДетальныеЗаписи.ПодтверждениеИмяФайлаДанных;
					НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= ВыборкаДетальныеЗаписи.ПодтверждениеИмяФайлаПодписи;
					
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	// Преобразование объекта прикладного типа ДеревоЗначений
	// в реквизит управляемой формы (данные формы)
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоДокументов");

	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(СсылкаНаОбъект)
	
	//проверяем на принадлежность к сканированным
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");

	Если ТипЗнч(СсылкаНаОбъект) = ТипСкан Тогда
		ОткрытьСкан(СсылкаНаОбъект);
		Возврат;
	КонецЕсли;
	
	//проверяем на принадлежность к отчетам НДС
	СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
	
	ВидДокумента = СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС[ТипЗнч(СсылкаНаОбъект)];
	Если ВидДокумента <> Неопределено  Тогда
		ПоказатьЗначение(, СсылкаНаОбъект);
		Возврат;
	КонецЕсли;
	
	//считаем, что это ЭД
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьАктуальныйЭД(СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСкан(Скан)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ",       Скан);
	ПараметрыФормы.Вставить("ЭтоПакетСДопДокументами", ЭтоПакетСДопДокументами);
	ПараметрыФормы.Вставить("УстановитьПриказММВ_7_6_16", Истина);
	
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаЭлементаНовая", ПараметрыФормы);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДоговораЗавершение(СтуктураРезультат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(СтуктураРезультат) <> Тип("Структура")  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.НомерДокОсн = СтуктураРезультат.Номер;
	ТекущаяСтрока.ДатаДокОсн = СтуктураРезультат.Дата;
	
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПунктТребованияГруппыДокументов(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		СвойстваПунктаТребования = РазложитьПунктТребования(ВыбранныйПунктТребования);
		
		//поиск указанного пункта требования
		ЦелеваяГруппаДокументов = Неопределено;
		Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
			Если ГруппаДокументов.ПорядковыйНомерВыгрузки = ВыбранныйПунктТребования Тогда
				ЦелеваяГруппаДокументов = ГруппаДокументов;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЦелеваяГруппаДокументов = Неопределено Тогда
			//группы документов с выбранным пунктом требования нет, просто переименовываем текущую
			ГруппаДокументов = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			
			ГруппаДокументов.ЯвляетсяИнформацией 		= СвойстваПунктаТребования.ЯвляетсяИнформацией;
			ГруппаДокументов.ПорядковыйНомер 			= СвойстваПунктаТребования.ПорядковыйНомер;
			ГруппаДокументов.ПорядковыйНомерВыгрузки 	= ВыбранныйПунктТребования;
		Иначе
			//нашлась группа документов с выбранным пунктом требования, переносим в нее документы исходной группы
			МассивИдентификаторовВыделенныхСтрок = Новый Массив;
			
			ГруппаДокументов = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			Для каждого СтрокаДокумент Из ГруппаДокументов.ПолучитьЭлементы() Цикл
				МассивИдентификаторовВыделенныхСтрок.Добавить(СтрокаДокумент.ПолучитьИдентификатор());
			КонецЦикла;
			
			ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок);
			УдалитьПустыеГруппыДокументов();
		КонецЕсли;
		
		ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыделенныеСтрокиЗавершение(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		МассивИдентификаторовВыделенныхСтрок = ДополнительныеПараметры.МассивИдентификаторовВыделенныхСтрок;
		ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок);
		УдалитьПустыеГруппыДокументов();
		ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
		Записать();
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок) 
	
	СвойстваПунктаТребования = РазложитьПунктТребования(ВыбранныйПунктТребования);
	
	//поиск указанного пункта требования
	ЦелеваяГруппаДокументов = Неопределено;
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Если ГруппаДокументов.ПорядковыйНомерВыгрузки = ВыбранныйПунктТребования Тогда
			ЦелеваяГруппаДокументов = ГруппаДокументов;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если ЦелеваяГруппаДокументов = Неопределено Тогда
		ЦелеваяГруппаДокументов = ДеревоДокументов.ПолучитьЭлементы().Добавить();
		ЦелеваяГруппаДокументов.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
		ЦелеваяГруппаДокументов.ПорядковыйНомер = СвойстваПунктаТребования.ПорядковыйНомер;
	КонецЕсли;
	
	// определили целевую группу документов
	
	// преобразуем массив, разложив выделенные строки групп на составляющие
	НовыйМассивИдентификаторов = Новый Массив;
	Для каждого ИдентификаторВыделеннойСтроки Из МассивИдентификаторовВыделенныхСтрок Цикл
		ВыделеннаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			//это группа
			Для каждого СтрокаДокумента Из ВыделеннаяСтрока.ПолучитьЭлементы() Цикл
				ДополнитьМассивЗначением(НовыйМассивИдентификаторов, СтрокаДокумента.ПолучитьИдентификатор());
			КонецЦикла;
		Иначе
			//это документ
			ДополнитьМассивЗначением(НовыйМассивИдентификаторов, ИдентификаторВыделеннойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для каждого ИдентификаторСтрокиУдаляемогоДокумента Из НовыйМассивИдентификаторов Цикл
		УдаляемаяСтрокаДокумента = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторСтрокиУдаляемогоДокумента);
		
		МассивУдаляемыхСтрок.Добавить(УдаляемаяСтрокаДокумента);
		
		НоваяСтрокаДокумента = ЦелеваяГруппаДокументов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, УдаляемаяСтрокаДокумента);
		
		НоваяСтрокаДокумента.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
		НоваяСтрокаДокумента.ПорядковыйНомер = СвойстваПунктаТребования.ПорядковыйНомер;
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		УдаляемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(УдаляемаяСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, ДоступностьДоговора = Истина)
	
	СтруктураПараметров = ПараметрыОткрытияЗагруженногоXMLФайла();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДанныеСтроки);
	СтруктураПараметров.Вставить("ДоступностьДоговора", ДоступностьДоговора);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("Опись", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Заголовок", ДанныеСтроки.СоставноеПоле);
	
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаЗагруженныхXMLФайлов", 
		ДополнительныеПараметры, 
		ЭтотОбъект, 
		, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайлБанковскойГарантии(ИмяФайла)
	
	Возврат СтрНайти(Врег(ИмяФайла), "ON_SVBANKGAR");
	
КонецФункции
	
&НаСервере
Функция ПараметрыОткрытияЗагруженногоXMLФайла()
	
	СтруктураПараметров = Новый Структура;
	
	Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Для каждого Колонка Из Дерево.Колонки Цикл
		СтруктураПараметров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтруктураПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтрокуПредставленияДокументов(КоличествоДокументов)
	
	РезультатСтрокой = СтрЗаменить(ЧислоПрописью(КоличествоДокументов, "Л = ru_RU; НП=Истина, НД=Ложь", "документ, документа, документов, м, , , , ,0"),
								ЧислоПрописью(КоличествоДокументов, "Л = ru_RU; НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
								"");
	
	Возврат Формат(КоличествоДокументов, "ЧН=0; ЧГ=0") + " " + РезультатСтрокой;
	
КонецФункции

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаСервере
Процедура ОбновитьРазмерыОписи(СсылкаНаДокумент)
	
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		
		Элементы.ПредставляемыеДокументыФайлы.Видимость = Ложь;
		Элементы.ГруппаРазмерыОписи.Видимость = Ложь;
		Возврат;
		
	Иначе
		
		Элементы.ПредставляемыеДокументыФайлы.Видимость = Истина;
		Элементы.ГруппаРазмерыОписи.Видимость = Истина;	
	
	КонецЕсли;
	
	НадписьРазмерыОписи = Элементы.НадписьРазмерыОписи;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	//Получим таблицу файлов
	ТЗДокументыФайлыРазмер = КонтекстЭДОСервер.ПолучитьТаблицуДокументовОписиИРазмерыФайлов(СсылкаНаДокумент);
	
	СуммаКолвоФайлов 	= 0;
	СуммаРазмерФайлов 	= 0;
	МаксКолвоФайлов 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МаксимальнойКоличествоФайловОписи();
	МаксРазмерФайлов 	= 72*1024*1024;
	СоответствиеДокументФайлы = Новый Соответствие;
	
	СуммаКолвоФайловГруппы = 0;
	СуммаРазмерФайловГруппы = 0;
	
	//Сформируем соответствие файлов
	Для каждого СтрокаДокумент Из ТЗДокументыФайлыРазмер Цикл
		
		РазмерВБайтах = СтрокаДокумент.РазмерФайлов;
		КолвоФайлов = СтрокаДокумент.КоличествоФайлов;
		
		СуммаКолвоФайлов = СуммаКолвоФайлов + КолвоФайлов;
		СуммаРазмерФайлов = СуммаРазмерФайлов + РазмерВБайтах;

		СтруктураФайлы = Новый Структура;
		СтруктураФайлы.Вставить("Количество", КолвоФайлов);
		СтруктураФайлы.Вставить("Размер", РазмерВБайтах);
		
		СоответствиеДокументФайлы.Вставить(СтрокаДокумент.ИдентификаторДокумента, СтруктураФайлы);
		
	КонецЦикла;
	
	//Заполним таблицу документов данными из соответствия файлов
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЗначениеЗаполнено(ЭлементГруппы.ИмяФайлаДанных) Тогда
				ИдентификаторДокумента = ЭлементГруппы.ИмяФайлаДанных;
			Иначе
				ИдентификаторДокумента = ЭлементГруппы.СсылкаНаОбъект;
			КонецЕсли; 
			
			СтруктураФайлы = СоответствиеДокументФайлы[ИдентификаторДокумента];
			Если СтруктураФайлы <> Неопределено Тогда
				РазмерВБайтах = СтруктураФайлы.Размер;
				РазмерВМегабайтах = ОкруглитьРазмер(РазмерВБайтах);
				
				ЭлементГруппы.Файлы = Формат(РазмерВМегабайтах, "ЧГ=0") + " Мб";
				ЭлементГруппы.КоличествоФайлов = СтруктураФайлы.Количество; // служебное невидимое поле
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов - СуммаКолвоФайлов;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(МаксРазмерФайлов - СуммаРазмерФайлов);
	ТребуетсяРазбитьНаНесколько = (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0);
	
	СодержимоеТекста = "";
	
	Если ТребуетсяРазбитьНаНесколько Тогда
		
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
		
	Иначе
		//отправке ничего не угрожает
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить еще " + ДопустимоеКоличествоМегабайт + " Мб.";
		
	КонецЕсли;
	
	НадписьРазмерыОписи.ЦветТекста = ЦветТекста;
	НадписьРазмерыОписи.Заголовок = СодержимоеТекста;
	
	Элементы.НадписьРазбитьНаНесколько.Видимость = ТребуетсяРазбитьНаНесколько;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("МассивРезультат", МассивВыбранныхДокументов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДокументыПоПунктуТребования", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ОткрытьФормуВыбораПунктаТребованияСПроверкой(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	Для Каждого СтрокаГруппы Из ДеревоДокументов.ПолучитьЭлементы() Цикл
        Элементы.ПредставляемыеДокументы.Развернуть(СтрокаГруппы.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Функция ПолучитьТекущийДокумент()
	
	ТекущаяСтрока = Элементы.ПредставляемыеДокументы.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = ДеревоДокументов.НайтиПоИдентификатору(ТекущаяСтрока).СоставноеПоле;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;

	Возврат ТекущийДокумент;

КонецФункции 

&НаСервере
Процедура УстановитьТекущийДокумент(ПредставлениеДокумента)
	
	ИдентификаторСтроки = Неопределено;
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.СоставноеПоле = ПредставлениеДокумента Тогда
				
				ИдентификаторСтроки = ЭлементГруппы.ПолучитьИдентификатор();
				Прервать;
				
			КонецЕсли; 
			
			
		КонецЦикла;
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ПредставляемыеДокументы.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция ОбновитьФайлыДокументовИБНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер.ОбновитьФайлыДокументовИБОписиИсходящихДокументов(Объект.Ссылка) Тогда
		
		Прочитать();
		
		ПредставлениеТекущегоДокумента = ПолучитьТекущийДокумент();
		
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		
		УстановитьТекущийДокумент(ПредставлениеТекущегоДокумента);
		
		ОбновитьРазмерыОписи(Объект.Ссылка);
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазбитьНаНесколькоЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаПередРазбивкой(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	МассивСозданныхОписей = РазбитьНаНесколькоНаСервере(ТекстПредупреждения);
	Если МассивСозданныхОписей = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	    Возврат;
	Иначе
		
		Оповестить("Запись_ОписиИсходящихДокументовВНалоговыеОрганы",,Объект.Ссылка);
		
		Прочитать();

		//обновим дерево документов текущей описи   
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		//откроем форму групповой отправки
		СписокОписей = Новый СписокЗначений;
		СписокОписей.ЗагрузитьЗначения(МассивСозданныхОписей);
		СписокОписей.Добавить(Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокОписей", 			СписокОписей);
		ПараметрыФормы.Вставить("Основание",    			Объект.Основание);
		ПараметрыФормы.Вставить("ЭтоПакетСДопДокументами",  ЭтоПакетСДопДокументами);
		
		ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаГрупповойОтправки", ПараметрыФормы);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция РазбитьНаНесколькоНаСервере(ТекстПредупреждения)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.РазбитьОписьИсходящихДокументовНаНесколько(Объект.Ссылка, ТекстПредупреждения);
		
КонецФункции

&НаКлиенте
Процедура ДобавитьДокументыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено И РезультатВыбора.Количество() > 0 Тогда
		
		МассивВыбранныхДокументов = РезультатВыбора;
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
						
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыПоПунктуТребования(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		ОтработатьРезультатДобавленияДокументовНаСервере(ВыбранныйПунктТребования, ДополнительныеПараметры.МассивРезультат);
		
		Записать();
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		РазвернутьДеревоДокументов();
		
		УстановитьМодифицированность(ЭтотОбъект);
		
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМодифицированность(Форма)
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС()
	
	РезультатСоответствие = Новый Соответствие; 
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Виды = КонтекстЭДОСервер.ВидыПредставляемыхДокументов();
	
	МассивВидовДокументовНДС = Новый Массив;
	Для каждого Вид Из Виды Цикл
		Если Вид.ЭтоНДС Тогда
			МассивВидовДокументовНДС.Добавить(Вид.Значение);
		КонецЕсли;
	КонецЦикла; 

	СоответствиеТиповИсточниковВидамДокументовФНС = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(СоответствиеТиповИсточниковВидамДокументовФНС);
	
	Для каждого ВидДокументаНДС Из МассивВидовДокументовНДС Цикл
		МассивТипоИсточников = СоответствиеТиповИсточниковВидамДокументовФНС[ВидДокументаНДС];
		
		Если МассивТипоИсточников <> Неопределено Тогда
			Для каждого ТипИсточника Из МассивТипоИсточников Цикл
				РезультатСоответствие.Вставить(ТипИсточника, ВидДокументаНДС);
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;

	Возврат РезультатСоответствие;
	
КонецФункции 

&НаКлиенте
Процедура ДобавитьДокументыНДСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
		
		ВидДокумента = СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС[ТипЗнч(Результат)];
		
		Если ВидДокумента = Неопределено  Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выбор отменен. Не удалось определить вид выбранного документа.'"));
			Возврат;
		КонецЕсли;
		
		МассивВыбранныхДокументов = Новый Массив;
		ТекущийДокумент = Новый Структура("ВыбранныйДокумент, ВидДокументаФНС");
		ТекущийДокумент.ВыбранныйДокумент 	= Результат;
		ТекущийДокумент.ВидДокументаФНС 	= ВидДокумента;
		
		МассивВыбранныхДокументов.Добавить(ТекущийДокумент);
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыИзФайлаОбменаЗавершение(СтруктураВыбора, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВыбора <> Неопределено Тогда
		
		// выберем пункт требования и добавим документы
		//Описание оповещения
		ДополнительныеПараметры = Новый Структура("СтруктураВыбора", СтруктураВыбора); 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьДокументыИзФайлаОбменаПоПунктуТребования", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ОткрытьФормуВыбораПунктаТребованияСПроверкой(ОписаниеОповещения);
					
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыИзФайлаОбменаПоПунктуТребования(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		ДобавитьДокументыФайлаОбменаНаСервере(ВыбранныйПунктТребования, ДополнительныеПараметры.СтруктураВыбора);
		
		Записать();
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНовыеДокументы(ЗагружаемыеДокументы, СтрокиДерева, ИмяПоля = "ФайлВыгрузкиИмя")

	ЕстьНовыеДокументы = Ложь;
	
	Для каждого ЗагружаемыйДокумент Из ЗагружаемыеДокументы Цикл
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(ЗагружаемыйДокумент[ИмяПоля], "ИмяФайлаДанных", Истина);
		Если НайденнаяСтрока = Неопределено Тогда
			// это новый документ
			ЕстьНовыеДокументы = Истина;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ЕстьНовыеДокументы;

КонецФункции

&НаСервере
Процедура ДобавитьНовыйФайл(НовыеФайлы, ЗагружаемыйДокумент)
	
	// добавляем в массив НовыеФайлы имена файлов выгрузки и подписи 
	НовыеФайлы.Добавить(ЗагружаемыйДокумент.ФайлВыгрузкиИмя);
	НовыеФайлы.Добавить(ЗагружаемыйДокумент.ФайлПодписиИмя);
	
	Если ЗначениеЗаполнено(ЗагружаемыйДокумент.ПодтверждениеФайлВыгрузкиИмя) Тогда
		НовыеФайлы.Добавить(ЗагружаемыйДокумент.ПодтверждениеФайлВыгрузкиИмя);
		НовыеФайлы.Добавить(ЗагружаемыйДокумент.ПодтверждениеФайлПодписиИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСоставноеПоле(НоваяСтрока)
	
	Если НоваяСтрока.ЭтоГруппа Тогда
				
		ТекстПорядковыйНомерВыгрузки = ?(НоваяСтрока.ЯвляетсяИнформацией, "2.", "1.");
		ТекстПорядковыйНомерВыгрузки = ТекстПорядковыйНомерВыгрузки + Формат(НоваяСтрока.ПорядковыйНомер, "ЧЦ=2; ЧН=; ЧВН=");
		
		ДокументыГруппы = НоваяСтрока.ПолучитьЭлементы();
		
		КоличествоДокументов = ДокументыГруппы.Количество();
		НоваяСтрока.СоставноеПоле = 
			"Пункт требования " 
			+ ТекстПорядковыйНомерВыгрузки 
			+ " (" + СформироватьСтрокуПредставленияДокументов(КоличествоДокументов) + ")";
		
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ЗД_Номер) И ЗначениеЗаполнено(НоваяСтрока.ЗД_Дата) Тогда
	
		ДобавкаНаправление = ?(НоваяСтрока.ЗД_Направление = "Входящий", " (Полученный)", "");
		
		НоваяСтрока.СоставноеПоле = 
			Строка(НоваяСтрока.ВидДокумента) 
			+ " " 
			+ НоваяСтрока.ЗД_Номер 
			+ " от " 
			+ Формат(НоваяСтрока.ЗД_Дата, "ДЛФ=D") 
			+ ДобавкаНаправление;
			
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.ИмяФайлаДанных) Тогда
			
		НоваяСтрока.СоставноеПоле = НоваяСтрока.ИмяФайлаДанных;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьДокументыФайлаОбменаНаСервере(ПунктТребования, СтруктураВыбора)
	
	ЗагружаемыеДокументы = ПолучитьИзВременногоХранилища(СтруктураВыбора.АдресТЗЗагруженныеДокументы);
	
	ДокументыДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	СтрокиДерева = ДокументыДеревоЗначений.Строки;

	Если НЕ ЕстьНовыеДокументы(ЗагружаемыеДокументы, СтрокиДерева) Тогда
		//все документы уже загружены
		Возврат Истина;	
	КонецЕсли;
	
	СвойстваПунктаТребования = РазложитьПунктТребования(ПунктТребования);
	ГруппаДокументов = ОпределитьГруппуДокументовПоНомеруПункта(СтрокиДерева, СвойстваПунктаТребования, ПунктТребования);
	
	// заполняем дерево документов и массив имен новых файлов
	НовыеФайлы = Новый Массив;
	
	Для каждого ЗагружаемыйДокумент Из ЗагружаемыеДокументы Цикл
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(ЗагружаемыйДокумент.ФайлВыгрузкиИмя, "ИмяФайлаДанных", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			// такой документ уже есть
			Продолжить;
		КонецЕсли;	
		
		// добавляем в массив НовыеФайлы имена файлов выгрузки и подписи 
		ДобавитьНовыйФайл(НовыеФайлы, ЗагружаемыйДокумент);
		
		НоваяСтрока = ГруппаДокументов.Строки.Добавить();
		НоваяСтрока.Загружен 			= Истина;
		НоваяСтрока.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
		НоваяСтрока.ПорядковыйНомер 	= СвойстваПунктаТребования.ПорядковыйНомер;
		НоваяСтрока.ВидДокумента 		= ЗагружаемыйДокумент.ВидДокумента;	
		НоваяСтрока.ЗД_Номер 			= ЗагружаемыйДокумент.Номер;
		НоваяСтрока.ЗД_Дата 			= ЗагружаемыйДокумент.Дата;
		НоваяСтрока.ЗД_Контрагент 		= ЗагружаемыйДокумент.Контрагент;
		НоваяСтрока.ДатаДокОсн 			= ЗагружаемыйДокумент.ДатаДокОсн;
		НоваяСтрока.НомерДокОсн 		= ЗагружаемыйДокумент.НомерДокОсн;
		НоваяСтрока.КНД 				= ЗагружаемыйДокумент.КНД;
		НоваяСтрока.ЗД_Направление 		= ЗагружаемыйДокумент.Направление;
		НоваяСтрока.ИмяФайлаДанных 		= ЗагружаемыйДокумент.ФайлВыгрузкиИмя;
		НоваяСтрока.ИмяФайлаПодписи 	= ЗагружаемыйДокумент.ФайлПодписиИмя;
		НоваяСтрока.ПодтверждениеКНД 				= ЗагружаемыйДокумент.ПодтверждениеКНД;
		НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= ЗагружаемыйДокумент.ПодтверждениеФайлВыгрузкиИмя;
		НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= ЗагружаемыйДокумент.ПодтверждениеФайлПодписиИмя;
		
		ЗаполнитьСоставноеПоле(НоваяСтрока);
		
	КонецЦикла;
	
	СохранитьИзменения(ДокументыДеревоЗначений);

	ПолноеИмяФайлаОбмена = СтруктураВыбора.ПолноеИмяФайлаОбмена;
	Если НЕ ЗагрузитьФайлыИзФайлаОбменаВИБ(Объект.Ссылка, ПолноеИмяФайлаОбмена, НовыеФайлы) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Произошла ошибка при загрузке документов из файла обмена.'"));
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура СохранитьИзменения(ДокументыДеревоЗначений)

	// Преобразование объекта прикладного типа ДеревоЗначений
	// в реквизит управляемой формы (данные формы)
	ЗначениеВРеквизитФормы(ДокументыДеревоЗначений, "ДеревоДокументов");

	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);

	// Загружаем новые файлы из пакета обмена
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьСтрокойИННКППОрганизации(СсылкаОрганизация)
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СсылкаОрганизация) Тогда
				Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СсылкаОрганизация, , "ИННФЛ");
				ИННКППОрганизации = СокрЛП(Сведения.ИННФЛ);
			Иначе
				Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СсылкаОрганизация, , "ИННЮЛ, КППЮЛ");
				ИННКППОрганизации = СокрЛП(Сведения.ИННЮЛ) + СокрЛП(Сведения.КППЮЛ);
			КонецЕсли;
			
		
	Возврат ИННКППОрганизации;        
	
КонецФункции

&НаСервере
Функция РазложитьПунктТребования(ПунктТребованияСтрокой)
	
	// Пример "1.01"
	
	ЯвляетсяИнформацией = НЕ (Лев(ПунктТребованияСтрокой, 1) = "1");
	ПорядковыйНомер = Число(Прав(ПунктТребованияСтрокой, 2));
	СтруктураРезультат = Новый Структура("ЯвляетсяИнформацией, ПорядковыйНомер", ЯвляетсяИнформацией, ПорядковыйНомер);
	
	Возврат СтруктураРезультат;	
		
КонецФункции

&НаСервере
Процедура ДобавитьФайл(ВсеФайлы, Имя, Адрес)
	
	НовыйФайл = ВсеФайлы.Добавить();
	НовыйФайл.ИмяФайла 	 = Имя;
	НовыйФайл.АдресФайла = Адрес;
	
КонецПроцедуры

&НаСервере
Функция ВидыДобавляемыхДокументов(СтрокиДерева, МассивРезультат)
	
	УникальныеДокументы = Новый Массив;
	ДокументыНДС = Новый Массив;
	ДокументыЭДО = Новый Массив;
	АктыПриемки	= Новый Массив;
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВидыДокументовНДС = КонтекстЭДОСервер.ДокументЭДОпоНДС();
	ВидыДокументовЭД  = КонтекстЭДОСервер.ДокументЭДОСЭД();
	
	Для каждого ТекущийДокумент Из МассивРезультат Цикл
		
		СсылкаНаОбъект 	= ТекущийДокумент.ВыбранныйДокумент;
		ВидДокумента 	= ТекущийДокумент.ВидДокументаФНС;
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(СсылкаНаОбъект, "СсылкаНаОбъект", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			// такая ссылка уже есть
			Продолжить;
		КонецЕсли;	
		
		УникальныеДокументы.Добавить(ТекущийДокумент);
		
		Если ТипЗнч(СсылкаНаОбъект) <> ТипСкан Тогда
			
			Если ВидыДокументовНДС.Найти(ВидДокумента) <> Неопределено Тогда
				
				ДокументыНДС.Добавить(СсылкаНаОбъект);
				
			ИначеЕсли ВидыДокументовЭД.Найти(ВидДокумента) <> Неопределено Тогда
				
				ДокументыЭДО.Добавить(СсылкаНаОбъект);
				
				Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
					АктыПриемки.Добавить(СсылкаНаОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УникальныеДокументы", УникальныеДокументы);
	ДополнительныеПараметры.Вставить("ДокументыНДС", ДокументыНДС);
	ДополнительныеПараметры.Вставить("ДокументыЭДО", ДокументыЭДО);
	ДополнительныеПараметры.Вставить("АктыПриемки",  АктыПриемки);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Процедура ДобавитьДокументНДС(ВсеФайлы, ФайлыДокументаНДС, НоваяСтрока, СсылкаНаОбъект)
	
	Для каждого ФайлДокументаНДС Из ФайлыДокументаНДС Цикл
		
		Если ФайлДокументаНДС.ТипФайла = "ФайлВыгрузки" Тогда
			НоваяСтрока.ИмяФайлаДанных = ФайлДокументаНДС.ИмяФайла;
			НоваяСтрока.ВерсияФайлаДанных = СсылкаНаОбъект.ВерсияДанных;
		КонецЕсли;
		
		ДобавитьФайл(
			ВсеФайлы, 
			ФайлДокументаНДС.ИмяФайла, 
			ФайлДокументаНДС.АдресВременногоХранилища);
			
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФайлаПодписи(ИмяФайла)
	
	Возврат ДокументооборотСКОКлиентСервер.ИмяФайлаЭПФайлаОписиИсходящихДокументов(ИмяФайла);
	
КонецФункции

&НаСервере
Процедура ДобавитьДокументЭДО(ВсеФайлы, ФайлыДокументаЭДО, НоваяСтрока, СсылкаНаОбъект, РеквизитыДоговоров)
	
	// сначала извлекаем имена файлов выгрузки (относительно них генерируем имена файлов подписи)
			
	ИмяФайлаВыгрузкиЭДО 	= "";
	ИмяФайлаПодтверждения 	= "";
	
	Для каждого ФайлДокументаЭДО Из ФайлыДокументаЭДО Цикл
		Если ФайлДокументаЭДО.ТипФайла = "ФайлВыгрузки" Тогда
			ИмяФайлаВыгрузкиЭДО = ФайлДокументаЭДО.ИмяФайла;	
		ИначеЕсли ФайлДокументаЭДО.ТипФайла = "ФайлПодтверждения" Тогда
			ИмяФайлаПодтвержденияЭДО = ФайлДокументаЭДО.ИмяФайла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ФайлДокументаЭДО Из ФайлыДокументаЭДО Цикл
		
		Если ФайлДокументаЭДО.ТипФайла = "ФайлВыгрузки" Тогда
			НоваяСтрока.ИмяФайлаДанных = ИмяФайлаВыгрузкиЭДО;
			НоваяСтрока.ВерсияФайлаДанных = СсылкаНаОбъект.ВерсияДанных;
			НоваяСтрока.КНД = ФайлДокументаЭДО.КНД;
			
			ДобавитьФайл(
				ВсеФайлы, 
				НоваяСтрока.ИмяФайлаДанных, 
				ФайлДокументаЭДО.АдресВременногоХранилища);
			
		ИначеЕсли ФайлДокументаЭДО.ТипФайла = "ЭЦП" Тогда
			НоваяСтрока.ИмяФайлаПодписи = ИмяФайлаПодписи(ИмяФайлаВыгрузкиЭДО);
			
			ДобавитьФайл(
				ВсеФайлы, 
				НоваяСтрока.ИмяФайлаПодписи, 
				ФайлДокументаЭДО.АдресВременногоХранилища);
			
		ИначеЕсли ФайлДокументаЭДО.ТипФайла = "ФайлПодтверждения" Тогда
			НоваяСтрока.ПодтверждениеИмяФайлаДанных = ИмяФайлаПодтвержденияЭДО;
			НоваяСтрока.ПодтверждениеКНД = ФайлДокументаЭДО.КНД;
			
			ДобавитьФайл(
				ВсеФайлы, 
				НоваяСтрока.ПодтверждениеИмяФайлаДанных, 
				ФайлДокументаЭДО.АдресВременногоХранилища);
			
		ИначеЕсли ФайлДокументаЭДО.ТипФайла = "ЭЦППодтверждения" Тогда
			НоваяСтрока.ПодтверждениеИмяФайлаПодписи = ИмяФайлаПодписи(ИмяФайлаПодтвержденияЭДО);
			
			ДобавитьФайл(
				ВсеФайлы, 
				НоваяСтрока.ПодтверждениеИмяФайлаПодписи, 
				ФайлДокументаЭДО.АдресВременногоХранилища);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НоваяСтрока.ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
		//Заполним реквизиты договора
		Если РеквизитыДоговоров <> Неопределено Тогда
			РеквизитыДоговора = РеквизитыДоговоров[СсылкаНаОбъект];
		Иначе
			РеквизитыДоговора = Неопределено;
		КонецЕсли;
		
		Если РеквизитыДоговора <> Неопределено Тогда
			НоваяСтрока.НомерДокОсн = РеквизитыДоговора.НомерДоговора;
			НоваяСтрока.ДатаДокОсн  = РеквизитыДоговора.ДатаДоговора;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОпределитьГруппуДокументовПоНомеруПункта(СтрокиДерева, СвойстваПунктаТребования, ПунктТребования)
	
	//поиск указанного пункта требования
	ГруппаДокументов = СтрокиДерева.Найти(ПунктТребования, "ПорядковыйНомерВыгрузки", Ложь);
	Если ГруппаДокументов = Неопределено Тогда
		
		// такой группы еще нет, добавим новую строку
		ГруппаДокументов = СтрокиДерева.Добавить();
		ГруппаДокументов.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
		ГруппаДокументов.ПорядковыйНомер     = СвойстваПунктаТребования.ПорядковыйНомер;

	КонецЕсли;
	
	Возврат ГруппаДокументов;

КонецФункции

&НаСервере
Процедура ОтработатьРезультатДобавленияДокументовНаСервере(ПунктТребования, МассивРезультат)
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	ДокументыДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	СтрокиДерева = ДокументыДеревоЗначений.Строки;

	Виды = ВидыДобавляемыхДокументов(СтрокиДерева, МассивРезультат);
	
	Если Виды.УникальныеДокументы.Количество() = 0 Тогда
		//нет добавляемых документов
		Возврат;
	КонецЕсли;
	
	СвойстваПунктаТребования = РазложитьПунктТребования(ПунктТребования);
	
	//поиск указанного пункта требования
	ГруппаДокументов = ОпределитьГруппуДокументовПоНомеруПункта(СтрокиДерева, СвойстваПунктаТребования, ПунктТребования);
	
	ВсеФайлы = Новый ТаблицаЗначений;
	ВсеФайлы.Колонки.Добавить("ИмяФайла");
	ВсеФайлы.Колонки.Добавить("АдресФайла");
	
	// обработаем сформированные массивы
	// сформируем соответствия с файлами выгрузки
	ПереопределяемыйМодуль = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый;
	
	ФайлыДокументовНДС = ПереопределяемыйМодуль.ПолучитьФайлыВыгрузкиНДС(Виды.ДокументыНДС, УникальныйИдентификатор);
	ФайлыДокументовЭДО = ПереопределяемыйМодуль.ПолучитьФайлыВыгрузкиЭД(Виды.ДокументыЭДО, УникальныйИдентификатор);
	РеквизитыДоговоров = ПереопределяемыйМодуль.ПолучитьНомерДатаДоговораДокументов(Виды.АктыПриемки);
	
	Для каждого ТекущийДокумент Из Виды.УникальныеДокументы Цикл
		
		СсылкаНаОбъект 	= ТекущийДокумент.ВыбранныйДокумент;
		ВидДокумента 	= ТекущийДокумент.ВидДокументаФНС;
		
		НоваяСтрока = ГруппаДокументов.Строки.Добавить();
		НоваяСтрока.ЯвляетсяИнформацией = СвойстваПунктаТребования.ЯвляетсяИнформацией;
		НоваяСтрока.ПорядковыйНомер     = СвойстваПунктаТребования.ПорядковыйНомер;
		НоваяСтрока.СсылкаНаОбъект      = СсылкаНаОбъект;
		НоваяСтрока.ВидДокумента        = ВидДокумента;
		
		ЭтоСкан = ТипЗнч(СсылкаНаОбъект) = ТипСкан;
		
		Если ЭтоСкан Тогда
			Продолжить;
		КонецЕсли;
			
		Если ФайлыДокументовНДС <> Неопределено Тогда
			ФайлыДокументаНДС = ФайлыДокументовНДС.Получить(СсылкаНаОбъект);
		КонецЕсли;
		
		Если ФайлыДокументовЭДО <> Неопределено Тогда
			ФайлыДокументаЭДО = ФайлыДокументовЭДО.Получить(СсылкаНаОбъект);
		КонецЕсли;
		
		ЭтоДокументНДС = ФайлыДокументаНДС <> Неопределено;
		ЭтоДокументЭДО = ФайлыДокументаЭДО <> Неопределено;
		
		Если ЭтоДокументНДС Тогда
			ДобавитьДокументНДС(ВсеФайлы, ФайлыДокументаНДС, НоваяСтрока, СсылкаНаОбъект);
		ИначеЕсли ЭтоДокументЭДО Тогда
			ДобавитьДокументЭДО(ВсеФайлы, ФайлыДокументаЭДО, НоваяСтрока, СсылкаНаОбъект, РеквизитыДоговоров);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьИзменения(ДокументыДеревоЗначений);

	// Загружаем новые файлы из документов ИБ	
	Если ВсеФайлы.Количество() > 0 Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, ВсеФайлы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлыЗагруженныхДокументовПоМассивуИмен(ОбъектСсылка, МассивИменУдаляемыхФайлов)
	
	НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Документ.Установить(ОбъектСсылка); 
	
	Для каждого ИмяУдаляемогоФайла Из МассивИменУдаляемыхФайлов Цикл
		НаборЗаписей.Отбор.ИмяФайла.Установить(ИмяУдаляемогоФайла); 
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьМассивЗначением(ДополняемыйМассив, Знач ДополняемоеЗначение)
	
	Если ДополняемыйМассив.Найти(ДополняемоеЗначение) = Неопределено  Тогда
		//такого элемента еще нет
		ДополняемыйМассив.Добавить(ДополняемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередИнтерактивнымУдалениемВыделенныхСтрокНаСервере(Знач МассивИдентификаторовВыделенныхСтрок)
	
	// все выделенные строки будут удалены
	// удалим файлы удаляемых документов из ИБ
	
	// преобразуем массив, разложив выделенные строки групп на составляющие
	НовыйМассивИдентификаторов = Новый Массив;
	Для каждого ИдентификаторВыделеннойСтроки Из МассивИдентификаторовВыделенныхСтрок Цикл
		ВыделеннаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			//это группа
			Для каждого СтрокаДокумента Из ВыделеннаяСтрока.ПолучитьЭлементы() Цикл
				ДополнитьМассивЗначением(НовыйМассивИдентификаторов, СтрокаДокумента.ПолучитьИдентификатор());
			КонецЦикла;
		Иначе
			//это документ
			ДополнитьМассивЗначением(НовыйМассивИдентификаторов, ИдентификаторВыделеннойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// соберем массив МассивИменУдаляемыхФайлов
	МассивИменУдаляемыхФайлов = Новый Массив;
	
	Для каждого ИдентификаторСтрокиУдаляемогоДокумента Из НовыйМассивИдентификаторов Цикл
		СтрокаДокумента = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторСтрокиУдаляемогоДокумента);
		
		ИмяФайлаДанных 	= СтрокаДокумента.ИмяФайлаДанных;
		ИмяФайлаПодписи	= СтрокаДокумента.ИмяФайлаПодписи;
		ПодтверждениеИмяФайлаДанных 	= СтрокаДокумента.ПодтверждениеИмяФайлаДанных;
		ПодтверждениеИмяФайлаПодписи	= СтрокаДокумента.ПодтверждениеИмяФайлаПодписи;
		
		Если ЗначениеЗаполнено(ИмяФайлаДанных) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ИмяФайлаДанных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодтверждениеИмяФайлаДанных) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ПодтверждениеИмяФайлаДанных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодтверждениеИмяФайлаПодписи) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ПодтверждениеИмяФайлаПодписи);
		КонецЕсли;

		
	КонецЦикла;
	
	// Удаляем файлы из регистра сведений согласно массиву МассивИменУдаляемыхФайлов 
	Если МассивИменУдаляемыхФайлов.Количество() > 0  Тогда
		УдалитьФайлыЗагруженныхДокументовПоМассивуИмен(Объект.Ссылка, МассивИменУдаляемыхФайлов);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеГруппыДокументов()
	
	МассивУдаляемыхГрупп = Новый Массив;
	
	Группы = ДеревоДокументов.ПолучитьЭлементы();
	Для каждого Группа Из Группы Цикл
		
		ДокументыГруппы = Группа.ПолучитьЭлементы();
		Если ДокументыГруппы.Количество() = 0 Тогда
		
			МассивУдаляемыхГрупп.Добавить(Группа);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяГруппа Из МассивУдаляемыхГрупп Цикл
		
		ИндексУдаляемойГруппы = Группы.Индекс(УдаляемаяГруппа);
		Группы.Удалить(ИндексУдаляемойГруппы);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьФайлыИзФайлаОбменаВИБ(ОбъектСсылка, ПолноеИмяФайлаОбмена, МассивИменЗагружаемыхФайлов)
	
	ОставитьУникальныеЗагружаемыеФайлы(МассивИменЗагружаемыхФайлов, ОбъектСсылка);
	
	Если МассивИменЗагружаемыхФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Извлекаем все файлы из ZIP файла обмена
	
	Попытка
		ФайлОбмена = Новый Файл(ПолноеИмяФайлаОбмена);
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		КаталогОбмена = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
		
		ЧтениеЗИП = Новый ЧтениеZipФайла(ПолноеИмяФайлаОбмена);	
		ЧтениеЗИП.ИзвлечьВсе(КаталогОбмена);
		
		// Наполняем регистр сведений ФайлыДокументовРеализацииПолномочийНалоговыхОрганов файлами
		
		НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(ОбъектСсылка); 
		НаборЗаписей.Прочитать();
		
		Для каждого ИмяЗагружаемогоФайла Из МассивИменЗагружаемыхФайлов Цикл
			
			ПолноеИмяЗагружаемогоФайла = КаталогОбмена + ИмяЗагружаемогоФайла;
			ЗагружаемыйФайл = Новый Файл(ПолноеИмяЗагружаемогоФайла);
			РазмерФайла = ЗагружаемыйФайл.Размер();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Документ = ОбъектСсылка;
			НоваяЗапись.ИмяФайла = ИмяЗагружаемогоФайла;
			НоваяЗапись.ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml;
			НоваяЗапись.Размер = РазмерФайла;
			НоваяЗапись.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяЗагружаемогоФайла), Новый СжатиеДанных(9));;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// Все необходимые файлы добвлены в ИБ. Удаляем каталог обмена и файл обмена.
		УдалитьФайлы(КаталогОбмена);
		УдалитьФайлы(ПолноеИмяФайлаОбмена);
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ОставитьУникальныеЗагружаемыеФайлы(ЗагружаемыеФайлы, ОбъектСсылка)
	
	СписокИменФайлов = Новый СписокЗначений;
	СписокИменФайлов.ЗагрузитьЗначения(ЗагружаемыеФайлы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла
		|ИЗ
		|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
		|ГДЕ
		|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &ОбъектСсылка
		|	И ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла В(&СписокИменФайлов)";

	Запрос.УстановитьПараметр("ОбъектСсылка",     ОбъектСсылка);
	Запрос.УстановитьПараметр("СписокИменФайлов", СписокИменФайлов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИндексЭлемента = ЗагружаемыеФайлы.Найти(Выборка.ИмяФайла);
		Если ИндексЭлемента <> Неопределено Тогда
			ЗагружаемыеФайлы.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьФайлыБанковскойГарантии(ОбъектСсылка, XMLФайл, Подпись)
	
	ЗагружаемыеФайлы = Новый Массив;
	ЗагружаемыеФайлы.Добавить(XMLФайл.Имя);
	ЗагружаемыеФайлы.Добавить(Подпись.Имя);
	
	ОставитьУникальныеЗагружаемыеФайлы(ЗагружаемыеФайлы, ОбъектСсылка);
	
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(ОбъектСсылка); 
		НаборЗаписей.Прочитать();
		
		// XML-Файл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ОбъектСсылка;
		НоваяЗапись.ИмяФайла = XMLФайл.Имя;
		НоваяЗапись.ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml;
		НоваяЗапись.Размер = XMLФайл.Размер;
		НоваяЗапись.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(XMLФайл.Адрес), Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
		
		// Подпись
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ОбъектСсылка;
		НоваяЗапись.ИмяФайла = Подпись.Имя;
		НоваяЗапись.ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.sgn;
		НоваяЗапись.Размер = Подпись.Размер;
		НоваяЗапись.Данные = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Подпись.Адрес), Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия  = НСтр("ru = 'Электронный документооборот с контролирующими органами. Банковская гарантия'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Основание) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Основание""'"), , "Объект.Основание");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура УстановитьПредставлениеОснования()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		КонтекстЭДОСервер      = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		СведенияПоОбъекту      = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Объект.Основание);
		ПредставлениеОснования = СведенияПоОбъекту.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		
		Если ЭтоПакетСДопДокументами Тогда
			СведенияПоОбъекту     = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Объект.Основание);
			Объект.Организация    = СведенияПоОбъекту.Организация;
			Объект.НалоговыйОрган = Справочники.НалоговыеОрганы.НайтиПоКоду(СведенияПоОбъекту.КодКонтролирующегоОргана);
		Иначе
			Объект.ОписьВходящихДокументов = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Объект.Основание);
			Объект.Организация    = Объект.Основание.Организация;
			Объект.НалоговыйОрган = Объект.Основание.НалоговыйОрган;
		КонецЕсли;
		
	Иначе
		Объект.ОписьВходящихДокументов = Справочники.ОписиВходящихДокументовИзНалоговыхОрганов.ПустаяСсылка();
		Объект.Организация = Справочники.Организации.ПустаяСсылка();
		Объект.НалоговыйОрган = Справочники.НалоговыеОрганы.ПустаяСсылка();
	КонецЕсли;
	
	ОпределитьЭтоПакетСДопДокументами(ЭтотОбъект);
	
	ИзменитьОформлениеФормы();
	
	УстановитьМодифицированность(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеФормы()
	
	Элементы.БанковскиеГарантии.Видимость = ЭтоПакетСДопДокументами;
	Элементы.ГруппаКнопок3.Видимость = НЕ ЭтоПакетСДопДокументами;
	Элементы.ПрисоединенныеФайлы.Видимость = ЭтоПакетСДопДокументами;
	
	Если ЭтоПакетСДопДокументами Тогда
		Элементы.ПредставляемыеДокументы.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.ПредставляемыеДокументы.Отображение = ОтображениеТаблицы.Дерево;
	КонецЕсли;
	
	УстановитьЗаголовок();
	УстановитьПредставлениеОснования();
	Элементы.ПредставляемыеДокументы.Обновить();
	УстановитьВидимостьИнформационнойПанели();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьЭтоПакетСДопДокументами(Форма)
	
	Форма.ЭтоПакетСДопДокументами = ДокументооборотСКОВызовСервера.ЭтоПакетСДопДокументами(Форма.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОснованиеПослеВыбора(ВыбранноеОснование, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранноеОснование <> Неопределено Тогда
		
		Если НЕ КонтекстЭДОКлиент.ОснованиеПакетаВыбраноКорректно(ВыбранноеОснование) Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Основание = ВыбранноеОснование;
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
	Если ЕстьБитыеСсылки Тогда
		ПоказатьПредупреждение(, "Список представляемых документов поврежден.");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрорисоватьСтатус(ЭтоИзменяемоеСообщение = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		ЭтоИзменяемоеСообщение = Ложь;
	КонецЕсли;
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Объект.Ссылка, Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(ЭтаФорма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтатусомИДоступностью()
	             
	ЭтоИзменяемоеСообщение = Истина;
	ПроверкаБитыхСсылокПередОткрытием(ЭтоИзменяемоеСообщение);
	ПрорисоватьСтатус(ЭтоИзменяемоеСообщение);
	
	// устанавливаем картинку заголовка
	УправлениеЭУОтправка(ЭтоИзменяемоеСообщение);
	
	// регулируем ТолькоПросмотр
	УстановитьТолькоПросмотр(НЕ ЭтоИзменяемоеСообщение);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаБитыхСсылокПередОткрытием(ЭтоИзменяемоеСообщение)
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если (ЭлементГруппы.СсылкаНаОбъект = Неопределено ИЛИ ТипЗнч(ЭлементГруппы.СсылкаНаОбъект) = Тип("Строка")) И ЭлементГруппы.Загружен = Ложь Тогда
				//это битая ссылка
				ЭтоИзменяемоеСообщение = Ложь;
				ЕстьБитыеСсылки = Истина;
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУОтправка(ЭтоИзменяемоеСообщение = Неопределено)
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		Элементы.КнопкаОтправить.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	// регулируем видимость кнопки Отправить
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте Тогда
		ЭтоИзменяемоеСообщение = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоИзменяемоеСообщение Тогда
		Элементы.КнопкаОтправить.Видимость = Ложь;
		Элементы.ФормаЗаписать.ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотр(ТолькоПросмотр = Истина)
	
	Если ТолькоПросмотр Тогда
		
		Элементы.ГруппаКоманднаяПанельПредставляемыеДокументы.Видимость = НЕ ТолькоПросмотр;
		
	КонецЕсли;
	
	Элементы.ПредставляемыеДокументы.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ПредставлениеОснования.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередОтправкой(ТекстПредупреждения)
	
	РезультатПроверки = Истина;
	
	МаксКолвоФайлов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МаксимальнойКоличествоФайловОписи();
	
	ПредельноеКоличествоФайловВСтроке = МаксКолвоФайлов;
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.КоличествоФайлов = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа %1 отсутствуют прикрепленные файлы.'"), ЭлементГруппы.СоставноеПоле);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
				
			ИначеЕсли ЭлементГруппы.КоличествоФайлов > ПредельноеКоличествоФайловВСтроке Тогда 
				
				ПревышеноНа = ПредельноеКоличествоФайловВСтроке - ЭлементГруппы.КоличествоФайлов;
				
				ТекстСообщения = "Допустимое количество файлов в документе ""%1"" превышено на %2."; 
				ТекстСообщения = СтрШаблон(ТекстСообщения, ЭлементГруппы.СоставноеПоле, ПревышеноНа);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатПроверки = Ложь Тогда
		ТекстПредупреждения = "Отправка невозможна: требуется устранить нарушения."
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроверкаПередРазбивкой(ТекстПредупреждения)
	
	РезультатПроверки = Истина;
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.КоличествоФайлов = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа %1 отсутствуют прикрепленные файлы.'"), ЭлементГруппы.СоставноеПоле);
				РезультатПроверки = Ложь;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатПроверки = Ложь Тогда
		ТекстПредупреждения = "Разбивка отменена: требуется устранить нарушения."
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура КомандаОтправитьВопросОписьБудетОтправленаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
	
	КонтекстЭДОКлиент.ОтправкаОписиИсходящихДокументовВФНС(
		Объект.Ссылка,
		Объект.Организация,
		УникальныйИдентификатор,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеСтатусомИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьВопросРазбитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> Истина Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстПредупреждения = "";
	МассивСозданныхОписей = РазбитьНаНесколькоНаСервере(ТекстПредупреждения);
	Если МассивСозданныхОписей = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	Иначе
		
		Прочитать();
		
		//обновим дерево документов текущей описи   
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		//откроем форму групповой отправки
		СписокОписей = Новый СписокЗначений;
		СписокОписей.ЗагрузитьЗначения(МассивСозданныхОписей);
		СписокОписей.Добавить(Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокОписей", 			СписокОписей);
		ПараметрыФормы.Вставить("Основание",    			Объект.Основание);
		ПараметрыФормы.Вставить("ЭтоПакетСДопДокументами",  ЭтоПакетСДопДокументами);
		
		ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаГрупповойОтправки", ПараметрыФормы, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();

КонецПроцедуры

&НаСервере
Процедура ОпределитьВложенияИРазмерВложений(Параметры)

	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Параметры.ЗначениеКопирования);
		
		Если Вложения.Количество() > 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Записать();
			КонецЕсли;
			
			Вложения.Колонки.Добавить("АдресФайла");
			Для каждого Вложение Из Вложения Цикл
				Вложение.АдресФайла = ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), УникальныйИдентификатор);
			КонецЦикла;
			
			КонтекстЭДОСервер.ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, Вложения);
			
			ОбновитьРазмерыОписи(Объект.Ссылка);
			
		Иначе
			ОбновитьРазмерыОписи(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		ОбновитьРазмерыОписи(Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыИзФайлаОбмена()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Основание");
		Возврат;
	КонецЕсли;
	
	ИННКППОрганизации = ПолучитьСтрокойИННКППОрганизации(Объект.Организация);
	
	ПараметрыФормы = Новый Структура("ИННКППОрганизации, ИдентификаторФормыВладельца", ИННКППОрганизации, УникальныйИдентификатор);
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыИзФайлаОбменаЗавершение", ЭтотОбъект);
	
	//Открываем форму выбора сканированных документов, результат закрытия передаем в ДобавитьСканированныеДокументыЗавершение
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаЗагрузкаДокументовИзФайлаОбмена", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ЗагрузкаСкана

&НаКлиенте
Процедура ВыбратьИДобавитьВложения()
	
	ДополнительныеПараметры = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПараметрыВыбораКартинок_ОтветНаТребованиеДокументов();

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьИДобавитьВложения_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(ОписаниеОповещения, Новый УникальныйИдентификатор, , ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИДобавитьВложения_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьСканированныйДокумент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСканированныйДокумент(РезультатВыбораФайлов)
	
	АдресРезультатаВыбораФайлов = ПоместитьВоВременноеХранилище(РезультатВыбораФайлов, Новый УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", 			СтруктураПараметров);
	ПараметрыФормы.Вставить("АдресРезультатаВыбораФайлов", 	АдресРезультатаВыбораФайлов);
	ПараметрыФормы.Вставить("ДобавитьВОтобранные", 			Истина);
	ПараметрыФормы.Вставить("ЭтоПакетСДопДокументами", 		ЭтоПакетСДопДокументами);
	ПараметрыФормы.Вставить("ПроверятьНедопустимыеСимволы",	Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьСканированныйДокументЗавершение", 
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.ФормаОбъекта", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСканированныйДокументЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	 Если РезультатВыбора <> Неопределено И РезультатВыбора.Количество() > 0 Тогда
		
		МассивВыбранныхДокументов = РезультатВыбора;
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыбратьЭлектронныйДокументИзБазы

&НаКлиенте
Процедура ВыбратьЭлектронныйДокументИзБазы()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьЭлектронныйДокументИзБазыЗавершение", 
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтборОрганизация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ТолькоЭлектронныеДокументы", Истина);
		
	ОткрытьФорму("РегистрСведений.ДокументыПоТребованиюФНС.Форма.ФормаВыбора", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлектронныйДокументИзБазыЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	 Если РезультатВыбора <> Неопределено И РезультатВыбора.Количество() > 0 Тогда
		 
		МассивВыбранныхДокументов = РезультатВыбора;
			
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПроверитьТаблицуДокументов(Всего, ВАрхиве)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ТЗДокументыФайлыРазмер = КонтекстЭДОСервер.ПолучитьТаблицуДокументовОписиИРазмерыФайлов(Объект.Ссылка);
	
	Всего = 0;
	ВАрхиве = 0;
	
	Для Каждого Вложение Из ТЗДокументыФайлыРазмер Цикл 
		ВАрхиве = ВАрхиве + ?(Вложение.ВАрхиве > 0, 1, 0);
		Всего = Всего + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры


#КонецОбласти