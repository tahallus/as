#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - Обработчик события окончания ввода текста поля добавления тегов
//
// Параметры:
//  Форма				 - 	УправляемаяФорма - Форма редактирования настроек отчета
//  Текст				 - 	Строка - Введенный тег
//  СтандартнаяОбработка - 	Булево - Признак использования стандартной обработки
//
Процедура ПолеВводаТегаОкончаниеВводаТекста(Форма, Текст, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегНаСервере(Форма,Текст);
		ТекущийЭлемент = Форма.Элементы.ПолеВводаТега;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Обработчик события выбора значения в поле добавления тегов
//
// Параметры:
//  Форма				 - 	УправляемаяФорма - Форма редактирования настроек отчета
//  ИмяЭлемента			 - 	Строка - Имя элемента-поля
//  ВыбранноеЗначение	 - 	Произвольный - Выбранное в выпадающем списке значение
//  СтандартнаяОбработка - 	Булево - Признак использования стандартной обработки
//
Процедура ПолеВводаТегаОбработкаВыбора(Форма, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТегиОтчетов") Тогда
		ПрикрепитьТегНаСервере(Форма, ВыбранноеЗначение);
	КонецЕсли;
	Форма.Элементы[ИмяЭлемента].ОбновитьТекстРедактирования();
	
КонецПроцедуры

// Процедура - Обработка навигационной ссылки удаления тега
//
// Параметры:
//  Форма				 					 - 	УправляемаяФорма - Форма редактирования настроек отчета
//  НавигационнаяСсылкаФорматированнойСтроки - 	Строка - Навигационная ссылка, содержащая идентификатор тега
//  СтандартнаяОбработка 					 - 	Булево - Признак использования стандартной обработки
//
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Форма.ДанныеТегов.НайтиПоИдентификатору(ТегИД);
	
	Форма.ДанныеТегов.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТегов(Форма);
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

// Процедура - Обновить элементы тегов на форме редактирования настроек отчета
//
// Параметры:
//  Форма	 -	УправляемаяФорма	- Форма редактирования настроек отчета
//
Процедура ОбновитьЭлементыТегов(Форма) Экспорт
	
	ФС = Форма.ДанныеТегов.Выгрузить(, "ПредставлениеТега").ВыгрузитьКолонку("ПредставлениеТега");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Форма.Элементы.ОблакоТегов.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Форма.Элементы.ОблакоТегов.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

// Процедура - Обновить таблицу тегов на форме редактирования настроек отчета
//
// Параметры:
//  Форма	 - 	УправляемаяФорма	- Форма редактирования настроек отчета
//
Процедура ОбновитьТаблицуТегов(Форма) Экспорт
	
	Форма.ДанныеТегов.Очистить();
	МассивТегов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ВариантТеги);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Теги", МассивТегов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТегиОтчетов.Ссылка КАК Тег,
	|	ТегиОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование В (&Теги)";
	СоответствиеТегов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТегов.Вставить(Выборка.Наименование, Выборка.Тег);
	КонецЦикла; 
	
	Для каждого Тег Из МассивТегов Цикл
		
		НовыеДанныеТега = Форма.ДанныеТегов.Добавить();
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		НовыеДанныеТега.Тег = СоответствиеТегов.Получить(Тег);
		Если НЕ ЗначениеЗаполнено(НовыеДанныеТега.Тег) Тогда
			НовыеДанныеТега.Тег = НайтиСоздатьТег(Тег);
		КонецЕсли; 
		НовыеДанныеТега.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(Тег, НовыеДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеТега.ДлинаТега = СтрДлина(Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСоздатьТег(Знач ЗаголовокТега)
	
	Тег = Справочники.ТегиОтчетов.НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники.ТегиОтчетов.СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

Процедура ПрикрепитьТегНаСервере(Форма, Тег) 
		
	Если Форма.ДанныеТегов.НайтиСтроки(Новый Структура("Тег", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = Форма.ДанныеТегов.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Тег = Тег;
	СтрокаТегов.ПометкаУдаления = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаТегов.ДлинаТега = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТегов(Форма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура СоздатьИПрикрепитьТегНаСервере(Форма, знач ЗаголовокТега) 
	
	Тег = НайтиСоздатьТег(ЗаголовокТега);
	ПрикрепитьТегНаСервере(Форма, Тег);
	
КонецПроцедуры

Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	
	Шрифт = Новый Шрифт(БазовыйШрифт, , , Истина, , ?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12, , , , НавигационнаяСсылкаФС));
	
	// АПК:1356 Используется локализованное имя тега + картинка
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

#КонецОбласти

#КонецЕсли