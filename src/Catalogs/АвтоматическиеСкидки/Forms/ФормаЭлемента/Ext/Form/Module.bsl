
#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Чтобы уменьшить количество бесконтекстных вызовов сервера.
	СпособПредоставленияПроцент = Перечисления.СпособыПредоставленияСкидокНаценок.Процент;
	СпособПредоставленияСумма = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
	СпособПредоставленияВидЦен = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен;
	СпособПредоставленияОкругление = Перечисления.СпособыПредоставленияСкидокНаценок.Округление;
	СпособПредоставленияКоличествоБонусами = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов;
	СпособПредоставленияПроцентБонусами = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов;
	ВариантОграниченияПоНоменклатуре = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре;
	ВариантОграниченияПоКатегориям = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям;
	ВариантОграниченияПоЦеновымГруппам = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам;
	ВариантОграниченияПоСегментамНоменклатуры = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоСегменту;
	ВариантОграниченияПоКонтрагентам = Перечисления.ВариантыОграниченийСкидокПоКонтрагентам.ПоКонтрагентам;
	ВариантОграниченияПоСегментамКонтрагентов = Перечисления.ВариантыОграниченийСкидокПоКонтрагентам.ПоСегментуКонтрагентов;
	ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
	
	НазначениеРозница = Перечисления.НазначенияАвтоматическихСкидок.Розница;
	НазначениеОпт = Перечисления.НазначенияАвтоматическихСкидок.Опт;
	ОбластьВДокументе = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если Объект.ЭтоПравилоНачисленияБонусов Тогда
		СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийСпособовНачисленияБонусов(Элементы.СпособПредоставления.СписокВыбора);
	Иначе
		СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийСпособовПредоставленияСкидки(Элементы.СпособПредоставления.СписокВыбора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ЕстьУсловияПоДК Тогда
			ДобавитьУсловиеПоСкидке();
			Объект.Наименование = СформироватьАвтоНаименованиеНаСервере();
		КонецЕсли;
		
	Иначе
		
		СформироватьАвтоНаименованиеНаСервере();
		
	КонецЕсли;
	
	// Используется ли АвтоНаименование
	Если СтрНайти(Объект.Наименование, "Округление до") > 0
		И (СтрНайти(Объект.Наименование, "в строке") > 0 ИЛИ СтрНайти(Объект.Наименование, "в документе") > 0)
		Тогда
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли; 
	Для каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Определим видимость реквизита доп. упорядочивания.
	Если Объект.УдалитьРеквизитДопУпорядочивания > 0 Тогда
		Элементы.РеквизитДопУпорядочивания.Видимость = Истина;
	Иначе
		Если Объект.Родитель.Пустая() Тогда
			ТекВариантСовместногоПрименения = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
		Иначе
			ТекВариантСовместногоПрименения = Объект.Родитель.ВариантСовместногоПрименения;
		КонецЕсли;
		
		Элементы.РеквизитДопУпорядочивания.Видимость = (ТекВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение 
														ИЛИ ТекВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение);
	КонецЕсли;
	
	Если Объект.ЭтоПравилоНачисленияБонусов Тогда
		Объект.Назначение = НазначениеРозница;
		Элементы.Назначение.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьПризнакиЭтоГруппа();
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Заголовок = Строка(Объект.Родитель.ВариантСовместногоПрименения);
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Видимость = Не Объект.Родитель.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Родитель", "Видимость", Не Объект.ЭтоПравилоНачисленияБонусов);
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	
	УправлениеВидимостьюНаСервере();
	УстановитьУсловноеОформлениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.НоменклатураГруппыЦеновыеГруппы.ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "НоменклатураГруппыЦеновыеГруппыХарактеристика");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УсловиеПредоставления_Запись" Тогда
		ОбновитьАвтонаименование(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата начала больше даты окончания!'");
		Сообщение.Поле = "Объект.ДатаНачала";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ВариантПредоставленияСкидкиПоПолучателямПриИзмененииЗавершение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентамДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
	
	УправлениеВидимостьюНаСервере();
	
	Если ВариантОграниченияПоКонтрагентамДоИзменения = ВариантОграниченияПоКонтрагентам Тогда
		Объект.ПолучателиСкидкиСегменты.Очистить();
	Иначе
		Объект.ПолучателиСкидкиКонтрагенты.Очистить();
	КонецЕсли;
		
КонецПроцедуры

// Процедура обновляет наименование, если пользователь не менял его вручную.
//
&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина, УстановитьМодифицированность = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
		
		Если УстановитьМодифицированность Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает сформированное автонаименование.
//
&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '%'");
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСумма Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + Объект.ВалютаПредоставления;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		
		СтрокаНаименования = "Вид цен - " + Объект.ВидЦен;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПроцентБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '% баллами'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + " """ + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + НСтр("ru = 'баллов'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + " """ + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		
		СтрокаНаименования = НСтр("ru = 'Округление до '") + Объект.ПорядокОкругления;
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Если Объект.УсловияПредоставления.Количество() = 1 Тогда
		СтрокаНаименования = СтрокаНаименования + " ("+Объект.УсловияПредоставления[0].УсловиеПредоставления+")";
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	ИначеЕсли Объект.УсловияПредоставления.Количество() > 1 Тогда
		
		КоличествоУсловий = Объект.УсловияПредоставления.Количество();
		
		Если КоличествоУсловий >= 2 Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(несколько условий)'");
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		КонецЕсли;
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() = 0 Тогда
		СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'без условий'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма И Объект.ОбластьПредоставления = ОбластьВДокументе);
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 И НЕ СуммаВДокументе Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', с уточнением'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 И Объект.Назначение <> НазначениеРозница) 
		ИЛИ (Объект.ПолучателиСкидкиСклады.Количество() > 0 И Объект.Назначение <> НазначениеОпт) Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', указаны получатели'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если Объект.ВремяПоДнямНедели.Количество() > 0 Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', по расписанию'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

// Функция возвращает сформированное автонаименование.
//
&НаСервере
Функция СформироватьАвтоНаименованиеНаСервере()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '%'");
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСумма Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + Объект.ВалютаПредоставления;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		
		СтрокаНаименования = "Вид цен - " + Объект.ВидЦен;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПроцентБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '% баллами'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + """" + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + НСтр("ru = 'баллов'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + """" + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		
		СтрокаНаименования = НСтр("ru = 'Округление до '") + Объект.ПорядокОкругления;
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Если Объект.УсловияПредоставления.Количество() = 1 Тогда
		
		СтрокаНаименования = СтрокаНаименования + " ("+Объект.УсловияПредоставления[0].УсловиеПредоставления+")";
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() > 1 Тогда
		
		КоличествоУсловий = Объект.УсловияПредоставления.Количество();
		
		Если КоличествоУсловий >= 2 Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(несколько условий)'");
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		КонецЕсли;
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() = 0 Тогда
		
		СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'без условий'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
	КонецЕсли;
	
	СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма И Объект.ОбластьПредоставления = ОбластьВДокументе);
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 И НЕ СуммаВДокументе Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', с уточнением'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 И Объект.Назначение <> НазначениеРозница) 
		ИЛИ (Объект.ПолучателиСкидкиСклады.Количество() > 0 И Объект.Назначение <> НазначениеОпт) Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', указаны получатели'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если Объект.ВремяПоДнямНедели.Количество() > 0 Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', по расписанию'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

// Функция возвращает вариант совместного применения автоматических скидок актуальный для текущей скидки.
//
&НаСервереБезКонтекста
Функция ПолучитьТекущийВариантСовместногоПрименения(Родитель)

	Если Родитель.Пустая() Тогда
		Возврат Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
	Иначе
		Возврат Родитель.ВариантСовместногоПрименения;
	КонецЕсли;

КонецФункции // ПолучитьТекущийВариантСовместногоПриме()

&НаСервере
Процедура ОбновитьПризнакиЭтоГруппа()
	
	Если Объект.ВариантОграниченияПоНоменклатуре <> ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре") Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = Объект.НоменклатураГруппыЦеновыеГруппы.Выгрузить(, "ЗначениеУточнения").ВыгрузитьКолонку("ЗначениеУточнения");
	Если МассивНоменклатуры.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Выборка.ЭтоГруппа);
		КонецЦикла; 
		
		Для каждого Стр Из Объект.НоменклатураГруппыЦеновыеГруппы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ЗначениеУточнения) ИЛИ ТипЗнч(Стр.ЗначениеУточнения) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоГруппа = Ложь;
			Иначе
				Стр.ЭтоГруппа = ПараметрыНоменклатуры.Получить(Стр.ЗначениеУточнения);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловиеПоСкидке()
	
	Условие = ДисконтныеКартыУНФСервер.ПолучитьЕдинственноеУсловиеПоДисконтнымКартам();
	Если Не Условие = Неопределено Тогда
		НовоеУсловие = Объект.УсловияПредоставления.Добавить();
		НовоеУсловие.УсловиеПредоставления = Условие;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура управляет видимостью элементов в зависимости о варианта ограничения, способа и области предоставления скидки.
//
&НаСервере
Процедура УправлениеВидимостьюНаСервере()

	Если Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		Элементы.СпособПредоставления.Видимость = Ложь;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Округление корректирует размер автоматической скидки так, чтобы 'Всего' документа/строки было округлено до заданного порядка, с учетом всех скидок и НДС строки/документа.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Истина;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Автоматическая скидка установит выбранный вид цен. Скидка составит разницу к текущей цене.'");
	Иначе	
		Элементы.ГруппаСкидки.Видимость = Истина;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.БонуснаяПрограмма.Видимость = Объект.ЭтоПравилоНачисленияБонусов;
	Элементы.ОбластьПредоставления.Видимость = Не Объект.ЭтоПравилоНачисленияБонусов;
	Элементы.ЗначениеСкидкиНаценки.Заголовок = ?(Объект.ЭтоПравилоНачисленияБонусов, НСтр("ru = 'Начисление'"), НСтр("ru = 'Скидка'"));
	Элементы.ГруппаСовместноеПрименение.Видимость = Не объект.ЭтоПравилоНачисленияБонусов;
	
	Если Объект.ВариантОграниченияПоНоменклатуре.Пустая() Тогда
		Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре;
	КонецЕсли;
	
	СуммаВДокументе = ((Объект.СпособПредоставления = СпособПредоставленияСумма Или Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами)
						И Объект.ОбластьПредоставления = ОбластьВДокументе) ИЛИ Объект.СпособПредоставления = СпособПредоставленияВидЦен;
		
	Элементы.Уточнения.Видимость = Не СуммаВДокументе;
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Номенклатура'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у определенных товаров или групп товаров значение скидки отличалось от основного значения. Если список не заполнен, то для всех позиций номенклатуры используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Истина;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Категория номенклатуры'");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр(
			"ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных категорий значение скидки отличалось от основного значения. Если список не заполнен, то для всех категорий используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоЦеновымГруппам Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Ценовая группа'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных ценовых групп значение скидки отличалось от основного значения. Если список не заполнен, то для всех ценовых групп используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоСегментамНоменклатуры Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Сегмент номенклатуры'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");	
		Элементы.ДекорацияПодсказкаУточнения.Заголовок =  НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных сегментов значение скидки отличалось от основного значения. Если список не заполнен, то для всех сегментов используется основное значение скидки.'");
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВалютаПредоставления.Видимость = (Объект.СпособПредоставления = СпособПредоставленияСумма);
	
	НастройкаВидимостиПолучателейНаСервере();
	
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Округление") Тогда
		ЭтоСкидка = Ложь;
	Иначе
		ЭтоСкидка = Истина;
	КонецЕсли;
	
	Элементы.ОсновныеРеквизитыСкидка.Видимость = ЭтоСкидка;
	Элементы.ОсновныеРеквизитыОкругление.Видимость = НЕ ЭтоСкидка;
	Элементы.ГруппаВремяПоДнямНедели.Видимость = ЭтоСкидка;
	Элементы.ГруппаПериодДействия.Видимость = ЭтоСкидка;
	Элементы.ГруппаСовместноеПрименение.Видимость = ЭтоСкидка;	
	
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов") Тогда
		Элементы.ДекорацияБаллыПроценты.Заголовок = "(%)";
		Элементы.ДекорацияБаллыПроценты.Видимость = Истина;
	ИначеЕсли Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов") Тогда
		Элементы.ДекорацияБаллыПроценты.Заголовок = НСтр("ru = '(баллы)'");
		Элементы.ДекорацияБаллыПроценты.Видимость = Истина;
	Иначе
		Элементы.ДекорацияБаллыПроценты.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентам
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВариантОграниченияПоПолучателям) Тогда
		Элементы.СтраницыПолучателиСкидкиСегментыКонтрагенты.ТекущаяСтраница = 
			Элементы.ГруппаПолучателиКонтрагенты;
	ИначеЕсли Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоСегментамКонтрагентов Тогда
		Элементы.СтраницыПолучателиСкидкиСегментыКонтрагенты.ТекущаяСтраница = 
			Элементы.ГруппаПолучателиСегменты;
	КонецЕсли;
	
	Если НЕ ИспользуютсяСегментыНоменклатуры Тогда
		СписокВыбораОграниченийПоНоменклатуре = Элементы.ВариантОграниченияПоНоменклатуре.СписокВыбора;
		ВариантПереключателя = 
			СписокВыбораОграниченийПоНоменклатуре.НайтиПоЗначению(ВариантОграниченияПоСегментамНоменклатуры);
		Если ВариантПереключателя <> Неопределено Тогда
			СписокВыбораОграниченийПоНоменклатуре.Удалить(ВариантПереключателя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре.
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзменении(Элемент)
	
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 Тогда
		Описание = Новый ОписаниеОповещения("ВариантОграниченияПоНоменклатуреПриИзмененииЗаврешение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
		УправлениеВидимостьюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре (завершение после ответа на вопрос об удалении строк в ТЧ).
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзмененииЗаврешение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуреДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
	УправлениеВидимостьюНаСервере();
	Объект.НоменклатураГруппыЦеновыеГруппы.Очистить();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента СпособПредоставления.
//
&НаКлиенте
Процедура СпособПредоставленияПриИзменении(Элемент)
	
	СпособПредоставленияПриИзмененииСервер();
	Объект.ЗначениеСкидкиНаценки = 0;
	
	ПоказатьСтраницуУточнений = Ложь;
	Для каждого ТекущаяСтрока Из Объект.НоменклатураГруппыЦеновыеГруппы Цикл
	
		ТекущаяСтрока.ЗначениеСкидкиНаценки = 0;
		ПоказатьСтраницуУточнений = Истина;
		
	КонецЦикла;
	
	Если ПоказатьСтраницуУточнений Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУточненияОграниченияИРасписание;
		Элементы.СтраницыУточненийИОграничений.ТекущаяСтраница = Элементы.Уточнения;
		
		СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма 
							И Объект.ОбластьПредоставления = ОбластьВДокументе);
							
		Если Не СуммаВДокументе Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Скидки очищены!");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Округление") Тогда
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Истина;
	ИначеЕсли Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦен") Тогда
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Истина;
		Элементы.ГруппаОкругление.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаСкидки.Видимость = Истина;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОбластьПредоставления.
//
&НаКлиенте
Процедура ОбластьПредоставленияПриИзменении(Элемент)
	
	УправлениеВидимостьюНаСервере();
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеИзмененоПользователем = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЗначениеСкидкиНаценки.
//
&НаКлиенте
Процедура ЗначениеСкидкиНаценкиПриИзменении(Элемент)
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		Если Объект.ЗначениеСкидкиНаценки > 100 Тогда
			ТекстСообщения = НСтр("ru = 'Процент скидки должен быть не более 100%'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, 
																,
																"ЗначениеСкидкиНаценки",
																"Объект");
			Объект.ЗначениеСкидкиНаценки = 0;
		КонецЕсли;
	КонецЕсли;
	ОбновитьАвтонаименование(Истина);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Родитель.
//
&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииНаСервере();
	
КонецПроцедуры

// Серверная часть процедуры РодительПриИзменении.
//
&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	ТекВариантСовместногоПрименения = ПолучитьТекущийВариантСовместногоПрименения(Объект.Родитель);
	
	Элементы.РеквизитДопУпорядочивания.Видимость = (Объект.РеквизитДопУпорядочивания > 0 ИЛИ ТекВариантСовместногоПрименения = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение") 
													ИЛИ ТекВариантСовместногоПрименения = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение"));
	
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Заголовок = Строка(ТекВариантСовместногоПрименения);
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Видимость = Не Объект.Родитель.Пустая();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Назначение.
//
&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	НастройкаВидимостиПолучателейНаСервере();
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОграниченияПоКонтрагентамПриИзменении(Элемент)
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 
		И Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоСегментамКонтрагентов)
		ИЛИ (Объект.ПолучателиСкидкиСегменты.Количество()> 0 
		И Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентам) Тогда
		
		Описание = Новый ОписаниеОповещения("ВариантПредоставленияСкидкиПоПолучателямПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
		УправлениеВидимостьюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ОбновитьВалютуПредоставления();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВалютуПредоставления()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Объект.ВалютаПредоставления = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпособПредоставленияПриИзмененииСервер()
	
	УправлениеВидимостьюНаСервере();
	ОбновитьВалютуПредоставления();
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийТабличныхЧастей

// Процедура - обработчик события ПриИзменении элемента УсловияПредоставления формы.
//
&НаКлиенте
Процедура УсловияПредоставленияПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ВремяПоДнямНедели формы.
//
&НаКлиенте
Процедура ВремяПоДнямНеделиПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ПолучателиСкидкиКонтрагенты формы.
//
&НаКлиенте
Процедура ПолучателиСкидкиПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ПолучателиСкидкиСклады формы.
//
&НаКлиенте
Процедура ПолучателиСкидкиСкладыПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении колонки ЗначениеСкидки в ТЧ НоменклатураГруппыЦеновыеГруппы формы.
//
&НаКлиенте
Процедура НоменклатураГруппыЦеновыеГруппыЗначениеСкидкиНаценкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НоменклатураГруппыЦеновыеГруппы.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
			Если ТекущаяСтрока.ЗначениеСкидкиНаценки > 100 Тогда
				ТекстСообщения = НСтр("ru = 'Процент скидки должен быть не более 100%'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, 
																	,
																	"НоменклатураГруппыЦеновыеГруппы["+(ТекущаяСтрока.НомерСтроки-1)+"].ЗначениеСкидкиНаценки",
																	"Объект");
				ТекущаяСтрока.ЗначениеСкидкиНаценки = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ НоменклатураГруппыЦеновыеГруппы формы.
//
&НаКлиенте
Процедура НоменклатураГруппыЦеновыеГруппыПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования ТЧ ВремяПоДнямНедели формы.
//
&НаКлиенте
Процедура ВремяПоДнямНеделиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Выбран = Истина;
		Элемент.ТекущиеДанные.ВремяНачала = '00010101000000';
		Элемент.ТекущиеДанные.ВремяОкончания = '00010101235959';
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура управляет видимостью элементов формы в зависимости от назначения автоматической скидки.
//
&НаСервере
Процедура НастройкаВидимостиПолучателейНаСервере()

	Если Объект.Назначение = НазначениеРозница Тогда
		Элементы.ГруппаКонтрагенты.Видимость = Ложь;
		Элементы.ГруппаСклады.Видимость = Истина;
		Элементы.ГруппаСкладыИКонтрагенты.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		СтрокиПодсказки = Новый Массив;
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'Заполните список складов, если скидка (наценка) будет предоставляться только на определенных складах.'"));
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'Если список не заполнен, то скидка (наценка) будет предоставляться на всех складах.'"));
		
		Элементы.ДекорацияПодсказкаПолучатели.Заголовок = СтрСоединить(СтрокиПодсказки, " ");
	ИначеЕсли Объект.Назначение = НазначениеОпт Тогда
		Элементы.ГруппаКонтрагенты.Видимость = Истина;
		Элементы.ГруппаСклады.Видимость = Ложь;
		Элементы.ГруппаСкладыИКонтрагенты.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

		СтрокиПодсказки = Новый Массив;
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'Заполните список контрагентов, если скидка (наценка) будет предоставляться только определенному списку контрагентов.'"));
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'Если список не заполнен, то скидка (наценка) будет предоставляться всем контрагентам.'"));
		
		Элементы.ДекорацияПодсказкаПолучатели.Заголовок = СтрСоединить(СтрокиПодсказки, " ");
	Иначе
		Элементы.ГруппаКонтрагенты.Видимость = Истина;
		Элементы.ГруппаСклады.Видимость = Истина;
		Элементы.ГруппаСкладыИКонтрагенты.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;

		СтрокиПодсказки = Новый Массив;
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'Заполните список контрагентов или складов, если скидка (наценка) будет предоставляться только определенному списку контрагентов (опт)'"));
		СтрокиПодсказки.Добавить(
		НСтр("ru = 'или на определенных складах (розница). Если список контрагентов (складов) не заполнен, то скидка (наценка) будет предоставляться всем контрагентам (на всех складах).'"));
		
		Элементы.ДекорацияПодсказкаПолучатели.Заголовок = СтрСоединить(СтрокиПодсказки, " ");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ДобавитьГруппуНоменклатурыКатегорийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.НоменклатураГруппыЦеновыеГруппы.Добавить();
		НоваяСтрока.ЗначениеУточнения = РезультатЗакрытия;
		Элементы.НоменклатураГруппыЦеновыеГруппы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
			НоваяСтрока.ЭтоГруппа = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуНоменклатурыКатегорийЗавершение", ЭтотОбъект);
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		ПараметрыОткрытия = Новый Структура("");
		ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаВыбораГруппы", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКонтрагентовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.ПолучателиСкидкиКонтрагенты.Добавить();
		НоваяСтрока.Получатель = РезультатЗакрытия;
		Элементы.ПолучателиСкидки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКонтрагентов(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуКонтрагентовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПризнакиЭтоГруппа();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьПризнакиЭтоГруппа();
КонецПроцедуры

#КонецОбласти

