
#Область ОписаниеПеременных

&НаКлиенте
Перем ОтветПередЗаписью;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерхняяГраницаДиапазонаSKUВесовогоТовара = Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма); 
	Элементы.НастройкаPLU.Видимость       = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	Элементы.МаксимальныйКодPLU.Доступность = Объект.СвояНумерацияPLUНаОборудовании;
	Элементы.ТоварыPLU.Видимость          = Элементы.НастройкаPLU.Видимость;
	
	Настроить();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	Элементы.ТабДок.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.ТабДок.ОтображениеСостояния.Текст = НСтр("ru = 'Данные не рассчитаны. Нажмите ""Обновить"" для заполнения таблицы.'");
	Элементы.ТабДок.ОтображениеСостояния.Видимость = Истина;
	
	Элементы.ТоварыХарактеристика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Элементы.ТоварыПартия.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	Элементы.ТоварыЕдиницаИзмерения.Видимость = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Настроить();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Оповестить("Запись_ПравилаОбменаСПодключаемымОборудованием", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	ДанныеАктуальны = Ложь;
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияПриИзменении(Элемент)
	Настроить();
	Элементы.НастройкаPLU.Видимость = Объект.ТипПодключаемогоОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток");
	Элементы.ТоварыPLU.Видимость = Элементы.НастройкаPLU.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Настроить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьГруппыТоваровПриИзменении(Элемент)
	
	ДанныеАктуальны = Ложь;
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	#Если МобильныйКлиент Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	#Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РаботаСКодамиSKU(Команда)
	ОткрытьФорму("Обработка.РаботаСКодамиТоваровSKU.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьSKU(Команда)
	
	ВыгрузкаНаВесы = Объект.ТипПодключаемогоОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток");
	
	Если ВыгрузкаНаВесы Тогда
		ТекстСообщения = НСтр("ru = 'Выполняется генерация SKU и PLU...'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Выполняется генерация SKU...'");
	КонецЕсли;
	Состояние(ТекстСообщения);
	
	
	СоздатьSKUДляТоваровСервер();
	
	Если ВыгрузкаНаВесы Тогда
		ТекстСообщения = НСтр("ru = 'Генерация SKU и PLU завершена.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Генерация SKU завершена.'");
	КонецЕсли;
	Состояние(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьPLU(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.SKU) Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Изменение PLU доступно только для позиций с SKU'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.PLU) Тогда
			
			КлючЗаписи = СоздатьКлючЗаписиРегистра(ТекущиеДанные.PLU);
			ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
			
		Иначе
			
			ПараметрыСозданияPLU = Новый Структура;
			ПараметрыСозданияPLU.Вставить("ПравилоОбмена", Объект.Ссылка);
			ПараметрыСозданияPLU.Вставить("КодSKU", ТекущиеДанные.SKU);
			
			ПараметрыФормы.Вставить("ПараметрыСозданияPLU", ПараметрыСозданияPLU);
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьPLUЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.КодыТоваровPLUНаОборудовании.Форма.ФормаИзмененияPLU", ПараметрыФормы,,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьPLU(Команда)
	
	ОчиститьPLUСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьPLUСервер()
	
	Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ВыделеннаяСтрока = Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ЗначениеЗаполнено(ВыделеннаяСтрока.PLU) Тогда
			РегистрыСведений.КодыТоваровPLUНаОборудовании.УдалитьPLU(Объект.Ссылка, ВыделеннаяСтрока.PLU);
			ВыделеннаяСтрока.PLU = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	
	ОбновитьСписокТоваровНаСервере();
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
	Состояние(НСтр("ru = 'Обновление списка товаров завершено.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОтбораПоУмолчанию(Команда)
	
	ДанныеАктуальны = Ложь;
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвояНумерацияPLUНаОборудованииПриИзменении(Элемент)
	Элементы.МаксимальныйКодPLU.Доступность = Объект.СвояНумерацияPLUНаОборудовании;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда 
		ОтветПередЗаписью = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьPLUЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.PLU = Результат.КодТовараPLU;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКлючЗаписиРегистра(PLU)
	
	Возврат РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьКлючЗаписи(Новый Структура("ПравилоОбмена, КодТовараPLU, КодТовараSKU", Объект.Ссылка, PLU));
	
КонецФункции

&НаСервере
Процедура СоздатьSKUДляТоваровСервер()
	
	СоздаватьSKU = Истина;
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(Товары.Выгрузить(), СоздаватьSKU, Объект.Ссылка);
	ОбновитьСписокТоваровНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПрайсЛиста()
	
	Если ДанныеАктуальны Тогда
		
		Элементы.СтраницыВПрайсЛисте.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
		
	Иначе
		
		Элементы.СтраницыВПрайсЛисте.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	КонецЕсли;
	
	Элементы.СгенерироватьSKU.Доступность    = ДанныеАктуальны;
	Элементы.ИзменитьPLU.Доступность         = ДанныеАктуальны;
	Элементы.ОчиститьPLU.Доступность         = ДанныеАктуальны;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервере()
	
	Товары.Очистить();
	
	ТаблицаТоваров = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.СписокТоваровПоПравилу(Объект.Ссылка);
	
	Если НЕ ТаблицаТоваров = Неопределено Тогда
		Товары.Загрузить(ТаблицаТоваров);
	КонецЕсли;
	
	ДанныеАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Настроить()
	
	СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовSKU");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбменаСПодключаемымОборудованием.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованием
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованием.Ссылка = &ПравилоОбмена");
		
		Запрос.УстановитьПараметр("ПравилоОбмена", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		
		Элементы.ГруппаВыгружатьГруппыТоваров.Видимость = Ложь;
		Элементы.ТоварыPLU.Видимость = Истина;
		Элементы.ИзменитьPLU.Видимость = Истина;
		Элементы.ОчиститьPLU.Видимость = Истина;
		
		Элементы.СгенерироватьSKU.Заголовок = НСтр("ru = 'Сгенерировать SKU, PLU'");
	Иначе
		Элементы.ГруппаВыгружатьГруппыТоваров.Видимость = Истина;
		Элементы.ТоварыPLU.Видимость = Ложь;
		Элементы.ИзменитьPLU.Видимость = Ложь;
		Элементы.ОчиститьPLU.Видимость = Ложь;
		
		Элементы.СгенерироватьSKU.Заголовок = НСтр("ru = 'Сгенерировать SKU'");
	КонецЕсли;
	
	СкладОрганизация = Объект.Организация;
	СкладОрганизацияИНН = Объект.Организация.ИНН;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	//Модифицированность = Истина;
	//
	//НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов);
	//НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	//ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	//
	//ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	//
	//
	//Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
	//	
	//	Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
	//	
	//	ОткрытьФорму(
	//		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
	//		Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
	//	);
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	//НеизвестныеШтрихкоды = Параметры;
	//
	//Если ВозвращаемыеПараметры <> Неопределено Тогда
	//	
	//	МассивШтрихкодов = Новый Массив;
	//	
	//	Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
	//		МассивШтрихкодов.Добавить(ЭлементМассива);
	//	КонецЦикла;
	//	
	//	Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
	//		МассивШтрихкодов.Добавить(ЭлементМассива);
	//	КонецЦикла;
	//	
	//	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
	//	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	//	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	//	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	//КонецЕсли;
	//
	//ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
