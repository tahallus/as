
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоставкаСервер.ЗаполнитьДеревоПараметровРасчета(ПараметрыРасчетов, Ложь);
	
	РазложитьУсловия(УсловияСтоимость, Объект.ФормулаСтоимости);
	РазложитьУсловия(УсловияСебестоимость, Объект.ФормулаСебестоимости);
	СоздатьЭлементыУсловий("УсловияСтоимость", "ГруппаРасчетСтоимостиУсловия");
	СоздатьЭлементыУсловий("УсловияСебестоимость", "ГруппаРасчетСебестоимостиУсловия");
	
	Тип = Справочники.ТипВсеСсылки();
	Тип = Новый ОписаниеТипов(Тип, Документы.ТипВсеСсылки().Типы());
	Тип = Новый ОписаниеТипов(Тип, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	Тип = Новый ОписаниеТипов(Тип, Перечисления.ТипВсеСсылки().Типы());
	Тип = Новый ОписаниеТипов(Тип, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипВсеСсылки = Тип;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ФормулаСтоимости = "0";
		Объект.ФормулаСебестоимости = "0";
		Если ТипЗнч(Параметры.ЗначенияЗаполнения)=Тип("Структура") 
			И Параметры.ЗначенияЗаполнения.Свойство("СпособДоставки")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.СпособДоставки) Тогда
			Объект.ДоступныеСпособыДоставки.Очистить();
			Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Параметры.ЗначенияЗаполнения.СпособДоставки;
		КонецЕсли; 
		ВывестиДоступныеСпособыДоставки();
		ВывестиДоступныеСпособыОтгрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВывестиДоступныеСпособыДоставки();
	ВывестиДоступныеСпособыОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеУказаныДоступныеСпособыДоставки() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Укажите доступные способы доставки.'"),,
		"ПунктВыдачи");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоступныеСпособыДоставки();
	ЗаполнитьДоступныеСпособыОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ФормулаКорректна("УсловияСтоимость") ИЛИ НЕ ФормулаКорректна("УсловияСебестоимость") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ЗначенияФормулы.Очистить();
	Если ТекущийОбъект.ВариантУчета=ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.ДоставкаСОплатой") Тогда
		ТекущийОбъект.ФормулаСтоимости = СформироватьФормулу(ТекущийОбъект, УсловияСтоимость);
		Если ПустаяСтрока(ТекущийОбъект.ФормулаСтоимости) Тогда
			ТекущийОбъект.ФормулаСтоимости = "0";
		КонецЕсли; 
	Иначе
		ТекущийОбъект.ФормулаСтоимости = "0";
	КонецЕсли; 
	ТекущийОбъект.ФормулаСебестоимости = СформироватьФормулу(ТекущийОбъект, УсловияСебестоимость);
	Если ПустаяСтрока(ТекущийОбъект.ФормулаСебестоимости) Тогда
		ТекущийОбъект.ФормулаСебестоимости = "0";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Запись_ПараметрыРасчетовДоставки" Тогда
		ОбновитьДеревоПараметровРасчета();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособУчетаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_УсловияСтоимостьПриИзменении(Элемент)
	
	ОсноваИмени = "УсловияСтоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИмяЭлемента = Лев(Элемент.Имя, Позиция-1);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	СтрокаТабличнойЧасти = УсловияСтоимость[ИндексСтроки];
	ОбновитьЭлементыСтрокиУсловий(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ИмяЭлемента, ОсноваИмени); 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСтоимостьПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.ПараметрыРасчетовДоставки.Форма.ФормаВыбораПараметра", , Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСтоимостьПараметрОчистка(Элемент, СтандартнаяОбработка)
	
	ОсноваИмени = "УсловияСтоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	УсловияСтоимость.Удалить(ИндексСтроки);
	ОбновитьЭлементыУсловий("УсловияСтоимость", "ГруппаРасчетСтоимостиУсловия");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСтоимостьФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОсноваИмени = "УсловияСтоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИмяЭлемента = Лев(Элемент.Имя, Позиция-1);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	СтрокаТабличнойЧасти = УсловияСтоимость[ИндексСтроки];
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуСтоимостьЗавершение", ЭтотОбъект, ИндексСтроки);
	ОткрытьФорму("Справочник.СлужбыДоставки.Форма.ФормаРедактированияФормул", СтруктураОткрытия(СтрокаТабличнойЧасти.Формула), ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормулуСтоимостьЗавершение(Результат, ИндексСтроки) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = УсловияСтоимость[ИндексСтроки];
	СтрокаТабличнойЧасти.Формула = Результат.ТекстФормулы;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСебестоимостьПриИзменении(Элемент)
	
	ОсноваИмени = "УсловияСебестоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИмяЭлемента = Лев(Элемент.Имя, Позиция-1);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	СтрокаТабличнойЧасти = УсловияСебестоимость[ИндексСтроки];
	ОбновитьЭлементыСтрокиУсловий(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ИмяЭлемента, ОсноваИмени); 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСебестоимостьПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.ПараметрыРасчетовДоставки.Форма.ФормаВыбораПараметра", , Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСебестоимостьПараметрОчистка(Элемент, СтандартнаяОбработка)
	
	ОсноваИмени = "УсловияСебестоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	УсловияСебестоимость.Удалить(ИндексСтроки);
	ОбновитьЭлементыУсловий("УсловияСебестоимость", "ГруппаРасчетСебестоимостиУсловия");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УсловияСебестоимостьФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОсноваИмени = "УсловияСебестоимость";
	Позиция = Найти(Элемент.Имя, ОсноваИмени);
	ИмяЭлемента = Лев(Элемент.Имя, Позиция-1);
	ИндексСтроки = Число(Сред(Элемент.Имя, Позиция+СтрДлина(ОсноваИмени)));
	
	СтрокаТабличнойЧасти = УсловияСебестоимость[ИндексСтроки];
	Оповещение = Новый ОписаниеОповещения("ИзменитьФормулуСебестоимостьЗавершение", ЭтотОбъект, ИндексСтроки);
	ОткрытьФорму("Справочник.СлужбыДоставки.Форма.ФормаРедактированияФормул", СтруктураОткрытия(СтрокаТабличнойЧасти.Формула), ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормулуСебестоимостьЗавершение(Результат, ИндексСтроки) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = УсловияСебестоимость[ИндексСтроки];
	СтрокаТабличнойЧасти.Формула = Результат.ТекстФормулы;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура РасчетДоставкиЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("Заголовок, КлючПодсказки", 
		"Расчет стоимости и себестоимости доставки",
		"Доставка_ПримерыРасчетаСтоимостиИСебестоимостиДоставки");
	
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия, , УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьУсловиеСтоимость(Команда)
	
	СтрокаТабличнойЧасти = УсловияСтоимость.Добавить();
	СоздатьЭлементыУсловий("УсловияСтоимость", "ГруппаРасчетСтоимостиУсловия");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловиеСебестоимость(Команда)
	
	СтрокаТабличнойЧасти = УсловияСебестоимость.Добавить();
	СоздатьЭлементыУсловий("УсловияСебестоимость", "ГруппаРасчетСебестоимостиУсловия");
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторЯндекса) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИдентификаторЯндекса", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоступныеСпособыОтгрузки", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИдентификаторЯндекса", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоступныеСпособыОтгрузки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Видимость", Истина);
	КонецЕсли;
	
	Если Объект.ВариантУчета=ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.БесплатнаяДоставка") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Доступность", Истина);
	ИначеЕсли Объект.ВариантУчета=ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.ВозмещениеСтоимости") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Доступность", Истина);
	ИначеЕсли Объект.ВариантУчета=ПредопределенноеЗначение("Перечисление.ВариантыУчетаДоставки.ДоставкаСОплатой") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Доступность", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСтоимости", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасчетСебестоимости", "Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОткрытия(Формула)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("ТекстФормулы", Формула);
	Значения = Новый СписокЗначений;
	Для каждого СтрокаТабличнойЧасти Из Объект.ЗначенияФормулы Цикл
		Значения.Добавить(СтрокаТабличнойЧасти.Значение, СтрокаТабличнойЧасти.Идентификатор);
	КонецЦикла; 
	СтруктураОткрытия.Вставить("ЗначенияФормулы", Значения);
	Возврат СтруктураОткрытия;
	
КонецФункции

&НаСервере
Функция ФормулаКорректна(ИмяРеквизита)
	
	Условия = ЭтаФорма[ИмяРеквизита];
	
	ТаблицаУсловий = Условия.Выгрузить(, "Параметр, ВидСравнения, Значение");
	ТаблицаУсловий.Колонки.Добавить("Количество");
	Для каждого Стр Из ТаблицаУсловий Цикл
		Если ПустаяСтрока(Стр.Параметр) Тогда
			Стр.ВидСравнения = Неопределено;
			Стр.Значение = Неопределено;
		ИначеЕсли Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено
			ИЛИ Стр.ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Стр.Значение = Неопределено;
		КонецЕсли;
		Стр.Количество = 1;
	КонецЦикла;
	ТаблицаУсловий.Свернуть("Параметр, ВидСравнения, Значение", "Количество");
	Для каждого Стр Из ТаблицаУсловий Цикл
		Если Стр.Количество>1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Дублирование условий'"));
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьФормулу(ТекущийОбъект, Условия)
	
	Если Условия.Количество()=1 И ПустаяСтрока(Условия[0].Параметр) Тогда
		ТекстФормулы = Условия[0].Формула;
	Иначе
		ТекстФормулы = "%1";
		БезУсловия = "";
		Для каждого СтрокаТабличнойЧасти Из Условия Цикл
			Условие = "";
			Если ПустаяСтрока(СтрокаТабличнойЧасти.Параметр) И ПустаяСтрока(БезУсловия) Тогда
				БезУсловия = СтрокаТабличнойЧасти.Формула;
				Продолжить;
			КонецЕсли;
			Если (СтрокаТабличнойЧасти.Тип.СодержитТип(Тип("Число")) 
				ИЛИ СтрокаТабличнойЧасти.Тип.СодержитТип(Тип("Дата")))
				И СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит Тогда
				// Условие с границами
				Условие = СтрШаблон("[%1] >= %2 И [%1] < %3",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.ЗначениеОт, "0"),
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.ЗначениеДо, "0"));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Заполнено Тогда 
				Условие = СтрШаблон("ЗначениеЗаполнено([%1])",
				СтрокаТабличнойЧасти.Параметр);
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда 
				Условие = СтрШаблон("НЕ ЗначениеЗаполнено([%1])",
				СтрокаТабличнойЧасти.Параметр);
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит Тогда 
				Условие = СтрШаблон("Найти([%1], %2) <> 0",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение, """"""));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит Тогда 
				Условие = СтрШаблон("Найти([%1], %2) = 0",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение, """"""));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно Тогда
				Условие = СтрШаблон("[%1] = %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно Тогда
				Условие = СтрШаблон("[%1] <> %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
				Условие = СтрШаблон("[%1] > %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				Условие = СтрШаблон("[%1] >= %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
				Условие = СтрШаблон("[%1] < %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				Условие = СтрШаблон("[%1] <= %2",
				СтрокаТабличнойЧасти.Параметр,
				ПредставлениеЗначения(ТекущийОбъект, СтрокаТабличнойЧасти.Значение));
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ТипЗнч(СтрокаТабличнойЧасти.Значение)=Тип("СписокЗначений") Тогда
					Значения = СтрокаТабличнойЧасти.Значение.ВыгрузитьЗначения();
				Иначе
					Значения = Новый Массив;
					Значения.Добавить(СтрокаТабличнойЧасти.Значение);
				КонецЕсли; 
				Условие = "";
				Для каждого Значение Из Значения Цикл
					Условие = Условие + ?(ПустаяСтрока(Условие), "", " ИЛИ ")+
					СтрШаблон("[%1] = %2",
					СтрокаТабличнойЧасти.Параметр,
					ПредставлениеЗначения(ТекущийОбъект, Значение));
				КонецЦикла; 
			ИначеЕсли СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				Если ТипЗнч(СтрокаТабличнойЧасти.Значение)=Тип("СписокЗначений") Тогда
					Значения = СтрокаТабличнойЧасти.Значение.ВыгрузитьЗначения();
				Иначе
					Значения = Новый Массив;
					Значения.Добавить(СтрокаТабличнойЧасти.Значение);
				КонецЕсли; 
				Условие = "";
				Для каждого Значение Из Значения Цикл
					Условие = Условие + ?(ПустаяСтрока(Условие), "", " И ")+
					СтрШаблон("[%1] <> %2",
					СтрокаТабличнойЧасти.Параметр,
					ПредставлениеЗначения(ТекущийОбъект, Значение));
				КонецЦикла; 
			КонецЕсли;
			Если ПустаяСтрока(Условие) И ПустаяСтрока(БезУсловия) Тогда
				БезУсловия = СтрокаТабличнойЧасти.Формула;
				Продолжить;
			КонецЕсли;
			Если ПустаяСтрока(Условие) Тогда
				Продолжить;
			КонецЕсли;
			Шаблон = СтрШаблон("?(%1, %2, %3)",
			Условие,
			СтрокаТабличнойЧасти.Формула,
			"%1");
			ТекстФормулы = СтрШаблон(ТекстФормулы,
			Шаблон);
		КонецЦикла;
		Если НЕ ПустаяСтрока(БезУсловия) Тогда
			ТекстФормулы = СтрШаблон(ТекстФормулы,
			БезУсловия);
		Иначе
			ТекстФормулы = СтрШаблон(ТекстФормулы,
			"0");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ТекстФормулы;
	
КонецФункции

&НаСервере
Функция ПредставлениеЗначения(ТекущийОбъект, Значение, ПустоеЗначение = "Неопределено")
	
	Если ТипЗнч(Значение)=Тип("Число") Тогда
		Возврат Формат(Значение, "ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Возврат "'"+Формат(Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'")+"'";
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
		Возврат """"+Значение+"""";
	ИначеЕсли ЭтоСсылка(ТипЗнч(Значение)) Тогда 
		Возврат "["+ИмяПоЗначению(ТекущийОбъект, Значение)+"]";
	Иначе 
		Возврат ПустоеЗначение;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ЭтоСсылка(Тип)
	
	Возврат ТипВсеСсылки.СодержитТип(Тип);
	
КонецФункции

&НаСервере
Процедура РазложитьУсловия(Условия, ТекстФормулы)
	
	Условия.Очистить();
	
	Текст = СокрЛП(ТекстФормулы);
	Если Лев(Текст, 2)="?(" Тогда
		ВводМастером = Истина;
		Пока Лев(Текст, 2)="?(" Цикл
			Составляющие = СоставляющиеУсловия(Текст);
			Если Составляющие.Количество()<3 Тогда
				ВводМастером = Ложь;
				Условия.Очистить();
				Текст = СокрЛП(ТекстФормулы);
				Прервать;
			КонецЕсли; 
			Текст = Составляющие.ЗначениеЛожь;
			СтрокаТабличнойЧасти = Условия.Добавить();
			Ошибка = Ложь;
			УсловиеИзСтроки(СтрокаТабличнойЧасти, Составляющие.Условие, Ошибка);
			
			ОписаниеПараметра = ОписаниеПараметра(СтрокаТабличнойЧасти.Параметр);
			СтрокаТабличнойЧасти.Тип = ОписаниеПараметра.Тип;
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(СтрокаТабличнойЧасти.Тип, Тип("Число")) 
				ИЛИ ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(СтрокаТабличнойЧасти.Тип, Тип("Дата")) Тогда
				Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(СтрокаТабличнойЧасти.Тип, Тип("Дата")) Тогда
					Если ТипЗнч(СтрокаТабличнойЧасти.Значение)=Тип("Строка") И Найти(СтрокаТабличнойЧасти.Значение, "'")>0 Тогда
						СтрокаТабличнойЧасти.Значение = ДатаИзСтроки(ТекстМеждуСтроками(СтрокаТабличнойЧасти.Значение, "'", "'"));
					КонецЕсли; 
				КонецЕсли; 
				СтрокаТабличнойЧасти.Значение = СтрокаТабличнойЧасти.Тип.ПривестиЗначение(СтрокаТабличнойЧасти.Значение);
				СтрокаТабличнойЧасти.ЗначениеОт = СтрокаТабличнойЧасти.Тип.ПривестиЗначение(СтрокаТабличнойЧасти.ЗначениеОт);
				СтрокаТабличнойЧасти.ЗначениеДо = СтрокаТабличнойЧасти.Тип.ПривестиЗначение(СтрокаТабличнойЧасти.ЗначениеДо);
			КонецЕсли; 
			
			Если Ошибка Тогда
				ВводМастером = Ложь;
				Условия.Очистить();
				Текст = СокрЛП(ТекстФормулы);
				Прервать;
			КонецЕсли;
			СтрокаТабличнойЧасти.Формула = СокрЛП(Составляющие.ЗначениеИстина);
		КонецЦикла;
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Текст) ИЛИ Условия.Количество()=0 Тогда
		СтрокаТабличнойЧасти = Условия.Добавить();
		СтрокаТабличнойЧасти.Формула = СокрЛП(Текст);
	КонецЕсли; 
	Для каждого СтрокаТабличнойЧасти Из Условия Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Значение)=Тип("СписокЗначений") Тогда
			НовыйСписок = Новый СписокЗначений; 
			Для каждого Элемент Из СтрокаТабличнойЧасти.Значение Цикл
				НовыйСписок.Добавить(ЗначениеПоИмени(Элемент.Значение));
			КонецЦикла;
			СтрокаТабличнойЧасти.Значение = НовыйСписок;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.Значение) Тогда
			СтрокаТабличнойЧасти.Значение = ЗначениеПоИмени(СтрокаТабличнойЧасти.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоставляющиеУсловия(Знач Текст)
	
	СтекСимволов = Новый Массив;
	ТекущийСимвол = "";
	ПозицияУсловие = 0;
	ПозицияИстина = 0;
	Результат = Новый Структура;
	
	Текст = Сред(Текст, 3);
	Для ии = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, ии, 1);
		Если ТекущийСимвол="""" И НЕ Символ="""" Тогда
			Продолжить;
		ИначеЕсли Символ="""" Тогда
			ТекущийСимвол = """";
			СтекСимволов.Добавить(ТекущийСимвол);
			Продолжить;
		ИначеЕсли Символ="(" Тогда
			ТекущийСимвол = ")";
			СтекСимволов.Добавить(ТекущийСимвол);
			Продолжить;
		ИначеЕсли Символ="[" Тогда
			ТекущийСимвол = "]";
			СтекСимволов.Добавить(ТекущийСимвол);
			Продолжить;
		ИначеЕсли НЕ ПустаяСтрока(ТекущийСимвол) И Символ=ТекущийСимвол Тогда
			СтекСимволов.Удалить(СтекСимволов.Количество()-1);
			Если СтекСимволов.Количество()>0 Тогда
				ТекущийСимвол = СтекСимволов[СтекСимволов.Количество()-1];
			Иначе
				ТекущийСимвол = "";
			КонецЕсли;
			Продолжить;
		ИначеЕсли ПустаяСтрока(ТекущийСимвол) И Символ="," Тогда
			Если ПозицияУсловие=0 Тогда
				ПозицияУсловие = ии;
			ИначеЕсли ПозицияИстина=0 Тогда
				ПозицияИстина = ии;
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ПозицияУсловие>0 И ПозицияИстина>0 Тогда
		Результат.Вставить("Условие", СокрЛП(Лев(Текст, ПозицияУсловие-1)));
		Результат.Вставить("ЗначениеИстина", Сред(Текст, ПозицияУсловие+1, ПозицияИстина-ПозицияУсловие-1));
		Результат.Вставить("ЗначениеЛожь", СокрЛП(Сред(Текст, ПозицияИстина+1)));
		Результат.Вставить("ЗначениеЛожь", СокрЛП(Лев(Результат.ЗначениеЛожь, СтрДлина(Результат.ЗначениеЛожь)-1)));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаИзСтроки(Знач Строка)
	
	Строка = СтрЗаменить(Строка, " ", "");
	Строка = СтрЗаменить(Строка, ".", "");
	Строка = СтрЗаменить(Строка, ":", "");
	Строка = СтрЗаменить(Строка, "-", "");
	Строка = СтрЗаменить(Строка, "/", "");
	КорректныеСимволы = "0123456789";
	Для ии = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, ии, 1);
		Если Найти(КорректныеСимволы, Символ)=0 Тогда
			Возврат '0001-01-01';
		КонецЕсли; 
	КонецЦикла; 
	Возврат Дата(Строка);	
	
КонецФункции 

&НаСервереБезКонтекста
Процедура УсловиеИзСтроки(СтрокаТабличнойЧасти, Условие, Ошибка)
	
	// Определение вида сравнения
	ЗначенияНайдены = Ложь;
	Если Найти(Условие, " >= ")>0 И Найти(Условие, " < ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЗначениеОт = ТекстМеждуСтроками(Условие, " >= ", " И ");
		Если Найти(ЗначениеОт, "'")>0 Тогда
			// Это дата
			СтрокаТабличнойЧасти.ЗначениеОт = ДатаИзСтроки(ТекстМеждуСтроками(ЗначениеОт, "'", "'"));
		Иначе
			Попытка
				СтрокаТабличнойЧасти.ЗначениеОт = Число(СокрЛП(ЗначениеОт));
			Исключение
			    СтрокаТабличнойЧасти.ЗначениеОт = 0;
			КонецПопытки; 
		КонецЕсли;
		Остаток = Сред(Условие, Найти(Условие, " И ")+3);
		ЗначениеДо = Сред(Остаток, Найти(Остаток, " < ")+3);
		Если Найти(ЗначениеДо, "'")>0 Тогда
			// Это дата
			СтрокаТабличнойЧасти.ЗначениеДо = ДатаИзСтроки(ТекстМеждуСтроками(ЗначениеДо, "'", "'"));
		Иначе
			Попытка
				СтрокаТабличнойЧасти.ЗначениеДо = Число(СокрЛП(ЗначениеДо));
			Исключение
			    СтрокаТабличнойЧасти.ЗначениеДо = 0;
			КонецПопытки; 
		КонецЕсли;
	ИначеЕсли Найти(Условие, " ИЛИ ")>0 Тогда
		СтрокаТабличнойЧасти.Значение = Новый СписокЗначений;
		Остаток = Условие;
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Позиция = Найти(Остаток, " = ");
		Пока Позиция>0 Цикл
			Остаток = Сред(Остаток, Позиция+3);
			ПозицияКонец = Найти(Остаток, " ИЛИ ");
			Если ПозицияКонец=0 Тогда
				Значение = СокрЛП(Остаток);
				Остаток = "";
			Иначе
				Значение = Лев(Остаток, ПозицияКонец-1);
				Остаток = Сред(Остаток, ПозицияКонец+5);
			КонецЕсли;
			СтрокаТабличнойЧасти.Значение.Добавить(Значение);
			Позиция = Найти(Остаток, " = ");
		КонецЦикла; 
	ИначеЕсли Найти(Условие, " И ")>0 Тогда
		СтрокаТабличнойЧасти.Значение = Новый СписокЗначений;
		Остаток = Условие;
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		Позиция = Найти(Остаток, " <> ");
		Пока Позиция>0 Цикл
			Остаток = Сред(Остаток, Позиция+4);
			ПозицияКонец = Найти(Остаток, " И ");
			Если ПозицияКонец=0 Тогда
				Значение = СокрЛП(Остаток);
				Остаток = "";
			Иначе
				Значение = Лев(Остаток, ПозицияКонец-1);
				Остаток = Сред(Остаток, ПозицияКонец+3);
			КонецЕсли;
			СтрокаТабличнойЧасти.Значение.Добавить(Значение);
			Позиция = Найти(Остаток, " <> ");
		КонецЦикла; 
	ИначеЕсли Найти(Условие, " = ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Позиция = Найти(Условие, " = ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+3);
	ИначеЕсли Найти(Условие, " <> ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		Позиция = Найти(Условие, " <> ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+4);
	ИначеЕсли Найти(Условие, " > ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		Позиция = Найти(Условие, " > ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+3);
	ИначеЕсли Найти(Условие, " >= ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		Позиция = Найти(Условие, " >= ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+4);
	ИначеЕсли Найти(Условие, " < ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		Позиция = Найти(Условие, " < ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+3);
	ИначеЕсли Найти(Условие, " <= ")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		Позиция = Найти(Условие, " <= ");
		СтрокаТабличнойЧасти.Значение = Сред(Условие, Позиция+4);
	ИначеЕсли Найти(Условие, "НЕ ЗначениеЗаполнено(")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли Найти(Условие, "ЗначениеЗаполнено(")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли Найти(Условие, "Найти(")>0 И Найти(Условие, " = 0")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
		СтрокаТабличнойЧасти.Значение = ТекстМеждуСтроками(Условие, ", """, """) =");
	ИначеЕсли Найти(Условие, "Найти(")>0 Тогда
		СтрокаТабличнойЧасти.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		СтрокаТабличнойЧасти.Значение = ТекстМеждуСтроками(Условие, ", """, """) =");
	Иначе
		Возврат;
	КонецЕсли;
	
	// Определение параметра
	СтрокаТабличнойЧасти.Параметр = ТекстМеждуСтроками(Условие, "[", "]");
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ТекстМеждуСтроками(Текст, СтрокаНачало, СтрокаКонец)
	
	ПозицияНачало = СтрНайти(Текст, СтрокаНачало);
	ПозицияКонец = СтрНайти(Текст, СтрокаКонец, , ПозицияНачало+1);
	Если ПозицияКонец=0 Тогда
		Возврат Сред(Текст, ПозицияНачало+СтрДлина(СтрокаНачало));
	Иначе
		Возврат Сред(Текст, ПозицияНачало+СтрДлина(СтрокаНачало), ПозицияКонец-ПозицияНачало-СтрДлина(СтрокаНачало));
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ЗначениеПоИмени(Имя)
	
	Если Найти(Имя, "[")=0 ИЛИ Найти(Имя, "]")=0 Тогда
		Возврат Имя;
	КонецЕсли; 	
	
	ИмяПараметра = ТекстМеждуСтроками(Имя, "[", "]");
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИмяПараметра);
	Строки = Объект.ЗначенияФормулы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0].Значение;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ИмяПоЗначению(ТекущийОбъект, Значение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Значение", Значение);
	Строки = ТекущийОбъект.ЗначенияФормулы.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		СтрокаТабличнойЧасти = ТекущийОбъект.ЗначенияФормулы.Добавить();
		СтрокаТабличнойЧасти.Значение = Значение;
		СтрокаТабличнойЧасти.Идентификатор = СтрокуВИдентификатор(СокрЛП(Значение));
		Возврат СтрокаТабличнойЧасти.Идентификатор;
	Иначе
		Возврат Строки[0].Идентификатор;
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВИдентификатор(Текст)
	
	Разделители     =  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Результат = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(Текст) Цикл
	  	Символ = Сред(Текст, НомСимвола,1);
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
		   БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
		   БылСпецСимвол = Ложь;
		   Результат = Результат + ВРег(Символ);
		Иначе
		   Результат = Результат + Символ;          
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа)
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			
			УдалитьЭлементыРекурсивно(Элемент);
			
		КонецЕсли;
		
		ЭлементыКУдалению.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыУсловий(ОсноваИмени, ИмяГруппы)
	
	УдалитьЭлементыРекурсивно(Элементы[ИмяГруппы]);
	Для каждого Стр Из ЭтотОбъект[ОсноваИмени] Цикл
		Стр.ИмяЭлемента = "";
	КонецЦикла; 
	СоздатьЭлементыУсловий(ОсноваИмени, ИмяГруппы);
	
КонецПроцедуры
 
&НаСервере
Процедура СоздатьЭлементыУсловий(ОсноваИмени, ИмяГруппы)
	
	Условия = ЭтотОбъект[ОсноваИмени];
	ГруппаУсловий = Элементы[ИмяГруппы];
	
	Для каждого СтрокаТабличнойЧасти Из Условия Цикл
		
		Индекс = Условия.Индекс(СтрокаТабличнойЧасти);
		ИндексСтрокой = Формат(Индекс, "ЧН=0; ЧГ=0");
		Если ПустаяСтрока(СтрокаТабличнойЧасти.ИмяЭлемента) Тогда
			СтрокаТабличнойЧасти.ИмяЭлемента = ОсноваИмени+ИндексСтрокой;
		КонецЕсли;
		
		Группа = Элементы.Найти("Группа"+СтрокаТабличнойЧасти.ИмяЭлемента);
		Если Группа<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Группа = Элементы.Добавить("Группа"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ГруппаФормы"), ГруппаУсловий);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ЭлементНумератор = Элементы.Добавить("Нумератор"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		ЭлементНумератор.Вид = ВидДекорацииФормы.Надпись;
		ЭлементНумератор.Заголовок = Строка(Индекс+1)+".";
		
		ЭлементПараметр = Элементы.Добавить("Параметр"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементПараметр.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПараметр.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].Параметр";
		ЭлементПараметр.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементПараметр.РедактированиеТекста = Ложь;
		ЭлементПараметр.КнопкаВыбора = Истина;
		ЭлементПараметр.КнопкаОчистки = Истина;
		ЭлементПараметр.ПодсказкаВвода = НСтр("ru = 'Без условий'");
		ЭлементПараметр.Ширина = 15;
		ЭлементПараметр.УстановитьДействие("НачалоВыбора", "Подключаемый_"+ОсноваИмени+"ПараметрНачалоВыбора");
		ЭлементПараметр.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементПараметр.УстановитьДействие("Очистка", "Подключаемый_"+ОсноваИмени+"ПараметрОчистка");
		ЭлементПараметр.АвтоМаксимальнаяШирина = Ложь;
		ЭлементПараметр.МаксимальнаяШирина = ЭлементПараметр.Ширина+5;
		
		ЭлементВидСравнения = Элементы.Добавить("ВидСравнения"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементВидСравнения.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].ВидСравнения";
		ЭлементВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементВидСравнения.РедактированиеТекста = Ложь;
		ЭлементВидСравнения.РежимВыбораИзСписка = Истина;
		ЭлементВидСравнения.ПодсказкаВвода = НСтр("ru = '-'");
		ЭлементВидСравнения.Ширина = 10;
		ЭлементВидСравнения.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементВидСравнения.АвтоМаксимальнаяШирина = Ложь;
		ЭлементВидСравнения.МаксимальнаяШирина = ЭлементВидСравнения.Ширина;
		
		ЭлементЗначение = Элементы.Добавить("Значение"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементЗначение.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначение.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].Значение";
		ЭлементЗначение.КнопкаОткрытия = Ложь;
		ЭлементЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначение.Ширина = 20;
		ЭлементЗначение.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементЗначение.АвтоМаксимальнаяШирина = Ложь;
		ЭлементЗначение.МаксимальнаяШирина = ЭлементЗначение.Ширина;
		
		ГруппаЗначенияОтДо = Элементы.Добавить("ГруппаЗначенияОтДо"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ГруппаФормы"), Группа);
		ГруппаЗначенияОтДо.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗначенияОтДо.ОтображатьЗаголовок = Ложь;
		ГруппаЗначенияОтДо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЗначенияОтДо.Ширина = 20;
		ГруппаЗначенияОтДо.РастягиватьПоГоризонтали = Неопределено;
		ГруппаЗначенияОтДо.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
		
		ЭлементЗначениеОт = Элементы.Добавить("ЗначениеОт"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), ГруппаЗначенияОтДо);
		ЭлементЗначениеОт.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначениеОт.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].ЗначениеОт";
		ЭлементЗначениеОт.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначениеОт.РастягиватьПоГоризонтали = Истина;
		ЭлементЗначениеОт.Ширина = 9;
		ЭлементЗначениеОт.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементЗначениеОт.АвтоМаксимальнаяШирина = Ложь;
		ЭлементЗначениеОт.МаксимальнаяШирина = ЭлементЗначениеОт.Ширина;
		
		ЭлементЗначениеДо = Элементы.Добавить("ЗначениеДо"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), ГруппаЗначенияОтДо);
		ЭлементЗначениеДо.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементЗначениеДо.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].ЗначениеДо";
		ЭлементЗначениеДо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементЗначениеДо.РастягиватьПоГоризонтали = Истина;
		ЭлементЗначениеДо.Ширина = 9;
		ЭлементЗначениеДо.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементЗначениеДо.АвтоМаксимальнаяШирина = Ложь;
		ЭлементЗначениеДо.МаксимальнаяШирина = ЭлементЗначениеДо.Ширина;
		
		ЭлементФормула = Элементы.Добавить("Формула"+СтрокаТабличнойЧасти.ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементФормула.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормула.ПутьКДанным = ОсноваИмени+"["+ИндексСтрокой+"].Формула";
		ЭлементФормула.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормула.ПодсказкаВвода = НСтр("ru = 'Формула'");
		ЭлементФормула.Ширина = 40;
		ЭлементФормула.РастягиватьПоГоризонтали = Ложь;
		ЭлементФормула.УстановитьДействие("ПриИзменении", "Подключаемый_"+ОсноваИмени+"ПриИзменении");
		ЭлементФормула.УстановитьДействие("НачалоВыбора", "Подключаемый_"+ОсноваИмени+"ФормулаНачалоВыбора");
		ЭлементФормула.РедактированиеТекста = Ложь;
		ЭлементФормула.КнопкаВыбора = Истина;
		
		ОбновитьЭлементыСтрокиУсловий(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), , ОсноваИмени);
		
	КонецЦикла;
	
	ии = Условия.Количество();
	Пока Истина Цикл
		ИндексСтрокой = Формат(ии, "ЧН=0; ЧГ=0");
		ИмяЭлемента = "Условие"+ИндексСтрокой;
		Группа = Элементы.Найти("Группа"+ИмяЭлемента);
		Если Группа=Неопределено Тогда
			Прервать;
		Иначе
			УдалитьЭлементыРекурсивно(Группа);
		КонецЕсли;
		ии = ии+1;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыСтрокиУсловий(ИдентификаторСтроки, ИзмененныйЭлемент = "", ОсноваИмени)
	
	СтрокаТабличнойЧасти = ЭтотОбъект[ОсноваИмени].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрЗаполнен = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Параметр);
	ВидСравненияЗаполнен = ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидСравнения);
	                                     
	ЭлементПараметр = Элементы["Параметр"+СтрокаТабличнойЧасти.ИмяЭлемента];
	ЭлементВидСравнения = Элементы["ВидСравнения"+СтрокаТабличнойЧасти.ИмяЭлемента];
	ЭлементЗначение = Элементы["Значение"+СтрокаТабличнойЧасти.ИмяЭлемента];
	ЭлементЗначениеОт = Элементы["ЗначениеОт"+СтрокаТабличнойЧасти.ИмяЭлемента];
	ЭлементЗначениеДо = Элементы["ЗначениеДо"+СтрокаТабличнойЧасти.ИмяЭлемента];
	
	ЭлементПараметр.Ширина = 15;
	ЭлементПараметр.МаксимальнаяШирина = ЭлементПараметр.Ширина+5;
	
	Если НЕ ПараметрЗаполнен Тогда
		
		ЭлементВидСравнения.Видимость = Ложь;
		ЭлементЗначение.Видимость = Ложь;
		ЭлементЗначениеОт.Видимость = Ложь;
		ЭлементЗначениеДо.Видимость = Ложь;
		
		ЭлементПараметр.Ширина = ЭлементПараметр.Ширина+34;
		ЭлементПараметр.МаксимальнаяШирина = ЭлементПараметр.Ширина+5;
		
	Иначе
		
		ЭлементВидСравнения.Видимость = Истина;
		
		Если ИзмененныйЭлемент="Параметр" ИЛИ ПустаяСтрока(ИзмененныйЭлемент) Тогда
			ОписаниеПараметра = ОписаниеПараметра(СтрокаТабличнойЧасти.Параметр);
			СтрокаТабличнойЧасти.Тип = ОписаниеПараметра.Тип;
			Если ЗначениеЗаполнено(ОписаниеПараметра.ОтборПоВладельцу) Тогда
				НовыеПараметрыВыбора = Новый Массив;
				ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПараметра.ОтборПоВладельцу);
				НовыеПараметрыВыбора.Добавить(ПараметрВыбора);
				ЭлементЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
			Иначе
				ЭлементЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
			КонецЕсли; 
			ЭлементЗначениеОт.ОграничениеТипа = СтрокаТабличнойЧасти.Тип;
			ЭлементЗначениеДо.ОграничениеТипа = СтрокаТабличнойЧасти.Тип;
		КонецЕсли;
		
		ЭтоЧисло = СтрокаТабличнойЧасти.Тип.СодержитТип(Тип("Число"));
		ЭтоДата = СтрокаТабличнойЧасти.Тип.СодержитТип(Тип("Дата"));
		ЭтоСтрока = СтрокаТабличнойЧасти.Тип.СодержитТип(Тип("Строка"));
		
		Если ИзмененныйЭлемент="Параметр" ИЛИ ПустаяСтрока(ИзмененныйЭлемент) Тогда
			ЭлементВидСравнения.СписокВыбора.Очистить();
			Если ЭтоСтрока Тогда
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Равно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Содержит);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.НеСодержит);
			КонецЕсли;
			Если ЭтоЧисло Тогда
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Содержит, НСтр("ru = 'В пределах'"));
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Равно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Больше);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Меньше);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			КонецЕсли;
			Если ЭтоДата Тогда
				Если СтрокаТабличнойЧасти.Тип.КвалификаторыДаты.ЧастиДаты=ЧастиДаты.Время Тогда
					ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Содержит, НСтр("ru = 'В промежутке'"));
				Иначе
					ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Содержит, НСтр("ru = 'За период'"));
				КонецЕсли; 
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Больше);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Меньше);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
			КонецЕсли;
			Если ЭлементВидСравнения.СписокВыбора.Количество()=0 Тогда
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Равно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.НеРавно);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.ВСписке);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.НеВСписке);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.Заполнено);
				ДобавитьВидСравнения(ЭлементВидСравнения, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидСравнения) 
				ИЛИ ЭлементВидСравнения.СписокВыбора.НайтиПоЗначению(СтрокаТабличнойЧасти.ВидСравнения)=Неопределено Тогда
				СтрокаТабличнойЧасти.ВидСравнения = ЭлементВидСравнения.СписокВыбора[0].Значение;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ИзмененныйЭлемент="Параметр" ИЛИ ИзмененныйЭлемент="ВидСравнения" ИЛИ ПустаяСтрока(ИзмененныйЭлемент) Тогда
			ВыводитьЗначения = СтрокаТабличнойЧасти.ВидСравнения<>ВидСравненияКомпоновкиДанных.Заполнено И СтрокаТабличнойЧасти.ВидСравнения<>ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементВидСравнения.Ширина = 10;
			Если НЕ ВыводитьЗначения Тогда
				ЭлементВидСравнения.Ширина = ЭлементВидСравнения.Ширина+21;
			КонецЕсли; 
			ЭлементВидСравнения.МаксимальнаяШирина = ЭлементВидСравнения.Ширина;
			ВыводитьГраницы = (ЭтоЧисло ИЛИ ЭтоДата) И СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементЗначение.Видимость = ВидСравненияЗаполнен И Не ВыводитьГраницы И ВыводитьЗначения;
			ЭлементЗначениеОт.Видимость = ВидСравненияЗаполнен И ВыводитьГраницы;
			ЭлементЗначениеДо.Видимость = ВидСравненияЗаполнен И ВыводитьГраницы;
			Если НЕ ВыводитьГраницы И СтрокаТабличнойЧасти.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ЭлементЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
			Иначе
				ЭлементЗначение.ОграничениеТипа = СтрокаТабличнойЧасти.Тип;
				Если ВыводитьГраницы Тогда
					Если ЭтоДата И СтрокаТабличнойЧасти.Тип.КвалификаторыДаты.ЧастиДаты=ЧастиДаты.Время Тогда
						ЭлементЗначениеОт.ФорматРедактирования = "ДФ=ЧЧ:мм:сс";
						ЭлементЗначениеДо.ФорматРедактирования = "ДФ=ЧЧ:мм:сс";
					ИначеЕсли ЭтоДата И СтрокаТабличнойЧасти.Тип.КвалификаторыДаты.ЧастиДаты=ЧастиДаты.Дата Тогда
						ЭлементЗначениеОт.ФорматРедактирования = "ДЛФ=D";
						ЭлементЗначениеДо.ФорматРедактирования = "ДЛФ=D";
					Иначе
						ЭлементЗначениеОт.ФорматРедактирования = "";
						ЭлементЗначениеДо.ФорматРедактирования = "";
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидСравнения(Элемент, ВидСравнения, Представление = "")
	
	Если Элемент.СписокВыбора.НайтиПоЗначению(ВидСравнения)=Неопределено Тогда
		Элемент.СписокВыбора.Добавить(ВидСравнения, Представление);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПараметра(Идентификатор)
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", Новый ОписаниеТипов);
	Результат.Вставить("ОтборПоВладельцу", Неопределено);
	Для каждого СтрокаДерева Из ПараметрыРасчетов.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ПолучитьЭлементы().Количество()>0 Тогда
			Для каждого ПодстрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
				Если ПодстрокаДерева.Идентификатор=Идентификатор Тогда
					Результат.Вставить("Тип", ПодстрокаДерева.Тип);
					Результат.Вставить("ОтборПоВладельцу", ПодстрокаДерева.ОтборПоВладельцу);
					Возврат Результат;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Если СтрокаДерева.Идентификатор=Идентификатор Тогда
				Результат.Вставить("Тип", СтрокаДерева.Тип);
				Результат.Вставить("ОтборПоВладельцу", СтрокаДерева.ОтборПоВладельцу);
				Возврат Результат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВывестиДоступныеСпособыДоставки()
	
	ПунктВыдачи = Ложь;
	Курьер = Ложь;
	Почта = Ложь;
	
	Для Каждого ТекСтрока Из Объект.ДоступныеСпособыДоставки Цикл
		
		Если ТекСтрока.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи Тогда
			ПунктВыдачи = Истина;
		ИначеЕсли ТекСтрока.СпособДоставки = Перечисления.СпособыДоставки.Курьер Тогда
			Курьер = Истина;
		ИначеЕсли ТекСтрока.СпособДоставки = Перечисления.СпособыДоставки.Почта Тогда
			Почта = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДоступныеСпособыОтгрузки()
	
	ПередатьКурьеруСлужбыДоставки = Ложь;
	ПередатьКурьеруЕдиногоСклада = Ложь;
	СамостоятельноПривезтиНаЕдиныйСклад = Ложь;
	СамостоятельноПривезтиНаСкладСлужбыДоставки = Ложь;
	
	Для Каждого ТекСтрока Из Объект.ДоступныеСпособыОтгрузки Цикл
		
		Если ТекСтрока.СпособОтгрузки = Перечисления.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки Тогда
			ПередатьКурьеруСлужбыДоставки = Истина;
		ИначеЕсли ТекСтрока.СпособОтгрузки = Перечисления.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада Тогда
			ПередатьКурьеруЕдиногоСклада = Истина;
		ИначеЕсли ТекСтрока.СпособОтгрузки = Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад Тогда
			СамостоятельноПривезтиНаЕдиныйСклад = Истина;
		ИначеЕсли ТекСтрока.СпособОтгрузки = Перечисления.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки Тогда
			СамостоятельноПривезтиНаСкладСлужбыДоставки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеСпособыДоставки()
	
	Объект.ДоступныеСпособыДоставки.Очистить();
	
	Если ПунктВыдачи Тогда
		СтрокаПунктВыдачи = Объект.ДоступныеСпособыДоставки.Добавить();
		СтрокаПунктВыдачи.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи");
	КонецЕсли;
	
	Если Курьер Тогда
		СтрокаКурьер = Объект.ДоступныеСпособыДоставки.Добавить();
		СтрокаКурьер.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер");
	КонецЕсли;
	
	Если Почта Тогда
		СтрокаПочта = Объект.ДоступныеСпособыДоставки.Добавить();
		СтрокаПочта.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Почта");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеСпособыОтгрузки()
	
	Объект.ДоступныеСпособыОтгрузки.Очистить();
	
	Если ПередатьКурьеруСлужбыДоставки Тогда
		СтрокаПередатьКурьеруСлужбыДоставки = Объект.ДоступныеСпособыОтгрузки.Добавить();
		СтрокаПередатьКурьеруСлужбыДоставки.СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки");
	КонецЕсли;
	
	Если ПередатьКурьеруЕдиногоСклада Тогда
		СтрокаПередатьКурьеруЕдиногоСклада = Объект.ДоступныеСпособыОтгрузки.Добавить();
		СтрокаПередатьКурьеруЕдиногоСклада.СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруЕдиногоСклада");
	КонецЕсли;
	
	Если СамостоятельноПривезтиНаЕдиныйСклад Тогда
		СтрокаСамостоятельноПривезтиНаЕдиныйСклад = Объект.ДоступныеСпособыОтгрузки.Добавить();
		СтрокаСамостоятельноПривезтиНаЕдиныйСклад.СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаЕдиныйСклад");
	КонецЕсли;
	
	Если СамостоятельноПривезтиНаСкладСлужбыДоставки Тогда
		СтрокаСамостоятельноПривезтиНаСкладСлужбыДоставки = Объект.ДоступныеСпособыОтгрузки.Добавить();
		СтрокаСамостоятельноПривезтиНаСкладСлужбыДоставки.СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.СамостоятельноПривезтиНаСкладСлужбыДоставки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НеУказаныДоступныеСпособыДоставки()
	
	Возврат Не ПунктВыдачи И Не Курьер И Не Почта;
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоПараметровРасчета()
	
	ДоставкаСервер.ЗаполнитьДеревоПараметровРасчета(ПараметрыРасчетов, Ложь);
	
КонецПроцедуры
 
#КонецОбласти
 

