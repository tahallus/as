#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьКалендарьПодготовкиОтчетности(АдресФайла = Неопределено) Экспорт
	
	Если АдресФайла = Неопределено Тогда
		Макет = Справочники.КалендарьПодготовкиОтчетности.ПолучитьМакет("Макет");
		ТабЗн = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	Иначе
		Попытка
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
				ИмяФайла = КаталогВременныхФайлов()+"ЗадачиКалендаря.txt";
				ДвоичныеДанные.Записать(ИмяФайла);
				Данные = Новый ТекстовыйДокумент;
				Данные.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
				УдалитьИзВременногоХранилища(АдресФайла);
				УдалитьФайлы(ИмяФайла);
				ТабЗн = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Данные.ПолучитьТекст()).Данные;
			Иначе
				Данные = Новый ТекстовыйДокумент;
				Данные.Прочитать(АдресФайла);
				ТабЗн = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Данные.ПолучитьТекст()).Данные;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.ЗадачиКалендаряПодготовкиОтчетности"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаНачалаИнформирования", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаНачалаСобытия", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаОкончанияСобытия", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаДокументаОбработкиСобытия", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	РезультирующаяТаблица.Колонки.Добавить("ПредставлениеВКалендаре", Новый ОписаниеТипов("Строка"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаНачалаДокументов", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаОкончанияДокументов", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ПрименяетсяДляИП", Новый ОписаниеТипов("Булево"));
	РезультирующаяТаблица.Колонки.Добавить("ПрименяетсяДляООО", Новый ОписаниеТипов("Булево"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаПеренесенногоОкончанияСобытия", Новый ОписаниеТипов("Дата"));
	РезультирующаяТаблица.Колонки.Добавить("ДатаОкончанияСобытияДляПострадавших", Новый ОписаниеТипов("Дата"));
	Для Каждого Задача Из ТабЗн Цикл
		
		НоваяСтрокаРезультата = РезультирующаяТаблица.Добавить();
		НоваяСтрокаРезультата.Задача = Справочники.ЗадачиКалендаряПодготовкиОтчетности[Задача.Задача];
		НоваяСтрокаРезультата.ДатаНачалаИнформирования = Дата(Задача.ДатаНачалаИнформирования);
		НоваяСтрокаРезультата.ДатаНачалаСобытия = Дата(Задача.ДатаНачалаСобытия);
		НоваяСтрокаРезультата.ДатаОкончанияСобытия = Дата(Задача.ДатаОкончанияСобытия);
		НоваяСтрокаРезультата.ДатаДокументаОбработкиСобытия = Дата(Задача.ДатаДокументаОбработкиСобытия);
		НоваяСтрокаРезультата.Комментарий = Задача.Комментарий;
		НоваяСтрокаРезультата.ПредставлениеВКалендаре = Задача.ПредставлениеВКалендаре;
		НоваяСтрокаРезультата.ДатаНачалаДокументов = Дата(Задача.ДатаНачалаДокументов);
		НоваяСтрокаРезультата.ДатаОкончанияДокументов = Дата(Задача.ДатаОкончанияДокументов);
		НоваяСтрокаРезультата.ПрименяетсяДляИП = (Задача.ПрименяетсяДляИП = "Истина");
		НоваяСтрокаРезультата.ПрименяетсяДляООО = (Задача.ПрименяетсяДляООО = "Истина");
		Если Не ПустаяСтрока(Задача.ДатаПеренесенногоОкончанияСобытия) Тогда
			НоваяСтрокаРезультата.ДатаПеренесенногоОкончанияСобытия = Дата(Задача.ДатаПеренесенногоОкончанияСобытия);
		КонецЕсли;
		Если Не ПустаяСтрока(Задача.ДатаОкончанияСобытияДляПострадавших) Тогда
			НоваяСтрокаРезультата.ДатаОкончанияСобытияДляПострадавших = Дата(Задача.ДатаОкончанияСобытияДляПострадавших);
		КонецЕсли;
	КонецЦикла;
	// Обрабатываем таблицу
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВрТаблица.Задача,
	|	ВрТаблица.ДатаНачалаИнформирования КАК ДатаНачалаИнформирования,
	|	ВрТаблица.ДатаНачалаСобытия,
	|	ВрТаблица.ДатаОкончанияСобытия,
	|	ВрТаблица.ДатаДокументаОбработкиСобытия,
	|	ВрТаблица.Комментарий,
	|	ВрТаблица.ПредставлениеВКалендаре,
	|	ВрТаблица.ДатаНачалаДокументов,
	|	ВрТаблица.ДатаОкончанияДокументов,
	|	ВрТаблица.ДатаПеренесенногоОкончанияСобытия,
	|	ВрТаблица.ДатаОкончанияСобытияДляПострадавших,
	|	ВрТаблица.ПрименяетсяДляИП,
	|	ВрТаблица.ПрименяетсяДляООО
	|ПОМЕСТИТЬ ВрТаблица
	|ИЗ
	|	&Таблица КАК ВрТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТаблица.ДатаНачалаИнформирования,
	|	ВрТаблица.ДатаНачалаСобытия,
	|	ВрТаблица.ДатаОкончанияСобытия,
	|	ВрТаблица.ДатаДокументаОбработкиСобытия,
	|	ВрТаблица.Комментарий,
	|	ВрТаблица.ПредставлениеВКалендаре,
	|	ВрТаблица.ДатаНачалаДокументов,
	|	ВрТаблица.ДатаОкончанияДокументов,
	|	ВрТаблица.ДатаПеренесенногоОкончанияСобытия,
	|	ВрТаблица.ДатаОкончанияСобытияДляПострадавших,
	|	ВрТаблица.ПрименяетсяДляИП,
	|	ВрТаблица.ПрименяетсяДляООО,
	|	ВрТаблица.Задача,
	|	Календарь.Ссылка КАК Событие
	|ИЗ
	|	ВрТаблица КАК ВрТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КалендарьПодготовкиОтчетности КАК Календарь
	|		ПО (Календарь.ДатаОкончанияСобытия = ВрТаблица.ДатаОкончанияСобытия)
	|			И (Календарь.Задача = ВрТаблица.Задача)
	|			И (НЕ Календарь.ПометкаУдаления)
	| ";
	Запрос.УстановитьПараметр("Таблица", РезультирующаяТаблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Событие) Тогда
			Событие = Выборка.Событие.ПолучитьОбъект();
		Иначе
			// Создаем события в календаре
			Событие = Справочники.КалендарьПодготовкиОтчетности.СоздатьЭлемент();
			Событие.Задача = Выборка.Задача;
		КонецЕсли;
		Событие.ДатаНачалаИнформирования = Выборка.ДатаНачалаИнформирования;
		Событие.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		Событие.ДатаОкончанияСобытия = Выборка.ДатаОкончанияСобытия;
		Событие.ДатаДокументаОбработкиСобытия = Выборка.ДатаДокументаОбработкиСобытия;
		Событие.Комментарий = Выборка.Комментарий;
		Событие.ПредставлениеВКалендаре = Выборка.ПредставлениеВКалендаре;
		Событие.ДатаНачалаДокументов = Выборка.ДатаНачалаДокументов;
		Событие.ДатаОкончанияДокументов = Выборка.ДатаОкончанияДокументов;
		Событие.ПрименяетсяДляИП = Выборка.ПрименяетсяДляИП;
		Событие.ПрименяетсяДляООО = Выборка.ПрименяетсяДляООО;
		Событие.ДатаПеренесенногоОкончанияСобытия = Выборка.ДатаПеренесенногоОкончанияСобытия;
		Событие.ДатаОкончанияСобытияДляПострадавших = Выборка.ДатаОкончанияСобытияДляПострадавших;
		Событие.Записать();
	КонецЦикла;
	
	ПроверитьДубли();
	
КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("Наименование");
	Результат.Добавить("ПометкаУдаления");
	
	Возврат Результат;
	
КонецФункции


// Обновляет записи страховых взносов при доходах свыше 300 т.р.
// 
Процедура ОбновитьЗаписиСтраховыеВзносыПриДоходахСвыше300тр() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	КалендарьПодготовкиОтчетности.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.СтраховыеВзносыПриДоходахСвыше300ТР)
	|	И (КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия = &Год2018
	|			ИЛИ КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия = &Год2019)");
	Запрос.УстановитьПараметр("Год2018", Дата(2018, 04, 01));
	Запрос.УстановитьПараметр("Год2019", Дата(2019, 04, 01));

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ЗадачаКалендаря = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗадачаКалендаря.ДатаОкончанияСобытия = Дата(2018, 04, 01) Тогда
			ЗадачаКалендаря.ДатаОкончанияСобытия = Дата(2018, 07, 01);
		Иначе
			ЗадачаКалендаря.ДатаОкончанияСобытия = Дата(2019, 07, 01);
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗадачаКалендаря, Ложь, Ложь);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДубли()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Задача КАК Задача,
	|	КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия КАК ДатаОкончанияСобытия
	|ПОМЕСТИТЬ ВТДубли
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|ГДЕ
	|	НЕ КалендарьПодготовкиОтчетности.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарьПодготовкиОтчетности.Задача,
	|	КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КалендарьПодготовкиОтчетности.Задача) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарьПодготовкиОтчетности.Ссылка КАК Ссылка,
	|	КалендарьПодготовкиОтчетности.Задача КАК ТипЗадачи,
	|	КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия КАК ДатаОкончанияСобытия
	|ИЗ
	|	Справочник.КалендарьПодготовкиОтчетности КАК КалендарьПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДубли КАК ВТДубли
	|		ПО (ВТДубли.Задача = КалендарьПодготовкиОтчетности.Задача)
	|			И (ВТДубли.ДатаОкончанияСобытия = КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендарьПодготовкиОтчетности.Задача,
	|	КалендарьПодготовкиОтчетности.ДатаОкончанияСобытия";
	
	ВыборкаПоЗадачам = Запрос.Выполнить().Выбрать();
	ТипЗадачи = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ПустаяСсылка();
	ДатаОкончания = Дата('00010101');
	Пока ВыборкаПоЗадачам.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаПоЗадачам.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		Если ДатаОкончания <> ВыборкаПоЗадачам.ДатаОкончанияСобытия 
			ИЛИ ТипЗадачи <>  ВыборкаПоЗадачам.ТипЗадачи Тогда
			ДатаОкончания = ВыборкаПоЗадачам.ДатаОкончанияСобытия;
			ТипЗадачи =  ВыборкаПоЗадачам.ТипЗадачи;
			Продолжить;
		КонецЕсли;
		
		Задача = ВыборкаПоЗадачам.Ссылка.ПолучитьОбъект();
		Задача.УстановитьПометкуУдаления(Истина);
		Сообщить(Задача);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли