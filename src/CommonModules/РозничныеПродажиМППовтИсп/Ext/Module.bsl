#Область ПрограммныйИнтерфейс

// Получить значение ставки НДС.
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС, ДляККТ = Ложь) Экспорт
	
	Если ДляККТ Тогда
		Если ЗначениеЗаполнено(СтавкаНДС)
			И СтавкаНДС.НеОблагается Тогда
			Возврат Неопределено;
		ИначеЕсли ЗначениеЗаполнено(СтавкаНДС) Тогда
			Возврат СтавкаНДС.Ставка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.Ставка, 0);
	КонецЕсли;

КонецФункции // ПолучитьЗначениеСтавкиНДС()

Функция ПолучитьЗначениеСтавкиНДСНоменклатуры(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат ПолучитьЗначениеСтавкиНДС(Номенклатура.СтавкаНДС, Истина);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеСтавкиНДС()

// Функция возвращает ставку НДС - Без НДС.
//
Функция ПолучитьСтавкуНДСБезНДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДСМП.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДСМП КАК СтавкиНДСМП
	|ГДЕ
	|	СтавкиНДСМП.НеОблагается
	|	И СтавкиНДСМП.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	ТекстБезНДС = """Без НДС""";
	ТекстНеОблагается = """Не облагается""";
	ТекстСообщения = НСтр("ru='Не найдена ставка %БезНДС%. Откройте список ставок НДС (Компания - Все справочники - Ставки НДС) и проверьте,
		|что у ставки %БезНДС% значение ставки = 0 и установлен флаг %НеОблагается%.
		|Закройте и заново запустите программу.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БезНДС%", ТекстБезНДС);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеОблагается%", ТекстНеОблагается);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСБезНДС()

// Функция возвращает ставку НДС - Ноль.
//
Функция ПолучитьСтавкуНДСНоль() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДСМП.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДСМП КАК СтавкиНДСМП
	|ГДЕ
	|	(НЕ СтавкиНДСМП.НеОблагается)
	|	И СтавкиНДСМП.Ставка = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСНоль()

// Функция возвращает ставку НДС - Расчетная.
//
Функция ПолучитьСтавкуНДСРасчетная(СтавкаНДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетныеСтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДСМП КАК РасчетныеСтавкиНДС
	|ГДЕ
	|	РасчетныеСтавкиНДС.Расчетная
	|	И НЕ РасчетныеСтавкиНДС.НеОблагается
	|	И РасчетныеСтавкиНДС.Ставка = &Ставка";
	
	Запрос.УстановитьПараметр("Ставка", СтавкаНДС.Ставка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции // ПолучитьСтавкуНДСРасчетная()

// Функция возвращает ставку НДС по значению ставки (не расчетная).
//
Функция ПолучитьСтавкуНДС(ЗначениеСтавкиНДС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДСМП.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДСМП КАК СтавкиНДСМП
	|ГДЕ
	|	НЕ СтавкиНДСМП.Расчетная
	|	И НЕ СтавкиНДСМП.НеОблагается
	|	И СтавкиНДСМП.Ставка = &Ставка";
	
	Запрос.УстановитьПараметр("Ставка", ЗначениеСтавкиНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтавкуНДСРасчетная()

Функция ПараметрыЧека() Экспорт
	
	Параметры = Новый Структура;
	
	НаборКонстант = Константы.СоздатьНабор("НазваниеОрганизацииМП, НаименованиеМагазинаМП, ИННМП, КППМП, КассирФИОМП, НомерКассыМП, ТекстШапкиЧекаМП, ТекстПодвалаЧекаМП, КассирДолжностьМП, АдресМагазинаМП");
	НаборКонстант.Прочитать();
	
	Параметры.Вставить("ОрганизацияНазвание" , НаборКонстант.НазваниеОрганизацииМП);
	Параметры.Вставить("ОрганизацияИНН"      , НаборКонстант.ИННМП);
	Параметры.Вставить("ОрганизацияКПП"      , НаборКонстант.КППМП);
	Параметры.Вставить("Кассир"              , ?(ЗначениеЗаполнено(НаборКонстант.КассирФИОМП), НаборКонстант.КассирФИОМП,"Администратор"));
	Параметры.Вставить("КассирФИОМП"           , ?(ЗначениеЗаполнено(НаборКонстант.КассирФИОМП), НаборКонстант.КассирФИОМП,"Администратор"));
	Параметры.Вставить("НомерКассыМП"          , НаборКонстант.НомерКассыМП);
	Параметры.Вставить("ТекстШапкиМП"          , НаборКонстант.ТекстШапкиЧекаМП);
	Параметры.Вставить("ТекстПодвалаМП"        , НаборКонстант.ТекстПодвалаЧекаМП);
	Параметры.Вставить("КассирДолжностьМП"     , НаборКонстант.КассирДолжностьМП);
	Параметры.Вставить("АдресМагазинаМП"       , НаборКонстант.АдресМагазинаМП);
	Параметры.Вставить("НаименованиеМагазинаМП", НаборКонстант.НаименованиеМагазинаМП);
	Параметры.Вставить("Электронно"          , Ложь);
	Параметры.Вставить("Отправляет1СSMS"     , Ложь);
	Параметры.Вставить("Отправляет1СEmail"   , Ложь);
	//Параметры.Вставить("КодСистемыНалогообложения", РозничныеПродажиСервер.КодСистемыНалогообложения());
	
	Возврат Параметры;
	
КонецФункции

Функция СканированиеВнешнимСканером() Экспорт
	
	//СканированиеВнешнимСканером = Константы.ТипУстройстваСканирования.Получить() = Перечисления.ТипыУстройствСканирования.ВнешнийСканерШтрихкодов;
	//Возврат СканированиеВнешнимСканером;
	//
КонецФункции

// Экземпляр оборудования при сканировании внешним сканером штрихкодов
//
// Возвращаемое значение:
//   СправочникСсылка.ПодключаемоеОборудование - пустая ссылка, если не используется.
//
Функция ОборудованиеСканированияШтрихкодов() Экспорт
	
	//Возврат Константы.ОборудованиеСканирования.Получить();
	//
КонецФункции

#КонецОбласти