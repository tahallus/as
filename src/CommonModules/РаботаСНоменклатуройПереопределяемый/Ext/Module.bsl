
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ИзменениеТекстаРедактирования.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
КонецПроцедуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ПриИзменении.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("ЕдиницаИзмерения");
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// Создание или обновление значения реквизита.
//
// Параметры:
//  ДополнительныйРеквизит           - ЛюбаяСсылка - ссылка на реквизит.
//  СтрокаДанных                     - СтрокаТаблицыЗначений - строка таблицы значений.
//                                                             Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                             поле ДополнительныеРеквизиты, колонка Значения.
//  ЗначениеРеквизитаСсылка          - Ссылка - ссылка на новое значение.
//
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(ЗначениеРеквизитаСсылка);
			
			ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
		Иначе
			ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		ЗначениеОбъект.Владелец           = ДополнительныйРеквизит;
		ЗначениеОбъект.Наименование       = СтрокаДанных.Наименование;
		ЗначениеОбъект.ПолноеНаименование = СтрокаДанных.Наименование;
		ЗначениеОбъект.Записать();
		
		ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Создание или обновление дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры  - СправочникСсылка - ссылка на вид номенклатуры.
//  СтрокаДанных     - Структура, СтрокаТаблицыЗначений - данные для заполнения реквизита.
//                                                        Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                        поле ДополнительныеРеквизиты.
//  РеквизитСсылка   - ЛюбаяСсылка - ссылка на новый реквизит.
//
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(РеквизитСсылка);
			
			РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();
			
		Иначе
			РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
						
			РеквизитОбъект.ТипЗначения 
				= РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
		КонецЕсли;
		
		НаборСвойств       = ВидНоменклатуры.НаборСвойств;
		УИД                = Новый УникальныйИдентификатор();
		СтрокаУИД          = СтрЗаменить(Строка(УИД), "-", "");
		ИмяРеквизита       = СтрокаДанных.Наименование + "_" + СтрокаУИД;
		НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
		Наименование       = СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
		
		РеквизитОбъект.Имя          = ИмяРеквизита;
		РеквизитОбъект.НаборСвойств = НаборСвойств;
		РеквизитОбъект.Доступен     = Истина;	
		РеквизитОбъект.Наименование = СтрокаДанных.Наименование;
		РеквизитОбъект.Заголовок    = СтрокаДанных.Наименование;
		
		РеквизитОбъект.Записать();
		
		РеквизитСсылка = РеквизитОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Создание вида номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта. 
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ВидНоменклатурыСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	ДанныеЗаполненияКатегории = Новый Структура;
	
	Если ДанныеЗаполнения.Тип = "Услуга" Тогда
		ДанныеЗаполненияКатегории.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Услуга);
	ИначеЕсли ДанныеЗаполнения.Тип = "Товар" Тогда 
		ДанныеЗаполненияКатегории.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Запас);
	КонецЕсли;
	
	КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.СоздатьЭлемент();
	КатегорияНоменклатуры.Заполнить(ДанныеЗаполненияКатегории);
	КатегорияНоменклатуры.Наименование = ДанныеЗаполнения.Наименование;
	КатегорияНоменклатуры.Родитель = ДанныеЗаполнения.РодительИнформационнойБазы;
	КатегорияНоменклатуры.Записать();
	
	ВидНоменклатурыСсылка = КатегорияНоменклатуры.Ссылка;
КонецПроцедуры

// Создание группы видов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения				 - СтрокаТаблицыЗначений - Колонки: Идентификатор, Наименование, 
//                                                             ИдентификаторРодителя, Уровень, РодительИнформационнойБазы.
//  ГруппаВидовНоменклатурыСсылка	 - Ссылка - ссылка на новую группу.
//
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	НачатьТранзакцию();
	Попытка
		Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
			
			УстановитьИсключительнуюБлокировкуПоСсылке(ГруппаВидовНоменклатурыСсылка);
			
			НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
		Иначе
			НоваяГруппа = Справочники.КатегорииНоменклатуры.СоздатьГруппу();
		КонецЕсли; 
		
		НоваяГруппа.Наименование = ДанныеЗаполнения.Наименование;
		НоваяГруппа.Родитель     = ДанныеЗаполнения.РодительИнформационнойБазы;
		
		НоваяГруппа.Записать();
		
		ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Создание номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса
//  НоменклатураСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	НоменклатураОбъект.Наименование          = ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.НаименованиеПолное    = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), ДанныеЗаполнения.НаименованиеДляПечати, ДанныеЗаполнения.Наименование);
	НоменклатураОбъект.КатегорияНоменклатуры = ?(ЗначениеЗаполнено(ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры), ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры, Справочники.КатегорииНоменклатуры.БезКатегории);
	НоменклатураОбъект.Комментарий           = ДанныеЗаполнения.Описание;
	НоменклатураОбъект.Артикул               = ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.АлкогольнаяПродукция  = ДанныеЗаполнения.УчастникЕГАИС;
	Если ДанныеЗаполнения.УчастникГИСМ Тогда
		НоменклатураОбъект.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция;
	КонецЕсли;
	
	СтавкаНДС = СтавкаНДСПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.СтавкаНДС);
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		НоменклатураОбъект.ВидСтавкиНДС = СтавкаНДС.ВидСтавкиНДС;
	КонецЕсли;
	
	ЕдиницаИзмерения = ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.ЕдиницаИзмерения);
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЕсли;
	
	ТипНоменклатуры = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.Тип);
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		НоменклатураОбъект.ТипНоменклатуры = ТипНоменклатуры;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		НоменклатураОбъект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Иначе
		НоменклатураОбъект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
	КонецЕсли;
	НоменклатураОбъект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		СохранитьИзображенияНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения.Изображения);
	КонецЕсли;
	
КонецПроцедуры

// Создание характеристики с заполнением дополнительных реквизитов.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики
//  Владелец             - Ссылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
КонецПроцедуры

// Создание характеристики.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики.
//  Владелец             - Ссылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
КонецПроцедуры

// Создание дополнительных реквизитов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                             поле ДополнительныеРеквизиты.
//  НоменклатураСсылка - ЛюбаяСсылка - ссылка на элемент.
//
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
КонецПроцедуры

// Сформировать наименование номенклатуры по характеристике.
//
// Параметры:
//  НаименованиеНоменклатуры	 - Строка - текущее наименование объекта.
//  ПредставлениеХарактеристики  - Строка - представление характеристики в сервисе.
//  НаименованиеХарактеристики	 - Строка - итоговое наименование.
//
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, ПредставлениеХарактеристики, НаименованиеХарактеристики) Экспорт
	
КонецПроцедуры

// Запись штрихкодов в информационную базу. Вызов метода идет в разрезе одной номенклатуры. 
// Процедура используется как для записи штрихкодов при загрузке номенклатуры, так и при обновлении. 
// Перед записью штрихкодов рекомендуется проверить их наличие в информационной базе.
//
// Параметры:
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - данные по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка, Неопределено - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	ЕдиницыИзмерения = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		Если ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура) = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(ЭлементКоллекции.Номенклатура, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.Номенклатура, "ЕдиницаИзмерения"));
		КонецЕсли;
		
		Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		Штрихкод.Период = ТекущаяДатаСеанса();
		Штрихкод.Штрихкод = ЭлементКоллекции.Штрихкод;
		Штрихкод.Номенклатура = ЭлементКоллекции.Номенклатура;
		Штрихкод.Характеристика = ЭлементКоллекции.Характеристика;
		Штрихкод.ЕдиницаИзмерения = ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура);
		
		Штрихкод.Записать(Истина);
		
	КонецЦикла;
КонецПроцедуры

// Присвоение новых дополнительных реквизитов виду номенклатуры, которому они должны принадлежать.
//
// Параметры:
//  ВидНоменклатуры         - СправочникСсылка - ссылка на вид номенклатуры.
//  ДополнительныеРеквизиты - Массив - (СправочникСсылка) массив ссылок на новые дополнительные реквизиты.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак принадлежности реквизитам характеристик. В зависимости от этого
//												параметра, может быть реализован разный алгоритм присвоения.
//
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойствСсылка = ВидНоменклатуры.НаборСвойствХарактеристики;
	Иначе
		НаборСвойствСсылка = ВидНоменклатуры.НаборСвойств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборСвойствСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьИсключительнуюБлокировкуПоСсылке(НаборСвойствСсылка);
		
		НаборСвойствОбъект = НаборСвойствСсылка.ПолучитьОбъект();
		
		Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
			
			НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();	
			
			НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
			
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохранение изображений при загрузке номенклатуры.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - владелец изображений.
//  Изображения	 - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.Изображения
//
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ИзображениеURL = ЭлементКоллекции.ИзображениеURL;
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");		
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура();
		
		ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     НоменклатураСсылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			УстановитьИсключительнуюБлокировкуПоСсылке(НоменклатураСсылка);
			
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			
			НоменклатураОбъект.ФайлКартинки          = СозданныеИзображения[0];
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			
			НоменклатураОбъект.Записать();		
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// Получение штрихкодов в разрезе номенклатуры и характеристик номенклатуры. 
// Порядок строк должен порядку строк в исходной таблице (Номенклатура Возр, Характеристика Возр).
//
// Параметры:
//  НоменклатураИХарактеристики	 - ТаблицаЗначений - исходная таблица с номенклатурой и характеристиками.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//  ДанныеПоШтрихкодам - ТаблицаЗначений - таблица с данными по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураИХарактеристикиСсылки.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристикиСсылки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураИХарактеристики
	|ИЗ
	|	&НоменклатураИХарактеристики КАК НоменклатураИХарактеристикиСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	НоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО НоменклатураИХарактеристики.Номенклатура = Штрихкоды.Номенклатура
	|			И НоменклатураИХарактеристики.Характеристика = Штрихкоды.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("НоменклатураИХарактеристики", НоменклатураИХарактеристики);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Формирование текста запроса номенклатуры и характеристик для последующего чтение из информационной базы.
// На основании текста запроса, на стороне библиотеки будет подготовлен итоговый запрос, 
// для порционного чтения объектов из информационной базы.
//
// Требование к запросу:
// - в результате запроса строки должны быть уникальны
// - не должны использоваться временные таблицы
// - в результате выполнения запроса должны попадать два поля: 
//		- Номенклатура (ОпределяемыйТип.НоменклатураРаботаСНоменклатурой)
//		- Характеристика (ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой)
// - если характеристики для номенклатуры не используются, в поле характеристики должно 
//   содержаться пустое значение объекта ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//    Поля результата запроса:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику (в запросе следует заложить проверку на NULL).
//
Процедура ТекстЗапросаНоменклатурыИХарактеристик(ТекстЗапроса) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.КатегорияНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа";
КонецПроцедуры

// Получение видов номенклатуры в разрезе номенклатуры.
//
// Параметры:
//  Номенклатура	 - Массив - (Ссылка) ссылки на номенклатуру.
//  ВидыНоменклатуры - ТаблицаЗначений - данные по видам номенклатуры.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//
Процедура ПолучитьВидыНоменклатурыПоНоменклатуре(Номенклатура, ВидыНоменклатуры) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений реквизитов из формы вида номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма вида номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("ТипНоменклатурыПоУмолчанию");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
КонецПроцедуры

// Получение значение свойств реквизитов характеристик информационной базы. Метод используется при поиске заведенных в базе
// характеристик. Поиск осуществляется по составу реквизитов и их значениям. Если характеристика с заданным набором
// реквизитов найдена, объект не создается.
//
// Параметры:
//  ВидНоменклатуры                  - СправочникСсылка - вид номенклатуры в разрезе которого
//                                                        анализируются характеристики.
//  ЗначенияХарактеристикТекущейБазы - ТаблицаЗначений - таблица данных информационной базы. Колонки:
//    * ХарактеристикаБазы - Ссылка - ссылка на характеристику.
//    * Свойство           - Ссылка - реквизит характеристики.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
КонецПроцедуры

// Получение используемых для вида номенклатуры дополнительных реквизитов.
//
// Параметры:
//  ВидНоменклатуры   - СправочникСсылка - вид номенклатуры в разрезе которого производится поиск данных.
//  ТаблицаРеквизитов - ТаблицаЗначений - таблица реквизитов. Колонки:
//    * РеквизитВидаНоменклатуры              - Ссылка - ссылка дополнительный реквизит.
//    * РеквизитВидаНоменклатурыПредставление - Строка - представление реквизита.
//    * ЯвляетсяХарактеристикой               - Булево - Истина, если реквизит является реквизитом характеристики.
//
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|			ИЗ
	|				Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристики КАК НаборСвойств
	|			ИЗ
	|				Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений реквизитов вида номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ВидыНоменклатуры - Ссылка, Массив - виды номенклатуры по которым идет запрос значений реквизитов.
//  Результат        - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на вид номенклатуры и именем ВидНоменклатуры и иметь вид: 
//                                      ВидНоменклатуры, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	КатегорииНоменклатуры.Наименование КАК Наименование,
	|	КатегорииНоменклатуры.ТипНоменклатурыПоУмолчанию КАК ТипНоменклатурыПоУмолчанию
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Ссылка В(&КатегорииНоменклатуры)";
	
	Запрос.УстановитьПараметр("КатегорииНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений реквизитов номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  Номенклатура - Ссылка, Массив - номенклатура по которым идет запрос значений реквизитов.
//  Результат       - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на номенклатуру и именем Номенклатура и иметь вид: 
//                                      Номенклатура, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() +
	
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Комментарий КАК Комментарий,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (Номенклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение значений дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Номенклатура         - Массив - (Ссылка) массив ссылок номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - заполняемые данные значений свойство.
//    * ВладелецСвойств - Ссылка - ссылка на номенклатуру.
//    * Свойство - Ссылка - свойство номенклатуры.
//    * Значение - Произвольный - значение свойства.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

// Получение вида номенклатуры по номенклатуре.
//
// Параметры:
//  НоменклатураСсылка   - Ссылка - номенклатура.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "КатегорияНоменклатуры");
КонецПроцедуры

// Получение вида номенклатуры из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	ВидНоменклатуры = Форма.Объект.КатегорияНоменклатуры;
КонецПроцедуры

// Получение значений реквизитов из формы номенклатуры.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("Комментарий");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("Ссылка");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЭлементКоллекции.Ключ = "СтавкаНДС" Тогда
			ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Справочники.СтавкиНДС.СтавкаНДС(Форма.Объект["ВидСтавкиНДС"]);
		Иначе
			ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры", Форма.Объект.КатегорияНоменклатуры);
КонецПроцедуры

// Получение значений дополнительных реквизитов из формы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - таблица значений дополнительных реквизитов. Колонки:
//    * Свойство           - Ссылка - дополнительный реквизит.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
КонецПроцедуры

// Получение номенклатуры по штрихкодам.
//
// Параметры:
//  Штрихкоды			 - Массив - массив штрихкодов (Строка).
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - итоговая таблица данных с колонками 
//                                           Штрихкод, Номенклатура, ЕдиницаИзмерения, Характеристика.
//
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&ШтрихКоды)";
	
	Запрос.УстановитьПараметр("ШтрихКоды", ШтрихКоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхИзСервиса

// Процедура вызывается после получения данных номенклатуры из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов. Например на этом этапе можно 
// создать бренды, производителей, единицы измерения и так далее.
//
// Параметры:
//  ДанныеПоНоменклатуре - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре) Экспорт
	
КонецПроцедуры

// Процедура вызывается после получения данных категорий из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов.
//
// Параметры:
//  ДанныеПоКатегориям - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// Сравнение значений реквизитов вида номенклатуры и категории.
//
// Параметры:
//  ДанныеКатегории       - СтрокаТаблицыЗначений - данные по категории. Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ДанныеВидаНоменклатуры - СтрокаТаблицыЗначений, Структура, Ссылка - данные по виду номенклатуре. См. ПолучитьЗначенияРеквизитовВидовНоменклатуры
//  ТаблицаОтличийРеквизитов - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	// Проверка наименования
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли;
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеКатегории.Тип);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатурыПоУмолчанию <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ТипНоменклатурыПоУмолчанию", ТипНоменклатурыСервиса, ДанныеВидаНоменклатуры.ТипНоменклатурыПоУмолчанию, НСтр("ru = 'Тип'"));
	КонецЕсли;
КонецПроцедуры

// Сравнение значений реквизитов номенклатуры информационной базы и номенклатуры сервиса.
//
// Параметры:
//  ДанныеНоменклатурыСервиса - СтрокаТаблицыЗначений - Данные по номенклатуре.
//                              Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//  ДанныеНоменклатурыБазы    - СтрокаТаблицыЗначений, Структура, Ссылка - данные по номенклатуре.
//                              См. процедуры ПолучитьЗначенияРеквизитовНоменклатуры,
//                              ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
//  ТаблицаОтличийРеквизитов  - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	// Проверка простых типов
	
	СоответствиеПолей = Новый Структура();
	
	СоответствиеПолей.Вставить("Наименование", "Наименование");
	СоответствиеПолей.Вставить("Артикул",      "Артикул");
	СоответствиеПолей.Вставить("Описание",     "Комментарий");
	
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		Если ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение] <> ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ] Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				ЭлементКоллекции.Значение, ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ], ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("НаименованиеДляПечати", "НаименованиеПолное");
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.НаименованиеДляПечати Тогда
		
		Если ЗначениеЗаполнено(ДанныеНоменклатурыСервиса.НаименованиеДляПечати) Тогда
			НовоеНаименованиеПолное = ДанныеНоменклатурыСервиса.НаименованиеДляПечати;
		Иначе
			НовоеНаименованиеПолное = ДанныеНоменклатурыСервиса.Наименование;
		КонецЕсли;
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
			"НаименованиеПолное", ДанныеНоменклатурыСервиса.НаименованиеДляПечати, ДанныеНоменклатурыБазы.НаименованиеПолное,, НовоеНаименованиеПолное);
	КонецЕсли;
	
	ВидыНоменклатуры = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(ДанныеНоменклатурыСервиса.Категория.Идентификатор);
	
	Если ВидыНоменклатуры.Количество() Тогда
		Если ВидыНоменклатуры[0] <> ДанныеНоменклатурыБазы.ВидНоменклатуры Тогда 
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
				"КатегорияНоменклатуры", ВидыНоменклатуры[0], ДанныеНоменклатурыБазы.ВидНоменклатуры, НСтр("ru = 'Категория'"), ДанныеНоменклатурыСервиса.Категория.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "Ссылка")
		И НЕ ЗначениеЗаполнено(ДанныеНоменклатурыБазы.Ссылка)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ТипНоменклатуры") Тогда
		
		ТипНоменклатурыСервиса = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.Тип);
		Если ДанныеНоменклатурыБазы.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"ТипНоменклатуры", ТипНоменклатурыСервиса, ДанныеНоменклатурыБазы.ТипНоменклатуры, НСтр("ru = 'Тип'"),, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		// Проверка ставки НДС
		СтавкаНДССервиса = СтавкаНДСПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.СтавкаНДС);
		Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения
	ЕдиницаИзмеренияСервиса = ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.ЕдиницаИзмерения);
	Если Строка(ДанныеНоменклатурыБазы.ЕдиницаИзмерения) <> ЕдиницаИзмеренияСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ЕдиницаИзмерения", ЕдиницаИзмеренияСервиса, ДанныеНоменклатурыБазы.ЕдиницаИзмерения, НСтр("ru = 'Ед. изм.'"), ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// Процедура для интерактивного заполнения вида номенклатуры. Если параметр ТаблицаОтличий заполнен - 
// заполнение вида номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеВидаНоменклатуры. 
// Если параметр ТаблицаОтличий не заполнен - происходит загрузка вида номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма вида номенклатуры. 
//  ТаблицаОтличий					 - ТаблицаЗначений - таблица изменений реквизитов вида номенклатуры, 
//                                                       формируемая в методе РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные категории сервиса.
//
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, ТаблицаОтличий = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	Если ТаблицаОтличий <> Неопределено Тогда  // заполнение при наличии изменений
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Форма.Прочитать(); // для обновления отображения дополнительных реквизитов
		КонецЕсли;
				
		Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Если ЭлементКоллекции.Пометка Тогда
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
			И ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда	
			
			// Для новых объектов идет заполнение дополнительных реквизитов на форме для имитации их присутствия.
			
			ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

// Заполнение реквизитов вида номенклатуры.
//
// Параметры:
//  ВидНоменклатурыСсылка - СправочникСсылка - ссылка на вид номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ВидНоменклатурыОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	ВидНоменклатурыОбъект.Записать();
КонецПроцедуры

// Заполнение реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка - СправочникСсылка - ссылка на номенклатуру.
//  ТаблицаИзменений   - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                         сформирована в методе ПолучитьОтличияНоменклатуры.
//                                         см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(НоменклатураОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.НаименованиеПолное) И ЗначениеЗаполнено(НоменклатураОбъект.Наименование) Тогда
		НоменклатураОбъект.НаименованиеПолное = НоменклатураОбъект.Наименование;
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
КонецПроцедуры

// Заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка      - Ссылка - ссылка на номенклатуру.
//  ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты для записи в структуре:
//    * РеквизитОбъекта - Ссылка - свойство реквизита.
//    * НовоеЗначение   - Произвольный - значение реквизита.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
КонецПроцедуры

// Интерактивное заполнение реквизитов номенклатуры. Если параметр ТаблицаИзменений заполнен - 
// заполнение номенклатуры происходит после работы формы Обработка.РаботаСНоменклатурой.ЗаполнениеНоменклатуры. 
// Если параметр ТаблицаИзменений не заполнен - происходит загрузка номенклатуры в интерактивном режиме.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений -  таблица изменений реквизитов номенклатуры. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияНоменклатуры.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначений - данные номенклатуры сервиса.
//
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений = Неопределено, ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	Если ТаблицаИзменений <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			Если ЭлементКоллекции.РеквизитОбъекта = "СтавкаНДС" Тогда
				Форма.Объект.ВидСтавкиНДС = ?(ЗначениеЗаполнено(ЭлементКоллекции.НовоеЗначение),ЭлементКоллекции.НовоеЗначение.ВидСтавкиНДС, Перечисления.ВидыСтавокНДС.ПустаяСсылка());
			ИначеЕсли ЭлементКоллекции.РеквизитОбъекта = "ВидНоменклатуры" Тогда
				Форма.Объект.КатегорияНоменклатуры = ЭлементКоллекции.НовоеЗначение;
			Иначе
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.НаименованиеПолное) Тогда
			Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование;
		КонецЕсли;
	ИначеЕсли ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда
		ЗаполнитьНоменклатуруПриИнтерактивномСоздании(Форма, ДанныеИнтерактивногоЗаполнения[0]);
	КонецЕсли;
	
КонецПроцедуры

// Интерактивное заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.
			НайтиСтроки(Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;	
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение; 
		КонецЕсли;
		
	КонецЦикла;	

	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХарактеристиками

// Текст запроса характеристик с отбором по владельцу.
// В полях запроса должна присутствовать ссылка на характеристику с псевдонимом Ссылка, таблица характеристик должна 
// иметь псевдоним Характеристики, при этом в качестве параметра отбора владельца характеристик
// использоваться параметр Владелец.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Вариант использования характеристик для вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры	 - Произвольный - вид номенклатуры.
//  Результат		 - Строка - вариант использования характеристик. Возможные значения: "Индивидуальные", "Общие", "НеВедутся".
//
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат) Экспорт
	
КонецПроцедуры

// Получение количество характеристик для номенклатуры.
//
// Параметры:
//  Номенклатура - Ссылка - ссылка на номенклатуру информационной базы.
//  Результат	 - Число - число характеристик.
//
Процедура ПолучитьКоличествоХарактеристик(Номенклатура, Результат) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитов

// Процедура позволяет переопределить перечень блокируемых реквизитов. Если используется подсистема запрета редактирования,
// и для объекта настроен список блокируемых реквизитов, перечень реквизитов будет передаваться в параметре БлокируемыеРеквизиты.
//
// Параметры:
//  ПолноеИмя			 - Строка - полное имя объекта метаданных.
//  БлокируемыеРеквизиты - Массив - (Строка) массив имен блокируемых реквизитов.
//
Процедура ПриФормированииСпискаБлокируемыхРеквизитов(ПолноеИмя, БлокируемыеРеквизиты) Экспорт
		
КонецПроцедуры

// Процедура позволяет переопределить проверку наличие прав на редактирование блокируемых реквизитов. По умолчанию 
// право на редактирование имеет пользователь с полными правами, Администратор и 
// пользователь с ролью РедактированиеРеквизитовОбъектов.
//
// Параметры:
//  ЕстьПравоРедактированияРеквизитов - Булево - Истина, если текущий пользователь имеет возможность редактирования реквизитов.
//
Процедура ПриОпределенииПравНаРедактированиеРеквизитов(ЕстьПравоРедактированияРеквизитов) Экспорт
	
КонецПроцедуры

// Процедура позволяет переопределить алгоритм поиска ссылок на объект, перед включением возможности редактирования 
// заблокированных реквизитов.
//
// Параметры:
//  СсылкаНаОбъект		 - ЛюбаяСсылка - ссылка на проверяемый объект.
//  ИзмененныеРеквизиты	 - Массив - (Строка) массив заблокированных реквизитов.
//  РезультатПроверки	 - Структура - ключи структуры:
//                                     СсылкиОбнаружены - Булево - Истина, если ссылки на объект были обнаружены.
//                                     ТекстСообщения - Строка - текст сообщения, выводимое пользователю, в случае если
//                                                               были обнаружены ссылки на объект.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриПроверкеИспользованияОбъекта(СсылкаНаОбъект, ИзмененныеРеквизиты, РезультатПроверки, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПанельАдминистрирования.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПанельАдминистрирования.
//
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	Форма.Элементы.ГруппаРаботаСОблачнымиКлассификаторами.Видимость = Ложь;
КонецПроцедуры

// Переопределяет настройки подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//    Ключи:
//    * ИспользоватьВидыНоменклатуры - Булево - флаг использования видов номенклатуры.
//    * ИспользоватьХарактеристики - Булево - флаг использования характеристик.
//    * ИспользоватьПакетноеСозданиеНоменклатуры - Булево - флаг использования пакетного создания номенклатуры.
//    * ИспользоватьПоискПоШтрихкодуВСервисе - Булево - флаг использования поиска по штрихкоду в сервисе.
//    * РежимПредставленияНоменклатурыСХарактеристиками - Строка - вариант представления списка номенклатуры:
//                                                                 "БезХарактеристик", "Группировка", "Линейный", "Настраиваемый".
//    * ИспользоватьДополнительныеРеквизиты - Булево - флаг использования дополнительных реквизитов и свойств.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	Настройки.ИспользоватьВидыНоменклатуры = Истина;
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры = Истина;
	Настройки.ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе = Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке = Истина;
	Настройки.ИспользоватьДополнительныеРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	//++(
	//Настройки.ИспользоватьВыгрузкуВКаталог1С = Ложь;
	//Настройки.ИспользоватьВыгрузкуВНациональныйКаталог = Ложь;
	//)++
	//++(
	Настройки.ИспользоватьВыгрузкуВКаталог1С = Истина;
	Настройки.ИспользоватьВыгрузкуВНациональныйКаталог = Истина;
	//)++
	
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе:
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
КонецПроцедуры

// Заполняет читаемые/изменяемые методом данные. Информация используется для описания обработчиков обновления.
// Все указанные в методе объекты метаданных должны быть включены в состав плана обмена ОбновлениеИнформационнойБазы.
//
// Для обновления на версию 1.7.2 необходимо указать читаемые/изменяемые данные метода
//  РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре.
// 
// Параметры:
//  Метод - Строка - полное имя переопределяемого метода.
//  ЧитаемыеИзменяемыеДанные - Структура:
//   * Читаемые - Массив из Строка - полные имена читаемых объектов метаданных.
//   * Изменяемые - Массив из Строка - полные имена изменяемых объектов метаданных.
//
// Пример: 
// Если Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("Справочник.Номенклатура");
// ИначеЕсли Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды" Тогда
// 	ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("РегистрСведений.Штрихкоды");
// КонецЕсли;
//
Процедура ЗаполнитьЧитаемыеИзменяемыеДанныеМетода(Знач Метод, ЧитаемыеИзменяемыеДанные) Экспорт
	Если Метод = "РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре" Тогда
		ЧитаемыеИзменяемыеДанные.Читаемые.Добавить("Справочник.Номенклатура");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормаПоискНоменклатурыПоШтрихкоду

// Процедура, вызываемая из обработчика события ПриСозданииНаСервере формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события ОбработкаПроверкиЗаполнения формы ПоискНоменклатурыПоШтрихкоду.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма ПоискНоменклатурыПоШтрихкоду.
//  Отказ				 - Булево - признак отказа.
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты.
//
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Запись штрихкодов в информационную базу.
//
// Параметры:
//  ШтрихкодыНоменклатуры	 - ТаблицаЗначений - см. Обработка.РаботаСНоменклатурой.Форма.ПоискНоменклатурыПоШтрихкоду, 
//                                               таблица ШтрихкодыНоменклатуры.
//
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
					
			МенеджерЗаписи                  = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Штрихкод         = СтрокаШтрихкода.Штрихкод;
			МенеджерЗаписи.Номенклатура     = СтрокаШтрихкода.Номенклатура;
			МенеджерЗаписи.Характеристика   = СтрокаШтрихкода.Характеристика;
			МенеджерЗаписи.ЕдиницаИзмерения = СтрокаШтрихкода.ЕдиницаИзмерения;
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

// Метод вызывается после загрузки номенклатуры сервиса, найденной по штрихкоду, при заполнении
// таблицы штрихкодов.
//
// Параметры:
//  СтрокаТаблицыШтрихкодов	 - ДанныеФормыЭлементКоллекции - строка таблицы ШтрихкодыНоменклатуры.
//  НоменклатураСсылка		 - Ссылка - ссылка на созданную номенклатуру.
//
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыСРубрикатором

// Метод формирует текст запроса, на основе которого создается компоновщик настроек СКД. 
// Созданный компоновщик настроек используется для интерактивной настройки отбора номенклатуры.
//
// Требования к запросу:
//   Все поля отборов должны быть описаны в фигурных скобках {} секции инструкций компоновки.
//   При переопределении текста запроса нужно учитывать, что настройки компоновки применяются в форме 
//   Обработка.РаботаСНоменклатурой.Форма.СопоставлениеНоменклатурыСРубрикатором в динамическом списке 
//   СписокПоНоменклатуре, поэтому и там секция описания полей отбора должна полностью соответствовать,
//   псевдонимы отборов должны в точности совпадать, см. ИнициализацияСпискаСопоставленияПоНоменклатуре
// 
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//    Поля результата запроса:
//    * Номенклатура    - Ссылка - товар.
//    * ВидНоменклатуры - Ссылка - вид номенклатуры, указать NULL, если виды номенклатуры не используются.
//    * Родитель        - Ссылка - группа товара в иерархии, указать NULL, если справочник номенклатуры не иерархический.
//
Процедура ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	НЕ СправочникНоменклатура.ПометкаУдаления
	|{ГДЕ
	|	СправочникНоменклатура.Ссылка.* КАК Номенклатура,
	|	СправочникНоменклатура.КатегорияНоменклатуры.* КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Родитель.* КАК Родитель,
	|	СправочникНоменклатура.Код,
	|	СправочникНоменклатура.Артикул}
	|{ХАРАКТЕРИСТИКИ
	|	ТИП(Справочник.Номенклатура)
	|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|			ДополнительныеРеквизитыИСведения.Наименование + "" ("" + ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование + "")"" КАК Наименование,
	|			ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения)
	|	ПОЛЕКЛЮЧА Ссылка
	|	ПОЛЕИМЕНИ Наименование
	|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты)
	|	ПОЛЕОБЪЕКТА Ссылка
	|	ПОЛЕВИДА Свойство
	|	ПОЛЕЗНАЧЕНИЯ Значение }";
	
КонецПроцедуры

// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - ОпределяемыйТип.ДополнительныеРеквизитыБизнесСеть - значение реквизита сопоставления.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
	РаботаСНоменклатуройУНФ.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты);

КонецПроцедуры 

// Инициализация запроса, описывающего источники данных заполнения дополнительных реквизитов номенклатуры ссылочного типа.
// Задача метода - описать соответствие доп. реквизита набору возможных значений этого доп. реквизита.
// При использовании БСП в качестве значений доп. реквизитов могут использоваться справочники
//  ЗначенияСвойствОбъектов или ЗначенияСвойствОбъектовИерархия, для таких значений в запросе следует описать отбор по владельцу.
// Если для учета доп. реквизитов применяется какая-то иная механика, не БСП, либо модифицированная БСП,
//  нужно сформировать произвольный текст запроса, позволяющий получить значения доп.реквизитов.
//
// Для реквизитов метаданных, которые для сервиса 1С:Номенклатура представляются как дополнительные реквизиты,
//  нужно описать произвольный запрос, получающий значения свойств.
// Пример: допустим, на уровне метаданных конфигурации существует реквизит Номенклатуры СтранаПроисхождения,
//  которому нет аналогов в реквизитах модели 1С:Номенклатуры, но есть аналоги в дополнительных реквизитах 1С:Номенклатуры.
// В этом случае реквизит СтранаПроисхождения должен быть описан в методе ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации,
//  в составе ПубликуемыеРеквизиты, а так же в методе ИнициализацияЗапросаЗначенийДополнительныхРеквизитов нужно описать источник значений.
// Допустим, что реквизит СтранаПроисхождения имеет тип значения СправочникСсылка.СтраныМира.
// Тогда в запросе с использованием конструкции ОБЪЕДИНИТЬ ВСЕ добавляется подзапрос, где поле РеквизитОбъекта - константа,
//  устанавливается из параметра, а поле Значение - это ссылка на справочник СтраныМира.
// При этом может быть описана какая-то специфическая логика прикладного решения, например, могут выбираться не все значения
//  справочника, а с каким-то отбором, как например отбор по Владельцу для ЗначенияСвойствОбъектов БСП.
// ВАЖНО! Сам ссылочный тип данных, представляющий собой источник значений доп.реквизита должен быть включен в
//  определяемый тип ЗначенияСвойствОбъектовРаботаСНоменклатурой.
//
// Текст запроса должен содержать описание 2х полей:
//  * РеквизитОбъекта - ОпределяемыйТип.РеквизитыСопоставленияРаботаСНоменклатурой - доп.реквизит.
//  * Значение - ОпределяемыйТип.ЗначенияСвойствОбъектовРаботаСНоменклатурой - значение доп.реквизита.
//
// Параметры:
//  Запрос - Запрос.
//  ДополнительныеРеквизиты - Массив из ОпределяемыйТип.РеквизитыСопоставленияРаботаСНоменклатурой, Неопределено - 
//   перечень доп.реквизитов, для которых нужно получить значения, если ДополнительныеРеквизиты = Неопределено,
//   то нужно получить значения для всех доп.реквизитов, включая и ПубликуемыеРеквизиты.
//
Процедура ИнициализацияЗапросаЗначенийДополнительныхРеквизитов(Запрос, Знач ДополнительныеРеквизиты) Экспорт 
	
	//++(
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Владелец КАК РеквизитОбъекта,
	|	ЗначенияСвойствОбъектов.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)";
	
	Если ДополнительныеРеквизиты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)", "ИСТИНА");
	Иначе 
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	//)++
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// Настройки отбора номенклатуры должны быть описаны в фигурных скобках {} секции инструкций компоновки,
// псевдонимы отборов должны в точности совпадать с отборами,
// описанными в методе ИнициализацияЗапросаОтбораДанныхНоменклатуры.
// См. форму обработки РаботаСНоменклатурой.СопоставлениеНоменклатурыСРубрикатором.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки РаботаСНоменклатурой.СопоставлениеНоменклатурыСРубрикатором.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки РаботаСНоменклатурой.СопоставлениеНоменклатурыСРубрикатором.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
КонецПроцедуры

// Получение доступных типов значений свойств для сопоставления.
// 
// Параметры:
//  ТипыЗначенийСвойств - СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
КонецПроцедуры

// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка - пустая ссылка для заполнения сопоставления,
//                         например ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
//
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
КонецПроцедуры

// Инициализация запроса соответствия значений реквизитов вида номенклатуры.
// 
// В запросе необходимо вернуть таблицу содержащую количество значений
// реквизита в информационной базе и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ОбъектСопоставления.
// Поля запроса:
//  * КоличествоЗначенийРеквизита - Число - количество возможных значений реквизита.
//  * КоличествоСопоставленныхРеквизитов - Число - количество реквизитов, сопоставленных в базе.
//
// Параметры:
//  Запрос - Запрос - запрос инициализации, установки параметров
//
Процедура ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос) Экспорт
		
КонецПроцедуры

// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ОбъектСопоставления - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	    - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	        - ОписаниеТипов - тип значений реквизита.
//  ЗначенияРеквизита   - ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
КонецПроцедуры

// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ОбъектСопоставления      - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//    * Представление                   - Строка - представление реквизита.
//  ДополнительныеРеквизиты  - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения     - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий       - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// В запросе должны быть описаны временные таблицы с предопределенными полями (псевдонимами).
// На основании данных таблиц формируются файлы выгрузки номенклатуры.
//
// Если в прикладном решении отсутствуют данные для заполнения какого-то поля, либо целой таблицы, кроме обязательных,
// то это поле (или таблицу) следует исключить из запроса полностью, либо инициализировать значением(значениями) NULL.
// Обязательные таблицы и поля должны присутствовать в запросе даже если нет источников данных для их заполнения - в
// этом случае инициализировать поля значениями NULL
//
// На входе запрос содержит текст создания временной таблицы ОтборНоменклатуры, которая служит для ограничения выборки.
// Формируется на основе текста запроса, полученного методом ИнициализацияЗапросаОтбораДанныхНоменклатуры.
// Поля таблицы:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//      Если ОтборНоменклатуры.Характеристика ЕСТЬ NULL, то нужно получить данные по всем характеристикам номенклатуры
//  * ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой - вид номенклатуры, может быть NULL, если
//                                                                            виды номенклатуры не используются.
//  * Родитель        - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - группа товара в иерархии, может быть NULL,
//      если справочник номенклатуры не иерархический.
// 
// Параметры запроса:
//  * ИсключенныеДополнительныеРеквизиты    - Массив - доп.реквизиты, запрещенные к выгрузке пользователем. Выгружать
//      надо все доп.реквизиты кроме исключений, заданных этим параметром.
//  * ВыгружатьИндивидуальныеХарактеристики - Булево   - признак необходимости выгружать индивидуальные характеристики номенклатуры.
//  * ИсключенныеВидыНоменклатуры           - Массив - виды номенклатуры, по которым пользователь запретил выгружать
//      характеристики. По всем остальным видам характеристики выгружаются.
// * Параметры запроса - строковые константы:
// * Ставки НДС:
//  * НДС0  - Строка - без НДС (или НДС 0%).
//  * НДС10 - Строка - НДС 10%.
//  * НДС18 - Строка - НДС 18%.
//  * НДС20 - Строка - НДС 20%.
// * Типы номенклатуры:
//  * Товар  - Строка - тип номенклатуры "Товар".
//  * Услуга - Строка - тип номенклатуры "Услуга".
// * Типы измеряемых величин:
//  * Вес                - Строка
//  * Объем              - Строка
//  * Площадь            - Строка
//  * Длина              - Строка
//  * КоличествоШтук     - Строка
//  * Упаковка           - Строка
//  * Мощность           - Строка
//  * Энергия            - Строка
//  * ЭлектрическийЗаряд - Строка
//  * Время              - Строка
// Классификаторы:
//  * ОКПД2  - Строка
//  * ТНВЭД  - Строка
//  * ЕГАИС  - Строка
//  * ОКВЭД2 - Строка
//
// Временные таблицы и предопределенные поля:
// Товары
//  * Номенклатура                - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика              - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Наименование                - Строка - наименование товара.
//  * ХарактеристикаНаименование  - Строка - наименование характеристики.
//  * Артикул                     - Строка - артикул товара.
//  * СтавкаНДС                   - Строка - ставка НДС, значение из списка: &НДС0, &НДС10, &НДС18, &НДС20.
//  * ЕдиницаИзмерения                        - Строка - наименование базовой единицы измерения товара.
//  * ЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения товара.
//  * ЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - значение из списка: &Вес, &Объем, &Площадь, &Длина,
//      &КоличествоШтук, &Упаковка, &Мощность, &Энергия, &ЭлектрическийЗаряд, &Время.
//  * ЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения товара.
//  * ЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения товара.
//  * ЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения товара.
//  * ЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения товара к базовой величине.
//  * ЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения товара к базовой величине.
//  * ТипНоменклатуры             - Строка - значение из списка: &Товар, &Услуга.
//  * Описание                    - Строка - текстовое описание товара.
//  * НаименованияДляПечатиЧека   - Строка - краткое наименование товара для печати чека.
//  * ВестиУчетПоГТД              - Булево - вести учет по ГТД.
//  * ПродукцияМаркируемаяДляГИСМ - Булево - продукция, маркируемая для ГИСМ.
//  * ПодакцизныйТовар            - Булево - подакцизный товар.
//  * СтранаПроисхождения         - Строка - код страны происхождения товара согласно ОКСМ.
//  * Производитель               - Ссылка - ссылка (уникальный идентификатор) производителя.
//  * ПроизводительНаименование   - Строка - наименование производителя.
//  * ПроизводительИНН            - Строка - ИНН производителя.
//  * ПроизводительКПП            - Строка - КПП производителя.
//  * Марка                       - Ссылка - ссылка (уникальный идентификатор) марки (бренда).
//  * МаркаНаименование           - Строка - наименование марки (бренда).
//  * КоличествоВУпаковке                                        - Число  - количество штук в 1 единице (упаковке) товара. Например: 1 пачка фломастеров содержит 10 штук фломастеров.
//  * КоличествоВУпаковкеЕдиницаИзмерения                        - Строка - наименование единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &КоличествоШтук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения количества штук.
//  * КоличествоВУпаковкеЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения количества штук к базовой величине.
//  * КоличествоВУпаковкеЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения количества штук к базовой величине.
//  * ВесЧислитель                               - Число  - числитель отношения единицы измерения веса к единице измерения товара.
//  * ВесЗнаменатель                             - Число  - знаменатель отношения единицы измерения веса к единице измерения товара.
//  * ВесЕдиницаИзмерения                        - Строка - наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения веса.
//  * ВесЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Вес.
//  * ВесЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения веса.
//  * ВесЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения веса.
//  * ВесЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения веса к базовой величине.
//  * ВесЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения веса к базовой величине.
//  * ДлинаЧислитель                               - Число  - числитель отношения единицы измерения длины к единице измерения товара.
//  * ДлинаЗнаменатель                             - Число  - знаменатель отношения единицы измерения длины к единице измерения товара.
//  * ДлинаЕдиницаИзмерения                        - Строка - наименование единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ДлинаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения длины.
//  * ДлинаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения длины к базовой величине.
//  * ДлинаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения длины к базовой величине.
//  * ОбъемЧислитель                               - Число  - числитель отношения единицы измерения объема к единице измерения товара.
//  * ОбъемЗнаменатель                             - Число  - знаменатель отношения единицы измерения объема к единице измерения товара.
//  * ОбъемЕдиницаИзмерения                        - Строка - наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Объем.
//  * ОбъемЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения объема к базовой величине.
//  * ОбъемЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения объема к базовой величине.
//  * ПлощадьЧислитель                               - Число  - числитель отношения единицы измерения площади к единице измерения товара.
//  * ПлощадьЗнаменатель                             - Число  - знаменатель отношения единицы измерения площади к единице измерения товара.
//  * ПлощадьЕдиницаИзмерения                        - Строка - наименование единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - &Площадь.
//  * ПлощадьЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения площади.
//  * ПлощадьЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения площади к базовой величине.
//  * ПлощадьЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения площади к базовой величине.
// КРИТИЧЕСКИ ВАЖНО! Таблица Товары должна содержать ровно по 1 строке на сочетание Номенклатура + Характеристика
// Поддерживается выгрузка дополнительных свойств Номенклатуры, не включенных в указанный выше список полей.
// Это означает, что все поля таблицы Товары будут включены в пакет выгрузки, как описанные выше, так и прочие.
// Например, таким образом можно добавлять данные из регистров сведений.
//
// Категории:
//  * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Категория    - ОпределяемыйТип.ОбъектыСопоставленияБизнесСеть - ссылка на категорию.
//  * Наименование - Строка - наименование категории.
//  * Родитель     - ОпределяемыйТип.ОбъектыСопоставленияБизнесСеть - родитель категории в иерархии.
// Пояснение.
// Категории - это способ деления товаров на группы.
// В общем случае предполагается, что категорией может быть вид номенклатуры, либо родитель в иерархии номенклатуры.
// Наличие таблицы в запросе обязательно.
// Если в конфигурации нет возможности разделить номенклатуру на категории, следует инициализировать таблицу значениями NULL по всем полям.
// Минимально необходимо описать 2 уровня иерархии. 
// То есть если справочник Номенклатура иерархический, то в список категорий должны попасть Родитель и Родитель.Родитель.
// Если виды номенклатуры используются, то в списке категорий должны быть ВидНоменклатуры и ВидНоменклатуры.Родитель.
// Допускается и более глубокое описание иерархии - 3, 4 и т.д. уровней.
// 
// Свойства:
//  * Номенклатура           - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика         - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Свойство               - Ссылка - свойство товара.
//  * Значение               - Произвольный - значение свойства товара.
//  * РеквизитХарактеристики - Булево - признак свойства характеристики.
// ВАЖНО! В разрезе характеристик указать только свойства характеристик (СвойствоХарактеристики = ИСТИНА).
// Для свойств номенклатуры (СвойствоХарактеристики = ЛОЖЬ) характеристику не заполнять, указать NULL.
// Свойства номенклатуры не должны дублироваться (размножаться на количество различных характеристик номенклатуры).
//
// Штрихкоды:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой - ссылка на характеристику.
//  * Упаковка       - Ссылка - единица измерения упаковки товара.
//  * Штрихкод       - Строка - штрихкод.
//
// Упаковки:
//  * Номенклатура         - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Ссылка               - Ссылка - ссылка (уникальный идентификатор) на упаковку.
//  * Наименование         - Строка - наименование упаковки.
//  * Родитель             - Ссылка - «родительская» (внешняя, более крупная) упаковка.
//  * РодительНаименование - Строка - наименование «родительской» упаковки.
//  * ЕдиницаКодОКЕИ       - Строка - код ОКЕИ единицы измерения упаковки.
//  * ЕдиницаНаименование  - Строка - наименование единицы измерения упаковки.
//  * Числитель            - Число  - числитель отношения единицы измерения к упаковке.
//  * Знаменатель          - Число  - знаменатель отношения единицы измерения к упаковке.
//  * Вес                                        - Число  - вес упаковки (брутто).
//  * ВесЕдиницаИзмерения                        - Строка - наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения веса.
//  * ВесЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Вес.
//  * ВесЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения веса.
//  * ВесЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения веса.
//  * ВесЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения веса.
//  * ВесЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения веса к базовой величине.
//  * ВесЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения веса к базовой величине.
//  * Объем                                        - Число  - объем упаковки.
//  * ОбъемЕдиницаИзмерения                        - Строка - наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Объем.
//  * ОбъемЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения объема.
//  * ОбъемЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения объема к базовой величине.
//  * ОбъемЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения объема к базовой величине.
//  * Высота                                        - Число  - высота упаковки.
//  * ВысотаЕдиницаИзмерения                        - Строка - наименование единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ВысотаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения высоты.
//  * ВысотаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения высоты к базовой величине.
//  * ВысотаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения высоты к базовой величине.
//  * Ширина                                        - Число  - ширина упаковки.
//  * ШиринаЕдиницаИзмерения                        - Строка - наименование единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ШиринаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения ширины.
//  * ШиринаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения ширины к базовой величине.
//  * ШиринаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения ширины к базовой величине.
//  * Глубина                                        - Число  - глубина упаковки.
//  * ГлубинаЕдиницаИзмерения                        - Строка - наименование единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияКодОКЕИ                 - Строка - код ОКЕИ единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияТипИзмеряемойВеличины   - Строка - ожидаемое значение &Длина.
//  * ГлубинаЕдиницаИзмеренияНаименованиеПолное      - Строка - полное наименование единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияМеждународноеСокращение - Строка - международное сокращение единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияБазоваяЕдиница          - Строка - код ОКЕИ базовой величины для единицы измерения глубины.
//  * ГлубинаЕдиницаИзмеренияЧислитель               - Число  - числитель отношения единицы измерения глубины к базовой величине.
//  * ГлубинаЕдиницаИзмеренияЗнаменатель             - Число  - знаменатель отношения единицы измерения глубины к базовой величине.
//
// Классификаторы:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Наименование   - Строка - имя классификатора, значение из списка &ОКПД2, &ТНВЭД, &ЕГАИС, &ОКВЭД2.
//  * Код            - Строка - код элемента классификатора.
//  * Описание       - Строка - название кода.
//
// Изображения:
//  * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Файл         - Ссылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование - Строка - наименование файла.
//  * Гиперссылка  - Строка - URL файла.
//
// Вложения:
//  * Номенклатура - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Файл         - Ссылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование - Строка - наименование файла.
//  * Гиперссылка  - Строка - URL файла.
// 
// Сертификаты:
//  * Номенклатура               - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой - ссылка на товар.
//  * Сертификат                 - Ссылка - ссылка на сертификат.
//  * Номер                      - Строка - номер.
//  * ДатаНачалаСрокаДействия    - ДатаВремя - дата выдачи.
//  * ДатаОкончанияСрокаДействия - ДатаВремя - дата окончания срока действия.
//  * ТипСертификата             - Строка - тип сертификата.
//  * ОрганВыдавшийДокумент      - Строка - орган выдавший документ.
//
// ВложенияСертификатов:
//  * Сертификат   - Ссылка - ссылка на сертификат.
//  * Файл         - Ссылка - ссылка (уникальный идентификатор) на файл.
//  * Наименование - Строка - наименование файла.
//  * Гиперссылка  - Строка - URL файла.
//
// Обязательные таблицы и поля:
// Товары
//  * Номенклатура,
//  * Характеристика.
// Свойства: все поля.
// Категории: все поля.
// Штрихкоды: Номенклатура.
//
// При необходимости возможно добавление в пакет данных выгрузки произвольных дополнительных сведений общего характера, без привязки к товарной позиции.
// Для этого в тексте запроса можно описать любое нужное количество дополнительных запросов без создания временной таблицы.
// Важно, чтобы все эти запросы не использовали никакие вышеописанные временные таблицы, относящиеся к номенклатуре, так как
//  выполняться эти запросы будут отдельно от запроса по номенклатуре, поскольку речь идет о сведениях, общих для всего пакета данных в целом.
// Если добавляемые в пакет дополнительные сведения имеют сложную структуру (не одномерный массив полей, а многомерный массив), то 
//  имя таблицы источника данных нужно сформировать по шаблону ДополнительныеДанные_ИмяТаблицы.
// В этом случае в пакет добавится дополнительное свойство ИмяТаблицы, значение которого будет заполнено данными запроса.
// Если таблица с префиксом ДополнительныеДанные_ в секции ИЗ не найдена,
//  то все полученные запросом дополнительные сведения добавляются в пакет как одномерный массив пар значений <имя поля> - <значение поля>.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных номенклатуры.
//
Процедура ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос) Экспорт
	
	РаботаСНоменклатуройУНФ.ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос);

КонецПроцедуры

// Позволяет переопределить пользовательское представление формализованных реквизитов выгрузки номенклатуры,
//  а так же связать формализованные реквизиты с публикуемыми, см. ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации.
// Множества ПубликуемыеРеквизиты и ФормализованныеРеквизиты решают различные задачи и могут пересекаться,
//  поэтому, для корректной работы библиотеки нужно указать их связь, если она есть.
// В этом случае в качестве значения ключа структуры ФормализованныеРеквизиты подставляется ключ из соответствия ПубликуемыеРеквизиты.
// То есть, если формализованный реквизит одновременно является публикуемым, то заполнение значения ключа обязательно.
// Для остальных реквизитов указание представления не обязательно.
// Если представление не переопределено, то при выводе в интерфейс будет поставлено библиотечное значение представления
// "по умолчанию". Представления формализованных реквизитов используются в форме ВыгружаемыеРеквизиты.
// Состав ключей параметра ФормализованныеРеквизиты ограничивается на основании текста запроса ИнициализацияЗапросаВыборкиДанныхДляВыгрузки.
// Например, если реквизит Производитель в запросе не описан, то 
//  * в форму ВыгружаемыеРеквизиты он не выводится;
//  * в составе параметра ФормализованныеРеквизиты ключа "Производитель" не будет.
//
// Параметры:
//  ФормализованныеРеквизиты - структура - см. РаботаСНоменклатуройСлужебный.ФормализованныеРеквизитыНоменклатурыДляВыгрузки
//
// Пример:
//  1. ФормализованныеРеквизиты.Артикул = Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул; - связывает формализованный
//       реквизит с публикуемым.
//  2. ФормализованныеРеквизиты.ТипНоменклатуры = НСтр("ru = 'Тип номенклатуры'")); - задает пользовательское представление реквизита.
//
Процедура ФормализованныеРеквизитыНоменклатурыДляВыгрузки(ФормализованныеРеквизиты) Экспорт
	
	РаботаСНоменклатуройУНФ.ФормализованныеРеквизитыНоменклатурыДляВыгрузки(ФормализованныеРеквизиты);
	
КонецПроцедуры

// Формирует перечень доступных для выгрузки дополнительных реквизитов Номенклатуры
// 
// Параметры:
//  ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    Колонки:
//    * Свойство - Ссылка - ссылка на доп.реквизит.
//    * Синоним - Строка - пользовательское представление доп.реквизита.
//    * ВидНоменклатуры - Ссылка - вид номенклатуры (соответствует набору доп.реквизитов). Для общих реквизитов не
//                                 заполняется (пустая ссылка).
//    * ВидНоменклатурыНаименование - Строка - пользовательское представление набора доп.реквизитов. Пример: "Столы (вид номенклатуры)".
//    * ИспользоватьХарактеристики - Булево - признак использования характеристик по виду номенклатуры.
//    Если виды номенклатуры не используются, достаточно заполнить только первые 2 колонки.
//  ВидыНоменклатуры - СписокЗначений, Неопределено - виды номенклатуры, для которых нужно получить доп.реквизиты.
//                                      Если передано Неопределено, то нужно получить доп.реквизиты по всем видам номенклатуры без отбора.
// 
Процедура ДополнительныеРеквизитыНоменклатурыДляВыгрузки(ДополнительныеРеквизиты, ВидыНоменклатуры) Экспорт
	//++(
	ДополнительныеРеквизиты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	// общие для номенклатуры
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Свойство,
	|	ДополнительныеРеквизиты.Заголовок КАК Синоним,
	|	ДополнительныеРеквизиты.ТипЗначения КАК ТипЗначения,
	|	ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка) КАК ВидНоменклатуры,
	|	&ПояснениеОбщие КАК ВидНоменклатурыНаименование,
	|	ЛОЖЬ КАК ИспользоватьХарактеристики
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				Наборы.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|			ГДЕ
	|				Наборы.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// индивидуальные для категории
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Заголовок,
	|	ДополнительныеРеквизиты.ТипЗначения,
	|	КатегорииНоменклатуры.Ссылка,
	|	КатегорииНоменклатуры.Наименование + &ПояснениеВид,
	|	КатегорииНоменклатуры.ИспользоватьХарактеристики
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|		ПО КатегорииНоменклатуры.НаборСвойств = Наборы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|		ПО (Наборы.Свойство = ДополнительныеРеквизиты.Ссылка)
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И КатегорииНоменклатуры.Ссылка В(&КатегорииНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// индивидуальные для характеристики категории
	|ВЫБРАТЬ
	//|	КатегорииНоменклатуры.Ссылка,
	//|	КатегорииНоменклатуры.Наименование + &ПояснениеВид,
	//|	ИСТИНА,
	//|	ДополнительныеРеквизиты.Ссылка,
	//|	ДополнительныеРеквизиты.ТипЗначения,
	//|	ДополнительныеРеквизиты.Наименование
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Заголовок,
	|	ДополнительныеРеквизиты.ТипЗначения,
	|	КатегорииНоменклатуры.Ссылка,
	|	КатегорииНоменклатуры.Наименование + &ПояснениеВид,
	|	ИСТИНА
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|			ПО Наборы.Свойство = ДополнительныеРеквизиты.Ссылка
	|		ПО КатегорииНоменклатуры.НаборСвойствХарактеристики = Наборы.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И КатегорииНоменклатуры.Ссылка В(&КатегорииНоменклатуры)
	|	//И КатегорииНоменклатуры.ИспользоватьХарактеристики";
	
	Если ВидыНоменклатуры = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КатегорииНоменклатуры.Ссылка В(&ВидыНоменклатуры)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("КатегорииНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПояснениеВид", СтрШаблон(НСтр("ru = '%1(Категория номенклатуры)'"), " "));
	Запрос.УстановитьПараметр("ПояснениеОбщие", НСтр("ru = 'Общие доп.реквизиты'"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты.Добавить(), Выборка);
	КонецЦикла;
	//)++	
КонецПроцедуры

// Определяет товарную группу 1С:Номенклатуры для объектов информационной базы - номенклатуры или видов номенклатуры.
// 
// Параметры:
//  ТоварныеГруппыНоменклатуры - Соответствие,
//   Ключи - ОпределяемыйТип.НоменклатураРаботаСНоменклатурой, ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой -
//           номенклатура или вид номенклатуры.
//   Значения - Строка - имя товарной группы 1С:Номенклатуры, например: "ЛегкаяПромышленность", "МолочнаяПродукция",
//                       так же см. ключи РаботаСНоменклатурой.ТоварныеГруппыСервиса()
//
Процедура ПолучитьТоварныеГруппыНоменклатуры(ТоварныеГруппыНоменклатуры) Экспорт
	
	Номенклатура     = Новый Массив;
	ВидыНоменклатуры = Новый Массив;
	Для каждого ЭлементКоллекции Из ТоварныеГруппыНоменклатуры Цикл
		СсылкаНаОбъект = ЭлементКоллекции.Ключ;
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура.Добавить(СсылкаНаОбъект);
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			ВидыНоменклатуры.Добавить(СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ВидПродукцииИС КАК ТоварнаяГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.ВидПродукцииИС
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СоответствиеТоварныхГрупп = Новый Соответствие;
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Велосипеды, "Велосипеды");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Духи, "Духи");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, "КреслаКоляски");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, "ЛегкаяПромышленность");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, "МолочнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Обувь, "ОбувнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Табак, "ТабачнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Фотоаппараты, "Фотоаппараты");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ВидыПродукцииИС.Шины, "Шины");
	
		
	Пока Выборка.Следующий() Цикл
		ТоварнаяГруппаСервиса = СоответствиеТоварныхГрупп.Получить(Выборка.ТоварнаяГруппа);
		ТоварныеГруппыНоменклатуры.Вставить(Выборка.Ссылка, ТоварнаяГруппаСервиса);	
	КонецЦикла;
	
КонецПроцедуры

// Формирует пользовательское представление товарных групп сервиса 1С:Номенклатура
// 
// Параметры:
//  ЗаголовокТоварныхГрупп - Строка - представление самого термина "товарная группа" в именительном падеже единственном
//                                    числе, например "особенность учета".
//  ТоварныеГруппыСервиса - Структура - ключи - имена товарных групп 1С:Номенклатуры, например: "ЛегкаяПромышленность", "МолочнаяПродукция",
//                                      значения - пользовательские представления товарных групп, например: "Товары легкой промышленности и одежда",
//                                      так же см. РаботаСНоменклатурой.ТоварныеГруппыСервиса()
//
Процедура ПредставлениеТоварныхГрупп(ЗаголовокТоварныхГрупп, ТоварныеГруппыСервиса) Экспорт 
	
	ЗаголовокТоварныхГрупп = НСтр("ru = 'Вид продукции ИС';
									|en = 'accounting particularity'");
	
	// наименовария товарных групп в сервисе не совпадают с наименованиями в перечислении ВидыПродукцииИС
	СоответствиеНаименований = Новый Соответствие;
	СоответствиеНаименований.Вставить("Велосипеды", "Велосипеды");
	СоответствиеНаименований.Вставить("Духи", "Духи");
	СоответствиеНаименований.Вставить("КреслаКоляски", "КреслаКоляски");
	СоответствиеНаименований.Вставить("ЛегкаяПромышленность", "ЛегкаяПромышленность");
	СоответствиеНаименований.Вставить("МолочнаяПродукция", "МолочнаяПродукцияПодконтрольнаяВЕТИС");
	СоответствиеНаименований.Вставить("ОбувнаяПродукция", "Обувь");
	СоответствиеНаименований.Вставить("ТабачнаяПродукция", "Табак");
	СоответствиеНаименований.Вставить("Фотоаппараты", "Фотоаппараты");
	СоответствиеНаименований.Вставить("Шины", "Шины");
	
	
	Для каждого ТоварнаяГруппа Из ТоварныеГруппыСервиса Цикл
		ТоварныеГруппыСервиса.Вставить(ТоварнаяГруппа.Ключ, Перечисления.ВидыПродукцииИС[СоответствиеНаименований[ТоварнаяГруппа.Ключ]]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтавкаНДСПоДаннымНоменклатурыСервиса(Значение)
	
	Если Значение = "10" ИЛИ Значение = "18" ИЛИ Значение = "20" Тогда
		Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(Число(Значение));
	КонецЕсли;
	
	Если Значение = "-" Тогда
		Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	КонецЕсли;
	
	Возврат Справочники.СтавкиНДС.СтавкаНДС(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина));
	
КонецФункции

Функция ТипНоменклатурыПоДаннымНоменклатурыСервиса(Значение)
	
	Если Значение = "Услуга" Тогда 
		Возврат Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Возврат Перечисления.ТипыНоменклатуры.Запас;
	Иначе 
		Возврат Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ЕдиницаИзмеренияСервиса)
	
	ЕдиницаИзмерения = Неопределено;
	
	// Поиск по коду
	КодОКЕИ = Неопределено;
	ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", КодОКЕИ);
	Если КодОКЕИ <> Неопределено Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодОКЕИ);
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Неопределено Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	// Поиск по наименованию
	НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЕдиницаИзмерения = ЕдиницаИзмеренияПоНаименованию(НаименованиеЕдиницыИзмерения);
	
	Если ЕдиницаИзмерения <> Неопределено Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Возврат НовыйЕдиницаИзмерения(НаименованиеЕдиницыИзмерения, ЕдиницаИзмеренияСервиса);
	
КонецФункции

Функция ЕдиницаИзмеренияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйЕдиницаИзмерения(Наименование, ЕдиницаИзмеренияСервиса)
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ПолноеНаименование") Тогда
		ЗначенияЗаполнения.Вставить("НаименованиеПолное", ЕдиницаИзмеренияСервиса.ПолноеНаименование);
	КонецЕсли;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ВнутреннееНаименование") Тогда
		ЗначенияЗаполнения.Вставить("МеждународноеСокращение", ЕдиницаИзмеренияСервиса.ВнутреннееНаименование);
	КонецЕсли;
	
	ЕдиницаИзмерения.Заполнить(ЗначенияЗаполнения);
	
	ЕдиницаИзмерения.Наименование = Наименование;
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ") И ЗначениеЗаполнено(ЕдиницаИзмеренияСервиса.ОКЕИ) Тогда
		ЕдиницаИзмерения.Код = ЕдиницаИзмеренияСервиса.ОКЕИ;
	КонецЕсли;
	
	ЕдиницаИзмерения.Записать();
	
	Возврат ЕдиницаИзмерения.Ссылка;
	
КонецФункции

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = 
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
		ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

Процедура УстановитьИсключительнуюБлокировкуПоСсылке(Ссылка)
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
		
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения)
	
	Объект = Форма.Объект;
	
	ДанныеДополнительныхРеквизитов = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(ДанныеИнтерактивногоЗаполнения);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		// Заполнение наименование на основании всех выбранных категорий при множественной привязке.
		
		Если ДанныеИнтерактивногоЗаполнения.Количество() > 1
			И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			
			Объект.Наименование = СтрСоединить(ДанныеИнтерактивногоЗаполнения.ВыгрузитьКолонку("Наименование"), "; ");
		КонецЕсли;
		
		// Заполнение дополнительных реквизитов и реквизитов характеристик.	
		Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Форма.ТаблицаДопРеквизитовНоменклатуры.Добавить();
			НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
		КонецЦикла;
		Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Форма.ТаблицаДопРеквизитовХарактеристик.Добавить();
			НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
		КонецЦикла;
		
		// Установка варианта ведения учета характеристик.
		Если Форма.ТаблицаДопРеквизитовХарактеристик.Количество() > 0 Тогда
			Объект.ИспользоватьХарактеристики = Истина;
		КонецЕсли;
		
	Иначе
		
		Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Форма.СвойстваНоменклатуры.Добавить();
			НоваяСтрока.Заголовок = ТекущийРеквизит.Наименование;
		КонецЦикла;
		Для каждого ТекущийРеквизит Из ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Форма.СвойстваХарактеристики.Добавить();
			НоваяСтрока.Заголовок = ТекущийРеквизит.Наименование;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПриИнтерактивномСоздании(Форма, ДанныеЗаполнения)
	
	Для каждого ЭлементКоллекции Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Значение)
			И Не ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Форма.Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитИнформационнойБазы;
		Если ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеИнформационнойБазы) Тогда
			НоваяСтрока.Значение = ЭлементКоллекции.ЗначениеИнформационнойБазы;
		Иначе
			НоваяСтрока.Значение = ЭлементКоллекции.Значение;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Форма.Объект);
	
КонецПроцедуры

#КонецОбласти