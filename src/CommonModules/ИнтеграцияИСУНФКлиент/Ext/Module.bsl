#Область ИнтеграцияИСКлиентПереопределяемый

// Открывает форму списка видов номенклатуры.
//
Процедура ОткрытьФормуСпискаВидыНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаСписка",, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму списка номенклатуры.
//
Процедура ОткрытьФормуСпискаНоменклатуры(ВладелецФормы) Экспорт
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка",, ВладелецФормы);
	
КонецПроцедуры

// Обработчик специфических сценариев записи объекта в форме (например, после дополнительных ответов пользователя)
//   При переопределении действия:
//     ** Вызвать обработчик ДействиеПослеЗаписи после окончания записи
//     ** Установить признак СтандартнаяОбработка в значение Ложь
//
// Параметры:
//   Форма                - УправляемаяФорма     - источник события записи
//   Объект               - ДанныеФормыСтруктура - записываемый из формы объект
//   ДействиеПослеЗаписи  - ОписаниеОповещения   - действие которое требуется выполнить после записи объекта из формы
//   СтандартнаяОбработка - Булево               - признак стандартной обработки события (запись без блокирующих вызовов)
//
Процедура ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка) Экспорт
	
	Если Объект.Проведен Тогда
		Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Иначе
		Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСКлиентПереопределяемый

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
	
		Если Форма.Объект.Запасы.Количество() Тогда
			ДобавленныеВидыПродукции = ИнтеграцияИСУНФВызовСервера.ВидыПродукцииВЗапасах(Форма.Объект.Запасы);
		Иначе
			ДобавленныеВидыПродукции = Новый СписокЗначений;
		КонецЕсли;
		
		АлкогольнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		
		Если ДобавленныеВидыПродукции.Количество() = 0 Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				Для Каждого ВидПродукции Из Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции Цикл
					ДобавленныеВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленныеВидыПродукции.Количество() = 1 Тогда
			
			ВидПродукции = ДобавленныеВидыПродукции[0].Значение;
			Если ВидПродукции = АлкогольнаяПродукция Тогда
				Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиГосЕГАИС");
			Иначе
				Команда = Новый Структура("Имя", 
					СтрШаблон("ПроверитьАкцизныеМаркиГосИС%1",
						ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ВидПродукции)));
			КонецЕсли;
			
		Иначе
			
			Команда = Новый Структура("Имя", "");
			
			Если ДобавленныеВидыПродукции.Количество() Тогда
				
				СписокВыбора = Новый СписокЗначений;
				
				Если ДобавленныеВидыПродукции.НайтиПоЗначению(АлкогольнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(АлкогольнаяПродукция, НСтр("ru = 'Алкогольная продукция';
																	|en = 'Алкогольная продукция'"));
				КонецЕсли;
				
				Для Каждого ВидПродукцииИС Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
					Если ДобавленныеВидыПродукции.НайтиПоЗначению(ВидПродукцииИС) <> Неопределено Тогда
						СписокВыбора.Добавить(ВидПродукцииИС, "" + ВидПродукцииИС);
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыФормы = Новый Структура("СписокВыбора", СписокВыбора);
				
				ДополнительныеПараметры = Новый Структура("Форма", Форма);
				ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыСканирования", ИнтеграцияИСУНФКлиент, ДополнительныеПараметры);
				ОткрытьФорму("ОбщаяФорма.ФормаВыбораВидовПродукцииГосИС",
					ПараметрыФормы,
					Форма,,,,
					ОповещениеОВыборе,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий обрабатываемых БГосИС в прикладных формах
//
// Параметры:
//  Форма                   - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия              - Строка           - имя события,
//  Параметр                - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник                - Произвольный     - источник события.
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки
Процедура ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
			
		Если Источник = "ПодключаемоеОборудование" И Форма.ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" И Не глПодключаемоеОборудованиеСобытиеОбработано Тогда
				Если Форма.ИспользоватьАкцизныеМарки Тогда
					Если Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							НСтр("ru = 'Считывание марок следует производить в специализированную форму: ""Акцизные марки""'"));
					Иначе
						ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
						МенеджерОборудованияУНФКлиент.ОбработатьСобытие();
						ДанныеШтрихкода = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
						ОписаниеОповещения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма);
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкода);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики БГосИС элементов прикладных форм
//   Ограничения: не предполагает контекстный серверный вызов
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
			
		Если Элемент = "Запасы" Тогда
			
			Если ДополнительныеПараметры.Свойство("ПередУдалением") Тогда
				Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Ложь;
				Для Каждого СтрокаТовары Из Форма.Элементы.Запасы.ВыделенныеСтроки Цикл
					Если Форма.Элементы.Запасы.ДанныеСтроки(СтрокаТовары).МаркируемаяПродукция Тогда
						Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Истина;
					КонецЕсли;
				КонецЦикла;
				Возврат;
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ПослеУдаления") Тогда
				ДополнительныеПараметры.ТребуетсяСерверныйВызов = Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок
					И Форма.Объект.АкцизныеМарки.Количество();
				Возврат;
			КонецЕсли;
			
			ТекущаяСтрока = Форма.Элементы.Запасы.ТекущиеДанные;
			Если (ТекущаяСтрока = Неопределено) Тогда
				Если ДополнительныеПараметры.Свойство("ТекущаяСтрока") Тогда
					ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
					Если ТекущаяСтрока = Неопределено Тогда
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// ГосИС_11 
			//НужноПересчитатьКеш = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
			//	Форма, Форма.Объект.Запасы, ТекущаяСтрока, Форма.КэшированныеСтроки.Запасы);
			НужноПересчитатьКеш = Истина;
			
			Если НужноПересчитатьКеш Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат
		И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выдает предупреждение пользователю со списком ненайденных штрихкодов.
// Используется в случаях, когда у пользователя нет прав на регистрацию новых штрихкодов.
//
// Параметры:
//  НеизвестныеШтрихкоды - Массив - Штрихкоды, для которых не удалось найти номенклатуру
Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды, ПоказыватьСообщением = Истина) Экспорт
	
	СтрокаПредупреждения = "";
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
		СтрокаПредупреждения = СтрокаПредупреждения + СтрокаСообщения + Символы.ПС;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПредупреждения) Тогда
		Если ПоказыватьСообщением Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
		Иначе
			ПоказатьПредупреждение(,СтрокаПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьВыборФормыСканирования(Выбор, ДополнительныеПараметры) Экспорт
	
	Если Выбор <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыУказанияСерий") Тогда
			ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
		Иначе
			ПараметрыУказанияСерий = Неопределено;
		КонецЕсли;
		
		ВыбранныйВидПродукции = Выбор.Значение;
		Если ВыбранныйВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			ПроверкаИПодборПродукцииЕГАИСКлиент.ОткрытьФормуСканированияАлкогольнойПродукции(ДополнительныеПараметры.Форма);
		Иначе
			ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ДополнительныеПараметры.Форма, ВыбранныйВидПродукции, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобходимоЗавершитьЗаполнениеРеквизитаВидПродукцииИС_ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = "ПодождатьЗавершенияОбработки" Тогда
		
		Параметры.Форма.Закрыть();
		
	ИначеЕсли Результат = "ВыполнитьОбработкуСейчас" Тогда
		
		Если НЕ ИнтеграцияИСУНФВызовСервера.ЗаполнитьРеквизитВидПродукцииИС() Тогда
			
			Сообщить("Не удалось выполнить обработку данных о маркируемых товарах");
			Параметры.Форма.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
#КонецОбласти