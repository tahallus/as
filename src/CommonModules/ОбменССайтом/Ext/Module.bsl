#Область ПрограммныйИнтерфейс

// Функция возвращает массив узлов регистрации для обменов с сайтами 
// из параметра сеанса "ИспользуемыеУзлыОбменаССайтом"
//
// Параметры:
//  ВыбиратьУзлыОбменаТоварами - Булево - признак Выборки узлов для обмена товарами
//  ВыбиратьУзлыОбменаЗаказами - Булево - признак Выборки узлов для обмена заказами
//  ВыбиратьУзлыОбменаУслугами - Булево - признак Выборки узлов для обмена услугами
//
// Возвращаемое значение:
//  Массив - массив, содержащий узлы для регистрации
//
Функция ПолучитьМассивУзловДляРегистрации(ВыбиратьУзлыОбменаТоварами = Ложь, ВыбиратьУзлыОбменаЗаказами = Ложь, ВыбиратьУзлыОбменаУслугами = Ложь) Экспорт
	
	МассивУзлов = Новый Массив();
	
	Для Каждого Элемент Из ИспользуемыеУзлыОбменаССайтом() Цикл
		
		Если ВыбиратьУзлыОбменаТоварами
			И Элемент.ОбменТоварами Тогда
			
			МассивУзлов.Добавить(Элемент);
			
		ИначеЕсли ВыбиратьУзлыОбменаЗаказами 
			И Элемент.ОбменЗаказами Тогда
			
			МассивУзлов.Добавить(Элемент);
		ИначеЕсли ВыбиратьУзлыОбменаУслугами
			И Элемент.ОбменЗаписьНаУслуги Тогда
			
			МассивУзлов.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивУзлов;
	
КонецФункции

// Функция возвращает значение из параметра сеанса "ОбменДаннымиССайтомВключен"
//
// Возвращаемое значение:
//  Булево - Булево, Истина если включен
//
Функция ОбменДаннымиССайтомВключен() Экспорт
	
	Попытка
		ОбменДаннымиССайтомВключен = ПараметрыСеанса.ОбменДаннымиССайтомВключен;
	Исключение
		ОбновитьПараметрыСеанса();
		ОбменДаннымиССайтомВключен = ПараметрыСеанса.ОбменДаннымиССайтомВключен;
		
		ЗаписьЖурналаРегистрации("ОбменССайтом.ОбменДаннымиССайтомВключен", УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОбменДаннымиССайтомВключен
	
КонецФункции

// Функция возвращает массив узлов регистрации для обменов с сайтами 
// из параметра сеанса "ИспользуемыеУзлыОбменаССайтом"
//
Функция ИспользуемыеУзлыОбменаССайтом() Экспорт
	
	Попытка
		ИспользуемыеУзлыОбменаССайтом = ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом;
	Исключение
		ОбновитьПараметрыСеанса();
		ИспользуемыеУзлыОбменаССайтом = ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом;
		
		ЗаписьЖурналаРегистрации("ОбменССайтом.ИспользуемыеУзлыОбменаССайтом", УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ИспользуемыеУзлыОбменаССайтом
	
КонецФункции

#КонецОбласти

#Область ЗапускОбмена

// Выполняет запуск обмена с сайтом из регламентного задания.
//
// Параметры:
//	КодУзлаОбмена		- строка с кодом узла плана обмена.
//
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УзелОбмена = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
		УровеньЖурналаРегистрации.Ошибка,
		УзелОбмена.Метаданные(),
		УзелОбмена,
		НСтр("ru = 'Не найден узел обмена с кодом'") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена,"ПометкаУдаления, ВыгружатьНаСайт, АдресСайта, ИмяПользователя, ВыгружатьИзменения");
	
	Если ДанныеУзлаОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации("Обмен с сайтами",
		УровеньЖурналаРегистрации.Информация,
		УзелОбмена.Метаданные(),
		УзелОбмена,
		НСтр("ru = 'Настройка обмена помечена на удаление. Обмен отменен.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеУзлаОбмена.ВыгружатьНаСайт Тогда
		ТекстСообщения = "";
		
		СтруктураПодключения = Новый Структура;
		СтруктураПодключения.Вставить("АдресСайта",ДанныеУзлаОбмена.АдресСайта);
		СтруктураПодключения.Вставить("ИмяПользователя",ДанныеУзлаОбмена.ИмяПользователя);
		
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		СтруктураПодключения.Вставить("Пароль", ПарольИзХранилища);
		
		Если Не ВыполнитьТестовоеПодключениеКСайту(СтруктураПодключения, ТекстСообщения) Тогда			
			ЗаписьЖурналаРегистрации("Обмен с сайтами",
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + НСтр("ru = ' Обмен отменен.'"));
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, НСтр("ru = 'Фоновый обмен'"), ДанныеУзлаОбмена.ВыгружатьИзменения);
	
КонецПроцедуры

// Выполняет обмен с сайтом.
//
// Параметры:
//	УзелОбмена		- ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт,
//	РежимЗапускаОбмена - строка, имя события для ЖурналаРегистрации
//	ВыгружатьТолькоИзменения - булево, влияет на объем выгружаемых данных.
//
Процедура ВыполнитьОбмен(УзелОбмена, РежимЗапускаОбмена, ВыгружатьТолькоИзменения = Истина, ПараметрыСоставОбмена=Неопределено) Экспорт
	
	Если УзелОбмена = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	Параметры.Вставить("ОбменЧерезВебСервис", Ложь);
	Параметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	Параметры.Вставить("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры);
	
	// Переназначаем признаки ОбменТоварами и ОбменЗаказами, если они заданы отдельно
	Если ПараметрыСоставОбмена<>Неопределено Тогда
		Если ПараметрыСоставОбмена.Свойство("ОбменЗаказами") Тогда
			Параметры.ОбменЗаказами = ПараметрыСоставОбмена.ОбменЗаказами;
		КонецЕсли;
		Если ПараметрыСоставОбмена.Свойство("ОбменТоварами") Тогда
			Параметры.ОбменТоварами = ПараметрыСоставОбмена.ОбменТоварами;
		КонецЕсли;
	КонецЕсли; 
	
	Параметры.Вставить("ТаблицаИнформации", НоваяТаблицаИнформации());
	
	Если Параметры.ВыгружатьНаСайт Тогда
		
		Параметры.ОписаниеОшибки = "";
		НастройкиПодключения = Новый Структура;
		НастройкиПодключения.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
		НастройкиПодключения.Вставить("Пароль", Параметры.Пароль);
		НастройкиПодключения.Вставить("АдресСайта", Параметры.АдресСайта);
		НастройкиПодключения.Вставить("ТипСайта", Параметры.ПротоколОбменаCMS);
		
		Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, Параметры.ОписаниеОшибки) Тогда
			
			ЗаписатьВТаблицуИнформации(Параметры.ОписаниеОшибки, Параметры.ТаблицаИнформации, Истина);
			ВыполнитьДействияПриЗавершенииОбмена(Параметры, Истина);
			Возврат;
			
		КонецЕсли;
		
		ДобавитьПараметрыПротоколаОбменаВСтруктуру(НастройкиПодключения);
		
		Параметры.Вставить("НастройкиПодключения", НастройкиПодключения);
		
	КонецЕсли;
	
	КаталогВыгрузки = Параметры.КаталогВыгрузки;
	Если ПустаяСтрока(КаталогВыгрузки) ИЛИ Параметры.ВыгружатьНаСайт Тогда
		
		КаталогВыгрузки = КаталогВременныхФайлов();
		
	Иначе
		
		КаталогВыгрузки = Параметры.КаталогВыгрузки;
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata - " + УзелОбмена.УникальныйИдентификатор();
	Если Параметры.ВыгружатьНаСайт Тогда
		
		// Находим предыдущие каталоги и удаляем старые
		ТекущаяУниверсальнаяДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СрокХраненияСтарыхКаталогов = 1800000; // 30 мин.
		МассивНайденныхФайлов = НайтиФайлы(КаталогВыгрузки, ПодкаталогБезопасностиКаталогаВыгрузки + "_*", Ложь);
		Для Каждого СтрФайл Из МассивНайденныхФайлов Цикл
			
			Если НЕ СтрФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			УниверсальнаяДатаВМиллисекундахСтрокой = СтрЗаменить(СтрФайл.ИмяБезРасширения,
			ПодкаталогБезопасностиКаталогаВыгрузки + "_", "");
			
			Попытка
				
				ОписаниеТипа = Новый ОписаниеТипов("Число");
				УниверсальнаяДатаВМиллисекундах = ОписаниеТипа.ПривестиЗначение(УниверсальнаяДатаВМиллисекундахСтрокой);
				Если УниверсальнаяДатаВМиллисекундах <= (ТекущаяУниверсальнаяДатаВМиллисекундах - СрокХраненияСтарыхКаталогов) Тогда
					УдалитьФайлы(СтрФайл.ПолноеИмя);
				КонецЕсли;
				
			Исключение
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось очистить каталог обмена, п1:'") + 
				" (" + СтрФайл.ИмяБезРасширения + ")");
				
				Параметры.ОписаниеОшибки = "";
				ДобавитьОписаниеОшибки(Параметры.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
				
				ЗаписатьВТаблицуИнформации(Параметры.ОписаниеОшибки, Параметры.ТаблицаИнформации, Истина);
				
			КонецПопытки;
		КонецЦикла;
		
		ПодкаталогБезопасностиКаталогаВыгрузки = ПодкаталогБезопасностиКаталогаВыгрузки +
		"_" + XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах);
		
	КонецЕсли;
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ПодготовитьПутьДляПлатформы(ПлатформаWindows, КаталогНаДиске);
	
	Попытка
		
		СоздатьКаталог(КаталогНаДиске);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьВТаблицуИнформации(ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки), Параметры.ТаблицаИнформации, Истина);
		ВыполнитьДействияПриЗавершенииОбмена(Параметры, Истина);
		
		Возврат;
	КонецПопытки;
	
	Параметры.ОписаниеОшибки = "";
	Если НЕ ОчиститьКаталог(КаталогНаДиске, Параметры.ОписаниеОшибки) Тогда
		
		ЗаписатьВТаблицуИнформации(Параметры.ОписаниеОшибки, Параметры.ТаблицаИнформации, Истина);
		ВыполнитьДействияПриЗавершенииОбмена(Параметры, Истина);
		
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = Параметры.ФайлЗагрузки;
	ФайлЗагрузки = ПодготовитьПутьДляПлатформы(ПлатформаWindows, ФайлЗагрузки);
	Параметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	
	ПолучитьСтруктуруИзменений(Параметры);
	
	ТоварыУспешноВыгружены = Истина;
	
	Параметры.Вставить("КаталогНаДиске", КаталогНаДиске);
	Параметры.Вставить("ПодкаталогФайлов", "import_files");
	Параметры.Вставить("ИндексФайлаОбмена", 0);
	
	
	Если Параметры.ОбменТоварами Тогда 
		
		ТоварыУспешноВыгружены = ВыгрузитьНоменклатуру(Параметры);
		
		Если Параметры.ВыгружатьТолькоИзменения
			И ТоварыУспешноВыгружены Тогда
			
			УдалитьРегистрациюИзменений(УзелОбмена, Параметры.СтруктураИзменений, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаказыУспешноВыгружены = Истина;
	
	Если Параметры.ОбменЗаказами Тогда
		
		ЗаказыУспешноВыгружены = ВыполнитьОбменЗаказами(Параметры, Параметры.ТаблицаИнформации);
		
		Если Параметры.ВыгружатьТолькоИзменения
			И ЗаказыУспешноВыгружены Тогда
			
			УдалитьРегистрациюИзменений(УзелОбмена, Параметры.СтруктураИзменений, Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьНаУслугиУспешноЗагружены = Истина;
	Если Параметры.ОбменЗаписьНаУслуги Тогда
		Параметры.Вставить("РежимВыгрузкиУслуг", Истина);
		
		ЗаписьНаУслугиУспешноЗагружены = ВыполнитьОбменЗаписьНаУслуги(Параметры, Параметры.ТаблицаИнформации);
		
		ГрафикУспешноВыгружен = ВыгрузитьУслуги(Параметры);
		
		Если Параметры.ВыгружатьТолькоИзменения
			И ЗаписьНаУслугиУспешноЗагружены И ГрафикУспешноВыгружен Тогда
			
			УдалитьРегистрациюИзменений(УзелОбмена, Параметры.СтруктураИзменений, Ложь, Ложь, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьДействияПриЗавершенииОбмена(Параметры);
	
	Если Параметры.ВыполнятьПолнуюВыгрузкуПринудительно
		И ТоварыУспешноВыгружены
		И ЗаказыУспешноВыгружены Тогда
		
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = Ложь;
		УзелОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запуск интерактивного обмена с сайтом.
//
// Параметры:
//   ПараметрыОбмена - структура с параметрами обмена с сайтом
//	- УзелОбмена		- ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт,
//	- ВыгружатьТолькоИзменения - булево, влияет на объем выгружаемых данных.
//
Процедура ВыполнитьОбменИнтерактивно(ПараметрыОбмена, АдресРезультата = Неопределено) Экспорт
	
	УзелОбмена = ПараметрыОбмена.УзелОбмена;
	РежимЗапускаОбмена = НСтр("ru = 'Интерактивный обмен'");
	
	ВыгружатьТолькоИзменения = Истина;
	Если ПараметрыОбмена.Свойство("ВыгружатьТолькоИзменения") Тогда
		ВыгружатьТолькоИзменения = ПараметрыОбмена.ВыгружатьТолькоИзменения;
	КонецЕсли;
	
	ПараметрыСоставОбмена = Новый Структура;
	Если ПараметрыОбмена.Свойство("ОбменЗаказами") Тогда
		ПараметрыСоставОбмена.Вставить("ОбменЗаказами", ПараметрыОбмена.ОбменЗаказами);
	КонецЕсли;
	Если ПараметрыОбмена.Свойство("ОбменТоварами") Тогда
		ПараметрыСоставОбмена.Вставить("ОбменТоварами", ПараметрыОбмена.ОбменТоварами);
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, РежимЗапускаОбмена, ВыгружатьТолькоИзменения, ПараметрыСоставОбмена);
	
КонецПроцедуры

Функция ТекстФайлаОбмена(УзелОбмена, ВыгружатьТолькоИзменения = Истина) Экспорт
	
	Параметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	Параметры.Вставить("ОбменЧерезВебСервис", Ложь);
	Параметры.Вставить("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
	
	ПакетыОбмена = Новый Соответствие;
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры);
	Параметры.ВыгружатьКартинки = Ложь;
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(Параметры);
	ЗагрузитьВидыЦенВМассив(Параметры);
	
	ПолучитьСтруктуруИзменений(Параметры);
	
	Если Параметры.ОбменТоварами Тогда 
		
		Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
			
			СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
			Параметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
			Параметры.Вставить("РучнаяНастройкаКаталога", СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога);
			Если СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога > 0 Тогда
				Параметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", 
				ОтборНоменклатураРучнаяНастройкаКаталога(Параметры.УзелОбмена, Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога, СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога));
			Иначе
				Параметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
			КонецЕсли;
			
			ПодготовитьДанныеДляВыгрузки(Параметры);
			
			Если Параметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
				// Если нет данных по номенклатуре, не формируем XDTO-объекты.
				Продолжить;
			КонецЕсли;
			
			Параметры.ИндексФайлаОбмена = 0;
			Параметры.НомерВВыборке = Параметры.ВыборкаНоменклатуры.Количество();
			URIПространстваИмен = "urn:1C.ru:commerceml_210";
			ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
			
			Пока Параметры.НомерВВыборке > 0 Цикл
				// Выгрузить Классификатор И Каталог
				КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOКлассификаторИКаталог(Параметры, ПакетCML);
				
				ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
				ПакетыОбмена.Вставить(ИмяФайлаОбмена("import", Параметры.ИндексФайлаОбмена), ТекстФайла);
				Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
			КонецЦикла;
			
			// Выгрузить Каталог Предложений
			Если Параметры.ВыборкаЦен.Количество() > 0 Тогда
				
				Параметры.ИндексФайлаОбмена = 0;
				Параметры.НомерВВыборке = Параметры.ВыборкаЦен.Количество();
				Пока Параметры.НомерВВыборке > 0 Цикл
					
					КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(Параметры, ПакетCML);
					
					ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
					ПакетыОбмена.Вставить(ИмяФайлаОбмена("offers", Параметры.ИндексФайлаОбмена), ТекстФайла);
					Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.ОбменЗаказами Тогда
		
		МассивИзменений = Новый Массив;
		Если ВыгружатьТолькоИзменения
			И НЕ УзелОбмена.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
			
			МассивИзменений = Параметры.СтруктураИзменений.Заказы;
		КонецЕсли;
		
		Если НЕ ВыгружатьТолькоИзменения 
			ИЛИ МассивИзменений.Количество() > 0 
			ИЛИ УзелОбмена.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
			
			// Получить данные заказов
			СтруктураСтатистики = НоваяСтруктураСтатистики();
			ПолучитьДанныеЗаказов(МассивИзменений, СтруктураСтатистики, Параметры);
			
			Параметры.ИндексФайлаОбмена = 0;
			Параметры.НомерВВыборке = Параметры.ВыборкаДокументов.Количество();
			Параметры.Вставить("ДатаФормирования", ТекущаяДата());
			
			Пока Параметры.НомерВВыборке > 0 Цикл
				
				ДокументыXDTO = СформироватьЗаказыXDTO(Параметры, СтруктураСтатистики);
				
				Если СтруктураСтатистики.Выгружено.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ТекстФайла=СериализоватьОбъект(ДокументыXDTO);
				ПакетыОбмена.Вставить(ИмяФайлаОбмена("orders-", Параметры.ИндексФайлаОбмена, Истина), ТекстФайла);
				Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаписьНаУслугиУспешноЗагружены = Истина;
	Если Параметры.ОбменЗаписьНаУслуги Тогда
		
		ПараметрыДляУслуг = ПараметрыДляУслуг(Параметры);
		ПараметрыДляУслуг.Вставить("РучнаяНастройкаКаталога", 0);
		ПараметрыДляУслуг.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
		
		ПодготовитьДанныеДляВыгрузки(ПараметрыДляУслуг);
		
		// Если нет данных по номенклатуре, не формируем XDTO-объекты.
		Если ПараметрыДляУслуг.ВыборкаНоменклатуры.Количество() > 0 
			И НЕ ПараметрыДляУслуг.ТаблицаГрафикЗанятостиРесурсов.Пустой() Тогда
			
			URIПространстваИмен = "urn:1C.ru:commerceml_210";
			ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
			
			ПараметрыДляУслуг.ИндексФайлаОбмена = 1;
			ПараметрыДляУслуг.НомерВВыборке = ПараметрыДляУслуг.ВыборкаНоменклатуры.Количество();
			Пока ПараметрыДляУслуг.НомерВВыборке > 0 Цикл
				
				КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOКлассификаторИКаталог(ПараметрыДляУслуг, ПакетCML);
				
				ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
				ПакетыОбмена.Вставить(ИмяФайлаОбмена("services", ПараметрыДляУслуг.ИндексФайлаОбмена), ТекстФайла);
				ПараметрыДляУслуг.ИндексФайлаОбмена = ПараметрыДляУслуг.ИндексФайлаОбмена + 1;
			КонецЦикла;
			
			Если ПараметрыДляУслуг.ВыборкаЦен.Количество() > 0
				ИЛИ НЕ ПараметрыДляУслуг.ТаблицаГрафикЗанятостиРесурсов.Пустой() Тогда
				
				ПараметрыДляУслуг.ВыполнятьОбменЦены = Истина;
				
				ПараметрыДляУслуг.ИндексФайлаОбмена = 0;
				ПараметрыДляУслуг.НомерВВыборке = ПараметрыДляУслуг.ВыборкаЦен.Количество();
				Если ПараметрыДляУслуг.ВыборкаЦен.Количество() = 0 И НЕ ПараметрыДляУслуг.ТаблицаГрафикЗанятостиРесурсов.Пустой() Тогда
					// если для услуг цены не заданы, выгрузим только график ресурсов
					КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(ПараметрыДляУслуг, ПакетCML);
					
					ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
					ПакетыОбмена.Вставить(ИмяФайлаОбмена("services_offers", ПараметрыДляУслуг.ИндексФайлаОбмена), ТекстФайла);
					ПараметрыДляУслуг.ИндексФайлаОбмена = ПараметрыДляУслуг.ИндексФайлаОбмена + 1;
				Иначе
					Пока ПараметрыДляУслуг.НомерВВыборке > 0 Цикл
						
						КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(ПараметрыДляУслуг, ПакетCML);
						
						ТекстФайла=СериализоватьОбъект(КоммерческаяИнформацияXDTO);
						ПакетыОбмена.Вставить(ИмяФайлаОбмена("services_offers", ПараметрыДляУслуг.ИндексФайлаОбмена), ТекстФайла);
						ПараметрыДляУслуг.ИндексФайлаОбмена = ПараметрыДляУслуг.ИндексФайлаОбмена + 1;
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ПакетыОбмена;
	
КонецФункции

Функция ПолучитьКлассификаторИКаталогВебСервис(ДатаИзменения, КодГруппы, УзелОбмена, РежимЗапускаОбмена = "") Экспорт
	
	ОсновныеПараметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	ОсновныеПараметры.Вставить("ОбменЧерезВебСервис", Ложь);
	ОсновныеПараметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	Если ЗначениеЗаполнено(ДатаИзменения) И ТипЗнч(ДатаИзменения) = Тип("Дата") Тогда
		ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", Ложь);
		ОсновныеПараметры.Вставить("ДатаИзменения", ДатаИзменения);
	Иначе
		ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", Истина);
	КонецЕсли; 
	Если ЗначениеЗаполнено(КодГруппы) Тогда
		ОсновныеПараметры.Вставить("КодГруппы", КодГруппы);
	КонецЕсли;
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, ОсновныеПараметры);
	ОсновныеПараметры.ВыгружатьКартинки = Ложь;
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(ОсновныеПараметры);
	ЗагрузитьВидыЦенВМассив(ОсновныеПараметры);
	
	ПолучитьСтруктуруИзменений(ОсновныеПараметры);	
	
	Если ОсновныеПараметры.ОбменТоварами Тогда 
		
		Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
			
			СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
			ОсновныеПараметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
			ОсновныеПараметры.Вставить("РучнаяНастройкаКаталога", 0);
			ОсновныеПараметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
			
			ПодготовитьДанныеДляВыгрузки(ОсновныеПараметры);
			
			Если ОсновныеПараметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
				// Если нет данных по номенклатуре, не формируем XDTO-объекты.
				Продолжить;
			КонецЕсли;
			
			URIПространстваИмен = "urn:1C.ru:commerceml_210";
			ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
			
			// Выгрузить Классификатор И Каталог
			Возврат ПодготовитьДанныеXDTOКлассификаторИКаталог(ОсновныеПараметры, ПакетCML);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстаткиИЦеныВебСервис(ДатаИзменения, КодГруппы, КодСклада, КодОрганизации, УзелОбмена, РежимЗапускаОбмена = "") Экспорт
	
	ОсновныеПараметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	ОсновныеПараметры.Вставить("ОбменЧерезВебСервис", Ложь);
	ОсновныеПараметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	Если ЗначениеЗаполнено(ДатаИзменения) И ТипЗнч(ДатаИзменения) = Тип("Дата") Тогда
		ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", Ложь);
		ОсновныеПараметры.Вставить("ДатаИзменения", ДатаИзменения);
	Иначе
		ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(КодГруппы) Тогда
		ОсновныеПараметры.Вставить("КодГруппы", КодГруппы);
	КонецЕсли;
	Если ЗначениеЗаполнено(КодСклада) Тогда
		ОсновныеПараметры.Вставить("КодСклада", КодСклада);
	КонецЕсли;
	Если ЗначениеЗаполнено(КодОрганизации) Тогда
		ОсновныеПараметры.Вставить("КодОрганизации", КодОрганизации);
	КонецЕсли;
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, ОсновныеПараметры);
	ОсновныеПараметры.ВыгружатьКартинки = Ложь;
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(ОсновныеПараметры);
	ЗагрузитьВидыЦенВМассив(ОсновныеПараметры);
	
	ПолучитьСтруктуруИзменений(ОсновныеПараметры);
	
	Если ОсновныеПараметры.ОбменТоварами Тогда 
		
		Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
			
			СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
			ОсновныеПараметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
			ОсновныеПараметры.Вставить("РучнаяНастройкаКаталога", 0);
			ОсновныеПараметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
			
			ПодготовитьДанныеДляВыгрузки(ОсновныеПараметры);
			
			Если ОсновныеПараметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
				// Если нет данных по номенклатуре, не формируем XDTO-объекты.
				Продолжить;
			КонецЕсли;
			
			URIПространстваИмен = "urn:1C.ru:commerceml_210";
			ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
			
			Если ОсновныеПараметры.ВыборкаЦен.Количество() > 0 Тогда
				Возврат ПодготовитьДанныеXDTOПакетПредложений(ОсновныеПараметры, ПакетCML);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаказыВебСервис(ДатаИзменения, УзелОбмена, РежимЗапускаОбмена = "") Экспорт
	
	Параметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	Параметры.Вставить("ОбменЧерезВебСервис", Ложь);
	Параметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	Параметры.Вставить("ДатаФормирования", ТекущаяДата());
	
	Если ЗначениеЗаполнено(ДатаИзменения) И ТипЗнч(ДатаИзменения) = Тип("Дата") Тогда
		Параметры.Вставить("ВыгружатьТолькоИзменения", Ложь);
		Параметры.Вставить("ДатаИзменения", ДатаИзменения);
	Иначе
		Параметры.Вставить("ВыгружатьТолькоИзменения", Истина);
	КонецЕсли;
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры);
	
	Параметры.ВыгружатьКартинки = Ложь;
	
	МассивИзменений = Новый Массив;
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ УзелОбмена.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		ПолучитьСтруктуруИзменений(Параметры);
		
		МассивИзменений = Параметры.СтруктураИзменений.Заказы;
		
		Если МассивИзменений.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		МассивИзменений = ПолучитьЗаказыДляВыгрузки(Параметры.ДатаИзменения);
		Если ЗначениеЗаполнено(Параметры.ДатаИзменения) И МассивИзменений.Количество() = 0 Тогда
			ПакетCML = ФабрикаXDTO.Пакеты.Получить("urn:1C.ru:commerceml_210");
			КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
			КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
			КоммерческаяИнформацияXDTO.ВерсияСхемы = "210";
			КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
			
			Возврат КоммерческаяИнформацияXDTO;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСтатистики = НоваяСтруктураСтатистики();	
	
	ПолучитьДанныеЗаказов(МассивИзменений, СтруктураСтатистики, Параметры);
	Возврат СформироватьЗаказыXDTO(Параметры, СтруктураСтатистики);
	
КонецФункции

// Получает заказы покупателей, которые были модифицированы.
//
// Параметры:
//	ДатаИзменения - дата-время, начиная с которого заказ был изменен.
//
// Возвращаемое значение:
//	Массив заказов покупателей.
//
Функция ПолучитьЗаказыДляВыгрузки(ДатаИзменения)
	
	Если ДатаИзменения = '00010101' Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейССайта.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
	|ГДЕ
	|	ЗаказыПокупателейССайта.ЗаказПокупателя.ДатаИзменения >= &ДатаИзменения";
	
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаИзменения);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
КонецФункции // ПолучитьЗаказыДляВыгрузки()

Функция ЗагрузитьЗаказыВебСервис(УзелОбмена, ДанныеЗаказовXDTO, РежимЗапускаОбмена="") Экспорт
	
	ОсновныеПараметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	
	ОсновныеПараметры.Вставить("ОбменЧерезВебСервис", Ложь);
	ОсновныеПараметры.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	ОсновныеПараметры.Вставить("ВыгружатьТолькоИзменения", Истина);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	ОсновныеПараметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, ОсновныеПараметры);
	
	ТаблицаИнформации = НоваяТаблицаИнформации();
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ТекущаяДата();
	
	УспешноЗагружено = Ложь;
	СтруктураСтатистики = НоваяСтруктураСтатистики();	
	ОписаниеОшибки = "";	
	ДатаНачала = ТекущаяДата();
	
	УспешноЗагружено = ЗагрузитьЗаказы(ДанныеЗаказовXDTO, СтруктураСтатистики, ОсновныеПараметры, ОписаниеОшибки);
	
	ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
	ДатаНачала,
	Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
	УспешноЗагружено,
	СтруктураСтатистики,
	ОписаниеОшибки
	);
	
	Попытка
		
		Возврат СтруктураВСтрокуJSON(Новый Структура("СтруктураСтатистики, ОписаниеОшибки, УспешноЗагружено", СтруктураСтатистики, ОписаниеОшибки, УспешноЗагружено));
		
	Исключение
		Возврат УспешноЗагружено;
	КонецПопытки;
	
КонецФункции

Функция ЗагрузитьЗаписьНаУслугиHTTPСервис(ДанныеЗаказов, КодУзлаОбмена) Экспорт
	
	Если КодУзлаОбмена = Неопределено Тогда
		Возврат Новый Структура("УспешноЗагружено, ОписаниеОшибки, ОтветJSON", Ложь, "Не передан параметр 'SettingsExchangeCode' - код узла обмена в 1С", "");
	КонецЕсли; 
	
	УзелОбмена = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.НайтиПоКоду(КодУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Новый Структура("УспешноЗагружено, ОписаниеОшибки, ОтветJSON", Ложь, "Не найден узел обмена по коду " + КодУзлаОбмена, "");
	КонецЕсли; 
	
	УспешноЗагружено = Ложь;	
	Параметры = ПолучитьСтруктуруОсновныхПараметровОбмена();
	ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры);
	
	СтруктураСтатистики = НоваяСтруктураСтатистики();
	Параметры.Вставить("ОписаниеОшибки", "");
	Параметры.Вставить("ОбменЧерезВебСервис", Истина);
	Параметры.Вставить("ВыгружатьТолькоИзменения", Истина);
	
	ТаблицаИнформации = НоваяТаблицаИнформации();
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ТекущаяДата();
	ДатаНачала = ТекущаяДата();
	
	УспешноЗагружено = ЗагрузитьЗаписьНаУслуги(ДанныеЗаказов, СтруктураСтатистики, Параметры);
	
	ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
	ДатаНачала,
	Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
	УспешноЗагружено,
	СтруктураСтатистики,
	Параметры.ОписаниеОшибки
	);
	
	ОтветJSON = СтруктураВСтрокуJSON(Новый Структура("УспешноЗагружено, ОписаниеОшибки, СтруктураСтатистики", УспешноЗагружено, Параметры.ОписаниеОшибки, СтруктураСтатистики));
	Возврат Новый Структура("УспешноЗагружено, ОписаниеОшибки, ОтветJSON", УспешноЗагружено, Параметры.ОписаниеОшибки, ОтветJSON);
	
КонецФункции

Функция ЗагрузитьЗаписьНаУслуги(ДанныеЗаказов, СтруктураСтатистики, Параметры) Экспорт
	
	ОписаниеОшибки = Параметры.ОписаниеОшибки;
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ПолучитьЗаказыXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Нет документов для обработки.'"));
		Возврат Истина;
		
	КонецЕсли;
	
	МассивНомеров = Новый Массив;
	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл 
		МассивНомеров.Добавить(ДокументXDTO.Номер);
	КонецЦикла;
	
	РанееЗагруженныеСобытия = ПолучитьРанееЗагруженныеДокументы(МассивНомеров);
	
	НачатьТранзакцию();
	
	Попытка
		
		Успешно = СоздатьОбновитьЗаказНаряды(МассивЗаказовXDTO, РанееЗагруженныеСобытия, СтруктураСтатистики, Параметры);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Успешно = Ложь;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка записей на услуги с сайта'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		Параметры.УзелОбмена.Метаданные(),
		Параметры.УзелОбмена,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Устанавливаем статус отмены для отмененных заказов.
	
	МассивОтмененныхЗаказов = ПолучитьОтмененныеЗаказы(СтруктураСтатистики.Загружено);
	Если МассивОтмененныхЗаказов.Количество() > 0 Тогда
		
		Для Каждого ДокументСсылка Из МассивОтмененныхЗаказов Цикл
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
			ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			
			Попытка
				
				ЗаписатьДокумент(ДокументОбъект);
				
			Исключение
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось отменить заказ: '")
				+ ДокументСсылка));
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Заказы
	ПроведенныеЗаказы = Новый Массив;
	Для Каждого СсылкаНаДокумент Из СтруктураСтатистики.Загружено Цикл
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления
			ИЛИ (ДокументОбъект.ВидЗаказа = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу И НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаОтгрузки)) Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписи);
			СсылкаНаДокумент = ДокументОбъект.Ссылка;
			ПроведенныеЗаказы.Добавить(СсылкаНаДокумент);
			
		Исключение
		КонецПопытки;
		
		Если Не Параметры.ОбменЧерезВебСервис Тогда
			МассивУзлов = ПолучитьМассивУзловДляРегистрации(, Истина);
			ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	АссистентУправления.ВыполнитьТекущиеЗадачиСейчас(ПроведенныеЗаказы);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбменТоварами

Функция ПодготовитьДанныеXDTOПакетПредложений(Параметры, ПакетCML)
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.08";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	Если Параметры.УзелОбмена.РежимВыгрузкиЦен = 1 И Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда //Обновление цен, без товаров
		ПакетПредложенийXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ИзмененияПакетаПредложений"));
		ПакетПредложенийXDTO.Наименование = "Изменения пакета предложений (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")";
		
		ПакетПредложенийXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьТолькоИзменения И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно;
		ПакетПредложенийXDTO.Ид = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
		ПакетПредложенийXDTO.ИдКаталога = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		
		ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры, "ИзмененияПакетаПредложений");
		
		КоммерческаяИнформацияXDTO.ИзмененияПакетаПредложений = ПакетПредложенийXDTO;
		
	Иначе	
		
		ПакетПредложенийXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ПакетПредложений"));
		ПакетПредложенийXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьТолькоИзменения И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно
		ИЛИ (Параметры.ИндексФайлаОбмена > 1);
		ПакетПредложенийXDTO.Ид = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога + "#";
		ПакетПредложенийXDTO.Наименование = "Пакет предложений (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")";
		ПакетПредложенийXDTO.ИдКаталога = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		ПакетПредложенийXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
		
		Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
			ИдКлассификатораПредложений = ИдКлассификатораПредложенийБитрикс(Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога, Параметры.УзелОбмена);
		Иначе	
			ИдКлассификатораПредложений = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		КонецЕсли;
		ПакетПредложенийXDTO.ИдКлассификатора = ФорматИдДляXDTO(ИдКлассификатораПредложений);
		
		// Свойства характеристик Классификатор
		Если Параметры.ВыборкаСвойствХарактеристикДляКлассификатора.Количество()>0
			И НЕ Параметры.ИндексФайлаОбмена > 1 Тогда
			
			КлассификаторТип = ПакетCML.Получить("Классификатор");
			КлассификаторXDTO = ФабрикаXDTO.Создать(КлассификаторТип);
			КлассификаторXDTO.ИД = ФорматИдДляXDTO(ИдКлассификатораПредложений);
			КлассификаторXDTO.Наименование = ФорматНаименованияДляXDTO("Классификатор (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")");
			КлассификаторXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
			ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, Параметры.ВыборкаСвойствХарактеристикДляКлассификатора, Параметры);
			КоммерческаяИнформацияXDTO.Классификатор = КлассификаторXDTO;
		КонецЕсли;
		
		ДобавитьВидыЦенВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
		
		Если Параметры.ВыгружатьОстаткиПоСкладам Тогда
			ДобавитьСкладыВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
		КонецЕсли;
		Если Параметры.ОбменЗаписьНаУслуги И Параметры.РежимВыгрузкиУслуг И НЕ Параметры.ИндексФайлаОбмена > 1 Тогда
			ДобавитьГрафикРесурсовВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры);
		КонецЕсли;
		
		ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры, "ПакетПредложений");
		
		КоммерческаяИнформацияXDTO.ПакетПредложений = ПакетПредложенийXDTO;
	КонецЕсли;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Выгружает номенклатуру в xml-файл на диске.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений
//	ВыгруженоОбъектов		- Число, количество выгруженных объектов.
//
Функция ВыгрузитьНоменклатуруВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации)
	
	ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(Параметры);
	
	ЗагрузитьВидыЦенВМассив(Параметры);
	
	ВыгрузкаКаталогаУспешно = Истина;
	ВыгрузкаЦенУспешно = Истина;
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
		Параметры.Вставить("РучнаяНастройкаКаталога", СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога);
		Если СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога > 0 Тогда
			Параметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", 
			ОтборНоменклатураРучнаяНастройкаКаталога(Параметры.УзелОбмена, СтрокаТаблицыКаталогов.ИдентификаторКаталога, СтрокаТаблицыКаталогов.РучнаяНастройкаКаталога));
		Иначе
			Параметры.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
		КонецЕсли;
		Параметры.Вставить("СтрокаТаблицыКаталогов", СтрокаТаблицыКаталогов);
		
		// ********Основной запрос***************
		ПодготовитьДанныеДляВыгрузки(Параметры);
		//**************************************
		
		Если Параметры.ВыборкаНоменклатуры.Количество() = 0 Тогда
			// Если нет данных по номенклатуре, не формируем XDTO-объекты.
			Продолжить;
		КонецЕсли;
		
		URIПространстваИмен = "urn:1C.ru:commerceml_210";
		ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
		
		Параметры.ИндексФайлаОбмена = 0;
		Параметры.НомерВВыборке = Параметры.ВыборкаНоменклатуры.Количество();
		Пока Параметры.НомерВВыборке > 0 Цикл
			
			Если Параметры.УзелОбмена.РежимВыгрузкиЦен = 1 Тогда //Только обновление цен и остатков, без товаров
				Прервать;
			КонецЕсли;
			
			ИмяФайлаОбменаИндекс = ИмяФайлаОбмена("import", Параметры.ИндексФайлаОбмена);
			
			ИмяФайлаКаталога = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
			Параметры.КаталогНаДиске + "\"+ ИмяФайлаОбменаИндекс);
			Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
			
			ВыгрузкаКаталогаУспешно = ВыгрузитьКлассификаторИКаталог(Параметры, ИмяФайлаКаталога, ПакетCML);
			
			Если НЕ ВыгрузкаКаталогаУспешно Тогда
				СтрокаТаблицыКаталогов.СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
				Прервать;
			КонецЕсли;
			
			Если Параметры.ВыгружатьНаСайт Тогда
				ВыгрузкаКаталогаУспешно = ВыгрузитьКаталогПредложенияНаСайт(Параметры, СтрокаТаблицыИнформации, ИмяФайлаОбменаИндекс);
			КонецЕсли;
			
			Если НЕ ВыгрузкаКаталогаУспешно Тогда
				СтрокаТаблицыКаталогов.СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ВыборкаЦен.Количество() > 0 Тогда
			
			Параметры.ИндексФайлаОбмена = 0;
			Параметры.НомерВВыборке = Параметры.ВыборкаЦен.Количество();
			Пока Параметры.НомерВВыборке > 0 Цикл
				
				ИмяФайлаОбменаИндекс = ИмяФайлаОбмена("offers", Параметры.ИндексФайлаОбмена);
				
				ИмяФайлаПрайса = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
				Параметры.КаталогНаДиске + "\" + ИмяФайлаОбменаИндекс);
				Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
				
				Если Параметры.ВыборкаЦен.Количество() > 0 Тогда
					
					ВыгрузкаЦенУспешно = ВыгрузитьПакетПредложений(Параметры, ИмяФайлаПрайса, ПакетCML);
					
					Если НЕ ВыгрузкаЦенУспешно Тогда
						СтрокаТаблицыКаталогов.СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
						Прервать;
					КонецЕсли;
					
					Если Параметры.ВыгружатьНаСайт Тогда
						ВыгрузкаЦенУспешно = ВыгрузитьКаталогПредложенияНаСайт(Параметры, СтрокаТаблицыИнформации, ИмяФайлаОбменаИндекс);
					КонецЕсли;
					
					Если НЕ ВыгрузкаЦенУспешно Тогда
						СтрокаТаблицыКаталогов.СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьИтоговуюИнформациюПоВыгрузкеТоваров(ТаблицаКаталогов, СтрокаТаблицыИнформации);
	
	Возврат ВыгрузкаКаталогаУспешно И ВыгрузкаЦенУспешно;
	
КонецФункции

Функция ПодготовитьДанныеXDTOКлассификаторИКаталог(Параметры, ПакетCML)
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.08";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	Если НЕ Параметры.ИндексФайлаОбмена > 1 Тогда
		
		КлассификаторТип = ПакетCML.Получить("Классификатор");
		КлассификаторXDTO = ФабрикаXDTO.Создать(КлассификаторТип);
		
		КлассификаторXDTO.ИД = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
		КлассификаторXDTO.Наименование = ФорматНаименованияДляXDTO("Классификатор (" + Параметры.СтрокаТаблицыКаталогов.Каталог + ")");
		
		КлассификаторXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
		
		ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, Параметры.ДеревоГрупп.Строки, Параметры.СтрокаТаблицыКаталогов.Группы, ПакетCML, Параметры);
		
		ДобавитьКатегорииКлассификатораXDTO(КлассификаторXDTO, Параметры.КатегорииНоменклатуры, ПакетCML, Параметры);
		
		Если Параметры.ОбменЗаписьНаУслуги И Параметры.РежимВыгрузкиУслуг Тогда
			ДобавитьРесурсыКлассификатораXDTO(КлассификаторXDTO, Параметры.ТаблицаРесурсыУслуги, ПакетCML, Параметры);
		КонецЕсли;
		
		ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, Параметры.ВыборкаСвойствНоменклатурыДляКлассификатора, Параметры);
		
		ДобавитьЕдиницыИзмеренияВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, Параметры.ВыборкаЕдиницИзмеренияДляКлассификатора, Параметры);
		
		КоммерческаяИнформацияXDTO.Классификатор = КлассификаторXDTO;
		
	КонецЕсли; 
	
	КаталогТип = ПакетCML.Получить("Каталог");
	КаталогXDTO = ФабрикаXDTO.Создать(КаталогТип);
	
	КаталогXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьТолькоИзменения И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно
	ИЛИ (Параметры.ИндексФайлаОбмена > 1);
	КаталогXDTO.Ид = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	КаталогXDTO.ИдКлассификатора = Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога;
	КаталогXDTO.Наименование = ФорматНаименованияДляXDTO(Параметры.СтрокаТаблицыКаталогов.Каталог);
	КаталогXDTO.Владелец = ПолучитьКонтрагентаXDTO(Параметры.ДанныеОрганизацииВладельцаКаталога, ПакетCML);
	
	ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры);
	
	КаталогXDTO.Проверить();
	
	КоммерческаяИнформацияXDTO.Каталог = КаталогXDTO;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Заполняет список товаров объекта XDTO типа Каталог
//
// Параметры
//	КаталогXDTO - объект XDTO типа Каталог
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры) Экспорт
	
	ТоварыТип = КаталогXDTO.Свойства().Получить("Товары").Тип;
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
	
	Если Параметры.РазмерПорции = 0 Тогда
		Пока Параметры.ВыборкаНоменклатуры.Следующий() Цикл
			ДополнительныеДанные = ПолучитьДополнительныеДанныеДляВыгрузкиВКаталог(Параметры);
			ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДополнительныеДанные, Параметры);
			Параметры.НомерВВыборке = Параметры.НомерВВыборке - 1;
		КонецЦикла;
		Параметры.ВыполнятьОбменТовары = Ложь;
	Иначе
		
		НомерВПорции = 0;
		Пока НомерВПорции < Параметры.РазмерПорции Цикл
			
			Параметры.ВыполнятьОбменТовары = Параметры.ВыборкаНоменклатуры.Следующий();
			Если НЕ Параметры.ВыполнятьОбменТовары Тогда
				Прервать;
			КонецЕсли;
			
			ДополнительныеДанные = ПолучитьДополнительныеДанныеДляВыгрузкиВКаталог(Параметры);
			ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДополнительныеДанные, Параметры);
			
			Параметры.НомерВВыборке = Параметры.НомерВВыборке - 1;
			НомерВПорции = НомерВПорции + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТоварыXDTO.Товар.Количество() > 0 Тогда
		
		КаталогXDTO.Товары = ТоварыXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет предложения в объект XDTO типа ПакетПредложений.
//
// Параметры
//	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры, ИмяПакетаПредложений="ПакетПредложений") Экспорт
	
	ВыборкаЦен = Параметры.ВыборкаЦен;
	
	Если ВыборкаЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	ПредложенияТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить(ИмяПакетаПредложений), "Предложения");
	ПредложениеТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложенияТип, "Предложение");
	
	ПредложенияXDTO = ФабрикаXDTO.Создать(ПредложенияТип);
	
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ПредложениеXDTO = Неопределено;
	ЦеныXDTO = Неопределено;
	
	ЭтоПервоеПредложение = Истина;
	НомерВПорции = 0;
	
	Пока НомерВПорции < Параметры.РазмерПорции ИЛИ Параметры.РазмерПорции = 0 Цикл
		
		Параметры.ВыполнятьОбменЦены = Параметры.ВыборкаЦен.Следующий();
		Если НЕ Параметры.ВыполнятьОбменЦены И НомерВПорции > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Параметры.ИспользоватьХарактеристики Тогда
			ВыборкаЦенХарактеристика = ВыборкаЦен.Характеристика;
		Иначе
			ВыборкаЦенХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если ВыборкаЦен.Номенклатура = ТекНоменклатура
			И ВыборкаЦенХарактеристика = ТекХарактеристика Тогда
			
			ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры);
			
		Иначе
			
			Если ЭтоПервоеПредложение Тогда
				
				ЭтоПервоеПредложение = Ложь;
				
			Иначе
				
				ПредложениеXDTO.Цены = ЦеныXDTO;
				ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
				
			КонецЕсли;
			
			НомерВПорции = НомерВПорции + 1;
			
			ПредложениеXDTO = ФабрикаXDTO.Создать(ПредложениеТип);
			
			ЦеныТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Цены");
			ЦеныXDTO = ФабрикаXDTO.Создать(ЦеныТип);
			
			ТекНоменклатура = ВыборкаЦен.Номенклатура;
			ТекХарактеристика = ВыборкаЦенХарактеристика;
			
			ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, ПакетCML, ВыборкаЦенХарактеристика, Параметры);
			
			ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры);
			
			Если Параметры.ИспользоватьНаборы И Параметры.Свойство("ТаблицаОстаткиНаборов") И ВыборкаЦен.ЭтоНабор Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", ВыборкаЦен.Номенклатура);
				СтруктураОтбора.Вставить("Характеристика", ВыборкаЦен.Характеристика);
				СтрокиОстатков = Параметры.ТаблицаОстаткиНаборов.НайтиСтроки(СтруктураОтбора);
				Если СтрокиОстатков.Количество()>0 Тогда
					ПредложениеXDTO.Количество = Цел(СтрокиОстатков[0].Количество);
				Иначе
					ПредложениеXDTO.Количество = 0;
				КонецЕсли; 
			Иначе
				ПредложениеXDTO.Количество = ВыборкаЦен.Остаток;
			КонецЕсли; 
			
			Если Параметры.ВыгружатьОстаткиПоСкладам И НЕ ВыборкаЦен.ЭтоНабор Тогда
				СкладТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Склад");
				ДобавитьОстаткиПоСкладамXDTO(ПредложениеXDTO, СкладТип, ВыборкаЦен, Параметры);
			КонецЕсли;
			
			Если НЕ Параметры.ОбменЧерезВебСервис 
				И НЕ Параметры.УзелОбмена.РежимВыгрузкиЦен = 1 
				И Параметры.ВыгружатьКартинки И ЗначениеЗаполнено(ТекХарактеристика) 
				И ЗначениеЗаполнено(Параметры.ВыборкаКартинкиХарактеристик) Тогда
				
				КартинкаТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Картинка");
				КартинкаXDTO = ФабрикаXDTO.Создать(КартинкаТип);
				
				ДобавитьАдресаИзображенийХарактеристикXDTO(ПредложениеXDTO, КартинкаXDTO, ПакетCML, ТекХарактеристика, Параметры);
			КонецЕсли;
			
			СтруктураРезультата.ВыгруженоПредложений = СтруктураРезультата.ВыгруженоПредложений + 1;
			
		КонецЕсли;
		
		Параметры.НомерВВыборке = Параметры.НомерВВыборке - 1;
		
	КонецЦикла;
	
	ПредложениеXDTO.Цены = ЦеныXDTO;
	ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
	
	ПакетПредложенийXDTO.Предложения = ПредложенияXDTO;
	
КонецПроцедуры

Функция ВыгрузитьГрафикИУслугиВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации)
	
	ВыгрузкаКаталогаУспешно = Истина;
	ВыгрузкаЦенУспешно = Истина;
	
	ПараметрыДляУслуг = ПараметрыДляУслуг(Параметры);
	Если ПараметрыДляУслуг.Свойство("НастройкиПодключения") Тогда
		ПараметрыДляУслуг.НастройкиПодключения.АдресСкрипта = СтрЗаменить(Параметры.НастройкиПодключения.АдресСкрипта, "autoimport", "appointmentimport");
	КонецЕсли;
	ПараметрыДляУслуг.Вставить("РучнаяНастройкаКаталога", 0);
	ПараметрыДляУслуг.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Неопределено);
	
	ПодготовитьДанныеДляВыгрузки(ПараметрыДляУслуг);
	
	Если ПараметрыДляУслуг.ВыборкаНоменклатуры.Количество() = 0 
		И ПараметрыДляУслуг.ТаблицаГрафикЗанятостиРесурсов.Пустой() Тогда
		// Если нет данных по номенклатуре, не формируем XDTO-объекты.
		Возврат Ложь;
	КонецЕсли;
	СтруктураРезультата = ПараметрыДляУслуг.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	URIПространстваИмен = "urn:1C.ru:commerceml_210";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	ПараметрыДляУслуг.ИндексФайлаОбмена = 0;
	ПараметрыДляУслуг.НомерВВыборке = ПараметрыДляУслуг.ВыборкаНоменклатуры.Количество();
	Пока ПараметрыДляУслуг.НомерВВыборке > 0 Цикл
		
		ИмяФайлаОбменаИндекс = ИмяФайлаОбмена("services", ПараметрыДляУслуг.ИндексФайлаОбмена);
		ИмяФайлаКаталога = ПодготовитьПутьДляПлатформы(ПараметрыДляУслуг.ПлатформаWindows,
		ПараметрыДляУслуг.КаталогНаДиске + "\"+ ИмяФайлаОбменаИндекс);
		ПараметрыДляУслуг.ИндексФайлаОбмена = ПараметрыДляУслуг.ИндексФайлаОбмена + 1;
		
		ВыгрузкаКаталогаУспешно = ВыгрузитьКлассификаторИКаталог(ПараметрыДляУслуг, ИмяФайлаКаталога, ПакетCML);
		
		Если НЕ ВыгрузкаКаталогаУспешно Тогда
			СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
			Прервать;
		КонецЕсли;
		
		Если ПараметрыДляУслуг.ВыгружатьНаСайт Тогда
			ВыгрузкаКаталогаУспешно = ВыгрузитьКаталогПредложенияНаСайт(ПараметрыДляУслуг, СтрокаТаблицыИнформации, ИмяФайлаОбменаИндекс);
		КонецЕсли;
		
		Если НЕ ВыгрузкаКаталогаУспешно Тогда
			СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЦенДляВыгрузки = ПараметрыДляУслуг.ВыборкаЦен.Количество();
	ЕстьГрафикДляВыгрузки = НЕ ПараметрыДляУслуг.ТаблицаГрафикЗанятостиРесурсов.Пустой();
	Если КоличествоЦенДляВыгрузки > 0 ИЛИ ЕстьГрафикДляВыгрузки Тогда
		
		ПараметрыДляУслуг.ИндексФайлаОбмена = 0;
		ПараметрыДляУслуг.НомерВВыборке = КоличествоЦенДляВыгрузки;
		Пока ПараметрыДляУслуг.НомерВВыборке > 0 ИЛИ ЕстьГрафикДляВыгрузки Цикл
			
			ИмяФайлаОбменаИндекс = ИмяФайлаОбмена("services_offers", ПараметрыДляУслуг.ИндексФайлаОбмена);
			
			ИмяФайлаПрайса = ПодготовитьПутьДляПлатформы(ПараметрыДляУслуг.ПлатформаWindows,
			ПараметрыДляУслуг.КаталогНаДиске + "\" + ИмяФайлаОбменаИндекс);
			ПараметрыДляУслуг.ИндексФайлаОбмена = ПараметрыДляУслуг.ИндексФайлаОбмена + 1;
			
			ВыгрузкаЦенУспешно = ВыгрузитьПакетПредложений(ПараметрыДляУслуг, ИмяФайлаПрайса, ПакетCML);
			
			Если НЕ ВыгрузкаЦенУспешно Тогда
				СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
				Прервать;
			КонецЕсли;
			
			Если ПараметрыДляУслуг.ВыгружатьНаСайт Тогда
				ВыгрузкаЦенУспешно = ВыгрузитьКаталогПредложенияНаСайт(ПараметрыДляУслуг, СтрокаТаблицыИнформации, ИмяФайлаОбменаИндекс);
			КонецЕсли;
			
			Если НЕ ВыгрузкаЦенУспешно Тогда
				СтруктураРезультата.ОписаниеОшибки = СтрокаТаблицыИнформации.Описание;
				Прервать;
			КонецЕсли;
			
			ЕстьГрафикДляВыгрузки = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = 
	СтрокаТаблицыИнформации.Описание + Символы.ПС
	+ ТекущаяДата() + НСтр("ru = ' Завершено формирование файлов выгрузки услуг'");
	
	СтрокаТаблицыИнформации.Описание = 
	СтрокаТаблицыИнформации.Описание + Символы.ПС
	+ НСтр("ru = 'В том числе для каталога услуг '") + Символы.ПС 
	+ НСтр("ru = 'услуг: '") + СтруктураРезультата.ВыгруженоТоваров + Символы.ПС
	+ НСтр("ru = 'предложений: '") + СтруктураРезультата.ВыгруженоПредложений + Символы.ПС;		
	
	Если НЕ ПустаяСтрока(СтруктураРезультата.ОписаниеОшибки) Тогда
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ НСтр("ru = 'Ошибки в процессе выгрузки каталога услуг '") 
		+ СтруктураРезультата.ОписаниеОшибки + Символы.ПС;
	КонецЕсли;
	
	Возврат ВыгрузкаКаталогаУспешно И ВыгрузкаЦенУспешно;
	
КонецФункции

// Выгружает номенклатуру.
//
// Параметры:
//	Параметры				- Структура, содержащая необходимые параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений
//
// Возвращаемое значение
//	Успешно - Истина, если выгрузка завершилась без ошибок.
//
Функция ВыгрузитьНоменклатуру(Параметры)
	
	СтрокаТаблицыИнформации = Параметры.ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + НСтр("ru = 'Запуск выгрузки товаров'");
	
	Успешно = ВыгрузитьНоменклатуруВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации);
	
	ЗафиксироватьЗавершениеВыгрузки(СтрокаТаблицыИнформации, НЕ Успешно, НСтр("ru = 'Завершена выгрузка товаров'"));
	
	Возврат Успешно;
	
КонецФункции

// Выгружает пакет предложений в каталог на диске.
//
// Параметры
//	Параметры - структура, содержащая данные обмена
//	ИмяФайлаПрайса - строка, содержащая путь к файлу пакета предложений
//	ПакетCML - пакет XDTO.
//	
// Возвращаемое значение
//	Истина, если формирование XDTO объектов и запись на диск прошли успешно.
//
Функция ВыгрузитьПакетПредложений(Параметры, ИмяФайлаПрайса, ПакетCML)
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOПакетПредложений(Параметры, ПакетCML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаПрайса, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		КоммерческаяИнформацияXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать XML-файл пакета предложений на диск: '")
		+ ИмяФайлаПрайса + Символы.ПС + ОписаниеОшибки()));
		
		СтруктураРезультата.ВыгруженоПредложений = 0;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьУслуги(Параметры)
	
	СтрокаТаблицыИнформации = Параметры.ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + НСтр("ru = 'Запуск выгрузки графика и услуг'");
	
	Успешно = ВыгрузитьГрафикИУслугиВКаталогНаДиске(Параметры, СтрокаТаблицыИнформации);
	
	ЗафиксироватьЗавершениеВыгрузки(СтрокаТаблицыИнформации, НЕ Успешно, НСтр("ru = 'Завершена выгрузка графика и услуг'"));
	
	Возврат Успешно;
	
КонецФункции

// Выгружает на сайт файлы каталога и пакета предложений.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтрокаТаблицыИнформации	- Строка таблицы значений.
//
Функция ВыгрузитьКаталогПредложенияНаСайт(Параметры, СтрокаТаблицыИнформации, ИмяПакета = "")
	
	МассивПодкаталогов = Новый Массив;
	
	Если Параметры.ВыгружатьКартинки Тогда
		
		МассивПодкаталогов.Добавить(Параметры.ПодкаталогФайлов);
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	Если Параметры.КоличествоПовторений = 0 Тогда
		ВыгружатьРаз = 1;
	Иначе
		ВыгружатьРаз = Параметры.КоличествоПовторений;
	КонецЕсли; 
	
	Успешно = Ложь;
	Для номерПопытки=1 По ВыгружатьРаз Цикл
		
		Успешно = ВыгрузитьНаСайт(Параметры, МассивПодкаталогов, ОписаниеОшибки, Истина);
		
		Если Успешно Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Успешно Тогда 
		
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ ТекущаяДата() + " " + ИмяПакета
		+ НСтр("ru = ' Пакет успешно выгружен на сайт.'")
		+ ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС + НСтр("ru = 'Дополнительная информация о выгрузке:'") + Символы.ПС + ОписаниеОшибки);
		
	Иначе
		
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ ТекущаяДата() + НСтр("ru = ' Выгрузка на сайт завершилась с ошибками.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Попытка
		
		УдалитьФайлы(Параметры.КаталогНаДиске, "*.*");
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание
		+ Символы.ПС
		+ ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось очистить каталог обмена, п.2: '")
		+ Параметры.КаталогНаДиске);
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

// Выгружает классификатор и каталог товаров в каталог на диске.
//
Функция ВыгрузитьКлассификаторИКаталог(Параметры, ИмяФайлаКаталога, ПакетCML)
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	КоммерческаяИнформацияXDTO = ПодготовитьДанныеXDTOКлассификаторИКаталог(Параметры, ПакетCML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаКаталога, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		КоммерческаяИнформацияXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать XML-файл классификатора товаров на диск: '")
		+ ИмяФайлаКаталога + Символы.ПС + ОписаниеОшибки()));
		
		СтруктураРезультата.ВыгруженоКартинок = 0;
		СтруктураРезультата.ВыгруженоФайлов = 0;
		СтруктураРезультата.ВыгруженоТоваров = 0;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, Параметры) Экспорт
	
	ГруппыКлассификатораТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Группы");
	ГруппыКлассификатораXDTO = ФабрикаXDTO.Создать(ГруппыКлассификатораТип);
	
	Если Параметры.РучнаяНастройкаКаталога > 0 Тогда
		
		МассивСтрок = ДеревоГрупп.НайтиСтроки(Новый Структура("РодительИдентификатор", ""));
		Для Каждого СтрокаДерева Из МассивСтрок Цикл
			
			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			ГруппаXDTO.Ид = СтрокаДерева.Идентификатор;
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаДерева.Номенклатура);
			
			ГруппыXDTO = ГруппыНоменклатурыXDTOРекурсия(ДеревоГрупп, ПакетCML, СтрокаДерева.Идентификатор);
			Если ГруппыXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыXDTO;
			КонецЕсли;
			
			ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);
			
		КонецЦикла;
		
	Иначе
		ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, ,Параметры);
	КонецЕсли;
	
	Если ГруппыКлассификатораXDTO.Группа.Количество() > 0 Тогда
		КлассификаторXDTO.Группы = ГруппыКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппыНоменклатурыXDTOРекурсия(ТаблицаГрупп, ПакетCML, Идентификатор = "")
	
	ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Группа"), "Группы");
	ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
	
	тПоиск = Новый Структура("РодительИдентификатор", Идентификатор);
	тМассив = ТаблицаГрупп.НайтиСтроки(тПоиск);
	
	Для Каждого СтрокаДерева Из тМассив Цикл
		
		ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
		
		ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаДерева.Номенклатура);
		ГруппаXDTO.Ид = СтрокаДерева.Идентификатор;
		
		ГруппыОбъектXDTO = ГруппыНоменклатурыXDTOРекурсия(ТаблицаГрупп, ПакетCML, СтрокаДерева.Идентификатор);
		
		Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
			ГруппаXDTO.Группы = ГруппыОбъектXDTO;
		КонецЕсли;
		
		ГруппыXDTO.Группа.Добавить(ГруппаXDTO);
		
	КонецЦикла;
	
	Возврат ГруппыXDTO;
	
КонецФункции

Процедура ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, СписокГрупп, ПакетCML, ТекущийРодитель = Неопределено, Параметры)
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипаНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа 
			И (СписокГрупп = Неопределено ИЛИ СписокГрупп.ТипЗначения = ОписаниеТипаНоменклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокГрупп <> Неопределено И СписокГрупп.Количество() > 0 
			И ПроверитьТипыЗначенийСписка(СписокГрупп, Тип("СправочникСсылка.Номенклатура"))
			И ЭтоГруппаВерхнегоУровня(СтрокаДерева.Номенклатура, СписокГрупп) Тогда
			
			// Группа верхнего уровня должна быть в списке групп для выгрузки
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаДерева.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
			
			ЗаполнитьИДСайтаДляОбъектаXDTO(ГруппаXDTO, СтрокаДерева.Номенклатура,, Параметры);
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
			
			ГруппыXDTO = ПолучитьГруппыНоменклатурыXDTO(СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			Если ГруппыXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыXDTO;
			КонецЕсли;
			
			ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьТипыЗначенийСписка(СписокЗначений, ТипПроверки)
	
	Результат = Истина;
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрЗначение Из СписокЗначений Цикл
		Если ТипЗнч(СтрЗначение.Значение) <> ТипПроверки Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Рекурсивно формирует Объект XDTO, содержащий иерархию групп номенклатуры.
//
// Параметры:
//	ДеревоГрупп - Дерево значений
//	СписокГрупп - список значений, группы выгружаемого каталога
//	ТекущийРодитель - СправочникСсылка.Номенклатура.
//
// Возвращаемое значение:
//	ОбъектXDTO - объект, содержащий иерархию групп.
//
Функция ПолучитьГруппыНоменклатурыXDTO(ДеревоГрупп, СписокГрупп, ПакетCML, ТекущийРодитель = Неопределено, Параметры)
	
	ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Группа"), "Группы");
	ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа И ТипЗнч(СтрокаДерева.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
		
		ИдГруппы = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
		ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
		
		ЗаполнитьИДСайтаДляОбъектаXDTO(ГруппаXDTO, СтрокаДерева.Номенклатура,, Параметры);
		ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ГруппыОбъектXDTO = ПолучитьГруппыНоменклатурыXDTO(СтрокаДерева.Строки, СписокГрупп, ПакетCML, СтрокаДерева.Номенклатура, Параметры);
			
			Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыОбъектXDTO;
			КонецЕсли;
			
		КонецЕсли;
		
		ГруппыXDTO.Группа.Добавить(ГруппаXDTO);
		
	КонецЦикла;
	
	Возврат ГруппыXDTO;
	
КонецФункции

// Добавляет свойства Номенклатуры в список свойств объекта XDTO типа Классификатор.
//
// Параметры
//	КлассификаторXDTO - объект XDTO типа Классификатор
//	ПакетCML - пакет XDTO
//	ВыборкаСвойствНоменклатуры - Выборка, содержащая свойства Номенклатуры.
//
Процедура ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, ВыборкаСвойствНоменклатуры, Параметры) Экспорт
	
	Если ВыборкаСвойствНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТип = КлассификаторXDTO.Свойства().Получить("Свойства").Тип;
	СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
	
	// Выгрузка выбранных в узле обмена доп. реквизитов номенклатуры
	ЕстьРеквизитыДляЗаполнения = Ложь;
	СоответствиеПолейДопРеквизитов = Неопределено;
	Если Параметры.Свойство("НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать")
		И Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать Тогда
		
		СоответствиеПолейДопРеквизитов = Новый Соответствие;
		
		Если Параметры.Свойство("НастройкиВыгрузкиДопРеквизитовНоменклатуры")
			И НЕ ПустаяСтрока(Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатуры) Тогда
			СоответствиеПолейДопРеквизитов = ЧтениеJSONВСтруктуру(Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатуры, Истина);
		КонецЕсли; 
	КонецЕсли; 

	Пока ВыборкаСвойствНоменклатуры.Следующий() Цикл
		
		Попытка
			КлючРеквизита = ВыборкаСвойствНоменклатуры.ИдентификаторДляФормул;
		Исключение
			КлючРеквизита = Неопределено;
		КонецПопытки;
		
		Если СоответствиеПолейДопРеквизитов = Неопределено Или КлючРеквизита = Неопределено Тогда
			Если ЗначениеЗаполнено(ВыборкаСвойствНоменклатуры.Наименование) Тогда
				ИмяВыгрузкиРеквизита = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Наименование);
			Иначе
				ИмяВыгрузкиРеквизита = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство);
			КонецЕсли;
		Иначе
			
			ИмяВыгрузкиРеквизита = СоответствиеПолейДопРеквизитов.Получить(КлючРеквизита);
			Если ИмяВыгрузкиРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьРеквизитыДляЗаполнения = Истина;
		
		СвойствоXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Свойство"));
		ЗаполнитьИДСайтаДляОбъектаXDTO(СвойствоXDTO, ВыборкаСвойствНоменклатуры.Свойство,, Параметры);
		
		СвойствоXDTO.Наименование = ИмяВыгрузкиРеквизита;
		
		Если ВыборкаСвойствНоменклатуры.Свойство.НаборСвойств.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры Тогда
			СвойствоXDTO.ДляПредложений = Истина;
		ИначеЕсли ВыборкаСвойствНоменклатуры.Свойство.НаборСвойств.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура
			ИЛИ ВыборкаСвойствНоменклатуры.Свойство.НаборСвойств.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие Тогда
			СвойствоXDTO.ДляТоваров = Истина;
		КонецЕсли;
		
		Типы = ВыборкаСвойствНоменклатуры.ТипЗначения.Типы();
		
		ТипXML = "Строка";
		
		Если Типы.Количество() <> 1 Тогда
			
			// По стандарту CML 2.08 можно выгрузить только один тип значений.
			// Выгружаем тип "Строка", как универсальный тип.
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
		Иначе
			
			Тип = Типы[0];
			ТипXML = ПолучитьТипXML(Тип);
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
			Если ТипXML = "Справочник" Тогда
				
				ОбработатьСвойствоXDTOДляТипаСправочник(СвойствоXDTO, ПакетCML, ВыборкаСвойствНоменклатуры, Параметры, Тип);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваXDTO.Свойство.Добавить(СвойствоXDTO);
		
	КонецЦикла;
	
	Если НЕ ЕстьРеквизитыДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	КлассификаторXDTO.Свойства = СвойстваXDTO;
	
КонецПроцедуры

Функция ПолучитьТипXML(Тип)
	
	ТипXML = "Строка";
	Если Тип = Тип("Число") Тогда
		ТипXML = "Число";
	ИначеЕсли Тип = Тип("Дата") Тогда
		ТипXML = "Время";
	ИначеЕсли ТипЗначенияСправочник(Тип) Тогда
		ТипXML = "Справочник";
	КонецЕсли;
	
	Возврат ТипXML;
	
КонецФункции

Процедура ОбработатьСвойствоXDTOДляТипаСправочник(СвойствоXDTO, ПакетCML, ВыборкаСвойствНоменклатуры, Параметры, Тип)
	
	ВариантыЗначенийСвойстваТип = ПакетCML.Получить("ВариантыЗначенийСвойства");
	СправочникТип = ВариантыЗначенийСвойстваТип.Свойства.Получить("Справочник").Тип;
	
	ВариантыЗначенийXDTO = ФабрикаXDTO.Создать(ВариантыЗначенийСвойстваТип);
	
	ВариантыЗначений = ПолучитьВариантыЗначенийСвойстваПоТипу(ВыборкаСвойствНоменклатуры, Тип);
	Для Каждого ВариантЗначения Из ВариантыЗначений Цикл
		
		Значение = ФорматЗначениеСвойстваСтрокаДляXDTO(ВариантЗначения);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникXDTO = ФабрикаXDTO.Создать(СправочникТип);
		ЗаполнитьИДСайтаДляОбъектаXDTO(СправочникXDTO, ВариантЗначения,, Параметры, "ИдЗначения");
		СправочникXDTO.Значение = Значение;
		
		ВариантыЗначенийXDTO.Справочник.Добавить(СправочникXDTO);
		
	КонецЦикла;
	
	СвойствоXDTO.ВариантыЗначений = ВариантыЗначенийXDTO;
	
КонецПроцедуры

// Создает объект XDTO БазоваяЕдиница и заполняет данными
//
Функция ПолучитьБазовуюЕдиницуXDTO(ПакетCML, ДанныеЕдиницы)
	
	БазоваяЕдиницаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("БазоваяЕдиница"));
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияКод) Тогда
		БазоваяЕдиницаXDTO.Код = Лев(ДанныеЕдиницы.ЕдиницаИзмеренияКод, 3);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное) Тогда
		БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное;
	Иначе
		БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмерения.Наименование;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение) Тогда
		БазоваяЕдиницаXDTO.МеждународноеСокращение = ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение;
	КонецЕсли;
	
	Возврат БазоваяЕдиницаXDTO;
	
КонецФункции

// Добавляет объект XDTO типа Товар в список товаров объекта XDTO типа Каталог
//
// Параметры
//	ТоварыXDTO - объект XDTO типа Товары
//	ПакетCML - пакет XDTO
//	ДополнительныеДанные - структура, содержащая информацию по изображениям номенклатуры и значения свойств
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДополнительныеДанные, Параметры)
	
	ТоварТип = ПакетCML.Получить("Товар");
	ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
	
	Номенклатура = Параметры.ВыборкаНоменклатуры;
	
	Если Номенклатура.ПометкаУдаления Тогда
		ТоварXDTO.Статус = "Удален";
	КонецЕсли;
	
	Если Номенклатура.Наименование = "" Тогда
		Возврат;	
	КонецЕсли; 
	
	ЗаполнитьИДСайтаДляОбъектаXDTO(ТоварXDTO, Номенклатура.Номенклатура,, Параметры);
	
	ТоварXDTO.Артикул = СоответствиеПоляНоменклатуры(Параметры, "Артикул", Номенклатура.Артикул);
	ТоварXDTO.Код = СоответствиеПоляНоменклатуры(Параметры, "Код", Номенклатура.Код);
	Штрихкод = ПолучитьШтрихкодДляXDTO(СоответствиеПоляНоменклатуры(Параметры, "ШтрихКод", Номенклатура.Штрихкод));
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ТоварXDTO.Штрихкод = Штрихкод;
	КонецЕсли;
	ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(СоответствиеПоляНоменклатуры(Параметры, "Наименование", Номенклатура.Наименование));
	ТоварXDTO.Описание = СоответствиеПоляНоменклатуры(Параметры, "Описание", Номенклатура.Комментарий);
	
	СтранаПроисхождения = СоответствиеПоляНоменклатуры(Параметры, "СтранаПроисхождения", Номенклатура.СтранаПроисхождения);
	Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		ТоварXDTO.Страна = Строка(СтранаПроисхождения);
	КонецЕсли;
	
	Вес = СоответствиеПоляНоменклатуры(Параметры, "Вес", Номенклатура.Вес);
	Если ЗначениеЗаполнено(Вес) Тогда
		ТоварXDTO.Вес = Вес;
	КонецЕсли;
	
	ТоварXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, Параметры.ВыборкаНоменклатуры);
	
	ИдГруппы = "";
	Если Параметры.РучнаяНастройкаКаталога = 1 Тогда //с детализацией по товарам
		
		ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");
		ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
		
		// может быть несколько групп
		массивИдГруппы = ИдентификаторНоменклатурыРучнаяНастройкаКаталога(Параметры.УзелОбмена, 
		Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога, 
		Номенклатура.Номенклатура);
		
		Если массивИдГруппы.Количество() > 0 Тогда
			Для каждого элементИд Из массивИдГруппы Цикл
				ГруппыXDTO.Ид.Добавить(элементИд);
			КонецЦикла;
			ТоварXDTO.Группы = ГруппыXDTO;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Номенклатура.Родитель) Тогда
		
		ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");
		ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
		
		ИдГруппы = ЗаполнитьИДСайтаДляОбъектаXDTO(ГруппыXDTO, Номенклатура.Родитель,, Параметры);
		
		Если НЕ ПустаяСтрока(ИдГруппы) Тогда
			ТоварXDTO.Группы = ГруппыXDTO;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (Параметры.Свойство("ОбменЧерезВебСервис") И Параметры.ОбменЧерезВебСервис=Истина) Тогда
		//Категории
		Если ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры) Тогда
			ИдКатегории = СформироватьИдентификаторСайтаОбъекта(Номенклатура.КатегорияНоменклатуры,, Параметры.УзелОбмена, Ложь);
			Если ИдКатегории.Свойство("ИдСайта") И ЗначениеЗаполнено(ИдКатегории.ИдСайта) Тогда
				ТоварXDTO.Категория = ИдКатегории.ИдСайта;
				Параметры.СоответствияОбъектовСайта.Вставить(Номенклатура.КатегорияНоменклатуры);
			Иначе
				ТоварXDTO.Категория = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Номенклатура.КатегорияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписанияФайлов = Новый Соответствие;
	ОписанияКартинок = Новый Массив;
	ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ДополнительныеДанные.ТаблицаФайлов, Параметры, ОписанияФайлов, ОписанияКартинок);
	
	ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ДополнительныеДанные.ТаблицаСвойств, Параметры, ПакетCML);
	
	СтавкаНДС = Номенклатура.СтавкаНДС;
	Если ЗначениеЗаполнено(СтавкаНДС) И НЕ СтавкаНДС.НеОблагается Тогда
		
		СтавкиНалоговТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов");
		
		СтавкиНалоговXDTO = ФабрикаXDTO.Создать(СтавкиНалоговТип);
		СтавкаНалогаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("СтавкаНалога"));
		
		СтавкаНалогаXDTO.Наименование = Параметры.НаименованиеНалога;
		СтавкаНалогаXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС);
		
		СтавкиНалоговXDTO.СтавкаНалога.Добавить(СтавкаНалогаXDTO);
		
		ТоварXDTO.СтавкиНалогов = СтавкиНалоговXDTO;
		
	КонецЕсли;
	
	Если Параметры.ОбменЧерезВебСервис Тогда
		ДобавитьХарактеристикиТовараXDTO(ТоварXDTO, ПакетCML, Номенклатура.Номенклатура, Параметры.ДеревоСвойствХарактеристик, Параметры);
	КонецЕсли;
	
	ЗначенияРеквизитовТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов");
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ЗначенияРеквизитовТип);
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Файл", Файл);
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ОписаниеФайла", Файл + "#" + Описание);
		
	КонецЦикла;
	
	Для Каждого ОписаниеФайла Из ОписанияКартинок Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ОписаниеФайла", Файл + "#" + Описание);
		
	КонецЦикла;
	
	// выгрузка доп.реквизитов Номенклатуры в раздел ЗначенияРеквизитов
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ТипНоменклатуры", Номенклатура.ТипНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Полное наименование", Номенклатура.НаименованиеПолное);
	
	Если Параметры.Свойство("НастройкиВыгрузкиРеквизитов") И ЗначениеЗаполнено(Параметры.НастройкиВыгрузкиРеквизитов) Тогда
		
		СтруктураПолейДопРеквизитов = ЧтениеJSONВСтруктуру(Параметры.НастройкиВыгрузкиРеквизитов);
		
		Если СтруктураПолейДопРеквизитов.Количество() > 0 Тогда
			ВыборкаДопРеквизиты = Параметры.ДопРеквизитыНоменклатуры;
			ВыборкаДопРеквизиты.Сбросить();
			СтруктураПоискаНоменклатуры = Новый Структура("Номенклатура", Номенклатура.Номенклатура);
			Пока ВыборкаДопРеквизиты.НайтиСледующий(СтруктураПоискаНоменклатуры) Цикл
				Для каждого Реквизит Из СтруктураПолейДопРеквизитов Цикл
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, Реквизит.Значение, ВыборкаДопРеквизиты[Реквизит.Ключ]);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	ТоварыXDTO.Товар.Добавить(ТоварXDTO);
	
	Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата.ВыгруженоТоваров =
	Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата.ВыгруженоТоваров + 1;
	
КонецПроцедуры

// Возвращает значение реквизита Номенклатуры или штрихкод номенклатуры, согласно настройке
// СоответствиеПолейНоменклатуры в узле обмена Если настройки не заполнены, возвращает ЗначениеПоУмолчанию
//
// Параметры
//	Параметры - структура настроек, в которой есть Выборка товаров с нужными полями
//	ИмяПоля - имя поля Товара в формате обмена CommerceML , которое нужно вернуть
//	ЗначениеПоУмолчанию - Значение, которое возвращается, если настройки не заданы
//
Функция СоответствиеПоляНоменклатуры(Параметры, ИмяПоля, ЗначениеПоУмолчанию)
	
	Если НЕ Параметры.Свойство("СоответствиеПолейНоменклатуры") Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Выборка = Параметры.ВыборкаНоменклатуры;
	СоответствиеПолейНоменклатуры = Параметры.СоответствиеПолейНоменклатуры;
	
	НайденнаяСтрока = СоответствиеПолейНоменклатуры.Найти(ИмяПоля, "НаименованиеПоляXML");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, НайденнаяСтрока.ПолеНоменклатуры) Тогда
		Возврат Выборка[НайденнаяСтрока.ПолеНоменклатуры];
	Иначе
		ЗначениеРеквизита = УправлениеСвойствами.ЗначениеСвойства(Выборка.Номенклатура, НайденнаяСтрока.ПолеНоменклатуры);
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Возврат Строка(ЗначениеРеквизита);
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Добавляет пути к файлам изображений номенклатуры в объект XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТаблицаФайлов - таблица значений, содержащая пути к файлам
//	Параметры - структура, содержащая параметры обмена
//	ОписанияФайлов - массив, ключом которого является пути к файлу, а значением описание файла.
//
Процедура ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ТаблицаФайлов, Параметры, ОписанияФайлов, ОписанияКартинок)
	
	Если НЕ Параметры.ВыгружатьКартинки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
	
	// Основное изображение выгружаем первым.
	
	ОсновноеИзображение = Параметры.ВыборкаНоменклатуры.ФайлКартинки;
	
	Если ЗначениеЗаполнено(ОсновноеИзображение) Тогда
		
		Найдено = ТаблицаФайлов.Найти(ОсновноеИзображение, "Файл");
		Если НЕ Найдено = Неопределено Тогда
			
			ИндексОсновногоИзображения = ТаблицаФайлов.Индекс(Найдено);
			Если ИндексОсновногоИзображения > 0 Тогда
				
				Найдено.Сортировка = -1;
				ТаблицаФайлов.Сортировать("Сортировка");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ТаблицаФайлов Цикл
		
		ОписаниеОшибки = "";
		АдресФайла = ВыгрузитьФайл(ТекФайл, Параметры, ОписаниеОшибки);
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			
			СтруктураРезультата.ОписаниеОшибки = СтруктураРезультата.ОписаниеОшибки
			+ Символы.ПС
			+ ТекущаяДата() + ": " + ОписаниеОшибки;
			
		Иначе
			
			Если ЗначениеЗаполнено(АдресФайла) Тогда
				
				Если Параметры.РазрешенныеТипыКартинок.Найти(ТекФайл.Расширение)<>Неопределено Тогда
					
					ТоварXDTO.Картинка.Добавить(АдресФайла);
					СтруктураРезультата.ВыгруженоКартинок = СтруктураРезультата.ВыгруженоКартинок + 1;
					
					Описание = ?(ПустаяСтрока(ТекФайл.Описание), ТекФайл.Наименование, ТекФайл.Описание);
					Если НЕ ПустаяСтрока(Описание) Тогда
						ОписанияКартинок.Добавить(Новый Структура("Ключ,Значение" , АдресФайла , Описание));
					КонецЕсли;
					
				ИначеЕсли Параметры.РазрешенныеТипыФайлов.Найти(ТекФайл.Расширение)<>Неопределено Тогда
					
					СтруктураРезультата.ВыгруженоФайлов = СтруктураРезультата.ВыгруженоФайлов + 1;
					Описание = ?(ПустаяСтрока(ТекФайл.Описание), ТекФайл.Наименование, ТекФайл.Описание);
					Если НЕ ПустаяСтрока(Описание) Тогда
						ОписанияФайлов.Вставить(АдресФайла, Описание);
					КонецЕсли;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает файл с изображением номенклатуры на диск и возвращает путь к файлу.
//
// Параметры
//	ДанныеФайла - структура, содержащая информацию по изображению
//	Параметры - структура, содержащая данные по обмену
//	ОписаниеОшибки - строка для записи информации об ошибках
//	
// Возвращаемое значение
//	Строка, содержащая путь к файлу.
//
Функция ВыгрузитьФайл(ДанныеФайла, Параметры, ОписаниеОшибки, ВладелецКартинок=Неопределено) Экспорт
	
	АдресФайла = "";
	Если ВладелецКартинок=Неопределено Тогда
		ВладелецКартинок= Параметры.ВыборкаНоменклатуры.Номенклатура;
	КонецЕсли;
	
	РасширениеФайла = НРег(ДанныеФайла.Расширение);
	
	Если НЕ Параметры.ВыгружатьКартинки ИЛИ
		(Параметры.РазрешенныеТипыКартинок.Найти(РасширениеФайла) = Неопределено
		И Параметры.РазрешенныеТипыФайлов.Найти(РасширениеФайла) = Неопределено)
		Тогда
		
		Возврат АдресФайла;
		
	КонецЕсли;
	
	ФайлВХранилище = ДанныеФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
	Если ФайлВХранилище Тогда
		
		Если ДанныеФайла.ХранимыйФайл = NULL Тогда
			ДвоичныеДанныеФайла = Неопределено;
		ИначеЕсли ДанныеФайла.ХранимыйФайл = "СлишкомБольшойФайл" Тогда
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеФайла.Файл, Ложь);
		Иначе
			ДвоичныеДанныеФайла = ДанныеФайла.ХранимыйФайл.Получить();
		КонецЕсли;
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить данные файла %1 номенклатуры %2'"),
			ДанныеФайла.Файл,
			ВладелецКартинок));
			
			Возврат АдресФайла;
			
		КонецЕсли;
		
	Иначе
		
		ИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
		ПолучитьПутьТомаДляПлатформы(Параметры.ПлатформаWindows, ДанныеФайла.Том) + "\" + ДанныеФайла.ПутьКФайлу);
		
		Попытка
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Выгрузка файла номенклатуры: '")
			+ ВладелецКартинок));
			
			Возврат АдресФайла;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяПоНоменклатуре = СтрЗаменить(ВладелецКартинок.УникальныйИдентификатор(), "-", "");
	ИмяПоХранилищу    = СтрЗаменить(ДанныеФайла.Файл.УникальныйИдентификатор(), "-", "");
	
	ПодкаталогФайлов = Параметры.ПодкаталогФайлов;
	
	ИмяФайла = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайла);
	КаталогПоИмени = Лев(ИмяПоНоменклатуре, 2);
	КаталогФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
	Параметры.КаталогНаДиске + "\" + ПодкаталогФайлов + "\" + КаталогПоИмени);
	
	Попытка
		
		СоздатьКаталог(КаталогФайла);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось создать каталог %1. Номенклатура: %2'"),
		КаталогФайла,
		ВладелецКартинок))
		);
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	ПолноеИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, КаталогФайла + "\" + ИмяФайла);
	
	Попытка
		
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось записать файл %1 на диск. Номенклатура: %2'"),
		ПолноеИмяФайла,
		Параметры.ВыборкаНоменклатуры.Номенклатура))
		);
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	АдресФайла = ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
	
	Возврат АдресФайла;
	
КонецФункции

// Добавляет значения свойств номенклатуры в список значений свойств объекта XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТаблицаСвойств - таблица значений, содержащая значения свойств номенклатуры
//	Параметры - структура, содержащая параметры обмена
//	ПакетCML - пакет XDTO.
//
Процедура ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ТаблицаСвойств, Параметры, ПакетCML)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСвойствТип = ТоварXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
	ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
	
	// Выгрузка выбранных в узле обмена доп. реквизитов номенклатуры
	СоответствиеПолейДопРеквизитов = Неопределено;
	ЕстьРеквизитыДляЗаполнения = Ложь;
	Если Параметры.Свойство("НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать")
		И Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать Тогда
		
		СоответствиеПолейДопРеквизитов = Новый Соответствие;
		
		Если Параметры.Свойство("НастройкиВыгрузкиДопРеквизитовНоменклатуры")
			И НЕ ПустаяСтрока(Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатуры) Тогда
			СоответствиеПолейДопРеквизитов = ЧтениеJSONВСтруктуру(Параметры.НастройкиВыгрузкиДопРеквизитовНоменклатуры, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойств Цикл
		
		КлючРеквизита = СтрокаТаблицыСвойств.ИдентификаторДляФормул;
		
		Если СоответствиеПолейДопРеквизитов <> Неопределено Тогда
			ИмяВыгрузкиРеквизита = СоответствиеПолейДопРеквизитов.Получить(КлючРеквизита);
			Если ИмяВыгрузкиРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьРеквизитыДляЗаполнения = Истина;
		
		ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
		ЗаполнитьИДСайтаДляОбъектаXDTO(ЗначенияСвойстваXDTO, СтрокаТаблицыСвойств.Свойство,, Параметры);
		
		ЗначениеСвойства = ПреобразоватьЗначенияСвойстваXDTO(СтрокаТаблицыСвойств, Параметры);
		
		ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
		ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
		
	КонецЦикла;
	
	Если НЕ ЕстьРеквизитыДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ТоварXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
	
КонецПроцедуры

Функция ПреобразоватьЗначенияСвойстваXDTO(СтрокаТаблицыСвойств, Параметры)
	
	Если СтрокаТаблицыСвойств.Значение = NULL Тогда
		
		// Если значение свойства не заполнено, выгружаем пустую строку.
		Возврат "";
		
	Иначе
		
		ТипЗначенияСвойства = ТипЗнч(СтрокаТаблицыСвойств.Значение);
		Если ТипЗначенияСвойства = Тип("Дата") Тогда
			
			ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаТаблицыСвойств.Значение);
			
		ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
			
			ЗначениеСвойства = Формат(СтрокаТаблицыСвойств.Значение, "ЧГ=0");
			
		ИначеЕсли Параметры.ОбменЧерезВебСервис = Истина Тогда
			
			ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаТаблицыСвойств.Значение);
			
		ИначеЕсли ТипЗначенияСправочник(ТипЗначенияСвойства) Тогда
			
			ЗначениеСвойства = ИдентификаторОбъектаДляВыгрузки(СтрокаТаблицыСвойств.Значение,, Параметры);
			
		Иначе
			
			ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаТаблицыСвойств.Значение);
			
		КонецЕсли;
		
		Возврат ЗначениеСвойства;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру, содержащую данные по изображениям и свойствам.
//
// Параметры
//	Параметры - Структура - структура, содержащая Выборкау файлов и Выборкау свойств
//
// Возвращаемое значение
//	Структура.
//
Функция ПолучитьДополнительныеДанныеДляВыгрузкиВКаталог(Параметры);
	
	ДополнительныеДанные = Новый Структура;
	Номенклатура = Параметры.ВыборкаНоменклатуры.Номенклатура;
	
	// Изображения.
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл");
	ТаблицаФайлов.Колонки.Добавить("Наименование");
	ТаблицаФайлов.Колонки.Добавить("Описание");
	ТаблицаФайлов.Колонки.Добавить("Том");
	ТаблицаФайлов.Колонки.Добавить("ХранимыйФайл");
	ТаблицаФайлов.Колонки.Добавить("ТипХраненияФайла");
	ТаблицаФайлов.Колонки.Добавить("Расширение");
	ТаблицаФайлов.Колонки.Добавить("ПутьКФайлу");
	ТаблицаФайлов.Колонки.Добавить("Сортировка");
	
	Пока (НЕ Параметры.ВыборкаФайлов = Неопределено)
		И Параметры.ВыборкаФайлов.Номенклатура = Номенклатура Цикл
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ВыборкаФайлов);
		
		Если НЕ Параметры.ВыборкаФайлов.Следующий() Тогда
			
			// Если Выборка закончилась, завершаем цикл принудительно,
			// для избежания зацикливания на последней записи Выборки.
			
			Параметры.ВыборкаФайлов = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ТаблицаФайлов", ТаблицаФайлов);
	
	// Свойства.
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Свойство");
	ТаблицаСвойств.Колонки.Добавить("Значение");
	ТаблицаСвойств.Колонки.Добавить("ИдентификаторДляФормул");
	
	Пока (НЕ Параметры.ВыборкаСвойствНоменклатуры = Неопределено)
		И Параметры.ВыборкаСвойствНоменклатуры.Номенклатура = Номенклатура Цикл
		
		НоваяСтрока = ТаблицаСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ВыборкаСвойствНоменклатуры);
		
		Если НЕ Параметры.ВыборкаСвойствНоменклатуры.Следующий() Тогда
			
			Параметры.ВыборкаСвойствНоменклатуры = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

// Добавляет виды цен в объект XDTO типа ПакетПредложений.
//
// Параметры
//	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
//	ПакетCML - пакет XDTO
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьВидыЦенВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры) Экспорт
	
	Если Параметры.ВыборкаВидовЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЦенТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "ТипыЦен");
	ТипыЦенXDTO = ФабрикаXDTO.Создать(ТипыЦенТип);
	
	Пока Параметры.ВыборкаВидовЦен.Следующий() Цикл
		
		ТипЦеныXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ТипЦены"));
		ЗаполнитьИДСайтаДляОбъектаXDTO(ТипЦеныXDTO, Параметры.ВыборкаВидовЦен.ВидЦен,, Параметры);
		
		ТипЦеныXDTO.Наименование = ФорматНаименованияДляXDTO(Параметры.ВыборкаВидовЦен.ВидЦен);
		ТипЦеныXDTO.Валюта = ФорматВалютыДляXDTO(Параметры.ВыборкаВидовЦен.ВалютаЦены);
		
		НалогXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Налог"));
		
		НалогXDTO.Наименование = Параметры.НаименованиеНалога;
		НалогXDTO.УчтеноВСумме = Параметры.ВыборкаВидовЦен.ЦенаВключаетНДС;
		
		ТипЦеныXDTO.Налог.Добавить(НалогXDTO);
		ТипыЦенXDTO.ТипЦены.Добавить(ТипЦеныXDTO);
		
	КонецЦикла;
	
	ПакетПредложенийXDTO.ТипыЦен = ТипыЦенXDTO;
	
	Параметры.ВыборкаВидовЦен.Сбросить();
	
КонецПроцедуры

Процедура ДобавитьАдресаИзображенийХарактеристикXDTO(ПредложениеXDTO, КартинкаXDTO, ПакетCML, ТекХарактеристика, Параметры)
	
	ВыборкаКартинкиХарактеристик = Параметры.ВыборкаКартинкиХарактеристик;
	ВыборкаКартинкиХарактеристик.Сбросить();
	
	СтруктураОтбора = Новый Структура("Характеристика", ТекХарактеристика);
	
	Пока ВыборкаКартинкиХарактеристик.НайтиСледующий(СтруктураОтбора) Цикл
		
		ВыборкаКартинки = ВыборкаКартинкиХарактеристик.Выбрать();
		Пока ВыборкаКартинки.Следующий() Цикл
			СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
			ОписаниеОшибки = "";
			
			АдресФайла = ВыгрузитьФайл(ВыборкаКартинки, Параметры, ОписаниеОшибки, ТекХарактеристика);
			
			Если ЗначениеЗаполнено(АдресФайла) И ПустаяСтрока(ОписаниеОшибки) Тогда
				КартинкаXDTO = АдресФайла;
				ПредложениеXDTO.Картинка.Добавить(КартинкаXDTO);
				СтруктураРезультата.ВыгруженоКартинок = СтруктураРезультата.ВыгруженоКартинок + 1;
			Иначе
				СтруктураРезультата.ОписаниеОшибки = СтруктураРезультата.ОписаниеОшибки
				+ Символы.ПС
				+ ТекущаяДата() + ": " + ОписаниеОшибки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЦенуXDTO(ЦеныXDTO, ПакетCML, ВыборкаЦен, Параметры)
	
	Если Параметры.ИспользоватьНаборы 
		И Параметры.Свойство("ТаблицаЦеныНаборов")
		И ВыборкаЦен.ЭтоНабор 
		И ВыборкаЦен.СпособРасчетаЦеныНабора=Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", ВыборкаЦен.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", ВыборкаЦен.Характеристика);
		СтруктураОтбора.Вставить("ВидЦен", ВыборкаЦен.ВидЦен);
		СтрокиЦен = Параметры.ТаблицаЦеныНаборов.НайтиСтроки(СтруктураОтбора);
		Если СтрокиЦен.Количество()>0 Тогда
			Цена = СтрокиЦен[0].Цена;
		Иначе
			Цена = 0;
		КонецЕсли; 
	Иначе
		Цена = ВыборкаЦен.Цена;
	КонецЕсли; 
	
	ЦенаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Цена"));
	ЗаполнитьИДСайтаДляОбъектаXDTO(ЦенаXDTO, ВыборкаЦен.ВидЦен,, Параметры,"ИдТипаЦены");
	
	Единица = ВыборкаЦен.ЕдиницаИзмерения;
	ПредставлениеЦены = СокрЛП(Цена) + " " + СокрЛП(ВыборкаЦен.ВалютаЦены) + " за " + СокрЛП(Единица);
	ЦенаXDTO.Представление = ПредставлениеЦены;
	ЦенаXDTO.ЦенаЗаЕдиницу = Цена;
	ЦенаXDTO.Валюта = ФорматВалютыДляXDTO(ВыборкаЦен.ВалютаЦены);
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		ЦенаXDTO.Единица = ВыборкаЦен.ЕдиницаИзмеренияКод;
	Иначе
		ЦенаXDTO.Единица = Строка(Единица);
	КонецЕсли;
	ЦенаXDTO.Коэффициент = 1;
	
	ЦеныXDTO.Цена.Добавить(ЦенаXDTO);
	
КонецПроцедуры

// Заполняет реквизиты товара для объекта XDTO типа Предложение.
//
// Параметры
//	ПредложениеXDTO - объект XDTO типа Предложение
//	ПакетCML - пакет XDTO
//	Характеристика - характеристика номенклатуры
//	Параметры - параметры обмена.
//
Процедура ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, ПакетCML, Характеристика, Параметры)
	
	Если Параметры.ОбменЧерезВебСервис Тогда
		ЗаполнитьИДСайтаДляОбъектаXDTO(ПредложениеXDTO, Параметры.ВыборкаЦен.Номенклатура,, Параметры);
	Иначе
		ЗаполнитьИДСайтаДляОбъектаXDTO(ПредложениеXDTO, Параметры.ВыборкаЦен.Номенклатура, Характеристика, Параметры);
	КонецЕсли;
	
	Штрихкод = ПолучитьШтрихкодДляXDTO(Параметры.ВыборкаЦен.ШтрихКод);
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ПредложениеXDTO.Штрихкод = Штрихкод;
	КонецЕсли;
	ПредложениеXDTO.Артикул = Параметры.ВыборкаЦен.Артикул;
	
	Наименование = Параметры.ВыборкаЦен.Наименование;
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Наименование = Наименование + " (" + Характеристика + ")";
		КонецЕсли;
	КонецЕсли;
	
	ПредложениеXDTO.Наименование = ФорматНаименованияДляXDTO(Наименование);
	ПредложениеXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, Параметры.ВыборкаЦен);
	
	СтатусУдаления = "";
	
	Если Параметры.ИспользоватьХарактеристики
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		ХарактеристикиТовараXDTO = Неопределено;
		НайденнаяСтрока = Параметры.ДеревоСвойствХарактеристик.Строки.Найти(Характеристика, "Характеристика");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ХарактеристикиТовараТип = ПредложениеXDTO.Свойства().Получить("ХарактеристикиТовара").Тип;
			ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
			
			ЗначСвойствПредложенияТип = ПредложениеXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
			ЗначСвойствXDTO = ФабрикаXDTO.Создать(ЗначСвойствПредложенияТип);
			
			Если Не Параметры.ОбменЧерезВебСервис Тогда
				
				Для Каждого СтрокаСвойства Из НайденнаяСтрока.Строки Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
						ИЛИ СтрокаСвойства.Номенклатура <> Параметры.ВыборкаЦен.Номенклатура						
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ХарактеристикаТовара"));
					
					ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Свойство);
					
					Если ТипЗнч(СтрокаСвойства.Значение) = Тип("Число") Тогда
						ХарактеристикаТовараXDTO.Значение = Формат(СтрокаСвойства.Значение, "ЧГ=0");
					Иначе
						ХарактеристикаТовараXDTO.Значение = ФорматНаименованияДляXDTO(СтрокаСвойства.Значение);
					КонецЕсли;
					
					ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
					
					// Свойства характеристик отдельный раздел
					ЗначСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
					
					ЗаполнитьИДСайтаДляОбъектаXDTO(ЗначСвойстваXDTO, СтрокаСвойства.Свойство,, Параметры);
					
					ТипЗначенияСвойства = СтрокаСвойства.Свойство.ТипЗначения;
					Если ТипЗначенияСвойства = Новый ОписаниеТипов("Строка") Тогда
						ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
					ИначеЕсли ТипЗначенияСвойства = Новый ОписаниеТипов("Дата") Тогда
						ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойства.Значение);
					ИначеЕсли ТипЗначенияСвойства = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
						// выгружаем идентификатор значения
						ЗначениеСвойства = ИдентификаторОбъектаДляВыгрузки(СтрокаСвойства.Значение,,Параметры);
					Иначе
						ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
					КонецЕсли; 
					
					ЗначСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
					ЗначСвойствXDTO.ЗначенияСвойства.Добавить(ЗначСвойстваXDTO);
					
				КонецЦикла;
				
				Если ЗначСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
					ПредложениеXDTO.ЗначенияСвойств = ЗначСвойствXDTO;
				КонецЕсли;
				
			Иначе
				
				ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ХарактеристикаТовара"));
				ЗаполнитьИДСайтаДляОбъектаXDTO(ХарактеристикаТовараXDTO, Характеристика,, Параметры);
				ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(Характеристика.Наименование);
				
				ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
				ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
				
				Для Каждого СтрокаСвойства Из НайденнаяСтрока.Строки Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
					ЗаполнитьИДСайтаДляОбъектаXDTO(ЗначенияСвойстваXDTO, СтрокаСвойства.Свойство,, Параметры);
					ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Наименование);
					
					Если СтрокаСвойства.Значение = NULL Тогда
						
						// Если значение свойства не заполнено, выгружаем пустую строку.
						ЗначениеСвойства = "";
						
					Иначе
						
						ТипЗначенияСвойства = ТипЗнч(СтрокаСвойства.Значение);
						Если ТипЗначенияСвойства = Тип("Дата") Тогда
							
							ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойства.Значение);
							
						Иначе
							
							ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
					ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
					
				КонецЦикла;
				
				Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
					ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
				КонецЕсли;
				
				ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ХарактеристикиТовараXDTO <> Неопределено И ХарактеристикиТовараXDTO.ХарактеристикаТовара.Количество()>0 Тогда
			ПредложениеXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
		КонецЕсли;
		
		Если Параметры.ВыборкаЦен.ХарактеристикаПометкаУдаления Тогда
			СтатусУдаления = "Удален";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ВыборкаЦен.ПометкаУдаления Тогда
		СтатусУдаления = "Удален";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусУдаления) Тогда
		ПредложениеXDTO.Статус = СтатусУдаления;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ОБМЕНА запись на услуги
// Запускает процесс обмена заказами.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	ТаблицаИнформации	- Таблица значений, таблица информации о состоянии обмена
// 
// Возвращаемое значение
//	Булево				- Истина, если успех. 
//
Функция ВыполнитьОбменЗаписьНаУслуги(Параметры, ТаблицаИнформации)
	
	УспешноЗагружено = Ложь;
	
	СтруктураСтатистики = НоваяСтруктураСтатистики();
	
	Если Параметры.ВыгружатьНаСайт Тогда
		
		Параметры.ОписаниеОшибки = "";
		
		ДатаНачала = ТекущаяДата();
		
		УспешноЗагружено = ЗагрузитьЗаписьНаУслугиССайта(Параметры, СтруктураСтатистики);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		УспешноЗагружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
	Иначе
		
		ДатаНачала = ТекущаяДата();
		
		Параметры.ОписаниеОшибки = "";
		
		УспешноЗагружено = ЗагрузитьЗаписьНаУслугиИзФайла(Параметры, СтруктураСтатистики);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		УспешноЗагружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
	КонецЕсли;
	
	Возврат УспешноЗагружено;
	
КонецФункции

Функция ЗагрузитьЗаписьНаУслугиССайта(Параметры, СтруктураСтатистики)
	
	ОтветСервера = "";
	ОписаниеОшибки = Параметры.ОписаниеОшибки;
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	АдресДляРаботы = СтрЗаменить(Параметры.НастройкиПодключения.АдресСкрипта, "autoimport", "") + "appointmentimport/?type=" + ТипСоединения;
	
	ОписаниеОшибки = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, Параметры.НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	Токен = "";
	
	// Получить текст записей с сайта
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные + Токен,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка данных не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаXML = "";
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
	ИначеЕсли Лев(ОтветСервера, 5) = "<?xml" Тогда
		СтрокаXML = ОтветСервера;
	ИначеЕсли Лев(ОтветСервера, 23) = "<КоммерческаяИнформация" Тогда
		СтрокаXML = ОтветСервера;		
	ИначеЕсли Лев(ОтветСервера, 7) = "failure" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаXML) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Загрузить записи на услуги с сайта
	Если НЕ ЗагрузитьЗаписьНаУслуги(СтрокаXML, СтруктураСтатистики, Параметры) Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось обработать документы, загруженные с сервера.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено ИЛИ СтрНачинаетсяС(ОтветСервера, "failure") Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Загружает заказы из файла.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаписьНаУслугиИзФайла(Параметры, СтруктураСтатистики)
	
	Файл = Новый Файл(Параметры.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
		ДобавитьОписаниеОшибки(Параметры.ОписаниеОшибки, НСтр("ru = 'Файл загрузки не найден'") + ": " + Параметры.ФайлЗагрузки);
		Возврат Ложь;
		
	КонецЕсли;
	
	КодировкаXML = КодировкаФайла(Параметры.ФайлЗагрузки);
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(Параметры.ФайлЗагрузки, КодировкаXML);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	Возврат ЗагрузитьЗаписьНаУслуги(СтрокаXML, СтруктураСтатистики, Параметры);
	
КонецФункции

#КонецОбласти

#Область ОбменЗаказами

// Запускает процесс обмена заказами.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	ТаблицаИнформации	- Таблица значений, таблица информации о состоянии обмена
// 
// Возвращаемое значение
//	Булево				- Истина, если успех. 
//
Функция ВыполнитьОбменЗаказами(Параметры, ТаблицаИнформации)
	
	УспешноЗагружено = Ложь;
	УспешноВыгружено = Ложь;
	
	СтруктураСтатистики = НоваяСтруктураСтатистики();
	
	Если Параметры.ВыгружатьНаСайт Тогда
		
		Параметры.ОписаниеОшибки = "";
		ДатаНачала = ТекущаяДата();
		
		УспешноЗагружено = ЗагрузитьЗаказыССайта(Параметры, СтруктураСтатистики, Параметры.ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		УспешноЗагружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
		Параметры.ОписаниеОшибки = "";
		ДатаНачала = ТекущаяДата();
		
		УспешноВыгружено = ВыгрузитьЗаказыНаСайт(Параметры, СтруктураСтатистики, Параметры.ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		УспешноВыгружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
	Иначе
		
		ДатаНачала = ТекущаяДата();
		Параметры.ОписаниеОшибки = "";
		
		УспешноЗагружено = ЗагрузитьЗаказыИзФайла(Параметры, СтруктураСтатистики, Параметры.ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		УспешноЗагружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
		ДатаНачала = ТекущаяДата();
		Параметры.ОписаниеОшибки = "";
		
		УспешноВыгружено = ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, Параметры.ОписаниеОшибки);
		
		ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
		ДатаНачала,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		УспешноВыгружено,
		СтруктураСтатистики,
		Параметры.ОписаниеОшибки
		);
		
	КонецЕсли;
	
	Успешно = УспешноЗагружено И УспешноВыгружено;
	Возврат Успешно;
	
КонецФункции

// Загружает заказы с сайта.
//
// Параметры:
//	Параметры				- Структура, основные параметры
//	СтруктураСтатистики		- Структура
//	ОписаниеОшибки			- Строка
//
// Возвращаемое значение
//	Булево				- Истина, если успех. 
//
Функция ЗагрузитьЗаказыССайта(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	Токен = "";
	ЗаголовкиЗапросов = "";
	
	АдресДляРаботы = Параметры.НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения;
	
	ОписаниеОшибки = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, Параметры.НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	// Токен и запрос инициализации
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда	
		Токен = ДобавитьТокенБитрикс(ОтветСервера);
		Если Параметры.ПодчиненныеДокументы Тогда
			ВерсияОбмена = "&cmlVersion=2.10";
			ВерсияСхемы = "&version=2.09";
		Иначе
			ВерсияСхемы = "";
			ВерсияОбмена = "";
		КонецЕсли;
		
		ОтветСервераОИнициализации = ПолучитьДанныеССервера(Соединение, 
		АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация + Токен + ВерсияОбмена,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
		);
		
		Если ОтветСервераОИнициализации = Неопределено Тогда 
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось провести инициализацию. Загрузка с сайта невозможна.'"));	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Получить текст заказов с сайта
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные + Токен,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаXML = "";
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
	ИначеЕсли Лев(ОтветСервера, 5) = "<?xml" Тогда
		СтрокаXML = ОтветСервера;
	ИначеЕсли Лев(ОтветСервера, 23) = "<КоммерческаяИнформация" Тогда
		СтрокаXML = ОтветСервера;		
	ИначеЕсли Лев(ОтветСервера, 7) = "failure" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаXML) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ДанныеПоследнегоОбмена", СтрокаXML);
	
	// Загрузить заказы с сайта
	Если НЕ ЗагрузитьЗаказы(СтрокаXML, СтруктураСтатистики, Параметры, ОписаниеОшибки) Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось обработать документы, загруженные с сервера.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта
	+?(Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс, Токен, "")
	,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено ИЛИ СтрНачинаетсяС(ОтветСервера, "failure") Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Загружает заказы из файла.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказыИзФайла(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	Файл = Новый Файл(Параметры.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Файл загрузки не найден'") + ": " + Параметры.ФайлЗагрузки);
		Возврат Ложь;
		
	КонецЕсли;
	
	КодировкаXML = КодировкаФайла(Параметры.ФайлЗагрузки);
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(Параметры.ФайлЗагрузки, КодировкаXML);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	Возврат ЗагрузитьЗаказы(СтрокаXML, СтруктураСтатистики, Параметры, ОписаниеОшибки);
	
КонецФункции

// Выполняет загрузку заказов.
//
// Параметры:
//	ДанныеЗаказов		- строка для записи xml или ОбъектXDTO
//	СтруктураСтатистики	- Структура
//	Параметры			- Структура, основные параметры
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказы(ДанныеЗаказов, СтруктураСтатистики, Параметры, ОписаниеОшибки) Экспорт
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ПолучитьЗаказыXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Нет документов для обработки.'"));
		Возврат Истина;
		
	КонецЕсли;
	
	МассивНомеров = Новый Массив;
	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл 
		МассивНомеров.Добавить(ДокументXDTO.Номер);
	КонецЦикла;
	
	Если МассивЗаказовXDTO.Количество() > 0 Тогда
		Параметры.Вставить("ДанныеПоследнегоНепустогоОбмена", ДанныеЗаказов);
	КонецЕсли; 
	
	РанееЗагруженныеЗаказы = ПолучитьРанееЗагруженныеДокументы(МассивНомеров);
	
	НачатьТранзакцию();
	
	Попытка
		
		Успешно = СоздатьОбновитьЗаказы(МассивЗаказовXDTO, РанееЗагруженныеЗаказы, СтруктураСтатистики, Параметры, ОписаниеОшибки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Успешно = Ложь;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка заказов с сайта'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		Параметры.УзелОбмена.Метаданные(),
		Параметры.УзелОбмена,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Устанавливаем статус отмены для отмененных заказов.
	
	МассивОтмененныхЗаказов = ПолучитьОтмененныеЗаказы(СтруктураСтатистики.Загружено);
	Если МассивОтмененныхЗаказов.Количество() > 0 Тогда
		
		Для Каждого ДокументСсылка Из МассивОтмененныхЗаказов Цикл
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
			ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			
			Попытка
				
				ЗаписатьДокумент(ДокументОбъект);
				
			Исключение
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось отменить заказ: '")
				+ ДокументСсылка));
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Заказы
	Для Каждого СсылкаНаДокумент Из СтруктураСтатистики.Загружено Цикл
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления
			ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаОтгрузки) Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписи);
			СсылкаНаДокумент = ДокументОбъект.Ссылка;
			
		Исключение
		КонецПопытки;
		
		Если Не Параметры.ОбменЧерезВебСервис Тогда
			МассивУзлов = ПолучитьМассивУзловДляРегистрации(, Истина);
			ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	//Оплаты
	Если СтруктураСтатистики.Свойство("ЗагруженоОплат") Тогда
		
		Для Каждого СсылкаНаДокумент Из СтруктураСтатистики.ЗагруженоОплат Цикл
			
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
			ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
			Если ДокументОбъект.ПометкаУдаления Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписи);
				
			Исключение
			КонецПопытки;
			
			Если ДокументОбъект.Проведен 
				И Параметры.ПробиватьЧекиПоОнлайнОплатам 
				И ДокументОбъект.НомерЧекаККМ = 0
				Тогда
				ПодключаемоеОборудованиеУНФ.ДобавитьВОчередьФискализации(ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураСтатистики.ОбработаноНаЗагрузкеОплат) Тогда
			ЗаписатьСтатистикуЗагрузкиОплат(СтруктураСтатистики.ОбработаноНаЗагрузкеОплат);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьОбновитьДокументОплаты(ЗаказСсылка, СвойстваОплаты, Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	СтруктураСтатистики.ОбработаноНаЗагрузкеОплат = СтруктураСтатистики.ОбработаноНаЗагрузкеОплат + 1;
	
	// Проверим соответствие платежных систем
	НастройкаПлатежныйТерминал = Параметры.ТаблицаСоответствияВидовОплат.Найти(Лев(СвойстваОплаты.Получить("Метод оплаты"), 50));
	Если НастройкаПлатежныйТерминал = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для заказа %1 указана платежная система ""%2"", для которой не настроено соответствие в узле обмена с сайтом.'"), 
		ЗаказСсылка,
		СвойстваОплаты.Получить("Метод оплаты"));
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
		Возврат;
	ИначеЕсли НастройкаПлатежныйТерминал.ТипОплатыНаСайте <> Перечисления.ТипыОплатНаСайте.Эквайринг Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для заказа %1 пропущена оплата ""%2"" - загрузка с сайта поддерживается только для оплат с типом ""Эквайринг"".'"), 
		ЗаказСсылка,
		СвойстваОплаты.Получить("Метод оплаты"));
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОперацияПоПлатежнымКартам = Неопределено;	
	ИдентификаторОплаты = СвойстваОплаты.Получить("Ид");
	Если ЗначениеЗаполнено(ИдентификаторОплаты) И СтрДлина(ИдентификаторОплаты) = 36 Тогда
		
		ОперацияПоПлатежнымКартам = Документы.ОперацияПоПлатежнымКартам.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторОплаты));
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацияПоПлатежнымКартам.Ссылка КАК Ссылка,
		|	ОперацияПоПлатежнымКартам.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ЕСТЬNULL(ОперацияПоПлатежнымКартам.ЭквайринговыйТерминал.Касса.ИспользоватьБезПодключенияОборудования, ЛОЖЬ) КАК КассаККМИспользоватьБезПодключенияОборудования,
		|	ОперацияПоПлатежнымКартам.ПометкаУдаления КАК ПометкаУдаления,
		|	ОперацияПоПлатежнымКартам.Проведен КАК Проведен,
		|	ОперацияПоПлатежнымКартам.СпособОплаты КАК СпособОплаты,
		|	ОперацияПоПлатежнымКартам.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
		|ГДЕ
		|	ОперацияПоПлатежнымКартам.ДокументОснование = &ДокументОснование
		|	И ОперацияПоПлатежнымКартам.ВидОперации = &ВидОперации
		|	И (ОперацияПоПлатежнымКартам.СпособОплаты = &ОплатаОнлайн
		|				И ОперацияПоПлатежнымКартам.НомерПлатежнойКарты = &НомерПлатежнойКарты
		|			ИЛИ ОперацияПоПлатежнымКартам.Номер = &НомерДокумента1С)
		|	И НЕ ОперацияПоПлатежнымКартам.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ДокументОснование", ЗаказСсылка);
		Запрос.УстановитьПараметр("НомерПлатежнойКарты", СвойстваОплаты.Получить("Номер платежного документа")); // если оплата была введена на сайте
		Запрос.УстановитьПараметр("НомерДокумента1С", СвойстваОплаты.Получить("Номер оплаты по 1С")); // если оплата была введена в 1С
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя);
		Запрос.УстановитьПараметр("ОплатаОнлайн", Перечисления.СпособыОплатыЭквайринг.ОплатаОнлайн);
		
		ВыборкаДокумент = Запрос.Выполнить().Выбрать();
		Если ВыборкаДокумент.Следующий() Тогда
			ОперацияПоПлатежнымКартам = ВыборкаДокумент.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СвойстваОплаты.Получить("Оплачено") = "false" И ОперацияПоПлатежнымКартам = Неопределено Тогда
		// оплата не оплачена, это пустой шаблон, создавать его в 1С не нужно
		Возврат;
	КонецЕсли;	
	
	Если ОперацияПоПлатежнымКартам <> Неопределено Тогда
		
		Если ОперацияПоПлатежнымКартам.НомерЧекаККМ <> 0 Тогда
			
			// Чек уже пробит на фискальном регистраторе
			СтруктураСтатистики.ПропущеноОплат.Добавить(ОперацияПоПлатежнымКартам);
			Возврат;
			
		ИначеЕсли Параметры.Свойство("ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке") И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке 
			И ОперацияПоПлатежнымКартам.Проведен Тогда
			// Настройка "Не изменять проведенные" в узле обмена
			
			СтруктураСтатистики.ПропущеноОплат.Добавить(ОперацияПоПлатежнымКартам);
			Возврат;
		ИначеЕсли СвойстваОплаты.Получить("Оплачено") = "false" Тогда
			// Отменена оплата, выполненная на сайте, в 1С документ оплаты проведен, чек НЕ пробит
			Если ОперацияПоПлатежнымКартам.Проведен Тогда
				
				ДокОперацияПоПлатежнымКартам = ОперацияПоПлатежнымКартам.ПолучитьОбъект();
				
				Попытка
					ДокОперацияПоПлатежнымКартам.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
					СтруктураСтатистики.ОбновленоОплат.Добавить(ОперацияПоПлатежнымКартам.Ссылка);
					
				Исключение
					
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ТекстОшибки = ОписаниеОшибки() + Символы.ПС + 
					ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось отменить проведение ОперацияПоПлатежнымКартам к заказу №'") + ЗаказСсылка.Номер);
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				КонецПопытки;
			КонецЕсли; 
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если заказ выгружен без подчиненных документов, оплата в свойствах заказа указывается только полная, проверяем заказ
	// на наличие других оплат
	Если СвойстваОплаты.Получить("ПодчиненныйДокумент") <> Истина Тогда
		// выгрузка в формате без подчиненных документов
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ОплатаСчетовИЗаказов.Сумма), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ОплатаСчетовИЗаказов.СуммаАванса), 0) КАК СуммаАванса,
		|	ЕСТЬNULL(СУММА(ОплатаСчетовИЗаказов.СуммаОплаты), 0) КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
		|ГДЕ
		|	ОплатаСчетовИЗаказов.СчетНаОплату = &ДокументОснование 
		|	И ОплатаСчетовИЗаказов.Регистратор <> &ДокументОплаты";
		
		Запрос.УстановитьПараметр("ДокументОплаты", ОперацияПоПлатежнымКартам);
		Запрос.УстановитьПараметр("ДокументОснование", ЗаказСсылка);
		
		ВыборкаОплата = Запрос.Выполнить().Выбрать();
		Если ВыборкаОплата.Следующий() Тогда
			
			Если ВыборкаОплата.СуммаАванса>0 ИЛИ ВыборкаОплата.СуммаОплаты>0 Тогда
				// Частичная оплата или повторная загрузка оплаты
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не загружена оплата заказа %1, так как по заказу уже введены другие оплаты.'"), ЗаказСсылка);
				ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ОперацияПоПлатежнымКартам) Тогда
					СтруктураСтатистики.ПропущеноОплат.Добавить(ОперацияПоПлатежнымКартам);
				Иначе
					СтруктураСтатистики.ПропущеноОплат.Добавить(ТекстОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаОплаты = Неопределено;
	// Для оплат без подчиненных документов - поддерживается только полная оплата, и сумма оплаты = сумма заказа
	Если СвойстваОплаты.Получить("ПодчиненныйДокумент") = Истина Тогда
		СуммаОплатыЗначение = СвойстваОплаты.Получить("Сумма");
		Если ЗначениеЗаполнено(СуммаОплатыЗначение) Тогда
			Попытка
				СуммаОплаты = Число(СуммаОплатыЗначение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли НЕ Параметры.ПодчиненныеДокументы И НРег(СвойстваОплаты.Получить("Заказ оплачен")) <> "true" Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не загружена оплата заказа %1, так как поддерживаются только полные оплаты.'"), ЗаказСсылка);
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
		
		СтруктураСтатистики.ПропущеноОплат.Добавить(ТекстОшибки);
		
		Возврат;
	ИначеЕсли ЗаказСсылка.СуммаДокумента + ЗаказСсылка.СтоимостьДоставки = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не загружена оплата заказа %1, сумма заказа равна нулю.'"), ЗаказСсылка);
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
		
		СтруктураСтатистики.ПропущеноОплат.Добавить(ТекстОшибки);
		
		Возврат;
	Иначе
		// сумма оплаты не указывается и считается равной сумме заказа
	КонецЕсли;
	
	
	Если ОперацияПоПлатежнымКартам = Неопределено Тогда
		ДокОперацияПоПлатежнымКартам = Документы.ОперацияПоПлатежнымКартам.СоздатьДокумент();
		
		ДокОперацияПоПлатежнымКартам.СпособОплаты = Перечисления.СпособыОплатыЭквайринг.ОплатаОнлайн;
		ДокОперацияПоПлатежнымКартам.НомерПлатежнойКарты = СвойстваОплаты.Получить("Номер платежного документа");
		
		ЭтоНовыйДокумент = Истина;
	Иначе
		ДокОперацияПоПлатежнымКартам = ОперацияПоПлатежнымКартам.ПолучитьОбъект();
		ЭтоНовыйДокумент = Ложь;
	КонецЕсли;
	
	ДокОперацияПоПлатежнымКартам.Дата = ПолучитьДатуВремяИзСтроки(СвойстваОплаты.Получить("Дата оплаты"));
	ДокОперацияПоПлатежнымКартам.ЗаполнитьПоЗаказПокупателя(ЗаказСсылка,,СуммаОплаты);
	
	ДокОперацияПоПлатежнымКартам.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
	ДокОперацияПоПлатежнымКартам.ВидПлатежнойКарты = СвойстваОплаты.Получить("Метод оплаты");
	ДокОперацияПоПлатежнымКартам.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал = НастройкаПлатежныйТерминал.АналитикаОплаты;
	Если ЗначениеЗаполнено(ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал) Тогда
		ЭквайринговыеОперацииСервер.ЗаполнитьПоляКомиссии(ДокОперацияПоПлатежнымКартам);
	КонецЕсли; 
	
	ДокОперацияПоПлатежнымКартам.КассаККМ = ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал.Касса;
	ДокОперацияПоПлатежнымКартам.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	
	// Телефон и email для отправки чека
	СтрокаТЧТелефон = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти("Телефон","Вид");
	Если СтрокаТЧТелефон=Неопределено Тогда
		СтрокаТЧТелефон = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти(НРег("ТелефонМобильный"),"Вид");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТЧТелефон) Тогда
		ПолучитьТелефон = УправлениеНебольшойФирмойКлиентСервер.ПреобразоватьНомерДляОтправкиSMS(СтрокаТЧТелефон.Представление);
		Если ПолучитьТелефон.НомерКорректен Тогда
			ДокОперацияПоПлатежнымКартам.Телефон = СтрЗаменить(ПолучитьТелефон.НомерОтправки, "+7", "");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТЧEMail = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти("email","Вид");
	Если СтрокаТЧEMail=Неопределено Тогда
		СтрокаТЧEMail = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти("E-mail","Вид");
	КонецЕсли;
	Если СтрокаТЧEMail=Неопределено Тогда
		СтрокаТЧEMail = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти("Адрес электронной почты","Вид");
	КонецЕсли;
	Если СтрокаТЧEMail=Неопределено Тогда
		СтрокаТЧEMail = ЗаказСсылка.ИнформацияПоКонтрагенту.Найти("АдресЭП","Вид");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТЧEMail) Тогда
		ДокОперацияПоПлатежнымКартам.АдресЭП = СтрокаТЧEMail.Представление;
	КонецЕсли;
	
	// Платежный терминал
	Если НЕ ЗначениеЗаполнено(ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал) Тогда
		
		НастройкаПлатежныйТерминал = Параметры.ТаблицаСоответствияВидовОплат.Найти(СвойстваОплаты.Получить("Метод оплаты"));
		Если НастройкаПлатежныйТерминал<>Неопределено Тогда
			
			ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал = НастройкаПлатежныйТерминал.АналитикаОплаты;
			Если ЗначениеЗаполнено(ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал) Тогда
				ДокОперацияПоПлатежнымКартам.КассаККМ = ДокОперацияПоПлатежнымКартам.ЭквайринговыйТерминал.Касса;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокОперацияПоПлатежнымКартам.Автор) Тогда
		Если ЗначениеЗаполнено(ЗаказСсылка.Автор) Тогда
			ДокОперацияПоПлатежнымКартам.Автор = ЗаказСсылка.Автор;
		Иначе
			ДокОперацияПоПлатежнымКартам.Автор = ПолучитьАвтора(ДокОперацияПоПлатежнымКартам.КассаККМ);
		КонецЕсли;
	КонецЕсли;
	
	УдалосьЗаписать = Ложь;
	Попытка
		ДокОперацияПоПлатежнымКартам.Записать(РежимЗаписиДокумента.Запись);
		УдалосьЗаписать = Истина;
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстОшибки = ОписаниеОшибки() + Символы.ПС 
		+ ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать ОперацияПоПлатежнымКартам к заказу №'") + ЗаказСсылка.Номер);
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
	КонецПопытки;
	
	Если УдалосьЗаписать Тогда
		
		ОбновитьСоздатьДополнительныеСведенияОперацияПоПлатежнымКартам(ДокОперацияПоПлатежнымКартам.Ссылка, СвойстваОплаты, ОписаниеОшибки);
		
		Если ЭтоНовыйДокумент Тогда
			СтруктураСтатистики.ЗагруженоОплат.Добавить(ДокОперацияПоПлатежнымКартам.Ссылка);
		Иначе
			СтруктураСтатистики.ОбновленоОплат.Добавить(ДокОперацияПоПлатежнымКартам.Ссылка);
		КонецЕсли;
		
		Если Параметры.ПодчиненныеДокументы Тогда
			
			НоваяЗапись = РегистрыСведений.ОплатыПокупателейССайта.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДокументОплаты = ДокОперацияПоПлатежнымКартам.Ссылка;
			НоваяЗапись.НомерОплатыНаСайте = СвойстваОплаты.Получить("Номер платежного документа");;
			НоваяЗапись.ДатаОплатыНаСайте = ПолучитьДатуВремяИзСтроки(СвойстваОплаты.Получить("Дата оплаты"));
			Если Параметры.Свойство("УзелОбмена") Тогда
				НоваяЗапись.УзелОбмена = Параметры.УзелОбмена;
			КонецЕсли;
			НоваяЗапись.Записать();
			
		КонецЕсли; 
		СтруктураСтатистики.ЗагруженоОплат.Добавить(ДокОперацияПоПлатежнымКартам.Ссылка);
		
	ИначеЕсли НЕ ЭтоНовыйДокумент Тогда
		СтруктураСтатистики.ПропущеноОплат.Добавить(ОперацияПоПлатежнымКартам);
	КонецЕсли;
	
КонецПроцедуры

// Создает на основании XML объект XDTO.
//
// Параметры:
//	СтрокаXML - объект чтения XML
//	Параметры - структура
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	ОбъектXDTO.
//
Функция ПолучитьЗаказыXDTO(знач СтрокаXML, Параметры, ОписаниеОшибки)
	
	СтрокаXML = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(СтрокаXML);
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось прочитать XML'")));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		КоммерческаяИнформацияXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось прочитать XML'")));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Получает заказы, ранее загруженные с сайта.
//
// Параметры:
//	МассивНомеров - массив - номера загружаемых документов
//
// Возвращаемое значение
//	Результат запроса.
//
Функция ПолучитьРанееЗагруженныеДокументы(МассивНомеров)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейССайта.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказы
	|ИЗ
	|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
	|ГДЕ
	|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте В(&МассивНомеров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаЗаказы.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаказыСоСсылками
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ПО ПоступлениеВКассуРасшифровкаПлатежа.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ГДЕ
	|	НЕ ПоступлениеВКассуРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ПО СчетНаОплату.ДокументОснование = ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ГДЕ
	|	НЕ СчетНаОплату.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ПО РасходнаяНакладнаяЗапасы.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ГДЕ
	|	НЕ РасходнаяНакладнаяЗапасы.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ПО ПоступлениеНаСчетРасшифровкаПлатежа.Заказ = ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|ГДЕ
	|	НЕ ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВременнаяТаблицаЗаказы.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗаказыСоСсылками.ЗаказПокупателя ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСсылки
	|ИЗ
	|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказыСоСсылками КАК ВременнаяТаблицаЗаказыСоСсылками
	|		ПО ВременнаяТаблицаЗаказы.ЗаказПокупателя = ВременнаяТаблицаЗаказыСоСсылками.ЗаказПокупателя";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Создает и заполняет заказы покупателей.
// Если на заказ покупателя есть ссылки в документах отгрузки или оплаты, обновляются только свойства заказа.
//	
//Параметры
//	ДокументыXDTO - массив объектов XDTO
//	РанееЗагруженныеЗаказы - таблица значений - данные по ранее загруженным заказам
//	СтруктураСтатистики - структура статистики
//	Параметры - структура параметров
//	ОписаниеОшибки - строка - содержит описание ошибок
//
// Возвращаемое значение
//	Булево - истина, если при загрузке заказов не возникло ошибок или обновлены свойства уже загруженного заказа.
//
Функция СоздатьОбновитьЗаказы(ДокументыXDTO, РанееЗагруженныеЗаказы, СтруктураСтатистики, Параметры, ОписаниеОшибки)
	
	Для каждого ДокументXDTO Из ДокументыXDTO Цикл
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в значении узла <Документ>.<ХозОперация> документа XML (%1)'"),
			ДокументXDTO.ХозОперация));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Валюта")
			ИЛИ НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка в значении узла <Документ>.<Валюта> документа XML. Валюта должна быть заполнена.'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтруктураСтатистики.ОбработаноНаЗагрузке = СтруктураСтатистики.ОбработаноНаЗагрузке + 1;
		
		ЭтоНовыйДокумент = Ложь;
		ЕстьСсылкиНаДокументыОплатыОтгрузки = Ложь;
		
		НайденнаяСтрока = РанееЗагруженныеЗаказы.Найти(ДокументXDTO.Номер, "НомерЗаказаНаСайте");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДокументОбъект = НайденнаяСтрока.ЗаказПокупателя.ПолучитьОбъект();
			
			Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				
				СтруктураСтатистики.Пропущено.Добавить(НайденнаяСтрока.ЗаказПокупателя);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				Строка(ДокументОбъект.Ссылка) + НСтр("ru = ' пропущен по причине:'") + Символы.ПС 
				+ НСтр("ru = 'Статус заказа - ""Завершен"".'"));
				
				Продолжить;
				
			КонецЕсли;
			
			ЕстьСсылкиНаДокументыОплатыОтгрузки = НайденнаяСтрока.ЕстьСсылки;
			
		Иначе
			
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
			
		КонецЕсли;
		
		// Получаем свойства заказа.
		СвойстваЗаказа = ПрочитатьСвойстваДокумента(ДокументXDTO);
		
		Если НЕ Параметры.ОбменЧерезВебСервис Тогда
			УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, Параметры.ТаблицаСоответствияСтатусовЗаказов, Параметры);
		КонецЕсли;
		
		Если ЕстьСсылкиНаДокументыОплатыОтгрузки Тогда
			
			// Если у заказа уже есть ссылки на документы оплаты или отгрузки - обновляем только свойства и статус заказа.
			СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект.Ссылка);
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 пропущен, т.к. существуют документы, введенные на основании заказа.'"),
			ДокументОбъект.Ссылка);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
			
			Если ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваЗаказа, ОписаниеОшибки) Тогда
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свойства заказа %1 обновлены.'"),
				ДокументОбъект.Ссылка);
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
			КонецЕсли;
			
		Иначе
			
			Успешно = ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки);
			
			Если НЕ Успешно Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.Номер)
					И СвойствоXDTOЗаполнено(ДокументXDTO.Номер) Тогда
					
					ДокументОбъект.Номер = ПолучитьНомерДокументаССайта(ДокументXDTO.Номер, ДокументОбъект.Организация);
				КонецЕсли;
				
				ВыполнитьДействияПередЗаписьюЗаказа(ДокументОбъект, Параметры);
				ЗаписатьДокумент(ДокументОбъект);
				
				Если ЭтоНовыйДокумент Тогда
					СтруктураСтатистики.Создано.Добавить(ДокументОбъект.Ссылка);
					
					ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
					ОписаниеВходящего.Ответственный = ДокументОбъект.Ответственный;
					КонтактЦентр.ДобавитьВоВходящее(ДокументОбъект.Ссылка, ОписаниеВходящего);
				Иначе
					СтруктураСтатистики.Обновлено.Добавить(ДокументОбъект.Ссылка);
				КонецЕсли;
				
			Исключение
				
				СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект);
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать заказ №'") + ДокументОбъект.Номер));
				
				Возврат Ложь;
				
			КонецПопытки;
			
			ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваЗаказа, ОписаниеОшибки);
			СтруктураСтатистики.Загружено.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		// Оплата заказа на сайте
		Если Параметры.ПодчиненныеДокументы = Истина И ОбъектXDTOСодержитСвойство(ДокументXDTO, "ПодчиненныеДокументы") Тогда
			
			ПрочитатьПодчиненныеДокументыОплаты(ДокументXDTO, ДокументОбъект.Ссылка, СвойстваЗаказа, Параметры, СтруктураСтатистики, ОписаниеОшибки);
			
		ИначеЕсли Параметры.Свойство("УзелОбмена") 
			И Параметры.ОнлайнОплаты
			И ЗначениеЗаполнено(СвойстваЗаказа.Получить("Дата оплаты"))
			И (ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты")) ИЛИ ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты ИД")))
			И ЗначениеЗаполнено(СвойстваЗаказа.Получить("Номер платежного документа"))
			Тогда
			
			СоздатьОбновитьДокументОплаты(ДокументОбъект.Ссылка, СвойстваЗаказа, Параметры, СтруктураСтатистики, ОписаниеОшибки);
			
		КонецЕсли;
		
		Если ЭтоНовыйДокумент Тогда
			ЗаписатьЗаказыПокупателейССайта(ДокументXDTO, ДокументОбъект, Параметры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Создает и заполняет заказы покупателей.
// Если на заказ покупателя есть ссылки в документах отгрузки или оплаты, обновляются только свойства заказа.
//	
//Параметры
//	ДокументыXDTO - массив объектов XDTO
//	РанееЗагруженныеЗаказы - таблица значений - данные по ранее загруженным заказам
//	СтруктураСтатистики - структура статистики
//	Параметры - структура параметров
//	ОписаниеОшибки - строка - содержит описание ошибок
//
// Возвращаемое значение
//	Булево - истина, если при загрузке заказов не возникло ошибок или обновлены свойства уже загруженного заказа.
//
Функция СоздатьОбновитьЗаказНаряды(ДокументыXDTO, РанееЗагруженныеЗаказы, СтруктураСтатистики, Параметры)
	
	ОписаниеОшибки = Параметры.ОписаниеОшибки;
	
	Для каждого ДокументXDTO Из ДокументыXDTO Цикл
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = "запись на услугу" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в значении узла <Документ>.<ХозОперация> документа XML (%1)'"),
			ДокументXDTO.ХозОперация));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Валюта")
			ИЛИ НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка в значении узла <Документ>.<Валюта> документа XML. Валюта должна быть заполнена.'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтруктураСтатистики.ОбработаноНаЗагрузке = СтруктураСтатистики.ОбработаноНаЗагрузке + 1;
		
		ЭтоНовыйДокумент = Ложь;
		ЕстьСсылкиНаДокументыОплатыОтгрузки = Ложь;
		
		НайденнаяСтрока = РанееЗагруженныеЗаказы.Найти(ДокументXDTO.Номер, "НомерЗаказаНаСайте");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДокументОбъект = НайденнаяСтрока.ЗаказПокупателя.ПолучитьОбъект();
			
			Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				
				СтруктураСтатистики.Пропущено.Добавить(НайденнаяСтрока.ЗаказПокупателя);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				Строка(ДокументОбъект.Ссылка) + НСтр("ru = ' пропущен по причине:'") + Символы.ПС 
				+ НСтр("ru = 'Статус заказа - ""Завершен"".'"));
				
				Продолжить;
				
			КонецЕсли;
			
			ЕстьСсылкиНаДокументыОплатыОтгрузки = НайденнаяСтрока.ЕстьСсылки;
			
		Иначе
			
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
			
		КонецЕсли;
		
		// Получаем свойства заказа.
		СвойстваСобытия = ПрочитатьСвойстваДокумента(ДокументXDTO);
		
		Если ЕстьСсылкиНаДокументыОплатыОтгрузки Тогда
			
			// Если у заказа уже есть ссылки на документы оплаты или отгрузки - обновляем только свойства.
			СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект.Ссылка);
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 пропущен, т.к. существуют документы, введенные на основании заказа.'"),
			ДокументОбъект.Ссылка);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
			
			Если ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваСобытия, ОписаниеОшибки) Тогда
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свойства заказа %1 обновлены.'"),
				ДокументОбъект.Ссылка);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
				
			КонецЕсли;
			
		Иначе
			
			Успешно = ЗаполнитьЗаказНарядДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваСобытия, Параметры);
			
			Если НЕ Успешно Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.Номер)
					И СвойствоXDTOЗаполнено(ДокументXDTO.Номер) Тогда
					
					ДокументОбъект.Номер = ПолучитьНомерДокументаССайта(ДокументXDTO.Номер, ДокументОбъект.Организация);
				КонецЕсли;
				
				//ВыполнитьДействияПередЗаписьюЗаказа(ДокументОбъект, Параметры);
				ЗаписатьДокумент(ДокументОбъект);
				
				Если ЭтоНовыйДокумент Тогда
					СтруктураСтатистики.Создано.Добавить(ДокументОбъект.Ссылка);
				Иначе
					СтруктураСтатистики.Обновлено.Добавить(ДокументОбъект.Ссылка);
				КонецЕсли;
				
			Исключение
				
				СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект);
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать событие №'") + ДокументОбъект.Номер));
				
				Возврат Ложь;
				
			КонецПопытки;
			
			ОбновитьСоздатьДополнительныеСведенияЗаказа(ДокументОбъект.Ссылка, СвойстваСобытия, ОписаниеОшибки);
			СтруктураСтатистики.Загружено.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		Если ЭтоНовыйДокумент Тогда
			ЗаписатьЗаказыПокупателейССайта(ДокументXDTO, ДокументОбъект, Параметры);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеЗаказов(МассивИзменений, СтруктураСтатистики, Параметры) Экспорт
	
	МассивРезультатов = ПолучитьЗаказыСОплатойИОтгрузкой(МассивИзменений, СтруктураСтатистики.Загружено, Параметры);
	
	Параметры.Вставить("ВыборкаДокументов", МассивРезультатов[6].Выбрать());
	
	Если Параметры.ВыборкаДокументов.Количество() = 0 Тогда
		Параметры.Вставить("ДеревоСвойствХарактеристик");
		Параметры.Вставить("ВыборкаОтгрузкиОплаты");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ДеревоСвойствХарактеристик", МассивРезультатов[7].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	Параметры.Вставить("ВыборкаОтгрузкиОплаты", МассивРезультатов[8]);
	
КонецФункции

Процедура ЗаписатьЗаказыПокупателейССайта(ДокументXDTO, ДокументОбъект, Параметры)
	
	НоваяЗапись = РегистрыСведений.ЗаказыПокупателейССайта.СоздатьМенеджерЗаписи();
	НоваяЗапись.ЗаказПокупателя = ДокументОбъект.Ссылка;
	НоваяЗапись.НомерЗаказаНаСайте = ДокументXDTO.Номер;
	НоваяЗапись.ДатаЗаказаНаСайте = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата);
	Если Параметры.Свойство("УзелОбмена") Тогда
		НоваяЗапись.УзелОбмена = Параметры.УзелОбмена;
	КонецЕсли;
	НоваяЗапись.Записать();
	
	
КонецПроцедуры

Процедура ДобавитьПодчиненныеДокументыЗаказаXDTO(ДокументXDTO, ПакетCML, ДанныеЗаказа, РезультатЗапросаОтгрузкиОплаты, Параметры)
	
	Если РезультатЗапросаОтгрузкиОплаты.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказПокупателя = ДанныеЗаказа.ЗаказПокупателя;
	ВыборкаОтгрузкиОплаты = РезультатЗапросаОтгрузкиОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НайтиДанныеПоЗаказу = ВыборкаОтгрузкиОплаты.НайтиСледующий(Новый Структура("ЗаказПокупателя", ЗаказПокупателя));
	Если НЕ НайтиДанныеПоЗаказу Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеДокументыТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "ПодчиненныеДокументы");
	ПодчиненныйДокументТип	= ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПодчиненныеДокументыТип, "ПодчиненныйДокумент");
	ПодчиненныеДокументыXDTO= ФабрикаXDTO.Создать(ПодчиненныеДокументыТип);
	
	ВыборкаПодчиненныеДокументы = ВыборкаОтгрузкиОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодчиненныеДокументы.Следующий() Цикл
		
		Если ВыборкаПодчиненныеДокументы.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПодчиненныйДокументXDTO = ФабрикаXDTO.Создать(ПодчиненныйДокументТип);
		ПодчиненныйДокументXDTO.Ид = Строка(ВыборкаПодчиненныеДокументы.ДокументДвижения.УникальныйИдентификатор());
		
		// Доп. реквизиты документа
		ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ПодчиненныйДокументXDTO.Свойства().Получить("ЗначенияРеквизитов").Тип);
		
		Если ВыборкаПодчиненныеДокументы.ВидОперации = "Оплата" ИЛИ ВыборкаПодчиненныеДокументы.ВидОперации = "Зачет аванса" Тогда
			
			СтруктураПоискаОплат = Новый Структура;
			
			//оплаты
			ВыборкаОплат = ВыборкаПодчиненныеДокументы.Выбрать();
			Пока ВыборкаОплат.Следующий() Цикл
				
				Если ВыборкаОплат.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Результат = ХозОперацияПоТипуДокумента(ВыборкаПодчиненныеДокументы.ДокументДвижения, Параметры.ОписаниеОшибки);
				
				ПодчиненныйДокументXDTO.ХозОперация = Результат.ХозОперация;
				СтруктураПоискаОплат.Вставить("ТипОплатыНаСайте", Результат.ТипОплатыНаСайте);
				СтруктураПоискаОплат.Вставить("АналитикаОплаты", ВыборкаОплат.АналитикаОплаты);
				
				ПодчиненныйДокументXDTO.СрокПлатежа = ВыборкаОплат.Период;
				
				Если ЗначениеЗаполнено(ВыборкаОплат.Сумма) Тогда
					ПодчиненныйДокументXDTO.Сумма = ВыборкаОплат.Сумма;
					ПодчиненныйДокументXDTO.Валюта = ФорматВалютыДляXDTO(ДанныеЗаказа.Валюта);
					ПодчиненныйДокументXDTO.Курс = ДанныеЗаказа.Курс;
					Если ЗначениеЗаполнено(ВыборкаОплат.НомерОплатыНаСайте) И ЗначениеЗаполнено(ВыборкаОплат.ДатаОплатыНаСайте) Тогда
						ПодчиненныйДокументXDTO.Номер = ВыборкаОплат.НомерОплатыНаСайте;
						ПодчиненныйДокументXDTO.Дата = ФорматДатыДляXDTO(ВыборкаОплат.ДатаОплатыНаСайте, Истина, Ложь);
					Иначе
						// Если оплата создана в 1С, номер не передаем, сопоставление будет выполняться по Ид
						ПодчиненныйДокументXDTO.Дата = ФорматДатыДляXDTO(?(ЗначениеЗаполнено(ВыборкаОплат.Дата1С), ВыборкаОплат.Дата1С, ВыборкаОплат.Период), Истина, Ложь);
					КонецЕсли;
					Если ЗначениеЗаполнено(ВыборкаОплат.Комментарий) Тогда
						ПодчиненныйДокументXDTO.Комментарий = Лев(ВыборкаОплат.Комментарий, 1000);
					КонецЕсли;
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер оплаты по 1С", ВыборкаОплат.Номер1С);
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата оплаты по 1С", ФорматДатыДляXDTO(ВыборкаОплат.Дата1С, Истина, Истина));
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Оплачен", Истина);
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер платежного документа", ВыборкаОплат.НомерПлатежногоДокумента);
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер чека", 
					?(ЗначениеЗаполнено(ВыборкаОплат.НомерЧекаККМ), Строка(ВыборкаОплат.НомерСменыККМ +"-"+ ВыборкаОплат.НомерЧекаККМ), ""));
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата оплаты", ФорматДатыДляXDTO(ВыборкаОплат.Период, Истина, Истина));
					
				КонецЕсли;
			КонецЦикла;
			
			// соответствие из настроек в узле обмена
			Если Параметры.Свойство("ТаблицаСоответствияВидовОплат")
				И Параметры.ТаблицаСоответствияВидовОплат <> Неопределено Тогда 
				
				МассивСоответствие = Параметры.ТаблицаСоответствияВидовОплат.НайтиСтроки(СтруктураПоискаОплат);
				Если МассивСоответствие.Количество() > 0 Тогда
					НайденноеСоответствие = МассивСоответствие[0];
					Если ЗначениеЗаполнено(НайденноеСоответствие.ИдСпособаОплатыНаСайте) Тогда
						ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты ИД", НайденноеСоответствие.ИдСпособаОплатыНаСайте);
					КонецЕсли;
					Если ЗначениеЗаполнено(НайденноеСоответствие.СпособОплатыНаСайте) Тогда
						ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты", НайденноеСоответствие.СпособОплатыНаСайте);
					КонецЕсли;
				Иначе
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты", ПодчиненныйДокументXDTO.ХозОперация);
				КонецЕсли;
			Иначе
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты", ПодчиненныйДокументXDTO.ХозОперация);
			КонецЕсли;
			
		Иначе //отгрузки и доставки
			
			ПодчиненныйДокументXDTO.ХозОперация = "Отпуск товара";
			
			Если ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставки) Тогда
				
				ЗаполнитьСвойстваДоставки(ЗначенияРеквизитовXDTO, ПакетCML, ДанныеЗаказа, Параметры);
				
			КонецЕсли;
			
			// Заполним товары по документу
			ТоварыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПодчиненныйДокументXDTO.Тип(), "Товары");
			ТоварТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварыТип, "Товар");
			ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
			
			ИскатьДоставкуВТоварах = Истина;
			
			ВыборкаТоваров = ВыборкаПодчиненныеДокументы.Выбрать();
			Пока ВыборкаТоваров.Следующий() Цикл
				
				ТоварXDTO = Неопределено;
				
				Если ВыборкаТоваров.ВидОперации = "Оплата" Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'при выгрузке заказа %1, в документе %2 не разнесена оплата на сумму %3'"),
					ВыборкаТоваров.ЗаказПокупателя,
					ВыборкаТоваров.Регистратор,
					ВыборкаТоваров.Сумма
					);
					Параметры.ОписаниеОшибки = Параметры.ОписаниеОшибки + ТекстОшибки + Символы.ПС; 
					Продолжить; //зачет аванса документом отгрузки
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаТоваров.Комментарий) Тогда
					ПодчиненныйДокументXDTO.Комментарий = Лев(ВыборкаТоваров.Комментарий, 1000);
				КонецЕсли;
				
				Если ВыборкаТоваров.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаТоваров.СтоимостьДоставки) И ЗначениеЗаполнено(ВыборкаТоваров.НоменклатураДоставки) Тогда
					ИскатьДоставкуВТоварах = Ложь;
				КонецЕсли;
				
				ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
				
				ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаТоваров.Номенклатура);				
				Характеристика = Неопределено;
				Если Параметры.ИспользоватьХарактеристики Тогда
					Характеристика = ВыборкаТоваров.Характеристика;
				КонецЕсли;
				Если ВыборкаТоваров.ВидОперации = "Доставка" Тогда
					ТоварXDTO.Ид = "ORDER_DELIVERY";
					ТоварXDTO.Количество = 1;
					ТоварXDTO.Сумма = ВыборкаТоваров.СтоимостьДоставки;
					
					ЗначенияРеквизитовXDTOТовара = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов"));
					ДобавитьСвойстваТовараВЗаказе(ЗначенияРеквизитовXDTOТовара, ПакетCML, ВыборкаТоваров, Параметры, ТоварXDTO.Ид);
					
					ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTOТовара;
					
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер документа отгрузки", ВыборкаТоваров.Номер1С);
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата документа отгрузки", ФорматДатыДляXDTO(ВыборкаТоваров.Дата1С, Истина, Истина));
					
					ИскатьДоставкуВТоварах = Ложь;
				Иначе //отгрузка
					
					Если ИскатьДоставкуВТоварах 
						И Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс
						И ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
						Тогда //для CMS Битрикс выгружаем первую услугу - как доставку, с Ид = "ORDER_DELIVERY"
						
						ТоварXDTO.Ид = "ORDER_DELIVERY";
						ТоварXDTO.Сумма = ВыборкаТоваров.Сумма;
						ИскатьДоставкуВТоварах = Ложь;
					Иначе	
						ЗаполнитьИДСайтаДляОбъектаXDTO(ТоварXDTO, ВыборкаТоваров.Номенклатура, Характеристика, Параметры);
					КонецЕсли;
					
					ТоварXDTO.Количество = ВыборкаТоваров.Количество;
					
					// Если отгрузка создана в 1С, номер не передаем, сопоставление будет выполняться по Ид
					ПодчиненныйДокументXDTO.Дата = ФорматДатыДляXDTO(ВыборкаТоваров.Дата1С, Истина, Ложь);
					
					ЗначенияРеквизитовXDTOТовара = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов"));
					ДобавитьСвойстваТовараВЗаказе(ЗначенияРеквизитовXDTOТовара, ПакетCML, ВыборкаТоваров, Параметры, ТоварXDTO.Ид);
					
					ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTOТовара;
					
				КонецЕсли; 
				
				Если ТоварXDTO <> Неопределено Тогда
					ТоварыXDTO.Товар.Добавить(ТоварXDTO);
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ТоварыXDTO.Товар.Количество()>0 Тогда
				ПодчиненныйДокументXDTO.Товары = ТоварыXDTO;
			КонецЕсли;
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отгружен", Истина);
			
		КонецЕсли;
		
		ПодчиненныйДокументXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
		ПодчиненныеДокументыXDTO.ПодчиненныйДокумент.Добавить(ПодчиненныйДокументXDTO);
	КонецЦикла;
	
	ДокументXDTO.ПодчиненныеДокументы = ПодчиненныеДокументыXDTO;
	
КонецПроцедуры

Процедура ПрочитатьПодчиненныеДокументыОплаты(ДокументXDTO, ЗаказСсылка, СвойстваЗаказа, Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	МассивПодчиненныхДокументов = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ПодчиненныеДокументы.ПодчиненныйДокумент);
	Для каждого ПодчиненныйДокументXDTO Из МассивПодчиненныхДокументов Цикл
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПодчиненныйДокументXDTO, "ХозОперация") Тогда
			Продолжить;
		КонецЕсли;
		
		// От сайта принимаем только оплаты с видом "Эквайринговая операция"
		Если НЕ ПодчиненныйДокументXDTO.ХозОперация = "Эквайринговая операция" Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваДокумента = ПрочитатьСвойстваДокумента(ПодчиненныйДокументXDTO);
		
		Если СвойстваДокумента.Получить("Оплачено") = Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвойстваДокумента.Получить("Оплачено") = "false" Тогда
			// оплата не оплачена, это пустой шаблон, создавать его в 1С не нужно
			Продолжить;
		КонецЕсли;
		
		СвойстваДокумента.Вставить("Дата оплаты", ПодчиненныйДокументXDTO.Дата);
		СвойстваДокумента.Вставить("Номер платежного документа", ПодчиненныйДокументXDTO.Номер);
		СвойстваДокумента.Вставить("Сумма", ПодчиненныйДокументXDTO.Сумма);
		СвойстваДокумента.Вставить("Ид", ПодчиненныйДокументXDTO.Ид);
		СвойстваДокумента.Вставить("ПодчиненныйДокумент", Истина);
		
		Если Параметры.Свойство("УзелОбмена") 
			И (Параметры.ОнлайнОплаты ИЛИ Параметры.ПодчиненныеДокументы)
			И ЗначениеЗаполнено(СвойстваДокумента.Получить("Дата оплаты"))
			И ЗначениеЗаполнено(СвойстваДокумента.Получить("Метод оплаты"))
			И ЗначениеЗаполнено(СвойстваДокумента.Получить("Номер платежного документа"))
			Тогда
			
			СоздатьОбновитьДокументОплаты(ЗаказСсылка, СвойстваДокумента, Параметры, СтруктураСтатистики, ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДействияПередЗаписьюЗаказа(ДокументОбъект, Параметры)
	
	ДокументОбъект.ДатаИзменения = ТекущаяДата();
	
	Если НЕ Параметры.ОбменЧерезВебСервис
		И ДокументОбъект.Проведен И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Запасы Цикл
		СтрокаТабличнойЧасти.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И НЕ ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		
		ДокументОбъект.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ДокументОбъект.Контрагент);
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Работы.Итог("Всего");
	
КонецПроцедуры

// Функция определяет наличие движений документа.
//
Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Процедура очищает коллекцию движений документа.
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
	
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

// Процедура удаления существующих движений документа при перепроведении (отмене проведения).
//
Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// Имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));
		
		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;
		
		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
		
		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	Если Не ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать();
	Иначе
		// отменяем проведение документа
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		УдалитьДвиженияУДокумента(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет значения дополнительных сведений заказа покупателя значениями из соответствия СвойстваЗаказа.
// Дополнительные сведения, которые не удалось найти, создаются.
//
// Параметры
//	ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ для которого создаются/перезаполняются дополнительные сведения
//	СвойстваЗаказа - Соответствие - свойства и значения загружаемого заказа
//	ОписаниеОшибки - информация по ошибкам
//
// Возвращаемого значение
//	Булево - Истина, если в процессе обновления/создания дополнительных сведений не возникло ошибок.
//
Функция ОбновитьСоздатьДополнительныеСведенияЗаказа(ЗаказПокупателя, СвойстваЗаказа, ОписаниеОшибки)
	
	Если СвойстваЗаказа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаСвойств = УправлениеСвойствами.ЗначенияСвойств(ЗаказПокупателя, Ложь, Истина);
	ТаблицаСвойств.Колонки.Добавить("СвойствоСтрокой");
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		СтрокаСвойства.СвойствоСтрокой = Строка(СтрокаСвойства.Свойство);
	КонецЦикла;
	
	МассивСоздатьОбновить = Новый Массив;
	
	Для Каждого СвойствоЗаказа Из СвойстваЗаказа Цикл
		
		СтруктураПоиска = Новый Структура("СвойствоСтрокой, Значение", СвойствоЗаказа.Ключ, СвойствоЗаказа.Значение);
		
		Найдено = ТаблицаСвойств.НайтиСтроки(СтруктураПоиска);
		Если Найдено.Количество() = 0 Тогда
			
			МассивСоздатьОбновить.Добавить(СвойствоЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоздатьОбновить.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И (НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления)
	|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
	
	ЗапросНаборы = Новый Запрос(
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя)
	|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		ТипЗначенияСвойства = Тип("Строка");
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Тип(Выборка.ТипЗначения) = Тип("Строка")
				ИЛИ Тип(Выборка.ТипЗначения) = Тип("Дата")
				ИЛИ Тип(Выборка.ТипЗначения) = Тип("Число")
				Тогда
				
				Свойство = Выборка.Ссылка;
				ТипЗначенияСвойства = Тип(Выборка.ТипЗначения);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.Заголовок = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			ЗаписьНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ЗаказПокупателя;
		Если ТипЗначенияСвойства = Тип("Строка") Тогда
			НоваяЗапись.Значение = Значение;
		ИначеЕсли ТипЗначенияСвойства = Тип("Дата") Тогда
			ДатаСтрока = Лев(Значение, 10);
			ВремяСтрока = Сред(Значение, 12);
			НоваяЗапись.Значение = ДатаИзСтрокиЛюбогоФормата(Значение);
		ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
			НоваяЗапись.Значение = ПолучитьЧислоИзСтроки(Значение);
		КонецЕсли; 
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьСоздатьДополнительныеСведенияОперацияПоПлатежнымКартам(ОперацияПоПлатежнымКартам, СвойстваЗаказа, ОписаниеОшибки)
	
	Если СвойстваЗаказа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОперацияПоПлатежнымКартам) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСоздатьОбновить = Новый Соответствие;
	МассивСоздатьОбновить.Вставить("Дата оплаты", СвойстваЗаказа.Получить("Дата оплаты"));
	МассивСоздатьОбновить.Вставить("Метод оплаты", СвойстваЗаказа.Получить("Метод оплаты"));
	МассивСоздатьОбновить.Вставить("Номер платежного документа", СвойстваЗаказа.Получить("Номер платежного документа"));
	Если ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты ИД")) Тогда
		МассивСоздатьОбновить.Вставить("Метод оплаты ИД", СвойстваЗаказа.Получить("Метод оплаты ИД"));
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И (НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления)
	|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
	
	ЗапросНаборы = Новый Запрос(
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ОперацияПоПлатежнымКартам)
	|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
				
				Свойство = Выборка.Ссылка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.Заголовок = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			ЗаписьНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ОперацияПоПлатежнымКартам.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ОперацияПоПлатежнымКартам;
		НоваяЗапись.Значение = Значение;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки)
	
	Если НЕ Параметры.ОбменЧерезВебСервис
		И ДокументОбъект.Проведен И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	РазрешеноПроведение = Истина;
	
	ДокументОбъект.Заполнить(Неопределено);
	
	Организация = ПолучитьОрганизациюИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДокументОбъект.Организация = Организация;
	ИначеЕсли Параметры.Свойство("ОрганизацияДляПодстановкиВЗаказы")
		И ЗначениеЗаполнено(Параметры.ОрганизацияДляПодстановкиВЗаказы) Тогда
		
		ДокументОбъект.Организация = Параметры.ОрганизацияДляПодстановкиВЗаказы;
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = ВидОперации;
	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	ДокументОбъект.Дата = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДокументОбъект.Организация, , ДокументОбъект.Дата);
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	КонецЕсли;
	
	ДокументОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	УстановитьДатуОтгрузкиЗаказа(ДокументОбъект, Параметры, СвойстваЗаказа);
	ДокументОбъект.ВалютаДокумента = ОбменССайтомПовтИсп.ОбработатьВалютуXML(ДокументXDTO.Валюта);
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Параметры.ДатаФормирования, Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	ДокументОбъект.ВидЦен = ПолучитьВидЦенИзСвойствЗаказа(СвойстваЗаказа);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидЦен) Тогда
		Если Параметры.Свойство("ВидЦеныДляПодстановкиВЗаказы") И ЗначениеЗаполнено(Параметры.ВидЦеныДляПодстановкиВЗаказы) Тогда
			ДокументОбъект.ВидЦен = Параметры.ВидЦеныДляПодстановкиВЗаказы;
		// Если в узле обмена указан только один вид цен, заполним его в заказе
		ИначеЕсли Параметры.Свойство("ВидыЦен") И Параметры.ВидыЦен.Количество()=1 Тогда
			ДокументОбъект.ВидЦен = Параметры.ВидыЦен[0].ВидЦен;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("СкладДляПодстановкиВЗаказы")
		И ЗначениеЗаполнено(Параметры.СкладДляПодстановкиВЗаказы) Тогда
		Склад = Параметры.СкладДляПодстановкиВЗаказы;
	Иначе
		Склад = ПолучитьСкладИзСвойствЗаказа(СвойстваЗаказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаРезерв = Склад;
		Ответственный = ПолучитьМОСотрудника(Склад.МОЛ);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ДокументОбъект.Ответственный = Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Подразделение = ПолучитьПодразделениеИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаПродажи = Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	Иначе
		ДокументОбъект.Касса = Параметры.ОрганизацияВладелецКаталога.КассаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ИдентифицироватьКонтрагента(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Не удалось идентифицировать контрагента для заказа номер: '") + ДокументXDTO.Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		ДоговорКонтрагента = ПолучитьДоговорИзСвойствЗаказа(СвойстваЗаказа, ДокументОбъект);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить данные о доставке из свойств заказа
	Если Параметры.ТаблицаСоответствияСлужбДоставки.Количество() > 0 Тогда
		
		СтрокаСоответствиеДоставки = Неопределено; 
		Если СвойстваЗаказа.Получить("Метод доставки ИД") <> Неопределено Тогда
			СтрокаСоответствиеДоставки = Параметры.ТаблицаСоответствияСлужбДоставки.Найти(СвойстваЗаказа.Получить("Метод доставки ИД"),"ИдСлужбыДоставкиНаСайте");
		ИначеЕсли СвойстваЗаказа.Получить("Способ доставки ИД") <> Неопределено Тогда
			СтрокаСоответствиеДоставки = Параметры.ТаблицаСоответствияСлужбДоставки.Найти(СвойстваЗаказа.Получить("Способ доставки ИД"),"ИдСлужбыДоставкиНаСайте");
		ИначеЕсли СвойстваЗаказа.Получить("Метод доставки") <> Неопределено Тогда
			СтрокаСоответствиеДоставки = Параметры.ТаблицаСоответствияСлужбДоставки.Найти(СвойстваЗаказа.Получить("Метод доставки"),"СлужбаДоставкиНаСайте");
		ИначеЕсли СвойстваЗаказа.Получить("Способ доставки") <> Неопределено Тогда
			СтрокаСоответствиеДоставки = Параметры.ТаблицаСоответствияСлужбДоставки.Найти(СвойстваЗаказа.Получить("Способ доставки"),"СлужбаДоставкиНаСайте");
		КонецЕсли;
		Если СтрокаСоответствиеДоставки <> Неопределено Тогда
			ДокументОбъект.СпособДоставки = СтрокаСоответствиеДоставки.СпособДоставки;
			ДокументОбъект.СлужбаДоставки = СтрокаСоответствиеДоставки.СлужбаДоставки;
		КонецЕсли;
		
	КонецЕсли; 
	Если СвойстваЗаказа.Получить("Комментарий доставки") <> Неопределено Тогда
		ДокументОбъект.ДополнительнаяИнформацияПоДоставке = СвойстваЗаказа.Получить("Комментарий доставки");
	КонецЕсли;
	Если СвойстваЗаказа.Получить("Получатель") = Неопределено Тогда
		НаименованиеXDTO = ДокументОбъект.ИнформацияПоКонтрагенту.Найти("Наименование","Вид");
		ПолноеНаименованиеXDTO = ДокументОбъект.ИнформацияПоКонтрагенту.Найти("Полное наименование","Вид");
		Если НаименованиеXDTO <> Неопределено Тогда
			ДокументОбъект.КонтактноеЛицо = НаименованиеXDTO.Представление;
		ИначеЕсли ПолноеНаименованиеXDTO <> Неопределено Тогда
			ДокументОбъект.КонтактноеЛицо = ПолноеНаименованиеXDTO.Представление;
		КонецЕсли;
	Иначе
		ДокументОбъект.КонтактноеЛицо = СвойстваЗаказа.Получить("Получатель");
	КонецЕсли;
	Если СвойстваЗаказа.Получить("Трек-номер") <> Неопределено Тогда
		ДокументОбъект.ТрекНомер = СвойстваЗаказа.Получить("Трек-номер");
	КонецЕсли;
	
	// заполнение реквизитов заказа из одноименных свойств
	РазрешенныеСимволыИмениРеквизита = Новый Соответствие;
	// АПК:1036-выкл - алфавит
	СтрСимволы = "йцукенгшщзхъфывапролджэячсмитьбю_qwertyuiopasdfghjklzxcvbnm01234567890";
	// АПК:1036-вкл
	Для н=1 По СтрДлина(СтрСимволы) Цикл
		РазрешенныеСимволыИмениРеквизита.Вставить(Сред(СтрСимволы, н, 1), Истина);
	КонецЦикла;	
	Для каждого элСоответствие Из СвойстваЗаказа Цикл
		ИмяРеквизита = СтрЗаменить(элСоответствие.Ключ," ","");
		Если ПроверитьИмяСвойстваКакРеквизит(ИмяРеквизита, РазрешенныеСимволыИмениРеквизита) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, ИмяРеквизита) Тогда
				
				Если ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Строка") Тогда
					
					ДокументОбъект[ИмяРеквизита] = элСоответствие.Значение;
				ИначеЕсли ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Число") Тогда
					
					Попытка
						ДокументОбъект[ИмяРеквизита] = Число(элСоответствие.Значение);
					Исключение
						ДобавитьОписаниеОшибки(ОписаниеОшибки,
						НСтр("ru = 'Не удалось преобразовать значение свойства в число: '") + ИмяРеквизита+":"+элСоответствие.Значение);
					КонецПопытки; 
				ИначеЕсли ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Дата") 
					И (НРег(ИмяРеквизита) = НРег("ДатаОтгрузки") 
					ИЛИ НРег(ИмяРеквизита) = НРег("ОжидаемаяДатаВручения")
					ИЛИ НРег(ИмяРеквизита) = НРег("ВремяДоставкиС")
					ИЛИ НРег(ИмяРеквизита) = НРег("ВремяДоставкиПо")
					) Тогда
					
					ДатаСтрока = Лев(элСоответствие.Значение, 10);
					ВремяСтрока = ?(СтрНайти(элСоответствие.Значение, "T") > 0, Сред(элСоответствие.Значение, 12), "");
					Попытка
						ДокументОбъект[ИмяРеквизита] = ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока);
					Исключение
						ДобавитьОписаниеОшибки(ОписаниеОшибки,
						НСтр("ru = 'Не удалось преобразовать значение свойства в дату: '") + ИмяРеквизита+":"+элСоответствие.Значение);
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ИдентифицироватьНоменклатуру(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Комментарий покупателя
	КомментарийПокупателя = Неопределено;
	Комментарий = Неопределено;
	АдресДоставки = Неопределено;
	Если ТипЗнч(СвойстваЗаказа) = Тип("Соответствие") Тогда
		
		// Может быть 3 комментария или больше: 
		// Комментарий покупателя в разделе "Данные для доставки", 
		// Комментарий менеджера
		// Комментарий покупателя к заказу - как доп. реквизит заказа
		КомментарийПокупателя = СвойстваЗаказа["Комментарии покупателя"];
		Комментарий = СвойстваЗаказа["Комментарий"];
		ДобавитьСтрокуИнформацииПоКонтрагенту("Комментарии покупателя", "Комментарии покупателя", КомментарийПокупателя, ДокументОбъект.ИнформацияПоКонтрагенту);
		
		АдресДоставки = СвойстваЗаказа["Адрес доставки"];
	КонецЕсли;
	
	КомментарийXDTO = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий") Тогда
		Если ТипЗнч(ДокументXDTO.Комментарий) = Тип("Строка") Тогда
			КомментарийXDTO = СокрЛП(ДокументXDTO.Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Если КомментарийПокупателя <> Неопределено Тогда
		ДокументОбъект.Комментарий = КомментарийПокупателя;
	ИначеЕсли Комментарий <> Неопределено Тогда
		ДокументОбъект.Комментарий = Комментарий;
	ИначеЕсли КомментарийXDTO <> "" Тогда
		ДокументОбъект.Комментарий = КомментарийXDTO;
	КонецЕсли;
	
	Если АдресДоставки <> Неопределено Тогда
		ДокументОбъект.АдресДоставки = АдресДоставки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьЗаказНарядДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры)
	
	ОписаниеОшибки = Параметры.ОписаниеОшибки;
	
	Если НЕ Параметры.ОбменЧерезВебСервис
		И ДокументОбъект.Проведен И Параметры.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке Тогда
		УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, Параметры.ТаблицаСоответствияСтатусовЗаказов, Параметры);
		Возврат Истина;
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	РазрешеноПроведение = Истина;
	
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументОбъект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	ДокументОбъект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	
	ДокументОбъект.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
	Если Параметры.Свойство("СостояниеЗаказНаряда") И ЗначениеЗаполнено(Параметры.СостояниеЗаказНаряда) Тогда
		ДокументОбъект.СостояниеЗаказа = Параметры.СостояниеЗаказНаряда;
	ИначеЕсли ДокументОбъект.ВидЗаказа.ПорядокСостояний.Количество() > 0 Тогда
		ДокументОбъект.СостояниеЗаказа = ДокументОбъект.ВидЗаказа.ПорядокСостояний[0].Состояние;
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Организация) Тогда
		ДокументОбъект.Организация = Организация;
	ИначеЕсли Параметры.Свойство("ОрганизацияДляПодстановкиВЗаказы")
		И ЗначениеЗаполнено(Параметры.ОрганизацияДляПодстановкиВЗаказы) Тогда
		ДокументОбъект.Организация = Параметры.ОрганизацияДляПодстановкиВЗаказы;
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = ВидОперации;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	
	ДокументОбъект.Дата = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	ДокументОбъект.ВалютаДокумента = ОбменССайтомПовтИсп.ОбработатьВалютуXML(ДокументXDTO.Валюта);
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Параметры.ДатаФормирования, Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	ДокументОбъект.ВидЦен = ПолучитьВидЦенИзСвойствЗаказа(СвойстваЗаказа);
	// Если в узле обмена указан только один вид цен, заполним его в заказе
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидЦен) И Параметры.Свойство("ВидыЦен") И Параметры.ВидыЦен.Количество()=1 Тогда
		ДокументОбъект.ВидЦен = Параметры.ВидыЦен[0].ВидЦен;
	КонецЕсли;
	
	Если Параметры.Свойство("СкладДляПодстановкиВЗаказы")
		И ЗначениеЗаполнено(Параметры.СкладДляПодстановкиВЗаказы) Тогда
		Склад = Параметры.СкладДляПодстановкиВЗаказы;
	Иначе
		Склад = ПолучитьСкладИзСвойствЗаказа(СвойстваЗаказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаРезерв = Склад;
		Ответственный = ПолучитьМОСотрудника(Склад.МОЛ);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ДокументОбъект.Ответственный = Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Подразделение = ПолучитьПодразделениеИзСвойствЗаказа(СвойстваЗаказа);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ДокументОбъект.СтруктурнаяЕдиницаПродажи = Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	Иначе
		ДокументОбъект.Касса = Параметры.ОрганизацияВладелецКаталога.КассаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ИдентифицироватьКонтрагента(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Не удалось идентифицировать контрагента для заказ-наряда номер: '") + ДокументXDTO.Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		ДоговорКонтрагента = ПолучитьДоговорИзСвойствЗаказа(СвойстваЗаказа, ДокументОбъект);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, Параметры.ТаблицаСоответствияСтатусовЗаказов, Параметры);
	
	// заполнение реквизитов заказа из одноименных свойств
	ЗаполнитьРеквизитыИзСвойств(ДокументОбъект, СвойстваЗаказа, ОписаниеОшибки);
	
	Если НЕ ИдентифицироватьНоменклатуруИУслугу(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьРесурсыПредприятия(ДокументXDTO, ДокументОбъект);
	
	КомментарийXDTO = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий") И СвойствоXDTOЗаполнено(ДокументXDTO.Комментарий) Тогда
		ДокументОбъект.Комментарий = СокрЛП(ДокументXDTO.Комментарий);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьРесурсыПредприятия(ДокументXDTO, ДокументОбъект)
	
	График = ДокументXDTO.ГрафикРесурса;
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(График, "ДатаВремяНачала") Тогда
		Возврат;
	КонецЕсли;
	РазделительДатаВремя = "T";
	ДатаВремя = СтрРазделить(График.ДатаВремяНачала, РазделительДатаВремя, Ложь);
	
	ДокументОбъект.Старт = ПолучитьДатуВремяИзСтроки(ДатаВремя[0], ДатаВремя[1]);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Старт) Тогда
		ДокументОбъект.Старт = ДокументОбъект.Дата;
		Возврат;
		
	КонецЕсли; 
	ДокументОбъект.Финиш = ДокументОбъект.Старт + 60 * График.Длительность;
	
	ДокументОбъект.РесурсыПредприятия.Очистить();
	стрЗапись = ДокументОбъект.РесурсыПредприятия.Добавить();
	стрЗапись.Длительность = График.Длительность;
	стрЗапись.Старт = ДокументОбъект.Старт;
	стрЗапись.Финиш = ДокументОбъект.Финиш;
	стрЗапись.Мощность = 1;
	
	Если СтрДлина(График.Ид) = СтрДлина(Новый УникальныйИдентификатор) Тогда
		стрЗапись.РесурсПредприятия = Справочники.КлючевыеРесурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(График.Ид));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(стрЗапись.РесурсПредприятия) Тогда
		стрЗапись.РесурсПредприятия = Справочники.КлючевыеРесурсы.НайтиПоНаименованию(График.Наименование, Истина);
	КонецЕсли; 
	
	Если СвойствоXDTOЗаполнено(График.Комментарий) Тогда
		ДокументОбъект.Комментарий = График.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИзСвойств(ДокументОбъект, СвойстваЗаказа, ОписаниеОшибки)
	
	РазрешенныеСимволы = РазрешенныеСимволыИмениРеквизита();
	Для каждого элСоответствие Из СвойстваЗаказа Цикл
		ИмяРеквизита = СтрЗаменить(элСоответствие.Ключ," ","");
		Если ПроверитьИмяСвойстваКакРеквизит(ИмяРеквизита, РазрешенныеСимволы) Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, ИмяРеквизита) Тогда
				
				Если ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Строка") Тогда
					
					ДокументОбъект[ИмяРеквизита] = элСоответствие.Значение;
				ИначеЕсли ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Число") Тогда
					
					Попытка
						ДокументОбъект[ИмяРеквизита] = Число(элСоответствие.Значение);
					Исключение
						ДобавитьОписаниеОшибки(ОписаниеОшибки,
						НСтр("ru = 'Не удалось преобразовать значение свойства в число: '") + ИмяРеквизита+":"+элСоответствие.Значение);
					КонецПопытки; 
				ИначеЕсли ТипЗнч(ДокументОбъект[ИмяРеквизита]) = Тип("Дата") Тогда
					
					ДатаСтрока = Лев(элСоответствие.Значение, 10);
					ВремяСтрока = ?(СтрНайти(элСоответствие.Значение, "T") > 0, Сред(элСоответствие.Значение, 12), "");
					Попытка
						ДокументОбъект[ИмяРеквизита] = ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока);
					Исключение
						ДобавитьОписаниеОшибки(ОписаниеОшибки,
						НСтр("ru = 'Не удалось преобразовать значение свойства в дату: '") + ИмяРеквизита+":"+элСоответствие.Значение);
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПроверитьИмяСвойстваКакРеквизит(ИмяРеквизита, РазрешенныеСимволыИмениРеквизита)
	
	Если СтрНайти("0123456789", Лев(ИмяРеквизита,1))>0 Тогда
		// первый символ не может быть числом
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "Номер"
		ИЛИ ИмяРеквизита = "Дата" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	н=1;
	Пока н <= СтрДлина(ИмяРеквизита) Цикл
		ПроверяемыйСимвол = Сред(ИмяРеквизита, н, 1);
		Если РазрешенныеСимволыИмениРеквизита.Получить(НРег(ПроверяемыйСимвол)) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			н=н+1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНомерДокументаССайта(Знач НомерНаСайте, Организация)
	
	СтрокаДопустимыхСиволов = "1234567890";
	МассивУдаляемыхСимволов = Новый Массив;
	
	НомерНаСайте = СокрЛП(НомерНаСайте);
	Если СтрДлина(НомерНаСайте) > 0 Тогда
		
		Для Сч = 1 По СтрДлина(НомерНаСайте) Цикл
			
			Символ = НРег(Сред(НомерНаСайте, Сч, 1));
			Если Не СтрНайти(СтрокаДопустимыхСиволов, Символ) Тогда
				МассивУдаляемыхСимволов.Добавить(Символ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Символ Из МассивУдаляемыхСимволов Цикл
		НомерНаСайте = СтрЗаменить(НомерНаСайте, Символ, "");
	КонецЦикла;
	
	ПрефиксСайта = ПолучитьПрефиксДляЗаказаССайта();
	СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксСайта, 2, "0", "Слева");
	
	ПрефиксОрганизации = "";
	
	ФункциональнаяОпцияИспользуется = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации");
	Если ФункциональнаяОпцияИспользуется = Истина Тогда
		
		ПрефиксОрганизации = Неопределено;
		ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(Организация, ПрефиксОрганизации);
		
		// если задана пустая Ссылка на организацию
		Если ПрефиксОрганизации = Неопределено Тогда
			ПрефиксОрганизации = "";
		КонецЕсли;
		
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	КонецЕсли;
	
	ПрефиксЗаказа = ПрефиксОрганизации + ПрефиксСайта + "-";
	НомерЗаказа = ПрефиксЗаказа + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаСайте, 6, "0", "Слева");
	
	Возврат НомерЗаказа;
	
КонецФункции

Функция ПолучитьВидЦенИзСвойствЗаказа(СвойстваЗаказа)
	
	ВидЦенСвойство = СвойстваЗаказа.Получить("Вид цен");
	ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
	
	Если ВидЦенСвойство <> Неопределено
		И ТипЗнч(ВидЦенСвойство) = Тип("Строка")
		И ВидЦенСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыЦен.Ссылка КАК ВидЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = &Наименование
		|	И НЕ ВидыЦен.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", ВидЦенСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидЦен = Выборка.ВидЦен;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЦен;
	
КонецФункции

Функция ПолучитьСкладИзСвойствЗаказа(СвойстваЗаказа)
	
	СкладСвойство = СвойстваЗаказа.Получить("Склад");
	Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	Если СкладСвойство <> Неопределено
		И ТипЗнч(СкладСвойство) = Тип("Строка")
		И СкладСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование = &Наименование
		|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)";
		
		Запрос.УстановитьПараметр("Наименование", СкладСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Склад = Выборка.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьМОСотрудника(ФизЛицо)
	
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Сотрудник;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Физлицо = &Физлицо
	|	И НЕ Сотрудники.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Сотрудник;
	КонецЕсли;
	
	Возврат Сотрудник;
	
КонецФункции

Функция ПолучитьОрганизациюИзСвойствЗаказа(СвойстваЗаказа)
	
	ОрганизацияСвойство = СвойстваЗаказа.Получить("Организация");
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Если ОрганизацияСвойство <> Неопределено
		И ТипЗнч(ОрганизацияСвойство) = Тип("Строка")
		И ОрганизацияСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.Наименование = &Наименование
		|			ИЛИ Организации.ИНН = &Наименование)
		|	И НЕ Организации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", ОрганизацияСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция ПолучитьПодразделениеИзСвойствЗаказа(СвойстваЗаказа)
	
	ПодразделениеСвойство = СвойстваЗаказа.Получить("Подразделение");
	Подразделение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
	Если ПодразделениеСвойство <> Неопределено
		И ТипЗнч(ПодразделениеСвойство) = Тип("Строка")
		И ПодразделениеСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтруктурныеЕдиницы.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.Наименование = &Наименование
		|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)";
		
		Запрос.УстановитьПараметр("Наименование", ПодразделениеСвойство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьДоговорИзСвойствЗаказа(СвойстваЗаказа, ДокументОбъект)
	
	ДоговорСвойство = СвойстваЗаказа.Получить("Договор контрагента");
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ДоговорСвойство <> Неопределено
		И ТипЗнч(ДоговорСвойство) = Тип("Строка")
		И ДоговорСвойство <> "" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Наименование = &Наименование
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)";
		
		Запрос.УстановитьПараметр("Наименование", ДоговорСвойство);
		Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Контрагент);
		Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов.Организация = &Организация", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Договор = Выборка.Договор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Договор) Тогда
			
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			НовыйДоговор.Наименование = ДоговорСвойство;
			НовыйДоговор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
			НовыйДоговор.Организация = ДокументОбъект.Организация;
			НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
			НовыйДоговор.ВидЦен = ДокументОбъект.ВидЦен;
			НовыйДоговор.Владелец = ДокументОбъект.Контрагент;
			НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
			НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
			НовыйДоговор.Записать();
			
			Договор = НовыйДоговор.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

Функция НайтиКонтрагентаПоПолямПоиска(НастройкиПоиска, ИнформацияПоКонтрагенту, ВариантПоиска, СоответствиеЛогов = Неопределено) Экспорт
	
	ПокупательСсылка = Неопределено;
	СписокНастроекВПорядкеПриоритета = Новый СписокЗначений;
	Для каждого полеПоиска Из НастройкиПоиска Цикл
		
		СписокНастроекВПорядкеПриоритета.Добавить(полеПоиска.Значение.Получить("Порядок"), полеПоиска.Значение.Получить("Значение"));
		
	КонецЦикла;
	
	Для каждого стр Из ИнформацияПоКонтрагенту Цикл
		стр.Вид = НРег(стр.Вид);
	КонецЦикла;
	
	СписокНастроекВПорядкеПриоритета.СортироватьПоЗначению();
	
	Если ВариантПоиска = 1 Тогда
		
		Если СписокНастроекВПорядкеПриоритета.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПокупательСсылка = ИскатьСовпадениюВсехПолей(СписокНастроекВПорядкеПриоритета, НастройкиПоиска, ИнформацияПоКонтрагенту, СоответствиеЛогов);
		
	Иначе
		
		ПокупательСсылка = ИскатьДоПервогоСовпадения(СписокНастроекВПорядкеПриоритета, НастройкиПоиска, ИнформацияПоКонтрагенту, СоответствиеЛогов);
		
	КонецЕсли; 
	
	Возврат ПокупательСсылка;
	
КонецФункции

Функция ИскатьСовпадениюВсехПолей(СписокНастроекВПорядкеПриоритета, НастройкиПоиска, ИнформацияПоКонтрагенту, СоответствиеЛогов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Телефон
	|		ПО (&ПроверятьТелефон)
	|			И Контрагенты.Ссылка = Телефон.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Email
	|		ПО (&ПроверятьEmail
	|				ИЛИ Контрагенты.Ссылка = Email.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Адрес
	|		ПО (&ПроверятьАдрес
	|				ИЛИ Контрагенты.Ссылка = Адрес.Ссылка)
	|ГДЕ
	|	ИСТИНА
	|	И (НЕ &ПроверятьНаименование
	|			ИЛИ Контрагенты.Наименование = &Наименование)
	|	И (НЕ &ПроверятьПолноеНаименование
	|			ИЛИ ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 1000) = &НаименованиеПолное)
	|	И (НЕ &ПроверятьEmail
	|			ИЛИ Email.Представление В (&ПредставлениеEmail)
	|				И Email.Тип = &ТипEmail
	|				И Email.Вид = &ВидEmail)
	|	И (НЕ &ПроверятьАдрес
	|			ИЛИ Адрес.Представление В (&ПредставлениеАдрес)
	|				И Адрес.Тип = &ТипАдрес
	|				И Адрес.Вид = &ВидАдрес)
	|	И (НЕ &ПроверятьТелефон
	|			ИЛИ Телефон.Представление В (&ПредставлениеТелефон)
	|				И Телефон.Тип = &ТипТелефон
	|				И Телефон.Вид = &ВидТелефон)
	|	И (НЕ &ПроверятьИНН
	|			ИЛИ Контрагенты.ИНН = &ИНН)
	|	И (НЕ &ПроверятьКПП
	|			ИЛИ Контрагенты.КПП = &КПП)";
	
	Запрос.УстановитьПараметр("ПроверятьНаименование", Ложь);
	Запрос.УстановитьПараметр("ПроверятьПолноеНаименование", Ложь);
	Запрос.УстановитьПараметр("ПроверятьТелефон", Ложь);
	Запрос.УстановитьПараметр("ПроверятьEmail", Ложь);
	Запрос.УстановитьПараметр("ПроверятьАдрес", Ложь);
	Запрос.УстановитьПараметр("ПроверятьИНН", Ложь);
	Запрос.УстановитьПараметр("ПроверятьКПП", Ложь);
	Запрос.УстановитьПараметр("Наименование", "");
	Запрос.УстановитьПараметр("НаименованиеПолное", "");
	Запрос.УстановитьПараметр("ПредставлениеEmail", Новый Массив);
	Запрос.УстановитьПараметр("ПредставлениеАдрес", Новый Массив);
	Запрос.УстановитьПараметр("ПредставлениеТелефон", Новый Массив);
	Запрос.УстановитьПараметр("ИНН", "");
	Запрос.УстановитьПараметр("КПП", "");
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипEmail", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидТелефон", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ВидEmail", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	Запрос.УстановитьПараметр("ВидАдрес", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	
	ПроверитьПоИД = "";
	
	Для каждого элСписка Из СписокНастроекВПорядкеПриоритета Цикл
		
		полеПоиска = НастройкиПоиска[элСписка.Представление];
		СохраненноеЗначениеПометкиКонтрагенты = ?(полеПоиска.Получить("КонтрагентыПометка")=Истина, Истина, Ложь);
		СохраненноеЗначениеПометкиКонтакты = ?(полеПоиска.Получить("КонтактныеЛицаПометка")=Истина, Истина, Ложь);
		
		Если НЕ (СохраненноеЗначениеПометкиКонтрагенты ИЛИ СохраненноеЗначениеПометкиКонтакты) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляПоиска = НРег(полеПоиска.Получить("Значение"));
		
		Если ИмяПоляПоиска = НРег("Идентификатор") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Идентификатор"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				ПроверитьПоИД = ЗначениеПоляКонтрагента.Представление;
				
			КонецЕсли;
		ИначеЕсли ИмяПоляПоиска = НРег("Телефон") 
			ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				Запрос.Параметры["ПредставлениеТелефон"].Добавить(строкаКИ.Представление);
				Запрос.УстановитьПараметр("ПроверятьТелефон", Истина);
				
			КонецЦикла;
		ИначеЕсли ИмяПоляПоиска = НРег("email") 
			ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				Запрос.Параметры["ПредставлениеEmail"].Добавить(строкаКИ.Представление);
				Запрос.УстановитьПараметр("ПроверятьEmail", Истина);
				
			КонецЦикла;
		ИначеЕсли ИмяПоляПоиска = НРег("Адрес") ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.Адрес)
			И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				Запрос.Параметры["ПредставлениеАдрес"].Добавить(строкаКИ.Представление);
				Запрос.УстановитьПараметр("ПроверятьАдрес", Истина);
				
			КонецЦикла;
			
		ИначеЕсли ИмяПоляПоиска = НРег("ИНН") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("ИНН"), "Вид");
			Если ЗначениеЗаполнено(ЗначениеПоляКонтрагента) И ЗначениеЗаполнено(ЗначениеПоляКонтрагента.Представление) Тогда
				
				Запрос.УстановитьПараметр("ИНН", ЗначениеПоляКонтрагента.Представление);
				Запрос.УстановитьПараметр("ПроверятьИНН", Истина);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("КПП") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("КПП"), "Вид");
			Если ЗначениеЗаполнено(ЗначениеПоляКонтрагента) И ЗначениеЗаполнено(ЗначениеПоляКонтрагента.Представление) Тогда
				
				Запрос.УстановитьПараметр("КПП", ЗначениеПоляКонтрагента.Представление);
				Запрос.УстановитьПараметр("ПроверятьКПП", Истина);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("Наименование") Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Наименование"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				Запрос.УстановитьПараметр("Наименование", ЗначениеПоляКонтрагента.Представление);
				Запрос.УстановитьПараметр("ПроверятьНаименование", Истина);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("НаименованиеПолное") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Полное наименование"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				Запрос.УстановитьПараметр("НаименованиеПолное", ЗначениеПоляКонтрагента.Представление);
				Запрос.УстановитьПараметр("ПроверятьПолноеНаименование", Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Если Запрос.Параметры["ПроверятьНаименование"]
		ИЛИ Запрос.Параметры["ПроверятьАдрес"]
		ИЛИ Запрос.Параметры["ПроверятьEmail"]
		ИЛИ Запрос.Параметры["ПроверятьТелефон"]
		Тогда
		
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка КАК Ссылка,
		|	2 КАК Порядок
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК Телефон
		|		ПО (&ПроверятьТелефон)
		|			И КонтактныеЛица.Ссылка = Телефон.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК Email
		|		ПО (&ПроверятьEmail
		|				ИЛИ КонтактныеЛица.Ссылка = Email.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК Адрес
		|		ПО (&ПроверятьАдрес
		|				ИЛИ КонтактныеЛица.Ссылка = Адрес.Ссылка)
		|ГДЕ
		|	ИСТИНА
		|	И (НЕ &ПроверятьНаименование
		|			ИЛИ КонтактныеЛица.Наименование = &Наименование)
		|	И (НЕ &ПроверятьEmail
		|			ИЛИ Email.Представление В (&ПредставлениеEmail)
		|				И Email.Тип = &ТипEmail
		|				И Email.Вид = &ВидEmailКЛ)
		|	И (НЕ &ПроверятьАдрес
		|			ИЛИ Адрес.Представление В (&ПредставлениеАдрес)
		|				И Адрес.Тип = &ТипАдрес
		|				И Адрес.Вид = &ВидАдресКЛ)
		|	И (НЕ &ПроверятьТелефон
		|			ИЛИ Телефон.Представление В (&ПредставлениеТелефон)
		|				И Телефон.Тип = &ТипТелефон
		|				И Телефон.Вид = &ВидТелефонКЛ)";
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ВидТелефонКЛ", Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидEmailКЛ", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидАдресКЛ", Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица);
	
	
	Запрос.Текст = Запрос.Текст + "	
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ПроверитьПоИД<>"" Тогда
		ПокупательПоИД = НайтиКонтрагентаПоИД(ПроверитьПоИД);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПроверитьПоИД<>"" И ПокупательПоИД = Выборка.Ссылка Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Выборка.Ссылка;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИскатьДоПервогоСовпадения(СписокНастроекВПорядкеПриоритета, НастройкиПоиска, ИнформацияПоКонтрагенту, СоответствиеЛогов)
	
	Для каждого элСписка Из СписокНастроекВПорядкеПриоритета Цикл
		
		полеПоиска = НастройкиПоиска[элСписка.Представление];
		СохраненноеЗначениеПометкиКонтрагенты = ?(полеПоиска.Получить("КонтрагентыПометка")=Истина, Истина, Ложь);
		СохраненноеЗначениеПометкиКонтакты = ?(полеПоиска.Получить("КонтактныеЛицаПометка")=Истина, Истина, Ложь);
		
		Если НЕ (СохраненноеЗначениеПометкиКонтрагенты ИЛИ СохраненноеЗначениеПометкиКонтакты) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляПоиска = НРег(полеПоиска.Получить("Значение"));
		
		Если ИмяПоляПоиска = НРег("Идентификатор") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Идентификатор"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				ПокупательСсылка = НайтиКонтрагентаПоИД(ЗначениеПоляКонтрагента.Представление);
				
			КонецЕсли;
		ИначеЕсли ИмяПоляПоиска = НРег("Телефон") 
			ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоНомеруТелефона(строкаКИ.Представление, СохраненноеЗначениеПометкиКонтрагенты, СохраненноеЗначениеПометкиКонтакты, Ложь);
				
				Если ПокупательСсылка <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоляПоиска = НРег("email") 
			ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоАдресуЭП(строкаКИ.Представление, СохраненноеЗначениеПометкиКонтрагенты, СохраненноеЗначениеПометкиКонтакты);
				
				Если ПокупательСсылка <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИмяПоляПоиска = НРег("Адрес") ИЛИ ИмяПоляПоиска = НРег(Перечисления.ТипыКонтактнойИнформации.Адрес)
			И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			СтруктураОтбора = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			НайденныеСтроки = ИнформацияПоКонтрагенту.НайтиСтроки(СтруктураОтбора);
			Для каждого строкаКИ Из НайденныеСтроки Цикл
				
				ПокупательСсылка = НайтиКонтрагентаПоАдресу(строкаКИ.Представление);
				
				Если ПокупательСсылка <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ИмяПоляПоиска = НРег("ИНН") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("ИНН"), "Вид");
			Если ЗначениеЗаполнено(ЗначениеПоляКонтрагента) И ЗначениеЗаполнено(ЗначениеПоляКонтрагента.Представление) Тогда
				
				ПокупательСсылка = НайтиКонтрагентаПоИННКПП(ЗначениеПоляКонтрагента.Представление,);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("КПП") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("КПП"), "Вид");
			Если ЗначениеЗаполнено(ЗначениеПоляКонтрагента) И ЗначениеЗаполнено(ЗначениеПоляКонтрагента.Представление) Тогда
				
				ПокупательСсылка = НайтиКонтрагентаПоИННКПП(,ЗначениеПоляКонтрагента.Представление);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("Наименование") Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Наименование"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				ПокупательСсылка = НайтиПокупателяПоНаименованию(ЗначениеПоляКонтрагента.Представление, СохраненноеЗначениеПометкиКонтрагенты, СохраненноеЗначениеПометкиКонтакты);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоляПоиска = НРег("НаименованиеПолное") И СохраненноеЗначениеПометкиКонтрагенты Тогда
			
			ЗначениеПоляКонтрагента = ИнформацияПоКонтрагенту.Найти(НРег("Полное наименование"), "Вид");
			Если ЗначениеПоляКонтрагента <> Неопределено Тогда
				
				ПокупательСсылка = НайтиКонтрагентаПоПолномуНаименованию(ЗначениеПоляКонтрагента.Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СоответствиеЛогов <> Неопределено Тогда
			СоответствиеПоиска = Новый Соответствие;
			СоответствиеПоиска.Вставить("Значение", ИмяПоляПоиска);
			СоответствиеПоиска.Вставить("ЗначениеТип", полеПоиска.Получить("ЗначениеТип"));
			СоответствиеПоиска.Вставить("РезультатПоиска", ?(ПокупательСсылка=Неопределено, Ложь, Истина));
			СоответствиеПоиска.Вставить("Контрагент", ПокупательСсылка);
			
			СоответствиеЛогов.Вставить(элСписка.Представление, СоответствиеПоиска);
		КонецЕсли;
		
		Если ПокупательСсылка <> Неопределено Тогда
			// нашли подходящего, дальше искать не нужно
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПокупательСсылка;
	
КонецФункции	

Функция НайтиКонтрагентаПоИД(ИдКонтрагента)
	
	Если ИдКонтрагента<>"" И СтрДлина(ИдКонтрагента)=СтрДлина(Новый УникальныйИдентификатор) Тогда
		Попытка
			КонтрагентПоИд = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагента));
			Если Не КонтрагентПоИд = Справочники.Контрагенты.ПустаяСсылка() И КонтрагентПоИд.ПолучитьОбъект() <> Неопределено Тогда
				Возврат КонтрагентПоИд;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // НайтиКонтрагентаПоИД()

Функция НайтиКонтрагентаПоПолномуНаименованию(Наименование)
	
	Если СокрЛП(Наименование) = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250) = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Контрагент;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиПокупателяПоНаименованию(Наименование, ИскатьВКонтрагентах, ИскатьВКонтактах)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&ИскатьВКонтрагентах И НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	&ИскатьВКонтактах
	|	И КонтактныеЛица.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ИскатьВКонтрагентах", ИскатьВКонтрагентах);
	Запрос.УстановитьПараметр("ИскатьВКонтактах", ИскатьВКонтактах);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Контрагент;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиКонтрагентаПоИННКПП(ИНН, КПП)
	
	Если НЕ ЗначениеЗаполнено(ИНН) И НЕ ЗначениеЗаполнено(КПП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		Запрос.Текст = Запрос.Текст + " И Контрагенты.ИНН = &ИНН";
		Запрос.УстановитьПараметр("ИНН", ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
		Запрос.Текст = Запрос.Текст + " И Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Контрагенты = РезультатЗапроса.Выгрузить();
		Возврат Контрагенты[0].Контрагент;
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаПоАдресу(Адрес)
	
	Если СокрЛП(Адрес) = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Представление = &Адрес
	|	И КонтрагентыКонтактнаяИнформация.Тип = &ТипАдрес";
	
	Запрос.УстановитьПараметр("Адрес", НРег(СокрЛП(Адрес)));
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создает контрагента и элементы подчиненных справочников.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого создается контрагент.
//	КонтрагентXDTO - ОбъектXDTO - источник информации для заполнения данных контрагента
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	СправочникСсылка.Контрагенты - Ссылка на элемент справочника.
//
Функция СоздатьКонтрагента(ДокументОбъект, КонтрагентXDTO, Параметры, ОписаниеОшибки)
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, КонтрагентXDTO);
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		НовыйКонтрагент.Наименование = СокрЛП(КонтрагентXDTO.Наименование);
	Иначе
		НовыйКонтрагент.Наименование = "<Наименование не указано>";
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		НовыйКонтрагент.КодПоОКПО = КонтрагентXDTO.ОКПО;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование)
		Тогда
		НовыйКонтрагент.НаименованиеПолное = СокрЛП(КонтрагентXDTO.ПолноеНаименование);
	КонецЕсли;
	
	НовыйКонтрагент.Родитель = Параметры.ГруппаДляНовыхКонтрагентов;
	НовыйКонтрагент.ГруппаДоступа = Параметры.ГруппаДоступаДляНовыхКонтрагентов;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование") Тогда
		
		Если СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
			НовыйКонтрагент.НаименованиеПолное = СокрЛП(КонтрагентXDTO.ОфициальноеНаименование);
		КонецЕсли;
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН") И ТипЗнч(КонтрагентXDTO.ИНН) = Тип("Строка")
			И СтрДлина(СокрЛП(КонтрагентXDTO.ИНН))=12 Тогда
			
			НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		Иначе
			НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		КонецЕсли;
	Иначе
		НовыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	КонецЕсли;
	
	СтрокаФИО = ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO);
	Если НЕ ПустаяСтрока(СтрокаФИО) 
		И СтрокаФИО <> НовыйКонтрагент.НаименованиеПолное Тогда
		
		НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное + " [" + СтрокаФИО + "]";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйКонтрагент.КПП) Тогда
		НовыйКонтрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	НовыйКонтрагент.Покупатель = Истина;
	
	НовыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
	
	// Значения по умолчанию.
	
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	
	НовыйКонтрагент.Ответственный = ДокументОбъект.Ответственный;
	
	ОбновитьКонтактнуюИнформациюКонтрагента(НовыйКонтрагент, КонтрагентXDTO, Ложь);
	
	НовыйКонтрагент.Записать();
	
	Возврат НовыйКонтрагент;
	
КонецФункции

Функция СоздатьЗаполнитьКонтактноеЛицоКонтрагента(КонтрагентОбъект, КонтрагентXDTO, НаименованиеКонтрагента = "", КонтактноеЛицоСсылка = Неопределено)
	
	Если ЗначениеЗаполнено(КонтактноеЛицоСсылка) Тогда
		КонтактноеЛицо = КонтактноеЛицоСсылка.ПолучитьОбъект();
	Иначе
		
		Если НаименованиеКонтрагента<>"" Тогда
			НаименованиеКонтактногоЛица = Строка(НаименованиеКонтрагента);
		ИначеЕсли СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
			НаименованиеКонтактногоЛица = СокрЛП(КонтрагентXDTO.Наименование);
		Иначе
			НаименованиеКонтактногоЛица = "<Наименование не указано>";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт КАК Контакт
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(
		|			,
		|			Контрагент = &Контрагент
		|				И Контакт.Наименование = &Наименование) КАК СвязиКонтрагентКонтактСрезПоследних
		|ГДЕ
		|	НЕ СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна";
		
		Запрос.УстановитьПараметр("Контрагент", КонтрагентОбъект.Ссылка);
		Запрос.УстановитьПараметр("Наименование", НаименованиеКонтактногоЛица);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество()=0 Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
			
			Если НаименованиеКонтрагента<>"" Тогда
				КонтактноеЛицо.Наименование = НаименованиеКонтрагента;
			ИначеЕсли СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
				КонтактноеЛицо.Наименование = СокрЛП(КонтрагентXDTO.Наименование);
			Иначе
				КонтактноеЛицо.Наименование = "<Наименование не указано>";
			КонецЕсли;
			КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан автоматически при импорте заказа с сайта '") + ТекущаяДата();
			КонтактноеЛицо.Записать();
			
			КонтактноеЛицоСсылка = КонтактноеЛицо.Ссылка;
			РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(КонтрагентОбъект.Ссылка, КонтактноеЛицоСсылка);
			
		Иначе
			Выборка.Следующий();
			КонтактноеЛицо = Выборка.Контакт.ПолучитьОбъект();
			КонтактноеЛицоСсылка = Выборка.Контакт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.КонтактноеЛицо) Тогда
		КонтрагентОбъект.КонтактноеЛицо = КонтактноеЛицоСсылка;
	КонецЕсли; 
	
	ОбновитьКонтактнуюИнформациюКонтактногоЛица(КонтактноеЛицо, КонтрагентXDTO, Истина);
	
КонецФункции

Процедура ОбновитьКонтактнуюИнформациюКонтактногоЛица(КонтактноеЛицо, КонтрагентXDTO, Замещать = Ложь)
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		КонтактноеЛицоОбъект = КонтактноеЛицо.ПолучитьОбъект();
	Иначе
		КонтактноеЛицоОбъект = КонтактноеЛицо;
	КонецЕсли;

	// Контакты.
	Если НЕ ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		Возврат;
	КонецЕсли;
	
	// Контакт.
	Если НЕ ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
	МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
	
	Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл 
		
		Если НЕ СвойствоXDTOЗаполнено(КонтактXDTO.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
		СтруктураКИ = ПолучитьТипВидКонтактнойИнформацииКонтактногоЛицаПоТипуXDTO(ТипКИXDTO);
		КонтактНайден = Ложь;
		НайденныеСтроки = КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураКИ);
		Для каждого СтрокаНайдена Из НайденныеСтроки Цикл
			Если НРег(СтрокаНайдена.Представление) = НРег(КонтактXDTO.Значение) Тогда
				КонтактНайден = Истина;
				Прервать;
			КонецЕсли;
			Если СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты 
				И НРег(СтрокаНайдена.АдресЭП) = НРег(КонтактXDTO.Значение) Тогда
				КонтактНайден = Истина;
				Прервать;
			КонецЕсли;
			Если СтруктураКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				
				ТелефонКонтрагента = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаНайдена.НомерТелефона);
				ТелефонВЗаказе = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(КонтактXDTO.Значение);
				Если ТелефонВЗаказе<>"" И ТелефонКонтрагента<>"" И ТелефонВЗаказе = ТелефонКонтрагента Тогда
					КонтактНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ КонтактНайден Тогда
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтактноеЛицоОбъект, КонтактXDTO.Значение, СтруктураКИ.Вид, , Ложь);	
		КонецЕсли;
	КонецЦикла;
	
	Если КонтактноеЛицоОбъект.Модифицированность() Тогда
		КонтактноеЛицоОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюКонтрагента(КонтрагентОбъект, КонтрагентXDTO, Замещать = Ложь)
	
	// ОфициальноеНаименование
	Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.НаименованиеПолное)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КонтрагентXDTO, "ОфициальноеНаименование") 
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование)
		Тогда
		
		КонтрагентОбъект.НаименованиеПолное = СокрЛП(КонтрагентXDTO.ОфициальноеНаименование);
		
	КонецЕсли; 
	
	// Адреса.
	АдресXDTO = Неопределено;
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") Тогда
		АдресXDTO = КонтрагентXDTO.Адрес;
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации") Тогда
		АдресXDTO = КонтрагентXDTO.АдресРегистрации;
	КонецЕсли;
	
	Если НЕ АдресXDTO = Неопределено 
		И ПредставлениеКонтактнойИнформацииЗаполнено(АдресXDTO) Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		Если НЕ ПроверитьДублированиеКИ(КонтрагентОбъект, АдресXDTO.Представление, ВидКИ, ТипКИ) Тогда
			
			ЗаписатьКИ(КонтрагентОбъект, АдресXDTO.Представление, ВидКИ, ТипКИ, Замещать);
			
		КонецЕсли;
	КонецЕсли;
	
	// юридический адрес
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес") Тогда
		
		АдресXDTO = КонтрагентXDTO.ЮридическийАдрес;
		Если НЕ АдресXDTO = Неопределено 
			И ПредставлениеКонтактнойИнформацииЗаполнено(АдресXDTO) Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
			Если НЕ ПроверитьДублированиеКИ(КонтрагентОбъект, АдресXDTO.Представление, ВидКИ, ТипКИ) Тогда
				// юридический адрес замещаем, если не включено РазрешитьВводНесколькихЗначений
				ЗаписатьКИ(КонтрагентОбъект, АдресXDTO.Представление, ВидКИ, ТипКИ, НЕ ВидКИ.РазрешитьВводНесколькихЗначений);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Телефон.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") 
		И ПредставлениеКонтактнойИнформацииЗаполнено(КонтрагентXDTO.Телефон) Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ТелефонXDTO = КонтрагентXDTO.Телефон;
		
		Если НЕ ПроверитьДублированиеКИ(КонтрагентОбъект, ТелефонXDTO.Представление, ВидКИ, ТипКИ) Тогда
			ЗаписатьКИ(КонтрагентОбъект, ТелефонXDTO.Представление, ВидКИ, ТипКИ, Замещать);
		КонецЕсли;
		
	КонецЕсли;
	
	// email.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email") Тогда
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		EmailXDTO = КонтрагентXDTO.Email;
		EmailНайден = Ложь;
		
		Если СтрНайти(СокрЛП(НРег(КонтрагентОбъект.АдресЭПДляПоиска)), СокрЛП(НРег(EmailXDTO.Представление))) > 0 Тогда
			EmailНайден = Истина;
		КонецЕсли;		
		Если НЕ EmailНайден Тогда
			EmailНайден = ПроверитьДублированиеКИ(КонтрагентОбъект, EmailXDTO.Представление, ВидКИ, ТипКИ);
		КонецЕсли;
		Если НЕ EmailНайден Тогда
			ЗаписатьКИ(КонтрагентОбъект, EmailXDTO.Представление, ВидКИ, ТипКИ, Замещать);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(ДокументОбъект, КонтрагентОбъект, КонтрагентXDTO, КонтактноеЛицо, ОписаниеОшибки)
	
	// Контактные лица.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") 
		И КонтрагентXDTO.Представители <> Неопределено
		И ТипЗнч(КонтрагентXDTO.Представители) <> Тип("ОбъектXDTO") 
		Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл 
			
			НаименованиеКЛ = "";
			Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент") 
				И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование")
				И СвойствоXDTOЗаполнено(ПредставительXDTO.Контрагент.Наименование)
				Тогда
				
				НаименованиеКЛ = ПредставительXDTO.Контрагент.Наименование;
				
			КонецЕсли;
			СоздатьЗаполнитьКонтактноеЛицоКонтрагента(КонтрагентОбъект, КонтрагентXDTO, СокрЛП(НаименованиеКЛ), КонтактноеЛицо);
		КонецЦикла;
		
	ИначеЕсли (ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт")) Тогда
		// Для Юрлиц создаем контактное лицо, если есть контактная информация в разделе Контакты
		СоздатьЗаполнитьКонтактноеЛицоКонтрагента(КонтрагентОбъект, КонтрагентXDTO, "", КонтактноеЛицо);
	КонецЕсли;
	
	// Банки и расчетные счета.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			БИК = ДанныеБанкаXDTO.БИК;
			Если НЕ СвойствоXDTOЗаполнено(БИК) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Банки.Ссылка
			|ИЗ
			|	Справочник.Банки КАК Банки
			|ГДЕ
			|	Банки.Код = &БИК");
			
			Запрос.УстановитьПараметр("БИК", БИК);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				
				БанкОбъект = Справочники.Банки.СоздатьЭлемент();
				БанкОбъект.Код = БИК;
				
				ЗаполнитьЗначенияСвойств(БанкОбъект, ДанныеБанкаXDTO);
				
				БанкОбъект.Записать();
				БанкСсылка = БанкОбъект.Ссылка;
				
			Иначе
				
				БанкСсылка = РезультатЗапроса.Выгрузить()[0][0];
				
			КонецЕсли;
			
			// Банковский счет.
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И БанковскиеСчета.Банк = &Банк");
			
			Запрос.УстановитьПараметр("Владелец", КонтрагентОбъект.Ссылка);
			Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
			Запрос.УстановитьПараметр("Банк", БанкСсылка);
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Валюта = ПолучитьВалютуПоНомеруСчета(НомерСчета);
			Если НЕ ЗначениеЗаполнено(Валюта) Тогда
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось определить валюту банковского счета: '")
				+ НомерСчета));
				
				Продолжить;
				
			КонецЕсли;
			
			СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			СчетОбъект.Банк = БанкСсылка;
			СчетОбъект.ВалютаДенежныхСредств = Валюта;
			СчетОбъект.Владелец = КонтрагентОбъект.Ссылка;
			СчетОбъект.Наименование = БанкСсылка.Наименование;
			СчетОбъект.НомерСчета = НомерСчета;
			
			СчетОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Договор.
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(КонтрагентОбъект.Ссылка, ДокументОбъект.Организация, СписокВидовДоговора);
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
		Договор.Организация = ДокументОбъект.Организация;
		Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Договор.ВидЦен = ДокументОбъект.ВидЦен;
		Договор.Владелец = КонтрагентОбъект.Ссылка;
		Договор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Если ПустаяСтрока(Договор.Наименование) Тогда
			Договор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(Договор);
		КонецЕсли;
		Договор.Записать();
		
		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(Договор);
	КонецЕсли;
	
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

// Выполняет поиск номенклатуры и заполнение табличной части Запасы заказа покупателя.
// Не найденные элементы номенклатуры создаются.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого идентифицируется номенклатура
//	ДокументXDTO - ОбъектXDTO - источник информации для заполнения данных заказа покупателя
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	Булево - Истина, если не возникло ошибок.
//
Функция ИдентифицироватьНоменклатуру(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки)
	
	Успешно = Истина;
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат Успешно;
		
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Неопределено;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
		И ДокументXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ДокументXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
				Иначе
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС("20");
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
					ДокументОбъект.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = Истина ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Если нет секции "Налоги" считаем, что документ не облагается НДС.
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		ДокументОбъект.СтавкаНДСДоставки = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
	КонецЕсли;
	
	ДокументОбъект.Запасы.Очистить();
	ДокументОбъект.ДобавленныеНаборы.Очистить();
	ПерваяДоставка = Истина;	
	
	ТоварыXDTO = ДокументXDTO.Товары.Товар;
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварыXDTO);
	
	РезервироватьТовары = Ложь;
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		
		Если Параметры.ОбменЧерезВебСервис Тогда
			РезервироватьТовары = Истина;
		Иначе
			Если Параметры.Свойство("ТаблицаСоответствияСтатусовЗаказов") Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("СостояниеЗаказаПокупателя", ДокументОбъект.СостояниеЗаказа);
				
				НайденныеСтроки = Параметры.ТаблицаСоответствияСтатусовЗаказов.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаСоответствия Из НайденныеСтроки Цикл
					Если СтрокаСоответствия.РезервироватьТовар Тогда
						РезервироватьТовары = Истина;
						Если ЗначениеЗаполнено(СтрокаСоответствия.СкладРезерв) Тогда
							ДокументОбъект.СтруктурнаяЕдиницаРезерв = СтрокаСоответствия.СкладРезерв;
						КонецЕсли;
						Если СтрокаСоответствия.ИДСтатусаЗаказаНаСайте = СвойстваЗаказа["Статуса заказа ИД"]
							ИЛИ СтрокаСоответствия.СтатусЗаказаНаСайте = СвойстваЗаказа["Статус заказа"] Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ТипНоменклатурыXDTO = "";
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
			И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
					И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
					
					ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = Неопределено;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
			И ТоварXDTO.СтавкиНалогов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
			
			СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
			МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
			
			Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
				
				Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
					
					СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(СтавкаНалога.Ставка);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
			И ТоварXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ТоварXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						
						СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(СтавкаНДСНоменклатуры), СтавкаНДСНоменклатуры, СтавкаНДСПоУмолчанию);
		Если СтавкаНДСНоменклатуры = Неопределено Тогда
			
			ЗначениеНалога = "Без НДС";
			СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеНалога);
			
		КонецЕсли;
		
		ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = "услуга";
		
		Номенклатура = НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДСНоменклатуры, ОписаниеОшибки);
		
		ХарактеристикаНоменклатуры = НайтиСоздатьХарактеристикуНоменклатуры(
		ТоварXDTO, 
		ЭтоУслуга, 
		Номенклатура, 
		Параметры, 
		ОписаниеОшибки
		);
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда 
			Продолжить;
		КонецЕсли;
		
		Количество = ПолучитьЧислоИзСтроки(ТоварXDTO.Количество);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Резерв = 0;
		Если РезервироватьТовары Тогда
			Если Параметры.ОбменЧерезВебСервис Тогда
				Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Резерв") Тогда
					Резерв = ПолучитьЧислоИзСтроки(ТоварXDTO.Резерв);
				КонецЕсли;
				
				Если Резерв > Количество Тогда
					Резерв = Количество;
				КонецЕсли;
			Иначе
				Резерв = Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ПолучитьЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ПолучитьЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
			И ТоварXDTO.Скидки <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
			
			МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
			Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
				
				Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме") 
					ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
				СуммаСкидок = СуммаСкидок + СуммаСкидки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Спецификация
		Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры);
		// Некоторые сайты некорректно возвращают признак услуги, нужно перепроверить по данным 1С
		ЭтоУслуга = НЕ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Запас);
		
		// Если заполнена таблица соответствия служб доставки - загружаем доставку на отдельную закладку. Если не заполнена -
		// в ТЧ Запасы
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид")
			И ТоварXDTO.Ид = "ORDER_DELIVERY" 
			И Параметры.ТаблицаСоответствияСлужбДоставки.Количество()>0 
			И ПерваяДоставка = Истина 
			Тогда
			
			ДокументОбъект.НоменклатураДоставки = Номенклатура;
			ДокументОбъект.СтоимостьДоставки = ЦенаЗаЕдиницу;
			
			ДокументОбъект.СтавкаНДСДоставки = СтавкаНДСНоменклатуры;
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ДокументОбъект.СтавкаНДСДоставки);
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				ДокументОбъект.СуммаНДСДоставки = ДокументОбъект.СтоимостьДоставки - (ДокументОбъект.СтоимостьДоставки) / ((СтавкаНДС + 100) / 100);
			Иначе
				ДокументОбъект.СуммаНДСДоставки = ДокументОбъект.СтоимостьДоставки * СтавкаНДС / 100;
			КонецЕсли;
			
			ПерваяДоставка = Ложь;
			
		Иначе
			
			// Добавляем новую строку в табличную часть "Запасы".
			НоваяСтрока = ДокументОбъект.Запасы.Добавить();
			НоваяСтрока.ТипНоменклатурыЗапас = НЕ ЭтоУслуга;
			НоваяСтрока.Номенклатура = Номенклатура;
			Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И ТоварXDTO.Ид = "ORDER_DELIVERY" Тогда
				ДокументОбъект.НоменклатураДоставки = Номенклатура;
			КонецЕсли;
			НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Характеристика = ХарактеристикаНоменклатуры;
			НоваяСтрока.Спецификация = Спецификация;
			НоваяСтрока.Количество = Количество;
			Если НЕ ЭтоУслуга Тогда
				НоваяСтрока.Резерв = Резерв;
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
			
			НоваяСтрока.Сумма = ?(СуммаСкидок > 0, Сумма - СуммаСкидок, Сумма);
			НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, НоваяСтрока.Сумма / НоваяСтрока.Количество);
			
			Если Номенклатура.ЭтоНабор Тогда
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Константы.УчетПоКомпании.Компания(ДокументОбъект.Организация));
				СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", ДокументОбъект.НалогообложениеНДС);
				СтруктураДанные.Вставить("Цена", НоваяСтрока.Цена);
				СтруктураДанные.Вставить("ДатаОбработки", 		ДокументОбъект.Дата);
				СтруктураДанные.Вставить("ВалютаДокумента", 	ДокументОбъект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС",	ДокументОбъект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("СтавкаНДС", 	НоваяСтрока.СтавкаНДС);
				СтруктураДанные.Вставить("ВидЦен", ДокументОбъект.ВидЦен);
				СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
				
				НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
				ЗаменитьСтрокуЗапасовДаннымиНабора(ДокументОбъект, НоваяСтрока, СтруктураДанные);
				
			Иначе
				ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Скидка на документ распределяется на строки табличной части пропорционально сумме.
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки")
		И ДокументXDTO.Скидки <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Скидки, "Скидка") Тогда
		
		МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.Скидки.Скидка);
		Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Сумма") Тогда
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Наименование")
					И ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Процент") Тогда
					
					ПроцентЧисло = ПолучитьЧислоИзСтроки(СкидкаXDTO.Процент);
					Если ПроцентЧисло <> 0 Тогда
						
						ДокументОбъект.ВидСкидкиНаценки = ОбменССайтомПовтИсп.ПолучитьВидСкидкиНаДокумент(СкидкаXDTO.Наименование, СкидкаXDTO.Процент);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме")
					И НЕ НРег(СкидкаXDTO.УчтеноВСумме) = "true" Тогда
					
					СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
					Если СуммаСкидки <> 0 Тогда
						
						РаспределитьСуммуПоКолонке(ДокументОбъект, ДокументОбъект.Запасы, -СуммаСкидки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего");
	
	Возврат Успешно;
	
КонецФункции

Функция ИдентифицироватьНоменклатуруИУслугу(ДокументОбъект, ДокументXDTO, СвойстваЗаказа, Параметры, ОписаниеОшибки)
	
	Успешно = Истина;
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат Успешно;
		
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Неопределено;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
		И ДокументXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ДокументXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
				Иначе
					СтавкаНДСПоУмолчанию = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС("20");
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
					ДокументОбъект.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = Истина ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Если нет секции "Налоги" считаем, что документ не облагается НДС.
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
	КонецЕсли;
	
	ДокументОбъект.Запасы.Очистить();
	ДокументОбъект.ДобавленныеНаборы.Очистить();
	ДокументОбъект.Работы.Очистить();
	
	ТоварыXDTO = ДокументXDTO.Товары.Товар;
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварыXDTO);
	
	РезервироватьТовары = Ложь;
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		
		Если Параметры.ОбменЧерезВебСервис Тогда
			РезервироватьТовары = Истина;
		Иначе
			Если Параметры.Свойство("ТаблицаСоответствияСтатусовЗаказов") Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("СостояниеЗаказаПокупателя", ДокументОбъект.СостояниеЗаказа);
				
				НайденныеСтроки = Параметры.ТаблицаСоответствияСтатусовЗаказов.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаСоответствия Из НайденныеСтроки Цикл
					Если СтрокаСоответствия.РезервироватьТовар Тогда
						РезервироватьТовары = Истина;
						Если ЗначениеЗаполнено(СтрокаСоответствия.СкладРезерв) Тогда
							ДокументОбъект.СтруктурнаяЕдиницаРезерв = СтрокаСоответствия.СкладРезерв;
						КонецЕсли;
						Если СтрокаСоответствия.ИДСтатусаЗаказаНаСайте = СвойстваЗаказа["Статуса заказа ИД"]
							ИЛИ СтрокаСоответствия.СтатусЗаказаНаСайте = СвойстваЗаказа["Статус заказа"] Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ТипНоменклатурыXDTO = "";
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
			И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
					И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
					
					ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = Неопределено;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
			И ТоварXDTO.СтавкиНалогов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
			
			СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
			МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
			
			Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
				
				Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
					
					СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(СтавкаНалога.Ставка);
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
			И ТоварXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ТоварXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						
						СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(НалогXDTO.Ставка);
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(СтавкаНДСНоменклатуры), СтавкаНДСНоменклатуры, СтавкаНДСПоУмолчанию);
		Если СтавкаНДСНоменклатуры = Неопределено Тогда
			
			ЗначениеНалога = "Без НДС";
			СтавкаНДСНоменклатуры = ОбменССайтомПовтИсп.ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеНалога);
			
		КонецЕсли;
		
		ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = "услуга";
		
		Номенклатура = НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДСНоменклатуры, ОписаниеОшибки);
		
		ХарактеристикаНоменклатуры = НайтиСоздатьХарактеристикуНоменклатуры(
		ТоварXDTO, 
		ЭтоУслуга, 
		Номенклатура, 
		Параметры, 
		ОписаниеОшибки
		);
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда 
			Продолжить;
		КонецЕсли;
		
		Количество = ПолучитьЧислоИзСтроки(ТоварXDTO.Количество);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Резерв = 0;
		Если РезервироватьТовары Тогда
			Если Параметры.ОбменЧерезВебСервис Тогда
				Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Резерв") Тогда
					Резерв = ПолучитьЧислоИзСтроки(ТоварXDTO.Резерв);
				КонецЕсли;
				
				Если Резерв > Количество Тогда
					Резерв = Количество;
				КонецЕсли;
			Иначе
				Резерв = Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ПолучитьЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ПолучитьЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
			И ТоварXDTO.Скидки <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
			
			МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
			Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
				
				Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме") 
					ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
				СуммаСкидок = СуммаСкидок + СуммаСкидки;
			КонецЦикла;
		КонецЕсли;
		
		//Спецификация
		Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры);
		// Некоторые сайты некорректно возвращают признак услуги, нужно перепроверить по данным 1С
		ЭтоУслуга = НЕ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Запас);
		
		// Если заполнена таблица соответствия служб доставки - загружаем доставку на отдельную закладку. Если не заполнена -
		// в ТЧ Запасы
		
		Если ЭтоУслуга Тогда
			НоваяСтрока = ДокументОбъект.Работы.Добавить();
			НоваяСтрока.ТипНоменклатурыУслуга = ЭтоУслуга;
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.Кратность = 1;
		Иначе
			// Добавляем новую строку в табличную часть "Запасы".
			НоваяСтрока = ДокументОбъект.Запасы.Добавить();
			
			НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.ТипНоменклатурыЗапас = НЕ ЭтоУслуга;
			НоваяСтрока.Спецификация = Спецификация;
			НоваяСтрока.Резерв = Резерв;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		НоваяСтрока.Характеристика = ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
		
		НоваяСтрока.Сумма = ?(СуммаСкидок > 0, Сумма - СуммаСкидок, Сумма);
		НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		
		Если Номенклатура.ЭтоНабор Тогда
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Константы.УчетПоКомпании.Компания(ДокументОбъект.Организация));
			СтруктураДанные.Вставить("Номенклатура", 	НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 	НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", ДокументОбъект.НалогообложениеНДС);
			СтруктураДанные.Вставить("Цена", НоваяСтрока.Цена);
			СтруктураДанные.Вставить("ДатаОбработки", 		ДокументОбъект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	ДокументОбъект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС",	ДокументОбъект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("СтавкаНДС", 	НоваяСтрока.СтавкаНДС);
			СтруктураДанные.Вставить("ВидЦен", ДокументОбъект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			
			НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
			ЗаменитьСтрокуЗапасовДаннымиНабора(ДокументОбъект, НоваяСтрока, СтруктураДанные);
			
		Иначе
			ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);	
		КонецЕсли;
	КонецЦикла;
	
	// Скидка на документ распределяется на строки табличной части пропорционально сумме.
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки")
		И ДокументXDTO.Скидки <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Скидки, "Скидка") Тогда
		
		МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.Скидки.Скидка);
		Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Сумма") Тогда
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Наименование")
					И ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Процент") Тогда
					
					ПроцентЧисло = ПолучитьЧислоИзСтроки(СкидкаXDTO.Процент);
					Если ПроцентЧисло <> 0 Тогда
						
						ДокументОбъект.ВидСкидкиНаценки = ОбменССайтомПовтИсп.ПолучитьВидСкидкиНаДокумент(СкидкаXDTO.Наименование, СкидкаXDTO.Процент);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме")
					И НЕ НРег(СкидкаXDTO.УчтеноВСумме) = "true" Тогда
					
					СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
					Если СуммаСкидки <> 0 Тогда
						
						РаспределитьСуммуПоКолонке(ДокументОбъект, ДокументОбъект.Запасы, -СуммаСкидки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Работы.Итог("Всего");
	
	Возврат Успешно;	
	
КонецФункции

Процедура ЗаменитьСтрокуЗапасовДаннымиНабора(Объект, СтрокаТабличнойЧасти, СтруктураДанные)
	
	ИндексСтроки = Объект.Запасы.Индекс(СтрокаТабличнойЧасти);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество()=0 Тогда
		ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
	Иначе
		ДобавленнаяСтрока = ДобавленныеСтроки[0];
	КонецЕсли; 
	ДобавленнаяСтрока.Количество = ДобавленнаяСтрока.Количество+?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
	ДобавленыСтроки = Ложь;
	
	Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСостава);
		СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
		СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество()>0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
			Если СтруктураДанные.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") Тогда
				Если НоваяСтрока.Количество+ОписаниеСостава.Количество<>0 И НоваяСтрока.Цена<>ОписаниеСостава.Цена Тогда
					НоваяСтрока.Цена = (НоваяСтрока.Количество*НоваяСтрока.Цена+ОписаниеСостава.Количество*ОписаниеСостава.Цена)/(НоваяСтрока.Количество+ОписаниеСостава.Количество);
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			НоваяСтрока = Объект.Запасы.Вставить(ИндексСтроки);
			ИндексСтроки = ИндексСтроки+1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава, , "Количество, ДоляСтоимости");
			НоваяСтрока.НоменклатураНабора = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ХарактеристикаНабора = СтрокаТабличнойЧасти.Характеристика;
			НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
			ДобавленыСтроки = Истина;
		КонецЕсли; 
		
		НоваяСтрока.Количество = НоваяСтрока.Количество+ОписаниеСостава.Количество*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
		НоваяСтрока.Резерв = НоваяСтрока.Резерв+ОписаниеСостава.Количество*СтрокаТабличнойЧасти.Резерв;
		НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимости+ОписаниеСостава.ДоляСтоимости*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
			НоваяСтрока.Сумма = 0;
		ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0 И НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		Если Объект.СуммаВключаетНДС Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.Сумма / ((СтавкаНДС + 100) / 100);
		Иначе
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
		КонецЕсли;
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
	КонецЦикла;
	
	Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Функция НайтиСоздатьХарактеристикуНоменклатуры(ТоварXDTO, ЭтоУслуга, Номенклатура, Параметры, ОписаниеОшибки) Экспорт
	
	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ЭтоУслуга ИЛИ Не Параметры.ИспользоватьХарактеристики Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	ХарактеристикаТовараXDTO = Неопределено;
	ИдХарактеристики = "";
	НаименованиеХарактеристики = "";
	АртикулХарактеристики = "";
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
			ИдХарактеристики = ПолучитьИдХарактеристики(ТоварXDTO.Ид);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
			НаименованиеХарактеристики = ПолучитьНаименованиеХарактеристики(ТоварXDTO.Наименование);
			Если Не ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда 
				НаименованиеХарактеристики = ТоварXDTO.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
			АртикулХарактеристики = ТоварXDTO.Артикул;
		КонецЕсли;
		
	Иначе
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ХарактеристикиТовара")
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ХарактеристикиТовара, "ХарактеристикаТовара") Тогда
			
			СписокХарактеристикТовараXDTO = ТоварXDTO.ХарактеристикиТовара.ХарактеристикаТовара;
			Если ТипЗнч(СписокХарактеристикТовараXDTO) = Тип("СписокXDTO")
				И СписокХарактеристикТовараXDTO.Количество() > 0 Тогда
				
				НайтиСоздатьХарактеристикуНоменклатурыОпределитьНаименование(АртикулХарактеристики, ИдХарактеристики, НаименованиеХарактеристики, СписокХарактеристикТовараXDTO, ТоварXDTO);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ХарактеристикаНоменклатурыБитаяСсылка = Неопределено;
	Попытка
		
		Если Не ПустаяСтрока(ИдХарактеристики) Тогда
			
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдХарактеристики) Тогда //Уникальный идентификатор 1С
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдХарактеристики));
			Иначе
				ХарактеристикаНоменклатуры = СсылкаСоответствиеПоИд(ИдХарактеристики, "Справочник.ХарактеристикиНоменклатуры", Параметры.УзелОбмена);				
			КонецЕсли;
		КонецЕсли;
		
		Если ХарактеристикаНоменклатуры = Неопределено 
			ИЛИ ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
			ИЛИ ХарактеристикаНоменклатуры.ПолучитьОбъект() = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ИдХарактеристики) Тогда
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				СтрШаблон(НСтр("ru = 'Характеристика номенклатуры не найдена по уникальному идентификатору: %1. Создана новая.'"), ИдХарактеристики));
			КонецЕсли;
			
			Если ТипЗнч(ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
				И ХарактеристикаНоменклатуры <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
				И ХарактеристикаНоменклатуры.ПолучитьОбъект() = Неопределено Тогда
				
				ХарактеристикаНоменклатурыБитаяСсылка = ХарактеристикаНоменклатуры;
				ХарактеристикаНоменклатуры = Неопределено;
				
			КонецЕсли;
			
		Иначе
			Возврат ХарактеристикаНоменклатуры;
		КонецЕсли;
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось выполнить поиск характеристики номенклатуры по уникальному идентификатору: '") + ИдХарактеристики));
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НаименованиеХарактеристики, Истина,, Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдХарактеристики) Тогда
		ХарактеристикаНоменклатурыОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		ХарактеристикаНоменклатурыОбъект.Владелец = Номенклатура;
		ХарактеристикаНоменклатурыОбъект.Наименование = НаименованиеХарактеристики;
		ХарактеристикаНоменклатурыОбъект.Артикул = АртикулХарактеристики; 
		
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатурыБитаяСсылка) Тогда 
			ХарактеристикаНоменклатурыОбъект.УстановитьСсылкуНового(ХарактеристикаНоменклатурыБитаяСсылка);
		КонецЕсли;
		
		ХарактеристикаНоменклатурыОбъект.Записать();
		
		Возврат ХарактеристикаНоменклатурыОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
КонецФункции

Процедура НайтиСоздатьХарактеристикуНоменклатурыОпределитьНаименование(АртикулХарактеристики, ИдХарактеристики, НаименованиеХарактеристики, СписокХарактеристикТовараXDTO, ТоварXDTO)
	
	ХарактеристикаТовараXDTO = СписокХарактеристикТовараXDTO[0];
	Если ОбъектXDTOСодержитСвойство(ХарактеристикаТовараXDTO, "Ид") И СвойствоXDTOЗаполнено(ХарактеристикаТовараXDTO.Ид) Тогда
		ИдХарактеристики = ХарактеристикаТовараXDTO.Ид;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ХарактеристикаТовараXDTO, "Наименование") И СвойствоXDTOЗаполнено(ХарактеристикаТовараXDTO.Наименование) Тогда
		НаименованиеХарактеристики = ХарактеристикаТовараXDTO.Наименование; 
		Если Не ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда 
			НаименованиеХарактеристики = ТоварXDTO.Наименование;
		КонецЕсли;
	КонецЕсли; 
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		АртикулХарактеристики = ТоварXDTO.Артикул;
	КонецЕсли;

КонецПроцедуры

Функция НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДС, ОписаниеОшибки) Экспорт
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
		
		ИдНоменклатуры = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
		Если СтрДлина(ИдНоменклатуры)=СтрДлина(Новый УникальныйИдентификатор) Тогда //Уникальный идентификатор 1С
			Попытка
				
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
				Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
					И Номенклатура.ПолучитьОбъект() <> Неопределено Тогда
					
					Возврат Номенклатура;
				Иначе
					ДобавитьОписаниеОшибки(ОписаниеОшибки,
					НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору: '") + ИдНоменклатуры);
				КонецЕсли;
				
			Исключение
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось выполнить поиск номенклатуры по уникальному идентификатору: '") + ТоварXDTO.Ид));
			КонецПопытки;
		ИначеЕсли Параметры.Свойство("УзелОбмена") Тогда
			Номенклатура = СсылкаСоответствиеПоИд(ИдНоменклатуры, "Справочник.Номенклатура", Параметры.УзелОбмена);
			Если Номенклатура<>Неопределено Тогда
				Возврат Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	АртикулНоменклатуры = "";
	НаименованиеНоменклатуры = "";
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		АртикулНоменклатуры = ТоварXDTO.Артикул;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
		НаименованиеНоменклатуры = ПолучитьНаименованиеНоменклатуры(ТоварXDTO.Наименование);
	КонецЕсли;
	
	Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры, Параметры.СоответствиеПолейНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = ПолучитьБазовуюЕдиницуИзмеренияИзТоварXDTO(ТоварXDTO);
	ТипНоменклатуры = ?(ЭтоУслуга, Перечисления.ТипыНоменклатуры.Услуга, Перечисления.ТипыНоменклатуры.Запас);
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель = Параметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.ТипНоменклатуры = ТипНоменклатуры;
	Номенклатура.Артикул = АртикулНоменклатуры;
	Номенклатура.Наименование = НаименованиеНоменклатуры;
	Номенклатура.НаименованиеПолное = НаименованиеНоменклатуры;
	Номенклатура.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	
	Номенклатура.ЕдиницаИзмерения = ЕдиницаПоКлассификатору;
	Номенклатура.ВидСтавкиНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.ВидСтавкиНДС, Перечисления.ВидыСтавокНДС.Общая);
	Номенклатура.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
	Номенклатура.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	Номенклатура.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	
	Номенклатура.ИспользоватьХарактеристики = Параметры.ИспользоватьХарактеристики;
	Номенклатура.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
	Номенклатура.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	
	Номенклатура.СрокПополнения = 1;
	Номенклатура.СрокИсполненияЗаказа = 1;
	
	Если Параметры.Свойство("МетодОценкиДляПодстановкиВНоменклатуру") 
		И ЗначениеЗаполнено(Параметры.МетодОценкиДляПодстановкиВНоменклатуру) Тогда
		Номенклатура.МетодОценки = Параметры.МетодОценкиДляПодстановкиВНоменклатуру;
	Иначе
		Номенклатура.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
	КонецЕсли;
	
	Если Параметры.Свойство("СчетУчетаЗапасовДляПодстановкиВНоменклатуру") 
		И ЗначениеЗаполнено(Параметры.СчетУчетаЗапасовДляПодстановкиВНоменклатуру) Тогда
		Номенклатура.СчетУчетаЗапасов = Параметры.СчетУчетаЗапасовДляПодстановкиВНоменклатуру;
	Иначе
		Номенклатура.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	КонецЕсли;
	
	Номенклатура.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеСловаряСопоставленияНоменклатурыБЭД", Истина);
	Номенклатура.Записать();
	
	Если Параметры.ОбменТоварами
		И Параметры.ВыгружатьТолькоИзменения Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, Номенклатура.Ссылка);
		
	КонецЕсли;
	
	Возврат Номенклатура.Ссылка;
	
КонецФункции

Функция НайтиНоменклатуруПоАртикулуНаименованию(Артикул, Наименование, СоответствиеПолейНоменклатуры)
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		ИмяПоляАртикул = "Артикул";
		Если ЗначениеЗаполнено(СоответствиеПолейНоменклатуры) Тогда
			СопоставлениеАртикула = СоответствиеПолейНоменклатуры.Найти("Артикул", "НаименованиеПоляXML");
			Если СопоставлениеАртикула <> Неопределено Тогда
				ИмяПоляАртикул = СопоставлениеАртикула.ПолеНоменклатуры;
			КонецЕсли;
		КонецЕсли; 
		
		Если ИмяПоляАртикул = "Артикул" Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Артикул = &Артикул
			|	И НЕ Номенклатура.ЭтоГруппа");
		ИначеЕсли ИмяПоляАртикул = "Штрихкод" Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Артикул
			|	И НЕ Номенклатура.ЭтоГруппа");
		ИначеЕсли ЗначениеЗаполнено(ИмяПоляАртикул) Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Справочники.Номенклатура.ПустаяСсылка(), ИмяПоляАртикул) Тогда
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	ПОДСТРОКА(Номенклатура."+ИмяПоляАртикул+", 1, 250) = &Артикул
				|	И НЕ Номенклатура.ЭтоГруппа");
			Иначе
				Запрос = НайтиНоменклатуруПоАртикулуНаименованиюЗапросПоискПоДопРеквизиту(ИмяПоляАртикул, Артикул);
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		ИмяПоляНаименование = "Наименование";
		Если ЗначениеЗаполнено(СоответствиеПолейНоменклатуры) Тогда
			СопоставлениеНаименование = СоответствиеПолейНоменклатуры.Найти("Наименование", "НаименованиеПоляXML");
			Если СопоставлениеНаименование <> Неопределено Тогда
				ИмяПоляНаименование = СопоставлениеНаименование.ПолеНоменклатуры;
			КонецЕсли;
		КонецЕсли; 
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Справочники.Номенклатура.ПустаяСсылка(), ИмяПоляНаименование) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	ПОДСТРОКА(Номенклатура."+ИмяПоляНаименование+", 1, 250) = &Наименование
			|	И НЕ Номенклатура.ЭтоГруппа");
			
			Запрос.УстановитьПараметр("Наименование", Наименование);
		Иначе
			Запрос = НайтиНоменклатуруПоАртикулуНаименованиюЗапросПоискПоДопРеквизиту(ИмяПоляНаименование, Наименование);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции 

Функция НайтиНоменклатуруПоАртикулуНаименованиюЗапросПоискПоДопРеквизиту(ИмяРеквизита, ЗначениеРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НЕ НоменклатураДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|			И ПОДСТРОКА(НоменклатураДополнительныеРеквизиты.Свойство.Имя, 1, 250) = &ИмяРеквизита
	|	И (ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК СТРОКА(250))) = &ЗначениеРеквизита";
	
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьБазовуюЕдиницуИзмеренияИзТоварXDTO(ТоварXDTO)
	
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.шт;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "БазоваяЕдиница") Тогда
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "Код") Тогда
			
			КодБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.Код;
			Если СвойствоXDTOЗаполнено(КодБазовойЕдиницы) Тогда
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодБазовойЕдиницы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаПоКлассификатору) 
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.НаименованиеПолное) Тогда
			
			НаименованиеБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.НаименованиеПолное;
			ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеБазовойЕдиницы, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);
		
		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Документ, СтрокаТабличнойЧасти, СтруктураДанные);
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтрокаТабличнойЧасти.Цена = Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

// Устанавливает состояние заказа покупателя по соответствию статуса заказа на сайте состоянию заказа в информационной базе.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого устанавливается состояние.
//	СвойстваЗаказа - Соответствие - свойства загружаемого заказа
//	ТаблицаСоответствияСтатусовЗаказов - ТаблицаЗначений - таблица, содержащая соответствие статусов
//										 заказа на сайте состояниям заказа в информационной базе.
//
Процедура УстановитьСостояниеЗаказа(ДокументОбъект, СвойстваЗаказа, ТаблицаСоответствияСтатусовЗаказов, Параметры)
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		СостояниеЗаказа = Неопределено;
		
		ЗначениеСтатуса = СвойстваЗаказа["Статуса заказа ИД"];
		Если ЗначениеЗаполнено(ЗначениеСтатуса) Тогда
			НайденноеСоответствие = ТаблицаСоответствияСтатусовЗаказов.Найти(ЗначениеСтатуса, "ИДСтатусаЗаказаНаСайте");
			Если НайденноеСоответствие <> Неопределено
				И ЗначениеЗаполнено(НайденноеСоответствие.СостояниеЗаказаПокупателя) Тогда
				
				СостояниеЗаказа = НайденноеСоответствие.СостояниеЗаказаПокупателя;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			ЗначениеСтатуса = СвойстваЗаказа["Статус заказа"];
			Если Не ЗначениеЗаполнено(ЗначениеСтатуса) Тогда
				Возврат;
			КонецЕсли;
			
			НайденноеСоответствие = ТаблицаСоответствияСтатусовЗаказов.Найти(ЗначениеСтатуса, "СтатусЗаказаНаСайте");
			Если НайденноеСоответствие <> Неопределено
				И ЗначениеЗаполнено(НайденноеСоответствие.СостояниеЗаказаПокупателя) Тогда
				
				СостояниеЗаказа = НайденноеСоответствие.СостояниеЗаказаПокупателя;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ВидЗаказа = Параметры.ВидЗаказа;
		Если ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			ДокументОбъект.СостояниеЗаказа = СостояниеЗаказа;
		ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Ссылка)
			И ЗначениеЗаполнено(Параметры.СостояниеЗаказа) Тогда
			ДокументОбъект.СостояниеЗаказа = Параметры.СостояниеЗаказа;
		КонецЕсли;
		
	Иначе
		
		ВидЗаказа = СвойстваЗаказа.Получить("Вид заказа");
		Если ВидЗаказа <> Неопределено
			И ТипЗнч(ВидЗаказа) = Тип("Строка")
			И ВидЗаказа <> "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВидыЗаказовПокупателей.Ссылка КАК ВидЗаказа
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
			|ГДЕ
			|	ВидыЗаказовПокупателей.Наименование = &Наименование
			|	И НЕ ВидыЗаказовПокупателей.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Наименование", ВидЗаказа);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект.ВидЗаказа = Выборка.ВидЗаказа;
			КонецЕсли;
			
		КонецЕсли;
		
		СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
		Если СтатусЗаказа <> Неопределено
			И ТипЗнч(СтатусЗаказа) = Тип("Строка")
			И СтатусЗаказа <> "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СостоянияЗаказовПокупателей.Ссылка КАК СостояниеЗаказа
			|ИЗ
			|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
			|ГДЕ
			|	СостоянияЗаказовПокупателей.Наименование = &Наименование
			|	И НЕ СостоянияЗаказовПокупателей.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Наименование", СтатусЗаказа);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект.СостояниеЗаказа = Выборка.СостояниеЗаказа;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидЗаказа) Тогда
		ДокументОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.СостояниеЗаказа) Тогда
		ДокументОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ДокументОбъект.ВидЗаказа);
	КонецЕсли;
	Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы покупателей, у которых в наборе дополнительных сведений есть свойство Отменен со значением true.
//
// Параметры
//	МассивЗаказов - Массив, содержащий ссылки на заказы.
//
// Возвращаемое значение
//	Массив, содержащий ссылки на отмененные заказы.
//
Функция ПолучитьОтмененныеЗаказы(МассивЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК ЗаказПокупателя
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|		ПО ДополнительныеСведения.Свойство = НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
	|			И (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказПокупателя))
	|ГДЕ
	|	ДополнительныеСведения.Объект В(&МассивЗаказов)
	|	И ДополнительныеСведения.Свойство.Наименование = ""Отменен""
	|	И ДополнительныеСведения.Значение = ""true""";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
	Возврат Результат;
	
КонецФункции

// Выгружает файл с заказами на сайт.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьЗаказыНаСайт(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	Если НЕ ОчиститьКаталог(Параметры.КаталогНаДиске, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Успешно = ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, ОписаниеОшибки);
	Если НЕ Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураСтатистики.Выгружено.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОчиститьКаталог(Параметры.КаталогНаДиске, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Выгружает заказы покупателей в файл.
//
// Параметры:
//	Параметры			- Структура, основные параметры
//	СтруктураСтатистики	- Структура
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьЗаказыВФайл(Параметры, СтруктураСтатистики, ОписаниеОшибки)
	
	МассивИзменений = Новый Массив;
	
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		МассивИзменений = Параметры.СтруктураИзменений.Заказы;
		
		Для Каждого Эл Из СтруктураСтатистики.Загружено Цикл
			ИндексЭлемента = МассивИзменений.Найти(Эл);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивИзменений.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивИзменений.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьДанныеЗаказов(МассивИзменений, СтруктураСтатистики, Параметры);
	
	Параметры.Вставить("НомерВВыборке", Параметры.ВыборкаДокументов.Количество());
	Параметры.Вставить("ДатаФормирования", ТекущаяДата());
	
	Пока Параметры.ВыполнятьОбменЗаказы Цикл
		
		ДокументыXDTO = СформироватьЗаказыXDTO(Параметры, СтруктураСтатистики);
		
		Если СтруктураСтатистики.Выгружено.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		ПолноеИмяФайлаОбмена = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, Параметры.КаталогНаДиске + "\" 
		+ ИмяФайлаОбмена("orders-", Параметры.ИндексФайлаОбмена, Истина));
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Попытка
			
			ДокументыXDTO.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДокументыXDTO, "КоммерческаяИнформация");
			ЗаписьXML.Закрыть();
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать XML-файл на диск: '")
			+ ПолноеИмяФайлаОбмена + Символы.ПС + ОписаниеОшибки()));
			
			СтруктураСтатистики.Выгружено.Очистить();
			
			Возврат Ложь;
			
		КонецПопытки;
		Параметры.ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена + 1;
		
		Если Параметры.ВыгружатьНаСайт Тогда
			ВыгружатьПошагово = Параметры.ПодчиненныеДокументы И Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс;
			
			Если Параметры.КоличествоПовторений = 0 Тогда
				ВыгружатьРаз = 1;
			Иначе
				ВыгружатьРаз = Параметры.КоличествоПовторений;
			КонецЕсли; 
			
			Успешно = Ложь;
			Для номерПопытки=1 По ВыгружатьРаз Цикл
				
				Успешно = ВыгрузитьНаСайт(Параметры, , ОписаниеОшибки, ВыгружатьПошагово, "sale");
				
				Если Успешно Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Успешно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.НомерВВыборке <= 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Возвращает Объект XDTO типа КоммерческаяИнформация с заполненным списком документов.
//
// Параметры
//	МассивИзменений - массив, содержащий изменений по заказам покупателей
//	СтруктураСтатистики - структура для записи статистики по выгрузке заказов
//	Параметры - структура, содержащая параметры обмена
//
// Возвращаемое значение
//	Объект XDTO, типа КоммерческаяИнформация.
//
Функция СформироватьЗаказыXDTO(Параметры, СтруктураСтатистики)
	
	ВыборкаДокументов = Параметры.ВыборкаДокументов;
	ДеревоСвойствХарактеристик = Параметры.ДеревоСвойствХарактеристик;
	ВыборкаОтгрузкиОплаты = Параметры.ВыборкаОтгрузкиОплаты;
	
	URIПространстваИмен = "urn:1C.ru:commerceml_210";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	Если Параметры.ПодчиненныеДокументы Тогда
		КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.10";
	Иначе	
		КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.08";
	КонецЕсли; 
	
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	НомерВПорции = 0;
	Пока НомерВПорции < Параметры.РазмерПорции ИЛИ Параметры.РазмерПорции = 0 Цикл
		
		Параметры.ВыполнятьОбменЗаказы = Параметры.ВыборкаДокументов.Следующий();
		Если НЕ Параметры.ВыполнятьОбменЗаказы Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.ДатаЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Валюта)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Контрагент) Тогда
			
			Параметры.НомерВВыборке = Параметры.НомерВВыборке - 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураСтатистики.Выгружено.Добавить(ВыборкаДокументов.ЗаказПокупателя);
		
		ДокументТип = ПакетCML.Получить("Документ");
		ДокументXDTO = ФабрикаXDTO.Создать(ДокументТип);
		
		ДокументXDTO.Ид = Строка(ВыборкаДокументов.ЗаказПокупателя.УникальныйИдентификатор());
		ДокументXDTO.Номер = ВыборкаДокументов.НомерЗаказаНаСайте;
		ДокументXDTO.Дата = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.ХозОперация = "Заказ товара";
		ДокументXDTO.Роль = "Продавец";
		ДокументXDTO.Валюта = ФорматВалютыДляXDTO(ВыборкаДокументов.Валюта);
		ДокументXDTO.Курс = ВыборкаДокументов.Курс;
		ДокументXDTO.Сумма = ВыборкаДокументов.СуммаДокумента;
		ДокументXDTO.Время = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.СрокПлатежа = ВыборкаДокументов.ДатаПлатежа;
		
		Комментарий = Лев(ВыборкаДокументов.Комментарий, 3000);
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			ДокументXDTO.Комментарий = Комментарий;
		КонецЕсли;
		
		КонтрагентыXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументТип, "Контрагенты"));
		
		КонтрагентXDTO = ПолучитьКонтрагентаXDTO(ВыборкаДокументов, ПакетCML);
		КонтрагентыXDTO.Контрагент.Добавить(КонтрагентXDTO);
		
		ДокументXDTO.Контрагенты = КонтрагентыXDTO;
		
		ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ДеревоСвойствХарактеристик, Параметры);
		
		ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, Параметры);
		
		Если Параметры.ПодчиненныеДокументы = Истина Тогда
			ДобавитьПодчиненныеДокументыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ВыборкаОтгрузкиОплаты, Параметры);	
		КонецЕсли;
		
		КоммерческаяИнформацияXDTO.Документ.Добавить(ДокументXDTO);
		
		НомерВПорции = НомерВПорции + 1;
		Параметры.НомерВВыборке = Параметры.НомерВВыборке - 1;
		
	КонецЦикла;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

Функция СформироватьЗаказыXDTO_ВерсияCommerceML205a(МассивИзменений, СтруктураСтатистики, Параметры) Экспорт
	
	МассивРезультатов = ПолучитьЗаказыСОплатойИОтгрузкой(МассивИзменений, СтруктураСтатистики.Загружено, Параметры);
	
	ВыборкаДокументов = МассивРезультатов[6].Выбрать();
	
	Если ВыборкаДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоСвойствХарактеристик = МассивРезультатов[7].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	URIПространстваИмен = "urn:1C.ru:commerceml_205";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	КоммерческаяИнформацияXDTO.ВерсияСхемы = "2.05";
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.ДатаЗаказаНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Валюта)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокументов.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтатистики.Выгружено.Добавить(ВыборкаДокументов.ЗаказПокупателя);
		
		ДокументТип = ПакетCML.Получить("Документ");
		ДокументXDTO = ФабрикаXDTO.Создать(ДокументТип);
		
		ДокументXDTO.Ид = Строка(ВыборкаДокументов.ЗаказПокупателя.УникальныйИдентификатор());
		ДокументXDTO.Номер = ВыборкаДокументов.НомерЗаказаНаСайте;
		ДокументXDTO.Дата = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.ХозОперация = "Заказ товара";
		ДокументXDTO.Роль = "Продавец";
		ДокументXDTO.Валюта = ФорматВалютыДляXDTO(ВыборкаДокументов.Валюта);
		ДокументXDTO.Курс = ВыборкаДокументов.Курс;
		ДокументXDTO.Сумма = ВыборкаДокументов.СуммаДокумента;
		ДокументXDTO.Время = ВыборкаДокументов.ДатаЗаказаНаСайте;
		ДокументXDTO.СрокПлатежа = ВыборкаДокументов.ДатаПлатежа;
		
		Комментарий = Лев(ВыборкаДокументов.Комментарий, 3000);
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			ДокументXDTO.Комментарий = Комментарий;
		КонецЕсли;
		
		КонтрагентыXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументТип, "Контрагенты"));
		
		КонтрагентXDTO = ПолучитьКонтрагентаXDTO(ВыборкаДокументов, ПакетCML);
		КонтрагентыXDTO.Контрагент.Добавить(КонтрагентXDTO);
		
		ДокументXDTO.Контрагенты = КонтрагентыXDTO;
		
		ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ДеревоСвойствХарактеристик, Параметры);
		
		ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, Параметры);
		
		КоммерческаяИнформацияXDTO.Документ.Добавить(ДокументXDTO);
		
	КонецЦикла;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Формирует Выборкау с заказами для выгрузки.
//
// Параметры:
//	МассивИзменений - массив с заказами, зарегистрированными по узлу плана обмена
//	МассивЗагруженныхДокументов - массив только что загруженных заказов
//
// Возвращаемое значение:
//	Выборка из результата запроса.
//
Функция ПолучитьЗаказыСОплатойИОтгрузкой(МассивИзменений, МассивЗагруженныхДокументов, Параметры)
	
	СхемаКомпоновки = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиЗаказов");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	ДатаНачалаВыгрузкиЗаказов = Дата(1,1,1);
	Если Параметры.Свойство("ДатаНачалаВыгрузкиЗаказов") Тогда
		ДатаНачалаВыгрузкиЗаказов = Параметры.ДатаНачалаВыгрузкиЗаказов;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачалаВыгрузкиЗаказов");
	ПараметрСКД.Значение = ДатаНачалаВыгрузкиЗаказов;
	ПараметрСКД.Использование = Истина;
	
	Если МассивИзменений.Количество() > 0 Тогда
		
		// Отбирать только измененные.
		ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивИзменений, ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если МассивЗагруженныхДокументов.Количество() > 0 Тогда
		
		// Исключить только что загруженные.
		ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивЗагруженныхДокументов, ВидСравненияКомпоновкиДанных.НеВСписке);
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос);
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС
	+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|			ПО ЗаказПокупателяТовары.Ссылка = ВременнаяТаблицаЗаказы.ЗаказПокупателя
	|		ПО ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка = ЗаказПокупателяТовары.Характеристика
	|ИТОГИ ПО
	|	Характеристика";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС
	+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(""Оплата"") КАК ВидОперации,
	|	ОплатаСчетовИЗаказов.СчетНаОплату КАК ЗаказПокупателя,
	|	ОплатаСчетовИЗаказов.Организация КАК Организация,
	|	ОплатаСчетовИЗаказов.Регистратор КАК Регистратор,
	|	ОплатаСчетовИЗаказов.Период КАК Период,
	|	СУММА(ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты) КАК Сумма,
	|	NULL КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	NULL КАК Количество,
	|	ПОДСТРОКА(ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.СчетНаОплату КАК Документ.ЗаказПокупателя).Комментарий, 1, 1000) КАК КомментарийЗаказа,
	|	NULL КАК НоменклатураДоставки,
	|	NULL КАК СтоимостьДоставки,
	|	NULL КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).НомерЧекаККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).НомерЧекаККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).НомерЧекаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерЧекаККМ,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).НомерСменыККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).НомерСменыККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).НомерСменыККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерСменыККМ,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).Комментарий, 1, 1000)
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).Комментарий, 1, 1000)
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).Комментарий, 1, 1000)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).Касса
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.Взаимозачет).Контрагент
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).ЭквайринговыйТерминал
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОтчетОРозничныхПродажах).КассаККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).КассаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АналитикаОплаты,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).Номер
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.Взаимозачет).Номер
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).Номер
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеНаСчет).Номер
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОтчетОРозничныхПродажах).Номер
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Номер1С,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).Дата
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.Взаимозачет).Дата
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).Дата
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеНаСчет).Дата
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОтчетОРозничныхПродажах).Дата
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).Дата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Дата1С,
	|	ОплатыПокупателейССайта.НомерОплатыНаСайте КАК НомерОплатыНаСайте,
	|	ОплатыПокупателейССайта.ДатаОплатыНаСайте КАК ДатаОплатыНаСайте,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).НомерПлатежнойКарты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерПлатежногоДокумента,
	|	NULL КАК ТипНоменклатуры,
	|	NULL КАК Категория,
	|	ОплатаСчетовИЗаказов.Регистратор КАК ДокументДвижения
	|ИЗ
	|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатыПокупателейССайта КАК ОплатыПокупателейССайта
	|			ПО ((ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам)) = ОплатыПокупателейССайта.ДокументОплаты)
	|		ПО (ОплатаСчетовИЗаказов.СчетНаОплату = ВременнаяТаблицаЗаказы.ЗаказПокупателя)
	|ГДЕ
	|	(ОплатаСчетовИЗаказов.СуммаАванса <> 0
	|			ИЛИ ОплатаСчетовИЗаказов.СуммаОплаты <> 0)
	|	И НЕ ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСчетовИЗаказов.СчетНаОплату,
	|	ОплатаСчетовИЗаказов.Организация,
	|	ОплатаСчетовИЗаказов.Регистратор,
	|	ОплатаСчетовИЗаказов.Период,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).НомерЧекаККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).НомерЧекаККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).НомерЧекаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ПоступлениеВКассу).НомерСменыККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ЧекККМ).НомерСменыККМ
	|		КОГДА ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам).НомерСменыККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ОплатыПокупателейССайта.НомерОплатыНаСайте,
	|	ОплатыПокупателейССайта.ДатаОплатыНаСайте,
	|	ОплатаСчетовИЗаказов.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(""Отгрузка""),
	|	ЗаказыПокупателей.ЗаказПокупателя,
	|	ЗаказыПокупателей.Организация,
	|	ЗаказыПокупателей.Регистратор,
	|	ЗаказыПокупателей.Период,
	|	Продажи.Сумма,
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.Характеристика,
	|	СУММА(ЗаказыПокупателей.Количество),
	|	ПОДСТРОКА(ЗаказыПокупателей.ЗаказПокупателя.Комментарий, 1, 1000),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПОДСТРОКА(ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Комментарий, 1, 1000),
	|	NULL,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Номер,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Дата,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗаказыПокупателей.Номенклатура.ТипНоменклатуры,
	|	ЗаказыПокупателей.Номенклатура.КатегорияНоменклатуры,
	|	ЗаказыПокупателей.Регистратор
	|ИЗ
	|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
	|			ПО ЗаказыПокупателей.Номенклатура = Продажи.Номенклатура
	|				И ЗаказыПокупателей.Характеристика = Продажи.Характеристика
	|				И ЗаказыПокупателей.Регистратор = Продажи.Регистратор
	|		ПО ВременнаяТаблицаЗаказы.ЗаказПокупателя = ЗаказыПокупателей.ЗаказПокупателя
	|ГДЕ
	|	ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).НоменклатураДоставки <> ЗаказыПокупателей.Номенклатура
	|	И Продажи.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателей.ЗаказПокупателя,
	|	ЗаказыПокупателей.Организация,
	|	ЗаказыПокупателей.Регистратор,
	|	ЗаказыПокупателей.Период,
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.Характеристика,
	|	ПОДСТРОКА(ЗаказыПокупателей.ЗаказПокупателя.Комментарий, 1, 1000),
	|	ЗаказыПокупателей.Номенклатура.ТипНоменклатуры,
	|	ЗаказыПокупателей.Номенклатура.КатегорияНоменклатуры,
	|	Продажи.Сумма,
	|	ЗаказыПокупателей.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(""Доставка""),
	|	ЗаказыПокупателей.ЗаказПокупателя,
	|	ЗаказыПокупателей.Организация,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная),
	|	ЗаказыПокупателей.Период,
	|	NULL,
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.Характеристика,
	|	СУММА(ЗаказыПокупателей.Количество),
	|	ПОДСТРОКА(ЗаказыПокупателей.ЗаказПокупателя.Комментарий, 1, 1000),
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).НоменклатураДоставки,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).СтоимостьДоставки,
	|	ЗаказыПокупателей.ЗаказПокупателя.СпособДоставки,
	|	NULL,
	|	NULL,
	|	ПОДСТРОКА(ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Комментарий, 1, 1000),
	|	NULL,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Номер,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).Дата,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗаказыПокупателей.Номенклатура.ТипНоменклатуры,
	|	ЗаказыПокупателей.Номенклатура.КатегорияНоменклатуры,
	|	ЗаказыПокупателей.Регистратор
	|ИЗ
	|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|		ПО ВременнаяТаблицаЗаказы.ЗаказПокупателя = ЗаказыПокупателей.ЗаказПокупателя
	|ГДЕ
	|	ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).НоменклатураДоставки = ЗаказыПокупателей.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателей.ЗаказПокупателя,
	|	ЗаказыПокупателей.Организация,
	|	ЗаказыПокупателей.Период,
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.Характеристика,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).НоменклатураДоставки,
	|	ВЫРАЗИТЬ(ЗаказыПокупателей.Регистратор КАК Документ.РасходнаяНакладная).СтоимостьДоставки,
	|	ЗаказыПокупателей.ЗаказПокупателя.СпособДоставки,
	|	ПОДСТРОКА(ЗаказыПокупателей.ЗаказПокупателя.Комментарий, 1, 1000),
	|	ЗаказыПокупателей.Номенклатура.КатегорияНоменклатуры,
	|	ЗаказыПокупателей.Номенклатура.ТипНоменклатуры,
	|	ЗаказыПокупателей.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(""Зачет аванса""),
	|	ОплатаСчетовИЗаказов.СчетНаОплату,
	|	ОплатаСчетовИЗаказов.Организация,
	|	ОплатаСчетовИЗаказов.Регистратор,
	|	ОплатаСчетовИЗаказов.Период,
	|	СУММА(ОплатаСчетовИЗаказов.СуммаАванса + ОплатаСчетовИЗаказов.СуммаОплаты),
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПОДСТРОКА(ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.СчетНаОплату КАК Документ.ЗаказПокупателя).Комментарий, 1, 1000),
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).НомерЧекаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).НомерЧекаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерЧекаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).НомерСменыККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).НомерСменыККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерСменыККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеНаСчет).НазначениеПлатежа, 1, 1000)
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Касса
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.Взаимозачет).Контрагент
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).ЭквайринговыйТерминал
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОтчетОРозничныхПродажах).КассаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).КассаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.Взаимозачет).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеНаСчет).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОтчетОРозничныхПродажах).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ОплатаСчетовИЗаказов.Период,
	|	ОплатыПокупателейССайта.НомерОплатыНаСайте,
	|	ОплатыПокупателейССайта.ДатаОплатыНаСайте,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерПлатежнойКарты
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	РасчетыСПокупателямиОбороты.Документ
	|ИЗ
	|	ВременнаяТаблицаЗаказы КАК ВременнаяТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатыПокупателейССайта КАК ОплатыПокупателейССайта
	|			ПО ((ВЫРАЗИТЬ(ОплатаСчетовИЗаказов.Регистратор КАК Документ.ОперацияПоПлатежнымКартам)) = ОплатыПокупателейССайта.ДокументОплаты)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Обороты(, , Регистратор, ) КАК РасчетыСПокупателямиОбороты
	|			ПО (РасчетыСПокупателямиОбороты.Регистратор = ОплатаСчетовИЗаказов.Регистратор)
	|				И ОплатаСчетовИЗаказов.СчетНаОплату = РасчетыСПокупателямиОбороты.Заказ
	|		ПО (ОплатаСчетовИЗаказов.СчетНаОплату = ВременнаяТаблицаЗаказы.ЗаказПокупателя)
	|ГДЕ
	|	(ОплатаСчетовИЗаказов.СуммаАванса <> 0
	|			ИЛИ ОплатаСчетовИЗаказов.СуммаОплаты <> 0)
	|	И ОплатаСчетовИЗаказов.Регистратор Ссылка Документ.ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСчетовИЗаказов.СчетНаОплату,
	|	ОплатаСчетовИЗаказов.Организация,
	|	ОплатаСчетовИЗаказов.Регистратор,
	|	ОплатаСчетовИЗаказов.Период,
	|	ОплатыПокупателейССайта.НомерОплатыНаСайте,
	|	ОплатыПокупателейССайта.ДатаОплатыНаСайте,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).НомерЧекаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).НомерЧекаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерЧекаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).НомерСменыККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).НомерСменыККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерСменыККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).Комментарий, 1, 1000)
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ПОДСТРОКА(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеНаСчет).НазначениеПлатежа, 1, 1000)
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Касса
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.Взаимозачет).Контрагент
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).ЭквайринговыйТерминал
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОтчетОРозничныхПродажах).КассаККМ
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).КассаККМ
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеВКассу
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеВКассу).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.Взаимозачет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.Взаимозачет).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ПоступлениеНаСчет
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ПоступлениеНаСчет).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОтчетОРозничныхПродажах).Номер
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЧекККМ).Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателямиОбороты.Документ Ссылка Документ.ОперацияПоПлатежнымКартам
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ОперацияПоПлатежнымКартам).НомерПлатежнойКарты
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	РасчетыСПокупателямиОбороты.Документ,
	|	ОплатаСчетовИЗаказов.Период
	|ИТОГИ ПО
	|	ЗаказПокупателя,
	|	Регистратор";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Возврат МассивРезультатов;
	
КонецФункции

// Добавляет отбор в настройки компоновщика.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//	МассивОграничения - значения отбора
//	ВидСравнения - ВидСравненияКомпоновкиДанных.
//
Процедура ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивОграничения, ВидСравнения)
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ЗаказПокупателя");
	НовыйЭлемент.ВидСравнения = ВидСравнения;
	СписокЗначенийОграничения = Новый СписокЗначений;
	СписокЗначенийОграничения.ЗагрузитьЗначения(МассивОграничения);
	НовыйЭлемент.ПравоеЗначение = СписокЗначенийОграничения;
	НовыйЭлемент.Использование = Истина;
	
КонецПроцедуры

// Заполняет списки XDTO Товары и Налоги объекта XDTO типа Документ.
//
// Параметры
//	ДокументXDTO - объект XDTO типа Документ
//	ПакетCML - пакет XDTO, содержащий типы CML
//	ВыборкаДокументов - Выборка, содержащая данные по заказам покупателей
//	ДеревоСвойствХарактеристик - дерево значений, содержащее свойства характеристик.
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ПакетCML, ВыборкаДокументов, ДеревоСвойствХарактеристик, Параметры)
	
	ВыборкаТоваров = ВыборкаДокументов.Товары.Выбрать();
	Если ВыборкаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Товары");
	ТоварТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварыТип, "Товар");
	
	НалогиВДокументеXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Налоги"));
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
	
	СчитатьНДС = ВыборкаДокументов.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	СуммаНДС = 0;
	ДоставкаЗаполнена = Ложь;
	
	// выгрузим доставку заказа, если она заполнена на отдельной странице
	Если ВыборкаДокументов.СтоимостьДоставки <> 0 И ЗначениеЗаполнено(ВыборкаДокументов.НоменклатураДоставки) Тогда
		
		ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
		ЦенаXDTO  = ФабрикаXDTO.Создать(ПакетCML.Получить("Цена"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
		|	Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	Номенклатура.КатегорияНоменклатуры КАК Категория,
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &НоменклатураДоставки";
		
		Запрос.УстановитьПараметр("НоменклатураДоставки", ВыборкаДокументов.НоменклатураДоставки);
		
		Результат = Запрос.Выполнить();
		ДанныеНоменклатураДоставки = Результат.Выбрать();
		
		Пока ДанныеНоменклатураДоставки.Следующий() Цикл
			
			ТоварXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, ДанныеНоменклатураДоставки);
			ТоварXDTO.Артикул = ДанныеНоменклатураДоставки.Артикул;
			ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(ДанныеНоменклатураДоставки.Наименование);
			ТоварXDTO.Ид = "ORDER_DELIVERY";
			ТоварXDTO.Количество = 1;
			ТоварXDTO.ЦенаЗаЕдиницу = ВыборкаДокументов.СтоимостьДоставки;
			ТоварXDTO.Сумма = ВыборкаДокументов.СтоимостьДоставки;
			
			ЗначенияРеквизитовXDTOТовара = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов"));
			ДобавитьСвойстваТовараВЗаказе(ЗначенияРеквизитовXDTOТовара, ПакетCML, ДанныеНоменклатураДоставки, Параметры, ТоварXDTO.Ид);
			
			ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTOТовара;
			
			ТоварыXDTO.Товар.Добавить(ТоварXDTO);
			ДоставкаЗаполнена = Истина;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
		
		БазоваяЕдиницаИзмеренияXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("БазоваяЕдиница"));
		
		Характеристика = Неопределено;
		Если Параметры.ИспользоватьХарактеристики Тогда
			Характеристика = ВыборкаТоваров.Характеристика;
		КонецЕсли;
		
		Если НЕ ДоставкаЗаполнена 
			И Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс
			И ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И Параметры.ТаблицаСоответствияСлужбДоставки.Количество() = 0
			Тогда //для CMS Битрикс выгружаем первую услугу - как доставку, с Ид = "ORDER_DELIVERY"
			
			ТоварXDTO.Ид = "ORDER_DELIVERY";
			ДоставкаЗаполнена = Истина;
		Иначе	
			ЗаполнитьИДСайтаДляОбъектаXDTO(ТоварXDTO, ВыборкаТоваров.Номенклатура, Характеристика, Параметры);	
		КонецЕсли;
		
		ТоварXDTO.Артикул = ВыборкаТоваров.Артикул;
		ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаТоваров.Номенклатура);
		ТоварXDTO.БазоваяЕдиница = ПолучитьБазовуюЕдиницуXDTO(ПакетCML, ВыборкаТоваров);
		ТоварXDTO.ЦенаЗаЕдиницу = ВыборкаТоваров.Цена;
		ТоварXDTO.Количество = ВыборкаТоваров.Количество;
		ТоварXDTO.Сумма = ВыборкаТоваров.Сумма;
		
		Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
			ТоварXDTO.Единица = ПроверитьЕдиницуИзмерения(ВыборкаТоваров.ЕдиницаИзмеренияКод, Ложь);
		Иначе
			ТоварXDTO.Единица = ПроверитьЕдиницуИзмерения(ВыборкаТоваров.ЕдиницаИзмерения, Истина);
		КонецЕсли;
		ТоварXDTO.Коэффициент = 1;
		
		Если ВыборкаТоваров.СуммаНДС > 0 И ЗначениеЗаполнено(ВыборкаТоваров.СтавкаНДС) И НЕ ВыборкаТоваров.СтавкаНДС.НеОблагается Тогда
			
			НалогиТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Налоги"));
			НалогТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("НалогВДокументе"));
			
			НалогТовараXDTO.Наименование = Параметры.НаименованиеНалога;
			НалогТовараXDTO.УчтеноВСумме = ВыборкаДокументов.СуммаВключаетНДС;
			НалогТовараXDTO.Сумма = ВыборкаТоваров.СуммаНДС;
			НалогТовараXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузкиЧисло(ВыборкаТоваров.СтавкаНДС);
			
			НалогиТовараXDTO.Налог.Добавить(НалогТовараXDTO);
			ТоварXDTO.Налоги = НалогиТовараXDTO;
			
			Если СчитатьНДС Тогда
				
				СуммаНДС = СуммаНДС + ВыборкаТоваров.СуммаНДС;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроцентСкидкиНаценки = ВыборкаТоваров.ПроцентСкидкиНаценки;
		
		Если ПроцентСкидкиНаценки <> 0 Тогда
			
			СуммаСкидки = ВыборкаТоваров.Количество * ВыборкаТоваров.Цена - ВыборкаТоваров.Сумма;
			
			СкидкиТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Скидки"));
			СкидкаТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Скидка"));
			
			Попытка
				Если ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи") Тогда
					Если ЗначениеЗаполнено(ВыборкаДокументов.ВидСкидкиНаценки) Тогда
						СкидкаТовараXDTO.Наименование = Строка(ВыборкаДокументов.ВидСкидкиНаценки);
					Иначе
						СкидкаТовараXDTO.Наименование = "Ручная скидка";
					КонецЕсли;
				Иначе
					СкидкаТовараXDTO.Наименование = "Ручная скидка";
				КонецЕсли;
				
			Исключение
				СкидкаТовараXDTO.Наименование = "Ручная скидка";
			КонецПопытки;
			
			СкидкаТовараXDTO.Процент = ПолучитьЧислоИзСтроки(Формат(ПроцентСкидкиНаценки, "ЧЦ=5; ЧДЦ=2"));
			СкидкаТовараXDTO.Сумма = ПолучитьЧислоИзСтроки(Формат(СуммаСкидки, "ЧЦ=15; ЧДЦ=2"));
			СкидкаТовараXDTO.УчтеноВСумме = "true";
			
			СкидкиТовараXDTO.Скидка.Добавить(СкидкаТовараXDTO);
			ТоварXDTO.Скидки = СкидкиТовараXDTO;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.СтавкаНДС) И НЕ ВыборкаТоваров.СтавкаНДС.НеОблагается Тогда
			
			СтавкиНалоговXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов"));
			СтавкаНалогаXDTO = фабрикаXDTO.Создать(ПакетCML.Получить("СтавкаНалога"));
			
			СтавкаНалогаXDTO.Наименование = Параметры.НаименованиеНалога;
			СтавкаНалогаXDTO.Ставка = ОбменССайтомПовтИсп.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(ВыборкаТоваров.СтавкаНДС);
			
			СтавкиНалоговXDTO.СтавкаНалога.Добавить(СтавкаНалогаXDTO);
			
			ТоварXDTO.СтавкиНалогов = СтавкиНалоговXDTO;
			
		КонецЕсли;
		
		ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов"));
		ДобавитьСвойстваТовараВЗаказе(ЗначенияРеквизитовXDTO, ПакетCML, ВыборкаТоваров, Параметры, ТоварXDTO.Ид);
		
		Если Параметры.ИспользоватьХарактеристики Тогда
			ВыгрузитьСвойстваХарактеристикиДляТовараXDTO(ПакетCML, ТоварXDTO, ТоварТип, ВыборкаТоваров.Характеристика, ДеревоСвойствХарактеристик, Параметры);
		КонецЕсли;
		
		ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
		ТоварыXDTO.Товар.Добавить(ТоварXDTO);
		
	КонецЦикла;
	
	НалогДокументаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("НалогВДокументе"));
	
	НалогДокументаXDTO.Наименование = Параметры.НаименованиеНалога;
	НалогДокументаXDTO.УчтеноВСумме = ВыборкаДокументов.СуммаВключаетНДС;
	НалогДокументаXDTO.Сумма = СуммаНДС;
	
	НалогиВДокументеXDTO.Налог.Добавить(НалогДокументаXDTO);
	
	ДокументXDTO.Налоги = НалогиВДокументеXDTO;
	ДокументXDTO.Товары = ТоварыXDTO;
	
КонецПроцедуры

Функция ПроверитьЕдиницуИзмерения(знач ЕдиницаИзмеренияКод, ЭтоКод)
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
		ЕдиницаИзмеренияКод = ?(ЭтоКод, 796, "шт");
	КонецЕсли;
	
	Возврат Строка(ЕдиницаИзмеренияКод);
	
КонецФункции

// Заполняет свойств характеристик для объекта XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТоварТип - тип объекта XDTO Товар
//	Характеристика - характеристика номенклатуры
//	ДеревоСвойствХарактеристик - дерево значений, содержащее свойства характеристик.
//
Процедура ВыгрузитьСвойстваХарактеристикиДляТовараXDTO(ПакетCML, ТоварXDTO, ТоварТип, Характеристика, ДеревоСвойствХарактеристик, Параметры)
	
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Найдено = ДеревоСвойствХарактеристик.Строки.Найти(Характеристика, "Характеристика");
	
	Если Найдено = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТовараТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ХарактеристикиТовара");
	ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
	
	Если Не Параметры.ОбменЧерезВебСервис Тогда
		
		Для Каждого СтрокаСвойства Из Найдено.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ХарактеристикиТовараТип, "ХарактеристикаТовара"));
			ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Свойство);
			
			Если ТипЗнч(СтрокаСвойства.Значение) = Тип("Число") Тогда
				ХарактеристикаТовараXDTO.Значение = Формат(СтрокаСвойства.Значение, "ЧГ=0");
			Иначе
				ХарактеристикаТовараXDTO.Значение = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
			КонецЕсли;
			
			ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
			
		КонецЦикла;
		
	Иначе
		
		ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ХарактеристикиТовараТип, "ХарактеристикаТовара"));
		ЗаполнитьИДСайтаДляОбъектаXDTO(ХарактеристикаТовараXDTO, Характеристика,, Параметры);
		ХарактеристикаТовараXDTO.Наименование = ФорматНаименованияДляXDTO(Характеристика.Наименование);
		
		ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
		ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
		
		Для Каждого СтрокаСвойства Из Найдено.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСвойства.Свойство)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
			ЗаполнитьИДСайтаДляОбъектаXDTO(ЗначенияСвойстваXDTO, СтрокаСвойства.Свойство,, Параметры);
			ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойства.Наименование);
			
			Если СтрокаСвойства.Значение = NULL Тогда
				
				// Если значение свойства не заполнено, выгружаем пустую строку.
				ЗначениеСвойства = "";
				
			Иначе
				
				ТипЗначенияСвойства = ТипЗнч(СтрокаСвойства.Значение);
				Если ТипЗначенияСвойства = Тип("Дата") Тогда
					
					ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойства.Значение);
					
				Иначе
					
					ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойства.Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
			ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
			
		КонецЦикла;
		
		Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
			ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
		КонецЕсли;
		
		ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
		
	КонецЕсли;
	
	ТоварXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
	
КонецПроцедуры

// Заполняет значения дополнительных реквизитов для объекта XDTO типа Документ.
//
// Параметры
//	ДокументXDTO - объект XDTO типа Документ
//	ПакетCML - пакет XDTO, содержащий типы CML
//	ДанныеДокумента - Выборка, содержащая данные заказа покупателя
//	Параметры - структура, содержащая параметры обмена.
//
Процедура ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ДанныеЗаказа, Параметры)
	
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ДокументXDTO.Свойства().Получить("ЗначенияРеквизитов").Тип);
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер по 1С", ДанныеЗаказа.Номер);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата по 1С", ФорматДатыДляXDTO(ДанныеЗаказа.Дата, Истина, Истина));
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ПометкаУдаления", ДанныеЗаказа.ПометкаУдаления);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Проведен", ДанныеЗаказа.Проведен);
	Если ДанныеЗаказа.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отменен", "true");
	КонецЕсли;
	
	// ОПЛАТЫ
	ДокументОплачен = ДанныеЗаказа.Проведен И ДанныеЗаказа.КОплатеОстаток <= 0;
	Если ДокументОплачен Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Оплачен", Истина);
		Если НЕ Параметры.ПодчиненныеДокументы = Истина Тогда
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер оплаты по 1С", ДанныеЗаказа.НомерОплаты);
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата оплаты по 1С", ФорматДатыДляXDTO(ДанныеЗаказа.ДатаОплаты, Истина, Истина));
		КонецЕсли;
	Иначе
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Оплачен", Ложь);
	КонецЕсли;
	
	Если НЕ Параметры.ПодчиненныеДокументы = Истина 
		И Параметры.Свойство("ТаблицаСоответствияВидовОплат")
		И Параметры.ТаблицаСоответствияВидовОплат <> Неопределено Тогда 
		
		СтруктураПоискаОплат = Новый Структура;
		Если ТипЗнч(ДанныеЗаказа.ДокументОплаты) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			СтруктураПоискаОплат.Вставить("ТипОплатыНаСайте", Перечисления.ТипыОплатНаСайте.Наличные);
			Если ЗначениеЗаполнено(ДанныеЗаказа.ДокументОплаты.КассаККМ) Тогда
				СтруктураПоискаОплат.Вставить("АналитикаОплаты", ДанныеЗаказа.ДокументОплаты.КассаККМ);
			Иначе
				СтруктураПоискаОплат.Вставить("АналитикаОплаты", ДанныеЗаказа.ДокументОплаты.Касса);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеЗаказа.ДокументОплаты) = Тип("ДокументСсылка.Взаимозачет") Тогда
			СтруктураПоискаОплат.Вставить("ТипОплатыНаСайте", Перечисления.ТипыОплатНаСайте.Безналичные);
			СтруктураПоискаОплат.Вставить("АналитикаОплаты", ДанныеЗаказа.ДокументОплаты.Контрагент);
		ИначеЕсли ТипЗнч(ДанныеЗаказа.ДокументОплаты) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтруктураПоискаОплат.Вставить("ТипОплатыНаСайте", Перечисления.ТипыОплатНаСайте.Безналичные);
			СтруктураПоискаОплат.Вставить("АналитикаОплаты", ДанныеЗаказа.ДокументОплаты.Контрагент);
		ИначеЕсли ТипЗнч(ДанныеЗаказа.ДокументОплаты) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтруктураПоискаОплат.Вставить("ТипОплатыНаСайте", Перечисления.ТипыОплатНаСайте.Эквайринг);
			СтруктураПоискаОплат.Вставить("АналитикаОплаты", ДанныеЗаказа.ДокументОплаты.ЭквайринговыйТерминал);
		КонецЕсли;
		
		МассивСоответствие = Параметры.ТаблицаСоответствияВидовОплат.НайтиСтроки(СтруктураПоискаОплат);
		Если МассивСоответствие.Количество() > 0 Тогда
			НайденноеСоответствие = МассивСоответствие[0];
			Если ЗначениеЗаполнено(НайденноеСоответствие.ИдСпособаОплатыНаСайте) Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты ИД", НайденноеСоответствие.ИдСпособаОплатыНаСайте);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденноеСоответствие.СпособОплатыНаСайте) Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод оплаты", НайденноеСоответствие.СпособОплатыНаСайте);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ОТГРУЗКИ
	Если ДанныеЗаказа.Проведен 
		И ДанныеЗаказа.КОтгрузкеОстаток <= 0 Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отгружен", Истина);
		Если НЕ Параметры.ПодчиненныеДокументы = Истина Тогда
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Номер отгрузки по 1С", ДанныеЗаказа.НомерОтгрузки);
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Дата отгрузки по 1С", ФорматДатыДляXDTO(ДанныеЗаказа.ДатаОтгрузки, Истина, Истина));
		КонецЕсли;
	Иначе
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отгружен", Ложь);
	КонецЕсли;
	
	// ДОП.ИНФО ПО ДОСТАВКЕ
	Если ЗначениеЗаполнено(ДанныеЗаказа.СлужбаДоставки) И НЕ Параметры.ПодчиненныеДокументы = Истина Тогда
		
		ЗаполнитьСвойстваДоставки(ЗначенияРеквизитовXDTO, ПакетCML, ДанныеЗаказа, Параметры);
		
	КонецЕсли;
	
	// СТАТУС ЗАКАЗА
	Если Параметры.Свойство("ТаблицаСоответствияСтатусовЗаказов")
		И Параметры.ТаблицаСоответствияСтатусовЗаказов <> Неопределено Тогда 
		
		НайденноеСоответствие = Параметры.ТаблицаСоответствияСтатусовЗаказов.Найти(ДанныеЗаказа.СостояниеЗаказа, "СостояниеЗаказаПокупателя");
		Если НайденноеСоответствие <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(НайденноеСоответствие.ИДСтатусаЗаказаНаСайте) Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Статуса заказа ИД", НайденноеСоответствие.ИДСтатусаЗаказаНаСайте);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденноеСоответствие.СтатусЗаказаНаСайте) Тогда
				СтатусНаСайте = НайденноеСоответствие.СтатусЗаказаНаСайте;
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Статус заказа", СтатусНаСайте);
			КонецЕсли;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Вид заказа", Параметры.ВидЗаказа);
		КонецЕсли;
		
	КонецЕсли;
	
	// Выгрузка выбранных в узле обмена доп. реквизитов заказа
	ДопРеквизитыЗаказа = УправлениеСвойствами.ЗначенияСвойств(ДанныеЗаказа.ЗаказПокупателя, Истина, Ложь);
	Если Параметры.Свойство("НастройкиВыгрузкиДопРеквизитовЗаказов") И НЕ ПустаяСтрока(Параметры.НастройкиВыгрузкиДопРеквизитовЗаказов) Тогда
		
		СоответствиеПолейДопРеквизитов = ЧтениеJSONВСтруктуру(Параметры.НастройкиВыгрузкиДопРеквизитовЗаказов, Истина);
		Для каждого данныеРеквизита Из ДопРеквизитыЗаказа Цикл
			
			Если ПустаяСтрока(данныеРеквизита.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючРеквизита = данныеРеквизита.Свойство.ИдентификаторДляФормул;
			ИмяВыгрузкиРеквизита = СоответствиеПолейДопРеквизитов.Получить(КлючРеквизита);
			
			Если ИмяВыгрузкиРеквизита <> Неопределено Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, ИмяВыгрузкиРеквизита, данныеРеквизита.Значение);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли; 
	
	ДокументXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	
КонецПроцедуры

Процедура ЗаписатьКИ(КонтрагентОбъект, ПредставлениеКИ, ВидКИ, ТипКИ, Замещать)
	
	Если Замещать Тогда
		ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
		НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
		Если НайденныеСтрокиКИ.Количество()<>0 Тогда
			КонтрагентОбъект.КонтактнаяИнформация.Удалить(НайденныеСтрокиКИ[0]);
		КонецЕсли;
	ИначеЕсли НЕ ВидКИ.РазрешитьВводНесколькихЗначений Тогда
		объектКонтактнойИнформации = ВидКИ.ПолучитьОбъект();
		Попытка
			объектКонтактнойИнформации.Заблокировать();
			объектКонтактнойИнформации.РазрешитьВводНесколькихЗначений = Истина;
			объектКонтактнойИнформации.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СокрЛП(ПредставлениеКИ), ВидКИ);
	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект, Значение, ВидКИ, , Ложь);	
	
КонецПроцедуры

Функция ПроверитьДублированиеКИ(КонтрагентОбъект, ПредставлениеКИ, ВидКИ, ТипКИ)
	
	ОтборКИ = Новый Структура("Вид,Тип", ВидКИ, ТипКИ);
	НайденныеСтрокиКИ = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(ОтборКИ);
	Для каждого СтрокаНайдена Из НайденныеСтрокиКИ Цикл
		Если СокрЛП(НРег(СтрокаНайдена.Представление)) = СокрЛП(НРег(ПредставлениеКИ)) Тогда
			// КИ найдена
			Возврат Истина;
		КонецЕсли;
		
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонВЗаказе = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(ПредставлениеКИ);
			ТелефонКонтрагента = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаНайдена.НомерТелефона);
			Если ТелефонВЗаказе<>"" И ТелефонКонтрагента = ТелефонВЗаказе Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			И СокрЛП(НРег(СтрокаНайдена.АдресЭП)) = СокрЛП(НРег(ПредставлениеКИ)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Представление = &Представление
	|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОбъект.Ссылка);
	Запрос.УстановитьПараметр("Представление", ПредставлениеКИ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 3 Тогда
		// не более 3 одинаковых КИ любых типов в карточке
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#Область Запросы

// Получает данные, необходимые для выгрузки классификатора, каталога и пакета предложений
// и добавляет в структуру Параметры.
//
Процедура ПодготовитьДанныеДляВыгрузки(Параметры)
	
	// Компоновщик настроек.
	
	КомпоновщикНастроек = ПолучитьКомпоновщикНастроекВыгрузкиТоваров(Параметры.СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьХарактеристики");
	ПараметрСКД.Значение = Параметры.ИспользоватьХарактеристики;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьНаборы");
	ПараметрСКД.Значение = Параметры.ИспользоватьНаборы;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОрганизацияВладелецКаталога");
	ПараметрСКД.Значение = Параметры.ОрганизацияВладелецКаталога;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидыЦен");
	ПараметрСКД.Значение = Параметры.МассивВидовЦен;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УчетВалютныхОпераций");
	ПараметрСКД.Значение = Параметры.УчетВалютныхОпераций;
	ПараметрСКД.Использование = Истина;
	
	Если Параметры.ВыгружатьКартинки Тогда 
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РазрешенныеТипыКартинок");
		ПараметрСКД.Значение = Параметры.РазрешенныеТипыКартинок;
		ПараметрСКД.Использование = Истина;
		
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РазрешенныеТипыФайлов");
		ПараметрСКД.Значение = Параметры.РазрешенныеТипыФайлов;
		ПараметрСКД.Использование = Истина;		
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РазрешенныеТипыНоменклатуры");
	ПараметрСКД.Значение = Параметры.РазрешенныеТипыНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВыгружатьКатегории");
	ПараметрСКД.Значение = ?(Параметры.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры,
	Истина, Ложь);
	ПараметрСКД.Использование = Истина;
	
	// Отборы.
	
	НастройкиСтруктураКаталога = Новый Структура;
	НастройкиСтруктураКаталога.Вставить("Группы", Параметры.СтрокаТаблицыКаталогов.Группы);
	НастройкиСтруктураКаталога.Вставить("РучнаяНастройкаКаталога", Параметры.РучнаяНастройкаКаталога);
	НастройкиСтруктураКаталога.Вставить("ОтборНоменклатураРучнаяНастройкаКаталога", Параметры.ОтборНоменклатураРучнаяНастройкаКаталога);
	
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		ИзменитьОтборКомпоновщика(КомпоновщикНастроек,
		НастройкиСтруктураКаталога,
		Параметры.МассивИзмененийНоменклатуры);
		
	Иначе
		
		Если Параметры.Свойство("КодГруппы") И ЗначениеЗаполнено(Параметры.КодГруппы) Тогда
			// отборы по параметрам для веб-сервиса
			
			ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоКоду(Параметры.КодГруппы);
			Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
				НастройкиСтруктураКаталога.Вставить("Группы", ГруппаНоменклатуры);
				ИзменитьОтборКомпоновщика(КомпоновщикНастроек, ГруппаНоменклатуры);
			КонецЕсли;
			
		ИначеЕсли Параметры.ОбменЗаписьНаУслуги И Параметры.РежимВыгрузкиУслуг Тогда
			// отборы запись на услуги
			ИзменитьОтборКомпоновщика(КомпоновщикНастроек, НастройкиСтруктураКаталога, Параметры.Услуги);
		Иначе
			ИзменитьОтборКомпоновщика(КомпоновщикНастроек, НастройкиСтруктураКаталога);
		КонецЕсли;
		
		Если Параметры.Свойство("ДатаИзменения") И ТипЗнч(Параметры.ДатаИзменения) = Тип("Дата") И ЗначениеЗаполнено(Параметры.ДатаИзменения) Тогда
			
			НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = "ПрограммныйОтборПоДатеИзменения";
			НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Номенклатура.ДатаИзменения");
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			НовыйЭлемент.ПравоеЗначение = Параметры.ДатаИзменения;
			НовыйЭлемент.Использование 	= Истина;
			
		КонецЕсли;
		
		Если Параметры.Свойство("КодСклада") И ЗначениеЗаполнено(Параметры.КодСклада) Тогда
			
			Склад = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Параметры.КодСклада);
			Если Склад = Неопределено Тогда
				Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
			
			НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = "ПрограммныйОтборПоСкладу";
			НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СкладДляОстатков");
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлемент.ПравоеЗначение = Склад;
			НовыйЭлемент.Использование 	= Истина;
			
			НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = "ПрограммныйОтборПоОстатку";
			НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Остаток");
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Больше;
			НовыйЭлемент.ПравоеЗначение = 0;
			НовыйЭлемент.Использование 	= Истина;
			
		КонецЕсли;
		
		Если Параметры.Свойство("КодОрганизации") И ЗначениеЗаполнено(Параметры.КодОрганизации) Тогда
			
			Организация = Справочники.Организации.НайтиПоКоду(Параметры.КодОрганизации);
			Если Организация = Неопределено Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
			НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = "ПрограммныйОтборПоОрганизации";
			НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлемент.ПравоеЗначение = Организация;
			НовыйЭлемент.Использование 	= Истина;
			
			Если Не ЗначениеЗаполнено(Параметры.КодСклада) Тогда
				НовыйЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = "ПрограммныйОтборПоОстатку";
				НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Остаток");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Больше;
				НовыйЭлемент.ПравоеЗначение = 0;
				НовыйЭлемент.Использование 	= Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запрос.
	
	СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
	Запрос = ПолучитьЗапросИзМакетаКомпоновки(КомпоновщикНастроек, СхемаВыгрузкиТоваров);
	
	Запрос.УстановитьПараметр("МаксимальноРазрешенныйРазмерКартинки", 200000); //200 Кб
	Запрос.УстановитьПараметр("УзелОбмена", Параметры.УзелОбмена);
	Запрос.УстановитьПараметр("ТекущаяДата", МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясСеанса()));
	Запрос.УстановитьПараметр("ВыгружатьДнейГрафика", Параметры.ВыгружатьДнейГрафика);
	Запрос.УстановитьПараметр("МинимальныйИнтервалУслуги", 30); //30 минут
	Если Параметры.РучнаяНастройкаКаталога > 0 Тогда
		Запрос.УстановитьПараметр("РучнаяНастройкаКаталога", Параметры.РучнаяНастройкаКаталога);
		Запрос.УстановитьПараметр("ИдентификаторКаталога", Параметры.СтрокаТаблицыКаталогов.ИдентификаторКаталога);
	КонецЕсли;
	Запрос.УстановитьПараметр("УчетНоменклатурыПоставщиков", Параметры.УчетНоменклатурыПоставщиков);
	Запрос.УстановитьПараметр("ОбязательноеНаличиеФотографий", Параметры.ОбязательноеНаличиеФотографий);
	Запрос.УстановитьПараметр("ВыгружатьТоварыТолькоСНеНулевойЦеной", Параметры.ВыгружатьТоварыТолькоСНеНулевойЦеной);
	Запрос.УстановитьПараметр("НастройкиВыгрузкиОстатковПоставщиковНаСайт", Параметры.НастройкиВыгрузкиОстатковПоставщиковНаСайт);
	
	Если Параметры.ОбменЗаписьНаУслуги Тогда
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Параметры.ПроизводственныйКалендарь); //из организации
	КонецЕсли;
	ДобавитьЗапросыВПакет(Запрос.Текст, Параметры);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Параметры.Вставить("ВыборкаЦен", МассивРезультатовЗапроса[17].Выбрать());
	Параметры.Вставить("ВыборкаСкладов", МассивРезультатовЗапроса[18].Выбрать());
	
	ТаблицаОстатковПоСкладам = МассивРезультатовЗапроса[6].Выгрузить();
	ТаблицаОстатковПоСкладам.Индексы.Добавить("Номенклатура, Характеристика");
	Параметры.Вставить("ТаблицаОстатковПоСкладам", ТаблицаОстатковПоСкладам);
	
	Параметры.Вставить("ВыборкаВидовЦен", МассивРезультатовЗапроса[20].Выбрать());
	
	Параметры.Вставить("ДеревоСвойствХарактеристик", 
	МассивРезультатовЗапроса[21].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Параметры.Вставить("ВыборкаСвойствНоменклатурыДляКлассификатора", 
	МассивРезультатовЗапроса[26].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Параметры.Вставить("ВыборкаСвойствХарактеристикДляКлассификатора", 
	МассивРезультатовЗапроса[36].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	РезультатЗапросаСвойствНоменклатуры = МассивРезультатовЗапроса[27];
	Если РезультатЗапросаСвойствНоменклатуры.Пустой() Тогда
		ВыборкаСвойствНоменклатуры = Неопределено;
	Иначе
		ВыборкаСвойствНоменклатуры = РезультатЗапросаСвойствНоменклатуры.Выбрать();
		ВыборкаСвойствНоменклатуры.Следующий();
	КонецЕсли;
	
	Параметры.Вставить("ВыборкаСвойствНоменклатуры", ВыборкаСвойствНоменклатуры);
	
	РезультатЗапросаДанныхОрганизацииВладельцаКаталога = МассивРезультатовЗапроса[30];
	Если РезультатЗапросаДанныхОрганизацииВладельцаКаталога.Пустой() Тогда
		ВыборкаДанныхОрганизацииВладельцаКаталога = Неопределено;
	Иначе
		ВыборкаДанныхОрганизацииВладельцаКаталога = РезультатЗапросаДанныхОрганизацииВладельцаКаталога.Выбрать();
		ВыборкаДанныхОрганизацииВладельцаКаталога.Следующий();
	КонецЕсли;
	
	Параметры.Вставить("ДанныеОрганизацииВладельцаКаталога", ВыборкаДанныхОрганизацииВладельцаКаталога);
	
	Параметры.Вставить("ВыборкаНоменклатуры", МассивРезультатовЗапроса[31].Выбрать());
	
	Параметры.Вставить("ДеревоГрупп", МассивРезультатовЗапроса[33].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
	
	ВыборкаФайлов = Неопределено;
	ВыборкаКартинкиХарактеристик = Неопределено;
	Если Параметры.ВыгружатьКартинки Тогда
		
		РезультатЗапросаФайлов = МассивРезультатовЗапроса[34];
		Если РезультатЗапросаФайлов.Пустой() Тогда
			ВыборкаФайлов = Неопределено;
		Иначе
			ВыборкаФайлов = РезультатЗапросаФайлов.Выбрать();
			ВыборкаФайлов.Следующий();
		КонецЕсли;
		
		РезультатЗапросаКартинкиХарактеристик = МассивРезультатовЗапроса[39];
		Если РезультатЗапросаКартинкиХарактеристик.Пустой() Тогда
			ВыборкаКартинкиХарактеристик = Неопределено;
		Иначе
			ВыборкаКартинкиХарактеристик = РезультатЗапросаКартинкиХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаКартинкиХарактеристик.Следующий();
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Вставить("ВыборкаФайлов", ВыборкаФайлов);
	Параметры.Вставить("ВыборкаКартинкиХарактеристик", ВыборкаКартинкиХарактеристик);
	
	Параметры.Вставить("КатегорииНоменклатуры", МассивРезультатовЗапроса[35].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Параметры.Вставить("ВыборкаЕдиницИзмеренияДляКлассификатора", 
	МассивРезультатовЗапроса[41].Выбрать());
	
	Параметры.Вставить("ДопРеквизитыНоменклатуры", 
	МассивРезультатовЗапроса[37].Выбрать());
	
	Если Параметры.ИспользоватьНаборы Тогда
		ТаблицаОстаткиНаборов = МассивРезультатовЗапроса[46].Выгрузить();
		ТаблицаОстаткиНаборов.Индексы.Добавить("Номенклатура, Характеристика");
		Параметры.Вставить("ТаблицаОстаткиНаборов", ТаблицаОстаткиНаборов);
		ТаблицаЦеныНаборов = МассивРезультатовЗапроса[47].Выгрузить();
		ТаблицаЦеныНаборов.Индексы.Добавить("Номенклатура, Характеристика, ВидЦен");
		Параметры.Вставить("ТаблицаЦеныНаборов", ТаблицаЦеныНаборов);
	КонецЕсли; 
	
	Если Параметры.ОбменЗаписьНаУслуги И Параметры.РежимВыгрузкиУслуг Тогда
		Параметры.Вставить("ТаблицаГрафикЗанятостиРесурсов", МассивРезультатовЗапроса[55]);
		Параметры.Вставить("ТаблицаРесурсыУслуги", МассивРезультатовЗапроса[56]);
	КонецЕсли;
	
	Параметры.Вставить("СоответствияОбъектовСайта", Новый Соответствие);
	
КонецПроцедуры

// Получает запрос из макета компоновки и инициализирует параметры запроса.
//
// Параметры:
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
// 
// Возвращаемое значение:
//   Запрос - запрос, полученный из макета компоновки данных.
//
Функция ПолучитьЗапросИзМакетаКомпоновки(КомпоновщикНастроек, СхемаКомпоновки) Экспорт
	
	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

// Формирует пакетный запрос для получения необходимых данных для выгрузки классификатора, каталога и пакета предложений.
//
Процедура ДобавитьЗапросыВПакет(ТекстЗапроса, Параметры) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	""18"" КАК НомерЗапроса,
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.Наименование КАК Наименование,
	|	СтруктурныеЕдиницы.КонтактнаяИнформация.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Тип КАК Тип,
	|		Вид КАК Вид,
	|		Представление КАК Представление,
	|		Значение КАК Значение,
	|		Страна КАК Страна,
	|		Регион КАК Регион,
	|		Город КАК Город,
	|		АдресЭП КАК АдресЭП,
	|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|		НомерТелефона КАК НомерТелефона,
	|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|	) КАК КонтактнаяИнформация
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	(СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|			ИЛИ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаШтрихкодыДляЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""21"" КАК НомерЗапроса,
	|	ВременнаяТаблицаВидыЦен.ВидЦен КАК ВидЦен,
	|	ВременнаяТаблицаВидыЦен.ВалютаЦены КАК ВалютаЦены,
	|	ВременнаяТаблицаВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""22"" КАК НомерЗапроса,
	|	ВременнаяТаблицаЦены.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЦены.Характеристика КАК Характеристика,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО ВременнаяТаблицаЦены.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ИТОГИ ПО
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""23"" КАК НомерЗапроса,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ ВТСвойстваХарактеристик
	|ИЗ
	|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО ВременнаяТаблицаЦены.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""24"" КАК НомерЗапроса,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ПометкаУдаления КАК ПометкаУдаления,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Родитель КАК Родитель,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.КатегорияНоменклатуры.НаборСвойств КАК НаборСвойств,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Код КАК Код,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Наименование КАК Наименование,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Артикул КАК Артикул,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки.ФайлКартинки КАК ФайлКартинки
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатура
	|ИЗ
	|	ВременнаяТаблицаНоменклатураХарактеристикиОстатки КАК ВременнаяТаблицаНоменклатураХарактеристикиОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьТоварыТолькоСНеНулевойЦеной
	|				ТОГДА ВременнаяТаблицаНоменклатураХарактеристикиОстатки.Номенклатура В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаЦены.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|						ГДЕ
	|							ВременнаяТаблицаЦены.Цена > 0)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаНоменклатураХарактеристикиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	""26"" КАК НомерЗапроса,
	|	ДополнительныеРеквизиты.Номенклатура КАК Номенклатура,
	|	ДополнительныеРеквизиты.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗначенияДополнительныхРеквизитов.Значение КАК Значение,
	|	ЗначенияДополнительныхРеквизитов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСвойстваНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|	ИЗ
	|		ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|			ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|						И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ВременнаяТаблицаНоменклатура.НаборСвойств
	|					ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияДополнительныхРеквизитов
	|		ПО ДополнительныеРеквизиты.Номенклатура = ЗначенияДополнительныхРеквизитов.Ссылка
	|			И ДополнительныеРеквизиты.Свойство = ЗначенияДополнительныхРеквизитов.Свойство
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""26"",
	|	ДополнительныеСведения.Номенклатура,
	|	ДополнительныеСведения.ИдентификаторДляФормул,
	|	ДополнительныеСведения.Свойство,
	|	ЗначенияДополнительныхСведений.Значение,
	|	0
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|		НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
	|	ИЗ
	|		ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|			ПО (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|						И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ВременнаяТаблицаНоменклатура.НаборСвойств
	|					ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие))) КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияДополнительныхСведений
	|		ПО ДополнительныеСведения.Номенклатура = ЗначенияДополнительныхСведений.Объект
	|			И ДополнительныеСведения.Свойство = ЗначенияДополнительныхСведений.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""27"" КАК НомерЗапроса,
	|	ТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
	|	ТаблицаСвойстваНоменклатуры.Свойство.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ТаблицаСвойстваНоменклатуры.Свойство.Заголовок КАК Наименование,
	|	ТаблицаСвойстваНоменклатуры.Свойство.НаборСвойств КАК НаборСвойств,
	|	ТаблицаСвойстваНоменклатуры.Свойство.ТипЗначения КАК ТипЗначения,
	|	ТаблицаСвойстваНоменклатуры.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВременнаяТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
	|		ВременнаяТаблицаСвойстваНоменклатуры.Значение КАК Значение
	|	ИЗ
	|		ВременнаяТаблицаСвойстваНоменклатуры КАК ВременнаяТаблицаСвойстваНоменклатуры) КАК ТаблицаСвойстваНоменклатуры
	|ИТОГИ
	|	МАКСИМУМ(ИдентификаторДляФормул)
	|ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""28"" КАК НомерЗапроса,
	|	ВременнаяТаблицаСвойстваНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаСвойстваНоменклатуры.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ВременнаяТаблицаСвойстваНоменклатуры.Свойство КАК Свойство,
	|	ВременнаяТаблицаСвойстваНоменклатуры.Значение КАК Значение,
	|	ВременнаяТаблицаСвойстваНоменклатуры.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВременнаяТаблицаСвойстваНоменклатуры КАК ВременнаяТаблицаСвойстваНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	НомерСтроки,
	|	Свойство,
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаСвойстваНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""30"" КАК НомерЗапроса,
	|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ВременнаяТаблицаШтрихкодыДляКаталога
	|ИЗ
	|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВременнаяТаблицаНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И (ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНоменклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""31"" КАК НомерЗапроса,
	|	Организации.Ссылка КАК Контрагент,
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.ЮридическоеФизическоеЛицо КАК ЮрФизЛицо,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.КонтактнаяИнформация.(
	|		Тип КАК Тип,
	|		Вид КАК Вид,
	|		Представление КАК Представление,
	|		Значение КАК Значение
	|	) КАК КонтактнаяИнформация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &ОрганизацияВладелецКаталога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""32"" КАК НомерЗапроса,
	|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ВременнаяТаблицаНоменклатура.Родитель КАК Родитель,
	|	ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ВременнаяТаблицаНоменклатура.Код КАК Код,
	|	ВременнаяТаблицаНоменклатура.Наименование КАК Наименование,
	|	ВременнаяТаблицаНоменклатура.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВременнаяТаблицаНоменклатура.Номенклатура.Комментарий КАК Комментарий,
	|	ВременнаяТаблицаНоменклатура.Артикул КАК Артикул,
	|	ВременнаяТаблицаНоменклатура.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВременнаяТаблицаНоменклатура.Номенклатура.Вес КАК Вес,
	|	ВременнаяТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВременнаяТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВременнаяТаблицаНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	ВременнаяТаблицаНоменклатура.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияНаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВременнаяТаблицаНоменклатура.ЕдиницаИзмеренияМеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	ВременнаяТаблицаНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаНоменклатура.ФайлКартинки КАК ФайлКартинки,
	|	ЕСТЬNULL(ВременнаяТаблицаШтрихкодыДляКаталога.Штрихкод, """") КАК ШтрихКод,
	|	ЕСТЬNULL(СоответствияОбъектовСайта.УникальныйИдентификаторСайта, """") КАК ИдСайта
	|ИЗ
	|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаШтрихкодыДляКаталога КАК ВременнаяТаблицаШтрихкодыДляКаталога
	|		ПО ВременнаяТаблицаНоменклатура.Номенклатура = ВременнаяТаблицаШтрихкодыДляКаталога.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|		ПО (СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена)
	|			И (НЕ СоответствияОбъектовСайта.ОбъектВыгружен)
	|			И ВременнаяТаблицаНоменклатура.Номенклатура = СоответствияОбъектовСайта.СсылкаНаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаШтрихкодыДляКаталога";
	
	Если Параметры.РучнаяНастройкаКаталога > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""34"" КАК НомерЗапроса,
		|	ОбменССайтомСтруктураКаталога.ГруппаКаталога КАК Номенклатура,
		|	ОбменССайтомСтруктураКаталога.Идентификатор КАК Идентификатор,
		|	ОбменССайтомСтруктураКаталога.РодительИдентификатор КАК РодительИдентификатор
		|ИЗ
		|	РегистрСведений.ОбменССайтомСтруктураКаталога КАК ОбменССайтомСтруктураКаталога
		|ГДЕ
		|	ОбменССайтомСтруктураКаталога.УзелОбмена = &УзелОбмена
		|	И ОбменССайтомСтруктураКаталога.ИдентификаторКаталога = &ИдентификаторКаталога
		|	И ОбменССайтомСтруктураКаталога.ЭтоГруппа";
	ИначеЕсли Параметры.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""34"" КАК НомерЗапроса,
		|	КатегорииНоменклатуры.Ссылка КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК НоменклатураГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
		|		ПО НоменклатураГруппы.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""34"" КАК НомерЗапроса,
		|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|ИТОГИ ПО
		|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	КонецЕсли;
	
	Если Параметры.ВыгружатьКартинки Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""35"" КАК НомерЗапроса,
		|	ВложенныйЗапрос_ФайлыНоменклатур.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос_ФайлыНоменклатур.Файл КАК Файл,
		|	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		|	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
		|	НоменклатураПрисоединенныеФайлы.Том КАК Том,
		|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
		|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу,
		|	ВЫБОР
		|		КОГДА НоменклатураПрисоединенныеФайлы.Размер > &МаксимальноРазрешенныйРазмерКартинки
		|			ТОГДА ""СлишкомБольшойФайл""
		|		ИНАЧЕ ПрисоединенныеФайлы.ДвоичныеДанныеФайла
		|	КОНЕЦ КАК ХранимыйФайл,
		|	ЕСТЬNULL(СортировкаФайловДляСайта.Сортировка, 0) КАК Сортировка,
		|	НоменклатураПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
		|	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура,
		|		НоменклатураПрисоединенныеФайлы.Ссылка КАК Файл
		|	ИЗ
		|		ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|			ПО (НоменклатураПрисоединенныеФайлы.ВладелецФайла = ВременнаяТаблицаНоменклатура.Номенклатура)
		|				И (НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления)
		|	ГДЕ
		|		(НоменклатураПрисоединенныеФайлы.Расширение В (&РазрешенныеТипыКартинок)
		|				ИЛИ НоменклатураПрисоединенныеФайлы.Расширение В (&РазрешенныеТипыФайлов))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НоменклатураПрисоединенныеФайлы.Ссылка,
		|		ВременнаяТаблицаНоменклатура.Номенклатура) КАК ВложенныйЗапрос_ФайлыНоменклатур
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ПрисоединенныеФайлы
		|			ПО НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл
		|				И (НоменклатураПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СортировкаФайловДляСайта КАК СортировкаФайловДляСайта
		|			ПО НоменклатураПрисоединенныеФайлы.Ссылка = СортировкаФайловДляСайта.Файл
		|		ПО ВложенныйЗапрос_ФайлыНоменклатур.Файл = НоменклатураПрисоединенныеФайлы.Ссылка
		|			И ВложенныйЗапрос_ФайлыНоменклатур.Номенклатура = НоменклатураПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	(НоменклатураПрисоединенныеФайлы.Расширение В (&РазрешенныеТипыКартинок)
		|			ИЛИ НоменклатураПрисоединенныеФайлы.Расширение В (&РазрешенныеТипыФайлов))
		|	И ЕСТЬNULL(СортировкаФайловДляСайта.ВыгружатьНаСайт, ИСТИНА) = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Сортировка,
		|	ДатаСоздания,
		|	ДатаМодификацииУниверсальная";
		
	Иначе
		// Пустой запрос
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ ""35"" КАК НомерЗапроса, Неопределено КАК Номенклатура";		
	КонецЕсли;
	
	// Категории для выгрузки отдельным разделом
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""36"" КАК НомерЗапроса,
	|	ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры КАК Категория,
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы КАК Ид,
	|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта КАК ИдСайта,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|		ПО (СоответствияОбъектовСайта.СсылкаНаОбъект = ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры)
	|			И (СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|		ПО ВременнаяТаблицаНоменклатура.КатегорияНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	НЕ ВременнаяТаблицаНоменклатура.Номенклатура.ЭтоГруппа
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗапроса,
	|	НомерСтроки,
	|	Свойство
	|ИТОГИ
	|	МАКСИМУМ(Ид),
	|	МАКСИМУМ(ИдСайта)
	|ПО
	|	Категория";
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + 
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""37"" КАК НомерЗапроса,
	|	ВТСвойстваХарактеристик.Свойство КАК Свойство,
	|	ВТСвойстваХарактеристик.Свойство.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ВТСвойстваХарактеристик.Свойство.Заголовок КАК Наименование,
	|	ВТСвойстваХарактеристик.Свойство.НаборСвойств КАК НаборСвойств,
	|	ВТСвойстваХарактеристик.Свойство.ТипЗначения КАК ТипЗначения,
	|	ВТСвойстваХарактеристик.Значение КАК Значение
	|ИЗ
	|	ВТСвойстваХарактеристик КАК ВТСвойстваХарактеристик
	|ИТОГИ ПО
	|	Свойство
	|";
	
	// Доп.реквизиты Номенклатуры, перечисленные в узле обмена 
	ТекстЗапросаДопРеквизиты = "";
	Если ЗначениеЗаполнено(Параметры.НастройкиВыгрузкиРеквизитов) Тогда
		НастройкиВыгрузкиРеквизитов = ЧтениеJSONВСтруктуру(Параметры.НастройкиВыгрузкиРеквизитов);
		
		Для каждого стр Из НастройкиВыгрузкиРеквизитов Цикл
			ТекстЗапросаДопРеквизиты = ТекстЗапросаДопРеквизиты + "
			|	,ВременнаяТаблицаНоменклатура.Номенклатура." + стр.Ключ + " КАК " + стр.Ключ;
		КонецЦикла;
	КонецЕсли;
	ТекстШаблон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""38"" КАК НомерЗапроса,
	|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура
	|	,""#Реквизиты#""
	|ИЗ
	|	ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура";	
	ТекстШаблон = СтрЗаменить(ТекстШаблон, ",""#Реквизиты#""", ТекстЗапросаДопРеквизиты);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "////////////////////////////" + Символы.ПС + ТекстШаблон;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + " 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""39"" КАК НомерЗапроса,
	|	ВременнаяТаблицаЦены.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВременнаяТаблицаЦеныРазличные
	|ИЗ
	|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|
	|";
	
	// Картинки для характеристик
	Если Параметры.ВыгружатьКартинки Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""40"" КАК НомерЗапроса,
		|	ВложенныйЗапрос_ФайлыХарактеристик.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос_ФайлыХарактеристик.Файл КАК Файл,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Описание КАК Описание,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Том КАК Том,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу,
		|	ВЫБОР
		|		КОГДА ХарактеристикиНоменклатурыПрисоединенныеФайлы.Размер > &МаксимальноРазрешенныйРазмерКартинки
		|			ТОГДА ""СлишкомБольшойФайл""
		|		ИНАЧЕ ПрисоединенныеФайлы.ДвоичныеДанныеФайла
		|	КОНЕЦ КАК ХранимыйФайл,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ЕСТЬNULL(СортировкаФайловДляСайта.Сортировка, 0) КАК Сортировка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВременнаяТаблицаЦены.Характеристика КАК Характеристика,
		|		ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка КАК Файл
		|	ИЗ
		|		ВременнаяТаблицаЦеныРазличные КАК ВременнаяТаблицаЦены
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
		|			ПО (ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла = ВременнаяТаблицаЦены.Характеристика)
		|				И (НЕ ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления)
		|	ГДЕ
		|		ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение В(&РазрешенныеТипыКартинок)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка,
		|		ВременнаяТаблицаЦены.Характеристика) КАК ВложенныйЗапрос_ФайлыХарактеристик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ПрисоединенныеФайлы
		|			ПО ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл
		|				И (ХарактеристикиНоменклатурыПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СортировкаФайловДляСайта КАК СортировкаФайловДляСайта
		|			ПО ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка = СортировкаФайловДляСайта.Файл
		|		ПО ВложенныйЗапрос_ФайлыХарактеристик.Характеристика = ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла
		|			И ВложенныйЗапрос_ФайлыХарактеристик.Файл = ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение В(&РазрешенныеТипыКартинок)
		|	И ЕСТЬNULL(СортировкаФайловДляСайта.ВыгружатьНаСайт, ИСТИНА) = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос_ФайлыХарактеристик.Характеристика,
		|	Сортировка,
		|	ДатаСоздания,
		|	ДатаМодификацииУниверсальная
		|ИТОГИ ПО
		|	Характеристика";
		
	Иначе
		// Пустой запрос
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"УНИЧТОЖИТЬ ВременнаяТаблицаНоменклатура";
	КонецЕсли;
	
	// Единицы измерения в Классификатор
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""41"" КАК НомерЗапроса,
	|	ВременнаяТаблицаЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаЦены.ЕдиницаИзмерения.Код КАК Код,
	|	ВременнаяТаблицаЦены.ЕдиницаИзмерения.НаименованиеПолное КАК НаименованиеПолное,
	|	ВременнаяТаблицаЦены.ЕдиницаИзмерения.МеждународноеСокращение КАК МеждународноеСокращение
	|ПОМЕСТИТЬ втЕдиницыИзмерения
	|ИЗ
	|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВременнаяТаблицаЦены.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""41"",
	|	ВременнаяТаблицаЦены.Номенклатура.ЕдиницаИзмерения,
	|	ВременнаяТаблицаЦены.Номенклатура.ЕдиницаИзмерения.Код,
	|	ВременнаяТаблицаЦены.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное,
	|	ВременнаяТаблицаЦены.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|ИЗ
	|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""42"" КАК НомерЗапроса,
	|	втЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втЕдиницыИзмерения.Код КАК Код,
	|	втЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное,
	|	втЕдиницыИзмерения.МеждународноеСокращение КАК МеждународноеСокращение
	|ИЗ
	|	втЕдиницыИзмерения КАК втЕдиницыИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	втЕдиницыИзмерения.ЕдиницаИзмерения,
	|	втЕдиницыИзмерения.Код,
	|	втЕдиницыИзмерения.НаименованиеПолное,
	|	втЕдиницыИзмерения.МеждународноеСокращение";
	
	Если Параметры.ИспользоватьНаборы Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ
		|	""43"" КАК НомерЗапроса,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаЦены.Номенклатура КАК Справочник.Номенклатура) КАК НоменклатураНабора,
		|	ВременнаяТаблицаЦены.Характеристика КАК ХарактеристикаНабора,
		|	ВременнаяТаблицаЦены.ВидЦен КАК ВидЦен,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СУММА(СоставНаборов.Количество * ВЫБОР
		|			КОГДА СоставНаборов.ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
		|				ТОГДА СоставНаборов.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТаблицаССоставом
		|ИЗ
		|	ВременнаяТаблицаЦены КАК ВременнаяТаблицаЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставНаборов КАК СоставНаборов
		|		ПО ВременнаяТаблицаЦены.Номенклатура = СоставНаборов.НоменклатураНабора
		|			И (ВременнаяТаблицаЦены.Характеристика = СоставНаборов.ХарактеристикаНабора
		|				ИЛИ СоставНаборов.Общий
		|					И ВременнаяТаблицаЦены.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|ГДЕ
		|	&ИспользоватьНаборы
		|	И ВременнаяТаблицаЦены.Номенклатура.ЭтоНабор
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставНаборов.Характеристика,
		|	СоставНаборов.Номенклатура,
		|	ВременнаяТаблицаЦены.ВидЦен,
		|	ВременнаяТаблицаЦены.Номенклатура,
		|	ВременнаяТаблицаЦены.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""44"" КАК НомерЗапроса,
		|	ТаблицаССоставом.Номенклатура КАК Номенклатура,
		|	ТаблицаССоставом.Характеристика КАК Характеристика,
		|	ТаблицаССоставом.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ НоменклатураСостава
		|ИЗ
		|	ТаблицаССоставом КАК ТаблицаССоставом
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаССоставом.Номенклатура,
		|	ТаблицаССоставом.Характеристика,
		|	ТаблицаССоставом.ВидЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""45"" КАК НомерЗапроса,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|					КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
		|						ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|					ИНАЧЕ 1
		|				КОНЕЦ = 0
		|				ТОГДА 0
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ВЫБОР
		|					КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
		|						ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
		|ПОМЕСТИТЬ ЦеныКомплектующих
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦен В
		|					(ВЫБРАТЬ
		|						ВременнаяТаблицаВидыЦен.ВидЦен
		|					ИЗ
		|						ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен)
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						НоменклатураСостава.Номенклатура,
		|						НоменклатураСостава.Характеристика
		|					ИЗ
		|						НоменклатураСостава)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""46"" КАК НомерЗапроса,
		|	ТаблицаССоставом.НоменклатураНабора КАК НоменклатураНабора,
		|	ТаблицаССоставом.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТаблицаССоставом.Номенклатура КАК Номенклатура,
		|	ТаблицаССоставом.Характеристика КАК Характеристика,
		|	ТаблицаССоставом.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаССоставомБезЦен
		|ИЗ
		|	ТаблицаССоставом КАК ТаблицаССоставом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""47"" КАК НомерЗапроса,
		|	ВложенныйЗапрос.НоменклатураНабора КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНабора КАК Характеристика,
		|	МИНИМУМ(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаССоставомБезЦен.НоменклатураНабора КАК НоменклатураНабора,
		|		ТаблицаССоставомБезЦен.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		ТаблицаССоставомБезЦен.Номенклатура КАК Номенклатура,
		|		ТаблицаССоставомБезЦен.Характеристика КАК Характеристика,
		|		ВЫБОР
		|			КОГДА ТаблицаССоставомБезЦен.Количество = 0
		|					ИЛИ СУММА(ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0)) <= 0
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0)) / ТаблицаССоставомБезЦен.Количество
		|		КОНЕЦ КАК Количество
		|	ИЗ
		|		ТаблицаССоставомБезЦен КАК ТаблицаССоставомБезЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|					,
		|					ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|						И (Номенклатура, Характеристика) В
		|							(ВЫБРАТЬ
		|								НоменклатураСостава.Номенклатура,
		|								НоменклатураСостава.Характеристика
		|							ИЗ
		|								НоменклатураСостава)
		|						И СтруктурнаяЕдиница В
		|							(ВЫБРАТЬ
		|								ВыбранныеСтруктурныеЕдиницы.СтруктурнаяЕдиница
		|							ИЗ
		|								ВыбранныеСтруктурныеЕдиницы КАК ВыбранныеСтруктурныеЕдиницы)) КАК ЗапасыОстатки
		|			ПО ТаблицаССоставомБезЦен.Номенклатура = ЗапасыОстатки.Номенклатура
		|				И ТаблицаССоставомБезЦен.Характеристика = ЗапасыОстатки.Характеристика
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаССоставомБезЦен.НоменклатураНабора,
		|		ТаблицаССоставомБезЦен.ХарактеристикаНабора,
		|		ТаблицаССоставомБезЦен.Количество,
		|		ТаблицаССоставомБезЦен.Номенклатура,
		|		ТаблицаССоставомБезЦен.Характеристика) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НоменклатураНабора,
		|	ВложенныйЗапрос.ХарактеристикаНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""48"" КАК НомерЗапроса,
		|	ТаблицаССоставом.НоменклатураНабора КАК Номенклатура,
		|	ТаблицаССоставом.ХарактеристикаНабора КАК Характеристика,
		|	ЦеныКомплектующих.ВидЦен КАК ВидЦен,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ЦеныКомплектующих.Цена, 0) * ТаблицаССоставом.Количество) КАК ЧИСЛО(15, 2)) КАК Цена
		|ИЗ
		|	ТаблицаССоставом КАК ТаблицаССоставом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныКомплектующих КАК ЦеныКомплектующих
		|		ПО ТаблицаССоставом.Номенклатура = ЦеныКомплектующих.Номенклатура
		|			И ТаблицаССоставом.Характеристика = ЦеныКомплектующих.Характеристика
		|			И ТаблицаССоставом.ВидЦен = ЦеныКомплектующих.ВидЦен
		|ГДЕ
		|	ТаблицаССоставом.НоменклатураНабора.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
		|	И НЕ ЦеныКомплектующих.ВидЦен ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаССоставом.НоменклатураНабора,
		|	ТаблицаССоставом.ХарактеристикаНабора,
		|	ЦеныКомплектующих.ВидЦен";
		
	Иначе
		// Пустой запрос
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ ""43"" КАК НомерЗапроса;
		|ВЫБРАТЬ ""44"" КАК НомерЗапроса;
		|ВЫБРАТЬ ""45"" КАК НомерЗапроса;
		|ВЫБРАТЬ ""46"" КАК НомерЗапроса;
		|ВЫБРАТЬ ""47"" КАК НомерЗапроса;
		|ВЫБРАТЬ ""48"" КАК НомерЗапроса";		
		
	КонецЕсли;
	
	Если Параметры.ОбменЗаписьНаУслуги И Параметры.РежимВыгрузкиУслуг Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС +
		"ВЫБРАТЬ
		|	""49"" КАК НомерЗапроса,
		|	0 КАК Поле
		|ПОМЕСТИТЬ Числа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""49"",
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""49"",
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""49"",
		|	3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""50"" КАК НомерЗапроса,
		|	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 1 КАК Поле
		|ПОМЕСТИТЬ втЧисла256
		|ИЗ
		|	Числа КАК Числа1,
		|	Числа КАК Числа2,
		|	Числа КАК Числа3,
		|	Числа КАК Числа4
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""51"" КАК НомерЗапроса,
		|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ресурс,
		|	ГрафикиРаботыРесурсов.РесурсПредприятия.КратностьПланирования КАК КратностьПланирования,
		|	ГрафикиРаботыРесурсов.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботы.Год КАК Год,
		|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ДЕНЬ,
		|	ГрафикиРаботыРесурсов.РесурсПредприятия.КратностьПланирования КАК Интервал,
		|	ГрафикиРаботы.ЧасыРаботы КАК ЧасыРаботы,
		|	ГрафикиРаботы.НомерДняЦикла КАК НомерДняЦикла,
		|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
		|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания
		|ПОМЕСТИТЬ втГрафикПлан
		|ИЗ
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ТекущаяДата, ) КАК ГрафикиРаботыРесурсов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.Перерывы КАК Перерывы
		|				ПО ГрафикиРаботы.ГрафикРаботы = Перерывы.Ссылка
		|			ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыРесурсов.ГрафикРаботы)
		|		ПО (ГрафикиРаботыРесурсов.РесурсПредприятия = НастройкиЗаписьНаУслуги.Ресурс)
		|ГДЕ
		|	ГрафикиРаботы.ВремяНачала >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И ГрафикиРаботы.ВремяНачала < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ВыгружатьДнейГрафика)
		|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ПометкаУдаления
		|	И НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""52"" КАК НомерЗапроса,
		|	КлючевыеРесурсы.Ссылка КАК Ресурс,
		|	НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) КАК День,
		|	ГОД(&ТекущаяДата) КАК Год,
		|	втГрафикПлан.КратностьПланирования КАК КратностьПланирования,
		|	втГрафикПлан.ГрафикРаботы КАК ГрафикРаботы,
		|	втГрафикПлан.Интервал КАК Интервал,
		|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ЧасыРаботы, втГрафикПлан.ЧасыРаботы) КАК ЧасыРаботы,
		|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, втГрафикПлан.ВремяНачала) КАК ВремяНачала,
		|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, втГрафикПлан.ВремяОкончания) КАК ВремяОкончания,
		|	НастройкиЗаписьНаУслуги.Длительность КАК Длительность
		|ПОМЕСТИТЬ втОтклонения
		|ИЗ
		|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
		|		ПО КлючевыеРесурсы.Ссылка = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
		|			И (ГОД(&ТекущаяДата) = ОтклоненияОтГрафиковРаботыРесурсов.Год)
		|			И (НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) = ОтклоненияОтГрафиковРаботыРесурсов.День)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|		ПО КлючевыеРесурсы.Ссылка = НастройкиЗаписьНаУслуги.Ресурс
		|			И (НастройкиЗаписьНаУслуги.ИсточникЗаписи = ЗНАЧЕНИЕ(Перечисление.ЗаписьНаУслугиИсточник.Сайт))
		|			И (НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафикПлан КАК втГрафикПлан
		|		ПО (втГрафикПлан.Ресурс = КлючевыеРесурсы.Ссылка)
		|ГДЕ
		|	НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""53"" КАК НомерЗапроса,
		|	втОтклонения.Ресурс КАК Ресурс,
		|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * втОтклонения.КратностьПланирования) КАК ВремяНачалаИнтервала,
		|	втОтклонения.КратностьПланирования КАК КратностьПланирования,
		|	втОтклонения.ГрафикРаботы КАК ГрафикРаботы,
		|	втОтклонения.Год КАК Год,
		|	НАЧАЛОПЕРИОДА(втОтклонения.ВремяНачала, ДЕНЬ) КАК день,
		|	втОтклонения.Интервал КАК Интервал,
		|	втОтклонения.ЧасыРаботы КАК ЧасыРаботы,
		|	втОтклонения.ВремяНачала КАК ВремяНачала,
		|	втОтклонения.ВремяОкончания КАК ВремяОкончания
		|ПОМЕСТИТЬ втГрафикСОтклонениями
		|ИЗ
		|	втОтклонения КАК втОтклонения,
		|	втЧисла256 КАК втЧисла256
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, (втЧисла256.Поле - 1) * втОтклонения.КратностьПланирования) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ВыгружатьДнейГрафика)
		|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * втОтклонения.КратностьПланирования) >= втОтклонения.ВремяНачала
		|	И ДОБАВИТЬКДАТЕ(втОтклонения.ВремяНачала, МИНУТА, втЧисла256.Поле * втОтклонения.КратностьПланирования) <= втОтклонения.ВремяОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""54"" КАК НомерЗапроса,
		|	втГрафикСОтклонениями.Ресурс КАК Ресурс,
		|	втГрафикСОтклонениями.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
		|	ДОБАВИТЬКДАТЕ(втГрафикСОтклонениями.ВремяНачалаИнтервала, МИНУТА, втГрафикСОтклонениями.КратностьПланирования) КАК ВремяОкончанияИнтервала,
		|	ЕСТЬNULL(РасписаниеЗагрузкиРесурсов.Мощность, 0) КАК Подтверждена,
		|	втГрафикСОтклонениями.Интервал КАК Интервал,
		|	втГрафикСОтклонениями.ВремяНачала КАК ВремяНачалаПлан,
		|	втГрафикСОтклонениями.ВремяОкончания КАК ВремяОкончанияПлан,
		|	втГрафикСОтклонениями.КратностьПланирования КАК ИнтервалПланирования,
		|	РасписаниеЗагрузкиРесурсов.Старт КАК ВремяНачалаФакт,
		|	РасписаниеЗагрузкиРесурсов.Финиш КАК ВремяОкончанияФакт,
		|	втГрафикСОтклонениями.ГрафикРаботы КАК ГрафикРаботы,
		|	РасписаниеЗагрузкиРесурсов.Контрагент КАК Клиент,
		|	РасписаниеЗагрузкиРесурсов.Подразделение КАК Подразделение,
		|	РасписаниеЗагрузкиРесурсов.Ответственный КАК Ответственный,
		|	РасписаниеЗагрузкиРесурсов.Документ КАК Документ
		|ПОМЕСТИТЬ втЗанятыеДни
		|ИЗ
		|	втГрафикСОтклонениями КАК втГрафикСОтклонениями
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
		|		ПО втГрафикСОтклонениями.Ресурс = РасписаниеЗагрузкиРесурсов.РесурсПредприятия
		|			И втГрафикСОтклонениями.ВремяНачалаИнтервала >= РасписаниеЗагрузкиРесурсов.Старт
		|			И втГрафикСОтклонениями.ВремяНачалаИнтервала < РасписаниеЗагрузкиРесурсов.Финиш
		|ГДЕ
		|	втГрафикСОтклонениями.ВремяНачалаИнтервала < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ВыгружатьДнейГрафика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""55"" КАК НомерЗапроса,
		|	ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) КАК ВремяНачалаИнтервала,
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
		|	КлючевыеРесурсы.Ссылка КАК Ресурс
		|ПОМЕСТИТЬ втВсеИнтервалы
		|ИЗ
		|	втЧисла256 КАК втЧисла256,
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики,
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
		|		ПО НастройкиЗаписьНаУслуги.Ресурс = КлючевыеРесурсы.Ссылка
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|	И КалендарныеГрафики.ДатаГрафика < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &ВыгружатьДнейГрафика)
		|	И КалендарныеГрафики.Календарь = &ПроизводственныйКалендарь
		|	И ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги) < ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, &ВыгружатьДнейГрафика)
		|	И НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги), ДЕНЬ) = КалендарныеГрафики.ДатаГрафика
		|	И НЕ КлючевыеРесурсы.ПометкаУдаления
		|	И НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, МИНУТА, (втЧисла256.Поле - 1) * &МинимальныйИнтервалУслуги),
		|	КлючевыеРесурсы.Ссылка,
		|	КалендарныеГрафики.ДатаГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""56"" КАК НомерЗапроса,
		|	втВсеИнтервалы.Ресурс КАК Ресурс,
		|	втВсеИнтервалы.Ресурс.ЗначениеРесурса КАК СотрудникБригада,
		|	втВсеИнтервалы.ДатаГрафика КАК ДатаГрафика,
		|	втВсеИнтервалы.ВремяНачалаИнтервала КАК ВремяНачалаИнтервала,
		|	ДОБАВИТЬКДАТЕ(втВсеИнтервалы.ВремяНачалаИнтервала, МИНУТА, &МинимальныйИнтервалУслуги) КАК ВремяОкончанияИнтервала,
		|	&МинимальныйИнтервалУслуги КАК Интервал,
		|	НЕ втЗанятыеДни.ВремяНачалаИнтервала ЕСТЬ NULL КАК РабочееВремя,
		|	втЗанятыеДни.Подтверждена КАК Подтверждена,
		|	втЗанятыеДни.Ресурс КАК ГрафикРесурс,
		|	втЗанятыеДни.ВремяНачалаИнтервала КАК ВремяНачалаРабочегоИнтервала,
		|	втЗанятыеДни.ВремяОкончанияИнтервала КАК ВремяОкончанияРабочегоИнтервала,
		|	втЗанятыеДни.Интервал КАК ДлительностьУслуги,
		|	втЗанятыеДни.ВремяНачалаПлан КАК ВремяНачалаПлан,
		|	втЗанятыеДни.ВремяОкончанияПлан КАК ВремяОкончанияПлан,
		|	втЗанятыеДни.ИнтервалПланирования КАК ИнтервалПланирования,
		|	втЗанятыеДни.ВремяНачалаФакт КАК ВремяНачалаФакт,
		|	втЗанятыеДни.ВремяОкончанияФакт КАК ВремяОкончанияФакт,
		|	втЗанятыеДни.ГрафикРаботы КАК ГрафикРаботы,
		|	втЗанятыеДни.Клиент КАК Клиент,
		|	втЗанятыеДни.Подразделение КАК Подразделение,
		|	втЗанятыеДни.Ответственный КАК Ответственный,
		|	втЗанятыеДни.Документ КАК Документ
		|ИЗ
		|	втВсеИнтервалы КАК втВсеИнтервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗанятыеДни КАК втЗанятыеДни
		|		ПО втВсеИнтервалы.Ресурс = втЗанятыеДни.Ресурс
		|			И (втВсеИнтервалы.ДатаГрафика = НАЧАЛОПЕРИОДА(втЗанятыеДни.ВремяНачалаИнтервала, ДЕНЬ))
		|			И (втВсеИнтервалы.ВремяНачалаИнтервала = втЗанятыеДни.ВремяНачалаИнтервала
		|				ИЛИ втВсеИнтервалы.ВремяНачалаИнтервала > втЗанятыеДни.ВремяНачалаИнтервала
		|					И втВсеИнтервалы.ВремяНачалаИнтервала < втЗанятыеДни.ВремяОкончанияИнтервала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ресурс,
		|	ВремяНачалаИнтервала
		|ИТОГИ
		|	МАКСИМУМ(РабочееВремя)
		|ПО
		|	ДатаГрафика,
		|	Ресурс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""57"" КАК НомерЗапроса,
		|	НастройкиЗаписьНаУслуги.Ресурс КАК Ресурс,
		|	НастройкиЗаписьНаУслуги.Ресурс.ПометкаУдаления КАК РесурсПометкаУдаления,
		|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга,
		|	НастройкиЗаписьНаУслуги.Длительность КАК Длительность,
		|	НастройкиЗаписьНаУслуги.Ресурс.Представление КАК РесурсПредставление,
		|	НастройкиЗаписьНаУслуги.Ресурс.КратностьПланирования КАК КратностьПланирования,
		|	НастройкиЗаписьНаУслуги.Ресурс.ЗначениеРесурса КАК Сотрудник,
		|	НастройкиЗаписьНаУслуги.Услуга.Представление КАК УслугаПредставление
		|ИЗ
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|ГДЕ
		|	НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена
		|ИТОГИ ПО
		|	Ресурс";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
	+ "УНИЧТОЖИТЬ ВременнаяТаблицаЦены";
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС
	+ "УНИЧТОЖИТЬ ВременнаяТаблицаСвободныеОстатки";
	
КонецПроцедуры

Функция ПолучитьКомпоновщикНастроекВыгрузкиТоваров(ХранилищеНастроекВыгрузки)
	
	СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиТоваров));
	
	НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено;
	Если ЗначениеЗаполнено(ХранилищеНастроекВыгрузки) Тогда
		НастройкиКомпоновщикаИзНастройкиОбмена = ХранилищеНастроекВыгрузки.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) И ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиТоваров.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Процедура ИзменитьОтборКомпоновщика(КомпоновщикНастроек, 
	НастройкиСтруктураКаталога = Неопределено, 
	МассивИзмененийНоменклатуры = Неопределено) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборПоКаталогу   = "ПрограммныйОтборПоКаталогу";
	ОтборПоИзменениям = "ПрограммныйОтборПоИзменениям";
	ОтборПоКатегории  = "ПрограммныйОтборПоКатегории";
	ОтборНастройкаКаталога = "ПрограммныйОтборНастройкаКаталога";
	
	СписокГруппКаталога = НастройкиСтруктураКаталога.Группы;
	
	// Удаляем программные отборы, если они были установлены.
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу
			ИЛИ ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям Тогда
			
			МассивУдалить.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
		Отбор.Элементы.Удалить(УдалитьЭлемент);
	КонецЦикла;
	
	// Добавляем отбор по каталогу.
	Если СписокГруппКаталога <> Неопределено И СписокГруппКаталога.Количество() > 0 Тогда
		
		Если ТипЗнч(СписокГруппКаталога[0].Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			//Номенклатура
			
			ВыгружатьВсе = Ложь;
			УсловиеНоменклатураБезКаталога = Неопределено;
			Для каждого стрКаталог Из СписокГруппКаталога Цикл
				Если стрКаталог.Значение = Справочники.Номенклатура.ПустаяСсылка() И стрКаталог.Представление = НадписьВсеГруппы() Тогда
					ВыгружатьВсе = Истина;
					Прервать;
				КонецЕсли;
				Если стрКаталог.Значение = Справочники.Номенклатура.ПустаяСсылка() И стрКаталог.Представление = НадписьНетГруппы() Тогда
					УсловиеНоменклатураБезКаталога = стрКаталог;
				КонецЕсли;
			КонецЦикла;
			
			Если ВыгружатьВсе Тогда
				// Нет отбора
			ИначеЕсли УсловиеНоменклатураБезКаталога<>Неопределено И СписокГруппКаталога.Количество() > 1 Тогда
				
				СписокГруппКаталогаБезПустогоЗначения = СписокГруппКаталога.Скопировать();
				СписокГруппКаталогаБезПустогоЗначения.Удалить(СписокГруппКаталога.Индекс(УсловиеНоменклатураБезКаталога));
				
				НоваяГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НоваяГруппаОтбора.Использование = Истина;
				
				// Товары из выбранных папок ВСпискеПоИерархии
				НовыйЭлемент = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлемент.ПравоеЗначение = СписокГруппКаталогаБезПустогоЗначения;
				НовыйЭлемент.Использование = Истина;
				
				// Товары в корневом каталоге, у которых Родитель = ПустаяСсылка
				НовыйЭлемент = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура.Родитель");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлемент.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
				НовыйЭлемент.Использование = Истина;
				
			ИначеЕсли УсловиеНоменклатураБезКаталога<>Неопределено И СписокГруппКаталога.Количество() = 1 Тогда
				
				// Товары в корневом каталоге, у которых Родитель = ПустаяСсылка
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура.Родитель");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлемент.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
				НовыйЭлемент.Использование = Истина;
			Иначе
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
				НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
				НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлемент.ПравоеЗначение = СписокГруппКаталога;
				НовыйЭлемент.Использование = Истина;
			КонецЕсли; 
		Иначе
			// Категории номенклатуры
			НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКатегории;
			НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("КатегорияНоменклатуры");
			НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			НовыйЭлемент.ПравоеЗначение = СписокГруппКаталога;
			НовыйЭлемент.Использование = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	// Добавляем отбор по изменениям.
	
	Если МассивИзмененийНоменклатуры <> Неопределено Тогда
		
		СписокГруппОтбора = Новый СписокЗначений;
		СписокГруппОтбора.ЗагрузитьЗначения(МассивИзмененийНоменклатуры);
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям;
		НовыйЭлемент.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		НовыйЭлемент.ПравоеЗначение = СписокГруппОтбора;
		НовыйЭлемент.Использование 	= Истина;
		
	КонецЕсли;
	
	Если НастройкиСтруктураКаталога.РучнаяНастройкаКаталога > 0 Тогда
		// Элементы номенклатуры
		СписокГруппОтбора = Новый СписокЗначений;
		СписокГруппОтбора.ЗагрузитьЗначения(НастройкиСтруктураКаталога.ОтборНоменклатураРучнаяНастройкаКаталога);
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборНастройкаКаталога;
		НовыйЭлемент.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлемент.ПравоеЗначение = СписокГруппОтбора;
		НовыйЭлемент.Использование 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыДляУслуг(Параметры)
	
	ПараметрыДляУслуг = Новый Структура(Новый ФиксированнаяСтруктура(Параметры));
	
	ПараметрыДляУслуг.Вставить("РежимВыгрузкиУслуг", Истина);
	ПараметрыДляУслуг.Вставить("ИспользоватьНаборы", Ложь);
	ПараметрыДляУслуг.Вставить("ИспользоватьХарактеристики", Ложь);
	
	МассивВидовЦен = Новый Массив;
	МассивВидовЦен.Добавить(Параметры.ВидЦенУслуг);
	ПараметрыДляУслуг.Вставить("МассивВидовЦен", МассивВидовЦен);
	
	ПараметрыДляУслуг.Вставить("ВыгружатьКартинки", Ложь);
	
	РазрешенныеТипыНоменклатуры = Новый Массив;
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ПараметрыДляУслуг.Вставить("РазрешенныеТипыНоменклатуры", РазрешенныеТипыНоменклатуры);
	ПараметрыДляУслуг.Вставить("ОтборГруппыКатегорииНоменклатуры", Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры);
	
	СтруктураРезультата =
	Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
	ПараметрыДляУслуг.Вставить("СтрокаТаблицыКаталогов", 
	Новый Структура("ХранилищеНастроекКомпоновки, Группы, СтруктураРезультата, ИдентификаторКаталога, Каталог, ИдКаталога", 
	Неопределено, Неопределено, СтруктураРезультата, Параметры.ИдентификаторКаталогаУслуг, Параметры.ИдентификаторКаталогаУслуг, Параметры.ИдентификаторКаталогаУслуг));
	
	ПараметрыДляУслуг.Вставить("ВыгружатьТолькоИзменения", Параметры.ВыгружатьТолькоИзменения);
	ПараметрыДляУслуг.Вставить("ВыполнятьПолнуюВыгрузкуПринудительно", Ложь);
	
	Возврат ПараметрыДляУслуг;
	
КонецФункции

Функция ИдентификаторНоменклатурыРучнаяНастройкаКаталога(УзелОбмена, ИдентификаторКаталога, Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменССайтомСтруктураКаталога.РодительИдентификатор КАК РодительИдентификатор
	|ИЗ
	|	РегистрСведений.ОбменССайтомСтруктураКаталога КАК ОбменССайтомСтруктураКаталога
	|ГДЕ
	|	ОбменССайтомСтруктураКаталога.УзелОбмена = &УзелОбмена
	|	И ОбменССайтомСтруктураКаталога.ИдентификаторКаталога = &ИдентификаторКаталога
	|	И НЕ ОбменССайтомСтруктураКаталога.ЭтоГруппа
	|	И ОбменССайтомСтруктураКаталога.РодительИдентификатор <> """"
	|	И ОбменССайтомСтруктураКаталога.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ИдентификаторКаталога", ИдентификаторКаталога);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РодительИдентификатор");
	
КонецФункции

Функция ОтборНоменклатураРучнаяНастройкаКаталога(УзелОбмена, ИдентификаторКаталога, ВариантОтбора)
	
	Запрос = Новый Запрос;
	Если ВариантОтбора = 1 Тогда //по товарам
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбменССайтомСтруктураКаталога.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОбменССайтомСтруктураКаталога КАК ОбменССайтомСтруктураКаталога
		|ГДЕ
		|	ОбменССайтомСтруктураКаталога.УзелОбмена = &УзелОбмена
		|	И ОбменССайтомСтруктураКаталога.ИдентификаторКаталога = &ИдентификаторКаталога
		|	И НЕ ОбменССайтомСтруктураКаталога.ЭтоГруппа";
		
	ИначеЕсли ВариантОтбора = 2 Тогда //по группам
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураСписок.Ссылка КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОбменССайтомСтруктураКаталога КАК ОбменССайтомСтруктураКаталога
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСписок
		|		ПО ОбменССайтомСтруктураКаталога.РодительГруппа = НоменклатураСписок.Родитель
		|ГДЕ
		|	ОбменССайтомСтруктураКаталога.УзелОбмена = &УзелОбмена
		|	И ОбменССайтомСтруктураКаталога.ИдентификаторКаталога = &ИдентификаторКаталога
		|	И НЕ НоменклатураСписок.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураСписок.Ссылка
		|ИЗ
		|	РегистрСведений.ОбменССайтомСтруктураКаталога КАК ОбменССайтомСтруктураКаталога
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСписок
		|		ПО ОбменССайтомСтруктураКаталога.РодительКатегория = НоменклатураСписок.КатегорияНоменклатуры
		|ГДЕ
		|	ОбменССайтомСтруктураКаталога.УзелОбмена = &УзелОбмена
		|	И ОбменССайтомСтруктураКаталога.ИдентификаторКаталога = &ИдентификаторКаталога
		|	И НЕ НоменклатураСписок.Ссылка ЕСТЬ NULL";
		
	КонецЕсли;
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("ИдентификаторКаталога", ИдентификаторКаталога);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

#КонецОбласти

#Область ОбменССайтом

// Возвращает результат тестового подключения к сайту.
//
// Параметры:
//	УзелОбмена
//
// Возвращаемое значение:
//	Строка.
//
Функция ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстСообщения) Экспорт
	
	ПараметрыПодключения = Новый Структура("АдресСайта, Пароль, ИмяПользователя,ТипСайта");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, НастройкиПодключения);
	
	ТипСоединения = "catalog";
	ОписаниеОшибки = "";
	
	Если НЕ ПолучитьНастройкиПодключения(ПараметрыПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Соединение = Неопределено;
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения);
	Если Успешно Тогда
		
		ТекстСообщения = НСтр("ru = 'Соединение с сайтом успешно установлено.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Выгружает файлы на сайт.
//
// Параметры:
//	Параметры								- Структура, основные параметры
//	МассивПодкаталогов						- Массив
//	ОписаниеОшибки							- Строка
//	ОжидатьЗавершенияИмпортаФайловСервером	- булево
//	ТипСоединения							- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ВыгрузитьНаСайт(Параметры,
	МассивПодкаталогов = Неопределено,
	ОписаниеОшибки,
	ОжидатьЗавершенияИмпортаФайловСервером = Ложь,
	ТипСоединения = "catalog")
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = Параметры.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	ОписаниеОшибки = "";
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения);
	
	Если НЕ Успешно Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		
		Если Параметры.ПодчиненныеДокументы Тогда
			ВерсияОбмена = "&cmlVersion=2.10";
			ВерсияСхемы = "&version=2.09";
		Иначе
			ВерсияСхемы = "";
			ВерсияОбмена = "";
		КонецЕсли;
		
		АдресДляРаботы = АдресДляРаботы + ДобавитьТокенБитрикс(ОтветСервера) + ВерсияСхемы + ВерсияОбмена;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	ЧислоСтрокОтветСервера = СтрЧислоСтрок(ОтветСервера);
	// Некоторые CMS, например Nethouse, не передают параметр file_limit
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = НастройкиПодключения.ОтветСервера_ZIPРазрешен;
	
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс 
		И ЧислоСтрокОтветСервера < 2 Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Выгрузка на сайт не выполнена.'") + Символы.ПС + НСтр("ru = 'Не удалось прочитать ответ сервера. Параметры обмена не получены.'"));
		ДобавитьОписаниеОшибки(ОписаниеОшибки, Лев(ОтветСервера,512));
		Возврат Ложь;
		
	ИначеЕсли ЧислоСтрокОтветСервера=1 Тогда
		ОграничениеРазмераФрагментаФайлаОбмена = 0;
	Иначе
		// стандартный ответ в 2 строки:
		// zip=no
		// file_limit=xxx
		Попытка
			
			ОграничениеРазмераФрагментаФайлаОбмена = СтрокуВЧисло(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))),
			НастройкиПодключения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
			
			Если ТипЗнч(ОграничениеРазмераФрагментаФайлаОбмена) <> Тип("Число") Тогда
				ОграничениеРазмераФрагментаФайлаОбмена = -1;
			КонецЕсли;
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Ошибка получения параметров обмена (ограничение размера файла)!'")));
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
			
			ОграничениеРазмераФрагментаФайлаОбмена = -1;
		КонецПопытки;
		
	КонецЕсли; 
	
	МассивИсходныхXMLФайлов = НайтиФайлы(Параметры.КаталогНаДиске, "*.xml");
	ПоместитьФайлImportВНачалоМассива(МассивИсходныхXMLФайлов);
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(Параметры.КаталогНаДиске, МассивПодкаталогов);
	СписокФайловДляОтправки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Если ZIPФайлыРазрешены Тогда
		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(Параметры.КаталогНаДиске, ОписаниеОшибки);
		
		Если СписокФайловДляОтправки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		
		СписокФайловДляОтправки = РазделитьФайлыНаФрагменты(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
		
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	ЕстьОшибки = Ложь;
	Для Каждого ТекФайл Из СписокФайловДляОтправки Цикл
		
		ОтветСервераСтруктура = ОтправитьФайлНаСервер(ТекФайл.Значение,
		Соединение,
		АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
		);
		
		ОтветСервера = ОтветСервераСтруктура.ОтветСервера;
		
		Если ОтветСервера = Неопределено Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось получить ответ сервера. Файл не отправлен.'") + " (" + ТекФайл.Значение + ")."
			+ Символы.ПС + "Код состояния: " + ОтветСервераСтруктура.КодСостояния);
			
			ЕстьОшибки = Истина;
			Прервать;
			
		КонецЕсли;
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Произошла ошибка на стороне сервера. Файл не отправлен.'") + " (" + ТекФайл.Значение + ")."
			+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
			
			ЕстьОшибки = Истина;
			Прервать;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
				НСтр("ru = 'Получен расширенный статус успешного завершения сеанса.'")
				+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
				
			КонецЕсли;
			
		Иначе
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен.'") + " (" + ТекФайл.Значение + ")."
			+ Символы.ПС + НСтр("ru = 'Ответ сервера: '") + Символы.ПС + ОтветСервера);
			
			ЕстьОшибки = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСписокВременныхФайлов(СписокФайловДляОтправки);
	
	Если ЕстьОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхXMLФайлов Цикл
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
			
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = Ложь;
				
				ОписаниеОшибки = "";
				ОтветСервера = ПолучитьДанныеССервера(
				Соединение,
				АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя,
				ЗаголовкиЗапросов,
				ОписаниеОшибки
				);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
					+ НСтр("ru = 'Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.'"));
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					
					Успешно = Ложь;
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
					+ НСтр("ru = 'Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.'"));
					
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					
					Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						
						Успешно = Ложь;
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ НСтр("ru = 'Произошла ошибка на стороне сервера.'")
						+ Символы.ПС + НСтр("ru = 'Ответ сервера'") + ": " + Символы.ПС + ОтветСервера);
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						
						ИмпортУспешноЗавершен = Истина;
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
						
						ИмпортПродолжается = Истина;
						
					Иначе
						
						Успешно = Ложь;
						
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ НСтр("ru = 'Произошла ошибка на стороне сервера. Получен неизвестный статус импорта.'")
						+ Символы.ПС + НСтр("ru = 'Ответ сервера'") + ": " + Символы.ПС + ОтветСервера);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса = "", Заголовки = "", ОписаниеОшибки)
	
	ОтветСервера	= Неопределено;
	HTTPОтветСервера= Неопределено;
	ContentType		= Неопределено;
	КодировкаXML	= Неопределено;
	
	ЗаголовокHTTP = Новый Соответствие();
	Если СтрНайти(Заголовки,"Cookie: ")<>0 Тогда
		ЗаголовокHTTP.Вставить("Cookie", Сред(Заголовки, 8+СтрНайти(Заголовки,"Cookie: ")));
	КонецЕсли;
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);
	
	Попытка
		HTTPОтветСервера = Соединение.Получить(HTTPЗапрос);
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки));
	КонецПопытки;
	
	Если HTTPОтветСервера=Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(НСтр("ru = 'Ответ сервера не получен'")));
		Возврат Неопределено;
	ИначеЕсли HTTPОтветСервера.КодСостояния<>200 Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Получение данных с сервера: Ответ сервера: '"+HTTPОтветСервера.КодСостояния));
	КонецЕсли;
	
	ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку();
	
	Если ОтветСервера=Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Ответ сервера не получен.'"));
	ИначеЕсли ОтветСервера="" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Получен пустой ответ сервера.'"));
	ИначеЕсли СтрНайти(ОтветСервера,"�")>0 Тогда
		
		Если HTTPОтветСервера.Заголовки.Получить("Content-Type")<>Неопределено Тогда
			ContentType = HTTPОтветСервера.Заголовки.Получить("Content-Type");
			Если ContentType <> Неопределено Тогда
				Если СтрНайти(ContentType, "charset=")<>0 Тогда
					КодировкаXML = Сред(ContentType, 8+СтрНайти(ContentType, "charset="));
					ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			КодировкаXML = "windows-1251";
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			КодировкаXML = "UTF-8";
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
		КонецЕсли;
		
		Если СтрНайти(ОтветСервера,"�")>0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Не удалось прочитать ответ сервера в указанной кодировке'"+ContentType));
		КонецЕсли;
	ИначеЕсли ОписаниеОшибки<>"" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки) Экспорт
	
	Соединение = Неопределено;
	
	Попытка
		
		Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
			
			ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			
			Соединение = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.ИмяПользователя,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.Прокси,
			1800,
			ssl
			);
			
		Иначе
			
			Соединение = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.ИмяПользователя,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.Прокси,
			1800
			);
			
		КонецЕсли;
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"),
		ПараметрыПодключения.Сервер,
		ПараметрыПодключения.Порт)
		)
		);
		
		Соединение = Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения = "catalog") Экспорт
	
	Соединение = УстановитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение, 
	ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth",
	,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		// Иногда ответ сервера - это текст, который содержит пояснение ошибки, тогда его можно вывести пользователю
		// Если ответ сервера - это html страница, тогда не выводим
		Если СтрДлина(ОтветСервера)<255 И Лев(ОтветСервера,15) <> "<!DOCTYPE html>" И СтрНайти(Лев(ОтветСервера,255),"<html")=0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервера);
		КонецЕсли;
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'")
		+ Символы.ПС 
		+ НСтр("ru = 'Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Отправляет файл на сервер по http.
//
// Параметры:
//	ПолноеИмяФайла - строка
//	Соединение - HTTPСоединение
//	ПараметрыЗапроса - строка
//	Заголовки - строка
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	Строка - Ответ сервера.
//
Функция ОтправитьФайлНаСервер(ПолноеИмяФайла, Соединение, ПараметрыЗапроса="", Заголовки="", ОписаниеОшибки)
	
	ОтветСервера	= Неопределено;
	HTTPОтветСервера= Неопределено;
	ContentType		= Неопределено;
	КодировкаXML	= Неопределено;
	
	ОтветСервераСтруктура = Новый Структура;
	ОтветСервераСтруктура.Вставить("ОтветСервера" , ОтветСервера);
	ОтветСервераСтруктура.Вставить("КодСостояния" , 0);
	
	ЗаголовокHTTP = Новый Соответствие();
	Если СтрНайти(Заголовки,"Cookie: ")<>0 Тогда
		ЗаголовокHTTP.Вставить("Cookie", Сред(Заголовки, 8+СтрНайти(Заголовки,"Cookie: ")));
	КонецЕсли;
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		HTTPЗапрос.УстановитьИмяФайлаТела(ПолноеИмяФайла);
	КонецЕсли;	
	
	Попытка
		HTTPОтветСервера = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки));
	КонецПопытки;
	
	Если HTTPОтветСервера=Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(НСтр("ru = 'Ответ сервера не получен'")));
	ИначеЕсли HTTPОтветСервера.КодСостояния <> 200 Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Получение данных с сервера: Ответ сервера: '"+HTTPОтветСервера.КодСостояния));
		
		ОтветСервераСтруктура.ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку();
		ОтветСервераСтруктура.КодСостояния = HTTPОтветСервера.КодСостояния;
		
	Иначе
		
		ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку();
		
		ОтветСервераСтруктура.ОтветСервера = ОтветСервера;
		ОтветСервераСтруктура.КодСостояния = HTTPОтветСервера.КодСостояния;
		
		Если ОтветСервера=Неопределено Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Ответ сервера не получен.'"));
		ИначеЕсли ОтветСервера="" Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Получен пустой ответ сервера.'"));
		ИначеЕсли СтрНайти(ОтветСервера,"�")>0 Тогда
			
			Если HTTPОтветСервера.Заголовки.Получить("Content-Type")<>Неопределено Тогда
				ContentType = HTTPОтветСервера.Заголовки.Получить("Content-Type");
				Если ContentType <> Неопределено Тогда
					Если СтрНайти(ContentType, "charset=")<>0 Тогда
						КодировкаXML = Сред(ContentType, 8+СтрНайти(ContentType, "charset="));
						ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрНайти(ОтветСервера,"�")>0 Тогда
				КодировкаXML = "windows-1251";
				ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
			КонецЕсли;
			
			Если СтрНайти(ОтветСервера,"�")>0 Тогда
				КодировкаXML = "UTF-8";
				ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(КодировкаXML);
			КонецЕсли;
			
			Если СтрНайти(ОтветСервера,"�")>0 Тогда
				ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Отправка файла на сервер: Не удалось прочитать ответ сервера в указанной кодировке'"+ContentType));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтветСервераСтруктура;
	
КонецФункции

#КонецОбласти

#Область Логирование

Процедура ЗаписатьВТаблицуИнформации(ОписаниеОшибки, ТаблицаИнформации, Ошибка)
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	ЗафиксироватьЗавершениеВыгрузки(СтрокаТаблицыИнформации, Ошибка, ОписаниеОшибки);
	
КонецПроцедуры

Функция НоваяСтруктураСтатистики()
	
	СтруктураСтатистики = Новый Структура;
	СтруктураСтатистики.Вставить("ОбработаноНаЗагрузке", 0);
	СтруктураСтатистики.Вставить("Загружено" , Новый Массив);
	СтруктураСтатистики.Вставить("Пропущено" , Новый Массив);
	СтруктураСтатистики.Вставить("Обновлено" , Новый Массив);
	СтруктураСтатистики.Вставить("Создано"   , Новый Массив);
	СтруктураСтатистики.Вставить("Выгружено" , Новый Массив);
	СтруктураСтатистики.Вставить("ОбработаноНаЗагрузкеОплат", 0);
	СтруктураСтатистики.Вставить("ЗагруженоОплат" , Новый Массив);
	СтруктураСтатистики.Вставить("ПропущеноОплат" , Новый Массив);
	СтруктураСтатистики.Вставить("ОбновленоОплат" , Новый Массив);
	СтруктураСтатистики.Вставить("СозданоОплат"   , Новый Массив);
	
	Возврат СтруктураСтатистики;
	
КонецФункции // ()

Функция НоваяТаблицаИнформации()
	
	ТаблицаИнформации = РегистрыСведений.СостоянияОбменовССайтами.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаИнформации.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаИнформации;
	
КонецФункции // ()

Процедура ЗафиксироватьЗавершениеВыгрузки(СтрокаТаблицыИнформации, Ошибка, Описание)
	
	ДатаОкончания = ТекущаяДата();
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание + Символы.ПС
	+ ДатаОкончания + " " + Описание;
	
	СтрокаТаблицыИнформации.РезультатВыполненияОбмена = ?(Ошибка, Перечисления.РезультатыВыполненияОбмена.Ошибка, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	СтрокаТаблицыИнформации.ДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации, ДатаНачала, Действие, Успех, СтруктураСтатистики, ОписаниеОшибки);
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ДатаНачала; 
	СтрокаТаблицыИнформации.ДатаОкончания = ТекущаяДата();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Действие;
	
	Если Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск загрузки заказов'")
		+ Символы.ПС + НСтр("ru = 'Обработано: '") + СтруктураСтатистики.ОбработаноНаЗагрузке
		+ Символы.ПС + НСтр("ru = 'Загружено: '") + СтруктураСтатистики.Загружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Загружено);
		
		Описание = Описание
		+ Символы.ПС + НСтр("ru = 'Пропущено: '") + СтруктураСтатистики.Пропущено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Пропущено);
		
		Описание = Описание
		+ Символы.ПС + НСтр("ru = 'Обновлено: '") + СтруктураСтатистики.Обновлено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Обновлено);
		
		Описание = Описание
		+ Символы.ПС + НСтр("ru = 'Создано: '") + СтруктураСтатистики.Создано.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Создано);
		
		
		Если СтруктураСтатистики.Свойство("ОбработаноНаЗагрузкеОплат") Тогда
			
			Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Обработано оплат: '") + СтруктураСтатистики.ОбработаноНаЗагрузке
			+ Символы.ПС + НСтр("ru = 'Загружено оплат: '") + СтруктураСтатистики.ЗагруженоОплат.Количество();
			
			ВывестиСписокОплатДляПротокола(Описание, СтруктураСтатистики.ЗагруженоОплат);
			
			Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Пропущено оплат: '") + СтруктураСтатистики.ПропущеноОплат.Количество();
			
			ВывестиСписокОплатДляПротокола(Описание, СтруктураСтатистики.ПропущеноОплат);
			
			Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Обновлено оплат: '") + СтруктураСтатистики.ОбновленоОплат.Количество();
			
			ВывестиСписокОплатДляПротокола(Описание, СтруктураСтатистики.ОбновленоОплат);
			
			Описание = Описание
			+ Символы.ПС + НСтр("ru = 'Создано оплат: '") + СтруктураСтатистики.СозданоОплат.Количество();
			
			ВывестиСписокОплатДляПротокола(Описание, СтруктураСтатистики.СозданоОплат);
			
		КонецЕсли; 	
		
		Описание = Описание
		+ Символы.ПС
		+ СтрокаТаблицыИнформации.ДатаОкончания
		+ " "
		+ НСтр("ru = 'Завершена загрузка заказов'");
		
	Иначе
		
		Описание = Строка(ДатаНачала) + " " + НСтр("ru = 'Запуск выгрузки заказов'")
		+ Символы.ПС + НСтр("ru = 'Выгружено: '") + СтруктураСтатистики.Выгружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, СтруктураСтатистики.Выгружено);
		
		Описание = Описание
		+ Символы.ПС
		+ СтрокаТаблицыИнформации.ДатаОкончания
		+ " "
		+ НСтр("ru = 'Завершена выгрузка заказов'");
		
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = Описание;
	
	Если Успех Тогда
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание
	+ Символы.ПС + НСтр("ru = 'Дополнительная информация:'") + Символы.ПС + ОписаниеОшибки;
	
КонецПроцедуры

Процедура ПодготовитьИтоговуюИнформациюПоВыгрузкеТоваров(ТаблицаКаталогов, СтрокаТаблицыИнформации)
	
	СтруктураРезультата = 
	Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений,ОписаниеОшибки", 0, 0, 0, 0, "");
	
	СтрокаТаблицыИнформации.Описание = 
	СтрокаТаблицыИнформации.Описание + Символы.ПС
	+ ТекущаяДата() + НСтр("ru = ' Завершено формирование файлов выгрузки товаров'");
	
	Для Каждого Каталог Из ТаблицаКаталогов Цикл
		
		СтруктураРезультата.ВыгруженоТоваров =
		СтруктураРезультата.ВыгруженоТоваров + Каталог.СтруктураРезультата.ВыгруженоТоваров;
		
		СтруктураРезультата.ВыгруженоПредложений =
		СтруктураРезультата.ВыгруженоПредложений + Каталог.СтруктураРезультата.ВыгруженоПредложений;
		
		СтруктураРезультата.ВыгруженоКартинок =
		СтруктураРезультата.ВыгруженоКартинок + Каталог.СтруктураРезультата.ВыгруженоКартинок;
		
		СтруктураРезультата.ВыгруженоФайлов =
		СтруктураРезультата.ВыгруженоФайлов + Каталог.СтруктураРезультата.ВыгруженоФайлов;
		
	КонецЦикла;
	
	//ВыгруженоОбъектов = СтруктураРезультата.ВыгруженоТоваров
	//	+ СтруктураРезультата.ВыгруженоПредложений
	//	+ СтруктураРезультата.ВыгруженоКартинок
	//	+ СтруктураРезультата.ВыгруженоФайлов;
	
	СтрокаТаблицыИнформации.Описание = 
	СтрокаТаблицыИнформации.Описание + Символы.ПС
	+ НСтр("ru = 'Выгружено товаров: '") + СтруктураРезультата.ВыгруженоТоваров + Символы.ПС
	+ НСтр("ru = 'предложений: '") + СтруктураРезультата.ВыгруженоПредложений + Символы.ПС
	+ НСтр("ru = 'картинок: '") + СтруктураРезультата.ВыгруженоКартинок + Символы.ПС
	+ НСтр("ru = 'файлов: '") + СтруктураРезультата.ВыгруженоФайлов + Символы.ПС
	;
	
	Для Каждого Каталог Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ НСтр("ru = 'В том числе для каталога '") + Каталог.Каталог + ":" + Символы.ПС 
		+ НСтр("ru = 'товаров: '") + Каталог.СтруктураРезультата.ВыгруженоТоваров + Символы.ПС
		+ НСтр("ru = 'предложений: '") + Каталог.СтруктураРезультата.ВыгруженоПредложений + Символы.ПС
		+ НСтр("ru = 'картинок: '") + Каталог.СтруктураРезультата.ВыгруженоКартинок + Символы.ПС
		+ НСтр("ru = 'файлов: '") + Каталог.СтруктураРезультата.ВыгруженоФайлов + Символы.ПС;
		
		Если ПустаяСтрока(Каталог.СтруктураРезультата.ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыИнформации.Описание = 
		СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ НСтр("ru = 'Ошибки в процессе выгрузки каталога '") + Каталог.Каталог + ":"
		+ Каталог.СтруктураРезультата.ОписаниеОшибки + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

// Запись статистики отправленных и полученных документов оплат
//
// Параметры:
//  КоличествоОпераций - Число - Количество обработанных документов
//
Процедура ЗаписатьСтатистикуЗагрузкиОплат(КоличествоОпераций)
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
	"ОбменССайтом.ОнлайнОплаты",
	КоличествоОпераций);
	
КонецПроцедуры

Процедура ДобавитьОписаниеОшибки(Описание, Дополнение) Экспорт
	
	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

// Формирует расширенное описание ошибки.
//
// Параметры:
//	ТекстНачалаСообщения - Строка
//	ТекстОкончанияСообщения - Строка
//
// Возвращаемое значение:
//	Строка - Сформированное описание ошибки.
//
Функция ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки = "", ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "") Экспорт
	
	ТекстСообщения = НСтр("ru = 'Произошла ошибка: '")
	+ ТекстНачалаСообщения
	+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
	+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область Служебные

#Область ОбработчикиПодписок

// Обработчик подписки на событие "ОбменССайтомПередЗаписьюРегистра".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПередЗаписьюРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменения(Источник, Замещение);
	
КонецПроцедуры

// Обработчик подписки на событие "ОбменССайтомПриЗаписиОбъекта".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
//
Процедура ОбменССайтомПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзменений

// Выборочно регистрирует изменения для узлов плана обмена с сайтом.
//
// Параметры:
//	Объект		- Объект метаданных - источник события
//	Замещение - режим записи набора записей регистра.
//
Процедура ЗарегистрироватьИзменения(Объект, Замещение = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбменДаннымиССайтомВключен() Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	МассивУзловТовары = ПолучитьМассивУзловДляРегистрации(Истина);
	МассивУзловЗаказы = ПолучитьМассивУзловДляРегистрации(,Истина);
	МассивУзловУслуги = ПолучитьМассивУзловДляРегистрации(,,Истина);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗапасыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
		
		РегистрацияНаУзлах = ?(Объект.ДополнительныеСвойства.Свойство("РегистрацияНаУзлах"), Объект.ДополнительныеСвойства.РегистрацияНаУзлах, Истина);
		Если Не РегистрацияНаУзлах Тогда			
			Возврат;
		КонецЕсли;
		
		ТаблицаОбластиБлокировки = Новый ТаблицаЗначений;
		ТаблицаОбластиБлокировки.Колонки.Добавить("Номенклатура");
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
				НоваяСтрока = ТаблицаОбластиБлокировки.Добавить();
				НоваяСтрока.Номенклатура = Запись.Номенклатура;
			КонецЦикла;
		КонецЕсли;
		
		
		Для каждого Запись Из Объект Цикл
			НоваяСтрока = ТаблицаОбластиБлокировки.Добавить();
			НоваяСтрока.Номенклатура = Запись.Номенклатура;
		КонецЦикла;
		
		ТаблицаОбластиБлокировки.Свернуть("Номенклатура");
		ТипНоменклатура = Тип("СправочникСсылка.Номенклатура");
		
		Для каждого Запись Из ТаблицаОбластиБлокировки Цикл
			Если ТипЗнч(Запись.Номенклатура) = ТипНоменклатура Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ОтклоненияОтГрафиковРаботыРесурсов") Тогда
		
		спРесурсов = Новый Соответствие;
		Для каждого Запись Из Объект Цикл
			Если Запись.ВремяНачала >= НачалоДня(ТекущаяДатаСеанса()) Тогда
				спРесурсов.Вставить(Запись.РесурсПредприятия);	
			КонецЕсли;
		КонецЦикла;
		
		Для каждого элРесурс Из спРесурсов Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловУслуги, элРесурс.Ключ);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ГрафикиРаботыРесурсов") Тогда
		
		спРесурсов = Новый Соответствие;
		Для каждого Запись Из Объект Цикл
			спРесурсов.Вставить(Запись.РесурсПредприятия);	
		КонецЦикла;
		
		Для каждого элРесурс Из спРесурсов Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловУслуги, элРесурс.Ключ);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.РасписаниеЗагрузкиРесурсов") Тогда	
		
		РежимЗаписи = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДополнительныеСвойства") И Объект.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
			РежимЗаписи = Объект.ДополнительныеСвойства.ДляПроведения.РежимЗаписи;
		КонецЕсли;
		
		спРесурсов = Новый Соответствие;
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда //перепроведение
			
			ОбъектМетаданных = Объект.Метаданные();
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			Если Объект.ДополнительныеСвойства.Свойство("СтарыйНаборЗаписейРасписаниеЗагрузкиРесурсов") Тогда
				Для каждого Запись Из Объект.ДополнительныеСвойства.СтарыйНаборЗаписейРасписаниеЗагрузкиРесурсов Цикл
					
					ИндексСтроки = Объект.ДополнительныеСвойства.СтарыйНаборЗаписейРасписаниеЗагрузкиРесурсов.Индекс(Запись);
					Если ИндексСтроки < 0 Тогда
						Продолжить;
					КонецЕсли;
					Если ИндексСтроки > Объект.Количество() - 1 Тогда
						Прервать;
					КонецЕсли;
					
					Если Запись.Старт <> Объект[ИндексСтроки].Старт Тогда
						спРесурсов.Вставить(Запись.РесурсПредприятия);
						спРесурсов.Вставить(Объект[ИндексСтроки].РесурсПредприятия);
					КонецЕсли;
					Если Запись.Финиш <> Объект[ИндексСтроки].Финиш Тогда
						спРесурсов.Вставить(Запись.РесурсПредприятия);
						спРесурсов.Вставить(Объект[ИндексСтроки].РесурсПредприятия);
					КонецЕсли;
					Если Запись.РесурсПредприятия <> Объект[ИндексСтроки].РесурсПредприятия Тогда
						спРесурсов.Вставить(Запись.РесурсПредприятия);
						спРесурсов.Вставить(Объект[ИндексСтроки].РесурсПредприятия);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Объект.ДополнительныеСвойства.Вставить("СтарыйНаборЗаписейРасписаниеЗагрузкиРесурсов", СтарыйНаборЗаписей.Выгрузить());
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда //отмена проведения
			
			ОбъектМетаданных = Объект.Метаданные();
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
				спРесурсов.Вставить(Запись.РесурсПредприятия);
			КонецЦикла;
			
		Иначе //проведение НЕпроведенного
			Для каждого Запись Из Объект Цикл
				Если ЗначениеЗаполнено(Запись.РесурсПредприятия) Тогда
					спРесурсов.Вставить(Запись.РесурсПредприятия);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого элРесурс Из спРесурсов Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловУслуги, элРесурс.Ключ);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.Запасы") //резервирование запасов в заказе
		И (ТипЗнч(Объект.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Объект.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.РезервированиеЗапасов"))
		Тогда
		
		ТаблицаОбластиБлокировки = Новый ТаблицаЗначений;
		ТаблицаОбластиБлокировки.Колонки.Добавить("Номенклатура");
		
		ПустойЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		
		Если Замещение Тогда
			
			СтарыйНаборЗаписей = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
				Если Запись.ЗаказПокупателя <> ПустойЗаказ Тогда
					НоваяСтрока = ТаблицаОбластиБлокировки.Добавить();
					НоваяСтрока.Номенклатура = Запись.Номенклатура;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			Если Запись.ЗаказПокупателя <> ПустойЗаказ Тогда
				НоваяСтрока = ТаблицаОбластиБлокировки.Добавить();
				НоваяСтрока.Номенклатура = Запись.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОбластиБлокировки.Свернуть("Номенклатура");
		
		Для каждого Запись Из ТаблицаОбластиБлокировки Цикл
			Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Регистратор = Объект.Отбор.Регистратор.Значение;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			Если ЗначениеЗаполнено(Запись.ЗаказПокупателя) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.ЗаказПокупателя);	
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов") Тогда
		
		Регистратор = Объект.Отбор.Регистратор.Значение;
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
			
			Возврат;
			
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения") 
			И Объект.ДополнительныеСвойства.ДляПроведения.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Регистратор, "ДокументОснование")
			И ТипЗнч(Регистратор.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Регистратор.ДокументОснование);
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ЗначениеЗаполнено(Запись.СчетНаОплату) Тогда 
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Запись.СчетНаОплату);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловУслуги, Объект.Ссылка);
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);
		
		// Регистрируем все файлы по номенклатуре, иначе в режиме загрузки изменений
		// CMS удалит те файлы, которые отсутствуют в файле обмена.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СортировкаФайловДляСайта КАК СортировкаФайловДляСайта
		|		ПО НоменклатураПрисоединенныеФайлы.Ссылка = СортировкаФайловДляСайта.Файл
		|ГДЕ
		|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЕСТЬNULL(СортировкаФайловДляСайта.ВыгружатьНаСайт, ИСТИНА) = ИСТИНА";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Объект.ВладелецФайла);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
			
		КонецЦикла; 
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатурыПрисоединенныеФайлы") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ВладелецФайла.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла.Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Если НЕ ПолучитьРеквизитыЗаказаНаСайте(Объект.Ссылка) = Неопределено Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Объект.Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПоставщиков") Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ЭтоГруппа") = Ложь Тогда
			
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Номенклатура.ТипНоменклатуры");
			
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
				ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловУслуги, Объект.Номенклатура);
			Иначе
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Номенклатура);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция РазрешенныеСимволыИмениРеквизита()
	
	РазрешенныеСимволы = Новый Соответствие;
	// АПК:1036-выкл - алфавит
	СтрСимволы = "йцукенгшщзхъфывапролджэячсмитьбю_qwertyuiopasdfghjklzxcvbnm01234567890";
	// АПК:1036-вкл
	Для н=1 По СтрДлина(СтрСимволы) Цикл
		РазрешенныеСимволы.Вставить(Сред(СтрСимволы, н, 1), Истина);
	КонецЦикла;	
	
	Возврат РазрешенныеСимволы;
	
КонецФункции

Функция СтруктураВСтрокуJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Истина;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, , "ПреобразоватьЗначениеJSON", ОбменССайтом);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПреобразоватьЗначениеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Новый Структура;
	// Вычислить() используется для обхода ложного срабатывания платформенной расширенной проверки.
	Результат.Вставить("Номер", Вычислить("Значение.Номер"));
	Результат.Вставить("id", Вычислить("Строка(Значение.УникальныйИдентификатор())"));
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуКаталогов(Параметры)
	
	ТаблицаКаталогов = Параметры.СохраненнаяТаблицаКаталогов.Получить();
	
	Если НЕ ЗначениеЗаполнено(ТаблицаКаталогов) Тогда
		ТаблицаКаталогов = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого ДанныеКаталога Из ТаблицаКаталогов Цикл
		
		МассивУдалить = Новый Массив;
		Для Каждого Группа Из ДанныеКаталога.Группы Цикл
			Если НЕ ЗначениеЗаполнено(Группа.Значение) И СокрЛП(Группа.Представление)="" Тогда
				МассивУдалить.Добавить(Группа);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
			ДанныеКаталога.Группы.Удалить(УдалитьЭлемент);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКаталогов.Колонки.Добавить("СтруктураРезультата");
	Если ТаблицаКаталогов.Колонки.Найти("РучнаяНастройкаКаталога") = Неопределено Тогда
		ТаблицаКаталогов.Колонки.Добавить("РучнаяНастройкаКаталога", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
	Возврат ТаблицаКаталогов;
	
КонецФункции

Процедура ЗагрузитьВидыЦенВМассив(Параметры)
	
	Параметры.Вставить("МассивВидовЦен", Параметры.ВидыЦен.ВыгрузитьКолонку("ВидЦен"));
	
КонецПроцедуры

Функция СериализоватьОбъект(ИнформацияXDTO)
	ЗаписьXML= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ИнформацияXDTO);
	Возврат ЗаписьXML.Закрыть()
КонецФункции	

Функция ЗаписьJSONВСтруктуру(Знач СтруктураЗначений) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗначений);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЧтениеJSONВСтруктуру(Знач СтруктураВСтроке, ВернутьСоответствие = Истина) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураВСтроке);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ВернутьСоответствие);
	
КонецФункции

Функция ПолучитьАвтора(КассаККМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1 КАК Порядок,
	|	СотрудникиПользователя.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|		ПО КассыККМ.Подразделение.МОЛ = СотрудникиПользователя.Сотрудник.Физлицо
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	2,
	|	СотрудникиПользователя.Пользователь
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|		ПО КассыККМ.СтруктурнаяЕдиница.МОЛ = СотрудникиПользователя.Сотрудник.Физлицо
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Пользователь КАК Автор
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	НЕ ВременнаяТаблица.Пользователь ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблица.Порядок";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Автор;
		
	КонецЦикла;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

Функция ПредставлениеКонтактнойИнформацииЗаполнено(КонтактнаяИнформацияXDTO)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КонтактнаяИнформацияXDTO, "Представление")
		И СвойствоXDTOЗаполнено(КонтактнаяИнформацияXDTO.Представление) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФорматИдДляXDTO(Ид)
	
	Возврат Лев(Ид, 40);
	
КонецФункции

// Возвращает сокращения частей адреса.
//
// Возвращаемое значение:
//      Соответствие - Список сокращений.
//
Функция СокращенияОбъектовАдресацииАдресаРФ() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(НСтр("ru = 'дом'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'владение'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'домовладение'"), НСтр("ru = 'домовл.'"));
	
	Результат.Вставить(НСтр("ru = 'корпус'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'строение'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'литера'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'сооружение'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'участок'"), НСтр("ru = 'уч.'"));
	
	Результат.Вставить(НСтр("ru = 'квартира'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'офис'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'бокс'"), НСтр("ru = 'бокс'"));
	Результат.Вставить(НСтр("ru = 'помещение'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'комната'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'этаж'"), НСтр("ru = 'этаж'"));
	Результат.Вставить(НСтр("ru = 'а/я'"), НСтр("ru = 'а/я'"));
	Результат.Вставить(НСтр("ru = 'п/о'"), НСтр("ru = 'п/о'"));
	Результат.Вставить(НСтр("ru = 'в/ч'"), НСтр("ru = 'в/ч'"));
	
	Возврат Результат;
	
КонецФункции

// Получает структуру, содержащую основные параметры обмена.
//
Функция ПолучитьСтруктуруОсновныхПараметровОбмена() Экспорт
	
	ОсновныеПараметры = Новый Структура;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда 
		ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("ОрганизацияВладелецКаталога", ОсновнаяОрганизация);
	
	РазрешенныеТипыНоменклатуры = Новый Массив;
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	РазрешенныеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	ОсновныеПараметры.Вставить("РазрешенныеТипыНоменклатуры", РазрешенныеТипыНоменклатуры); 
	
	//картинки
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	// присоединенные документы
	РазрешенныеТипыФайлов = Новый Массив;
	РазрешенныеТипыФайлов.Добавить("pdf");
	РазрешенныеТипыФайлов.Добавить("xls");
	РазрешенныеТипыФайлов.Добавить("doc");
	РазрешенныеТипыФайлов.Добавить("xlsx");
	РазрешенныеТипыФайлов.Добавить("docx");
	
	ОсновныеПараметры.Вставить("РазрешенныеТипыКартинок", РазрешенныеТипыКартинок);
	ОсновныеПараметры.Вставить("РазрешенныеТипыФайлов", РазрешенныеТипыФайлов);
	
	ДатаФормирования = ТекущаяДата();
	
	ОсновныеПараметры.Вставить("ДатаФормирования", ДатаФормирования);
	ОсновныеПараметры.Вставить("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	ОсновныеПараметры.Вставить("ИспользоватьНаборы", ПолучитьФункциональнуюОпцию("ИспользоватьНаборы"));
	ОсновныеПараметры.Вставить("УчетНоменклатурыПоставщиков", ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков"));
	ОсновныеПараметры.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	ОсновныеПараметры.Вставить("НаименованиеНалога", НСтр("ru = 'НДС'"));
	
	ОсновныеПараметры.Вставить("ОписаниеОшибки", "");
	ОсновныеПараметры.Вставить("ИндексФайлаОбмена", 0);
	ОсновныеПараметры.Вставить("НомерВВыборке", 0);
	ОсновныеПараметры.Вставить("РежимВыгрузкиУслуг", Ложь);
	
	Возврат ОсновныеПараметры;
	
КонецФункции // ПолучитьСтруктуруОсновныхПараметровОбмена()

// Формирует объект ИнтернетПрокси по настройкам прокси.
//
// Параметры:
//	Прокси		- Соответствие -
//					ключи:
//					НеИспользоватьПроксиДляЛокальныхАдресов - строка - 
//					Сервер			- адрес прокси-сервера
//					Порт			- порт прокси-сервера
//					Пользователь	- имя пользователя для авторизации на прокси-сервере
//					Пароль			- пароль пользователя
//	Протокол	- строка - протокол для которого устанавливаются параметры прокси сервера.
//					Например: "http", "https", "ftp".
//
Функция СформироватьПрокси(НастройкиПрокси, Протокол) Экспорт
	
	Прокси = Новый ИнтернетПрокси;
	
	НастройкиПроксиПорт = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НастройкиПрокси["Порт"]);
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, НастройкиПрокси["Сервер"], НастройкиПроксиПорт);
	Прокси.Пользователь = НастройкиПрокси["Пользователь"];
	Прокси.Пароль = НастройкиПрокси["Пароль"];
	
	Возврат Прокси;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по настройке обмена
// с учетом параметров прокси.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = "";
	Если НЕ РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, СформироватьПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат Истина;
	
КонецФункции

Процедура ПоместитьФайлImportВНачалоМассива(ВходнойМассив)
	
	УпорядоченныйМассив = Новый Массив;
	ПорядокОтНачала=0;
	Для н=0 По ВходнойМассив.ВГраница() Цикл
		
		ТекФайл = ВходнойМассив[н];
		
		Если СтрНайти(ТекФайл.Имя, "import") <> 0 Тогда
			УпорядоченныйМассив.Вставить(ПорядокОтНачала, ТекФайл);
			ПорядокОтНачала = ПорядокОтНачала+1;
		Иначе
			УпорядоченныйМассив.Добавить(ТекФайл);
		КонецЕсли;
		
	КонецЦикла;
	
	ВходнойМассив = УпорядоченныйМассив;
	
КонецПроцедуры

Процедура УдалитьСписокВременныхФайлов(СписокФайлов)
	
	Для каждого ТекФайл Из СписокФайлов Цикл
		
		Попытка
			УдалитьФайлы(ТекФайл.Значение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазделитьФайлыНаФрагменты(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов Цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
			
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПодготовитьZIPАрхивы(КаталогНаДиске, ОписаниеОшибки)
	
	ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	НовыйСписокФайлов = Новый СписокЗначений;
	
	ЗаписьАрхива.Добавить(КаталогНаДиске + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать zip-архив на диск!'")));
		
		Возврат НовыйСписокФайлов;
		
	КонецПопытки;
	
	ФайлАрхива = Новый Файл(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ФайлАрхива.Имя);
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(КаталогНаДиске, МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	МаскаФайлыИКаталоги = "*";
	МаскаФайлы = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогНаДиске, МаскаФайлы);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогНаДиске + "\" + Подкаталог, МаскаФайлыИКаталоги);
			
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, МаскаФайлы);
					
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);  
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки Цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			
			ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если СтрНайти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
		
	Иначе
		
		// Для картинки оставляем 2 папки и разворачиваем слэши для идентификации на сервере сайта.
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
		
		ПутьДляУдаления = СтрЗаменить(КаталогНаДиске, "\", "/") + "/";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ПолноеИмяФайлаДляСервера);
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ИсходноеИмяФайла)
	
	ПозицияТочки = СтрНайти(ИсходноеИмяФайла, ".");
	
	ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	
	ПозицияТочки = СтрНайти(ПраваяЧастьИсходногоИмени, ".");
	
	Расширение = ПраваяЧастьИсходногоИмени;
	
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

Функция ПодготовитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	Возврат Путь;
	
КонецФункции

// Добавляет данные узла плана обмена в структуру Параметры.
//
Процедура ДобавитьНастройкиУзлаВПараметры(УзелОбмена, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СоответствияОбъектовСайта.УникальныйИдентификаторСайта) КАК УникальныйИдентификаторСайта
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелИнформационнойБазы";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УникальныйИдентификаторСайта>0 Тогда
			Параметры.Вставить("ИспользоватьВнешниеКодыСайта", Истина);
		Иначе
			Параметры.Вставить("ИспользоватьВнешниеКодыСайта", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК УзелОбмена,
	|	ОбменУправлениеНебольшойФирмойСайт.ПометкаУдаления КАК ПометкаУдаления,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыполнятьПолнуюВыгрузкуПринудительно КАК ВыполнятьПолнуюВыгрузкуПринудительно,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменТоварами КАК ОбменТоварами,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменТоварами КАК ВыполнятьОбменТовары,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменТоварами КАК ВыполнятьОбменЦены,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменЗаказами КАК ОбменЗаказами,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменЗаказами КАК ВыполнятьОбменЗаказы,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	|	ОбменУправлениеНебольшойФирмойСайт.КаталогВыгрузки КАК КаталогВыгрузки,
	|	ОбменУправлениеНебольшойФирмойСайт.АдресСайта КАК АдресСайта,
	|	ОбменУправлениеНебольшойФирмойСайт.ИмяПользователя КАК ИмяПользователя,
	|	"""" КАК Пароль,
	|	ОбменУправлениеНебольшойФирмойСайт.ИспользоватьРегламентныеЗадания КАК ИспользоватьРегламентныеЗадания,
	|	ОбменУправлениеНебольшойФирмойСайт.ИдентификаторРегламентногоЗадания КАК ИдентификаторРегламентногоЗадания,
	|	ОбменУправлениеНебольшойФирмойСайт.СпособИдентификацииКонтрагентов КАК СпособИдентификацииКонтрагентов,
	|	ОбменУправлениеНебольшойФирмойСайт.КонтрагентДляПодстановкиВЗаказы КАК КонтрагентДляПодстановкиВЗаказы,
	|	ОбменУправлениеНебольшойФирмойСайт.ОрганизацияДляПодстановкиВЗаказы КАК ОрганизацияДляПодстановкиВЗаказы,
	|	ОбменУправлениеНебольшойФирмойСайт.ГруппаДляНовыхКонтрагентов КАК ГруппаДляНовыхКонтрагентов,
	|	ОбменУправлениеНебольшойФирмойСайт.ГруппаДляНовойНоменклатуры КАК ГруппаДляНовойНоменклатуры,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьКартинки КАК ВыгружатьКартинки,
	|	ОбменУправлениеНебольшойФирмойСайт.СохраненнаяТаблицаКаталогов КАК СохраненнаяТаблицаКаталогов,
	|	ОбменУправлениеНебольшойФирмойСайт.ФайлЗагрузки КАК ФайлЗагрузки,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьОстаткиПоСкладам КАК ВыгружатьОстаткиПоСкладам,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьИзменения КАК ВыгружатьИзменения,
	|	ОбменУправлениеНебольшойФирмойСайт.ОтборГруппыКатегорииНоменклатуры КАК ОтборГруппыКатегорииНоменклатуры,
	|	ОбменУправлениеНебольшойФирмойСайт.СоответствиеСтатусовЗаказов.(
	|		СтатусЗаказаНаСайте КАК СтатусЗаказаНаСайте,
	|		СостояниеЗаказаПокупателя КАК СостояниеЗаказаПокупателя,
	|		ИДСтатусаЗаказаНаСайте КАК ИДСтатусаЗаказаНаСайте,
	|		РезервироватьТовар КАК РезервироватьТовар,
	|		СкладРезерв КАК СкладРезерв
	|	) КАК ТаблицаСоответствияСтатусовЗаказов,
	|	ОбменУправлениеНебольшойФирмойСайт.ВидыЦен.(
	|		ВидЦен КАК ВидЦен
	|	) КАК ВидыЦен,
	|	ОбменУправлениеНебольшойФирмойСайт.ВидЗаказа КАК ВидЗаказа,
	|	ОбменУправлениеНебольшойФирмойСайт.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ОбменУправлениеНебольшойФирмойСайт.ДатаНачалаВыгрузкиЗаказов КАК ДатаНачалаВыгрузкиЗаказов,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке КАК ОбновлятьТолькоНеПроведенныеЗаказыПриЗагрузке,
	|	ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат.(
	|		ИдСпособаОплатыНаСайте КАК ИдСпособаОплатыНаСайте,
	|		СпособОплатыНаСайте КАК СпособОплатыНаСайте,
	|		АналитикаОплаты КАК АналитикаОплаты,
	|		ТипОплатыНаСайте КАК ТипОплатыНаСайте
	|	) КАК ТаблицаСоответствияВидовОплат,
	|	ОбменУправлениеНебольшойФирмойСайт.СкладДляПодстановкиВЗаказы КАК СкладДляПодстановкиВЗаказы,
	|	ОбменУправлениеНебольшойФирмойСайт.СпособУстановкиДатыОтгрузкиЗаказа КАК СпособУстановкиДатыОтгрузкиЗаказа,
	|	ОбменУправлениеНебольшойФирмойСайт.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней КАК СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней,
	|	ОбменУправлениеНебольшойФирмойСайт.СоответствиеСлужбДоставки.(
	|		ИдСлужбыДоставкиНаСайте КАК ИдСлужбыДоставкиНаСайте,
	|		СлужбаДоставкиНаСайте КАК СлужбаДоставкиНаСайте,
	|		СлужбаДоставки КАК СлужбаДоставки,
	|		СпособДоставки КАК СпособДоставки
	|	) КАК ТаблицаСоответствияСлужбДоставки,
	|	ОбменУправлениеНебольшойФирмойСайт.ОнлайнОплаты КАК ОнлайнОплаты,
	|	ОбменУправлениеНебольшойФирмойСайт.ПодчиненныеДокументы КАК ПодчиненныеДокументы,
	|	ОбменУправлениеНебольшойФирмойСайт.ПротоколОбменаCMS КАК ПротоколОбменаCMS,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиПоискаКонтрагентов КАК НастройкиПоискаКонтрагентов,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиВыгрузкиРеквизитов КАК НастройкиВыгрузкиРеквизитов,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиВыгрузкиДопРеквизитовЗаказов КАК НастройкиВыгрузкиДопРеквизитовЗаказов,
	|	ОбменУправлениеНебольшойФирмойСайт.РазмерПорции КАК РазмерПорции,
	|	ОбменУправлениеНебольшойФирмойСайт.ВидЦенУслуг КАК ВидЦенУслуг,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьДнейГрафика КАК ВыгружатьДнейГрафика,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбменЗаписьНаУслуги КАК ОбменЗаписьНаУслуги,
	|	ОбменУправлениеНебольшойФирмойСайт.СостояниеЗаказНаряда КАК СостояниеЗаказНаряда,
	|	ОбменУправлениеНебольшойФирмойСайт.КоличествоПовторений КАК КоличествоПовторений,
	|	ОбменУправлениеНебольшойФирмойСайт.ИдентификаторКаталогаУслуг КАК ИдентификаторКаталогаУслуг,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиВыгрузкиОстатковПоставщиковНаСайт КАК НастройкиВыгрузкиОстатковПоставщиковНаСайт,
	|	ОбменУправлениеНебольшойФирмойСайт.ГруппаДоступаДляНовыхКонтрагентов КАК ГруппаДоступаДляНовыхКонтрагентов,
	|	ОбменУправлениеНебольшойФирмойСайт.ПробиватьЧекиПоОнлайнОплатам КАК ПробиватьЧекиПоОнлайнОплатам,
	|	ОбменУправлениеНебольшойФирмойСайт.СоответствиеПолейНоменклатуры.(
	|		ПолеНоменклатуры КАК ПолеНоменклатуры,
	|		НаименованиеПоляXML КАК НаименованиеПоляXML
	|	) КАК СоответствиеПолейНоменклатуры,
	|	ОбменУправлениеНебольшойФирмойСайт.ВидЦеныДляПодстановкиВЗаказы КАК ВидЦеныДляПодстановкиВЗаказы,
	|	ОбменУправлениеНебольшойФирмойСайт.МетодОценкиДляПодстановкиВНоменклатуру КАК МетодОценкиДляПодстановкиВНоменклатуру,
	|	ОбменУправлениеНебольшойФирмойСайт.СчетУчетаЗапасовДляПодстановкиВНоменклатуру КАК СчетУчетаЗапасовДляПодстановкиВНоменклатуру,
	|	ОбменУправлениеНебольшойФирмойСайт.ВыгружатьТоварыТолькоСНеНулевойЦеной КАК ВыгружатьТоварыТолькоСНеНулевойЦеной,
	|	ОбменУправлениеНебольшойФирмойСайт.ОбязательноеНаличиеФотографий КАК ОбязательноеНаличиеФотографий,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиВыгрузкиДопРеквизитовНоменклатуры КАК НастройкиВыгрузкиДопРеквизитовНоменклатуры,
	|	ОбменУправлениеНебольшойФирмойСайт.НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать КАК НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаНастроек = Результат.Выгрузить();
	Для Каждого Колонка Из ТаблицаНастроек.Колонки Цикл
		
		Параметры.Вставить(Колонка.Имя, ТаблицаНастроек[0][Колонка.Имя]);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.Пароль = ПарольИзХранилища;
	
	Если Параметры.ОбменЗаписьНаУслуги Тогда
		
		Параметры.Вставить("ПроизводственныйКалендарь", Параметры.ОрганизацияВладелецКаталога.ПроизводственныйКалендарь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиЗаписьНаУслуги.Услуга КАК Услуга
		|ИЗ
		|	РегистрСведений.НастройкиЗаписьНаУслуги КАК НастройкиЗаписьНаУслуги
		|ГДЕ
		|	НастройкиЗаписьНаУслуги.УзелОбмена = &УзелОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкиЗаписьНаУслуги.Услуга";
		Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
		
		Параметры.Вставить("Услуги", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга"));
	КонецЕсли;
	
	Если Параметры.ПробиватьЧекиПоОнлайнОплатам Тогда
		
		Параметры.ПробиватьЧекиПоОнлайнОплатам = ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Параметры.ОрганизацияДляПодстановкиВЗаказы);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, Наименование, Значение)
	
	Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизитаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначениеРеквизита"));
	
	ЗначениеРеквизитаXDTO.Наименование = Наименование;
	ЗначениеРеквизитаXDTO.Значение.Добавить(ФорматЗначениеРеквизитаДляXDTO(ПолучитьСтрокуЗаписиДляXML(Значение)));
	
	ЗначенияРеквизитовXDTO.ЗначениеРеквизита.Добавить(ЗначениеРеквизитаXDTO);
	
КонецПроцедуры

Функция ФорматЗначениеРеквизитаДляXDTO(Значение)
	
	Возврат Лев(Значение, 1000);
	
КонецФункции

// Получает тип свойства от типа объекта XDTO.
//
// Параметры:
//	ТипОбъектаXDTO - тип объекта XDTO, от которого требуется получить тип свойства
//	ИмяСвойства - имя свойства, тип которого нужно получить
//
// Возвращаемое значение:
//	ТипОбъектаXDTO.
//
Функция ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТипОбъектаXDTO, ИмяСвойства)
	
	ТипСвойства = ТипОбъектаXDTO.Свойства.Получить(ИмяСвойства).Тип;
	Возврат ТипСвойства;
	
КонецФункции

Функция ПолучитьКонтрагентаXDTO(ДанныеКонтрагента, ПакетCML) Экспорт
	
	Если ДанныеКонтрагента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоОрганизация = ТипЗнч(ДанныеКонтрагента.Контрагент) = Тип("СправочникСсылка.Организации");
	Если ЭтоОрганизация Тогда
		
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Контрагент"));
		
	Иначе
		
		КонтрагентыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Документ"), "Контрагенты");
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(КонтрагентыТип, "Контрагент"));
		
	КонецЕсли;
	
	КонтрагентXDTO.ИД = Строка(ДанныеКонтрагента.Контрагент.УникальныйИдентификатор());
	КонтрагентXDTO.Наименование = ФорматНаименованияДляXDTO(ДанныеКонтрагента.Наименование);
	
	Если ЭтоОрганизация Тогда
		ЭтоЮрЛицо = ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе 
		ЭтоЮрЛицо = ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
		ИЛИ ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ОфициальноеНаименование = ФорматНаименованияДляXDTO(ДанныеКонтрагента.НаименованиеПолное);
		КонецЕсли;
		
		Если ЭтоОрганизация Тогда
			ДобавитьЮрАдресОрганизацииXDTO(КонтрагентXDTO, ДанныеКонтрагента.КонтактнаяИнформация, ПакетCML);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ПолноеНаименование = ФорматНаименованияДляXDTO(ДанныеКонтрагента.НаименованиеПолное);
		КонецЕсли;
		
	КонецЕсли;
	
	ИНН = ПолучитьИННДляXDTO(ДанныеКонтрагента.ИНН, ЭтоЮрЛицо);
	Если НЕ ПустаяСтрока(ИНН) Тогда
		КонтрагентXDTO.ИНН = ИНН;
	КонецЕсли;
	
	КПП = ПолучитьКППДляXDTO(ДанныеКонтрагента.КПП);
	Если НЕ ПустаяСтрока(КПП) Тогда
		КонтрагентXDTO.КПП = КПП;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		КонтрагентXDTO.ОКПО = ДанныеКонтрагента.КодПоОКПО;
	КонецЕсли;
	
	Если НЕ ЭтоОрганизация Тогда
		КонтрагентXDTO.Роль = "Покупатель";
	КонецЕсли;
	
	КонтрагентXDTO.Проверить();
	
	Возврат КонтрагентXDTO;
	
КонецФункции

// Проверяет штрихкод на соответствие формату CML208.
// Если штрихкод не соответствует формату, возвращает пустую строку.
//
Функция ПолучитьШтрихкодДляXDTO(Штрихкод)
	
	Если СтрДлина(Штрихкод) < 8
		ИЛИ СтрДлина(Штрихкод) > 14 Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Процедура ДобавитьЮрАдресОрганизацииXDTO(ОрганизацияXDTO, КонтактнаяИнформация, ПакетCML)
	
	ВыборкаКИ = КонтактнаяИнформация.Выбрать();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если НЕ ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
		ИЛИ ПустаяСтрока(ВыборкаКИ.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ЮридическийАдресXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Адрес"));
	ЮридическийАдресXDTO.Представление = ВыборкаКИ.Представление;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВыборкаКИ.Значение);
	
	АдресныеПоля = Новый Соответствие;
	АдресныеПоля.Вставить("Индекс",          "Почтовый индекс");
	АдресныеПоля.Вставить("НаселенныйПункт", "Населенный пункт");
	АдресныеПоля.Вставить("Регион",          "Регион");
	АдресныеПоля.Вставить("Район",           "Район");
	АдресныеПоля.Вставить("Город",           "Город");
	АдресныеПоля.Вставить("Улица",           "Улица");
	АдресныеПоля.Вставить("Здание",          "Дом");
	АдресныеПоля.Вставить("Корпуса",         "Корпус");
	АдресныеПоля.Вставить("Помещения",       "Квартира");
	АдресныеПоля.Вставить("Страна",          "Страна");
	
	СокращенияОбъектовАдресацииАдресаРФ = СокращенияОбъектовАдресацииАдресаРФ();
	
	Для каждого АдресноеПоле Из АдресныеПоля Цикл
		Если НЕ ЗначениеЗаполнено(СведенияОбАдресе[АдресноеПоле.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресноеПолеЗначение = СведенияОбАдресе[АдресноеПоле.Ключ];
		
		Если ТипЗнч(АдресноеПолеЗначение) = Тип("Массив")
			//И АдресноеПолеЗначение.Количество() = 1
			И АдресноеПолеЗначение[0].Свойство("Номер") Тогда 
			
			
			АдресноеПолеСоставнаяСтрока = "";
			
			Корпуса = "";
			ПредставлениеКорпуса = "";
			Помещения = "";
			ПредставлениеПомещения = "";
			
			Если СведенияОбАдресе.Свойство("Корпуса", Корпуса) Тогда
				Для Индекс = 0 По Корпуса.Количество() - 1 Цикл
					
					Корпус = Корпуса[Индекс];
					
					ПредставлениеКорпуса = ПредставлениеКорпуса
					+ СокрЛП(?(Корпус.Свойство("ТипКорпуса") И Индекс > 0,
					НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Корпус.ТипКорпуса)]), ""))
					+ " "
					+ СокрЛП(?(Корпус.Свойство("Номер"), Корпус.Номер, ""))
					+ " ";
					
				КонецЦикла;
				
				АдресноеПолеСоставнаяСтрока = АдресноеПолеСоставнаяСтрока + ПредставлениеКорпуса;
				
			ИначеЕсли СведенияОбАдресе.Свойство("Помещения", Помещения) Тогда
				
				Для Индекс = 0 По Помещения.Количество() - 1 Цикл
					
					Помещение = Помещения[Индекс];
					
					ПредставлениеПомещения = ПредставлениеПомещения
					+ СокрЛП(?(Помещение.Свойство("ТипПомещения") И Индекс > 0,
					НРег(СокращенияОбъектовАдресацииАдресаРФ[НРег(Помещение.ТипПомещения)]), ""))
					+ " "
					+ СокрЛП(?(Помещение.Свойство("Номер"), Помещение.Номер, ""))
					+ " ";
					
				КонецЦикла;
				
				АдресноеПолеСоставнаяСтрока = АдресноеПолеСоставнаяСтрока + ПредставлениеПомещения;
				
			Иначе
				
				Для каждого адресноеПолеДопЗначение Из АдресноеПолеЗначение Цикл
					Для каждого ключЗначение Из адресноеПолеДопЗначение Цикл
						АдресноеПолеСоставнаяСтрока = АдресноеПолеСоставнаяСтрока + ключЗначение.Значение;
					КонецЦикла; 
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ АдресноеПолеЗначение.Получить(АдресноеПолеЗначение.ВГраница()) = адресноеПолеДопЗначение Тогда
				АдресноеПолеСоставнаяСтрока = АдресноеПолеСоставнаяСтрока + " ";
			КонецЕсли;
			
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, АдресноеПоле.Значение, АдресноеПолеСоставнаяСтрока, ПакетCML);
			
		ИначеЕсли ТипЗнч(АдресноеПолеЗначение) = Тип("Структура")
			И АдресноеПолеЗначение.Свойство("Номер") Тогда
			
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, АдресноеПоле.Значение, АдресноеПолеЗначение.Номер, ПакетCML);
			
		Иначе
			ДобавитьАдресноеПолеXDTO(ЮридическийАдресXDTO, АдресноеПоле.Значение, СведенияОбАдресе[АдресноеПоле.Ключ], ПакетCML);
		КонецЕсли;
		
	КонецЦикла;
	
	ОрганизацияXDTO.Адрес = ЮридическийАдресXDTO;
	
КонецПроцедуры

// Добавляет адресное поле в объект XDTO.
//
// Параметры:
//	АдресXDTO - объект XDTO типа Адрес
//	ИмяПоля - Строка
//	Значение - Строка
//	ПакетCML - пакет XDTO, содержащий типы CML.
//
Процедура ДобавитьАдресноеПолеXDTO(АдресXDTO, ИмяПоля, Значение, ПакетCML)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	АдресноеПолеXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("АдресноеПоле"));
	
	АдресноеПолеXDTO.Тип = ИмяПоля;
	АдресноеПолеXDTO.Значение = Значение;
	
	АдресXDTO.АдресноеПоле.Добавить(АдресноеПолеXDTO);
	
КонецПроцедуры

Функция ТипЗначенияСправочник(Тип)
	
	Если Тип=Тип("Строка")
		ИЛИ Тип=Тип("Число")
		ИЛИ Тип=Тип("Дата")
		ИЛИ Тип=Тип("Булево")
		ИЛИ Тип=Тип("УникальныйИдентификатор")
		ИЛИ Тип=Тип("Неопределено")
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТипЗначенияСправочник = Ложь;
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

Функция ФорматНаименованияДляXDTO(Наименование)
	
	Возврат Лев(Наименование, 250);
	
КонецФункции

Функция ФорматДатыДляXDTO(ЗначениеДата, ВернутьДату = Истина, ВернутьВремя = Ложь)
	
	ФорматДаты = "ДФ=yyyy-MM-dd; ДЛФ=D";
	ФорматВремени = "ДЛФ=T";
	РазделительДатаВремя = "T";
	
	ДатаСтрока = Формат(ЗначениеДата, ФорматДаты);
	ВремяСтрока = Формат(ЗначениеДата, ФорматВремени);
	Результат = "";
	
	Если ВернутьДату И ВернутьВремя Тогда
		Результат = ДатаСтрока + РазделительДатаВремя + ВремяСтрока;
	ИначеЕсли ВернутьДату И (НЕ ВернутьВремя) Тогда
		Результат = ДатаСтрока;
	ИначеЕсли (НЕ ВернутьДату) И ВернутьВремя Тогда
		Результат = ВремяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтрокиЛюбогоФормата(СтрДата)
	
	Разделители = "-.,/:";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли (Сим = "T" ИЛИ Сим = " ") И МассивПолей.ВГраница() < 3 Тогда
			МассивПолей.Вставить(3, "");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	Поле1 = Макс(1, XMLЗначение(Тип("Число"), " " + СокрЛП(МассивПолей[0])));
	Поле2 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Поле3 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Если СтрДлина(МассивПолей[0]) = 8 ИЛИ СтрДлина(МассивПолей[0]) = 14 Тогда
		
		Возврат Дата(МассивПолей[0]);
		
	ИначеЕсли СтрДлина(МассивПолей[0]) = 4 Тогда
		Год   = Мин(3999, Поле1);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле3);
	ИначеЕсли МассивПолей.ВГраница() > 0
		И СтрДлина(МассивПолей[1]) = 4 Тогда
		Год   = Мин(3999, Поле2);
		Месяц = Мин(12,   Поле1);
		День  = Мин(31,   Поле3);
	Иначе
		Год   = Мин(3999, Поле3);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле1);
	КонецЕсли;
	
	Час = Мин(23, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 3, "0", СокрЛП(МассивПолей[3]))));
	Мин = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 4, "0", СокрЛП(МассивПолей[4]))));
	Сек = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 5, "0", СокрЛП(МассивПолей[5]))));
	
	Возврат Дата(Год, Месяц, День, Час, Мин, Сек);
	
КонецФункции

// Возвращает значение валюты для выгрузки в XML.
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты
// 
// Возвращаемое значение:
//  Строка.
//
Функция ФорматВалютыДляXDTO(Валюта) Экспорт
	
	ТекстВалюты = "???";
	
	Если ТипЗнч(Валюта) = Тип("СправочникСсылка.Валюты") Тогда
		ТекстВалюты = Валюта.Наименование;
	КонецЕсли;
	
	Возврат Лев(ТекстВалюты, 3);
	
КонецФункции

Процедура ВывестиСписокДокументовДляПротокола(Описание, МассивДокументов)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание + ". " + НСтр("ru = 'Список документов:'");
	
	Для Каждого Док Из МассивДокументов Цикл
		
		СтруктураРеквизитовЗаказаНаСайте = ПолучитьРеквизитыЗаказаНаСайте(Док.Ссылка);
		
		Если СтруктураРеквизитовЗаказаНаСайте = Неопределено Тогда
			НомерЗаказаНаСайте = "";
			ДатаЗаказаНаСайте = "";
		Иначе
			НомерЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте;
			ДатаЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.ДатаЗаказаНаСайте;
		КонецЕсли;
		
		Описание = Описание + Символы.ПС + Символы.НПП + Символы.НПП
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№ %1 от %2 (№ %3 от %4 на сайте)'"),
		Док.Номер,
		Док.Дата,
		НомерЗаказаНаСайте,
		ДатаЗаказаНаСайте);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСписокОплатДляПротокола(Описание, МассивДокументов)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание + ". " + НСтр("ru = 'Список документов:'");
	
	Для Каждого Док Из МассивДокументов Цикл
		
		СтруктураРеквизитовОплатНаСайте = ПолучитьРеквизитыОплатыНаСайте(Док.Ссылка);
		
		Если СтруктураРеквизитовОплатНаСайте = Неопределено Тогда
			НомерОплатыНаСайте = "";
			ДатаОплатыНаСайте = "";
		Иначе
			НомерОплатыНаСайте = СтруктураРеквизитовОплатНаСайте.НомерОплатыНаСайте;
			ДатаОплатыНаСайте = СтруктураРеквизитовОплатНаСайте.ДатаОплатыНаСайте;
		КонецЕсли;
		
		Описание = Описание + Символы.ПС + Символы.НПП + Символы.НПП
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№ %1 от %2 (№ %3 от %4 на сайте)'"),
		Док.Номер,
		Док.Дата,
		НомерОплатыНаСайте,
		ДатаОплатыНаСайте);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РаспаковатьZIPАрхив(СтрокаZIP, ОписаниеОшибки) Экспорт
	
	СтрокаСодержимого = "";
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	
	Попытка
		
		СоздатьКаталог(ИмяКаталога);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось распаковать архив с заказами!'")));
		
		Возврат "";
		
	КонецПопытки;
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка
		
		СтрокаВФайл.Записать(ИмяФайла);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось записать архив с заказами: '")
		+ ИмяФайла));
		
		Возврат "";
		
	КонецПопытки;
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			КодировкаXML = КодировкаФайла(РаспакованныеФайлы[0].ПолноеИмя);
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя, КодировкаXML);
			СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось распаковать архив с заказами: '")
		+ ИмяФайла));
		
		Возврат "";
		
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

// Возвращает структуру, содержащую данные банка, полученные из объекта XDTO типа Банк
//
Функция ПолучитьДанныеБанкаXDTO(БанкXDTO)
	
	ДанныеБанка = Новый Структура;
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Наименование") И СвойствоXDTOЗаполнено(БанкXDTO.Наименование) Тогда
		Наименование = БанкXDTO.Наименование;
	КонецЕсли;
	
	БИК = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "БИК") И СвойствоXDTOЗаполнено(БанкXDTO.БИК) Тогда
		БИК = СтрЗаменить(БанкXDTO.БИК, " ", "");
	КонецЕсли;
	
	SWIFT = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "SWIFT") И СвойствоXDTOЗаполнено(БанкXDTO.SWIFT) Тогда
		SWIFT = СтрЗаменить(БанкXDTO.SWIFT, " ", "");
	КонецЕсли;
	
	КоррСчет = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "СчетКорреспондентский") И СвойствоXDTOЗаполнено(БанкXDTO.СчетКорреспондентский) Тогда
		КоррСчет = СтрЗаменить(БанкXDTO.СчетКорреспондентский, " ", "");
	КонецЕсли;
	
	Адрес = "";
	Город = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") И СвойствоXDTOЗаполнено(БанкXDTO.Адрес.Представление) Тогда
		Адрес = СокрЛП(БанкXDTO.Адрес.Представление);
		Город = ПолучитьГородБанкаИзАдресаXDTO(БанкXDTO.Адрес);
	КонецЕсли;
	
	ДанныеБанка.Вставить("Наименование", Наименование);
	ДанныеБанка.Вставить("БИК", БИК);
	ДанныеБанка.Вставить("SWIFT", SWIFT);
	ДанныеБанка.Вставить("КоррСчет", КоррСчет);
	ДанныеБанка.Вставить("Адрес", Адрес);
	ДанныеБанка.Вставить("Город", Город);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство) Экспорт
	
	ЕстьСвойство = Ложь;
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат ЕстьСвойство;
	КонецЕсли;
	
	Попытка
		ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
		И ОбъектXDTO[Свойство] <> Неопределено;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьСвойство;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO) Экспорт
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ПолучитьГородБанкаИзАдресаXDTO(АдресXDTO)
	
	Город = "";
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из АдресXDTO.АдресноеПоле Цикл
			
			Если ОбъектXDTO.Тип = "Город" Тогда
				
				Город = ОбъектXDTO.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Город;
	
КонецФункции

Функция ПолучитьТипВидКонтактнойИнформацииКонтрагентаПоТипуXDTO(ТипКИXDTO)
	
	СтруктураКИ = Новый Структура();
	
	Если НРег(ТипКИXDTO) = "телефон"
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонРабочий")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонВнутренний")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонМобильный")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонДомашний") 
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "телефон") > 0
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "phone") > 0
		Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "факс" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Факс;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "почта" 
		ИЛИ НРег(ТипКИXDTO) = НРег("ЭлектроннаяПочта")
		ИЛИ НРег(ТипКИXDTO) = "email"
		ИЛИ НРег(ТипКИXDTO) = "e-mail"
		ИЛИ НРег(ТипКИXDTO) = НРег("АдресЭлектроннойПочты")
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "mail") > 0 Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = НРег("ВебСайт") 
		ИЛИ НРег(ТипКИXDTO) = "сайт" 
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "site") > 0 Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		
	ИначеЕсли НРег(ТипКИXDTO) = "skype" ИЛИ НРег(ТипКИXDTO) = "скайп" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента;
		
	Иначе
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		
	КонецЕсли;
	
	СтруктураКИ.Вставить("Тип", ТипКИ);
	СтруктураКИ.Вставить("Вид", ВидКИ);
	
	Возврат СтруктураКИ;
	
КонецФункции

Функция ПолучитьТипВидКонтактнойИнформацииКонтактногоЛицаПоТипуXDTO(ТипКИXDTO)
	
	СтруктураКИ = Новый Структура();
	
	Если НРег(ТипКИXDTO) = "телефон"
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонРабочий")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонВнутренний")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонМобильный")
		ИЛИ НРег(ТипКИXDTO) = НРег("ТелефонДомашний") 
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "телефон") > 0
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "phone") > 0 Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		
	ИначеЕсли НРег(ТипКИXDTO) = "почта" 
		ИЛИ НРег(ТипКИXDTO) = НРег("ЭлектроннаяПочта")
		ИЛИ НРег(ТипКИXDTO) = "email"
		ИЛИ НРег(ТипКИXDTO) = "e-mail"
		ИЛИ НРег(ТипКИXDTO) = НРег("АдресЭлектроннойПочты")
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "mail") > 0
		Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		
	ИначеЕсли НРег(ТипКИXDTO) = НРег("ВебСайт") 
		ИЛИ НРег(ТипКИXDTO) = "сайт" 
		ИЛИ СтрНайти(НРег(ТипКИXDTO), "site") > 0 Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.СайтПользователя;
		
	ИначеЕсли НРег(ТипКИXDTO) = "skype" ИЛИ НРег(ТипКИXDTO) = "скайп" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Skype;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
		
	Иначе
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица;
		
	КонецЕсли;
	
	СтруктураКИ.Вставить("Тип", ТипКИ);
	СтруктураКИ.Вставить("Вид", ВидКИ);
	
	Возврат СтруктураКИ;
	
КонецФункции

// Получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для российского рубля используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета.
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Фамилия") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Фамилия) Тогда
		ТекущаяСтрока = КонтрагентXDTO.Фамилия;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Имя") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Имя);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Отчество") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Возвращает массив, содержащий объекты XDTO 
//	или объект XDTO, если тип переданного параметра "ОбъектXDTO".
//
// Параметры
//	СписокXDTO - СписокXDTO, ОбъектXDTO - список XDTO, объекты которого нужно получить
//
// Возвращаемое значение
//	Массив - массив свойств объекта XDTO.
//
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO) Экспорт
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

// Распределяет сумму по колонке "Сумма".
//
// Параметры: 
//	Товары - Табличная часть
//	СуммаРаспределения - число, распределяемая сумма
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя.
//
Процедура РаспределитьСуммуПоКолонке(Документ, Товары, СуммаРаспределения)
	
	МассивДанныхКолонки = Товары.ВыгрузитьКолонку("Сумма");
	МассивРаспределения = РаспределитьПропорционально(СуммаРаспределения, МассивДанныхКолонки);
	
	Если МассивРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Индекс = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + МассивРаспределения[Индекс];
		ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//	ИсхСумма   - распределяемая сумма
//	МассивКоэф - массив коэффициентов распределения
//	Точность   - точность округления при распределении.
//
// Возвращает:
//	МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//				 суммы в соответствии с весом коэффициента (из массива коэффициентов)
//				 В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//				 или суммарный вес коэф. = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		
		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);
		
		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСумм = Новый Массив(МассивКоэф.Количество());
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом.
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;
	
	Возврат МассивСумм;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(ЗначениеСтрока)
	
	ЗначениеЧисло = 0;
	
	Попытка
		ЗначениеЧисло = Число(ЗначениеСтрока);
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

Функция ПолучитьИдНоменклатуры(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(Ид, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = Ид;
	КонецЕсли;
	
	Возврат ИдНоменклатуры;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеНоменклатуры = Лев(Наименование, ПозицияРазделителя - 1);
	Иначе
		НаименованиеНоменклатуры = Наименование;
	КонецЕсли;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции

Функция ПолучитьИдХарактеристики(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Сред(Ид, ПозицияРазделителя + 1);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	Возврат ИдХарактеристики;
	
КонецФункции

Функция ПолучитьНаименованиеХарактеристики(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеХарактеристики = Сред(Наименование, ПозицияРазделителя + 1);
	Иначе
		НаименованиеХарактеристики = "";
	КонецЕсли;
	
	Возврат НаименованиеХарактеристики;
	
КонецФункции

Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Процедура ДобавитьПараметрыПротоколаОбменаВСтруктуру(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инфо"						, "&mode=info");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

Функция ПолучитьПутьТомаДляПлатформы(ПлатформаWindows, Том) Экспорт
	
	Если ПлатформаWindows Тогда
		Возврат Том.ПолныйПутьWindows;
	Иначе
		Возврат Том.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

Функция ЭтоГруппаВерхнегоУровня(Элемент, СписокГрупп)
	
	Попытка
		
		Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда 
			Для Каждого Группа Из СписокГрупп Цикл
				Если НЕ ЗначениеЗаполнено(Группа.Значение) Тогда
					Продолжить;
				ИначеЕсли Группа.Значение.ПринадлежитЭлементу(Элемент) Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьВариантыЗначенийСвойстваПоТипу(Выборка, Тип)
	
	ВариантыЗначений = Новый Массив;
	ВыборкаЗначений = Выборка.Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаЗначений.Значение) = Тип Тогда
			
			ВариантыЗначений.Добавить(ВыборкаЗначений.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантыЗначений;
	
КонецФункции

Функция ПолучитьСтрокуЗаписиДляXML(Значение)
	
	СтрокаЗаписи = Строка(Значение);
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаЗаписи = СокрЛП(СтрокаЗаписи);
	
	Возврат СтрокаЗаписи;
	
КонецФункции

// Удаляет все содержимое каталога.
// При ошибке возвращает описание ошибки.
//
// Параметры:
//	Каталог - Строка, путь к каталогу
//	ОписаниеОшибки - Строка, описание возникшей ошибки
//
// Возвращаемое значение:
//	Булево - Истина, если успех, Ложь - если произошла ошибка.
//
Функция ОчиститьКаталог(Каталог, ОписаниеОшибки)
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось очистить каталог обмена, п.3: ")
		+ " (" + Каталог + ")"));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по URL.
//
// Параметры:
//	АдресСайта - Строка, URL
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки)
	
	АдресСайта = СокрЛП(НастройкиПодключения.АдресСайта);
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = СтрНайти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ПодробноеПредставлениеОшибки, НСтр("ru = 'Не удалось получить номер порта: '")
			+ ПортСтрока + Символы.ПС
			+ НСтр("ru = 'Проверьте правильность ввода адреса сайта.'")));
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипСайта = Неопределено;
	НастройкиПодключения.Свойство("ТипСайта" , ТипСайта);
	
	Если АдресСкрипта = "" Тогда
		
		Если ТипСайта = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс") Тогда
			АдресСкрипта = "/bitrix/admin/1c_exchange.php";
		ИначеЕсли ТипСайта = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
			АдресСкрипта = "/admin/exchange/autoimport/";
		Иначе
			АдресСкрипта = "bitrix/admin/1c_exchange.php";
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

// Выполняет необходимые действия при завершении обмена.
//
// Параметры:
//	Параметры - Структура основных параметров
//	ТаблицаИнформации - Таблица значений, состояние текущего сеанса обмена
//	Ошибка - Булево, Истина, если необходимо зафиксировать завершение обмена с ошибками.
//
Процедура ВыполнитьДействияПриЗавершенииОбмена(Параметры, Ошибка = Ложь)
	
	ТаблицаИнформации = Параметры.ТаблицаИнформации;
	ТаблицаИнформации.ЗаполнитьЗначения(Параметры.УзелОбмена, "УзелИнформационнойБазы");
	
	// Записываем информацию по каждому действию в журнал регистрации.
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		СобытиеЖурнала = ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(Параметры.УзелОбмена, СтрокаТаблицыИнформации.ДействиеПриОбмене);
		
		Если СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		Если Ошибка Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
		УровеньЖурнала,
		Параметры.УзелОбмена.Метаданные(),
		Параметры.УзелОбмена,
		Параметры.РежимЗапускаОбмена + Символы.ПС + СтрокаТаблицыИнформации.Описание);
		
	КонецЦикла;
	
	// Объединяем 2 строки информации по выгрузке (товары и заказы) в одну (ВыгрузкаДанных).
	
	СтрокиВыгрузки = ТаблицаИнформации.НайтиСтроки(Новый Структура("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	Если СтрокиВыгрузки.Количество() = 2 Тогда
		
		Если СтрокиВыгрузки[1].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
			СтрокиВыгрузки[0].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
		
		ТаблицаИнформации.Удалить(СтрокиВыгрузки[1]);
		
	КонецЕсли;
	
	// Отметим выгруженные на сайт объекты в регистре соответствия объектов 1С и сайта
	Если Параметры.Свойство("СоответствияОбъектовСайта") И Параметры.ВыгружатьНаСайт=Истина Тогда
		
		МассивОбъектов = Новый Массив;
		Для каждого структураКлюч Из Параметры.СоответствияОбъектовСайта Цикл
			МассивОбъектов.Добавить(структураКлюч.Ключ);
		КонецЦикла;
		Если МассивОбъектов.Количество()>0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствияОбъектовСайта.УзелИнформационнойБазы,
			|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта,
			|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы,
			|	ИСТИНА КАК ОбъектВыгружен,
			|	СоответствияОбъектовСайта.ТипОбъекта,
			|	СоответствияОбъектовСайта.СсылкаНаОбъект
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
			|ГДЕ
			|	СоответствияОбъектовСайта.СсылкаНаОбъект В(&МассивОбъектов)
			|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
			|	И НЕ СоответствияОбъектовСайта.ОбъектВыгружен";
			
			Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
			Запрос.УстановитьПараметр("УзелОбмена", Параметры.УзелОбмена);
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствияОбъектовСайтаМенеджер = РегистрыСведений.СоответствияОбъектовСайта.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(СоответствияОбъектовСайтаМенеджер, Выборка);
				
				СоответствияОбъектовСайтаМенеджер.Записать(Истина);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли; 
	// Записываем состояния обмена.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		ЗаписьСостояния = РегистрыСведений.СостоянияОбменовССайтами.СоздатьМенеджерЗаписи();
		ЗаписьСостояния.УзелИнформационнойБазы = СтрокаТаблицыИнформации.УзелИнформационнойБазы;
		ЗаписьСостояния.ДействиеПриОбмене = СтрокаТаблицыИнформации.ДействиеПриОбмене;
		ЗаписьСостояния.Прочитать();
		
		ЗаполнитьЗначенияСвойств(ЗаписьСостояния, СтрокаТаблицыИнформации, , "ДанныеПоследнегоОбмена, ДанныеПоследнегоНепустогоОбмена, ПоследнийТекстОшибки");
		
		Если СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
			Если Параметры.Свойство("ДанныеПоследнегоОбмена") Тогда
				ЗаписьСостояния.ДанныеПоследнегоОбмена = Новый ХранилищеЗначения(Параметры.ДанныеПоследнегоОбмена, Новый СжатиеДанных(9));
			КонецЕсли;
			Если Параметры.Свойство("ДанныеПоследнегоНепустогоОбмена") Тогда
				ЗаписьСостояния.ДанныеПоследнегоНепустогоОбмена = Новый ХранилищеЗначения(Параметры.ДанныеПоследнегоНепустогоОбмена, Новый СжатиеДанных(9));
			КонецЕсли;
			Если СтрокаТаблицыИнформации.РезультатВыполненияОбмена <> Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
				ЗаписьСостояния.ПоследнийТекстОшибки = Параметры.ОписаниеОшибки + Символы.ПС + СтрокаТаблицыИнформации.Описание;
			КонецЕсли;
		КонецЕсли;
		
		// Даты записываем по границам сеанса, чтобы работал отбор журнала.
		ЗаписьСостояния.ДатаНачала = Параметры.ДатаФормирования;
		ЗаписьСостояния.ДатаОкончания = ТекущаяДата();
		
		ЗаписьСостояния.Записать();
		
		Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
			И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			ИЛИ ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями) Тогда
			
			ЗаписьУспешногоСостояния = РегистрыСведений.СостоянияУспешныхОбменовССайтами.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
			ЗаписьУспешногоСостояния.Записать();
			
		КонецЕсли;
		
		// Дублируем записи в регистр СостоянияОбменовДанными для совместимости с БСП
		ЗаписьСостоянияОбменовДанными = РегистрыСведений.СостоянияОбменовДанными.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьСостоянияОбменовДанными, ЗаписьСостояния);
		ЗаписьСостоянияОбменовДанными.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРегистрациюИзменений(УзелОбмена, СтруктураИзменений, ОбменТоварами, ОбменЗаказами, ОбменУслугами = Ложь)
	
	Если ОбменТоварами Тогда
		
		Для Каждого Данные Из СтруктураИзменений.Товары Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
		Для Каждого Данные Из СтруктураИзменений.Файлы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбменЗаказами Тогда
		
		Для Каждого Данные Из СтруктураИзменений.Заказы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбменУслугами Тогда
		
		Для Каждого Данные Из СтруктураИзменений.Услуги Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		Для Каждого Данные Из СтруктураИзменений.Ресурсы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыЗаказаНаСайте(ЗаказПокупателя)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаказыПокупателейССайта.НомерЗаказаНаСайте,
	|	ЗаказыПокупателейССайта.ДатаЗаказаНаСайте
	|ИЗ
	|	РегистрСведений.ЗаказыПокупателейССайта КАК ЗаказыПокупателейССайта
	|ГДЕ
	|	ЗаказыПокупателейССайта.ЗаказПокупателя = &ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой()Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказаНаСайте", Выборка.НомерЗаказаНаСайте);
	СтруктураВозврата.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаЗаказаНаСайте);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьРеквизитыОплатыНаСайте(ДокументОплаты)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОплатыПокупателейССайта.НомерОплатыНаСайте,
	|	ОплатыПокупателейССайта.ДатаОплатыНаСайте
	|ИЗ
	|	РегистрСведений.ОплатыПокупателейССайта КАК ОплатыПокупателейССайта
	|ГДЕ
	|	ОплатыПокупателейССайта.ДокументОплаты = &ДокументОплаты");
	
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой()Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерОплатыНаСайте", Выборка.НомерОплатыНаСайте);
	СтруктураВозврата.Вставить("ДатаОплатыНаСайте", Выборка.ДатаОплатыНаСайте);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДобавитьХарактеристикиТовараXDTO(ТоварXDTO, ПакетCML, Номенклатура, ДеревоСвойствХарактеристик, Параметры)
	
	Если ДеревоСвойствХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТовараТип = ТоварXDTO.Свойства().Получить("ХарактеристикиТовара").Тип;
	ХарактеристикиТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикиТовараТип);
	
	НайденныеСтроки = ДеревоСвойствХарактеристик.Строки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Для каждого СтрокаХарактеристикаНоменклатуры Из НайденнаяСтрока.Строки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаХарактеристикаНоменклатуры.Характеристика) Тогда
				Продолжить;
			КонецЕсли;
			
			ХарактеристикаТовараТип = ПакетCML.Получить("ХарактеристикаТовара");
			ХарактеристикаТовараXDTO = ФабрикаXDTO.Создать(ХарактеристикаТовараТип);
			ЗаполнитьИДСайтаДляОбъектаXDTO(ХарактеристикаТовараXDTO, СтрокаХарактеристикаНоменклатуры.Характеристика,, Параметры);
			ХарактеристикаТовараXDTO.Наименование = СтрокаХарактеристикаНоменклатуры.Характеристика.Наименование;
			
			ЗначенияСвойствТип = ХарактеристикаТовараXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
			ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
			
			Для каждого СтрокаСвойстваХарактеристик Из СтрокаХарактеристикаНоменклатуры.Строки Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаСвойстваХарактеристик.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
				ЗаполнитьИДСайтаДляОбъектаXDTO(ЗначенияСвойстваXDTO, СтрокаСвойстваХарактеристик.Свойство,, Параметры);
				ЗначенияСвойстваXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаСвойстваХарактеристик.Наименование);
				
				Если СтрокаСвойстваХарактеристик.Значение = NULL Тогда
					
					// Если значение свойства не заполнено, выгружаем пустую строку.
					ЗначениеСвойства = "";
					
				Иначе
					
					ТипЗначенияСвойства = ТипЗнч(СтрокаСвойстваХарактеристик.Значение);
					Если ТипЗначенияСвойства = Тип("Дата") Тогда
						
						ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаСвойстваХарактеристик.Значение);
						
					Иначе
						
						ЗначениеСвойства = ФорматЗначениеСвойстваСтрокаДляXDTO(СтрокаСвойстваХарактеристик.Значение);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
				ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
				
			КонецЦикла;
			
			Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
				ХарактеристикаТовараXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
			КонецЕсли;
			
			ХарактеристикиТовараXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаТовараXDTO);
			
		КонецЦикла;
	КонецЦикла;
	
	ТоварXDTO.ХарактеристикиТовара = ХарактеристикиТовараXDTO;
	
КонецПроцедуры

Процедура ДобавитьСкладыВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры)
	
	ВыборкаСкладов = Параметры.ВыборкаСкладов;
	Если ВыборкаСкладов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "Склады");
	СкладыXDTO = ФабрикаXDTO.Создать(СкладыТип);
	
	ВыборкаСкладов.Сбросить();
	Пока ВыборкаСкладов.Следующий() Цикл
		
		СкладТип = ПакетCML.Получить("Склад");
		СкладXDTO = ФабрикаXDTO.Создать(СкладТип);
		
		ИдСклада = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыборкаСкладов.Склад);
		
		СкладXDTO.Ид = ИдСклада;
		СкладXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСкладов.Наименование);
		
		ВыборкаКИ = ВыборкаСкладов.КонтактнаяИнформация.Выбрать();
		Если ВыборкаКИ.Количество() > 0 Тогда
			
			//Адрес
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
			
			Если ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
				И Не ПустаяСтрока(ВыборкаКИ.Представление) Тогда
				
				АдресСтруктурнойЕдиницыXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Адрес"));
				АдресСтруктурнойЕдиницыXDTO.Представление = ВыборкаКИ.Представление;
				
				СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВыборкаКИ.Значение);
				
				АдресныеПоля = Новый Соответствие;
				АдресныеПоля.Вставить("Индекс",          "Почтовый индекс");
				АдресныеПоля.Вставить("НаселенныйПункт", "Населенный пункт");
				АдресныеПоля.Вставить("Регион",          "Регион");
				АдресныеПоля.Вставить("Район",           "Район");
				АдресныеПоля.Вставить("Город",           "Город");
				АдресныеПоля.Вставить("Улица",           "Улица");
				АдресныеПоля.Вставить("Здание",          "Дом");
				АдресныеПоля.Вставить("Корпуса",         "Корпус");
				АдресныеПоля.Вставить("Помещения",       "Квартира");
				АдресныеПоля.Вставить("Страна",          "Страна");
				
				Для каждого АдресноеПоле Из АдресныеПоля Цикл
					Если НЕ ЗначениеЗаполнено(СведенияОбАдресе[АдресноеПоле.Ключ]) Тогда
						Продолжить;
					КонецЕсли;
					
					Если АдресноеПоле.Ключ = "Помещения" Тогда 
						Если ТипЗнч(СведенияОбАдресе.Помещения) = Тип("Массив")
							И СведенияОбАдресе.Помещения.Количество() = 1
							И СведенияОбАдресе.Помещения[0].Свойство("Номер") Тогда 
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Помещения[0].Номер, ПакетCML);
						ИначеЕсли ТипЗнч(СведенияОбАдресе.Помещения) = Тип("Структура")
							И СведенияОбАдресе.Помещения.Свойство("Номер") Тогда
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Помещения.Номер, ПакетCML);
						КонецЕсли;
					ИначеЕсли АдресноеПоле.Ключ = "Здание" Тогда
						Если ТипЗнч(СведенияОбАдресе.Здание) = Тип("Массив")
							И СведенияОбАдресе.Здание.Количество() = 1
							И СведенияОбАдресе.Здание[0].Свойство("Номер") Тогда 
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Здание[0].Номер, ПакетCML);
						ИначеЕсли ТипЗнч(СведенияОбАдресе.Здание) = Тип("Структура")
							И СведенияОбАдресе.Здание.Свойство("Номер") Тогда
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Здание.Номер, ПакетCML);
						КонецЕсли;
					ИначеЕсли АдресноеПоле.Ключ = "Корпуса" Тогда
						Если ТипЗнч(СведенияОбАдресе.Корпуса) = Тип("Массив")
							И СведенияОбАдресе.Корпуса.Количество() = 1
							И СведенияОбАдресе.Корпуса[0].Свойство("Номер") Тогда 
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Корпуса[0].Номер, ПакетCML);
						ИначеЕсли ТипЗнч(СведенияОбАдресе.Корпуса) = Тип("Структура")
							И СведенияОбАдресе.Корпуса.Свойство("Номер") Тогда
							
							ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе.Корпуса.Номер, ПакетCML);
						КонецЕсли;
					Иначе
						ДобавитьАдресноеПолеXDTO(АдресСтруктурнойЕдиницыXDTO, АдресноеПоле.Значение, СведенияОбАдресе[АдресноеПоле.Ключ], ПакетCML);	
					КонецЕсли;
				КонецЦикла;
				
				СкладXDTO.Адрес = АдресСтруктурнойЕдиницыXDTO;
			КонецЕсли;
			
			//Телефон
			ВыборкаКИ.Сбросить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
			
			Если ВыборкаКИ.НайтиСледующий(СтруктураПоиска)
				И Не ПустаяСтрока(ВыборкаКИ.Представление) Тогда
				
				КонтактыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(СкладТип, "Контакты");
				КонтактыXDTO = ФабрикаXDTO.Создать(КонтактыТип);
				
				КонтактXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Контакт"));
				
				КонтактXDTO.Тип = "Телефон рабочий";
				КонтактXDTO.Значение = ВыборкаКИ.Представление;
				
				Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ВыборкаКИ.Значение);
				Если Не ПустаяСтрока(Комментарий) Тогда
					КонтактXDTO.Комментарий = Формат(Комментарий, 3000);
				КонецЕсли;
				
				КонтактыXDTO.Контакт.Добавить(КонтактXDTO);
				СкладXDTO.Контакты = КонтактыXDTO;
				
			КонецЕсли;
		КонецЕсли;
		
		СкладыXDTO.Склад.Добавить(СкладXDTO);
		
	КонецЦикла;
	
	ПакетПредложенийXDTO.Склады = СкладыXDTO;
	
КонецПроцедуры

Процедура ДобавитьОстаткиПоСкладамXDTO(ПредложениеXDTO, СкладТип, ВыборкаЦен, Параметры)
	
	ВыборкаСкладов = Параметры.ВыборкаСкладов;
	ВыборкаСкладов.Сбросить();
	
	Пока ВыборкаСкладов.Следующий() Цикл
		
		ИдСклада = Строка(ВыборкаСкладов.Склад.УникальныйИдентификатор());
		КоличествоНаСкладе = 0;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", ВыборкаЦен.Номенклатура, ВыборкаЦен.Характеристика);
		НайденныеСтроки = Параметры.ТаблицаОстатковПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаМассива Из НайденныеСтроки Цикл
			Если СтрокаМассива.Склад = ВыборкаСкладов.Склад Тогда
				КоличествоНаСкладе = СтрокаМассива.КоличествоНаСкладе;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СкладXDTO = ФабрикаXDTO.Создать(СкладТип);
		СкладXDTO.ИдСклада = ИдСклада;
		СкладXDTO.КоличествоНаСкладе = КоличествоНаСкладе;
		
		ПредложениеXDTO.Склад.Добавить(СкладXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГрафикРесурсовВПакетПредложенийXDTO(ПакетПредложенийXDTO, ПакетCML, Параметры)
	
	ВыборкаГрафикРесурсов = Параметры.ТаблицаГрафикЗанятостиРесурсов;
	
	ГрафикРесурсовТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "ГрафикРесурсов");
	ГрафикиXDTO = ФабрикаXDTO.Создать(ГрафикРесурсовТип);
	
	ВыборкаДата = ВыборкаГрафикРесурсов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаДата.Количество() = 0 Тогда
		Возврат; //не задан график
	КонецЕсли;
	
	Пока ВыборкаДата.Следующий() Цикл
		Если ВыборкаДата.РабочееВремя <> Истина Тогда
			Продолжить; //нерабочий весь день
		КонецЕсли;
		
		ВыборкаРесурс = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРесурс.Следующий() Цикл
			Если ВыборкаРесурс.РабочееВремя <> Истина Тогда
				Продолжить; //нерабочий весь день для этого сотрудника
			КонецЕсли;
			
			ВыборкаГрафик = ВыборкаРесурс.Выбрать();
			Пока ВыборкаГрафик.Следующий() Цикл
				
				ГрафикТип = ПакетCML.Получить("ГрафикРесурса");
				ГрафикXDTO = ФабрикаXDTO.Создать(ГрафикТип);
				
				ИдРесурса = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыборкаГрафик.Ресурс);
				
				ГрафикXDTO.Ид = ИдРесурса;
				ГрафикXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаГрафик.Ресурс);
				Если ЗначениеЗаполнено(ВыборкаГрафик.СотрудникБригада) Тогда
					ГрафикXDTO.Комментарий = ФорматНаименованияДляXDTO(ВыборкаГрафик.СотрудникБригада);
				Иначе
					ГрафикXDTO.Комментарий = ФорматНаименованияДляXDTO(ВыборкаГрафик.Ресурс);
				КонецЕсли;
				ГрафикXDTO.ДатаВремяНачала = ВыборкаГрафик.ВремяНачалаИнтервала;
				ГрафикXDTO.Длительность = ?(ЗначениеЗаполнено(ВыборкаГрафик.Интервал), ВыборкаГрафик.Интервал, 0);
				ГрафикXDTO.Подтверждена = ?(ЗначениеЗаполнено(ВыборкаГрафик.Подтверждена), ВыборкаГрафик.Подтверждена, Ложь);
				ГрафикXDTO.РабочееВремя = ВыборкаГрафик.РабочееВремя;
				
				ГрафикиXDTO.ГрафикРесурса.Добавить(ГрафикXDTO);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПакетПредложенийXDTO.ГрафикРесурсов = ГрафикиXDTO;
	
КонецПроцедуры

Функция КодировкаФайла(ИмяФайла)
	
	КодировкаXML = "UTF-8";
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		КодировкаXML = ЧтениеXML.КодировкаXML;
	Исключение
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат КодировкаXML;
	
КонецФункции

Функция НадписьВсеГруппы() Экспорт
	Возврат "(" + НСтр("ru = 'Все'") + ")";
КонецФункции

Функция НадписьНетГруппы() Экспорт
	Возврат НСтр("ru = '<Нет группы>'");
КонецФункции

Функция ФорматЗначениеСвойстваСтрокаДляXDTO(ЗначениеСвойстваСтрока)
	
	Возврат Лев(ЗначениеСвойстваСтрока, 1000);
	
КонецФункции

Процедура ДобавитьКатегорииКлассификатораXDTO(КлассификаторXDTO, Категории, ПакетCML, Параметры) Экспорт
	
	КатегорииКлассификатораТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Категории");
	КатегорииКлассификатораXDTO = ФабрикаXDTO.Создать(КатегорииКлассификатораТип);
	
	Пока Категории.Следующий() Цикл
		
		Если Категории.Категория.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Категории.Категория = Справочники.КатегорииНоменклатуры.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		КатегорияXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Категория"));
		ЗаполнитьИДСайтаДляОбъектаXDTO(КатегорияXDTO, Категории.Категория,, Параметры);
		ИмяКатегории = Категории.Категория.Наименование;
		КатегорияXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяКатегории);
		
		Если НЕ ЗначениеЗаполнено(КатегорияXDTO.Наименование) Тогда
			КатегорияXDTO.Наименование = "Категория";
		КонецЕсли;
		
		//Свойства
		СвойстваТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Категория"), "Свойства");
		СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
		ВыборкаСвойства = Категории.Выбрать();
		Пока ВыборкаСвойства.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСвойства.Свойство) Тогда
				ИдСвойства = ЗаполнитьИДСайтаДляОбъектаXDTO(СвойстваXDTO, ВыборкаСвойства.Свойство,, Параметры);
			КонецЕсли;
		КонецЦикла;
		Если СвойстваXDTO.Ид.Количество() > 0 Тогда
			КатегорияXDTO.Свойства = СвойстваXDTO;
		КонецЕсли;
		
		КатегорииКлассификатораXDTO.Категория.Добавить(КатегорияXDTO);
		
	КонецЦикла;
	
	Если КатегорииКлассификатораXDTO.Категория.Количество() > 0 Тогда
		КлассификаторXDTO.Категории = КатегорииКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеРесурсы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлючевыеРесурсы.Ссылка КАК Ресурс
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

Процедура ДобавитьРесурсыКлассификатораXDTO(КлассификаторXDTO, УслугиРесурсы, ПакетCML, Параметры) Экспорт
	
	РесурсыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Ресурсы");
	РесурсТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(РесурсыТип, "Ресурс");
	
	РесурсыXDTO = ФабрикаXDTO.Создать(РесурсыТип);	
	УслугиТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(РесурсТип, "Услуги");
	
	ВыборкаРесурс = УслугиРесурсы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРесурс.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаРесурс.Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаРесурс.РесурсПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		РесурсXDTO = ФабрикаXDTO.Создать(РесурсТип);
		ЗаполнитьИДСайтаДляОбъектаXDTO(РесурсXDTO, ВыборкаРесурс.Ресурс,, Параметры);
		
		РесурсXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаРесурс.Ресурс);
		РесурсXDTO.Комментарий = ФорматНаименованияДляXDTO(ВыборкаРесурс.РесурсПредставление);
		РесурсXDTO.Сотрудник = ФорматНаименованияДляXDTO(ВыборкаРесурс.Сотрудник);
		РесурсXDTO.ШагПланирования = Макс(ВыборкаРесурс.КратностьПланирования, 10);
		
		УслугиXDTO = ФабрикаXDTO.Создать(УслугиТип);
		
		ВыборкаУслуга = ВыборкаРесурс.Выбрать();
		Пока ВыборкаУслуга.Следующий() Цикл
			
			УслугаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Услуга"));
			ЗаполнитьИДСайтаДляОбъектаXDTO(УслугаXDTO, ВыборкаУслуга.услуга,, Параметры);
			УслугаXDTO.Наименование = ВыборкаУслуга.УслугаПредставление;
			УслугаXDTO.Длительность = ВыборкаУслуга.Длительность;
			
			УслугиXDTO.Услуга.Добавить(УслугаXDTO);
		КонецЦикла;
		
		РесурсXDTO.Услуги = УслугиXDTO;
		РесурсыXDTO.Ресурс.Добавить(РесурсXDTO);
	КонецЦикла;
	
	КлассификаторXDTO.Ресурсы = РесурсыXDTO;
	
	Если РесурсыXDTO.Ресурс.Количество() > 0 Тогда
		КлассификаторXDTO.Ресурсы = РесурсыXDTO;
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторОбъектаДляВыгрузки(Ссылка, Характеристика, Параметры)
	
	Если Параметры.ИспользоватьВнешниеКодыСайта = Ложь Тогда
		Возврат ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Ссылка, Характеристика);
	КонецЕсли;
	
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		ПризнакНеВыгруженные = Ложь;
	ИначеЕсли Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.UMI Тогда
		ПризнакНеВыгруженные = Истина;
	Иначе
		Возврат ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Ссылка, Характеристика);
	КонецЕсли;
	
	ИдентификаторЭлементаСтруктура = СформироватьИдентификаторСайтаОбъекта(Ссылка, Характеристика, Параметры.УзелОбмена, ПризнакНеВыгруженные);
	Если ИдентификаторЭлементаСтруктура.ИдСайта="" Тогда
		ИдентификаторЭлемента = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(Ссылка, Характеристика);
	Иначе
		ИдентификаторЭлемента = ИдентификаторЭлементаСтруктура.ИдСайта;
	КонецЕсли;
	
	Возврат ИдентификаторЭлемента;
	
КонецФункции // ()

Функция СформироватьИдентификаторСайтаОбъекта(Ссылка, Характеристика, УзелОбмена, НЕВыгруженные=Истина)
	
	Если НЕ ОбщегоНазначения.ЗначениеСсылочногоТипа(Ссылка) Тогда
		Возврат Новый Структура("ИДСайта,ДополнительныеПараметры", "", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта КАК ИДСайта,
	|	СоответствияОбъектовСайта.ДополнительныеПараметры
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект = &ВыгружаемаяСсылка
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта";
	Если НЕВыгруженные=Истина Тогда
		Запрос.Текст = Запрос.Текст + " И НЕ СоответствияОбъектовСайта.ОбъектВыгружен";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.УстановитьПараметр("ВыгружаемаяСсылка", Ссылка);
	Запрос.УстановитьПараметр("ТипОбъекта", Ссылка.Метаданные().ПолноеИмя());
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		Запрос.Текст = Запрос.Текст +
		"
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта,
		|	СоответствияОбъектовСайта.ДополнительныеПараметры
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
		|ГДЕ
		|	СоответствияОбъектовСайта.СсылкаНаОбъект = &ВыгружаемаяХарактеристика
		|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
		|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъектаХарактеристика";
		Если НЕВыгруженные=Истина Тогда
			Запрос.Текст = Запрос.Текст + " И НЕ СоответствияОбъектовСайта.ОбъектВыгружен";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВыгружаемаяХарактеристика", Характеристика);
		Запрос.УстановитьПараметр("ТипОбъектаХарактеристика", Характеристика.Метаданные().ПолноеИмя());
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Структура("ИДСайта,ДополнительныеПараметры", "", "");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИДСайта = Выборка.ИДСайта;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			Выборка.Следующий();
			ИДСайта = ИДСайта + "#" + Выборка.ИДСайта;
		КонецЕсли;
		
		Возврат Новый Структура("ИДСайта,ДополнительныеПараметры", ИДСайта, Выборка.ДополнительныеПараметры);
		
	КонецЦикла;
	
	Возврат Новый Структура("ИДСайта,ДополнительныеПараметры", "", "");
	
КонецФункции

Функция СсылкаСоответствиеПоИд(ИдОбъекта, ТипОбъекта, УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторИнформационнойБазы = &УникальныйИдентификаторИнформационнойБазы
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И НЕ СоответствияОбъектовСайта.СсылкаНаОбъект = НЕОПРЕДЕЛЕНО
	|	И НЕ ЕСТЬNULL(СоответствияОбъектовСайта.СсылкаНаОбъект.ЭтоГруппа, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторИнформационнойБазы", ИдОбъекта);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

// Получение данных из строки в формате JSON.
Функция ПреобразоватьВСтрокуИзJSON(Строка)
	
	Результат = Неопределено;
	Если Строка="" Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьИДСайтаДляОбъектаXDTO(ОбъектXDTO, ВыгружаемаяСсылка, Характеристика=Неопределено, Параметры, ИмяПоляИд="Ид")
	
	Если ОбъектXDTO.Свойства().Получить(ИмяПоляИд) = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("УзелОбмена")
		ИЛИ (Параметры.Свойство("ОбменЧерезВебСервис") И Параметры.ОбменЧерезВебСервис=Истина)
		ИЛИ Параметры.ИспользоватьВнешниеКодыСайта = Ложь
		
		Тогда
		// для обмена через веб-сервис
		ИдентификаторЭлемента = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыгружаемаяСсылка, Характеристика);
		Если ТипЗнч(ОбъектXDTO[ИмяПоляИд])=Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяПоляИд].Добавить(ИдентификаторЭлемента);
		Иначе
			ОбъектXDTO[ИмяПоляИд] = ИдентификаторЭлемента;
		КонецЕсли;
		Возврат ИдентификаторЭлемента;
	КонецЕсли; 
	
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		// Для 1С-Битрикс в поле "Ид" передается идентификатор объекта, найденный в рег.СоответствияОбъектовСайта для узла в
		// поле "УникальныйИдентификаторСайта" Если в регистре нет записи для объекта, в поле "Ид" передается УИД 1С объекта
		ИдентификаторЭлементаСтруктура = СформироватьИдентификаторСайтаОбъекта(ВыгружаемаяСсылка, Характеристика, Параметры.УзелОбмена, Ложь);
		
		Если СтрДлина(ИдентификаторЭлементаСтруктура.ИдСайта) > 40 Тогда
			СтруктураРезультата = Параметры.СтрокаТаблицыКаталогов.СтруктураРезультата;
			ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки,
			ОписаниеИсключительнойОшибки("", НСтр("ru = 'Идентификатор объекта - больше 40 символов: '")
			+ ТипЗнч(ВыгружаемаяСсылка) + ": " + ВыгружаемаяСсылка + ":"+ ИдентификаторЭлементаСтруктура.ИдСайта
			+ Символы.ПС + "Объект выгружен с идентификатором 1С!"));
			
			ИдентификаторЭлемента = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыгружаемаяСсылка, Характеристика);
		ИначеЕсли ИдентификаторЭлементаСтруктура.ИдСайта="" Тогда
			ИдентификаторЭлемента = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыгружаемаяСсылка, Характеристика);
		Иначе
			ИдентификаторЭлемента = ИдентификаторЭлементаСтруктура.ИдСайта;
			ДополнительныеПараметры = ПреобразоватьВСтрокуИзJSON(ИдентификаторЭлементаСтруктура.ДополнительныеПараметры);
			Если ТипЗнч(ДополнительныеПараметры)=Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(ОбъектXDTO, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектXDTO[ИмяПоляИд])=Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяПоляИд].Добавить(ИдентификаторЭлемента);
		Иначе
			ОбъектXDTO[ИмяПоляИд] = ИдентификаторЭлемента;
		КонецЕсли;
	Иначе
		// Для 1С-UMI  в поле "Ид" передается УИД 1С объекта
		// Если для объекта есть запись в рег.СоответствияОбъектовСайта для узла без признака "ОбъектВыгружен", дополнительно
		// в поле "ИдСайта" передается значение "УникальныйИдентификаторСайта" из рег.СоответствияОбъектовСайта Если в
		// регистре нет записи для объекта, или для записи установлен признак "ОбъектВыгружен", поле "ИдСайта" не выгружается
		
		ИдентификаторЭлемента = ОбменССайтомПовтИсп.СформироватьУникальныйИдентификаторОбъекта(ВыгружаемаяСсылка, Характеристика);
		Если ТипЗнч(ОбъектXDTO[ИмяПоляИд])=Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяПоляИд].Добавить(ИдентификаторЭлемента);
		Иначе
			ОбъектXDTO[ИмяПоляИд] = ИдентификаторЭлемента;
		КонецЕсли;
		
		Если ОбъектXDTO.Свойства().Получить("ИдСайта") = Неопределено Тогда
			Возврат ОбъектXDTO[ИмяПоляИд];
		КонецЕсли;
		
		ИдЭлемента = СформироватьИдентификаторСайтаОбъекта(ВыгружаемаяСсылка, Характеристика, Параметры.УзелОбмена, Ложь);
		Если ИдЭлемента.Свойство("ИдСайта") И ЗначениеЗаполнено(ИдЭлемента.ИдСайта) Тогда
			ОбъектXDTO.ИдСайта = ИдЭлемента.ИдСайта;
			Параметры.СоответствияОбъектовСайта.Вставить(ВыгружаемаяСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектXDTO[ИмяПоляИд];
	
КонецФункции

Функция ИдКлассификатораПредложенийБитрикс(ИдентификаторКаталога, УзелОбмена)
	
	// В данных сайта Битрикс есть 2 идентификатора: Каталога и Предложений, например clothes_s1 и clothes_offers_s1
	// В узле обмена хранится Ид Каталога. Функция получает второй Ид, который должен быть Ид Предложений
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта КАК УникальныйИдентификаторСайта
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	НЕ СоответствияОбъектовСайта.УникальныйИдентификаторСайта = &ИдентификаторКаталога
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена	
	|	И НЕ СоответствияОбъектовСайта.СсылкаНаОбъект = Неопределено";
	
	Запрос.УстановитьПараметр("ИдентификаторКаталога", ИдентификаторКаталога);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);	
	Запрос.УстановитьПараметр("ТипОбъекта", "Справочник.КатегорииНоменклатуры");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ИдентификаторКаталога; //Одинаковый идентификатор у Каталога и Классификатора
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.УникальныйИдентификаторСайта;
	КонецЦикла;
	
КонецФункции

Процедура УстановитьДатуОтгрузкиЗаказа(ДокументОбъект, Параметры, СвойстваЗаказа)
	
	ДатаОтгрузки = Дата(1,1,1);
	
	Если Параметры.ОбменЧерезВебСервис Тогда
		
		ДатаОтгрузкиСтрока = СвойстваЗаказа.Получить("Дата отгрузки");
		Если ДатаОтгрузкиСтрока <> Неопределено
			И ЗначениеЗаполнено(ДатаОтгрузкиСтрока) Тогда
			
			ДатаСтрока = Лев(ДатаОтгрузкиСтрока, 10);
			ВремяСтрока = Сред(ДатаОтгрузкиСтрока, 12);
			
			ДатаОтгрузки = ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока);
			
		КонецЕсли;
	Иначе
		
		Если Параметры.СпособУстановкиДатыОтгрузкиЗаказа = Перечисления.СпособыУстановкиДатыОтгрузкиЗаказа.ТекущаяДата Тогда
			
			ДатаОтгрузки = ТекущаяДата();
			
		ИначеЕсли Параметры.СпособУстановкиДатыОтгрузкиЗаказа = Перечисления.СпособыУстановкиДатыОтгрузкиЗаказа.КоличествоДней Тогда
			
			ДатаОтгрузки = ТекущаяДата() + Параметры.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней * 86400;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ДатаОтгрузки = ДатаОтгрузки;
	
КонецПроцедуры

Функция ЗагрузитьНастройкиБитрикс(УзелОбмена, ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = "";
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	АдресСкрипта = "bitrix/admin/1c_exchange.php";
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ИмяПользователя", УзелОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("АдресСайта", УзелОбмена.АдресСайта);
	НастройкиПодключения.Вставить("ТипСайта", УзелОбмена.ПротоколОбменаCMS);
	УстановитьПривилегированныйРежим(Истина);
	ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	НастройкиПодключения.Вставить("Пароль", ПарольИзХранилища);
	
	Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат "";
	КонецЕсли;
	
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Попытка
		Токен = "&" + СтрПолучитьСтроку(ОтветСервера, 4);
	Исключение
		Возврат "";
	КонецПопытки;
	
	СтрокаЗапроса = "bitrix/admin/1c_exchange.php?type=sale&mode=info"+Токен;
	
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	СтрокаЗапроса,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка видов оплат не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
	Иначе
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			СтрокаXML = ОтветСервера;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ЗагрузитьНастройкиUMI(УзелОбмена, ОписаниеОшибки) Экспорт
	
	ОписаниеОшибки = "";
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	АдресСкрипта = "admin/exchange/autoimport/";
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ИмяПользователя", УзелОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("АдресСайта", УзелОбмена.АдресСайта);
	НастройкиПодключения.Вставить("ТипСайта", УзелОбмена.ПротоколОбменаCMS);
	УстановитьПривилегированныйРежим(Истина);
	ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	НастройкиПодключения.Вставить("Пароль", ПарольИзХранилища);
	
	Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат "";
	КонецЕсли;
	
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	ЗаголовкиЗапросов = "";
	СтрокаЗапроса = "/admin/exchange/orderSettings/";
	
	ОтветСервера = ПолучитьДанныеССервера(
	Соединение,
	СтрокаЗапроса,
	ЗаголовкиЗапросов,
	ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка видов оплат не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
	Иначе
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			СтрокаXML = ОтветСервера;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ДобавитьТокенБитрикс(ОтветСервера)
	
	// Ключ сессии обмена (или "Токен")
	Токен = СтрПолучитьСтроку(ОтветСервера, 4);
	Если Токен<>"" Тогда
		Возврат "&" + Токен;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции	

Функция ПоляПоискаКонтрагентов(ИскатьПоНаименованию=Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	""Контрагенты"" КАК ВладелецКИ,
	|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО (НастройкиВидовКонтактнойИнформации.Вид = ВидыКонтактнойИнформации.Ссылка)
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &Контрагенты
	|	И (НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда
	|			ИЛИ ВидыКонтактнойИнформации.ОбязательноеЗаполнение)
	|	И ВидыКонтактнойИнформации.Используется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Тип,
	|	""КонтактныеЛица"",
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО (НастройкиВидовКонтактнойИнформации.Вид = ВидыКонтактнойИнформации.Ссылка)
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &КонтактныеЛица
	|	И (НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда
	|			ИЛИ ВидыКонтактнойИнформации.ОбязательноеЗаполнение)
	|	И ВидыКонтактнойИнформации.Используется
	|ИТОГИ ПО
	|	Тип,
	|	ВладелецКИ";
	
	Запрос.УстановитьПараметр("Контрагенты", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	Запрос.УстановитьПараметр("КонтактныеЛица", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	
	Результат = Запрос.Выполнить();
	ВыборкаТипКИ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеПолей = Новый Соответствие;
	МассивПолей = Новый Массив;
	
	СоответствиеПолей.Вставить("Идентификатор", ЗаполнитьСтруктуруКИ("Идентификатор", "Уникальный идентификатор 1С", Истина, "Контрагенты", 1));
	МассивПолей.Добавить(ЗаполнитьПоляСоответствияМассива("Идентификатор", "Уникальный идентификатор 1С", ,Истина, Ложь, 1));
	
	СоответствиеПолей.Вставить("ИНН", ЗаполнитьСтруктуруКИ("ИНН", "ИНН код контрагента (для юр.лиц)", Истина, "Контрагенты", 2));
	СоответствиеПолей.Вставить("КПП", ЗаполнитьСтруктуруКИ("КПП", "КПП код контрагента (для юр.лиц)", Ложь, "Контрагенты", 3));
	
	МассивПолей.Добавить(ЗаполнитьПоляСоответствияМассива("ИНН", "ИНН код контрагента (для юр.лиц)", ,Истина, Ложь, 2));
	МассивПолей.Добавить(ЗаполнитьПоляСоответствияМассива("КПП", "КПП код контрагента (для юр.лиц)", ,Истина, Ложь, 3));
	
	ПорядковыйНомер = 4;
	Пока ВыборкаТипКИ.Следующий() Цикл
		СоответствиеСправочники = Новый Соответствие;
		
		ВыборкаВладелецКИ = ВыборкаТипКИ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВладелецКИ.Следующий() Цикл
			
			ПредставлениеВидаКИ = "";
			Выборка = ВыборкаВладелецКИ.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон 
					ИЛИ Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
					Тогда
					Использовать = Истина;
				Иначе	
					Использовать = Ложь;
				КонецЕсли;
				
				ПредставлениеВидаКИ = ПредставлениеВидаКИ + Выборка.ВидКИ + ", ";
				
			КонецЦикла;
			
			Если ПредставлениеВидаКИ <>"" Тогда
				ПредставлениеВидаКИ = Лев(ПредставлениеВидаКИ, СтрДлина(ПредставлениеВидаКИ)-2);
			КонецЕсли;
			
			СоответствиеСправочники.Вставить(ВыборкаВладелецКИ.ВладелецКИ, ЗаполнитьПоляСоответствия(ВыборкаВладелецКИ.Тип, ПредставлениеВидаКИ, Использовать, ПорядковыйНомер));
		КонецЦикла;
		
		Контрагенты = СоответствиеСправочники.Получить("Контрагенты");
		КонтактныеЛица = СоответствиеСправочники.Получить("КонтактныеЛица");
		
		МассивПолей.Добавить(
		ЗаполнитьПоляСоответствияМассива(
		ВыборкаТипКИ.Тип, 
		?(Контрагенты=Неопределено, Неопределено, Контрагенты.Получить("Представление")),
		?(КонтактныеЛица=Неопределено, Неопределено, КонтактныеЛица.Получить("Представление")),
		?(Контрагенты=Неопределено, Неопределено, Контрагенты.Получить("Пометка")),
		?(КонтактныеЛица=Неопределено, Неопределено, КонтактныеЛица.Получить("Пометка")),
		ПорядковыйНомер)
		);
		
		СоответствиеПолей.Вставить(Строка(ВыборкаТипКИ.Тип), СоответствиеСправочники);
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	СоответствиеСправочники = Новый Соответствие;
	СоответствиеСправочники.Вставить("Контрагенты", ЗаполнитьПоляСоответствия("Наименование", "Имя Фамилия, Представление в программе", Истина, ПорядковыйНомер));
	СоответствиеСправочники.Вставить("КонтактныеЛица", ЗаполнитьПоляСоответствия("Наименование", "Имя Фамилия", Истина, ПорядковыйНомер));
	СоответствиеПолей.Вставить("Наименование", СоответствиеСправочники);
	
	МассивПолей.Добавить(ЗаполнитьПоляСоответствияМассива("Наименование", "Имя Фамилия, Представление в программе", "Имя Фамилия", ИскатьПоНаименованию, ИскатьПоНаименованию, ПорядковыйНомер));
	
	СоответствиеПолей.Вставить("НаименованиеПолное", ЗаполнитьСтруктуруКИ("НаименованиеПолное", "Юридическое наименование", Ложь, "Контрагенты", ПорядковыйНомер+1));
	
	МассивПолей.Добавить(ЗаполнитьПоляСоответствияМассива("НаименованиеПолное", "Юридическое наименование", Неопределено, ИскатьПоНаименованию, Ложь, ПорядковыйНомер+1));
	
	Возврат МассивПолей;
	
КонецФункции

Функция ПоляПоискаКонтрагентовПоУмолчанию(ИскатьПоНаименованию=Истина) Экспорт
	
	ШаблонНастройкиПоискаКонтрагентов = ПоляПоискаКонтрагентов(ИскатьПоНаименованию);
	
	СоответствиеВозврат = Новый Соответствие;
	Для каждого стр Из ШаблонНастройкиПоискаКонтрагентов Цикл
		
		СоответствиеПолей = Новый Соответствие;
		СоответствиеПолей.Вставить("Значение", стр.Получить("Значение"));
		СоответствиеПолей.Вставить("Порядок", стр.Получить("Порядок"));
		СоответствиеПолей.Вставить("КонтрагентыПометка", стр.Получить("КонтрагентыПометка"));
		СоответствиеПолей.Вставить("КонтактныеЛицаПометка", стр.Получить("КонтактныеЛицаПометка"));
		
		СоответствиеВозврат.Вставить(стр.Получить("Значение"), СоответствиеПолей);
		
	КонецЦикла;
	
	Возврат СоответствиеВозврат;
	
КонецФункции

Функция НастройкиВыгрузкиРеквизитовПоУмолчанию() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ТипНоменклатуры", "ВидНоменклатуры");
	СоответствиеПолей.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СоответствиеПолей.Вставить("НаименованиеПолное", "Полное наименование");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ЗаполнитьСтруктуруКИ(Значение, Представление, Пометка, ВладелецКИ, Порядок)
	
	СоответствиеЗначений = ЗаполнитьПоляСоответствия(Значение, Представление, Пометка, Порядок);
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(ВладелецКИ, СоответствиеЗначений);
	
	Возврат СоответствиеТипов;
	
КонецФункции

Функция ЗаполнитьПоляСоответствия(Значение, Представление, Пометка, Порядок)
	
	СоответствиеЗначений = Новый Соответствие;
	
	СоответствиеЗначений.Вставить("Значение", Строка(Значение));
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		СоответствиеЗначений.Вставить("ЗначениеТип", НРег(Значение));
	Иначе
		СоответствиеЗначений.Вставить("ЗначениеТип", Значение);
	КонецЕсли;
	
	СоответствиеЗначений.Вставить("Представление", Представление);
	СоответствиеЗначений.Вставить("Пометка", Пометка);
	СоответствиеЗначений.Вставить("Порядок", Порядок);
	
	Возврат СоответствиеЗначений;
	
КонецФункции

Функция ЗаполнитьПоляСоответствияМассива(Значение, КонтрагентыПредставление, КонтактныеЛицаПредставление, КонтрагентыПометка, КонтактныеЛицаПометка, Порядок)
	
	СоответствиеЗначений = Новый Соответствие;
	
	СоответствиеЗначений.Вставить("Значение", Строка(Значение));
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		СоответствиеЗначений.Вставить("ЗначениеТип", НРег(Значение));
	Иначе
		СоответствиеЗначений.Вставить("ЗначениеТип", Значение);
	КонецЕсли;
	
	СоответствиеЗначений.Вставить("КонтрагентыПредставление", КонтрагентыПредставление);
	СоответствиеЗначений.Вставить("КонтактныеЛицаПредставление", КонтактныеЛицаПредставление);
	
	СоответствиеЗначений.Вставить("КонтрагентыПометка", КонтрагентыПометка);
	СоответствиеЗначений.Вставить("КонтактныеЛицаПометка", КонтактныеЛицаПометка);
	СоответствиеЗначений.Вставить("Порядок", Порядок);
	
	Возврат СоответствиеЗначений;
	
КонецФункции

Функция ПрочитатьСвойстваДокумента(ДокументXDTO)
	
	СвойстваЗаказа = Новый Соответствие;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов")
		И ДокументXDTO.ЗначенияРеквизитов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
		
		МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита);
		
		Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
			
			Реквизит = ЗначениеРеквизитаXDTO.Наименование;
			Значение = ЗначениеРеквизитаXDTO.Значение;
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				СвойстваЗаказа.Вставить(Реквизит, Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
				И Значение.Количество() > 0 Тогда
				СвойстваЗаказа.Вставить(Реквизит, Значение[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойстваЗаказа;
	
КонецФункции // ПрочитатьСвойстваДокумента()

// Выполняет поиск контрагента в соответствии со способом идентификации контрагентов, установленного для узла плана обмена.
// При установленном способе идентификации контрагентов "Наименование" или "ИННКПП", если контрагент не найден, он создается.
//
// Параметры
//	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого идентифицируется контрагент.
//	ДокументXDTO - ОбъектXDTO - источник информации для заполнения данных контрагента
//	СвойстваЗаказа - Соответствие - свойства загружаемого заказа. При установленном способе идентификации контрагента "ПредопределенноеЗначения"
//									в СвойстваЗаказа добавляется свойство ДанныеКонтрагента, содержащее информацию по контрагенту.
//	Параметры - Структура - параметры обмена
//	ОписаниеОшибки - Строка - информация по ошибкам
//
// Возвращаемое значение:
//	Булево - Истина, если контрагент был успешно идентифицирован.
//
Функция ИдентифицироватьКонтрагента(ДокументОбъект, ДокументXDTO, Параметры, ОписаниеОшибки)
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ИнформацияПоКонтрагенту = Новый ТаблицаЗначений;
	ИнформацияПоКонтрагенту.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ИнформацияПоКонтрагенту.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	ИнформацияПоКонтрагенту.Колонки.Добавить("Тип");
	ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту);
	ДокументОбъект.ИнформацияПоКонтрагенту.Загрузить(ИнформацияПоКонтрагенту);
	
	ДокументОбъект.Контрагент = НайтиСоздатьКонтрагента(КонтрагентXDTO, ДокументОбъект, ИнформацияПоКонтрагенту, Параметры, ОписаниеОшибки);
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговора);
	
	ДокументОбъект.Договор = ДоговорПоУмолчанию;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиСоздатьКонтрагента(КонтрагентXDTO, ДокументОбъект, ИнформацияПоКонтрагенту, Параметры, ОписаниеОшибки)
	
	КонтрагентСсылка = Неопределено;
	Если Параметры.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение Тогда
		
		КонтрагентСсылка = Параметры.КонтрагентДляПодстановкиВЗаказы;
		
	Иначе
		
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Ид") Тогда
			ДобавитьСтрокуИнформацииПоКонтрагенту("Идентификатор", "Идентификатор", КонтрагентXDTO.Ид, ИнформацияПоКонтрагенту);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.НастройкиПоискаКонтрагентов) Тогда
			НастройкиПоиска = ЧтениеJSONВСтруктуру(Параметры.НастройкиПоискаКонтрагентов);
		Иначе
			НастройкиПоиска = ПоляПоискаКонтрагентовПоУмолчанию();
		КонецЕсли;
		
		ВариантПоиска = НастройкиПоиска.Получить("ВариантПоиска");
		Если ВариантПоиска = Неопределено Тогда
			// Поиск по порядку следования полей
			ВариантПоиска = 0;
		КонецЕсли;
		НастройкиПоиска.Удалить("ВариантПоиска");
		
		ПокупательСсылка = НайтиКонтрагентаПоПолямПоиска(НастройкиПоиска, ИнформацияПоКонтрагенту, ВариантПоиска);
		
		Если ЗначениеЗаполнено(ПокупательСсылка) Тогда
			
			Если ТипЗнч(ПокупательСсылка)= Тип("СправочникСсылка.Контрагенты") Тогда
				
				КонтрагентСсылка = ПокупательСсылка;
				КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
				
				СоздатьЗаполнитьКонтактноеЛицоКонтрагента(КонтрагентОбъект, КонтрагентXDTO);
				ОбновитьКонтактнуюИнформациюКонтрагента(КонтрагентОбъект, КонтрагентXDTO, Ложь);
				Если КонтрагентОбъект.Модифицированность() Тогда
					КонтрагентОбъект.Записать();
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ПокупательСсылка)= Тип("СправочникСсылка.КонтактныеЛица") Тогда
				
				КонтрагентСсылка = НайтиКонтрагентаПоКонтактномуЛицу(ПокупательСсылка);
				Если КонтрагентСсылка = Неопределено Тогда
					
					КонтрагентОбъект = СоздатьКонтрагента(ДокументОбъект, КонтрагентXDTO, Параметры, ОписаниеОшибки);
					ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(ДокументОбъект, КонтрагентОбъект, КонтрагентXDTO, ПокупательСсылка, ОписаниеОшибки);
					
					КонтрагентСсылка = КонтрагентОбъект.Ссылка;
					РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(КонтрагентСсылка, ПокупательСсылка);
					
				Иначе
					КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();	
				КонецЕсли;
				
				ОбновитьКонтактнуюИнформациюКонтрагента(КонтрагентОбъект, КонтрагентXDTO, Ложь);
				ОбновитьКонтактнуюИнформациюКонтактногоЛица(ПокупательСсылка, КонтрагентXDTO, Ложь);
				
			КонецЕсли;
		Иначе
			
			КонтрагентОбъект = СоздатьКонтрагента(ДокументОбъект, КонтрагентXDTO, Параметры, ОписаниеОшибки);
			ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(ДокументОбъект, КонтрагентОбъект, КонтрагентXDTO, Неопределено, ОписаниеОшибки);
			
			КонтрагентСсылка = КонтрагентОбъект.Ссылка;
		КонецЕсли;
		
		Если КонтрагентСсылка = Неопределено Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось найти или создать контрагента!'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если КонтрагентОбъект.Модифицированность() Тогда
			КонтрагентОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;	
	Возврат КонтрагентСсылка;
	
КонецФункции

// Заполняет табличную часть "ИнформацияПоКонтрагенту" заказа покупателя.
//
Процедура ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту)
	
	ЭтоЮрЛицо = Ложь;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Наименование", "Наименование", КонтрагентXDTO.Наименование, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Полное наименование", "Полное наименование", КонтрагентXDTO.ПолноеНаименование, ИнформацияПоКонтрагенту);
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юр./Физ. лицо", "Юр./Физ. лицо", "Физ. лицо", ИнформацияПоКонтрагенту);
		
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Полное наименование", "Полное наименование", КонтрагентXDTO.ОфициальноеНаименование, ИнформацияПоКонтрагенту);
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юр./Физ. лицо", "Юр./Физ. лицо", "Юр. лицо", ИнформацияПоКонтрагенту);
		
		ЭтоЮрЛицо = Истина;
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("ИНН", "ИНН", КонтрагентXDTO.ИНН, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("КПП", "КПП", КонтрагентXDTO.КПП, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("ОКПО", "ОКПО", КонтрагентXDTO.ОКПО, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	// Банковские счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			Комментарий = "";
			Если ОбъектXDTOСодержитСвойство(РасчетныйСчетXDTO, "Комментарий")
				И СвойствоXDTOЗаполнено(РасчетныйСчетXDTO.Комментарий) Тогда
				
				Комментарий = РасчетныйСчетXDTO.Комментарий;
				
			КонецЕсли;
			
			ИнформацияПоРасчетномуСчету = "Номер счета = " + НомерСчета 
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Наименование), "", ", Банк = " + ДанныеБанкаXDTO.Наименование)
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.БИК), "", ", БИК = " + ДанныеБанкаXDTO.БИК)
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.SWIFT), "", ", SWIFT = " + ДанныеБанкаXDTO.SWIFT)
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.КоррСчет), "", ", КоррСчет = " + ДанныеБанкаXDTO.КоррСчет)
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Город), "", ", Город = " + ДанныеБанкаXDTO.Город)
			+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Адрес), "", ", Адрес = " + ДанныеБанкаXDTO.Адрес)
			+ ?(ПустаяСтрока(Комментарий), "", ", Комментарий = " + Комментарий);
			
			ДобавитьСтрокуИнформацииПоКонтрагенту("Банковский счет", "Банковский счет", ИнформацияПоРасчетномуСчету, ИнформацияПоКонтрагенту);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактная информация.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес") 
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Адрес, "Представление") 
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Фактический адрес", Перечисления.ТипыКонтактнойИнформации.Адрес, КонтрагентXDTO.Адрес.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.ЮридическийАдрес, "Представление") 
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ЮридическийАдрес.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Юридический адрес", Перечисления.ТипыКонтактнойИнформации.Адрес, КонтрагентXDTO.ЮридическийАдрес.Представление, ИнформацияПоКонтрагенту);
		
	ИначеЕсли НЕ ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.АдресРегистрации, "Представление") 
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.АдресРегистрации.Представление) Тогда // физ. лицо содержит адрес регистрации
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Адрес регистрации", Перечисления.ТипыКонтактнойИнформации.Адрес, КонтрагентXDTO.АдресРегистрации.Представление, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Телефон = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон") Тогда
		Если ТипЗнч(КонтрагентXDTO.Телефон) = Тип("Строка") Тогда
			Телефон = КонтрагентXDTO.Телефон;
		ИначеЕсли ТипЗнч(КонтрагентXDTO.Телефон) = Тип("ОбъектXDTO") И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Телефон, "Представление") Тогда
			Телефон = КонтрагентXDTO.Телефон.Представление;
		КонецЕсли; 
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		Если ТипЗнч(КонтрагентXDTO.Контакты) = Тип("ОбъектXDTO") И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") Тогда
			Если ТипЗнч(КонтрагентXDTO.Контакты.Контакт) = Тип("СписокXDTO") Тогда
				Для каждого Контакт Из КонтрагентXDTO.Контакты.Контакт Цикл
					Если СтрНайти(НРег(Контакт.Тип),"телефон")>0 Тогда
						Телефон = Контакт.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СтрНайти(НРег(КонтрагентXDTO.Контакты.Контакт.Тип),"телефон")>0 Тогда
					Телефон = КонтрагентXDTO.Контакты.Контакт.Значение;
				КонецЕсли;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(КонтрагентXDTO.Контакты) = Тип("СписокXDTO") Тогда
			Для каждого Контакт Из КонтрагентXDTO.Контакты Цикл
				Если СтрНайти(НРег(Контакт.Тип),"телефон")>0 Тогда
					Телефон = Контакт.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Телефон <> "" Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон, Телефон, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	Email = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Email") Тогда
		Если ТипЗнч(КонтрагентXDTO.Email) = Тип("Строка") Тогда
			Email = КонтрагентXDTO.Email;
		ИначеЕсли ТипЗнч(КонтрагентXDTO.Email) = Тип("ОбъектXDTO") И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Email, "Представление") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Email.Представление) Тогда
			Email = КонтрагентXDTO.Email.Представление;
		КонецЕсли; 
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") Тогда
		Если ТипЗнч(КонтрагентXDTO.Контакты) = Тип("ОбъектXDTO") И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") Тогда
			Если ТипЗнч(КонтрагентXDTO.Контакты.Контакт) = Тип("СписокXDTO") Тогда
				Для каждого Контакт Из КонтрагентXDTO.Контакты.Контакт Цикл
					Если СтрНайти(НРег(Контакт.Тип),"почта")>0
						ИЛИ СтрНайти(НРег(Контакт.Тип), "email")>0 Тогда
						Email = Контакт.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СтрНайти(НРег(КонтрагентXDTO.Контакты.Контакт.Тип),"почта")>0 
					ИЛИ СтрНайти(НРег(КонтрагентXDTO.Контакты.Контакт.Тип), "email")>0 Тогда
					
					Email = КонтрагентXDTO.Контакты.Контакт.Значение;
				КонецЕсли;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(КонтрагентXDTO.Контакты) = Тип("СписокXDTO") Тогда
			Для каждого Контакт Из КонтрагентXDTO.Контакты Цикл
				Если НРег(Контакт.Тип) = "почта" 
					ИЛИ НРег(КонтрагентXDTO.Контакты.Контакт.Тип) = "email"
					Тогда
					
					Email = Контакт.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Email <> "" Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту("Адрес электронной почты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Email, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	// Контакты.
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") И КонтрагентXDTO.Контакты <> Неопределено Тогда
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") 
			И КонтрагентXDTO.Контакты.Контакт <> Неопределено Тогда
			
			КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
			МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
			
			Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл
				
				ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
				СтруктураКИ = ПолучитьТипВидКонтактнойИнформацииКонтрагентаПоТипуXDTO(ТипКИXDTO);
				
				ДобавитьСтрокуИнформацииПоКонтрагенту(СтруктураКИ.Вид.Наименование, СтруктураКИ.Тип, КонтактXDTO.Значение, ИнформацияПоКонтрагенту);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") И КонтрагентXDTO.Представители <> Неопределено Тогда
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Представители, "Представитель") 
			И КонтрагентXDTO.Представители.Представитель <> Неопределено Тогда
			
			ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
			МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
			
			Если МассивПредставителейXDTO.Количество() > 0 Тогда
				
				КонтактныеЛица = "";
				
				Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл
					
					НаименованиеКЛ = "";
					Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент") 
						И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
						
						НаименованиеКЛ = ПредставительXDTO.Контрагент.Наименование;
						
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(НаименованиеКЛ) Тогда
						КонтактныеЛица = КонтактныеЛица + НаименованиеКЛ + ";";
					КонецЕсли;
					
				КонецЦикла;
				
				КонтактныеЛица = Сред(КонтактныеЛица,1,СтрДлина(КонтактныеЛица)-1);
				ДобавитьСтрокуИнформацииПоКонтрагенту("Контактные лица", "Контактные лица", КонтактныеЛица, ИнформацияПоКонтрагенту);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиКонтрагентаПоКонтактномуЛицу(КонтактноеЛицо)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ втКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Контрагенты.КонтактноеЛицо = &КонтактноеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент,
	|	1
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &КонтактноеЛицо) КАК СвязиКонтрагентКонтакт
	|ГДЕ
	|	НЕ СвязиКонтрагентКонтакт.СвязьНедействительна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втКонтрагенты.Контрагент КАК Контрагент,
	|	втКонтрагенты.Приоритет КАК Приоритет
	|ИЗ
	|	втКонтрагенты КАК втКонтрагенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	втКонтрагенты.Приоритет";
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Контрагенты = РезультатЗапроса.Выгрузить();
		Возврат Контрагенты[0].Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет и заполняет строку табличной части "ИнформацияПоКонтрагенту" заказа покупателя.
//
// Параметры
//	Вид - Строка, вид информации
//	Представление - Строка, представление информации
//	ИнформацияПоКонтрагенту - ТабличнаяЧасть документ ЗаказПокупателю.
//
Процедура ДобавитьСтрокуИнформацииПоКонтрагенту(ВидКИ, ТипКИ, Представление, ИнформацияПоКонтрагенту)
	
	Если ТипЗнч(Представление) = Тип("Строка") И ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = ИнформацияПоКонтрагенту.Добавить();
		НоваяСтрока.Вид = ВидКИ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Тип") Тогда
			НоваяСтрока.Тип = ТипКИ;
		КонецЕсли;
		НоваяСтрока.Представление = СокрЛП(Представление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвойстваТовараВЗаказе(ЗначенияРеквизитовXDTO, ПакетCML, ВыборкаТоваров, Параметры, ТоварИд)
	
	ВидНоменклатуры = ?(ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас, "Товар", "Услуга");
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ВидНоменклатуры", ВидНоменклатуры);
	
	Если Параметры.ПротоколОбменаCMS = Перечисления.ПротоколыОбменаCMS.Битрикс Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ТипНоменклатуры", 
		?(ТоварИд = "ORDER_DELIVERY", "Услуга", "Товар")
		);
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "СвойствоКорзины#PRODUCT.XML_ID", ТоварИд);
		
		ИдКаталога = СформироватьИдентификаторСайтаОбъекта(ВыборкаТоваров.Категория,,Параметры.УзелОбмена).ИДСайта;
		Если ЗначениеЗаполнено(ИдКаталога) Тогда
			ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "СвойствоКорзины#CATALOG.XML_ID", ИдКаталога);
		КонецЕсли;
		
		Если Параметры.ИспользоватьХарактеристики И ЗначениеЗаполнено(ВыборкаТоваров.Характеристика) Тогда
			Для каждого свойствоХарактеристики Из ВыборкаТоваров.Характеристика.ДополнительныеРеквизиты Цикл
				
				ИдСвойства = свойствоХарактеристики.Свойство.Имя;
				Если НЕ ЗначениеЗаполнено(ИдСвойства) Тогда
					ИдСвойства = СформироватьИдентификаторСайтаОбъекта(свойствоХарактеристики.Свойство,,Параметры.УзелОбмена).ИДСайта;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИдСвойства) Тогда
					ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "СвойствоКорзины#"+ИдСвойства, Строка(свойствоХарактеристики.Значение));
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	Иначе
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ТипНоменклатуры", Строка(ВыборкаТоваров.ТипНоменклатуры));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваДоставки(ЗначенияРеквизитовXDTO, ПакетCML, ДанныеЗаказа, Параметры)
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Идентификатор отправления", ДанныеЗаказа.ТрекНомер);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Комментарий доставки", ДанныеЗаказа.ДополнительнаяИнформацияПоДоставке);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Адрес доставки", ДанныеЗаказа.АдресДоставки);
	
	Если Параметры.Свойство("ТаблицаСоответствияСлужбДоставки")
		И Параметры.ТаблицаСоответствияСлужбДоставки <> Неопределено Тогда 
		
		НайденноеСоответствие = Параметры.ТаблицаСоответствияСлужбДоставки.НайтиСтроки(Новый Структура("СлужбаДоставки, СпособДоставки", ДанныеЗаказа.СлужбаДоставки, ДанныеЗаказа.СпособДоставки));
		Если НайденноеСоответствие.Количество() > 0 Тогда
			
			Если ЗначениеЗаполнено(НайденноеСоответствие[0].ИдСлужбыДоставкиНаСайте) Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод доставки ИД", НайденноеСоответствие[0].ИдСлужбыДоставкиНаСайте);
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденноеСоответствие[0].СлужбаДоставкиНаСайте) Тогда
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод доставки", НайденноеСоответствие[0].СлужбаДоставкиНаСайте);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Метод доставки", ДанныеЗаказа.СлужбаДоставки);
	КонецЕсли;
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Способ доставки", ДанныеЗаказа.СпособДоставки);
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Стоимость доставки", ДанныеЗаказа.СтоимостьДоставки);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Ставка НДС доставки", ДанныеЗаказа.СтавкаНДСДоставки);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Получатель", ДанныеЗаказа.КонтактноеЛицо);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Контактный телефон", ДанныеЗаказа.КонтактныйТелефон);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Запасной телефон", ДанныеЗаказа.ЗапаснойТелефон);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Почта получателя", ДанныеЗаказа.ПочтаПолучателя);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Пункт выдачи заказа", ДанныеЗаказа.ПунктВыдачиЗаказа);
	
КонецПроцедуры

Функция ХозОперацияПоТипуДокумента(ДокументДвижения, ОписаниеОшибки)
	
	ХозОперация = "";
	ТипОплатыНаСайте = "";
	
	Если ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ПоступлениеВКассу")
		ИЛИ ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.РасходИзКассы") 
		ИЛИ ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ЧекККМ") 
		ИЛИ ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ХозОперация = "Выплата наличных денег";
		ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Наличные;
		
	ИначеЕсли ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ПоступлениеНаСчет") 
		ИЛИ ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		ХозОперация = "Выплата безналичных денег";
		ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Безналичные;
		
	ИначеЕсли ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		
		ХозОперация = "Эквайринговая операция";
		ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Эквайринг;
		
	ИначеЕсли ТипЗнч(ДокументДвижения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// зачет аванса?
		ХозОперация = "Выплата безналичных денег";
		ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Безналичные;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'при выгрузке оплаты заказом %1, не удалось определить тип оплаты'"),
		ДокументДвижения);
		ОписаниеОшибки = ОписаниеОшибки + ТекстОшибки + Символы.ПС; 
	Иначе
		ХозОперация = "Выплата наличных денег";
		ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Наличные;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'при выгрузке оплаты документом %1, не удалось определить тип оплаты'"),
		ДокументДвижения);
		ОписаниеОшибки = ОписаниеОшибки + ТекстОшибки + Символы.ПС; 
	КонецЕсли;
	
	Возврат Новый Структура("ХозОперация, ТипОплатыНаСайте", ХозОперация, ТипОплатыНаСайте);
	
КонецФункции // ()

Процедура ДобавитьЕдиницыИзмеренияВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, ЕдиницыИзмерения, Параметры) Экспорт
	
	ЕдиницыИзмеренияКлассификатораТип = КлассификаторXDTO.Свойства().Получить("ЕдиницыИзмерения").Тип;
	ЕдиницыИзмеренияКлассификатораXDTO = ФабрикаXDTO.Создать(ЕдиницыИзмеренияКлассификатораТип);
	
	ЕдиницыИзмерения.Сбросить();
	Пока ЕдиницыИзмерения.Следующий() Цикл
		
		Если НЕ ТипЗнч(ЕдиницыИзмерения.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницыИзмерения.Код) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕдиницаИзмеренияXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЕдиницаИзмерения"));
		ЕдиницаИзмеренияXDTO.Код = ЕдиницыИзмерения.Код;
		ЕдиницаИзмеренияXDTO.НаименованиеПолное = ЕдиницыИзмерения.НаименованиеПолное;
		Если ЗначениеЗаполнено(ЕдиницыИзмерения.МеждународноеСокращение) Тогда
			ЕдиницаИзмеренияXDTO.МеждународноеСокращение = ЕдиницыИзмерения.МеждународноеСокращение;
		КонецЕсли;
		
		ЕдиницыИзмеренияКлассификатораXDTO.ЕдиницаИзмерения.Добавить(ЕдиницаИзмеренияXDTO);
	КонецЦикла;
	
	Если ЕдиницыИзмеренияКлассификатораXDTO.ЕдиницаИзмерения.Количество() > 0 Тогда
		КлассификаторXDTO.ЕдиницыИзмерения = ЕдиницыИзмеренияКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//// Записывает в структуру ссылки на измененные объекты по узлу плана обмена.
////
//// Параметры:
////	УзелПланаОбмена - ПланОбмена.Ссылка
////	СтруктураВозврата - Структура
////
Функция ЗаполнитьСтруктуруИзмененийДляУзла(УзелПланаОбмена) Экспорт
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Товары", Новый Массив);
	СтруктураИзменений.Вставить("Услуги", Новый Массив);
	СтруктураИзменений.Вставить("Ресурсы", Новый Массив);
	СтруктураИзменений.Вставить("Заказы", Новый Массив);
	СтруктураИзменений.Вставить("Файлы", Новый Массив);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураИзменения.Ссылка КАК Ссылка,
	|	""Товары"" КАК ТипСсылки
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Ссылка КАК Ссылка,
	|	втНоменклатура.ТипСсылки КАК ТипСсылки
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|ГДЕ
	|	втНоменклатура.Ссылка.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлыИзменения.Ссылка,
	|	""Файлы""
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы.Изменения КАК НоменклатураПрисоединенныеФайлыИзменения
	|		ПО втНоменклатура.Ссылка = НоменклатураПрисоединенныеФайлыИзменения.Ссылка
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлыИзменения.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураИзменения.Ссылка,
	|	""Услуги""
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|	И НоменклатураИзменения.Ссылка.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлючевыеРесурсыИзменения.Ссылка,
	|	""Ресурсы""
	|ИЗ
	|	Справочник.КлючевыеРесурсы.Изменения КАК КлючевыеРесурсыИзменения
	|ГДЕ
	|	КлючевыеРесурсыИзменения.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыИзменения.Ссылка,
	|	""Заказы""
	|ИЗ
	|	Документ.ЗаказПокупателя.Изменения КАК ЗаказыИзменения
	|ГДЕ
	|	ЗаказыИзменения.Узел = &Узел");
	
	Запрос.УстановитьПараметр("Узел", УзелПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураИзменений[Выборка.ТипСсылки].Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СтруктураИзменений;
	
КонецФункции

Процедура ПолучитьСтруктуруИзменений(Параметры)
	
	Если Параметры.Свойство("УзелОбмена") И Параметры.ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений = ЗаполнитьСтруктуруИзмененийДляУзла(Параметры.УзелОбмена);
	Иначе
		СтруктураИзменений = Новый Структура;
		СтруктураИзменений.Вставить("Товары", Новый Массив);
		СтруктураИзменений.Вставить("Услуги", Новый Массив);
		СтруктураИзменений.Вставить("Заказы", Новый Массив);
		СтруктураИзменений.Вставить("Файлы", Новый Массив);
	КонецЕсли;
	Параметры.Вставить("СтруктураИзменений", СтруктураИзменений);	
	
	МассивИзмененийНоменклатуры = Новый Массив;
	Если Параметры.ВыгружатьТолькоИзменения
		И НЕ Параметры.ВыполнятьПолнуюВыгрузкуПринудительно Тогда
		
		МассивИзмененийНоменклатуры = Параметры.СтруктураИзменений.Товары;
	КонецЕсли;
	Параметры.Вставить("МассивИзмененийНоменклатуры", МассивИзмененийНоменклатуры);
	
КонецПроцедуры

Функция ИмяФайлаОбмена(Префикс, Номер, УИД=Ложь)
	
	Если УИД Тогда
		Возврат Префикс + Строка(Новый УникальныйИдентификатор) + "_" + СокрЛП(Формат(Номер, "ЧН=' '; ЧГ=")) + ".xml";
	Иначе
		Возврат Префикс + СокрЛП(Формат(Номер, "ЧН=' '; ЧГ=")) + ".xml";
	КонецЕсли;
	
	
КонецФункции

#КонецОбласти

#Область Старые

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПрефиксДляЗаказаССайта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Префикс = Константы.ПрефиксДляОбменаССайтом.Получить();
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Префикс = ПолучитьПрефиксПоУмолчаниюДляЗаказаССайта();
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

Функция ПолучитьПрефиксПоУмолчаниюДляЗаказаССайта() Экспорт
	
	Возврат "СА";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УСТАНОВКИ ПАРАМЕТРОВ СЕАНСА

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//	ИмяПараметра				- строка с именем параметра сеанса
//	УстановленныеПараметры	- массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если НЕ (ИмяПараметра = "ОбменДаннымиССайтомВключен" 
		ИЛИ ИмяПараметра = "ИспользуемыеУзлыОбменаССайтом") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьПараметрыСеанса();
	
	УстановленныеПараметры.Добавить("ОбменДаннымиССайтомВключен");
	УстановленныеПараметры.Добавить("ИспользуемыеУзлыОбменаССайтом");
	
КонецПроцедуры

// Получает массив узлов обмена, используемых в настройках обмена.
//
Функция ПолучитьИспользуемыеУзлыОбменаССайтом()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	НЕ ОбменУправлениеНебольшойФирмойСайт.ПометкаУдаления
	|	И ОбменУправлениеНебольшойФирмойСайт.Ссылка <> &ЭтотУзел");
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Обновляет значения параметров сеанса.
//
Процедура ОбновитьПараметрыСеанса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОбменССайтами = ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтами");
	
	ИспользуемыеУзлыОбменаССайтом = Новый Массив;
	Если ИспользоватьОбменССайтами Тогда
		
		ИспользуемыеУзлыОбменаССайтом = ПолучитьИспользуемыеУзлыОбменаССайтом();
		
	КонецЕсли;
	
	ОбменДаннымиССайтомВключен = НЕ ИспользуемыеУзлыОбменаССайтом.Количество() = 0;
	
	ПараметрыСеанса.ОбменДаннымиССайтомВключен = Истина;
	ПараметрыСеанса.ИспользуемыеУзлыОбменаССайтом = Новый ФиксированныйМассив(ИспользуемыеУзлыОбменаССайтом);
	
КонецПроцедуры

Функция ПолучитьИННДляXDTO(ИНН, ЭтоЮрЛицо)
	
	Если ЭтоЮрЛицо Тогда
		ЗначениеИНН = ?(СтрДлина(ИНН) = 10, ИНН, "");
	Иначе
		ЗначениеИНН = ?(СтрДлина(ИНН) = 12, ИНН, "");
	КонецЕсли;
	
	Возврат ЗначениеИНН;
	
КонецФункции

Функция ПолучитьКППДляXDTO(КПП)
	
	ЗначениеКПП = ?(СтрДлина(КПП) = 9, КПП, "");
	
	Возврат ЗначениеКПП;
	
КонецФункции 

Функция СтрокуВЧисло(Строка)
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(Строка);
	
КонецФункции

#КонецОбласти

