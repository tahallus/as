#Область ПрограммныйИнтерфейс

// Устанавливает заголовок формы.
//
Процедура УстановитьЗаголовокФормы(Форма, Заголовок, Род = "Мужской") Экспорт
	
	АвтоЗаголовок = Ложь;
	Если Форма.Объект.Ссылка.Пустая()
		И Род = "Мужской" Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (new)';ru=' (новый)'");
	ИначеЕсли Форма.Объект.Ссылка.Пустая()
		И Род = "Женский" Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (new)';ru=' (новая)'");
	ИначеЕсли Форма.Объект.ПометкаУдаления Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (removed)';ru=' (к удалению)'");
	Иначе
		Форма.Заголовок = Заголовок;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Удаляет связные документы.
//
Процедура УдалитьСвязанныеДокументы(ИмяДокумента, Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СвязанныеДокументы = ПолучитьСвязанныеДокументы(ИмяДокумента, Ссылка);
	Пока СвязанныеДокументы.Следующий() Цикл
		ДокументОбъект = СвязанныеДокументы.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // УдалитьСвязанныеДокументы()

// Возвращает наличие предопределенного элемента в данных.
//
Функция ЕстьПредопределенныйВДанных(ОбъектКонфигурации, ИмяПредопределенныхДанных) Экспорт
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ОбъектКонфигурации.Ссылка
	|ИЗ
	|	Справочник.%ОбъектКонфигурации% КАК ОбъектКонфигурации
	|ГДЕ
	|	ОбъектКонфигурации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Текст = СтрЗаменить(Текст, "%ОбъектКонфигурации%", ОбъектКонфигурации);
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЕстьПредопределенныйВДанных()

// Получает связанные документы.
//
Функция ПолучитьСвязанныеДокументы(ИмяДокумента, Ссылка)
	
	СтруктураОтбора = Новый Структура("Основание", Ссылка);
	СвязанныеДокументы = Документы[ИмяДокумента].Выбрать(,,СтруктураОтбора);
	
	Возврат СвязанныеДокументы;
	
КонецФункции // ПолучитьСвязанныеДокументы()

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//   ЭлементСтруктуры- элемент структуры КД;
//   Поле			- имя поля, по которому добавляется отбор;
//   Значение		- значение отбора КД;
//   ВидСравнения	- вид сравнений КД (по умолчанию: неопределено);
//   Использование	- признак использования отбора (по умолчанию: истина);
//   ВПользовательскиеНастройки - признак добавления в пользовательские настройки КД (по умолчанию: ложь).
//
// Возвращаемое значение:
//   ЭлементОтбора (ЭлементОтбораКомпоновкиДанных).
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено,
	
	Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки 
					= ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ЭлементОтбора = Неопределено;
	ЭлементОтбора = НайтиЭлементОтбора(Отбор, Поле);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование	 = Использование;
	ЭлементОтбора.ЛевоеЗначение	 = Поле;
	ЭлементОтбора.ВидСравнения	 = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	Возврат ЭлементОтбора;
	
КонецФункции // ДобавитьОтбор()

// Находит элемент отбора.
//
Функция НайтиЭлементОтбора(Отбор, Поле)
	
	ЭлементОтбора = Неопределено;
	Для каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = НайтиЭлементОтбора(Элемент, Поле);
			Продолжить;
		КонецЕсли;
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
	КонецЦикла;
	Возврат ЭлементОтбора;
	
КонецФункции

// Получает номенклатуру по переданному штрихкоду.
//
Функция ПолучитьНоменклатуруПоШтрихкоду(Штрихкод) Экспорт
	
	Возврат Справочники.ТоварыМП.НайтиПоРеквизиту("Штрихкод", Штрихкод);
	
КонецФункции // ПолучитьНоменклатуруПоШтрихкоду()

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = ОбщегоНазначенияМПКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты,,,Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный тип второго параметра'");
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущую ориентацию экрана.
//
Функция ПолучитьОриентациюЭкрана() Экспорт
	
	Ориентация = ОриентацияСтраницы.Ландшафт;
	
	#Если МобильноеПриложениеСервер Тогда 
	ИнформацияЭкрана = ПолучитьИнформациюЭкрановКлиента();
	Если ИнформацияЭкрана <> Неопределено Тогда
		Высота = ИнформацияЭкрана[0].Высота;
		Ширина = ИнформацияЭкрана[0].Ширина;
		Если Ширина < Высота Тогда
			Ориентация = ОриентацияСтраницы.Портрет;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Ориентация;
	
КонецФункции // ПолучитьОриентациюЭкрана()

// Возвращает название налога
//
// Возвращаемое значение:
//  Строка - Название налога
//
Функция НазваниеНалога() Экспорт
	
	НазваниеНалогаПоУмолчанию = Константы.НазваниеНалогаПоУмолчаниюМП.Получить();
	Если ЗначениеЗаполнено(НазваниеНалогаПоУмолчанию) Тогда
		НазваниеНалога = НазваниеНалогаПоУмолчанию;
	Иначе
		НазваниеНалога = НСтр("en = 'Sales Tax'; ru = 'НДС'");
	КонецЕсли;
	
	Возврат НазваниеНалога;
	
КонецФункции

#КонецОбласти 
