#Область ПрограммныйИнтерфейс

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод строкой.
// 	ВидуУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Значение упаковки
// Возвращаемое значение:
// 	Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкодаПоВидуУпаковки(Штрихкод, ВидуУпаковки) Экспорт
	
	Если ВидуУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		ПредставлениеШтрихкода = Штрихкод;
	Иначе
		ПредставлениеШтрихкода = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод);
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

Функция SSCCАгрегата(Штрихкод) Экспорт
	
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если ПараметрыШтрихкода.Результат = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	Если ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		КодАгрегата = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода.Результат, Ложь, Ложь);
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Возврат КодАгрегата;
	
КонецФункции

// Возвращает способ ввода в оборот СУЗ по виду операции.
// 
// Параметры:
//  ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции документа.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыВводаВОборотСУЗ, Массив из ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Способ ввода в оборот СУЗ.
Функция СпособВводаВОборотСУЗПоВидуОперации(ВидОперации, ВидПродукции = Неопределено) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		ВозвращаемоеЗначение = Новый Массив();
		ВозвращаемоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля"));
		ВозвращаемоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт"));
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц") Тогда
		ВозвращаемоеЗначение = Новый Массив();
		ВозвращаемоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство"));
		ВозвращаемоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Комиссия"));
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков");
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка");
	
КонецФункции

#Область ШаблоныПараметровСканирования

// Заполняет библиотечные настройки параметров сканирования для документов розничной продажи товара (например чеков).
//   Применимо для настроек МОТП, ИСМП.
//
// Параметры:
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//   Булево - параметры сканирования дополнены спецификой ИС МП.
Функция ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенаПоддержкаМОТП = ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции);
	ВключенаПоддержкаИСМП = ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции);
	
	Если ВключенаПоддержкаМОТП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП          = Истина;
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП           = ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
		ПараметрыСканирования.ДетализацияСтруктурыХранения             = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки");
		ПараметрыСканирования.ОтборПоВидуПродукции                     = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП          = Истина;
		ПараметрыСканирования.ДетализацияСтруктурыХранения             = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки");
		ПараметрыСканирования.ОтборПоВидуПродукции                     = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Или ВключенаПоддержкаМОТП Тогда
		НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет библиотечные настройки параметров сканирования для документов розничного возврата товара
//   (например чеков на возврат). Применимо для настроек МОТП, ИСМП.
//
// Параметры:
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//   Булево - параметры сканирования дополнены спецификой ИС МП.
Функция ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенаПоддержкаМОТП = ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции);
	ВключенаПоддержкаИСМП = ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции);
	
	Если ВключенаПоддержкаМОТП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Продан"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Продан"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП          = Истина;
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП           = ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
		ПараметрыСканирования.ДетализацияСтруктурыХранения             = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки");
		ПараметрыСканирования.ОтборПоВидуПродукции                     = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП          = Истина;
		ПараметрыСканирования.ДетализацияСтруктурыХранения             = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки");
		ПараметрыСканирования.ОтборПоВидуПродукции                     = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Или ВключенаПоддержкаМОТП Тогда
		НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет библиотечные настройки параметров сканирования для документов оптовой продажи товара (например реализации).
//   Применимо для настроек МОТП, ИСМП.
//
// Параметры:
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//   Булево - параметры сканирования дополнены спецификой ИС МП.
Функция ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенаПоддержкаМОТП = ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции);
	ВключенаПоддержкаИСМП = ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции);
	
	Если ВключенаПоддержкаМОТП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
		
		ПараметрыСканирования.ВариантПолученияМРЦ             = "Вычисление";
		ПараметрыСканирования.ОтборПоВидуПродукции            = Истина;
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП  = Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		
		ПараметрыСканирования.ОтборПоВидуПродукции            = Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Или ВключенаПоддержкаМОТП Тогда
		НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет библиотечные настройки параметров сканирования для документов оптовового возврата товара.
//   Применимо для настроек МОТП, ИСМП.
//
// Параметры:
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//   Булево - параметры сканирования дополнены спецификой ИС МП.
Функция ЗаполнитьПараметрыСканированияДокументаОптовогоВозврата(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенаПоддержкаМОТП = ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции);
	ВключенаПоддержкаИСМП = ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции);
	
	Если ВключенаПоддержкаМОТП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП  = Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП = Истина;
		ПараметрыСканирования.ОтборПоВидуПродукции            = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПриемкаПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП = Истина;
		ПараметрыСканирования.ОтборПоВидуПродукции            = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПриемкаПродажа");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Или ВключенаПоддержкаМОТП Тогда
		НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет библиотечные настройки параметров сканирования для документов закупки (приобретения) товара.
//   Применимо для настроек МОТП, ИСМП.
//
// Параметры:
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//   Булево - параметры сканирования дополнены спецификой ИС МП.
Функция ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенаПоддержкаМОТП = ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции);
	ВключенаПоддержкаИСМП = ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции);
	
	Если ВключенаПоддержкаМОТП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен"));
		
		ПараметрыСканирования.ОтборПоВидуПродукции           = Истина;
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Приемка");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
		
		ПараметрыСканирования.ОтборПоВидуПродукции = Истина;
		
		// Для обогащения информации об ошибке при выводе пользователю
		ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Приемка");
		
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Или ВключенаПоддержкаМОТП Тогда
		НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьПараметрамиСканированияИСМП(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.Свойство("ЭтоАгрегацияКодовМаркировкиИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ОпределениеВидаПродукцииИСМП",     Ложь);
	ПараметрыСканирования.Вставить("СохранятьКодыМаркировкиВПулИСМП",  Ложь);
	ПараметрыСканирования.Вставить("ТребоватьПолныйКодМаркировкиИСМП", Ложь);
	ПараметрыСканирования.Вставить("ЗаписыватьЛогЗапросовИСМП",        Ложь);
	
	ПараметрыСканирования.Вставить("ВидОперацииИСМП",                   Неопределено);
	ПараметрыСканирования.Вставить("ЭтоПроверкаКодовМаркировкиИСМП",    Ложь);
	ПараметрыСканирования.Вставить("ЭтоАгрегацияКодовМаркировкиИСМП",   Ложь);
	ПараметрыСканирования.Вставить("ЭтоПечатьКодаМаркировкиИзПулаИСМП", Ложь);
	
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП", Ложь);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеСервисаИСМП",             Ложь);
	
	ПараметрыСканирования.Вставить("КонтролироватьСтатусыКодовМаркировкиИСМП",    Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьВладельцевКодовМаркировкиИСМП", Ложь);
	ПараметрыСканирования.Вставить("ТребуетсяПроверкаСредствамиККТ",              Ложь);
	ПараметрыСканирования.Вставить("ККТФФД12ИСМП",                                Неопределено);
	
	ЗапрашиватьДанныеСервисаИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса();
	
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = ЗапрашиватьДанныеСервисаИСМП;
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП             = ЗапрашиватьДанныеСервисаИСМП;
	
	НастройкиСканированияКодовМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	ПараметрыСканирования.КонтролироватьСтандартнуюВложенность      = НастройкиСканированияКодовМаркировки.КонтролироватьСтандартнуюВложенность;
	ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД = НастройкиСканированияКодовМаркировки.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД;
	ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки           = НастройкиСканированияКодовМаркировки.ПроверятьАлфавитКодовМаркировки;
	
	ПараметрыСканирования.УпрощеннаяОбработкаКодовМаркировки = НастройкиСканированияКодовМаркировки.УпрощеннаяОбработкаКодовМаркировки;
	ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки  = НастройкиСканированияКодовМаркировки.ПроверятьСтруктуруКодовМаркировки;
	
	// Только для табачной продукции
	Если ПараметрыСканирования.Свойство("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП") Тогда
		ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП =
			НастройкиСканированияКодовМаркировки.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП;
	КонецЕсли;
	Если ПараметрыСканирования.Свойство("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП") Тогда
		ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП =
			НастройкиСканированияКодовМаркировки.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП;
	КонецЕсли;
	Если ПараметрыСканирования.Свойство("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП") Тогда
		ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП =
			НастройкиСканированияКодовМаркировки.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку маркируемой продукции, дополняя базовые параметры сканирования, параметрами необходимыми для обработки
// штрихкодов ИСМП (кроме табака).
//
// Параметры:
//   ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования), дополняются параметрами:
//    * ЗапрашиватьДанныеСервисаИСМП - Булево - Истина, если требуется разрешить запрашивать данные в ГИС МТ.
//    * ДопустимыеСтатусыИСМП - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статусы, которые разрешены.
//    * КонтролироватьРасхожденияСИСМП - Булево - Истина, если требуется сравнить данные, хранящиеся в справочнике
//          Штрихкоды упаковок товаров с данными сервиса ИС МП и отобразить расхождения.
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//
// Возвращаемое значение:
//  Булево - параметры сканирования штрихкодов обуви добавлены
//
Функция ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВидПродукции)
		И Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукцииИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(, Ложь);
	Если ВидыПродукцииИСМП.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидПродукции = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыСканирования.ДопустимыеВидыПродукции, ВидыПродукцииИСМП, Истина);
	ИначеЕсли ВидыПродукцииИСМП.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыИСМП",                                Новый Массив);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыУпаковокИСМП",                        Новый Массив);
	ПараметрыСканирования.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП", Ложь);
	ПараметрыСканирования.Вставить("ЭтоМаркировкаОстатков",                                Неопределено);
	ПараметрыСканирования.Вставить("ЗаполнятьДанныеВЕТИС",                                 Ложь);
	ПараметрыСканирования.Вставить("ЗаполнятьСрокГодности",                                Ложь);
	ПараметрыСканирования.Вставить("КонтролироватьОкончаниеСрокаГодности",                 Ложь); // Если Истина то и свойство ЗаполнятьСрокГодности должно быть Истина
	ПараметрыСканирования.Вставить("ДатаДокумента",                                        '00010101');
	
	ДополнитьПараметрамиСканированияИСМП(ПараметрыСканирования);
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьПараметрыЗаполненияТабличнойЧастиТовары(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьGTIN", Истина);
	
КонецПроцедуры

// Заполняет параметры сканирования по контексту.
// 
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - источник заполнения параметров сканирования.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - по данному параметру будет проиходить отбор заполнения.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.МаркировкаТоваровИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВыводИзОборотаИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияВыводаИзОборота(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратВОборотИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратаВОборот(Контекст, ПараметрыСканирования);
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.СписаниеКодовМаркировкиИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияСписанияКодовМаркировки(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПеремаркировкаТоваровИСМП") Тогда
		
		ЗаполнитьПараметрыСканированияПеремаркировкаТоваров(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ОтгрузкаТоваровИСМП") Тогда 
		
		ЗаполнитьПараметрыСканированияОтгрузкаТоваровИСМП(Контекст, ПараметрыСканирования);
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриемкаТоваровИСМП") Тогда 
		
		ЗаполнитьПараметрыСканированияПриемкаТоваровИСМП(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда 
		
		ЗаполнитьПараметрыСканированияЗаказНаЭмиссиюКодовМаркировкиСУЗ(Контекст, ПараметрыСканирования);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаИПодборПродукцииИСМП") Тогда 
		
		ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования);
		
		ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено;
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = Неопределено;
		
		ПараметрыСканирования.ТолькоМаркируемаяПродукция = Истина;
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаКодовМаркировкиИСМП") Тогда 
		
		ЗаполнитьПараметрыСканированияПроверкаКодовМаркировки(Контекст, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции) Экспорт
	
	ЗапрашиватьДанныеСервиса = ИнтеграцияИСМПКлиентСерверПовтИсп.ЗапрашиватьДанныеСервиса();
	ПараметрыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	НастройкиСканирования    = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	Если ЗапрашиватьДанныеСервиса Тогда
	
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			
			ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП = Не НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ОперацияИсключенаВНастройкахСканирования(
				ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыКонтроля.ПараметрыКонтроляСтатусов);
			
			ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = Не НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ОперацияИсключенаВНастройкахСканирования(
				ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыКонтроля.ПараметрыКонтроляВладельцев);
			
		Иначе
			
			ГруппаПараметровКонтрольСтатусов = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
				НастройкиСканирования,
				ПараметрыКонтроля.ПараметрыКонтроляСтатусов);
			ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП    = ГруппаПараметровКонтрольСтатусов.Включено;
			
			ГруппаПараметровКонтрольВладельцев = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
				НастройкиСканирования,
				ПараметрыКонтроля.ПараметрыКонтроляСтатусов);
			ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП = ГруппаПараметровКонтрольВладельцев.Включено;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует новую структуру данных описания расширенного представления ошибки.
// 
// Возвращаемое значение:
// 	Структура:
// * Статус             - Неопределено, ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Ошибочный статус.
// * Владелец           - Булево - Признак ошибки владельца.
// * ОбщаяОшибка        - Булево - Признак общей ошибки.
Функция ПараметрыРасширенногоОписанияОшибки() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("Статус",          Неопределено);
	ВозвращаемоеЗначение.Вставить("Владелец",        Ложь);
	ВозвращаемоеЗначение.Вставить("ВидОперацииИСМП", Ложь);
	ВозвращаемоеЗначение.Вставить("ОбщаяОшибка",     Ложь);
	ВозвращаемоеЗначение.Вставить("ВозможноИгнорировать", Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеПроверкиНаККТ",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗаголовокПродолжить",  Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ПроверкаСредствамиККТ

Функция ДанныеПредставленияРезультатовПроверкиСредствамиККТ(СтрокаДанных, ДополнятьТекстомОшибки = Истина) Экспорт
	
	ВозвращаемоеЗначение  = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                   Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПолныйКодМаркировки", Ложь);
	ВозвращаемоеЗначение.Вставить("ОписаниеОшибок",               "");
	ВозвращаемоеЗначение.Вставить("ПредставлениеВЧеке",           Неопределено);
	
	ПредставленияВЧеке  = ПредставлениеКодаМаркировкиВЧеке();
	МассивТекстовОшибки = Новый Массив;
	
	Если СтрокаДанных.ТребуетсяПолныйКодМаркировки Тогда
		
		ТекстОшибки = НСтр("ru = 'Отсутствует полный код маркировки'");
		МассивТекстовОшибки.Добавить(ТекстОшибки);
		ВозвращаемоеЗначение.ТребуетсяПолныйКодМаркировки = Истина;
		
		ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.Отсутствует);
		
	Иначе
		
		ОшибочныеКодыПроверки = КодыРезультатаПроверкиДляОтображенияОшибки();
		ДанныеОписания        = ОшибочныеКодыПроверки.Получить(СтрокаДанных.ПредставлениеРезультатаПроверки);
		
		Если ДанныеОписания <> Неопределено Тогда
			
			ВозвращаемоеЗначение.ПредставлениеВЧеке = ДанныеОписания.ПредставлениеВЧеке;
			МассивТекстовОшибки.Добавить(ДанныеОписания.Описание);
			
		КонецЕсли;
	
		Если СтрокаДанных.КодМаркировкиПроверен
			И Не СтрокаДанных.РезультатПроверки
			И ДанныеОписания = Неопределено Тогда
			
			МассивТекстовОшибки.Добавить(НСтр("ru = 'Результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный.'"));
			ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.ММинус);
			
		КонецЕсли;
		
		Если СтрокаДанных.КодОбработкиЗапроса = "1" Тогда
			МассивТекстовОшибки.Добавить(НСтр("ru = 'Запрос проверки статуса ОИСМ имеет некорректный формат.'"));
			ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.ММинус);
		ИначеЕсли СтрокаДанных.КодОбработкиЗапроса = "2" Тогда
			МассивТекстовОшибки.Добавить(НСтр("ru = 'Указанный в запросе код маркировки имеет некорректный формат (не распознан).'"));
			ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.ММинус);
		КонецЕсли;
		
		Если Не СтрокаДанных.РезультаПроверкиОИСМ
			И ДанныеОписания = Неопределено Тогда
			
			МассивТекстовОшибки.Добавить(НСтр("ru = 'Проверка статуса товара ОИСМ завершилась с отрицательным результатом.'"));
			ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.М);
			
		КонецЕсли;
		
		Если СтрокаДанных.СтатусТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ОборотТовараПриостановлен")
			Или СтрокаДанных.СтатусТовара = ПредопределенноеЗначение("Перечисление.ОтветОИСМОСтатусеТовара.ПланируемыйСтатусТовараНекорректен") Тогда
			
			МассивТекстовОшибки.Добавить(Строка(СтрокаДанных.СтатусТовара));
			ДополнитьПредставлениеВЧеке(ВозвращаемоеЗначение, ПредставленияВЧеке.ММинус);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивТекстовОшибки.Количество() Тогда
		
		ВозвращаемоеЗначение.ЕстьОшибки = Истина;
		Если ДополнятьТекстомОшибки
			И ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			МассивТекстовОшибки.Добавить(СтрокаДанных.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ОписаниеОшибок = СтрСоединить(МассивТекстовОшибки, Символы.ПС);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Конструктор элемента данных для проверки кода маркировки средствами ККТ.
// 
// Параметры:
// 
// Возвращаемое значение:
//  Структура - Новый элемент данных проверки средствами ККТ:
// * КодМаркировки             - Строка - Код маркировки.
// * ПолныйКодМаркировки       - Строка - Полный код маркировки.
// * ВидПродукции              - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// * ПланируемыйСтатусТовара   - ПеречислениеСсылка.ПланируемыйСтатусМаркируемогоТовара - Планируемый статус.
// * ВидПродукции              - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * ВидУпаковки               - ПеречислениеСсылка.ВидыУпаковокИС  - Вид упаковки.
// * ШтрихкодУпаковки          - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на штрихкод, используется в сценариях сохранения результатов проверки.
// * ПредставлениеНоменклатуры - Строка, Неопределено - Представление позиции для отображения пользователю. Если не заполнено - будет определяться по ШтрихкодУпаковки.
// * ПолученРезультатЗапросаКМ - Булево - Служебный. Для блокировки повторного оповещения.
Функция НовыйЭлементДанныхПроверкиСредствамиККТ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("КодМаркировки",             "");
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки",       "");
	ВозвращаемоеЗначение.Вставить("ВидПродукции",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ПолученРезультатЗапросаКМ", Ложь); // Блокировка от повторного оповещения
	ВозвращаемоеЗначение.Вставить("ПланируемыйСтатусТовара",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидУпаковки",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ШтрихкодУпаковки",          Неопределено);
	ВозвращаемоеЗначение.Вставить("СоставКодаМаркировки",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ПредставлениеНоменклатуры", Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса",      СокрЛП(Новый УникальныйИдентификатор));
	ВозвращаемоеЗначение.Вставить("ИдентификаторЭлемента",     СокрЛП(Новый УникальныйИдентификатор));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода(ДанныеШтрихкода) Экспорт
	
	ЭлементПроверки  = НовыйЭлементДанныхПроверкиСредствамиККТ();
	ЭлементПроверки.КодМаркировки             = ДанныеШтрихкода.НормализованныйШтрихкод;
	ЭлементПроверки.ПолныйКодМаркировки       = ДанныеШтрихкода.ПолныйКодМаркировки;
	ЭлементПроверки.ПредставлениеНоменклатуры = ДанныеШтрихкода.ПредставлениеНоменклатуры;
	ЭлементПроверки.ВидУпаковки               = ДанныеШтрихкода.ВидУпаковки;
	ЭлементПроверки.ВидПродукции              = ДанныеШтрихкода.ВидПродукции;
	ЭлементПроверки.ШтрихкодУпаковки          = ДанныеШтрихкода.ШтрихкодУпаковки;
	ЭлементПроверки.СоставКодаМаркировки      = ДанныеШтрихкода.СоставКодаМаркировки;
	
	Возврат ЭлементПроверки;
	
КонецФункции

// Представление кода маркировки в чеке.
// 
// Возвращаемое значение:
//  Структура - Представление кода маркировки в чеке:
// * Отсутствует - Строка - "[М] отсутствует".
// * МПлюс       - Строка - "[М+]".
// * ММинус      - Строка - "[М-]".
// * М           - Строка - "[М]".
Функция ПредставлениеКодаМаркировкиВЧеке() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Отсутствует", "[М] отсутствует");
	ВозвращаемоеЗначение.Вставить("МПлюс",       "[М+]");
	ВозвращаемоеЗначение.Вставить("ММинус",      "[М-]");
	ВозвращаемоеЗначение.Вставить("М",           "[М]");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДопустимыеНачальныеСтатусыОтчетОНанесении(Статусы) Экспорт
	
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	
КонецПроцедуры

Процедура ЗаполнитьОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Статусы) Экспорт
	
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПараметровСканирования

// Дополняются свойства параметров сканирования и заполняются значения для документа "Маркировка товаров ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.КонтрольПустыхУпаковок             = Ложь;
	ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации    = Истина;
	
	ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием       = Истина;
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                         = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой    = Истина;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	
	ПараметрыСканирования.Организация       = ИсточникДанных.Организация;
	ПараметрыСканирования.Владелец          = ИсточникДанных.Организация;
	ПараметрыСканирования.ДокументОснование = ИсточникДанных.ДокументОснование;
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		ПараметрыСканирования.ЭтоМаркировкаОстатков = Истина;
	Иначе
		ПараметрыСканирования.ЭтоМаркировкаОстатков = Ложь;
	КонецЕсли;
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
		ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП = Истина;
	КонецЕсли;
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
	ПараметрыСканирования.ДопустимыйСпособВводаВОборот =
		ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Операция);
		
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(Неопределено);
	
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		
	Иначе
		
		Если ОперацииМаркировки.ЭтоОперацияНанесения Или ЗначениеЗаполнено(ИсточникДанных.ОперацияНанесения) Тогда
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		Иначе
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
		КонецЕсли;
		
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен"));
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
			ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
			ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
				ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		ИнтеграцияИСМПВЕТИСКлиентСервер.ДополнитьПараметрыСканированияМаркировкаТоваров(Операция, ПараметрыСканирования);
	КонецЕсли;
	
	Если ОперацииМаркировки.ЭтоОперацияНанесения
		Или ЗначениеЗаполнено(ИсточникДанных.ОперацияНанесения) Тогда
		
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП  = Истина;
		ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП = Истина;
		
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
			Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
			ПараметрыСканирования.ЗаполнятьСрокГодности = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Вывод из оборота ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияВыводаИзОборота(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП       = Истина;
	
	ПараметрыСканирования.ВозможнаЗагрузкаТСД = Истина;
	ПараметрыСканирования.Организация         = ИсточникДанных.Организация;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Списание кодов маркировки ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияСписанияКодовМаркировки(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.КонтрольПустыхУпаковок             = Ложь;
	ПараметрыСканирования.ПоддерживаютсяОперацииАгрегации    = Ложь;
	
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой    = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП       = Истина;
	
	ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки");
	
	ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП  = Истина;
	ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП = Истина;
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Перемаркировка ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияПеремаркировкаТоваров(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "Товары";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "КодМаркировки, НовыйКодМаркировки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ТолькоМаркируемаяПродукция = Истина;
	
	ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Нанесен"));
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Перемаркировка");
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Уведомление об отгрузке маркированных товаровИСМП ИСМП".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияОтгрузкаТоваровИСМП(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП       = Истина;
	Если ЗначениеЗаполнено(ИсточникДанных.ДатаОтгрузки) Тогда
		ПараметрыСканирования.ДатаДокумента = ИсточникДанных.ДатаОтгрузки;
	Иначе
		ПараметрыСканирования.ДатаДокумента = ИсточникДанных.Дата;
	КонецЕсли;
	
	ПараметрыСканирования.ВозможнаЗагрузкаТСД = Истина;
	ПараметрыСканирования.Организация         = ИсточникДанных.Организация;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику"));
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику"));
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Уведомление об отгрузке маркированных товаровИСМП ИСМП".
//
// Параметры:
//  Контекст - ФормаУправляемогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияПриемкаТоваровИСМП(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП       = Истина;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки"));
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	ПараметрыСканирования.СсылкаНаОбъект            = Неопределено;
	
	Если ИсточникДанных.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля") Тогда
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
		ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Эмитирован"));
	КонецЕсли;
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Возврат в оборот ИСМП".
//
// Параметры:
//  Контекст - ФормаУправляемогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияВозвратаВОборот(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ВидПродукции = ИсточникДанных.ВидПродукции;
	Операция     = ИсточникДанных.Операция;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "Товары";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "КодМаркировки";
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ТолькоМаркируемаяПродукция = Истина;
	
	ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС"));
	ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС"));
	
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС"));
	ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС"));
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = Операция;
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Заказ на эмиссию кодов маркировки СУЗ".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияЗаказНаЭмиссиюКодовМаркировкиСУЗ(Контекст, ПараметрыСканирования)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	ВидПродукции = ИсточникДанных.ВидПродукции;
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок  = Неопределено;
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки          = Неопределено;
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки           = Ложь;
	ПараметрыСканирования.ТолькоМаркируемаяПродукция          = Истина;
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки = Ложь;
	ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки  = Истина;
	ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки   = Ложь;
	
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Ложь;
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП             = Ложь;
	
	ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	ПараметрыСканирования.Владелец    = "";
	
	// Для обогащения информации об ошибке при выводе пользователю
	ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки");
	
	НастроитьПараметрыСканированияПоРаздельномуКонтролю(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для РМ "Проверка кодов маркировки".
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
Процедура ЗаполнитьПараметрыСканированияПроверкаКодовМаркировки(Контекст, ПараметрыСканирования)
	
	Если Не ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Очистить();
	ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП                       = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП           = Истина;
	ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок = Истина;
	ПараметрыСканирования.Владелец                                           = Неопределено;
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок                 = Неопределено;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                                = Истина;
	ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой        = Истина;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции     = Истина;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                          = Ложь;
	ПараметрыСканирования.СопоставлятьНоменклатуру                           = Ложь;
	ПараметрыСканирования.Организация                                        = Контекст.Организация;
	
	ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	ПараметрыСканирования.ОпределениеВидаПродукцииИСМП   = Истина;
	ПараметрыСканирования.ЗаписыватьЛогЗапросовИСМП      = Истина;
	
КонецПроцедуры

#КонецОбласти

Функция КодыРезультатаПроверкиДляОтображенияОшибки()
	
	ВозвращаемоеЗначение = Новый Соответствие();
	ПредставленияВЧеке   = ПредставлениеКодаМаркировкиВЧеке();
	
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00000000",
		ПредставленияВЧеке.М,
		НСтр("ru = 'Проверка КП КМ не выполнена, статус товара ОИСМ не проверен'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00000001",
		ПредставленияВЧеке.ММинус,
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00000011",
		ПредставленияВЧеке.М,
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00010000",
		ПредставленияВЧеке.М,
		НСтр("ru = 'Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00010001",
		ПредставленияВЧеке.ММинус,
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"_00010011",
		ПредставленияВЧеке.М,
		НСтр("ru = 'Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00000101",
		ПредставленияВЧеке.ММинус,
		НСтр("ru = 'Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"00000111",
		ПредставленияВЧеке.ММинус,
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен'"));
	ДобавитьОписаниеРезультатаПроверки(
		ВозвращаемоеЗначение,
		"_00001111",
		ПредставленияВЧеке.МПлюс,
		НСтр("ru = 'Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ корректен'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ДобавитьОписаниеРезультатаПроверки(Коллекция, Код, ПредставлениеВЧеке, Описание)
	
	ДанныеОписания = Новый Структура();
	ДанныеОписания.Вставить("ПредставлениеВЧеке", ПредставлениеВЧеке);
	ДанныеОписания.Вставить("Описание",           Описание);
	
	Коллекция.Вставить(Код, ДанныеОписания);
	
КонецПроцедуры

Процедура ДополнитьПредставлениеВЧеке(ПараметрыПредставления, Значение)
	
	Если Не ЗначениеЗаполнено(ПараметрыПредставления.ПредставлениеВЧеке) Тогда
		ПараметрыПредставления.ПредставлениеВЧеке = Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
