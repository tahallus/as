////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложения.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СобытияФормыПубликации

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Для формы настройки выгрузки торгового предложения программно формирует элементы
// настройки торговых предложений (гиперссылки, статус).
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ЭлементИнтерфейса - ЭлементФормы - элемент формы.
//
Процедура ИнициализацияЭлементовФормы(Знач Форма, ЭлементИнтерфейса) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТипТорговоеПредложение = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип;
	Если ТипТорговоеПредложение.СодержитТип(ТипЗнч(Форма.Объект.Ссылка)) Тогда
		
		Если Не ПравоНастройкиТорговыхПредложений() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ЭлементИнтерфейса);
		ДекорацияФормы = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		
		ОбновитьДекорациюСостоянияПубликации(Форма.Объект.Ссылка, ДекорацияФормы, Форма.ТорговыеПредложенияПубликовать);
		Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Видимость = Форма.ТорговыеПредложенияПубликовать;
		Форма.Элементы.ТорговыеПредложенияОткрытьПозицииТорговогоПредложения.Видимость = Форма.ТорговыеПредложенияПубликовать;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления элемента формы состояния обмена.
// Изменяет заголовок, цвет, гиперссылку для декорации формы.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на определяемый тип ТорговыеПредложения.
//  ДекорацияФормы - ДекорацияФормы - элемент формы Декорация.
//  РежимПубликации - Булево - признак публикации торгового предложения.
//
Процедура ОбновитьДекорациюСостоянияПубликации(Ссылка, ДекорацияФормы, РежимПубликации = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговоеПредложение", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации     КАК ДатаСинхронизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Состояние             КАК Состояние,
	|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки        КАК ОписаниеОшибки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации КАК ДействиеСинхронизации
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РежимПубликации = Ложь;
	Если Выборка.Следующий() Тогда
		РежимПубликации = Истина;
		Если Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			ДекорацияФормы.Заголовок = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Опубликовано'"),
				Формат(Выборка.ДатаСинхронизации, "ДЛФ=DT"));
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.РезультатУспехЦвет;
			ДекорацияФормы.Гиперссылка = Ложь;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
			Если Выборка.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
				ДекорацияФормы.Заголовок = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
				РежимПубликации          = Ложь;
			Иначе
				ДекорацияФормы.Заголовок = НСтр("ru = 'Требуется синхронизация'");
			КонецЕсли;
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ДекорацияФормы.Гиперссылка = Истина;
		Иначе
			ДекорацияФормы.Заголовок   = НСтр("ru = 'Ошибка синхронизации'");
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ПоясняющийОшибкуТекст;
			ДекорацияФормы.Гиперссылка = Истина;
		КонецЕсли;
	Иначе
		ДекорацияФормы.Заголовок = "";
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Источник          - СправочникОбъект - источник события.
//  Организация       - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//  Отказ             - Булево - признак отказа от выполнения действия.
//
Процедура ПередЗаписьюНаСервере(Знач Форма, Знач Источник, Знач Организация, Знач ЭлементИнтерфейса, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		ГруппаТорговыеПредложения = ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
		Если ГруппаТорговыеПредложения = Неопределено
			ИЛИ ГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ТорговыеПредложенияПубликовать") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ТорговыеПредложенияПубликовать Тогда
			ТекстСообщения = "";
			Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
				ТекстСообщения = НСтр("ru = 'Организация не указана. Публикация торговых предложений невозможна.'");
			ИначеЕсли Не БизнесСеть.ОрганизацияПодключена(Источник.Организация) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Организация %1 не зарегистрирована в сервисе 1С:Бизнес-сеть. Публикация торговых предложений отменена.'"),
					Источник.Организация);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
					Источник.Ссылка, "Организация", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект     - ОпределяемыйТип.ТорговоеПредложение - торговое предложений.
//  Организация       - ОпределяемыйТип.Организация         - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы                        - группа элементов формы.
//
Процедура ПослеЗаписиНаСервере(Знач Форма, Знач ТекущийОбъект, Знач Организация, Знач ЭлементИнтерфейса = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;

	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(ТекущийОбъект.Ссылка)) Тогда
		
		Если ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Источник = ТекущийОбъект.Ссылка;
		ЭлементСостояниеОбмена             = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		ЭлементНастройкиПубликации         = Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации;
		ЭлементПозицииТорговогоПредложения = Форма.Элементы.ТорговыеПредложенияОткрытьПозицииТорговогоПредложения;
		Публиковать                        = Форма.ТорговыеПредложенияПубликовать;
		
		СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
		Выборка = СостоянияСинхронизации.Выбрать(Новый Структура("ТорговоеПредложение", Источник));
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = Источник;
		ЕстьЗапись = Ложь;
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Организация = Выборка.Организация;
			МенеджерЗаписи.Прочитать();
			ЕстьЗапись = Истина;
		Иначе
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ПубликоватьЦены = Истина; // значение по умолчанию
		КонецЕсли;
		
		Если Публиковать Тогда
			Статус = НСтр("ru = 'Требуется синхронизация'");
		ИначеЕсли ЕстьЗапись Тогда
			Статус = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
		Иначе
			Статус = "";
		КонецЕсли;
		
		Если Не Публиковать И ЕстьЗапись Тогда
			Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление Тогда // отменяем синхронизацию
				МенеджерЗаписи.Удалить();
				Статус = "";
			Иначе
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				МенеджерЗаписи.Состояние             = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
				МенеджерЗаписи.ДатаСинхронизации     = '00010101';
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли Публиковать Тогда
			МенеджерЗаписи.ТорговоеПредложение = Источник;
			МенеджерЗаписи.Организация         = Организация;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			МенеджерЗаписи.ДействиеСинхронизации = ?(ЕстьЗапись,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление);
			МенеджерЗаписи.Записать(ЕстьЗапись);
		КонецЕсли;
		
		Если ЭлементСостояниеОбмена <> Неопределено И (ЕстьЗапись ИЛИ Публиковать) Тогда
			ЭлементСостояниеОбмена.Заголовок = Строка(МенеджерЗаписи.Состояние);
			ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ЭлементСостояниеОбмена.Гиперссылка     = Истина;
			ЭлементНастройкиПубликации.Видимость   = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементСостояниеОбмена.Доступность     = Истина;
			ЭлементНастройкиПубликации.Доступность = Истина;
			ЭлементПозицииТорговогоПредложения.Видимость   = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементПозицииТорговогоПредложения.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подсказки

// Обработчик создания подсказок формы.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой создаются подсказки.
//  ГруппаЭлементов - ГруппаФормы            - группа элементов формы, в которой размещаются подсказки.
//
Процедура ПриСозданииПодсказокФормы(Форма, ГруппаЭлементов) Экспорт
	
	Если Не ПоказыватьРекомендации() Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаЭлементов.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Картинка рекомендации
	
	Картинка = Форма.Элементы.Добавить("Подключаемый_КартинкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Картинка.Вид       = ВидДекорацииФормы.Картинка;
	Картинка.Картинка  = БиблиотекаКартинок.Идея;
	Картинка.Видимость = Ложь;
	
	// Текст рекомендации
	
	Декорация = Форма.Элементы.Добавить("Подключаемый_ПодсказкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Декорация.Гиперссылка            = Истина;
	Декорация.Видимость              = Ложь;
	Декорация.АвтоМаксимальнаяШирина = Ложь;

	Декорация.УстановитьДействие("Нажатие", "Подключаемый_ПодсказкиБизнесСетьНажатие");
	
	// Гиперссылка деактивации
	
	Декорация = Форма.Элементы.Добавить("Подключаемый_БольшеНеПоказыватьТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.Вид                    = ВидДекорацииФормы.Картинка;
	Декорация.Гиперссылка            = Истина;
	Декорация.Видимость              = Ложь;
	Декорация.Картинка               = БиблиотекаКартинок.Очистить;
	
	Декорация.УстановитьДействие("Нажатие", "Подключаемый_ПодсказкиБизнесСетьНажатие");
	
	// Добавление реквизита
	
	Рекомендация = Новый РеквизитФормы("Подключаемый_ТорговыеПредложенияРекомендация",
		Новый ОписаниеТипов("Неопределено"),, НСтр("ru = 'Рекомендация сервисе 1С:Бизнес-сеть'"));
	
	НовыеРеквизитыФормы = Новый Массив;
	
	НовыеРеквизитыФормы.Добавить(Рекомендация);
	
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПубликации

// Сведения о публикации торгового предложения.
//
// Параметры:
//  ТорговоеПредложение	 - Ссылка - ссылка на торговое предложение.
// 
// Возвращаемое значение:
//  Структура - значения дополнительных настроек.
//   * Организация - Ссылка - организация настройки.
//   * АдресЭлектроннойПочты - Строка - адрес электронной почты поставщика.
//   * Организация - Ссылка - организация настройки.
//   * УведомлятьОЗаказах - Булево - признак уведомления о получении заказов покупателей.
//   * ПубликоватьЦены - Булево - публиковать цены.
//   * ПубликоватьСрокиПоставки - Булево - публиковать сроки поставки.
//   * ПубликоватьОстатки - Булево - публиковать остатки.
//   * ВариантПубликацииОстатков - ПеречислениеСсылка.ВариантыПубликацииОстатковТорговыеПредложения  - вариант публикации остатков.
//   * ДополнительноеОписание - Строка - дополнительное текстовое описание.
//
Функция НастройкиПубликации(ТорговоеПредложение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация,
	|	СостоянияСинхронизацииТорговыеПредложения.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СостоянияСинхронизацииТорговыеПредложения.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииОстатков КАК ВариантПубликацииОстатков
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТорговоеПредложение);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Таблица.Количество() Тогда
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПраваДоступа

// Проверяет возможность настройки торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак вывода сообщений пользователю при отсутствии доступа.
// 
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена документами.
//
Функция ПравоНастройкиТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно
	
#Область Версия_1_8_1

#Область РегистрыСведений_СостоянияСинхронизацииТорговыеПредложения_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.8.1.11";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59fee545-876f-470d-8876-6902b5da78fd");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияСинхронизацииТорговыеПредложения";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияСинхронизацииТорговыеПредложения";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Торговые предложения: обновление данных синхронизации торговых предложений'");

#КонецОбласти

#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиРекомендаций

Функция ПоказыватьРекомендации() Экспорт
	
	Результат = Не ПолучитьФункциональнуюОпцию("НеПоказыватьРекомендацииБизнесСеть");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Получение подсказки по контексту в фоновом задании.
//
// Параметры:
//  ДанныеКонтекста	 - Структура - контекст данных формы для подсказок,
//    см. ТорговыеПредложенияКлиент.ДанныеКонтекстаДляПодсказки.
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет
//                             помещен (или уже помещен) результат работы процедуры.
//  АдресДополнительногоРезультата - Строка - дополнительный адрес временного хранилища, в которое будет
//                             помещен список номенклатуры.
//
Процедура ПолучитьПодсказкуПоКонтексту(ДанныеКонтекста, 
			Знач АдресРезультата, 
			Знач АдресДополнительногоРезультата = Неопределено) Экспорт
	
	Если Не БизнесСеть.ПравоЧтенияНастроекОбменаДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	Организации = ДанныеКонтекста.Организации;
	
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Организация = Организации[0];
	КонецЕсли;
	
	ПоказыватьСсылкуДеактивации = Организация <> Неопределено ИЛИ ДанныеКонтекста.Основание <> Неопределено;
	
	Рекомендации = ТорговыеПредложенияСлужебный.РекомендацииСервиса(Организация, ПоказыватьСсылкуДеактивации);
	
	Рекомендация = СлучайнаяРекомендация(Рекомендации);
	
	Если Рекомендация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Рекомендация.ДополнительныеПараметры.Номенклатура, АдресДополнительногоРезультата);
	
	Рекомендация.ДополнительныеПараметры = "";
	
	ПоместитьВоВременноеХранилище(Рекомендация, АдресРезультата);
	
КонецПроцедуры

// Возвращает прайс-листы по GUID.
//
// Параметры:
//  Идентификаторы	 - Массив из Строка - идентификаторы прайс-листов.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ТорговоеПредложение - ссылки на прайс-листы.
//
Функция ПрайсЛистыПоИдентификаторам(Идентификаторы) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустаяСсылкаНаПрайсЛист = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.ПривестиЗначение();
	
	Если ПустаяСсылкаНаПрайсЛист = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПустаяСсылкаНаПрайсЛист);
	
	Для каждого ТекущийИдентификатор Из Идентификаторы Цикл
		
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ТекущийИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрайсЛистСсылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущийИдентификатор));
		
		Если ЗначениеЗаполнено(ПрайсЛистСсылка) Тогда
			Результат.Добавить(ПрайсЛистСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеПараметров

// Описание реквизитов номенклатуры.
//
// Возвращаемое значение:
//  Структура - описание реквизитов.
//
Функция НовыйПараметрыНоменклатуры() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИспользованиеХарактеристик");
	Реквизиты.Вставить("ЕдиницаИзмерения");
	Реквизиты.Вставить("Упаковка");

	Возврат Реквизиты;
	
КонецФункции

// Описание настроек поиска по товарам
// 
// Возвращаемое значение:
//  Структура - описание структуры для хранения настроек поиска по товарам.
//
Функция ОписаниеНастроекПоискаПоТоварам()
	
	Результат = Новый Структура;
	Результат.Вставить("ПревышениеМинимальнойЦены",     25);
	Результат.Вставить("МаксимальныйСрокПоставки",       7);
	Результат.Вставить("ОграничениеТорговыхПредложений", 5);
	Результат.Вставить("ПоискПоНаименованию",        Ложь);
	Результат.Вставить("ПоискПоХарактеристике",      Ложь);
	Результат.Вставить("ПоискПоАртикулу",            Ложь);
	Результат.Вставить("ПоискПоШтрихКоду",           Истина);
	Результат.Вставить("ПоискПоНоменклатуреСервиса", Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ОбъектXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ОбъектXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			Если ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ОбъектXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ОбъектXDTO));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// Описание адресов абонента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для заполнения адресов:
//    * Представление - Строка - представление адреса.
//    * ЗначенияПолей - Строка - адрес в формате XML.
//    * Описание - Строка - комментарий адреса.
//    * Ссылка - Ссылка - объект хранения контактной информации.
//    * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Функция НовыйАдресАбонента() Экспорт
	
	АдресаАбонента = Новый ТаблицаЗначений;
	АдресаАбонента.Колонки.Добавить("Представление");
	АдресаАбонента.Колонки.Добавить("ЗначенияПолей");
	АдресаАбонента.Колонки.Добавить("Описание");
	АдресаАбонента.Колонки.Добавить("Ссылка");
	АдресаАбонента.Колонки.Добавить("Вид");
	
	Возврат АдресаАбонента;
	
КонецФункции

// Инициализация вида контактной информации для ввода адреса.
//
// Возвращаемое значение:
//  Структура - свойства для ввода адреса:
//    * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - значения типа адрес.
//    * ВключатьСтрануВПредставление - Булево - признак включения страны в представление.
//
Функция ВидКонтактнойИнформацииАдреса() Экспорт
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Истина);
	
	Возврат ВидКонтактнойИнформации;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет регламентное задание по выгрузки штрихкодов для подсказок.
//
Процедура ОбновитьПодсказкиТорговыеПредложенияОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеПодсказокТорговыеПредложения);
		
	Если Не ВыгружатьШтрихкодыДляПодсказок() Тогда
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОбновлениеПодсказокТорговыеПредложения, Ложь);
		Возврат;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") И ПоказыватьРекомендации() Тогда
		ТорговыеПредложенияСлужебный.ВыгрузитьШтрихкодыДляПодсказок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// см. ТорговыеПредложенияПереопределяемый.ПриОпределенииНастроек
//
Функция НастройкиПодсистемы() Экспорт
		
	Возврат ТорговыеПредложенияПовтИсп.НастройкиПодсистемы();
	
КонецФункции

// Сохраненные настройки поиска по товарам.
// 
// Возвращаемое значение:
//  Структура - сохраненные настройки поиска по товарам, см. ОписаниеНастроекПоискаПоТоварам.
//
Функция СохраненныеНастройкиПоискаПоТоварам() Экспорт
	
	// Заполнение структуры настроек по умолчанию.
	Результат = ОписаниеНастроекПоискаПоТоварам();
	
	// Чтение сохраненных данных.
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохранение настроек поиска по товарам.
//
// Параметры:
//  СохраняемыеНастройки - Структура - сохраняемые данные, см. ОписаниеНастроекПоискаПоТоварам.
//
Процедура СохранитьНастройкиПоискаПоТоварам(СохраняемыеНастройки) Экспорт
	
	Настройки = ОписаниеНастроекПоискаПоТоварам();
	
	Если ТипЗнч(СохраняемыеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Настройки, СохраняемыеНастройки);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам", Настройки);
		
КонецПроцедуры

#КонецОбласти

#Область Права

// Проверяет возможность поиска торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
Функция ПравоПоискаТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ТорговыеПредложенияБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность создания документа заказа поставщику для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение создание документа.
//
Функция ПравоСозданияЗаказовПоставщику(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	ТекстСообщения = НСтр("ru = 'Недостаточно прав для создания документов заказа поставщику.'");
	
	ТорговыеПредложенияПереопределяемый.ПриОпределенииПраваСозданияЗаказовПоставщику(ЕстьПраво, ТекстСообщения);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СлучайнаяРекомендация(Рекомендации)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Рекомендации) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, Рекомендации.ВГраница());
	
	Результат = Рекомендации[СлучайноеЧисло];
	
	Возврат Результат;
	
КонецФункции

// Добавление элементов управления для формы торговые предложения.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма объекта торговые предложения, например Справочник.Соглашения.
//  ГруппаЭлементов - ГруппаФормы                - группа элементов формы для добавления новых элементов.
//
Процедура ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ГруппаЭлементов)

	// Создание реквизитов формы.
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Реквизиты = Новый Соответствие;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Реквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	РеквизитТорговыеПредложенияПубликовать = Новый РеквизитФормы("ТорговыеПредложенияПубликовать",
		Новый ОписаниеТипов("Булево"),, НСтр("ru = 'Публиковать торговые предложения в сервисе'"),	Истина);
		
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияПубликовать.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияПубликовать);
	КонецЕсли;
	Если НовыеРеквизитыФормы.Количество() Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	КонецЕсли;
	
	// Создание/настройка элементов управления.
	
	// Создание общей группы 1С:Бизнес-сеть.
	ЭлементГруппаТорговыеПредложения = ГруппаЭлементов.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
	Если ЭлементГруппаТорговыеПредложения = Неопределено Тогда
		ЭлементГруппаТорговыеПредложения = Форма.Элементы.Добавить("ГруппаТорговыеПредложения",
			Тип("ГруппаФормы"), ГруппаЭлементов);
		ЭлементГруппаТорговыеПредложения.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаТорговыеПредложения.Заголовок           = НСтр("ru = '1С:Бизнес-сеть'");
		ЭлементГруппаТорговыеПредложения.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаТорговыеПредложения.ОтображатьЗаголовок = Ложь;
		ЭлементГруппаТорговыеПредложения.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ЭлементыГруппы = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы;
	
	// Флаг Публиковать торговые предложения.
	ЭлементТорговыеПредложенияПубликовать = ЭлементыГруппы.Найти("ТорговыеПредложенияПубликовать");
	Если ЭлементТорговыеПредложенияПубликовать = Неопределено Тогда
		ЭлементТорговыеПредложенияПубликовать = Форма.Элементы.Добавить("ТорговыеПредложенияПубликовать",
			Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияПубликовать.Вид                = ВидПоляФормы.ПолеФлажка;
		ЭлементТорговыеПредложенияПубликовать.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементТорговыеПредложенияПубликовать.ПутьКДанным        = РеквизитТорговыеПредложенияПубликовать.Имя;
		ЭлементТорговыеПредложенияПубликовать.УстановитьДействие("ПриИзменении",
			"Подключаемый_ПриИзменении_ПубликоватьТорговыеПредложения");
	КонецЕсли;
	
	// Создание группы Торговые предложения (состояние)
	ГруппаТорговыеПредложенияСостояние = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложенияСостояние");
	Если ГруппаТорговыеПредложенияСостояние = Неопределено Тогда
		ГруппаТорговыеПредложенияСостояние = Форма.Элементы.Добавить("ГруппаТорговыеПредложенияСостояние",
			Тип("ГруппаФормы"), ЭлементГруппаТорговыеПредложения);
		ГруппаТорговыеПредложенияСостояние.Вид                    = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТорговыеПредложенияСостояние.Заголовок              = НСтр("ru = 'Состояние публикации'");
		ГруппаТорговыеПредложенияСостояние.Отображение            = ОтображениеОбычнойГруппы.Нет;
		ГруппаТорговыеПредложенияСостояние.ОтображатьЗаголовок    = Ложь;
		ГруппаТорговыеПредложенияСостояние.Группировка            = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаТорговыеПредложенияСостояние.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	КонецЕсли;
	
	ЭлементыГруппыСостояние = ГруппаТорговыеПредложенияСостояние.ПодчиненныеЭлементы;
	
	// Гиперссылка Торговые предложения.
	ЭлементТорговыеПредложенияСостояниеОбмена = ЭлементыГруппыСостояние.Найти("ТорговыеПредложенияСостояниеОбмена");
	Если ЭлементТорговыеПредложенияСостояниеОбмена = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияСостояниеОбмена",
			Тип("ДекорацияФормы"), ГруппаТорговыеПредложенияСостояние);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Торговые предложения состояние обмена'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Позиции.
	ЭлементГиперссылка = ЭлементыГруппыСостояние.Найти("ТорговыеПредложенияОткрытьПозицииТорговогоПредложения");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьПозицииТорговогоПредложения",
			Тип("ДекорацияФормы"), ГруппаТорговыеПредложенияСостояние);
		ЭлементГиперссылка.Заголовок = НСтр("ru = '(список предложений)'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Дополнительные настройки.
	ЭлементГиперссылка = ЭлементыГруппы.Найти("ТорговыеПредложенияОткрытьНастройкиПубликации");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьНастройкиПубликации",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Настройки публикации торговых предложений'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;

КонецПроцедуры

Функция ВыгружатьШтрихкодыДляПодсказок()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
