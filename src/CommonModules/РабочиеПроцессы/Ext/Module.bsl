
#Область ПрограммныйИнтерфейс

// Обработчик подписки на событие "ВыполнитьРабочийПроцессПередЗаписьюИсточника"
//
Процедура ВыполнитьРабочийПроцессПередЗаписьюИсточника(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаРабочегоПроцесса") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		Если Источник.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказНаряда;
		Иначе
			СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаПокупателя;
		КонецЕсли;
	ИначеЕсли РасчетыСлужебный.ЭтоДокументОплатыОбъект(Источник) Тогда
		СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ПоступлениеПредоплатыПоЗаказуПокупателя;
	Иначе
		СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.СобытиеРабочегоПроцессаПоИмениОснования(Источник.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	Если СобытиеРабочегоПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПравилаПроцесса(СобытиеРабочегоПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРабочегоПроцесса = Новый Структура;
	ДанныеРабочегоПроцесса.Вставить("ЭтоНовый",					Источник.ЭтоНовый());
	ДанныеРабочегоПроцесса.Вставить("СобытиеРабочегоПроцесса",	СобытиеРабочегоПроцесса);
	
	Если Не ДанныеРабочегоПроцесса.ЭтоНовый Тогда
		ДополнитьДанныеРабочегоПроцесса(Источник, ДанныеРабочегоПроцесса, СобытиеРабочегоПроцесса);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ДанныеРабочегоПроцесса", ДанныеРабочегоПроцесса);
	
КонецПроцедуры

// Обработчик подписки на событие "ВыполнитьРабочийПроцессПриЗаписиИсточника"
//
Процедура ВыполнитьРабочийПроцессПриЗаписиИсточника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьПравилаРабочегоПроцесса") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРабочегоПроцесса = Неопределено;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ДанныеРабочегоПроцесса", ДанныеРабочегоПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	НужноДобавитьВОчередьОбработки = НужноЛиДобавитьВОчередьОбработки(Источник, ДанныеРабочегоПроцесса);
	
	Если НужноДобавитьВОчередьОбработки Тогда
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов);
		Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов.ИмяМетода);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗадания));
		
		ПараметрыЗадания.Вставить("Использование", Истина);
		
		Если СписокЗаданий.Количество() = 0 Тогда
			
			ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания());
			
			ДанныеКОбработке = НовыйДанныеКОбработке();
			
			Если РасчетыСлужебный.ЭтоДокументОплатыОбъект(Источник) Тогда
				Заказы = РасчетыСлужебный.ПолучитьСписокЗаказовВРасшифровкеПлатежа(Источник);
				Для Каждого Заказ Из Заказы Цикл
					ДанныеКОбработкеДобавить(ДанныеКОбработке, Заказ.Ссылка, ДанныеРабочегоПроцесса);
				КонецЦикла;
			Иначе
				ДанныеКОбработкеДобавить(ДанныеКОбработке, Источник.Ссылка, ДанныеРабочегоПроцесса);
			КонецЕсли;
			
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("Параметры", Новый Массив);
			ПараметрыЗадания.Параметры.Добавить(ДанныеКОбработке);
			
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
		Иначе
			
			ПараметрыЗадания.Удалить("Метаданные");
			
			Для Каждого Задание Из СписокЗаданий Цикл
				
				ПараметрыМассив = Новый Массив;
				
				Если РасчетыСлужебный.ЭтоДокументОплатыОбъект(Источник) Тогда
					
					ДанныеКОбработке = Неопределено;
					
					Заказы = РасчетыСлужебный.ПолучитьСписокЗаказовВРасшифровкеПлатежа(Источник);
					Для Каждого Заказ Из Заказы Цикл
						
						Если Задание.Параметры[0].Найти(Заказ.Ссылка, "Источник") = Неопределено Тогда
							
							Если ДанныеКОбработке = Неопределено Тогда
								ДанныеКОбработке = Задание.Параметры[0].Скопировать();
							КонецЕсли;
							
							ДанныеКОбработкеДобавить(ДанныеКОбработке, Заказ.Ссылка, ДанныеРабочегоПроцесса);
							ПараметрыМассив.Добавить(ДанныеКОбработке);
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли Задание.Параметры[0].Найти(Источник.Ссылка, "Источник") = Неопределено Тогда
					
					ДанныеКОбработке = Задание.Параметры[0].Скопировать();
					ДанныеКОбработкеДобавить(ДанныеКОбработке, Источник.Ссылка, ДанныеРабочегоПроцесса);
					ПараметрыМассив.Добавить(ДанныеКОбработке);
					
				КонецЕсли;
				
				Если ПараметрыМассив.Количество() > 0 Тогда
					ПараметрыЗадания.Вставить("Параметры", ПараметрыМассив);
				КонецЕсли;
				
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания "ОбработкаПравилРабочихПроцессов"
//
Процедура ОбработатьПравилаРабочихПроцессов(ДанныеКОбработке) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов);
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru='Старт обработки правил рабочих процессов. Количество источников к обработке: %1'"),
		ДанныеКОбработке.Количество()
	);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Примечание,
		Метаданные.Справочники.ПравилаРабочегоПроцесса, , ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеОбработки.Источник,
		|	ДанныеОбработки.СобытиеПроцесса,
		|	ДанныеОбработки.Автор
		|ПОМЕСТИТЬ втДанные
		|ИЗ
		|	&ДанныеОбработки КАК ДанныеОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаРабочегоПроцесса.Ссылка КАК Правило,
		|	ПравилаРабочегоПроцесса.НастройкиОтбора,
		|	ПравилаРабочегоПроцесса.УсловиеСтарта
		|ПОМЕСТИТЬ втПравила
		|ИЗ
		|	Справочник.ПравилаРабочегоПроцесса КАК ПравилаРабочегоПроцесса
		|ГДЕ
		|	ПравилаРабочегоПроцесса.УсловиеСтарта В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втДанные.СобытиеПроцесса
		|			ИЗ
		|				втДанные)
		|	И ПравилаРабочегоПроцесса.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаРабочегоПроцесса.Включено = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанные.Источник,
		|	втДанные.СобытиеПроцесса,
		|	втДанные.Автор,
		|	втПравила.Правило,
		|	втПравила.НастройкиОтбора,
		|	ПравилаРабочегоПроцесса.Действия.(
		|		Действие
		|	)
		|ИЗ
		|	втДанные КАК втДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПравила КАК втПравила
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРабочегоПроцесса КАК ПравилаРабочегоПроцесса
		|			ПО втПравила.Правило = ПравилаРабочегоПроцесса.Ссылка
		|		ПО втДанные.СобытиеПроцесса = втПравила.УсловиеСтарта";
	
	Запрос.УстановитьПараметр("ДанныеОбработки", ДанныеКОбработке);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка,"НастройкиОтбора") 
			И ЗначениеЗаполнено(Выборка.НастройкиОтбора) Тогда
			
			НастройкиСКД = Выборка.НастройкиОтбора.Получить();
			Если НастройкиСКД <> Неопределено Тогда
				
				СКД = Справочники.ПравилаРабочегоПроцесса.ПолучитьСхемуКритериевОтбораПоСобытию(Выборка.СобытиеПроцесса);
				
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
				КомпоновщикНастроек.Восстановить();
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Основание", Выборка.Источник);
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
				
				РезультатСКД = Новый ТаблицаЗначений;
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				ПроцессорВывода.УстановитьОбъект(РезультатСКД);
				ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если РезультатСКД.Количество() = 0 Тогда
					// Источник не прошел критерий отбора правила, никаких действий по нему выполнять не требуется
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаДействий = Выборка.Действия.Выбрать();
		
		Если ВыборкаДействий.Количество() > 0 Тогда
			
			МассивДействий = Новый Массив;
			Пока ВыборкаДействий.Следующий() Цикл
				МассивДействий.Добавить(ВыборкаДействий.Действие);
			КонецЦикла;
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Старт выполнения действий по правилу рабочего процесса: ""%1"",
				|для источника: ""%2""'"), Выборка.Правило, Выборка.Источник);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Примечание,
				Метаданные.Справочники.ПравилаРабочегоПроцесса, Выборка.Правило, ТекстСообщения);
				
			ДопДанныеИсточника = Новый Структура;;	
			СтруктураОтбора = Новый Структура("Источник, СобытиеПроцесса", Выборка.Источник, Выборка.СобытиеПроцесса);
			НайденныеСтроки = ДанныеКОбработке.НайтиСтроки(СтруктураОтбора);
			Для каждого стр Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(стр.ДанныеИсточника) Тогда
					Для каждого КлючИЗначение Из стр.ДанныеИсточника Цикл
						ДопДанныеИсточника.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
				
			Справочники.ДействияРабочегоПроцесса.ВыполнитьДействияПоИсточнику(МассивДействий, Выборка.Источник, Выборка.Правило, Выборка.Автор, ДопДанныеИсточника);
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Завершение выполнения действий по правилу рабочего процесса: ""%1"",
				|для источника: ""%2""'"), Выборка.Правило, Выборка.Источник);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Примечание,
				Метаданные.Справочники.ПравилаРабочегоПроцесса, Выборка.Правило, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru='Завершение обработки правил рабочих процессов'");
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Примечание,
		Метаданные.Справочники.ПравилаРабочегоПроцесса, , ТекстСообщения);
	
	ОтключитьЗадание();
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Правила рабочего процесса'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьПравилаПроцесса(СобытиеРабочегоПроцесса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаРабочегоПроцесса.Ссылка
		|ИЗ
		|	Справочник.ПравилаРабочегоПроцесса КАК ПравилаРабочегоПроцесса
		|ГДЕ
		|	ПравилаРабочегоПроцесса.Включено = ИСТИНА
		|	И ПравилаРабочегоПроцесса.ПометкаУдаления = ЛОЖЬ
		|	И ПравилаРабочегоПроцесса.УсловиеСтарта = &УсловиеСтарта";
	
	Запрос.УстановитьПараметр("УсловиеСтарта", СобытиеРабочегоПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция КонтролируемыеРеквизитыИсточника(СобытиеРабочегоПроцесса)
	
	КонтролируемыеРеквизиты = Новый Массив;
	
	Если СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаПокупателя Тогда
		
		КонтролируемыеРеквизиты.Добавить("СостояниеЗаказа");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказНаряда Тогда
		
		КонтролируемыеРеквизиты.Добавить("СостояниеЗаказа");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаПоставщику Тогда
		
		КонтролируемыеРеквизиты.Добавить("СостояниеЗаказа");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаНаПроизводство Тогда
		
		КонтролируемыеРеквизиты.Добавить("СостояниеЗаказа");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияСобытия Тогда
		
		КонтролируемыеРеквизиты.Добавить("Состояние");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаданияНаРаботу Тогда
		
		КонтролируемыеРеквизиты.Добавить("Состояние");
		
	ИначеЕсли СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияРемонта Тогда
		
		КонтролируемыеРеквизиты.Добавить("СостояниеРемонта");
		
	КонецЕсли;
	
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

Функция ТипыИсточниковПравилРабочегоПроцесса()
	
	Типы = Новый Массив;
	
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	Типы.Добавить(Тип("ДокументСсылка.Событие"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаданиеНаРаботу"));
	Типы.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
	Типы.Добавить(Тип("СправочникСсылка.РабочиеМеста"));
	Типы.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	Типы.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
	Типы.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));

	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

Процедура ДополнитьДанныеРабочегоПроцесса(Источник, ДанныеРабочегоПроцесса, СобытиеРабочегоПроцесса)
	
	Если РасчетыСлужебный.ЭтоДокументОплатыОбъект(Источник) Тогда
		ДанныеРабочегоПроцесса.Вставить("Заказы", РасчетыСлужебный.ПолучитьСписокЗаказовВРасшифровкеПлатежа(Источник));
		ДанныеРабочегоПроцесса.Вставить("ИсточникПроведен", Источник.Проведен);
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, КонтролируемыеРеквизитыИсточника(СобытиеРабочегоПроцесса));
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеРабочегоПроцесса, ЗначенияРеквизитов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция НужноЛиДобавитьВОчередьОбработки(Источник, ДанныеРабочегоПроцесса)
	
	ЭтоДокументОплаты = РасчетыСлужебный.ЭтоДокументОплатыОбъект(Источник);
	Если ЭтоДокументОплаты И НЕ Источник.Проведен Тогда
		НужноДобавитьВОчередьОбработки = Ложь;
	Иначе
		НужноДобавитьВОчередьОбработки = ДанныеРабочегоПроцесса.ЭтоНовый;
		Если Не НужноДобавитьВОчередьОбработки Тогда
			
			Если ЭтоДокументОплаты Тогда
				
				Если ДанныеРабочегоПроцесса.ИсточникПроведен Тогда
					Массив1 = ДанныеРабочегоПроцесса.Заказы;
					Массив2 = РасчетыСлужебный.ПолучитьСписокЗаказовВРасшифровкеПлатежа(Источник);
					НужноДобавитьВОчередьОбработки = НЕ РасчетыСлужебный.СравнитьМассивыБезУчетаПорядкаЭлементов(Массив1, Массив2);
				Иначе // Тут точно проведён
					НужноДобавитьВОчередьОбработки = Истина;
				КонецЕсли;
				
			Иначе
				
				КонтролируемыеРеквизиты = КонтролируемыеРеквизитыИсточника(ДанныеРабочегоПроцесса.СобытиеРабочегоПроцесса);
				
				Для Каждого КонтролируемыйРеквизит Из КонтролируемыеРеквизиты Цикл
					
					Если Источник[КонтролируемыйРеквизит] <> ДанныеРабочегоПроцесса[КонтролируемыйРеквизит] Тогда
						НужноДобавитьВОчередьОбработки = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НужноДобавитьВОчередьОбработки;
	
КонецФункции

Процедура ДанныеКОбработкеДобавить(ДанныеКОбработке, СсылкаНаИсточник, ДанныеРабочегоПроцесса)
	
	СтрокаДанных = ДанныеКОбработке.Добавить();
	СтрокаДанных.Источник			= СсылкаНаИсточник;
	СтрокаДанных.СобытиеПроцесса	= ДанныеРабочегоПроцесса.СобытиеРабочегоПроцесса;
	СтрокаДанных.Автор				= Пользователи.ТекущийПользователь();
	Если ДанныеРабочегоПроцесса.Свойство("ДанныеИсточника") Тогда
		СтрокаДанных.ДанныеИсточника = ДанныеРабочегоПроцесса.ДанныеИсточника;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьЗадание()
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов);
	Если Не РаботаВМоделиСервиса.РазделениеВключено() Тогда
		ОтборЗаданий.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
	Для каждого Задание Из СписокЗаданий Цикл
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Ложь);
		ПараметрыЗадания.Вставить("Параметры", Новый Массив);
		ПараметрыЗадания.Параметры.Добавить(НовыйДанныеКОбработке());
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗадания()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели   = ДниНедели;
	Расписание.Месяцы      = Месяцы;
	Расписание.ПериодПовтораВТечениеДня = ?(ОбщегоНазначения.РежимОтладки(), 5, 180);
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
	
КонецФункции

Функция НовыйДанныеКОбработке()
	
	ДанныеКОбработке = Новый ТаблицаЗначений;
	ДанныеКОбработке.Колонки.Добавить("Источник",			ТипыИсточниковПравилРабочегоПроцесса());
	ДанныеКОбработке.Колонки.Добавить("СобытиеПроцесса",	Новый ОписаниеТипов("ПеречислениеСсылка.СобытияРабочегоПроцесса"));
	ДанныеКОбработке.Колонки.Добавить("Автор",				Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДанныеКОбработке.Колонки.Добавить("ДанныеИсточника");
	Возврат ДанныеКОбработке;
	
КонецФункции

#КонецОбласти
