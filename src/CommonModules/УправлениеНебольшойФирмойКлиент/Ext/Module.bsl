
#Область ПрограммныйИнтерфейс

#Область ХочуБольшеВозможностей

// Добавляет информацию о программе и создает письмо для сбора пожеланий о новых возможностях
//
// Параметры:
//	ИнформацияОПрограмме - Строка - Информация о программе, подставляемая в письмо
//	Текст				 - Строка - Вступительный текст письма
//
Процедура ПредложитьВозможностьНажатие(Тег, Текст = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Текст = НСтр("ru = 'Опишите, каких возможностей вам не хватает в программе:'");
	КонецЕсли;
	
	ИнформацияОПрограмме = УправлениеНебольшойФирмойВызовСервера.СлужебнаяИнформацияДляПисьма(Тег);
	ТекстПисьма = Текст + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС + ИнформацияОПрограмме;
	
	Получатель = Новый СписокЗначений;
	Получатель.Добавить("sbm@1c.ru", НСтр("ru ='Команда разработки 1С:УНФ'"));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Получатель", Получатель);
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Хочу эти возможности в будущей версии'"));
	ПараметрыПисьма.Вставить("Текст", ТекстПисьма);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Устарела. См. ВалютыУНФКлиентСервер.Пересчитать
// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон, КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Возврат ВалютыУНФКлиентСервер.Пересчитать(Сумма, КурсНач, КурсКон, КратностьНач, КратностьКон);
	
КонецФункции

#КонецОбласти

#Область ФормыСпискаИВыбораСправочникаКонтрагенты

// Устарела. Будет удалена в следующей версии программы.
// Функция проверяет корректность позиционирования при активизации строки.
//
Функция ПозиционированиеКорректно(Форма) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы.Список.ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы.Список.ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Процедура заполняет надпись подвала: Основание выбора справочника Контрагенты.
//
Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Контрагент", Форма.Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
// Процедура восстанавливает отображение списка после полнотекстового поиска.
//
Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Иерархический список" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Дерево" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнформационнаяПанель

// Устарела. Будет удалена в следующей версии программы. 
// См. ИнформационнаяПанельУНФКлиент.ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка
Процедура ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнформПанели) Экспорт
	ИнформационнаяПанельУНФКлиент.ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнформПанели);
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

#КонецОбласти

#Область ДисконтныеКарты

// Устарела. Следует использовать новую
// см. ДисконтныеКартыУНФКлиент.ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка
// Обрабатывает событие активизации строки списка документов.
//
Процедура ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнформПанели) Экспорт
	
	ДисконтныеКартыУНФКлиент.ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнформПанели);
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

#КонецОбласти

#Область ЗУП

// Устарела. Будет удалена в следующей версии программы.
// См. ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации
Процедура ПриИзмененииПериодаРегистрации(ПереданнаяФорма) Экспорт
	
	ЗарплатаИПерсоналКлиент.ПриИзмененииПериодаРегистрации(ПереданнаяФорма);
	
КонецПроцедуры // ПриИзмененииПериодаРегистрации()

// Устарела. Будет удалена в следующей версии программы.
// См. ЗарплатаИПерсоналКлиент.ПриРегулированииПериодаРегистрации
Процедура ПриРегулированииПериодаРегистрации(ПереданнаяФорма, Направление) Экспорт
	
	ЗарплатаИПерсоналКлиент.ПриРегулированииПериодаРегистрации(ПереданнаяФорма, Направление);
	
КонецПроцедуры // ПриРегулированииПериодаРегистрации()

#КонецОбласти

#Область Ценообразование

// Устарела. Будет удалена в следующей версии программы.
// См. ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	ЦенообразованиеКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Устарела. Будет удалена в следующей версии программы.
// См. ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки = Ложь, ПересчитыватьЦеныСЗаказом = Истина) Экспорт
	
	ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки, ПересчитыватьЦеныСЗаказом);
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Устарела. Будет удалена в следующей версии программы.
// См. ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	ЦенообразованиеКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ФормаДокумента, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Устарела. Будет удалена в следующей версии программы.
// См. ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, КурсПересчетаЦен = Неопределено) Экспорт
	
	ЦенообразованиеКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, КурсПересчетаЦен);

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

#КонецОбласти

#Область ОбработкаТабличнойЧасти

// Устарела. Следует использовать ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ.
//
Процедура РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт

	ТабличныеЧастиУНФКлиент.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

// Устарела. Следует использовать ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего.
//
Процедура РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт
	
	ТабличныеЧастиУНФКлиент.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

// Устарела. Следует использовать ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018.
//
Функция НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтоимостьТекущая, СтавкаНДСТекущая, СтавкаНДСНовая) Экспорт
	
	Возврат ТабличныеЧастиУНФКлиент.НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтоимостьТекущая, СтавкаНДСТекущая, СтавкаНДСНовая);
	
КонецФункции

#КонецОбласти

#Область ДисконтныеКарты

// Выполняем пересчет суммы табличной части документа после считывания дисконтной карты.
Процедура ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
																	   
	Скидка = ДисконтныеКартыУНФВызовСервера.ПолучитьПроцентСкидкиПоВидуСкидокНаценок(ФормаДокумента.Объект.ВидСкидкиНаценки) + ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте;
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		        
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти, ОбнулятьАвтоСкидки = Истина)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	ИспользоватьМинимальныеЦены = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаДокумента, "КэшЗначений")
		И ФормаДокумента.КэшЗначений.Свойство("ИспользоватьМинимальныеЦены")
		И ФормаДокумента.КэшЗначений.ИспользоватьМинимальныеЦены
		И СтрокаТабЧасти.Свойство("МинимальнаяЦена")
		И ЗначениеЗаполнено(СтрокаТабЧасти.МинимальнаяЦена);
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		
		СуммаСкидкиНаценки = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена * СтрокаТабЧасти.ПроцентСкидкиНаценки / 100;
		
		Если ИспользоватьМинимальныеЦены Тогда
			
			МинимальнаяСумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.МинимальнаяЦена;
			МаксимальнаяСкидкаСтроки = СтрокаТабЧасти.Сумма - МинимальнаяСумма;
			
			Если СуммаСкидкиНаценки > МаксимальнаяСкидкаСтроки Тогда
				
				СуммаСкидкиНаценки = МаксимальнаяСкидкаСтроки;
				
				ЦенообразованиеКлиент.ПоказатьОповещениеПользователяОКорректировкеЦены(Новый Структура("СообщениеПользователю", 
					НСтр("ru = 'Размер и сумма скидки были изменены по минимальной цене'"))); 
				
			КонецЕсли;
			
			Если СтрокаТабЧасти.Сумма = МинимальнаяСумма
				ИЛИ СтрокаТабЧасти.Сумма = 0 Тогда
				СтрокаТабЧасти.ПроцентСкидкиНаценки = 0;
			Иначе
				СтрокаТабЧасти.ПроцентСкидкиНаценки = Окр(СуммаСкидкиНаценки * 100/СтрокаТабЧасти.Сумма, 2);
			КонецЕсли;
						
		КонецЕсли;
		
		СтрокаТабЧасти.СуммаСкидкиНаценки = Окр(СуммаСкидкиНаценки, 2);
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма - СтрокаТабЧасти.СуммаСкидкиНаценки;		
		
	КонецЕсли; 
	
	Если СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		
		Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
			
			Если СтрокаТабЧасти.Свойство("Сумма") Тогда
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.Сумма * СтавкаНДС / 100
				);
				СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
				
			Иначе
				
				БазаРасчетаНДС = СтрокаТабЧасти.ТаможеннаяСтоимость + СтрокаТабЧасти.СуммаПошлины;
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				БазаРасчетаНДС - (БазаРасчетаНДС) / ((СтавкаНДС + 100) / 100),
				БазаРасчетаНДС * СтавкаНДС / 100
				);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
			СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если ОбнулятьАвтоСкидки Тогда
		Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
			СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
			СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()

#КонецОбласти

#Область ДополнительныеРеквизиты

// Устарела. Будет удалена в следующей версии программы.
// Процедура разворачивает дерево значений на форме.
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Устарела. Будет удалена в следующей версии программы.
// Процедура обработчик события ПередУдалением.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Устарела. Будет удалена в следующей версии программы.
// Процедура обработчик события ПриНачалеРедактирования.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#Область ДинамическиеСписки

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
// Параметры:
//  Список  - обрабатываемый динамический список,
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
// Параметры:
//  Список			- обрабатываемый динамический список,
//  ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список         - обрабатываемый динамический список,
//  ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение - значение отбора,
//  Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Функция считывает значения элементов отбора динамического списка
//
Функция ПрочитатьЗначенияОтбораДинамическогоСписка(Список) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
		
		Для каждого ЭлементОтбораДинамическогоСписка Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			ИмяОтбора = Строка(ЭлементОтбораДинамическогоСписка.ЛевоеЗначение);
			ЗначениеОтбора = ЭлементОтбораДинамическогоСписка.ПравоеЗначение;
			
			Если Найти(ИмяОтбора, ".") > 0 ИЛИ НЕ ЭлементОтбораДинамическогоСписка.Использование Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить(ИмяОтбора, ЗначениеОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции // ПрочитатьЗначенияОтбораДинамическогоСписка()

#КонецОбласти

#Область РасчетИтогов

// Процедура открывает форму самостоятельного управления расчетами итогов
//
Процедура УправлениеИтогами() Экспорт
	
КонецПроцедуры //УправлениеИтогами()

#КонецОбласти

#Область Печать

// Устарела. Будет удалена в следующей версии программы.
// Возвращаемое значение:
//  См. ПечатьДокументовУНФКлиент.ЗаголовокПечатнойФормы
Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт
	Возврат ПечатьДокументовУНФКлиент.ЗаголовокПечатнойФормы(ПараметрКоманды);
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Возвращаемое значение:
// 	Неопределено - .
Функция ПечатьСчетовФактур(ПараметрКоманды) Экспорт
	
	ПараметрыПечати = ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды);
	
	Если ПараметрКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ПараметрКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	СписокМакетов = ПечатьДокументовУНФВызовСервера.СписокМакетовСчетовФактур(ПараметрКоманды.ОбъектыПечати);
	Если СписокМакетов <> "" Тогда 
		
		Если ПараметрКоманды.ОбъектыПечати.Количество() > 0
			И ТипЗнч(ПараметрКоманды.ОбъектыПечати[0]) = Тип("ДокументСсылка.СчетФактура") Тогда
			ИмяМенеджераПечати = "Документ.СчетФактура";
		Иначе
			ИмяМенеджераПечати = "Документ.СчетФактураПолученный";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяМенеджераПечати,
			СписокМакетов,
			ПараметрКоманды.ОбъектыПечати,
			ПараметрКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Возвращаемое значение:
// 	См. ПечатьДокументовУНФКлиент.ПечатьУКД
Функция ПечатьУКД(ПараметрКоманды) Экспорт
	Возврат ПечатьДокументовУНФКлиент.ПечатьУКД(ПараметрКоманды);
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Возвращаемое значение:
// 	См. ПечатьДокументовУНФКлиент.ПечатьТН
Функция ПечатьТН(ПараметрКоманды) Экспорт
	Возврат ПечатьДокументовУНФКлиент.ПечатьТН(ПараметрКоманды);
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Возвращаемое значение:
// 	См. ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов
Функция ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды) Экспорт
	Возврат ПечатьДокументовУНФКлиент.ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды);
КонецФункции

#КонецОбласти

#Область ЭлектроннаяПочта

// Интерфейсная клиентская процедура, поддерживающая вызов формы редактирования нового письма.
// При отправке письма через стандартную общую форму ОтправкаСообщения сообщения не сохраняются в информационной базе.
//
// Параметры см. в описании функции РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель, Получатель, Тема, Текст, СписокФайлов, ДокументыОснования, УдалятьФайлыПослеОтправки, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("ЗначенияЗаполнения", Новый Структура("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо")));
	
	ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	ПараметрыПисьма.Вставить("ДокументыОснования", ДокументыОснования);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", УдалятьФайлыПослеОтправки);
	
	ОткрытьФорму("Документ.Событие.Форма.ФормаЭлектронногоПисьма", ПараметрыПисьма, , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСБанками

// Начальная процедура работы с загрузкой данных из выписки
// 
// Параметры:
//		- ЗагруженныеДокументы - Массив - список загруженных документов
// 
// Возвращает:
// 		Булево - Истина - если загрузка произведена и ложь, если пользователь отказался
//			или произошла ошибка загрузки
Процедура ЗагрузитьДанныеИзФайлаВыписки(
		ИдентификаторФормы = Неопределено,
		ИмяФайла = "",
		Организация = Неопределено,
		БанковскийСчет = Неопределено,
		СтатьяДДСВходящий = Неопределено,
		СтатьяДДСИсходящий = Неопределено,
		ПроводитьЗагружаемые = Ложь,
		ЗаполнятьДолгиАвтоматически = Ложь,
		Программа = "",
		Кодировка = "Авто",
		ВерсияФормата = "1.02",
		АвтоматическиПодставлятьДокументы = Истина,
		АнализироватьИсториюВыбораЗначенийРеквизитов = Истина,
		НастройкиПолучены = Ложь,
		НеУдалятьДокументыКоторыхНетВВыписке = Ложь,
		КонтролироватьБезопасностьОбменаСБанком = Истина,
		СпособЗачета = Неопределено) Экспорт
		
	СтатьяДДСВходящий = ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей"));
	СтатьяДДСИсходящий = ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам"));
	
	ЗагруженныеДокументы = Новый Массив;
	АдресВХранилище = "";
	Результат = Ложь;
	ПутьДоФайла1 = "kl_to_1c.txt";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресВХранилище", АдресВХранилище);
	ДополнительныеПараметры.Вставить("ПутьДоФайла1", ПутьДоФайла1);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет", БанковскийСчет);
	ДополнительныеПараметры.Вставить("НастройкиПолучены", НастройкиПолучены);
	ДополнительныеПараметры.Вставить("_ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если НЕ НастройкиПолучены Тогда
		КлиентБанкВызовСервера.ЗагрузитьНастройкиОбменаСБанкомЧерезФайлы(БанковскийСчет, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("СтатьяДДСВходящий", СтатьяДДСВходящий);
		ДополнительныеПараметры.Вставить("СтатьяДДСИсходящий", СтатьяДДСИсходящий);
		ДополнительныеПараметры.Вставить("ПроводитьЗагружаемые", ПроводитьЗагружаемые);
		ДополнительныеПараметры.Вставить("ЗаполнятьДолгиАвтоматически", ЗаполнятьДолгиАвтоматически);
		ДополнительныеПараметры.Вставить("Программа", Программа);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		ДополнительныеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
		ДополнительныеПараметры.Вставить("АвтоматическиПодставлятьДокументы", АвтоматическиПодставлятьДокументы);
		ДополнительныеПараметры.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", НеУдалятьДокументыКоторыхНетВВыписке);
		ДополнительныеПараметры.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", АнализироватьИсториюВыбораЗначенийРеквизитов);
		ДополнительныеПараметры.Вставить("КонтролироватьБезопасностьОбменаСБанком", КонтролироватьБезопасностьОбменаСБанком);
		ДополнительныеПараметры.Вставить("СпособЗачета", СпособЗачета);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ДействияПоВыборуФайла(ДополнительныеПараметры)
	
	Диалог = ПолучитьДиалогВыбораФайла(ДополнительныеПараметры.ПутьДоФайла1);
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

Функция ПолучитьДиалогВыбораФайла(пПутьДоФайла)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки...'");
	Диалог.Фильтр = НСтр("ru='Файлы обмена с 1С (*.txt)|*.txt|Все файлы (*.*)|*.*'");
	Диалог.ПолноеИмяФайла = пПутьДоФайла;
	
	Возврат Диалог;
	
КонецФункции

Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	//#Если Не ВебКлиент Тогда
	Если Подключено Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры._ИмяФайла) Тогда // Если есть настройки, то чтение файла сразу.
			ДополнительныеПараметры.Вставить("ВыполнитьДействияЕслиФайлНеПрочитан", Истина);
			ДополнительныеПараметры.ПутьДоФайла1 = ДополнительныеПараметры._ИмяФайла;
			ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, Истина);
		Иначе // Если настроек нет, то диалог открытия файла.
			ДействияПоВыборуФайла(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
	//#КонецЕсли
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Диалог = ПолучитьДиалогВыбораФайла(ДополнительныеПараметры.ПутьДоФайла1);
		НачатьПомещениеФайла(ОписаниеОповещения, ДополнительныеПараметры.АдресВХранилище, Диалог, Истина, ДополнительныеПараметры.ИдентификаторФормы);
		
	//#Если Не ВебКлиент Тогда
	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры

Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры._ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.ПутьДоФайла1 = ВыбранныеФайлы[0];
	
	ПрочитатьТекстовыйДокумент(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьДействияЕслиФайлНеПрочитан(ДополнительныеПараметры) Экспорт

	ДействияПоВыборуФайла(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, ИмяФайлаИзНастройки = Ложь)
	
	#Если ВебКлиент Тогда
		
		ДополнительныеПараметры.Вставить("ИмяФайлаИзНастройки", ИмяФайлаИзНастройки);
		ЗагрузитьНаВебКлиенте(ДополнительныеПараметры);
		
	#Иначе
	
		ДанныеФайла = ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, Ложь);
		Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
			ТекстФайла = ДанныеФайла.ТекстФайла;
			
			Если ДанныеФайла.КоличествоСтрокВФайле = 1 Тогда
				// Скорее всего в файле используется одиночный разделитель строк.
				ДанныеФайла = ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, Истина);
				ТекстФайла = ДанныеФайла.ТекстФайла;
			КонецЕсли;
			
			ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры)
	
	// Пользователь отказался от передачи файла
	Если СтрДлина(ТекстФайла) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТекстФайла, ДополнительныеПараметры.ИдентификаторФормы);
	
	ДополнительныеПараметры.АдресВХранилище = АдресВХранилище;
	ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗагрузитьНаВебКлиентеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		
		АдресВременногоХранилища = Адрес;
		
		Состояние(НСтр("ru = 'Загрузка данных...'"),, НСтр("ru = 'Выполняется загрузка данных из файла'"));
		
		ОдиночныйРазделительСтрок = Ложь;
		ДанныеФайла = УправлениеНебольшойФирмойСервер.ПолучитьТекстФайлаНаВебКлиентеФрагмент(АдресВременногоХранилища, ДополнительныеПараметры, ОдиночныйРазделительСтрок);
		ТекстФайла = ДанныеФайла.ТекстФайла;
		
		Если Не ДанныеФайла.БылоИсключение
			И ДанныеФайла.КоличествоСтрокВФайле = 1 Тогда
			// Скорее всего в файле используется одиночный разделитель строк.
			ОдиночныйРазделительСтрок = Истина;
			ДанныеФайла = УправлениеНебольшойФирмойСервер.ПолучитьТекстФайлаНаВебКлиентеФрагмент(
				ДополнительныеПараметры,
				ДополнительныеПараметры.ИмяФайлаИзНастройки,
				ОдиночныйРазделительСтрок);
			ТекстФайла = ДанныеФайла.ТекстФайла;
		КонецЕсли;
		
		Если ДанныеФайла.БылоИсключение Тогда
			ОбработатьИсключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ДополнительныеПараметры.ИмяФайлаИзНастройки);
			Возврат;
		КонецЕсли;
		
		ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),,, БиблиотекаКартинок.Информация32);
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось поместить файл. Проверьте путь к файлу (кнопка ""Настройка"")'"),,, БиблиотекаКартинок.Ошибка32);
	КонецЕсли;

КонецПроцедуры

Функция ЗагрузитьНаВебКлиенте(ДополнительныеПараметры)
	
	Попытка
		ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
		АдресВременногоХранилища = "";
		УникальныйИдентификатор = ДополнительныеПараметры.ИдентификаторФормы;
		
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНаВебКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресВременногоХранилища, ИмяФайла, Ложь, УникальныйИдентификатор);
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ОбработатьИсключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ДополнительныеПараметры.ИмяФайлаИзНастройки);
	КонецПопытки
	
КонецФункции

// Возвращаемое значение:
//   Структура   - Ключи структуры:
//                   ТекстФайла
//                   КоличествоСтрокВФайле
Функция ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, ОдиночныйРазделительСтрок = Ложь)
	
	ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	Кодировка = ДополнительныеПараметры.Кодировка;
	
	БылоИсключение = Ложь;
	Попытка
		
		// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
		// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
		Если Кодировка = Неопределено ИЛИ Кодировка = "Авто" Тогда
			ТипФайла = ТипФайла(ИмяФайла);
		ИначеЕсли (Кодировка = КодировкаТекста.OEM) ИЛИ (Кодировка = "DOS") Тогда
			ТипФайла = "cp866";
		ИначеЕсли ДополнительныеПараметры.Кодировка = "Windows" ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры.Кодировка) Тогда
			ТипФайла = "windows-1251";
		Иначе
			ТипФайла = ДополнительныеПараметры.Кодировка;
		КонецЕсли;
		
		Если ТипФайла = "cp866" Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла,,,Ложь);
		Иначе
			// Если в файле строки разделены CR+LF, то одиночные LF не разделяют логические строки файла, а содержится в прикладных данных.
			// При этом в отдельных полях (многострочных) они разделяют подстроки,
			// а в остальных, как правило, содержатся по ошибке и должны быть проигнорированы.
			//
			// Чтобы отличить ошибочные одиночные LF от корректных разделителей CR+LF,
			// при чтении файла используем только двухсимвольный разделитель (CR+LF),
			// а если необходимо избавиться от ошибочных LF (Символы.ПС), то делаем это после чтения строк (перед помещением
			// данных в Секция.Данные).
			//
			// Если же в файле строки разделены одиночным LF, то отличить ошибочные LF от корректных нельзя.
			// Поэтому при чтении файла используем обычный набор разделителей. При этом ошибочно отделенные элементы строк могут
			// быть проигнорированы.
			ДвухсимвольныйРазделительСтрок = Символы.ВК + Символы.ПС;
			Если ОдиночныйРазделительСтрок Тогда
				// Значения по умолчанию. В конструктор их следует передать явно, так как значение пятого параметра указано явно.
				РазделительСтрок               = Символы.ПС;
				КонвертируемыйРазделительСтрок = ДвухсимвольныйРазделительСтрок;
			Иначе
				РазделительСтрок               = ДвухсимвольныйРазделительСтрок;
				КонвертируемыйРазделительСтрок = "";
			КонецЕсли;
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла, РазделительСтрок, КонвертируемыйРазделительСтрок, Ложь);
		КонецЕсли;
		
		ВремТекстовыйДокумент = Новый ТекстовыйДокумент;
		КоличествоСтрокВФайле = 0;
		
		Пока Истина Цикл
			
			ТекстСтрокиФайла = ЧтениеТекста.ПрочитатьСтроку();
			
			Если ТекстСтрокиФайла = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			ВремТекстовыйДокумент.ДобавитьСтроку(СтрЗаменить(ТекстСтрокиФайла, Символы.ПС, " "));
			КоличествоСтрокВФайле = КоличествоСтрокВФайле + 1;
			
		КонецЦикла;
		
		СтруктураДляВозврата = Новый Структура(
			"ТекстФайла, КоличествоСтрокВФайле",
			ВремТекстовыйДокумент.ПолучитьТекст(), КоличествоСтрокВФайле);
		
		Возврат СтруктураДляВозврата;
		
	Исключение
		
		БылоИсключение = Истина;
		
	КонецПопытки;
	
	Если БылоИсключение Тогда
		Возврат ОбработатьИсключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки);
	КонецЕсли;
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает тип файла после прочтения первых 5 строк
// Определяем кодировку
Функция ТипФайла(ИмяФайла)
	
	Текст              = Новый ЧтениеТекста(ИмяФайла, "windows-1251");
	СтрокаТекста       = Текст.ПрочитатьСтроку();
	НомерТекущейСтроки = 0;
	
	Пока СтрокаТекста <> Неопределено Цикл
		// Проверяем кодировку файла
		Если НомерТекущейСтроки = 0 И НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда // UTF-8.
			Возврат "UTF-8";
			Прервать;
		ИначеЕсли НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			Возврат "cp866";
			Прервать;
		КонецЕсли;
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку
		Если НомерТекущейСтроки > 5 Тогда 
			Прервать;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста       = Текст.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат "windows-1251";
	
КонецФункции

Процедура ЗагрузитьДанныеИзФайлаВыпискиЗавершение(Успешно, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Успешно Тогда
		ДополнительныеПараметры.АдресВХранилище = Адрес;
		ДополнительныеПараметры.ПутьДоФайла1 = ВыбранноеИмяФайла;
		ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры)
	
	Состояние(
		НСтр("ru='Выполняется чтение файла выписки...'"),
		,
		НСтр("ru='Пожалуйста, подождите'"),
		БиблиотекаКартинок.ЗагрузкаДанных32
	);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресФайлаКОбработке", ДополнительныеПараметры.АдресВХранилище);
	ПараметрыОткрытия.Вставить("ПутьДоФайла", ДополнительныеПараметры.ПутьДоФайла1);
	ПараметрыОткрытия.Вставить("Организация", ДополнительныеПараметры.Организация);
	ПараметрыОткрытия.Вставить("БанковскийСчетОрганизации", ДополнительныеПараметры.БанковскийСчет);
	ПараметрыОткрытия.Вставить("СтатьяДДСВходящий", ДополнительныеПараметры.СтатьяДДСВходящий);
	ПараметрыОткрытия.Вставить("СтатьяДДСИсходящий", ДополнительныеПараметры.СтатьяДДСИсходящий);
	ПараметрыОткрытия.Вставить("ПроводитьЗагружаемые", ДополнительныеПараметры.ПроводитьЗагружаемые);
	ПараметрыОткрытия.Вставить("ЗаполнятьДолгиАвтоматически", ДополнительныеПараметры.ЗаполнятьДолгиАвтоматически);
	ПараметрыОткрытия.Вставить("Программа", ДополнительныеПараметры.Программа);
	ПараметрыОткрытия.Вставить("Кодировка", ДополнительныеПараметры.Кодировка);
	ПараметрыОткрытия.Вставить("ВерсияФормата", ДополнительныеПараметры.ВерсияФормата);
	ПараметрыОткрытия.Вставить("АвтоматическиПодставлятьДокументы", ДополнительныеПараметры.АвтоматическиПодставлятьДокументы);
	ПараметрыОткрытия.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", ДополнительныеПараметры.АнализироватьИсториюВыбораЗначенийРеквизитов);
	ПараметрыОткрытия.Вставить("НастройкиПолучены", ДополнительныеПараметры.НастройкиПолучены);
	ПараметрыОткрытия.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", ДополнительныеПараметры.НеУдалятьДокументыКоторыхНетВВыписке);
	ПараметрыОткрытия.Вставить("КонтролироватьБезопасностьОбменаСБанком", ДополнительныеПараметры.КонтролироватьБезопасностьОбменаСБанком);
	ПараметрыОткрытия.Вставить("СпособЗачета", ДополнительныеПараметры.СпособЗачета);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.ФормаЗагрузка",
		ПараметрыОткрытия
	);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныПечатиОфисныхДокументов

// Устарела. Следует использовать ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьПечатьПоШаблонуОфисногоДокумента.
//
Функция ПечатьПоШаблонуОфисногоДокумента(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды.ОбъектыПечати) <> Тип("Массив") ИЛИ ПараметрКоманды.ОбъектыПечати.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьПечатьПоШаблонуОфисногоДокумента(ПараметрКоманды);
	
КонецФункции

// Устарела. Следует использовать ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов.
//
Процедура ОткрытьШаблоныПечатиОфисныхДокументов(Назначение = Неопределено) Экспорт
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(Назначение);
	
КонецПроцедуры

// Устарела. Следует использовать ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати.
//
Процедура УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати) Экспорт
	
	ШаблоныПечатиОфисныхДокументовКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
	
КонецПроцедуры

#КонецОбласти

#Область ТелефонАдресЭП

Процедура УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП,
	ОчищатьРеквизиты = Ложь, ИмяГруппаТелефон = "", ИмяГруппаАдресЭП = "") Экспорт
	
	Если ПустаяСтрока(ИмяГруппаТелефон) Тогда
		ИмяГруппаТелефон = "ГруппаТелефон";
	КонецЕсли;
	Если ПустаяСтрока(ИмяГруппаАдресЭП) Тогда
		ИмяГруппаАдресЭП = "ГруппаАдресЭП";
	КонецЕсли;
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Истина;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Ложь;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Ложь;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Ложь;
	КонецЕсли;
	
	Если ОчищатьРеквизиты
		И НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ОчиститьТелефонАдресЭП(ЭтаФорма.Объект, ТелефонАдресЭП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТелефонАдресЭП(Объект, ТелефонАдресЭП)
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		Объект.АдресЭП = "";
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Объект.Телефон = "";
	Иначе
		Объект.Телефон = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП) Экспорт
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СборСтатистики

// Устарела. См. СборСтатистикиУНФКлиент.ОтправитьИнформациюОЗапускеПриложения
// Отправляет информацию о запуске приложения.
//
Процедура ОтправитьИнформациюОЗапускеПриложения() Экспорт
	
	СборСтатистикиУНФКлиент.ОтправитьИнформациюОЗапускеПриложения();
	
КонецПроцедуры // ОтправитьИнформациюОЗапускеПриложения()

#КонецОбласти

#Область РаботаСДатамиИПериодами

Процедура ПересчитатьДатуОкончания(пФормаИлиСтрока, пИмяРеквизитаНачало, пИмяРеквизитаОкончание, пИспользоватьСтрокуТЧ = Ложь) Экспорт
	
	Если пИспользоватьСтрокуТЧ Тогда
		ДанныеДляИзменения = пФормаИлиСтрока;
	Иначе
		ДанныеДляИзменения = пФормаИлиСтрока.Объект;
	КонецЕсли;

	Дельта = ДанныеДляИзменения[пИмяРеквизитаОкончание] - пФормаИлиСтрока.НачалоСобытияПередИзменением;
	ДанныеДляИзменения[пИмяРеквизитаОкончание] = ДанныеДляИзменения[пИмяРеквизитаНачало] + Дельта;
	пФормаИлиСтрока.НачалоСобытияПередИзменением = ДанныеДляИзменения[пИмяРеквизитаНачало];
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПродаж

// Устарела. См. РабочееМестоКассираКлиент.ПроверитьПредупредитьОРаспределении
//
Процедура ПроверитьПредупредитьОРаспределении(Идентификатор) Экспорт
	
	РабочееМестоКассираКлиент.ПроверитьПредупредитьОРаспределении(Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПредпросмотрЧека

// Устарела. См. РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов
//
Процедура ПредпросмотрЧекаДенежныхДокументов(Параметры, Владелец, ИдентификаторУстройства) Экспорт
	
	РабочееМестоКассираКлиент.ПредпросмотрЧекаДенежныхДокументов(Параметры, Владелец, ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаФизлицаКассира

// Устарела. См. РабочееМестоКассираКлиент.ОткрытьФормуСотрудника
//
// Определяет сотрудника пользователя и открывает форму элемента справочника
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой пробивается чек
//
Процедура ОткрытьФормуСотрудника(Форма) Экспорт
	
	РабочееМестоКассираКлиент.ОткрытьФормуСотрудника(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьИсключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки)

	ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	
	Если ДополнительныеПараметры.Свойство("ВыполнитьДействияЕслиФайлНеПрочитан") И ДополнительныеПараметры.ВыполнитьДействияЕслиФайлНеПрочитан Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
		Если ИмяФайлаИзНастройки Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует.'");
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
		
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("ВыполнитьДействияЕслиФайлНеПрочитан", ЭтотОбъект, ДополнительныеПараметры),
			ТекстСообщения
		);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
		Если ИмяФайлаИзНастройки Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует. Выбрать другой файл можно в настройках (кнопка в правом верхнем углу).'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти