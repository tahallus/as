////////////////////////////////////////////////////////////////////////////////
// Подсистема "Клиент ЭДО".
// ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовКЭДО.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПереопределяемыеПроцедурыИФункции

#Область РаботаСоСправочникомНоменклатураКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриИзмененииНоменклатурыСопоставления_НоменклатураКонтрагентов.
//
Процедура ПриИзмененииНоменклатурыСопоставления_НоменклатураКонтрагентов(Форма, ДанныеСопоставления) Экспорт
	
	Если ДанныеСопоставления.Номенклатура.Пустая() Тогда
		ДанныеСопоставления.ИспользоватьХарактеристики  = Ложь;
		ДанныеСопоставления.Характеристика              = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ДанныеСопоставления.Упаковка                    = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		ДанныеСопоставления.ЕдиницаИзмеренияПоУмолчанию = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	// Читаем данные номенклатуры из ИБ
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("ИспользоватьХарактеристики"               , "ИспользоватьХарактеристики");
	РеквизитыНоменклатуры.Вставить("Упаковка"                                 , "ЕдиницаИзмерения");
	РеквизитыНоменклатуры.Вставить("ВидНоменклатуры"                          , "КатегорияНоменклатуры");
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСопоставления.Номенклатура, РеквизитыНоменклатуры);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Очищаем характеристику, если она не используется
	Если ДанныеНоменклатуры.ИспользоватьХарактеристики Тогда
		ДанныеСопоставления.ИспользоватьХарактеристики = Истина;
	Иначе
		ДанныеСопоставления.ИспользоватьХарактеристики = Ложь;
		ДанныеСопоставления.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// Если характеристика используется, проверяем ее принадлежность к номенклатуре
	Если ЗначениеЗаполнено(ДанныеСопоставления.Характеристика) Тогда
		
		// Определяем фактического владельца характеристики
		УстановитьПривилегированныйРежим(Истина);
		ВладелецХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСопоставления.Характеристика, "Владелец");
		УстановитьПривилегированныйРежим(Ложь);
		
		// Определяем, кто должен быть владельцем характеристики
		КорректныйВладелецХарактеристики = ВладелецХарактеристики = ДанныеСопоставления.Номенклатура 
			ИЛИ ВладелецХарактеристики = ДанныеНоменклатуры.ВидНоменклатуры;
		
		// Если характеристика не принадлежит данной номенклатуре, то очищаем характеристику
		Если Не ВладелецХарактеристики = КорректныйВладелецХарактеристики Тогда
			ДанныеСопоставления.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем сведения об упаковках
	ДанныеСопоставления.Упаковка                    = ДанныеНоменклатуры.Упаковка;
	ДанныеСопоставления.ЕдиницаИзмеренияПоУмолчанию = ДанныеНоменклатуры.Упаковка;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЕдиницамиИзмерения

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииСвойствУпаковкиЕдиницыИзмеренияНоменклатуры
Процедура ПриОпределенииСвойствУпаковкиЕдиницыИзмеренияНоменклатуры(Знач Упаковка, Знач Номенклатура, СвойстваУпаковки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.ЕдиницаИзмерения.Наименование КАК НаименованиеБазовойЕдиницыИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК КодОКЕИБазовойЕдиницыИзмерения,
	|	Упаковка.Наименование КАК НаименованиеУпаковки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Упаковка.Ссылка) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоБазовойЕдиницыИзмерения,
	|	1 КАК КоличествоУпаковок
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК Упаковка
	|		ПО (Упаковка.Ссылка = &Упаковка)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СвойстваУпаковки, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.НайтиНаименованиеЕдиницыИзмеренияПоКодуОКЕИ
Процедура НайтиНаименованиеЕдиницыИзмеренияПоКодуОКЕИ(КодОКЕИЕдиницыИзмерения, НаименованиеЕдиницыИзмерения) Экспорт
	
	ДанныеЕдиницы = ДанныеЕдиницыИзмеренияПоКодуОКЕИ(КодОКЕИЕдиницыИзмерения);
	Если ДанныеЕдиницы = Неопределено Тогда
		НаименованиеЕдиницыИзмерения = "";
	Иначе
		НаименованиеЕдиницыИзмерения = ДанныеЕдиницы.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЕдиницыИзмеренияПоКодуОКЕИ(Знач КодОКЕИ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Наименование КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.МеждународноеСокращение КАК МеждународноеСокращение,
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &Код
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", КодОКЕИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции


// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.БазоваяЕдиницаИзмеренияНоменклатуры
Процедура БазоваяЕдиницаИзмеренияНоменклатуры(Знач Номенклатура, ЕдиницаИзмерения) Экспорт

	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ВладелецУпаковкиЕдиницыИзмеренияНоменклатура
Процедура ВладелецУпаковкиЕдиницыИзмеренияНоменклатура(Знач Упаковка, ВладелецУпаковкиНоменклатура) Экспорт

	Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Если ТипЗнч(Упаковка.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВладелецУпаковкиНоменклатура = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыВДокументах

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.СформироватьТаблицуСопоставленияНоменклатурыКонтрагентовВДокументах
Процедура СформироватьТаблицуСопоставленияНоменклатурыКонтрагентовВДокументах(
	Знач НаборДокументов, ТаблицаСопоставления, ОткрыватьФормуДляИзмененияСопоставления) Экспорт
	
	ОткрыватьФормуДляИзмененияСопоставления = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборДокументов", НаборДокументов);
	Запрос.УстановитьПараметр("ПредставлениеНоменклатурыКлиента", НСтр("ru = 'Номенклатура клиента'"));
	Запрос.УстановитьПараметр("ПредставлениеНоменклатурыПоставщика", НСтр("ru = 'Номенклатура поставщика'"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК СсылкаНаДокумент,
	|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК Упаковка,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Владелец,
	|	""Товары"" КАК ИмяТабличнойЧасти,
	|	""НоменклатураКонтрагента"" КАК ИмяКолонкиНоменклатурыКонтрагента,
	|	&ПредставлениеНоменклатурыКлиента КАК ПредставлениеНоменклатурыКонтрагента,
	|	ЗаказПокупателяТовары.Номенклатура КАК НоменклатураПоиск,
	|	ЗаказПокупателяТовары.Характеристика КАК ХарактеристикаПоиск,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК УпаковкаПоиск
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ЗаказПокупателяТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ЗаказПокупателяТовары.Характеристика = НоменклатураКонтрагентов.Характеристика
	|			И ЗаказПокупателяТовары.Ссылка.Контрагент = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&НаборДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка,
	|	ЗаказПоставщикуТовары.НомерСтроки,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	|	НоменклатураКонтрагентов.Ссылка,
	|	ЗаказПоставщикуТовары.Ссылка.Контрагент,
	|	""Товары"",
	|	""НоменклатураКонтрагента"",
	|	&ПредставлениеНоменклатурыКлиента,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ЗаказПоставщикуТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ЗаказПоставщикуТовары.Характеристика = НоменклатураКонтрагентов.Характеристика
	|			И ЗаказПоставщикуТовары.Ссылка.Контрагент = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка В(&НаборДокументов)";
			
	ТаблицаСопоставления = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаНеСопоставленнойНоменклатурыКонтрагентовПоНоменклатуреИБ
Процедура ТекстЗапросаПоискаНеСопоставленнойНоменклатурыКонтрагентовПоНоменклатуреИБ(ТекстЗапроса, ТаблицаТоваровПоУмолчанию) Экспорт
	
	Если Не ТаблицаТоваровПоУмолчанию Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Товары.НоменклатураКонтрагента <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)";
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.НоменклатураКонтрагента.Номенклатура = &ПустаяНоменклатура";
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлектроннымДокументом

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой.
Процедура ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(Знач Документ, Настройки) Экспорт
	
	Если Документ.СпособОбработки = "НоменклатураКонтрагентов" Тогда
		Настройки.ОтражатьТолькоСопоставленные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСловарем

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД
Процедура ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, ЗначениеНаименования) Экспорт
	
	НаименованиеРеквизита = НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипЗнч(СсылкаНаОбъект));
	
	Если НаименованиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗначениеНаименования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, НаименованиеРеквизита);
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД
Процедура ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД(Знач НаборСсылокНаОбъекты, СоответствиеЗначенийНаименований) Экспорт
	
	НаименованиеРеквизита = НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипЗнч(НаборСсылокНаОбъекты[0]));
	
	Если НаименованиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗначенийНаименований = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НаборСсылокНаОбъекты, НаименованиеРеквизита);
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД
Процедура ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, НаименованиеТипаОбъекта) Экспорт

	ТипСсылкиНаОбъект = ТипЗнч(СсылкаНаОбъект);
	Если ТипСсылкиНаОбъект = Тип("СправочникСсылка.Номенклатура") Тогда
		НаименованиеТипаОбъекта = "Номенклатура";
	ИначеЕсли ТипСсылкиНаОбъект = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		НаименованиеТипаОбъекта = "Характеристика";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискСопоставленияНоменклатурыСНоменклатуройИБ

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций
Процедура ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Штрихкоды.Штрихкод КАК ШтрихкодКомбинации,
	               |	Штрихкоды.Номенклатура КАК Номенклатура,
	               |	Штрихкоды.Характеристика КАК Характеристика,
	               |	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ НайденныеКомбинации
	               |ИЗ
	               |	ТаблицаШтрихкодовКомбинации КАК ТаблицаШтрихкодовКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ПО ТаблицаШтрихкодовКомбинации.ШтрихкодКомбинации = Штрихкоды.Штрихкод
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШтрихкодКомбинации,
	               |	Номенклатура,
	               |	Характеристика,
	               |	ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НайденныеКомбинации.ШтрихкодКомбинации КАК ШтрихкодКомбинации
	               |ПОМЕСТИТЬ СписокУникальныхШтрихкодовКомбинаций
	               |ИЗ
	               |	НайденныеКомбинации КАК НайденныеКомбинации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НайденныеКомбинации.ШтрихкодКомбинации
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.Номенклатура) = 1 И
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.Характеристика) = 1 И
	               |	КОЛИЧЕСТВО(НайденныеКомбинации.ЕдиницаИзмерения) = 1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШтрихкодКомбинации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НайденныеКомбинации.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	               |	НайденныеКомбинации.Номенклатура КАК НоменклатураИБ,
	               |	НайденныеКомбинации.Характеристика КАК ХарактеристикаИБ,
	               |	НайденныеКомбинации.ЕдиницаИзмерения КАК УпаковкаИБ
	               |ИЗ
	               |	НайденныеКомбинации КАК НайденныеКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокУникальныхШтрихкодовКомбинаций КАК СписокУникальныхШтрихкодовКомбинаций
	               |		ПО НайденныеКомбинации.ШтрихкодКомбинации = СписокУникальныхШтрихкодовКомбинаций.ШтрихкодКомбинации";
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам
Процедура ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТаблицаНатуральныхКлючей.Штрихкод КАК Штрихкод,
	|	ТаблицаНатуральныхКлючей.ЭтоВнутреннийШтрихкод КАК ЭтоВнутреннийШтрихкод,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	ИСТИНА КАК ШтрихкодСопоставлен,
	|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура КАК ЭтоНашаНоменклатура
	|ПОМЕСТИТЬ ТаблицаСопоставленныхПоШтрихкодам
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	|		ПО Штрихкоды.Штрихкод = ТаблицаНатуральныхКлючей.Штрихкод
	|ГДЕ
	|	ТаблицаНатуральныхКлючей.Штрихкод <> """"
	|	И НЕ Штрихкоды.Номенклатура.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНатуральныхКлючей.Артикул КАК Артикул,
	|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НоменклатураКонтрагента.Ссылка КАК Номенклатура,
	|	ИСТИНА КАК АртикулСопоставлен,
	|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура КАК ЭтоНашаНоменклатура
	|ПОМЕСТИТЬ ТаблицаСопоставленныхПоАртикулам
	|ИЗ
	|	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураКонтрагента
	|		ПО ТаблицаНатуральныхКлючей.Артикул = НоменклатураКонтрагента.Артикул
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|		ПО ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры
	|			И (НЕ ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод)
	|ГДЕ
	|	ТаблицаНатуральныхКлючей.Артикул <> """"
	|	И ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры ЕСТЬ NULL
	|	И НЕ НоменклатураКонтрагента.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ИСТИНА КАК НаименованиеСопоставлено,
	|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура КАК ЭтоНашаНоменклатура
	|ПОМЕСТИТЬ ТаблицаСопоставленныхПоНаименованию
	|ИЗ
	|	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаНатуральныхКлючей.Наименование = СправочникНоменклатура.Наименование
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|				ГДЕ
	|					ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры = ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры
	|					И НЕ ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод)
	|	И ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура
	|	И НЕ СправочникНоменклатура.ЭтоГруппа
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры,
	|	СправочникНоменклатура.Ссылка,
	|	ИСТИНА,
	|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура
	|ИЗ
	|	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаНатуральныхКлючей.Наименование = ПОДСТРОКА(СправочникНоменклатура.НаименованиеПолное,1,250)
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|				ГДЕ
	|					ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры = ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры
	|					И НЕ ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод)
	|	И ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура
	|	И НЕ СправочникНоменклатура.ЭтоГруппа
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	Номенклатура";
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу
Процедура ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапроса) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВариантыСопоставленияПоСловарю.Идентификатор КАК Идентификатор,
	               |	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект КАК СсылкаНаОбъект,
	               |	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ
	               |ПОМЕСТИТЬ ХарактеристикиПоВладельцу
	               |ИЗ
	               |	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ТаблицаНоменклатуры.ИдентификаторХарактеристики
	               |			И (ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец ССЫЛКА Справочник.Номенклатура)
	               |			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец = ТаблицаНоменклатуры.НоменклатураИБ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВариантыСопоставленияПоСловарю.Идентификатор,
	               |	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект,
	               |	ТаблицаНоменклатуры.НоменклатураИБ
	               |ИЗ
	               |	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ТаблицаНоменклатуры.ИдентификаторХарактеристики
	               |			И (ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец ССЫЛКА Справочник.КатегорииНоменклатуры)
	               |			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец = ТаблицаНоменклатуры.НоменклатураИБ.КатегорияНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор,
	               |	СсылкаНаОбъект";
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияХарактеристикиСНашейНоменклатурой
Процедура ТекстЗапросаПоискаВариантовСопоставленияХарактеристикиСНашейНоменклатурой(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНоменклатуры.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ,
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаИБ
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Наименование
	|			И ТаблицаНоменклатуры.НоменклатураИБ = ХарактеристикиНоменклатуры.Владелец
	|			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура)
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.ИдентификаторХарактеристики,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.НоменклатураИБ,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Наименование
	|			И ТаблицаНоменклатуры.НоменклатураИБ.КатегорияНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.КатегорииНоменклатуры)
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления"
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД
Процедура ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД(ТекстЗапроса) Экспорт
	
	// Чем выше метрика - тем приоритетнее критерий поиска упаковки
	//
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Упаковки.Ссылка КАК УпаковкаИБ,
	|	ТаблицаНоменклатуры.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.КоличествоУпаковок <> 0
	|					ТОГДА ТаблицаНоменклатуры.КоличествоБазовойЕдиницыИзмерения / ТаблицаНоменклатуры.КоличествоУпаковок
	|				ИНАЧЕ ТаблицаНоменклатуры.КоличествоБазовойЕдиницыИзмерения
	|			КОНЕЦ = Упаковки.Коэффициент
	|			ТОГДА 100
	|		КОГДА ТаблицаНоменклатуры.КоличествоБазовойЕдиницыИзмерения = 0
	|			ТОГДА 0
	|		ИНАЧЕ -1000
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.НаименованиеУпаковки <> """"
	|				И (ТаблицаНоменклатуры.НаименованиеУпаковки = Упаковки.Наименование
	|					ИЛИ ТаблицаНоменклатуры.НаименованиеУпаковки = Упаковки.Наименование)
	|			ТОГДА 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЕдиницаИзмеренияКод <> """"
	|				И ТаблицаНоменклатуры.ЕдиницаИзмеренияКод = ЕСТЬNULL(Упаковки.ЕдиницаИзмеренияПоКлассификатору.Код, """")
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЕдиницаИзмерения <> """"
	|				И ТаблицаНоменклатуры.ЕдиницаИзмерения = ЕСТЬNULL(Упаковки.ЕдиницаИзмеренияПоКлассификатору.Наименование, """")
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Метрика
	|ПОМЕСТИТЬ НайденныеУпаковки
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК Упаковки
	|		ПО ТаблицаНоменклатуры.НоменклатураИБ = Упаковки.Владелец
	|ГДЕ
	|	НЕ Упаковки.ПометкаУдаления
	|	И ТаблицаНоменклатуры.ИспользоватьУпаковки
	|	И ТаблицаНоменклатуры.УпаковкаЗадана
	|	И ТаблицаНоменклатуры.НаименованиеУпаковки <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Упаковки.Ссылка,
	|	ТаблицаНоменклатуры.ИдентификаторУпаковки,
	|	ТаблицаНоменклатуры.НоменклатураИБ,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЕдиницаИзмеренияКод <> """"
	|				И ТаблицаНоменклатуры.ЕдиницаИзмеренияКод = ЕСТЬNULL(Упаковки.Код, """")
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЕдиницаИзмерения <> """"
	|				И ТаблицаНоменклатуры.ЕдиницаИзмерения = ЕСТЬNULL(Упаковки.Наименование, """")
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаНоменклатуры.НоменклатураИБ = Номенклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК Упаковки
	|		ПО (Номенклатура.ЕдиницаИзмерения = Упаковки.Ссылка)
	|ГДЕ
	|	ТаблицаНоменклатуры.НаименованиеУпаковки = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураИБ,
	|	ИдентификаторУпаковки,
	|	Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НайденныеУпаковки.Метрика) КАК Метрика,
	|	НайденныеУпаковки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	НайденныеУпаковки.НоменклатураИБ КАК НоменклатураИБ
	|ПОМЕСТИТЬ МаксимальныеМетрики
	|ИЗ
	|	НайденныеУпаковки КАК НайденныеУпаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеУпаковки.ИдентификаторУпаковки,
	|	НайденныеУпаковки.НоменклатураИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеУпаковки.УпаковкаИБ КАК УпаковкаИБ,
	|	НайденныеУпаковки.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	НайденныеУпаковки.НоменклатураИБ КАК НоменклатураИБ
	|ИЗ
	|	НайденныеУпаковки КАК НайденныеУпаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеМетрики КАК МаксимальныеМетрики
	|		ПО НайденныеУпаковки.ИдентификаторУпаковки = МаксимальныеМетрики.ИдентификаторУпаковки
	|			И НайденныеУпаковки.Метрика = МаксимальныеМетрики.Метрика
	|			И НайденныеУпаковки.НоменклатураИБ = МаксимальныеМетрики.НоменклатураИБ";
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик
Процедура ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ТаблицаСопоставления.Идентификатор КАК Идентификатор
	                |ИЗ
	                |	ТаблицаСопоставления КАК ТаблицаСопоставления
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                |		ПО ТаблицаСопоставления.НоменклатураИБ = ХарактеристикиНоменклатуры.Владелец
	                |			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура)
	                |ГДЕ
	                |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ТаблицаСопоставления.Идентификатор
	                |ИЗ
	                |	ТаблицаСопоставления КАК ТаблицаСопоставления
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                |			ПО Номенклатура.КатегорияНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	                |				И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.КатегорииНоменклатуры)
	                |		ПО ТаблицаСопоставления.НоменклатураИБ = Номенклатура.Ссылка
	                |ГДЕ
	                |	ХарактеристикиНоменклатуры.Ссылка = &Характеристика";

КонецПроцедуры

#КонецОбласти

#Область РаботаСДаннымиИБ

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииСтруктурыНоменклатурыИнформационнойБазы.
Процедура ПриОпределенииСтруктурыНоменклатурыИнформационнойБазы(СтруктураНоменклатуры) Экспорт
	
	// В качестве объектов упаковки используются элементы справочника ЕдиницыИзмерения,
	// которые не зависят от номенклатуры.
	СтруктураНоменклатуры.ИмяПараметраСвязиУпаковки = "Владелец";
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииСвойствНоменклатурыИнформационнойБазы.
Процедура ПриОпределенииСвойствНоменклатурыИнформационнойБазы(Знач НаборНоменклатуры, СвойстваНоменклатурИБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ИСТИНА КАК ИспользоватьУпаковки,
	|	ЛОЖЬ КАК ОбязательноеЗаполнениеХарактеристики,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоУмолчанию
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&НаборНоменклатуры)";
	
	Запрос.УстановитьПараметр("НаборНоменклатуры", НаборНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ФОИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеСвойстваНоменклатурыИБ();
		ЗаполнитьЗначенияСвойств(СвойстваНоменклатуры, Выборка);
		
		СвойстваНоменклатуры.ИспользоватьХарактеристики = Выборка.ИспользоватьХарактеристики И ФОИспользоватьХарактеристикиНоменклатуры;
		СвойстваНоменклатуры.ИспользоватьУпаковки = ФОИспользоватьУпаковки;
		
		СвойстваНоменклатурИБ.Вставить(Выборка.Номенклатура, СвойстваНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииПредставленийСопоставленияНоменклатуры.
Процедура ПриОпределенииПредставленийСопоставленияНоменклатуры(Представления) Экспорт
	
	Представления.ХарактеристикаПредставлениеОбъекта = НСтр("ru = 'Характеристика'"); // Вместо "Характеристика номенклатуры".
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииШтрихкодовНоменклатурыКонтрагента.
Процедура ПриОпределенииШтрихкодовНоменклатурыКонтрагента(Знач НоменклатураИБ, Штрихкод, ДругиеШтрихкодыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоискаШтрихкодовПоСтрокеТоваров();
	Запрос.УстановитьПараметр("Номенклатура"   , НоменклатураИБ.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика" , НоменклатураИБ.Характеристика);
	Запрос.УстановитьПараметр("Упаковка"       , НоменклатураИБ.Упаковка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Основной штрихкод
	ВыборкаШтрихкодаКомбинации = РезультатыЗапроса[0].Выбрать();
	
	Если ВыборкаШтрихкодаКомбинации.Следующий() Тогда
		Штрихкод = ВыборкаШтрихкодаКомбинации.Штрихкод;
	КонецЕсли;
	
	// Другие штрихкоды номенклатуры
	ВыборкаШтрихкодыНоменклатуры = РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаШтрихкодыНоменклатуры.Следующий() Цикл
		ДругиеШтрихкодыНоменклатуры.Добавить(ВыборкаШтрихкодыНоменклатуры.Штрихкод);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФормНаОснованииНоменклатурыКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента.
Процедура ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента(Знач НоменклатураКонтрагента, Форма) Экспорт
	
	Форма.Объект.Наименование       = НоменклатураКонтрагента.Наименование;
	Форма.Объект.НаименованиеПолное = НоменклатураКонтрагента.Наименование;
		
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
		
		Форма.Объект.Наименование = Форма.Объект.Наименование 
			+ " (" + НоменклатураКонтрагента.Характеристика + ")";
		
	КонецЕсли;
	
	Форма.Объект.Артикул = НоменклатураКонтрагента.Артикул;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
		Форма.Объект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(НоменклатураКонтрагента.ЕдиницаИзмеренияКод);
	ИначеЕсли ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмерения) Тогда
		Форма.Объект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НоменклатураКонтрагента.ЕдиницаИзмерения, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.СтавкаНДС) Тогда
		СтавкиНДСПоКлючу = Новый Соответствие;
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СтавкиНДСПоКлючу);
		Для каждого КлючЗначение Из СтавкиНДСПоКлючу Цикл
			Если КлючЗначение.Ключ = НоменклатураКонтрагента.СтавкаНДС Тогда
				Форма.Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента.
Процедура ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента(Знач НоменклатураКонтрагента, Форма) Экспорт
	
	Форма.Объект.Наименование = НоменклатураКонтрагента.Характеристика;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемы

// Метод устанавливает сопоставление номенклатуры контрагента номенклатуры организации
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект           - записываемый документ.
//  Отказ           - Булево                   - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента     - текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ПередЗаписьюУчетногоДокумента(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлениеНоменклатурыКонтрагентов.ЗаполнитьПустоеСопоставлениеВНоменклатуреКонтрагентаПоНоменклатуреИБ(ДокументОбъект.Товары, Отказ);
	
КонецПроцедуры

// Заполняет номенклатуру контрагента при изменении контрагента в документе
//
// Параметры:
//  Товары     - ДанныеФормыКоллекция         - таблица, в которой необходимо заполнить номенклатуру контрагента.
//  Контрагент - СправочникСсылка.Контрагенты - контрагент, которому принадлежит номенклатура.
//
Процедура ПриИзмененииВладельцаНоменклатурыКонтрагентов(Контрагент, Товары) Экспорт
	
	НоменклатураПоиска = Новый ТаблицаЗначений;
	НоменклатураПоиска.Колонки.Добавить("НомерСтроки"             , Новый ОписаниеТипов("Число"));
	НоменклатураПоиска.Колонки.Добавить("Номенклатура"            , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НоменклатураПоиска.Колонки.Добавить("Характеристика"          , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	НоменклатураПоиска.Колонки.Добавить("Упаковка"                , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	НоменклатураПоиска.Колонки.Добавить("НоменклатураКонтрагента" , Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	
	Для каждого СтрокаТовара Из Товары Цикл
		
		НоваяСтрока = НоменклатураПоиска.Добавить();
		
		НоваяСтрока.НомерСтроки    = СтрокаТовара.НомерСтроки;
		НоваяСтрока.Номенклатура   = СтрокаТовара.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаТовара.Характеристика;
		НоваяСтрока.Упаковка       = СтрокаТовара.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	РезультатЗапроса = СопоставлениеНоменклатурыКонтрагентов.РезультатЗапросаПоискаНоменклатурыКонтрагентаПриИзмененииВладельца(
		Контрагент, НоменклатураПоиска);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
			ТекСтрока.НоменклатураКонтрагента = Выборка.НоменклатураКонтрагента;
			Выборка.Сбросить();
		Иначе
			ТекСтрока.НоменклатураКонтрагента = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПоискНоменклатурыКонтрагентовПоИдентификатору

// Добавляет в табличную часть колонки поиска номенклатуры контрагентов
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица в которую требуется добавить колонки
//    для поиска номенклатуры контрагентов.
//
Процедура ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(Товары) Экспорт
	
	Товары.Колонки.Добавить("ИдентификаторКонтрагента", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	Товары.Колонки.Добавить("НаименованиеКонтрагента", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));
	
КонецПроцедуры

// Заполняет колонку "НоменклатураКонтрагента" сопоставленными данными номенклатуры
//
// Параметры:
//  Товары               - ТаблицаЗначений - таблица для которой требуется произвести сопоставление.
//                                        Таблица должна содержать колонки:
//   * ИдентификаторКонтрагента - Строка                                        - идентификатор номенклатуры контрагента.
//   * НоменклатураКонтрагента  - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагента.
//   * Номенклатура             - ОпределяемыйТип.НоменклатураБЭД               - ссылка номенклатуры.
//   * Характеристика           - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка характеристики.
//   * ЕдиницаИзмерения         - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка упаковки.
//  ВладелецНоменклатуры - СправочникСсылка.Контрагенты - ссылка на владельца номенклатуры
//
Процедура СопоставитьНоменклатуруКонтрагентовПоИдентификатору(Товары, ВладелецНоменклатуры) Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПоиска.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	ТаблицаПоиска.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПоиска.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПоиска.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	НомерСтроки = 0;
	
	Для каждого СтрокаТовара Из Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ПустаяСтрока(СтрокаТовара.ИдентификаторКонтрагента) Тогда
			Продолжить; // По пустым идентификаторам поиск не выполняем
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовара.НоменклатураКонтрагента) Тогда
			Продолжить; // Для заполненных значений номенклатуры контрагентов не выполняем поиск
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НоваяСтрока.Владелец       = ВладелецНоменклатуры;
		НоваяСтрока.Идентификатор  = СтрокаТовара.ИдентификаторКонтрагента;
		НоваяСтрока.Номенклатура   = СтрокаТовара.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаТовара.Характеристика;
		НоваяСтрока.Упаковка       = СтрокаТовара.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	РезультатЗапроса = СопоставлениеНоменклатурыКонтрагентов.РезультатЗапросаОднозначноСопоставленнойНоменклатурыКонтрагентаПоИдентификатору(ТаблицаПоиска);
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Товары[ВыборкаЗапроса.НомерСтроки - 1].НоменклатураКонтрагента = ВыборкаЗапроса.НоменклатураКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеДанных

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Формирует список ссылок для обработчиков обновления для перехода на новую версию
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - место хранения обновляемых объектов.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка - массив обрабатываемых объектов.
//
Функция ДанныеКОбработкеДляПереходаНаНовуюВерсию(МетаданныеДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаТовары КАК НоменклатураДокумента
	|ГДЕ
	|	НоменклатураДокумента.НоменклатураКонтрагента = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|	И (НЕ НоменклатураДокумента.УдалитьИдентификаторПоставщика = """"
	|			ИЛИ НЕ НоменклатураДокумента.УдалитьНаименованиеПоставщика = """")";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаТовары", МетаданныеДокумента.ПолноеИмя() + ".Товары");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Регистрирует к обновлению объекты по метаданным
//
// Параметры:
//  Параметры           - Структура        - параметры.
//  МетаданныеДокумента - ОбъектМетаданных - место хранения обновляемых объектов.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры, МетаданныеДокумента) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	НоменклатураДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаТовары КАК НоменклатураДокумента
	|ГДЕ
	|	НоменклатураДокумента.НоменклатураКонтрагента = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|	И (НЕ НоменклатураДокумента.УдалитьИдентификаторПоставщика = """"
	|			ИЛИ НЕ НоменклатураДокумента.УдалитьНаименованиеПоставщика = """")
	|	И НоменклатураДокумента.Ссылка > &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ПолноеИмяМетаданных = МетаданныеДокумента.ПолноеИмя();
	МенеджерОбъекта     = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаТовары", ПолноеИмяМетаданных + ".Товары");
	
	ОтработаныВсеДанные = Ложь;
	Ссылка              = МенеджерОбъекта.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			Ссылка = Выгрузка[КоличествоСтрок - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка.ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления данных объекта.
//
// Параметры:
//  Объект   - ДокументСсылка - документ, который требуется обновить.
//  Записать - Булево         - флаг необходимости записи объекта в ИБ.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Объект, Записать) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат; // Нет смысла искать номенклатуру контрагентов по пустому владельцу
	КонецЕсли;
	
	// Подготовка таблица обрабатываемых строк
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоиска.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПоиска.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПоиска.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПоиска.Колонки.Добавить("НоменклатураКонтрагента", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	
	ДополнитьТаблицуТоваровКолонкамиПоискаПоИдентификатору(ТаблицаПоиска);
	
	Для каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКонтрагента) 
			Или (ПустаяСтрока(СтрокаДокумента.УдалитьИдентификаторПоставщика)
				И ПустаяСтрока(СтрокаДокумента.УдалитьНаименованиеПоставщика)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		
		НоваяСтрока.ИдентификаторКонтрагента = СтрокаДокумента.УдалитьИдентификаторПоставщика;
		НоваяСтрока.НаименованиеКонтрагента  = СтрокаДокумента.УдалитьНаименованиеПоставщика;
		
	КонецЦикла;
	
	Если ТаблицаПоиска.Количество() = 0 Тогда
		Возврат; // В документе отсутствуют строки к обработке
	КонецЕсли;
	
	// Поиск номенклатуры контрагентов с указанными идентификаторами
	СопоставитьНоменклатуруКонтрагентовПоИдентификатору(ТаблицаПоиска, Объект.Контрагент);
	
	УдаляемыеСтроки = Новый Массив;
	
	// Заполнение документа найденными данными
	Для каждого СтрокаДокумента Из ТаблицаПоиска Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Товары[СтрокаДокумента.НомерСтроки - 1].НоменклатураКонтрагента = СтрокаДокумента.НоменклатураКонтрагента;
		
		Записать = Истина;
		
		УдаляемыеСтроки.Добавить(СтрокаДокумента);
		
	КонецЦикла;
	
	// Удаляем подобранные номенклатуры контрагентов, оставляем только строки в 
	// которых требуется создать элементы
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоиска.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ТаблицаПоиска.Количество() = 0 Тогда
		Возврат; // Все данные по документу были найдены в справочнике
	КонецЕсли;
	
	// Создание номенклатуры контрагентов из данных табличной части
	Для каждого СтрокаДокумента Из ТаблицаПоиска Цикл
		
		ДанныеНоменклатурыКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			Объект.Контрагент, СтрокаДокумента.ИдентификаторКонтрагента);
		ДанныеНоменклатурыКонтрагента.Наименование = СтрокаДокумента.НаименованиеКонтрагента; 
		
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагентаИнформационнойБазы(
			СтрокаДокумента.Номенклатура, СтрокаДокумента.Характеристика, СтрокаДокумента.ЕдиницаИзмерения);
		
		ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
		ДополнительныеПараметры.ТребуетсяПоискСсылки = Ложь; // Поиск выполнен ранее массово
		
		Отказ = Ложь;
		
		СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(ДанныеНоменклатурыКонтрагента,
			НоменклатураИБ, Отказ, , ДополнительныеПараметры);
		
		Если Отказ Тогда
			Продолжить; // Не удалось создать номенклатуру контрагента
		КонецЕсли;
		
		// Создана новая номенклатура контрагента, устанавливаем ее в строку документа
		СтрокаТабличнойЧасти = Объект.Товары[СтрокаДокумента.НомерСтроки - 1];
		СтрокаТабличнойЧасти.НоменклатураКонтрагента = ДанныеНоменклатурыКонтрагента.НоменклатураКонтрагента;
		
		Записать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипОбъекта)
	
	Если ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат "НаименованиеПолное";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат "НаименованиеДляПечати";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаПоискаШтрихкодовПоСтрокеТоваров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура
	|	И Штрихкоды.Характеристика = &Характеристика
	|	И Штрихкоды.ЕдиницаИзмерения = &Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.ЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкоды.Штрихкод) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти
