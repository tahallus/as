Процедура ДокументыПерсУчетаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Источник.Метаданные().Имя;
	
	Если Не Источник.ПометкаУдаления Тогда
		Документы[ИмяДокумента].ОбработкаФормированияФайла(Источник);
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументыСЗВДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента) Экспорт
	ДанныеЗастрахованногоЛица = Новый Структура();
	ДанныеЗастрахованногоЛица.Вставить("ФизическоеЛицо", ВыборкаПоСтрокамДокумента.Сотрудник);
	ДанныеЗастрахованногоЛица.Вставить("Наименование", ВыборкаПоСтрокамДокумента.СотрудникНаименование);
	ДанныеЗастрахованногоЛица.Вставить("СтраховойНомерПФР");
	ДанныеЗастрахованногоЛица.Вставить("Фамилия");
	ДанныеЗастрахованногоЛица.Вставить("Имя");
	ДанныеЗастрахованногоЛица.Вставить("Отчество");
	ДанныеЗастрахованногоЛица.Вставить("АдресДляИнформирования");
	
	ЗаполнитьЗначенияСвойств(ДанныеЗастрахованногоЛица, ВыборкаПоСтрокамДокумента);
	
	Возврат ДанныеЗастрахованногоЛица;
КонецФункции

Функция ПолучитьДатыПериодаДокумента(ДокументСсылка)Экспорт
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ОписьПачекСЗВ_6")
		Или ТипДокумента = Тип("ДокументСсылка.РеестрСЗВ_6_2") 
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М")
		Или ТипДокумента = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР")
		Или ТипДокумента = Тип("ДокументСсылка.ОписьОДВ_1")
		Или ТипДокумента = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда

		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ОтчетныйПериод,Организация");
		Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			
			ДатаНачала = Дата(ДанныеДокумента.ОтчетныйПериод, 1, 1);
			ДатаОкончания = Дата(ДанныеДокумента.ОтчетныйПериод, 12, 31, 23, 59, 59);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОписьОДВ_1")
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
			Или ТипДокумента = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР")
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ДатаНачала);	
		Иначе
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДатаНачала);
		КонецЕсли;
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДатаНачала, ДатаОкончания, ДанныеДокумента.Организация);
	Иначе
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата,Организация");
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДанныеДокумента.Дата, ДанныеДокумента.Дата, ДанныеДокумента.Организация);
	КонецЕсли;	
КонецФункции	

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.ПараметрТерриториальныхУсловий;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;
	
КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки) Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") ИЛИ (КодОснования="САМОЛЕТ") ИЛИ (КодОснования="ИНСПЕКТ") 
		ИЛИ (КодОснования="СПЕЦАВ") ИЛИ (КодОснования="ЛЕТИСП") ИЛИ (КодОснования="ИТСИСП") 
		ИЛИ (КодОснования="ИТСМАВ") ИЛИ (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") ИЛИ (КодОснования="НОРМСП") ИЛИ (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") ИЛИ (КодОснования="ИТС")	ИЛИ (КодОснования="27-14") ИЛИ (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") ИЛИ (КодОснования="ХИРУРСМ") ИЛИ (КодОснования="ЗП81ГД") ИЛИ (КодОснования="ЗП81СМ") 
		ИЛИ (КодОснования="28-ГДХР") ИЛИ (КодОснования="28-СМХР") ИЛИ (КодОснования="28-ГД") ИЛИ (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") ИЛИ (КодОснования="ЗП80ПД") 
		ИЛИ (КодОснования="28-ПДРК") ИЛИ (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ОписаниеВыгруженногоФайлаОтчетности() Экспорт
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Владелец");
	ОписаниеФайла.Вставить("ИмяФайла");
	ОписаниеФайла.Вставить("АдресВоВременномХранилище");
	ОписаниеФайла.Вставить("ПроверятьCheckXML", Ложь);
	ОписаниеФайла.Вставить("ПроверятьCheckUFA", Ложь);
	ОписаниеФайла.Вставить("ПроверятьTesterNDFL", Ложь);
	ОписаниеФайла.Вставить("ФайлВСоставеКомплекта", Ложь);
	ОписаниеФайла.Вставить("ПроверяемыйФайлКомплекта", Ложь);
	
	Возврат ОписаниеФайла;
КонецФункции

Процедура ПроверитьДанныеОрганизации(Объект, Организация, Отказ, ДатаАктуальности = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ДатаАктуальности = Неопределено Тогда
			ДатаПроверкиСведений = Объект.ОкончаниеОтчетногоПериода;
		Иначе
			ДатаПроверкиСведений = ДатаАктуальности;
		КонецЕсли;	
		
		ДанныеОрганизации = СведенияОбОрганизации(Организация, ДатаПроверкиСведений);
				
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеПолное) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнено полное наименование.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, "НаименованиеПолное", , Отказ);
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.РегистрационныйНомерПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнен регистрационный номер ПФР.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, "РегистрационныйНомерПФР", , Отказ);
		ИначеЕсли Не ПроверитьРегистрационныйНомерПФР(ДанныеОрганизации.РегистрационныйНомерПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации неверно заполнен регистрационный номер ПФР.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, "РегистрационныйНомерПФР", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.КодОрганаПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнен код органа ПФР.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, "КодОрганаПФР", , Отказ);
		КонецЕсли;
		
		Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Если Не ЗначениеЗаполнено(ДанныеОрганизации.РегистрацияВНалоговомОргане) Тогда
				ШаблонСообщения = НСтр("ru = 'Для организации не указана регистрация в ИФНС, действующая на %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									Формат(ДатаПроверкиСведений, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, , ,Отказ);			
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеОрганизации.КПП) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации не заполнен код по КПП'"), Организация, "КПП", ,Отказ);
			ИначеЕсли Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ДанныеОрганизации.КПП, "") Или СтрЗаменить(ДанныеОрганизации.КПП, "0", "") = "" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации неверно указан код по КПП'"), Организация, "КПП", ,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации не заполнен ИНН'"), Организация, "ИНН", ,Отказ);
		ИначеЕсли Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеОрганизации.ИНН, РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация), "") Или СтрЗаменить(ДанныеОрганизации.ИНН, "0", "") = "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У организации неверно указан ИНН'"), Организация, "ИНН", ,Отказ);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьРегистрационныйНомерПФР(РегистрационныйНомерПФР, Отказ = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(РегистрационныйНомерПФР)) <> 14 Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 1, 3))
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 5, 3))
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 9)) Тогда 
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(Дата) Экспорт

	СмещениеВСекундах = СмещениеСтандартногоВремени();
	ЗнакЧасовогоПояса = ?(СмещениеВСекундах < 0, "-", "+");
	ПоложительноеСмещениеВСекундах = ?(СмещениеВСекундах < 0, -СмещениеВСекундах, СмещениеВСекундах);
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс; ДП=0001-01-01T00:00:00") + ?(ЗначениеЗаполнено(ПоложительноеСмещениеВСекундах), ЗнакЧасовогоПояса + Формат('00010101' + ПоложительноеСмещениеВСекундах, "ДФ=чч:мм"), "Z")
	
КонецФункции

Процедура ПроверитьДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь) Экспорт
	ПроверитьОбязательныеДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ);	
	 
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ПроверяемыйЭлемент = "СтраховойНомерПФР" Тогда
			ПроверитьСНИЛСЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникаДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "МестоРождения" Тогда 	
			ПроверитьМестоРожденияЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникаДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "ВидДокумента" Тогда
			ПроверитьУдостоверениеЛичностиЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "Адрес" Тогда
			ПроверитьАдресЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникаДанныхЗЛ, Отказ);
		КонецЕсли;	
	КонецЦикла; 
КонецПроцедуры	

Процедура ПроверитьОбязательныеДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь)
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ОбязательноКЗаполнению И 
			Не ЗначениеЗаполнено(ДанныеЗЛ[Правило.ПутьКДанным]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнено поле %2'"), 
																			ДанныеЗЛ.Наименование, 
																			Правило.ПредставлениеПроверяемогоЭлемента);
																			
			ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, ИсточникаДанныхЗЛ, ДанныеЗЛ.ФизическоеЛицо, НомерВПачке, ТекстОшибки, Правило.ПутьКДанным, Отказ);																
		КонецЕсли;			
	КонецЦикла;		
КонецПроцедуры	

Процедура ПроверитьСНИЛСЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь)
			
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным]) И 
		Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным], ТекстСообщения) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеЗЛ.Наименование, ТекстСообщения);		
		
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, ИсточникаДанныхЗЛ, ДанныеЗЛ.ФизическоеЛицо, НомерВПачке, ТекстОшибки, ПравилоПроверки.ПутьКДанным, Отказ);						
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьМестоРожденияЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь)
	Если ЗначениеЗаполнено(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным])  
		И (СокрЛП(СтрЗаменить(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным],",","")) = "" 
			Или СокрЛП(СтрЗаменить(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным],",","")) = "0") Тогда
			
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнено поле %2'"), 
																			ДанныеЗЛ.Наименование,
																			ПравилоПроверки.ПредставлениеПроверяемогоЭлемента);
																			
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, ИсточникаДанныхЗЛ, ДанныеЗЛ.ФизическоеЛицо,  НомерВПачке, ТекстОшибки, ПравилоПроверки.ПутьКДанным, Отказ);																		 
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьУдостоверениеЛичностиЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь)
	ПравилоПроверкиВидДокумента        = Неопределено;
	ПравилоПроверкиСерияДокумента      = Неопределено;
	ПравилоПроверкиНомерДокумента      = Неопределено;
	
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ПроверяемыйЭлемент = "ВидДокумента" Тогда
			ПравилоПроверкиВидДокумента = Правило;
			ВидДокумента = ДанныеЗЛ[ПравилоПроверкиВидДокумента.ПутьКДанным]
		ИначеЕсли Правило.ПроверяемыйЭлемент = "СерияДокумента" Тогда
			ПравилоПроверкиСерияДокумента = Правило;
		ИначеЕсли  Правило.ПроверяемыйЭлемент = "НомерДокумента" Тогда
			ПравилоПроверкиНомерДокумента = Правило;
	   	КонецЕсли;	
	КонецЦикла;	
	
	Если ПравилоПроверкиВидДокумента <> Неопределено 
		И ЗначениеЗаполнено(ВидДокумента) Тогда
		 
		ТекстОшибкиСерия = "";
		Если ПравилоПроверкиСерияДокумента <> Неопределено
		 	И Не ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, ДанныеЗЛ[ПравилоПроверкиСерияДокумента.ПутьКДанным], ТекстОшибкиСерия) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеЗЛ.Наименование, ТекстОшибкиСерия);
					
			ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, ИсточникаДанныхЗЛ,  ДанныеЗЛ.ФизическоеЛицо, НомерВПачке, ТекстОшибки, ПравилоПроверкиСерияДокумента.ПутьКДанным, Отказ);	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПравилоПроверкиВидДокумента <> Неопределено 
		И ЗначениеЗаполнено(ВидДокумента) Тогда
		 
		ТекстОшибкиНомер = "";
		Если ПравилоПроверкиНомерДокумента <> Неопределено 
		 	И Не ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, ДанныеЗЛ[ПравилоПроверкиНомерДокумента.ПутьКДанным], ТекстОшибкиНомер) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеЗЛ.Наименование, ТекстОшибкиНомер);
					
			ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, ИсточникаДанныхЗЛ, ДанныеЗЛ.ФизическоеЛицо, НомерВПачке, ТекстОшибки, ПравилоПроверкиНомерДокумента.ПутьКДанным, Отказ);	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

Процедура ПроверитьАдресЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникаДанныхЗЛ, Отказ = Ложь)
	
	Адрес = ДанныеЗЛ[ПравилоПроверки.ПутьКДанным];
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		СообщенияПроверки = "";
		РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(Адрес);
		
		Если РезультатПроверки.СписокОшибок.Количество() <> 0 Тогда
			
			Для каждого СтруктураОшибки Из РезультатПроверки.СписокОшибок Цикл
				СообщенияПроверки = СообщенияПроверки + СтруктураОшибки.Представление + Символы.ПС;
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1: - поле ""%2"": %3'"),
					ДанныеЗЛ.Наименование,
					ПравилоПроверки.ПредставлениеПроверяемогоЭлемента,
					СообщенияПроверки);
			
			ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияДанныхЗЛ(
					Ошибки,
					ИсточникаДанныхЗЛ,
					ДанныеЗЛ.ФизическоеЛицо,
					НомерВПачке,
					ТекстОшибки,
					ПравилоПроверки.ПутьКДанным,
					Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьДокументы(ДокументСсылка, УникальныйИдентификатор)Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета") Тогда
		МассивОписанийФайловВыгрузки = Новый Массив;

		КомплектОбъект = ДокументСсылка.ПолучитьОбъект();
		КомплектОбъект.ПоместитьОписанияФайловКомплектаВМассив(МассивОписанийФайловВыгрузки, УникальныйИдентификатор);
		
		Возврат МассивОписанийФайловВыгрузки;		
	Иначе	
		СоответсвиеТиповСсылокТипамФайловВыгрузки = СоответсвиеТиповСсылокТипамФайловВыгрузки();
		Кодировка =  КодировкаТекста.ANSI;
		ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР");
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОписьПачекСЗВ_6") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиАДВ62(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СсылкаНаДвоичныеДанныеФайла = "";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ62(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ63(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ64(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВМ(ДокументСсылка);
			Кодировка = КодировкаТекста.UTF8;
			ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР") +".xml";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОписьОДВ_1")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД")	Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.ПолучитьДанныеФайла(ДокументСсылка, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			Кодировка = КодировкаТекста.UTF8;
			ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР") +".xml";
		КонецЕсли;
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Ссылка",  ДокументСсылка);
		ОписаниеФайла.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.Вставить("ИмяФайлаВыгрузки", ИмяФайла);
		ТипФайлаВыгрузки = СоответсвиеТиповСсылокТипамФайловВыгрузки.Получить(ТипЗнч(ДокументСсылка));
		ОписаниеФайла.Вставить("ТипФайлаВыгрузки",  ?(ТипФайлаВыгрузки = Неопределено, "", ТипФайлаВыгрузки));
		ОписаниеФайла.Вставить("КодировкаФайлаВыгрузки", Кодировка);

		Возврат ОписаниеФайла;
	КонецЕсли;
	
КонецФункции

Функция СписокНестрахуемыхВидовДохода() Экспорт
	МассивВидовДохода = Новый Массив;
	
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору);

	Возврат МассивВидовДохода;	
КонецФункции	

Функция СоответсвиеТиповСсылокТипамФайловВыгрузки()Экспорт
	СоответствиеТиповСсылокТипамФайловВыгрузки = Новый Соответствие;
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьПачекСЗВ_6"), "ПачкаАДВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РегламентированныйОтчет"), "ПачкаРСВ");	
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РеестрСЗВ_6_2"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1"), "пачкаСВВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьОДВ_1"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД"), "ПачкаИС");
	
	Возврат СоответствиеТиповСсылокТипамФайловВыгрузки;
	
КонецФункции

Функция ПараметрыФормированияДокументовКвартальнойОтчетности() Экспорт
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
    СтруктураПараметров.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("КорректируемыйПериод");
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("ОбновляемыеДокументы");
	СтруктураПараметров.Вставить("ЗамещаемыеДокументы");
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);

	Возврат СтруктураПараметров;

КонецФункции

Функция ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ() Экспорт
	СтруктураПараметров = Новый Структура;
	
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
    СтруктураПараметров.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ОбновляемыеДокументы");
	СтруктураПараметров.Вставить("ОтчетныйПериодИсходныхСведений");
	СтруктураПараметров.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());     
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);
	
	Возврат СтруктураПараметров;
КонецФункции

Функция ПараметрыДляСоздатьВТСведенияОЗаработке() Экспорт
	СтруктураПараметров = Новый Структура;
	
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);

	
	Возврат СтруктураПараметров;
КонецФункции

Функция СтруктураОтбораДанныхДляКвартальнойОтчетности() Экспорт
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПараметров.Вставить("ТипДоговора");
	СтруктураПараметров.Вставить("СписокФизическихЛиц");
	СтруктураПараметров.Вставить("СписокФизическихЛицДляАвтоКорректировки", Новый Массив);
	
	Возврат СтруктураПараметров; 
КонецФункции	

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный документ "РегламентированныйОтчет".
//  СтруктураРазделов     - Структура - структура с полями:
//    * Раздел25 - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1;
//    * Раздел6  - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1
//
Процедура ЗаполнитьПечатныеФормыРазделовРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов, НумероватьСтраницы, НомерПервойстраницыРаздела25, НомерПоследнейстраницыРаздела25, НомерПервойстраницыРаздела6, ОбщееКоличествоСтраницРаздела6) Экспорт
	Ссылка = Справочники.КомплектыОтчетностиПерсучета.КомплектСодержащийРСВ_1(СсылкаНаСохрРеглОтчет);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыФормирования = Справочники.КомплектыОтчетностиПерсучета.ПараметрыФормированияПечатныхФормКомплекта();
		
		Если СтруктураРазделов.Свойство("Раздел25") Тогда
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел25 = СтруктураРазделов.Раздел25.ПолучатьТабличныеДокументыРаздела;
			ПараметрыФормирования.ФормироватьСтруктуруРаздел25 = СтруктураРазделов.Раздел25.ПолучатьСтруктуруРаздела;
		КонецЕсли;	
		
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			Если СтруктураРазделов.Раздел6.ПолучатьСтруктуруРаздела Тогда
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Истина;
			Иначе
				
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Ложь;
				ПечатаемыеДокументы = Новый Массив;
				
				Для Каждого ОписаниеСтраницыРаздела6 Из СтруктураРазделов.Раздел6.СтраницыРаздела Цикл
					ПечатаемыеДокументы.Добавить(ОписаниеСтраницыРаздела6.Идентификатор);	
				КонецЦикла;	
				
				ПараметрыФормирования.ПечатаемыеДокументы = ПечатаемыеДокументы;
			КонецЕсли;
			
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел6 = СтруктураРазделов.Раздел6.ПолучатьТабличныеДокументыРаздела;	
		КонецЕсли;	
			
		
		ПечатныеФормыКомплекта2014Года = Справочники.КомплектыОтчетностиПерсучета.ПечатныеФормыКомплекта2014Года(
												Ссылка, 
												ПараметрыФормирования,
												НумероватьСтраницы,
												НомерПервойстраницыРаздела25,
												НомерПоследнейстраницыРаздела25,
												НомерПервойстраницыРаздела6,
												ОбщееКоличествоСтраницРаздела6);
												
		Если СтруктураРазделов.Свойство("Раздел25") Тогда 
			СтруктураРазделов.Раздел25.СтраницыРаздела = ПечатныеФормыКомплекта2014Года.Раздел25;
		КонецЕсли;	
							
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			СтруктураРазделов.Раздел6.СтраницыРаздела =  ПечатныеФормыКомплекта2014Года.Раздел6 ;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		ДанныеРСВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСохрРеглОтчет, "ДатаНачала, Организация, ДатаПодписи");
		ОписаниеРаздела25 = РегламентированнаяОтчетностьПереопределяемый.ПустаяСтруктураДляРазделовФормыРСВ_1();
		ОписаниеРаздела25.Описание = "Раздел 2.5";
		ОписаниеРаздела25.ТабличныйДокумент = Справочники.КомплектыОтчетностиПерсучета.ПустойРаздел25РасчетаРСВ1(
												ДанныеРСВ.Организация, 
												ДанныеРСВ.ДатаПодписи,
												НумероватьСтраницы, 
												НомерПервойстраницыРаздела25,
												НачалоКвартала(ДанныеРСВ.ДатаНачала));
												
												
												
		СтруктураРазделов.Раздел25.СтраницыРаздела.Добавить(ОписаниеРаздела25);	
	КонецЕсли;		

КонецПроцедуры

Процедура ВывестиДанныеПоБуквенно(Данные, Раздел, ИмяПоказателя, КоличествоЯчеек, НачальнаяЯчейка = 1) Экспорт

	Для НомЯчейки = НачальнаяЯчейка По НачальнаяЯчейка + КоличествоЯчеек - 1 Цикл
		Раздел.Области[ИмяПоказателя + Формат(НомЯчейки,"ЧГ=0")].Текст = Сред(Данные, НомЯчейки - НачальнаяЯчейка + 1, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, НомерСтраницы, ОбластьКолонтитула) Экспорт

	Если НумероватьСтраницы Тогда
		ВывестиДанныеПоБуквенно(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(НомерСтраницы,"ЧГ=0"), 6, "0", "Слева"), ОбластьКолонтитула, "НомСтр", 6);
	КонецЕсли;

КонецПроцедуры

Функция ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях() Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы");
	Описание.Вставить("ИмяПоляОрганизация");
	Описание.Вставить("ИмяПоляПериод");
	Описание.Вставить("СписокСсылок");
	
	Возврат Описание;
КонецФункции	

Функция ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВАХТА);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	
	Возврат МассивПараметров;
КонецФункции 

Процедура УдалитьПробелыРядомСДефисом(РедактируемаяСтрока) Экспорт 
	
	Пока Найти(РедактируемаяСтрока, " -") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, " -", "-");
	КонецЦикла;
	
	Пока Найти(РедактируемаяСтрока, "- ") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "- ", "-");
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(МенеджерВременныхТаблиц, ОписаниеИсточникаДанных) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСсылок", ОписаниеИсточникаДанных.СписокСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Период КАК Период
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В(&СписокСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Организация", "." + ОписаниеИсточникаДанных.ИмяПоляОрганизация); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Период", "." + ОписаниеИсточникаДанных.ИмяПоляПериод); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ОписаниеИсточникаДанных.ИмяТаблицы); 

	Запрос.Выполнить();
	
	СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц);	

	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТОрганизации";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	Организации.Организация КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТОрганизацииДляСреза
	|ИЗ
	|	ВТОрганизации КАК Организации";
	
	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	ДанныеОрганизации.ИНН,
	|	ДанныеОрганизации.КодОрганаПФР,
	|	""""  КАК КодОрганаФСГС,
	|	"""" КАК КодПодчиненностиФСС,
	|	ДанныеОрганизации.КодПоОКПО,
	|	ДанныеОрганизации.НаименованиеПолное,
	|	ДанныеОрганизации.Наименование КАК НаименованиеСокращенное,
	|	ДанныеОрганизации.Наименование,
	|	ДанныеОрганизации.ОГРН,
	|	ДанныеОрганизации.КодОКВЭД,
	|	ДанныеОрганизации.НаименованиеОКВЭД,
	|	ДанныеОрганизации.КодОКОПФ,
	|	ДанныеОрганизации.КодОрганаФСС,
	|	"""" КАК НаименованиеОКОПФ,
	|	ДанныеОрганизации.КодОКФС,
	|	"""" КАК НаименованиеОКФС,
	|	ДанныеОрганизации.КПП КАК КПП,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане, Значение(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане.НаименованиеИФНС, """") КАК НаименованиеИФНС,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане.КодПоОКАТО, """") КАК ОКАТО,
	|	"""" КАК ТерриториальныеУсловияПФР,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрационныйНомерПФР, """") КАК РегистрационныйНомерПФР,
	|	ДанныеОрганизации.ЮридическоеФизическоеЛицо,
	|	ДанныеОрганизации.ЮридическоеФизическоеЛицо,
	|	"""" КАК РайонныйКоэффициент,
	|	Организации.Организация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТСведенияОбОрганизациях
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизации
	|		ПО Организации.Организация = ДанныеОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОрганизацииДляСреза";
		
	Запрос.Выполнить();	
	
КонецПроцедуры

Функция УзелФайлаПФР(ДеревоВыгрузки) Экспорт
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
	УзелПФР = СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);	
	
	Возврат УзелПФР;
КонецФункции

Процедура ПроверитьЗаписиОСтаже(МенеджерВременныхТаблиц, Ссылка, ОтчетныйПериод, Отказ, РасширеннаяПроверка = Истина, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь) Экспорт
	Ошибки = Новый Массив;
	
	ДоговорыГПХ = Новый Массив;
	Если ВыделятьСтажДоговорников Тогда
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	КонецЕсли;	

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерСтроки КАК НомерСтрокиСтаж,
	|	ЗаписиОСтаже.НомерСтрокиСотрудник КАК НомерСтрокиСотрудник,
	|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ФизическиеЛица.Наименование КАК СотрудникНаименование,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ТерриториальныеУсловияПФР.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ОсобыеУсловияТрудаПФР.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ОснованияИсчисляемогоСтраховогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ОснованияДосрочногоНазначенияПенсии.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПараметрыИсчисляемогоСтраховогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорГПХ
	|ИЗ
	|	ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	|		ПО ЗаписиОСтаже.ТерриториальныеУсловия = ТерриториальныеУсловияПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР
	|		ПО ЗаписиОСтаже.ОсобыеУсловияТруда = ОсобыеУсловияТрудаПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения КАК СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения
	|		ПО ЗаписиОСтаже.КодПозицииСписка = СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияИсчисляемогоСтраховогоСтажа КАК ОснованияИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа = ОснованияИсчисляемогоСтраховогоСтажа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияДосрочногоНазначенияПенсии КАК ОснованияДосрочногоНазначенияПенсии
	|		ПО ЗаписиОСтаже.ОснованиеВыслугиЛет = ОснованияДосрочногоНазначенияПенсии.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ЗаписиОСтаже.Сотрудник = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыИсчисляемогоСтраховогоСтажа КАК ПараметрыИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа = ПараметрыИсчисляемогоСтраховогоСтажа.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорГПХ,
	|	НомерСтрокиСотрудник,
	|	НомерСтрокиСтаж";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДоговорГПХ") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
			ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, Выборка, РасширеннаяПроверка, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа, ВыделятьСтажДоговорников)		
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, ВыборкаПоСтрокамДокумента, РасширеннаяПроверкаСтажа, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь) Экспорт	
	ПараметрыИсчисляемогоСтраховогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод);
	
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	ТекущаяОсновнаяЗапись = Новый Структура("Сотрудник, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
	СписокУсловияТрудаЗаписи = Новый СписокЗначений;
	СписокВыслугаЛетЗаписи = Новый СписокЗначений;
	
	ПредыдущийНомерОсновнойЗаписи = 0;
	ПредыдущийНомерДополнительнойЗаписи = 0;
	
	НомерСтроки = 0;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиСтаж) Тогда
					
		Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСтаж") Цикл
			
			НомерСтроки = НомерСтроки + 1;
									
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			// По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			// Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			// Проверка заполнения реквизитов "ДатаНачалаПериода" и "ДатаОкончанияПериода". 
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					ТекстОшибки = НСтр("ru = 'не указана дата начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
					ТекстОшибки = НСтр("ru = 'не указана дата окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");					
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты окончания периода необходимо указывать дату начала периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты начала периода необходимо указывать дату окончания периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				
			Иначе//Обе даты заполнены
				
				// Дата начала периода не должна быть ранее начала периода
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода < ОтчетныйПериод Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода должна быть не ранее начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
				КонецЕсли;	 
				
				// Дата окончания периода не должна быть позднее окончания периода
				Если ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода > ОкончаниеПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата окончания периода должна быть не позднее окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода > ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода не должна превышать дату окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
				КонецЕсли;
				
			КонецЕсли;	 
			
			Если РасширеннаяПроверкаСтажа Тогда
				
				Если ЭтоОсновнаяЗапись Тогда
					
					// Проверка на хронологический порядок записей
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
						Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
							ТекстОшибки = НСтр("ru = 'дата начала периода должна быть больше даты окончания предыдущего периода'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
						КонецЕсли;	 
					КонецЕсли;
					
					// Переустановка текущей основной записи
					ТекущаяОсновнаяЗапись.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
					ТекущаяОсновнаяЗапись.ДатаНачалаПериода = ВыборкаПоСтрокамДокумента.ДатаНачалаПериода;
					ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода;
					ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод;
					ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия;
					ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа;
					ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
					ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
					
					СписокТерриториальныеУсловияЗаписи.Очистить();
					СписокУсловияТрудаЗаписи.Очистить();
					СписокВыслугаЛетЗаписи.Очистить();
				КонецЕсли;	 
				
				// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
				
				// Проверка нумерации основных и дополнительных записей
				Если (ЭтоОсновнаяЗапись) Тогда
					Если Не ВыделятьСтажДоговорников Тогда  
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер основной записи. Ожидается номер: %1'"), ОжидаемыйНомерОсновнойЗаписи);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерОсновнойЗаписи");
						КонецЕсли;
					КонецЕсли;	
				Иначе
					ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
					Если (ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер дополнительной записи. Ожидается номер: %1'"), ОжидаемыйНомерДополнительнойЗаписи);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерДополнительнойЗаписи");
					КонецЕсли;
				КонецЕсли;
				
				//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
				
				// Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
				УказаныТерриториальныеУсловия = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия);
				
				// Признаки заполнения реквизитов группы "Особые условия труда"
				УказанКодПозицииСписка = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодПозицииСписка);
				УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда);
				ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
				
				// Признаки заполнения реквизитов группы "Исчисляемый стаж"
				УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа);
				УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа);
				ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
				
				// Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
				УказанПараметрИсчисляемогоСтажа1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа); 
				УказанПараметрИсчисляемогоСтажа2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа); 
				ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
				
				// Признаки заполнения реквизитов группы "ВыслугаЛет"
				УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет);
				ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
				
				//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента, ТекущаяОсновнаяЗапись, ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник, НомерСтроки, Отказ);
				КонецЕсли;	 
				
				// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
				
				Если УказаныТерриториальныеУсловия Тогда
					ПредставлениеЗначения = ""+ СОКРЛП(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловияКод);
					Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи территориальные условия %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТерриториальныеУсловия");
					Иначе	
						СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаныОсобыеУсловияТруда Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи условия труда %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОсобыеУсловияТруда");
					Иначе	
						СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаноОснованиеВыслугиЛет Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанный в дополнительной записи код выслуги лет %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОснованиеВыслугиЛет");
					Иначе	
						СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	
				
				//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
				
				КПС = СокрЛП(ВыборкаПоСтрокамДокумента.КодПозицииСпискаКод);
				
				НазваниеСписка ="";
				Если УказанКодПозицииСписка Тогда 
					
					Если НЕ УказаныОсобыеУсловияТруда Тогда
						ТекстОшибки = НСтр("ru = 'код позиции списка не может указываться без указания кода особых условий труда.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
					
					ДлинаКПС = СтрДлина(КПС);
					
					Если (ДлинаКПС=8)ИЛИ(ДлинаКПС=14) Тогда
						
						Первые2СимволаКПС = Лев(КПС,2);
						Если (Первые2СимволаКПС = "10")ИЛИ(Первые2СимволаКПС = "11")ИЛИ(Первые2СимволаКПС = "12") Тогда
							НазваниеСписка = "Список№1";
						ИначеЕсли (Первые2СимволаКПС >= "20")И(Первые2СимволаКПС <= "23") Тогда
							НазваниеСписка = "Список№2";
						Иначе	
							ТекстОшибки = НСтр("ru = 'неверный код позиции списка вредных профессий.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	
						
					ИначеЕсли (ДлинаКПС=5) Тогда
						НазваниеСписка = "ПрочиеСписки";
					Иначе	
						ТекстОшибки = НСтр("ru = 'длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
				КонецЕсли;
				
				Если УказаныОсобыеУсловияТруда Тогда
					
					// Проверки на возможные коды списков для конкретных условий труда
					
					КодОсобыхУсловийТруда = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
					
					Если ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_1 Тогда
						Если (НазваниеСписка <> "Список№1") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_2 Тогда
						
						Если (НЕ УказанКодПозицииСписка) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1 или Списка №2.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
						Если (НазваниеСписка = "Список№1") Тогда
							Если (Первые8СимволовКПС <> "1010300Б")И(Первые8СимволовКПС <> "1010100Г")И(Первые8СимволовКПС <> "1010100Д")  Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1  указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
							КонецЕсли;	
						ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					Иначе
						// Для остальных кодов условий труда КПС указываться не должен
						Если УказанКодПозицииСписка Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 код позиции списка указываться не должен.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
				
				УказанПараметр1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрВыслугиЛет);
				УказанПараметр2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрВыслугиЛет);
				УказанПараметр3 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет);
				ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
				
				Если УказаноОснованиеВыслугиЛет Тогда
					
					КодОснования = СокрЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					
					УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
					
					// Медицинские работники
					Если (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГД)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМХР)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГДХР) Тогда
						
						Если ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2)'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						Иначе
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 должен указываться только третий параметр'"), КодОснования);  
							Если УказанПараметр1 Тогда    
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
							КонецЕсли;	
							Если УказанПараметр2 Тогда
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
							КонецЕсли;	
						КонецЕсли;	
						
						// Педагогические работники	
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПД Тогда
						
						Если УказанПараметр2 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка,  ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						ИначеЕсли ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2).'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПДРК Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
						ИначеЕсли УказанПараметр3 
							И ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет <> 1 Тогда
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр может содержать только ставку равную 0 или 1.'"), КодОснования);
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						//Летчики
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ)Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 1 и 2 должны содержать отработанное время (часы и минуты).'"), КодОснования);  
						Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда   
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;		
						//Парашютисты	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР) Тогда	
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 2 и 3 указываться не должны.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						// Управление воздушным движением и  инженерно-технический состав 	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15) Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						// Прочие коды выслуги лет	
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры выслуги лет 1,2,3 указываться не должны.'"), КодОснования); 
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				Иначе
					Если ПараметрыУказаны Тогда
						ТекстОшибки = НСтр("ru = 'параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны.'");     
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				КонецЕсли;	 
				
				
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр).
				Если УказанТретийПараметрИсчисляемогоСтажа Тогда
					
					ЭтоПараметрСПравомНаДосрочнуюПенсию = ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа) <> Неопределено;
					Если Не ЭтоПараметрСПравомНаДосрочнуюПенсию И (УказаноОснованиеИсчисляемогоСтажа Или ЗаданаГруппаФОВ Или УказаноОснованиеВыслугиЛет Или ЗаданаГруппаУсловияТруда) Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группы реквизитов должны быть пустыми: Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					Если ЭтоПараметрСПравомНаДосрочнуюПенсию И ЗаданаГруппаФОВ Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группа реквизитов фактически отработанного времени указываться не должна.'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);

						
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
					Если (ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ Или ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД)
						И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаноОснованиеВыслугиЛет И Не ЗаданаГруппаУсловияТруда И Не УказаныТерриториальныеУсловия Тогда
				
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" обязательно заполнение хотя бы одной из групп реквизитов ""Условия труда"", ""Исчисление стажа: код"", ""Досрочное назначение пенсии"".'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
				КонецЕсли;	
						 				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
				
				Если ЗаданаГруппаФОВ Тогда
					Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
						И (НЕ УказаныТерриториальныеУсловия)  Тогда
						
						ТекстОшибки = НСтр("ru = 'параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов (Территориальные условия, Условия труда, Исчисляемый стаж: основание).'");
						
						Если УказанПараметрИсчисляемогоСтажа1 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;
						Если УказанПараметрИсчисляемогоСтажа2 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;
					КонецЕсли;	
					
					Если ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						
						Если ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
							ТекстОшибки = НСтр("ru = 'первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");							
						КонецЕсли;	 	
						Если ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
							ТекстОшибки = НСтр("ru = 'второй параметр исчисляемого стажа (Дни) не должен быть больше 30.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;	 	
						
						Лет = 0;
						Месяцев = 0;
						Дней = 0;
						ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
						ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
						КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
						ФОВДляСравнения = ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа *30 + ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа; 
						
						Если (ФОВДляСравнения > КалендарноеВремя) Тогда
							ТекстОшибки = НСтр("ru = 'указанное фактически отработанное время превышает календарное время.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;	
					КонецЕсли;	 
					
				КонецЕсли;
				
			КонецЕсли;
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			// Запомним для следующей итерации
			ПредыдущийНомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям стажа сотрудника	
	КонецЕсли;						
КонецПроцедуры	

// Выполняет проверку дополнительной записи стажа на допустимость значений реквизитов
Процедура ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, Запись, ОсновнаяЗапись, НомерСтрокиСотрудник, НомерСтроки, Отказ) Экспорт
	СотрудникНаименование = Запись.СотрудникНаименование; 	
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		
		ТекстОшибки = НСтр("ru = 'дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи: Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа.'");  
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		ТекстОшибки =("ru = 'в дополнительной записи о стаже не может указываться основание исчисляемого стажа.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеИсчисляемогоСтажа");
	КонецЕсли;	
	
	// Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		ТекстОшибки =НСтр("ru = 'в дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	// Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия Тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ТерриториальныеУсловия");
		КонецЕсли;	 
	КонецЕсли;	
	
	// Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоСтраховогоСтажа.УИК104) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда 27-7 может быть указан только в случае указания в основной записи кода исчисляемого стажа УИК104.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;	 
	КонецЕсли;
	
	// Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если СтрНайти(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			ТекстОшибки = НСтр("ru = 'если в основной записи не указан код выслуги лет, то в дополнительной записи основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить("НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов Из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если СтрНайти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %3 в дополнительной записи код выслуги указываться не может.'");  
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетЗаписи);
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 		Иначе
			// Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ СтрНайти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %1 в дополнительной записи могут быть указаны только следующие коды выслуги: %2.'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетОсновнойЗаписи, Сред(ПроверочнаяСтрокаКодов,2));     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры	 

Процедура ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаЗаписейСтажа, Отказ, РасширеннаяПроверка = Истина, Поле = "") Экспорт
	Если РасширеннаяПроверка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже, № основной записи %2 %3: %4'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ВыборкаЗаписейСтажа.НомерОсновнойЗаписи, ?(ЗначениеЗаполнено(ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ дополнительной записи %1'"), ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), ""), ТекстОшибки);
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже: %2'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ТекстОшибки);
	КонецЕсли;	
	
	Если РасширеннаяПроверка Тогда
		НомерОсновнойЗаписи = ВыборкаЗаписейСтажа.НомерОсновнойЗаписи;
		НомерДополнительнойЗаписи = ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи;
	Иначе	
		НомерОсновнойЗаписи = 0;
		НомерДополнительнойЗаписи = 0;
	КонецЕсли;	
		
	ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОСтаже(Ошибки, 
			Ссылка, 
			ВыборкаЗаписейСтажа.НомерСтрокиСотрудник,
			ВыборкаЗаписейСтажа.НомерСтрокиСтаж, 
			ТекстСообщения, 
			Поле, 
			Отказ);
	
КонецПроцедуры

Функция ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, ИмяДокумента) Экспорт 
	
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечатиОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	ВыборкаПоПоДаннымДосрочногоНазначенияПенсии = ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();

	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Макет = ?(ВыборкаПоШапкеДокумента.Формат2019, 
			УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаОДВ_1_2019"),
			УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаОДВ_1"));
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОДВ_1";
		ДокументРезультат.ПолеСлева = 0;
		ДокументРезультат.ПолеСправа = 0;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаПозиции = Макет.ПолучитьОбласть("СтрокаПозиции");
		ОбластьУплатаВзносовСтрока = Макет.ПолучитьОбласть("УплатаВзносовСтрока");
		ОбластьШапкаРаздела5 = Макет.ПолучитьОбласть("ШапкаРаздела5");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;	
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
		
		ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
		ВывестиДанныеПоБуквенно(Формат(Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод),"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		ОбластьШапка.Параметры.КодОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		Если ИмяДокумента = "ОписьОДВ_1" Тогда 
			Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда 
				ОбластьШапка.Параметры.Корректирующая = Истина;
			Иначе 
				ОбластьШапка.Параметры.Отменяющая = Истина;
			КонецЕсли;
		Иначе 
			ОбластьШапка.Параметры.Исходная = Истина;
		КонецЕсли;
		
		Если ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_Стаж = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_ИСХ = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_КОРР = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		КонецЕсли;
		
		ЕстьДанныеНачисленныхУплаченныхВзносов = ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" ; 
		
		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
		КонецЕсли;
		ТекущийЛист.Вывести(ОбластьШапка);
		
		ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		
		ТекущийЛист.Вывести(ОбластьШапкаРаздела5);
		Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Количество() > 0 Тогда 

			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.НайтиСледующий(СтруктураПоиска) Тогда
				КоличествоРабочихМест = 0;
				КоличествоРаботающих = 0;
				ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПозиции.Параметры, ВыборкаПоПоДаннымДосрочногоНазначенияПенсии);
					ВывестиОбластьОДВ_1(ОбластьСтрокаПозиции, ДокументРезультат, ТекущийЛист);
					КоличествоРабочихМест = КоличествоРабочихМест + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРабочихМест;
					КоличествоРаботающих = КоличествоРаботающих + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРаботающих;
				КонецЦикла;
				ОбластьПодвал.Параметры.КоличествоРабочихМест = КоличествоРабочихМест;
				ОбластьПодвал.Параметры.КоличествоРаботающих = КоличествоРаботающих;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьСтрокаПозиции);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбластьОДВ_1(ОбластьПодвал, ДокументРезультат, ТекущийЛист);
		
		ДокументРезультат.Вывести(ТекущийЛист);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОбластьОДВ_1(ВыводимаяОбласть, ДокументРезультат, ТекущийЛист)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция ЗапросПоШапкеДляПечатиОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ" + "." + ИмяДокумента;
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Если ИмяДокумента = "ОписьОДВ_1" Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Количество,
		|	ЗНАЧЕНИЕ(Документ.ОписьОДВ_1.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТИтоги";
		Запрос.Выполнить();
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки) КАК Количество,
		|	Сотрудники.Ссылка
		|ПОМЕСТИТЬ ВТИтоги
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ГОД(ДанныеДокумента.ОтчетныйПериод) КАК Год,
	|	ДанныеДокумента.ОтчетныйПериод,
	|	ДанныеДокумента.ОкончаниеОтчетногоПериода,
	|	ДанныеДокумента.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеДокумента.ТипСведений КАК ТипСведений,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	Итоги.Количество КАК КоличествоЗастрахованныхЛиц,
	|	ДанныеДокумента.НачисленыВзносыНаОПС КАК НачисленыВзносыНаОПС,
	|	ДанныеДокумента.НачисленыВзносыПоДТ КАК НачисленыВзносыПоДТ,
	|	ДанныеДокумента.Формат2019 КАК Формат2019,
	|	ДанныеДокумента.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ДанныеДокумента.Организация = СведенияОбОрганизациях.Организация
	|			И ДанныеДокумента.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК ИТОГИ
	|		ПО ДанныеДокумента.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	
	Если ИмяДокумента <> "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыНаОПС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыПоДТ", "ЛОЖЬ");
	КонецЕсли;
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.КорректируемыйПериод", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ТипСведений", "NULL");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.ИНН", "ДанныеДокумента.ИНН");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.КПП", "ДанныеДокумента.КПП");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.РегистрационныйНомерПФР", "ДанныеДокумента.РегистрационныйНомерПФР");
	КонецЕсли;
	
	Если ИмяДокумента = "ОписьОДВ_1"  ИЛИ ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.Формат2019", "ЛОЖЬ");
	КонецЕсли;
	
	Если ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ВсегоРаботающихДНП", "0");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ВсегоРабочихМестДНП", "0");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	УчетСтраховыхВзносов.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода,
	|	ДанныеДокументов.КорректируемыйПериод,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ДанныеДокументов.Руководитель КАК Руководитель,
	|	ЕСТЬNULL(ВТФИОПоследние.Фамилия, """") КАК ФамилияРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Имя, """") КАК ИмяРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.КоличествоЗастрахованныхЛиц,
	|	ДанныеДокументов.НачисленыВзносыНаОПС,
	|	ДанныеДокументов.НачисленыВзносыПоДТ,
	|	ДанныеДокументов.Формат2019 КАК Формат2019,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	               |	ДосрочноеНазначениеПенсии.НомерСтроки КАК НомерСтроки,
	               |	ДосрочноеНазначениеПенсии.Подразделение,
	               |	ДосрочноеНазначениеПенсии.Подразделение.Наименование КАК НаименованиеПодразделения,
	               |	ДосрочноеНазначениеПенсии.Должность,
	               |	ДосрочноеНазначениеПенсии.Должность.Наименование КАК НаименованиеДолжности,
	               |	ДосрочноеНазначениеПенсии.КоличествоРабочихМест,
	               |	ДосрочноеНазначениеПенсии.КоличествоРаботающих,
	               |	ДосрочноеНазначениеПенсии.ХарактерВыполняемыхРабот,
	               |	ДосрочноеНазначениеПенсии.ПервичныеДокументы,
	               |	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет,
	               |	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка.Код КАК КодПозицииСпискаКод
	               |ИЗ
	               |	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка В(&МассивСсылок)

	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();			   
	
КонецФункции

Функция ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеОКорректировкеСведений.Ссылка
	               |ПОМЕСТИТЬ ВТСписокДокументов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	               |ГДЕ
	               |	ДанныеОКорректировкеСведений.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка,
	               |	ДанныеНачисленныхУплаченныхВзносов.ВидСтраховыхВзносов,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаНачалоПериода,
	               |	ДанныеНачисленныхУплаченныхВзносов.Начислено,
	               |	ДанныеНачисленныхУплаченныхВзносов.Уплачено,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаКонецПериода
	               |ПОМЕСТИТЬ ВТДанныеОВзносах
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.НачисленныеУплаченныеВзносы КАК ДанныеНачисленныхУплаченныхВзносов
	               |ГДЕ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокДокументов.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА Страховая.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоСтраховая,
	               |	ЕСТЬNULL(Страховая.Начислено, 0) КАК НачисленоСтраховая,
	               |	ЕСТЬNULL(Страховая.Уплачено, 0) КАК УплаченоСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецСтраховая,
	               |	ВЫБОР
	               |		КОГДА Накопительная.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Начислено, 0) КАК НачисленоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Уплачено, 0) КАК УплаченоНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецНакопительная,
	               |	ВЫБОР
	               |		КОГДА ТарифСВ.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Начислено, 0) КАК НачисленоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Уплачено, 0) КАК УплаченоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецТарифСВ
	               |ИЗ
	               |	ВТСписокДокументов КАК СписокДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Страховая
	               |		ПО СписокДокументов.Ссылка = Страховая.Ссылка
	               |			И (Страховая.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаСтраховуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Накопительная
	               |		ПО СписокДокументов.Ссылка = Накопительная.Ссылка
	               |			И (Накопительная.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаНакопительнуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК ТарифСВ
	               |		ПО СписокДокументов.Ссылка = ТарифСВ.Ссылка
	               |			И (ТарифСВ.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.ПоТарифуСтраховыхВзносов))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

Функция ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УплаченныеВзносыРасшифровка.Ссылка КАК Ссылка,
	               |	УплаченныеВзносыРасшифровка.Год КАК Год,
	               |	УплаченныеВзносыРасшифровка.НаСтраховуюПенсию,
	               |	УплаченныеВзносыРасшифровка.НаНакопительнуюПенсию,
	               |	УплаченныеВзносыРасшифровка.ПоТарифуСтраховыхВзносов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.УплаченныеВзносыРасшифровка КАК УплаченныеВзносыРасшифровка
	               |ГДЕ
	               |	УплаченныеВзносыРасшифровка.Ссылка В(&МассивСсылок)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	Год";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВТПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
//
Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	
	Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ИспользоватьКонецПериода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Дата")
		И ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Дата") Тогда
		
		Если ОписаниеОкончанияИнтервала < ОписаниеНачалаИнтервала Тогда
			
			ТекстИсключения = НСтр("ru='Дата окончания периода не может быть меньше даты начала'");
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ЛетВИнтервале = Год(ОписаниеОкончанияИнтервала) - Год(ОписаниеНачалаИнтервала);
			Если ЛетВИнтервале > 100 Тогда
				
				ТекстИсключения = НСтр("ru='Попытка получить данные за слишком большой интервал времени'")
					+ " (%1 " + НСтр("ru='лет'") + ": " + НСтр("ru='с'")+ " %2 " + НСтр("ru='по'") + " %3)";
				
				ТекстИсключения = СтрШаблон(ТекстИсключения, Формат(ЛетВИнтервале, "ЧГ="), Формат(ОписаниеНачалаИнтервала, "ДЛФ=D"), Формат(ОписаниеОкончанияИнтервала, "ДЛФ=D"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) КАК ИмяПоляПериод
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	ВТЦифры КАК Цифры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала",
		"ВЫБОР КОГДА " + НачалоИнтервалаПредставление + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(1980, 1, 1) ИНАЧЕ " + НачалоИнтервалаПредставление + " КОНЕЦ");
	
	ИмяОкончаниеИнтервала = "ОкончаниеИнтервала" + СтрЗаменить(ИмяВТ, "_", "");
	Запрос.УстановитьПараметр(ИмяОкончаниеИнтервала, ДобавитьМесяц(ТекущаяДатаСеанса(), 60));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала",
		"ВЫБОР КОГДА " + ОкончаниеИнтервалаПредставление+ " = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), " + ВРег(Периодичность) + ") ТОГДА &" + ИмяОкончаниеИнтервала + " ИНАЧЕ " + ОкончаниеИнтервалаПредставление+ " КОНЕЦ");
	
	ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Осуществляет замену имени временной таблицы. Если не указано новое имя 
// временной таблицы, производится удаление из текста запроса строки, осуществляющей
// создание временной таблицы. Если новое имя временной таблицы передано, то производится
// замена всех фрагментов текста, содержащих старое имя временной таблицы на новое имя.
//
// Параметры:
//	ТекстЗапроса
//	ТекущееИмяТаблицы
//	НовоеИмяТаблицы
//
Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОбОрганизации(Организация, Период) Экспорт
	ТаблицаОрганизации = Новый ТаблицаЗначений;
	ТаблицаОрганизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизации.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаОрганизации.Добавить();
	СтрокаТаблицы.Организация = Организация;
	СтрокаТаблицы.Период = Период;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОрганизации", ТаблицаОрганизации);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация,
	|	ТаблицаОрганизации.Период
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	&ТаблицаОрганизации КАК ТаблицаОрганизации";
	
	Запрос.Выполнить();
	
	СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбОрганизациях.Организация,
	|	СведенияОбОрганизациях.Период,
	|	СведенияОбОрганизациях.ИНН,
	|	СведенияОбОрганизациях.КодОрганаПФР,
	|	СведенияОбОрганизациях.КодОрганаФСГС,
	|	СведенияОбОрганизациях.КодОрганаФСС,
	|	СведенияОбОрганизациях.КодПоОКПО,
	|	СведенияОбОрганизациях.НаименованиеПолное,
	|	СведенияОбОрганизациях.Наименование,
	|	СведенияОбОрганизациях.ОГРН,
	|	СведенияОбОрганизациях.КодОКОПФ,
	|	СведенияОбОрганизациях.КодОКФС,
	|	СведенияОбОрганизациях.РегистрацияВНалоговомОргане,
	|	СведенияОбОрганизациях.КПП,
	|	СведенияОбОрганизациях.ОКАТО,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо,
	|	СведенияОбОрганизациях.ГоловнаяОрганизация
	|ИЗ
	|	ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

Функция ДоляСтавкиУказанаНеверно(ДоляСтавки) Экспорт

	Возврат	ДоляСтавки < 0.1 Или ДоляСтавки > 2

КонецФункции

// Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 
	
	Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
		
		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);
		
		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) Тогда
			Дней1		=	День(ДатаОкончанияПериода);
		Иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) Тогда
			Дней2		=	День(ДатаНачалаПериода);
		Иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры 

// Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт	
	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 


Функция ВариантыИсточниковДанныхСтажа() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов", "ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции

Функция ВариантыИсточниковДанныхНачисленныхВзносов() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеДокументов", "ДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции

Функция ВариантыИсточниковДанныхУплаченныхВзносов() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеДокументов", "ДанныеДокументов");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции

Функция ВариантыИсточниковДанныхСведенийОЗаработке() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументовОтменяемые", "ДанныеКорректируемыхДокументовОтменяемые");
	Варианты.Вставить("ДанныеУчетаОтменяемые", "ДанныеУчетаОтменяемые");

	Возврат Варианты;
	
КонецФункции

Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента) Экспорт
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции

Функция ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы() Экспорт
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы";
	
	Возврат ОписаниеЭлемента;
КонецФункции

Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента)Экспорт
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции	

Функция ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки() Экспорт
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки";
	
	Возврат ОписаниеЭлемента;		
КонецФункции	

// Добавляет к тексту запроса, переданному в параметре ТекстЗапроса, текст запроса
// уничтожения временной таблицы
//
// Параметры:
//		ТекстЗапроса - Строка
//		ИмяВременнойТаблицы - Строка
//
Процедура ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + 
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|") + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры

Функция СообщенияОбОшибкахИзДанныхФормы(Форма, КлючДанных = Неопределено) Экспорт
	Возврат ОшибкиИзДанныхФормы(Форма, КлючДанных, Истина);		
КонецФункции

Процедура ДобавитьОписаниеСвязиДанныхСтрокТаблиц(ОписаниеСвязиДанных, ПутьКТаблицеВедущихДанных, ИмяРеквизитаТаблицыВедущихДанных, ПутьКТаблицеСвязанныхДанных, ИмяРеквизитаТаблицыСвязанныхДанных, КлючСвязи = Неопределено) Экспорт
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКТаблицеВедущихДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыВедущихДанных = ИмяРеквизитаТаблицыВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКТаблицеСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыСвязанныхДанных = ИмяРеквизитаТаблицыСвязанныхДанных;	
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКТаблицеВедущихДанных + ?(ИмяРеквизитаТаблицыВедущихДанных = "", "", "." + ИмяРеквизитаТаблицыВедущихДанных);
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКТаблицеСвязанныхДанных + ?(ИмяРеквизитаТаблицыСвязанныхДанных = "", "", "." + ИмяРеквизитаТаблицыСвязанныхДанных);	
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьДанныхСтрокТаблиц";

	Если КлючСвязи = Неопределено Тогда
		КлючСвязи = КлючСвязиДанныхСтрокТаблиц();
		ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи);
	КонецЕсли;	
	
	ЭлементОписанияСвязиДанных.КлючСвязи = КлючСвязи;
		
КонецПроцедуры

Процедура ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, ПутьКРеквизитуВедущихДанных, ПутьКРеквизитуСвязанныхДанных)Экспорт
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьРеквизитовОбъектов";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьРеквизитовОбъектов";
	
КонецПроцедуры

Функция ОписаниеСвязиДанных() Экспорт
	ОписаниеСвязиДанных = Новый ТаблицаЗначений;	
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКОсновнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКПодчиненнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанныхОбратный");
	
	ОписаниеСвязиДанных.Колонки.Добавить("КлючСвязи");
		
	Возврат ОписаниеСвязиДанных;
КонецФункции

Процедура ПреобразоватьПутиКДаннымВСообщенияхПользователю(ДанныеОбъекта, ПодчиненныеДанные, СообщенияПользователю, ОписаниеСвязиДанных, ПутьКДаннымОбъектаВФорме = "") Экспорт
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ПутьКДаннымОбъекта = Сообщение.Поле;		
		
		Если ТипЗнч(ДанныеОбъекта) <> Тип("ФормаКлиентскогоПриложения") Тогда
			Если ВРег(Сред(ПутьКДаннымОбъекта, 1, 7)) = "ОБЪЕКТ." Тогда
				ПутьКДаннымОбъекта = Сред(ПутьКДаннымОбъекта, 8);
			Иначе
				ПутьКДаннымОбъекта = Сообщение.Поле;
			КонецЕсли;
		КонецЕсли;	
	
		ПутьКДаннымФормы = ПутьКДаннымПодчиненногоОбъекта(ДанныеОбъекта, ПодчиненныеДанные, ПутьКДаннымОбъекта, ОписаниеСвязиДанных);
		Если ПутьКДаннымФормы <> Неопределено Тогда
			Сообщение.Поле = ПутьКДаннымФормы;
			Сообщение.ПутьКДанным = "";
		Иначе			
			Если ПустаяСтрока(ПутьКДаннымОбъектаВФорме) Тогда
				Сообщение.Поле = ПутьКДаннымОбъекта;
			ИначеЕсли Не ПустаяСтрока(Сообщение.Поле) Тогда
				Сообщение.Поле = ПутьКДаннымОбъектаВФорме + "." + ПутьКДаннымОбъекта;
			КонецЕсли;				
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

Процедура ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, СообщенияПользователю, КлючДанных = Неопределено) Экспорт
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма);
	
	Для Каждого Ошибка Из СообщенияПользователю Цикл
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДаннымТаблицы;
		Иначе
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДанным;
		КонецЕсли;	
		
		Если ПутиКДаннымФормы.Найти(ПутьКДанным) = Неопределено Тогда
			ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
			СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
			СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
			СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			СтрокаХранилищаОшибок.НеПривязана = Истина;
		Иначе	
			ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
			
			Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымРеквизита" Тогда
				ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = Ошибка.Поле;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			Иначе	
				Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
				ХранилищеОшибок = Таблица[ОписаниеПутиКДанным.ИндексСтроки].ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(Форма, Ошибки, ОписаниеПодчиненностиДанных = Неопределено, УстанавливатьФлагНаличияНепривязанныхОшибок = Истина) Экспорт
	СчетчикиОшибокВПодчиненныхЭлементах = Новый Соответствие;
	
	ПутиКДанным = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		ПутиКДанным.Добавить(Ошибка.Поле);					
	КонецЦикла;	
		
	УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, Истина, ОписаниеПодчиненностиДанных, Ложь);
	
КонецПроцедуры

Функция ОписаниеЭлементаСИндикациейОшибок()
	ОписаниеЭлемента = Новый Структура;
	
	ОписаниеЭлемента.Вставить("Тип");
	ОписаниеЭлемента.Вставить("ИмяЭлемента", "");
	ОписаниеЭлемента.Вставить("ИмяЭлементаТаблица", "");
	ОписаниеЭлемента.Вставить("ОтображатьГиперссылку", Ложь);
	ОписаниеЭлемента.Вставить("ПутьКДаннымФормыСодержащимОшибку", "");
	ОписаниеЭлемента.Вставить("ИмяРеквизитаТаблицы", "");
	ОписаниеЭлемента.Вставить("ОтображатьНепривязанныеОшибки", Ложь);
	ОписаниеЭлемента.Вставить("ОформлениеДляДанныхСОшибкой", "");
	ОписаниеЭлемента.Вставить("ОформлениеДляНеЗаполненныхДанныхДанных", "");

	Возврат ОписаниеЭлемента;		
КонецФункции

Функция КлючСвязиДанныхСтрокТаблиц() Экспорт
	Возврат Новый Массив;	
КонецФункции	

Процедура ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	ЭлементКлюча.Тип = "СвязьПоИндексуСтрокТаблиц";
	
	КлючСвязи.Добавить(ЭлементКлюча);
КонецПроцедуры	

Функция ПутиКДаннымФормы(Форма, ЗаполнятьПутиКРеквизитамШапки = Истина)
	ПутиКДаннымФормы = Новый Массив;	
	
	ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, , , ЗаполнятьПутиКРеквизитамШапки);
	
	Возврат ПутиКДаннымФормы;
	
КонецФункции	

Процедура ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеТекущегоРеквизитаФормы = Неопределено, УровеньВложенности = 1, ЗаполнятьПутиКРеквизитамШапки = Истина)
	Если УровеньВложенности > 2 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОписаниеТекущегоРеквизитаФормы = Неопределено Тогда
		ПутьКТекущемуРеквизитуФормы = "";
		ОписаниеТипаТекущегоРеквизита = Неопределено;
	Иначе
		ПутьКТекущемуРеквизитуФормы = ОписаниеТекущегоРеквизитаФормы.Путь 
										+ ?(ОписаниеТекущегоРеквизитаФормы.Путь = "", ОписаниеТекущегоРеквизитаФормы.Имя, "." + ОписаниеТекущегоРеквизитаФормы.Имя);
										
		ОписаниеТипаТекущегоРеквизита = ОписаниеТекущегоРеквизитаФормы.ТипЗначения;									
	КонецЕсли;	
	
	Если ОписаниеТипаТекущегоРеквизита = Неопределено Тогда
		РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	Иначе
		РеквизитыФормы = Форма.ПолучитьРеквизиты(ПутьКТекущемуРеквизитуФормы);
	КонецЕсли;			
	
	Для Каждого ОписаниеРеквизита Из РеквизитыФормы Цикл
		Если ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("КоллекцияДвижений")) Тогда
			Продолжить;
		КонецЕсли;	
		
		ПутьКРеквизиту = ОписаниеРеквизита.Путь + ?(ОписаниеРеквизита.Путь = "", ОписаниеРеквизита.Имя, "." + ОписаниеРеквизита.Имя);

		РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту);
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Если ЗаполнятьПутиКРеквизитамШапки Тогда 
				ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);
			КонецЕсли;	
			
			ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеРеквизита, УровеньВложенности + 1, ЗаполнятьПутиКРеквизитамШапки);
		ИначеЕсли ЗаполнятьПутиКРеквизитамШапки Тогда 
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, ЗначениеФлага, ОписаниеПодчиненностиДанных = Неопределено, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь)
	ПутиКУзламДанныхСОшибками = Новый Массив;
	
	ОтработанныеПутиКУзламДаннымСОшибками = Новый Соответствие;
	
	Для Каждого ПутьКДанным Из ПутиКДанным Цикл 
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" И
			Не ПустаяСтрока(ОписаниеПутиКДанным.ИмяРеквизитаСтроки) Тогда
			
			ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "";
			
			Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымРеквизита" Тогда
				ПутьКДанным =  ОписаниеПутиКДанным.ПутьКДанным;
			Иначе
				ПутьКДанным =  ОписаниеПутиКДанным.ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ОписаниеПутиКДанным.ИндексСтроки) + "]" + ?(ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
			КонецЕсли;	
		КонецЕсли;
		
		Если ОтработанныеПутиКУзламДаннымСОшибками.Получить(ПутиКДанным) = Неопределено Тогда
			ПутиКУзламДанныхСОшибками.Добавить(ПутьКДанным);
			ОтработанныеПутиКУзламДаннымСОшибками.Вставить(ПутьКДанным, Истина);
		КонецЕсли;	
	КонецЦикла;	
		
	ДеревоПодчиненностиДанных = ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Форма, ПутиКУзламДанныхСОшибками, ОписаниеПодчиненностиДанных);
	
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма, Истина);
	
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Для Каждого ТекущийУзел Из ДеревоПодчиненностиДанных.Строки Цикл
		УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, ОтработанныеПутиКУзламДаннымСОшибками, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах);
	КонецЦикла;	
	
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
	
	УстановитьКартинкиДляЗаголовковСтраницФормы(Форма)
КонецПроцедуры	

Функция ПутьКДаннымПодчиненногоОбъекта(ДанныеВедущегоОбъекта, ДанныеПодчиненногоОбъекта, ПутьКДаннымВедущегоОбъекта, ОписаниеСвязиДанных) Экспорт 
	ПутьКДаннымПодчиненногоОбъекта = Неопределено;
	
	Если ТипЗнч(ПутьКДаннымВедущегоОбъекта) = Тип("Структура") Тогда
		ОписаниеПутиКДаннымВедущегоОбъекта = ПутьКДаннымВедущегоОбъекта;
	Иначе
		ОписаниеПутиКДаннымВедущегоОбъекта = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымВедущегоОбъекта);
	КонецЕсли;
	
	ПравилаСвязиСДаннымиОбъекта = ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ОписаниеПутиКДаннымВедущегоОбъекта, ОписаниеСвязиДанных, Ложь);
	
	ОписаниеПутиКСвязаннымДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(
										ДанныеВедущегоОбъекта, 
										ДанныеПодчиненногоОбъекта,
										ОписаниеПутиКДаннымВедущегоОбъекта,
										ПравилаСвязиСДаннымиОбъекта);
										
	Если ОписаниеПутиКСвязаннымДанным.Количество() > 0 Тогда									
		ПутьКДаннымПодчиненногоОбъекта = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКСвязаннымДанным[0]);
	КонецЕсли;
	
	Возврат ПутьКДаннымПодчиненногоОбъекта;
КонецФункции


Функция ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ПутьКВедущимДанным, ОписаниеСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Если ТипЗнч(ПутьКВедущимДанным) = Тип("Строка") Тогда
		ОписаниеПутиКВедущимДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКВедущимДанным);
	Иначе
		ОписаниеПутиКВедущимДанным = ПутьКВедущимДанным;
	КонецЕсли;	
	
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным);
		
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКВедущимДанным, Ложь);
	
	Возврат ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск);
	
КонецФункции

Процедура ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина)
	ОписаниеПутиКПодчиненнымДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКПодчиненнымДанным);
	
	Если ОписаниеПутиКПодчиненнымДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда 
		ОписаниеПутиКПодчиненнымДанным.ИмяРеквизитаСтроки = "";
	КонецЕсли;	
	
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКПодчиненнымДанным, Истина);	
		
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКПодчиненнымДанным);
	
	ПравилаСвязиДанных = ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеПодчиненностиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, Истина);
	
	ОписаниеПутейКВедущимДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(Данные, Данные, ОписаниеПутиКПодчиненнымДанным, ПравилаСвязиДанных);	
	
	Для Каждого ОписаниеПутиКВедущимДанным Из ОписаниеПутейКВедущимДанным Цикл
		ПутьКВедущимДанным = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКВедущимДанным);
		
		Если ПутьКВедущимДанным <> ПутьКПодчиненнымДанным 	
			И ПутиКВедущимДанным.Найти(ПутьКВедущимДанным) = Неопределено Тогда
			
			ПутиКВедущимДанным.Добавить(ПутьКВедущимДанным);
			
			Если РекурсивныйПоиск Тогда
				ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина) Экспорт
	ПутиКВедущимДанным = Новый Массив;
	
	ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск);

	Возврат ПутиКВедущимДанным;
		
КонецФункции

Функция ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Для Каждого КлючПоиска Из КлючиПоискаПравилСвязи Цикл
		
		Если ОбратныйПоиск Тогда
			СтруктураПоиска = Новый Структура("ПолныйПутьКПодчиненнымДанным", КлючПоиска);
		Иначе
			СтруктураПоиска = Новый Структура("ПолныйПутьКОсновнымДанным", КлючПоиска);
		КонецЕсли;	

		СтрокиСоответствияПутей = ОписаниеСвязиДанных.НайтиСтроки(СтруктураПоиска); 
		
		Если ОбратныйПоиск Тогда 
			ИмяПоляТипСвязиДанных = "ТипСвязиДанныхОбратный";
		Иначе
			ИмяПоляТипСвязиДанных = "ТипСвязиДанных";	
		КонецЕсли;	
		
		Для Каждого ПравилоСвязиДанных Из СтрокиСоответствияПутей Цикл
			Если ОбратныйПоиск Тогда
				ПравилоСвязиДанных = ПравилоОбратнойСвязиДанных(ПравилоСвязиДанных);
			КонецЕсли;	
			
			Если ДопустимыеТипыСвязиДанных.Найти(ПравилоСвязиДанных.ТипСвязиДанных) <> Неопределено Тогда			
				ПравилаСвязи.Добавить(ПравилоСвязиДанных);	
			КонецЕсли;
		КонецЦикла;	
		
		Если ПравилаСвязи.Количество() > 0 Тогда 
			Прервать;
		КонецЕсли;		
	КонецЦикла;	

	Возврат ПравилаСвязи;	
КонецФункции	

Функция ОшибкиИзДанныхФормы(Форма, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = Новый Массив;
	
	ПутиКТаблицамФормы = ПутиКДаннымФормы(Форма, Ложь);
	
	ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, "*", КлючДанных, Ложь, ФормироватьСообщенияПользователю);
		
	Для Каждого ПутьКДаннымТаблицы Из ПутиКТаблицамФормы Цикл 
		ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТаблицы);
		
		Для Каждого СтрокаТаблицы Из ДанныеТаблицы Цикл
			ИндексСтроки = ДанныеТаблицы.Индекс(СтрокаТаблицы);
			
			ОшибкиИзСтрокиТаблицыФормыВМассив(
				Ошибки, 
				СтрокаТаблицы, 
				ПутьКДаннымТаблицы, 
				ИндексСтроки,
				"*",
				КлючДанных,
				ФормироватьСообщенияПользователю);	
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат Ошибки;
КонецФункции

#Область ОписаниеСвязанныхДанных

Функция ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПути) Экспорт
	Если ОписаниеПути.Тип = "ПутьКДаннымРеквизита" Тогда
		Возврат ОписаниеПути.ПутьКДанным;
	Иначе
		Возврат ОписаниеПути.ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ОписаниеПути.ИндексСтроки) + "]" + ?(ОписаниеПути.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПути.ИмяРеквизитаСтроки;
	КонецЕсли;	
КонецФункции

Функция ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиОбъекта)	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	Иначе
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;
КонецФункции	

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиСтрокиТаблицы)		
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	ТаблицаВедущихДанных = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ВедущиеДанные, ОписаниеПутиКВедущимДанным.ПутьКДаннымТаблицы);
			
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиСтрокиТаблицы Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ОписаниеПутиКВедущимДанным.ИндексСтроки, СвязанныеДанные, ПравилоСвязи);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);
	КонецЦикла;	
		
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ИндексСтроки, СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
	
	СтрокаТаблицыВедущихДанных = ТаблицаВедущихДанных[ИндексСтроки];
		
	Если Не СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицыВедущихДанных, ПравилоСвязи.КлючСвязи) Тогда
		Возврат ОписаниеПутейКСвязаннымДанным;
	КонецЕсли;	
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтроки, СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);		
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПутиКСвязываемымДанным = ОписаниеПутиКДаннымСтрокиТаблицы();
			
			ОписаниеПутиКСвязываемымДанным.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПутиКСвязываемымДанным.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПутиКСвязываемымДанным.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;
			
			ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
		КонецЦикла;		
		
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокиТаблицыСРеквизитом" Тогда	
		ОписаниеПутиКСвязываемымДанным = ОписаниеПутиКДаннымРеквизитаОбъекта();

		ОписаниеПутиКСвязываемымДанным.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных; 	
		
		ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

Функция ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтрокиТаблицыВедущихДанных, СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязанныхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	ИндексСтрокиТаблицыСвязываемыхДанных = Неопределено;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоИндексуСтрокТаблиц" Тогда
			ИндексСтрокиТаблицыСвязываемыхДанных = ИндексСтрокиТаблицыВедущихДанных;	
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоПоляСтрокТаблиц" Тогда
			
			ЗначениеПоиска = СтрокаТаблицыВедущихДанных[ЭлементКлючаСвязи.ЛевоеЗначение];
			
			СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЗначениеПоиска);
			
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если ИндексСтрокиТаблицыСвязываемыхДанных <> Неопределено Тогда
		Если СтруктураПоиска.Количество() > 0 Тогда
			СтрокаТаблицыСвязываемыхДанных = СвязываемаяТаблица[ИндексСтрокиТаблицыСвязываемыхДанных];
			
			Для Каждого КлючПоискаДанныхВСтроке Из СтруктураПоиска Цикл
				Если СтрокаТаблицыСвязываемыхДанных[КлючПоискаДанныхВСтроке.Ключ] <> КлючПоискаДанныхВСтроке.Значение Тогда
					Возврат ИндексыСвязанныхСтрок;				
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		ИндексыСвязанныхСтрок.Добавить(ИндексСтрокиТаблицыСвязываемыхДанных);	
	Иначе
		Если СтруктураПоиска.Количество() = 0 Тогда
			Для Каждого СтрокаТаблицыСвязываемыхДанных Из СвязываемаяТаблица Цикл
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицыСвязываемыхДанных));		
			КонецЦикла;				
		Иначе	
			НайденныеСтроки = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
		
			Для Каждого СвязаннаяСтрока Из НайденныеСтроки Цикл		
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СвязаннаяСтрока));
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИндексыСвязанныхСтрок;
КонецФункции

Функция СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицы, КлючСвязи)
	Если КлючСвязи = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляВедущейТаблицы"
			И СтрокаТаблицы[ЭлементКлючаСвязи.ЛевоеЗначение] <> ЭлементКлючаСвязи.ПравоеЗначение Тогда
			
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиРеквизитаОбъекта)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиРеквизитаОбъекта Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи);	
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);	
	КонецЦикла;	
			
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции

Функция ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутей = Новый Массив;
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитовОбъектов" Тогда
		ОписаниеПути = ОписаниеПутиКДаннымРеквизитаОбъекта();
		
		ОписаниеПути.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
		
		ОписаниеПутей.Добавить(ОписаниеПути);
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);	
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицы();	
			
			ОписаниеПути.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПути.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПути.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;	
			
			ОписаниеПутей.Добавить(ОписаниеПути);
		КонецЦикла;	
	КонецЕсли;		
	
	Возврат ОписаниеПутей;
КонецФункции	

Функция ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязываемыхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		СтрокиТаблицы = СвязываемаяТаблица;	
	Иначе	
		СтрокиТаблицы = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл	
		ИндексыСвязываемыхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицы));		
	КонецЦикла;	

	Возврат ИндексыСвязываемыхСтрок;
	
КонецФункции

Функция ПравилоОбратнойСвязиДанных(ПравилоПрямойСвязи)
	ПравилоОбратнойСвязиДанных = Новый Структура;
	
	ПравилоОбратнойСвязиДанных.Вставить("ТипСвязиДанных", ПравилоПрямойСвязи.ТипСвязиДанныхОбратный);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуВедущихДанных", ПравилоПрямойСвязи.ПутьКРеквизитуСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыВедущихДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуСвязанныхДанных", ПравилоПрямойСвязи.ПутьКРеквизитуВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыСвязанныхДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПолныйПутьКОсновнымДанным", ПравилоПрямойСвязи.ПолныйПутьКПодчиненнымДанным);
	ПравилоОбратнойСвязиДанных.Вставить("КлючСвязи", ПравилоПрямойСвязи.КлючСвязи);
	
	Возврат ПравилоОбратнойСвязиДанных;
КонецФункции	

Функция ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным)
	ДопустимыеТипыСвязиДанных = Новый Массив;
	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокиТаблицыСРеквизитом");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокТаблиц");	
	Иначе
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитовОбъектов");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитаСДаннымиСтрокиТаблицы");
	КонецЕсли;
	
	Возврат ДопустимыеТипыСвязиДанных;
КонецФункции	

Функция КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКДанным, СтрогоеСоответствие = Ложь)
	КлючиПоискаПравилСвязи = Новый Массив;
	
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ПутьКВедущимДаннымБезИндекса = ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ?(ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				
		КлючиПоискаПравилСвязи.Добавить(ПутьКВедущимДаннымБезИндекса);
		Если Не СтрогоеСоответствие Тогда
			КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ".*");
		КонецЕсли;	
	Иначе
		КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДанным);
		
		Если Не СтрогоеСоответствие Тогда
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПутиКДанным.ПутьКДанным, ".");

			Если ЭлементыПути.Количество() <= 1 Тогда
				КлючиПоискаПравилСвязи.Добавить("*");
			Иначе
				Путь = "";
				Для Сч = 0 По ЭлементыПути.Количество() - 2 Цикл
					Путь = Путь + "." + ЭлементыПути[Сч];
				КонецЦикла;
				КлючиПоискаПравилСвязи.Добавить(Сред(Путь, 2) + ".*");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат КлючиПоискаПравилСвязи;
КонецФункции

Функция ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой)
	Если НЕ (СтрНайти(ПутьКДаннымСтрокой, "[") = 0) Тогда
		ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицыПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой);
	Иначе
		ОписаниеПути = ОписаниеПутиКДаннымРеквизитаОбъекта();
		ОписаниеПути.ПутьКДанным = ПутьКДаннымСтрокой;
	КонецЕсли;	
	
	Возврат ОписаниеПути;
КонецФункции	

Функция ОписаниеПутиКДаннымСтрокиТаблицыПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой)
	ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицы();
	
	ОписаниеПути.ИндексСтроки = ИндексСтрокиТаблицыИзПутиКДанным(ПутьКДаннымСтрокой);
	
	НомерПоследнегоСимволаИмениТаблицы = СтрНайти(ПутьКДаннымСтрокой, "[" + ИндексСтрокой(ОписаниеПути.ИндексСтроки) + "]");
	ОписаниеПути.ПутьКДаннымТаблицы = Лев(ПутьКДаннымСтрокой, НомерПоследнегоСимволаИмениТаблицы - 1);
	
	НомерСимволаЗакрывающейСкобки = СтрНайти(ПутьКДаннымСтрокой, "]");
	
	ОписаниеПути.ИмяРеквизитаСтроки = Сред(ПутьКДаннымСтрокой, НомерСимволаЗакрывающейСкобки + 2);
	
	Возврат ОписаниеПути;
КонецФункции

Функция ОписаниеПутиКДаннымСтрокиТаблицы()
	ОписаниеПути = Новый Структура("Тип, ПутьКДаннымТаблицы, ИндексСтроки, ИмяРеквизитаСтроки");	
	ОписаниеПути.Тип = "ПутьКДаннымСтрокиТаблицы";
	ОписаниеПути.ПутьКДаннымТаблицы = "";
	ОписаниеПути.ИмяРеквизитаСтроки = "";
	
	Возврат ОписаниеПути;
КонецФункции

Функция ОписаниеПутиКДаннымРеквизитаОбъекта()
	ОписаниеПути = Новый Структура("Тип, ПутьКДанным");	
	ОписаниеПути.Тип = "ПутьКДаннымРеквизита";
	ОписаниеПути.ПутьКДанным = "";
	
	Возврат ОписаниеПути;
КонецФункции

Функция ЭлементКлючаСвязиСтрокТаблиц()
	ЭлементКлюча = Новый Структура;
	ЭлементКлюча.Вставить("ЛевоеЗначение");
	ЭлементКлюча.Вставить("ПравоеЗначение");
	ЭлементКлюча.Вставить("Тип");
	
	Возврат ЭлементКлюча;
КонецФункции	

Процедура ИндикацияОшибокДополнитьФорму(Форма, ОписаниеЭлементовСИндикациейОшибок, ОписаниеПодчиненностиДанных = Неопределено) Экспорт
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеСозданныхРеквизитов = Новый Соответствие;
	ОписаниеСвязиЭлементовИндикацииСРеквизитами = Новый Соответствие;
		
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		ОписаниеРеквизитаИндикации = ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента);
		
		ОписаниеСозданногоРеквизита = СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);
		
		Если ОписаниеЭлемента.ОтображатьНепривязанныеОшибки Тогда
			ОписаниеФлагаСИндикациейНепривязанныхОшибок = ОписаниеСозданногоРеквизита;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ОписаниеСозданногоРеквизита.Вставить("ОтображатьНепривязанныеОшибки", ОписаниеЭлемента.ОтображатьНепривязанныеОшибки);
			ОписаниеСвязиЭлементовИндикацииСРеквизитами.Вставить(ОписаниеЭлемента.ИмяЭлемента, ОписаниеСозданногоРеквизита);	
		КонецЕсли;	
	КонецЦикла;		
	
	Если ОписаниеПодчиненностиДанных <> Неопределено Тогда
		ОписаниеДобавляемыхРеквизитовИндикации = ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаИндикации Из ОписаниеДобавляемыхРеквизитовИндикации Цикл
			СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
		
		ОписаниеДобавляемыхРеквизитовСчетчиков = ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаСчетчика Из ОписаниеДобавляемыхРеквизитовСчетчиков Цикл
			СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, ОписаниеРеквизитаСчетчика, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
	КонецЕсли;	
	
	РеквизитОписаниеФлагов = Новый РеквизитФормы("ОписаниеРеквизитовПризнаковНаличияОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеЭлементовСИндикацией = Новый РеквизитФормы("ОписаниеЭлементовСИндикациейОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеИндикатораНепривязанныхОшибок = Новый РеквизитФормы("ОписаниеФлагаСИндикациейНепривязанныхОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитСчетчикФлаговНаСтраницах = Новый РеквизитФормы("СчетчикФлаговНаСтраницах", Новый ОписаниеТипов("Неопределено"));
	РеквизитЦветаЗаголовковСворачиваемыхГрупп = Новый РеквизитФормы("ЦветаЗаголовковСворачиваемыхГрупп", Новый ОписаниеТипов("Неопределено"));
	
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеФлагов);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеЭлементовСИндикацией);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеИндикатораНепривязанныхОшибок);
	ДобавляемыеРеквизиты.Добавить(РеквизитСчетчикФлаговНаСтраницах);
	ДобавляемыеРеквизиты.Добавить(РеквизитЦветаЗаголовковСворачиваемыхГрупп);
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ОписаниеРеквизитовПризнаковНаличияОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхРеквизитов);
		
	ОписаниеСозданныхЭлементов = Новый Соответствие;
	
	ЦветаЗаголовковСворачиваемыхГрупп = Новый Структура;
	
	СчетчикФлаговНаСтраницах = Новый Структура;
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеСвязиЭлементовИндикацииСРеквизитами);		
			
			Если ЭлементИндикации <> Неопределено Тогда
				СтраницыВладельцы =  Новый Массив;
				ЗаполнитьСтраницыВладельцыЭлемента(ЭлементИндикации, СтраницыВладельцы);

				ОписаниеЭлемента.Вставить("СтраницыВладельцы", СтраницыВладельцы);
				
				ОписаниеСозданныхЭлементов.Вставить(ЭлементИндикации.Имя, ОписаниеЭлемента);
				
				ОписаниеРеквизитовИндикации = ОписаниеСвязиЭлементовИндикацииСРеквизитами.Получить(ОписаниеЭлемента.ИмяЭлемента);
				
				Если ОписаниеРеквизитовИндикации <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеРеквизитовИндикации.СтраницыВладельцы, СтраницыВладельцы);
				КонецЕсли;	
				
				Для Каждого ИмяСтраницы Из СтраницыВладельцы Цикл
					СчетчикФлаговНаСтраницах.Вставить(ИмяСтраницы, 0);		
					Элемент = Форма.Элементы[ИмяСтраницы];
					
					Если Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
						ЦветаЗаголовковСворачиваемыхГрупп.Вставить(Элемент.Имя, Элемент.ЦветТекстаЗаголовка);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОписаниеФлагаСИндикациейНепривязанныхОшибок <> Неопределено Тогда
		Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок = Новый ФиксированнаяСтруктура(ОписаниеФлагаСИндикациейНепривязанныхОшибок);
	КонецЕсли;
	
	Форма.ОписаниеЭлементовСИндикациейОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхЭлементов);
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);	
	Форма.ЦветаЗаголовковСворачиваемыхГрупп = Новый ФиксированнаяСтруктура(ЦветаЗаголовковСворачиваемыхГрупп);	
КонецПроцедуры

Функция СоздатьПолеКартинкиДляИндикацииОшибок(ЭлементыФормы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным)
	ИмяЭлемента = ЭлементОтображенияДанныхСОшибкой.Имя + "ЕстьОшибки";
	
	ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Индекс(ЭлементОтображенияДанныхСОшибкой); 
	
	Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") 
		Или ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Количество() - 1 Тогда
		
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);	
	Иначе
		СледующийЭлемент = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы[ИндексЭлемента + 1];
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент);	
	КонецЕсли;	
	
	ЭлементИндикации.ПутьКДанным  = ПутьКДанным;
	ЭлементИндикации.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементИндикации.АктивизироватьПоУмолчанию = Ложь;
	ЭлементИндикации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИндикации.ПропускатьПриВводе = Истина;
	ЭлементИндикации.КартинкаЗначений  = БиблиотекаКартинок.Предупреждение;
	ЭлементИндикации.Видимость = ЭлементОтображенияДанныхСОшибкой.Видимость;
	ЭлементИндикации.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ЭлементИндикации.Высота = 1;
	ЭлементИндикации.Ширина = 2;
	ЭлементИндикации.РастягиватьПоВертикали = Ложь;
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
	ЭлементИндикации.Гиперссылка = Истина;
	
	Возврат ЭлементИндикации;
КонецФункции	

Процедура ЗаполнитьСтраницыВладельцыЭлемента(Элемент, Страницы)
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
		И ((Элемент.Вид = ВидГруппыФормы.Страница
			И Элемент.Родитель.ОтображениеСтраниц <> ОтображениеСтраницФормы.Нет)
		ИЛИ (Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
			И Элемент.Поведение  = ПоведениеОбычнойГруппы.Свертываемая))Тогда 
		
		Страницы.Добавить(Элемент.Имя);
	КонецЕсли;	
	
	ЗаполнитьСтраницыВладельцыЭлемента(Элемент.Родитель, Страницы)	
КонецПроцедуры	

Функция ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента)
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы"
		Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");
	Иначе
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");	
	КонецЕсли;	

	Возврат ОписаниеРеквизита;
КонецФункции

Функция СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаФлаг = "ЕстьОшибки"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаФлаг = "ЕстьОшибки";
		Иначе
			ИмяРеквизитаФлаг = ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаФлаг;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаФлаг = ИмяРеквизитаФлаг;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку; 
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитФлаг = Новый РеквизитФормы(ИмяРеквизитаФлаг, Новый ОписаниеТипов("Булево"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитФлаг);
	КонецЕсли;	
		
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции

Функция ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы()
	Описание = Новый Структура;
	Описание.Вставить("ПутьКДанным");
	Описание.Вставить("ИмяРеквизитаФлаг");
	Описание.Вставить("ИмяРеквизитаСчетчик");
	Описание.Вставить("ПутьКДаннымФормыСодержащимОшибку");
	Описание.Вставить("СтраницыВладельцы", Новый Массив);

	Возврат Описание;	
КонецФункции

Функция ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовСчетчиков = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"
			Или ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыВедущихДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовСчетчиков.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовСчетчиков;
КонецФункции

Функция ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку, ИмяРеквизитаТаблицы", "РеквизитСтрокиТаблицы");	
КонецФункции

Функция ОписаниеРеквизитаИндикацииОшибкиВШапке()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку", "РеквизитШапки");	
КонецФункции

Процедура ХраненияОшибокВДанныхФормыДополнитьФорму(Форма) Экспорт
	ПутиКРеквизитамФормы = ПутиКДаннымФормы(Форма, Ложь);
	ПутиКРеквизитамФормы.Добавить("");
		
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ПутьКРеквизиту Из ПутиКРеквизитамФормы Цикл
		РеквизитТаблицаХраненияОшибок = Новый РеквизитФормы("ТаблицаХраненияОшибок", Новый ОписаниеТипов("ТаблицаЗначений"), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(РеквизитТаблицаХраненияОшибок);
		
		ПутьКТаблице = ПутьКРеквизиту + ?(ПутьКРеквизиту = "", "ТаблицаХраненияОшибок", "." + "ТаблицаХраненияОшибок");
		
		РеквизитТекстОшибки = Новый РеквизитФормы("Текст", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитТекстОшибки);
		
		РеквизитПолеОшибки = Новый РеквизитФормы("Поле", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитПолеОшибки);	
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("КлючДанных", Новый ОписаниеТипов("Неопределено"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("НеПривязана", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры

Функция СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеЭлементовСРеквизитамиИндикации)
	ЭлементИндикации = Неопределено;
	
	Элементы = Форма.Элементы;
	
	ЭлементОтображенияДанныхСОшибкой = Элементы[ОписаниеЭлемента.ИмяЭлемента];
	ОписаниеРеквизитаИндикации = ОписаниеЭлементовСРеквизитамиИндикации[ОписаниеЭлемента.ИмяЭлемента];
	ПутьКДанным = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	
	ПутьКДаннымСчетчика = "";
	Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	КонецЕсли;	
	
	Если ОписаниеЭлемента.ОтображатьГиперссылку Тогда
		Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);
		ИначеЕсли ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" 
			Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
			
			ЭлементИндикации = СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);	
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации);
	
	Возврат ЭлементИндикации;
КонецФункции	

Функция СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой) = Тип("ТаблицаФормы") Тогда
		Родитель = ЭлементОтображенияДанныхСОшибкой;
	Иначе
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	КонецЕсли;		
	
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	ЭлементИндикации.ГиперссылкаЯчейки = Истина;
	ЭлементИндикации.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	ЭлементИндикации.ТолькоПросмотр = Истина;
	
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
		
	Если ЭлементИндикации.Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда 
		Элементы.Переместить(ЭлементИндикации, ЭлементИндикации.Родитель, ЭлементИндикации.Родитель.ПодчиненныеЭлементы[0]);			
	КонецЕсли;	
	
	ЭлементИндикации.Ширина = 1;
	
	Родитель.УстановитьДействие("ПриАктивизацииЯчейки", "Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки");
	
	ЯчейкаАктивируемаяПоУмолчанию = АктивныйЭлементВТаблицеСодержащейГиперссылку(Родитель, ЭлементИндикации);
	
	Если ЯчейкаАктивируемаяПоУмолчанию <> Неопределено Тогда
		ЯчейкаАктивируемаяПоУмолчанию.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	Отбор.ПравоеЗначение = Ложь;
	Отбор.Использование = Истина;

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементИндикации.Имя); 
	ОформляемоеПоле.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);	
	
	Возврат ЭлементИндикации;
		
КонецФункции	

Функция УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации)
	ПутьКДаннымФлага = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" Тогда
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитаИндикации.ПутьКДаннымФормыСодержащимОшибку);
				
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
		Отбор.ПравоеЗначение = Истина;
		Отбор.Использование = Истина;
		
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
		ОформляемоеПоле.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
	Отбор.ПравоеЗначение = Истина;
	Отбор.Использование = Истина;

	Если Не ПустаяСтрока(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымСчетчика);
		Отбор.ПравоеЗначение = 0;
		Отбор.Использование = Истина;
	КонецЕсли;	

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
	ОформляемоеПоле.Использование = Истина;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлементаТаблица); 
		ОформляемоеПоле.Использование = Истина;
	КонецЕсли;	

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
КонецФункции	

Функция СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой.Родитель) =  Тип("ГруппаФормы")
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная Тогда
		
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	Иначе	
	                                                
		ИмяГруппы = ЭлементОтображенияДанныхСОшибкой.Имя + "ГруппаИндикацииОшибки";
				
		Родитель = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементОтображенияДанныхСОшибкой.Родитель, ЭлементОтображенияДанныхСОшибкой);
		Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Родитель.ОтображатьЗаголовок  = Ложь;
		Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	
		Элементы.Переместить(ЭлементОтображенияДанныхСОшибкой, Родитель);
	КонецЕсли;	
		
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	
	ЭлементИндикации.УстановитьДействие("Нажатие", "Подключаемый_ЭлементИндикацииОшибкиНажатие");
		
	Возврат ЭлементИндикации;
КонецФункции

Функция АктивныйЭлементВТаблицеСодержащейГиперссылку(Таблица, ЯчейкаГиперссылка)
	КоличествоПодчиненныхЭлементов = Таблица.ПодчиненныеЭлементы.Количество();
	
	ИндексЯчейкиГиперссылки = Таблица.ПодчиненныеЭлементы.Индекс(ЯчейкаГиперссылка);
	
	АктивируемыйЭлемент = Неопределено;
	
	Если КоличествоПодчиненныхЭлементов > 1 Тогда
		ИндексТекущейЯчейки = ИндексЯчейкиГиперссылки;			
		Пока ИндексТекущейЯчейки < КоличествоПодчиненныхЭлементов - 1 Цикл 
			ИндексТекущейЯчейки = ИндексТекущейЯчейки + 1;
			
			ТекущийПодчиненныйЭлемент = Таблица.ПодчиненныеЭлементы[ИндексТекущейЯчейки];
			
			Если ТипЗнч(ТекущийПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
				АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
				Прервать;
			Иначе
				АктивируемыйЭлемент = АктивныйЭлементВТаблицеСодержащейГиперссылку(ТекущийПодчиненныйЭлемент, ТекущийПодчиненныйЭлемент);
				Если ТипЗнч(АктивируемыйЭлемент) <> Тип("ПолеФормы") Тогда
					АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
				Иначе	
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Если АктивируемыйЭлемент = Неопределено Тогда
			ИндексТекущейЯчейки = ИндексЯчейкиГиперссылки;

			Пока ИндексТекущейЯчейки >  0 Цикл 
				ИндексТекущейЯчейки = ИндексТекущейЯчейки - 1;
				
				ТекущийПодчиненныйЭлемент = Таблица.ПодчиненныеЭлементы[ИндексТекущейЯчейки];
				
				Если ТипЗнч(ТекущийПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
					АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
					Прервать;
				Иначе
					АктивируемыйЭлемент = АктивныйЭлементВТаблицеСодержащейГиперссылку(ТекущийПодчиненныйЭлемент, ТекущийПодчиненныйЭлемент);
					Если ТипЗнч(АктивируемыйЭлемент) <> Тип("ПолеФормы") Тогда
						АктивируемыйЭлемент = Неопределено;
					Иначе	
						Прервать;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;			
	КонецЕсли;	
	
	Возврат АктивируемыйЭлемент;
КонецФункции

Функция УстановитьФлагНаличияОшибки(Форма, ПутьКДанным, ЗначениеФлага, КоличествоПодчиненныхЭлементовСОшибками, СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла, СчетчикФлаговНаСтраницах, ПутиКДаннымФормы = Неопределено) Экспорт
	УстановленыНовыеСвойстваИндикации = Ложь;
	
	ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
	
	НепривязанныеДанные = Ложь;
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		ДанныеРеквизитовИндикации = Таблица[ОписаниеПутиКДанным.ИндексСтроки];
		ОписаниеРеквизитовИндикации = Форма.ОписаниеРеквизитовПризнаковНаличияОшибок.Получить(ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		
		Если ПутиКДаннымФормы <> Неопределено 
			И ПутиКДаннымФормы.Найти(ОписаниеПутиКДанным.ПутьКДаннымТаблицы) = Неопределено Тогда
			
			НепривязанныеДанные = Истина;		
		КонецЕсли;	
	Иначе
		ОписаниеРеквизитовИндикации = Форма.ОписаниеРеквизитовПризнаковНаличияОшибок.Получить(ОписаниеПутиКДанным.ПутьКДанным);
		ДанныеРеквизитовИндикации = Форма;
		
		Если ПутиКДаннымФормы <> Неопределено 
			И ПутиКДаннымФормы.Найти(ОписаниеПутиКДанным.ПутьКДанным) = Неопределено Тогда
			
			НепривязанныеДанные = Истина;		
		КонецЕсли;
	КонецЕсли;	
		
	Если ОписаниеРеквизитовИндикации = Неопределено Тогда	
		Если НепривязанныеДанные
			И Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок <> Неопределено Тогда
			
			Если Форма[Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок.ИмяРеквизитаФлаг] = Ложь
				И ЗначениеФлага = Истина Тогда
				
				Форма[Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок.ИмяРеквизитаФлаг] = Истина;
				
				УстановленыНовыеСвойстваИндикации = Истина;
			КонецЕсли;	
		КонецЕсли;	
		Возврат УстановленыНовыеСвойстваИндикации;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг) Тогда
		Если ЗначениеФлага <> Неопределено
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг] <> ЗначениеФлага Тогда
			
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг] = ЗначениеФлага;
			УстановленыНовыеСвойстваИндикации = Истина;
			
			ПриращениеСчетчика = ?(ЗначениеФлага, 1, -1);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик) Тогда
		ТекущиеКоличествоПодчиненныхЭлементовСОшибками = ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик];
		
		Если СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла Тогда
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = 0;
		Иначе	
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] + КоличествоПодчиненныхЭлементовСОшибками;
		КонецЕсли;	
		
		Если (ТекущиеКоличествоПодчиненныхЭлементовСОшибками = 0 
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] > 0) Тогда
			
			УстановленыНовыеСвойстваИндикации = Истина;
			ПриращениеСчетчика = 1;
		ИначеЕсли (ТекущиеКоличествоПодчиненныхЭлементовСОшибками > 0 
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = 0) Тогда
			
			УстановленыНовыеСвойстваИндикации = Истина;
			ПриращениеСчетчика = - 1;
		КонецЕсли;			
	КонецЕсли;	
	
	Если УстановленыНовыеСвойстваИндикации Тогда
		Для Каждого ИмяСтраницы Из ОписаниеРеквизитовИндикации.СтраницыВладельцы Цикл
			СчетчикФлаговНаСтраницах[ИмяСтраницы] = СчетчикФлаговНаСтраницах[ИмяСтраницы] + ПриращениеСчетчика;	
		КонецЦикла;			
	КонецЕсли;	
		 	
	Возврат УстановленыНовыеСвойстваИндикации;
КонецФункции

Функция СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным = "", КлючДанных = Неопределено, ПолучатьТолькоНепривязанныеОшибки = Ложь) Экспорт
	СтруктураПоиска = Новый Структура;
	
	Если ПутьКДанным <> "*" Тогда
		
		СтруктураПоиска.Вставить("Поле", ПутьКДанным);
	КонецЕсли;
	
	Если КлючДанных <> Неопределено Тогда
		СтруктураПоиска.Вставить("КлючДанных", КлючДанных);	
	КонецЕсли;	
	
	Если ПолучатьТолькоНепривязанныеОшибки Тогда
		СтруктураПоиска.Вставить("НеПривязана", Истина);	
	КонецЕсли;	
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОшибкиШапкиФормы = Форма.ТаблицаХраненияОшибок;
	Иначе
		ОшибкиШапкиФормы = Форма.ТаблицаХраненияОшибок.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Возврат ОшибкиШапкиФормы;
КонецФункции	

Функция ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Данные, ПутиКПодчиненнымДанным, ОписаниеПодчиненностиДанных = Неопределено)
	ОтработанныеУзлыВедущихДанных = Новый Соответствие;	
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКПодчиненнымДанным Цикл
		ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, Дерево, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, ОтработанныеУзлыВедущихДанных);
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции	

Функция ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных)
	УзлыПодчиненныхДанных = ОтработанныеУзлыВедущихДанных.Получить(ПутьКПодчиненнымДанным);
	Если УзлыПодчиненныхДанных <> Неопределено Тогда
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;
	
	Если ОписаниеПодчиненности <> Неопределено Тогда
		ПутиКВедущимДанным = ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, Ложь);
	Иначе
		ПутиКВедущимДанным = Новый Массив;
	КонецЕсли;	
	
	Если ПутиКВедущимДанным.Количество() = 0 Тогда
		Узел = ДеревоПодчиненностиДанных.Строки.Добавить();
		Узел.ПутьКДанным = ПутьКПодчиненнымДанным;
		
		УзлыПодчиненныхДанных = Новый Массив;
		УзлыПодчиненныхДанных.Добавить(Узел);
		
		ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);	
				
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;	
		
	УзлыПодчиненныхДанных = Новый Массив;
	
	Для Каждого ПутьКВедущимДанным Из ПутиКВедущимДанным Цикл
		УзлыВедущихДанных = ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКВедущимДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных);
				
		Для Каждого УзелВедущихДанных Из УзлыВедущихДанных Цикл
			УзелПодчиненныхДанных = УзелВедущихДанных.Строки.Добавить();
			УзелПодчиненныхДанных.ПутьКДанным = ПутьКПодчиненнымДанным;
			
			УзлыПодчиненныхДанных.Добавить(УзелПодчиненныхДанных);
		КонецЦикла;		
	КонецЦикла;
		
	ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);
	
	Возврат УзлыПодчиненныхДанных;	
КонецФункции	

Функция УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь)
	КоличествоПодчиненныхУзловСОшибками = 0;
		
	Для Каждого ПодчиненныйУзел Из ТекущийУзел.Строки Цикл
		Если УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ПодчиненныйУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах) Тогда
			Если ЗначениеФлага Тогда
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками + 1;
			Иначе 
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками - 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = Ложь;
	ЕстьОшибкиВСобственныхДанных = Неопределено;
	Если УзлыДанныхСИзменяемымЗначениемФлага.Получить(ТекущийУзел.ПутьКДанным) <> Неопределено Тогда 
		ЕстьОшибкиВСобственныхДанных = ЗначениеФлага;
		СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = СбрасыватьСчетчикОшибокВПодчиненныхЭлементах
	КонецЕсли;	
		
	Возврат УстановитьФлагНаличияОшибки(
				Форма, 
				ТекущийУзел.ПутьКДанным, 
				ЕстьОшибкиВСобственныхДанных, 
				КоличествоПодчиненныхУзловСОшибками,
				СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла, 
				СчетчикФлаговНаСтраницах,
				ПутиКДаннымФормы);
	
КонецФункции

Функция ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовИндикации = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"  Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыСвязанныхДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовИндикации.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовИндикации;	
КонецФункции

Функция СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками";
		Иначе
			ИмяРеквизитаСчетчик = ЭлементыПути[ЭлементыПути.Количество() - 1] + "КоличествоПодчиненныхЭлементовСОшибками";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаСчетчик;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
	Иначе
		Если Не ЗначениеЗаполнено(ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик) Тогда
			ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
			РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
			ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции	

#КонецОбласти

Функция ИндексСтрокой(ИндексСтроки)
	Если ИндексСтроки = 0 Тогда 
		Возврат "0";
	ИначеЕсли ИндексСтроки < 1000 Тогда
		Возврат Строка(ИндексСтроки);
	Иначе 	
		ИндексСтрокой = Строка(ИндексСтроки);
		Возврат СтрЗаменить(ИндексСтрокой, Символы.НПП, "");
	КонецЕсли;	
КонецФункции

Функция ИндексСтрокиТаблицыИзПутиКДанным(ПутьКДанным)
	НомерСимволаОткрывающейСкобки = СтрНайти(ПутьКДанным, "[");
	
	Если НомерСимволаОткрывающейСкобки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСимволаЗакрывающейСкобки = СтрНайти(Сред(ПутьКДанным, НомерСимволаОткрывающейСкобки + 1), "]") + НомерСимволаОткрывающейСкобки;
	
	Если НомерСимволаЗакрывающейСкобки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрокой = Сред(ПутьКДанным, НомерСимволаОткрывающейСкобки + 1, НомерСимволаЗакрывающейСкобки - НомерСимволаОткрывающейСкобки - 1);
	
	Если ПустаяСтрока(ИндексСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Число(ИндексСтрокой);	
КонецФункции

Процедура ОшибкиИзСтрокиТаблицыФормыВМассив(Ошибки, СтрокаТаблицы, ПутьКДаннымТаблицы, ИндексСтроки, ИмяРеквизитаСтроки = "", КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиСтрокиТаблицы = СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ИмяРеквизитаСтроки, КлючДанных);
	
	Для Каждого ОшибкаДанныхСтрокиТаблицы Из ОшибкиСтрокиТаблицы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Функция СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибкиДанных)
	СообщениеОбОшибке = Новый СообщениеПользователю;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиДанных.КлючДанных) Тогда 
		СообщениеОбОшибке.УстановитьДанные(ОписаниеОшибкиДанных.КлючДанных);
	КонецЕсли;
	
	СообщениеОбОшибке.Текст = ОписаниеОшибкиДанных.Текст;
	СообщениеОбОшибке.Поле = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеОшибкиДанных.ПутьКДанным);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции	

Функция ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхСтрокиТаблицы.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхСтрокиТаблицы.КлючДанных;
	
	ПутьКДанным = ОписаниеПутиКДаннымСтрокиТаблицы();
	ПутьКДанным.ПутьКДаннымТаблицы = ПутьКДаннымТаблицы;
	ПутьКДанным.ИндексСтроки = ИндексСтроки;
	ПутьКДанным.ИмяРеквизитаСтроки = ОшибкаДанныхСтрокиТаблицы.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
	
	Возврат ОписаниеОшибки;	
КонецФункции

Функция ОписаниеОшибкиДанных()
	ОписаниеОшибкиВДанных = Новый Структура;
	
	ОписаниеОшибкиВДанных.Вставить("Текст", "");
	ОписаниеОшибкиВДанных.Вставить("КлючДанных", "");
	ОписаниеОшибкиВДанных.Вставить("ПутьКДанным");
	
	Возврат ОписаниеОшибкиВДанных;
КонецФункции	

Процедура ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, ПутьКДанным = "", КлючДанных = Неопределено, ПолучатьТолькоНепривязанныеОшибки = Ложь, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиШапкиФормы = СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным, КлючДанных, ПолучатьТолькоНепривязанныеОшибки);
		
	Для Каждого ОшибкаДанныхШапки Из ОшибкиШапкиФормы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

Функция ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхШапки.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхШапки.КлючДанных;
	
	ПутьКДанным = ОписаниеПутиКДаннымРеквизитаОбъекта();
	ПутьКДанным.ПутьКДанным = ОшибкаДанныхШапки.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
		
	Возврат ОписаниеОшибки;	

КонецФункции

Процедура УстановитьЗаголовкиВТаблице(Форма, ДанныеТаблицы, ОписаниеКолонокЗаголовков) Экспорт
	ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	
	Для Каждого СтрокТаблицы Из ДанныеТаблицы Цикл
		УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокТаблицы, ОписаниеКолонокЗаголовков, Ложь);			
	КонецЦикла;	
КонецПроцедуры

Функция УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокаТаблицы, ОписаниеКолонокЗаголовков, ЗаполнятьЗаголовкиПоУмолчанию = Истина)
	Если ЗаполнятьЗаголовкиПоУмолчанию Тогда
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	КонецЕсли;	

	Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
		СтрокаТаблицы[ОписаниеЗаголовка.ПолеТаблицы + "Заголовок"] = ОписаниеЗаголовка.Заголовок + ":";			
	КонецЦикла;
КонецФункции

Процедура ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков)
	Если ОписаниеКолонокЗаголовков <> Неопределено Тогда
		Для Каждого ОписаниеКолонки Из ОписаниеКолонокЗаголовков Цикл
			Если Не ЗначениеЗаполнено(ОписаниеКолонки.Заголовок) Тогда
				ПолеТаблицы = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы);
				
				Если ПолеТаблицы <> Неопределено Тогда
					ОписаниеКолонки.Заголовок = ПолеТаблицы.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ИмяРеквизитаСтроки = "", КлючДанных = Неопределено)
	ОшибкиСтрокиТаблицы = Новый Массив;
	
	Если Не СтрокаТаблицы.Свойство("ТаблицаХраненияОшибок") Тогда
		Возврат ОшибкиСтрокиТаблицы;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура;
	
	Если ИмяРеквизитаСтроки <> "*" Тогда
		
		СтруктураПоиска.Вставить("Поле", ИмяРеквизитаСтроки);
	КонецЕсли;
	
	Если КлючДанных <> Неопределено Тогда
		СтруктураПоиска.Вставить("КлючДанных", КлючДанных);	
	КонецЕсли;	
		
	Если СтруктураПоиска.Количество() = 0 Тогда	
		Для Каждого СтрокаОшибки Из СтрокаТаблицы.ТаблицаХраненияОшибок Цикл 
			ОшибкиСтрокиТаблицы.Добавить(СтрокаОшибки);
		КонецЦикла;	
	Иначе
		ОшибкиСтрокиТаблицы = СтрокаТаблицы.ТаблицаХраненияОшибок.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Возврат ОшибкиСтрокиТаблицы;	
КонецФункции	

Процедура УстановитьКартинкиДляЗаголовковСтраницФормы(Форма) 
	ИзмененыСвойстваЭлементовФормы = Ложь;
	
	ЦветЗаголовкаГруппыСОшибкой = Новый Цвет(255, 0, 0);
	Для Каждого СчетчикФлагов Из Форма.СчетчикФлаговНаСтраницах Цикл
		Элемент =  Форма.Элементы.Найти(СчетчикФлагов.Ключ);
		
		Если Элемент = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если СчетчикФлагов.Значение = 0 Тогда
			Если Элемент.Вид = ВидГруппыФормы.Страница Тогда
				Если Элемент.Картинка.Вид <> ВидКартинки.Пустая Тогда
					Элемент.Картинка = Новый Картинка;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;
			Иначе
				Если Элемент.ЦветТекстаЗаголовка = ЦветЗаголовкаГруппыСОшибкой Тогда
					Цвет = Форма.ЦветаЗаголовковСворачиваемыхГрупп[Элемент.Имя];
					
					Элемент.ЦветТекстаЗаголовка = Цвет;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;				
			КонецЕсли;	
		Иначе
			Если Элемент.Вид = ВидГруппыФормы.Страница Тогда
				Если Элемент.Картинка.Вид = ВидКартинки.Пустая Тогда
					Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;	
			Иначе
				Если Элемент.ЦветТекстаЗаголовка <> ЦветЗаголовкаГруппыСОшибкой Тогда
					Элемент.ЦветТекстаЗаголовка = ЦветЗаголовкаГруппыСОшибкой;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ОписаниеЭлемента Из Форма.ОписаниеЭлементовСИндикациейОшибок Цикл
		Если ОписаниеЭлемента.Значение.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеЭлемента.Значение.ИмяЭлементаТаблица);
			ГиперссылкаТаблицы = Форма.Элементы.Найти(ОписаниеЭлемента.Ключ);
			
			Если Элемент <> Неопределено
				И ГиперссылкаТаблицы <> Неопределено Тогда
				
				ТекущаяЯчейка = АктивныйЭлементВТаблицеСодержащейГиперссылку(Элемент, ГиперссылкаТаблицы);  	
			КонецЕсли;				
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьВыводВФайлСвойстваЗначенияЭлемента(Элемент, ИмяСвойства) Экспорт
	
	СтрокаПоля = Элемент.Поля.Найти(ИмяСвойства, "ИмяПоля");
	Если СтрокаПоля <> Неопределено Тогда
		СтрокаПоля.НеВыводитьВФайл = Не ЗначениеЗаполнено(Элемент.Значение[ИмяСвойства]);
	КонецЕсли;		
	
КонецПроцедуры

Процедура УстановитьВыводВФайл(Элемент, ПроверяемоеСвойство) Экспорт 
	
	МассивИмен = СтрРазделить(ПроверяемоеСвойство, ".");
	Свойство = Элемент;
	
	Для Сч = 0 По МассивИмен.Количество()-1 Цикл
		Свойство = Свойство[МассивИмен[Сч]]
	КонецЦикла;
	
	Элемент.НеВыводитьВФайл = Не ЗначениеЗаполнено(Свойство);
	
КонецПроцедуры

Функция ДанныеСтрокСовпадают(ПерваяСтрока, ВтораяСтрока, ПроверяемыеРеквизиты) Экспорт 
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл 
		Если Не ЗначениеЗаполнено(ПерваяСтрока[ИмяРеквизита]) И Не ЗначениеЗаполнено(ВтораяСтрока[ИмяРеквизита]) Тогда 
			Продолжить;
		КонецЕсли;
		Если ПерваяСтрока[ИмяРеквизита] <> ВтораяСтрока[ИмяРеквизита] Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(Ставка, НаборДанных) Экспорт

	ИмяПоля = "ИС5__ДоляСтавки";
	Если ЗначениеЗаполнено(Ставка) Тогда
		НаборДанных[ИмяПоля].Значение = Ставка
	Иначе
		НаборДанных.Удалить(ИмяПоля)
	КонецЕсли;	

КонецПроцедуры

Процедура ВписатьСтавкуВНаборДанныхТеррУсловий(ТерриториальныеУсловия, Ставка, НаборДанных) Экспорт

	ИмяПоля = "ИС5__Коэффициент";
	Если (ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР) И ЗначениеЗаполнено(Ставка) Тогда
		
		НаборДанных.Значение[ИмяПоля] = Ставка;
	Иначе
		ОписаниеПолей = НаборДанных.Поля;
		СтрокаКУдалению = ОписаниеПолей.Найти(ИмяПоля,"ИмяПоля");
		ОписаниеПолей.Удалить(СтрокаКУдалению);
	КонецЕсли;

КонецПроцедуры