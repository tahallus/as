#Область ПрограммныйИнтерфейс

// Устанавливает настройки серий по умолчанию при включении маркировки ГИСМ
//
// Параметры:
//  Объект - Данные объекта
//
Процедура УстановитьНастройкиСерийПоУмолчаниюГИСМ(Объект) Экспорт
	
	Если НЕ Объект.ВидМаркировки = Перечисления.ВидыМаркировки.НеМаркируется Тогда
		
		Объект.ИспользоватьСерииНоменклатуры = Истина;
		Объект.ИспользоватьУникальныеСерии = Истина;
		
		Если Не ЗначениеЗаполнено(Объект.ПолитикаУчетаСерий) Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПолитикаУчетаСерий.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
			|ГДЕ
			|	ПолитикаУчетаСерий.ОсновнаяПолитикаУчетаКиЗ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Объект.ПолитикаУчетаСерий = Выборка.Ссылка;
				Возврат;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет Серии номенклатуры в таблицу из хранилища
//
// Параметры:
//  Объект - Данные объекта
//  АдресЗапасовВХранилище - Адрес запасов в хранилище
//  КлючСвязи - Ключ связи строк таблиц
//  ПараметрыИменаПолей - Параметры имен полей таблиц
//
// Возвращаемое значение:
//  Число - Количество измененных полей
//
Функция ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресЗапасовВХранилище, КлючСвязи, ПараметрыИменаПолей=Неопределено) Экспорт
	
	ИмяТЧЗапасы="Запасы";
	ИмяТЧСерииНоменклатуры="СерииНоменклатуры";
	ИмяПоляКлючСвязи = "КлючСвязи";
	ЭтоОприходование = Ложь;
	ЭтоПеремещение = Ложь;
	
	Если ПараметрыИменаПолей<>Неопределено И ТипЗнч(ПараметрыИменаПолей)=Тип("Структура") Тогда
		Если ПараметрыИменаПолей.Свойство("ИмяТЧЗапасы") Тогда
			ИмяТЧЗапасы=ПараметрыИменаПолей.ИмяТЧЗапасы;
		КонецЕсли;
		Если ПараметрыИменаПолей.Свойство("ИмяТЧСерииНоменклатуры") Тогда
			ИмяТЧСерииНоменклатуры=ПараметрыИменаПолей.ИмяТЧСерииНоменклатуры;
		КонецЕсли;
		Если ПараметрыИменаПолей.Свойство("ИмяПоляКлючСвязи") Тогда
			ИмяПоляКлючСвязи=ПараметрыИменаПолей.ИмяПоляКлючСвязи;
		КонецЕсли;
		Если ПараметрыИменаПолей.Свойство("ЭтоОприходование") Тогда
			ЭтоОприходование=ПараметрыИменаПолей.ЭтоОприходование;
		КонецЕсли;
		Если ПараметрыИменаПолей.Свойство("ЭтоПеремещение") Тогда
			ЭтоПеремещение=ПараметрыИменаПолей.ЭтоПеремещение;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	ИзмененоКоличество = Ложь;
	
	// Очистить старые серии
	ОтборСерииНоменклатурыТекущейСтроки = Новый Структура("КлючСвязи", КлючСвязи);
	МассивУдалитьСтроки = Новый ФиксированныйМассив(Объект[ИмяТЧСерииНоменклатуры].НайтиСтроки(ОтборСерииНоменклатурыТекущейСтроки));
	Для Каждого СтрокаУдалить Из МассивУдалитьСтроки Цикл
		Объект[ИмяТЧСерииНоменклатуры].Удалить(СтрокаУдалить);
	КонецЦикла;
	
	// Сформировать представление для строки запасов
	СтроковоеПредставлениеСерийНоменклатуры = "";
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТЧСерииНоменклатуры].Добавить();
		//+ ГИСМ
		// поддержка загрузки серий в МаркировкаТоваровГИСМ, расположено в цикле, 
		// потому что вне цикла нам не узнать наличие той или иной колонки
		КолонкаСерия = "";
		Если НоваяСтрока.Свойство("Серия") Тогда
			КолонкаСерия = ?(ЭтоОприходование, "СерияОприходование", "Серия");
		Иначе
			КолонкаСерия = "Серия";
			НоваяСтрока.Серия = СтрокаЗагрузки.Серия;
		КонецЕсли;
		//- ГИСМ
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Серия") Тогда
			СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + НоваяСтрока.Серия+"; ";
		Иначе
			СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + НоваяСтрока.Серия+"; ";
		КонецЕсли;
		
		НоваяСтрока.КлючСвязи = КлючСвязи;
	КонецЦикла;
	СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
	
	ОтборСерииНоменклатурыТЧ = Новый Структура(ИмяПоляКлючСвязи, КлючСвязи);
	СтрокиЗапасов = Объект[ИмяТЧЗапасы].НайтиСтроки(ОтборСерииНоменклатурыТЧ);
	Для Каждого СтрокаЗапасов Из СтрокиЗапасов Цикл
		СтрокаЗапасов[ИмяПоляКлючСвязи] = КлючСвязи;
		Если ЭтоОприходование Тогда
			СтрокаЗапасов.СерииНоменклатурыОприходование = СтроковоеПредставлениеСерийНоменклатуры;
		Иначе
			СтрокаЗапасов.СерииНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры;
		КонецЕсли;

		Прервать;
	КонецЦикла;
	
	ДополнительныеСвойства = Новый Структура("КлючСвязи", КлючСвязи);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если ИмяТЧЗапасы = "Материалы" Тогда
			СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Материалы", ДополнительныеСвойства,"СерииНоменклатурыМатериалы");
		Иначе
			СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПересортицаЗапасов") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства,"СерииНоменклатурыОприходование");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		Если ИмяТЧЗапасы = "Продукция" Тогда
			СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Продукция", ДополнительныеСвойства,"СерииНоменклатурыПродукция");
		Иначе
			СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Продукция", ДополнительныеСвойства);
		
	Иначе
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства, ИмяТЧСерииНоменклатуры);
		
		Если ЭтоПеремещение Тогда
			
			Если ДополнительныеСвойства = Неопределено Тогда 
				ДополнительныеСвойства = Новый Структура;
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("СтруктурнаяЕдиница", Объект.Ссылка.СтруктурнаяЕдиницаПолучатель);
			ДополнительныеСвойства.Вставить("НеОбновлятьСтатусыБольшеНоля", Истина);
			СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства, ИмяТЧСерииНоменклатуры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзмененоКоличество;
	
КонецФункции // ПолучитьСерииНоменклатурыИзХранилища()

// Получает Серии номенклатуры из хранилища для поля ввода
//
// Параметры:
//  Объект - Данные объекта
//  АдресЗапасовВХранилище - Адрес запасов в хранилище
//
// Возвращаемое значение:
//  Число - Количество измененных полей
//
Функция ПолучитьСерииНоменклатурыИзХранилищаДляПоляВвода(Объект, АдресЗапасовВХранилище) Экспорт
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	// Очистить старые серии
	Объект.СерииНоменклатуры.Очистить();
	
	// Сформировать представление для строки запасов
	СтроковоеПредставлениеСерийНоменклатуры = "";
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если НоваяСтрока.Количество = 0 Тогда
			 НоваяСтрока.Количество = 1
		КонецЕсли;
		
		СтроковоеПредставлениеСерийНоменклатуры = СтроковоеПредставлениеСерийНоменклатуры + НоваяСтрока.Серия+"; ";
		
	КонецЦикла;
	
	ВыбраноСерийНоменклатуры = Объект.СерииНоменклатуры.Итог("Количество");
	
	СтроковоеПредставлениеСерийНоменклатуры = Лев(СтроковоеПредставлениеСерийНоменклатуры, Мин(СтрДлина(СтроковоеПредставлениеСерийНоменклатуры)-2,150));
	
	ЕдиницаИзмерения = Объект.ЕдиницаИзмерения;
	
	КоэффициентЕдиницыИзмерения = 1;
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		КоэффициентЕдиницыИзмерения = СерииНоменклатурыУНФВызовСервера.КоэффициентЕдиницы(ЕдиницаИзмерения);
	КонецЕсли;
	
	Количество = Объект.Количество*КоэффициентЕдиницыИзмерения;
	
	Объект.СерииНоменклатурыПредставление = СтроковоеПредставлениеСерийНоменклатуры;
	СтатусСерии = ?(Количество = ВыбраноСерийНоменклатуры, 2, 1);
	
	Возврат СтатусСерии;
	
КонецФункции // ПолучитьСерииНоменклатурыИзХранилища()

// Получает Серии номенклатуры из хранилища
//
// Параметры:
//  Объект - Данные объекта
//  АдресЗапасовВХранилище - Адрес запасов в хранилище
//
Процедура ПолучитьСерияИзХранилища(Объект, АдресЗапасовВХранилище) Экспорт
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		Объект.Серия = СтрокаЗагрузки.Серия;
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСерииНоменклатурыИзХранилища()

// Определяет параметры подбора серий номенклатуры
//
// Параметры:
//  ДокОбъект - Данные объекта
//  УИДФормы - Уникальный идентификатор формы
//  ИДСтроки - Идентификатор строки
//  РежимПодбора - режим подбора серий номенклатуры
//  ИмяТЧ - Имя таблицы подбора
//  ИмяТЧСерийНоменклатуры - Имя таблицы серий номенклатуры
//  ИмяПоляКлючСвязи - Имя поля ключа связи
//
// Возвращаемое значение:
//  Структура - Параметры подбора
//
Функция ПараметрыПодбораСерийНоменклатуры(ДокОбъект, УИДФормы, ИДСтроки, РежимПодбора = Неопределено, ИмяТЧ = "Запасы", ИмяТЧСерийНоменклатуры = "СерииНоменклатуры", ИмяПоляКлючСвязи = "КлючСвязи",
	ЭтоОприходование = Ложь) Экспорт
	
	ТекСтрокаДанные = ДокОбъект[ИмяТЧ].НайтиПоИдентификатору(ИДСтроки);
	Если ТекСтрокаДанные[ИмяПоляКлючСвязи]=0 Тогда
		ЗаполнитьКлючиСвязи(ДокОбъект, ИмяТЧ, ИмяПоляКлючСвязи);
	КонецЕсли;
	
	ПараметрыСерийНоменклатуры = ПодготовитьПараметрыСерийНоменклатуры(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ, ИмяТЧСерийНоменклатуры, ИмяПоляКлючСвязи, ЭтоОприходование);
	Если РежимПодбора=Неопределено И СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
		РежимПодбора = Истина;
	ИначеЕсли РежимПодбора = Неопределено Тогда
		РежимПодбора = Ложь;
	КонецЕсли;
	ПараметрыСерийНоменклатуры.Вставить("РежимПодбора", РежимПодбора);
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ПриходныйОрдер") Тогда
		ПараметрыСерийНоменклатуры.Вставить("ЭтоПриходныйОрдер", Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйОрдер") Тогда
		ПараметрыСерийНоменклатуры.Вставить("ЭтоРасходныйОрдер", Истина);
	КонецЕсли;
	
	//+ ГИСМ
	ПараметрыСерийНоменклатуры.Вставить("ЭтоМаркировкаГИСМ", 
		ТипЗнч(ДокОбъект.Ссылка)=Тип("ДокументСсылка.МаркировкаТоваровГИСМ"));
		
	ПараметрыСерийНоменклатуры.Вставить("ЭтоПеремаркировкаТоваровГИСМ", 
		ТипЗнч(ДокОбъект.Ссылка)=Тип("ДокументСсылка.ПеремаркировкаТоваровГИСМ"));
	
	
	Если ПараметрыСерийНоменклатуры.ЭтоМаркировкаГИСМ Тогда
		ПараметрыСерийНоменклатуры.Вставить("НоменклатураКиЗ", ТекСтрокаДанные.НоменклатураКиЗ);
		ПараметрыСерийНоменклатуры.Вставить("ХарактеристикаКиЗ", ТекСтрокаДанные.ХарактеристикаКиЗ);
		ПараметрыСерийНоменклатуры.Вставить("ЭтоМаркировкаОстатков", ДокОбъект.ОперацияМаркировки = Перечисления.ОперацииМаркировкиГИСМ.МаркировкаОстатковНа12082016);
		ПараметрыСерийНоменклатуры.GTIN = ТекСтрокаДанные.GTIN;
	КонецЕсли;
	
	ВидМаркировкиНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаДанные.Номенклатура, "ВидМаркировки");
	НастройкиСерий = Новый Структура(
		"ИспользоватьНомерСерии, 
		|ИспользоватьRFIDМеткиСерии",
		ВидМаркировкиНоменклатуры = Перечисления.ВидыМаркировки.МаркируемаяПродукция,
		ВидМаркировкиНоменклатуры = Перечисления.ВидыМаркировки.МаркируемаяПродукция ИЛИ ВидМаркировкиНоменклатуры = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак);
	
	ПараметрыСерийНоменклатуры.Вставить("НастройкиИспользованияСерий", НастройкиСерий);
	//- ГИСМ
	
	Возврат ПараметрыСерийНоменклатуры;
	
КонецФункции

// Подготавливает параметры серий номенклатуры
//
// Параметры:
//  ДокОбъект - Данные объекта
//  УИДФормы - Уникальный идентификатор формы
//  ТекСтрокаДанные - Данные текущей строки
//  ИмяТЧ - Имя таблицы подбора
//  ИмяТЧСерийНоменклатуры - Имя таблицы серий номенклатуры
//  ИмяПоляКлючСвязи - Имя поля ключа связи
//  ЭтоОприходование - Признак операции оприходования
//
// Возвращаемое значение:
//  Структура - Параметры открытия
//
Функция ПодготовитьПараметрыСерийНоменклатуры(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ = "Запасы", ИмяТЧСерийНоменклатуры = "СерииНоменклатуры", ИмяПоляКлючСвязи = "КлючСвязи",
	ЭтоОприходование = Ложь) Экспорт
	
	ОтборСерииНоменклатурыТекущейСтроки = Новый Структура("КлючСвязи", ТекСтрокаДанные[ИмяПоляКлючСвязи]);
	ОтборСерииНоменклатурыТекущейСтроки = ДокОбъект[ИмяТЧСерийНоменклатуры].НайтиСтроки(ОтборСерииНоменклатурыТекущейСтроки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект[ИмяТЧСерийНоменклатуры].Выгрузить(ОтборСерииНоменклатурыТекущейСтроки), УИДФормы);
	
	СтруктураЗапасы = Новый Структура;
	СтруктураЗапасы.Вставить("КлючСвязи", ТекСтрокаДанные[ИмяПоляКлючСвязи]);
	СтруктураЗапасы.Вставить("Номенклатура", ?(ЭтоОприходование, ТекСтрокаДанные.НоменклатураОприходование, ТекСтрокаДанные.Номенклатура));
	СтруктураЗапасы.Вставить("Характеристика", ?(ЭтоОприходование, ТекСтрокаДанные.ХарактеристикаОприходование, ТекСтрокаДанные.Характеристика));
	СтруктураЗапасы.Вставить("Количество", ТекСтрокаДанные.Количество);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Запасы", СтруктураЗапасы);
	ПараметрыОткрытия.Вставить("УникальныйИдентификаторФормыВладельца", УИДФормы);
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОткрытия.Вставить("ДокСсылка", ДокОбъект.Ссылка);
	ПараметрыОткрытия.Вставить("ИспользоватьУникальныеСерии", СтруктураЗапасы.Номенклатура.ИспользоватьУникальныеСерии);
	ИмяКолонкиСтатус = ?(ЭтоОприходование, "СтатусыСерийНоменклатурыОприходование", "СтатусыСерийНоменклатуры");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрокаДанные, ИмяКолонкиСтатус) Тогда
		ПараметрыОткрытия.Вставить("СтатусыСерийНоменклатуры", ТекСтрокаДанные[ИмяКолонкиСтатус]);
	КонецЕсли;
	
	Если ДокОбъект.Свойство("Организация") Тогда
		ПараметрыОткрытия.Вставить("Организация", Константы.УчетПоКомпании.Компания(ДокОбъект.Организация));
	КонецЕсли; 
	Если ДокОбъект.Свойство("ПоложениеСклада") Тогда
		Если ДокОбъект.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
			ИмяРеквизита = "СтруктурнаяЕдиницаРезерв";
		Иначе
			ИмяРеквизита = "СтруктурнаяЕдиница";
		КонецЕсли; 
		Если ДокОбъект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
			И ТекСтрокаДанные.Свойство(ИмяРеквизита) Тогда
			ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ТекСтрокаДанные[ИмяРеквизита]);
		ИначеЕсли ДокОбъект.Свойство(ИмяРеквизита) Тогда 
			ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект[ИмяРеквизита]);
		КонецЕсли;
	Иначе
		Если ТекСтрокаДанные.Свойство("СтруктурнаяЕдиница") И ЗначениеЗаполнено(ТекСтрокаДанные.СтруктурнаяЕдиница) Тогда
			ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ТекСтрокаДанные.СтруктурнаяЕдиница);
		ИначеЕсли ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
			ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
		ИначеЕсли ДокОбъект.Свойство("СтруктурнаяЕдиницаРезерв") Тогда
			ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиницаРезерв);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ПеремещениеПоЯчейкам") Тогда
		
		Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеПоЯчейкам.ИзНесколькихВОдну Тогда
			ПараметрыОткрытия.Вставить("Ячейка", ТекСтрокаДанные.Ячейка);
		ИначеЕсли ДокОбъект.Свойство("Ячейка") Тогда
			ПараметрыОткрытия.Вставить("Ячейка", ДокОбъект.Ячейка);
		КонецЕсли;
		
	Иначе
		
		Если ТекСтрокаДанные.Свойство("Ячейка") Тогда
			ПараметрыОткрытия.Вставить("Ячейка", ТекСтрокаДанные.Ячейка);
		ИначеЕсли ДокОбъект.Свойство("Ячейка") Тогда
			ПараметрыОткрытия.Вставить("Ячейка", ДокОбъект.Ячейка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекСтрокаДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыОткрытия.Запасы.Вставить("ЕдиницаИзмерения", ТекСтрокаДанные.ЕдиницаИзмерения);
		Если ТипЗнч(ТекСтрокаДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		    ПараметрыОткрытия.Запасы.Вставить("Коэффициент", ТекСтрокаДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			ПараметрыОткрытия.Запасы.Вставить("Коэффициент", 1);
		КонецЕсли;
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("Партия") Тогда
		ПараметрыОткрытия.Запасы.Вставить("Партия", ТекСтрокаДанные.Партия);
	Иначе
		ПараметрыОткрытия.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ТекСтрокаДанные.Свойство("GTIN") Тогда
		ПараметрыОткрытия.Вставить("GTIN", ТекСтрокаДанные.GTIN);
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("НоменклатураКиЗ") Тогда
		ПараметрыОткрытия.Вставить("НоменклатураКиЗ", ТекСтрокаДанные.НоменклатураКиЗ);
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("ХарактеристикаКиЗ") Тогда
		ПараметрыОткрытия.Вставить("ХарактеристикаКиЗ", ТекСтрокаДанные.ХарактеристикаКиЗ);
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Параметры подбора серий номенклатуры для поля ввода
//
// Параметры:
//  ДокОбъект - Данные объекта
//  УИДФормы - Уникальный идентификатор формы
//  РежимПодбора - режим подбора серий номенклатуры
//
// Возвращаемое значение:
//  Структура - Параметры серий номенклатуры
//
Функция ПараметрыПодбораСерийНоменклатурыВПолеВвода(ДокОбъект, УИДФормы, РежимПодбора = Неопределено) Экспорт
	
	// Если номенклатура одна на документ (в реквизитах, а не в табличной части)
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект.СерииНоменклатуры.Выгрузить(), УИДФормы);
	
	СтруктураЗапасы = Новый Структура;
	СтруктураЗапасы.Вставить("Номенклатура", ДокОбъект.Номенклатура);
	СтруктураЗапасы.Вставить("Характеристика", ДокОбъект.Характеристика);
	
	ПараметрыСерийНоменклатуры = Новый Структура;
	ПараметрыСерийНоменклатуры.Вставить("Запасы", СтруктураЗапасы);
	ПараметрыСерийНоменклатуры.Вставить("УникальныйИдентификаторФормыВладельца", УИДФормы);
	ПараметрыСерийНоменклатуры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыСерийНоменклатуры.Вставить("ДокСсылка", ДокОбъект.Ссылка);
	
	Если ДокОбъект.Свойство("Количество") Тогда
		ПараметрыСерийНоменклатуры.Запасы.Вставить("Количество", ДокОбъект.Количество);
	Иначе
		ПараметрыСерийНоменклатуры.Запасы.Вставить("Количество", 1);
	КонецЕсли;
			
	Если ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыСерийНоменклатуры.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
	КонецЕсли;
	Если ДокОбъект.Свойство("Ячейка") Тогда
		ПараметрыСерийНоменклатуры.Вставить("Ячейка", ДокОбъект.Ячейка);
	КонецЕсли; 		
	Если ДокОбъект.Свойство("Партия") Тогда
		ПараметрыСерийНоменклатуры.Запасы.Вставить("Партия", ДокОбъект.Партия);
	Иначе
		ПараметрыСерийНоменклатуры.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли; 		
	Если ДокОбъект.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыСерийНоменклатуры.Запасы.Вставить("ЕдиницаИзмерения", ДокОбъект.ЕдиницаИзмерения);
		Если ТипЗнч(ДокОбъект.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		    ПараметрыСерийНоменклатуры.Запасы.Вставить("Коэффициент", ДокОбъект.ЕдиницаИзмерения.Коэффициент);
		Иначе
			ПараметрыСерийНоменклатуры.Запасы.Вставить("Коэффициент", 1);
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////
	Если РежимПодбора=Неопределено И ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры") Тогда
		РежимПодбора = Истина;
	Иначе
		РежимПодбора = Ложь;
	КонецЕсли;
	ПараметрыСерийНоменклатуры.Вставить("РежимПодбора", РежимПодбора);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДокОбъект.Ссылка.Метаданные()) Тогда
		ПараметрыСерийНоменклатуры.Вставить("Организация", Константы.УчетПоКомпании.Компания(ДокОбъект.Организация));
	КонецЕсли; 
	
	Возврат ПараметрыСерийНоменклатуры;
	
КонецФункции

// Параметры подбора серий номенклатуры для поля ввода
//
// Параметры:
// ДокОбъект - Данные объекта
// УИДФормы - Уникальный идентификатор формы
// РежимПодбора - режим подбора серий номенклатуры
// 
// Возвращаемое значение:
// Структура - Параметры серий номенклатуры для ремонтов
Функция ПараметрыПодбораСерийНоменклатурыДляРемонтов(ДокОбъект, УИДФормы, РежимПодбора = Неопределено) Экспорт
	
	// Если номенклатура одна на документ (в реквизитах, а не в табличной части)
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект.Серия, УИДФормы);
	
	СтруктураЗапасы = Новый Структура;
	СтруктураЗапасы.Вставить("Номенклатура", ДокОбъект.Номенклатура);
	СтруктураЗапасы.Вставить("Характеристика", ДокОбъект.Характеристика);
	
	ПараметрыСерийНоменклатуры = Новый Структура;
	ПараметрыСерийНоменклатуры.Вставить("Запасы", СтруктураЗапасы);
	ПараметрыСерийНоменклатуры.Вставить("УникальныйИдентификаторФормыВладельца", УИДФормы);
	ПараметрыСерийНоменклатуры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыСерийНоменклатуры.Вставить("ДокСсылка", ДокОбъект.Ссылка);
	
	ПараметрыСерийНоменклатуры.Запасы.Вставить("Количество", 1);
	
	Если ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыСерийНоменклатуры.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
	КонецЕсли;
	ПараметрыСерийНоменклатуры.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	
	ПараметрыСерийНоменклатуры.Запасы.Вставить("ЕдиницаИзмерения", ДокОбъект.Номенклатура.ЕдиницаИзмерения);
	ПараметрыСерийНоменклатуры.Запасы.Вставить("Коэффициент", 1);
	
	////////////////////////////////////////////////////
	Если РежимПодбора=Неопределено И ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры") Тогда
		РежимПодбора = Истина;
	Иначе
		РежимПодбора = Ложь;
	КонецЕсли;
	ПараметрыСерийНоменклатуры.Вставить("РежимПодбора", РежимПодбора);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДокОбъект.Ссылка.Метаданные()) Тогда
		ПараметрыСерийНоменклатуры.Вставить("Организация", Константы.УчетПоКомпании.Компания(ДокОбъект.Организация));
	КонецЕсли; 
	
	Возврат ПараметрыСерийНоменклатуры;
	
КонецФункции

// Возвращает структуру данных номенклатуры
//
// Параметры:
//  СтруктураДанные - Заполняемая структура данных
//
// Возвращаемое значение:
//  Структура - Структура данных 
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные) Экспорт
	
	Если СтруктураДанные.Свойство("Номенклатура") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;

	Возврат СтруктураДанные;
	
КонецФункции

// Рассчитывает суммы в строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - Строка табличной части
//  СуммаВключаетНДС - Признак включения НДС в сумму строки
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС) Экспорт
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
			И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Обновляет статусы серий номенклатуры в табличной части
//
// Параметры:
//  Объект - Документ объект
//  ИмяТабличнойЧасти - Строковое представление табличной части с номенклатурой
//  КлючСвязи - ключ связи строк
//  ИмяТабличнойЧастиСерии - Имя табличной части с сериями
//
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, ИмяТабличнойЧасти = "Запасы", ДополнительныеСвойства = Неопределено, ИмяТабличнойЧастиСерии = "СерииНоменклатуры") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат
	КонецЕсли;
	
	МассивОбрабатываемыхТиповДокументов = МассивТиповОбрабатываемыхДокументов();
	
	Если МассивОбрабатываемыхТиповДокументов.Найти(ТипЗнч(Объект.Ссылка)) = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаОбъекта = Объект[ИмяТабличнойЧасти];
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	ЭтоЗаказПокупателя = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя"), Истина, Ложь);
	ЭтоОтчетКомиссионера = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера"), Истина, Ложь);
	ЭтоЗаказНарядТабличнаяЧастьМатериалы = ЭтоЗаказПокупателя И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд И ИмяТабличнойЧасти = "Материалы";
	
	ИмяПоляКлючСвязи = "КлючСвязи";
	
	Если ЭтоОтчетКомиссионера Или ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
		ИмяПоляКлючСвязи = "КлючСвязиСерииНоменклатуры";
	КонецЕсли;
	
	ИзменениеКлючевыхРеквизитов = Ложь;
	КлючСвязи = Неопределено;
	НомерСтроки = Неопределено;
	СтруктурнаяЕдиница = Неопределено;
	НеОбновлятьСтатусыБольшеНоля = Ложь;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
		
		Если ДополнительныеСвойства.Свойство("КлючСвязи") Тогда
			КлючСвязи = ДополнительныеСвойства.КлючСвязи;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("НомерСтроки") Тогда
			НомерСтроки = ДополнительныеСвойства.НомерСтроки;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ИзменениеКлючевыхРеквизитов") Тогда
			ИзменениеКлючевыхРеквизитов = ДополнительныеСвойства.ИзменениеКлючевыхРеквизитов;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("СтруктурнаяЕдиница") Тогда
			СтруктурнаяЕдиница = ДополнительныеСвойства.СтруктурнаяЕдиница;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("НеОбновлятьСтатусыБольшеНоля") Тогда
			НеОбновлятьСтатусыБольшеНоля = ДополнительныеСвойства.НеОбновлятьСтатусыБольшеНоля;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		
		Если КлючСвязи = Неопределено Тогда
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить();
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		Иначе
			ПараметрыПоиска = Новый Структура(ИмяПоляКлючСвязи, КлючСвязи);
			НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
			
			Если ЭтоОтчетКомиссионера Или ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
				ПараметрыПоискаСерии = Новый Структура("КлючСвязи", КлючСвязи);
				НайденныеСтрокиСерии = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(ПараметрыПоискаСерии);
			Иначе
				НайденныеСтрокиСерии = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить(НайденныеСтрокиСерии);
		КонецЕсли;
	Иначе
		
			ПараметрыПоиска = Новый Структура("НомерСтроки", НомерСтроки);
			
			НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
			
			Если Не НайденныеСтрокиЗапасы.Количество() 
				Или НЕ НайденныеСтрокиЗапасы[0].Номенклатура.ИспользоватьСерииНоменклатуры Тогда
				Возврат
			КонецЕсли;
			
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
			
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		
	КонецЕсли;
	
	Если Не ЭтоЗаказПокупателя Тогда
		Если МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
			ОписаниеТиповСтруктурнаяЕдиница = Новый ОписаниеТипов(МассивТипов);
			ТаблицаНоменклатурыДокумента.Колонки.Добавить("СтруктурнаяЕдиница", ОписаниеТиповСтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента", ТаблицаНоменклатурыДокумента);
	Запрос.УстановитьПараметр("ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если ЭтоЗаказПокупателя И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ВидОперации = Неопределено;
		ТипДокумента = "Заказ-наряд";
		
	Иначе
		
		ТипДокумента = Строка(ТипЗнч(Объект.Ссылка));
		
		Если Не МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") = Неопределено Тогда
			ВидОперации = Объект.ВидОперации;
		Иначе
			ВидОперации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		Если Не МетаданныеОбъекта.Реквизиты.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		Иначе
			Если ЭтоЗаказПокупателя Тогда
				СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв
			Иначе
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	 
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	МассивДоступныхПолитик = МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации);
	
	Запрос.УстановитьПараметр("МассивДоступныхПолитик", МассивДоступныхПолитик);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.Количество КАК Количество,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ТаблицаНоменклатурыДокумента.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|ИЗ
	|	&ТаблицаСерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВыборкаИзТабличнойЧастиСерииНоменклатуры.Количество, 0)) КАК Количество,
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи КАК КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка КАК Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаИзТабличнойЧастиСерииНоменклатуры КАК ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи = ВыборкаИзТабличнойЧастиСерииНоменклатуры.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ПолитикиУчетаСерий.Владелец
	|			И ВыборкаИзТабличнойЧастиЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьСерииНоменклатуры
	|	И ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПолитикаУчетаСерий) В (&МассивДоступныхПолитик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки";
	
	Если ИмяТабличнойЧастиСерии = "СерииНоменклатурыОприходование" Тогда
		ИмяПоляСтатуса = "СтатусыСерийНоменклатурыОприходование";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.Номенклатура", "ТаблицаНоменклатурыДокумента.НоменклатураОприходование");
	Иначе
		ИмяПоляСтатуса = "СтатусыСерийНоменклатуры";
	КонецЕсли;
	
	Если ЭтоЗаказПокупателя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница", "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиницаРезерв");
		
		Если ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.КлючСвязи", "ТаблицаНоменклатурыДокумента.КлючСвязиСерииНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОтчетКомиссионера Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.КлючСвязи", "ТаблицаНоменклатурыДокумента.КлючСвязиСерииНоменклатуры");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	
	Если Не НомерСтроки = Неопределено И Не Выборка.Количество() Тогда
		
		ПараметрыПоиска.НомерСтроки = НомерСтроки;
		НайденныеСтроки = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		НайденнаяСтрока[ИмяПоляСтатуса] = 0;
		
		УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, НайденнаяСтрока, ИмяТабличнойЧастиСерии);
		
		Возврат;
		
	КонецЕсли;
	
	МассивНомеровОбновленныхСтрок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска.НомерСтроки = Выборка.НомерСтроки;
		НайденныеСтроки = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтроки.Количество()Тогда
			Продолжить
		КонецЕсли;
		
		МассивНомеровОбновленныхСтрок.Добавить(Выборка.НомерСтроки);
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		КоэффициентЕдиницыИзмерения = 1;
		Если ТипЗнч(НайденнаяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			КоэффициентЕдиницыИзмерения = НайденнаяСтрока.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		Количество = ?(НайденнаяСтрока.Количество < 0, НайденнаяСтрока.Количество * -1, НайденнаяСтрока.Количество);
		
		Если Не Количество * КоэффициентЕдиницыИзмерения = Выборка.Количество Тогда
			НайденнаяСтрока[ИмяПоляСтатуса] = 1
		Иначе
			НайденнаяСтрока[ИмяПоляСтатуса] = 2
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзменениеКлючевыхРеквизитов Тогда
		Для Каждого СтрокаОбъекта Из ТаблицаОбъекта Цикл
			Если МассивНомеровОбновленныхСтрок.Найти(СтрокаОбъекта.НомерСтроки) = Неопределено Тогда
				
				Если НеОбновлятьСтатусыБольшеНоля И СтрокаОбъекта[ИмяПоляСтатуса] > 0 Тогда
					Продолжить
				КонецЕсли;
				
				СтрокаОбъекта[ИмяПоляСтатуса] = 0;
				УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, СтрокаОбъекта, ИмяТабличнойЧастиСерии);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удалить серии номенклатуры в зависимости от политики
//
// Параметры:
//  Объект - Документ объект
//  ИмяТабличнойЧасти - Строковое представление табличной части с номенклатурой
//  КлючСвязи - ключ связи строк
//  ИмяТабличнойЧастиСерии - Имя табличной части с сериями
//
Процедура УдалитьСерииНоменклатурыВТабличнойЧастиВЗависимостиОтПолитики(Объект, ИмяТабличнойЧасти = "Запасы", ДополнительныеСвойства = Неопределено, ИмяТабличнойЧастиСерии = "СерииНоменклатуры") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат
	КонецЕсли;
	
	МассивОбрабатываемыхТиповДокументов = МассивТиповОбрабатываемыхДокументов();
	
	Если МассивОбрабатываемыхТиповДокументов.Найти(ТипЗнч(Объект.Ссылка)) = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаОбъекта = Объект[ИмяТабличнойЧасти];
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	ЭтоЗаказПокупателя = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя"), Истина, Ложь);
	ЭтоОтчетКомиссионера = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера"), Истина, Ложь);
	ЭтоЗаказНарядТабличнаяЧастьМатериалы = ЭтоЗаказПокупателя И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд И ИмяТабличнойЧасти = "Материалы";
	
	ИмяПоляКлючСвязи = "КлючСвязи";
	
	Если ЭтоОтчетКомиссионера Или ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
		ИмяПоляКлючСвязи = "КлючСвязиСерииНоменклатуры";
	КонецЕсли;
	
	ИзменениеКлючевыхРеквизитов = Истина;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
		
		Если ДополнительныеСвойства.Свойство("КлючСвязи") Тогда
			КлючСвязи = ДополнительныеСвойства.КлючСвязи;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("НомерСтроки") Тогда
			НомерСтроки = ДополнительныеСвойства.НомерСтроки;
		КонецЕсли;
		
	Иначе
		КлючСвязи = Неопределено;
		НомерСтроки = Неопределено;
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		
		Если КлючСвязи = Неопределено Тогда
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить();
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		Иначе
			ПараметрыПоиска = Новый Структура(ИмяПоляКлючСвязи, КлючСвязи);
			НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
			
			Если ЭтоОтчетКомиссионера Или ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
				ПараметрыПоискаСерии = Новый Структура("КлючСвязи", КлючСвязи);
				НайденныеСтрокиСерии = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(ПараметрыПоискаСерии);
			Иначе
				НайденныеСтрокиСерии = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить(НайденныеСтрокиСерии);
		КонецЕсли;
	Иначе
		
			ПараметрыПоиска = Новый Структура("НомерСтроки", НомерСтроки);
			
			НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
			
			Если Не НайденныеСтрокиЗапасы.Количество() 
				Или НЕ НайденныеСтрокиЗапасы[0].Номенклатура.ИспользоватьСерииНоменклатуры Тогда
				Возврат
			КонецЕсли;
			
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
			
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		
	КонецЕсли;
	
	Если Не ЭтоЗаказПокупателя Тогда
		Если МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
			ОписаниеТиповСтруктурнаяЕдиница = Новый ОписаниеТипов(МассивТипов);
			ТаблицаНоменклатурыДокумента.Колонки.Добавить("СтруктурнаяЕдиница", ОписаниеТиповСтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента", ТаблицаНоменклатурыДокумента);
	Запрос.УстановитьПараметр("ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если ЭтоЗаказПокупателя И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ВидОперации = Неопределено;
		ТипДокумента = "Заказ-наряд";
		
	Иначе
		
		ТипДокумента = Строка(ТипЗнч(Объект.Ссылка));
		
		Если Не МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") = Неопределено Тогда
			ВидОперации = Объект.ВидОперации;
		Иначе
			ВидОперации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не МетаданныеОбъекта.Реквизиты.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
		СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	Иначе
		Если ЭтоЗаказПокупателя Тогда
			СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв
		Иначе
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЕсли;
	 КонецЕсли;
	 
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	МассивДоступныхПолитик = МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации);
	
	Запрос.УстановитьПараметр("МассивДоступныхПолитик", МассивДоступныхПолитик);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.Количество КАК Количество,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ТаблицаНоменклатурыДокумента.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|ИЗ
	|	&ТаблицаСерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВыборкаИзТабличнойЧастиСерииНоменклатуры.Количество, 0)) КАК Количество,
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи КАК КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка КАК Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаИзТабличнойЧастиСерииНоменклатуры КАК ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи = ВыборкаИзТабличнойЧастиСерииНоменклатуры.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ПолитикиУчетаСерий.Владелец
	|			И ВыборкаИзТабличнойЧастиЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьСерииНоменклатуры
	|	И ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПолитикаУчетаСерий) В (&МассивДоступныхПолитик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки";
	
	Если ИмяТабличнойЧастиСерии = "СерииНоменклатурыОприходование" Тогда
		ИмяПоляСтатуса = "СтатусыСерийНоменклатурыОприходование";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.Номенклатура", "ТаблицаНоменклатурыДокумента.НоменклатураОприходование");
	Иначе
		ИмяПоляСтатуса = "СтатусыСерийНоменклатуры";
	КонецЕсли;
	
	Если ЭтоЗаказПокупателя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница", "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиницаРезерв");
		
		Если ЭтоЗаказНарядТабличнаяЧастьМатериалы Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.КлючСвязи", "ТаблицаНоменклатурыДокумента.КлючСвязиСерииНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОтчетКомиссионера Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.КлючСвязи", "ТаблицаНоменклатурыДокумента.КлючСвязиСерииНоменклатуры");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	
	МассивНомеровОбновленныхСтрок = Новый Массив;
	
	ТаблицаДокумента = ТаблицаОбъекта.Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска.НомерСтроки = Выборка.НомерСтроки;
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтроки.Количество()Тогда
			Продолжить
		КонецЕсли;
		
		МассивНомеровОбновленныхСтрок.Добавить(Выборка.НомерСтроки);
		
	КонецЦикла;
	
	Если ИзменениеКлючевыхРеквизитов Тогда
		Для Каждого СтрокаОбъекта Из ТаблицаОбъекта Цикл
			Если МассивНомеровОбновленныхСтрок.Найти(СтрокаОбъекта.НомерСтроки) = Неопределено Тогда
				УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, СтрокаОбъекта, ИмяТабличнойЧастиСерии);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Обновляет статусы серий номенклатуры в табличной части
//
// Параметры:
//  Объект - Документ объект
//  ИмяТабличнойЧасти - Строковое представление табличной части с номенклатурой
//  КлючСвязи - ключ связи строк
//  ИмяТабличнойЧастиСерии - Имя табличной части с сериями
//
Процедура ОбновитьСтатусыСерийНоменклатурыВТабличнойЧастиВводНачальныхОстатков(Объект, ИмяТабличнойЧасти = "Запасы", ДополнительныеСвойства = Неопределено, ИмяТабличнойЧастиСерии = "СерииНоменклатуры") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат
	КонецЕсли;
	
	МассивОбрабатываемыхТиповДокументов = МассивТиповОбрабатываемыхДокументов();
	
	Если МассивОбрабатываемыхТиповДокументов.Найти(Тип("ДокументСсылка.ВводНачальныхОстатков")) = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаОбъекта = Объект[ИмяТабличнойЧасти];
	
	ИмяПоляКлючСвязи = "КлючСвязи";
	
	ИзменениеКлючевыхРеквизитов = Ложь;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
		
		Если ДополнительныеСвойства.Свойство("КлючСвязи") Тогда
			КлючСвязи = ДополнительныеСвойства.КлючСвязи;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("НомерСтроки") Тогда
			НомерСтроки = ДополнительныеСвойства.НомерСтроки;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ИзменениеКлючевыхРеквизитов") Тогда
			ИзменениеКлючевыхРеквизитов = ДополнительныеСвойства.ИзменениеКлючевыхРеквизитов;
		КонецЕсли;
		
	Иначе
		КлючСвязи = Неопределено;
		НомерСтроки = Неопределено;
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		
		Если КлючСвязи = Неопределено Тогда
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить();
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		Иначе
			ПараметрыПоиска = Новый Структура(ИмяПоляКлючСвязи, КлючСвязи);
			
			НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
			НайденныеСтрокиСерии = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(ПараметрыПоиска);
			
			ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
			ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить(НайденныеСтрокиСерии);
		КонецЕсли;
		
	Иначе
		
		ПараметрыПоиска = Новый Структура("НомерСтроки", НомерСтроки);
		
		НайденныеСтрокиЗапасы = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтрокиЗапасы.Количество() 
			Или НЕ НайденныеСтрокиЗапасы[0].Номенклатура.ИспользоватьСерииНоменклатуры Тогда
			Возврат
		КонецЕсли;
		
		ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить(НайденныеСтрокиЗапасы);
		ТаблицаСерииНоменклатуры = Объект[ИмяТабличнойЧастиСерии].Выгрузить();

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента", ТаблицаНоменклатурыДокумента);
	Запрос.УстановитьПараметр("ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТипДокумента = Строка(Тип("ДокументСсылка.ВводНачальныхОстатков"));
	ВидОперации = Неопределено;
	
	СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();

	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	МассивДоступныхПолитик = МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации);
	
	Запрос.УстановитьПараметр("МассивДоступныхПолитик", МассивДоступныхПолитик);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Ссылка,
	|	ТаблицаНоменклатурыДокумента.Количество КАК Количество,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ТаблицаНоменклатурыДокумента.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаСерииНоменклатуры.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСерииНоменклатуры.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|ИЗ
	|	&ТаблицаСерииНоменклатуры КАК ТаблицаСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВыборкаИзТабличнойЧастиСерииНоменклатуры.Количество, 0)) КАК Количество,
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи КАК КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка КАК Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаИзТабличнойЧастиСерииНоменклатуры КАК ВыборкаИзТабличнойЧастиСерииНоменклатуры
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи = ВыборкаИзТабличнойЧастиСерииНоменклатуры.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.Ссылка = ПолитикиУчетаСерий.Владелец
	|			И ВыборкаИзТабличнойЧастиЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ИспользоватьСерииНоменклатуры
	|	И ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ВыборкаИзТабличнойЧастиЗапасы.Ссылка.ПолитикаУчетаСерий) В (&МассивДоступныхПолитик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаИзТабличнойЧастиЗапасы.КлючСвязи,
	|	ВыборкаИзТабличнойЧастиЗапасы.Ссылка,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки";
	
	ИмяПоляСтатуса = "СтатусыСерийНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	
	Если Не НомерСтроки = Неопределено И Не Выборка.Количество() Тогда
		
		ПараметрыПоиска.НомерСтроки = НомерСтроки;
		НайденныеСтроки = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		НайденнаяСтрока[ИмяПоляСтатуса] = 0;
		
		УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, НайденнаяСтрока, ИмяТабличнойЧастиСерии);
		
		Возврат;
		
	КонецЕсли;
	
	МассивНомеровОбновленныхСтрок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска.НомерСтроки = Выборка.НомерСтроки;
		НайденныеСтроки = ТаблицаОбъекта.НайтиСтроки(ПараметрыПоиска);
		
		Если Не НайденныеСтроки.Количество()Тогда
			Продолжить
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		МассивНомеровОбновленныхСтрок.Добавить(Выборка.НомерСтроки);
		
		Если Не НайденнаяСтрока.Количество = Выборка.Количество Тогда
			НайденнаяСтрока[ИмяПоляСтатуса] = 1
		Иначе
			НайденнаяСтрока[ИмяПоляСтатуса] = 2
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзменениеКлючевыхРеквизитов Тогда
		Для Каждого СтрокаОбъекта Из ТаблицаОбъекта Цикл
			Если МассивНомеровОбновленныхСтрок.Найти(СтрокаОбъекта.НомерСтроки) = Неопределено Тогда
				СтрокаОбъекта[ИмяПоляСтатуса] = 0;
				УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, СтрокаОбъекта, ИмяТабличнойЧастиСерии);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает статус подбора серий номенклатуры при изменении
//
// Параметры:
//  СтруктураДанных - Параметры для подбора статуса
//
// Возвращаемое значение:
//  СтатусСерийНоменклатуры - Значение статуса серии номенклатуры
//
Функция СтатусСерийНоменклатурыПриИзменении(СтруктураДанных) Экспорт
	
	Если Не СтруктураДанных.Свойство("ПараметрыПодбораСтатуса") Тогда
		Возврат 0;
	Иначе
		ПараметрыПодбораСтатуса = СтруктураДанных.ПараметрыПодбораСтатуса;
	КонецЕсли;
	
	Номенклатура = ПараметрыПодбораСтатуса.Номенклатура;
	Организация = ПараметрыПодбораСтатуса.Организация;
	СтруктурнаяЕдиница = ПараметрыПодбораСтатуса.СтруктурнаяЕдиница;
	
	Если СтруктурнаяЕдиница = Неопределено Тогда 
		СтруктурнаяЕдиница = Номенклатура.Склад;
	КонецЕсли;
	
	ТипДокумента = ПараметрыПодбораСтатуса.ТипДокумента;
	ВидОперации = ПараметрыПодбораСтатуса.ВидОперации;
	
	МассивДоступныхПолитик = МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("МассивДоступныхПолитик", МассивДоступныхПолитик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, Номенклатура.ПолитикаУчетаСерий) КАК ПолитикаУчетаСерий,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Номенклатура.Ссылка = ПолитикиУчетаСерий.Владелец
	|			И (&СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница)
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий,
	|	ВременнаяТаблица.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.ПолитикаУчетаСерий В(&МассивДоступныхПолитик)";
	
	
	Возврат ?(Запрос.Выполнить().Пустой(), 0, 1);
	
КонецФункции

// Заполняет ключ связи в строках
//
// Параметры:
//  Объект - Объект данных
//  ИмяТЧ - Имя табличной части
//  ИмяПоляКлючСвязи - Имя поля ключа связи
//
Процедура ЗаполнитьКлючиСвязи(Объект, ИмяТЧ, ИмяПоляКлючСвязи = "КлючСвязи") Экспорт
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ[ИмяПоляКлючСвязи]) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаТЧ, ИмяПоляКлючСвязи);
		КонецЕсли;
		Если Индекс < СтрокаТЧ[ИмяПоляКлючСвязи] Тогда
			Индекс = СтрокаТЧ[ИмяПоляКлючСвязи];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

// Возможна ситуация, когда в ТЧ Запасы один и тот же серийный номер встречается несколько раз.
// Например, при заполнении Отчета о розничных продажах:
// продажа, возврат, а потом повторная продажа того же серийного номера.
// продажа и возврат и эта информация занесена разными строками.
// В дельнейшем данные структуры используются в ОбработкаПроверкиЗаполнения и ОбработкаПроведения.
//
// Параметры:
//  ТаблицаЗапасы - Таблица Запасы
//  СписокСерииНоменклатуры - Список серий номенклатуры
//
Функция СвернутьСерииНоменклатурыДляПроверки(Знач ТаблицаЗапасы, Знач СписокСерииНоменклатуры) Экспорт
	
	СтруктураДляВозврата = Новый Структура("СерииНоменклатуры, Запасы", Неопределено, Неопределено);
	
	// Свернем по служебной колонке
	// и удалим строки с нулевым значением в служебной колонке
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("СписокСерииНоменклатуры", СписокСерииНоменклатуры);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
		|	ОтчетОРозничныхПродажахЗапасы.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОтчетОРозничныхПродажахЗапасы.Ячейка КАК Ячейка,
		|	ОтчетОРозничныхПродажахЗапасы.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Запасы
		|ИЗ
		|	&ТаблицаЗапасы КАК ОтчетОРозничныхПродажахЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахСерииНоменклатуры.Серия КАК Серия,
		|	ОтчетОРозничныхПродажахСерииНоменклатуры.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахСерииНоменклатуры.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_СерииНоменклатуры
		|ИЗ
		|	&СписокСерииНоменклатуры КАК ОтчетОРозничныхПродажахСерииНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Характеристика КАК Характеристика,
		|	ВТ_Запасы.Партия КАК Партия,
		|	ВТ_Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка КАК Ячейка,
		|	ВТ_СерииНоменклатуры.Серия КАК Серия,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Запасы.Количество > 0
		|				ТОГДА 1
		|			КОГДА ВТ_Запасы.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ -1
		|		КОНЕЦ) КАК КоличествоСерийНоменклатуры,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат,
		|	ВТ_СерииНоменклатуры.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_ЗапасыИСерииНоменклатуры
		|ИЗ
		|	ВТ_СерииНоменклатуры КАК ВТ_СерииНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запасы КАК ВТ_Запасы
		|		ПО (ВТ_Запасы.КлючСвязи = ВТ_СерииНоменклатуры.КлючСвязи)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Запасы.Номенклатура,
		|	ВТ_Запасы.Характеристика,
		|	ВТ_Запасы.Партия,
		|	ВТ_СерииНоменклатуры.Серия,
		|	ВТ_Запасы.ЕдиницаИзмерения,
		|	ВТ_Запасы.СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВТ_СерииНоменклатуры.Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_Запасы.НомерСтроки) КАК НомерСтроки,
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Характеристика КАК Характеристика,
		|	ВТ_Запасы.Партия КАК Партия,
		|	ВТ_Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка КАК Ячейка,
		|	ВЫРАЗИТЬ(ВТ_Запасы.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВТ_Запасы.Количество * ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ВТ_Запасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ВЫРАЗИТЬ(ВТ_Запасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат,
		|	0 КАК КлючСвязи
		|ИЗ
		|	ВТ_Запасы КАК ВТ_Запасы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Запасы.Партия,
		|	ВТ_Запасы.Характеристика,
		|	ВТ_Запасы.Номенклатура,
		|	ВЫРАЗИТЬ(ВТ_Запасы.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения,
		|	ВТ_Запасы.СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗапасыИСерииНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТ_ЗапасыИСерииНоменклатуры.Характеристика КАК Характеристика,
		|	ВТ_ЗапасыИСерииНоменклатуры.Партия КАК Партия,
		|	ВТ_ЗапасыИСерииНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_ЗапасыИСерииНоменклатуры.Ячейка КАК Ячейка,
		|	ВТ_ЗапасыИСерииНоменклатуры.Серия КАК Серия,
		|	ВТ_ЗапасыИСерииНоменклатуры.КоличествоСерийНоменклатуры КАК КоличествоСерийНоменклатуры,
		|	0 КАК КлючСвязи,
		|	ВТ_ЗапасыИСерииНоменклатуры.ЭтоВозврат КАК ЭтоВозврат,
		|	ВЫБОР
		|		КОГДА ВТ_ЗапасыИСерииНоменклатуры.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ВТ_ЗапасыИСерииНоменклатуры.Количество
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_ЗапасыИСерииНоменклатуры КАК ВТ_ЗапасыИСерииНоменклатуры";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Запасы = МассивРезультатов[3].Выгрузить();
	времСерииНоменклатуры = МассивРезультатов[4].Выгрузить();
	СерииНоменклатуры = времСерииНоменклатуры.СкопироватьКолонки("Серия, КлючСвязи, Количество");
	
	// Заполним ключи связи и Серии номенклатуры для ключа связи
	КлючСвязи = 1; // Начинаем с 1, чтобы потом найти необработанные строки с ключом связи = 0!
	Для Каждого ТекущаяСтрока Из Запасы Цикл
		ТекущаяСтрока.КлючСвязи = КлючСвязи;
		
		// Найдем все серии и добавим строки в количестве = значению в служебной колонке "КоличествоСерийНоменклатуры"
		ОтборСтруктура = Новый Структура();
		ОтборСтруктура.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ОтборСтруктура.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ОтборСтруктура.Вставить("Партия", ТекущаяСтрока.Партия);
		ОтборСтруктура.Вставить("СтруктурнаяЕдиница", ТекущаяСтрока.СтруктурнаяЕдиница);
		ОтборСтруктура.Вставить("Ячейка", ТекущаяСтрока.Ячейка);
		ОтборСтруктура.Вставить("ЭтоВозврат", ТекущаяСтрока.ЭтоВозврат);
		
		СтрокиМассив = времСерииНоменклатуры.НайтиСтроки(ОтборСтруктура);
		Если СтрокиМассив.Количество() > 0 Тогда
			Для Каждого СтрокаМассиваСтрок Из СтрокиМассив Цикл
				КоличествоСтрок = СтрокаМассиваСтрок.КоличествоСерийНоменклатуры;
				Если КоличествоСтрок < 0 Тогда
					КоличествоСтрок = -КоличествоСтрок;
				КонецЕсли;
				
				Пока КоличествоСтрок > 0 Цикл
					КоличествоСтрок = КоличествоСтрок - 1;
					
					НоваяСтрокаСерийНоменклатуры = СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийНоменклатуры, СтрокаМассиваСтрок);
					НоваяСтрокаСерийНоменклатуры.КлючСвязи = КлючСвязи;
					СтрокаМассиваСтрок.КлючСвязи = КлючСвязи; // Чтобы потом найти строки, у которых КлючСвязи = 0.
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
	// Если в серийных номерах остались строки, где КлючСвязи = -1, значит ошибка в данных.
	// Такие строки тоже добавим в ТЧ СерииНоменклатуры с ключом = 0;
	Для Каждого ТекущаяСтрокаСерииНоменклатуры Из времСерииНоменклатуры Цикл
		Если ТекущаяСтрокаСерииНоменклатуры.КлючСвязи = 0 Тогда // Ошибка в данных - есть Серии номенклатуры, которые не связаны с ТЧ Запасы
			НоваяСтрокаСерийНоменклатуры = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийНоменклатуры, ТекущаяСтрокаСерииНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим структуру для возврата
	СтруктураДляВозврата = Новый Структура();
	СтруктураДляВозврата.Вставить("СерииНоменклатуры", СерииНоменклатуры);
	СтруктураДляВозврата.Вставить("Запасы", Запасы);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Заполняет табличную часть серий номенклатуры в шапке
//
// Параметры:
//  ДокументОбъект - Объект данных
//  ДанныеЗаполнения - Данные заполнения
//  СтрокаТЧ - Строка табличной части
//  ИмяТЧСерииНоменклатуры - Имя табличной части с сериями
//
Процедура ЗаполнитьТЧСерииНоменклатурыВШапке(ДокументОбъект, ДанныеЗаполнения,
		СтрокаТЧ, ИмяТЧСерииНоменклатуры = "СерииНоменклатуры") Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект.СерииНоменклатурыПредставление = СтрокаТЧ.СерииНоменклатуры;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи);
	
	СерииНоменклатурыСтроки_0 = ДанныеЗаполнения[ИмяТЧСерииНоменклатуры].НайтиСтроки(СтруктураПоиска);
	
	ДокументОбъект[ИмяТЧСерииНоменклатуры].Загрузить(ДанныеЗаполнения[ИмяТЧСерииНоменклатуры].Выгрузить(СерииНоменклатурыСтроки_0));

КонецПроцедуры

// Заполняет табличную часть серий по ключу связи
//
// Параметры:
//  ДокументОбъект - Объект данных
//  ДанныеЗаполнения - Данные заполнения
//  ИмяТЧЗапасы - Имя табличной части "Запасы"
//  ИмяТЧСерииНоменклатурыИсточник - Имя табличной части источник
//  ИмяТЧСерииНоменклатурыПриемник - Имя табличной части приемник
//
Процедура ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязи(ДокументОбъект,
		ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерииНоменклатурыИсточник = "СерииНоменклатуры",
		ИмяТЧСерииНоменклатурыПриемник = "СерииНоменклатуры") Экспорт
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерииНоменклатуры = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерииНоменклатурыИсточник);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСерииНоменклатуры.Серия,
		|	ДокументСерииНоменклатуры.КлючСвязи,
		|	ДокументСерииНоменклатуры.Количество
		|ИЗ
		|	&ТаблицаСерииНоменклатуры КАК ДокументСерииНоменклатуры
		|ГДЕ
		|	ДокументСерииНоменклатуры.Ссылка = &ДокСсылка
		|	И ДокументСерииНоменклатуры.КлючСвязи В (&КлючиСвязи)", "&ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);
		
	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	
	ДокументОбъект[ИмяТЧСерииНоменклатурыПриемник].Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Заполняет табличную часть серий номенклатуры по остаткам к поступлению
//
// Параметры:
//  ДокументОбъект - Объект данных
//  ДанныеЗаполнения - Данные заполнения
//  ИмяТЧЗапасы - Имя табличной части "Запасы"
//  ИмяТЧСерииНоменклатурыИсточник - Имя табличной части источник
//  ИмяТЧСерииНоменклатурыПриемник - Имя табличной части приемник
//
Процедура ЗаполнитьТЧСерииНоменклатурыПоОстаткамКПоступлению(ДокументОбъект,
		ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерииНоменклатурыИсточник = "СерииНоменклатуры",
		ИмяТЧСерииНоменклатурыПриемник = "СерииНоменклатуры") Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗапасы = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧЗапасы);
	ТаблицаСерииНоменклатуры = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерииНоменклатурыИсточник);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументСерииНоменклатуры.Серия,
	|	ДокументСерииНоменклатуры.КлючСвязи
	|ПОМЕСТИТЬ ВТ_СерииНоменклатуры
	|ИЗ
	|	&ТаблицаСерииНоменклатуры КАК ДокументСерииНоменклатуры
	|ГДЕ
	|	ДокументСерииНоменклатуры.Ссылка = &ДокСсылка
	|	И ДокументСерииНоменклатуры.КлючСвязи В (&КлючиСвязи)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыКПоступлениюОстатки.Организация,
	|	СерииНоменклатурыКПоступлениюОстатки.Номенклатура,
	|	СерииНоменклатурыКПоступлениюОстатки.Характеристика,
	|	СерииНоменклатурыКПоступлениюОстатки.Партия,
	|	СерииНоменклатурыКПоступлениюОстатки.Серия,
	|	СерииНоменклатурыКПоступлениюОстатки.СтруктурнаяЕдиница,
	|	СерииНоменклатурыКПоступлениюОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.СерииНоменклатурыКПоступлению.Остатки КАК СерииНоменклатурыКПоступлениюОстатки",
		"&ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);
	
	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	СерииНоменклатурыКПоступлениюОстатки = Запрос.Выполнить().Выгрузить();
	ДокументОбъект[ИмяТЧСерииНоменклатурыПриемник].Загрузить(СерииНоменклатурыКПоступлениюОстатки);

КонецПроцедуры

// Заполняет табличную часть серий номенклатуры по ключу связи и устанавливает новый
//
// Параметры:
//  ТЗСоответствиеКлючейСвязи - Таблица соответствия ключей связи
//  ДокументОбъект - Объект данных
//  ДанныеЗаполнения - Данные заполнения
//  ИмяТЧЗапасы - Имя табличной части "Запасы"
//  ИмяТЧСерииНоменклатурыИсточник - Имя табличной части источник
//  ИмяТЧСерииНоменклатурыПриемник - Имя табличной части приемник
//  ЭтоСписание - Признак списания
//
Процедура ЗаполнитьТЧСерииНоменклатурыПоКлючуСвязиУстановитьНовыйКлючСвязи(ТЗСоответствиеКлючейСвязи,
		ДокументОбъект, ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерииНоменклатурыИсточник = "СерииНоменклатуры",
		ИмяТЧСерииНоменклатурыПриемник = "СерииНоменклатуры", ЭтоСписание) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСерииНоменклатуры = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерииНоменклатурыИсточник);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ
	|	ТЗСоответствиеКлючейСвязи.КлючСвязиНовый,
	|	ТЗСоответствиеКлючейСвязи.КлючСвязи
	|ПОМЕСТИТЬ ВременнаяТаблица_КлючиСвязи
	|ИЗ
	|	&ТЗСоответствиеКлючейСвязи КАК ТЗСоответствиеКлючейСвязи
	|ГДЕ
	|	ЭтоСписание = &ЭтоСписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументСерииНоменклатуры.Серия,
	|	ВременнаяТаблица_КлючиСвязи.КлючСвязиНовый КАК КлючСвязи
	|ИЗ
	|	&ТаблицаСерииНоменклатуры КАК ДокументСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица_КлючиСвязи КАК ВременнаяТаблица_КлючиСвязи
	|		ПО ДокументСерииНоменклатуры.КлючСвязи = ВременнаяТаблица_КлючиСвязи.КлючСвязи
	|ГДЕ
	|	ДокументСерииНоменклатуры.Ссылка = &ДокСсылка
	|	И ДокументСерииНоменклатуры.КлючСвязи В (&КлючиСвязи)", "&ТаблицаСерииНоменклатуры", ТаблицаСерииНоменклатуры);

	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	Запрос.УстановитьПараметр("ТЗСоответствиеКлючейСвязи", ТЗСоответствиеКлючейСвязи);
	Запрос.УстановитьПараметр("ЭтоСписание", ЭтоСписание);

	РезультатТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из РезультатТЗ Цикл
		НоваяСтрока = ДокументОбъект[ИмяТЧСерииНоменклатурыПриемник].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

// Возвращает представление серий номенклатуры
//
// Параметры:
//  ТаблицаСерииНоменклатуры - Таблица серий номенклатуры
//  КлючСвязи - Ключ связи таблиц
//
Функция ПредставлениеСерийНоменклатуры(ТаблицаСерииНоменклатуры, КлючСвязи) Экспорт
	
	НайденныеСерииНоменклатуры = Новый Массив; 
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСвязи", КлючСвязи);
	
	Для Каждого ТекСтрока Из ТаблицаСерииНоменклатуры.НайтиСтроки(Отбор) Цикл
		НайденныеСерииНоменклатуры.Добавить(ТекСтрока.Серия);
	КонецЦикла;
	
	Возврат СтрСоединить(НайденныеСерииНоменклатуры, "; ");

КонецФункции

// Возвращает строки серий номенклатуры из выборки
//
// Параметры:
//  ВыборкаСтрокСерииНоменклатуры - Выборка строк серий
//  КлючСвязи - Ключ связи таблиц
//
Функция СтрокаСерииНоменклатурыИзВыборки(ВыборкаСтрокСерииНоменклатуры, КлючСвязи) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ВыборкаСтрокСерииНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		
		ПечатьДокументовУНФ.ПредставлениеСерииНоменклатурыПоКлючу(ВыборкаСтрокСерииНоменклатуры, КлючСвязи);
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
	СтрокаСерийНоменклатуры = "";
	Пока ВыборкаСтрокСерииНоменклатуры.НайтиСледующий(СтруктураПоиска) Цикл
		СтрокаСерийНоменклатуры = СтрокаСерийНоменклатуры + ВыборкаСтрокСерииНоменклатуры.Серия + ", ";
	КонецЦикла;
	
	Если СтрДлина(СтрокаСерийНоменклатуры) <> 0 Тогда
		СтрокаСерийНоменклатуры = Лев(СтрокаСерийНоменклатуры, СтрДлина(СтрокаСерийНоменклатуры) - 2);
	КонецЕсли;
	
	ВыборкаСтрокСерииНоменклатуры.Сбросить();
	
	Возврат СтрокаСерийНоменклатуры;
	
КонецФункции

// Возвращает строку серии номенклатуры
//
// Параметры:
//  ТЧСерииНоменклатуры - Табличная часть серий номенклатуры
//  КлючСвязи - Ключ связи таблиц
//
Функция СтрокаСерииНоменклатуры(ТЧСерииНоменклатуры, КлючСвязи) Экспорт
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
	СтрокаСерийНоменклатуры = "";
	МассивСтрок = ТЧСерииНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Для каждого стр Из МассивСтрок Цикл
		СтрокаСерийНоменклатуры = СтрокаСерийНоменклатуры + стр.Серия + ", ";
	КонецЦикла;
	
	Если СтрДлина(СтрокаСерийНоменклатуры) <> 0 Тогда
		СтрокаСерийНоменклатуры = Лев(СтрокаСерийНоменклатуры, СтрДлина(СтрокаСерийНоменклатуры) - 2);
	КонецЕсли;
	
	Возврат СтрокаСерийНоменклатуры;
	
КонецФункции

// Заполняет серии номенклатуры в наличии
//
// Параметры:
//  ДокОбъект - Объект данных
//  ИмяТЧЗапасы - Имя табличной части "Запасы"
//  ИмяТЧСерииНоменклатуры - Имя табличной части с сериями
//
Процедура ЗаполнитьСерииНоменклатурыВНаличии(ДокОбъект, ИмяТЧЗапасы="Запасы", ИмяТЧСерииНоменклатуры="СерииНоменклатуры") Экспорт
	
	СерииНоменклатурыУНФ.ЗаполнитьКлючиСвязи(ДокОбъект, ИмяТЧЗапасы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Количество,
	|	ТаблицаЗапасы.КлючСвязи
	|ПОМЕСТИТЬ ВТЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.КлючСвязи,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СерииНоменклатурыОстатки.Серия КАК Серия,
	|		РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Количество КАК Количество
	|	ИЗ
	|		ВТЗапасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(
	|					,
	|					(&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|						И (&ВсеЯчейки
	|							ИЛИ Ячейка = &Ячейка)) КАК СерииНоменклатурыОстатки
	|			ПО РасходнаяНакладнаяЗапасы.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
	|				И РасходнаяНакладнаяЗапасы.Характеристика = СерииНоменклатурыОстатки.Характеристика
	|				И РасходнаяНакладнаяЗапасы.Партия = СерииНоменклатурыОстатки.Партия,
	|		Константа.КонтрольОстатковСерийНоменклатуры КАК КонтрольОстатковСерийНоменклатуры
	|	ГДЕ
	|		КонтрольОстатковСерийНоменклатуры.Значение = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		спрСерииНоменклатуры.Ссылка,
	|		РасходнаяНакладнаяЗапасы.НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.КлючСвязи,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Константа.КонтрольОстатковСерийНоменклатуры КАК КонтрольОстатковСерийНоменклатуры,
	|		ВТЗапасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК спрСерииНоменклатуры
	|			ПО РасходнаяНакладнаяЗапасы.Номенклатура = спрСерииНоменклатуры.Владелец
	|	ГДЕ
	|		НЕ спрСерииНоменклатуры.Продан
	|		И КонтрольОстатковСерийНоменклатуры.Значение = ЛОЖЬ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серия
	|ИТОГИ
	|	МИНИМУМ(Количество)
	|ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы",ДокОбъект[ИмяТЧЗапасы].Выгрузить());
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", ДокОбъект) Тогда
		ИмяРеквизитаСтруктурнаяЕдиница = "СтруктурнаяЕдиница";
	ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаРезерв", ДокОбъект) Тогда
		ИмяРеквизитаСтруктурнаяЕдиница = "СтруктурнаяЕдиницаРезерв";
	Иначе
		ИмяРеквизитаСтруктурнаяЕдиница = "";
	КонецЕсли;
	
	Если ИмяРеквизитаСтруктурнаяЕдиница = "" ИЛИ НЕ ЗначениеЗаполнено(ДокОбъект[ИмяРеквизитаСтруктурнаяЕдиница]) Тогда
		Запрос.УстановитьПараметр("ВсеСклады", Истина);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВсеСклады", Ложь);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ДокОбъект[ИмяРеквизитаСтруктурнаяЕдиница]);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Ячейка) Тогда
		Запрос.УстановитьПараметр("ВсеЯчейки", Истина);
		Запрос.УстановитьПараметр("Ячейка",ДокОбъект.Ячейка);
	Иначе
		Запрос.УстановитьПараметр("ВсеЯчейки", Ложь);
		Запрос.УстановитьПараметр("Ячейка",ДокОбъект.Ячейка);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокОбъект[ИмяТЧСерииНоменклатуры].Очистить();
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		КоличествоЗаполнить = ВыборкаНомерСтроки.Количество;
		КоличествоСН = 0;
		
		ВыборкаСерииНоменклатуры = ВыборкаНомерСтроки.Выбрать();
		Пока ВыборкаСерииНоменклатуры.Следующий() Цикл
			
			Если КоличествоСН>=КоличествоЗаполнить Тогда
				Прервать;
			КонецЕсли;
			
			НовСтр = ДокОбъект[ИмяТЧСерииНоменклатуры].Добавить();
			НовСтр.Серия = ВыборкаСерииНоменклатуры.Серия;
			НовСтр.КлючСвязи = ВыборкаСерииНоменклатуры.КлючСвязи;
			
			КоличествоСН = КоличествоСН + 1;
			
		КонецЦикла;
		
		ДокОбъект[ИмяТЧЗапасы][ВыборкаНомерСтроки.НомерСтроки-1].СерииНоменклатуры = СтрокаСерииНоменклатуры(ДокОбъект[ИмяТЧСерииНоменклатуры], НовСтр.КлючСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнение серий номенклатуры в строках табличной части
//
// Параметры:
//  Отказ - Признак удавшейся проверки
//  Запасы - Табличная часть "Запасы"
//  СерииНоменклатуры - Список серий
//  СтруктурнаяЕдиница - Структурная единица
//  ВхФорма - Входящая форма
//  ИмяПоляКлючСвязи - Имя поля ключа связи
//  ИмяПоляНоменклатура - Имя поля с номенклатурой
//  ИмяПоляСтруктурнаяЕдиница - Имя поля с структурной единицей
//
Процедура ПроверкаЗаполненияСерийНоменклатуры(Отказ, Знач Запасы, Знач СерииНоменклатуры, СтруктурнаяЕдиница, Знач ВхФорма, ИмяПоляКлючСвязи="КлючСвязи", ИмяПоляНоменклатура = "Номенклатура", ИмяПоляСтруктурнаяЕдиница = "СтруктурнаяЕдиница") Экспорт
	
	ИспользованиеСерийНоменклатуры = ИспользоватьСерииНоменклатурыОстатки();
	
	Если ИспользованиеСерийНоменклатуры = Истина Тогда
		
		// Если склад ордерный, движения по нему по СН делают только ПриходныйОрдер или РасходныйОрдер, для остальных
		// документов проверять заполнение СН не нужно Если склад НЕ ордерный, движения по нему по СН делают ВСЕ остальные
		// документы, нужно проверить заполнение СН. В ПриходныйОрдер или РасходныйОрдер нет складов в табличной части
		РеквизитыНоменклатурыСоответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Запасы.ВыгрузитьКолонку(ИмяПоляНоменклатура), "ИспользоватьСерииНоменклатуры, ВидМаркировки, ИспользоватьУникальныеСерии");
		
		РеквизитыСкладовСоответствие = Неопределено;
		ОрдерныйСклад = Неопределено;
		ЕстьСкладыВТабличнойЧасти = Неопределено;
		
		Если Не СтруктурнаяЕдиница = Неопределено И ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
			ЕстьСкладыВТабличнойЧасти = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ПоложениеСклада", ВхФорма);
			Если ЕстьСкладыВТабличнойЧасти И ВхФорма.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				РеквизитыСкладовСоответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Запасы.ВыгрузитьКолонку(ИмяПоляСтруктурнаяЕдиница), "ОрдерныйСклад");
			Иначе
				ОрдерныйСклад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ОрдерныйСклад");
			КонецЕсли;
		Иначе
			ОрдерныйСклад = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ИмяСтруктурнойЕдиницы = "";
		Иначе
			ИмяСтруктурнойЕдиницы = "[" + СтруктурнаяЕдиница.Наименование + "]";
		КонецЕсли;
		
		МассивКонтроляПоСериям = МассивКонтроляПоСериям(Запасы, ВхФорма, ИмяПоляНоменклатура, СтруктурнаяЕдиница);
		
		Для Каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы[ИмяПоляНоменклатура]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивКонтроляПоСериям.Найти(СтрокаЗапасы.НомерСтроки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИспользоватьСерииНоменклатуры = РеквизитыНоменклатурыСоответствие.Получить(СтрокаЗапасы[ИмяПоляНоменклатура]).ИспользоватьСерииНоменклатуры;
			ИспользоватьУникальныеСерии = РеквизитыНоменклатурыСоответствие.Получить(СтрокаЗапасы[ИмяПоляНоменклатура]).ИспользоватьУникальныеСерии;
			
			Если НЕ ИспользоватьСерииНоменклатуры = Истина Тогда
				Продолжить;
			КонецЕсли;
			ВидМаркировки = РеквизитыНоменклатурыСоответствие.Получить(СтрокаЗапасы[ИмяПоляНоменклатура]).ВидМаркировки;
			
			Если РеквизитыСкладовСоответствие <> Неопределено Тогда
				ОрдерныйСклад = РеквизитыСкладовСоответствие.Получить(СтрокаЗапасы[ИмяПоляСтруктурнаяЕдиница]);
			КонецЕсли;
			
			// Не проверяем Серии номенклатуры на ордерном складе для маркируемой продукции
			Если ОрдерныйСклад = Истина 
				И (ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция ИЛИ ЕстьСкладыВТабличнойЧасти = Истина)Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользоватьСерииНоменклатуры Тогда
			
				Если ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					Коэффициент = КоэффициентЕдиницы(СтрокаЗапасы.ЕдиницаИзмерения);
				Иначе
					Коэффициент = 1;
				КонецЕсли;
				
				СтрокаЗапасыКоличество = СтрокаЗапасы.Количество * Коэффициент;
				
				Если СтрокаЗапасыКоличество < 0 Тогда
					СтрокаЗапасыКоличество = СтрокаЗапасыКоличество * -1;
				КонецЕсли;
				
				Если ИспользоватьУникальныеСерии Тогда
					
					ОтборСерииНоменклатуры = Новый Структура("КлючСвязи", СтрокаЗапасы[ИмяПоляКлючСвязи]);
					ОтборСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(ОтборСерииНоменклатуры);
					
					Если ОтборСерииНоменклатуры.Количество() <> Макс(СтрокаЗапасыКоличество, -СтрокаЗапасыКоличество) Тогда
						ИмяТЧ = Сред(Строка(Запасы), СтрНайти(Строка(Запасы), ".", НаправлениеПоиска.СКонца)+1);
						ТекстСообщения = НСтр("ru = '[%ИмяТЧ%][Управление остатками серий]%Склад% Число серий номенклатуры отличается от количества единиц в строке %Номер%.'");
						ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Серий номенклатуры - %ЧислоНомеров%, нужно %КоличествоВСтроке%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТЧ%", ИмяТЧ);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", ИмяСтруктурнойЕдиницы);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧислоНомеров%", ОтборСерииНоменклатуры.Количество());
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВСтроке%", СтрокаЗапасыКоличество);
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстСообщения;
						Сообщение.Сообщить();
						
						Отказ = Истина;
					КонецЕсли;
					
				Иначе
					
					ЧислоНомеровВСтроке = СерииНоменклатурыУНФКлиентСервер.КоличествоСерийНоменклатурыПоКлючуСвязи(СерииНоменклатуры, СтрокаЗапасы[ИмяПоляКлючСвязи]);
					
					Если Не СтрокаЗапасыКоличество = ЧислоНомеровВСтроке Тогда
						
						ИмяТЧ = Сред(Строка(Запасы), СтрНайти(Строка(Запасы), ".", НаправлениеПоиска.СКонца)+1);
						ТекстСообщения = НСтр("ru = '[%ИмяТЧ%][Управление остатками серий]%Склад% Число серий номенклатуры в строке %Номер% не равно количеству.'");
						ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Серий номенклатуры - %ЧислоНомеров%, нужно %КоличествоВСтроке%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТЧ%", ИмяТЧ);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", ИмяСтруктурнойЕдиницы);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧислоНомеров%", ЧислоНомеровВСтроке);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВСтроке%", СтрокаЗапасыКоличество);
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстСообщения;
						Сообщение.Сообщить();
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли; 
	
	Если ИспользованиеСерийНоменклатуры <> Неопределено Тогда
	
		ВыполнитьКонтрольДублей(Отказ, Запасы, СерииНоменклатуры, ВхФорма, ИмяПоляКлючСвязи);
		
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет поиск дублей серий
//
// Параметры:
//  Отказ - Признак удавшейся проверки
//  Запасы - Табличная часть "Запасы"
//  СерииНоменклатуры - Список серий
//  ВхФорма - Входящая форма
//  ИмяПоляКлючСвязи - Имя поля ключа связи
//
Процедура ВыполнитьКонтрольДублей(Отказ, Знач Запасы, Знач СерииНоменклатуры, Знач ВхФорма, ИмяПоляКлючСвязи) Экспорт
	
	// Проверка Дубли строк.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.Серия КАК Серия
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.КлючСвязи КАК КлючСвязи,
	|	Запасы.Количество КАК Количество
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА Запасы.Количество ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА Запасы.Количество >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ ТаблицаСЗапасами
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|		ПО ТаблицаДокумента.КлючСвязи = Запасы.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента1.КлючСвязи) КАК КлючСвязи,
	|	ТаблицаДокумента1.Серия КАК Серия
	|ИЗ
	|	ТаблицаСЗапасами КАК ТаблицаДокумента1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСЗапасами КАК ТаблицаДокумента2
	|		ПО ТаблицаДокумента1.КлючСвязи <> ТаблицаДокумента2.КлючСвязи
	|			И ТаблицаДокумента1.ЭтоВозврат = ТаблицаДокумента2.ЭтоВозврат
	|			И ТаблицаДокумента1.Серия = ТаблицаДокумента2.Серия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента1.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСвязи";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", СерииНоменклатуры);
	Запрос.УстановитьПараметр("Запасы", Запасы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = НСтр(
				"ru = 'Серийный номер ""%Серия%"", указанный в строке %НомерСтроки%, указан повторно.'"
			);
			
			НомерСтрокиЗапасов = Запасы.Найти(ВыборкаИзРезультатаЗапроса.КлючСвязи, ИмяПоляКлючСвязи);
			Если НомерСтрокиЗапасов<>Неопределено Тогда
				
				Если Не НомерСтрокиЗапасов.Номенклатура.ИспользоватьУникальныеСерии Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтрокиЗапасов.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Серия%", ВыборкаИзРезультатаЗапроса.Серия);
				
				Если ТипЗнч(ВхФорма) = Тип("Структура") И ВхФорма.Свойство("Объект") Тогда
					КлючДанных = ВхФорма.Объект;
				Иначе
					КлючДанных = ВхФорма;
				КонецЕсли;
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "СерииНоменклатуры", , Отказ);
			КонецЕсли;
			

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение серий в поле ввода
//
// Параметры:
//  Отказ - Признак удавшейся проверки
//  Объект - Объект данных
//
Процедура ПроверкаЗаполненияСерийНоменклатурыВПолеВвода(Отказ, Знач Объект) Экспорт
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки() = Истина Тогда
		
		Если Объект.Номенклатура.ИспользоватьСерииНоменклатуры Тогда
			
			Если ТипЗнч(Объект.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				Коэффициент = КоэффициентЕдиницы(Объект.ЕдиницаИзмерения);
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			
			ОбъектКоличество = Объект.Количество * Коэффициент;
			
			Если Объект.СерииНоменклатуры.Количество() <> ОбъектКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Число серий номенклатуры отличается от количества в документе.'");
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Серий номенклатуры - %ЧислоНомеров%, нужно %КоличествоВСтроке%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧислоНомеров%", Объект.СерииНоменклатуры.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВСтроке%", ОбъектКоличество);
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает значение функциональной опции контроля остатков по сериям номенклатуры
//
Функция ИспользоватьСерииНоменклатурыОстатки() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Добавляет серию по шаблону
//
// Параметры:
//  Номенклатура - Ссылка на номенклатуру
//  ШаблонСерииНоменклатуры - Шаблон серии
//
Функция ДобавитьСерия(Номенклатура, ШаблонСерииНоменклатуры) Экспорт

	МаксимальныйНомерИзСправочника = Справочники.СерииНоменклатуры.ВычислитьМаксимальныйНомерСерии(Номенклатура, ШаблонСерииНоменклатуры);
	
	Возврат ДобавитьСерияПоШаблону(МаксимальныйНомерИзСправочника+1, ШаблонСерииНоменклатуры);
	
КонецФункции

// Возвращает признак контроля заполнения серии для номенклатуры
//
// Параметры:
//  Номенклатура - Ссылка на номенклатуру
//  Организация - Ссылка на организация
//  СтруктурнаяЕдиница - Ссылка на склад
//
// Возвращаемое значение:
//  Булево - Контролировать или нет заполнение серии
//
Функция КонтролироватьЗаполнениеСерии(Номенклатура, Организация = Неопределено, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат ?(Номенклатура.ПолитикаУчетаСерий.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий, Ложь, Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Организация = &Организация
	|	И ПолитикиУчетаСерий.Владелец = &Номенклатура
	|	И ПолитикиУчетаСерий.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Не Результат.Количество() Тогда
		 Возврат ?(Номенклатура.ПолитикаУчетаСерий.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий, Ложь, Истина);
	 Иначе
		ПолитикаУчетаСерий = Результат[0].ПолитикаУчетаСерий;
		Возврат ?(ПолитикаУчетаСерий.ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий, Ложь, Истина);
	КонецЕсли;
	
КонецФункции

// Заполняет поля табличной части где есть серии аналитическими данными
//
// Параметры:
//  Объект - Объект заполнения
//  ДополнительныеСвойства - Дополнительные свойства заполнения серий
//
Процедура ЗаполнитьПризнакиИспользованияСерий(Объект, ДополнительныеСвойства = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Материалы", ДополнительныеСвойства, "СерииНоменклатурыМатериалы");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПересортицаЗапасов") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства, "СерииНоменклатурыОприходование");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Продукция", ДополнительныеСвойства, "СерииНоменклатурыПродукция");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект, "Продукция", ДополнительныеСвойства);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КомплектацияЗапасов") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства, "СерииНоменклатурыЗапасы")
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		
		Если ДополнительныеСвойства = Неопределено Тогда 
			ДополнительныеСвойства = Новый Структура;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПолучатель);
		ДополнительныеСвойства.Вставить("НеОбновлятьСтатусыБольшеНоля", Истина);
		
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
		
	Иначе
		СерииНоменклатурыУНФ.ОбновитьСтатусыСерийНоменклатурыВТабличнойЧасти(Объект,, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает политики с доступом по типу документа
//
// Параметры:
//  ТипДокумента - Тип проверяемого документа
//  ВидОперации - Вид операции документа
//  ТипПолитики - Тип политики
//
// Возвращаемое значение:
//  Массив - Массив доступных политик.
//
Функция МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации, ТипПолитики = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	Запрос.УстановитьПараметр("Операция", ВидОперации);
	
	Если Не ТипПолитики = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипПолитики", ТипПолитики);
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолитикаУчетаСерийНастройкиПолитики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолитикаУчетаСерий.НастройкиПолитики КАК ПолитикаУчетаСерийНастройкиПолитики
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ПолитикаУчетаСерийНастройкиПолитики.Операция = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПолитикаУчетаСерийНастройкиПолитики.Операция = &Операция
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ПолитикаУчетаСерийНастройкиПолитики.ТипДокумента = &ТипДокумента
		|	И ПолитикаУчетаСерийНастройкиПолитики.Ссылка.ТипПолитики = &ТипПолитики";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолитикаУчетаСерийНастройкиПолитики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолитикаУчетаСерий.НастройкиПолитики КАК ПолитикаУчетаСерийНастройкиПолитики
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ПолитикаУчетаСерийНастройкиПолитики.Операция = НЕОПРЕДЕЛЕНО
		|				ТОГДА ПолитикаУчетаСерийНастройкиПолитики.Операция = &Операция
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ПолитикаУчетаСерийНастройкиПолитики.ТипДокумента = &ТипДокумента"
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСерииПоСтрокеСНулевымСтатусом(Объект, СтрокаССериями, ИмяТабличнойЧастиСерии)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПересортицаЗапасов") Тогда
		ИмяПоляСерииНоменклатуры = "СерииНоменклатурыОприходование";
	Иначе
		ИмяПоляСерииНоменклатуры = "СерииНоменклатуры";
	КонецЕсли;
	
	КлючСвязи = СтрокаССериями.КлючСвязи;
	
	Если КлючСвязи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
	
	СтрокиКУдалению = Объект[ИмяТабличнойЧастиСерии].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаСерий Из СтрокиКУдалению Цикл
		Объект[ИмяТабличнойЧастиСерии].Удалить(СтрокаСерий);
	КонецЦикла;
	
	СтрокаССериями[ИмяПоляСерииНоменклатуры] = "";
	
КонецПроцедуры

Функция МассивКонтроляПоСериям(ТаблицаОбъекта, ВходящийОбъект, ИмяПоляНоменклатура, Знач СтруктурнаяЕдиница = Неопределено) 
	
	Если ТипЗнч(ТаблицаОбъекта) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНоменклатурыДокумента = ТаблицаОбъекта;
	Иначе
		ТаблицаНоменклатурыДокумента = ТаблицаОбъекта.Выгрузить();
	КонецЕсли;
	
	Если ТипЗнч(ВходящийОбъект) = Тип("Структура") Тогда
		Объект = ВходящийОбъект.Объект;
	Иначе
		Объект = ВходящийОбъект;
	КонецЕсли;
	
	ЭтоЗаказПокупателя = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя"), Истина, Ложь);
	ЭтоПеремещениеЗапасов = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПеремещениеЗапасов"), Истина, Ложь);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если Не ЭтоЗаказПокупателя Тогда
		Если ТаблицаНоменклатурыДокумента.Колонки.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.СтруктурныеЕдиницы"));
			ОписаниеТиповСтруктурнаяЕдиница = Новый ОписаниеТипов(МассивТипов);
			ТаблицаНоменклатурыДокумента.Колонки.Добавить("СтруктурнаяЕдиница", ОписаниеТиповСтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыДокумента", ТаблицаНоменклатурыДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если ЭтоЗаказПокупателя И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ВидОперации = Неопределено;
		ТипДокумента = "Заказ-наряд";
		
	Иначе
		
		ТипДокумента = Строка(ТипЗнч(Объект.Ссылка));
		
		Если Не МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") = Неопределено Тогда
			ВидОперации = Объект.ВидОперации;
		Иначе
			ВидОперации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоПеремещениеЗапасов Тогда
		
		Если Не МетаданныеОбъекта.Реквизиты.Найти("СтруктурнаяЕдиница") = Неопределено Тогда
			СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		Иначе
			Если ЭтоЗаказПокупателя Тогда
				СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв
			Иначе
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	МассивДоступныхПолитик = МассивПолитикСДоступомКДокументу(ТипДокумента, ВидОперации, Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий);
	Запрос.УстановитьПараметр("МассивДоступныхПолитик", МассивДоступныхПолитик);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаНоменклатурыДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА &СтруктурнаяЕдиница
	|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВыборкаИзТабличнойЧастиЗапасы
	|ИЗ
	|	&ТаблицаНоменклатурыДокумента КАК ТаблицаНоменклатурыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыборкаИзТабличнойЧастиЗапасы.Номенклатура КАК Номенклатура,
	|	ВыборкаИзТабличнойЧастиЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВыборкаИзТабличнойЧастиЗапасы КАК ВыборкаИзТабличнойЧастиЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ВыборкаИзТабличнойЧастиЗапасы.СтруктурнаяЕдиница = ПолитикиУчетаСерий.СтруктурнаяЕдиница
	|			И (&Организация = ПолитикиУчетаСерий.Организация)
	|			И ВыборкаИзТабличнойЧастиЗапасы.Номенклатура = ПолитикиУчетаСерий.Владелец
	|ГДЕ
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий, ВыборкаИзТабличнойЧастиЗапасы.Номенклатура.ПолитикаУчетаСерий) В (&МассивДоступныхПолитик)";
	
	
	Если ИмяПоляНоменклатура = "НоменклатураОприходование" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.Номенклатура", "ТаблицаНоменклатурыДокумента.НоменклатураОприходование");
	КонецЕсли;
	
	Если ЭтоЗаказПокупателя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиница", "ТаблицаНоменклатурыДокумента.СтруктурнаяЕдиницаРезерв");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	
	МассивНомеровПроверяемыхСтрок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивНомеровПроверяемыхСтрок.Добавить(Выборка.НомерСтроки);
	КонецЦикла;
	
	Возврат МассивНомеровПроверяемыхСтрок;
	
КонецФункции

Функция МассивТиповОбрабатываемыхДокументов()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИнвентаризацияЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОприходованиеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеПоЯчейкам"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПересортицаЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходныйОрдер"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РаспределениеЗатрат"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйОрдер"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СборкаЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЧекККМВозврат"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КомплектацияЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОСписании"));
	
	Возврат МассивТипов;
	
КонецФункции

Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры

Функция КоэффициентЕдиницы(ЕдиницаИзмерения)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Коэффициент");
	
КонецФункции

Функция ДобавитьСерияПоШаблону(ТекущийМаксимальныйНомер, ШаблонСерииНоменклатуры)
		
	НомерЧисло = ТекущийМаксимальныйНомер;
	
	Если ЗначениеЗаполнено(ШаблонСерииНоменклатуры) Тогда
		// Длина цифровой части номера - не более 13 символов
		ЦифрВШаблоне = СтрЧислоВхождений(ШаблонСерииНоменклатуры, СерииНоменклатурыУНФКлиентСервер.СимволЧисла());
		НомерСНулями = Формат(НомерЧисло, "ЧЦ="+ЦифрВШаблоне+"; ЧВН=; ЧГ=");
		
		НовыйНомерПоШаблону = "";
		НомерСимволаСН = 1;
		// Заполняем шаблон
		Для СимволСерииНоменклатуры=1 По СтрДлина(ШаблонСерииНоменклатуры) Цикл
			Символ = Сред(ШаблонСерииНоменклатуры,СимволСерииНоменклатуры,1);
			Если Символ=СерииНоменклатурыУНФКлиентСервер.СимволЧисла() Тогда
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Сред(НомерСНулями,НомерСимволаСН,1);
				НомерСимволаСН = НомерСимволаСН+1;
			Иначе
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Символ;
			КонецЕсли;
		КонецЦикла;
		НовыйНомер = НовыйНомерПоШаблону;
	Иначе
		НовыйНомер = Формат(НомерЧисло, "ЧЦ=8; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Новый Структура("НовыйНомер, НовыйНомерЧисло", НовыйНомер, НомерЧисло);
	
КонецФункции

#КонецОбласти