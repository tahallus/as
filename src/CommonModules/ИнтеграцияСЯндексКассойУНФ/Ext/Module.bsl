////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассойУНФ: переопределение процедур механизма интеграции с Яндекс.Кассой.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСПодсистемой

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриОпределенииДополнительныхНастроекЯндексКассы
Процедура ПриОпределенииДополнительныхНастроекЯндексКассы(ДополнительныеНастройки) Экспорт
	
	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "БанковскийСчет";
	СтрокаНастройки.Представление = НСтр("ru = 'Банковский счет'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "Эквайер";
	СтрокаНастройки.Представление = НСтр("ru = 'Эквайер'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");

	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "ЭквайринговыйТерминал";
	СтрокаНастройки.Представление = НСтр("ru = 'Эквайринговый терминал'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЭквайринговыеТерминалы");
	
	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "Касса";
	СтрокаНастройки.Представление = НСтр("ru = 'Касса ККМ'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
	
	СтрокаНастройки = ДополнительныеНастройки.Добавить();
	СтрокаНастройки.Настройка = "СтатьяОплаты";
	СтрокаНастройки.Представление = НСтр("ru = 'Статья для оплаты от покупателя'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриСозданииФормыНастроекЯндексКассы
Процедура ПриСозданииФормыНастроекЯндексКассы(Форма, Группа, Префикс, ДополнительныеНастройки) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы(
		Префикс + "БанковскийСчет",
		Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"),
		,
		НСтр("ru = 'Банковский счет'"),
		Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("БанковскийСчет", Реквизит.Имя);
		
	Реквизит = Новый РеквизитФормы(
		Префикс + "Эквайер",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),
		,
		НСтр("ru = 'Эквайер'"),
		Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("Эквайер", Реквизит.Имя);
	
	Реквизит = Новый РеквизитФормы(
		Префикс + "ЭквайринговыйТерминал",
		Новый ОписаниеТипов("СправочникСсылка.ЭквайринговыеТерминалы"),
		,
		НСтр("ru = 'Эквайринговый терминал'"),
		Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("ЭквайринговыйТерминал", Реквизит.Имя);
	
	Реквизит = Новый РеквизитФормы(
		Префикс + "Касса",
		Новый ОписаниеТипов("СправочникСсылка.КассыККМ"),
		,
		НСтр("ru = 'Касса ККМ'"),
		Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("Касса", Реквизит.Имя);
	
	Реквизит = Новый РеквизитФормы(
		Префикс + "СтатьяОплаты",
		Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"),
		,
		НСтр("ru = 'Статья для оплаты от покупателя'"),
		Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ДополнительныеНастройки.Вставить("СтатьяОплаты", Реквизит.Имя);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ТипПолеФормы = Тип("ПолеФормы");
	Элементы = Форма.Элементы;
	
	ГруппаНастройкиУчета = Элементы.Добавить(Префикс + "ГруппаНастройкиУчета", Тип("ГруппаФормы"), Группа);
	ГруппаНастройкиУчета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастройкиУчета.Заголовок = "";
	ГруппаНастройкиУчета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНастройкиУчета.ОтображатьЗаголовок = Истина;
	ГруппаНастройкиУчета.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	
	ИмяРеквизита = Префикс + "БанковскийСчет";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.Подсказка = НСтр("ru = 'Банковский счет, указанный в договоре, на который будут перечисляться денежные средства'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Поле.АвтоОтметкаНезаполненного = Истина;
	
	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация");
	ВсеСвязи = Новый Массив();
	ВсеСвязи.Добавить(Связь);
	ВсеСвязиФикс = Новый ФиксированныйМассив(ВсеСвязи);
	Поле.СвязиПараметровВыбора = ВсеСвязиФикс; 
	
	ИмяРеквизита = Префикс + "СтатьяОплаты";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Подсказка = НСтр("ru = 'Статья ДДС для подстановки в документы оплаты'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Поле.АвтоОтметкаНезаполненного = Истина;
	
	ИмяРеквизита = Префикс + "Эквайер";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Подсказка = НСтр("ru = 'Организация-партнер, с которой заключен договор эквайринга. 
								|Оставьте это поле пустым и эквайер будет создан автоматически'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Поле.АвтоОтметкаНезаполненного = Ложь;
	Поле.ПодсказкаВвода = "ООО НКО ""ЮМани"" - Будет создан автоматически";

	ИмяРеквизита = Префикс + "ЭквайринговыйТерминал";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Подсказка = НСтр("ru = 'Виртуальный эквайринговый терминал для операций по ЮKassa
								|Оставьте это поле пустым и виртуальный эквайринговый терминал будет создан автоматически'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Поле.АвтоОтметкаНезаполненного = Ложь;
	Поле.ПодсказкаВвода = НСтр("ru = 'ЮKassa - Будет создан автоматически'");
	
	Связь = Новый СвязьПараметраВыбора("Отбор.Организация", "Организация");
	ВсеСвязи = Новый Массив();
	ВсеСвязи.Добавить(Связь);
	ВсеСвязиФикс = Новый ФиксированныйМассив(ВсеСвязи);
	Поле.СвязиПараметровВыбора = ВсеСвязиФикс; 
	
	ИмяРеквизита = Префикс + "Касса";
	Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, ГруппаНастройкиУчета);
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = ИмяРеквизита;
	Поле.Подсказка = НСтр("ru = 'Касса ККМ для пробития чеков оплат, которые осуществляются через ЮKassa'");
	Поле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Поле.АвтоОтметкаНезаполненного = Истина;
	Поле.ПодсказкаВвода = НСтр("ru = 'Касса ККМ'");
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПередНачаломРедактированияДополнительныхНастроекЯндексКассы
Процедура ПередНачаломРедактированияДополнительныхНастроекЯндексКассы(Контекст, Отказ = Ложь) Экспорт
	
	ПолеБанковскийСчет   = Контекст.Префикс + "БанковскийСчет";
	ПолеСтатьяОплаты     = Контекст.Префикс + "СтатьяОплаты";
	ПолеЭквайер   		 = Контекст.Префикс + "Эквайер";
	ПолеЭТ 				 = Контекст.Префикс + "ЭквайринговыйТерминал";
	ПолеКасса     		 = Контекст.Префикс + "Касса";
	
	// Касса необходимо только когда чеки пробивают самостоятельно
	ИспользуетсяКассаККМ = Контекст.Форма.ОтправкаЧековЧерезЯндекс = 0 ИЛИ НЕ Контекст.СДоговором;
	
	Контекст.Форма.Элементы[ПолеКасса].Видимость =  ИспользуетсяКассаККМ;
	Контекст.Форма.Элементы[ПолеКасса].АвтоОтметкаНезаполненного = ИспользуетсяКассаККМ;
		 
	Если НЕ Контекст.НоваяНастройка Тогда  //Если открыта созданная ранее настройка, реквизиты по-умолчанию не заполняются
		Возврат;
	КонецЕсли;
		
	СтруктураПараметровЭТ = Новый Структура;
	СтруктураПараметровЭТ.Вставить("Организация", Контекст.Организация);
	СтруктураПараметровЭТ.Вставить("Эквайер", Контекст.Форма[ПолеЭквайер]);
	СтруктураПараметровЭТ.Вставить("НеСоздавать", Истина);
	
	Контекст.Форма[ПолеБанковскийСчет] = Контекст.Организация.БанковскийСчетПоУмолчанию;
	Контекст.Форма[ПолеСтатьяОплаты]   = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	Контекст.Форма[ПолеЭквайер] 	   = НайтиИлиСоздатьЭквайераПоУмолчанию(Контекст.Организация);
	Контекст.Форма[ПолеЭТ] 			   = НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию(СтруктураПараметровЭТ);
	
	Если ИспользуетсяКассаККМ Тогда //Чеки пробивает сама организация
		
		Если ЗначениеЗаполнено(Контекст.Форма[ПолеЭТ]) Тогда
			Контекст.Форма[ПолеКасса] = Контекст.Форма[ПолеЭТ].Касса;
		Иначе
			Контекст.Форма[ПолеКасса] = НайтиОсновнуюКассуККМ();
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПередОкончаниемРедактированияДополнительныхНастроекЯндексКассы 
Процедура ПередОкончаниемРедактированияДополнительныхНастроекЯндексКассы(Контекст, Отказ = Ложь) Экспорт
	
	ИмяРеквизита = Контекст.Префикс + "БанковскийСчет";
	Если Не ЗначениеЗаполнено(Контекст.Форма[ИмяРеквизита]) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен банковский счет'"),, ИмяРеквизита);
		Отказ = Истина;
	КонецЕсли;
	
	ИмяРеквизита = Контекст.Префикс + "СтатьяОплаты";
	Если Не ЗначениеЗаполнено(Контекст.Форма[ИмяРеквизита]) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена статья оплаты'"),, ИмяРеквизита);
		Отказ = Истина;
	КонецЕсли;
	
	ИмяРеквизита = Контекст.Префикс + "Эквайер";
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(Контекст.Форма[ИмяРеквизита]) Тогда
		ЭквайерПоУмолчанию = НайтиИлиСоздатьЭквайераПоУмолчанию(Контекст.Организация, Истина);
		Контекст.Форма[ИмяРеквизита] = ЭквайерПоУмолчанию;
	КонецЕсли; 
	
	ИмяРеквизита = Контекст.Префикс + "ЭквайринговыйТерминал";
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(Контекст.Форма[ИмяРеквизита]) Тогда
		
		ПолеЭквайер = Контекст.Префикс + "Эквайер";
		ПолеКасса   = Контекст.Префикс + "Касса";

		СтруктураПараметровЭТ = Новый Структура;
		СтруктураПараметровЭТ.Вставить("Организация", Контекст.Организация);
		СтруктураПараметровЭТ.Вставить("Эквайер", Контекст.Форма[ПолеЭквайер]);
		Если ЗначениеЗаполнено(Контекст.Форма[ПолеКасса]) Тогда
			СтруктураПараметровЭТ.Вставить("Касса", Контекст.Форма[ПолеКасса]);
		КонецЕсли; 
		
		Контекст.Форма[ИмяРеквизита] = НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию(СтруктураПараметровЭТ);;
		
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет в форму подготовки платежной ссылки элементы для отправки в кабинет клиента
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма подготовки платежной ссылки
//
Процедура ПриСозданииФормыПодготовкиПлатежнойСсылки(Форма) Экспорт
	
	ОснованиеПлатежа = Форма.ОснованиеПлатежа;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОснованиеПлатежа, "СозданИзКабинетаКлиента") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОснованиеПлатежа.СозданИзКабинетаКлиента Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Форма.ВариантОтправки = "КабинетКлиента"; // Не локализуется
		
		Элементы = Форма.Элементы;
		
		ГруппаКабинетКлиента = Элементы.Добавить("ГруппаВариантОтправкиКабинетКлиента",Тип("ГруппаФормы"), Элементы.ГруппаВариантОтправкиПереключатели);
		ГруппаКабинетКлиента.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКабинетКлиента.ОтображатьЗаголовок = Ложь;
		ГруппаКабинетКлиента.Объединенная = Ложь;
		Переключатель = Элементы.Добавить("ВариантОтправкиКабинетКлиента", Тип("ПолеФормы"), ГруппаКабинетКлиента);
		Переключатель.Вид = ВидПоляФормы.ПолеПереключателя;
		Переключатель.ПутьКДанным = "ВариантОтправки";
		Переключатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Переключатель.СписокВыбора.Добавить("КабинетКлиента", "Push");
		
		ДекорацияКартинка = Элементы.Добавить("ДекорацияКабинетКлиента", Тип("ДекорацияФормы"), ГруппаКабинетКлиента);
		ДекорацияКартинка.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияКартинка.Картинка = БиблиотекаКартинок.КабинетКлиентаИконка;
		ДекорацияКартинка.Ширина = 2;
		ДекорацияКартинка.Высота = 1;
		ДекорацияКартинка.РазмерКартинки = РазмерКартинки.Пропорционально;
		ДекорацияКартинка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		ДекорацияНадпись = Элементы.Добавить("НадписьВариантОтправкиКабинетКлиента", Тип("ДекорацияФормы"), ГруппаКабинетКлиента);
		ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияНадпись.Заголовок = НСтр("ru = 'Кабинет клиента'");
		ДекорацияНадпись.РастягиватьПоГоризонтали = Истина;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСЯндексКассойУНФ.ПриДобавленииОплатыЧерезКабинетКлиента'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.ОбщиеМодули.ИнтеграцияСЯндексКассойУНФ,
									,
									ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Добавляет в форму подготовки платежной ссылки элементы для отправки в кабинет клиента
//
// Параметры:
// 	ОснованиеПлатежа - ДокументСсылка - Ссылка на отправляемый документ
// 	ПлатежнаяСсылка - Строка - Ссылка на оплату в Яндекс.Кассе
//
Процедура ПриОтправкеПлатежнойСсылкиВКабинетКлиента(ОснованиеПлатежа, ПлатежнаяСсылка) Экспорт
	
	Попытка
		ДокументОбъект = ОснованиеПлатежа.ПолучитьОбъект();
		ДокументОбъект.СсылкаДляОплаты = ПлатежнаяСсылка;
		ДокументОбъект.ДатаИзменения = ТекущаяДатаСеанса();
		ДокументОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСЯндексКассойУНФ.ПриОтправкеПлатежнойСсылкиВКабинетКлиента'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.ОбщиеМодули.ИнтеграцияСЯндексКассойУНФ,
									,
									ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымРешением

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриОпределенииОснованийПлатежа.
Процедура ПриОпределенииОснованийПлатежа(ОснованияПлатежа) Экспорт
	
	ТипыОснованийПлатежа = ПолучитьСписокТиповОснованийПлатежаДляЯндексКассы();
	
	Для каждого ТипОснования Из ТипыОснованийПлатежа Цикл
		ОснованияПлатежа.Добавить("Документ." + ТипОснования);
	КонецЦикла; 
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриПроверкеЗаполненияОснованияПлатежа
Процедура ПриПроверкеЗаполненияОснованияПлатежа(Знач ОснованиеПлатежа, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПлатежа.ИдентификаторПлатежа) Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.КлючДанных = ОснованиеПлатежа;
		СообщениеОбОшибке.Текст = НСтр("ru = 'Данный документ был создан раньше, чем интеграция с ЮKassa появилась в УНФ.
										|Перед отправкой его необходимо перезаписать!'");
		СообщениеОбОшибке.Сообщить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПлатежа.СуммаДокумента) Тогда
		Отказ = Истина;
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.КлючДанных = ОснованиеПлатежа;
		СообщениеОбОшибке.Текст = НСтр("ru = 'Невозможно сформировать платежную ссылку, поскольку сумма документа = 0!'");
		СообщениеОбОшибке.Сообщить();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если ЕстьОплатаПоДокументу(ОснованиеПлатежа) Тогда
			СообщениеОЧастичнойОплате = Новый СообщениеПользователю;
			СообщениеОЧастичнойОплате.КлючДанных = ОснованиеПлатежа;
			СообщениеОЧастичнойОплате.Текст = НСтр("ru = 'Внимание! По данному документу есть аванс или оплата. 
											|ЮKassa не поддерживает частичные оплаты, поэтому будет отправлен счет на полную сумму документа.'");
			СообщениеОЧастичнойОплате.Сообщить();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьРеквизитыОрганизации
Процедура ЗаполнитьРеквизитыОрганизации(Знач Организация, Реквизиты) Экспорт
	
	Реквизиты.ИНН 		= Организация.ИНН;
	Реквизиты.КПП 		= Организация.КПП;
	Реквизиты.Резидент  = НЕ Организация.ИностраннаяОрганизация;
	Реквизиты.ЭтоЮрЛицо = (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
КонецПроцедуры

// Заполняет данные по основанию платежа, необходимые для формирование ссылки на оплату через Яндекс.Кассу.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, данные которого нужно заполнить.
//  ДанныеОснованияПлатежа - Структура - данные основания платежа:
//   * Идентификатор - Строка - уникальный идентификатор основание платежа (идентификатора платежа при получении
//                              операций оплаты/возврата).
//   * Номер - Строка - номер основание платежа.
//   * Сумма - Число - сумма к оплате.
//   * Валюта - Строка - код валюты по классификатору валют.
//   * НазначениеПлатежа - Строка - назначение платежа.
//   * БанковскийСчет - Структура - банковский счет для зачисления оплаты:
//    ** БанкБИК - Строка - БИК банка.
//    ** БанкНаименование - Строка - наименование банка.
//    ** БанкКоррСчет - Строка - корр. счет банка.
//    ** НомерСчета - Строка - номер расчетного счета.
//   * Продавец - Структура - данные продавца:
//    ** УчетнаяПолитика - Число - код учетной политики продавца: 1 - ОСН, 2 - УСН (доходы), 3 - УСН (доходы минус
//                                                                расходы), 4 - продажа облагается ЕНВД,
//                                                                5 - единый сельскохозяйственный налог, 6 - патентная СН.
//    ** ИНН - Строка - ИНН продавца.
//    ** КПП - Строка - КПП продавца.
//    ** Наименование - Строка - наименование продавца.
//    ** Телефон - Строка - контактный телефон продавца.
//    ** ЭлектроннаяПочта - Строка - контактный адрес электронной почты продавца.
//    ** ФактическийАдрес - Строка - фактический адрес продавца.
//    ** ЮридическийАдрес - Строка - юридический адрес продавца.
//   * Покупатель - Структура - данные покупателя:
//    ** Идентификатор - Строка - уникальный идентификатор покупателя.
//    ** Наименование - Строка - наименование покупателя.
//    ** КонтактныеДанныеЧека - Строка - номер телефона или адрес электронной почты для отправки чека. Может быть
//                                       переопределен в форме формирования платежной ссылки.
//   * Номенклатура - ТаблицаЗначений - номенклатура к оплате. Колонки:
//    ** НомерСтроки - Число - номер строки по порядку.
//    ** Наименование - Строка - наименование товара/услуги.
//    ** НаименованиеПолное - Строка - полное наименование товара/услуги.
//    ** Характеристика - Строка - характеристика номенклатуры.
//    ** Количество - Число - количество позиций.
//    ** Цена - Число - цена за единицу.
//    ** СтавкаНДС - Строка - представление ставки НДС.
//    ** СтавкаНДСКод - Число - код ставки НДС. 
//       до 31.12.2018 действуют следующие коды ставок НДС: 1 - без НДС, 2 - 0%, 3 - 10%, 4 - 18%, 5 - 10/110, 6 - 18/118.
//       с  01.01.2019 действуют следующие коды ставок НДС: 1 - без НДС, 2 - 0%, 3 - 10%, 4 - 20%, 5 - 10/110, 6 - 20/120.
//    ** Валюта - Строка - представление валюты строки.
//    ** Артикул - Строка - артикул номенклатуры.
//    ** ЕдиницаИзмерения - Строка - представление единицы измерения.
//    ** ВидНоменклатуры - Строка - вид номенклатуры.
//    ** Родитель - Строка - группа номенклатуры.
//    ** Сумма - Число - сумма строки.
//    ** ПредметРасчета - Число - признак предмета расчета (категория товара для налоговой инспекции).
//                                Возможные значения:
//                                1 - товар;
//                                2 - подакцизный товар;
//                                3 - работа;
//                                4 - услуга;
//                                5 - ставка в азартной игре;
//                                6 - выигрыш в азартной игре;
//                                7 - лотерейный билет;
//                                8 - выигрыш в лотерею;
//                                9 - результаты интеллектуальной деятельности;
//                                10 - платеж;
//                                11 - агентское вознаграждение;
//                                12 - несколько вариантов;
//                                13 - другое.
//   * Штрихкоды - ТаблицаЗначений - штрихкоды номенклатуры. Колонки:
//    ** НомерСтроки - Число - номер строки номенклатуры, к которой относится штрихкод.
//    ** Штрихкод - Строка - штрихкод номенклатуры.
//
Процедура ЗаполнитьДанныеОснованияПлатежа(Знач ОснованиеПлатежа, ДанныеОснованияПлатежа) Экспорт
	
	// Для заказов из МЛК создается прямая ссылка на оплату
	Если ТипЗнч(ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОснованиеПлатежа, "СозданИзКабинетаКлиента") Тогда
		
		ДанныеОснованияПлатежа.ПропускатьСтраницуСчета = ОснованиеПлатежа.СозданИзКабинетаКлиента;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ПолучитьТекстЗапросаОснованияПлатежа(ОснованиеПлатежа);
	Запрос.УстановитьПараметр("ОснованиеПлатежа", ОснованиеПлатежа);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка 		= Результаты[0].Выбрать();
	ВыборкаНоменклатура = Результаты[1].Выбрать();
	ВыборкаШтрихКоды 	= Результаты[2].Выбрать();
	
	// Шапка основания платежа
	Если ВыборкаШапка.Следующий() Тогда
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.Дата,, ВыборкаШапка.БанковскийСчет);
		СведенияОКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ВыборкаШапка.Контрагент, ВыборкаШапка.Дата);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ВыборкаШапка.Дата, ВыборкаШапка.Номер, ВыборкаШапка.Организация.Префикс);
		
		ДанныеОснованияПлатежа.Идентификатор = ВыборкаШапка.Идентификатор;
		ДанныеОснованияПлатежа.Номер = ВыборкаШапка.Номер;
		ДанныеОснованияПлатежа.Сумма = ВыборкаШапка.СуммаДокумента;
		ДанныеОснованияПлатежа.Валюта = ВыборкаШапка.ВалютаДокументаКод;
		ДанныеОснованияПлатежа.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Оплата по счету %1 от %2'"),
													НомерДокумента, Формат(ВыборкаШапка.Дата, "ДЛФ=D"));
		ДанныеОснованияПлатежа.БанковскийСчет.БанкБИК = СведенияОбОрганизации.БИК;
		ДанныеОснованияПлатежа.БанковскийСчет.БанкНаименование = СведенияОбОрганизации.Банк;
		ДанныеОснованияПлатежа.БанковскийСчет.БанкКоррСчет = СведенияОбОрганизации.КоррСчет;
		ДанныеОснованияПлатежа.БанковскийСчет.НомерСчета = СведенияОбОрганизации.НомерСчета;
		ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика = КодСистемыНалогообложения(ВыборкаШапка.Организация, ВыборкаШапка.Дата);
		ДанныеОснованияПлатежа.Продавец.ИНН = СведенияОбОрганизации.ИНН;
		ДанныеОснованияПлатежа.Продавец.КПП = СведенияОбОрганизации.КПП;
		ДанныеОснованияПлатежа.Продавец.Наименование =  СведенияОбОрганизации.ПолноеНаименование;
		ДанныеОснованияПлатежа.Продавец.Телефон = СведенияОбОрганизации.Телефоны;
		ДанныеОснованияПлатежа.Продавец.ЭлектроннаяПочта = СведенияОбОрганизации.ЭлектроннаяПочта;
		ДанныеОснованияПлатежа.Продавец.ФактическийАдрес = СведенияОбОрганизации.ФактическийАдрес;
		ДанныеОснованияПлатежа.Продавец.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
		ДанныеОснованияПлатежа.Покупатель.Идентификатор = СведенияОКонтрагенте.ПолноеНаименование;
		ДанныеОснованияПлатежа.Покупатель.Наименование = СведенияОКонтрагенте.ПолноеНаименование;
		ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = СведенияОКонтрагенте.ЭлектроннаяПочта;
		
	КонецЕсли;
	
	// Табличная часть основания платежа
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		СтрокаНоменклатуры = ДанныеОснованияПлатежа.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, ВыборкаНоменклатура);
		
		// Для соответствия требованиям ФФД 1.05
		ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(ВыборкаНоменклатура.Номенклатура);
		ПредметРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ПризнакПредметаРасчета);
		Если ПредметРасчета <> Неопределено Тогда
			 СтрокаНоменклатуры.ПредметРасчета = ПредметРасчета; 
		КонецЕсли;
		
	КонецЦикла;
	
	//Штрихкоды
	Пока ВыборкаШтрихКоды.Следующий() Цикл
		
		СтрокаШтрихкоды = ДанныеОснованияПлатежа.Штрихкоды.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаШтрихкоды, ВыборкаШтрихКоды);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа
Процедура ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(Знач ОснованиеПлатежа, КонтактнаяИнформация) Экспорт
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
	СведенияОКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Контрагент, ТекущаяДатаСеанса());
	
	КонтактнаяИнформация.ЭлектроннаяПочта.Добавить(СведенияОКонтрагенте.ЭлектроннаяПочта);
	КонтактнаяИнформация.Телефоны.Добавить(СведенияОКонтрагенте.Телефоны);
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриФормированииСпискаПолучателейСообщения
Процедура ПриФормированииСпискаПолучателейСообщения(Знач ОснованиеПлатежа, Знач ВариантОтправки, Получатели) Экспорт
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
	Телефон = ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	АдресЭП = ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		// Для корректной обработки контактной информации в форме отправки письма, 
		// необходимо подменить список значений Получатели на массив структур
		СписокПолучателей = Новый Массив; 
		
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Адрес", АдресЭП);
		СтруктураПолучателя.Вставить("Представление", Контрагент.НаименованиеПолное);
		СтруктураПолучателя.Вставить("ИсточникКонтактнойИнформации", Контрагент);
		СписокПолучателей.Добавить(СтруктураПолучателя);
		
		Получатели = СписокПолучателей;
		
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		Получатели.Добавить(Телефон);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

// Начинает фоновое выполнение загрузки операций по Яндекс.Кассе.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - параметры загрузки операций.
//   * Период - СтандартныйПериод, Структура - Период за который будут выбираться операции по Яндекс.Кассе.
//    ** ДатаНачала - Дата - начало периода запроса. 
//                           Если не указан, дата начала будет определена автоматически.
//    ** ДатаОкончания - Дата - окончание периода запроса. 
//                              Если не указан, дата окончания будет равна текущей дате.
//   * Организация - ОпределяемыйТип.Организация - организация, по которой нужно отобрать операции. 
//                                                 Если не указана то, будут обработаны все действительные настройки;
//   * СДоговором - Булево, Неопределено - позволяет указать для каких настроек следует загружать операции:
//    ** Неопределено - будут загружены и операции по схемам "С договором" и "Без договора"
//    ** Истина - будут загружены операции по схеме "С договором"
//    ** Ложь - будут загружены операции по схеме "Без договора"
//    Если указан параметр Организация, этот параметр не учитывается.
//
// Возвращаемое значение:
//  Структура - описание длительной операции. См. ДлительныеОперации.ВыполнитьВФоне.
//
Функция НачатьЗагрузкуОперацийПоЯндексКассе(ПараметрыЗагрузки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка операций по ЮKassa'");
	
	ИмяПроцедуры = "ИнтеграцияСЯндексКассойУНФ.ЗагрузитьОперацииПоЯндексКассеВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗагрузки, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Только для служебного использования.
// Вызывается с помощью ДлительныеОперации.ВыполнитьВФоне.
//
Процедура ЗагрузитьОперацииПоЯндексКассеВФоне(Параметры, АдресРезультата) Экспорт
	
	РезультатЗагрузкиОпераций = ИнтеграцияСЯндексКассой.ЗагрузитьОперацииПоЯндексКассе(Параметры.Период, Параметры.Организация, Параметры.СДоговором);
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатЗагрузкиОпераций", РезультатЗагрузкиОпераций);
	Результат.Вставить("ПоказыватьОповещениеПользователя", Параметры.ПоказыватьОповещениеПользователя);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаССервисом

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПриЗагрузкеОперацийПоЯндексКассе
Процедура ПриЗагрузкеОперацийПоЯндексКассе(Знач Операции, Результат, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоЗагруженныхОпераций", 0);
	Результат.Вставить("КоличествоНезагруженныхОпераций", 0);
	
	ТипыОснованийПлатежаДляЯндексКассы = ПолучитьСписокТиповОснованийПлатежаДляЯндексКассы();
	
	ОперацииКЗагрузке = НеучтенныеОперации(Операции.ОперацииМассивСтруктур);
	ЕстьАвтоФискализация = ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией();
	
	Для каждого Операция Из ОперацииКЗагрузке Цикл
		
		Если Операция.ВидОперации = "Оплата" Тогда
			
			СуммаКЗачислению = ?(Операция.СуммаКЗачислениюНаСчетОрганизации = Неопределено, Операция.СуммаДокумента, Операция.СуммаКЗачислениюНаСчетОрганизации);  
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Дата", Операция.ДатаОплаты);
			ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя);
			ДанныеЗаполнения.Вставить("СпособОплаты", Операция.СпособОплаты);
			ДанныеЗаполнения.Вставить("СуммаДокумента", Операция.СуммаДокумента);
			ДанныеЗаполнения.Вставить("СуммаКомиссииПоДоговору", Операция.СуммаДокумента - СуммаКЗачислению);
			ДанныеЗаполнения.Вставить("СсылочныйНомер", Операция.ИдентификаторПлатежа);
			ДанныеЗаполнения.Вставить("БанковскийСчет", Операция.БанковскийСчет);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", Операция.ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ВалютаДенежныхСредств", Операция.БанковскийСчет.ВалютаДенежныхСредств);
			ДанныеЗаполнения.Вставить("СпособОплаты", Перечисления.СпособыОплатыЭквайринг.ОплатаОнлайн);
			ДанныеЗаполнения.Вставить("НомерПлатежнойКарты", Операция.ИдентификаторТранзакции);
			
			Если ТипЗнч(Операция.ЭквайринговыйТерминал.Касса) = Тип("СправочникСсылка.КассыККМ") Тогда
				ДанныеЗаполнения.Вставить("КассаККМ", Операция.ЭквайринговыйТерминал.Касса);
			Иначе
				ДанныеЗаполнения.Вставить("Касса", Операция.ЭквайринговыйТерминал.Касса);
			КонецЕсли;
				
			ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					Операция.ДатаОплаты,
					Новый Структура("Валюта", Операция.БанковскийСчет.ВалютаДенежныхСредств));

			ДанныеЗаполнения.Вставить("Курс", ВалютаКурсКратность.Курс);
			ДанныеЗаполнения.Вставить("Кратность", ВалютаКурсКратность.Кратность);
			
			ВидыПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКартИПроцентыКомиссии(Операция.ЭквайринговыйТерминал);
			Если ВидыПлатежныхКарт.Количество() > 0 Тогда
				ДанныеЗаполнения.Вставить("ВидПлатежнойКарты", ВидыПлатежныхКарт[0].ВидПлатежнойКарты);
			КонецЕсли; 
			
			ПроцентКомиссии = (ДанныеЗаполнения.СуммаДокумента - СуммаКЗачислению) / ДанныеЗаполнения.СуммаДокумента * 100;
			ДанныеЗаполнения.Вставить("ПроцентКомиссии", ПроцентКомиссии);
			
			// Обработка варианта - чек отправляется через Яндекс
			Если ЗначениеЗаполнено(Операция.СуммаЧека) Тогда
				
				ДанныеЗаполнения.Вставить("НомерЧекаККМ", Операция.ФискальныйНомерДокумента);
				ДанныеЗаполнения.Вставить("Статус", Перечисления.СтатусыЧековККМ.Пробит);
				ДанныеЗаполнения.Вставить("НомерСменыККМ", Операция.НомерФискальногоНакопителя);
				
				Если ЗначениеЗаполнено(Операция.КонтактныеДанныеЭлектронногоЧека) Тогда
					СпособОтправкиЧека = ?(Найти(Операция.КонтактныеДанныеЭлектронногоЧека, "@") <> 0, "АдресЭП", "Телефон");
					ДанныеЗаполнения.Вставить("СпособОтправкиЧека", Операция.КонтактныеДанныеЭлектронногоЧека);
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОплаты = Документы.ОперацияПоПлатежнымКартам.СоздатьДокумент();
			
			ОснованиеПлатежа = РасчетыСлужебный.ПолучитьСсылкуПоУникальномуИдентификаторуПлатежа(Операция.ИдентификаторПлатежа);
			
			Если НЕ ЗначениеЗаполнено(ОснованиеПлатежа) ИЛИ ТипыОснованийПлатежаДляЯндексКассы.Найти(ОснованиеПлатежа.Метаданные().Имя) = Неопределено Тогда
				Продолжить; // Загружаются платежи только по имеющимся в базе основаниям.
			КонецЕсли;
			
			ДокументОплаты.Заполнить(ОснованиеПлатежа);
			ЗаполнитьЗначенияСвойств(ДокументОплаты, ДанныеЗаполнения);
			
			СуммаОснованияПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "СуммаДокумента");
			Если СуммаОснованияПлатежа <> ДокументОплаты.СуммаДокумента Тогда
				
				МассивКоэффициентов = ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСумм = РаспределитьПропорционально(ДокументОплаты.СуммаДокумента, МассивКоэффициентов);
				Если МассивСумм <> Неопределено Тогда
					ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
				КонецЕсли;
				
				МассивСуммКомиссии = РаспределитьПропорционально(ДокументОплаты.СуммаКомиссииПоДоговору, МассивКоэффициентов);
				Если МассивСуммКомиссии <> Неопределено Тогда
					ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаКомиссии");
				КонецЕсли;
				
				Для каждого СтрокаПлатеж Из ДокументОплаты.РасшифровкаПлатежа Цикл
					ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатеж.СтавкаНДС);
					СтрокаПлатеж.СуммаНДС = РассчитатьСуммуНДС(СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС);
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстСообщения = "";
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОплаты,, ТекстСообщения) Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСЯндексКассойУНФ.ПриЗагрузкеОперацийПоЯндексКассе'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ИнтеграцияСЯндексКассойУНФ,
					,
					ТекстСообщения);
				Результат.КоличествоНезагруженныхОпераций = Результат.КоличествоНезагруженныхОпераций + 1;
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
				
				Если ЕстьАвтоФискализация И НЕ ЗначениеЗаполнено(Операция.СуммаЧека) Тогда
					ПодключаемоеОборудованиеУНФ.ДобавитьВОчередьФискализации(ДокументОплаты.Ссылка);
				КонецЕсли; 
				
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСЯндексКассойУНФ.ПриЗагрузкеОперацийПоЯндексКассе'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ИнтеграцияСЯндексКассойУНФ,
					,
					НСтр("ru='Ошибка проведения документа ""Операция по платежным картам"" при загрузке операций из ЮKassa'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
						
				ДокументОплаты.ОбменДанными.Загрузка = Истина;
				ДокументОплаты.Записать();
			КонецПопытки;
			
			Результат.КоличествоЗагруженныхОпераций = Результат.КоличествоЗагруженныхОпераций + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПроверитьИспользованиеШаблоновСообщений
Процедура ПроверитьИспользованиеШаблоновСообщений(Используется) Экспорт
	
	Используется = ШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений();
	
КонецПроцедуры

// См. ИнтеграцияСЯндексКассойПереопределяемый.ПредопределенныеШаблоныСообщений
Процедура ПредопределенныеШаблоныСообщений(Шаблоны) Экспорт 
	
	СписокТиповОснований = ПолучитьСписокТиповОснованийПлатежаДляЯндексКассы();
	СписокФорматов = Новый СписокЗначений;
	
	Для Каждого ФорматСохранения Из СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента() Цикл
		СписокФорматов.Добавить(Строка(ФорматСохранения.ТипФайлаТабличногоДокумента), Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
	КонецЦикла;
	
	МакетШаблона = ПолучитьОбщийМакет("ШаблонСообщенияЯндексКасса");
	ТекстШаблона = МакетШаблона.ПолучитьТекст();
	
	Для каждого ТипОснования Из СписокТиповОснований Цикл
		
		Шаблон = Новый Структура();
		
		Синоним = Метаданные.Документы[ТипОснования].Синоним;
		
		Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ТипОснования");
		Шаблон.Вставить("Наименование", НСтр("ru = 'Счет на оплату через ЮKassa (Синоним)'"));
		Шаблон.Вставить("Тема", НСтр("ru = 'Счет на оплату номер [ТипОснования.Номер] на сумму [ТипОснования.СуммаДокумента] руб.'"));
		
		ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона,
						НСтр("ru='Благодарим Вас за заказ и просим оплатить счет!'"),
						НСтр("ru='Номер заказа:'"),
						НСтр("ru='Идентификатор плательщика:'"),
						НСтр("ru='Сумма:'"),
						НСтр("ru='Для оплаты счета перейдите на страницу ЮKassa, нажав на кнопку'"));
						
		Шаблон.Вставить("Текст", ТекстШаблона);
		
		Шаблон.ПолноеИмяТипаНазначения = СтрЗаменить(Шаблон.ПолноеИмяТипаНазначения, "ТипОснования", ТипОснования);
		Шаблон.Наименование 		   = СтрЗаменить(Шаблон.Наименование, "Синоним", Синоним);
		Шаблон.Тема 				   = СтрЗаменить(Шаблон.Тема, "ТипОснования", ТипОснования);
		Шаблон.Текст 				   = СтрЗаменить(Шаблон.Текст, "ТипОснования", ТипОснования);
		
		Если ТипОснования = "АктВыполненныхРабот" Тогда //Для акта недоступно поле "Покупатель"
			Шаблон.Текст = СтрЗаменить(Шаблон.Текст, "Покупатель", "Контрагент"); 
		КонецЕсли; 
		
		Шаблон.Вставить("ФорматВложений", Новый ХранилищеЗначения(СписокФорматов));
		
		Шаблоны.Добавить(Шаблон);
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен документов, которые могут выступать в качестве основания платежа по Яндекс.Кассе
//
// Возвращаемое значение:
//   Массив [Строка] - Массив оснований платежа.
//
Функция ПолучитьСписокТиповОснованийПлатежаДляЯндексКассы()
	
	ОснованияПлатежа = Новый Массив;
	
	ОснованияПлатежа.Добавить("РасходнаяНакладная");
	ОснованияПлатежа.Добавить("АктВыполненныхРабот");
	ОснованияПлатежа.Добавить("ЗаказПокупателя");
	ОснованияПлатежа.Добавить("СчетНаОплату");
	ОснованияПлатежа.Добавить("ПриемИПередачаВРемонт");
	
	Возврат ОснованияПлатежа;
	
КонецФункции

// Возвращает текст запроса по основанию платежа, в зависимости от его типа
//
Функция ПолучитьТекстЗапросаОснованияПлатежа(ОснованиеПлатежа)
	
	ТипДокумента = ТипЗнч(ОснованиеПлатежа);
	ТекстЗапроса = "";
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СчетНаОплату.ИдентификаторПлатежа КАК Идентификатор,
		               |	СчетНаОплату.Номер КАК Номер,
		               |	СчетНаОплату.Дата КАК Дата,
		               |	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		               |	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
		               |	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
		               |	СчетНаОплату.Организация КАК Организация,
		               |	СчетНаОплату.Контрагент КАК Контрагент,
		               |	СчетНаОплату.Договор.НомерДоговора КАК НомерДоговора
		               |ИЗ
		               |	Документ.СчетНаОплату КАК СчетНаОплату
		               |ГДЕ
		               |	СчетНаОплату.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура) КАК Наименование,
		               |	ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Характеристика) КАК Характеристика,
		               |	Запасы.Количество КАК Количество,
		               |	Запасы.Всего / Запасы.Количество КАК Цена,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.СтавкаНДС) КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА Запасы.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СтавкаНДСКод,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Ссылка.ВалютаДокумента) КАК Валюта,
		               |	Запасы.Номенклатура.Артикул КАК Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ТипНоменклатуры) КАК ВидНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.Родитель) КАК Родитель,
		               |	Запасы.Номенклатура КАК Номенклатура,
		               |	1 КАК ПредметРасчета,
		               |	Запасы.Всего КАК Сумма
		               |ИЗ
		               |	Документ.СчетНаОплату.Запасы КАК Запасы
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	0,
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.НоменклатураДоставки),
		               |	ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(250)),
		               |	"""",
		               |	1,
		               |	СчетНаОплату.СтоимостьДоставки,
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.СтавкаНДСДоставки),
		               |	ВЫБОР
		               |		КОГДА СчетНаОплату.СтавкаНДСДоставки.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА СчетНаОплату.СтавкаНДСДоставки.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА СчетНаОплату.СтавкаНДСДоставки.Ставка = 10
		               |				И НЕ СчетНаОплату.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (СчетНаОплату.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ СчетНаОплату.СтавкаНДСДоставки.Ставка = 20)
		               |				И НЕ СчетНаОплату.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 4
		               |		КОГДА СчетНаОплату.СтавкаНДСДоставки.Ставка = 10
		               |				И СчетНаОплату.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (СчетНаОплату.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ СчетНаОплату.СтавкаНДСДоставки.Ставка = 20)
		               |				И СчетНаОплату.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.Ссылка.ВалютаДокумента),
		               |	СчетНаОплату.НоменклатураДоставки.Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения),
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.НоменклатураДоставки.ТипНоменклатуры),
		               |	ПРЕДСТАВЛЕНИЕ(СчетНаОплату.НоменклатураДоставки.Родитель),
		               |	СчетНаОплату.НоменклатураДоставки,
		               |	1,
		               |	СчетНаОплату.СтоимостьДоставки
		               |ИЗ
		               |	Документ.СчетНаОплату КАК СчетНаОплату
		               |ГДЕ
		               |	СчетНаОплату.Ссылка = &ОснованиеПлатежа
		               |	И СчетНаОплату.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	Документ.СчетНаОплату.Запасы КАК Запасы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО Запасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РасходнаяНакладная.ИдентификаторПлатежа КАК Идентификатор,
		               |	РасходнаяНакладная.Номер КАК Номер,
		               |	РасходнаяНакладная.Дата КАК Дата,
		               |	РасходнаяНакладная.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		               |	РасходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
		               |	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
		               |	РасходнаяНакладная.Организация КАК Организация,
		               |	РасходнаяНакладная.Контрагент КАК Контрагент,
		               |	РасходнаяНакладная.Договор.НомерДоговора КАК НомерДоговора
		               |ИЗ
		               |	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		               |ГДЕ
		               |	РасходнаяНакладная.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура) КАК Наименование,
		               |	ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Характеристика) КАК Характеристика,
		               |	Запасы.Количество КАК Количество,
		               |	Запасы.Всего / Запасы.Количество КАК Цена,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.СтавкаНДС) КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА Запасы.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СтавкаНДСКод,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Ссылка.ВалютаДокумента) КАК Валюта,
		               |	Запасы.Номенклатура.Артикул КАК Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ТипНоменклатуры) КАК ВидНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.Родитель) КАК Родитель,
		               |	Запасы.Номенклатура КАК Номенклатура,
		               |	1 КАК ПредметРасчета,
		               |	Запасы.Всего КАК Сумма
		               |ИЗ
		               |	Документ.РасходнаяНакладная.Запасы КАК Запасы
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	0,
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.НоменклатураДоставки),
		               |	ВЫРАЗИТЬ(РасходнаяНакладная.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(250)),
		               |	"""",
		               |	1,
		               |	РасходнаяНакладная.СтоимостьДоставки,
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.СтавкаНДСДоставки),
		               |	ВЫБОР
		               |		КОГДА РасходнаяНакладная.СтавкаНДСДоставки.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 10
		               |				И НЕ РасходнаяНакладная.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 20)
		               |				И НЕ РасходнаяНакладная.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 4
		               |		КОГДА РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 10
		               |				И РасходнаяНакладная.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ РасходнаяНакладная.СтавкаНДСДоставки.Ставка = 20)
		               |				И РасходнаяНакладная.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.Ссылка.ВалютаДокумента),
		               |	РасходнаяНакладная.НоменклатураДоставки.Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.НоменклатураДоставки.ЕдиницаИзмерения),
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.НоменклатураДоставки.ТипНоменклатуры),
		               |	ПРЕДСТАВЛЕНИЕ(РасходнаяНакладная.НоменклатураДоставки.Родитель),
		               |	РасходнаяНакладная.НоменклатураДоставки,
		               |	1,
		               |	РасходнаяНакладная.СтоимостьДоставки
		               |ИЗ
		               |	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		               |ГДЕ
		               |	РасходнаяНакладная.Ссылка = &ОснованиеПлатежа
		               |	И РасходнаяНакладная.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	Документ.РасходнаяНакладная.Запасы КАК Запасы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО Запасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	АктВыполненныхРабот.ИдентификаторПлатежа КАК Идентификатор,
		               |	АктВыполненныхРабот.Номер КАК Номер,
		               |	АктВыполненныхРабот.Дата КАК Дата,
		               |	АктВыполненныхРабот.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		               |	АктВыполненныхРабот.СуммаДокумента КАК СуммаДокумента,
		               |	АктВыполненныхРабот.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
		               |	АктВыполненныхРабот.Организация КАК Организация,
		               |	АктВыполненныхРабот.Контрагент КАК Контрагент,
		               |	АктВыполненныхРабот.Договор.НомерДоговора КАК НомерДоговора
		               |ИЗ
		               |	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		               |ГДЕ
		               |	АктВыполненныхРабот.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РаботыИУслуги.НомерСтроки КАК НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Номенклатура) КАК Наименование,
		               |	РаботыИУслуги.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Характеристика) КАК Характеристика,
		               |	РаботыИУслуги.Количество КАК Количество,
		               |	РаботыИУслуги.Всего / РаботыИУслуги.Количество КАК Цена,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.СтавкаНДС) КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА РаботыИУслуги.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА РаботыИУслуги.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА РаботыИУслуги.СтавкаНДС.Ставка = 10
		               |				И НЕ РаботыИУслуги.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (РаботыИУслуги.СтавкаНДС.Ставка = 18 ИЛИ РаботыИУслуги.СтавкаНДС.Ставка = 20)
		               |				И НЕ РаботыИУслуги.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА РаботыИУслуги.СтавкаНДС.Ставка = 10
		               |				И РаботыИУслуги.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (РаботыИУслуги.СтавкаНДС.Ставка = 18 ИЛИ РаботыИУслуги.СтавкаНДС.Ставка = 20)
		               |				И РаботыИУслуги.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СтавкаНДСКод,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Ссылка.ВалютаДокумента) КАК Валюта,
		               |	РаботыИУслуги.Номенклатура.Артикул КАК Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Номенклатура.ТипНоменклатуры) КАК ВидНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(РаботыИУслуги.Номенклатура.Родитель) КАК Родитель,
		               |	РаботыИУслуги.Номенклатура КАК Номенклатура,
		               |	1 КАК ПредметРасчета,
		               |	РаботыИУслуги.Всего КАК Сумма
		               |ИЗ
		               |	Документ.АктВыполненныхРабот.РаботыИУслуги КАК РаботыИУслуги
		               |ГДЕ
		               |	РаботыИУслуги.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	Документ.АктВыполненныхРабот.РаботыИУслуги КАК Запасы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО Запасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказПокупателя.ИдентификаторПлатежа КАК Идентификатор,
		               |	ЗаказПокупателя.Номер КАК Номер,
		               |	ЗаказПокупателя.Дата КАК Дата,
		               |	ЗаказПокупателя.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		               |	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
		               |	ЗаказПокупателя.Организация КАК Организация,
		               |	ЗаказПокупателя.Контрагент КАК Контрагент,
		               |	ЗаказПокупателя.Договор.НомерДоговора КАК НомерДоговора
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура) КАК Наименование,
		               |	ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Характеристика) КАК Характеристика,
		               |	Запасы.Количество КАК Количество,
		               |	Запасы.Всего / Запасы.Количество КАК Цена,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.СтавкаНДС) КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА Запасы.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И НЕ Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА Запасы.СтавкаНДС.Ставка = 10
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (Запасы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Запасы.СтавкаНДС.Ставка = 20)
		               |				И Запасы.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СтавкаНДСКод,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Ссылка.ВалютаДокумента) КАК Валюта,
		               |	Запасы.Номенклатура.Артикул КАК Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.ТипНоменклатуры) КАК ВидНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(Запасы.Номенклатура.Родитель) КАК Родитель,
		               |	Запасы.Номенклатура КАК Номенклатура,
		               |	1 КАК ПредметРасчета,
		               |	Запасы.Всего КАК Сумма
		               |ИЗ
		               |	Документ.ЗаказПокупателя.Запасы КАК Запасы
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа
		               |	И НЕ Запасы.ЭтоРазделитель
		               |	И Запасы.НомерВариантаКП = Запасы.Ссылка.ОсновнойВариантКП
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	Работы.НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Номенклатура),
		               |	ВЫРАЗИТЬ(Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(250)),
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Характеристика),
		               |	Работы.Количество,
		               |	Работы.Всего / Работы.Количество,
		               |	ПРЕДСТАВЛЕНИЕ(Работы.СтавкаНДС),
		               |	ВЫБОР
		               |		КОГДА Работы.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА Работы.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА Работы.СтавкаНДС.Ставка = 10
		               |				И НЕ Работы.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (Работы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Работы.СтавкаНДС.Ставка = 20)
		               |				И НЕ Работы.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА Работы.СтавкаНДС.Ставка = 10
		               |				И Работы.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (Работы.СтавкаНДС.Ставка = 18
		               |				ИЛИ Работы.СтавкаНДС.Ставка = 20)
		               |				И Работы.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Ссылка.ВалютаДокумента),
		               |	Работы.Номенклатура.Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Номенклатура.ЕдиницаИзмерения),
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Номенклатура.ТипНоменклатуры),
		               |	ПРЕДСТАВЛЕНИЕ(Работы.Номенклатура.Родитель),
		               |	Работы.Номенклатура,
		               |	1,
		               |	Работы.Всего
		               |ИЗ
		               |	Документ.ЗаказПокупателя.Работы КАК Работы
		               |ГДЕ
		               |	Работы.Ссылка = &ОснованиеПлатежа
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	0,
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.НоменклатураДоставки),
		               |	ВЫРАЗИТЬ(ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(250)),
		               |	"""",
		               |	1,
		               |	ЗаказПокупателя.СтоимостьДоставки,
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.СтавкаНДСДоставки),
		               |	ВЫБОР
		               |		КОГДА ЗаказПокупателя.СтавкаНДСДоставки.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 10
		               |				И НЕ ЗаказПокупателя.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 20)
		               |				И НЕ ЗаказПокупателя.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 4
		               |		КОГДА ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 10
		               |				И ЗаказПокупателя.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 18
		               |				ИЛИ ЗаказПокупателя.СтавкаНДСДоставки.Ставка = 20)
		               |				И ЗаказПокупателя.СтавкаНДСДоставки.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ссылка.ВалютаДокумента),
		               |	ЗаказПокупателя.НоменклатураДоставки.Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.НоменклатураДоставки.ЕдиницаИзмерения),
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.НоменклатураДоставки.ТипНоменклатуры),
		               |	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.НоменклатураДоставки.Родитель),
		               |	ЗаказПокупателя.НоменклатураДоставки,
		               |	1,
		               |	ЗаказПокупателя.СтоимостьДоставки
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.Ссылка = &ОснованиеПлатежа
		               |	И ЗаказПокупателя.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		               |	И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Запасы.НомерСтроки КАК НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	Документ.ЗаказПокупателя.Запасы КАК Запасы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО Запасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Запасы.Ссылка = &ОснованиеПлатежа
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	Работы.НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод
		               |ИЗ
		               |	Документ.ЗаказПокупателя.Работы КАК Работы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО Работы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	Работы.Ссылка = &ОснованиеПлатежа";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПриемИПередачаВРемонт.ИдентификаторПлатежа КАК Идентификатор,
		               |	ПриемИПередачаВРемонт.Номер КАК Номер,
		               |	ПриемИПередачаВРемонт.Дата КАК Дата,
		               |	ПриемИПередачаВРемонт.ВалютаДокумента.Код КАК ВалютаДокументаКод,
		               |	ПриемИПередачаВРемонт.СуммаДокумента КАК СуммаДокумента,
		               |	ПриемИПередачаВРемонт.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
		               |	ПриемИПередачаВРемонт.Организация КАК Организация,
		               |	ПриемИПередачаВРемонт.Контрагент КАК Контрагент,
		               |	ПриемИПередачаВРемонт.Договор.НомерДоговора КАК НомерДоговора
		               |ИЗ
		               |	Документ.ПриемИПередачаВРемонт КАК ПриемИПередачаВРемонт
		               |ГДЕ
		               |	ПриемИПередачаВРемонт.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	1 КАК НомерСтроки,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.Номенклатура) КАК Наименование,
		               |	СоставРемонта.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.Характеристика) КАК Характеристика,
		               |	1 КАК Количество,
		               |	СоставРемонта.СуммаДокумента КАК Цена,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.СтавкаНДС) КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА СоставРемонта.СтавкаНДС.НеОблагается
		               |			ТОГДА 1
		               |		КОГДА СоставРемонта.СтавкаНДС.Ставка = 0
		               |			ТОГДА 2
		               |		КОГДА СоставРемонта.СтавкаНДС.Ставка = 10
		               |				И НЕ СоставРемонта.СтавкаНДС.Расчетная
		               |			ТОГДА 3
		               |		КОГДА (СоставРемонта.СтавкаНДС.Ставка = 18 ИЛИ СоставРемонта.СтавкаНДС.Ставка = 20)
		               |				И НЕ СоставРемонта.СтавкаНДС.Расчетная
		               |			ТОГДА 4
		               |		КОГДА СоставРемонта.СтавкаНДС.Ставка = 10
		               |				И СоставРемонта.СтавкаНДС.Расчетная
		               |			ТОГДА 5
		               |		КОГДА (СоставРемонта.СтавкаНДС.Ставка = 18 ИЛИ СоставРемонта.СтавкаНДС.Ставка = 20)
		               |				И СоставРемонта.СтавкаНДС.Расчетная
		               |			ТОГДА 6
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК СтавкаНДСКод,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.ВалютаДокумента) КАК Валюта,
		               |	СоставРемонта.Номенклатура.Артикул КАК Артикул,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.Номенклатура.ТипНоменклатуры) КАК ВидНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(СоставРемонта.Номенклатура.Родитель) КАК Родитель,
		               |	СоставРемонта.Номенклатура КАК Номенклатура,
		               |	1 КАК ПредметРасчета,
		               |	СоставРемонта.СуммаДокумента КАК Сумма
		               |ИЗ
		               |	Документ.ПриемИПередачаВРемонт КАК СоставРемонта
		               |ГДЕ
		               |	СоставРемонта.Ссылка = &ОснованиеПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	1 КАК НомерСтроки,
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	Документ.ПриемИПередачаВРемонт КАК ШтрихКодыРемонт
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ПО ШтрихКодыРемонт.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		               |ГДЕ
		               |	ШтрихКодыРемонт.Ссылка = &ОснованиеПлатежа";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции // ПолучитьТекстЗапросаОснованияПлатежа()

// Возвращает код учетной политики организации для Яндекс.Кассы:
// 1 - ОСН
// 2 - УСН (доходы)
// 3 - УСН (доходы минус расходы)
// 4 - продажа облагается ЕНВД
//
// Параметры:
//   Организация - СправочникСсылка.Организация - Организация, по которой получается код учетной политики.
//
// Возвращаемое значение:
//   Число - Код учетной политики.
//
Функция КодСистемыНалогообложения(Организация, Период)
	
	УчетнаяПолитика = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Период);
	
	Если УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если УчетнаяПолитика.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
			Возврат 2;
		КонецЕсли;	
		
		Если УчетнаяПолитика.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
			Возврат 3;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД Тогда
		Возврат 4;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяПатент Тогда
		Возврат 6;
	КонецЕсли;
	
	Возврат 1; // Общая система налогообложения
	
КонецФункции

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  Коэффициенты - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2)

	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	Дельта = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Если Дельта > 0 Тогда 
		
		// Погрешности округления отнесем на коэффициент с максимальным весом.
		Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
			Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + Дельта;
		КонецЕсли;
		
	ИначеЕсли Дельта < 0 Тогда 
		
		// Если распределили больше чем положено, размазываем погрешность по ближайшим максимальным весам.
		ЗначениеПогрешности = 1 / Pow(10, Точность);
		КоличествоЭлементовПогрешности = -Дельта / ЗначениеПогрешности;
		
		КоэффициентыРешето = Новый Массив(Новый ФиксированныйМассив(Коэффициенты));
		
		Для Сч = 1 По КоличествоЭлементовПогрешности Цикл 
			МаксимальныйКоэффициент = МаксимальноеЗначениеВМассиве(КоэффициентыРешето);
			Индекс = КоэффициентыРешето.Найти(МаксимальныйКоэффициент);
			Результат[Индекс] = Результат[Индекс] - ЗначениеПогрешности;
			КоэффициентыРешето[Индекс] = 0;
		КонецЦикла;
		
	Иначе 
		// Если Дельта = 0, то все идеально.
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Служебная функция для распределения сумм оплат
//
Функция МаксимальноеЗначениеВМассиве(Массив)
	
	// Рассчитываем, что на вход будет получен массив, в котором все элементы либо все положительные, либо отрицательные.
	// Поэтому для определения максимального значения сравниваем абсолютное значение элемента.
	//
	// В случае, если на вход получен массив, в котором элементы с разными знаками, то максимальное значение будет
	// определено не правильно. Но этот случай оставлен для совместимости с предыдущими версиями.
	
	МаксимальноеЗначение = 0;
	Множитель            = 1;
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Значение = Массив[Индекс];
		АбсолютноеЗначение = ?(Значение> 0, Значение, -Значение);
		Если МаксимальноеЗначение < АбсолютноеЗначение Тогда
			МаксимальноеЗначение = АбсолютноеЗначение;
			Множитель = ?(Значение > 0, 1, -1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеЗначение * Множитель;
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции

// Функция возвращает ссылку на контрагента-эквайера Яндекс.Кассы
// Если эквайер не найден, создается новый и возвращается ссылка на него
//
Функция НайтиИлиСоздатьЭквайераПоУмолчанию(Организация, СоздаватьЕслиНеНайден = Ложь)

	ДанныеЭквайераПоУмолчанию = ИнтеграцияСЯндексКассой.ДанныеЭквайераЯндексКасса(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Эквайер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН", ДанныеЭквайераПоУмолчанию.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеЭквайераПоУмолчанию.КПП);
	
	ВыборкаЭквайера = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЭквайера.Следующий() Тогда
		
		Возврат ВыборкаЭквайера.Эквайер;
		
	Иначе
		
		Если НЕ СоздаватьЕслиНеНайден Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли; 
		
		СоздаваемыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СоздаваемыйКонтрагент, ДанныеЭквайераПоУмолчанию);
		СоздаваемыйКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		СоздаваемыйКонтрагент.ПрочиеОтношения = Истина;
		СоздаваемыйКонтрагент.ДатаСоздания = ТекущаяДатаСеанса();
		СоздаваемыйКонтрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		СоздаваемыйКонтрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		СоздаваемыйКонтрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		СоздаваемыйКонтрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		СоздаваемыйКонтрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
		СоздаваемыйКонтрагент.ВестиРасчетыПоДоговорам = Истина;
		СоздаваемыйКонтрагент.ВестиРасчетыПоДокументам = Истина;
		СоздаваемыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
		СоздаваемыйКонтрагент.ВестиУчетОплатыПоСчетам = Истина;
		
		ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(),
			"ОсновнойОтветственный");
		СоздаваемыйКонтрагент.Ответственный = ОсновнойОтветственный;
		
		СоздаваемыйКонтрагент.Комментарий = НСтр("ru = 'Создан автоматически при настройке подключения к ЮKassa'");
		
		Попытка
			СоздаваемыйКонтрагент.Записать();
		Исключение
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СоздаваемыйКонтрагент.Ссылка;
	
КонецФункции // НайтиИлиСоздатьЭквайераПоУмолчанию()

// Функция возвращает ссылку на эквайринговый терминал для Яндекс.Кассы
// Если эквайринговый терминал не найден, создается новый и возвращается его ссылка
//
Функция НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Организация = &Организация
		|	И ЭквайринговыеТерминалы.Эквайрер = &Эквайер";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Эквайер", СтруктураПараметров.Эквайер);
	
	ВыборкаТерминалы = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаТерминалы.Следующий() Тогда
		Возврат ВыборкаТерминалы.ЭквайринговыйТерминал;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НеСоздавать") Тогда
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли; 
	
	НовыйТерминал = Справочники.ЭквайринговыеТерминалы.СоздатьЭлемент();
	НовыйТерминал.Наименование = НСтр("ru = 'ЮKassa'");
	
	НовыйТерминал.Организация = СтруктураПараметров.Организация;
	НовыйТерминал.СчетУчета = ПланыСчетов.Управленческий.ПереводыВПути;
	НовыйТерминал.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
	НовыйТерминал.БанковскийСчетЭквайринг = НовыйТерминал.Организация.БанковскийСчетПоУмолчанию;
	НовыйТерминал.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	НовыйТерминал.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
	Если СтруктураПараметров.Свойство("Касса") Тогда
		НовыйТерминал.Касса = СтруктураПараметров.Касса;
	Иначе	
		НовыйТерминал.Касса = НовыйТерминал.Организация.КассаПоУмолчанию;
	КонецЕсли; 
	
	НовыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
		
	НовыйТерминал.Эквайрер = СтруктураПараметров.Эквайер;
	НовыйТерминал.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(НовыйТерминал.Эквайрер);
		
	СтрокаНовыйВидПлатежнойКарты = НовыйТерминал.ВидыПлатежныхКарт.Добавить();
	СтрокаНовыйВидПлатежнойКарты.ВидПлатежнойКарты = НСтр("ru = 'ЮKassa'");
		
	Попытка
		НовыйТерминал.Записать();
		Возврат НовыйТерминал.Ссылка;
	Исключение
		Возврат  Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции // НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию()

// Функция возвращает ссылку на основную кассу ККМ с типом "Фискальный регистратор"
// Если касса ККМ не найдена, возвращает пустую ссылку
//
Функция НайтиОсновнуюКассуККМ()

	ОсновнаяКасса = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Если ОсновнаяКасса = Неопределено Тогда
		Возврат Справочники.КассыККМ.ПустаяСсылка();
	Иначе
		 Возврат ОсновнаяКасса;
	КонецЕсли; 

КонецФункции // НайтиОсновнуюКассуККМ()
 
// Возвращает массив неучтенных операций.
//
// Параметры:
//   Операции - Массив [Структура] - Массив операций.
//
// Возвращаемое значение:
//   Массив [Структура] - Массив неучтенных операций.
//
Функция НеучтенныеОперации(Операции)
	
	НеучтенныеОперации = Новый Массив;
	
	ИдентификаторыПлатежей = Новый Массив;
	Для каждого Операция Из Операции Цикл
		ИдентификаторыПлатежей.Добавить(Операция.ИдентификаторПлатежа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчтенныеОперации.СсылочныйНомер КАК ИдентификаторПлатежа
		|ИЗ
		|	Документ.ОперацияПоПлатежнымКартам КАК УчтенныеОперации
		|ГДЕ
		|	УчтенныеОперации.СсылочныйНомер В(&ИдентификаторыПлатежей)";
	
	Запрос.УстановитьПараметр("ИдентификаторыПлатежей", ИдентификаторыПлатежей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УчтенныеПлатежи = Новый Массив;
	УчтенныеПлатежи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторПлатежа");
	
	Для каждого Операция Из Операции Цикл
		
		Если УчтенныеПлатежи.Найти(Операция.ИдентификаторПлатежа) = Неопределено Тогда
			НеучтенныеОперации.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеучтенныеОперации;
	
КонецФункции

// Возвращает Истина - если по документу есть аванс, частичная или полная оплата и Ложь - в противном случае
//
Функция ЕстьОплатаПоДокументу(ОснованиеПлатежа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактОплатыДокументов.СуммаАванса + ФактОплатыДокументов.СуммаАвансаАвто + ФактОплатыДокументов.СуммаОплаты + ФактОплатыДокументов.СуммаОплатыАвто КАК СуммаОплаты
		|ИЗ
		|	РегистрСведений.ФактОплатыДокументов КАК ФактОплатыДокументов
		|ГДЕ
		|	ФактОплатыДокументов.Документ = &СсылкаНаДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактОплатыЗаказов.СуммаАванса + ФактОплатыЗаказов.СуммаОплаты
		|ИЗ
		|	РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
		|ГДЕ
		|	ФактОплатыЗаказов.СчетНаОплату = &СсылкаНаДокумент";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", ОснованиеПлатежа.Ссылка);
	
	ВыборкаОплат = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОплат.Следующий() Тогда
		Возврат ВыборкаОплат.СуммаОплаты > 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область РегламентныеЗадания

// Функция возвращает значение реквизита Использование регламентного задания ПолучениеУведомленийОтЯндексКассы
// Используется в форме настроек
//
Функция ПолучитьСостояниеРегламентногоЗаданияЯндексКасса() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтЯндексКассы);
	Отбор.Вставить("Использование", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НайденныеЗадания.Количество() <> 0;
	
КонецФункции // СостояниеРегламентногоЗаданияПолучениеУведомленийОтЯндексКассы()

// Процедура изменяет значение реквизита Использование регламентного задания ПолучениеУведомленийОтЯндексКассы
// Используется в форме настроек
//
Процедура ИзменитьСостояниеРегламентногоЗаданияЯндексКасса(Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтЯндексКассы, Использование);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ИзменитьСостояниеРегламентногоЗаданияПолучениеУведомленийОтЯндексКассы()

#КонецОбласти
