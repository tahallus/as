
#Область СлужебныйПрограммныйИнтерфейс

// Определяет доступную функциональность интеграции.
// 
// Параметры:
// 	НастройкиИнтеграции - См. ТелефонияСервер.НастройкиИнтеграции
Процедура ПриОпределенииНастроекИнтеграции(НастройкиИнтеграции) Экспорт
	
	НастройкиИнтеграции.ПоддерживаетсяНастройкаМаршрутизации = Истина;
	НастройкиИнтеграции.Методы.МаршрутизироватьЗвонокНаОтветственного = Истина;
	
КонецПроцедуры

Функция КорневойАдрес() Экспорт
	
	Возврат "https://app.mango-office.ru/vpbx/";
	
КонецФункции

Функция ШаблонURLHTTPСервиса() Экспорт
	
	Возврат "mango";
	
КонецФункции

Функция ЗапросИсходящегоВызова(НомерКонтакта, НастройкиТелефонии) Экспорт
	
	ПараметрыЗвонка = Новый Структура;
	ПараметрыЗвонка.Вставить("command_id", Строка(Новый УникальныйИдентификатор));
	ПараметрыЗвонка.Вставить("from", Новый Структура);
	ПараметрыЗвонка.from.Вставить("extension", НастройкиТелефонии.НастройкиТекущегоПользователя.ВнутреннийНомер);
	ПараметрыЗвонка.Вставить("to_number", НомерКонтакта);
	
	ПараметрыЗвонкаJson = ОтправкаЗапросов.СоздатьJSONИзСтруктуры(ПараметрыЗвонка);
	ПодписьЗапроса = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, ПараметрыЗвонкаJson, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = КорневойАдрес();
	ПараметрыОтправки.АдресРесурса = "commands/callback";
	ПараметрыОтправки.ПараметрыТела.Вставить("json", ПараметрыЗвонкаJson);
	ПараметрыОтправки.ПараметрыТела.Вставить("vpbx_api_key", НастройкиТелефонии.vpbx_api_key);
	ПараметрыОтправки.ПараметрыТела.Вставить("sign", ПодписьЗапроса);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Процедура ОбработатьОтветЗапросаИсходящегоВызова(HttpОтвет, НастройкиТелефонии, Результат) Экспорт
	
	ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Результат.ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.'");
		Результат.ТекстОшибки = ТелоОтвета;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	КодОтвета = Неопределено;
	ПараметрыОтвета.Свойство("result", КодОтвета);
	
	// См. спецификацию API Манго,
	// Коды начинающиеся с "1": Действие успешно выполнено.
	Если СтрНачинаетсяС(КодОтвета, "1") Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ЗаголовокОшибки = РасшифровкаОшибки(КодОтвета);
	Результат.ТекстОшибки = ТелоОтвета;
	
КонецПроцедуры

Функция КорректнаяПодписьЗапроса(ПодписьЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	РассчитанныйSign = ПолучитьSign(
		НастройкиТелефонии.vpbx_api_key, ПараметрыЗапроса.json, НастройкиТелефонии.vpbx_api_salt);
	
	Возврат РассчитанныйSign = ПодписьЗапроса;
	
КонецФункции

Функция НастройкиИнтеграцииЗаполнены(АТС, НастройкиТелефонии) Экспорт
	
	Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
		И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
	
КонецФункции

Функция СсылкаНаЗаписьРазговора(ДанныеЗвонка, Ошибка) Экспорт
	
	ШаблонСсылки = ТелефонияСервер.КорневойАдресАТС() + "queries/recording/issa/[recording_id]/[action]";
	ПараметрыСсылки = Новый Структура;
	ПараметрыСсылки.Вставить("recording_id", ДанныеЗвонка.ЗаписьРазговора.Ссылка);
	ПараметрыСсылки.Вставить("action", "play");
	СсылкаНаЗаписьРазговора = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСсылки, ПараметрыСсылки);
	Возврат СсылкаНаЗаписьРазговора;
	
КонецФункции

Процедура МаршрутизироватьЗвонокНаОтветственного(ДанныеЗвонка, НастройкиТелефонии) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("command_id", Строка(Новый УникальныйИдентификатор));
	ПараметрыКоманды.Вставить("call_id", ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
	ПараметрыКоманды.Вставить("to_number", ДанныеЗвонка.Пользователь.ВнутреннийНомер);
	
	ПараметрыКомандыJson = ОтправкаЗапросов.СоздатьJSONИзСтруктуры(ПараметрыКоманды);
	ПодписьЗапроса = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, ПараметрыКомандыJson, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.Сервер = КорневойАдрес();
	ПараметрыОтправки.АдресРесурса = "commands/route";
	ПараметрыОтправки.ПараметрыТела.Вставить("json", ПараметрыКомандыJson);
	ПараметрыОтправки.ПараметрыТела.Вставить("vpbx_api_key", НастройкиТелефонии.vpbx_api_key);
	ПараметрыОтправки.ПараметрыТела.Вставить("sign", ПодписьЗапроса);
	
	HTTPОтвет = ОтправкаЗапросов.ОтправитьЗапросРекурсивно(ПараметрыОтправки);
	ИдентификаторЗапроса = ТелефонияСервер.ЛогироватьПараметрыОтправки(ПараметрыОтправки);
	ТелефонияСервер.ЛогироватьПолученныйОтвет(HTTPОтвет, ИдентификаторЗапроса);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Будет удалена в следующей версии программы.
//
Процедура ПриСозданииИсходящегоВызова(НомерАбонента, ДанныеПользователяАТС, НастройкиТелефонии, ПараметрыОтправки, Ошибка) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("from");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("extension");
	ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыОтправки.URL = ПараметрыОтправки.URL + "commands/callback";
	ПараметрыОтправки.ПараметрыТела.Вставить("vpbx_api_key", НастройкиТелефонии.vpbx_api_key);
	ПараметрыОтправки.ПараметрыТела.Вставить("sign",         sign);
	ПараметрыОтправки.ПараметрыТела.Вставить("json",         json);
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
//
Процедура ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ЗаголовокОшибки, ТекстОшибки) Экспорт
	
	ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		КодОтвета = Неопределено;
		ПараметрыОтвета.Свойство("result", КодОтвета);
		
		// 1: Действие успешно выполнено
		Если СтрНачинаетсяС(КодОтвета, "1") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокОшибки = РасшифровкаОшибки(КодОтвета);
		ТекстОшибки = ТелоОтвета;
		
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.'");
		ТекстОшибки = ТелоОтвета;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(vpbx_api_key);
	ХешированиеДанных.Добавить(json);
	ХешированиеДанных.Добавить(vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция РасшифровкаОшибки(Знач Код)
	
	Код = Формат(Код, "ЧГ=0");
	
	Если СтрНачинаетсяС(Код, "21") Тогда // 2100
		Возврат НСтр("ru='Доступ к счету невозможен'");
	ИначеЕсли Код = "2210" Тогда
		Возврат НСтр("ru='Доступ ограничен периодом использования'");
	ИначеЕсли Код = "2211" Тогда
		Возврат НСтр("ru='Достигнут дневной лимит использования услуги'");
	ИначеЕсли Код = "2212" Тогда
		Возврат НСтр("ru='Достигнут месячный лимит использования услуги'");
	ИначеЕсли Код = "2220" Тогда
		Возврат НСтр("ru='Количество одновременных вызовов/действий ограничено'");
	ИначеЕсли Код = "2230" Тогда
		Возврат НСтр("ru='Услуга недоступна'");
	ИначеЕсли Код = "2240" Тогда
		Возврат НСтр("ru='Недостаточно средств на счете'");
	ИначеЕсли Код = "2250" Тогда
		Возврат НСтр("ru='Ограничение на количество использований услуги в биллинге'");
	ИначеЕсли СтрНачинаетсяС(Код, "22") Тогда // 2200
		Возврат НСтр("ru='Доступ к счету ограничен'");
	ИначеЕсли СтрНачинаетсяС(Код, "23") Тогда // 2300
		Возврат НСтр("ru='Направление заблокировано'");
	ИначеЕсли СтрНачинаетсяС(Код, "24") Тогда // 2400
		Возврат НСтр("ru='Ошибка биллинга'");
	ИначеЕсли СтрНачинаетсяС(Код, "2") Тогда // 2000
		Возврат НСтр("ru='Ограничение биллинговой системы'");
	ИначеЕсли Код = "3100" Тогда
		Возврат НСтр("ru='Переданы неверные параметры команды'");
	ИначеЕсли Код = "3101" Тогда
		Возврат НСтр("ru='Запрос выполнен по методу, отличному от POST'");
	ИначеЕсли Код = "3102" Тогда
		Возврат НСтр("ru='Значение ключа не соответствуют рассчитанному'");
	ИначеЕсли Код = "3103" Тогда
		Возврат НСтр("ru='В запросе отсутствует обязательный параметр'");
	ИначеЕсли Код = "3104" Тогда
		Возврат НСтр("ru='Параметр передан в неправильном формате'");
	ИначеЕсли Код = "3105" Тогда
		Возврат НСтр("ru='Неверный ключ доступа'");
	ИначеЕсли СтрНачинаетсяС(Код, "32") Тогда // 3200
		Возврат НСтр("ru='Неверно указан номер абонента'");
	ИначеЕсли Код = "3310" Тогда
		Возврат НСтр("ru='Вызов не найден'");
	ИначеЕсли Код = "3320" Тогда
		Возврат НСтр("ru='Запись разговора не найдена'");
	ИначеЕсли Код = "3330" Тогда
		Возврат НСтр("ru='Номер не найден у ВАТС или сотрудника'");
	ИначеЕсли СтрНачинаетсяС(Код, "33") Тогда // 3300
		Возврат НСтр("ru='Объект не существует'");
	ИначеЕсли СтрНачинаетсяС(Код, "3") Тогда // 3000
		Возврат НСтр("ru='Неверный запрос'");
	ИначеЕсли СтрНачинаетсяС(Код, "4") Тогда // 4000
		Возврат НСтр("ru='Действие не может быть выполнено'");
	ИначеЕсли СтрНачинаетсяС(Код, "5") Тогда // 5000
		Возврат НСтр("ru='Ошибка сервера'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти
