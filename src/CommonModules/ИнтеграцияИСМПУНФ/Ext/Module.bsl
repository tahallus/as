
#Область ИнтеграцияИСМППереопределяемый

// Дополняет массив текстов запроса получения GTIN для объединения.
//
// Параметры:
//  ТекущиеДанные         - ДанныеФормыЭлементКоллекции - Текущая строка формы.
//  ФормаВладелец         - ФормаКлиентскогоПриложения  - Форма-владелец.
//  Запрос                - Запрос                      - Запрос, в который можно установить параметры.
//  МассивТекстовЗапросов - Массив из Строка            - Тексты запроса для объединения.
Процедура ДополнитьПараметрыЗапросаПриНачалеВыбораGTIN(ТекущиеДанные, ФормаВладелец, Запрос, МассивТекстовЗапросов) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Определяет использование актов о расхождении после приемки для документа
//
// Параметры:
//  Документ     - ДокументСсылка - документ, для которого необходимо определить возможность использования актов о расхождении.
//  Используется - Булево - в данный параметр необходимо установить признак использования актов, по умолчанию установлен
//                          в Ложь.
//
Процедура ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется) Экспорт
	
	Используется = Ложь;
	
КонецПроцедуры

// Заполняет переданную таблицу данные из ТЧ документа.
//
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Получение ссылки ТН ВЭД по коду.
//
// Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности.
//  ТНВЭД - Произвольный - искомый элемент.
//
Процедура КлассификаторТНВЭД(КодТНВЭД, ТНВЭД) Экспорт
	
	ТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	Если ЗначениеЗаполнено(КодТНВЭД) Тогда
		ТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(КодТНВЭД);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойства номенклатуры, используемые для передачи в каталог GS46. Могут быть заполнены колонки:
//   * Торговая марка,
//   * Страна производства,
//   * Вид обуви,
//   * Материал верха,
//   * Материал подкладки,
//   * Материал низа,
//   * Цвет,
//   * Размер.
// 
// Параметры:
//   Товары - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСвойстваНоменклатурыДляКаталогаGS46(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN КАК GTIN,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.КатегорияНоменклатуры) КАК ВидОбуви,
	|	ПРЕДСТАВЛЕНИЕ(ХарактеристикиНоменклатуры.Ссылка) КАК Размер,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.Ссылка) КАК Наименование,
	|	СправочникНоменклатура.Производитель КАК ТорговаяМарка
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатуры.Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.Наименование = Справочники.Номенклатура.Представление(СтрокаТовар.Наименование, СтрокаТовар.Размер);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПолученныеGTINКаталогаGS46(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.GTIN = Штрихкоды.Штрихкод
	|ГДЕ
	|	Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Набор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	СтрокаНабора = Набор.Добавить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Набор.Отбор.Штрихкод.Установить(Выборка.Штрихкод, Истина);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для модификации текста запроса по расчету неоформленных документов ЭДО.
//   Сценарий использования: заменить текст запроса на требуемый (требующие оформления
//   с помощью ЭДО документы продажи с маркируемой продукцией).
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//
Процедура ПриПолученииТекстаЗапросаНеоформленныхДокументовЭДО(ТекстЗапроса) Экспорт

	//Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	| СостоянияЭД.СсылкаНаОбъект КАК Ссылка
	//	|ИЗ
	//	| РегистрСведений.СостоянияЭД КАК СостоянияЭД
	//	| ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
	//	|  ПО СостоянияЭД.СсылкаНаОбъект = ШтрихкодыРеализации.Ссылка
	//	|ГДЕ
	//	| СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	//	| И НЕ ШтрихкодыРеализации.Ссылка ЕСТЬ NULL
	//	| И (&БезОтбораПоОрганизации
	//	| ИЛИ СостоянияЭД.Организация В (&Организации))";
	//Иначе
	//	ТекстЗапроса = ТекстЗапроса +"
	//	| ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
	//	|  ПО ДокументыТребующиеОформления.Ссылка = ШтрихкодыРеализации.Ссылка
	//	|ГДЕ
	//	| НЕ ШтрихкодыРеализации.Ссылка ЕСТЬ NULL";
	//КонецЕсли;
	//
	//Возврат;
	
	////////////////////////////////////////////////////////////////////////////////
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	СостоянияЭД.СсылкаНаОбъект КАК Ссылка
	//|ИЗ
	//|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
	//|		ПО СостоянияЭД.СсылкаНаОбъект = ШтрихкодыРеализации.Ссылка
	//|ГДЕ
	//|	СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	//|	И НЕ ШтрихкодыРеализации.Ссылка ЕСТЬ NULL
	//|	И (&БезОтбораПоОрганизации
	//|			ИЛИ СостоянияЭД.Организация В (&Организации))";
	
КонецПроцедуры

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Организация", ДокументОбъект.Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП") Тогда
		ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП") Тогда
		ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратВОборотИСМП") Тогда
		ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа
// в форме, а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		
		ИнтеграцияВЕТИС.ПроверитьЗаполнениеКоличества(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
		ИнтеграцияГИСМПереопределяемый.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, "Товары", Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП") Тогда
		
		ИнтеграцияГИСМПереопределяемый.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, "Товары", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииСкладаДокументаОснования(Склад, ДокументОснование) Экспорт
	
	СкладОснования      = Справочники.СтруктурныеЕдиницы;
	МетаданныеОснования = ДокументОснование.Метаданные();
	
	Если МетаданныеОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
		СкладОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтруктурнаяЕдиница");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладОснования) Тогда
		
		ИменаТабличныхЧастей = Новый Массив();
		ИменаТабличныхЧастей.Добавить("Запасы");
		ИменаТабличныхЧастей.Добавить("Продукция");
		
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МетаданныеТабличнойЧасти = МетаданныеОснования.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда
				Если МетаданныеТабличнойЧасти.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СтруктурнаяЕдиница
					|ИЗ
					|	Документ." + МетаданныеОснования.Имя + "." + ИмяТабличнойЧасти + "
					|ГДЕ
					|	СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СкладОснования = Выборка.СтруктурнаяЕдиница;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладОснования) Тогда
		Склад = СкладОснования;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодыТНВЭДПоНоменклатуреВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.Номенклатура,
	|	вт_Товары.Номенклатура.ТоварнаяНоменклатураВЭД.Код КАК КодТНВЭД
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1].КодТНВЭД = Выборка.КодТНВЭД;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет признак использования производства на стороне.
//
// Параметры:
//  Используется - Булево - Признак использования производства на стороне.
Процедура ИспользуетсяПереработкаНаСтороне(Используется) Экспорт

	Используется = ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку");

КонецПроцедуры

// Заполняет таблицу маркированный товаров по выбранным документам.
//
// Параметры:
//   Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//   ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
//   СтандартнаяОбработка - Булево - Необходимость обработки события "по-умолчанию" (установить Ложь при переопределении).
//
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстЗапроса =
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА СправочникНоменклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СправочникНоменклатура.ОбувнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|	КОГДА СправочникНоменклатура.ТабачнаяПродукция ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ОприходованиеЗапасов.Запасы КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОбувнаяПродукция
	|	ИЛИ СправочникНоменклатура.ТабачнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
	|	ТоварыПредварительно.Организация        КАК Организация,
	|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
	|	ТоварыПредварительно.Характеристика     КАК Характеристика,
	|	ТоварыПредварительно.ВидПродукции       КАК ВидПродукции,
	|	ТоварыПредварительно.Шаблон             КАК Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ МаркированныеТоварыОснований
	|ИЗ
	|	ТоварыПредварительно КАК ТоварыПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПредварительно.Ссылка,
	|	ТоварыПредварительно.Организация,
	|	ТоварыПредварительно.Номенклатура,
	|	ТоварыПредварительно.Характеристика,
	|	ТоварыПредварительно.ВидПродукции,
	|	ТоварыПредварительно.Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот
	|";
	
	Запрос.Текст = Запрос.Текст + СтрШаблон(ТекстЗапроса, ИсточникОснований);
	
КонецПроцедуры

Процедура ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием) Экспорт
	
	Если ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(СсылкаНаДокумент, "ИнвентаризацияЗапасов") Тогда
		
		ЯвляетсяОснованием = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СобытияФормИСМППереопределяемый

// Серверная переопределяемая процедура, вызываемая при заполнении реквизитов формы созданных ИСМП (при открытии)
//
// Параметры:
//   Форма - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//
Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМ.")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМВозврат.")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Справочник.ШаблоныЭтикетокИЦенников.") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции = Неопределено;
	
	Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграции <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		Объект = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект;
		Товары = ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		
		ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, Форма[Объект][Товары]);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределение параметров интеграции ИСМП (расположения команды проверки и подбора)
//
// Параметры:
//   Форма                - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - стандартная работа с элементами проверки подбора
//
Процедура ПриОпределенииПараметровИнтеграции(Форма, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Переопределение параметров интеграции ИСМП (расположения форматированной строки перехода к связанному объекту)
//
// Параметры:
//   Форма            - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИСМП.ПараметрыИнтеграцииГиперссылкиИСМП)
//
Процедура ПриОпределенииПараметровИнтеграцииГиперссылкиИСМП(Форма, ПараметрыНадписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
		
		ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаИСМП");
		ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаИСМП");
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииЧтенииНаСервере(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		ИнтеграцияИСУНФ.МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента" Тогда
		
		ПроверкаИПодборПродукцииИСМП.ПрименитьКешШтрихкодовУпаковок(Форма, Истина);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
			
		Если Элемент = "Событие" И СтрНачинаетсяС(ДополнительныеПараметры.ИмяСобытия,"ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
			
			ПриЗакрытииФормыПроверкиИПодбораВФормеРМК(
				Форма,
				ДополнительныеПараметры.Параметр,
				Перечисления.ВидыПродукцииИС.Получить(Число(СтрЗаменить(ДополнительныеПараметры.ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""))));
				
			ИндексВидаПродукции     = Число(СтрЗаменить(ДополнительныеПараметры.ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""));
			ВидМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ИндексВидаПродукцииИС(ИндексВидаПродукции);
				
			ПриЗакрытииФормыПроверкиИПодбораВФормеРМК(
				Форма,
				ДополнительныеПараметры.Параметр,
				ВидМаркируемойПродукции);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Структура - (См. ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	// Не выполняем никаких действий для формы Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор
	Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" Тогда
		Возврат;
	КонецЕсли;
	
	// Завершаем процедуру, если вызов обработчика выполнен после завершения обмена данными в документе ВыводИзОборотаИСМП
	// В этом случае элемент формы СтраницаТовары находится в режиме ТолькоПросмотр
	Если ЭтоЗавершениеОбменаДаннымиВыводИзОборотаИСМП(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Запасы") Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары") Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Форма.Объект, ИмяТабличнойЧасти, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества в строке таблицы формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.КоличествоУпаковок = 0;
	Иначе
		Коэффициент = ?(ТипЗнч(ТекущаяСтрока.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения"),
			УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент"), 1);
		Если Коэффициент <> 0 Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество / Коэффициент;
		Иначе
			ТекстИсключения = НСтр(
				"ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);

			ТекущаяСтрока.Количество = 0;
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ПараметрыЗаполнения) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
		АдресТоваровВХранилище = ВыбранноеЗначение.АдресТоваровВХранилище
	Иначе
		АдресТоваровВХранилище = ВыбранноеЗначение.АдресКорзиныВХранилище
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	ТекущаяСтрока = Неопределено;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		
		СписокСвойств = "Номенклатура, Характеристика";
		Если ТекущаяСтрока.Свойство("Количество") Тогда
			СписокСвойств = СписокСвойств + ", Количество";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		Если ТекущаяСтрока.Свойство("КоличествоУпаковок") Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры выбора шаблона этикетки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода шаблона этикетки.
Процедура УстановитьПараметрыВыбораШаблонаЭтикетки(Форма,  ИмяПоляВвода) Экспорт
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП");
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипШаблона", ТипШаблона));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Форма.Элементы[ИмяПоляВвода].КнопкаСоздания = Истина;
	
КонецПроцедуры

// См. ИнтеграцияИСМППереопределяемый.ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Организации.Ссылка КАК Организация
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ПометкаУдаления");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииИСМППереопределяемый

// Возвращает через третий параметр признак наличия маркируемой продукции.
//
// Параметры:
//  Коллекция                - ДанныеФормыКоллекция - ТЧ с товарами.
//  ВидМаркируемойПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции, наличие которой необходимо определить.
//  ЕстьМаркируемаяПродукция - Булево - Исходящий, признак наличия маркируемой продукции.
Процедура ЕстьМаркируемаяПродукцияВКоллекции(Коллекция, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ
	|	ВремТаблТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьМаркируемаяПродукция
	|ИЗ
	|	ВремТаблТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаТовары", Коллекция.Выгрузить(, "Номенклатура"));
	Результат = Запрос.Выполнить();
	
	ЕстьМаркируемаяПродукция = НЕ Результат.Пустой();
	
КонецПроцедуры

// Возвращает через третий параметр таблицу товаров документа, являющихся маркируемой продукцией требуемого вида.
//
// Параметры:
//  * Контекст                 - УправляемаяФорма, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  * ВидМаркируемойПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции, которую необходимо получить.
//  * ТаблицаМаркируемойПродукции - ТаблицаЗначений - Исходящий, таблица с маркируемой продукцией документа. Должна
//                                                    содержать колонки:
//  ** GTIN           - Строка - GTIN продукции
//  ** Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура маркируемой продукции
//  ** Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатура маркируемой продукции
//  ** Серия          - ОпределяемыйТип.СерияНоменклатуры - серия номенклатура маркируемой продукции
//  ** Количество     - Число - количество маркируемой продукции
Процедура ПриОпределенииМаркируемойПродукцииДокумента(Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		РезультатЗапроса = ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции);
		ТаблицаМаркируемойПродукции.Очистить();
	ИначеЕсли ТипЗнч(Контекст) = Тип("ДанныеФормыСтруктура") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииДанныеФормыСтруктура(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ПриходнаяНакладная") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииПриходнаяНакладная(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ЧекККМ")
		Или ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "ЧекККМВозврат") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииЧекККМ(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Контекст, "РасходнаяНакладная") Тогда
		РезультатЗапроса = ЗапросМаркируемойПродукцииРасходнаяНакладная(Контекст, ВидМаркируемойПродукции);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			ПродукцияПоGTIN = ТаблицаМаркируемойПродукции.СкопироватьКолонки();
			СписокКодовGTIN = Новый Массив;
			
			ВыборкаGTIN = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаGTIN.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
					// Соответственно тут должен быть остаточный GTIN
					Выборка = ВыборкаGTIN.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), Выборка);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				
				Если ПродукцияПоGTIN.Количество() = 0 Тогда
					Выборка = ВыборкаGTIN.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ПродукцияПоGTIN.Добавить(), Выборка,, "GTIN");
					КонецЦикла;
				КонецЕсли;
				
				Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ВыборкаGTIN.GTIN) Тогда
					GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ВыборкаGTIN.GTIN);
					СписокКодовGTIN.Добавить(GTIN);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаПродукцииПоGTIN Из ПродукцияПоGTIN Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), СтрокаПродукцииПоGTIN);
				СтрокаПродукцииПоGTIN.КодыGTIN.ЗагрузитьЗначения(СписокКодовGTIN);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает через второй параметр признак что переданный контрагент является нерезидентом.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Проверяемы контрагент
//  НеРезидент - Булево - Признак что контрагент не резидент (Истина) или резидент (Ложь).
//
Процедура ПриОпределенииКонтрагентНеРезидент(Контрагент, НеРезидент) Экспорт
	
	СтранаРегистрации = Контрагент.СтранаРегистрации;
	
	НеРезидент = (СтранаРегистрации <> Справочники.СтраныМира.Россия);
	
КонецПроцедуры

// Устанавливает режим просмотра (доступности, для команд) элементам формы.
//   Переопределение необходимо использовать для совместной работы с аналогичными механизмами.
//   Обработанные здесь реквизиты следует удалить из массива "Блокируемые элементы".
// 
// Параметры:
//  Форма               - УправляемаяФорма - форма в которой производится изменение доступности
//  БлокируемыеЭлементы - Массив - наименования реквизитов
//  Заблокировать       - Булево - заблокировать или разблокировать реквизиты
Процедура УстановитьТолькоПросмотрЭлементов(
		Форма,
		БлокируемыеЭлементы,
		Заблокировать) Экспорт
	
	
	Если ТипЗнч(БлокируемыеЭлементы) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из БлокируемыеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", Не Заблокировать);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(БлокируемыеЭлементы) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(БлокируемыеЭлементы);
		Иначе
			СтруктураИменЭлементов = БлокируемыеЭлементы;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента.Ключ, "Доступность", Не Заблокировать);
		КонецЦикла
		
	КонецЕсли;
	
	БлокируемыеЭлементы = Новый Массив;
	
КонецПроцедуры

// Обрабатывает таблицу штриховых кодов и получает для каждого из них данные в информационной базе.
//   На входе имеется таблица, в которой заполнены только колонки "Номер строки", "Штриховой код" и "Количество",
//   опционально заполнена колонка "Родитель".
//   В процедуре заполняется допустимый штрихкод упаковки из справочника или признак новой (неизвестной) упаковки.
//
// Параметры:
//  ТаблицаНеАкцизныеМарки - ТаблицаЗначение - имеет следующие колонки:
//   * ШтриховойКод        - Строка                              - штриховой код полученный с ТСД.
//   * Количество          - Число                               - сколько раз был считан данный штрихкод.
//   * ШтрихКодУпаковки    - Справочник.ШтрихкодыУпаковокТоваров - ссылка на имеющуюся в базе упаковку.
//   * Родитель            - Строка                              - штрихкод внешней упаковки.
//   * НомерСтроки         - Число                               - номер строки таблицы
//   * ЭтоУпаковка         - Булево                              - признак новой упаковки
//
Процедура РаспознатьШтрихкоды(ТаблицаНеАкцизныеМарки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтриховыеКоды.ШтриховойКод КАК ШтриховойКод,
	|	ШтриховыеКоды.Количество КАК Количество,
	|	ШтриховыеКоды.НомерСтроки КАК НомерСтроки,
	|	ШтриховыеКоды.Родитель КАК Родитель
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	&ШтриховыеКоды КАК ШтриховыеКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.ШтриховойКод КАК ШтриховойКод,
	|	Штрихкоды.Количество КАК Количество,
	|	Штрихкоды.Родитель КАК Родитель,
	|	Штрихкоды.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Ссылка, НЕОПРЕДЕЛЕНО) КАК ШтрихКодУпаковки,
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL
	|		И ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL КАК ЭтоУпаковка
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.ШтриховойКод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Штрихкоды.ШтриховойКод = ШтрихкодыНоменклатуры.Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ШтриховыеКоды", ТаблицаНеАкцизныеМарки);
	
	ТаблицаНеАкцизныеМарки = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Вызывается при завершении проверки и подбора для отражения данных в документе.
// Предназначена для сохранения связей номенклатуры с GTIN, с учетом коэффициентов групповых упаковок. 
// 
// Параметры:
//  ТаблицаОписанияGTIN - см. ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаОписанияGTIN.
Процедура ЗафиксироватьОписаниеGTIN(ТаблицаОписанияGTIN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДляЗапроса = ТаблицаОписанияGTIN.Скопировать();
	
	ТаблицаДляЗапроса.Колонки.Добавить("EAN", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры.Измерения.Штрихкод.Тип);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляЗапроса Цикл
		
		СтрокаТаблицы.EAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN,
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Характеристика,
	|	ИсходнаяТаблица.Упаковка
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN            КАК Штрихкод,
	|	ИсходнаяТаблица.Номенклатура   КАК Номенклатура,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.Упаковка       КАК Упаковка
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ИсходнаяТаблица.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТаблицаДляЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область РасчетСтатусовОформленияИСМППереопределяемый

// Позволяет переопределить имена реквизитов документа-основания для документа ИСМП.
//
// Параметры:
//  МетаданныеДокументаОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа ИСМП>
//  МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//  Реквизиты  - Структура - имена реквизитов:
//  * Ключ  - служебное имя реквизита в ИСМП
//  * Значение - имя реквизита документа-основания, которое при необходимости надо переопределить
//  (см. РасчетСтатусовОформленияИСМП.СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументов).
Процедура ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления(
			Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаИСМП, Реквизиты) Экспорт
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.СписаниеЗапасов
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.СборкаЗапасов
		ИЛИ МетаданныеДокументаОснования = Метаданные.Документы.ИнвентаризацияЗапасов Тогда
		Реквизиты.Удалить("Ответственный");
	КонецЕсли;
	
	// Уточним имена реквизитов для конкретных документов при необходимости.
	Если МетаданныеДокументаОснования = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС
		Или МетаданныеДокументаОснования = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		Реквизиты.Контрагент = "";
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить текст запроса выборки данных из документов-основания для расчета статуса оформления.
//   Требования к тексту запроса:
//     Если данные из документа выбирать не требуется, то данному параметру надо присвоить значение "" (пустая строка).
//     Результат запроса обязательно должен содержать следующие поля:
//      * Ссылка - ОпределяемыйТип.Основание<Имя документа ИСМП> - ссылка на документ-основание
//      * ЭтоДвижениеПриход - Булево - вид движения ТМЦ (Истина - приход, Ложь - расход)
//      * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура
//      * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры
//      * Серия - ОпределяемыйТип.СерияНоменклатуры - серия номенклатуры
//      * Количество - Число - количество номенклатуры в ее основной единице измерения
//     В результат запроса нужно включать только подконтрольную номенклатуру ИСМП (табак, обувь)
//     Для отбора документов-основания в запросе нужно использовать отбор "В (&МассивДокументов)"
//     Выбранные данные необходимо поместить во временную таблицу (См. РасчетСтатусовОформленияИСМП.ИмяВременнойТаблицыДляВыборкиДанныхДокумента).
//
// Параметры:
//   МетаданныеДокументаОснования - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.Основание<Имя документа ИСМП>
//   МетаданныеДокументаИСМП - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//   ТекстЗапроса - Строка - текст запроса выборки данных, который надо переопределить
//   ДополнительныеПараметрыЗапроса - Структура - дополнительные параметры запроса, требуемые для выполнения запроса 
//       конкретного документа; при необходимости можно дополнить данную структуру
//     Ключ     - имя параметры
//     Значение - значение параметра.
//
Процедура ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления(
			Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаИСМП, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ДвижениеПриход		= "ИСТИНА";							// %1
	ПолеСерии			= "НЕОПРЕДЕЛЕНО";					// %2
	ИмяДокумента		= МетаданныеДокументаОснования.Имя;	// %3
	ИмяТаблицы			= "Товары";							// %4
	ИмяТаблицыСерии		= "СерииНоменклатуры";				// %5
	УсловиеГде			= "ИСТИНА";							// %6
	
	Если ИмяДокумента = "МаркировкаТоваровИСМП"
		ИЛИ ИмяДокумента = "ПеремаркировкаТоваровИСМП" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если МетаданныеДокументаОснования.ТабличныеЧасти.Найти("СерииНоменклатуры") = Неопределено Тогда
		
		ТекстШаблона =
		"ВЫБРАТЬ
		|	ТаблицаЗапасы.Ссылка КАК Ссылка,
		|	%1 КАК ЭтоДвижениеПриход,
		|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапасы.Характеристика КАК Характеристика,
		|	%2 КАК Серия,
		|	ТаблицаЗапасы.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыДокументаОснования
		|ИЗ
		|	Документ.%3.%4 КАК ТаблицаЗапасы
		|ГДЕ
		|	ТаблицаЗапасы.Ссылка В(&МассивДокументов)
		|	И %6
		|	И %7";
		
	Иначе
		
		ТекстШаблона =
		"ВЫБРАТЬ
		|	ТаблицаЗапасы.Ссылка КАК Ссылка,
		|	%1 КАК ЭтоДвижениеПриход,
		|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗапасы.Характеристика КАК Характеристика,
		|	ТаблицаЗапасы.Количество КАК Количество,
		|	ТаблицаЗапасы.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Запасы
		|ИЗ
		|	Документ.%3.%4 КАК ТаблицаЗапасы
		|ГДЕ
		|	ТаблицаЗапасы.Ссылка В(&МассивДокументов)
		|	И %6
		|	И %7
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерии.Ссылка КАК Ссылка,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Серии
		|ИЗ
		|   Документ.%3.%5 КАК ТаблицаСерии
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запасы.Ссылка КАК Ссылка,
		|	ВТ_Запасы.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ВТ_Серии.Серия
		|	КОНЕЦ КАК Серия,
		|	ВЫБОР
		|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
		|			ТОГДА ВТ_Запасы.Количество
		|		ИНАЧЕ ВТ_Серии.Количество
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ ТоварыДокументаОснования
		|ИЗ
		|	ВТ_Запасы КАК ВТ_Запасы
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
		|		ПО ВТ_Запасы.Ссылка = ВТ_Серии.Ссылка
		|			И ВТ_Запасы.КлючСвязи = ВТ_Серии.КлючСвязи";
		
	КонецЕсли;
	
	Если ИмяДокумента = "ЗаказНаПроизводство"
		ИЛИ ИмяДокумента = "ЗаказПоставщику"
		ИЛИ ИмяДокумента = "СборкаЗапасов"
		ИЛИ ИмяДокумента = "ПриходнаяНакладная"
		ИЛИ ИмяДокумента = "ЧекККМВозврат"
		ИЛИ ИмяДокумента = "ИнвентаризацияЗапасов" Тогда
		
		ДвижениеПриход = "ИСТИНА";
		
	КонецЕсли;
	
	Если ИмяДокумента = "ЗаказНаПроизводство"
		ИЛИ ИмяДокумента = "СборкаЗапасов"
		ИЛИ ИмяДокумента = "СписаниеЗапасов"
		ИЛИ ИмяДокумента = "ОтчетОРозничныхПродажах"
		ИЛИ ИмяДокумента = "РасходнаяНакладная"
		ИЛИ ИмяДокумента = "ПриходнаяНакладная"
		ИЛИ ИмяДокумента = "ЧекККМ"
		ИЛИ ИмяДокумента = "ЧекККМВозврат"
		ИЛИ ИмяДокумента = "ИнвентаризацияЗапасов" Тогда
		
		ПолеСерии = "ВЫБОР
				|		КОГДА ТаблицаЗапасы.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) ТОГДА
				|			НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ
				|			ТаблицаЗапасы.Партия
				|	КОНЕЦ";
		
	КонецЕсли;
	
	Если ИмяДокумента = "ЗаказПоставщику"
		ИЛИ ИмяДокумента = "СписаниеЗапасов"
		ИЛИ ИмяДокумента = "ОтчетОРозничныхПродажах"
		ИЛИ ИмяДокумента = "РасходнаяНакладная"
		ИЛИ ИмяДокумента = "ПриходнаяНакладная"
		ИЛИ ИмяДокумента = "ЧекККМ"
		ИЛИ ИмяДокумента = "ЧекККМВозврат"
		ИЛИ ИмяДокумента = "ИнвентаризацияЗапасов" Тогда
		
		ИмяТаблицы = "Запасы";
		
	ИначеЕсли ИмяДокумента = "ЗаказНаПроизводство"
		ИЛИ ИмяДокумента = "СборкаЗапасов" Тогда
		
		ИмяТаблицы = "Продукция";
		
	КонецЕсли;
	
	Если ИмяДокумента = "СборкаЗапасов" Тогда
		ИмяТаблицыСерии = "СерииНоменклатурыПродукция";
	КонецЕсли;
	
	Если МетаданныеДокументаИСМП = Метаданные.Документы.ОтгрузкаТоваровИСМП
		ИЛИ МетаданныеДокументаИСМП = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		
		УсловиеПродукция = "ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
							|И ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
							|И ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)";
		
	ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда
		
		УсловиеПродукция = "ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
							|И ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)";
		
	ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП
		ИЛИ МетаданныеДокументаИСМП = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		
		Если ИмяДокумента = "СписаниеЗапасов"
			ИЛИ ИмяДокумента = "СборкаЗапасов" Тогда
			
			УсловиеПродукция = "ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)";
			
		Иначе
			
			УсловиеПродукция = "ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
							|И ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
							|И ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)";
			
		КонецЕсли;
		
	Иначе
		
		УсловиеПродукция = "ТаблицаЗапасы.Номенклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)";
		
	КонецЕсли;
	
	Если ИмяДокумента = "ЗаказНаПроизводство" Тогда
		
		УсловиеГде = "ТаблицаЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка)";
		
	ИначеЕсли ИмяДокумента = "ЗаказПоставщику" Тогда
		
		УсловиеГде = "ТаблицаЗапасы.Ссылка.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
		
	ИначеЕсли ИмяДокумента = "ЧекККМ"
		И МетаданныеДокументаИСМП = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
		
		УсловиеГде = "ТаблицаЗапасы.Ссылка.КассаККМ В (ВЫБРАТЬ Касса ИЗ РегистрСведений.КассыНеПередающиеДанныеВИСМП)";
		
	ИначеЕсли ИмяДокумента = "ПриходнаяНакладная" Тогда
		
		Если МетаданныеДокументаИСМП = Метаданные.Документы.ПеремаркировкаТоваровИСМП Тогда
			УсловиеГде = "ТаблицаЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)";
		ИначеЕсли МетаданныеДокументаИСМП = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
			УсловиеГде = "ТаблицаЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстШаблона, ДвижениеПриход, ПолеСерии, ИмяДокумента, ИмяТаблицы, ИмяТаблицыСерии, УсловиеПродукция, УсловиеГде);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСМППереопределяемый

// Подготавливает структуру для печати этикеток
// 
Процедура СтруктураНастроекЭтикеткаОбувь(СтруктураНастроек) Экспорт
	
	ОбязательныеПоля = Новый Массив;
	
	ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	ОбязательныеПоля.Добавить("ШаблонЭтикетки");
	ОбязательныеПоля.Добавить("Количество");
	ОбязательныеПоля.Добавить("НомерВГруппе");
	ОбязательныеПоля.Добавить("СодержимоеКоличество");
	ОбязательныеПоля.Добавить("КодМаркировки");
	
	СтруктураНастроек.Вставить("ОбязательныеПоля", ОбязательныеПоля);
	
КонецПроцедуры

// По таблице с колонками Номенклатура и Характеристика формирует массив GTIN 
//   и соответствие конкретных кодов GTIN номенклатуре/характеристике
// 
// Параметры:
//   ТаблицаПроверки  - ТаблицаЗначений - входящий, проверяемые данные с колонками
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//   ПроверяемыеGTIN  - Массив          - исходящий, все GTIN привязанные к одной из строк таблицы
//   СоответствиеGTIN - Соответствие    - исходящий, пара (GTIN - (Номенклатура,Характеристика))
Процедура ЗаполнитьПроверяемыеGTIN(ТаблицаПроверки, ПроверяемыеGTIN, СоответствиеGTIN) Экспорт
	
	СоответствиеGTIN = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаПроверки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.Штрихкод) Тогда
			СоответствиеGTIN.Вставить(Выборка.Штрихкод, 
				Новый Структура("Номенклатура,Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеGTIN Цикл
		ПроверяемыеGTIN.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьЭтикетокИСМППереопределяемый

// В данной процедуре определяется метод печати этикеток ИС МП
// 
// Параметры:
// 	ТаблицаДляПечати - Массив - Массив строк таблицы (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Дополнительные параметры для печати
// 	СтандартнаяОбработка - Булево - Признак использования библиотечной печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДляПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка) Экспорт
	
	Если ТаблицаДляПечати.Колонки.Найти("ЭтоКодМаркировки") = Неопределено Тогда
		ТаблицаДляПечати.Колонки.Добавить("ЭтоКодМаркировки");
		ТаблицаДляПечати.ЗаполнитьЗначения(Истина, "ЭтоКодМаркировки");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействиеИСМППереопределяемый

// При записи документа ЭДО может измениться статус оформления документа, по которому происходит электронный документооборот:
//   * Для прямого обмена с ИС МП (документ "Отгрузка товаров") указание кодов маркировки требуется или в ЭДО, или в отгрузке.
//   * Подразумевается, что документ ЭДО не может изменить свой документ-основание.
//
// Параметры:
//  ЭлектронныйДокументИсходящийОбъект - ДокументОбъект.ЭлектронныйДокументИсходящий - записываемый документ.
//  ДокументыТребующиеПересчета - Массив Из см. РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов - 
//   документы, связанные с записываемым электронным, для которых требуется пересчитать статус оформления.
//
Процедура ТребуетсяПересчетСтатусовОформления(ЭлектронныйДокументИсходящийОбъект, ДокументыТребующиеПересчета) Экспорт

	ЭлектронныеДокументы = Новый Массив;
	ЭлектронныеДокументы.Добавить(ЭлектронныйДокументИсходящийОбъект.Ссылка);
	Основания = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныеДокументы);
	Основания.Колонки.ОбъектУчета.Имя = "ДокументОснование";
	
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого Строка Из Основания Цикл
		ТипОснования = ТипЗнч(Строка.ДокументОснование);
		Элемент = ДокументыПоТипам.Получить(ТипОснования);
		Если Элемент = Неопределено Тогда
			Элемент = Новый Массив;
		КонецЕсли;
		Элемент.Добавить(Строка.ДокументОснование);
		ДокументыПоТипам.Вставить(ТипОснования, Элемент);
	КонецЦикла;
	
	СчетаФактуры = ДокументыПоТипам.Получить(Тип("ДокументСсылка.СчетФактура"));
	Если СчетаФактуры<>Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СчетаФактуры);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.Ссылка В(&Ссылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТипОснования = ТипЗнч(Выборка.ДокументОснование);
			Элемент = ДокументыПоТипам.Получить(ТипОснования);
			Если Элемент = Неопределено Тогда
				Элемент = Новый Массив;
			КонецЕсли;
			Элемент.Добавить(Выборка.ДокументОснование);
			ДокументыПоТипам.Вставить(ТипОснования, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ОснованиеОтгрузкаТоваровИСМП.Тип.Типы() Цикл
		ДокументыТипа = ДокументыПоТипам.Получить(Тип);
		Если ДокументыТипа<>Неопределено Тогда
			ДокументыТребующиеПересчета.Добавить(ДокументыТипа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСлужебныеРеквизитыИСМПВСтрокеТЧ(СтрокаТабличнойЧасти) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "МаркируемаяПродукция") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "ВидПродукцииИС") Тогда 
		
		СтруктураДанные = Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
		
		СписокСвойств = "МаркируемаяПродукция, ВидПродукцииИС";
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, СписокСвойств);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные) Экспорт
	
	МаркируемаяПродукция = Ложь;
	// ++( ГосИС 1.1.1.12
	//Если СтруктураДанные.Номенклатура.ТабачнаяПродукция
	//	ИЛИ СтруктураДанные.Номенклатура.ОбувнаяПродукция
	//	ИЛИ СтруктураДанные.Номенклатура.ШиныИПокрышки
	//	ИЛИ СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый Тогда
	ВидыПродукцииИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	
	Если (НЕ СтруктураДанные.Номенклатура.ВидПродукцииИС.Пустая()
		И НЕ ВидыПродукцииИСМП.Найти(СтруктураДанные.Номенклатура.ВидПродукцииИС) = Неопределено)
		ИЛИ (НЕ СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Пустая() 
		И СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый) Тогда
		МаркируемаяПродукция = Истина;
	КонецЕсли;
	//)++
	
	// ++( ГосИС 1.1.1.12
	//ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	//Если СтруктураДанные.Номенклатура.ТабачнаяПродукция Тогда
	//	ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак;
	//ИначеЕсли СтруктураДанные.Номенклатура.ОбувнаяПродукция Тогда
	//	ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь;
	//ИначеЕсли СтруктураДанные.Номенклатура.АлкогольнаяПродукция Тогда
	//	ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная;
	//КонецЕсли;
	ВидПродукцииИС = СтруктураДанные.Номенклатура.ВидПродукцииИС;
	
	СтруктураДанные.Вставить("МаркируемаяПродукция", МаркируемаяПродукция);
	СтруктураДанные.Вставить("ВидПродукцииИС", ВидПродукцииИС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Заменяет не полные данные по кодам маркировки для передачи в ККТ.
// 
// Параметры:
// 	Коллекция - ТаблицаЗначений - Таблица штрихкодов.
Процедура УстановитьШтрихкодДляПечатиККТ(Коллекция) Экспорт
	
	ПолныйКодМОТП = Новый Соответствие();
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		
		Если СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И СтрокаКоллекции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
			И СтрокаКоллекции.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Если СтрокаКоллекции.ДанныеРазбора = Неопределено
				Или (СтрокаКоллекции.ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				 И СтрокаКоллекции.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
			НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаКоллекции.ДанныеРазбора, СтрокаКоллекции.ВидПродукции, ПараметрыНормализацииКМ);
			
			ПолныйКодМОТП.Вставить(НормализованныйКод, СтрокаКоллекции);
			СтрокаКоллекции.ТребуетсяПолныйКод = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолныйКодМОТП.Количество() > 0 Тогда 
		
		УстановитьШтрихкодДляПечатиККТ(ПолныйКодМОТП);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуШтрихкодовИзДереваУпаковокРекурсивно(ТаблицаПриемник, ДеревоУпаковок) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьТаблицуШтрихкодовИзДереваУпаковокРекурсивно(ТаблицаПриемник, СтрокаДерева);
			Продолжить;
		ИначеЕсли Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.Количество         = 1;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			НоваяСтрока.Приоритет          = 5;
			НоваяСтрока.КоличествоУпаковок = 1;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
				НоваяСтрока.Количество = СтрокаДерева.КоличествоПачек;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеНаОсновании

#Область ЗаказНаЭмиссию

Процедура ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаПроизводство")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаПроизводство(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаПроизводство(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	ДокументСсылка.СтруктурнаяЕдиница КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказНаПроизводство", "Продукция");
	
КонецПроцедуры

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	ДокументСсылка.СтруктурнаяЕдиница КАК ПроизводственныйОбъект,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
	|	КОНЕЦ КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПоставщику");
	
КонецПроцедуры

Процедура ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ИмяТабличнойЧасти = "Запасы")
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.СерийныеНомера.Очистить();
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
	КонецЕсли;
	Если ФильтрВидПродукции = Неопределено Тогда
		ФильтрВидПродукции = ОпределитьВидПродукцииДокумента(Основание);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",             ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование",     Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",       Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.КонечныеСтатусы());
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения);
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Товары.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИмяПрикладногоДокумента.ИмяТабличнойЧасти КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И %1
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|   Товары.ЕдиницаИзмерения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура     КАК Номенклатура,
	|	Товары.Характеристика   КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество       КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	NULL,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.ЕдиницаИзмерения  КАК Упаковка,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.ЕдиницаИзмерения
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|",
	УсловиеВидПродукции);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяПрикладногоДокумента",ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяТабличнойЧасти",ИмяТабличнойЧасти);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область МаркировкаИСМП

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииИнвентаризацииЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаЗапасов КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаЗапасов", "Продукция");
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДокументСсылка.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)
	|			КОНЕЦ
	|	КОНЕЦ КАК Операция,
	|	ДокументСсылка.Контрагент.СтранаРегистрации КАК СтранаПроисхождения,
	|	ДокументСсылка.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПриходнаяНакладная",, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	ДокументСсылка.СтруктурнаяЕдиница КАК Склад,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОприходованиеЗапасов");
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииИнвентаризацииЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнвентаризацияЗапасов.Ссылка КАК ДокументОснование,
	|	ИнвентаризацияЗапасов.Организация КАК Организация,
	|	ИнвентаризацияЗапасов.СтруктурнаяЕдиница КАК Склад,
	|	ЛОЖЬ КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов КАК ИнвентаризацияЗапасов
	|ГДЕ
	|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ИнвентаризацияЗапасов");
	
КонецПроцедуры

Процедура ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ИмяТабличнойЧасти = "Запасы", ЕстьШтрихкодыУпаковок = Ложь)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
	КонецЕсли;
	Если ФильтрВидПродукции = Неопределено Тогда
		ФильтрВидПродукции = ОпределитьВидПродукцииДокумента(Основание);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.КонечныеСтатусы());
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения);
	
	// ++( 00-00012169
	ИмяФормы = "Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента";
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(Строка, ИмяФормы);
	КонецЦикла;
	// )++ 00-00012169
	
	Если ЕстьШтрихкодыУпаковок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	// ++( 00-00012169
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ КАК Серия,
	|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД КАК КодТНВЭД,
	|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи
	//|ПОМЕСТИТЬ ТоварыСерии
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И %1
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ,
	|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.КлючСвязи
	|;
	|ВЫБРАТЬ
	|	ТаблицаСерии.Серия	КАК Серия,
	|	ТаблицаСерии.Количество	КАК Количество,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	&ОписаниеДокументаСерии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &ДокументОснование
	|;
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.КодТНВЭД КАК КодТНВЭД,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Товары.КлючСвязи = ВТ_Серии.КлючСвязи
	|";
	// )++ 00-00012169 
		
	// --( 00-00012169
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	//|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ КАК Серия,
	//|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД КАК КодТНВЭД,
	//|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	//|	СУММА(ТаблицаТовары.Количество) КАК Количество
	//|ПОМЕСТИТЬ ТоварыСерии
	//|ИЗ
	//|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	//|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	//|ГДЕ
	//|	ТаблицаТовары.Ссылка = &ДокументОснование
	//|	И %1
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаТовары.Номенклатура,
	//|	ТаблицаТовары.Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ,
	//|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД,
	//|	ТаблицаТовары.ЕдиницаИзмерения
	//|";
	// )-- 00-00012169
	
	ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧасти));
	// ++( 00-00012169
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧастиСерии(ИмяДокумента)));
	// )++ 00-00012169

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.Упаковка       КАК Упаковка,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.КодТНВЭД,
	|	ОформленныеТовары.Упаковка,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.КодТНВЭД          КАК КодТНВЭД,
	|	ТоварыКОформлению.Упаковка          КАК Упаковка,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.КодТНВЭД,
	|	ТоварыКОформлению.Упаковка
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СписаниеКодовМаркировки

Процедура ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборота

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервичногоДокумента,
	|	ФискальныеОперации.Дата КАК ДатаПервичногоДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО (ФискальныеОперации.ДокументОснование = &ДокументОснование)
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ЧекККМ",, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервичногоДокумента,
	|	ФискальныеОперации.Дата КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа)
	|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС)
	|	КОНЕЦ КАК Операция,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД)
	|	КОНЕЦ КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.РасходнаяНакладная КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО (ФискальныеОперации.ДокументОснование = &ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = ДокументСсылка.Контрагент)
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "РасходнаяНакладная",, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах");
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.СписаниеЗапасов КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеЗапасов");
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.СборкаЗапасов КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаЗапасов", "Продукция");
	
КонецПроцедуры

Процедура ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента,  ИмяТабличнойЧасти = "Запасы", Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ШтрихкодыУпаковок.Очистить();
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
	КонецЕсли;
	Если ФильтрВидПродукции = Неопределено Тогда
		ФильтрВидПродукции = ОпределитьВидПродукцииДокумента(Основание);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], ДанныеЗаполнения);
	
	// ++( 00-00012169
	ИмяФормы = "Документ.ВыводаИзОборотаИСМП.Форма.ФормаДокумента";
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(Строка, ИмяФормы);
	КонецЦикла;
	// )++ 00-00012169
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти, ТабличнаяЧастьШтрихкоды)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	// ++( 00-00012169
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ                           КАК Серия,
	|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(&ОписаниеПоляСумма1)       КАК Сумма,
	|	&ОписаниеПоляСтавкаНДС          КАК СтавкаНДС,
	|	СУММА(&ОписаниеПоляСумма2)    КАК СуммаНДС,
	|	СУММА(&ОписаниеПоляСумма3)   КАК СуммаСНДС,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи
	//|ПОМЕСТИТЬ ТоварыСерии
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И %1
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТовары.Партия
	|	КОНЕЦ,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	&ОписаниеПоляСтавкаНДС,
	|	ТаблицаТовары.КлючСвязи
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Серия	КАК Серия,
	|	ТаблицаСерии.Количество	КАК Количество,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	&ОписаниеДокументаСерии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|   ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Сумма КАК Сумма,
	|   ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС,
	|	ВТ_Товары.СуммаСНДС КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Товары.КлючСвязи = ВТ_Серии.КлючСвязи
	|;";
	// )++ 00-00012169
	
	// --( 00-00012169
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	//|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ                           КАК Серия,
	//|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	//|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	//|	СУММА(&ОписаниеПоляСумма1)       КАК Сумма,
	//|	&ОписаниеПоляСтавкаНДС          КАК СтавкаНДС,
	//|	СУММА(&ОписаниеПоляСумма2)    КАК СуммаНДС,
	//|	СУММА(&ОписаниеПоляСумма3)   КАК СуммаСНДС
	//|ПОМЕСТИТЬ ТоварыСерии
	//|ИЗ
	//|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	//|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	//|ГДЕ
	//|	ТаблицаТовары.Ссылка = &ДокументОснование
	//|	И %1
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаТовары.Номенклатура,
	//|	ТаблицаТовары.Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ,
	//|	ТаблицаТовары.ЕдиницаИзмерения,
	//|	&ОписаниеПоляСтавкаНДС
	//|;";
	// )-- 00-00012169
	
	Если ИмяДокумента = "СборкаЗапасов"
		ИЛИ ИмяДокумента = "СписаниеЗапасов" Тогда
		ПолеСумма = "0";
	Иначе
		ПолеСумма = "ТаблицаТовары.Сумма";
	КонецЕсли;
	
	Если ИмяДокумента = "РасходнаяНакладная"
		ИЛИ ИмяДокумента = "ОтчетОРозничныхПродажах"
		ИЛИ ИмяДокумента = "ЧекККМ" Тогда
		
		ПолеСтавкаНДС = "ТаблицаТовары.СтавкаНДС";
		ПолеСуммаНДС = "ТаблицаТовары.СуммаНДС";
		ПолеСуммаСНДС = "ТаблицаТовары.Всего";
	Иначе
		
		ПолеСтавкаНДС = "ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)";
		ПолеСуммаНДС = "0";
		ПолеСуммаСНДС = "0";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма1", ПолеСумма);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСтавкаНДС", ПолеСтавкаНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма2", ПолеСуммаНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма3", ПолеСуммаСНДС);
	
	ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧасти));
	// ++( 00-00012169
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧастиСерии(ИмяДокумента)));
	// )++ 00-00012169
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Упаковка       КАК Упаковка,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма,
	|	Товары.СтавкаНДС      КАК СтавкаНДС,
	|	Товары.СуммаНДС       КАК СуммаНДС,
	|	Товары.СуммаСНДС      КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.Упаковка,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.Упаковка          КАК Упаковка,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Упаковка,
	|	ТоварыКОформлению.СтавкаНДС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И %4
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		УсловиеВидПродукции);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Перемаркировка

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Основание = ДанныеЗаполнения;
		Если ТипЗнч(Основание) = Тип("Структура") Тогда
			Основание = Основание.Основание;
		КонецЕсли;
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
			ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		Основание = ДанныеЗаполнения;
		Если ТипЗнч(Основание) = Тип("Структура") Тогда
			Основание = Основание.Основание;
		КонецЕсли;
		
		ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииЧекаНаВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПриходнаяНакладная");
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеКодовМаркировкиИСМПНаОснованииЧекаНаВозврат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	Штрихкоды = Новый Структура;
	Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "АкцизныеМарки");
	Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "АкцизнаяМарка");
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ЧекККМВозврат", Штрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Структура;
		Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "ШтрихкодыУпаковок");
		Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "ШтрихкодУпаковки");
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
	КонецЕсли;
	Если ФильтрВидПродукции = Неопределено Тогда
		ФильтрВидПродукции = ОпределитьВидПродукцииДокумента(Основание);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",       ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Основание",       Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы", Документы.ПеремаркировкаТоваровИСМП.КонечныеСтатусы());
	
	Выборка = Запрос.Выполнить();
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Выборка, ДанныеЗаполнения);
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ТабличнаяЧастьШтрихкоды)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка         КАК КодМаркировки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК НоваяНоменклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК НоваяХарактеристика
	|ИЗ
	|	Документ.%1.%2 КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.%3 = ШтрихкодыУпаковокТоваров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремаркировкаТоваровИСМП.Товары КАК ОформленныеШтрихкоды
	|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &Основание
	|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|		И ОформленныеШтрихкоды.КодМаркировки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	Штрихкоды.Ссылка = &Основание
	|	И ОформленныеШтрихкоды.КодМаркировки ЕСТЬ NULL
	|	И %4
	|",
	ИмяДокумента,
	ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
	ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
	УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

#КонецОбласти

#Область Отгрузка

Процедура ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументСсылка.Ссылка КАК ДокументОснование,
		|	ДокументСсылка.Организация КАК Организация,
		|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
		|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервичногоДокумента,
		|	ФискальныеОперации.Дата КАК ДатаПервичногоДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
		|	ВЫБОР
		|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД)
		|	КОНЕЦ КАК ВидПервичногоДокумента,
		|	ДокументСсылка.Контрагент КАК Контрагент,
		// --( 00-00012169
		//|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
		//|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента,
		// )-- 00-00012169
		|	ДокументСсылка.Дата КАК ДатаОтгрузки
		|ИЗ
		|	Документ.РасходнаяНакладная КАК ДокументСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО (ФискальныеОперации.ДокументОснование = &ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Ссылка = ДокументСсылка.Контрагент)
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование");
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
		ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
		ЗаполнитьТабличныеЧастиОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "РасходнаяНакладная",, ТабличнаяЧастьШтрихкоды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента,  ИмяТабличнойЧасти = "Запасы", Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ШтрихкодыУпаковок.Очистить();
	
	Основание = ДанныеЗаполнения;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
		ФильтрВидПродукции = Основание.ЗаполнениеСВидомПродукции;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
	КонецЕсли;
	Если ФильтрВидПродукции = Неопределено Тогда
		ФильтрВидПродукции = ОпределитьВидПродукцииДокумента(Основание);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОтгрузкаТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ОтгрузкаТоваровИСМП.КонечныеСтатусы());
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], ДанныеЗаполнения);
	// ++( 00-00012169
	ИмяФормы = "Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента";
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(Строка, ИмяФормы);
	КонецЦикла;
	// )++ 00-00012169
	
	Если ФильтрВидПродукции = Неопределено Тогда
		ИнтеграцияИСМП.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияОтгрузкаТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти, ТабличнаяЧастьШтрихкоды)
	
	УсловиеВидПродукции = УсловиеПоВидуПродукции(ВидПродукции);
	
	// ++( 00-00012169
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ                           КАК Серия,
	|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(&ОписаниеПоляСумма1)       КАК Сумма,
	|	&ОписаниеПоляСтавкаНДС          КАК СтавкаНДС,
	|	СУММА(&ОписаниеПоляСумма2)    КАК СуммаНДС,
	|	СУММА(&ОписаниеПоляСумма3)   КАК СуммаСНДС,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи
	//|ПОМЕСТИТЬ ТоварыСерии
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И %1
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТовары.Партия
	|	КОНЕЦ,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	&ОписаниеПоляСтавкаНДС,
	|	ТаблицаТовары.КлючСвязи
	|;
	|ВЫБРАТЬ
	|	ТаблицаСерии.Серия	КАК Серия,
	|	ТаблицаСерии.Количество	КАК Количество,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	&ОписаниеДокументаСерии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &ДокументОснование
	|;
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС,
	|	ВТ_Товары.СуммаСНДС КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Товары.КлючСвязи = ВТ_Серии.КлючСвязи
	|
	|;";
	// )++ 00-00012169
	
	// --( 00-00012169
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	//|	ТаблицаТовары.Характеристика    КАК Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ                           КАК Серия,
	//|	ТаблицаТовары.ЕдиницаИзмерения  КАК Упаковка,
	//|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	//|	СУММА(&ОписаниеПоляСумма1)       КАК Сумма,
	//|	&ОписаниеПоляСтавкаНДС          КАК СтавкаНДС,
	//|	СУММА(&ОписаниеПоляСумма2)    КАК СуммаНДС,
	//|	СУММА(&ОписаниеПоляСумма3)   КАК СуммаСНДС
	//|ПОМЕСТИТЬ ТоварыСерии
	//|ИЗ
	//|	&ОписаниеДокументаТовары КАК ТаблицаТовары
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	//|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	//|ГДЕ
	//|	ТаблицаТовары.Ссылка = &ДокументОснование
	//|	И %1
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблицаТовары.Номенклатура,
	//|	ТаблицаТовары.Характеристика,
	//|	ВЫБОР
	//|		КОГДА ТаблицаТовары.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ТаблицаТовары.Партия
	//|	КОНЕЦ,
	//|	ТаблицаТовары.ЕдиницаИзмерения,
	//|	&ОписаниеПоляСтавкаНДС
	//|;";
	// )-- 00-00012169
	
	Если ИмяДокумента = "СборкаЗапасов"
		ИЛИ ИмяДокумента = "СписаниеЗапасов" Тогда
		ПолеСумма = "0";
	Иначе
		ПолеСумма = "ТаблицаТовары.Сумма";
	КонецЕсли;
	
	Если ИмяДокумента = "РасходнаяНакладная"
		ИЛИ ИмяДокумента = "ОтчетОРозничныхПродажах"
		ИЛИ ИмяДокумента = "ЧекККМ" Тогда
		
		ПолеСтавкаНДС = "ТаблицаТовары.СтавкаНДС";
		ПолеСуммаНДС = "ТаблицаТовары.СуммаНДС";
		ПолеСуммаСНДС = "ТаблицаТовары.Всего";
	Иначе
		
		ПолеСтавкаНДС = "ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)";
		ПолеСуммаНДС = "0";
		ПолеСуммаСНДС = "0";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма1", ПолеСумма);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСтавкаНДС", ПолеСтавкаНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма2", ПолеСуммаНДС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСумма3", ПолеСуммаСНДС);
	
	ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧасти));
	// ++( 00-00012169
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента, ИмяТабличнойЧастиСерии(ИмяДокумента)));
	// )++ 00-00012169
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Упаковка       КАК Упаковка,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма,
	|	Товары.СтавкаНДС      КАК СтавкаНДС,
	|	Товары.СуммаНДС       КАК СуммаНДС,
	|	Товары.СуммаСНДС      КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.Упаковка,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.Упаковка          КАК Упаковка,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Упаковка,
	|	ТоварыКОформлению.СтавкаНДС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И %4
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		УсловиеВидПродукции);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, УсловиеВидПродукции);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеМаркируемойПродукцииДокумента

Функция ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции) Экспорт
	
	ПоляВЫБРАТЬ = Новый Массив;
	ПоляБезGTIN = Новый Массив;
	Для Каждого Колонка Из ТаблицаМаркируемойПродукции.Колонки Цикл
		Если Колонка.Имя <> "КодыGTIN"
				И Колонка.Имя <> "ИдентификаторыПроисхожденияВЕТИС" Тогда
			ПоляВЫБРАТЬ.Добавить(СтрШаблон("МаркируемаяПродукция.%1 КАК %1", Колонка.Имя));
			Если Колонка.Имя <> "GTIN" Тогда
				ПоляБезGTIN.Добавить(СтрШаблон("МаркируемаяПродукция.%1 КАК %1", Колонка.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПоляВЫБРАТЬ
	|ПОМЕСТИТЬ ВТМаркируемаяПродукция
	|ИЗ
	|	&МаркируемаяПродукция КАК МаркируемаяПродукция
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	&ПоляБезGTIN
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		 И МаркируемаяПродукция.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ГДЕ
	|	МаркируемаяПродукция.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
	|	И МаркируемаяПродукция.GTIN = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Номенклатура не заполнена только для строк с остаточными GTIN
	|	&ПоляВЫБРАТЬ
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|ГДЕ
	|	МаркируемаяПродукция.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
	|	И МаркируемаяПродукция.GTIN <> """"
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МаркируемаяПродукция", ТаблицаМаркируемойПродукции);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВЫБРАТЬ", СтрСоединить(ПоляВЫБРАТЬ, ",
	|"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляБезGTIN", СтрСоединить(ПоляБезGTIN, ",
	|"));
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииДанныеФормыСтруктура(ДанныеФормыСтруктура, ВидМаркируемойПродукции)
	
	Если ТипЗнч(ДанныеФормыСтруктура.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
		ИЛИ ТипЗнч(ДанныеФормыСтруктура.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
		ИЛИ ТипЗнч(ДанныеФормыСтруктура.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипЗнч(ДанныеФормыСтруктура.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ДанныеФормыКоллекцияТовары = ДанныеФормыСтруктура["Запасы"];
		ДанныеФормыКоллекцияСерии = ДанныеФормыСтруктура["СерииНоменклатуры"];
		
		Результат = ЗапросМаркируемойПродукцииДанныеФормыКоллекцияССоединениемСерий(ДанныеФормыКоллекцияТовары, ДанныеФормыКоллекцияСерии, ВидМаркируемойПродукции);
		
	Иначе
		
		ДанныеФормыКоллекцияТовары = ДанныеФормыСтруктура["Товары"];
		ДанныеФормыКоллекцияСерии = Неопределено;
		
		Результат = ЗапросМаркируемойПродукцииДанныеФормыКоллекция(ДанныеФормыКоллекцияТовары, ВидМаркируемойПродукции);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросМаркируемойПродукцииДанныеФормыКоллекция(ДанныеФормыКоллекция, ВидМаркируемойПродукции) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Серия КАК Серия,
	|	СУММА(ВТ_Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_МаркируемаяПродукция
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВТ_Товары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	МаркируемаяПродукция.Номенклатура КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика КАК Характеристика,
	|	МаркируемаяПродукция.Серия КАК Серия,
	|	МаркируемаяПродукция.Количество КАК Количество
	|ИЗ
	|	ВТ_МаркируемаяПродукция КАК МаркируемаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И МаркируемаяПродукция.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", ДанныеФормыКоллекция.Выгрузить());
	
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция ЗапросМаркируемойПродукцииДанныеФормыКоллекцияССоединениемСерий(ДанныеФормыКоллекцияТовары, ДанныеФормыКоллекцияСерии, ВидМаркируемойПродукции)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Серия КАК Серия,
	|	Серии.КлючСвязи КАК КлючСвязи,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТ_ТоварыСерии
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Товары.КлючСвязи = ВТ_Серии.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыСерии.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыСерии.Характеристика КАК Характеристика,
	|	ВТ_ТоварыСерии.Серия КАК Серия,
	|	СУММА(ВТ_ТоварыСерии.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_МаркируемаяПродукция
	|ИЗ
	|	ВТ_ТоварыСерии КАК ВТ_ТоварыСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ТоварыСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТоварыСерии.Номенклатура,
	|	ВТ_ТоварыСерии.Характеристика,
	|	ВТ_ТоварыСерии.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	МаркируемаяПродукция.Номенклатура КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика КАК Характеристика,
	|	МаркируемаяПродукция.Серия КАК Серия,
	|	МаркируемаяПродукция.Количество КАК Количество
	|ИЗ
	|	ВТ_МаркируемаяПродукция КАК МаркируемаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И МаркируемаяПродукция.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", ДанныеФормыКоллекцияТовары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДанныеФормыКоллекцияСерии.Выгрузить());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииПриходнаяНакладная(Документ, ВидМаркируемойПродукции) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПриходнаяНакладнаяЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходнаяНакладнаяСерииНоменклатуры.Серия КАК Серия,
	|	ПриходнаяНакладнаяСерииНоменклатуры.Количество КАК Количество,
	|	ПриходнаяНакладнаяСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК ПриходнаяНакладнаяСерииНоменклатуры
	|ГДЕ
	|	ПриходнаяНакладнаяСерииНоменклатуры.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТ_ЗапасыСерии
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Запасы.КлючСвязи = ВТ_Серии.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ВТ_ЗапасыСерии.Номенклатура КАК Номенклатура,
	|	ВТ_ЗапасыСерии.Характеристика КАК Характеристика,
	|	ВТ_ЗапасыСерии.Серия КАК Серия,
	|	ВТ_ЗапасыСерии.Количество КАК Количество
	|ИЗ
	|	ВТ_ЗапасыСерии КАК ВТ_ЗапасыСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ЗапасыСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВТ_ЗапасыСерии.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ВТ_ЗапасыСерии.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросМаркируемойПродукцииЧекККМ(ФормаОбъект, ВидМаркируемойПродукции)
	
	Если ТипЗнч(ФормаОбъект) = Тип("ФормаКлиентскогоПриложения") Тогда
		Запасы = ФормаОбъект.Объект.Запасы;
		Серии = ФормаОбъект.Объект.СерииНоменклатуры;
	Иначе
		Запасы = ФормаОбъект.Запасы;
		Серии = ФормаОбъект.Серии;
	КонецЕсли;
	
	Возврат ЗапросМаркируемойПродукцииДанныеФормыКоллекцияССоединениемСерий(Запасы, Серии, ВидМаркируемойПродукции);
	
КонецФункции

Функция ЗапросМаркируемойПродукцииРасходнаяНакладная(Документ, ВидМаркируемойПродукции) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ДокументСсылка
	|	И &УсловиеМаркируемаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладнаяСерииНоменклатуры.Серия КАК Серия,
	|	РасходнаяНакладнаяСерииНоменклатуры.Количество КАК Количество,
	|	РасходнаяНакладнаяСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК РасходнаяНакладнаяСерииНоменклатуры
	|ГДЕ
	|	РасходнаяНакладнаяСерииНоменклатуры.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТ_ЗапасыСерии
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Запасы.КлючСвязи = ВТ_Серии.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ВТ_ЗапасыСерии.Номенклатура КАК Номенклатура,
	|	ВТ_ЗапасыСерии.Характеристика КАК Характеристика,
	|	ВТ_ЗапасыСерии.Серия КАК Серия,
	|	ВТ_ЗапасыСерии.Количество КАК Количество
	|ИЗ
	|	ВТ_ЗапасыСерии КАК ВТ_ЗапасыСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_ЗапасыСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВТ_ЗапасыСерии.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ВТ_ЗапасыСерии.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN";
	
	УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	Возврат Запрос.Выполнить();

КонецФункции

#КонецОбласти

Процедура ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Штрихкод) ЭКспорт
	
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	
	Если ПараметрыШтрихкода.Результат <> Неопределено Тогда
		
		СвойстваШтрихкода = ПараметрыШтрихкода.Результат;
		
		Если ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			Строка.ПрефиксКомпанииGS1 = Формат(СвойстваШтрихкода.ПрефиксКомпанииGS1, "ЧГ=0");
			Строка.ЦифраРасширения    = Формат(СвойстваШтрихкода.ЦифраРасширения, "ЧГ=0");
			Строка.СерийныйНомерSSCC  = Формат(СвойстваШтрихкода.СерийныйНомерSSCC, "ЧГ=0");
			Строка.КонтрольноеЧисло   = Формат(СвойстваШтрихкода.КонтрольноеЧисло, "ЧГ=0");
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			
			Если СвойстваШтрихкода.НомерФорматаCode128 = 1 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ДатаМаркировки           = СвойстваШтрихкода.ДатаМаркировки;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 2 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ТипЛогистическойЕдиницы  = СвойстваШтрихкода.ТипЛогистическойЕдиницы;
				Строка.НомерПлощадкиМаркировки  = СвойстваШтрихкода.НомерПлощадкиМаркировки;
				Строка.ГодГенерацииШтрихкода    = Формат(СвойстваШтрихкода.ГодГенерацииШтрихкода, "ДФ=yyyy");
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 3 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			
			Для каждого СтрокаПараметровПримененияGS1 Из ПараметрыШтрихкода.Результат Цикл
				ИмяКолонкиПечати = "ИдентификаторПрименения_" + СтрокаПараметровПримененияGS1.КлючИдентификатора;
				Строка[ИмяКолонкиПечати] = СтрокаПараметровПримененияGS1.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытииФормыПроверкиИПодбораВФормеРМК(Форма, Результат, ВидПродукцииИС)
	
	ДанныеПроверкиИПодбора = ПолучитьИзВременногоХранилища(Результат);
	
	ИнтеграцияИСУНФ.УдалитьСтрокиАкцизныхМарокПоВидуПродукции(Форма.Объект.АкцизныеМарки, ВидПродукцииИС);
	
	Для Каждого СтрокаАкцизныхМарок Из ДанныеПроверкиИПодбора.ТаблицаШтрихкодовВерхнегоУровня Цикл
		НоваяСтрокаАкцизныхМарок = Форма.Объект.АкцизныеМарки.Добавить();
		НоваяСтрокаАкцизныхМарок.АкцизнаяМарка = СтрокаАкцизныхМарок.ШтрихкодУпаковки;
	КонецЦикла;
	
	ОтборПоВидуПродукции  = Новый Структура("ВидПродукцииИС", ВидПродукцииИС);
	СтрокиПоВидуПродукции = Форма.Объект.Запасы.НайтиСтроки(ОтборПоВидуПродукции);
	
	ДобавленныеСтроки = Новый Массив;
	ИзмененныеСтроки  = Новый Массив;
	
	УчитыватьМРЦ = ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак;
	
	Для Каждого СтрокаПродукции Из ДанныеПроверкиИПодбора.ТаблицаПодобраннойПровереннойПродукции Цикл
		ПродукцияНайдена = Ложь;
		
		// ++( 00-00365291
		ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаПродукции.GTIN);
		ДанныеШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.ДанныеШтрихкода(ШтрихкодEAN);
		Если ЗначениеЗаполнено(ДанныеШтрихкода) И ЗначениеЗаполнено(ДанныеШтрихкода.Партия) Тогда
			Партия = ДанныеШтрихкода.Партия;
		Иначе
			Партия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		// )++ 00-00365291
		
		МРЦ = 0;
		Если УчитыватьМРЦ И ЗначениеЗаполнено(СтрокаПродукции.МРЦ) Тогда
			Если СтрокаПродукции.КоличествоПодобрано > 0
				И СтрокаПродукции.КоличествоПодобрано % 10 = 0
				И СтрокаПродукции.КоличествоПодобрано <> ДанныеПроверкиИПодбора.ТаблицаШтрихкодовВерхнегоУровня.Количество() Тогда
				// Это блок.
				МРЦ = СтрокаПродукции.МРЦ / СтрокаПродукции.КоличествоПодобрано;
			Иначе
				МРЦ = СтрокаПродукции.МРЦ;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
			Если СтрокаПродукции.Номенклатура = СтрокаПоВидуПродукции.Номенклатура
				И СтрокаПродукции.Характеристика = СтрокаПоВидуПродукции.Характеристика
				// ++( 00-00365291
				И Партия = СтрокаПоВидуПродукции.Партия
				// )++ 00-00365291
				// --( 00-00365291
				//И СтрокаПродукции.Серия = ?(ЗначениеЗаполнено(СтрокаПоВидуПродукции.Партия), СтрокаПоВидуПродукции.Партия, Неопределено) Тогда
				// )-- 00-00365291
				И МРЦ = СтрокаПоВидуПродукции.МРЦ Тогда
				ПродукцияНайдена = Истина;
				
				// ++( 00-00365291
				НайденныеСтрокиСерии = Форма.Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("Серия, КлючСвязи", СтрокаПродукции.Серия, СтрокаПоВидуПродукции.КлючСвязи));
				Если НайденныеСтрокиСерии.Количество() Тогда
					НайденныеСтрокиСерии[0].Количество = СтрокаПродукции.КоличествоПодобрано;
				КонецЕсли;
				// )++ 00-00365291
				
				Если ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции) = Неопределено Тогда
					СтрокаПоВидуПродукции.Количество = СтрокаПродукции.КоличествоПодобрано;
					ИзмененныеСтроки.Добавить(СтрокаПоВидуПродукции);
				Иначе
					СтрокаПоВидуПродукции.Количество = СтрокаПоВидуПродукции.Количество + СтрокаПродукции.КоличествоПодобрано;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПродукцияНайдена И СтрокаПродукции.КоличествоПодобрано > 0 Тогда
			НоваяСтрокаТоваров = Форма.Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаПродукции);
			НоваяСтрокаТоваров.Количество = СтрокаПродукции.КоличествоПодобрано;
			НоваяСтрокаТоваров.МаркируемаяПродукция = Истина;
			НоваяСтрокаТоваров.ВидПродукцииИС = ВидПродукцииИС;
			// ++( 00-00365291
			НоваяСтрокаТоваров.Партия = Партия;
			// )++ 00-00365291
			// ++( 00-00012169
			Если ЗначениеЗаполнено(СтрокаПродукции.Серия) Тогда
				СерииНоменклатурыУНФ.ЗаполнитьКлючиСвязи(Форма.Объект, "Запасы");
				НоваяСтрокаСерии = Форма.Объект.СерииНоменклатуры.Добавить();
				НоваяСтрокаСерии.Серия = СтрокаПродукции.Серия;
				НоваяСтрокаСерии.КлючСвязи = НоваяСтрокаТоваров.КлючСвязи;
				НоваяСтрокаСерии.Количество = НоваяСтрокаТоваров.Количество;
			КонецЕсли;
			// )++ 00-00012169
			НоваяСтрокаТоваров.МРЦ = МРЦ;
			ДобавленныеСтроки.Добавить(НоваяСтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		Если ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции) = Неопределено Тогда
			Форма.Объект.Запасы.Удалить(СтрокаПоВидуПродукции);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхСтрок = ИзмененныеСтроки.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоИзмененныхСтрок Цикл
		ИзмененнаяСтрока = ИзмененныеСтроки[КоличествоИзмененныхСтрок - ОбратныйИндекс];
		Если ИзмененнаяСтрока.Количество = 0 Тогда
			Форма.Объект.Запасы.Удалить(ИзмененнаяСтрока);
			ИзмененныеСтроки.Удалить(КоличествоИзмененныхСтрок - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Форма.Объект, "Запасы", ДобавленнаяСтрока);
	КонецЦикла;
	
	// ++( ГосИС 1.1.1.12
	//ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, "Объект", "АкцизныеМарки", "АкцизнаяМарка");
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ИнтеграцияИСУНФ.НастройкиИсточникаКешаЧека());
	//)++
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ИнтеграцияИСУНФ.НастройкиИсточникаКешаЧека());
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Форма.Объект);
	
	СуммаТоваров = Форма.Объект.Запасы.Итог("Всего");
	Если Не Форма.Объект.ОперацияСДенежнымиСредствами Тогда
		Форма.Объект.СуммаДокумента = СуммаТоваров;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СуммаСдачи") Тогда
		Форма.СуммаСдачи = Форма.Объект.БезналичнаяОплата.Итог("Сумма")
						 + Форма.Объект.Предоплата.Итог("СуммаРасчетов")
						 + Форма.Объект.ПолученоНаличными
						 - Форма.Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента)
	
	Возврат СтрШаблон(
	"ВЫБРАТЬ
	|	Таблица.ШтрихкодУпаковки,
	|	Таблица.ЗначениеШтрихкода
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка",
	ИмяДокумента);
	
КонецФункции

Функция УсловиеПоВидуПродукции(ВидПродукции)
	
	Условие = "ИСТИНА";
	
	Для Каждого Значение Из Перечисления.ВидыПродукцииИС Цикл
		
		Если ВидПродукции = Значение Тогда
			
			Индекс = Перечисления.ВидыПродукцииИС.Индекс(Значение);
			ИмяЗначения = Метаданные.Перечисления.ВидыПродукцииИС.ЗначенияПеречисления[Индекс].Имя;
			Условие = СтрШаблон("СправочникНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.%1)", ИмяЗначения);
			
			Прервать;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Условие;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствует продукция для заполнения.'"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	ИнтеграцияИСПереопределяемый.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыДокумента.ДокументОснование,
		,
		РеквизитыДокумента.ЕстьОшибкиПроведен,,);
		
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);

	
КонецПроцедуры

Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабличнойЧасти = "Запасы")
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ТекстЗапросаШаблон =
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Запасы.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Запасы.Партия
	|	КОНЕЦ КАК Серия,
	|	СУММА(Запасы.Количество) КАК Количество
	|ИЗ
	|	Документ.%1.%2 КАК Запасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Запасы.Ссылка = &Документ
	|	И &УсловиеМаркируемаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабличнойЧасти);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
Процедура УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, Знач ВидМаркируемойПродукции) Экспорт
	
	ПутьКПолюНоменклатура = "СправочникНоменклатура";
	ЗаменяемыйПараметр = "&УсловиеМаркируемаяПродукция";
	ВидыМаркируемойПродукции = Новый Массив();
	
	Если ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив") Или ТипЗнч(ВидМаркируемойПродукции) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого ВидПродукции Из ВидМаркируемойПродукции Цикл
			ВидыМаркируемойПродукции.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.%1)", XMLСтрока(ВидПродукции)));
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(ВидМаркируемойПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.%1)", XMLСтрока(ВидМаркируемойПродукции)));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидыМаркируемойПродукции.Количество() > 0 Тогда
		УсловиеМаркируемаяПродукция = СтрШаблон("%1.ВидПродукцииИС В (%2)", ПутьКПолюНоменклатура, СтрСоединить(ВидыМаркируемойПродукции, ","))
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ"
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

// Определяет, находится ли переданная форма формой документа ВыводИзОборотаИСМП в состоянии после завершения обмена данными
// В этом случае элемент формы СтраницаТовары находится в режиме ТолькоПросмотр
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие
//
// Возвращаемое значение:
//   Булево   - Истина, если передана форма документа ВыводИзОборотаИСМП в состоянии после завершения обмена данными 
//
Функция ЭтоЗавершениеОбменаДаннымиВыводИзОборотаИСМП(Форма)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
	И ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВыводИзОборотаИСМП")
	И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СтраницаТовары")
	И Форма.Элементы.СтраницаТовары.ТолькоПросмотр;
	
КонецФункции // ЭтоЗавершениеОбменаДаннымиВыводИзОборотаИСМП()

Функция ОпределитьВидПродукцииДокумента(Основание)
	
	ВидПродукции = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "Продукция") Тогда
		Для Каждого СтрокаЗапасы Из Основание.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура.ВидПродукцииИС) Тогда
				ВидПродукции = СтрокаЗапасы.Номенклатура.ВидПродукцииИС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Основание, "Запасы") Тогда
		Для Каждого СтрокаЗапасы Из Основание.Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура.ВидПродукцииИС) Тогда
				ВидПродукции = СтрокаЗапасы.Номенклатура.ВидПродукцииИС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

Функция ИмяТабличнойЧастиСерии(ИмяДокумента)
	
	Если ИмяДокумента = "СборкаЗапасов" Тогда
		Результат = "СерииНоменклатурыПродукция";
	Иначе
		Результат = "СерииНоменклатуры";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти