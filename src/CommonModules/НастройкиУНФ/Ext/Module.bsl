#Область СлужебныйПрограммныйИнтерфейс

// Проверка на возможность отключения опции УчетВалютныхОпераций.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяУчетВалютныхОпераций() Экспорт

	ТекстСообщения = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Ссылка <> &НациональнаяВалюта";

	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр(
			"ru = 'В базе заведены валюты, отличные от национальной. Изменение настройки невозможно.'");
	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции // ОтказСнятьФункциональнаяУчетВалютныхОпераций()

// Проверка на возможность отключения опции ИспользоватьОбменССайтом.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьИспользоватьОбменССайтом() Экспорт

	ТекстСообщения = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеСайта.СайтСоздан
	|ИЗ
	|	РегистрСведений.ДанныеСайта КАК ДанныеСайта
	|ГДЕ
	|	ДанныеСайта.СайтСоздан";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр(
			"ru = 'В программе настроен и используется обмен с сайтами. Отключение настройки невозможно.'");
	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции // ОтказСнятьФункциональнаяУчетВалютныхОпераций()

// Проверка на возможность изменения установленной валюты учета.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказИзменитьВалютаУчета() Экспорт

	ТекстСообщения = "";

	ПроверяемыеРегистрыНакопления = Новый Массив;
	ПроверяемыеРегистрыНакопления.Добавить("ВнеоборотныеАктивы");
	ПроверяемыеРегистрыНакопления.Добавить("ДенежныеСредства");
	ПроверяемыеРегистрыНакопления.Добавить("ДоходыИРасходы");
	ПроверяемыеРегистрыНакопления.Добавить("ДоходыИРасходыКассовыйМетод");
	ПроверяемыеРегистрыНакопления.Добавить("ДоходыИРасходыНераспределенные");
	ПроверяемыеРегистрыНакопления.Добавить("ДоходыИРасходыОтложенные");
	ПроверяемыеРегистрыНакопления.Добавить("Закупки");
	ПроверяемыеРегистрыНакопления.Добавить("Запасы");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыПереданные");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыИАгентскиеУслугиПринятые");
	ПроверяемыеРегистрыНакопления.Добавить("НачисленияИУдержания");
	ПроверяемыеРегистрыНакопления.Добавить("ПланыПродаж");
	ПроверяемыеРегистрыНакопления.Добавить("ПлатежныйКалендарь");
	ПроверяемыеРегистрыНакопления.Добавить("Продажи");
	ПроверяемыеРегистрыНакопления.Добавить("РасчетыПоНалогам");
	ПроверяемыеРегистрыНакопления.Добавить("РасчетыСПерсоналом");
	ПроверяемыеРегистрыНакопления.Добавить("РасчетыСПодотчетниками");
	ПроверяемыеРегистрыНакопления.Добавить("РасчетыСПокупателями");
	ПроверяемыеРегистрыНакопления.Добавить("РасчетыСПоставщиками");
	ПроверяемыеРегистрыНакопления.Добавить("ФинансовыйРезультат");

	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	&ИмяПоля
					|ИЗ
					|	&ИмяРегистраНакопления КАК Псевдоним";

	ШаблонИмяПоля = "РегистрНакопления%1.Организация";

	ЕстьДвижения = ЕстьДвиженияВРегистрахНакопления(ПроверяемыеРегистрыНакопления, ШаблонЗапроса, ШаблонИмяПоля);

	Если ЕстьДвижения Тогда

		ТекстСообщения = НСтр(
			"ru = 'В базе есть движения по ""суммовым"" регистрам накопления. Изменение валюты учета запрещено.'");

	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции // ОтказИзменитьВалютаУчета()

// Проверка на возможность отключения опции УчетПоНесколькимСкладам.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятиеУчетПоНесколькимСкладам() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = &ТипСтруктурнойЕдиницы
	|	И СтруктурныеЕдиницы.Ссылка <> &ОсновнойСклад";

	Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	Запрос.УстановитьПараметр("ОсновнойСклад", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр("ru = 'В базе используются склады, отличные от основного. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции  // ОтказСнятиеУчетПоНесколькимСкладам()

// Проверка на возможность отключения опции УчетВРазличныхЕдиницахИзмерения.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения() Экспорт

	ТекстОшибки = "";

	УстановитьПривилегированныйРежим(Истина); // Требуется для вызова НайтиПоСсылкам()

	ВыборкаЕдиницыИзмерения = Справочники.ЕдиницыИзмерения.Выбрать();
	Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл

		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ВыборкаЕдиницыИзмерения.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);

		Если ТаблицаСсылок.Количество() > 0 Тогда

			ТекстОшибки = НСтр(
				"ru = 'В приложении введены документы в пользовательских единицах измерения. Отключение флажка запрещено.'");
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения()

// Проверка на возможность отключения опции ПередачаЗапасовНаОтветХранение.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветХранение() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыПереданные.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
	|ГДЕ
	|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче на ответственное хранение.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветХранение()

// Проверка на возможность отключения опции ПриемЗапасовНаОтветХранение.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветХранение() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыИАгентскиеУслугиПринятые.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые КАК ЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ЗапасыИАгентскиеУслугиПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы и агентские услуги принятые"" содержит информацию о приеме на ответственное хранение.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветХранение()

// Проверка на возможность отключения опции ИспользоватьОрдерныйСклад.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ОрдерныйСклад";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр("ru = 'В базе присутствуют ордерные склады. Отключение флажка запрещено.'");

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКПоступлениюНаСклады.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады";

	РезультатЗапросаЗапасыКПоступлениюНаСклады = Запрос.Выполнить();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКРасходуСоСкладов.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов";

	РезультатЗапросаЗапасыКРасходуСоСкладов = Запрос.Выполнить();

	Если Не РезультатЗапросаЗапасыКПоступлениюНаСклады.Пустой() Или Не РезультатЗапросаЗапасыКРасходуСоСкладов.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В базе присутствуют движения по ордерному складу. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад()

// Проверка на возможность отключения опции РезервированиеЗапасов.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов() Экспорт

	ТекстОшибки = "";

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда

		ТекстОшибки = НСтр("ru = 'Используется поэтапное производство. Отключение флажка запрещено.'");

	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Запасы.ЗаказПокупателя
		|ИЗ
		|	РегистрНакопления.Запасы КАК Запасы
		|ГДЕ
		|	Запасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";

		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда

			ТекстОшибки = НСтр("ru = 'В базе содержится информация о резервах. Отключение флажка запрещено.'");

		КонецЕсли;

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов()

// Проверка на возможность отключения опции УчетЦенКонтрагентов
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК СправочникДоговорыКонтрагентов
	|ГДЕ
	|	СправочникДоговорыКонтрагентов.ВидЦенКонтрагента <> Значение(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе содержатся договоры контрагентов с установленными видами входящих цен. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов()

// Проверка на возможность отключения опции УчетПоЯчейкам.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыНаСкладах.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|ГДЕ
	|	ЗапасыНаСкладах.Ячейка <> ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр("ru = 'В базе содержатся движения по ячейкам. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам()

// Проверка на возможность отключения опции ИспользоватьХарактеристики.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики() Экспорт

	ТекстОшибки = "";

	ПроверяемыеРегистрыНакопления = Новый СписокЗначений;
	ПроверяемыеРегистрыНакопления.Добавить("ВыпускПродукции");
	ПроверяемыеРегистрыНакопления.Добавить("ГрафикДвиженияЗапасов");
	ПроверяемыеРегистрыНакопления.Добавить("ЗаданияНаРаботу");
	ПроверяемыеРегистрыНакопления.Добавить("ЗаказыНаПроизводство");
	ПроверяемыеРегистрыНакопления.Добавить("ЗаказыПокупателей");
	ПроверяемыеРегистрыНакопления.Добавить("ЗаказыПоставщикам");
	ПроверяемыеРегистрыНакопления.Добавить("Закупки");
	ПроверяемыеРегистрыНакопления.Добавить("Запасы");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыВРазрезеГТД");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыКПоступлениюНаСклады");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыКРасходуСоСкладов");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыНаСкладах");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыПереданные");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыИАгентскиеУслугиПринятые");
	ПроверяемыеРегистрыНакопления.Добавить("ПланыПродаж");
	ПроверяемыеРегистрыНакопления.Добавить("ПотребностьВЗапасах");
	ПроверяемыеРегистрыНакопления.Добавить("Продажи");
	ПроверяемыеРегистрыНакопления.Добавить("РазмещениеЗаказов");
	ПроверяемыеРегистрыНакопления.Добавить("СдельныеНаряды");

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ИмяПоля
	|ИЗ
	|	&ИмяРегистраНакопления КАК Псевдоним
	|ГДЕ
	|	&ИмяПоля <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";

	ШаблонИмяПоля = "РегистрНакопления%1.Характеристика";

	ЕстьДвижения = ЕстьДвиженияВРегистрахНакопления(ПроверяемыеРегистрыНакопления, ШаблонЗапроса, ШаблонИмяПоля);

	Если Не ЕстьДвижения Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК РСЦены
		|ГДЕ
		|	РСЦены.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДвижения = Не РезультатЗапроса.Пустой();

	КонецЕсли;

	Если ЕстьДвижения Тогда

		ТекстОшибки = НСтр("ru = 'В базе есть движения по характеристикам. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики()

// Проверка на возможность отключения опции ИспользоватьПартии.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПартии() Экспорт

	ТекстОшибки = "";

	ПроверяемыеРегистрыНакопления = Новый СписокЗначений;
	ПроверяемыеРегистрыНакопления.Добавить("ВыпускПродукции");
	ПроверяемыеРегистрыНакопления.Добавить("Закупки");
	ПроверяемыеРегистрыНакопления.Добавить("Запасы");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыВРазрезеГТД");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыКПоступлениюНаСклады");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыКРасходуСоСкладов");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыНаСкладах");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыПереданные");
	ПроверяемыеРегистрыНакопления.Добавить("ЗапасыИАгентскиеУслугиПринятые");
	ПроверяемыеРегистрыНакопления.Добавить("Продажи");

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ИмяПоля
	|ИЗ
	|	&ИмяРегистраНакопления КАК Псевдоним
	|ГДЕ
	|	&ИмяПоля <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)";

	ШаблонИмяПоля = "РегистрНакопления%1.Партия";

	ЕстьДвижения = ЕстьДвиженияВРегистрахНакопления(ПроверяемыеРегистрыНакопления, ШаблонЗапроса, ШаблонИмяПоля);

	Если ЕстьДвижения Тогда

		ТекстОшибки = НСтр("ru = 'В базе есть движения по партиям. Отключение флажка запрещено.'");

	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'Включена опция ""Прием товаров на комиссию"" (раздел Продажи). Отключение флажка запрещено.'");

	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'Включена опция ""Переработка давальческого сырья"" (раздел Производство). Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПартии()

// Проверка на возможность отключения опции ИспользоватьНеуникальныеШтрихКоды.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьКонстантуИспользоватьНеуникальныеШтрихКоды() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод) КАК ВсегоШК
	|ПОМЕСТИТЬ ОбщееЧислоШК
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыНоменклатуры.Штрихкод) КАК ВсегоРазличныхШК
	|ПОМЕСТИТЬ РазличныхШК
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ОбщееЧислоШК.ВсегоШК = РазличныхШК.ВсегоРазличныхШК
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отказ
	|ИЗ
	|	ОбщееЧислоШК КАК ОбщееЧислоШК,
	|	РазличныхШК КАК РазличныхШК";

	Выборка = Запрос.Выполнить().Выбрать();

	Отказ = Ложь;

	Пока Выборка.Следующий() Цикл
		Отказ = Выборка.Отказ;
	КонецЦикла;
	Если Отказ Тогда
		ТекстОшибки = НСтр(
			"ru = 'В регистре Штрихкоды номенклатуры есть не уникальные значения. Отключение флажка запрещено.'");
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПартии()

// Проверка на возможность отключения опции ИспользоватьСерииНоменклатуры.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьСерииНоменклатуры() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Серия
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'В базе есть остатки по серийным номерам. Отключение флажка запрещено.'");
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		ТекстОшибки = НСтр(
			"ru='Включен учет маркировки продукции в государственной информационной системе маркировки (ГИСМ).
			|Отключение флажка запрещено.'");
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЧастичноеПогашениеСертификатов") Тогда
		ТекстОшибки = НСтр("ru='Включено частичное погашение подарочных сертификатов. Отключение флажка запрещено.'");
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСерииНоменклатуры()

// Проверка на возможность отключения опции ПередачаСырьяВПереработку.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыПереданные.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
	|ГДЕ
	|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче в переработку.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку()

// Проверка на возможность отключения опции ИспользоватьСкидкиНаценки.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки() Экспорт

	ТекстыОшибок = Новый Массив;

	УстановитьПривилегированныйРежим(Истина); // Требуется для вызова НайтиПоСсылкам()

	ВыборкаВидыСкидокНаценок = Справочники.ВидыСкидокНаценок.Выбрать();
	Пока ВыборкаВидыСкидокНаценок.Следующий() Цикл

		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ВыборкаВидыСкидокНаценок.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);

		Если ТаблицаСсылок.Количество() > 0 Тогда
			ТекстыОшибок.Добавить(НСтр("ru = 'В информационной базе используются виды скидок, наценок.'"));
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ВДокументахИспользуютсяСкидкиИНаценки() Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'В документах используются скидки и наценки.'"));
	КонецЕсли;
	
	// ДисконтныеКарты
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") Тогда

		ВыборкаВидыДисконтныхКарт = Справочники.ВидыДисконтныхКарт.Выбрать();
		Пока ВыборкаВидыДисконтныхКарт.Следующий() Цикл

			Если Не ВыборкаВидыДисконтныхКарт.СтарыйМеханизмСкидок Тогда
				Продолжить;
			КонецЕсли;

			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ВыборкаВидыДисконтныхКарт.Ссылка);
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);

			Если ТаблицаСсылок.Количество() > 0 Тогда
				ТекстыОшибок.Добавить(НСтр("ru = 'В базе используются виды дисконтных карт старого образца.'"));
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	// Конец ДисконтныеКарты

	ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1
									 |Отключение флажка запрещено.'"), ТекстОшибки);
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки()

// Проверка на возможность отключения опции ИспользоватьРучныеСкидкиНаценкиЗакупки.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки() Экспорт

	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("Документ.ЗаказПоставщику.Запасы");
	ВидыДокументов.Добавить("Документ.ПриходнаяНакладная.Запасы");
	ВидыДокументов.Добавить("Документ.ПриходнаяНакладная.Расходы");
	ВидыДокументов.Добавить("Документ.СчетНаОплатуПоставщика.Запасы");

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ_Документа.Ссылка
	|ИЗ
	|	&ТабличнаяЧастьДокумента КАК ТЧ_Документа
	|ГДЕ
	|	ТЧ_Документа.ПроцентСкидкиНаценки <> 0";

	Запрос = Новый Запрос;

	Для Каждого ЭлементМассива Из ВидыДокументов Цикл

		Если Не ПустаяСтрока(Запрос.Текст) Тогда

			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;

		КонецЕсли;

		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);

	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В документах закупки используются скидки и наценки. Отключение флажка запрещено.'");
КонецФункции

// Проверка на возможность отключения опции ПередачаТоваровНаКомиссию.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыПереданные.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
	|ГДЕ
	|	ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы переданные"" содержит информацию о передаче на комиссию.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию()

// Проверка на возможность отключения опции ПриемТоваровНаКомиссию.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыИАгентскиеУслугиПринятые.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые КАК ЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ЗапасыИАгентскиеУслугиПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы и агентские услуги принятые"" содержит информацию о приеме на комиссию.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию()

// Проверка на возможность отключения опции УчетРозничныхПродаж.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РегистрыНакопления.КоличествоРегистраторов, 0)) КАК КоличествоРегистраторов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор) КАК КоличествоРегистраторов
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции КАК РегистрНакопления
	|	ГДЕ
	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы КАК РегистрНакопления
	|	ГДЕ
	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
	|	ИЗ
	|		РегистрНакопления.Запасы КАК РегистрНакопления
	|	ГДЕ
	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
	|	ИЗ
	|		РегистрНакопления.ЗапасыНаСкладах КАК РегистрНакопления
	|	ГДЕ
	|		РегистрНакопления.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК РегистрНакопления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РегистрНакопления.Регистратор)
	|	ИЗ
	|		РегистрНакопления.СуммовойУчетВРознице КАК РегистрНакопления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(Справочник.Ссылка)
	|	ИЗ
	|		Справочник.СтруктурныеЕдиницы КАК Справочник
	|	ГДЕ
	|		(Справочник.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|				ИЛИ Справочник.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет))) КАК РегистрыНакопления";

	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаЗапроса.Следующий() И ВыборкаЗапроса.КоличествоРегистраторов > 0 Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе есть движения или объекты, относящиеся к учету операций розничных продаж.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж()

// Процедура контроля отключения опции Использовать работы.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В информационной базе присутствуют документы ""Заказ - наряд"".
			|Отключение флажка ""Работы"" запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы()

// Процедура контроля отключения опции Использовать производство.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство() Экспорт

	ВозможныеОшибки = ВозможныеОшибкиПриОтключенииФлажкаПроизводство();

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПриОтключенииФлажкаПроизводство();

	РезультатыПакетногоЗапроса = Запрос.ВыполнитьПакет();

	ТекстыОшибок = Новый Массив;

	Для Индекс = 0 По ВозможныеОшибки.ВГраница() Цикл
		Если Не РезультатыПакетногоЗапроса[Индекс].Пустой() Тогда
			ТекстыОшибок.Добавить(ВозможныеОшибки[Индекс]);
		КонецЕсли;
	КонецЦикла;

	ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);

	Если ПустаяСтрока(ТекстОшибки) Тогда

		ТекстОшибки = ПроверитьДвиженияПоРегистрамПодсистемыПроизводство();

	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1
									 |Отключение флажка ""Производство"" запрещено.'"), ТекстОшибки);
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство()

// Проверка на возможность отключения опции ПереработкаДавальческогоСырья.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыИАгентскиеУслугиПринятые.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые КАК ЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ЗапасыИАгентскиеУслугиПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Регистр накопления ""Запасы и агентские услуги принятые"" содержит информацию о приеме в переработку.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья()

// Проверка на возможность отключения опции ИспользоватьТехоперации.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СдельныеНаряды.Операция
	|ИЗ
	|	РегистрНакопления.СдельныеНаряды КАК СдельныеНаряды";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе присутствует информация о загрузке рабочих центров или документы вида ""Сдельный наряд"".
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Операция)";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В базе присутствует номенклатура с типом ""Операция"". Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации()

// Процедура контроля отключения опции Использовать зарплату по документам и справочникам.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата() Экспорт

	ВозможныеОшибки = ВозможныеОшибкиПриОтключенииФлажкаЗарплата();

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПриОтключенииФлажкаЗарплата();

	Запрос.УстановитьПараметр("РазделУчета", НСтр("ru = 'Расчеты с персоналом'", ОбщегоНазначения.КодОсновногоЯзыка()));

	РезультатыПакетногоЗапроса = Запрос.ВыполнитьПакет();

	ТекстыОшибок = Новый Массив;

	Для Индекс = 0 По ВозможныеОшибки.ВГраница() Цикл
		Если Не РезультатыПакетногоЗапроса[Индекс].Пустой() Тогда
			ТекстыОшибок.Добавить(ВозможныеОшибки[Индекс]);
		КонецЕсли;
	КонецЦикла;

	ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);

	Если ПустаяСтрока(ТекстОшибки) Тогда

		ТекстОшибки = ПроверитьДвиженияПоРегистрамПодсистемыЗарплата();

	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1
									 |Отключение флажка ""Зарплата"" запрещено.'"), ТекстОшибки);
	КонецЕсли;
	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата()

// Проверка на возможность отключения опции ИспользоватьСовместительство.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.Совместительство)";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе есть сотрудники с типом занятости ""Совместительство"". Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство()

// Проверка на возможность отключения опции ВестиУчетНалогаНаДоходыИВзносов.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНачисленийИУдержаний.Ссылка
	|ИЗ
	|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
	|ГДЕ
	|	ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
	|	И НЕ ВидыНачисленийИУдержаний.Предопределенный";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе присутствуют элементы справочника ""Виды начислений и удержаний"" с типом ""Налог"".
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов()

// Проверка на возможность отключения опции ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДФЛРасчетыНалоговыхАгентовСБюджетом.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыНалоговыхАгентовСБюджетом КАК НДФЛРасчетыНалоговыхАгентовСБюджетом
	|ГДЕ
	|	НДФЛРасчетыНалоговыхАгентовСБюджетом.СуммаСПревышения > 0";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе есть документы ""Начисление зарплаты""/""Расход со счета""/""Расход из кассы"" рассчитанные по прогрессивной шкале НДФЛ.
			|Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале()

// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьДисконтныеКарты() Экспорт

	ТекстОшибки = "";

	УстановитьПривилегированныйРежим(Истина); // Требуется для вызова НайтиПоСсылкам()

	ВыборкаДисконтныеКарты = Справочники.ДисконтныеКарты.Выбрать();
	Пока ВыборкаДисконтныеКарты.Следующий() Цикл

		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ВыборкаДисконтныеКарты.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);

		Если ТаблицаСсылок.Количество() > 0 Тогда

			ТекстОшибки = НСтр("ru = 'В базе используются дисконтные карты. Отключение флажка запрещено.'");
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ТекстОшибки;

КонецФункции

// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки() Экспорт

	ТекстОшибки = "";

	УстановитьПривилегированныйРежим(Истина); // Требуется для вызова НайтиПоСсылкам()

	Если Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда

		ТекстОшибки = НСтр("ru = 'Включено использование дисконтных карт. Отключение флажка запрещено.'");

	КонецЕсли;

	ВыборкаАвтоматическиеСкидки = Справочники.АвтоматическиеСкидки.Выбрать();
	Пока ВыборкаАвтоматическиеСкидки.Следующий() Цикл

		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ВыборкаАвтоматическиеСкидки.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);

		Если ТаблицаСсылок.Количество() > 0 Тогда

			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
				"ru = 'В базе используются виды автоматических скидок, наценок. Отключение флажка запрещено.'");
			Прервать;

		КонецЕсли;

	КонецЦикла;

	МассивВидовДокументов = Новый Массив;
	МассивВидовДокументов.Добавить("Документ.АктВыполненныхРабот.РаботыИУслуги");
	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Запасы");
	МассивВидовДокументов.Добавить("Документ.ЗаказПокупателя.Работы");
	МассивВидовДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
	МассивВидовДокументов.Добавить("Документ.РасходнаяНакладная.Запасы");
	МассивВидовДокументов.Добавить("Документ.СчетНаОплату.Запасы");
	МассивВидовДокументов.Добавить("Документ.ЧекККМ.Запасы");
	МассивВидовДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");
	МассивВидовДокументов.Добавить("Документ.ОтчетОПереработке.Продукция");

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ_Документа.Ссылка
	|ИЗ
	|	&ТабличнаяЧастьДокумента КАК ТЧ_Документа
	|ГДЕ
	|	ТЧ_Документа.ПроцентАвтоматическойСкидки <> 0";

	Запрос = Новый Запрос;

	Для Каждого ЭлементМассива Из МассивВидовДокументов Цикл

		Если Не ПустаяСтрока(Запрос.Текст) Тогда

			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;

		КонецЕсли;

		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);

	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В документах используются автоматические скидки и наценки. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером() Экспорт

	ТекстОшибки = "";

	Если ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов") Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'При установленной опции ""Кассовый метод учета доходов и расходов"" отключение флажка запрещено.'");
	КонецЕсли;

	Если РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
		"ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях. Изменение флага запрещено.
		|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияКредитыИЗаймы() Экспорт

	ТекстОшибки = "";

	Если РегистрыНакопления.РасчетыПоКредитамИЗаймам.ЕстьРасчетыПоКредитамИЗаймам() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
		"ru = 'Регистр накопления ""Расчеты по кредитам и займам"" содержит информацию. Изменение флага запрещено.
		|Выполнить анализ можно в отчетах ""Займы сотрудникам"" и ""Кредиты (полученные)"". Отчет вызывается из раздела ""Деньги"".'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Проверка на возможность отключения опции ИспользоватьЗаказыВРозничнойТорговле.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле() Экспорт

	ТекстОшибки = "";

	МассивВидовДокументов = Новый Массив;
	МассивВидовДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
	МассивВидовДокументов.Добавить("Документ.ЧекККМ.Запасы");
	МассивВидовДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ_Документа.Ссылка
	|ИЗ
	|	&ТабличнаяЧастьДокумента КАК ТЧ_Документа
	|ГДЕ
	|	ТЧ_Документа.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|	И ТЧ_Документа.Заказ <> Значение(Документ.ЗаказПокупателя.ПустаяСсылка)";

	Запрос = Новый Запрос;

	Для Каждого ЭлементМассива Из МассивВидовДокументов Цикл

		Если Не ПустаяСтрока(Запрос.Текст) Тогда

			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;

		КонецЕсли;

		Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива);

	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В розничных документах используются заказы покупателей. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Проверка на возможность отключения опции ИспользоватьРемонты.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьРемонты() Экспорт

	ТекстОшибки = "";
	ЕстьДвижения = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыВРемонте.Регистратор
	|ИЗ
	|	РегистрНакопления.ЗапасыВРемонте КАК ЗапасыВРемонте";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЕстьДвижения = Истина;
	КонецЕсли;

	Если ЕстьДвижения Тогда

		ТекстОшибки = НСтр("ru = 'В базе есть остатки по товарам в ремонте. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьРемонты()

// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьИспользоватьНесколькоОрганизаций() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка <> &ОсновнаяОрганизация";

	Запрос.УстановитьПараметр("ОсновнаяОрганизация", Справочники.Организации.ОрганизацияПоУмолчанию());

	Если Не Запрос.Выполнить().Пустой() Тогда
		ТекстОшибки = НСтр(
			"ru='В базе есть организации помимо основной. Для выключения опции необходимо удалить все кроме основной.'");
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияИспользоватьМинимальныеЦены() Экспорт
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен КАК ВидМинимальныхЦен
		|ИЗ
		|	РегистрСведений.ВидыМинимальныхЦенСтруктурныхЕдиниц КАК ВидыМинимальныхЦенСтруктурныхЕдиниц
		|ГДЕ
		|	ВидыМинимальныхЦенСтруктурныхЕдиниц.ВидМинимальныхЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ТекстОшибки = НСтр(
			"ru='В базе есть настройки минимальных цен. Для выключения опции необходимо их очистить.'");
		
	КонецЕсли;
	
	Возврат ТекстОшибки;		
	
КонецФункции

Функция ЕстьДвиженияПоДругимОрганизациям(ПроверяемаяОрганизация) Экспорт

	ПорцияДляПроверки = 3;
	Счетчик = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверяемаяОрганизация", ПроверяемаяОрганизация);

	ШаблонОбъединения =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнеоборотныеАктивы_1.Организация
	|ИЗ
	|	РегистрНакопления.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы_1
	|ГДЕ
	|	ВнеоборотныеАктивы_1.Организация <> &ПроверяемаяОрганизация";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл

		Если РегистрНакопления.Измерения.Найти("Организация") = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если РегистрНакопления = РегистрыНакопления.СдельныеНаряды Тогда
			Продолжить;
		КонецЕсли;

		Счетчик = Счетчик + 1;

		Если Запрос.Текст <> "" Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		КонецЕсли;

		ТекстОбъединения = СтрЗаменить(ШаблонОбъединения, "_1", "_" + Счетчик); // Для избежания ошибки неоднозначности полей
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ВнеоборотныеАктивы", РегистрНакопления.Имя);

		Запрос.Текст = Запрос.Текст + ТекстОбъединения;

		Если Счетчик = ПорцияДляПроверки Тогда
			Счетчик = 0;
			Если ЕстьЗаписиВРезультате(Запрос) Тогда
				Возврат Истина;
			КонецЕсли;
			Запрос.Текст = "";
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(Запрос.Текст) И ЕстьЗаписиВРезультате(Запрос) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ОтказСнятьУчетПоКомпании() Экспорт

	ТекстОшибки = НСтр(
		"ru='В базе есть проведенные документы по организации, отличной от компании. Для выключения опции необходимо изменить организацию в таких документах.'");
	ПорцияДляПроверки = 3;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверяемаяОрганизация", Справочники.Организации.ОрганизацияКомпания());

	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПроверяемогоДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ТаблицаПроверяемогоДокумента
	|ГДЕ
	|	ТаблицаПроверяемогоДокумента.Организация <> &ПроверяемаяОрганизация
	|	И ТаблицаПроверяемогоДокумента.Проведен";
	ШаблонРазделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	ЭлементыЗапроса = Новый Массив;

	Для Каждого Документ Из Метаданные.Документы Цикл

		Если Документ.Реквизиты.Найти("Организация") = Неопределено Или Документ.Проведение
			<> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;

		ТекстОбъединения = СтрЗаменить(ШаблонЗапроса, "АвансовыйОтчет", Документ.Имя);
		ЭлементыЗапроса.Добавить(ТекстОбъединения);

		Если ЭлементыЗапроса.Количество() = ПорцияДляПроверки Тогда
			Запрос.Текст = СтрСоединить(ЭлементыЗапроса, ШаблонРазделитель);
			Если ЕстьЗаписиВРезультате(Запрос) Тогда
				Возврат ТекстОшибки;
			КонецЕсли;
			ЭлементыЗапроса.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если ЭлементыЗапроса.Количество() > 0 Тогда
		// Последняя порция
		Запрос.Текст = СтрСоединить(ЭлементыЗапроса, ШаблонРазделитель);
		Если ЕстьЗаписиВРезультате(Запрос) Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Возврат "";

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияПередачаТоваровМеждуОрганизациями() Экспорт
		
	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияПродавец КАК ОрганизацияПродавец
	|ИЗ
	|	РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК НастройкаПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	НЕ НастройкаПередачиТоваровМеждуОрганизациями.СпособПередачиТоваров В (ЗНАЧЕНИЕ(Перечисление.СпособыПередачиТоваров.НеТребуется), ЗНАЧЕНИЕ(Перечисление.СпособыПередачиТоваров.НеПередается))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервыТоваровОрганизацийОстатки.Организация
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.Остатки КАК РезервыТоваровОрганизацийОстатки
	|ГДЕ
	|	РезервыТоваровОрганизацийОстатки.КоличествоОстаток <> 0";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Для выключения опции необходимо закрыть текущие резервы и перевести настройки передачи товаров между организациями в режим ""Передача товаров не выполняется"".'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказовПокупателей() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗаказовПокупателей.Ссылка
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|ГДЕ
	|	ВидыЗаказовПокупателей.Предопределенный = ЛОЖЬ";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Для выключения опции необходимо удалить все виды заказов покупателей кроме основного.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказНарядов() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗаказНарядов.Ссылка
	|ИЗ
	|	Справочник.ВидыЗаказНарядов КАК ВидыЗаказНарядов
	|ГДЕ
	|	ВидыЗаказНарядов.Предопределенный = ЛОЖЬ";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр("ru = 'Для выключения опции необходимо удалить все виды заказ-нарядов кроме основного.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага нельзя.
// Если установлен флаг "Кассовый метод учета доходов и расходов", то опция должна быть установлена.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяИспользоватьСтатьиДвиженияДенежныхСредств() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеВКассуРасшифровкаПлатежа.СтатьяДДС
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка.Проведен
	|	И ПоступлениеВКассуРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеНаСчетРасшифровкаПлатежа.СтатьяДДС
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка.Проведен
	|	И ПоступлениеНаСчетРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходИзКассыРасшифровкаПлатежа.СтатьяДДС
	|ИЗ
	|	Документ.РасходИзКассы.РасшифровкаПлатежа КАК РасходИзКассыРасшифровкаПлатежа
	|ГДЕ
	|	РасходИзКассыРасшифровкаПлатежа.Ссылка.Проведен
	|	И РасходИзКассыРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходСоСчетаРасшифровкаПлатежа.СтатьяДДС
	|ИЗ
	|	Документ.РасходСоСчета.РасшифровкаПлатежа КАК РасходСоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	РасходСоСчетаРасшифровкаПлатежа.Ссылка.Проведен
	|	И РасходСоСчетаРасшифровкаПлатежа.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
		"ru = 'Для выключения опции необходимо очистить статью ДДС в табличной части всех документов следующих видов:
		|Поступление в кассу, Поступление на счет, Расход со счета и Расход из кассы.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодключаемоеОборудование() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = НСтр(
		"ru = 'Для выключения опции необходимо установить флаг ""Без подключения""
		|во всех элементах справочников ""Кассы ККМ"" и ""Эквайринговые терминалы"" (раздел ""Компания"" - ""Все справочники"").'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказСнятьФункциональнаяОпцияНесколькоВариантовКП() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.КоличествоВариантовКП > 0";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр(
			"ru = 'Для выключения опции необходимо удалить все заказы содержащие несколько вариантов КП.'");
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Проверка на возможность отключения опции РазрешитьСкладыВТабличныхЧастях.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятиеРазрешитьСкладыВТабличныхЧастях() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасов.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРасходы.Ссылка
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
	|ГДЕ
	|	ДополнительныеРасходы.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходыПриИмпорте.Ссылка
	|ИЗ
	|	Документ.РасходыПриИмпорте КАК РасходыПриИмпорте
	|ГДЕ
	|	РасходыПриИмпорте.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПередачаТоваровМеждуОрганизациями.Ссылка
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В базе используются склады в табличной части. Отключение флажка запрещено.'");

КонецФункции

// Проверка на возможность отключения опции ИспользоватьХарактеристики.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьНаборы() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоНабор";
	Если Не Запрос.Выполнить().Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В базе есть номенклатура с установленным признаком набора. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики()

Функция ОтказСнятьФункциональнаяОпцияИспользоватьПодарочныеСертификаты() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	Номенклатура.Ссылка КАК Ссылка
				   |ИЗ
				   |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
				   |	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В базе присутствует номенклатура с типом ""Подарочный сертификат"". Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

Функция ОтказИзменитьКонтрагентДляПредоплаты() Экспорт

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодарочныеСертификаты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В базе присутствуют движения по подарочным сертификатам. Смена контрагента запрещена.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Проверка на возможность отключения опции ИспользоватьЭтапыПроизводства.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятиеФункциональнаяОпцияИспользоватьЭтапыПроизводства() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спецификации.ВидПроизводства КАК ВидПроизводства
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасовВыполненныеЭтапы.Этап
	|ИЗ
	|	Документ.СборкаЗапасов.ВыполненныеЭтапы КАК СборкаЗапасовВыполненныеЭтапы";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В базе используются этапы производства. Отключение флажка запрещено.'");

КонецФункции

// Функция - Проверка на возможность отключения опции ВыполнениеЭтаповРазнымиПодразделениями
// 
// Возвращаемое значение:
//  Строка - Описание ошибки, если отключение флажка невозможно, иначе пустая строка
//
Функция ОтказСнятиеФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ЗаказНаПроизводствоПродукция.ПодразделениеЗавершающегоЭтапа <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И ЗаказНаПроизводствоПродукция.Ссылка.СтруктурнаяЕдиница <> ЗаказНаПроизводствоПродукция.ПодразделениеЗавершающегоЭтапа
	|	И ЗаказНаПроизводствоПродукция.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасовПродукция.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка.Проведен
	|	И СборкаЗапасовПродукция.ПодразделениеЗавершающегоЭтапа <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница <> СборкаЗапасовПродукция.ПодразделениеЗавершающегоЭтапа
	|	И СборкаЗапасовПродукция.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СдельныйНарядОперации.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд.Операции КАК СдельныйНарядОперации
	|ГДЕ
	|	СдельныйНарядОперации.Ссылка.Проведен
	|	И СдельныйНарядОперации.ПодразделениеЗавершающегоЭтапа <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И СдельныйНарядОперации.Ссылка.СтруктурнаяЕдиница <> СдельныйНарядОперации.ПодразделениеЗавершающегоЭтапа
	|	И СдельныйНарядОперации.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В базе используется выполнение этапов разными подразделениями. Отключение флажка запрещено.'");

КонецФункции

// Проверка на возможность отключения опции ИспользоватьРезервированиеДенежныхСредств.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств() Экспорт

	ТекстСообщения = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДенежныеСредстваВРезерве.БанковскийСчетКасса КАК БанковскийСчетКасса
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВРезерве КАК ДенежныеСредстваВРезерве
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НеснижаемыеОстаткиДенежныхСредств.БанковскийСчетКасса
	|ИЗ
	|	РегистрСведений.НеснижаемыеОстаткиДенежныхСредств КАК НеснижаемыеОстаткиДенежныхСредств";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр(
			"ru = 'В базе созданы документы резервирования денег либо установлены неснижаемые остатки.
			|Изменение настройки невозможно.'");
	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции // ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств()

// Проверка на возможность отключения опции ИспользоватьПараметрическиеСпецификации.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятиеФункциональнаяОпцияИспользоватьПараметрическиеСпецификации() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.ЭтоШаблон";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В базе используются параметрические спецификации. Отключение флажка запрещено.'");

КонецФункции

// Проверка на возможность отключения опции ИспользоватьПараметрическиеСпецификации.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятиеФункциональнаяОпцияКонтролироватьОстаткиПриПробитииЧековККМ() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.СтатусКассовойСмены = &СтатусКассовойСмены";

	Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;

	Возврат НСтр("ru = 'В базе есть открытые кассовые смены. Отключение флажка запрещено.'");

КонецФункции

// Проверка на возможность отключения опции ИспользоватьАгентскиеПлатежиИРазделениеВыручки.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказСнятьИспользоватьАгентскиеПлатежиИРазделениеВыручки() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДенежныеСредства.Регистратор КАК Регистратор,
	|	""Денежные средства"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДенежныеСредстваВКассахККМ.Регистратор,
	|	""Денежные средства в кассах ККМ""
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредстваВКассахККМ
	|ГДЕ
	|	ДенежныеСредстваВКассахККМ.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДенежныеСредстваКПоступлению.Регистратор,
	|	""Денежные средства к поступлению""
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлению КАК ДенежныеСредстваКПоступлению
	|ГДЕ
	|	ДенежныеСредстваКПоступлению.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Шаблон = НСтр("ru = 'В регистре %1'");
	Иначе
		Шаблон = НСтр("ru = 'В регистрах %1'");
	КонецЕсли;
	
	ИмяРегистра = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ИмяРегистра <> "" Тогда
			ИмяРегистра = ИмяРегистра + ", ";
		КонецЕсли;
		
		ИмяРегистра = ИмяРегистра + Выборка.ИмяРегистра;
		
	КонецЦикла;
	
	ТекстПодстановки = СтрШаблон(Шаблон, ИмяРегистра);
	
	Возврат СтрШаблон(НСтр("ru = '%1 есть движения по договорам платежных агентов. Отключение флажка запрещено.'"), ТекстПодстановки);
	
КонецФункции

// Проверка на возможность отключения опции УчетПотребностиПоСкладам.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ОтказИзменитьНастройкуУчетПотребностиПоСкладам() Экспорт
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикДвиженияЗапасов.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияЗапасов КАК ГрафикДвиженияЗапасов
	|ГДЕ
	|	ГрафикДвиженияЗапасов.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыПокупателей.Склад
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыПоставщикам.Склад
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыНаПроизводство.Склад
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство КАК ЗаказыНаПроизводство
	|ГДЕ
	|	ЗаказыНаПроизводство.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
	Если Не Запрос.Выполнить().Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'Потребность в базе частично рассчитана в разрезе складов. Отключение флажка запрещено.'");

	КонецЕсли;

	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьДвиженияВРегистрахНакопления(Знач ПроверяемыеРегистрыНакопления, ШаблонЗапроса, ШаблонИмяПоля)

	КомпонентыЗапроса = Новый Массив;

	Для Каждого ТекПроверяемыйРегистрНакопления Из ПроверяемыеРегистрыНакопления Цикл
		ДополнитьКомпонентыЗапроса(КомпонентыЗапроса, ТекПроверяемыйРегистрНакопления, ШаблонЗапроса, ШаблонИмяПоля);
		Если КомпонентыЗапроса.Количество() > 3 Тогда
			РезультатЗапроса = ОбъединитьКомпонентыИВыполнитьЗапрос(КомпонентыЗапроса);
			Если Не РезультатЗапроса.Пустой() Тогда
				Возврат Истина;
			КонецЕсли;
			КомпонентыЗапроса.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(КомпонентыЗапроса) Тогда
		РезультатЗапроса = ОбъединитьКомпонентыИВыполнитьЗапрос(КомпонентыЗапроса);
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Процедура ДополнитьКомпонентыЗапроса(КомпонентыЗапроса, ТекПроверяемыйРегистрНакопления, ШаблонЗапроса, ШаблонИмяПоля)

	ИмяПоля = СтрШаблон(ШаблонИмяПоля, ТекПроверяемыйРегистрНакопления);
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоля", ИмяПоля);

	ИмяРегистраНакопления = СтрШаблон("РегистрНакопления.%1", ТекПроверяемыйРегистрНакопления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраНакопления", ИмяРегистраНакопления);

	Псевдоним = СтрШаблон("РегистрНакопления%1", ТекПроверяемыйРегистрНакопления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Псевдоним", Псевдоним);

	КомпонентыЗапроса.Добавить(ТекстЗапроса);

КонецПроцедуры

Функция ОбъединитьКомпонентыИВыполнитьЗапрос(КомпонентыЗапроса)

	Запрос = Новый Запрос;

	ШаблонРазделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";

	Запрос.Текст = СтрСоединить(КомпонентыЗапроса, ШаблонРазделитель);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;

КонецФункции

Функция ВДокументахИспользуютсяСкидкиИНаценки()
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить("Документ.АктВыполненныхРабот.РаботыИУслуги");
	ВидыДокументов.Добавить("Документ.ЗаказПокупателя.Запасы");
	ВидыДокументов.Добавить("Документ.ЗаказПокупателя.Работы");
	ВидыДокументов.Добавить("Документ.ОтчетОПереработке.Продукция");
	ВидыДокументов.Добавить("Документ.ОтчетОРозничныхПродажах.Запасы");
	ВидыДокументов.Добавить("Документ.РасходнаяНакладная.Запасы");
	ВидыДокументов.Добавить("Документ.СчетНаОплату.Запасы");
	ВидыДокументов.Добавить("Документ.ЧекККМ.Запасы");
	ВидыДокументов.Добавить("Документ.ЧекККМВозврат.Запасы");
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ_Документа.Ссылка
	|ИЗ
	|	&ТабличнаяЧастьДокумента КАК ТЧ_Документа
	|ГДЕ
	|	ТЧ_Документа.ПроцентСкидкиНаценки <> 0";
	
	ТекстыЗапросов = Новый Массив;
	Для Каждого ЭлементМассива Из ВидыДокументов Цикл
		
		ТекстыЗапросов.Добавить(СтрЗаменить(ШаблонЗапроса, "&ТабличнаяЧастьДокумента", ЭлементМассива));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

Функция ВозможныеОшибкиПриОтключенииФлажкаПроизводство()

	Результат = Новый Массив;
	
	// 1. Документ Заказ на производство.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Заказ на производство"".'"));

	// 2. Документ Производство.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Производство"".'"));

	// 3. Документ Распределение затрат.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Распределение затрат"".'"));

	// 4. Документ Заказ покупателя (Заказ на переработку).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Заказ покупателя"" с видом операции ""Заказ на переработку"".'"));

	// 5. Документ Сдельный наряд.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Сдельный наряд"".'"));

	// 6. Документ Перемещение по ячейкам (перемещение - подразделение).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Перемещение по ячейкам"", где структурная единица компании имеет тип ""Подразделение"".'"));

	// 7. Документ Перемещение запасов (подразделение, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Перемещение запасов"", где структурная единица компании имеет тип ""Подразделение"" и/или счет затрат имеет тип ""Косвенные затраты"".'"));

	// 8. Документ Ввод начальных остатков (подразделение, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Ввод начальных остатков"", где структурная единица компании имеет тип ""Подразделение"" и/или счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 9. Документ Принятие к учету имущества (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Принятие к учету имущества"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 10. Документ Оприходование запасов (подразделение).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Оприходование запасов"", где структурная единица компании имеет тип ""Подразделение"".'"));

	// 11. Документ Бюджет (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Бюджет"", где счета затрат имеют тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 12. Документ Изменение параметров ВА (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Изменение параметров имущества"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 13. Документ Начисление зарплаты (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Начисление зарплаты"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 14. Документ Начисление налогов (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Начисление налогов"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 15. Документ Операция (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Операция"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 16. Документ Прочие расходы (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Прочие затраты (расходы)"", где счет затрат имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'"));

	// 17. Справочник Номенклатура (незавершенное производство, косвенные затраты).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют элементы справочника ""Номенклатура"", где счет учета затрат имеет тип ""Косвенные затраты"", ""Незавершенное производство"" или способ пополнения запаса ""Производство"".'"));

	// 18. Справочник Структурные единицы (подразделение).
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют элементы справочника ""Структурная единица"", где параметр автоперемещения (перемещение, комплектация) имеет тип ""Подразделение"".'"));

	Возврат Результат;

КонецФункции

Функция ТекстЗапросаПриОтключенииФлажкаПроизводство()

	Результат =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкаЗапасов.Ссылка
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокРаспределениеЗатрат.Ссылка
	|ИЗ
	|	Документ.РаспределениеЗатрат КАК ДокРаспределениеЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СдельныйНаряд.Ссылка
	|ИЗ
	|	Документ.СдельныйНаряд КАК СдельныйНаряд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеПоЯчейкам.Ссылка
	|ИЗ
	|	Документ.ПеремещениеПоЯчейкам КАК ПеремещениеПоЯчейкам
	|ГДЕ
	|	ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеЗапасов.Ссылка
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	((ПеремещениеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|				ИЛИ ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))
	|				И ПеремещениеЗапасов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение)
	|			ИЛИ ПеремещениеЗапасов.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ВнеоборотныеАктивы КАК ВводНачальныхОстатковВнеоборотныеАктивы
	|ГДЕ
	|	(ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ВводНачальныхОстатковВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковЗапасы.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
	|ГДЕ
	|	ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковПрямыеЗатраты.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрямыеЗатраты КАК ВводНачальныхОстатковПрямыеЗатраты
	|ГДЕ
	|	ВводНачальныхОстатковПрямыеЗатраты.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПринятиеКУчетуВАВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуВА.ВнеоборотныеАктивы КАК ПринятиеКУчетуВАВнеоборотныеАктивы
	|ГДЕ
	|	(ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ПринятиеКУчетуВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОприходованиеЗапасов.Ссылка
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
	|ГДЕ
	|	ОприходованиеЗапасов.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетОстатки.Ссылка
	|ИЗ
	|	Документ.Бюджет.Остатки КАК БюджетОстатки
	|ГДЕ
	|	(БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетКосвенныеЗатраты.Ссылка
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК БюджетКосвенныеЗатраты
	|ГДЕ
	|	(БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетКосвенныеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетКосвенныеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетПрямыеЗатраты.Ссылка
	|ИЗ
	|	Документ.Бюджет.ПрямыеЗатраты КАК БюджетПрямыеЗатраты
	|ГДЕ
	|	(БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетПрямыеЗатраты.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетПрямыеЗатраты.КоррСчет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетОперации.Ссылка
	|ИЗ
	|	Документ.Бюджет.Операции КАК БюджетОперации
	|ГДЕ
	|	(БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОперации.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ БюджетОперации.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИзменениеПараметровВАВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Документ.ИзменениеПараметровВА.ВнеоборотныеАктивы КАК ИзменениеПараметровВАВнеоборотныеАктивы
	|ГДЕ
	|	(ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ИзменениеПараметровВАВнеоборотныеАктивы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплатыНачисленияУдержания.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
	|ГДЕ
	|	(НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ НачислениеЗарплатыНачисленияУдержания.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеНалоговНалоги.Ссылка
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
	|ГДЕ
	|	(НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ НачислениеНалоговНалоги.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОперацияПроводки.Ссылка
	|ИЗ
	|	Документ.Операция.Проводки КАК ОперацияПроводки
	|ГДЕ
	|	(ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ОперацияПроводки.СчетДт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ОперацияПроводки.СчетКт.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрочиеРасходыРасходы.Ссылка
	|ИЗ
	|	Документ.ПрочиеРасходы.Расходы КАК ПрочиеРасходыРасходы
	|ГДЕ
	|	(ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ ПрочиеРасходыРасходы.СчетЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|			ИЛИ Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	(СтруктурныеЕдиницы.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ИЛИ СтруктурныеЕдиницы.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ИЛИ СтруктурныеЕдиницы.ПолучательОтходов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))";

	Возврат Результат;

КонецФункции

Функция ВозможныеОшибкиПриОтключенииФлажкаЗарплата()

	Результат = Новый Массив;

	// 1. Документ Начисление зарплаты.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Начисление зарплаты"".'"));

	// 2. Документ Сдельный наряд.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Сдельный наряд"", которые начисляют зарплату сотрудникам.'"));

	// 3. Документ Заказ - наряд.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Заказ - наряд"", которые начисляют зарплату сотрудникам.'"));

	// 4. Документ Ввод начальных остатков.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Ввод начальных остатков"", по разделу учета ""Расчеты с персоналом"".'"));

	// 5. Документ Расход из кассы.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Расход из кассы"", с видом операции ""Зарплата по ведомости"" и/или ""Зарплата сотруднику"".'"));

	// 6. Документ Расход со счета.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют документы ""Расход со счета"", с видом операции ""Зарплата"".'"));

	// 7. Справочник Сотрудники.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе есть сотрудники с типом занятости ""Совместительство"".'"));

	// 8. Справочник Виды начислений и удержаний.
	Результат.Добавить(НСтр(
	"ru = 'В информационной базе присутствуют элементы справочника ""Виды начислений и удержаний"" с типом ""Налог"".'"));

	Возврат Результат;

КонецФункции

Функция ТекстЗапросаПриОтключенииФлажкаЗарплата()

	Результат =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияИУдержания.Организация,
	|	СдельныйНаряд.Ссылка
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд КАК СдельныйНаряд
	|		ПО НачисленияИУдержания.Регистратор = СдельныйНаряд.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПокупателяИсполнители.Сотрудник
	|ИЗ
	|	Документ.ЗаказПокупателя.Исполнители КАК ЗаказПокупателяИсполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = &РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходИзКассы
	|ГДЕ
	|	(РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Зарплата)
	|			ИЛИ РасходИзКассы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходСоСчета.Ссылка
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	(РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Зарплата)
	|			ИЛИ РасходСоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.Совместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНачисленийИУдержаний.Ссылка
	|ИЗ
	|	Справочник.ВидыНачисленийИУдержаний КАК ВидыНачисленийИУдержаний
	|ГДЕ
	|	ВидыНачисленийИУдержаний.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыНачисленийИУдержаний.Налог)
	|		И НЕ ВидыНачисленийИУдержаний.Предопределенный";

	Возврат Результат;

КонецФункции

// Процедура контроля отключения опции Использовать производство по регистрам.
//
Функция ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Запасы.Организация
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	(Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ Запасы.СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыИАгентскиеУслугиПринятые.Организация
	|ИЗ
	|	РегистрНакопления.ЗапасыИАгентскиеУслугиПринятые КАК ЗапасыИАгентскиеУслугиПринятые
	|ГДЕ
	|	ЗапасыИАгентскиеУслугиПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)";

	МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// 1. Регистра Запасы.
	Если Не МассивРезультатов[0].Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В информационной базе присутствуют движения по регистру ""Запасы"", где счет учета имеет тип ""Косвенные затраты"" или ""Незавершенное производство"".'");

	КонецЕсли;
		
		// 2. Регистр Запасы принятые.
	Если Не МассивРезультатов[1].Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
				"ru = 'Регистр накопления ""Запасы принятые"" содержит информацию о приеме в переработку.'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыПроизводство()

// Процедура контроля отключения опции Использовать зарплату по регистрам.
//
// Возвращаемое значение:
// 	Строка - текст сообщения если изменение настройки невозможно.
Функция ПроверитьДвиженияПоРегистрамПодсистемыЗарплата()

	ТекстОшибки = "";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияИУдержания.Организация
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПерсоналом.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПерсоналом КАК РасчетыСПерсоналом";

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// 1. Регистра Начисления и удержания.
	Если Не МассивРезультатов[0].Пустой() Тогда

		ТекстОшибки = НСтр(
			"ru = 'В информационной базе присутствуют движения по регистру ""Начисления и удержания"".'");

	КонецЕсли;
	
	// 2. Регистр Расчеты с персоналом.
	Если Не МассивРезультатов[1].Пустой() Тогда

		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + НСтр(
			"ru = 'В информационной базе присутствуют движения по регистру ""Расчеты с персоналом"".'");

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции // ПроверитьДвиженияПоРегистрамПодсистемыЗарплата()

Функция ЕстьЗаписиВРезультате(Запрос)

	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции
#КонецОбласти