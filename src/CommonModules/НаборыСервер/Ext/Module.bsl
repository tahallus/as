
#Область ПрограммныйИнтерфейс

// Дополняет структуру параметров номенклатуры данными набора
//
// Параметры:
//  СтруктураДанные	 - Структура - Структура параметров номенклатуры
//
Процедура ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные) Экспорт
	
	ПриводитьКМинимальнымЦенам = ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
		И СтруктураДанные.Свойство("СтруктурнаяЕдиница");
		
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "ЭтоНабор, ФиксированнаяСтоимость, ИспользоватьХарактеристики, СпособРасчетаЦеныНабора");
	Иначе
		ЗначенияРеквизитов = Новый Структура("ЭтоНабор, ФиксированнаяСтоимость, ИспользоватьХарактеристики", Ложь, Ложь, Ложь);
	КонецЕсли; 
	
	СтруктураДанные.Вставить("ЭтоНабор", ЗначенияРеквизитов.ЭтоНабор);
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.ВидЦен, "ПорядокОкругления, ОкруглятьВБольшуюСторону, ЦенаВключаетНДС");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДанные, СтруктураРеквизитов, Истина);
	Иначе
		СтруктураДанные.Вставить("ПорядокОкругления", Перечисления.ПорядкиОкругления.Окр0_01);
		СтруктураДанные.Вставить("ОкруглятьВБольшуюСторону", Истина);
		СтруктураДанные.Вставить("ЦенаВключаетНДС", Истина);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("СтатусПартии") И ТипЗнч(СтруктураДанные.СтатусПартии)=Тип("СписокЗначений") Тогда
		СтатусыПартий = СтруктураДанные.СтатусПартии.ВыгрузитьЗначения();
	ИначеЕсли СтруктураДанные.Свойство("ВидОперации") Тогда
		СписокСтатусов = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(, СтруктураДанные.ВидОперации);
		СтатусыПартий = СписокСтатусов.ВыгрузитьЗначения();
	Иначе
		СтатусыПартий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.СтатусыПартий.СобственныеЗапасы);
	КонецЕсли; 
	
	Если СтруктураДанные.ЭтоНабор Тогда
		Если ЗначенияРеквизитов.ИспользоватьХарактеристики И НЕ ЕстьВведенныеХарактеристики(СтруктураДанные.Номенклатура) Тогда
			СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
		КонецЕсли; 
		СтруктураДанные.Вставить("СпособРасчетаЦеныНабора", ЗначенияРеквизитов.СпособРасчетаЦеныНабора);
		СтруктураДанные.Вставить("СоставНабора", Новый Массив);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураНабора", СтруктураДанные.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНабора", ?(СтруктураДанные.Свойство("Характеристика") И ТипЗнч(СтруктураДанные.Характеристика)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), СтруктураДанные.Характеристика, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ВидЦен", ?(СтруктураДанные.Свойство("ВидЦен"), СтруктураДанные.ВидЦен, Справочники.ВидыЦен.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ВалютаДокумента", ?(СтруктураДанные.Свойство("ВалютаДокумента"), СтруктураДанные.ВалютаДокумента, Справочники.Валюты.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ДатаОбработки", ?(СтруктураДанные.Свойство("ДатаОбработки"), СтруктураДанные.ДатаОбработки, '0001-01-01'));
		Запрос.УстановитьПараметр("ВидРабот", ?(НЕ СтруктураДанные.Свойство("ВидРабот") ИЛИ ТипЗнч(СтруктураДанные.ВидРабот)<>Тип("СправочникСсылка.Номенклатура"), Справочники.Номенклатура.ПустаяСсылка(), СтруктураДанные.ВидРабот));
		Запрос.УстановитьПараметр("СтатусыПартий", СтатусыПартий);                                                     
		// минимальные цены
		Запрос.УстановитьПараметр("ПриводитьКМинимальным", ПриводитьКМинимальнымЦенам);
		Запрос.УстановитьПараметр("ВидМинимальныхЦен", ?(ПриводитьКМинимальнымЦенам, 
			ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктураДанные.СтруктурнаяЕдиница), Неопределено));
		// конец минимальные цены
		Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС(?(СтруктураДанные.Свойство("ДатаОбработки") И ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки,ТекущаяДатаСеанса())) +
		"ВЫБРАТЬ
		|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
		|	СправочникНоменклатураНабора.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СоставНаборов.Количество КАК Количество,
		|	СоставНаборов.ДоляСтоимости КАК ДоляСтоимости,
		|	СоставНаборов.Порядок КАК Порядок,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ФиксированнаяСтоимость
		|				ИЛИ НЕ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФиксированнаяСтоимость,
		|	СправочникНоменклатура.Склад КАК Склад,
		|	СправочникНоменклатура.Ячейка КАК Ячейка,
		|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
		|	СправочникНоменклатура.Вес КАК Вес,
		|	СправочникНоменклатура.Объем КАК Объем,
		|	ВЫБОР
		|		КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА СоставНаборов.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Коэффициент,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатура.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения
		|ПОМЕСТИТЬ СоставНаборов
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатураНабора
		|		ПО СоставНаборов.НоменклатураНабора = СправочникНоменклатураНабора.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
		|			ПО СправочникНоменклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС
		|		ПО СоставНаборов.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	СоставНаборов.НоменклатураНабора = &НоменклатураНабора
		|	И (СоставНаборов.ХарактеристикаНабора = &ХарактеристикаНабора
		|				И НЕ СоставНаборов.Общий
		|			ИЛИ &ХарактеристикаНабора <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И СоставНаборов.Общий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииКонтрагентов.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ПартииКонтрагентов.Партия) КАК Партия
		|ПОМЕСТИТЬ ПартииКонтрагентов
		|ИЗ
		|	РегистрСведений.ПартииКонтрагентов КАК ПартииКонтрагентов
		|ГДЕ
		|	ПартииКонтрагентов.Статус В(&СтатусыПартий)
		|	И ПартииКонтрагентов.Номенклатура В
		|			(ВЫБРАТЬ
		|				СоставНаборов.Номенклатура
		|			ИЗ
		|				СоставНаборов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииКонтрагентов.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПартииКонтрагентов.Партия) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС, ИСТИНА) КАК ЦенаВключаетНДС,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления, ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_01)) КАК ПорядокОкругления,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону, ИСТИНА) КАК ОкруглятьВБольшуюСторону,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СоставНаборов.Коэффициент КАК Коэффициент,
		|	СоставНаборов.Количество КАК Количество,
		|	СоставНаборов.ДоляСтоимости КАК ДоляСтоимости,
		|	СоставНаборов.СтавкаНДС КАК СтавкаНДС,
		|	СоставНаборов.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА СоставНаборов.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыЗапас,
		|	ВЫБОР
		|		КОГДА СоставНаборов.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыУслуга,
		|	&ТекстВыборкиСпецификация КАК Спецификация,
		|	ЕСТЬNULL(ПартииКонтрагентов.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * СоставНаборов.Коэффициент / ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Цена,
		|	ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыМинимальныйВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыМинимальныйВидЦен.Кратность) * СоставНаборов.Коэффициент / ВЫБОР
		|			КОГДА МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|				ТОГДА МинимальныеЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК МинимальнаяЦена,
		|	СоставНаборов.Склад КАК Склад,
		|	СоставНаборов.Ячейка КАК Ячейка,
		|	СоставНаборов.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
		|	СоставНаборов.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СоставНаборов.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
		|			ТОГДА СоставНаборов.Вес
		|		ИНАЧЕ ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Вес, 0)
		|	КОНЕЦ КАК ВесЕдиницыТовара,
		|	ВЫБОР
		|		КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
		|			ТОГДА СоставНаборов.Объем
		|		ИНАЧЕ ЕСТЬNULL(ВесИОбъемЕдиницТоваров.Объем, 0)
		|	КОНЕЦ КАК ОбъемЕдиницыТовара
		|ИЗ
		|	СоставНаборов КАК СоставНаборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаОбработки,
		|				ВидЦен = &ВидЦен
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							СоставНаборов.Номенклатура,
		|							СоставНаборов.Характеристика
		|						ИЗ
		|							СоставНаборов
		|						ГДЕ
		|							(СоставНаборов.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
		|								ИЛИ СоставНаборов.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене))
		|				
		|						ОБЪЕДИНИТЬ ВСЕ
		|				
		|						ВЫБРАТЬ
		|							&ВидРабот,
		|							ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|						ГДЕ
		|							&ВидРабот <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК ЦеныНоменклатурыСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
		|			ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта
		|		ПО ((СоставНаборов.ФиксированнаяСтоимость
		|					ИЛИ &ВидРабот = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|					И СоставНаборов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И СоставНаборов.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|				ИЛИ НЕ СоставНаборов.ФиксированнаяСтоимость
		|					И &ВидРабот <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|					И &ВидРабот = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) = ЦеныНоменклатурыСрезПоследних.Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаОбработки,
		|				ВидЦен = &ВидМинимальныхЦен
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							СоставНаборов.Номенклатура,
		|							СоставНаборов.Характеристика
		|						ИЗ
		|							СоставНаборов
		|						ГДЕ
		|							(СоставНаборов.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
		|								ИЛИ СоставНаборов.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене))
		|				
		|						ОБЪЕДИНИТЬ ВСЕ
		|				
		|						ВЫБРАТЬ
		|							&ВидРабот,
		|							ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|						ГДЕ
		|							&ВидРабот <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|					И &ПриводитьКМинимальным) КАК МинимальныеЦеныНоменклатурыСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыМинимальныйВидЦен
		|			ПО МинимальныеЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыМинимальныйВидЦен.Валюта
		|		ПО ((СоставНаборов.ФиксированнаяСтоимость
		|					ИЛИ &ВидРабот = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|					И СоставНаборов.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И СоставНаборов.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|				ИЛИ НЕ СоставНаборов.ФиксированнаяСтоимость
		|					И &ВидРабот <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|					И &ВидРабот = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика)
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
		|		ПО СоставНаборов.Номенклатура = СпецификацииПоУмолчанию.Номенклатура
		|			И СоставНаборов.Характеристика = СпецификацииПоУмолчанию.Характеристика}
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПартииКонтрагентов КАК ПартииКонтрагентов
		|		ПО СоставНаборов.Номенклатура = ПартииКонтрагентов.Номенклатура
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВесИОбъемЕдиницТоваров КАК ВесИОбъемЕдиницТоваров
		|		ПО СоставНаборов.Номенклатура = ВесИОбъемЕдиницТоваров.Номенклатура
		|			И СоставНаборов.ЕдиницаИзмерения = ВесИОбъемЕдиницТоваров.ЕдиницаИзмерения}
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоставНаборов.Порядок";
		
		Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Спецификации) ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СпецификацииПоУмолчанию) Тогда
			Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ТекстВыборкиСпецификация", 
			"ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)");
			Позиция = СтрНайти(Запрос.Текст, "{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию");
			Если Позиция>0 Тогда
				ПозицияОкончания = СтрНайти(Запрос.Текст, "}", , Позиция);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, Сред(Запрос.Текст, Позиция, ПозицияОкончания - Позиция + 1), "");
			КонецЕсли; 
		Иначе
			Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ТекстВыборкиСпецификация", 
			"ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))");
		КонецЕсли; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЦенаНабора = 0;
		ДоляСтоимости = 0;
		Пока Выборка.Следующий() Цикл
			
			СтруктураПолей = СтруктураПолейДляСоставаНабора();
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка, , "Цена");
			
			Если ПриводитьКМинимальнымЦенам
				И Выборка.Цена < Выборка.МинимальнаяЦена Тогда
				
				Цена = Выборка.МинимальнаяЦена;
				
			Иначе
				
				Цена = Выборка.Цена;
				
			КонецЕсли;
			
			ПорядокОкругления		 = Выборка.ПорядокОкругления;
			ОкруглятьВБольшуюСторону = Выборка.ОкруглятьВБольшуюСторону;
			Если СтруктураДанные.Свойство("СуммаВключаетНДС")
				И ((СтруктураДанные.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
					ИЛИ (НЕ СтруктураДанные.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС)) Тогда
					Цена = ЦенообразованиеСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанные.СуммаВключаетНДС, Выборка.СтавкаНДС);
			КонецЕсли;
			Цена = ЦенообразованиеСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
			СтруктураПолей.Цена = Цена;
			
			Если СтруктураДанные.Свойство("ПроцентСкидкиНаценки") Тогда
				СтруктураПолей.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ПроцентСкидкиНаценки);
			КонецЕсли; 
			Если СтруктураДанные.Свойство("НалогообложениеНДС") 
				И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
				Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
					СтруктураПолей.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
				Иначе
					СтруктураПолей.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Выборка.СтавкаНДС) Тогда
				СтруктураПолей.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
			Иначе
				СтруктураПолей.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
			КонецЕсли;
			// ПараметрическиеСпецификации
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации") И ЗначениеЗаполнено(СтруктураПолей.Спецификация) Тогда
				СтруктураПолей.Вставить("ЭтоШаблонСпецификации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПолей.Спецификация, "ЭтоШаблон"));
				СтруктураПолей.Вставить("ЕстьДопРеквизитыСпецификации", ПроизводствоСервер.ЕстьДопРеквизитыСпецификации(СтруктураПолей.Спецификация));
			Иначе
				СтруктураПолей.Вставить("ЭтоШаблонСпецификации", Ложь);
				СтруктураПолей.Вставить("ЕстьДопРеквизитыСпецификации", Ложь);
			КонецЕсли; 
			// Конец ПараметрическиеСпецификации
			
			СтруктураДанные.СоставНабора.Добавить(СтруктураПолей);
			ЦенаНабора = ЦенаНабора + Цена * Выборка.Количество;
			ДоляСтоимости = ДоляСтоимости + Выборка.ДоляСтоимости;
			
		КонецЦикла;
		
		Остаток = 0;
		Если СтруктураДанные.СпособРасчетаЦеныНабора=Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих Тогда
			СтруктураДанные.Вставить("Цена", ЦенаНабора);
		ИначеЕсли СтруктураДанные.СпособРасчетаЦеныНабора=Перечисления.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости И СтруктураДанные.Цена>0 И ДоляСтоимости<>0 Тогда
			Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
				ЦенаПозиции = СтруктураДанные.Цена * ОписаниеСостава.ДоляСтоимости / ДоляСтоимости / ОписаниеСостава.Количество;
				Остаток = Остаток + (ЦенаПозиции - Окр(ЦенаПозиции, 2)) * ОписаниеСостава.Количество;
				ОписаниеСостава.Цена = Окр(ЦенаПозиции, 2);
			КонецЦикла;
		ИначеЕсли СтруктураДанные.СпособРасчетаЦеныНабора=Перечисления.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене И СтруктураДанные.Цена>0 И ЦенаНабора<>0 Тогда
			Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
				ЦенаПозиции = СтруктураДанные.Цена * ОписаниеСостава.Цена / ЦенаНабора;
				Остаток = Остаток + (ЦенаПозиции - Окр(ЦенаПозиции, 2)) * ОписаниеСостава.Количество;
				ОписаниеСостава.Цена = Окр(ЦенаПозиции, 2);
			КонецЦикла;
		КонецЕсли;
		
		НаборыКлиентСервер.ОкруглениеЦеныНабора(, , , СтруктураДанные.СоставНабора, Остаток);
		
	КонецЕсли; 
	
КонецПроцедуры

// Устарела. См. НаборыСервер.ОбновитьСоставНабораВДокументе
// Обновляет состав набора в документе после открытия формы изменения состава
//
// Параметры:
//  НоменклатураНабора	 - СправочникСсылка.Номенклатура - Набор
//  ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
//  НомерВариантаКП		 - Число - Номер варианта коммерческого предложения 
//  КоличествоНаборов	 - Число - Количество экземпляров набора
//  СоставНабора		 - Массив - Строки состава набора
//  Объект				 - ДанныеФормы, ДокументОбъект - обрабатываемый документ
//  ИмяТабличнойЧасти	 - Строка - Имя обрабатываемой табличной части документа
//
Процедура ОбновитьСоставНабораВТабличнойЧасти(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, КоличествоНаборов, СоставНабора, Объект, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	Если НомерВариантаКП <> Неопределено Тогда
		СтруктураДанных.Вставить("НомерВариантаКП", НомерВариантаКП);
	КонецЕсли; 
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	СтруктураДанных.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект);
	
КонецПроцедуры

// Обновляет состав набора в документе после открытия формы изменения состава
//
// Параметры:
//  СтруктураДанных	 - Структура - Структура свойств набора:
//	 * НоменклатураНабора - СправочникСсылка.Номенклатура - Номенклатура набора
//	 * ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
//	 * ИмяТабличнойЧасти - Строка - Имя табличной части, содержащей набор
//	 * СоставНабора - Массив - Строки состава набора
//	 * КоличествоНаборов - Число - Количество экземпляров добавленного набора
//	 * ЦенаНабора - Число - Зафиксированная цена набора, необязательное
//	 * НомерВариантаКП - Число - Вариант коммерческого предложения, необязательное
//  Объект			 - ДанныеФормы, ДокументОбъект - обрабатываемый документ
//
Процедура ОбновитьСоставНабораВДокументе(СтруктураДанных, Объект) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	Если Объект.Свойство("СуммаВключаетНДС") Тогда
		ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	КонецЕсли; 
	
	Если Объект.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		ПроцентСкидкиНаценкиПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидСкидкиНаценки, "Процент");
	Иначе
		ПроцентСкидкиНаценкиПоУмолчанию = 0;
	КонецЕсли;
	
	Если Объект.Свойство("ПроцентСкидкиПоДисконтнойКарте")
		И Объект.Свойство("ДисконтнаяКарта")
		И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПроцентСкидкиНаценкиПоУмолчанию = ПроцентСкидкиНаценкиПоУмолчанию + Объект.ПроцентСкидкиПоДисконтнойКарте;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтруктураДанных.НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтруктураДанных.ХарактеристикаНабора);
	Если СтруктураДанных.Свойство("НомерВариантаКП") Тогда
		СтруктураОтбора.Вставить("НомерВариантаКП", СтруктураДанных.НомерВариантаКП);
	КонецЕсли; 
	
	СтароеКоличествоНаборов = 0;
	Если Объект.Свойство("ДобавленныеНаборы") Тогда
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество() = 0 Тогда
			ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
			ДобавленныеСтроки.Добавить(ДобавленнаяСтрока);
		Иначе
			ДобавленнаяСтрока = ДобавленныеСтроки[0];
			СтароеКоличествоНаборов = ДобавленнаяСтрока.Количество;
		КонецЕсли; 
		ДобавленнаяСтрока.Количество = СтруктураДанных.КоличествоНаборов;
	Иначе
		ДобавленныеСтроки = Новый Массив;
		ДобавленнаяСтрока = Неопределено;
	КонецЕсли; 
	
	Если СтруктураДанных.СоставНабора.Количество() > 0 Тогда
		ПерваяСтрока = СтруктураДанных.СоставНабора[0];
		ЗаменаВыполнена = Ложь;
		// При замене набора в форме редактирования состава строки будут содержать новые значения
		Если ПерваяСтрока.Свойство("НоменклатураНабора") И ЗначениеЗаполнено(ПерваяСтрока.НоменклатураНабора) 
			И ПерваяСтрока.НоменклатураНабора <> СтруктураДанных.НоменклатураНабора Тогда
			СтруктураДанных.НоменклатураНабора = ПерваяСтрока.НоменклатураНабора;
			Если ДобавленныеСтроки.Количество() > 0 Тогда
				ДобавленныеСтроки[0].НоменклатураНабора = СтруктураДанных.НоменклатураНабора;
				ЗаменаВыполнена = Истина;
			КонецЕсли;
		КонецЕсли; 
		Если ПерваяСтрока.Свойство("ХарактеристикаНабора") И ЗначениеЗаполнено(ПерваяСтрока.ХарактеристикаНабора) 
			И ПерваяСтрока.ХарактеристикаНабора <> СтруктураДанных.ХарактеристикаНабора Тогда
			СтруктураДанных.ХарактеристикаНабора = ПерваяСтрока.ХарактеристикаНабора;
			Если ДобавленныеСтроки.Количество() > 0 Тогда
				ДобавленныеСтроки[0].ХарактеристикаНабора = СтруктураДанных.ХарактеристикаНабора;
				ЗаменаВыполнена = Истина;
			КонецЕсли;  
		КонецЕсли;
		Если ЗаменаВыполнена Тогда
			// Требуется свернуть ТЧ ДобавленныеНаборы
			ТЧ = Объект.ДобавленныеНаборы.Выгрузить();
			КолонкиТаблицы = Новый Массив;
			КолонкиТаблицы.Добавить("НоменклатураНабора");
			КолонкиТаблицы.Добавить("ХарактеристикаНабора");
			Если ДобавленныеСтроки[0].Свойство("НомерВариантаКП") Тогда
				КолонкиТаблицы.Добавить("НомерВариантаКП");
			КонецЕсли; 
			ТЧ.Свернуть(СтрСоединить(КолонкиТаблицы, ","), "Количество");
			Объект.ДобавленныеНаборы.Загрузить(ТЧ);
			ДобавленныеСтроки.Очистить();
		КонецЕсли; 
	КонецЕсли;
	
	СтрокиТЧ = Объект[СтруктураДанных.ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	
	Если Объект.Свойство("ДобавленныеНаборы") Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтруктураДанных.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтруктураДанных.ХарактеристикаНабора);
		Если СтруктураДанных.Свойство("НомерВариантаКП") Тогда
			СтруктураОтбора.Вставить("НомерВариантаКП", СтруктураДанных.НомерВариантаКП);
		КонецЕсли; 
		ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
		Если ДобавленныеСтроки.Количество() = 0 Тогда
			ДобавленнаяСтрока = Неопределено;
		Иначе
			ДобавленнаяСтрока = ДобавленныеСтроки[0];
		КонецЕсли; 
	КонецЕсли; 
	
	СпособРасчетаЦеныНабора = СтруктураДанных.НоменклатураНабора.СпособРасчетаЦеныНабора;
	СохранятьЦены = (СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих);
	ЭтоЗаказ = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	ЭтоЗаказНаряд = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	
	БуферЗначений = Новый ТаблицаЗначений;
	БуферЗначений.Колонки.Добавить("Номенклатура");
	БуферЗначений.Колонки.Добавить("Характеристика");
	БуферЗначений.Колонки.Добавить("ЕдиницаИзмерения");
	БуферЗначений.Колонки.Добавить("ПроцентСкидкиНаценки");
	БуферЗначений.Колонки.Добавить("Резерв");
	БуферЗначений.Колонки.Добавить("РезервОтгрузка");
	БуферЗначений.Колонки.Добавить("СтруктурнаяЕдиница");
	БуферЗначений.Колонки.Добавить("СтруктурнаяЕдиницаРезерв");
	БуферЗначений.Колонки.Добавить("Ячейка");
	БуферЗначений.Колонки.Добавить("Спецификация");
	БуферЗначений.Колонки.Добавить("Партия");
	БуферЗначений.Колонки.Добавить("ТипНоменклатурыЗапас");
	БуферЗначений.Колонки.Добавить("ТипНоменклатурыУслуга");
	БуферЗначений.Колонки.Добавить("СтранаПроисхождения");
	БуферЗначений.Колонки.Добавить("Пометка");
	БуферЗначений.Колонки.Добавить("ВесЕдиницыТовара");
	БуферЗначений.Колонки.Добавить("ОбъемЕдиницыТовара");
	Если СохранятьЦены Тогда
		БуферЗначений.Колонки.Добавить("Цена");
	КонецЕсли; 
	Если ЭтоЗаказ Тогда
		БуферЗначений.Колонки.Добавить("ДатаОтгрузки");
	КонецЕсли;
	Если ЭтоЗаказНаряд И Объект.Свойство("ПоложениеВидаРабот") 
		И Объект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		БуферЗначений.Колонки.Добавить("ВидРабот");
	КонецЕсли;
	
	Если ЭтоЗаказНаряд Тогда
		// Для работ с видом расчета стоимости по норме времени в заказ-наряде подменяем номенклатуру
		Для каждого ЭлементСостава Из СтруктураДанных.СоставНабора Цикл
			Если НЕ ЭлементСостава.Свойство("ТипНоменклатуры") ИЛИ НЕ ЭлементСостава.Свойство("ФиксированнаяСтоимость") 
				ИЛИ ЭлементСостава.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементСостава.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа ИЛИ ЭлементСостава.ФиксированнаяСтоимость = Истина Тогда
				Продолжить;
			КонецЕсли; 
			Если Объект.Свойство("ПоложениеВидаРабот") И Объект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				ЭлементСостава.Вставить("ОригинальнаяНоменклатура", ЭлементСостава.Номенклатура);
				ЭлементСостава.Вставить("ОригинальнаяХарактеристика", ЭлементСостава.Характеристика);
				ЭлементСостава.Вставить("Номенклатура", Объект.ВидРабот);
				ЭлементСостава.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ИначеЕсли Объект.Свойство("ПоложениеВидаРабот") И Объект.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", ЭлементСостава.Номенклатура);
				СтруктураОтбора.Вставить("Характеристика", ЭлементСостава.Характеристика);
				Если СтруктураДанных.Свойство("НомерВариантаКП") Тогда
					СтруктураОтбора.Вставить("НомерВариантаКП", СтруктураДанных.НомерВариантаКП);
				КонецЕсли;
				НайденныеСтроки = Объект[СтруктураДанных.ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЭлементСостава.Вставить("ОригинальнаяНоменклатура", ЭлементСостава.Номенклатура);
					ЭлементСостава.Вставить("ОригинальнаяХарактеристика", ЭлементСостава.Характеристика);
					ЭлементСостава.Вставить("Номенклатура", НайденныеСтроки[0].ВидРабот);
					ЭлементСостава.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// Удаление заменяемых строк
	ИндексСтрокиВставки = Неопределено;
	ЦенаНабора = 0;
	Для каждого Стр Из СтрокиТЧ Цикл
		Если ИндексСтрокиВставки = Неопределено Тогда
			ИндексСтрокиВставки = Объект[СтруктураДанных.ИмяТабличнойЧасти].Индекс(Стр);
		КонецЕсли; 
		СтрБуфер = БуферЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрБуфер, Стр);
		КоличествоСтроки = Стр.Количество;
		Если Стр.Свойство("Коэффициент") Тогда
			КоличествоСтроки = КоличествоСтроки * Стр.Коэффициент;
		КонецЕсли; 
		Если Стр.Свойство("Кратность") Тогда
			КоличествоСтроки = КоличествоСтроки * Стр.Кратность;
		КонецЕсли; 
		ЦенаНабора = ЦенаНабора + Стр.Цена * КоличествоСтроки;
		Объект[СтруктураДанных.ИмяТабличнойЧасти].Удалить(Стр);
	КонецЦикла;
	// Не обновляем зафиксированную цену набора при изменении состава
	Если СтруктураДанных.Свойство("ЦенаНабора") И ЗначениеЗаполнено(СтруктураДанных.ЦенаНабора) Тогда
		ЦенаНабора = СтруктураДанных.ЦенаНабора;
	ИначеЕсли НЕ СохранятьЦены И ЦенаНабора > 0 И СтароеКоличествоНаборов > 0 Тогда
		ЦенаНабора = ЦенаНабора / СтароеКоличествоНаборов;
	Иначе
		ЦенаНабора = 0;
	КонецЕсли;
	
	СтруктураДанныхЦен = Новый Структура;
	СтруктураДанныхЦен.Вставить("НоменклатураНабора", СтруктураДанных.НоменклатураНабора);
	СтруктураДанныхЦен.Вставить("ХарактеристикаНабора", СтруктураДанных.ХарактеристикаНабора);
	СтруктураДанныхЦен.Вставить("СоставНабора", СтруктураДанных.СоставНабора);
	Если СтруктураДанных.Свойство("НомерВариантаКП") Тогда
		СтруктураДанныхЦен.Вставить("НомерВариантаКП", СтруктураДанных.НомерВариантаКП);
	Иначе
		СтруктураДанныхЦен.Вставить("НомерВариантаКП", 0);
	КонецЕсли; 
	СтруктураДанныхЦен.Вставить("КоличествоНаборов", СтруктураДанных.КоличествоНаборов);
	СтруктураДанныхЦен.Вставить("ЦенаНабора", ЦенаНабора);
	ОбновитьЦеныСоставаНабора(СтруктураДанныхЦен, Объект);
	
	// Добавление строк в табличную часть
	ДобавлятьСтроки = (ИндексСтрокиВставки = Неопределено 
		ИЛИ ИндексСтрокиВставки >= Объект[СтруктураДанных.ИмяТабличнойЧасти].Количество());
	Для каждого ЭлементСостава Из СтруктураДанных.СоставНабора Цикл
		Если ЭлементСостава.Свойство("ОригинальнаяНоменклатура") Тогда
			ЭлементСостава.Номенклатура = ЭлементСостава.ОригинальнаяНоменклатура;
		КонецЕсли; 
		Если ЭлементСостава.Свойство("ОригинальнаяХарактеристика") Тогда
			ЭлементСостава.Характеристика = ЭлементСостава.ОригинальнаяХарактеристика;
		КонецЕсли; 
		Если ДобавлятьСтроки Тогда
			НоваяСтрока = Объект[СтруктураДанных.ИмяТабличнойЧасти].Добавить();
		Иначе
			НоваяСтрока = Объект[СтруктураДанных.ИмяТабличнойЧасти].Вставить(ИндексСтрокиВставки);
			ИндексСтрокиВставки = ИндексСтрокиВставки + 1;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСостава);
		// Восстановление сохраненных цен
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
		Если НоваяСтрока.Свойство("ЕдиницаИзмерения") Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
		КонецЕсли; 
		СтрокиБуфер = БуферЗначений.НайтиСтроки(СтруктураОтбора);
		Если СтрокиБуфер.Количество() > 0 Тогда
			ИменаКолонок = Новый Массив;
			ИменаКолонок.Добавить("Номенклатура");
			ИменаКолонок.Добавить("Характеристика");
			Если НоваяСтрока.Свойство("ЕдиницаИзмерения") Тогда
				ИменаКолонок.Добавить("ЕдиницаИзмерения");
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиБуфер[0], , СтрСоединить(ИменаКолонок, ","));
		Иначе
			// Значения по умолчанию для номенклатуры, которая отсутствовала в первоначальном составе
			СтруктураПолей = Новый Структура;
			Если НоваяСтрока.Свойство("ПроцентСкидкиНаценки") Тогда 
				СтруктураПолей.Вставить("ПроцентСкидкиНаценки", ПроцентСкидкиНаценкиПоУмолчанию);
			КонецЕсли; 
			Если НоваяСтрока.Свойство("Спецификация") Тогда
				Если НоваяСтрока.Свойство("Характеристика") Тогда
					СтруктураПолей.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
						НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика));
				Иначе
					СтруктураПолей.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(
						НоваяСтрока.Номенклатура));
				КонецЕсли;
			КонецЕсли;
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "Склад, Ячейка");
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", ЗначенияРеквизитов.Склад);
			СтруктураПолей.Вставить("СтруктурнаяЕдиницаРезерв", ЗначенияРеквизитов.Склад);
			СтруктураПолей.Вставить("Ячейка", ЗначенияРеквизитов.Ячейка);
			Если НоваяСтрока.Свойство("ВесЕдиницыТовара") ИЛИ НоваяСтрока.Свойство("ОбъемЕдиницыТовара") Тогда
				СтруктураВесИОбъем = РегистрыСведений.ВесИОбъемЕдиницТоваров.Значения(
				НоваяСтрока.Номенклатура, 
				НоваяСтрока.ЕдиницаИзмерения, 
				?(ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент"), 1));
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПолей, СтруктураВесИОбъем);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолей);
		КонецЕсли; 
		Если НоваяСтрока.Свойство("Коэффициент") Тогда
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли; 
		Если НоваяСтрока.Свойство("Кратность") Тогда
			НоваяСтрока.Кратность = 1;
		КонецЕсли; 
		Если НоваяСтрока.Свойство("КартинкаНабора") И ДобавленнаяСтрока <> Неопределено Тогда
			НоваяСтрока.КартинкаНабора = Объект.ДобавленныеНаборы.Индекс(ДобавленнаяСтрока) + 1;
			Если НоваяСтрока.КартинкаНабора > 5 Тогда
				НоваяСтрока.КартинкаНабора = ((НоваяСтрока.КартинкаНабора - 1) % 5) + 1;
			КонецЕсли; 
		КонецЕсли; 
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, ПараметрыРасчета);
		НаборыКлиентСервер.ЗаполнитьРеквизитыНовойСтроки(Объект[СтруктураДанных.ИмяТабличнойЧасти], НоваяСтрока);
		Если НоваяСтрока.Свойство("ТипНоменклатурыЗапас") И ЭлементСостава.Свойство("ТипНоменклатуры") Тогда
			НоваяСтрока.ТипНоменклатурыЗапас = ((ЭлементСостава.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
				ИЛИ (ЭлементСостава.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
		КонецЕсли;
		Если НоваяСтрока.Свойство("Кратность") И ЭлементСостава.КоличествоНаборов <> 0 Тогда
			// ТЧ Работы заказ-наряда
			Если ЭтоРаботыПоНормеВремени(НоваяСтрока, ЭлементСостава) Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / ЭлементСостава.КоличествоНаборов;
				НоваяСтрока.Кратность = ЭлементСостава.КоличествоНаборов;
			Иначе
				НоваяСтрока.Кратность = НоваяСтрока.Количество;
				НоваяСтрока.Количество = 1;
			КонецЕсли; 
		КонецЕсли;
		Если НоваяСтрока.Свойство("Вес") И НоваяСтрока.Свойство("ВесЕдиницыТовара") Тогда
			НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
		КонецЕсли;
		Если НоваяСтрока.Свойство("Объем") И НоваяСтрока.Свойство("ОбъемЕдиницыТовара") Тогда
			НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устарела. См. НаборыСервер.ОбновитьЦеныСоставаНабора
// Рассчитывает цены состава набора
//
// Параметры:
//  НоменклатураНабора	 - СправочникСсылка.Номенклатура - Набор
//  ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
//  НомерВариантаКП		 - Число - Номер варианта коммерческого предложения 
//  КоличествоНаборов	 - Число - Количество экземпляров набора
//  СоставНабора		 - Массив - Строки состава набора
//  Объект				 - ДанныеФормы, ДокументОбъект - обрабатываемый документ
//
Процедура РассчитатьЦеныСоставаНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, КоличествоНаборов, СоставНабора, Объект) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураДанных.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	СтруктураДанных.Вставить("СоставНабора", СоставНабора);
	Если НомерВариантаКП <> Неопределено Тогда
		СтруктураДанных.Вставить("НомерВариантаКП", НомерВариантаКП);
	КонецЕсли; 
	СтруктураДанных.Вставить("КоличествоНаборов", КоличествоНаборов);
	ОбновитьЦеныСоставаНабора(СтруктураДанных, Объект);
	
КонецПроцедуры

// Обновляет цены состава набора
//
// Параметры:
//  СтруктураДанных	 - Структура - Структура свойств набора:
//	 * НоменклатураНабора - СправочникСсылка.Номенклатура - Номенклатура набора
//	 * ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
//	 * СоставНабора - Массив - Строки состава набора
//	 * КоличествоНаборов - Число - Количество экземпляров добавленного набора
//	 * ЦенаНабора - Число - Зафиксированная цена набора, необязательное
//	 * НомерВариантаКП - Число - Вариант коммерческого предложения, необязательное
//  Объект			 - ДанныеФормы, ДокументОбъект - обрабатываемый документ
//
Процедура ОбновитьЦеныСоставаНабора(СтруктураДанных, Объект) Экспорт
	
	// Заполнение цен состава набора
	СтруктураДанныхЦены = Новый Структура;

	СтруктураДанныхЦены.Вставить("Дата", Объект.Дата);
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидЦен", ОбъектМетаданных) Тогда
		СтруктураДанныхЦены.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанныхЦены.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанныхЦены.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанныхЦены.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		СтруктураДанныхЦены.Вставить("ПроцентСкидкиНаценки", 0);
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПроцентСкидкиПоДисконтнойКарте", ОбъектМетаданных) Тогда
			СтруктураДанныхЦены.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЦенаНабора") И ЗначениеЗаполнено(СтруктураДанных.ЦенаНабора) Тогда
		СтруктураДанныхЦены.Вставить("ЦенаНабора", СтруктураДанных.ЦенаНабора);
	КонецЕсли; 
	
	Для каждого СтрокаТЧ Из СтруктураДанных.СоставНабора Цикл
		
		СтрокаТЧ.Вставить("НоменклатураНабора", СтруктураДанных.НоменклатураНабора);
		СтрокаТЧ.Вставить("ХарактеристикаНабора", СтруктураДанных.ХарактеристикаНабора);
		СтрокаТЧ.Вставить("Цена", 0);
		Если СтруктураДанных.Свойство("НомерВариантаКП") Тогда
			СтрокаТЧ.Вставить("НомерВариантаКП", СтруктураДанных.НомерВариантаКП);
		Иначе
			СтрокаТЧ.Вставить("НомерВариантаКП", 0);
		КонецЕсли; 
		СтрокаТЧ.Вставить("КоличествоНаборов", СтруктураДанных.КоличествоНаборов);
		
		Если СтрокаТЧ.Свойство("ОригинальнаяНоменклатура") Тогда
			НоменклатураСтроки = СтрокаТЧ.ОригинальнаяНоменклатура;
		Иначе
			НоменклатураСтроки = СтрокаТЧ.Номенклатура;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоменклатураСтроки) Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если НЕ СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			ДатаСреза = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
			Если Объект.Свойство("НалогообложениеНДС") 
				И Объект.НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
				Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
					СтрокаТЧ.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
				Иначе
					СтрокаТЧ.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НоменклатураСтроки.ВидСтавкиНДС) Тогда
				СтрокаТЧ.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(НоменклатураСтроки.ВидСтавкиНДС, ДатаСреза));
			Иначе
				СтрокаТЧ.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ДатаСреза));
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанныхЦены.Свойство("ВидЦен") Тогда
			ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыСтруктурнойЕдиницей(Объект, СтрокаТЧ, СтрокаТЧ);	
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураДанныхЦены.Свойство("ВидЦен") Тогда
		ЦенообразованиеСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанныхЦены, СтруктураДанных.СоставНабора);
		Если СтруктураДанныхЦены.Свойство("ОкругленияНаборов") И СтруктураДанныхЦены.ОкругленияНаборов.Количество() > 0 Тогда
			НаборыКлиентСервер.ОкруглениеЦеныНабора(, , , СтруктураДанных.СоставНабора, СтруктураДанныхЦены.ОкругленияНаборов[0].Округление);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Проверяет табличную часть перед записью документа на наличие неразвернутых до состава наборов
//
// Параметры:
//  Объект	 - ДокументОбъект - Проверяемый документ
//  ИмяТЧ	 - Строка - Имя проверяемой табличной части
//  Отказ	 - Булево - Признак отказа записи документа
//
Процедура ПроверитьТабличнуюЧасть(Объект, ИмяТЧ, Отказ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТЧ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ
	|	ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Номенклатура.ЭтоНабор";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = НСтр("ru = 'В табличной части присутствует набор ""%1"". Для проведения документа нужно развернуть его до составляющих, %2'");
		Если Выборка.ИспользоватьХарактеристики Тогда
			ТекстПояснения = НСтр("ru = 'указав характеристику'");
		Иначе
			ТекстПояснения = НСтр("ru = 'перевыбрав номенклатуру набора. В некоторых случаях разделение на составляющие не выполняется автоматически, к примеру, при загрузке документов извне.'");
		КонецЕсли; 
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Номенклатура, ТекстПояснения);
		КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, КонтекстноеПоле, , Отказ);
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает структуру параметров набора
//
// Параметры:
//  НоменклатураНабора	 - СправочникСсылка.Номенклатура - Набор
//  ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
// 
// Возвращаемое значение:
//  Структура - Структура параметров набора. Содержит ключи:
//		* СоставНабора - Массив - Массив описаний состава набора типа Структура
//		* СпособРасчетаЦеныНабора - ПеречислениеСсылка.СпособыРасчетаЦеныНабора - Способ расчета цены набора
//
Функция ПараметрыНабора(НоменклатураНабора, ХарактеристикаНабора) Экспорт
	
	Состав = СоставНабора(НоменклатураНабора, ХарактеристикаНабора);
	Результат = Новый Структура;
	Результат.Вставить("СоставНабора", Новый Массив);
	Для каждого Строка Из Состав Цикл
		ЭлементСостава = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,Количество,ДоляСтоимости,Порядок,ФиксированнаяСтоимость");
		ЗаполнитьЗначенияСвойств(ЭлементСостава, Строка);
		Результат.СоставНабора.Добавить(ЭлементСостава);
	КонецЦикла;
	Результат.Вставить("СпособРасчетаЦеныНабора", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураНабора, "СпособРасчетаЦеныНабора"));
	Возврат Результат;
	
КонецФункции
 
// Возвращает таблицу состава набора
//
// Параметры:
//  НоменклатураНабора	 - СправочникСсылка.Номенклатура - Набор
//  ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица состава набора
//
Функция СоставНабора(НоменклатураНабора, ХарактеристикаНабора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НоменклатураНабора", НоменклатураНабора);
	Запрос.УстановитьПараметр("ХарактеристикаНабора", ?(ТипЗнч(ХарактеристикаНабора)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), ХарактеристикаНабора, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставНаборов.Номенклатура КАК Номенклатура,
	|	СоставНаборов.Характеристика КАК Характеристика,
	|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(СоставНаборов.Количество) КАК Количество,
	|	СУММА(СоставНаборов.ДоляСтоимости) КАК ДоляСтоимости,
	|	МИНИМУМ(СоставНаборов.Порядок) КАК Порядок,
	|	ВЫБОР
	|		КОГДА СоставНаборов.Номенклатура.ФиксированнаяСтоимость
	|				ИЛИ НЕ СоставНаборов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксированнаяСтоимость
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &НоменклатураНабора
	|	И (СоставНаборов.ХарактеристикаНабора = &ХарактеристикаНабора
	|			ИЛИ СоставНаборов.Общий
	|				И &ХарактеристикаНабора <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.Номенклатура,
	|	СоставНаборов.Характеристика,
	|	СоставНаборов.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СоставНаборов.Номенклатура.ФиксированнаяСтоимость
	|				ИЛИ НЕ СоставНаборов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверка возможности изменения признака набора номенклатуры
//
// Параметры:
//  НоменклатураНабора	 - 	СправочникСсылка.Номенклатура - Проверяемая номенклатура
//  ЭтоНабор			 - 	Булево - Новое значение признака набора, изменяется, если проверка не пройдена 
// 
// Возвращаемое значение:
//  Булево - Результат проверки возможности изменения
//
Функция МожноИзменитьПризнакНабора(НоменклатураНабора, ЭтоНабор) Экспорт
	
	МожноИзменять = Истина;
	НовоеЗначение = Неопределено;
	
	Если ЭтоНабор Тогда
		
		Если ЕстьДвиженияЗапасов(НоменклатураНабора) Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Номенклатура участвует в движениях, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли; 
		
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураНабора, "ТипНоменклатуры");
		ПроверкаПодчиненныхСправочников = ЕстьСпецификацииПартииСерииНоменклатуры(НоменклатураНабора);
		ДоступныСпецификацииЗапасов = (ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") И ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
		ДоступныСпецификацииРабот = (ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") И ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
		Если (ДоступныСпецификацииЗапасов ИЛИ ДоступныСпецификацииРабот) 
			И ПроверкаПодчиненныхСправочников.ЕстьСпецификации Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры созданы спецификации, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") И ПроверкаПодчиненныхСправочников.ЕстьПартии Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры созданы партии, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") И ПроверкаПодчиненныхСправочников.ЕстьСерииНоменклатуры Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры созданы Серии номенклатуры, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		Если ПроверкаПодчиненныхСправочников.ЕстьАналоги Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры заданы аналоги, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		Если ПроверкаПодчиненныхСправочников.ЕстьУправлениеЗапасами Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для номенклатуры используется управление запасами, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		Если ПроверкаПодчиненныхСправочников.ИспользуетсяВНаборах Тогда
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Номенклатура используется в составах наборов, использование в качестве набора невозможно'"));
			МожноИзменять = Ложь;
			НовоеЗначение = Ложь;
		КонецЕсли;
		
	КонецЕсли; 

	Если НовоеЗначение <> Неопределено Тогда
		ЭтоНабор = НовоеЗначение;
	КонецЕсли; 	
	Возврат МожноИзменять;
	
КонецФункции

#Область Печать

// Обрабатывает данные для печати документов, корректируя информацию наборов в соответствии с их вариантами печати
//
// Параметры:
//  ДанныеОбъектовПечати - Массив - Массив структур с данными печати
//  ИмяТабличнойЧасти	 - Строка - Имя обрабатываемой табличной части
//  Ошибки				 - Неопределено, СписокЗначений - Описание ошибок, дополнится ошибками обработки наборов, если они произойдут
//  ПроверятьРазделители - Булево - Признак необходимости проверки наличия разделителей в заказах покупателей между
//                                  строками состава одного набора
//
Процедура КомпоноватьТабличнуюЧастьПоНаборам(ДанныеОбъектовПечати, ИмяТабличнойЧасти, Ошибки = Неопределено, ПроверятьРазделители = Ложь) Экспорт
	
	ПоляСуммирования = "Сумма, СуммаБезСкидки, Скидка, Всего, СуммаНДС, СуммаБезНДС, СуммаСНДС, СуммаНДСВНациональнойВалюте, ВсегоВНациональнойВалюте, СуммаВВалютеДокумента, СуммаНДСВВалютеДокумента, ВсегоВВалютеДокумента, Вес, МассаБрутто, Объем";
	ПоляЗапас = "Запас, ПредставлениеНоменклатуры, ЗапасНаименование, ТоварНаименование, Товар, НоменклатураНаименование";
	ПоляАртикул = "Артикул, ТоварКод, НоменклатураАртикул";
	ПоляКод = "Код, КодПродукции, ЗапасКод";
	ПоляЕдиницаИзмерения = "ЕдиницаИзмерения, ЕдиницаИзмеренияПоОКЕИ_Наименование, БазоваяЕдиницаНаименование, ЕдиницаХранения";
	ПоляКодЕдиницыИзмерения = "ЕдиницаИзмеренияКод, ЕдиницаИзмеренияПоОКЕИ_Код";
	ПоляКоличество = "Количество, КоличествоКратностьКоэффициент";
	
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	
	Для каждого ОбъектПечати Из ДанныеОбъектовПечати Цикл
		
		Если ОбъектПечати[ИмяТабличнойЧасти].Количество()=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавленныеНаборы = ОбъектПечати["ТаблицаДобавленныеНаборы"];
		ЕстьРазделители = ЕстьРазделители(ОбъектПечати[ИмяТабличнойЧасти]);
		ЕстьВариантыКП = (ДобавленныеНаборы.Колонки.Найти("НомерВариантаКП")<>Неопределено);
		ЕстьДатаОтгрузки = (ОбъектПечати[ИмяТабличнойЧасти].Колонки.Найти("ДатаОтгрузки")<>Неопределено);
		ЕстьПроцентСкидки = (ОбъектПечати[ИмяТабличнойЧасти].Колонки.Найти("ПроцентСкидкиНаценки")<>Неопределено);
		ЕстьАвтоматическиеСкидки = (ОбъектПечати[ИмяТабличнойЧасти].Колонки.Найти("СуммаАвтоматическойСкидки")<>Неопределено);
		ЕстьСтавкаНДС = (ОбъектПечати[ИмяТабличнойЧасти].Колонки.Найти("СтавкаНДС")<>Неопределено);
		ЕстьСуммаВключаетНДС = (ДанныеОбъектовПечати.Колонки.Найти("СуммаВключаетНДС")<>Неопределено);
		
		ОбъектПечати[ИмяТабличнойЧасти].Колонки.Добавить("Порядок");
		
		// Сортировка по наборам в три этапа
		// 1. Проверка, что между строками наборов нет разделителей
		Если ЕстьРазделители И ПроверятьРазделители Тогда
			ТаблицаПроверки = Новый ТаблицаЗначений;
			ТаблицаПроверки.Колонки.Добавить("НоменклатураНабора");
			ТаблицаПроверки.Колонки.Добавить("ХарактеристикаНабора");
			Если ЕстьВариантыКП Тогда
				ТаблицаПроверки.Колонки.Добавить("НомерВариантаКП");
			КонецЕсли; 
			ТаблицаПроверки.Колонки.Добавить("ЕстьРазделитель");
			ТаблицаПроверки.Колонки.Добавить("Ошибка");
			Для каждого СтрокаТабличнойЧасти Из ОбъектПечати[ИмяТабличнойЧасти] Цикл
				Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
					Если ЕстьВариантыКП Тогда
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
						СтрокиПроверки = ТаблицаПроверки.НайтиСтроки(СтруктураОтбора);
					Иначе
						СтрокиПроверки = ТаблицаПроверки;
					КонецЕсли; 
					Для каждого СтрокаПроверки Из СтрокиПроверки Цикл
						СтрокаПроверки.ЕстьРазделитель = Истина;
					КонецЦикла;
					Продолжить;
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
				СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
				Если ЕстьВариантыКП Тогда
					СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
				КонецЕсли; 
				СтрокиПроверки = ТаблицаПроверки.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПроверки.Количество()=0 Тогда
					СтрокаПроверки = ТаблицаПроверки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПроверки, СтруктураОтбора);
				ИначеЕсли СтрокиПроверки[0].ЕстьРазделитель=Истина Тогда
					СтрокиПроверки[0].Ошибка = Истина;
				КонецЕсли; 
			КонецЦикла;
			Для каждого СтрокаПроверки Из ТаблицаПроверки Цикл
				Если СтрокаПроверки.Ошибка=Истина Тогда
					ПараметрыНабора = Новый Структура;
					ПараметрыНабора.Вставить("Содержание", "");
					ПараметрыНабора.Вставить("ПредставлениеНоменклатуры", СтрокаПроверки.НоменклатураНабора);
					ПараметрыНабора.Вставить("ПредставлениеХарактеристики", СтрокаПроверки.ХарактеристикаНабора);
					ПараметрыНабора.Вставить("ПредставлениеАртикула", "");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, 
					"", 
					СтрШаблон(НСтр("ru = 'Набор ""%1"" в табличной части содержит разделители. После сортировки строк наборов печатная форма может выглядеть некорректно.'"), ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНабора)),
					"");
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		// 2. Упорядочивание строк наборов
		Для каждого СтрокаНабора Из ДобавленныеНаборы Цикл
			ОтборСостава = Новый Структура;
			ОтборСостава.Вставить("НоменклатураНабора", СтрокаНабора.НоменклатураНабора);
			ОтборСостава.Вставить("ХарактеристикаНабора", СтрокаНабора.ХарактеристикаНабора);
			Если ЕстьВариантыКП Тогда
				ОтборСостава.Вставить("НомерВариантаКП", СтрокаНабора.НомерВариантаКП);
			КонецЕсли; 
			СоставНабора = ОбъектПечати[ИмяТабличнойЧасти].НайтиСтроки(ОтборСостава);
			Если СоставНабора.Количество()=0 Тогда
				Продолжить;
			КонецЕсли; 
			ИндексПервойСтроки = ОбъектПечати[ИмяТабличнойЧасти].Индекс(СоставНабора[0]);
			Для ИндексСостава = 0 По СоставНабора.Количество()-1 Цикл
				ИндексСтроки = ОбъектПечати[ИмяТабличнойЧасти].Индекс(СоставНабора[ИндексСостава]);
				Если ИндексСтроки=ИндексПервойСтроки+ИндексСостава Тогда
					Продолжить;
				КонецЕсли;
				ОбъектПечати[ИмяТабличнойЧасти].Сдвинуть(СоставНабора[ИндексСостава], ИндексПервойСтроки+ИндексСостава-ИндексСтроки);
			КонецЦикла;
		КонецЦикла;
		
		// 3. Корректировка итогов разделителей
		Если ЕстьРазделители И ПроверятьРазделители Тогда
			СтруктураИтогов = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
			СтрокаРазделителя = Неопределено;
			Для каждого СтрокаТабличнойЧасти Из ОбъектПечати[ИмяТабличнойЧасти] Цикл
				Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
					Если СтрокаРазделителя<>Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаРазделителя, СтруктураИтогов);
					КонецЕсли; 
					СтрокаРазделителя = СтрокаТабличнойЧасти;
					СтруктураИтогов = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
				ИначеЕсли СтрокаРазделителя<>Неопределено Тогда 
					СтруктураСтроки = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
					Для каждого Элемент Из СтруктураСтроки Цикл
						Если ТипЗнч(Элемент.Значение)=Тип("Число") И Элемент.Значение<>0 Тогда
							СтруктураИтогов[Элемент.Ключ] = СтруктураИтогов[Элемент.Ключ]+Элемент.Значение;
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
			КонецЦикла;
			Если СтрокаРазделителя<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРазделителя, СтруктураИтогов);
			КонецЕсли; 
		КонецЕсли; 
		
		Для каждого СтрокаНабора Из ДобавленныеНаборы Цикл
			
			Если СтрокаНабора.ВариантПечатиНабора<>Перечисления.ВариантыПечатиНаборов.НаборИКомплектующие
				И СтрокаНабора.ВариантПечатиНабора<>Перечисления.ВариантыПечатиНаборов.ТолькоНабор Тогда
				// Строка набора не выводится
				Продолжить;
			КонецЕсли; 
			
			ОтборСостава = Новый Структура;
			ОтборСостава.Вставить("НоменклатураНабора", СтрокаНабора.НоменклатураНабора);
			ОтборСостава.Вставить("ХарактеристикаНабора", СтрокаНабора.ХарактеристикаНабора);
			Если ЕстьВариантыКП Тогда
				ОтборСостава.Вставить("НомерВариантаКП", СтрокаНабора.НомерВариантаКП);
			КонецЕсли; 
			
			СоставНабора = ОбъектПечати[ИмяТабличнойЧасти].НайтиСтроки(ОтборСостава);
			Если СоставНабора.Количество()=0 Тогда
				// Нет данных для печати
				Продолжить;
			КонецЕсли;
			
			ДатаОтгрузки = '0001-01-01';
			
			ИндексДобавляемойСтроки = ОбъектПечати[ИмяТабличнойЧасти].Количество();
			СтруктураИтогов = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
			
			СтавкаНДСНабора = Неопределено;
			Для каждого СтрокаСоставаНабора Из СоставНабора Цикл
				
				ИндексДобавляемойСтроки = МИН(ИндексДобавляемойСтроки, ОбъектПечати[ИмяТабличнойЧасти].Индекс(СтрокаСоставаНабора));
				
				СтруктураСтроки = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСоставаНабора);
				Для каждого Элемент Из СтруктураСтроки Цикл
					Если ТипЗнч(Элемент.Значение)=Тип("Число") И Элемент.Значение<>0 Тогда
						СтруктураИтогов[Элемент.Ключ] = СтруктураИтогов[Элемент.Ключ]+Элемент.Значение;
					КонецЕсли; 
				КонецЦикла;
				
				Если ЕстьДатаОтгрузки Тогда
					ДатаОтгрузки = Макс('0001-01-01', СтрокаСоставаНабора.ДатаОтгрузки);
				КонецЕсли;
				
				Если ЕстьСтавкаНДС Тогда
					Если СтавкаНДСНабора=Неопределено Тогда
						СтавкаНДСНабора = СтрокаСоставаНабора.СтавкаНДС;
					ИначеЕсли ТипЗнч(СтавкаНДСНабора)=Тип("СправочникСсылка.СтавкиНДС") И СтавкаНДСНабора<>СтрокаСоставаНабора.СтавкаНДС Тогда
						СтавкаНДСНабора = "";
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла;
			
			ДобавляемаяСтрока = ОбъектПечати[ИмяТабличнойЧасти].Вставить(ИндексДобавляемойСтроки);
			ПривестиПустыеЗначенияКолонокСтроки(ДобавляемаяСтрока);
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("ТипНоменклатуры", СтрокаНабора.ТипНоменклатурыНабора);
			ДанныеСтроки.Вставить("КоэффициентЕдиницыИзмерения", 1);
			ДанныеСтроки.Вставить("ЕдиницаИзмеренияКоэффициент", 1);
			Если ЕстьВариантыКП Тогда
				ДанныеСтроки.Вставить("НомерВариантаКП", СтрокаНабора.НомерВариантаКП);
			КонецЕсли;
			ДанныеСтроки.Вставить("ЭтоНабор", (СтрокаНабора.ВариантПечатиНабора=Перечисления.ВариантыПечатиНаборов.НаборИКомплектующие));
			ДанныеСтроки.Вставить("НеобходимоВыделитьКакСоставНабора", Ложь);
			ДанныеСтроки.Вставить("ЭтоРазделитель", Ложь);
			ДанныеСтроки.Вставить("КоличествоМест", 0);
			
			ДанныеСтроки.Вставить("Номенклатура", СтрокаНабора.НоменклатураНабора);
			
			Если СтрокаНабора.ВариантПечатиНабора=Перечисления.ВариантыПечатиНаборов.ТолькоНабор Тогда
				ДанныеСтроки.Вставить("Акциз", НСтр("ru = 'без акциза'"));
				Если ЕстьСтавкаНДС И ТипЗнч(СтавкаНДСНабора)=Тип("СправочникСсылка.СтавкиНДС") Тогда
					ДанныеСтроки.Вставить("СтавкаНДС", СтавкаНДСНабора);
				КонецЕсли; 
			КонецЕсли; 
			
			// Представление номенклатуры
			ПредставлениеНабора = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(СтрокаНабора.ЗапасНабора,
				СтрокаНабора.ХарактеристикаНабора, СтрокаНабора.АртикулНабора);
			Для Каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляЗапас) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, ПредставлениеНабора);
			КонецЦикла;
			
			// Код, артикул
			Для каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляАртикул) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, СтрокаНабора.АртикулНабора);
			КонецЦикла;
			Для каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляКод) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, СтрокаНабора.КодНабора);
			КонецЦикла;
			
			// Единица измерения
			Для Каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляЕдиницаИзмерения
				+ ?(СтрокаНабора.ТипНоменклатурыНабора = Перечисления.ТипыНоменклатуры.Запас, ", ВидУпаковки", "")) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, СтрокаНабора.ЕдиницаИзмеренияНабора);
			КонецЦикла;
			Для Каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				ПоляКодЕдиницыИзмерения) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, СтрокаНабора.КодЕдиницыИзмеренияНабора);
			КонецЦикла;
			
			// Количество
			Для каждого ИмяПараметра Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляКоличество) Цикл
				ДанныеСтроки.Вставить(ИмяПараметра, СтрокаНабора.Количество);
			КонецЦикла;
			
			// Дата отгрузки
			Если ЕстьДатаОтгрузки Тогда
				ДанныеСтроки.Вставить("ДатаОтгрузки", ДатаОтгрузки);
			КонецЕсли; 
			
			Если СтрокаНабора.ВыводитьИтоги Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСтроки, СтруктураИтогов, Истина);
				
				Если ЕстьСуммаВключаетНДС И НЕ ОбъектПечати.СуммаВключаетНДС И ДанныеСтроки.Свойство("СуммаНДС") Тогда
					УчестьНДС = ДанныеСтроки.СуммаНДС;
				Иначе
					УчестьНДС = 0;
				КонецЕсли;
					
				// Скидки
				Если ЕстьПроцентСкидки Тогда
					
					Скидка = 0;
					СуммаБезСкидки = 0;
					АвтоматическаяСкидка = 0;
					Для каждого Стр Из СоставНабора Цикл
						Если Стр.ПроцентСкидкиНаценки = 100 Тогда
							Скидка         = Скидка + Стр.Цена * Стр.Количество;
							СуммаБезСкидки = СуммаБезСкидки + Стр.Цена * Стр.Количество;
						ИначеЕсли Стр.ПроцентСкидкиНаценки = 0 И (НЕ ЕстьАвтоматическиеСкидки ИЛИ Стр.СуммаАвтоматическойСкидки = 0) Тогда
							СуммаБезСкидки = СуммаБезСкидки + Стр.Сумма;
						Иначе
							Скидка         = Скидка + Стр.Количество * Стр.Цена - Стр.Сумма;
							СуммаБезСкидки = СуммаБезСкидки + Стр.Количество * Стр.Цена;
						КонецЕсли;
						Если ЕстьАвтоматическиеСкидки Тогда
							АвтоматическаяСкидка = АвтоматическаяСкидка+Стр.СуммаАвтоматическойСкидки;
						КонецЕсли; 
					КонецЦикла;
					ДанныеСтроки.Вставить("Скидка", Скидка);
					ДанныеСтроки.Вставить("СуммаБезСкидки", СуммаБезСкидки);
					
					СтруктураСкидки = Новый Структура;
					СтруктураСкидки.Вставить("СуммаАвтоматическойСкидки", АвтоматическаяСкидка);
					ПроцентСкидкиНаценки = ?(АвтоматическаяСкидка>Скидка ИЛИ СуммаБезСкидки=0, 0, Окр((Скидка-АвтоматическаяСкидка)/СуммаБезСкидки*100, 2));
					СтруктураСкидки.Вставить("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
					СтруктураСкидки.Вставить("Количество", ДанныеСтроки.Количество);
					СтруктураСкидки.Вставить("Сумма", СуммаБезСкидки-Скидка);
					СтруктураСкидки.Вставить("Цена", ?(ДанныеСтроки.Количество=0, 0, Окр(СуммаБезСкидки/ДанныеСтроки.Количество, 2)));
					СтруктураИтогов = Новый Структура;
					СтруктураИтогов.Вставить("ПредставлениеСкидки", ПредставлениеСкидки);
					ДанныеСтроки.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтруктураСкидки, СтруктураИтогов));
					ДанныеСтроки.Вставить("СуммаАвтоматическойСкидки", АвтоматическаяСкидка);
					ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
					ДанныеСтроки.Вставить("ЕстьСкидка", АвтоматическаяСкидка>0 ИЛИ Скидка>0);
					
				ИначеЕсли ДанныеСтроки.Свойство("Скидка") И ДанныеСтроки.Скидка>0 И ДанныеСтроки.Свойство("Всего") Тогда
					
					ДанныеСтроки.Вставить("СуммаБезСкидки", ДанныеСтроки.Всего - УчестьНДС + ДанныеСтроки.Скидка);
					
				ИначеЕсли ДанныеСтроки.Свойство("Скидка") И ДанныеСтроки.Скидка>0 И ДанныеСтроки.Свойство("Сумма") Тогда
					
					ДанныеСтроки.Вставить("СуммаБезСкидки", ДанныеСтроки.Сумма + ДанныеСтроки.Скидка);
					
				ИначеЕсли ДанныеСтроки.Свойство("Всего") Тогда
					
					ДанныеСтроки.Вставить("СуммаБезСкидки", ДанныеСтроки.Всего - УчестьНДС);
					
				ИначеЕсли ДанныеСтроки.Свойство("Сумма") Тогда
					
					ДанныеСтроки.Вставить("СуммаБезСкидки", ДанныеСтроки.Сумма);
					
				КонецЕсли; 
				
				// НДС
				Если НЕ ДанныеСтроки.Свойство("СуммаСНДС") И ДанныеСтроки.Свойство("Всего") Тогда
					ДанныеСтроки.Вставить("СуммаСНДС", ДанныеСтроки.Всего);
				КонецЕсли; 
				Если НЕ ДанныеСтроки.Свойство("СуммаБезНДС") И ДанныеСтроки.Свойство("Всего") И ДанныеСтроки.Свойство("СуммаНДС") Тогда
					ДанныеСтроки.Вставить("СуммаБезНДС", ДанныеСтроки.Всего-ДанныеСтроки.СуммаНДС);
				КонецЕсли; 
				
				// Цена
				Если ДанныеСтроки.Свойство("СуммаБезСкидки") И ДанныеСтроки.СуммаБезСкидки>0 И ДанныеСтроки.Количество>0 Тогда
					ДанныеСтроки.Вставить("Цена", Окр(ДанныеСтроки.СуммаБезСкидки/ДанныеСтроки.Количество, 2));
				ИначеЕсли ДанныеСтроки.Свойство("Сумма") И ДанныеСтроки.Сумма>0 И ДанныеСтроки.Количество>0 Тогда
					ДанныеСтроки.Вставить("Цена", Окр(ДанныеСтроки.Сумма/ДанныеСтроки.Количество, 2));
				Иначе
					ДанныеСтроки.Вставить("Цена", 0);
				КонецЕсли;
				
			Иначе
				
				СтруктураПустыхИтогов = ПустаяСтруктураЧисловыхПолей(ПоляСуммирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСтроки, СтруктураПустыхИтогов, Истина);
				ДанныеСтроки.Вставить("Цена", 0);
				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, ДанныеСтроки);
			
			// Удаление строк состава при способе отображения "Только набор" 
			Если СтрокаНабора.ВариантПечатиНабора=Перечисления.ВариантыПечатиНаборов.ТолькоНабор Тогда
				Для каждого СтрокаСостава Из СоставНабора Цикл
					ОбъектПечати[ИмяТабличнойЧасти].Удалить(СтрокаСостава);
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет набор с составом в печатной форме
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Печатная форма
//  ОбластьМакета		 - ОбластьЯчеекТабличногоДокумента - Выводимая область документа
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - Выводимая информация табличной части из данных печати
//
Процедура УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаТабличнойЧасти) Экспорт
	
	Если ТипЗнч(СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора)<>Тип("Булево") Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора Тогда
		
		ОбластьСформированногоМакета = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 1, ТабличныйДокумент.ВысотаТаблицы, ОбластьМакета.ШиринаТаблицы);
		ОбластьСформированногоМакета.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает наборы в таблице товаров к печати в чеке. Наборы с вариантом печати "Только набор" сворачиваются
//
// Параметры:
//  ТаблицаТовары	 - ТаблицаЗначений - Таблица товаров для печати чека
//  ДокументОбъект	 - ДокументОбъект.ЧекККМ - Пробиваемый чек
//
Процедура ПодготовитьНаборыДляПробитияЧекаККМ(ТаблицаТовары, ДокументОбъект) Экспорт
	
	ТаблицаНаборы = ДокументОбъект.ДобавленныеНаборы.Выгрузить();
	Если ТаблицаТовары.Количество()=0 ИЛИ ТаблицаНаборы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СуммируемыеКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("СуммаСкидкиОплатыБонусом,СуммаАвтоматическойСкидки,Всего,СуммаНДС,Сумма,СуммаСкидкиНаценки");
	СтруктураИтогов = Новый Структура;
	Для каждого ИмяСвойства Из СуммируемыеКолонки Цикл
		Если ТаблицаТовары.Колонки.Найти(ИмяСвойства)=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураИтогов.Вставить(ИмяСвойства, 0);
	КонецЦикла;
	ВнесеныИзменения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНаборы", ТаблицаНаборы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаНаборы.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаНаборы
	|ИЗ
	|	&ТаблицаНаборы КАК ТаблицаНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатураНабора КАК НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|		ТаблицаНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ТаблицаНаборы.Количество КАК Количество,
	|		Номенклатура.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		ТаблицаНаборы КАК ТаблицаНаборы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ТаблицаНаборы.НоменклатураНабора = Номенклатура.Ссылка
	|	ГДЕ
	|		Номенклатура.ЭтоНабор) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВложенныйЗапрос.НоменклатураНабора = ШтрихкодыНоменклатуры.Номенклатура
	|			И ВложенныйЗапрос.ХарактеристикаНабора = ШтрихкодыНоменклатуры.Характеристика
	|			И ВложенныйЗапрос.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
	|			И (ШтрихкодыНоменклатуры.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВариантПечатиНабора<>Перечисления.ВариантыПечатиНаборов.ТолькоНабор Тогда
			Продолжить;
		КонецЕсли; 	
		СтруктураОтбора = Новый Структура("НоменклатураНабора, ХарактеристикаНабора");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		СтрокиСостава = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиСостава.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		ВнесеныИзменения = Истина;
		ИндексВставки = ТаблицаТовары.Индекс(СтрокиСостава[0]);
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			СтруктураИтогов[КлючИЗначение.Ключ] = 0;
		КонецЦикла;
		НоваяСтрока = ТаблицаТовары.Вставить(ИндексВставки);
		НоваяСтрока.Номенклатура = Выборка.НоменклатураНабора;
		НоваяСтрока.Характеристика = Выборка.ХарактеристикаНабора;
		НоваяСтрока.Количество = Выборка.Количество;
		Если ТаблицаТовары.Колонки.Найти("ЕдиницаИзмерения")<>Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		Если ТаблицаТовары.Колонки.Найти("Коэффициент")<>Неопределено Тогда
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли; 
		Если ТаблицаТовары.Колонки.Найти("Кратность")<>Неопределено Тогда
			НоваяСтрока.Кратность = 1;
		КонецЕсли; 
		Если ТаблицаТовары.Колонки.Найти("Штрихкод")<>Неопределено Тогда
			НоваяСтрока.Штрихкод = Выборка.Штрихкод;
		КонецЕсли; 
		НоваяСтрока.СтавкаНДС = СтрокиСостава[0].СтавкаНДС;
		Если ТаблицаТовары.Колонки.Найти("Заказ")<>Неопределено Тогда
			НоваяСтрока.Заказ = СтрокиСостава[0].Заказ;
		КонецЕсли; 
		Для каждого СтрокаСостава Из СтрокиСостава Цикл
			Для каждого КлючИЗначение Из СтруктураИтогов Цикл
				СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + СтрокаСостава[КлючИЗначение.Ключ];
			КонецЦикла;
			ТаблицаТовары.Удалить(СтрокаСостава);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураИтогов);
		Если НоваяСтрока.Количество <> 0 Тогда
			СуммаБезСкидки = НоваяСтрока.Сумма 
			+ ?(ТаблицаТовары.Колонки.Найти("СуммаСкидкиНаценки")<>Неопределено, НоваяСтрока.СуммаСкидкиНаценки, 0)
			+ ?(ТаблицаТовары.Колонки.Найти("СуммаАвтоматическойСкидки")<>Неопределено, НоваяСтрока.СуммаАвтоматическойСкидки, 0);
			НоваяСтрока.Цена = СуммаБезСкидки / НоваяСтрока.Количество;
			Если ТаблицаТовары.Колонки.Найти("ПроцентСкидкиНаценки")<>Неопределено И ТаблицаТовары.Колонки.Найти("СуммаСкидкиНаценки")<>Неопределено Тогда
				НоваяСтрока.ПроцентСкидкиНаценки = Окр(100 * НоваяСтрока.СуммаСкидкиНаценки / (НоваяСтрока.Количество * НоваяСтрока.Цена), 2);
			КонецЕсли; 
			Если ТаблицаТовары.Колонки.Найти("ПроцентАвтоматическойСкидки")<>Неопределено И ТаблицаТовары.Колонки.Найти("СуммаАвтоматическойСкидки")<>Неопределено Тогда
				НоваяСтрока.ПроцентАвтоматическойСкидки = Окр(100 * НоваяСтрока.СуммаАвтоматическойСкидки / (НоваяСтрока.Количество * НоваяСтрока.Цена), 2);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если ВнесеныИзменения Тогда
		// Перенумерация
		НомерСтроки = 0;
		Для каждого СтрокаТабличнойЧасти Из ТаблицаТовары Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТабличнойЧасти.НомерСтроки = НомерСтроки;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьЦеныОстаткиНаборовКВыгрузкеККМ(ТаблицаТоваровПоПравилу, ПравилоОбмена) Экспорт
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОбмена, "СтруктурнаяЕдиница, ВидЦеныНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваровПоПравилу", ТаблицаТоваровПоПравилу);
	Запрос.УстановитьПараметр("ВидЦен", РеквизитыПравила.ВидЦеныНоменклатуры);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыПравила.СтруктурнаяЕдиница);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваровПоПравилу.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаТоваровПоПравилу
	|ИЗ
	|	&ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПравилу.Номенклатура КАК НоменклатураНабора,
	|	ТаблицаТоваровПоПравилу.Характеристика КАК ХарактеристикаНабора,
	|	СоставНаборов.Номенклатура КАК Номенклатура,
	|	СоставНаборов.Характеристика КАК Характеристика,
	|	СУММА(СоставНаборов.Количество * ВЫБОР
	|			КОГДА СоставНаборов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				ТОГДА СоставНаборов.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ТаблицаССоставом
	|ИЗ
	|	ТаблицаТоваровПоПравилу КАК ТаблицаТоваровПоПравилу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставНаборов КАК СоставНаборов
	|		ПО ТаблицаТоваровПоПравилу.Номенклатура = СоставНаборов.НоменклатураНабора
	|			И (ТаблицаТоваровПоПравилу.Характеристика = СоставНаборов.ХарактеристикаНабора
	|				ИЛИ СоставНаборов.Общий
	|					И ТаблицаТоваровПоПравилу.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаТоваровПоПравилу.Номенклатура.ЭтоНабор
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.Характеристика,
	|	СоставНаборов.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Номенклатура,
	|	ТаблицаТоваровПоПравилу.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаССоставом.Номенклатура КАК Номенклатура,
	|	ТаблицаССоставом.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураСостава
	|ИЗ
	|	ТаблицаССоставом КАК ТаблицаССоставом
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаССоставом.Номенклатура,
	|	ТаблицаССоставом.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|						ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена / ВЫБОР
	|					КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|						ТОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|ПОМЕСТИТЬ ЦеныКомплектующих
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦен = &ВидЦен
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						НоменклатураСостава.Номенклатура,
	|						НоменклатураСостава.Характеристика
	|					ИЗ
	|						НоменклатураСостава)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатураНабора КАК НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	МИНИМУМ(ВложенныйЗапрос.Количество) КАК Количество,
	|	0 КАК Цена
	|ПОМЕСТИТЬ РезультатРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаССоставом.НоменклатураНабора КАК НоменклатураНабора,
	|		ТаблицаССоставом.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ТаблицаССоставом.Номенклатура КАК Номенклатура,
	|		ТаблицаССоставом.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаССоставом.Количество = 0
	|					ИЛИ СУММА(ЗапасыОстатки.КоличествоОстаток) <= 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(ЗапасыОстатки.КоличествоОстаток) / ТаблицаССоставом.Количество
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		ТаблицаССоставом КАК ТаблицаССоставом
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ЗапасыОстатки
	|			ПО ТаблицаССоставом.Номенклатура = ЗапасыОстатки.Номенклатура
	|				И ТаблицаССоставом.Характеристика = ЗапасыОстатки.Характеристика
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаССоставом.НоменклатураНабора,
	|		ТаблицаССоставом.ХарактеристикаНабора,
	|		ТаблицаССоставом.Количество,
	|		ТаблицаССоставом.Номенклатура,
	|		ТаблицаССоставом.Характеристика) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатураНабора,
	|	ВложенныйЗапрос.ХарактеристикаНабора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаССоставом.НоменклатураНабора,
	|	ТаблицаССоставом.ХарактеристикаНабора,
	|	0,
	|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ЦеныКомплектующих.Цена, 0) * ТаблицаССоставом.Количество) КАК ЧИСЛО(15, 2))
	|ИЗ
	|	ТаблицаССоставом КАК ТаблицаССоставом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныКомплектующих КАК ЦеныКомплектующих
	|		ПО ТаблицаССоставом.Номенклатура = ЦеныКомплектующих.Номенклатура
	|			И ТаблицаССоставом.Характеристика = ЦеныКомплектующих.Характеристика
	|ГДЕ
	|	ТаблицаССоставом.НоменклатураНабора.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаССоставом.НоменклатураНабора,
	|	ТаблицаССоставом.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатРасчета.НоменклатураНабора КАК Номенклатура,
	|	РезультатРасчета.ХарактеристикаНабора КАК Характеристика,
	|	СУММА(РезультатРасчета.Количество) КАК КоличествоОстаток,
	|	СУММА(РезультатРасчета.Цена) КАК Цена
	|ИЗ
	|	РезультатРасчета КАК РезультатРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатРасчета.НоменклатураНабора,
	|	РезультатРасчета.ХарактеристикаНабора
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РезультатРасчета.Количество) > 0
	|		ИЛИ СУММА(РезультатРасчета.Цена) > 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", Выборка.Характеристика);
		Строки = ТаблицаТоваровПоПравилу.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТаблицы Из Строки Цикл
			Если Выборка.Цена>0 Тогда
				СтрокаТаблицы.Цена = Выборка.Цена;
			КонецЕсли; 
			Если Цел(Выборка.КоличествоОстаток)>0 Тогда
				СтрокаТаблицы.КоличествоОстаток = Цел(Выборка.КоличествоОстаток);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;  
	
КонецПроцедуры

Процедура РазвернутьНаборы(Документ, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	МетаданныеОбъекта = Документ.Ссылка.Метаданные();
	ЕстьВидЦен = (МетаданныеОбъекта.Реквизиты.Найти("ВидЦен")<>Неопределено);
	ЕстьНалогообложение = (МетаданныеОбъекта.Реквизиты.Найти("НалогообложениеНДС")<>Неопределено);
	ЕстьВидРабот = (МетаданныеОбъекта.Реквизиты.Найти("ВидРабот")<>Неопределено);
	ЕстьВалюта = (МетаданныеОбъекта.Реквизиты.Найти("ВалютаДокумента")<>Неопределено);
	ЕстьСуммаВключаетНДС = (МетаданныеОбъекта.Реквизиты.Найти("СуммаВключаетНДС")<>Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ЭтоНабор КАК ЭтоНабор
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоНабор
	|	И Номенклатура.Ссылка В(&Номенклатура)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
		СтрокиТЧ = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаНабора Из СтрокиТЧ Цикл
			ПараметрыНабора = Новый Структура("Номенклатура, Характеристика, Цена, ПроцентСкидкиНаценки");
			ЗаполнитьЗначенияСвойств(ПараметрыНабора, СтрокаНабора);
			ПараметрыНабора.Вставить("ДатаОбработки", Документ.Дата);
			ПараметрыНабора.Вставить("Организация", Документ.Организация);
			Если ЕстьВидЦен Тогда
				ПараметрыНабора.Вставить("ВидЦен", Документ.ВидЦен);
			КонецЕсли; 
			Если ЕстьСуммаВключаетНДС Тогда
				ПараметрыНабора.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
			КонецЕсли; 
			Если ЕстьВалюта Тогда
				ПараметрыНабора.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
			КонецЕсли; 
			Если ЕстьВидРабот Тогда
				Если Документ.ПоложениеВидаРабот=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
					ПараметрыНабора.Вставить("ВидРабот", Документ.ВидРабот);
				Иначе
					ПараметрыНабора.Вставить("ВидРабот", СтрокаНабора.ВидРабот);
				КонецЕсли; 
			КонецЕсли; 
			Если ЕстьНалогообложение Тогда
				ПараметрыНабора.Вставить("НалогообложениеНДС", Документ.НалогообложениеНДС);
			КонецЕсли; 
			ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(ПараметрыНабора);
			НаборыКлиентСервер.ЗаменитьСтрокуДаннымиНабора(Документ, ИмяТабличнойЧасти, СтрокаНабора, ПараметрыНабора);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция СтруктураПолейДляСоставаНабора()
	
	СтруктураПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Характеристика");
	СтруктураПолей.Вставить("ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент");
	СтруктураПолей.Вставить("Количество");
	СтруктураПолей.Вставить("ДоляСтоимости");
	СтруктураПолей.Вставить("СтавкаНДС");
	СтруктураПолей.Вставить("ВесЕдиницыТовара");
	СтруктураПолей.Вставить("ОбъемЕдиницыТовара");
	СтруктураПолей.Вставить("ТипНоменклатуры");
	СтруктураПолей.Вставить("ТипНоменклатурыЗапас");
	СтруктураПолей.Вставить("ТипНоменклатурыУслуга");
	СтруктураПолей.Вставить("Спецификация");
	СтруктураПолей.Вставить("Партия");
	СтруктураПолей.Вставить("Цена");
	СтруктураПолей.Вставить("МинимальнаяЦена");
	СтруктураПолей.Вставить("Склад");
	СтруктураПолей.Вставить("Ячейка");
	СтруктураПолей.Вставить("ФиксированнаяСтоимость");
	СтруктураПолей.Вставить("СтранаПроисхождения");
	СтруктураПолей.Вставить("ПрослеживаемыйТовар");
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция ЕстьВведенныеХарактеристики(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	(ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|			ИЛИ ХарактеристикиНоменклатуры.Владелец = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).КатегорияНоменклатуры)";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПустаяСтруктураЧисловыхПолей(СтрокаПолей)
	
	Результат = Новый Структура();
	Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей);
	Для каждого ИмяПоля Из Поля Цикл
		Результат.Вставить(ИмяПоля, 0);
	КонецЦикла; 
	Возврат Результат;
	
КонецФункции

Функция ЕстьРазделители(ТабличнаяЧасть)
	
	Если ТабличнаяЧасть.Колонки.Найти("ЭтоРазделитель")=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.ЭтоРазделитель=Истина Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ЭтоРаботыПоНормеВремени(СтрокаТабличнойЧасти, ЭлементСостава)
	
	Возврат СтрокаТабличнойЧасти.Свойство("Количество") 
	И СтрокаТабличнойЧасти.Свойство("Кратность") 
	И (НЕ ЭлементСостава.Свойство("ФиксированнаяСтоимость") 
	ИЛИ НЕ ЭлементСостава.ФиксированнаяСтоимость);	
	
КонецФункции

Функция ОжидаемыйТипЗначенияКолонкиСтроки(ТекущийТипЗначения)
	
	ВычитаемыеТипы = Новый Массив;
	ВычитаемыеТипы.Добавить(Тип("Null"));
	Возврат Новый ОписаниеТипов(ТекущийТипЗначения,, ВычитаемыеТипы);
	
КонецФункции

Процедура ПривестиПустыеЗначенияКолонокСтроки(СтрокаТабличнойЧасти)
	
	Владелец = СтрокаТабличнойЧасти.Владелец();
	Для каждого Колонка Из Владелец.Колонки Цикл
		ТекущееЗначение = СтрокаТабличнойЧасти[Колонка.Имя];
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти[Колонка.Имя] = ОжидаемыйТипЗначенияКолонкиСтроки(Колонка.ТипЗначения).ПривестиЗначение(ТекущееЗначение);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДвиженияЗапасов(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Запасы.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКПоступлениюНаСклады.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗапасыКПоступлениюНаСклады КАК ЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	ЗапасыКПоступлениюНаСклады.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапасыКРасходуСоСкладов.Номенклатура
	|ИЗ
	|	РегистрНакопления.ЗапасыКРасходуСоСкладов КАК ЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ЗапасыКРасходуСоСкладов.Номенклатура = &Номенклатура";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьСпецификацииПартииСерииНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Владелец = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|ГДЕ
	|	ПартииНоменклатуры.Владелец = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	АналогиНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
	|ГДЕ
	|	(АналогиНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ АналогиНоменклатуры.Аналог = &Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УправлениеЗапасами.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.УправлениеЗапасами КАК УправлениеЗапасами
	|ГДЕ
	|	УправлениеЗапасами.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.Номенклатура = &Номенклатура";
	Результат = Запрос.ВыполнитьПакет();
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьСпецификации", НЕ Результат[0].Пустой());
	СтруктураВозврата.Вставить("ЕстьПартии", НЕ Результат[1].Пустой());
	СтруктураВозврата.Вставить("ЕстьСерииНоменклатуры", НЕ Результат[2].Пустой());
	СтруктураВозврата.Вставить("ЕстьАналоги", НЕ Результат[3].Пустой());
	СтруктураВозврата.Вставить("ЕстьУправлениеЗапасами", НЕ Результат[4].Пустой());
	СтруктураВозврата.Вставить("ИспользуетсяВНаборах", НЕ Результат[5].Пустой());
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти 
