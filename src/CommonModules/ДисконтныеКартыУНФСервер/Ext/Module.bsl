#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаПродажиПоДисконтнойКарте(ИмяДокумента) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	&ПроцентСкидки КАК Скидка
	|ИЗ
	|	ВременнаяТаблица КАК ТаблицаПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаПродажи.Количество) <> 0
	|		ИЛИ СУММА(ТаблицаПродажи.Сумма) <> 0)";
	
	Если ИмяДокумента = "АктВыполненныхРабот" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаРаботыИУслуги");
		
	ИначеЕсли ИмяДокумента = "РасходнаяНакладная"
		Или ИмяДокумента = "КорректировкаРеализации" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаЗапасы");
		
	ИначеЕсли ИмяДокумента = "ЧекККМ" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаЗапасы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Период", ".Дата");
		
	ИначеЕсли ИмяДокумента = "ЧекККМВозврат" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаЗапасы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Период", ".Дата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(", "-СУММА("); // это возврат
		
	ИначеЕсли ИмяДокумента = "ПриходнаяНакладная" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаЗапасы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(", "-СУММА("); // это возврат
		
	ИначеЕсли ИмяДокумента = "ОтчетОРозничныхПродажах" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаЗапасы");
		
		// дисконтная карта в ТЧ
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ДисконтнаяКарта", "ДисконтнаяКарта");
		
		// дисконтная карта в ТЧ, необходимо условие в запросе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|
			|СГРУППИРОВАТЬ ПО", "
			|ГДЕ
			|	ТаблицаПродажи.ДисконтнаяКарта <> ЗНАЧЕНИЕ(Справочник.ДисконтныеКарты.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО");
		
	ИначеЕсли ИмяДокумента = "ЗаказПокупателя" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "ВременнаяТаблицаРаботы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Период", ".Финиш");
		
		// в документе две ТЧ
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПродажи.Финиш,
		|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
		|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
		|	ТаблицаПродажи.Характеристика КАК Характеристика,
		|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты,
		|	СУММА(ТаблицаПродажи.Количество),
		|	СУММА(ТаблицаПродажи.Сумма),
		|	&ПроцентСкидки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ТаблицаПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПродажи.Финиш,
		|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
		|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты,
		|	ТаблицаПродажи.Номенклатура,
		|	ТаблицаПродажи.Характеристика";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает процент скидки по дисконтной карте.
//
// Параметры:
//  ДисконтнаяКарта - СправочникСсылка.ДисконтныеКарты - Ссылка на дисконтную карту.
//
// Возвращаемое значение: 
//   Число - процент скидки.
//
Функция ВычислитьПроцентСкидкиПоДисконтнойКарте(Знач ДатаСкидки, ДисконтнаяКарта, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСкидки) Тогда
		ДатаСкидки = ТекущаяДата();
	КонецЕсли;
	
	Если ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка Тогда
		
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ПолучатьСуммуПродаж Тогда
			ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта.Ссылка);

			ДополнительныеПараметры.Вставить("ПредставлениеПериода", ПериодНакопления.ПредставлениеПериода);
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
			                      |ИЗ
			                      |	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи");

			Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.НачалоПериода);
			Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.КонецПериода);
			Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта.Ссылка);
	        
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДополнительныеПараметры.Сумма = Выборка.СуммаОборот;
			Иначе
				ДополнительныеПараметры.Сумма = 0;
			КонецЕсли;		
		
		КонецЕсли;
		
		Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
			Возврат ДисконтнаяКарта.Владелец.Скидка;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		
		ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта.Ссылка);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Пороги.Скидка КАК Скидка,
		                      |	Пороги.НижняяГраница КАК НижняяГраница
		                      |ПОМЕСТИТЬ ВТ_Пороги
		                      |ИЗ
		                      |	Справочник.ВидыДисконтныхКарт.ПорогиНакопительныхСкидок КАК Пороги
		                      |ГДЕ
		                      |	Пороги.Ссылка = &ВидДисконтнойКарты
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	РегПороги.Скидка КАК Скидка
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		                      |	ИЗ
		                      |		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи) КАК РегПродажи
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			Пороги.НижняяГраница КАК НижняяГраница,
		                      |			Пороги.Скидка КАК Скидка
		                      |		ИЗ
		                      |			ВТ_Пороги КАК Пороги) КАК РегПороги
		                      |		ПО (РегПороги.НижняяГраница <= РегПродажи.СуммаОборот)
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		                      |		ИЗ
		                      |			(ВЫБРАТЬ
		                      |				ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		                      |			ИЗ
		                      |				РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи) КАК РегПродажи
		                      |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |					Пороги.НижняяГраница КАК НижняяГраница
		                      |				ИЗ
		                      |					ВТ_Пороги КАК Пороги) КАК РегПороги
		                      |				ПО (РегПороги.НижняяГраница <= РегПродажи.СуммаОборот)) КАК РегПорогиМакс
		                      |		ПО (РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница)");

		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.НачалоПериода);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.КонецПериода);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта.Ссылка);
        Запрос.УстановитьПараметр("ВидДисконтнойКарты", ДисконтнаяКарта.Владелец);

		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ПолучатьСуммуПродаж Тогда
			ДополнительныеПараметры.Вставить("ПредставлениеПериода", ПериодНакопления.ПредставлениеПериода);
			
			Запрос.Текст = Запрос.Текст + ";
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ
			                              |	ПродажиПоДисконтнымКартамОбороты.СуммаОборот
			                              |ИЗ
			                              |	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, , ДисконтнаяКарта = &ДисконтнаяКарта) КАК ПродажиПоДисконтнымКартамОбороты";
			МРезультатов = Запрос.ВыполнитьПакет();
			
			Выборка = МРезультатов[1].Выбрать();
			Если Выборка.Следующий() Тогда
				ПроцентНакопительнойСкидки = Выборка.Скидка;
			Иначе
				ПроцентНакопительнойСкидки = 0;
			КонецЕсли;		
			
			ВыборкаПоСуммеПродаж = МРезультатов[2].Выбрать();
			Если ВыборкаПоСуммеПродаж.Следующий() Тогда
				ДополнительныеПараметры.Сумма = ВыборкаПоСуммеПродаж.СуммаОборот;
			Иначе
				ДополнительныеПараметры.Сумма = 0;
			КонецЕсли;
			
			Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
				Возврат ПроцентНакопительнойСкидки;
			Иначе
				Возврат 0;
			КонецЕсли;

		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПроцентНакопительнойСкидки = Выборка.Скидка;
			Иначе
				ПроцентНакопительнойСкидки = 0;
			КонецЕсли;		
				
			Если ДисконтнаяКарта.Владелец.СтарыйМеханизмСкидок Тогда
				Возврат ПроцентНакопительнойСкидки;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьИСоздатьУсловиеПоДисконтнойКарте() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценок.УсловиеПредоставления В (ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту), ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	УсловиеСкидки = Справочники.УсловияПредоставленияСкидокНаценок.СоздатьЭлемент();
	УсловиеСкидки.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту;
	УсловиеСкидки.Наименование = НСтр("ru = 'Предъявлена дисконтная карта'");
	УсловиеСкидки.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет поиск дисконтных карт по магнитному коду
//
// Параметры
//  Магнитный код - Строка
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: Зарегистрированные дисконтные карты
//  и НеЗарегистрированныеДисконтныеКарты.
//
Функция НайтиДисконтныеКартыПоМагнитномуКоду(МагнитныйКод) Экспорт
	
	Возврат НайтиДисконтныеКарты(МагнитныйКод, Перечисления.ТипыКодовКарт.МагнитныйКод);
	
КонецФункции

// Функция выполняет поиск дисконтных карт
//
// Параметры
//  КодКарты - Строка
//  ТипКода - Перечисление.ТипыКодовКарт
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: Зарегистрированные дисконтные карты
//  и НеЗарегистрированныеДисконтныеКарты.
//
Функция НайтиДисконтныеКарты(КодКарты, ТипКода, Шаблон = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеДисконтныеКарты = Новый Массив;
	НеЗарегистрированныеДисконтныеКарты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВидыДисконтныхКарт.Ссылка КАК Ссылка,
	|	ВидыДисконтныхКарт.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ВидыДисконтныхКарт.ТипКарты КАК ТипКарты,
	|	ВидыДисконтныхКарт.ШаблонДисконтнойКарты,
	|	ВидыДисконтныхКарт.ПометкаУдаления
	|ПОМЕСТИТЬ ВидыКарт
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|ГДЕ
	|	(ВидыДисконтныхКарт.ТипКарты = &ТипКартыСмешанная
	|			ИЛИ ВидыДисконтныхКарт.ТипКарты = &ТипКарты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДисконтныеКарты.Ссылка КАК Ссылка,
	|	ДисконтныеКарты.Наименование КАК Наименование,
	|	ДисконтныеКарты.КодКартыШтрихкод КАК Штрихкод,
	|	ДисконтныеКарты.КодКартыМагнитный КАК МагнитныйКод,
	|	ДисконтныеКарты.ВладелецКарты КАК Контрагент,
	|	ДисконтныеКарты.Владелец КАК ВидКарты,
	|	ДисконтныеКарты.Владелец.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ДисконтныеКарты.Владелец.ТипКарты КАК ТипКарты
	|ПОМЕСТИТЬ ДисконтныеКарты
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыКарт КАК ВидыКарт
	|		ПО (ВидыКарт.Ссылка = ДисконтныеКарты.Владелец)
	|			И (&ИмяПоляКодКарты = &КодКарты)
	|			И (НЕ ДисконтныеКарты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	ДисконтныеКарты.Ссылка КАК Ссылка,
	|	ДисконтныеКарты.Наименование КАК Наименование,
	|	ДисконтныеКарты.Штрихкод КАК Штрихкод,
	|	ДисконтныеКарты.МагнитныйКод КАК МагнитныйКод,
	|	ДисконтныеКарты.Контрагент КАК Контрагент,
	|	ДисконтныеКарты.ВидКарты КАК ВидКарты,
	|	ДисконтныеКарты.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ДисконтныеКарты.ТипКарты КАК ТипКарты,
	|	ЗНАЧЕНИЕ(Справочник.ШаблоныДисконтныхКарт.ПустаяСсылка) КАК ШаблонДисконтнойКарты
	|ИЗ
	|	ДисконтныеКарты КАК ДисконтныеКарты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗНАЧЕНИЕ(Справочник.ДисконтныеКарты.ПустаяСсылка),
	|	"""",
	|	&Штрихкод,
	|	&МагнитныйКод,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ВидыКарт.Ссылка,
	|	ВидыКарт.ЭтоИменнаяКарта,
	|	ВидыКарт.ТипКарты,
	|	ВидыКарт.ШаблонДисконтнойКарты
	|ИЗ
	|	ВидыКарт КАК ВидыКарт
	|ГДЕ
	|	НЕ ВидыКарт.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидКарты
	|				ИЗ
	|					ДисконтныеКарты КАК Т)
	|	И НЕ ВидыКарт.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	
	Запрос.УстановитьПараметр("ТипКартыСмешанная", Перечисления.ТипыКарт.Смешанная);
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыКарт.Магнитная);
	Иначе
		Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыКарт.Штриховая);
	КонецЕсли;
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ДисконтныеКарты.КодКартыМагнитный");
		
		Запрос.УстановитьПараметр("Штрихкод",     "");
		Запрос.УстановитьПараметр("МагнитныйКод", КодКарты);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ДисконтныеКарты.КодКартыШтрихкод");
		
		Запрос.УстановитьПараметр("Штрихкод",     КодКарты);
		Запрос.УстановитьПараметр("МагнитныйКод", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодКарты",  КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(КодКарты));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			НоваяСтрока = ПолучитьСтруктуруДанныхДисконтнойКарты();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗарегистрированныеДисконтныеКарты.Добавить(НоваяСтрока);
		Иначе
			ТекШаблон = Выборка.ШаблонДисконтнойКарты;
			// Эта функция вызывается при вводе кода вручную.
			// Пользователь будет вводить сам код, по-этому его нельзя проверить на соответствие шаблону, т.к. мы не знаем, что
			// содержится на магнитной дорожке. Т.е. будем давать выбрать любой вид дисконтной карты.
			// Если код считан с магнитной карты, то выполняется другая функция, где проверка на соответствие шаблону выполняется.
			Если ТекШаблон.Пустая() ИЛИ ПростаяПроверкаШаблонаМК(КодКарты, ТекШаблон) Тогда
				НоваяСтрока = ПолучитьСтруктуруДанныхДисконтнойКарты();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НеЗарегистрированныеДисконтныеКарты.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеДисконтныеКарты, НеЗарегистрированныеДисконтныеКарты");
	ВозвращаемоеЗначение.ЗарегистрированныеДисконтныеКарты   = ЗарегистрированныеДисконтныеКарты;
	ВозвращаемоеЗначение.НеЗарегистрированныеДисконтныеКарты = НеЗарегистрированныеДисконтныеКарты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает дисконтную карту партнера, если она у него одна.
//
// Параметры
//  Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение
//  СправочникСсылка.ДисконтныеКарты / Неопределено
//
Функция ПолучитьКартуПоУмолчаниюДляПартнера(Контрагент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.ВладелецКарты = &Контрагент
	|	И НЕ ДисконтныеКарты.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ЗаменяемаяКарта = Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьИУстановитьОпциюАвтоматическиеСкидки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЕдинственноеУсловиеПоДисконтнымКартам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценок.УсловиеПредоставления В (ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту), ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
	|	И НЕ УсловияПредоставленияСкидокНаценок.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Количество = Результат.Количество();
	Если Количество = 1 Тогда
		
		Возврат Результат[0].Ссылка;
		
	ИначеЕсли Количество = 0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Количество > 1 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Проверяет, есть ли для указанного вида дисконтных карт действующие скидки
//
// Параметры
//  ВидДисконтнойКарты - Справочник.ВидыДисконтныхКарт
//
// Возвращаемое значение
//  Булево
//
Функция ЕстьСкидкиПоВидуКарт(ВидДисконтнойКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка КАК Скидка,
	|	СУММА(ВЫБОР
	|			КОГДА АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту)
	|				ТОГДА ВЫБОР
	|						КОГДА АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления.ВидДисконтнойКарты = ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПустаяСсылка)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления.ВидДисконтнойКарты = &ВидДисконтнойКарты
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОГДА АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УсловийВыполнено,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ АвтоматическиеСкидкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления В (ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту), ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК УсловийВсего
	|ПОМЕСТИТЬ ВТ_ПроверкаУсловий
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК АвтоматическиеСкидкиУсловияПредоставления
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидкиУсловияПредоставления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроверкаУсловий.Скидка КАК Скидка
	|ИЗ
	|	ВТ_ПроверкаУсловий КАК ВТ_ПроверкаУсловий
	|ГДЕ
	|	(ВТ_ПроверкаУсловий.УсловийВыполнено >= ВТ_ПроверкаУсловий.УсловийВсего
	|			ИЛИ ВТ_ПроверкаУсловий.Скидка.ЭтоГруппа)
	|	И ВТ_ПроверкаУсловий.Скидка.Действует
	|	И ВТ_ПроверкаУсловий.УсловийВыполнено > 0";
	
	Запрос.УстановитьПараметр("ВидДисконтнойКарты", ВидДисконтнойКарты);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция возвращает тип кода дисконтной карты, если только он
// используется в видах дисконтных карт.
//
// Параметры
//  Нет
//
// Возвращаемое значение
//  Перечисление.ТипыКодовКарт / Неопределено
//
Функция ПолучитьОсновнойТипКодаДисконтнойКарты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДисконтныхКарт.ТипКарты КАК ТипКарты
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|ГДЕ
	|	НЕ ВидыДисконтныхКарт.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Количество = Выборка.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Если Выборка.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			Возврат Перечисления.ТипыКодовКарт.Штрихкод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			Возврат Перечисления.ТипыКодовКарт.МагнитныйКод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает пустую структуру данных дисконтных карт 
//
// Параметры
//  Нет
//
// Возвращаемое значение
//  Структура - Данные дисконтной карты
//
Функция ПолучитьСтруктуруДанныхДисконтнойКарты() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Штрихкод");
	СтруктураДанных.Вставить("МагнитныйКод");
	СтруктураДанных.Вставить("Ссылка");
	СтруктураДанных.Вставить("ВидКарты");
	СтруктураДанных.Вставить("ТипКарты");
	СтруктураДанных.Вставить("ЭтоИменнаяКарта");
	СтруктураДанных.Вставить("Контрагент");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Процедура записывает в базу данных дисконтную карту на основании
// переданной структуры с данными дисконтной карты.
//
// Параметры
//  СтруктураДанныхКарты - Структура с данными дисконтной карты
//
// Возвращаемое значение
//  СправочникСсылка.ДисконтныеКарты
//
Функция ЗарегистрироватьДисконтнуюКарту(СтруктураДанныхКарты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КартаОбъект = Справочники.ДисконтныеКарты.СоздатьЭлемент();
	
	КартаОбъект.КодКартыШтрихкод  = СтруктураДанныхКарты.Штрихкод;
	КартаОбъект.КодКартыМагнитный = СтруктураДанныхКарты.МагнитныйКод;
	
	КартаОбъект.Владелец   = СтруктураДанныхКарты.ВидКарты;
	
	КартаОбъект.ВладелецКарты = СтруктураДанныхКарты.Контрагент;
	
	КартаОбъект.Наименование = УстановитьНаименованиеДисконтнойКарты(КартаОбъект.Владелец, КартаОбъект.ВладелецКарты, КартаОбъект.КодКартыШтрихкод, КартаОбъект.КодКартыМагнитный);
	
	КартаОбъект.Записать();
	
	Возврат КартаОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону
Функция ПростаяПроверкаШаблонаМК(КодКарты, ДанныеШаблона)
	
	// Проверяем только одну дорожку.
	текСтрока = КодКарты;
	Если (НЕ ДанныеШаблона.БезОграниченияРазмера И СтрДлина(текСтрока) > ДанныеШаблона.ДлинаКода)
		ИЛИ (ДанныеШаблона.ДлинаПоля > 0 И СтрДлина(текСтрока) > ДанныеШаблона.ДлинаПоля)
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура формирует наименование элемента справочника по значению других реквизитов.
//
Функция УстановитьНаименованиеДисконтнойКарты(Владелец, ВладелецКарты, КодКартыШтрихкод, КодКартыМагнитный)

	Если Владелец.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
		КодКартыСтр = СокрЛП(КодКартыШтрихкод) + " / " + СокрЛП(КодКартыМагнитный);
	ИначеЕсли Владелец.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
		КодКартыСтр = СокрЛП(КодКартыМагнитный);
	Иначе
		КодКартыСтр = СокрЛП(КодКартыШтрихкод);
	КонецЕсли;
	
	ТекНаименование = "" + ?(ВладелецКарты.Пустая() ИЛИ Не Владелец.ЭтоИменнаяКарта, "", ""+ВладелецКарты+". ") +
	                      ?(Владелец.Пустая(), "", ""+Владелец+". ")
						  + КодКартыСтр;
						  
	Возврат ТекНаименование;

КонецФункции // ПолучитьНаименованиеДисконтнойКарты()

// Функция возвращает структуру с датой начала и окончания периода накопления по дисконтной карте,
// а также текстовое представление периода.
//
Функция ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте(ДатаСкидки, ДисконтнаяКарта)
	
	Если Не ЗначениеЗаполнено(ДатаСкидки) Тогда
		ДатаСкидки = ТекущаяДата();
	КонецЕсли;
	
	ПредставлениеПериода = "";
	Если ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.ВесьПериод Тогда
		НачалоПериода = '00010101';
		КонецПериода = '00010101';
		ПредставлениеПериода = "за всё время";
	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Текущий Тогда
		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
			НачалоПериода = НачалоГода(ДатаСкидки);
			ПредставлениеПериода = "за текущий год";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
			НачалоПериода = НачалоКвартала(ДатаСкидки);
			ПредставлениеПериода = "за текущий квартал";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
			НачалоПериода = НачалоМесяца(ДатаСкидки);
			ПредставлениеПериода = "за текущий месяц";
		КонецЕсли;
		КонецПериода = КонецДня(ДатаСкидки);
	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Прошлый Тогда
		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -12);
			НачалоПериода = НачалоГода(ДатаПредПериода);
			КонецПериода = КонецГода(ДатаПредПериода);
			ПредставлениеПериода = "за прошлый год";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -3);
			НачалоПериода = НачалоКвартала(ДатаПредПериода);
			КонецПериода = КонецКвартала(ДатаПредПериода);
			ПредставлениеПериода = "за прошлый квартал";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -1);
			НачалоПериода = НачалоМесяца(ДатаПредПериода);
			КонецПериода = КонецМесяца(ДатаПредПериода);
			ПредставлениеПериода = "за прошлый месяц";
		КонецЕсли;
	ИначеЕсли ДисконтнаяКарта.Владелец.ВидПериода = Перечисления.ВидыПериодовДляНакопительныхСкидок.Последний Тогда
		Если ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Год Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -12);
			ПредставлениеПериода = "за последний год";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Квартал Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -3);
			ПредставлениеПериода = "за последний квартал";
		ИначеЕсли ДисконтнаяКарта.Владелец.Периодичность = Перечисления.Периодичность.Месяц Тогда
			ДатаПредПериода = ДобавитьМесяц(ДатаСкидки, -1);
			ПредставлениеПериода = "за последний месяц";
		КонецЕсли;		
		НачалоПериода = НачалоДня(ДатаПредПериода);
		КонецПериода = НачалоДня(ДатаСкидки) - 1; // Конец предыдущего дня.
	Иначе
		НачалоПериода = '00010101';
		КонецПериода = '00010101';
		ПредставлениеПериода = "";
	КонецЕсли;
	
	Возврат Новый Структура("НачалоПериода, КонецПериода, ПредставлениеПериода", НачалоПериода, КонецПериода, ПредставлениеПериода);

КонецФункции // ПолучитьПериодРасчетаНакопительныхСкидокПоДисконтнойКарте()

#КонецОбласти