
#Область ПрограммныйИнтерфейс

Функция УстановитьУсловноеОформлениеОтмененногоЗаказа(УсловноеОформлениеКД,
		ОформляемоеПоле = Неопределено) Экспорт
	
	ЗачеркнутыйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЗаказОтменен";
	ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементУсловногоОформления.Представление	= НСтр("ru='Отмененные заказы зачеркивать'");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ВариантЗавершения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	
	Если ОформляемоеПоле <> Неопределено Тогда
		ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
		ОформляемоеПолеКД.Использование = Истина;
	КонецЕсли;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции

Функция УстановитьУсловноеОформлениеСостоянияЗавершен(УсловноеОформлениеКД,
		СостояниеЗавершен,
		ИмяПоляСостояния = "Ссылка",
		ОформляемоеПоле = Неопределено) Экспорт
	
	ЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "СостояниеЗавершен";
	ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭлементУсловногоОформления.Представление	= НСтр("ru='Состояние ""Завершен"" жирным шрифтом'");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоляСостояния);
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= СостояниеЗавершен;
	
	Если ОформляемоеПоле <> Неопределено Тогда
		ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
		ОформляемоеПолеКД.Использование = Истина;
	КонецЕсли;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеПоЦветамСостояний(УсловноеОформлениеКД,
		ПолноеИмяСправочникаСостояний,
		ИмяПоляСостояния = "СостояниеЗаказа",
		ОформляемоеПоле = Неопределено) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформлениеКД.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния" Тогда
			УдаляемыеЭлементы.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из УдаляемыеЭлементы Цикл
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	МенеджерСостояний = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочникаСостояний);
	ВыборкаСостояний = МенеджерСостояний.Выбрать();
	
	Пока ВыборкаСостояний.Следующий() Цикл
		
		ЦветСостояния = ВыборкаСостояний.Цвет.Получить();
		Если ТипЗнч(ЦветСостояния) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСостояния);
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния";
		ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементУсловногоОформления.Представление	= НСтр("ru='Оформление в цвет состояния'");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяПоляСостояния);
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= ВыборкаСостояний.Ссылка;
		
		Если ОформляемоеПоле <> Неопределено Тогда
			ОформляемоеПолеКД = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
			ОформляемоеПолеКД.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьСостояние(ПолноеИмяСправочникаВидов, Состояние, Смещение) Экспорт
	
	МенеджерВидовЗаказов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочникаВидов);
	
	ВидЗаказаОбъект = МенеджерВидовЗаказов.Основной.ПолучитьОбъект();
	СтрокаСостояния = ВидЗаказаОбъект.ПорядокСостояний.Найти(Состояние, "Состояние");
	
	Если СтрокаСостояния = Неопределено
		Или (СтрокаСостояния.НомерСтроки = 1 И Смещение < 0)
		Или (СтрокаСостояния.НомерСтроки = ВидЗаказаОбъект.ПорядокСостояний.Количество() И Смещение > 0) Тогда
		
		Возврат;
	КонецЕсли;
	
	ВидЗаказаОбъект.ПорядокСостояний.Сдвинуть(СтрокаСостояния, Смещение);
	ВидЗаказаОбъект.Записать();
	
КонецПроцедуры

Функция ЭтоСостояниеВыполненияЗаказНаряда(СостояниеЗаказНаряда, знач ВидЗаказНаряда = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") И ВидЗаказНаряда = Неопределено Тогда
		ВидЗаказНаряда = Справочники.ВидыЗаказНарядов.Основной;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки
		|ИЗ
		|	Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
		|ГДЕ
		|	ВидыЗаказНарядовПорядокСостояний.Ссылка = &ВидЗаказа
		|	И ВидыЗаказНарядовПорядокСостояний.Состояние = &Состояние
		|	И ВидыЗаказНарядовПорядокСостояний.НомерСтроки >= ВидыЗаказНарядовПорядокСостояний.Ссылка.НомерСостоянияВыполнения";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказНаряда);
	Запрос.УстановитьПараметр("Состояние", СостояниеЗаказНаряда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаполнитьСписокВыбораЗавершенияЗаказа(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВариантыЗавершенияЗаказа.ЗначенияПеречисления Цикл
		СписокВыбора.Добавить(ЗначениеПеречисления.Имя, ЗначениеПеречисления.Синоним);
	КонецЦикла;
	СписокВыбора.Добавить("ПустаяСсылка", НСтр("ru='Не завершен'"));
	
КонецПроцедуры

Процедура ПередЗаписьюЗаказа(ЗаказОбъект) Экспорт
	
	Если ЗаказОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееСостояние = Неопределено;
	ОчиститьИсториюСостоянийПриИзмененииВида = Ложь;
	
	Если Не ЗаказОбъект.ЭтоНовый() Тогда
		Если ЗаказОбъект.Метаданные().Реквизиты.Найти("ВидЗаказа") = Неопределено Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОбъект.Ссылка, "СостояниеЗаказа");
		Иначе
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказОбъект.Ссылка, "СостояниеЗаказа, ВидЗаказа");
			ПредыдущееСостояние = ЗначенияРеквизитов.СостояниеЗаказа;
			ОчиститьИсториюСостоянийПриИзмененииВида = ЗначенияРеквизитов.ВидЗаказа <> ЗаказОбъект.ВидЗаказа;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеИсторииСостояния = Новый Структура;
	ДанныеИсторииСостояния.Вставить("ЗаписыватьСостояниеВИсторию", ЗаказОбъект.ЭтоНовый() Или ЗаказОбъект.СостояниеЗаказа <> ПредыдущееСостояние Или ОчиститьИсториюСостоянийПриИзмененииВида);
	ДанныеИсторииСостояния.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДанныеИсторииСостояния.Вставить("ОчиститьИсториюСостоянийПриИзмененииВида", ОчиститьИсториюСостоянийПриИзмененииВида);
	
	ЗаказОбъект.ДополнительныеСвойства.Вставить("ДанныеИсторииСостояния", ДанныеИсторииСостояния);
	
КонецПроцедуры

Процедура ПриЗаписиЗаказа(ЗаказОбъект) Экспорт
	
	Если ЗаказОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаказОбъект.ДополнительныеСвойства.Свойство("ДанныеИсторииСостояния") Тогда
		
		Если ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ОчиститьИсториюСостоянийПриИзмененииВида Тогда
			
			ОчиститьВсюИсториюСостоянийПоЗаказу(ЗаказОбъект.Ссылка);
		Иначе
			
			Если ЗначениеЗаполнено(ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ПредыдущееСостояние) Тогда
				ПроверитьОчиститьИсториюСостояний(
					ЗаказОбъект.Ссылка,
					ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ПредыдущееСостояние,
					ЗаказОбъект.СостояниеЗаказа,
					?(ЗаказОбъект.Метаданные().Реквизиты.Найти("ВидЗаказа") = Неопределено, Неопределено, ЗаказОбъект.ВидЗаказа)
				);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния.ЗаписыватьСостояниеВИсторию Тогда
			
			СохранитьСостояниеЗаказаВИстории(ЗаказОбъект.Ссылка, ЗаказОбъект.СостояниеЗаказа, ЗаказОбъект.ДополнительныеСвойства.ДанныеИсторииСостояния);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает записи истории состояний заказа, если у нового состояния порядок меньше чем у предыдущего
//
Процедура ПроверитьОчиститьИсториюСостояний(ЗаказСсылка, ПредыдущееСостояние, ТекущееСостояние, ВидЗаказа = Неопределено) Экспорт
	
	ПорядокТекущего = ПолучитьПорядокСостояния(ТекущееСостояние, ВидЗаказа);
	ПорядокПредыдущего = ПолучитьПорядокСостояния(ПредыдущееСостояние, ВидЗаказа);
	Если ПорядокПредыдущего = Неопределено Или ПорядокТекущего >= ПорядокПредыдущего Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ВидЗаказа = Неопределено Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовПоставщикам.Ссылка КАК Состояние
			|ПОМЕСТИТЬ втСостоянияКОчистке
			|ИЗ
			|	Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
			|ГДЕ
			|	СостоянияЗаказовПоставщикам.РеквизитДопУпорядочивания >= &ПорядокТекущего
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияСостоянийЗаказов.Период КАК Период,
			|	ИсторияСостоянийЗаказов.Заказ КАК Заказ,
			|	ИсторияСостоянийЗаказов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.ИсторияСостоянийЗаказов КАК ИсторияСостоянийЗаказов
			|ГДЕ
			|	ИсторияСостоянийЗаказов.Заказ = &Заказ
			|	И ИсторияСостоянийЗаказов.Состояние В
			|			(ВЫБРАТЬ
			|				втСостоянияКОчистке.Состояние
			|			ИЗ
			|				втСостоянияКОчистке)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияЗаказовПоставщикам", ТекущееСостояние.Метаданные().Имя);
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыЗаказовПокупателейПорядокСостояний.Состояние
			|ПОМЕСТИТЬ втСостоянияКОчистке
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
			|ГДЕ
			|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки >= &ПорядокТекущего
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияСостоянийЗаказов.Период КАК Период,
			|	ИсторияСостоянийЗаказов.Заказ КАК Заказ,
			|	ИсторияСостоянийЗаказов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.ИсторияСостоянийЗаказов КАК ИсторияСостоянийЗаказов
			|ГДЕ
			|	ИсторияСостоянийЗаказов.Заказ = &Заказ
			|	И ИсторияСостоянийЗаказов.Состояние В
			|			(ВЫБРАТЬ
			|				втСостоянияКОчистке.Состояние
			|			ИЗ
			|				втСостоянияКОчистке)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыЗаказовПокупателей", ВидЗаказа.Метаданные().Имя);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Запрос.УстановитьПараметр("ПорядокТекущего", ПорядокТекущего);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВсюИсториюСостоянийПоЗаказу(ЗаказСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заказ.Установить(ЗаказСсылка);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура СохранитьСостояниеЗаказаВИстории(ЗаказСсылка, СостояниеЗаказа, ДанныеИсторииСостояния = Неопределено, Период = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийЗаказов.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(Период) Тогда
		МенеджерЗаписи.Период = Период;
	Иначе
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	КонецЕсли;
	МенеджерЗаписи.Заказ = ЗаказСсылка;
	МенеджерЗаписи.Состояние = СостояниеЗаказа;
	МенеджерЗаписи.Записать();
	
	АссистентУправленияПриСрабатыванииСобытия(ЗаказСсылка, ДанныеИсторииСостояния);
	
КонецПроцедуры

// Возвращает порядок состояния
//
// Параметры:
//  Состояние	 - СправочникСсылка.СостоянияЗаказовПокупателей, СправочникСсылка.СостоянияЗаказНарядов, 
//		СправочникСсылка.СостоянияЗаказовПоставщикам, СправочникСсылка.СостоянияЗаказовНаПроизводство, 
//		СправочникСсылка.СостоянияЗаказовНаПеремещение - состояние для которого получается порядок
//  ВидЗаказа	 - СправочникСсылка.ВидыЗаказовПокупателей, СправочникСсылка.ВидыЗаказНарядов	 - параметр является обязательным для состояний заказов покупателей и заказ-нарядов
// 
// Возвращаемое значение:
//  число - порядок состояния
//
Функция ПолучитьПорядокСостояния(Состояние, ВидЗаказа = Неопределено) Экспорт
	
	Если ВидЗаказа = Неопределено Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Состояние, "РеквизитДопУпорядочивания");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки КАК ПорядокСостояния
			|ИЗ
			|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
			|ГДЕ
			|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
			|	И ВидыЗаказовПокупателейПорядокСостояний.Состояние = &Состояние";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыЗаказовПокупателей", ВидЗаказа.Метаданные().Имя);
		Запрос.УстановитьПараметр("Состояние", Состояние);
		Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПорядокСостояния;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Сравнить порядки двух состояний заказа.
//
// Параметры:
//  Состояние1,Состояние2  - СправочникСсылка.СостоянияЗаказовПокупателей, СправочникСсылка.СостоянияЗаказНарядов,
//      СправочникСсылка.СостоянияЗаказовПоставщикам, СправочникСсылка.СостоянияЗаказовНаПроизводство, 
//		СправочникСсылка.СостоянияЗаказовНаПеремещение - состояние для которого получается порядок.
//  ВидЗаказа - СправочникСсылка.ВидыЗаказовПокупателей, СправочникСсылка.ВидыЗаказНарядов	 - параметр является обязательным для состояний заказов покупателей и заказ-нарядов.
//
// Возвращаемое значение:
//   Число - больше 0, если Состояние1 > Состояние2;
//           меньше 0, если Состояние1 < Состояние2;
//           0, если версии равны.
//
Функция СравнитьСостояния(Состояние1, Состояние2, ВидЗаказа = Неопределено) Экспорт
	
	Если ВидЗаказа = Неопределено Тогда
		
		Состояния = Новый Массив;
		Состояния.Добавить(Состояние1);
		Состояния.Добавить(Состояние2);
		
		ДанныеСостояний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Состояния, "РеквизитДопУпорядочивания");
		
		Возврат ДанныеСостояний.Получить(Состояние1) - ДанныеСостояний.Получить(Состояние2);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК Состояние,
		|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки КАК Номер
		|ИЗ
		|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
		|ГДЕ
		|	ВидыЗаказовПокупателейПорядокСостояний.Ссылка = &ВидЗаказа
		|	И (ВидыЗаказовПокупателейПорядокСостояний.Состояние = &Состояние1
		|			ИЛИ ВидыЗаказовПокупателейПорядокСостояний.Состояние = &Состояние2)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыЗаказовПокупателей", ВидЗаказа.Метаданные().Имя);
		Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
		Запрос.УстановитьПараметр("Состояние1", Состояние1);
		Запрос.УстановитьПараметр("Состояние2", Состояние2);
		
		НомерСостояние1 = Неопределено;
		НомерСостояние2 = Неопределено;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Состояние = Состояние1 Тогда
				НомерСостояние1 = Выборка.Номер;
			КонецЕсли;
			
			Если Выборка.Состояние = Состояние2 Тогда
				НомерСостояние2 = Выборка.Номер;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерСостояние1 = Неопределено ИЛИ НомерСостояние2 = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найдены состояния в переданном виде заказа.'");
		КонецЕсли;
		
		Возврат НомерСостояние1 - НомерСостояние2;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСостояниеЗаказаПередЗавершением(ЗаказСсылка, СостояниеЗавершен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСостоянийЗаказовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийЗаказов.СрезПоследних(
		|			,
		|			Заказ = &Заказ
		|				И Состояние <> &СостояниеЗавершен) КАК ИсторияСостоянийЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Запрос.УстановитьПараметр("СостояниеЗавершен", СостояниеЗавершен);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура обработчик подписки "ОчиститьИсториюСостоянияЗаказов". Очищает вспомогательные данные по удаляемому состоянию.
//
Процедура ОчиститьИсториюСостоянияЗаказовПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ИсторияСостоянийЗаказов.УдалитьИнформациюОСостоянииЗаказов(Источник.Ссылка);
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовНаПроизводство.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовНаПроизводство.Установить(Справочники.СостоянияЗаказовНаПроизводство.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовПокупателей.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовПокупателей.Установить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВРаботеЗаказовПоставщикам.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВРаботеЗаказовПоставщикам.Установить(Справочники.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовНаПроизводство.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовНаПроизводство.Установить(Справочники.СостоянияЗаказовНаПроизводство.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовПокупателей.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовПокупателей.Установить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
	КонецЕсли;
	
	Если Константы.УдалитьСостояниеВыполненЗаказовПоставщикам.Получить() = Источник.Ссылка Тогда
		Константы.УдалитьСостояниеВыполненЗаказовПоставщикам.Установить(Справочники.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

Функция ВидЗаказа(Заказ) Экспорт
	
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ВидЗаказа");
	
КонецФункции

Функция СостояниеЗаказа(Заказ) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "СостояниеЗаказа");
	
КонецФункции

Функция ЭтоСостояниеЗавершен(СостояниеЗаказа) Экспорт
	
	Возврат СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен")
		ИЛИ СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказНарядов.Завершен")
		ИЛИ СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовНаПроизводство.Завершен")
		ИЛИ СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПоставщикам.Завершен")
		ИЛИ СостояниеЗаказа = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовНаПеремещение.Завершен");
	
КонецФункции

Функция ЗаказОтменен(Заказ) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ВариантЗавершения") = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	
КонецФункции

Функция ЗаказПерешелНазадПоВоронкеПродаж(Заказ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОписаниеТиповЗаказовСсылок().СодержитТип(ТипЗнч(Заказ)) Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ДополнительныеПараметры.Свойство("ДанныеИсторииСостояния") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеИсторииСостояния = ДополнительныеПараметры.ДанныеИсторииСостояния;
	КонецЕсли;
	
	Если ОписаниеТиповЗаказовОбъектов().СодержитТип(ТипЗнч(Заказ)) Тогда
		Если НЕ Заказ.ДополнительныеСвойства.Свойство("ДанныеИсторииСостояния") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеИсторииСостояния = Заказ.ДополнительныеСвойства.ДанныеИсторииСостояния;
	КонецЕсли;
	
	ПредыдущееСостояние = ДанныеИсторииСостояния.ПредыдущееСостояние;
	Если ПредыдущееСостояние = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущееСостояние = СостояниеЗаказа(Заказ);
	
	Возврат СравнитьСостояния(ТекущееСостояние, ПредыдущееСостояние, ВидЗаказа(Заказ)) < 0;
	
КонецФункции

// Определяет необходимость перепроведения заказа при смене состояния.
//
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказПокупателя,ДокументОбъект.ЗаказПоставщику,ДокументОбъект.ЗаказНаПроизводство -
//                Изменяемый заказ.
// 
// Возвращаемое значение:
//  РежимЗаписиДокумента - Рекомендуемый режим записи документа.
//
Функция РежимЗаписиДокументаПриСменеСостояния(ЗаказОбъект) Экспорт
	
	Если НЕ ЗаказОбъект.Проведен Тогда
		Возврат РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДанныеЗаказаКэш = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказОбъект.Ссылка, "СостояниеЗаказа,ВариантЗавершения");
	
	ПредыдущееСостояниеОтменен =  ЭтоСостояниеЗавершен(ДанныеЗаказаКэш.СостояниеЗаказа)
		И ДанныеЗаказаКэш.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	
	НовоеСостояниеОтменен = ЭтоСостояниеЗавершен(ЗаказОбъект.СостояниеЗаказа)
		И ЗаказОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	
	Если ПредыдущееСостояниеОтменен = НовоеСостояниеОтменен Тогда
		Возврат РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Возврат РежимЗаписиДокумента.Проведение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеТиповЗаказовСсылок()
	
	ОписаниеТиповЗаказовСсылок = Новый Массив;
	ОписаниеТиповЗаказовСсылок.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	ОписаниеТиповЗаказовСсылок.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	ОписаниеТиповЗаказовСсылок.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	Возврат Новый ОписаниеТипов(ОписаниеТиповЗаказовСсылок);
	
КонецФункции

Функция ОписаниеТиповЗаказовОбъектов()
	
	ОписаниеТиповЗаказовОбъектов = Новый Массив;
	ОписаниеТиповЗаказовОбъектов.Добавить(Тип("ДокументОбъект.ЗаказПокупателя"));
	ОписаниеТиповЗаказовОбъектов.Добавить(Тип("ДокументОбъект.ЗаказНаПроизводство"));
	ОписаниеТиповЗаказовОбъектов.Добавить(Тип("ДокументОбъект.ЗаказПоставщику"));
	
	Возврат Новый ОписаниеТипов(ОписаниеТиповЗаказовОбъектов);
	
КонецФункции

#КонецОбласти

#Область АссистентУправления

#Область АссистентУправления_Интеграция

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("ЗаказПоставщикуЗаказНаПроизводство", НСтр("ru='Заказ покупателя/Заказ поставщику/Заказ на производство'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Предмет       = "ЗаказПоставщикуЗаказНаПроизводство";
	НовоеСобытие.Идентификатор = "ИзменениеСостоянияЗаказа";
	НовоеСобытие.Представление = НСтр("ru='Изменено состояние Заказа покупателя/Заказа поставщику/Заказа на производство'");
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	// 1.
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказПоставщикуЗаказНаПроизводство";
	НовоеДействие.Идентификатор = "СинхронизироватьСтатусЗаказПокупателя";
	НовоеДействие.Представление = НСтр("ru='Изменить состояние заказа покупателя при изменении состояния Заказа поставщику/Заказа на производство'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаПокупателя";
	НовоеПоле.Представление = НСтр("ru='Новое состояние заказа покупателя'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей,СправочникСсылка.СостоянияЗаказНарядов");;
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаПокупателя";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа покупателя'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВидЗаказаПокупателя";
	НовоеПоле.Представление = НСтр("ru='Вид заказа покупателя'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказовПокупателей,СправочникСсылка.ВидыЗаказНарядов");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаНаПроизводство";
	НовоеПоле.Представление = НСтр("ru='Состояние заказа на производство'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовНаПроизводство");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаНаПроизводство";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа на производство'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаПоставщику";
	НовоеПоле.Представление = НСтр("ru='Состояние заказа поставщику'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПоставщикам");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаПоставщику";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа поставщику'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ТолькоОповестить";
	НовоеПоле.Представление = НСтр("ru='Только оповестить'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	
	// 2.
	НовоеДействие = Действия.Добавить();
	НовоеДействие.Предмет       = "ЗаказПоставщикуЗаказНаПроизводство";
	НовоеДействие.Идентификатор = "СинхронизироватьСтатусПодчиненныхЗаказовЗаказаПокупателя";
	НовоеДействие.Представление = НСтр("ru='Изменить состояние Заказа поставщику/Заказа на производство при изменении состояния Заказа покупателя'");
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаПокупателя";
	НовоеПоле.Представление = НСтр("ru='Состояние заказа покупателя'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей,СправочникСсылка.СостоянияЗаказНарядов");;
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаПокупателя";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа покупателя'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаНаПроизводство";
	НовоеПоле.Представление = НСтр("ru='Новое состояние заказа на производство'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовНаПроизводство");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаНаПроизводство";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа на производство'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "СостояниеЗаказаПоставщику";
	НовоеПоле.Представление = НСтр("ru='Новое состояние заказа поставщику'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПоставщикам");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ВариантЗавершенияЗаказаПоставщику";
	НовоеПоле.Представление = НСтр("ru='Вариант завершения заказа поставщику'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗавершенияЗаказа");;
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(НовоеДействие);
	НовоеПоле = НовоеДействие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ТолькоОповестить";
	НовоеПоле.Представление = НСтр("ru='Только оповестить'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	
КонецПроцедуры

Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииКонтактовПолучателяПредметаСообщения(Получатель, Предмет, ТипПредмета, ОписаниеПолучателя) Экспорт
	
КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
КонецФункции

Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	
	
КонецПроцедуры

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие.Идентификатор = "СинхронизироватьСтатусЗаказПокупателя" Тогда
		
		АссистентУправленияСинхронизироватьСтатусЗаказПокупателя(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	ИначеЕсли Действие.Идентификатор = "СинхронизироватьСтатусПодчиненныхЗаказовЗаказаПокупателя" Тогда
		
		АссистентУправленияСинхронизироватьСтатусПодчиненныхЗаказовЗаказаПокупателя(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления_Реализация

Процедура АссистентУправленияПриСрабатыванииСобытия(Заказ, ДанныеИсторииСостояния = Неопределено)
	
	ДополнительныеПараметры = Неопределено;
	Если ДанныеИсторииСостояния <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеИсторииСостояния", ДанныеИсторииСостояния);
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		АссистентУправления.ПриСрабатыванииСобытия(Заказ, "ИзменениеСостоянияЗаказаПокупателя",, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		АссистентУправления.ПриСрабатыванииСобытия(Заказ, "ИзменениеСостоянияЗаказаПоставщику",, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		АссистентУправления.ПриСрабатыванииСобытия(Заказ, "ИзменениеСостоянияЗаказаНаПроизводство",, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		АссистентУправления.ПриСрабатыванииСобытия(Заказ, "ИзменениеСостоянияЗаказа",, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура АссистентУправленияСинхронизироватьСтатусЗаказПокупателя(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	СинхронизируемыеСостояния = Новый Соответствие;
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство") И ЗначениеЗаполнено(ЗначенияЗаполнения.СостояниеЗаказаНаПроизводство) Тогда
		СинхронизируемоеСостояние = Новый Структура("СостояниеЗаказа,ВариантЗавершения", Неопределено, Неопределено);
		ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство", СинхронизируемоеСостояние.СостояниеЗаказа);
		ЗначенияЗаполнения.Свойство("ВариантЗавершенияЗаказаНаПроизводство", СинхронизируемоеСостояние.ВариантЗавершения);
		
		СинхронизируемыеСостояния.Вставить(Тип("ДокументСсылка.ЗаказНаПроизводство"), СинхронизируемоеСостояние);
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику") И ЗначениеЗаполнено(ЗначенияЗаполнения.СостояниеЗаказаПоставщику) Тогда
		СинхронизируемоеСостояние = Новый Структура("СостояниеЗаказа,ВариантЗавершения", Неопределено, Неопределено);
		ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику", СинхронизируемоеСостояние.СостояниеЗаказа);
		ЗначенияЗаполнения.Свойство("ВариантЗавершенияЗаказаПоставщику", СинхронизируемоеСостояние.ВариантЗавершения);
		
		СинхронизируемыеСостояния.Вставить(Тип("ДокументСсылка.ЗаказПоставщику"), СинхронизируемоеСостояние);
	КонецЕсли;
	
	Если СинхронизируемыеСостояния.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныйЗаказПерешелКонтрольноеСостояниеВниз = Неопределено;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если СинхронизируемыеСостояния.Получить(ТипЗнч(Предмет)) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущееСостояние = СостояниеЗаказа(Предмет);
		Если НЕ ЭтоСостояниеЗавершен(ТекущееСостояние) Тогда
			
			Если ДополнительныеПараметры.ДополнительныеПараметрыСобытия.Свойство("ДанныеИсторииСостояния")
				И ДополнительныеПараметры.ДополнительныеПараметрыСобытия.ДанныеИсторииСостояния.Свойство("ПредыдущееСостояние") Тогда
				ПредыдущееСостояние = ДополнительныеПараметры.ДополнительныеПараметрыСобытия.ДанныеИсторииСостояния.ПредыдущееСостояние;
			Иначе
				ПредыдущееСостояние = ПолучитьСостояниеЗаказаПередЗавершением(Предмет, ТекущееСостояние);
			КонецЕсли;
			
			СинхронизируемоеСостояние = СинхронизируемыеСостояния.Получить(ТипЗнч(Предмет));
			Если ПредыдущееСостояние <> Неопределено И ЗначениеЗаполнено(ПредыдущееСостояние) Тогда
				Состояние1 = ЗаказПрошелСинхронизируемоеСостояние(Предмет, СинхронизируемоеСостояние.СостояниеЗаказа,, ПредыдущееСостояние);
				Состояние2 = ЗаказПрошелСинхронизируемоеСостояние(Предмет, СинхронизируемоеСостояние.СостояниеЗаказа,, ТекущееСостояние);
				
				ПодчиненныйЗаказПерешелКонтрольноеСостояниеВниз = Состояние1 = Истина И Состояние2 = Ложь;
				
				Если Состояние1 И Состояние2 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ТолькоОповестить = ЗначенияЗаполнения.Свойство("ТолькоОповестить") И ЗначенияЗаполнения.ТолькоОповестить;
	
	ПодчиненныйЗаказИсточник = Неопределено;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаказыПокупателей = Документы.ЗаказПоставщику.ОбеспечиваемыеЗаказыПокупателя(Предмет);
		ПодчиненныйЗаказ = Предмет;
		ПодчиненныйЗаказИсточник = Предмет;
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ЗаказыПокупателей = Документы.ЗаказНаПроизводство.ОбеспечиваемыеЗаказыПокупателя(Предмет);
		ПодчиненныйЗаказ = Предмет;
		ПодчиненныйЗаказИсточник = Предмет;
	Иначе
		ЗаказыПокупателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
		ПодчиненныйЗаказ = Неопределено;
	КонецЕсли;
	
	Если ПодчиненныйЗаказ <> Неопределено Тогда
		ОжидаемыеТипы = Новый Массив;
		ОжидаемыеТипы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		ОжидаемыеТипы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("АссистентУправленияСинхронизироватьСтатусЗаказПокупателя", "ПодчиненныйЗаказ", ПодчиненныйЗаказ, ОжидаемыеТипы);
	КонецЕсли;
	
	ЗаказыПокупателейПодчиненныеЗаказы = Новый Соответствие;
	ЗаказыПокупателейКПереводу = Новый Массив;
	
	Если ЗначенияЗаполнения.Свойство("ВидЗаказаПокупателя") И ЗначениеЗаполнено(ЗначенияЗаполнения.ВидЗаказаПокупателя) Тогда
		ОтобратьЗаказыПоВиду(ЗаказыПокупателей, ЗначенияЗаполнения.ВидЗаказаПокупателя);
	КонецЕсли;
	
	Для каждого ЗаказПокупателя Из ЗаказыПокупателей Цикл
		
		ЗаказПокупателяПрошелСинхронизируемоеСостояние = Неопределено;
		
		Если НЕ ТолькоОповестить Тогда
			СинхронизируемоеСостояниеЗаказаПокупателя = Неопределено;
			СинхронизируемоеВариантЗавершенияЗаказаПокупателя = Неопределено;
			ЗначенияЗаполнения.Свойство("СостояниеЗаказаПокупателя", СинхронизируемоеСостояниеЗаказаПокупателя);
			ЗначенияЗаполнения.Свойство("ВариантЗавершенияЗаказаПокупателя", СинхронизируемоеВариантЗавершенияЗаказаПокупателя);
			
			ЗаказПокупателяПрошелСинхронизируемоеСостояние = ЗаказПрошелСинхронизируемоеСостояние(
				ЗаказПокупателя,
				СинхронизируемоеСостояниеЗаказаПокупателя,
				СинхронизируемоеВариантЗавершенияЗаказаПокупателя);
		КонецЕсли;
		
		ПодчиненныеЗаказы = Новый Массив;
		Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеЗаказы, Документы.ЗаказНаПроизводство.ЗаказыПодОбеспечение(ЗаказПокупателя));
		КонецЕсли;
		Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеЗаказы, Документы.ЗаказПоставщику.ЗаказыПодОбеспечение(ЗаказПокупателя));
		КонецЕсли;
		
		Если ПодчиненныеЗаказы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныеЗаказыВсего = ПодчиненныеЗаказы.Количество();
		ПодчиненныеЗаказыПрошлиСостояние = 0;
		
		ЗаказыНаПроизводствоПрошли = Новый Массив;
		ЗаказыПоставщикуПрошли = Новый Массив;
		
		Для каждого Ссылка Из ПодчиненныеЗаказы Цикл
			ДанныеСостояния = СинхронизируемыеСостояния.Получить(ТипЗнч(Ссылка));
			Если ЗаказПрошелСинхронизируемоеСостояние(Ссылка, ДанныеСостояния.СостояниеЗаказа, ДанныеСостояния.ВариантЗавершения) Тогда
				ПодчиненныеЗаказыПрошлиСостояние = ПодчиненныеЗаказыПрошлиСостояние + 1;
				
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					ЗаказыНаПроизводствоПрошли.Добавить(Ссылка);
				ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ЗаказыПоставщикуПрошли.Добавить(Ссылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние = ПодчиненныеЗаказыВсего = ПодчиненныеЗаказыПрошлиСостояние;
		ВсеПодчиненныеЗаказыНЕПрошлиСинхронизируемоеСостояние = ПодчиненныеЗаказыПрошлиСостояние = 0;
		НеВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние = ПодчиненныеЗаказыВсего <> ПодчиненныеЗаказыПрошлиСостояние И ПодчиненныеЗаказыПрошлиСостояние <> 0;
		
		Если ПодчиненныйЗаказ = Неопределено И ПодчиненныеЗаказы.Количество() = 1 Тогда
			ПодчиненныйЗаказ = ПодчиненныеЗаказы[0];
		КонецЕсли;
		
		Если НЕ ТолькоОповестить И ЗаказПокупателяПрошелСинхронизируемоеСостояние И ВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТолькоОповестить И НЕ ЗаказПокупателяПрошелСинхронизируемоеСостояние И ВсеПодчиненныеЗаказыНЕПрошлиСинхронизируемоеСостояние Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыПодчиненныхЗаказов = ТипыПодчиненныхЗаказов(ПодчиненныеЗаказы);
		Если ТипыПодчиненныхЗаказов.Количество() = 1 И ТипыПодчиненныхЗаказов[0] = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ТекстПредставлениеЗаказы = НСтр("ru='заказы на производство'");
			ТекстПредставлениеЗаказов = НСтр("ru='заказов на производство'");
		ИначеЕсли ТипыПодчиненныхЗаказов.Количество() = 1 И ТипыПодчиненныхЗаказов[0] = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстПредставлениеЗаказы = НСтр("ru='заказы поставщику'");
			ТекстПредставлениеЗаказов = НСтр("ru='заказов поставщику'");
		Иначе
			ТекстПредставлениеЗаказы = НСтр("ru='заказы поставщику и заказы на производство'");
			ТекстПредставлениеЗаказов = НСтр("ru='заказов поставщику и заказов на производство'");
		КонецЕсли;
		
		НужноОповестить = Ложь;
		Если ТолькоОповестить Тогда
			НужноОповестить = НеВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние ИЛИ ВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние;
		Иначе
			НужноОповестить = ЗаказПокупателяПрошелСинхронизируемоеСостояние = Ложь И НеВсеПодчиненныеЗаказыПрошлиСинхронизируемоеСостояние;
		КонецЕсли;
		
		Если НужноОповестить Тогда
			
			ТекстСобытия = "";
			
			Если ЗаказыПоставщикуПрошли.Количество() <> 0 Тогда
				СостояниеПодчиненногоЗаказаПоставщику = СинхронизируемыеСостояния.Получить(Тип("ДокументСсылка.ЗаказПоставщику")).СостояниеЗаказа;
				Если ЗаказыПоставщикуПрошли.Количество() = 1 Тогда
					ТекстСобытия = СтрШаблон(НСтр("ru='%1 прошел состояние %2'"), ПолучитьНавигационнуюСсылку(ЗаказыПоставщикуПрошли[0]), ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаПоставщику));
				ИначеЕсли ЗаказыПоставщикуПрошли.Количество() > 1 Тогда
					ТекстСобытия = СтрШаблон(НСтр("ru='%1 Заказов поставщику прошли состояние %2'"), ЗаказыПоставщикуПрошли.Количество(), ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаПоставщику));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстСобытия) Тогда
				ТекстСобытия = ТекстСобытия + Символы.ПС;
			КонецЕсли;
			
			Если ЗаказыНаПроизводствоПрошли.Количество() <> 0 Тогда
				СостояниеПодчиненногоЗаказаНаПроизводство = СинхронизируемыеСостояния.Получить(Тип("ДокументСсылка.ЗаказНаПроизводство")).СостояниеЗаказа;
				Если ЗаказыНаПроизводствоПрошли.Количество() = 1 Тогда
					ТекстСобытия = ТекстСобытия + СтрШаблон(НСтр("ru='%1 прошел состояние %2'"), ПолучитьНавигационнуюСсылку(ЗаказыНаПроизводствоПрошли[0]), ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаНаПроизводство));
				ИначеЕсли ЗаказыНаПроизводствоПрошли.Количество() > 1 Тогда
					ТекстСобытия = ТекстСобытия + СтрШаблон(НСтр("ru='%1 Заказов поставщику прошли состояние %2'"), ЗаказыНаПроизводствоПрошли.Количество(), ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаНаПроизводство));
				КонецЕсли;
			КонецЕсли;
			
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПокупателя, ТекстСобытия);
			Продолжить;
		КонецЕсли;
		
		Если ТолькоОповестить И ПодчиненныйЗаказПерешелКонтрольноеСостояниеВниз = Истина Тогда
			ТекстСобытия = СтрШаблон(НСтр("ru='%1 вернулся в состояние %2'"),
				ПолучитьНавигационнуюСсылку(ПодчиненныйЗаказ),
				ПолучитьНавигационнуюСсылку(СостояниеЗаказа(ПодчиненныйЗаказ)));
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПокупателя, ТекстСобытия);
			Продолжить;
		КонецЕсли;
		
		Если ТолькоОповестить И ВсеПодчиненныеЗаказыНЕПрошлиСинхронизируемоеСостояние Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаказПокупателяПрошелСинхронизируемоеСостояние = Истина И ВсеПодчиненныеЗаказыНЕПрошлиСинхронизируемоеСостояние Тогда
			ТекстСобытие = СтрШаблон(НСтр("ru='Заказ покупателя в состоянии %1'"), ПолучитьНавигационнуюСсылку(СостояниеЗаказа(ЗаказПокупателя)));
			ТекстПричина = "";
			Если ПодчиненныйЗаказ <> Неопределено Тогда
				ТекстПричина = СтрШаблон(НСтр("ru=', а %1 в состоянии %2'"),
					ПолучитьНавигационнуюСсылку(ПодчиненныйЗаказ),
					ПолучитьНавигационнуюСсылку(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодчиненныйЗаказ, "СостояниеЗаказа")));
			Иначе
				ТекстПричина = СтрШаблон(НСтр("ru=', а %1 нет'"), ТекстПредставлениеЗаказы);
			КонецЕсли;
			
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПокупателя, ТекстСобытие + ТекстПричина);
			Продолжить;
		КонецЕсли;
		
		ЗаказыПокупателейКПереводу.Добавить(ЗаказПокупателя);
		ЗаказыПокупателейПодчиненныеЗаказы.Вставить(ЗаказПокупателя, ПодчиненныеЗаказы);
		
	КонецЦикла;
	
	Для каждого ЗаказПокупателя Из ЗаказыПокупателейКПереводу Цикл
		
		ДанныеСостояния = Новый Структура;
		ДанныеСостояния.Вставить("СостояниеЗаказа", СинхронизируемоеСостояниеЗаказаПокупателя);
		ДанныеСостояния.Вставить("ВариантЗавершения", СинхронизируемоеВариантЗавершенияЗаказаПокупателя);
		
		Документы.ЗаказПокупателя.АссистентУправленияИзменитьСостояние(ЗаказПокупателя, ДанныеСостояния, ДополнительныеПараметры, Результат);
		
		ПодчиненныеЗаказы = ЗаказыПокупателейПодчиненныеЗаказы.Получить(ЗаказПокупателя);
		ТипыПодчиненныхЗаказов = ТипыПодчиненныхЗаказов(ПодчиненныеЗаказы);
		
		ТекстПричины = "";
		ТекстДействия = "";
		
		Если ПодчиненныеЗаказы.Количество() = 1 Тогда
			
			СостояниеПодчиненногоЗаказа = СинхронизируемыеСостояния.Получить(ТипЗнч(ПодчиненныеЗаказы[0])).СостояниеЗаказа;
			
			ТекстПричины = СтрШаблон(
				НСтр("ru='%1 в состоянии %2'"),
				ПолучитьНавигационнуюСсылку(ПодчиненныйЗаказ),
				ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказа));
		ИначеЕсли ТипыПодчиненныхЗаказов.Количество() = 1 Тогда
			
			СостояниеПодчиненногоЗаказа = СинхронизируемыеСостояния.Получить(ТипЗнч(ПодчиненныеЗаказы[0])).СостояниеЗаказа;
			
			Если ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				ПредставлениеЗаказов = НСтр("ru='Заказы на производство'")
			ИначеЕсли ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ПредставлениеЗаказов = НСтр("ru='Заказы поставщикам'")
			КонецЕсли;
			ТекстПричины = СтрШаблон(
				НСтр("ru='%1 прошли состояние %2'"),
				ПредставлениеЗаказов,
				ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказа));
		Иначе
			
			СостояниеПодчиненногоЗаказаНаПроизводство = СинхронизируемыеСостояния.Получить(Тип("ДокументСсылка.ЗаказНаПроизводство")).СостояниеЗаказа;
			СостояниеПодчиненногоЗаказаПоставщику = СинхронизируемыеСостояния.Получить(Тип("ДокументСсылка.ЗаказПоставщику")).СостояниеЗаказа;
			
			ТекстПричины = СтрШаблон(
				НСтр("ru='Заказы поставщику прошли состояние %1, а Заказы на производство — состояние %2'"),
				ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаПоставщику),
				ПолучитьНавигационнуюСсылку(СостояниеПодчиненногоЗаказаНаПроизводство));
		КонецЕсли;
		
		ТекстДействия = СтрШаблон(НСтр("ru=', перевела заказ покупателя в состояние %1'"), ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
		
		АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ЗаказПокупателя, ТекстПричины + ТекстДействия);
	КонецЦикла;
	
КонецПроцедуры

Процедура АссистентУправленияСинхронизироватьСтатусПодчиненныхЗаказовЗаказаПокупателя(Предмет, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	ПодчиненныеЗаказы = Новый Массив;
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ПодчиненныеЗаказы.Добавить(Предмет);
		ЗаказПокупателя = Неопределено;
	Иначе
		ЗаказПокупателя = Предмет;
	КонецЕсли;
	
	СинхронизируемыеСостояния = Новый Соответствие;
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство") И ЗначениеЗаполнено(ЗначенияЗаполнения.СостояниеЗаказаНаПроизводство) Тогда
		СинхронизируемоеСостояние = Новый Структура("СостояниеЗаказа,ВариантЗавершения", Неопределено, Неопределено);
		ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство", СинхронизируемоеСостояние.СостояниеЗаказа);
		ЗначенияЗаполнения.Свойство("ВариантЗавершенияЗаказаНаПроизводство", СинхронизируемоеСостояние.ВариантЗавершения);
		
		СинхронизируемыеСостояния.Вставить(Тип("ДокументСсылка.ЗаказНаПроизводство"), СинхронизируемоеСостояние);
	КонецЕсли;
	Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику") И ЗначениеЗаполнено(ЗначенияЗаполнения.СостояниеЗаказаПоставщику) Тогда
		СинхронизируемоеСостояние = Новый Структура("СостояниеЗаказа,ВариантЗавершения", Неопределено, Неопределено);
		ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику", СинхронизируемоеСостояние.СостояниеЗаказа);
		ЗначенияЗаполнения.Свойство("ВариантЗавершенияЗаказаПоставщику", СинхронизируемоеСостояние.ВариантЗавершения);
		
		СинхронизируемыеСостояния.Вставить(Тип("ДокументСсылка.ЗаказПоставщику"), СинхронизируемоеСостояние);
	КонецЕсли;
	
	Если СинхронизируемыеСостояния.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если СинхронизируемыеСостояния.Получить(ТипЗнч(Предмет)) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТолькоОповестить = ЗначенияЗаполнения.Свойство("ТолькоОповестить") И ЗначенияЗаполнения.ТолькоОповестить;
	
	ЗаказыПокупателейПодчиненныеЗаказы = Новый ТаблицаЗначений;
	ЗаказыПокупателейПодчиненныеЗаказы.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ЗаказыПокупателейПодчиненныеЗаказы.Колонки.Добавить("ПодчиненныйЗаказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику,ДокументСсылка.ЗаказНаПроизводство"));
	
	СинхронизируемоеСостояниеЗаказаПокупателя = ЗначенияЗаполнения.СостояниеЗаказаПокупателя;
	СинхронизируемоеВариантЗавершенияЗаказаПокупателя = ЗначенияЗаполнения.ВариантЗавершенияЗаказаПокупателя;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ТекущееСостояние = СостояниеЗаказа(Предмет);
		Если НЕ ЭтоСостояниеЗавершен(ТекущееСостояние) Тогда
			ПредыдущееСостояние = ПолучитьСостояниеЗаказаПередЗавершением(Предмет, ТекущееСостояние);
			Если ПредыдущееСостояние <> Неопределено
				И ЗаказПрошелСинхронизируемоеСостояние(Предмет, СинхронизируемоеСостояниеЗаказаПокупателя,, ПредыдущееСостояние)
				И ЗаказПрошелСинхронизируемоеСостояние(Предмет, СинхронизируемоеСостояниеЗаказаПокупателя,, ТекущееСостояние) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаказПокупателя <> Неопределено Тогда
		Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаНаПроизводство") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеЗаказы, Документы.ЗаказНаПроизводство.ЗаказыПодОбеспечение(ЗаказПокупателя));
		КонецЕсли;
		Если ЗначенияЗаполнения.Свойство("СостояниеЗаказаПоставщику") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеЗаказы, Документы.ЗаказПоставщику.ЗаказыПодОбеспечение(ЗаказПокупателя));
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ПодчиненныйЗаказ Из ПодчиненныеЗаказы Цикл
		Если ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ОбеспечиваемыеЗаказы = Документы.ЗаказПоставщику.ОбеспечиваемыеЗаказыПокупателя(ПодчиненныйЗаказ);
		ИначеЕсли ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ОбеспечиваемыеЗаказы = Документы.ЗаказНаПроизводство.ОбеспечиваемыеЗаказыПокупателя(ПодчиненныйЗаказ);
		КонецЕсли;
		
		Если ЗначенияЗаполнения.Свойство("ВидЗаказаПокупателя") И ЗначениеЗаполнено(ЗначенияЗаполнения.ВидЗаказаПокупателя) Тогда
			ОтобратьЗаказыПоВиду(ОбеспечиваемыеЗаказы, ЗначенияЗаполнения.ВидЗаказаПокупателя);
		КонецЕсли;
		
		Для каждого Строка Из ОбеспечиваемыеЗаказы Цикл
			НоваяСтрока = ЗаказыПокупателейПодчиненныеЗаказы.Добавить();
			НоваяСтрока.ЗаказПокупателя = Строка;
			НоваяСтрока.ПодчиненныйЗаказ = ПодчиненныйЗаказ;
		КонецЦикла;
	КонецЦикла;
	
	ЗаказыКПереводу = Новый Массив;
	ПодчиненныеЗаказы = ЗаказыПокупателейПодчиненныеЗаказы.ВыгрузитьКолонку("ПодчиненныйЗаказ");
	ПодчиненныеЗаказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодчиненныеЗаказы);
	
	Для каждого ПодчиненныйЗаказ Из ПодчиненныеЗаказы Цикл
		
		ТекущееСостояниеПодчиненногоЗаказа = СостояниеЗаказа(ПодчиненныйЗаказ);
		СинхронизируемоеСостояниеПодчиненногоЗаказа = СинхронизируемыеСостояния.Получить(ТипЗнч(ПодчиненныйЗаказ)).СостояниеЗаказа;
		СинхронизируемоеВариантЗавершенияПодчиненногоЗаказа = СинхронизируемыеСостояния.Получить(ТипЗнч(ПодчиненныйЗаказ)).ВариантЗавершения;
		
		ПодчиненныйЗаказПрошелСинхронизированноеСостояние = ЗаказПрошелСинхронизируемоеСостояние(ПодчиненныйЗаказ, СинхронизируемоеСостояниеПодчиненногоЗаказа, СинхронизируемоеВариантЗавершенияПодчиненногоЗаказа);
		
		ОбеспечиваемыеЗаказы = ЗаказыПокупателейПодчиненныеЗаказы.НайтиСтроки(Новый Структура("ПодчиненныйЗаказ", ПодчиненныйЗаказ));
		ЗаказыПокупателяВсего = ОбеспечиваемыеЗаказы.Количество();
		ЗаказыПокупателяПрошлиСинхронизируемоеСостояние = 0;
		
		Для каждого Строка Из ОбеспечиваемыеЗаказы Цикл
			Если ЗаказПрошелСинхронизируемоеСостояние(Строка.ЗаказПокупателя, СинхронизируемоеСостояниеЗаказаПокупателя, СинхронизируемоеВариантЗавершенияЗаказаПокупателя) Тогда
				ЗаказыПокупателяПрошлиСинхронизируемоеСостояние = ЗаказыПокупателяПрошлиСинхронизируемоеСостояние + 1;
			КонецЕсли;
		КонецЦикла;
		
		ВсеЗаказыПокупателяПрошлиСинхронизируемоеСостояние = ЗаказыПокупателяВсего = ЗаказыПокупателяПрошлиСинхронизируемоеСостояние;
		ВсеЗаказыПокупателяНЕПрошлиСинхронизируемоеСостояние = ЗаказыПокупателяПрошлиСинхронизируемоеСостояние = 0;
		НеВсеЗаказыПокупателяПрошлиСинхронизируемоеСостояние = ЗаказыПокупателяВсего <> ЗаказыПокупателяПрошлиСинхронизируемоеСостояние И ЗаказыПокупателяПрошлиСинхронизируемоеСостояние <> 0;
		
		Если НЕ ТолькоОповестить И ПодчиненныйЗаказПрошелСинхронизированноеСостояние И ВсеЗаказыПокупателяПрошлиСинхронизируемоеСостояние Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТолькоОповестить И НЕ ПодчиненныйЗаказПрошелСинхронизированноеСостояние И ВсеЗаказыПокупателяНЕПрошлиСинхронизируемоеСостояние Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТолькоОповестить ИЛИ НЕ ПодчиненныйЗаказПрошелСинхронизированноеСостояние) И НеВсеЗаказыПокупателяПрошлиСинхронизируемоеСостояние Тогда
			ТекстСобытия = СтрШаблон(НСтр("ru='%1 из %2 заказов покупателя прошли состояние %3'"),
				ЗаказыПокупателяПрошлиСинхронизируемоеСостояние,
				ЗаказыПокупателяВсего,
				ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
			
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ПодчиненныйЗаказ, ТекстСобытия);
			Продолжить;
		КонецЕсли;
		
		Если ТолькоОповестить ИЛИ ПодчиненныйЗаказПрошелСинхронизированноеСостояние Тогда
			
			ТекстСобытия = СтрШаблон(НСтр("ru='%1 в состоянии %2'"),
				ПредставлениеЗаказа(ПодчиненныйЗаказ),
				ПредставлениеСостоянияДляОбсуждений(ПодчиненныйЗаказ, ТекущееСостояниеПодчиненногоЗаказа));
			ТекстПричины = "";
			
			Если НеВсеЗаказыПокупателяПрошлиСинхронизируемоеСостояние Тогда
				ТекстПричины = СтрШаблон(НСтр("ru=', хотя не все обеспечиваемые заказы покупателя прошли состояние %1'"),
					ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
			ИначеЕсли ВсеЗаказыПокупателяНЕПрошлиСинхронизируемоеСостояние Тогда
				ТекстПричины = СтрШаблон(НСтр("ru=', хотя обеспечиваемые заказы покупателя не прошли состояние %1'"),
					ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
			КонецЕсли;
			
			АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ПодчиненныйЗаказ, ТекстСобытия + ТекстПричины);
			Продолжить;
			
		КонецЕсли;
		
		ЗаказыКПереводу.Добавить(ПодчиненныйЗаказ);
		
	КонецЦикла;
	
	Для каждого ПодчиненныйЗаказ Из ЗаказыКПереводу Цикл
		
		Если НЕ ТолькоОповестить Тогда
			ДанныеСостояния = СинхронизируемыеСостояния.Получить(ТипЗнч(ПодчиненныйЗаказ));
			Если ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Документы.ЗаказПоставщику.АссистентУправленияИзменитьСостояние(ПодчиненныйЗаказ, ДанныеСостояния, ДополнительныеПараметры, Результат);
			ИначеЕсли ТипЗнч(ПодчиненныйЗаказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				Документы.ЗаказНаПроизводство.АссистентУправленияИзменитьСостояние(ПодчиненныйЗаказ, ДанныеСостояния, ДополнительныеПараметры, Результат);
			КонецЕсли;
		КонецЕсли;
		
		ОбеспечиваемыеЗаказы = ЗаказыПокупателейПодчиненныеЗаказы.НайтиСтроки(Новый Структура("ПодчиненныйЗаказ", ПодчиненныйЗаказ));
		
		ТекстПричины = "";
		ТекстДействия = "";
		
		Если ОбеспечиваемыеЗаказы.Количество() = 1 Тогда
			Заказ = ОбеспечиваемыеЗаказы[0].ЗаказПокупателя;
			ТекстПричины = СтрШаблон(
				НСтр("ru='%1 в состоянии %2'"),
				ПолучитьНавигационнуюСсылку(Заказ),
				ПредставлениеСостоянияДляОбсуждений(Заказ, СостояниеЗаказа(Заказ)));
		Иначе
			ТекстПричины = СтрШаблон(НСтр("ru='Обеспечиваемые заказы прошли состояние %1'"),
				ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
		КонецЕсли;
		
		Если НЕ ТолькоОповестить Тогда
			ТекстДействия = СтрШаблон(НСтр("ru=', перевела %1 в состояние %2'"),
				ПредставлениеЗаказа(ПодчиненныйЗаказ),
				ПолучитьНавигационнуюСсылку(СинхронизируемоеСостояниеЗаказаПокупателя));
		КонецЕсли;
		
		АссистентУправления.ДобавитьСообщениеВРезультат(Результат, ПодчиненныйЗаказ, ТекстПричины + ТекстДействия);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаказПрошелСинхронизируемоеСостояние(Заказ, СинхронизируемоеСостояние, СинхронизируемыйВариантЗавершения = Неопределено, ТекущееСостояние = Неопределено)
	
	ДанныеЗаказа = Новый Структура("СостояниеЗаказа,ВидЗаказа,ВариантЗавершения", Неопределено, Неопределено, Неопределено);
	
	Если ТекущееСостояние <> Неопределено Тогда
		ДанныеЗаказа.СостояниеЗаказа = ТекущееСостояние;
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ДанныеЗаказа.ВидЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ВидЗаказа");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВидЗаказа,ВариантЗавершения"));
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "СостояниеЗаказа,ВариантЗавершения"));
	КонецЕсли;
	
	ЗаказПрошелСинхронизируемоеСостояние = ?(СравнитьСостояния(СинхронизируемоеСостояние, ДанныеЗаказа.СостояниеЗаказа, ДанныеЗаказа.ВидЗаказа) <= 0, Истина, Ложь);
	
	Если ЗаказПрошелСинхронизируемоеСостояние
		И СинхронизируемыйВариантЗавершения <> Неопределено
		И ЭтоСостояниеЗавершен(СинхронизируемоеСостояние) Тогда
		
		ЗаказПрошелСинхронизируемоеСостояние = ДанныеЗаказа.ВариантЗавершения = СинхронизируемыйВариантЗавершения;
		
	КонецЕсли;
	
	Возврат ЗаказПрошелСинхронизируемоеСостояние;
	
КонецФункции

Функция ТипыПодчиненныхЗаказов(ПодчиненныеЗаказы)
	
	ТипыПодчиненныхЗаказов = Новый Массив;
	
	Для каждого Ссылка Из ПодчиненныеЗаказы Цикл
		ТипСсылки = ТипЗнч(Ссылка);
		Если ТипыПодчиненныхЗаказов.Найти(ТипСсылки) = Неопределено Тогда
			ТипыПодчиненныхЗаказов.Добавить(ТипСсылки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипыПодчиненныхЗаказов;
	
КонецФункции

Функция ПредставлениеЗаказа(Заказ)
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат НСтр("ru='Заказ на производство'");
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат НСтр("ru='Заказ поставщику'");
	КонецЕсли;
	
	Возврат НСтр("ru='Заказ'")
	
КонецФункции

Процедура ОтобратьЗаказыПоВиду(ЗаказыПокупателей, ВидЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&ЗаказыПокупателей)
	|	И ЗаказПокупателя.ВидЗаказа = &ВидЗаказа";
	
	Запрос.УстановитьПараметр("ЗаказыПокупателей", ЗаказыПокупателей);
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	
	ЗаказыПокупателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецПроцедуры

Функция ПредставлениеСостоянияДляОбсуждений(Заказ, СостояниеЗаказа)
	
	Если НЕ ЭтоСостояниеЗавершен(СостояниеЗаказа) И НЕ ЗаказОтменен(Заказ) Тогда
		Возврат ПолучитьНавигационнуюСсылку(СостояниеЗаказа);
	КонецЕсли;
	
	Возврат НСтр("ru='Отменен'")
	
КонецФункции

#КонецОбласти

#КонецОбласти
