////////////////////////////////////////////////////////////////////////////////
// "Денежные средства" 
// 
// Общие серверные процедуры и функции для вызова с клиента из документов РасходСоСчета, РасходИзКассы,
// ПоступлениеНаСчет, ПоступлениеВКассу
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПоступлениеДС

Функция ПолучитьНовоеЗначениеСтатьиДДСПоступления(ВидОперацииПрочееПоступление, СтатьяДДС, СтатьяДДСВходящий, СтатьяДДСИсходящий) Экспорт
	
	НоваяСтатьяДДС = СтатьяДДС;
	
	Если (СтатьяДДС = ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
		ИЛИ СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ СтатьяДДС = ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
		ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС)) Тогда
		
		Если ВидОперацииПрочееПоступление = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Возврат ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
		ИначеЕсли ВидОперацииПрочееПоступление = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
			Возврат ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
		ИначеЕсли ВидОперацииПрочееПоступление = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			Возврат ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтатьяДДС;
	
КонецФункции

#КонецОбласти

#Область РасходДС

Функция ПолучитьНовоеЗначениеСтатьиДДССписания(ВидОперацииПрочееСписание, СтатьяДДС, СтатьяДДСВходящий, СтатьяДДСИсходящий) Экспорт
	
	НоваяСтатьяДДС = СтатьяДДС;
	
	Если (СтатьяДДС = ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
		ИЛИ СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ СтатьяДДС = ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
		ИЛИ НЕ ЗначениеЗаполнено(СтатьяДДС)) Тогда
		
		Если ВидОперацииПрочееСписание = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Возврат ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
		ИначеЕсли ВидОперацииПрочееСписание = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтатьяДДС;
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперацииПоступленияИСписания

Функция ПолучитьСписокХозОперацийПоступленияДС() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ОтПокупателя);
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Прочее, НСтр("ru = 'Прочее поступление'")); // Прочее.
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ОтПоставщика, НСтр("ru = 'От поставщика (возврат)'"));
	
	Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.РасчетыПоКредитам, НСтр("ru = 'Расчеты по кредитам'")); // Прочие расчеты.
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ВозвратЗаймаСотрудником); // Прочие расчеты.
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ПокупкаВалюты);
	КонецЕсли;
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ПрочиеРасчеты, НСтр("ru = 'Прочие расчеты'")); // Прочие расчеты.
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ОтПодотчетника);
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ПоступлениеОплатыПоКартам); // Эквайринг
	КонецЕсли;
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Налоги);
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.РозничнаяВыручка);
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.РозничнаяВыручкаСуммовойУчет);
	КонецЕсли;
	
	Если ДвижениеДенежныхСредствСервер.ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ЛичныеСредстваПредпринимателя);
	КонецЕсли; 
	
	Возврат СписокОпераций;
	
КонецФункции

Функция ПолучитьСписокХОзОперацийРасходДС() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Поставщику, НСтр("ru = 'Поставщику'"));
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.НаРасходы, НСтр("ru = 'На расходы'"));
	
	// Зарплата по ведомости
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Зарплата, НСтр("ru = 'Зарплата по ведомости'"));
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ЗарплатаСотруднику, НСтр("ru = 'Зарплата сотруднику'"));
	КонецЕсли;
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ПрочиеРасчеты, НСтр("ru = 'Прочие расчеты'")); // Прочие расчеты.
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Покупателю, НСтр("ru = 'Покупателю (возврат)'"));
	
	Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.РасчетыПоКредитам, НСтр("ru = 'Расчеты по кредитам'")); // Прочие расчеты.
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ВыдачаЗаймаСотруднику); // Прочие расчеты.
	КонецЕсли;
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Прочее, НСтр("ru = 'Прочий расход'")); // Прочее.
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Подотчетнику); // Подотчетнику.
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ВозвратОплатыНаПлатежныеКарты, НСтр("ru = 'Отчет эквайрера'")); // Эквайринг
	КонецЕсли;
	
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.Налоги, НСтр("ru = 'Налоги'")); // Налоги.
	СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.КомиссияБанка, НСтр("ru='Комиссия банка'")); // Комиссия.
	
	Если Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ПеремещениеВКассуККМ);
	КонецЕсли;
	
	Если ДвижениеДенежныхСредствСервер.ОрганизацияИндивидуальныйПредпринимательСуществует() Тогда
		СписокОпераций.Добавить(Справочники.ХозяйственныеОперации.ЛичныеСредстваПредпринимателя);
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(Договор, ДокументПланирования = Неопределено, СтатьяДДС = Неопределено) Экспорт
	
	// Статья в заявке на расход (РасходДСПЛан) приоритетнее.
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат СтатьяДДС;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		Возврат Договор.СтатьяДДСПоУмолчанию;
	Иначе
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении()

Функция ПолучитьОстатокНаСчете(БанковскийСчет, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(
		|			,
		|			Организация = &Организация И
		|				БанковскийСчетКасса = &БанковскийСчет) КАК ДенежныеСредстваОстатки";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СуммаВалОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗаголовокНадписиОстатковДС(СчетКасса, Организация, ОстатокДенежныхСредств = 0, Знач Валюта = Неопределено) Экспорт
	
	КрупныйШрифт = Новый Шрифт(,11);
	МелкийШрифт  = Новый Шрифт(,8);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетКасса", СчетКасса);
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	Запрос.УстановитьПараметр("ПоВсемВалютам", Валюта = Неопределено);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстатки.Валюта КАК Валюта,
	|	ДенежныеСредстваОстатки.СуммаВалОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			,
	|			Организация = &Организация
	|				И БанковскийСчетКасса = &СчетКасса
	|				И (&ПоВсемВалютам
	|					ИЛИ Валюта = &Валюта)) КАК ДенежныеСредстваОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сумма = Выборка.Сумма;
		Валюта = Выборка.Валюта;
	Иначе
		Сумма = 0;
		Если ТипЗнч(СчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
			Валюта = СчетКасса.ВалютаПоУмолчанию;
		Иначе
			Валюта = СчетКасса.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	ОстатокДенежныхСредств = Сумма;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Остаток'") + " ", КрупныйШрифт));
	
	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
	ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
	КомпонентыЧисла = Новый Массив;
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт));
	КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , "Остаток"));
	
	КомпонентыФС.Добавить(" " + Валюта.СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ТекстВторостепеннойНадписи);
	
КонецФункции

&НаСервере
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК) Экспорт
	
	Возврат Справочники.ВидыНалогов.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

// Заполняет переданный список доступными видами операций по типу документа
//
// Параметры:
//   ВидДокумента - Строка - Строковое представление вида документа
//   СписокВыбора - СписокЗначений - Список, который используется для хранения видов операций
//
Процедура ЗаполнитьСписокВыбораВидовОпераций(ВидДокумента, СписокВыбора) Экспорт
	
	СтруктурыОпераций = ДвижениеДенежныхСредствСервер.ПолучитьСтруктурыОперацийДенежныеСредства(ВидДокумента);
	
	СписокВыбора.Очистить();
	
	Для каждого Операция Из СтруктурыОпераций Цикл
		СписокВыбора.Добавить(Операция.ЗначениеПеречисления, Операция.Представление);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
