
#Область СлужебныеПроцедурыИФункции

Процедура СКДОтборНоменклатурыВТабличнуюЧасть(КоллекцияЭлементов, ТабличнаяЧасть, ГруппаНомер = 0) Экспорт
	
	ИмяГруппыРодителя = "";
	Если ГруппаНомер <> 0 Тогда
		
		ИмяГруппыРодителя = НСтр("ru ='Группа_'") + ГруппаНомер;
		
	КонецЕсли;
	
	МассивМножественныхУсловий = Новый Массив;
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаНомер = ГруппаНомер + 1;
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.ИмяГруппы		= НСтр("ru ='Группа_'") + ГруппаНомер;
			НоваяСтрока.ВидСравнения	= ЭлементОтбора.ТипГруппы;
			НоваяСтрока.Родитель		= ИмяГруппыРодителя;
			НоваяСтрока.Использование	= ЭлементОтбора.Использование;
			
			СКДОтборНоменклатурыВТабличнуюЧасть(ЭлементОтбора.Элементы, ТабличнаяЧасть, ГруппаНомер)
			
		Иначе //ИначеЕсли ТабличнаяЧасть.НайтиСтроки(Новый Структура("Имя", Строка(ЭлементОтбора.ЛевоеЗначение))).Количество() = 0 Тогда
		
			Если МассивМножественныхУсловий.Найти(ЭлементОтбора.ВидСравнения) = Неопределено Тогда
				
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Имя				= ЭлементОтбора.ЛевоеЗначение;
				НоваяСтрока.Представление	= ЭлементОтбора.ЛевоеЗначение;
				НоваяСтрока.ВидСравнения	= ЭлементОтбора.ВидСравнения;
				НоваяСтрока.Значение		= ЭлементОтбора.ПравоеЗначение;
				НоваяСтрока.Родитель		= ИмяГруппыРодителя;
				НоваяСтрока.Использование	= ЭлементОтбора.Использование;
				
			Иначе
				
				Порядок = 0;
				Для Каждого ЗначениеСписка Из ЭлементОтбора.ПравоеЗначение Цикл
					
					НоваяСтрока = ТабличнаяЧасть.Добавить();
					НоваяСтрока.Имя				= СокрЛП(ЭлементОтбора.ЛевоеЗначение);
					НоваяСтрока.Представление	= СокрЛП(ЭлементОтбора.ЛевоеЗначение);
					НоваяСтрока.ВидСравнения	= ЭлементОтбора.ВидСравнения;
					НоваяСтрока.Значение		= ЗначениеСписка.Значение;
					НоваяСтрока.Порядок			= Порядок;
					НоваяСтрока.Родитель		= ИмяГруппыРодителя;
					НоваяСтрока.Использование	= ЭлементОтбора.Использование;
					
					Порядок = Порядок + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СКДОтборНоменклатурыИзТабличнойЧасти(НастройкиОтбораНоменклатуры, ОтборНоменклатуры) Экспорт
	
	ГруппыЭлементовОтбора = Новый Соответствие;
	
	ВидыСравнений = Новый Соответствие;
	ВидыСравнений.Вставить("Больше", 			ВидСравненияКомпоновкиДанных.Больше);
	ВидыСравнений.Вставить("Больше или равно",	ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ВидыСравнений.Вставить("В группе",			ВидСравненияКомпоновкиДанных.ВИерархии);
	ВидыСравнений.Вставить("В списке",			ВидСравненияКомпоновкиДанных.ВСписке);
	ВидыСравнений.Вставить("В группе из списка",ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	ВидыСравнений.Вставить("Заполнено",			ВидСравненияКомпоновкиДанных.Заполнено);
	ВидыСравнений.Вставить("Меньше",			ВидСравненияКомпоновкиДанных.Меньше);
	ВидыСравнений.Вставить("Меньше или равно",	ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	ВидыСравнений.Вставить("Начинается с",		ВидСравненияКомпоновкиДанных.НачинаетсяС);
	ВидыСравнений.Вставить("Не в группе",		ВидСравненияКомпоновкиДанных.НеВИерархии);
	ВидыСравнений.Вставить("Не в списке",		ВидСравненияКомпоновкиДанных.НеВСписке);
	ВидыСравнений.Вставить("Не в группе из списка",ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	ВидыСравнений.Вставить("Не заполнено",		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ВидыСравнений.Вставить("Не начинается с",	ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
	ВидыСравнений.Вставить("Не подобно",		ВидСравненияКомпоновкиДанных.НеПодобно);
	ВидыСравнений.Вставить("Не равно",			ВидСравненияКомпоновкиДанных.НеРавно);
	ВидыСравнений.Вставить("Не содержит",		ВидСравненияКомпоновкиДанных.НеСодержит);
	ВидыСравнений.Вставить("Подобно",			ВидСравненияКомпоновкиДанных.Подобно);
	ВидыСравнений.Вставить("Равно",				ВидСравненияКомпоновкиДанных.Равно);
	ВидыСравнений.Вставить("Содержит",			ВидСравненияКомпоновкиДанных.Содержит);
	
	МассивМножественныхУсловий = Новый Массив;
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	МассивМножественныхУсловий.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	КопияТаблицыФормы = ОтборНоменклатуры.Выгрузить(, "Имя, ИмяГруппы, Представление, ВидСравнения");
	КопияТаблицыФормы.Свернуть("Имя, ИмяГруппы, Представление, ВидСравнения");
	
	СтруктураОтбора = Новый Структура("Имя, ИмяГруппы, Представление, ВидСравнения");
	Для каждого СтрокаОписанияОтбора Из КопияТаблицыФормы Цикл
		
		Если НЕ ПустаяСтрока(СтрокаОписанияОтбора.ИмяГруппы) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОписанияОтбора);
		
		НайденныеСтроки = ОтборНоменклатуры.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() < 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ГруппаЭлементовОтбора = ГруппаЭлементовОтбораПоСтрокеТаблицы(НастройкиОтбораНоменклатуры, ГруппыЭлементовОтбора, ОтборНоменклатуры, НайденныеСтроки[0].Родитель);
		Если ГруппаЭлементовОтбора = Неопределено Тогда
			
			КоллекцияЭлементовОтборов = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы;
			
		Иначе
			
			КоллекцияЭлементовОтборов = ГруппаЭлементовОтбора.Элементы;
			
		КонецЕсли;
		
		СохраненныйВидСравнения = ВидыСравнений[СтруктураОтбора.ВидСравнения];
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			ЭлементОтбора = КоллекцияЭлементовОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование	= НайденныеСтроки[0].Использование;
			ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(СтруктураОтбора.Имя);
			ЭлементОтбора.ПравоеЗначение= НайденныеСтроки[0].Значение;
			ЭлементОтбора.ВидСравнения	= ?(СохраненныйВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, СохраненныйВидСравнения);
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			Использование = Истина;
			ПравоеЗначение = Новый СписокЗначений;
			Для каждого СтрокаСоЗначениемОтбора Из НайденныеСтроки Цикл
				
				Если МассивМножественныхУсловий.Найти(ВидыСравнений[СтрокаСоЗначениемОтбора.ВидСравнения]) = Неопределено Тогда
					
					ЭлементОтбора = КоллекцияЭлементовОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование	= СтрокаСоЗначениемОтбора.Использование;
					ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(СтруктураОтбора.Имя);
					ЭлементОтбора.ПравоеЗначение= СтрокаСоЗначениемОтбора.Значение;
					ЭлементОтбора.ВидСравнения	= ?(СохраненныйВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, СохраненныйВидСравнения);
					
				Иначе
					
					Использование = СтрокаСоЗначениемОтбора.Использование;
					ПравоеЗначение.Добавить(СтрокаСоЗначениемОтбора.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПравоеЗначение.Количество() > 0 Тогда
				
				ЭлементОтбора = КоллекцияЭлементовОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование	= Использование;
				ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(СтруктураОтбора.Имя);
				ЭлементОтбора.ПравоеЗначение= ПравоеЗначение;
				ЭлементОтбора.ВидСравнения	= ?(СохраненныйВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, СохраненныйВидСравнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиПризнакаНедействителен(Ссылка, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ Пользователь ИЗ РегистрСведений.НастройкиПользователей ГДЕ Значение = &ЭтотПрайсЛист");
	Запрос.УстановитьПараметр("ЭтотПрайсЛист", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	ТекстШаблонаСообщения = НСтр("ru ='Текущий элемент нельзя вывести из оборота (сделать недействительным) из-за того, что прайс-лист указан как основной в настройках пользователя:
		|
		|%1'");
	
	МассивИмен = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивИмен.Добавить(Строка(Выборка.Пользователь));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаПользователей = СтрСоединить(МассивИмен, Символы.ПС);
	ВызватьИсключение СтрШаблон(ТекстШаблонаСообщения, ИменаПользователей);
	
КонецПроцедуры

Процедура НастройкиПрайсЛистовПриСозданииНовогоПользователя(Пользователь, ОбновитьЗначениеНастройки = Ложь) Экспорт
	
	ВыводитьВопросПоОрганизации = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации");
	Если (ЗначениеЗаполнено(ВыводитьВопросПоОрганизации)
			И ОбновитьЗначениеНастройки)
		ИЛИ НЕ ЗначениеЗаполнено(ВыводитьВопросПоОрганизации) Тогда
		
		РегистрыСведений.НастройкиПользователей.Установить(Истина, "ВыводитьВопросСозданииПервогоПрайсЛистаОрганизации", Пользователь);
		
	КонецЕсли;
	
	ВыводитьВопросПоКонтрагентам = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ВыводитьВопросСозданииПервогоПрайсЛистаКонтрагента");
	Если (ЗначениеЗаполнено(ВыводитьВопросПоКонтрагентам)
			И ОбновитьЗначениеНастройки)
		ИЛИ НЕ ЗначениеЗаполнено(ВыводитьВопросПоКонтрагентам) Тогда
		
		РегистрыСведений.НастройкиПользователей.Установить(Истина, "ВыводитьВопросСозданииПервогоПрайсЛистаКонтрагента", Пользователь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппаЭлементовОтбораПоСтрокеТаблицы(НастройкиОтбораНоменклатуры, ГруппыЭлементовОтбора, ОтборНоменклатуры, ИмяГруппы)
	
	Если ПустаяСтрока(ИмяГруппы) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтрокиТаблицы = ОтборНоменклатуры.НайтиСтроки(Новый Структура("ИмяГруппы", ИмяГруппы));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		
		Возврат Неопределено; // Это ошибка, такого быть не должно
		
	КонецЕсли;
		
	ТипГруппыЭлементовОтбора = Новый Соответствие;
	ТипГруппыЭлементовОтбора.Вставить(ВРЕГ("Группа И"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ТипГруппыЭлементовОтбора.Вставить(ВРЕГ("Группа ИЛИ"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ТипГруппыЭлементовОтбора.Вставить(ВРЕГ("Группа НЕ"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
	
	СтрокаОписанияГруппы = СтрокиТаблицы[0];
	
	ГруппаЭлементовОтбора = ГруппыЭлементовОтбора.Получить(СтрокаОписанияГруппы.ИмяГруппы);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		
		РодительГруппыЭлементовОтбора = ГруппаЭлементовОтбораПоСтрокеТаблицы(НастройкиОтбораНоменклатуры, ГруппыЭлементовОтбора, ОтборНоменклатуры, СтрокаОписанияГруппы.Родитель);
		Если РодительГруппыЭлементовОтбора = Неопределено Тогда
			
			ГруппаЭлементовОтбора = НастройкиОтбораНоменклатуры.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			
		Иначе
			
			ГруппаЭлементовОтбора = РодительГруппыЭлементовОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			
		КонецЕсли;
		
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбора[ВРЕГ(СтрокаОписанияГруппы.ВидСравнения)];
		ГруппаЭлементовОтбора.Использование = СтрокаОписанияГруппы.Использование;
		
		ГруппыЭлементовОтбора.Вставить(СтрокаОписанияГруппы.ИмяГруппы, ГруппаЭлементовОтбора);
		
		Возврат ГруппаЭлементовОтбора;
		
	Иначе
		
		Возврат ГруппаЭлементовОтбора;
		
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьНастройкиОтбораНоменклатуры(УникальныйИдентификатор) Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = "ВЫБРАТЬ Справочник.Номенклатура.Ссылка КАК Номенклатура";
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецФункции

// Функция для интеграции с облачными кассами Штрих-МПЕЙ
// 
// Возвращаемое значение:
//    ДеревоНоменклатуры - типа ДеревоЗначений
//
Функция АссортиментПрайсЛистаОрганизацииСИерархией(ПрайсЛистОрганизацииСсылка, ИспользоватьХарактеристики = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПрайсЛистОрганизацииСсылка) Тогда
		
		Возврат Новый ДеревоЗначений;
		
	КонецЕсли;
	
	СтруктураТаблицДанных = Новый Структура;
	СтруктураТаблицДанных.Вставить("ДеревоНоменклатуры", Новый ДеревоЗначений);
	
	ИменаРеквизитов = "ВариантыСортировки, ИерархияСодержимого, НоменклатураБезЦен, ОтборОрганизация, ОтборСклад, ПериодЦен, ФормироватьПоНаличию";
	ПараметрыФормирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрайсЛистОрганизацииСсылка, ИменаРеквизитов);
	ПараметрыФормирования.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристики);
	ПараметрыФормирования.Вставить("ИмяПоляПредставленияГруппы", Неопределено);
	
	ПараметрыФормирования.Вставить("ВидыЦен", Новый Массив);
	Для каждого СтрокаТаблицы Из ПрайсЛистОрганизацииСсылка.ВидыЦен Цикл
		
		ПараметрыФормирования.ВидыЦен.Добавить(СтрокаТаблицы.ВидЦен);
		
	КонецЦикла;
	
	НастройкиОтбораНоменклатуры = Новый КомпоновщикНастроекКомпоновкиДанных;
	СКДОтборНоменклатурыИзТабличнойЧасти(НастройкиОтбораНоменклатуры, ПрайсЛистОрганизацииСсылка.ОтборНоменклатуры);
	ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных", НастройкиОтбораНоменклатуры.Настройки.Отбор);
	
	Обработки.ПрайсЛистыОрганизации.ЭлементыИИерархияНоменклатуры(ПараметрыФормирования, СтруктураТаблицДанных);
	
	Возврат СтруктураТаблицДанных.ДеревоНоменклатуры;
	
КонецФункции // АссортиментПрайсЛистаОрганизации()

#КонецОбласти