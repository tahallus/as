
#Область ПрограммныйИнтерфейс

// Добавляет источник во входящее контакт-центра.
//
// Параметры:
//  Источник - ОпределяемыйТип.ИсточникВходящегоКонтактЦентр - Добавляемый источник
//  ОписаниеВходящего - Структура - См. ОписаниеВходящего().
//
Процедура ДобавитьВоВходящее(Источник, ОписаниеВходящего = Неопределено) Экспорт
	
	ИсточникДляЗаписи = РазыменоватьСсылкуЕслиНеобходимо(Источник);
	
	Если ТипЗнч(Источник) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия") Тогда
		ДобавитьОбсуждениеВоВходящее(ИсточникДляЗаписи, ОписаниеВходящего);
	Иначе
		ДобавитьИсточникВоВходящее(ИсточникДляЗаписи, ОписаниеВходящего);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет источник из входящего контакт-центра.
//
// Параметры:
//  Источник - ОпределяемыйТип.ИсточникВходящегоКонтактЦентр - Удаляемый источник
//  Ответственный - СправочникСсылка.Сотрудник - Сотрудник, ответственный за источник.
//
Процедура УдалитьИзВходящего(Источник, Ответственный = Неопределено) Экспорт
	
	Запись = РегистрыСведений.КонтактЦентрВходящее.СоздатьНаборЗаписей();
	Запись.Отбор.Источник.Установить(Источник);
	Если Ответственный <> Неопределено Тогда
		Запись.Отбор.Ответственный.Установить(Ответственный);
	КонецЕсли;
	
	Запись.Записать();
	
КонецПроцедуры

// Конструктор параметра ОписаниеВходящего.
//  Описание источника входящего в контакт-центре.
// 
// Возвращаемое значение:
//  Структура - Структура описания:
//   * Описание - Строка
//   * ОтКого   - Строка
//   * ТипВнешнейСистемы   - Строка
//   * Ответственный   - Массив
//
Функция ОписаниеВходящего() Экспорт
	
	ОписаниеВходящего = Новый Структура;
	ОписаниеВходящего.Вставить("Описание", "");
	ОписаниеВходящего.Вставить("ОтКого", "");
	ОписаниеВходящего.Вставить("ТипВнешнейСистемы", Неопределено);
	ОписаниеВходящего.Вставить("Ответственный", Новый Массив);
	Возврат ОписаниеВходящего;
	
КонецФункции

// Определяет есть ли подключенные каналы входящего.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть хоть один канал.
//
Функция ЕстьПодключенныеКаналыВходящего() Экспорт	
	Возврат ПодключенТелеграм() ИЛИ ПодключенВКонтакте() ИЛИ ПодключенаТелефония() ИЛИ ПодключенаПочта() ИЛИ ПодключенКабинетКлиента() ИЛИ ПодключенСайт();
КонецФункции

// Определяет подключена ли телефония.
// 
// Возвращаемое значение:
//  Булево - Истина, если телефония подключена.
//
Функция ПодключенаТелефония() Экспорт
	Возврат Константы.ИспользоватьМобильнуюТелефонию.Получить() 
		ИЛИ Константы.ИспользоватьОблачнуюТелефонию.Получить();
КонецФункции

// Определяет подключена ли почта.
// 
// Возвращаемое значение:
//  Булево - Истина, если почта подключена.
//
Функция ПодключенаПочта() Экспорт
	Возврат РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыПодключены();
КонецФункции

// Определяет подключен ли кабинет клиента.
// 
// Возвращаемое значение:
//  Булево - Истина, если кабинет клиента подключен.
//
Функция ПодключенКабинетКлиента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПубликацииМЛК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПубликацииМЛК КАК НастройкиПубликацииМЛК";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Определяет подключен ли сайт.
// 
// Возвращаемое значение:
//  Булево - Истина, если сайт подключен.
//
Функция ПодключенСайт() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	НЕ ОбменУправлениеНебольшойФирмойСайт.Ссылка <> ЗНАЧЕНИЕ(ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет подключен ли телеграм.
// 
// Возвращаемое значение:
//  Булево - Истина, если телеграм подключен.
//
Функция ПодключенТелеграм() Экспорт
	
	ТелеграмПодключен = Ложь;
	
	Попытка
		ТипыВнешнихСистем = ОбсужденияСлужебныйКлиентСервер.ТипыВнешнихСистем();
		Для Каждого Интеграции ИЗ Вычислить("СистемаВзаимодействия.ПолучитьИнтеграции()") Цикл
			Если Интеграции.ТипВнешнейСистемы <> ТипыВнешнихСистем.Телеграм Тогда
				Продолжить;
			КонецЕсли;
			
			ТелеграмПодключен = Интеграции.Использование;
			Прервать;
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	Возврат ТелеграмПодключен;
	
КонецФункции

// Определяет подключен ли ВКонтакте.
// 
// Возвращаемое значение:
//  Булево - Истина, если ВКонтакте подключен.
//
Функция ПодключенВКонтакте() Экспорт
	ВКонтактеПодключен = Ложь;
	
	Попытка
		ТипыВнешнихСистем = ОбсужденияСлужебныйКлиентСервер.ТипыВнешнихСистем();
		Для Каждого Интеграции ИЗ Вычислить("СистемаВзаимодействия.ПолучитьИнтеграции()") Цикл
			Если Интеграции.ТипВнешнейСистемы <> ТипыВнешнихСистем.ВКонтакте Тогда
				Продолжить;
			КонецЕсли;
			
			ВКонтактеПодключен = Интеграции.Использование;
			Прервать;
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	Возврат ВКонтактеПодключен;
КонецФункции

// Определяет есть ли необработанные каналы во входящем.
// 
// Возвращаемое значение:
//  Булево - Истина, если все каналы обработаны.
//
Функция ОбработаноВсеВходящее(Ответственный) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактЦентрВходящее.Источник КАК Источник
		|ИЗ
		|	РегистрСведений.КонтактЦентрВходящее КАК КонтактЦентрВходящее";
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактЦентрВходящее.Источник КАК Источник
	|ИЗ
	|	РегистрСведений.КонтактЦентрВходящее КАК КонтактЦентрВходящее
	|ГДЕ
	|	(КонтактЦентрВходящее.Ответственный = &Ответственный
	|			ИЛИ КонтактЦентрВходящее.Ответственный ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

// Обработчик подписки на событие КонтактЦентрПроверкаИсточникаВходящегоПередЗаписью"
// Вызывается ПередЗаписью объекта, являющегося источником данных для входящего.
//
Процедура КонтактЦентрПроверкаИсточникаВходящегоПередЗаписьюОбработчик(Источник) Экспорт
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	ПроверитьИзменениеОтветственногоИсточникПередЗаписью(Источник);
КонецПроцедуры

// Обработчик подписки на событие КонтактЦентрПроверкаИсточникаВходящегоПриЗаписи"
// Вызывается ПриЗаписи объекта, являющегося источником данных для входящего.
//
Процедура КонтактЦентрПроверкаИсточникаВходящегоПриЗаписиОбработчик(Источник) Экспорт
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
		
	ПроверитьИзменениеОтветственногоИсточникПриЗаписи(Источник);
КонецПроцедуры

// Обработчик подписки на событие КонтактЦентрПроверкаОснованияЗадачиПослеЗаписиПриЗаписи"
// Вызывается ПослеЗаписи объекта, являющегося источником данных для входящего.
//
Процедура КонтактЦентрПроверкаОснованияЗадачиПослеЗаписиПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
		
	ПроверитьНаличиеОснованияЗадачиВоВходящем(Источник);
КонецПроцедуры

// Возвращает текст запроса для списка дел в работе.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаВРаботе(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
		
	Если НЕ ОтборПоЗавершенным Тогда
		ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
		ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	КонецЕсли;
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка просроченных дел.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаПросрочены(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоПросроченнымЗадачам = "ВЫБОР
	|			КОГДА ЗадачаСотрудника.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ЗадачаСотрудника.ДатаОкончания < &ТекущаяДатаСеанса
	|						И ЗадачаСотрудника.ДатаОкончания <> НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|			ИНАЧЕ ЗадачаСотрудника.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И ЗадачаСотрудника.ДатаНачала < &ТекущаяДатаСеанса
	|					И ЗадачаСотрудника.ДатаНачала <> НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|		КОНЕЦ";
	
	ОтборПоПросроченнымЗаписям = "ВЫБОР
	|			КОГДА ЗаписиКалендаряСотрудника.Окончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ЗаписиКалендаряСотрудника.Окончание < &ТекущаяДатаСеанса
	|						И ЗаписиКалендаряСотрудника.Окончание <> НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|			ИНАЧЕ ЗаписиКалендаряСотрудника.Начало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И ЗаписиКалендаряСотрудника.Начало < &ТекущаяДатаСеанса
	|					И ЗаписиКалендаряСотрудника.Начало <> НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|		КОНЕЦ";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоПросроченнымЗаписям);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоПросроченнымЗадачам);
	
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка дел на сегодня.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаНаСегодня(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоЗадачамНаСегодня = "ВЫБОР
	|			КОГДА ЗадачаСотрудника.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) <= &ТекущаяДатаСеанса
	|						И &ТекущаяДатаСеанса <= КОНЕЦПЕРИОДА(ЗадачаСотрудника.ДатаОкончания,ДЕНЬ)
	|			ИНАЧЕ ЗадачаСотрудника.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|		КОНЕЦ";
	
	ОтборПоЗаписямНаСегодня = "ВЫБОР
	|			КОГДА ЗаписиКалендаряСотрудника.Окончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) <= &ТекущаяДатаСеанса
	|						И &ТекущаяДатаСеанса <= КОНЕЦПЕРИОДА(ЗаписиКалендаряСотрудника.Окончание,ДЕНЬ)
	|			ИНАЧЕ ЗаписиКалендаряСотрудника.Начало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|		КОНЕЦ";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоЗаписямНаСегодня);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоЗадачамНаСегодня);
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка дел на неделе.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаНаНеделе(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоЗадачамНаСегодня = "НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) >= НачалоПериода(ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 2),ДЕНЬ)
	|						И ЗадачаСотрудника.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)";
	
	ОтборПоЗаписямНаСегодня = "НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) >= НачалоПериода(ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 2),ДЕНЬ)
	|						И ЗаписиКалендаряСотрудника.Начало <= КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоЗаписямНаСегодня);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоЗадачамНаСегодня);
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка дел на завтра.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаНаЗавтра(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоЗадачамНаСегодня = "ВЫБОР
	|			КОГДА ЗадачаСотрудника.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) <= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1), ДЕНЬ)
	|						И ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1) <= КОНЕЦПЕРИОДА(ЗадачаСотрудника.ДатаОкончания,ДЕНЬ)
	|			ИНАЧЕ ЗадачаСотрудника.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1), ДЕНЬ)
	|		КОНЕЦ";
	
	ОтборПоЗаписямНаСегодня = "ВЫБОР
	|			КОГДА ЗаписиКалендаряСотрудника.Окончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) <= ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1)
	|						И ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1) <= КОНЕЦПЕРИОДА(ЗаписиКалендаряСотрудника.Окончание,ДЕНЬ)
	|			ИНАЧЕ ЗаписиКалендаряСотрудника.Начало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, 1), ДЕНЬ)
	|		КОНЕЦ";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоЗаписямНаСегодня);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоЗадачамНаСегодня);
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка дел без срока.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаБезСрока(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоЗадачамНаСегодня = "ЗадачаСотрудника.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И ЗадачаСотрудника.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	ОтборПоЗаписямНаСегодня = "ЗаписиКалендаряСотрудника.Окончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И ЗаписиКалендаряСотрудника.Начало = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоЗаписямНаСегодня);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоЗадачамНаСегодня);
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка дел позже.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаНаПозже(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	ОтборПоЗадачамНаСегодня = "ВЫБОР
	|			КОГДА ЗадачаСотрудника.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаОкончания,ДЕНЬ) > КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|			ИНАЧЕ ЗадачаСотрудника.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗадачаСотрудника.ДатаНачала,ДЕНЬ) > КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|		КОНЕЦ";
	
	ОтборПоЗаписямНаСегодня = "ВЫБОР
	|			КОГДА ЗаписиКалендаряСотрудника.Окончание <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Окончание,ДЕНЬ) > КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|			ИНАЧЕ ЗаписиКалендаряСотрудника.Начало <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НАЧАЛОПЕРИОДА(ЗаписиКалендаряСотрудника.Начало,ДЕНЬ) > КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|		КОНЕЦ";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("НЕ ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("НЕ ЗадачаСотрудника.Выполнена");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");

	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить(ОтборПоЗаписямНаСегодня);
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить(ОтборПоЗадачамНаСегодня);
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для списка завершенных дел.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелаЗавершены(ОтборПоЗавершенным = Истина, ВыбратьПервые = Ложь) Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь В (&ВыбранныеКалендари)");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь В (&ВыбранныеКалендари)");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");

	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Завершено");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Выполнена");
	
	Если ВыбратьПервые Тогда
		ОператорОбъединенныхЗаписейКалендаря.КоличествоПолучаемыхЗаписей = 1;
		ОператорОбъединенныхЗаписейЗадач.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
		
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

// Возвращает текст запроса для колонки доски.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДелКолонкиКалендаря() Экспорт
	
	ТекстЗапроса = ТекстЗапросаВсеДелаКонтактЦентра();
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорОбъединенныхЗаписейКалендаря = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорОбъединенныхЗаписейЗадач = СхемаЗапроса.ПакетЗапросов[0].Операторы[1];
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.КолонкаКалендаря = &КолонкаКалендаря");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.КолонкаКалендаря = &КолонкаКалендаря");

	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Календарь = &Календарь");
	ОператорОбъединенныхЗаписейЗадач.Отбор.Добавить("ЗадачаСотрудника.Календарь = &Календарь");
	
	ОператорОбъединенныхЗаписейКалендаря.Отбор.Добавить("ЗаписиКалендаряСотрудника.Источник В (&РазрешенныеИсточники)");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
//
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСлужебный.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗадачаСотрудника) Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Метаданные.Подсистемы.CRM.Подсистемы.КонтактЦентр;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВсеДелаКонтактЦентра() 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКалендаряСотрудника.Источник КАК Ссылка,
	|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
	|	ЗаписиКалендаряСотрудника.Завершено КАК Состояние,
	|	ЗаписиКалендаряСотрудника.Источник.Состояние КАК СостояниеИсточника,
	|	ВЫРАЗИТЬ(ЗаписиКалендаряСотрудника.Описание КАК СТРОКА(1000)) КАК Содержание,
	|	"""" КАК Основание,
	|	ЗаписиКалендаряСотрудника.ОтветственныйИсточника КАК Ответственный,
	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
	|	ЗаписиКалендаряСотрудника.Окончание КАК Окончание,
	|	ЗаписиКалендаряСотрудника.Начало КАК ДатаСоздания,
	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК Отступ,
	|	1 КАК ЗадачаПросрочена,
	|	0 КАК КартинкаКалендаря,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ДатаОбъединенная,
	|	0 КАК Картинка,
	|	ВЫРАЗИТЬ(ЗаписиКалендаряСотрудника.Источник КАК Документ.Событие).ДокументыОснования.(
	|		ДокументОснование КАК Тег
	|	) КАК Теги,
	|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК Номер
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	ЗаписиКалендаряСотрудника.Источник <> НЕОПРЕДЕЛЕНО
	|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаСотрудника.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ЗаписиКалендаряСотрудника.ПустаяСсылка),
	|	ЗадачаСотрудника.Выполнена,
	|	ВЫБОР
	|		КОГДА ЗадачаСотрудника.Выполнена
	|			ТОГДА ""Выполнена""
	|		ИНАЧЕ ""Запланирована""
	|	КОНЕЦ,
	|	"""",
	|	ЗадачаСотрудника.Основание,
	|	ЗадачаСотрудника.Ответственный,
	|	ВЫРАЗИТЬ(ЗадачаСотрудника.Описание КАК СТРОКА(1000)),
	|	ЗадачаСотрудника.ДатаНачала,
	|	ЗадачаСотрудника.ДатаОкончания,
	|	ЗадачаСотрудника.Дата,
	|	ЗадачаСотрудника.Календарь,
	|	"""",
	|	0,
	|	0,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)),
	|	0,
	|	ЗадачаСотрудника.Теги.(
	|		Тег
	|	),
	|	0
	|ИЗ
	|	Документ.ЗадачаСотрудника КАК ЗадачаСотрудника
	|ГДЕ
	|	ЗадачаСотрудника.ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПроверитьНаличиеОснованияЗадачиВоВходящем(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактЦентрВходящее.Источник КАК Источник,
	|	КонтактЦентрВходящее.Ответственный КАК Ответственный,
	|	КонтактЦентрВходящее.ЭтоОбсуждениеМессенджера КАК ЭтоОбсуждениеМессенджера,
	|	КонтактЦентрВходящее.Описание КАК Описание,
	|	КонтактЦентрВходящее.ОтКого КАК ОтКого,
	|	КонтактЦентрВходящее.ТипВнешнейСистемы КАК ТипВнешнейСистемы
	|ИЗ
	|	РегистрСведений.КонтактЦентрВходящее КАК КонтактЦентрВходящее
	|ГДЕ
	|	КонтактЦентрВходящее.Источник = &Источник
	|	И КонтактЦентрВходящее.Ответственный = &Ответственный";
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗадачаСотрудника") Тогда
		Если НЕ ЗначениеЗаполнено(Источник.Основание)Тогда
			Основание = Источник.ОснованиеСтроковаяСсылка;
		Иначе
			Основание = Источник.Основание;
		КонецЕсли;
	Иначе
		Основание = Источник.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Источник", Основание);
	Запрос.УстановитьПараметр("Ответственный", Источник.Ответственный);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактЦентр.УдалитьИзВходящего(Основание);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция РазыменоватьСсылкуЕслиНеобходимо(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия") Тогда
		Возврат Строка(Ссылка);
	Иначе
		Возврат Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыЗаписиВходящего()
	
	ПараметрыЗаписиВходящего = Новый Структура;
	ПараметрыЗаписиВходящего.Вставить("Источник");
	ПараметрыЗаписиВходящего.Вставить("Ответственный");
	ПараметрыЗаписиВходящего.Вставить("ЭтоОбсуждениеМессенджера", Ложь);
	ПараметрыЗаписиВходящего.Вставить("Описание", "");
	ПараметрыЗаписиВходящего.Вставить("ОтКого", "");
	ПараметрыЗаписиВходящего.Вставить("ТипВнешнейСистемы", "");
	Возврат ПараметрыЗаписиВходящего;
	
КонецФункции

Процедура ДобавитьЗаписьВоВходящее(ПараметрыЗаписиВходящего)
	
	Если ПараметрыЗаписиВходящего.Свойство("Источник") 
		И НЕ ЗначениеЗаполнено(ПараметрыЗаписиВходящего.Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.КонтактЦентрВходящее.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписиВходящего);
	Запись.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьОбсуждениеВоВходящее(ОбсуждениеИдентификатор, ОписаниеВходящего)
	
	Если ТипЗнч(ОписаниеВходящего.Ответственный) <> Тип("Массив") Тогда
		Ответственные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеВходящего.Ответственный);
	Иначе
		Ответственные = ОписаниеВходящего.Ответственный;
	КонецЕсли;
	
	Для каждого Ответственный Из Ответственные Цикл
		ПараметрыЗаписиВходящего = ПараметрыЗаписиВходящего();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиВходящего, ОписаниеВходящего);
		ПараметрыЗаписиВходящего.Ответственный = Ответственный;
		ПараметрыЗаписиВходящего.Источник = ОбсуждениеИдентификатор;
		ПараметрыЗаписиВходящего.ЭтоОбсуждениеМессенджера = Истина;
		ПараметрыЗаписиВходящего.ТипВнешнейСистемы = ОписаниеВходящего.ТипВнешнейСистемы;
		ДобавитьЗаписьВоВходящее(ПараметрыЗаписиВходящего);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИсточникВоВходящее(Источник, ОписаниеВходящего)
	
	Если ТипЗнч(ОписаниеВходящего.Ответственный) <> Тип("Массив") Тогда
		Ответственные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеВходящего.Ответственный);
	Иначе
		Ответственные = ОписаниеВходящего.Ответственный;
	КонецЕсли;
	
	Для каждого Ответственный Из Ответственные Цикл
		ПараметрыЗаписиВходящего = ПараметрыЗаписиВходящего();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиВходящего, ОписаниеВходящего);
		ПараметрыЗаписиВходящего.Источник = Источник;
		ПараметрыЗаписиВходящего.Ответственный = Ответственный;
		ДобавитьЗаписьВоВходящее(ПараметрыЗаписиВходящего);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзменениеОтветственногоИсточникПередЗаписью(Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Событие") И Источник.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		Возврат;
	КонецЕсли;
		
	ОтветственныйДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Ответственный");
	Источник.ДополнительныеСвойства.Вставить("КонтактЦентр", Новый Структура());
	Источник.ДополнительныеСвойства.КонтактЦентр.Вставить("Ответственный", ОтветственныйДо);
	Источник.ДополнительныеСвойства.КонтактЦентр.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
КонецПроцедуры

Процедура ПроверитьИзменениеОтветственногоИсточникПриЗаписи(Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Событие") И (Источник.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее 
		ИЛИ Источник.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча ИЛИ Источник.ТипСобытия = Перечисления.ТипыСобытий.Запись 
		ИЛИ Источник.ТипСобытия = Перечисления.ТипыСобытий.Прочее) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветственныйТекущий = Источник.Ответственный;
	ОтветственныйДо = Источник.ДополнительныеСвойства.КонтактЦентр.Ответственный;
	ЭтоНовый = Источник.ДополнительныеСвойства.КонтактЦентр.ЭтоНовый;
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникТекущегоПользователя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	Если ОтветственныйТекущий <> ОтветственныйДо И ОтветственныйТекущий <> СотрудникТекущегоПользователя Тогда
		ПриИзмененииОтветственногоВИсточнике(Источник.Ссылка, ОтветственныйДо, ОтветственныйТекущий, ЭтоНовый);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОтветственногоВИсточнике(Источник, ОтветственныйДо, ОтветственныйТекущий, ЭтоНовый);
	
	ПользовательСотрудника = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(ОтветственныйТекущий);
	
	Если НЕ Пользователи.РолиДоступны("ИспользованиеКонтактЦентра",ПользовательСотрудника) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьАктивныеЗадачиОтветственногоПоОснованию(Источник,ОтветственныйТекущий) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьАктивныеСобытияОтветственногоПоОснованию(Источник,ОтветственныйТекущий) Тогда
		Возврат;
	КонецЕсли;
	
	КонтактЦентр.УдалитьИзВходящего(Источник);
	
	ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
	ОписаниеВходящего.Ответственный = ОтветственныйТекущий;
	КонтактЦентр.ДобавитьВоВходящее(Источник, ОписаниеВходящего);
	
КонецПроцедуры

Функция ЕстьАктивныеЗадачиОтветственногоПоОснованию(Источник,ОтветственныйТекущий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задачи.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗадачаСотрудника КАК Задачи
	|ГДЕ
	|	Задачи.Выполнена = ЛОЖЬ
	|	И Задачи.Ответственный = &Ответственный
	|	И Задачи.ПометкаУдаления = ЛОЖЬ
	|	И Задачи.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Ответственный", ОтветственныйТекущий);
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Функция ЕстьАктивныеСобытияОтветственногоПоОснованию(Источник,ОтветственныйТекущий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Завершено)
	|	И Событие.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Отменено)
	|	И Событие.Ответственный = &Ответственный
	|	И Событие.ПометкаУдаления = ЛОЖЬ
	|	И Событие.ДокументОснование = &Основание";
	
	Запрос.УстановитьПараметр("Ответственный", ОтветственныйТекущий);
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

#КонецОбласти
