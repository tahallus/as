////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен с кассовым сервером Штрих-М".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает состояние регистрации ККМ:
// 0 - Не зарегистрирован;
// 1 - Зарегистрирован;
// 2 - Ожидает регистрацию;
// 3 - Ожидает перерегистрацию;
// 4 - Ожидает снятие с регистрации.
//
// Параметры:
//  Ссылка - СправочникСсылка.КассовыеАппараты - ККМ, для которой определяется состояние
//
// Возвращаемое значение:
//  Число - состояние регистрации.
//
Функция СостояниеРегистрацииККМ(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеРегистрации = Перечисления.СостоянияРегистрацииКассовогоАппарата.НеПодключен;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КассовыеАппараты.КассаККМ,
	|	ВЫБОР
	|		КОГДА КассовыеАппараты.ЗарегистрированНаСервереШтрихМ
	|				И ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|		КОГДА КассовыеАппараты.ЗарегистрированНаСервереШтрихМ
	|				И ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.НеПодключен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.ОжидаетОтключение)
	|		КОГДА КассовыеАппараты.ЗарегистрированНаСервереШтрихМ
	|				И НЕ КассовыеАппараты.ИдентификаторОбластиНаСервереШтрихМ = &ИдентификаторОбластиНаСервереШтрихМ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.ОжидаетПереподключение)
	|		КОГДА НЕ КассовыеАппараты.ЗарегистрированНаСервереШтрихМ
	|				И ЗарегистрированныеКассы.СостояниеПодключения = ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.Подключен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.ОжидаетПодключение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРегистрацииКассовогоАппарата.НеПодключен)
	|	КОНЕЦ КАК СостояниеРегистрации
	|ИЗ
	|	РегистрСведений.НастройкиКассыШтрихМ КАК КассовыеАппараты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарегистрированныеКассы КАК ЗарегистрированныеКассы
	|		ПО ЗарегистрированныеКассы.РегистрационныйНомер = КассовыеАппараты.РегистрационныйНомер
	|ГДЕ
	|	КассовыеАппараты.КассаККМ = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Узел = ОбменСКассовымСерверомШтрихМПовтИсп.УзелОбменаШтрих();
	Запрос.УстановитьПараметр("ИдентификаторОбластиНаСервереШтрихМ",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "ИдентификаторОбластиНаСервереШтрихМ"));
		
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СостояниеРегистрации = Выборка.СостояниеРегистрации;
	КонецЕсли;
	
	Возврат СостояниеРегистрации;
КонецФункции

#Область Документы

// Записывает документ "Кассовый чек".
//
// Параметры:
//  ИнформацияПоДокументу - Структура - информация по документу:
//    ОбластьВспомогательныхДанных - Число - область, которой принадлежит документ;
//    РеквизитыКонтейнера - СтрокаТаблицыЗначений - строка, содержащая информацию по контейнеру документа;
//    РеквизитыДокумента - СтрокаТаблицыЗначений - строка, содержащая реквизиты шапки документа;
//    ТоварыДокумента - Массив - строки, содержащие информацию по товарам документа;
//    РеквизитыОплат - Массив - строки, содержащие информацию по оплатам документа.
//  ДатаУспешногоЧека - Дата - дата последнего успешно записанного документа;
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке.
//
Процедура ЗаписатьКассовыйДокумент(ИнформацияПоДокументу, ДатаУспешногоЧека, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	ВыйтиИзОбласти = Ложь;
	Если РаботаВМоделиСервиса.РазделениеВключено() 
		И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ИнтеграцияОбменШтрихМ.ВойтиВОбластьДанныхНаСервере(ИнформацияПоДокументу.ОбластьВспомогательныхДанных);
		ВыйтиИзОбласти = Истина;
	КонецЕсли;
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = СтрокаКонтейнера.doc_id;
	
	ПротоколЗагрузки = Справочники.ДанныеОбменаШтрихМПЭЙ.НайтиПоРеквизиту(
		"ИдентификаторДокументаШтрихМ",
		Новый УникальныйИдентификатор(ИдентификаторДокумента));
		
	Если ПротоколЗагрузки.Пустая() Тогда
		ПротоколЗагрузки = Справочники.ДанныеОбменаШтрихМПЭЙ.СоздатьЭлемент();
		ПротоколЗагрузки.ИдентификаторДокументаШтрихМ = Новый УникальныйИдентификатор(ИдентификаторДокумента);
	Иначе
		ПротоколЗагрузки = ПротоколЗагрузки.ПолучитьОбъект();
	КонецЕсли;
	
	ПротоколЗагрузки.ВремяКассовогоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	ПротоколЗагрузки.ТекстОтветаСервераШтрихМПоДокументу = ТекстОтветаСервераШтрихМПоДокументу(ИнформацияПоДокументу);
	ПротоколЗагрузки.ДатаПопыткиЗагрузки = ТекущаяДатаСеанса();
	ПротоколЗагрузки.ЗагруженныеДокументы.Очистить();
	
	
	КассовыйАппарат =  НайтиКассу(СтрокаКонтейнера.cashregister_number); //Справочники.КассовыеАппараты.НайтиПоРеквизиту("РегистрационныйНомер",СтрокаКонтейнера.cashregister_number);
	ПротоколЗагрузки.КассаККМ = КассовыйАппарат;
	
	Если НЕ ЗначениеЗаполнено(КассовыйАппарат) Тогда
		ТекущееСообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Ошибка при обмене документом doc_id: %1
			|Не найден кассовый аппарат с рег. номером: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИдентификаторДокумента, СтрокаКонтейнера.cashregister_number) + Символы.ПС;
			
		СообщениеОбОшибке = СообщениеОбОшибке + ТекущееСообщениеОбОшибке;
		
		Если НЕ ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
			ДатаУспешногоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(СтрокаКонтейнера.doc_timestamp);
		КонецЕсли;
	
		ПротоколЗагрузки.ЕстьОшибки = Истина;
		ПротоколЗагрузки.ОписаниеОшибки = ТекущееСообщениеОбОшибке;
		ПротоколЗагрузки.Записать();
		
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СтрокаКонтейнера.doc_type;
	ЕстьТекущиеОшибки = Ложь;
	ТекущееСообщениеОбОшибке = "";
	
	СозданныйДокумент = Неопределено;
	
	Попытка
		
		Если ВидДокумента = "sale_check" Тогда
			ВыполнитьЗагрузкуЧекаККМ(ИнформацияПоДокументу, КассовыйАппарат, Ложь, Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "return_check" Тогда
			ВыполнитьЗагрузкуЧекаККМВозврат(ИнформацияПоДокументу, КассовыйАппарат, Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "deposit" Тогда
			ВыполнитьЗагрузкуВнесенияНаличных(ИнформацияПоДокументу, КассовыйАппарат,Истина,Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "payment" Тогда
			ВыполнитьЗагрузкуРозничнаяВыручка(ИнформацияПоДокументу, КассовыйАппарат, Истина,Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "shift_open" Тогда
			ВыполнитьЗагрузкуОткрытияКассовойСмены(ИнформацияПоДокументу, КассовыйАппарат, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "shift_close" Тогда
			ВыполнитьЗагрузкуЗакрытияКассовойСмены(ИнформацияПоДокументу, КассовыйАппарат, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "cancelled_sale_check" Тогда
			ВыполнитьЗагрузкуЧекаККМ(ИнформацияПоДокументу, КассовыйАппарат, Ложь, Ложь, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "cancelled_return_check" Тогда
			ВыполнитьЗагрузкуЧекаККМ(ИнформацияПоДокументу, КассовыйАппарат, Истина, Ложь, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "buy_check" Тогда
			ВыполнитьЗагрузкуОперацииРасхода(ИнформацияПоДокументу, КассовыйАппарат, Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "cancelled_buy_check" Тогда
			ВыполнитьЗагрузкуОперацииРасхода(ИнформацияПоДокументу, КассовыйАппарат, Ложь, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "buy_return_check" Тогда
			ВыполнитьЗагрузкуОперацииВозвратаРасхода(ИнформацияПоДокументу, КассовыйАппарат, Истина, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		ИначеЕсли ВидДокумента = "cancelled_buy_return_check" Тогда
			ВыполнитьЗагрузкуОперацииВозвратаРасхода(ИнформацияПоДокументу, КассовыйАппарат, Ложь, ЕстьТекущиеОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент);
		Иначе
			//ЕстьТекущиеОшибки = Истина;
			ТекущееСообщениеОбОшибке = НСтр("ru='Неподдерживаемый вид документа '") + ВидДокумента;
		КонецЕсли;
	Исключение
		
		ЕстьТекущиеОшибки = Истина;
		ТекущееСообщениеОбОшибке = ОписаниеОшибки();
		
	КонецПопытки;
	
	Если ЕстьТекущиеОшибки Тогда
		ЕстьОшибки = Истина;
		// сохраняем все сообщения об ошибках
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ТекущееСообщениеОбОшибке;
	КонецЕсли;
	
	Если НЕ ЕстьТекущиеОшибки Тогда
		ДатаУспешногоЧека = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(СтрокаКонтейнера.doc_timestamp);
	КонецЕсли;
	
	ПротоколЗагрузки.ЕстьОшибки = ЕстьТекущиеОшибки;
	// сохраняем все сообщения об ошибках 
	Если НЕ ПустаяСтрока(ТекущееСообщениеОбОшибке) Тогда
		ПротоколЗагрузки.ОписаниеОшибки = ПротоколЗагрузки.ОписаниеОшибки + ТекущаяДатаСеанса()+ "	" +ТекущееСообщениеОбОшибке + Символы.ПС;
	КонецЕсли;
	
	Если ТипЗнч(СозданныйДокумент) = Тип("Массив") Тогда
		Для Каждого док Из СозданныйДокумент Цикл
			ПротоколЗагрузки.ЗагруженныеДокументы.Добавить().ЗагруженныйДокумент = Док;
			ПротоколЗагрузки.ЗагруженныйДокумент = Док;
		КонецЦикла;
	Иначе
		ПротоколЗагрузки.ЗагруженныеДокументы.Добавить().ЗагруженныйДокумент = СозданныйДокумент;
		ПротоколЗагрузки.ЗагруженныйДокумент = СозданныйДокумент;
	КонецЕсли;
	
	ПротоколЗагрузки.Записать();
	
	Если ВыйтиИзОбласти Тогда
		ИнтеграцияОбменШтрихМ.ВыйтиИзОбластиДанныхНаСервере();
	КонецЕсли;
	
	
КонецПроцедуры

// Завершает загрузку чеков, устанавливая состояние кассового аппарата.
//
// Параметры:
//  РегистрационныйНомер - Строка - регистрационный номер кассового аппарата.
//
Процедура ЗавершитьЗагрузкуЧеков(РегистрационныйНомер) Экспорт
	
	КассаККМ = ИнтеграцияОбменШтрихМ.ПолучитьКассуПоРегистрационномуНомеру(РегистрационныйНомер);
	
	Касса = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();
	Касса.КассаККМ = КассаККМ;
	Касса.Прочитать();
	
	Касса.КассаККМ = КассаККМ;
	Касса.ЗапроситьЧекиНаСервереШтрихМ = Ложь;
	Касса.Записать();
	
КонецПроцедуры

// Получает кассовые чеки в фоновом задании.
//
// Параметры:
//  см.ДлительныеОперации
//
Процедура ПолучитьКассовыеДокументыДляКассовыхАппаратов(Параметры, АдресРезультата) Экспорт
	
	ОбменСКассовымСерверомШтрихМ.ПолучитьКассовыеДокументыДляКассовыхАппаратов(Параметры.ИнформацияОКассе,
		Параметры.ЕстьОшибки, Параметры.СообщениеОбОшибке);
КонецПроцедуры

#КонецОбласти

#Область Кассы

// Выполняет запрос на подключение/отключение кассового аппарата.
//
// Параметры:
//  Ссылка - СправочникСсылка.КассовыеАппараты - подключаемый/отключаемый кассовый аппарат;
//  Режим - Число - метод, который необходимо выполнить с кассовыми аппаратами.
//    1 - Подключение;
//    2 - Отключение;
//    3 - Переподключение.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьРегистрациюНаСервере(Ссылка, Режим, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Ложь, ОбластьДанных = 0) Экспорт
	
	РеквизитыКассы = ИнтеграцияОбменШтрихМ.ПолучитьРеквизитыКассыШтрихМ(Ссылка);
	
	КассыДляРегистрации = ТаблицаЗначенийПоСтруктуре(РеквизитыКассы);
	СтрокаКассы = КассыДляРегистрации.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКассы, РеквизитыКассы);
	КолонкаОбласть = КассыДляРегистрации.Колонки.Найти("ИдентификаторОбластиНаСервереШтрихМ");
	КолонкаОбласть.Имя = "ИдентификаторОбластиШтрих";
	КассыДляРегистрации.Колонки.Добавить("Результат");
	КассыДляРегистрации.Колонки.Добавить("СообщениеОбмена");
	КассыДляРегистрации.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные");
	КассыДляРегистрации.Колонки.Добавить("НовыйИдентификаторОбласти");
	КассыДляРегистрации.ЗагрузитьКолонку(КассыДляРегистрации.ВыгрузитьКолонку("ИдентификаторОбластиШтрих"),
		"НовыйИдентификаторОбласти");
	
	ОбменСКассовымСерверомШтрихМ.ВыполнитьПодключениеКассовыхАппратов(КассыДляРегистрации, Режим,
		ЕстьОшибки, СообщениеОбОшибке, ВестиЛог, ОбластьДанных);
КонецПроцедуры

// Обрабатывает подключение/отключение кассового аппарата.
//
// Параметры:
//  ИнформацияОПодключении - Структура - информация по подключению:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    ОбластьВспомогательныхДанных - Число - область кассового аппарата;
//    Подключен - Булево - флаг состояния подключения кассового аппарата;
//    ОсвободитьЛицензию - Булево - флаг для освобждения лицензии на сервере тарификации;
//    ИдентификаторОбластиНаСервереШтрихМ - Строка - идентификатор области на сервере подключения Штрих.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке.
//
Процедура ОбработатьРезультатПодключенияКассы(ИнформацияОПодключении, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	ВыйтиИзОбласти = Ложь;
	Если РаботаВМоделиСервиса.РазделениеВключено()
			И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИнтеграцияОбменШтрихМ.ВойтиВОбластьДанныхНаСервере(ИнформацияОПодключении.ОбластьВспомогательныхДанных);
		ВыйтиИзОбласти = Истина;
	КонецЕсли;
	
	
	КассовыйАппарат =ИнтеграцияОбменШтрихМ.ПолучитьКассуПоРегистрационномуНомеру(ИнформацияОПодключении.РегистрационныйНомер);
	
	Если ЗначениеЗаполнено(КассовыйАппарат) Тогда
		Попытка
			МенеджерЗаписиКассы = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();
			МенеджерЗаписиКассы.КассаККМ = КассовыйАппарат;
			МенеджерЗаписиКассы.Прочитать();
		Исключение
			СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При подключении ошибочно обработан ККМ: %1'"),
				КассовыйАппарат) + Символы.ПС;
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИнформацияОПодключении.ИдентификаторОбластиНаСервереШтрихМ)
			И Не МенеджерЗаписиКассы.ИдентификаторОбластиНаСервереШтрихМ = ИнформацияОПодключении.ИдентификаторОбластиНаСервереШтрихМ Тогда
			МенеджерЗаписиКассы.ИдентификаторОбластиНаСервереШтрихМ = ИнформацияОПодключении.ИдентификаторОбластиНаСервереШтрихМ;
		КонецЕсли;
		
		МенеджерЗаписиКассы.ЗарегистрированНаСервереШтрихМ = ИнформацияОПодключении.Подключен;
		
		Если НЕ ИнформацияОПодключении.Подключен Тогда
			МенеджерЗаписиКассы.ЗапроситьЧекиНаСервереШтрихМ = Ложь;
			МенеджерЗаписиКассы.ЗарегистрироватьТоварыНаСервереШтрихМ = Ложь;
			МенеджерЗаписиКассы.ОчиститьТоварыНаСервереШтрихМ = Ложь;
			МенеджерЗаписиКассы.ПроверитьРегистрациюТоваровНаСервереШтрихМ = Ложь;
		КонецЕсли;
		
		Если ИнформацияОПодключении.ОсвободитьЛицензию И РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ОтменаРегистрации = 
				ТарификацияПереопределяемый.ОтменаРегистрацииКассыНаСервереТарификации(МенеджерЗаписиКассы.ИдентификаторТарификации, Ложь, Истина);
			Если НЕ ОтменаРегистрации Тогда
				СообщениеОбОшибке = СообщениеОбОшибке +
					СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'"),
						МенеджерЗаписиКассы.ИдентификаторТарификации) + Символы.ПС;
				ЕстьОшибка = Истина;
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Освобождена лицензия %1 на сервере лицензий'"), МенеджерЗаписиКассы.ИдентификаторТарификации);
				ОбменСКассовымСерверомШтрихМ.ЗаписатьВПротоколКассовогоАппарата(МенеджерЗаписиКассы.РегистрационныйНомер, ТекстСообщения);
				МенеджерЗаписиКассы.ИдентификаторТарификации = "";
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписиКассы.Записать();
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При подключении ошибочно обработан ККМ: %1'"),
			КассовыйАппарат) + Символы.ПС;
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ВыйтиИзОбласти Тогда
		ИнтеграцияОбменШтрихМ.ВыйтиИзОбластиДанныхНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Товары

// Выполняет выгрузку товаров, проверку выгрузки товаров на сервер Штрих-М.
// Используется в регламентном задании "ОбменТоварамССерверомШтрихМ".
//
Процедура ОбменТоварамиССерверомШтрихМ() Экспорт
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	
	КассыДляПроверкиТоваров = КассыДляПроверкиТоваров();
	
	Если КассыДляПроверкиТоваров.Количество()>0 Тогда
		Кассы = Новый ТаблицаЗначений;
		Кассы.Колонки.Добавить("КассыДляРегистрации");
		ДанныеОбмена = Кассы.Добавить();
		ДанныеОбмена.КассыДляРегистрации = КассыДляПроверкиТоваров;
		
		ОбменСКассовымСерверомШтрихМ.ПроверитьСтатусЗагрузкиТоваровНаКассовыхАппаратах(Кассы, ЕстьОшибки, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем кассы для обмена.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассовыеАппараты.РегистрационныйНомер,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Результат,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.НастройкиКассыШтрихМ КАК КассовыеАппараты
	|ГДЕ
	|	КассовыеАппараты.ЗарегистрированНаСервереШтрихМ");
	
	Кассы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Касса Из Кассы Цикл
		
		// создаем пустую таблицу по структуре равную кассам
		ВременнаяТаблицаКасс = Кассы.Скопировать(Новый Массив);
		
		// добавляем в неё только одну строку
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаКасс.Добавить(), Касса);
		
		// делаем запрос товаров только по этой определенной кассе
		ТоварыИКассы = ТоварыИКассыДляОбмена(ВременнаяТаблицаКасс);
		ОбменСКассовымСерверомШтрихМ.ВыполнитьВыгрузкуТоваров(ТоварыИКассы, ЕстьОшибки, СообщениеОбОшибке);
		
		Для Каждого СтрокаОбмена Из ТоварыИКассы Цикл
			
			Если СтрокаОбмена.КассыДляРегистрации.Количество()= 0
				Или СтрокаОбмена.КодыТоваровДляОчистки.Количество()= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТоварыИКассыДляОчистки = Новый Структура;
			ТоварыИКассыДляОчистки.Вставить("Товары", СтрокаОбмена.КодыТоваровДляОчистки);
			ТоварыИКассыДляОчистки.Вставить("Кассы", СтрокаОбмена.КассыДляРегистрации);
			ОбменСКассовымСерверомШтрихМ.ВыполнитьВыборочнуюОчисткуТоваровНаКассовыхАппаратах(ТоварыИКассыДляОчистки,
				ЕстьОшибки, СообщениеОбОшибке);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСКассовымСерверомШтрихМ.ПроверитьСтатусЗагрузкиТоваровНаКассовыхАппаратах(ТоварыИКассы, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

// Выполняет выгрузку товаров на кассовый аппарат и проверку загрузки товаров на ККМ.
//
// Параметры:
//  Ссылка - СправочникСсылка.КассовыеАппараты - подключаемый/отключаемый кассовый аппарат;
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке;
//  ВестиЛог - Булево - флаг ведения записей в журнале регистрации;
//  ОбластьДанных - Число - разделитель в модели сервиса.
//
Процедура ВыполнитьВыгрузкуТоваровНаСервере(Ссылка, ЕстьОшибки, СообщениеОбОшибке, ВестиЛог = Ложь, ОбластьДанных = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТоварыИКассыДляВыгрузки = Новый ТаблицаЗначений;
	
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("ГруппыТоваровДляРегистрации");
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("ТоварыДляРегистрации");
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("КассыДляРегистрации");
	ДанныеОбмена = ТоварыИКассыДляВыгрузки.Добавить();
	
	КассыДляРегистрации = Новый ТаблицаЗначений;
	КассыДляРегистрации.Колонки.Добавить("РегистрационныйНомер");
	КассыДляРегистрации.Колонки.Добавить("Результат");
	КассыДляРегистрации.Колонки.Добавить("СообщениеОбмена");
	КассыДляРегистрации.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные");
	КассыДляРегистрации.Колонки.Добавить("ИдентификаторОбластиШтрих");
	
	СтрокаКассы = КассыДляРегистрации.Добавить();
	СтрокаКассы.РегистрационныйНомер = ИнтеграцияОбменШтрихМ.ПолучитьРеквизитыКассыШтрихМ(Ссылка).РегистрационныйНомер;
	
	ДанныеОбмена.КассыДляРегистрации = КассыДляРегистрации;
	
	ГруппыИТоварыДляВыгрузки = ГруппыИТовары(Ссылка);
	
	ДанныеОбмена.ТоварыДляРегистрации = ГруппыИТоварыДляВыгрузки.Товары;
	ДанныеОбмена.ГруппыТоваровДляРегистрации = ГруппыИТоварыДляВыгрузки.Группы;
	
	ОбменСКассовымСерверомШтрихМ.ВыполнитьВыгрузкуТоваров(ТоварыИКассыДляВыгрузки, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыИКассыДляОчистки = Новый Структура;
	
	ТоварыИКассыДляОчистки.Вставить("Товары", ГруппыИТоварыДляВыгрузки.ТоварыКОчистке.ВыгрузитьКолонку("Код"));
	ТоварыИКассыДляОчистки.Вставить("Кассы", КассыДляРегистрации);
	
	ОбменСКассовымСерверомШтрихМ.ВыполнитьВыборочнуюОчисткуТоваровНаКассовыхАппаратах(ТоварыИКассыДляОчистки, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСКассовымСерверомШтрихМ.ПроверитьСтатусЗагрузкиТоваровНаКассовыхАппаратах(ТоварыИКассыДляВыгрузки, ЕстьОшибки, СообщениеОбОшибке);
КонецПроцедуры

// Обрабатывает команду очистки товаров с кассового аппарата.
//
// Параметры:
//  ИнформацияОПодключении - Структура - информация по подключению:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    ОбластьВспомогательныхДанных - Число - область кассового аппарата;
//    Подключен - Булево - флаг состояния подключения кассового аппарата;
//    ОсвободитьЛицензию - Булево - флаг для освобждения лицензии на сервере тарификации;
//    ИдентификаторОбластиНаСервереШтрихМ - Строка - идентификатор области на сервере подключения Штрих;
//    ПроверитьЗагрузкуТоваров - Булево - флаг включения ожидания проверки загрузки товаров;
//    ЗаписатьТекущиеЦены - Булево - флаг записи текущих цен товаров;
//    Товары - массив - коды товаров для регистрации.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке.
//
Процедура ОбработатьРезультатОчисткиТоваров(ИнформацияОПодключении, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	ВыйтиИзОбласти = Ложь;
	Если РаботаВМоделиСервиса.РазделениеВключено()
			И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИнтеграцияОбменШтрихМ.ВойтиВОбластьДанныхНаСервере(ИнформацияОПодключении.ОбластьВспомогательныхДанных);
		ВыйтиИзОбласти = Истина;
	КонецЕсли;
	
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	КассовыйАппарат = НайтиКассу(ИнформацияОПодключении.РегистрационныйНомер);
	
	Если ЗначениеЗаполнено(КассовыйАппарат) Тогда
		Попытка
			КассаОбъект = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();//КассовыйАппарат.ПолучитьОбъект();
			КассаОбъект.КассаККМ = КассовыйАппарат;
			КассаОбъект.Прочитать();
			КассаОбъект.КассаККМ = КассовыйАппарат;
		Исключение
			СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При очистке товаров ошибочно обработан ККМ: %1'", КодЯзыка),
				КассовыйАппарат) + Символы.ПС;
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
		
		КассаОбъект.ПроверитьРегистрациюТоваровНаСервереШтрихМ = ИнформацияОПодключении.ПроверитьЗагрузкуТоваров;
		КассаОбъект.ОчиститьТоварыНаСервереШтрихМ = Ложь;
		
		Если ИнформацияОПодключении.ОсвободитьЛицензию И РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ОтменаРегистрации = 
				ТарификацияПереопределяемый.ОтменаРегистрацииКассыНаСервереТарификации(КассаОбъект.ИдентификаторТарификации, Ложь, Истина);
			Если НЕ ОтменаРегистрации Тогда
				СообщениеОбОшибке = СообщениеОбОшибке +
					СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'", КодЯзыка),
						КассаОбъект.ИдентификаторТарификации) + Символы.ПС;
				ЕстьОшибка = Истина;
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Освобождена лицензия %1 на сервере лицензий'",
					КодЯзыка), КассаОбъект.ИдентификаторТарификации);
				ОбменСКассовымСерверомШтрихМ.ЗаписатьВПротоколКассовогоАппарата(КассаОбъект.РегистрационныйНомер, ТекстСообщения);
				КассаОбъект.ИдентификаторТарификации = "";
			КонецЕсли;
		КонецЕсли;
		
		КассаОбъект.Записать();
		
		Если ИнформацияОПодключении.ЗаписатьТекущиеЦены Тогда
			ЗаписатьТекущиеЦены(КассаОбъект.КассаККМ, 2, ИнформацияОПодключении.Товары);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При очистке товаров ошибочно обработан ККМ: %1'", КодЯзыка),
			КассовыйАппарат) + Символы.ПС;
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ВыйтиИзОбласти Тогда
		ИнтеграцияОбменШтрихМ.ВыйтиИзОбластиДанныхНаСервере();
	КонецЕсли;
КонецПроцедуры

// Обрабатывает команду регистрации товаров на кассовом аппарате.
//
// Параметры:
//  ИнформацияОПодключении - Структура - информация по подключению:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    ОбластьВспомогательныхДанных - Число - область кассового аппарата;
//    Подключен - Булево - флаг состояния подключения кассового аппарата;
//    ОсвободитьЛицензию - Булево - флаг для освобждения лицензии на сервере тарификации;
//    ИдентификаторОбластиНаСервереШтрихМ - Строка - идентификатор области на сервере подключения Штрих;
//    ПроверитьЗагрузкуТоваров - Булево - флаг включения ожидания проверки загрузки товаров;
//    ЗаписатьТекущиеЦены - Булево - флаг записи текущих цен товаров;
//    Товары - ТаблицаЗначений - информация по товарам для регистрации.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке.
//
Процедура ОбработатьРезультатРегистрацииТоваров(ИнформацияОПодключении, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	ВыйтиИзОбласти = Ложь;
	Если РаботаВМоделиСервиса.РазделениеВключено()
			И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИнтеграцияОбменШтрихМ.ВойтиВОбластьДанныхНаСервере(ИнформацияОПодключении.ОбластьВспомогательныхДанных);
		ВыйтиИзОбласти = Истина;
	КонецЕсли;
	
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	КассовыйАппарат = НайтиКассу(ИнформацияОПодключении.РегистрационныйНомер);
	
	Если ЗначениеЗаполнено(КассовыйАппарат) Тогда
		Попытка
			КассаОбъект = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();//КассовыйАппарат.ПолучитьОбъект();
			КассаОбъект.КассаККМ = КассовыйАппарат;
			КассаОбъект.Прочитать();
			КассаОбъект.КассаККМ = КассовыйАппарат;
		Исключение
			СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При регистрации товаров ошибочно обработан ККМ: %1'", КодЯзыка),
				КассовыйАппарат) + Символы.ПС;
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
		
		КассаОбъект.ПроверитьРегистрациюТоваровНаСервереШтрихМ = ИнформацияОПодключении.ПроверитьЗагрузкуТоваров;
		
		Если ИнформацияОПодключении.ОсвободитьЛицензию И РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ОтменаРегистрации = 
				ТарификацияПереопределяемый.ОтменаРегистрацииКассыНаСервереТарификации(КассаОбъект.ИдентификаторТарификации, Ложь, Истина);
			Если НЕ ОтменаРегистрации Тогда
				СообщениеОбОшибке = СообщениеОбОшибке +
					СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'", КодЯзыка),
						КассаОбъект.ИдентификаторТарификации) + Символы.ПС;
				ЕстьОшибка = Истина;
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Освобождена лицензия %1 на сервере лицензий'",
					КодЯзыка), КассаОбъект.ИдентификаторТарификации);
				ОбменСКассовымСерверомШтрихМ.ЗаписатьВПротоколКассовогоАппарата(КассаОбъект.РегистрационныйНомер, ТекстСообщения);
				КассаОбъект.ИдентификаторТарификации = "";
			КонецЕсли;
		КонецЕсли;
		
		КассаОбъект.Записать();
		
		Если ИнформацияОПодключении.ЗаписатьТекущиеЦены Тогда
			ЗаписатьТекущиеЦены(КассаОбъект.КассаККМ, 0, ИнформацияОПодключении.Товары);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При регистрации товаров ошибочно обработан ККМ: %1'", КодЯзыка),
			КассовыйАппарат) + Символы.ПС;
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ВыйтиИзОбласти Тогда
		ИнтеграцияОбменШтрихМ.ВыйтиИзОбластиДанныхНаСервере();
	КонецЕсли;
КонецПроцедуры

// Обрабатывает команду регистрации товаров на кассовом аппарате.
//
// Параметры:
//  ИнформацияОПодключении - Структура - информация по подключению:
//    РегистрационныйНомер - Строка - регистрационный номер кассового аппарата;
//    ОбластьВспомогательныхДанных - Число - область кассового аппарата;
//    Подключен - Булево - флаг состояния подключения кассового аппарата;
//    ОсвободитьЛицензию - Булево - флаг для освобждения лицензии на сервере тарификации;
//    ИдентификаторОбластиНаСервереШтрихМ - Строка - идентификатор области на сервере подключения Штрих;
//    ПроверитьЗагрузкуТоваров - Булево - флаг включения ожидания проверки загрузки товаров;
//    ЗаписатьТекущиеЦены - Булево - флаг записи текущих цен товаров;
//    Товары - ТаблицаЗначений - информация по товарам для регистрации.
//  ЕстьОшибки - Булево - флаг ошибки при обработке;
//  СообщениеОбОшибке - Строка - строка сообщения об ошибке.
//
Процедура ОбработатьРезультатПроверкиЗагрузкиТоваров(ИнформацияОПодключении, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	ВыйтиИзОбласти = Ложь;
	Если РаботаВМоделиСервиса.РазделениеВключено()
			И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИнтеграцияОбменШтрихМ.ВойтиВОбластьДанныхНаСервере(ИнформацияОПодключении.ОбластьВспомогательныхДанных);
		ВыйтиИзОбласти = Истина;
	КонецЕсли;
	
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	КассовыйАппарат = НайтиКассу(ИнформацияОПодключении.РегистрационныйНомер);
		
	ОчиститьРегистрациюТоваров = Ложь;
	Если ЗначениеЗаполнено(КассовыйАппарат) Тогда
		Попытка
			КассаОбъект = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();//КассовыйАппарат.ПолучитьОбъект();
			КассаОбъект.КассаККМ = КассовыйАппарат;
			КассаОбъект.Прочитать();
			КассаОбъект.КассаККМ = КассовыйАппарат;
		Исключение
			СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При проверке выгрузки товаров ошибочно обработан ККМ: %1'", КодЯзыка),
				КассовыйАппарат) + Символы.ПС;
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
		
		КассаОбъект.ЗарегистрироватьТоварыНаСервереШтрихМ = Ложь;
		КассаОбъект.ПроверитьРегистрациюТоваровНаСервереШтрихМ = ИнформацияОПодключении.ПроверитьЗагрузкуТоваров;
		
		Если ИнформацияОПодключении.ОсвободитьЛицензию И РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ОтменаРегистрации = 
				ТарификацияПереопределяемый.ОтменаРегистрацииКассыНаСервереТарификации(КассаОбъект.ИдентификаторТарификации, Ложь, Истина);
			Если НЕ ОтменаРегистрации Тогда
				СообщениеОбОшибке = СообщениеОбОшибке +
					СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'", КодЯзыка),
						КассаОбъект.ИдентификаторТарификации) + Символы.ПС;
				ЕстьОшибка = Истина;
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Освобождена лицензия %1 на сервере лицензий'",
					КодЯзыка), КассаОбъект.ИдентификаторТарификации);
				ОбменСКассовымСерверомШтрихМ.ЗаписатьВПротоколКассовогоАппарата(КассаОбъект.РегистрационныйНомер, ТекстСообщения);
				КассаОбъект.ИдентификаторТарификации = "";
			КонецЕсли;
		КонецЕсли;
		
		КассаОбъект.Записать();
		
		ОчиститьРегистрациюТоваров = НЕ КассаОбъект.ПроверитьРегистрациюТоваровНаСервереШтрихМ;
		
		Если ИнформацияОПодключении.ЗаписатьТекущиеЦены Тогда
			ЗаписатьТекущиеЦены(КассаОбъект.КассаККМ.Ссылка, 1, Неопределено);
		КонецЕсли;
		
		Если ОчиститьРегистрациюТоваров Тогда
			ВыполнитьОчисткуРегистрацииИзмененийТоваров();
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = СообщениеОбОшибке + СтрШаблон(НСтр("ru = 'При проверке выгрузки ошибочно обработан ККМ: %1'", КодЯзыка),
			КассовыйАппарат) + Символы.ПС;
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ВыйтиИзОбласти Тогда
		ИнтеграцияОбменШтрихМ.ВыйтиИзОбластиДанныхНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает узел плана обмена "Товары и услуги"
//
// Возвращаемое значение:
//  УзелТовары - ПланОбменаСсылка.ТоварыИУслуги.
//
Функция УзелТовары() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	УзелТовары = ПланыОбмена.ТоварыИУслуги.НайтиПоКоду("002");
	
	Если ЗначениеЗаполнено(УзелТовары) Тогда
		Возврат УзелТовары;
	КонецЕсли;
	
	ГлавныйУзелОбмена = ПланыОбмена.ТоварыИУслуги.ЭтотУзел();
	
	Если Не ЗначениеЗаполнено(ГлавныйУзелОбмена.Наименование) Тогда
		
		ГлавныйУзелОбъект = ГлавныйУзелОбмена.ПолучитьОбъект();
		ГлавныйУзелОбъект.Наименование = НСтр("ru='Центральный (товары и услуги)'", КодЯзыка);
		Попытка
			ГлавныйУзелОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если УзелТовары.Пустая() Тогда
		
		УзелТовары = ПланыОбмена.ТоварыИУслуги.СоздатьУзел();
		УзелТовары.Код = "002";
		УзелТовары.Наименование =
			НСтр("ru='Обмен ценами (товары и услуги)'", КодЯзыка);
		Попытка
			УзелТовары.Записать();
			Возврат УзелТовары.Ссылка;
		Исключение
			описаниеошибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции


Функция ТаблицаЗначенийПоСтруктуре(Знач Структура, Знач МассивИндексов = Неопределено)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для каждого КлючИЗначение Из Структура Цикл
		ТипЗначенияКолонки = Новый Массив;
		ТипЗначенияКолонки.Добавить(ТипЗнч(КлючИЗначение.Значение));
		ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(ТипЗначенияКолонки));
	КонецЦикла;
	
	Если НЕ МассивИндексов = Неопределено Тогда
		Для каждого Элемент Из МассивИндексов Цикл
			ТаблицаЗначений.Индексы.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
КонецФункции


Функция ТекстОтветаСервераШтрихМПоДокументу(ИнформацияПоДокументу)
	
	СериализумаяИнформация = ПодготовитьСериализуемуюИнформациюПоДокументу(ИнформацияПоДокументу);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,"	",));
	
	СериализаторXDTO.ЗаписатьJSON(Запись, СериализумаяИнформация, НазначениеТипаXML.Явное);
	Возврат Запись.Закрыть();
	
КонецФункции


// Преобразует стуктуру информацияПоДокументу с несериализуемыми данными в подходящий для JSON формат
Функция ПодготовитьСериализуемуюИнформациюПоДокументу(ИнформацияПоДокументу)
	
	ВозвращаемаяСтруктура = ОбщегоНазначения.СкопироватьРекурсивно(ИнформацияПоДокументу);
	
	Для Каждого Ключ Из ВозвращаемаяСтруктура Цикл
		
		Если ТипЗнч(Ключ.Значение) = Тип("СтрокаТаблицыЗначений") Тогда
			ВозвращаемаяСтруктура[Ключ.Ключ] = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Ключ.Значение);
		ИначеЕсли ТипЗнч(Ключ.Значение) = Тип("Массив") Тогда
			
			МассивДокумента = Ключ.Значение;
			
			Для К = 0 По МассивДокумента.Количество()-1 Цикл
				
				Если ТипЗнч(МассивДокумента[к]) = Тип("СтрокаТаблицыЗначений") Тогда
					МассивДокумента[к] = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(МассивДокумента[к]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

#КонецОбласти

#Область ВспомогательнаяОбласть

Процедура ВыполнитьОчисткуРегистрацииИзмененийТоваров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|ГДЕ
	|	НЕ ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И НЕ ТоварыИУслуги.Ссылка.ДатаИзменения > &ТекущаяДатаВремя
	|	И ТоварыИУслуги.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|ГДЕ
	|	ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И ТоварыИУслуги.Узел = &Узел");
	
	УзелТовары = УзелТовары();
	
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Узел", УзелТовары());
	
	Товары = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Товар Из Товары Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелТовары, Товар);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ПолучитьМассивНоменклатурыПоДеревуИерархии(СтрокиДереваИерархии, ИмяКолонкиИерархии, ВозвращаемыйМассив = Неопределено)
	
	Если ВозвращаемыйМассив = Неопределено Тогда
		
		ВозвращаемыйМассив = Новый Массив;
		
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиДереваИерархии Цикл
		
		ПолучитьМассивНоменклатурыПоДеревуИерархии(Строка.Строки, ИмяКолонкиИерархии, ВозвращаемыйМассив);
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура)
			И ЗначениеЗаполнено(ИмяКолонкиИерархии)
			И ЗначениеЗаполнено(Строка[ИмяКолонкиИерархии]) Тогда
			
			ВозвращаемыйМассив.Добавить(Строка[ИмяКолонкиИерархии]);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			ВозвращаемыйМассив.Добавить(Строка.Номенклатура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

Функция ГруппыИТоварыИзмененные(КассовыйАппарат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыИТовары = Новый Структура("Товары, ТоварыКОчистке, Группы");
	
	Запрос = НовыйЗапросГруппыИТоварыИзмененные();
	
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Узел", УзелТовары());
	Запрос.УстановитьПараметр("ВидЦен", ИнтеграцияОбменШтрихМ.РозничныйВидЦены(КассовыйАппарат));
	
	ПрайсЛистСсылка = ИнтеграцияОбменШтрихМ.ПолучитьРеквизитыКассыШтрихМ(КассовыйАппарат).ПрайсЛист;
	АссортиментПрайсЛиста = ПрайсЛистыСлужебный.АссортиментПрайсЛистаОрганизацииСИерархией(ПрайсЛистСсылка);
	ИмяКолонкиИерархииПрайсЛиста = ПолучитьИмяКолонкиИерархииПрайсЛиста(ПрайсЛистСсылка.ИерархияСодержимого);
	Запрос.УстановитьПараметр("ТоварыКВыгрузке", ПолучитьМассивНоменклатурыПоДеревуИерархии(АссортиментПрайсЛиста.Строки, ИмяКолонкиИерархииПрайсЛиста));
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Анализ по характеристикам, для товара с характеристикой используются фигурные скобки в наименовании
	
	ТоварыКВыгрузке = Результат[Результат.Количество()-3].Выгрузить();
	Для Каждого СтрокаАнализа Из ТоварыКВыгрузке Цикл
		Если НЕ ПустаяСтрока(СтрокаАнализа.НазваниеХарактеристики) Тогда
			СтрокаАнализа.НаименованиеККМ =  СтрШаблон( "%1 {%2}", СтрокаАнализа.НаименованиеККМ, СтрокаАнализа.НазваниеХарактеристики);
			СтрокаАнализа.Наименование =  СтрокаАнализа.НаименованиеККМ;
			Попытка
				СтрокаАнализа.Код = СтрокаАнализа.Код+"|"+Формат(Число(СтрокаАнализа.КодХарактеристики), "ЧГ=");
			Исключение
				СтрокаАнализа.Код = СтрокаАнализа.Код+"|"+СтрокаАнализа.КодХарактеристики;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	
	ГруппыИТовары.Вставить("Товары", ТоварыКВыгрузке);
	ГруппыИТовары.Вставить("ТоварыКОчистке", Результат[Результат.Количество()-2].Выгрузить());
	ГруппыИТовары.Вставить("Группы", Результат[Результат.Количество()-1].Выгрузить());
	
	Возврат ГруппыИТовары;
КонецФункции


Функция НовыйЗапросГруппыИТоварыИзмененные() Экспорт
	
	ТекстЗапроса = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() + 
	"ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ТоварыИУслуги.Ссылка.Код КАК Код,
	|	ТоварыИУслуги.Ссылка.Наименование КАК Наименование,
	|	"""" КАК НазваниеХарактеристики,
	|	"""" КАК КодХарактеристики,
	|	ЕСТЬNULL(ТоварыИУслуги.Ссылка.Родитель.Код, """") КАК РодительКод,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Ссылка.НаименованиеПолное КАК СТРОКА(64)) КАК НаименованиеККМ,
	|	ЕСТЬNULL(ШтрихКодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ЕСТЬNULL(Цены.Цена, 0) * 100 КАК Цена,
	|	ВЫБОР
	|		КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 18 ИЛИ ВТСтавкиНДС.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТСтавкиНДС.СтавкаНДС.НеОблагается
	|							ТОГДА 4
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТоварыИУслуги.Ссылка.Артикул КАК Артикул,
	|	ИСТИНА КАК ДробноеКоличество,
	|	ЕСТЬNULL(ТоварыИУслуги.Ссылка.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код, """""""") КАК КодАлкогольнойПродукции,
	|	1 КАК Отдел
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихКодыНоменклатуры
	|		ПО (ШтрихКодыНоменклатуры.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (ШтрихКодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДатаВремя, ВидЦен = &ВидЦен) КАК Цены
	|		ПО (Цены.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТоварыИУслуги.Ссылка.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	НЕ ТоварыИУслуги.Ссылка.ПометкаУдаления
	|	И ТоварыИУслуги.Узел = &Узел
	|	И НЕ ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Ссылка.Код КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Ссылка.НаименованиеПолное КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(Характеристики.Ссылка.НаименованиеДляПечати КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(Характеристики.Ссылка.Код КАК СТРОКА(64)),
	|	ЕСТЬNULL(ТоварыИУслуги.Ссылка.Родитель.Код, """"),
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Ссылка.НаименованиеПолное КАК СТРОКА(64)),
	|	ЕСТЬNULL(ШтрихкодыХарактеристик.Штрихкод, """"),
	|	ЕСТЬNULL(ЦеныХарактеристик.Цена, 0) * 100,
	|	ВЫБОР
	|		КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 18 ИЛИ ВТСтавкиНДС.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТСтавкиНДС.СтавкаНДС.НеОблагается
	|							ТОГДА 4
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ТоварыИУслуги.Ссылка.Артикул,
	|	ИСТИНА,
	|	ЕСТЬNULL(ТоварыИУслуги.Ссылка.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код, """"),
	|	1
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО (Характеристики.Владелец = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДатаВремя, ВидЦен = &ВидЦен) КАК ЦеныХарактеристик
	|		ПО (ЦеныХарактеристик.Номенклатура = Характеристики.Владелец)
	|			И (ЦеныХарактеристик.Характеристика = Характеристики.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыХарактеристик
	|		ПО (ШтрихкодыХарактеристик.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (ШтрихкодыХарактеристик.Характеристика = Характеристики.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТоварыИУслуги.Ссылка.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	НЕ ТоварыИУслуги.Ссылка.ПометкаУдаления
	|	И ТоварыИУслуги.Узел = &Узел
	|	И НЕ ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ТоварыИУслуги.Ссылка.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|ГДЕ
	|	НЕ ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И ТоварыИУслуги.Узел = &Узел
	|	И ТоварыИУслуги.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ТоварыИУслуги.Ссылка.Код КАК Код,
	|	ТоварыИУслуги.Ссылка.Наименование КАК Наименование,
	|	ЕСТЬNULL(ТоварыИУслуги.Ссылка.Родитель.Код, """") КАК РодительКод
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК ТоварыИУслуги
	|ГДЕ
	|	НЕ ТоварыИУслуги.Ссылка.ПометкаУдаления
	|	И ТоварыИУслуги.Узел = &Узел
	|	И ТоварыИУслуги.Ссылка.ЭтоГруппа
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)";
	
	Возврат Новый Запрос(ТекстЗапроса);
	
КонецФункции

Функция ГруппыИТовары(КассовыйАппарат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыИТовары = Новый Структура("Товары, ТоварыКОчистке, Группы");
	
	Запрос = НовыйЗапросГруппыИТовары();
	
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦен", ИнтеграцияОбменШтрихМ.РозничныйВидЦены(КассовыйАппарат));
	
	ПрайсЛистСсылка = ИнтеграцияОбменШтрихМ.ПолучитьРеквизитыКассыШтрихМ(КассовыйАппарат).ПрайсЛист;
	АссортиментПрайсЛиста = ПрайсЛистыСлужебный.АссортиментПрайсЛистаОрганизацииСИерархией(ПрайсЛистСсылка);
	ИмяКолонкиИерархииПрайсЛиста = ПолучитьИмяКолонкиИерархииПрайсЛиста(ПрайсЛистСсылка.ИерархияСодержимого);
	Запрос.УстановитьПараметр("ТоварыКВыгрузке", ПолучитьМассивНоменклатурыПоДеревуИерархии(АссортиментПрайсЛиста.Строки, ИмяКолонкиИерархииПрайсЛиста));
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Анализ по характеристикам, для товара с характеристикой используются фигурные скобки в наименовании
	
	ТоварыКВыгрузке = Результат[Результат.Количество()-3].Выгрузить();
	
	Для Каждого СтрокаАнализа Из ТоварыКВыгрузке Цикл
		Если НЕ ПустаяСтрока(СтрокаАнализа.НазваниеХарактеристики) Тогда
			СтрокаАнализа.НаименованиеККМ =  СтрШаблон( "%1 {%2}", СтрокаАнализа.НаименованиеККМ, СтрокаАнализа.НазваниеХарактеристики);
			СтрокаАнализа.Наименование =  СтрокаАнализа.НаименованиеККМ;
			Попытка
				СтрокаАнализа.Код = СтрокаАнализа.Код+"|"+Формат(Число(СтрокаАнализа.КодХарактеристики), "ЧГ=");
			Исключение
				СтрокаАнализа.Код = СтрокаАнализа.Код+"|"+СтрокаАнализа.КодХарактеристики;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ГруппыИТовары.Вставить("Товары", ТоварыКВыгрузке );
	ГруппыИТовары.Вставить("ТоварыКОчистке", Результат[Результат.Количество()-2].Выгрузить());
	ГруппыИТовары.Вставить("Группы", Результат[Результат.Количество()-1].Выгрузить());
	
	//// удаляем дефисы в кодах 
	//Для Каждого Строка Из ГруппыИТовары.Товары Цикл
	//	Строка.Код = СтрЗаменить(Строка.Код, "-", "");
	//	Строка.РодительКод = СтрЗаменить(Строка.РодительКод, "-", "");
	//КонецЦикла;
	//
	//// удаляем дефисы в кодах 
	//Для Каждого Строка Из ГруппыИТовары.ТоварыКОчистке Цикл
	//	Строка.Код = СтрЗаменить(Строка.Код, "-", "");
	//КонецЦикла;
	//
	//// удаляем дефисы в кодах 
	//Для Каждого Строка Из ГруппыИТовары.Группы Цикл
	//	Строка.Код = СтрЗаменить(Строка.Код, "-", "");
	//КонецЦикла;
	
	Возврат ГруппыИТовары;
	
КонецФункции

Функция НовыйЗапросГруппыИТовары() Экспорт
	
	ТекстЗапроса = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() + 
	"ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Код КАК СТРОКА(64)) КАК Код,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.НаименованиеПолное КАК СТРОКА(64)) КАК Наименование,
	|	"""" КАК НазваниеХарактеристики,
	|	"""" КАК КодХарактеристики,
	|	ЕСТЬNULL(ТоварыИУслуги.Родитель.Код, """") КАК РодительКод,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.НаименованиеПолное КАК СТРОКА(64)) КАК НаименованиеККМ,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ЕСТЬNULL(Цены.Цена, 0) * 100 КАК Цена,
	|	ВЫБОР
	|		КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 18 ИЛИ ВТСтавкиНДС.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТСтавкиНДС.СтавкаНДС.НеОблагается
	|							ТОГДА 4
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТоварыИУслуги.Артикул КАК Артикул,
	|	ИСТИНА КАК ДробноеКоличество,
	|	ЕСТЬNULL(ТоварыИУслуги.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код, """") КАК КодАлкогольнойПродукции,
	|	1 КАК Отдел
	|ИЗ
	|	Справочник.Номенклатура КАК ТоварыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДатаВремя, ВидЦен = &ВидЦен) КАК Цены
	|		ПО (Цены.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО (Штрихкоды.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТоварыИУслуги.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	НЕ ТоварыИУслуги.ПометкаУдаления
	|	И НЕ ТоварыИУслуги.ЭтоГруппа
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка,
	|	ВЫРАЗИТЬ(ТоварыИУслуги.Код КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(ТоварыИУслуги.НаименованиеПолное КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(Характеристики.НаименованиеДляПечати КАК СТРОКА(64)),
	|	ВЫРАЗИТЬ(Характеристики.Код КАК СТРОКА(64)),
	|	ЕСТЬNULL(ТоварыИУслуги.Родитель.Код, """"),
	|	ВЫРАЗИТЬ(ТоварыИУслуги.НаименованиеПолное КАК СТРОКА(64)),
	|	ЕСТЬNULL(ШтрихкодыХарактеристик.Штрихкод, """"),
	|	ЕСТЬNULL(ЦеныХарактеристик.Цена, 0) * 100,
	|	ВЫБОР
	|		КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 18 ИЛИ ВТСтавкиНДС.СтавкаНДС.Ставка = 20
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТСтавкиНДС.СтавкаНДС.Ставка = 10
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТСтавкиНДС.СтавкаНДС.НеОблагается
	|							ТОГДА 4
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ТоварыИУслуги.Артикул,
	|	ИСТИНА,
	|	ЕСТЬNULL(ТоварыИУслуги.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код, """"),
	|	1
	|ИЗ
	|	Справочник.Номенклатура КАК ТоварыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО (Характеристики.Владелец = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДатаВремя, ВидЦен = &ВидЦен) КАК ЦеныХарактеристик
	|		ПО (ЦеныХарактеристик.Номенклатура = Характеристики.Владелец)
	|			И (ЦеныХарактеристик.Характеристика = Характеристики.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыХарактеристик
	|		ПО (ШтрихкодыХарактеристик.Номенклатура = ТоварыИУслуги.Ссылка)
	|			И (ШтрихкодыХарактеристик.Характеристика = Характеристики.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТоварыИУслуги.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТоварыИУслуги.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	НЕ ТоварыИУслуги.ПометкаУдаления
	|	И НЕ ТоварыИУслуги.ЭтоГруппа
	|	И ТоварыИУслуги.ИспользоватьХарактеристики
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ТоварыИУслуги.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК ТоварыИУслуги
	|ГДЕ
	|	НЕ ТоварыИУслуги.ЭтоГруппа
	|	И ТоварыИУслуги.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.Ссылка КАК Ссылка,
	|	ТоварыИУслуги.Код КАК Код,
	|	ТоварыИУслуги.Наименование КАК Наименование,
	|	ЕСТЬNULL(ТоварыИУслуги.Родитель.Код, """") КАК РодительКод
	|ИЗ
	|	Справочник.Номенклатура КАК ТоварыИУслуги
	|ГДЕ
	|	НЕ ТоварыИУслуги.ПометкаУдаления
	|	И ТоварыИУслуги.ЭтоГруппа
	|	И ТоварыИУслуги.Ссылка В(&ТоварыКВыгрузке)";
	
	Возврат Новый Запрос(ТекстЗапроса);
	
КонецФункции

Процедура ЗаписатьТекущиеЦены(КассовыйАппарат, ТипДействия, ТоварыДляРегистрации = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	// Типы действий:
	// 0 - регистрация товаров
	// 1 - подтверждение регистрации
	// 2 - очистка товаров
	// 3 - очистка всех товаров
	
	ДатаУстановки = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ЦеныТоваровНаКассовыхАппаратах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассовыйАппарат.Установить(КассовыйАппарат);
	
	Если ТипДействия = 2 И ТоварыДляРегистрации = Неопределено Тогда
		ТипДействия = 3;
	КонецЕсли;
	
	Если ТипДействия = 0 Тогда
		Для каждого СтрокаТовар Из ТоварыДляРегистрации Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовар.Ссылка) Тогда
				Товар = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовар.Код);
			Иначе
				Товар = СтрокаТовар.Ссылка;
			КонецЕсли;
			НаборЗаписей.Отбор.Товар.Установить(Товар);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.КассовыйАппарат = КассовыйАппарат;
			НоваяЗапись.Товар = Товар;
			НоваяЗапись.Цена = СтрокаТовар.Цена/100;
			НоваяЗапись.ОбновлениеПодтверждено = Ложь;
			НоваяЗапись.ДатаУстановки = ДатаУстановки;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			НаборЗаписей.Удалить(НоваяЗапись);
		КонецЦикла;
	ИначеЕсли ТипДействия = 1 Тогда
		НаборЗаписей.Прочитать();
		ЦеныТоваров = НаборЗаписей.Выгрузить();
		Для каждого СтрокаТовар Из ЦеныТоваров Цикл
			Если НЕ СтрокаТовар.ОбновлениеПодтверждено Тогда
				СтрокаТовар.ОбновлениеПодтверждено = Истина;
				СтрокаТовар.ДатаУстановки = ДатаУстановки;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Загрузить(ЦеныТоваров);
	ИначеЕсли ТипДействия = 2 Тогда
		Для каждого СтрокаТовар Из ТоварыДляРегистрации Цикл
			НаборЗаписей.Отбор.Товар.Установить(Справочники.Номенклатура.НайтиПоКоду(СтрокаТовар));
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ТипДействия = 0 И НЕ ТипДействия = 2 Тогда
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
			Инфо = ИнформацияОбОшибке();
		КонецПопытки
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция КассыДляПроверкиТоваров()
	
	// Выбираем кассы для проверки товаров.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	"""" КАК ОбластьДанныхВспомогательныеДанные,
	|	КассовыеАппараты.РегистрационныйНомер,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Результат,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.НастройкиКассыШтрихМ КАК КассовыеАппараты
	|ГДЕ
	|	КассовыеАппараты.ПроверитьРегистрациюТоваровНаСервереШтрихМ
	|	И КассовыеАппараты.ЗарегистрированНаСервереШтрихМ");
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТоварыИКассыДляОбмена(КассаДляРегистрации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТоварыИКассыДляВыгрузки = Новый ТаблицаЗначений;
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("ГруппыТоваровДляРегистрации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("ТоварыДляРегистрации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("КассыДляРегистрации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТоварыИКассыДляВыгрузки.Колонки.Добавить("КодыТоваровДляОчистки", Новый ОписаниеТипов("Массив"));
	
	ДанныеОбмена = ТоварыИКассыДляВыгрузки.Добавить();
	
	ДанныеОбмена.КассыДляРегистрации = КассаДляРегистрации;
	
	ГруппыИТоварыДляВыгрузки = ГруппыИТоварыИзмененные(
		ИнтеграцияОбменШтрихМ.ПолучитьКассуПоРегистрационномуНомеру(КассаДляРегистрации[0].РегистрационныйНомер));
		
	ДанныеОбмена.ТоварыДляРегистрации = ГруппыИТоварыДляВыгрузки.Товары;
	ДанныеОбмена.ГруппыТоваровДляРегистрации = ГруппыИТоварыДляВыгрузки.Группы;
	ДанныеОбмена.КодыТоваровДляОчистки = ГруппыИТоварыДляВыгрузки.ТоварыКОчистке.ВыгрузитьКолонку("Код");
	
	Возврат ТоварыИКассыДляВыгрузки;
КонецФункции

Процедура ВыполнитьЗагрузкуЧекаККМ(ИнформацияПоДокументу, КассовыйАппарат, ЭтоВозврат, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено, ЧекПродажи = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	Если ЭтоВозврат Тогда
		КассовыйЧекСсылка = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ЧекККМВозврат");
	Иначе
		КассовыйЧекСсылка = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ЧекККМ");
	КонецЕсли;
	
	// По реквизитам контейнера.
	Если ЗначениеЗаполнено(КассовыйЧекСсылка) Тогда
		
		СозданныйДокумент = КассовыйЧекСсылка;
		
		// временно повторные загрузки не выполняем
		Возврат;
		
		КассовыйЧек = КассовыйЧекСсылка.ПолучитьОбъект();
		Если КассовыйЧек.Запасы.Количество()>0 Тогда
			КассовыйЧек.Запасы.Очистить();
		КонецЕсли;
		Если КассовыйЧек.БезналичнаяОплата.Количество()>0 Тогда
			КассовыйЧек.БезналичнаяОплата.Очистить();
		КонецЕсли;
		
		КассовыйЧек.СуммаДокумента = 0;
		КассовыйЧек.ПолученоНаличными = 0;
		КассовыйЧек.ЗаполнитьДокументПоКассеККМ(КассовыйАппарат);
		
	Иначе
		// Создание нового документа
		Если ЭтоВозврат Тогда
			КассовыйЧек = Документы.ЧекККМВозврат.СоздатьДокумент();
		Иначе
			КассовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
		КонецЕсли;
		
		// заполнение документа по умолчанию
		КассовыйЧек.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
		
		КассовыйЧек.НомерСменыККМ = РеквизитыДокумента.shift_number;
		КассовыйЧек.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КассовыйЧек.Организация = ОрганизацияКассы(КассовыйАппарат);
		КассовыйЧек.ВидЦен = ИнтеграцияОбменШтрихМ.РозничныйВидЦены(КассовыйАппарат);
		КассовыйЧек.НДСВключатьВСтоимость = Истина;
		КассовыйЧек.Подразделение = КассовыйАппарат.Подразделение;
		КассовыйЧек.СтруктурнаяЕдиница = КассовыйАппарат.СтруктурнаяЕдиница;
		КассовыйЧек.СуммаВключаетНДС = Истина;
		Если НЕ ЭтоВозврат Тогда
			КассовыйЧек.Статус = Перечисления.СтатусыЧековККМ.Пробит;
		КонецЕсли;
		КассовыйЧек.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	// заполняем потенциально изменяем шапку
	КассовыйЧек.НомерЧекаККМ =  РеквизитыДокумента.check_number;
	КассовыйЧек.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	КассовыйЧек.КассоваяСмена = НайтиКассовуюСмену(
		КассовыйАппарат,
		РеквизитыДокумента.shift_number,
		КассовыйЧек.Дата,
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"),
		Ложь,
		ЕстьОшибки,
		СообщениеОбОшибке);
	Если ЭтоВозврат И ЧекПродажи <> Неопределено Тогда
		КассовыйЧек.ЧекККМ = ЧекПродажи;
	КонецЕсли;
	
	КассовыйЧек.КассаККМ = КассовыйАппарат;
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	КассовыйЧек.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	
	// заполняем табличную часть товаров
	Для каждого СтрокаТоваров Из ИнформацияПоДокументу.ТоварыДокумента Цикл
		
		Если СтрокаТоваров.price = 0 ИЛИ СтрокаТоваров.sum = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗапасов = КассовыйЧек.Запасы.Добавить();
		
		// заполняем данные из штриха
		НоменклатураХарактеристика = НайтиНоменклатуруИХарактеристику(СтрокаТоваров.good_code, СтрокаТоваров.name);
		НоваяСтрокаЗапасов.Номенклатура = НоменклатураХарактеристика.Номенклатура;
		НоваяСтрокаЗапасов.Характеристика = НоменклатураХарактеристика.Характеристика;
		НоваяСтрокаЗапасов.Цена = Число(СтрокаТоваров.price)/100;
		НоваяСтрокаЗапасов.Количество = Число(СтрокаТоваров.quantity);
		НоваяСтрокаЗапасов.Всего = Число(СтрокаТоваров.sum)/100;
		
		Если НЕ ЭтоВозврат Тогда
			НоваяСтрокаЗапасов.СуммаАвтоматическойСкидки = Число(СтрокаТоваров.discount_sum)/100;
		КонецЕсли;
		
		// заполняем собственные данные
		НоваяСтрокаЗапасов.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СтавкаНДС = ПолучитьСтавкуНДСНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СуммаНДС = РассчитатьСуммуНДС(
			НоваяСтрокаЗапасов.Всего,
			ПолучитьСтавкуНДССтавкиНДС(НоваяСтрокаЗапасов.СтавкаНДС),
			КассовыйЧек.СуммаВключаетНДС);
		
		Если НЕ ЭтоВозврат Тогда
			ПроцентСкидки = Окр(?(НоваяСтрокаЗапасов.Всего = 0 , 0, 100*НоваяСтрокаЗапасов.СуммаАвтоматическойСкидки/НоваяСтрокаЗапасов.Всего), 2);
			НоваяСтрокаЗапасов.ПроцентАвтоматическойСкидки = ПроцентСкидки;
		КонецЕсли;
		
		Если НЕ КассовыйЧек.СуммаВключаетНДС Тогда
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего - НоваяСтрокаЗапасов.СуммаНДС;
		Иначе
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего;
		КонецЕсли;
		
	КонецЦикла;
	
	// оплаты
	ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(КассовыйЧек);
	Для каждого СтрокаОплаты Из ИнформацияПоДокументу.РеквизитыОплат Цикл
		
		Если Число(СтрокаОплаты.payment_type) = 2 Тогда
			НоваяСтрокаОплаты = КассовыйЧек.БезналичнаяОплата.Добавить();
			НоваяСтрокаОплаты.ВидПлатежнойКарты = "Платёжная карта";
			НоваяСтрокаОплаты.НомерПлатежнойКарты = СтрокаОплаты.card_id;
			НоваяСтрокаОплаты.Сумма = Число(СтрокаОплаты.sum)/100;
			НоваяСтрокаОплаты.НомерЧекаЭТ = СтрокаОплаты.host_operation_id;
			НоваяСтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
		Иначе 
			Если Не ЭтоВозврат Тогда
				КассовыйЧек.ПолученоНаличными = КассовыйЧек.ПолученоНаличными + Число(СтрокаОплаты.sum)/100;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если КассовыйЧек.БезналичнаяОплата.Количество() > 0 Тогда
		КассовыйЧек.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		КассовыйЧек.СуммаДокумента = КассовыйЧек.Запасы.Итог("Сумма");
	Иначе
		КассовыйЧек.СуммаДокумента = КассовыйЧек.ПолученоНаличными + КассовыйЧек.БезналичнаяОплата.Итог("Сумма");
	КонецЕсли;
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ КассовыйЧек.Ссылка.Пустая() Тогда
			КассовыйЧек.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		КассовыйЧек.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = КассовыйЧек.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		
		Если Проводить И НЕ КассовыйЧек.ПометкаУдаления Тогда
			КассовыйЧек.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуЧекаККМВозврат(ИнформацияПоДокументу, КассовыйАппарат, Проводить, ЕстьОшибки, ТекущееСообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ЧекПродажи = НайтиЧекПродажи(РеквизитыДокумента.base_check_number, КассовыйАппарат);
	
	Если ЧекПродажи = Неопределено Тогда
		ВыполнитьЗагрузкуЧекаККМКакПриходнаяНакладная(
			ИнформацияПоДокументу,
			КассовыйАппарат,
			Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя,
			Проводить,
			ЕстьОшибки,
			ТекущееСообщениеОбОшибке,
			СозданныйДокумент);
	Иначе
		ВыполнитьЗагрузкуЧекаККМ(
			ИнформацияПоДокументу,
			КассовыйАппарат,
			Истина,
			Проводить,
			ЕстьОшибки,
			ТекущееСообщениеОбОшибке,
			СозданныйДокумент,
			ЧекПродажи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуЧекаККМКакПриходнаяНакладная(ИнформацияПоДокументу, КассовыйАппарат, ВидОперации, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено, ЧекПродажи = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ПриходнаяНакладнаяСсылка = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ПриходнаяНакладная");
	
	// По реквизитам контейнера.
	Если ЗначениеЗаполнено(ПриходнаяНакладнаяСсылка) Тогда
		
		СозданныйДокумент = ПриходнаяНакладнаяСсылка;
		
		// временно повторные загрузки не выполняем
		Возврат;
		
		ПриходнаяНакладная = ПриходнаяНакладнаяСсылка.ПолучитьОбъект();
		Если ПриходнаяНакладная.Запасы.Количество()>0 Тогда
			ПриходнаяНакладная.Запасы.Очистить();
		КонецЕсли;
		Если ПриходнаяНакладная.ОплатаПлатежнымиКартами.Количество()>0 Тогда
			ПриходнаяНакладная.ОплатаПлатежнымиКартами.Очистить();
		КонецЕсли;
		
		ПриходнаяНакладная.СуммаДокумента = 0;
		ПриходнаяНакладная.ПолученоНаличными = 0;
		ПриходнаяНакладная.ЗаполнитьДокументПоКассеККМ(КассовыйАппарат);
		
	Иначе
		// Создание нового документа
		ПриходнаяНакладная = Документы.ПриходнаяНакладная.СоздатьДокумент();
		ПриходнаяНакладная.Заполнить(Неопределено);
		
		// заполнение документа по умолчанию
		ПриходнаяНакладная.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
		ПриходнаяНакладная.ВидОперации = ВидОперации;
		ПриходнаяНакладная.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		ПриходнаяНакладная.Организация = ОрганизацияКассы(КассовыйАппарат);
		ПриходнаяНакладная.НДСВключатьВСтоимость = Истина;
		ПриходнаяНакладная.Подразделение = КассовыйАппарат.Подразделение;
		ПриходнаяНакладная.СтруктурнаяЕдиница = КассовыйАппарат.СтруктурнаяЕдиница;
		ПриходнаяНакладная.СуммаВключаетНДС = Истина;
		ПриходнаяНакладная.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		ПриходнаяНакладная.Контрагент = ПолучитьКонтрагентаПоУмолчанию();
		
		
		ПриходнаяНакладная.Договор = ПолучитьДоговорПоУмолчанию(
			ПриходнаяНакладная,
			ПриходнаяНакладная.Контрагент,
			ПриходнаяНакладная.Организация,
			ПриходнаяНакладная.ВидОперации);
		
	КонецЕсли;
	
	// заполняем потенциально изменяему шапку
	ПриходнаяНакладная.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	Если ЧекПродажи <> Неопределено Тогда
		ПриходнаяНакладная.ДокументОснование = ЧекПродажи;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПриходнаяНакладная.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	
	// заполняем табличную часть товаров
	Для каждого СтрокаТоваров Из ИнформацияПоДокументу.ТоварыДокумента Цикл
		
		Если СтрокаТоваров.price = 0 ИЛИ СтрокаТоваров.sum = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗапасов = ПриходнаяНакладная.Запасы.Добавить();
		
		// заполняем данные из штриха
		НоменклатураХарактеристика = НайтиНоменклатуруИХарактеристику(СтрокаТоваров.good_code, СтрокаТоваров.name);
		НоваяСтрокаЗапасов.Номенклатура = НоменклатураХарактеристика.Номенклатура;
		НоваяСтрокаЗапасов.Характеристика = НоменклатураХарактеристика.Характеристика;
		НоваяСтрокаЗапасов.Цена = Число(СтрокаТоваров.price)/100;
		НоваяСтрокаЗапасов.Количество = Число(СтрокаТоваров.quantity);
		НоваяСтрокаЗапасов.Всего = Число(СтрокаТоваров.sum)/100;
		
		// заполняем собственные данные
		НоваяСтрокаЗапасов.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СтавкаНДС = ПолучитьСтавкуНДСНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СуммаНДС = РассчитатьСуммуНДС(
			НоваяСтрокаЗапасов.Всего,
			ПолучитьСтавкуНДССтавкиНДС(НоваяСтрокаЗапасов.СтавкаНДС),
			ПриходнаяНакладная.СуммаВключаетНДС);
		
		Если НЕ ПриходнаяНакладная.СуммаВключаетНДС Тогда
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего - НоваяСтрокаЗапасов.СуммаНДС;
		Иначе
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего;
		КонецЕсли;
		
	КонецЦикла;
	
	ПриходнаяНакладная.СуммаДокумента = ПриходнаяНакладная.Запасы.Итог("Всего");
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ ПриходнаяНакладная.Ссылка.Пустая() Тогда
			ПриходнаяНакладная.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ПриходнаяНакладная.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = ПриходнаяНакладная.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	Попытка
		Если Проводить И НЕ ПриходнаяНакладная.ПометкаУдаления Тогда
			ПриходнаяНакладная.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуЧекаККМКакРасходнаяНакладная(ИнформацияПоДокументу, КассовыйАппарат, ВидОперации, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	РасходнаяНакладнаяСсылка = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "РасходнаяНакладная");
	
	// По реквизитам контейнера.
	Если ЗначениеЗаполнено(РасходнаяНакладнаяСсылка) Тогда
		
		СозданныйДокумент = РасходнаяНакладнаяСсылка;
		
		// временно повторные загрузки не выполняем
		Возврат;
		
		ПриходнаяНакладная = РасходнаяНакладнаяСсылка.ПолучитьОбъект();
		Если ПриходнаяНакладная.Запасы.Количество()>0 Тогда
			ПриходнаяНакладная.Запасы.Очистить();
		КонецЕсли;
		Если ПриходнаяНакладная.ОплатаПлатежнымиКартами.Количество()>0 Тогда
			ПриходнаяНакладная.ОплатаПлатежнымиКартами.Очистить();
		КонецЕсли;
		
		ПриходнаяНакладная.СуммаДокумента = 0;
		ПриходнаяНакладная.ПолученоНаличными = 0;
		ПриходнаяНакладная.ЗаполнитьДокументПоКассеККМ(КассовыйАппарат);
		
	Иначе
		// Создание нового документа
		РасходнаяНакладная = Документы.РасходнаяНакладная.СоздатьДокумент();
		РасходнаяНакладная.Заполнить(Неопределено);
		
		// заполнение документа по умолчанию
		РасходнаяНакладная.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
		РасходнаяНакладная.ВидОперации = ВидОперации;
		РасходнаяНакладная.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		РасходнаяНакладная.Организация = ОрганизацияКассы(КассовыйАппарат);
		РасходнаяНакладная.НДСВключатьВСтоимость = Истина;
		РасходнаяНакладная.Подразделение = КассовыйАппарат.Подразделение;
		РасходнаяНакладная.СтруктурнаяЕдиница = КассовыйАппарат.СтруктурнаяЕдиница;
		РасходнаяНакладная.СуммаВключаетНДС = Истина;
		РасходнаяНакладная.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		РасходнаяНакладная.Контрагент = ПолучитьКонтрагентаПоУмолчанию();
		
		
		РасходнаяНакладная.Договор = ПолучитьДоговорПоУмолчанию(
			РасходнаяНакладная,
			РасходнаяНакладная.Контрагент,
			РасходнаяНакладная.Организация,
			РасходнаяНакладная.ВидОперации);
		
	КонецЕсли;
	
	// заполняем потенциально изменяему шапку
	РасходнаяНакладная.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	РасходнаяНакладная.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	
	// заполняем табличную часть товаров
	Для каждого СтрокаТоваров Из ИнформацияПоДокументу.ТоварыДокумента Цикл
		
		Если СтрокаТоваров.price = 0 ИЛИ СтрокаТоваров.sum = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗапасов = РасходнаяНакладная.Запасы.Добавить();
		
		// заполняем данные из штриха
		НоменклатураХарактеристика = НайтиНоменклатуруИХарактеристику(СтрокаТоваров.good_code, СтрокаТоваров.name);
		НоваяСтрокаЗапасов.Номенклатура = НоменклатураХарактеристика.Номенклатура;
		НоваяСтрокаЗапасов.Характеристика = НоменклатураХарактеристика.Характеристика;
		НоваяСтрокаЗапасов.Цена = Число(СтрокаТоваров.price)/100;
		НоваяСтрокаЗапасов.Количество = Число(СтрокаТоваров.quantity);
		НоваяСтрокаЗапасов.Всего = Число(СтрокаТоваров.sum)/100;
		
		// заполняем собственные данные
		НоваяСтрокаЗапасов.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СтавкаНДС = ПолучитьСтавкуНДСНоменклатуры(НоваяСтрокаЗапасов.Номенклатура);
		НоваяСтрокаЗапасов.СуммаНДС = РассчитатьСуммуНДС(
			НоваяСтрокаЗапасов.Всего,
			ПолучитьСтавкуНДССтавкиНДС(НоваяСтрокаЗапасов.СтавкаНДС),
			РасходнаяНакладная.СуммаВключаетНДС);
		
		Если НЕ РасходнаяНакладная.СуммаВключаетНДС Тогда
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего - НоваяСтрокаЗапасов.СуммаНДС;
		Иначе
			НоваяСтрокаЗапасов.Сумма = НоваяСтрокаЗапасов.Всего;
		КонецЕсли;
		
	КонецЦикла;
	
	РасходнаяНакладная.СуммаДокумента = РасходнаяНакладная.Запасы.Итог("Всего");
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ РасходнаяНакладная.Ссылка.Пустая() Тогда
			РасходнаяНакладная.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		РасходнаяНакладная.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = РасходнаяНакладная.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	Попытка
		Если Проводить И НЕ РасходнаяНакладная.ПометкаУдаления Тогда
			РасходнаяНакладная.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуВнесенияНаличных(ИнформацияПоДокументу, КассовыйАппарат, ЭтоВнесение, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ПоступлениеВКассуККМ = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "РасходИзКассы");
	
	Если ЗначениеЗаполнено(ПоступлениеВКассуККМ) Тогда
		
		СозданныйДокумент = ПоступлениеВКассуККМ;
		Возврат;
		
	КонецЕсли;
	
	РасходИзКассыОбъект = документы.РасходИзКассы.СоздатьДокумент();
	РасходИзКассыОбъект.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
	
	ДанныеЗаполнения = Новый Структура(
	"Автор,
	|ВалютаДенежныхСредств,
	|ВидОперации,
	|Касса,
	|Кратность,
	|Курс,
	|НалогообложениеНДС,
	|Организация,
	|ПериодРегистрации,
	|Подразделение,
	|СтруктурнаяЕдиница");
	
	ДанныеЗаполнения.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	ДанныеЗаполнения.ВалютаДенежныхСредств  = Константы.НациональнаяВалюта.Получить();
	ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ;
	ДанныеЗаполнения.Организация = ОрганизацияКассы(КассовыйАппарат);
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(РасходИзКассыОбъект,ДанныеЗаполнения, СтратегияЗаполнения);
	
	РасходИзКассыОбъект.КассаККМ = КассовыйАппарат;
	РасходИзКассыОбъект.НомерЧекаККМ =  РеквизитыДокумента.check_number;
	РасходИзКассыОбъект.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	
	Если ЭтоВнесение Тогда // deposit
		РасходИзКассыОбъект.СуммаДокумента = РеквизитыДокумента.deposit_sum/100;
	Иначе //buy_check
		РасходИзКассыОбъект.СуммаДокумента = 0;
		
		Для Каждого СтрокаОплаты Из ИнформацияПоДокументу.РеквизитыОплат Цикл
			РасходИзКассыОбъект.СуммаДокумента = РасходИзКассыОбъект.СуммаДокумента + СтрокаОплаты.sum/100;
		КонецЦикла;
	КонецЕсли;
	
	РасходИзКассыОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	
	// заполнение расшифровки платежа
	СтрокаТабличнойЧасти = РасходИзКассыОбъект.РасшифровкаПлатежа.Добавить();
	СтрокаТабличнойЧасти.СуммаПлатежа = РасходИзКассыОбъект.СуммаДокумента;
	СтрокаТабличнойЧасти.Курс = 1;
	СтрокаТабличнойЧасти.Кратность = 1;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ РасходИзКассыОбъект.Ссылка.Пустая() Тогда
			РасходИзКассыОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		РасходИзКассыОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = РасходИзКассыОбъект.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка 
		Если Проводить И НЕ РасходИзКассыОбъект.ПометкаУдаления Тогда
			РасходИзКассыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуРозничнаяВыручка(ИнформацияПоДокументу, КассовыйАппарат, ЭтоВыплата, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ПоступлениеВКассуККМ = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ПоступлениеВКассу");
	
	Если ЗначениеЗаполнено(ПоступлениеВКассуККМ) Тогда
		СозданныйДокумент = ПоступлениеВКассуККМ;
		Возврат;
	КонецЕсли;
	
	ПоступлениеВКассуОбъект = документы.ПоступлениеВКассу.СоздатьДокумент();
	ПоступлениеВКассуОбъект.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
	
	ДанныеЗаполнения = Новый Структура(
	"Автор,
	|ВалютаДенежныхСредств,
	|ВидОперации,
	|Касса,
	|Кратность,
	|Курс,
	|НалогообложениеНДС,
	|Организация,
	|ПериодРегистрации,
	|Подразделение,
	|СтруктурнаяЕдиница");
	
	ДанныеЗаполнения.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	ДанныеЗаполнения.ВалютаДенежныхСредств  = Константы.НациональнаяВалюта.Получить();
	ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка;
	ДанныеЗаполнения.Организация = ОрганизацияКассы(КассовыйАппарат);
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ПоступлениеВКассуОбъект,ДанныеЗаполнения, СтратегияЗаполнения);
	
	ПоступлениеВКассуОбъект.КассаККМ = КассовыйАппарат;
	ПоступлениеВКассуОбъект.НомерЧекаККМ =  РеквизитыДокумента.check_number;
	ПоступлениеВКассуОбъект.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	ПоступлениеВКассуОбъект.СтруктурнаяЕдиница = КассовыйАппарат.СтруктурнаяЕдиница;
	Если ЭтоВыплата Тогда
		ПоступлениеВКассуОбъект.СуммаДокумента = РеквизитыДокумента.payment_sum/100;
	Иначе // заполнение из РАСХОД
		
		ПоступлениеВКассуОбъект.СуммаДокумента = 0;
		
		// Операция выплаты  на карту невозможна при оплате поставщику. только наличные, поэтому нет проверки на тип оплаты.
		Для каждого СтрокаОплаты Из ИнформацияПоДокументу.РеквизитыОплат Цикл
			ПоступлениеВКассуОбъект.СуммаДокумента = ПоступлениеВКассуОбъект.СуммаДокумента + СтрокаОплаты.sum/100;
		КонецЦикла;
		
	КонецЕсли;
	ПоступлениеВКассуОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	ПоступлениеВКассуОбъект.НовыйМеханизмИнкассации = Ложь;
	
	// заполнение расшифровки платежа
	СтрокаТабличнойЧасти = ПоступлениеВКассуОбъект.РасшифровкаПлатежа.Добавить();
	СтрокаТабличнойЧасти.СуммаПлатежа = ПоступлениеВКассуОбъект.СуммаДокумента;
	СтрокаТабличнойЧасти.Курс = 1;
	СтрокаТабличнойЧасти.Кратность = 1;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	СтрокаТабличнойЧасти.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ ПоступлениеВКассуОбъект.Ссылка.Пустая() Тогда
			ПоступлениеВКассуОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ПоступлениеВКассуОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = ПоступлениеВКассуОбъект.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		Если Проводить И НЕ ПоступлениеВКассуОбъект.ПометкаУдаления Тогда
			ПоступлениеВКассуОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуОткрытияКассовойСмены(ИнформацияПоДокументу, КассовыйАппарат, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	КассоваяСмена = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ОтчетОРозничныхПродажах");
	
	// По реквизитам контейнера.
	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		
		СозданныйДокумент = КассоваяСмена;
		// временно повторные загрузки не выполняем
		Возврат;
		
		КассоваяСмена = КассоваяСмена.ПолучитьОбъект();
		Если КассоваяСмена = Неопределено Тогда
			КассоваяСмена = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		КонецЕсли;
		Если КассоваяСмена.Запасы.Количество()>0 Тогда
			КассоваяСмена.Запасы.Очистить();
		КонецЕсли;
		Если КассоваяСмена.БезналичнаяОплата.Количество()>0 Тогда
			КассоваяСмена.БезналичнаяОплата.Очистить();
		КонецЕсли;
		КассоваяСмена.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта;
		КассоваяСмена.СуммаДокумента = 0;
		
	Иначе
		
		КассоваяСмена = НайтиКассовуюСмену(
			КассовыйАппарат,
			РеквизитыДокумента.shift_number, 
			ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime),
			ИдентификаторДокумента,
			Истина,
			ЕстьОшибки, 
			СообщениеОбОшибке);
		
	КонецЕсли;
	
	// заполняем потенциально изменяему шапку
	КассоваяСмена.НомерКассовойСменыККМ =  РеквизитыДокумента.shift_number;
	КассоваяСмена.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	КассоваяСмена.КассаККМ = КассовыйАппарат;
	
	КассоваяСмена.Автор = НайтиАвтора(РеквизитыДокумента.cashier);
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ КассоваяСмена.Ссылка.Пустая() Тогда
			КассоваяСмена.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		КассоваяСмена.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = КассоваяСмена.Ссылка;
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		Если НЕ КассоваяСмена.ПометкаУдаления Тогда
			КассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуЗакрытияКассовойСмены(ИнформацияПоДокументу, КассовыйАппарат, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ОтчетОРозничныхПродажах = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ОтчетОРозничныхПродажах");
	СозданныйДокумент = ОтчетОРозничныхПродажах;
	
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		ОтчетОРозничныхПродажах = НайтиКассовуюСмену(
			КассовыйАппарат,
			РеквизитыДокумента.shift_number, 
			ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime),
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"),
			Истина,
			ЕстьОшибки, 
			СообщениеОбОшибке);
		
		Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажах.Ссылка) Тогда
			ЕстьОшибки = Истина;
			СообщениеОбОшибке = НСтр("ru='Не найдено открытие кассовой смены'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	ОтчетОРозничныхПродажах.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	
	Попытка
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗагрузкаИзВнешнегоИсточника", Истина);
		СтруктураВозвращаемоеЗначение = Документы.ОтчетОРозничныхПродажах.ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах);
		
		Если СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = Неопределено Тогда
			
			СообщениеОбОшибке = СтруктураВозвращаемоеЗначение.ОписаниеОшибки;
			ЕстьОшибки = Истина;
			Возврат;
			
		Иначе
			
		КонецЕсли;
		
		КассоваяСменаОбъект = ОтчетОРозничныхПродажах.КассоваяСмена.ПолучитьОБъект();
		
		КассоваяСменаОбъект = ОтчетОРозничныхПродажах.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ОтчетОРозничныхПродажах.Дата;
		КассоваяСменаОбъект.Статус    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		
		Если КассоваяСменаОбъект.ПометкаУдаления Тогда
			КассоваяСменаОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = КассоваяСменаОбъект.Ссылка;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПлатежКонтрагенту(ИнформацияПоДокументу, КассовыйАппарат, ПриходнаяНакладная, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ПлатежКонтрагенту = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "РасходИзКассы");
	
	Если ЗначениеЗаполнено(ПлатежКонтрагенту) Тогда
		СозданныйДокумент = ПлатежКонтрагенту;
		Возврат;
	КонецЕсли;
	
	ПлатежКонтрагентуОбъект = документы.РасходИзКассы.СоздатьДокумент();
	ПлатежКонтрагентуОбъект.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
	
	ДанныеЗаполнения = Новый Структура(
	"Автор,
	|ВалютаДенежныхСредств,
	|ВидОперации,
	|Касса,
	|Кратность,
	|Курс,
	|НалогообложениеНДС,
	|Организация,
	|ПериодРегистрации,
	|Подразделение,
	|СтруктурнаяЕдиница");
	
	ПлатежКонтрагентуОбъект.Заполнить(ПриходнаяНакладная);
	
	ПлатежКонтрагентуОбъект.КассаККМ = КассовыйАппарат;
	ПлатежКонтрагентуОбъект.НомерЧекаККМ =  РеквизитыДокумента.check_number;
	ПлатежКонтрагентуОбъект.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ ПлатежКонтрагентуОбъект.Ссылка.Пустая() Тогда
			ПлатежКонтрагентуОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		ПлатежКонтрагентуОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = ПлатежКонтрагентуОбъект.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка 
		Если Проводить И НЕ ПлатежКонтрагентуОбъект.ПометкаУдаления Тогда
			ПлатежКонтрагентуОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПлатежОтКонтрагента(ИнформацияПоДокументу, КассовыйАппарат, РасходнаяНакладная, Проводить, ЕстьОшибки, СообщениеОбОшибке, СозданныйДокумент = Неопределено)
	
	СтрокаКонтейнера = ИнформацияПоДокументу.РеквизитыКонтейнера;
	ИдентификаторДокумента = Новый УникальныйИдентификатор(СтрокаКонтейнера.doc_id);
	РеквизитыДокумента = ИнформацияПоДокументу.РеквизитыДокумента;
	
	ПлатежВозврат = НайтиЗагружаемыйДокумент(ИдентификаторДокумента, "ПоступлениеВКассу");
	
	Если ЗначениеЗаполнено(ПлатежВозврат) Тогда
		СозданныйДокумент = ПлатежВозврат;
		Возврат;
	КонецЕсли;
	
	ПлатежВозвратОбъект = документы.ПоступлениеВКассу.СоздатьДокумент();
	ПлатежВозвратОбъект.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
	
	ДанныеЗаполнения = Новый Структура(
	"Автор,
	|ВалютаДенежныхСредств,
	|ВидОперации,
	|Касса,
	|Кратность,
	|Курс,
	|НалогообложениеНДС,
	|Организация,
	|ПериодРегистрации,
	|Подразделение,
	|СтруктурнаяЕдиница");
	
	ПлатежВозвратОбъект.Заполнить(РасходнаяНакладная);
	
	ПлатежВозвратОбъект.КассаККМ = КассовыйАппарат;
	ПлатежВозвратОбъект.НомерЧекаККМ =  РеквизитыДокумента.check_number;
	ПлатежВозвратОбъект.Дата = ОбменСКассовымСерверомШтрихМ.ДатаИзСтрокиФорматаISO8601(ИнформацияПоДокументу.РеквизитыДокумента.check_datetime);
	
	Попытка
		
		// для ранее записанных снимаем пометку удаления
		Если НЕ ПлатежВозвратОбъект.Ссылка.Пустая() Тогда
			ПлатежВозвратОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		ПлатежВозвратОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныйДокумент = ПлатежВозвратОбъект.Ссылка;
		
	Исключение
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка 
		Если Проводить И НЕ ПлатежВозвратОбъект.ПометкаУдаления Тогда
			ПлатежВозвратОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуОперацииРасхода(ИнформацияПоДокументу, КассовыйАппарат, Проводить,  ЕстьОшибки, СообщениеОбОшибке, СозданныеДокументы = Неопределено)
	
	СозданныеДокументы = Новый Массив;
	СообщениеОбОшибке1  = "";
	СообщениеОбОшибке2  = "";
	СообщениеОбОшибке3  = "";
	
	
	СозданнаяНакладная = Неопределено;
	ВыполнитьЗагрузкуЧекаККМКакПриходнаяНакладная(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке1,
		СозданнаяНакладная);
	СозданныеДокументы.Добавить(СозданнаяНакладная);
	
	СозданноеВнесениеНаличныхВКассу = Неопределено;
	ВыполнитьЗагрузкуРозничнаяВыручка(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		Ложь,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке2,
		СозданноеВнесениеНаличныхВКассу);
	СозданныеДокументы.Добавить(СозданноеВнесениеНаличныхВКассу);
	
	СозданныйПлатежКонтрагенту = Неопределено;
	ВыполнитьЗагрузкуПлатежКонтрагенту(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		СозданнаяНакладная,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке3,
		СозданныйПлатежКонтрагенту);
	СозданныеДокументы.Добавить(СозданныйПлатежКонтрагенту);
	
	СообщениеОбОшибке = СообщениеОбОшибке1 + Символы.ПС + СообщениеОбОшибке2 + Символы.ПС + СообщениеОбОшибке3;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуОперацииВозвратаРасхода(ИнформацияПоДокументу, КассовыйАппарат, Проводить,  ЕстьОшибки, СообщениеОбОшибке, СозданныеДокументы = Неопределено)
	
	СозданныеДокументы = Новый Массив;
	СообщениеОбОшибке1  = "";
	СообщениеОбОшибке2  = "";
	СообщениеОбОшибке3  = "";
	
	СозданнаяНакладная = Неопределено;
	ВыполнитьЗагрузкуЧекаККМКакРасходнаяНакладная(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке1,
		СозданнаяНакладная);
	СозданныеДокументы.Добавить(СозданнаяНакладная);
	
	СозданныйПлатежКонтрагенту = Неопределено;
	ВыполнитьЗагрузкуПлатежОтКонтрагента(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		СозданнаяНакладная,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке2,
		СозданныйПлатежКонтрагенту);
	СозданныеДокументы.Добавить(СозданныйПлатежКонтрагенту);
	
	СозданноыйРасходНаличныхИзКассы = Неопределено;
	ВыполнитьЗагрузкуВнесенияНаличных(
		ИнформацияПоДокументу,
		КассовыйАппарат,
		Ложь,
		Проводить,
		ЕстьОшибки,
		СообщениеОбОшибке3,
		СозданноыйРасходНаличныхИзКассы);
	СозданныеДокументы.Добавить(СозданноыйРасходНаличныхИзКассы);
	
	СообщениеОбОшибке = СообщениеОбОшибке1 + Символы.ПС + СообщениеОбОшибке2 + Символы.ПС + СообщениеОбОшибке3;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьРеквизитамиМаркируемойПродукции(Реквизиты, Номенклатура) Экспорт
	
	ПризнакПредметаРасчета = 1;
	Если Номенклатура.ПодакцизныйТовар Тогда
		ПризнакПредметаРасчета = 2;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		ПризнакПредметаРасчета = 1;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ПризнакПредметаРасчета = 3;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ПризнакПредметаРасчета = 4;
	КонецЕсли;
	
	Реквизиты.Вставить("payment_subject_type", ПризнакПредметаРасчета);
	
	КодТипаМаркировкиККТ = "";
	Если ЗначениеЗаполнено(Номенклатура.ВидПродукцииИС) Тогда
		Если Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
			КодТипаМаркировкиККТ = "0005";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда
			КодТипаМаркировкиККТ = "1520";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
			КодТипаМаркировкиККТ = "0004";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Духи Тогда
			КодТипаМаркировкиККТ = "0006";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины Тогда
			КодТипаМаркировкиККТ = "0007";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
			КодТипаМаркировкиККТ = "0008";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
			Или Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			КодТипаМаркировкиККТ = "0009";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
			КодТипаМаркировкиККТ = "0010";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
			КодТипаМаркировкиККТ = "0011";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
			КодТипаМаркировкиККТ = "0012";
		ИначеЕсли Номенклатура.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			КодТипаМаркировкиККТ = "0014";
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.Вставить("mark_type", КодТипаМаркировкиККТ);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыПолученияДанных

Функция ПолучитьИмяКолонкиИерархииПрайсЛиста(ИерархияСодержимого)
	
	ИмяКолонки = "";
	
	Если ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияНоменклатуры Тогда
		
		ИмяКолонки = "ИерархияПоНоменклатуре";
		
	ИначеЕсли ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияЦеновыхГрупп Тогда
		
		ИмяКолонки = "ИерархияПоЦеновымГруппам";
		
	ИначеЕсли ИерархияСодержимого = Перечисления.ИерархияПрайсЛистов.ИерархияКатегорийНоменклатуры Тогда
		
		ИмяКолонки = "ИерархияПоКатегориямНоменклатуры";
		
	КонецЕсли;
	
	Возврат ИмяКолонки;
	
КонецФункции

Функция ОрганизацияКассы(КассовыйАппарат)
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассовыйАппарат,"Владелец");
	
	Возврат Организация;
	
КонецФункции

Функция НайтиЗагружаемыйДокумент(GUID, ВидДокумента)
	
	Чек = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Чеки.Ссылка
	|ИЗ
	|	Документ."+ВидДокумента +" КАК Чеки
	|ГДЕ
	|	Чеки.ИдентификаторЧекаШтрихМ = &GUIDСерверШтрихМ
	|");
	Запрос.УстановитьПараметр("GUIDСерверШтрихМ", GUID);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Чек;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Функция НайтиЧекПродажи(НомерЧекаККМ, КассовыйАппарат)
	
	Если ПустаяСтрока(НомерЧекаККМ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.НомерЧекаККМ = &НомерЧекаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧекККМ.Дата УБЫВ");
	Запрос.УстановитьПараметр("КассаККМ", КассовыйАппарат);
	Запрос.УстановитьПараметр("НомерЧекаККМ", Число(НомерЧекаККМ));
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиКассу(Знач РегистрационныйНомерКассы)
	
	//РегистрационныйНомерКассы = Формат(Число(СокрЛП(РегистрационныйНомерКассы)), "ЧГ=");
	
	Значение = ИнтеграцияОбменШтрихМ.ПолучитьКассуПоРегистрационномуНомеру(РегистрационныйНомерКассы);
	
	Возврат Значение;
	
КонецФункции

Функция НайтиКассовуюСмену(КассовыйАппарат, Знач НомерСмены, ДатаСмены, ИдентификаторДокумента, ВернутьОбъект, ЕстьОшибки, СообщениеОбОшибке) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.НомерКассовойСменыККМ = &НомерКассовойСменыККМ
	|	И НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСмены, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата УБЫВ");
	Запрос.УстановитьПараметр("НомерКассовойСменыККМ", Число(НомерСмены));
	Запрос.УстановитьПараметр("КассаККМ", КассовыйАппарат);
	Запрос.УстановитьПараметр("ДатаСмены", ДатаСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ = Выборка.Ссылка;
	Иначе
		Документ = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Документ.Пустая() Тогда
		
		СохраненныйИдентификаторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ИдентификаторЧекаШтрихМ");
		
		Если НЕ ЗначениеЗаполнено(СохраненныйИдентификаторДокумента)
			И ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДокументОбъект.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Документ = ДокументОбъект.Ссылка;
			
		КонецЕсли;
		
		Возврат ?(ВернутьОбъект, Документ.ПолучитьОбъект(),Документ);
	КонецЕсли;
	
	ДокументОбъект = СоздатьКассовуюСмену( КассовыйАппарат, НомерСмены, ДатаСмены, ИдентификаторДокумента, ЕстьОшибки, СообщениеОбОшибке);
	
	Попытка
		Если ДокументОбъект.ПометкаУдаления Тогда
			
			Если ДокументОбъект.Модифицированность() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;
	
	Если ВернутьОбъект Тогда
		Возврат ДокументОбъект;
	Иначе
		Возврат ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКассовуюСмену(КассовыйАппарат, НомерСмены, ДатаСмены, ИдентификаторДокумента, ЕстьОшибки, СообщениеОбОшибке)
	
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОтчетОРозничныхПродажах.ИдентификаторЧекаШтрихМ = ИдентификаторДокумента;
	
	
	ОтчетОРозничныхПродажах.НачалоКассовойСмены = ДатаСмены;
	ОтчетОРозничныхПродажах.КассаККМ = КассовыйАппарат;
	ОтчетОРозничныхПродажах.НомерКассовойСменыККМ = НомерСмены;
	ОтчетОРозничныхПродажах.Дата = ДатаСмены;
	ОтчетОРозничныхПродажах.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
	ОтчетОРозничныхПродажах.НДСВключатьВСтоимость = Истина;
	
	ОтчетОРозничныхПродажах.Организация = КассовыйАппарат.Владелец;
	ОтчетОРозничныхПродажах.ВидЦен = ИнтеграцияОбменШтрихМ.РозничныйВидЦены(КассовыйАппарат);
	ОтчетОРозничныхПродажах.НДСВключатьВСтоимость = Истина;
	ОтчетОРозничныхПродажах.Подразделение = КассовыйАппарат.Подразделение;
	ОтчетОРозничныхПродажах.СтруктурнаяЕдиница = КассовыйАппарат.СтруктурнаяЕдиница;
	ОтчетОРозничныхПродажах.СуммаВключаетНДС  = Истина;
	ОтчетОРозничныхПродажах.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	ОтчетОРозничныхПродажах.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ОтчетОРозничныхПродажах.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	// Создание документа кассовая смена
	
	НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассовыйАппарат);
	ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
	
	НоваяКассоваяСмена.Дата                   = ДатаСмены;
	НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
	НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаСмены;
	НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
	
	НоваяКассоваяСмена.ДополнительныеСвойства.Вставить("НеСоздаватьОтчетОРозничныхПродажах", Истина);
	
	Если НоваяКассоваяСмена.ПроверитьЗаполнение() И НЕ НоваяКассоваяСмена.ПометкаУдаления Тогда
		НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		
	Иначе
		ЕстьОшибки = Ложь;
		СообщениеОбОшибке = НСтр("ru = 'Проверьте настройки кассы ККМ.'");
		Возврат ОтчетОРозничныхПродажах.Ссылка;
	КонецЕсли;
	
	// Конец создания документа
	
	ОтчетОРозничныхПродажах.КассоваяСмена = НоваяКассоваяСмена.Ссылка;
	
	ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции

Функция НайтиАвтора(Кассир)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование
	|	И НЕ Пользователи.Служебный
	|
	|;
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный");
	
	Запрос.УстановитьПараметр("Наименование", Кассир);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка = Пакет[0].Выбрать();
	
	// Если автор найден в справочнике пользователей, тогда возвращаем его, если нет, то 
	// проверяем если пользователь только один, то подставляем его
	Если Выборка.Следующий() Тогда
		НайденныйАвтор = Выборка.Ссылка;
		Возврат НайденныйАвтор;
	КонецЕсли;
	
	Выборка = Пакет[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		НайденныйАвтор = Выборка.Ссылка;
		
		// пользователь только один - его и подставляем
		Если НЕ Выборка.Следующий() Тогда
			Возврат НайденныйАвтор;
		КонецЕсли;
		
	КонецЕсли;
	
	// находим первого с полными правами
	
	НайденныйАвтор = Справочники.Пользователи.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	// Получение списка пользователей информационной базы.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// найден первый полноправный пользователь
		Если Пользователи.РолиДоступны("ПолныеПрава",Выборка.Ссылка) Тогда
			НайденныйАвтор = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйАвтор;
	
КонецФункции

Функция НайтиНоменклатуруИХарактеристику(Код, Наименование)
	
	// отрезаем символы после вертикальной черты
	КодДляПоискаНоменклатуры = "";
	КодДляПоискаХарактеристики = "";
	
	// Код с характеристикой имеет формат "КОД_НОМЕНКЛАТУРЫ|ЧИСЛОВОЙ_КОД_ХАРАКТЕРИСТИКИ"
	ПозицияВертикальнойЧерты = СтрНайти(Код, "|");
	Если ПозицияВертикальнойЧерты > 0 Тогда
		КодДляПоискаНоменклатуры = Лев(Код, ПозицияВертикальнойЧерты-1);
		КодДляПоискаХарактеристики = Сред(Код, ПозицияВертикальнойЧерты+1);
	Иначе
		КодДляПоискаНоменклатуры = Код;
	КонецЕсли;
	
	// объект структуры для возвращения
	НоменклатураХарактеристика = Новый Структура("Номенклатура, Характеристика", Справочники.Номенклатура.ПустаяСсылка(), Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ДолжнаБытьХарактеристика = Ложь;
	
	// поиск по коду,  затем по наименованию
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|	И НЕ Номенклатура.ЭтоГруппа");
	
	Запрос.УстановитьПараметр("Код", КодДляПоискаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.Ссылка;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Номенклатура.Пустая() Тогда
		НоменклатураХарактеристика.Номенклатура = Номенклатура;
	Иначе
		
		Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(Наименование);
		
		Если НЕ Номенклатура.Пустая() Тогда
			НоменклатураХарактеристика.Номенклатура = Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
	// если номенклатура пустая, тогда создаем новый элемент справочника
	Если НоменклатураХарактеристика.Номенклатура.Пустая() Тогда
		
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		
		НоменклатураОбъект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		НоменклатураОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		НоменклатураОбъект.Наименование = Наименование;
		НоменклатураОбъект.НаименованиеПолное = Наименование;
		НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
		НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
		НоменклатураОбъект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		
		НоменклатураОбъект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		НоменклатураОбъект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		
		НоменклатураОбъект.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
		НоменклатураОбъект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		
		
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		НоменклатураОбъект.Записать();
		
		НоменклатураХарактеристика.Номенклатура = НоменклатураОбъект.Ссылка;
		
	КонецЕсли;
	
	// если используются характеристики, тогда пытаемся подобрать характеристику
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураХарактеристика.Номенклатура, "ИспользоватьХарактеристики") Тогда
		
		КодДляПоискаНормализованный = "";
		
		Попытка
			КодДляПоискаНормализованный = Формат(Число(КодДляПоискаХарактеристики),"ЧЦ=9; ЧВН=; ЧГ=");
		Исключение
			КодДляПоискаНормализованный = КодДляПоискаХарактеристики;
		КонецПопытки;
		
		НоменклатураХарактеристика.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(
			КодДляПоискаНормализованный,,,НоменклатураХарактеристика.Номенклатура);
		
	КонецЕсли;
	
	Возврат НоменклатураХарактеристика;
	
КонецФункции

Функция ПолучитьЕдиницуИзмеренияНоменклатуры(Номенклатура)
	
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ПолучитьСтавкуНДСНоменклатуры(Номенклатура)
	
	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидСтавкиНДС");
	
	Возврат Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС);
	
КонецФункции

Функция ПолучитьСтавкуНДССтавкиНДС(СтавкаНДС)
	
	СтавкаСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
	
	Возврат СтавкаСтавкиНДС;
	
КонецФункции

Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные)
	НайденныйЭТ = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ПолученныеДанные.КассаККМ);
	
	Если ЗначениеЗаполнено(НайденныйЭТ) Тогда
		Возврат НайденныйЭТ;
	КонецЕсли;
	
	НовыйЭТ = Справочники.ЭквайринговыеТерминалы.СоздатьЭлемент();
	
	// базовые реквизиты
	НовыйЭТ.Наименование = "Терминал кассы Штрих-М";
	НовыйЭТ.Организация = ПолученныеДанные.Организация;
	НовыйЭТ.Касса = ПолученныеДанные.КассаККМ;
	НовыйЭТ.СчетУчета = ПланыСчетов.Управленческий.ПереводыВПути;
	НовыйЭТ.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
	НовыйЭТ.ИспользоватьБезПодключенияОборудования = Истина;
	НовыйЭТ.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	НовыйЭТ.ВидыПлатежныхКарт.Добавить().ВидПлатежнойКарты = "Банковская карта";
	
	// ссылочные типы
	
	
	// контрагент
	КонтрагентБанк = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентБанк.Наименование = "Банк эквайрингового терминала";
	КонтрагентБанк.НаименованиеПолное = "Банк эквайрингового терминала кассы Штрих-М";
	КонтрагентБанк.Записать();
	
	НовыйЭТ.Эквайрер = КонтрагентБанк.Ссылка;
	
	// договор
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|Договоры.Ссылка КАК Договор
	|ИЗ Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ Договоры.Владелец = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентБанк.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НовыйЭТ.Договор = Выборка.Договор;
	Иначе
		ВызватьИсключение(НСтр("ru='Не найден основной договор только что созданного контрагента.'"));
	КонецЕсли;
	
	// Банковский счет
	
	НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовыйБанковскийСчет.Заполнить(ПолученныеДанные.Организация);
	НовыйБанковскийСчет.Наименование = "Банковский счет для эквайрингового терминала";
	НовыйБанковскийСчет.Записать();                         
	
	НовыйЭТ.БанковскийСчетЭквайринг = НовыйБанковскийСчет.Ссылка;
	
	НовыйЭТ.Записать();
	
	Возврат НовыйЭТ.Ссылка;
	
КонецФункции

Функция ПолучитьКонтрагентаПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование");
	
	// умышленно не пользууемся  НСтр
	Запрос.УстановитьПараметр("Наименование", "розничный покупатель");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура("Наименование", "розничный покупатель");
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Заполнить(РеквизитыКонтрагента);
	
	Контрагент.Покупатель = Истина;
	Контрагент.Поставщик = Истина;
	Контрагент.ПрочиеОтношения = Истина;
	
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции


// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену
//
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - Ставка НДС
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	
	ПроцентНДС = СтавкаНДС / 100;
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

Функция ИнформацияПоТарифам() Экспорт
	
	Попытка
		ИнформацияПоТарифам = Тарификация.КоличествоЛицензийУникальнойУслуги(ИдентификаторПоставщика(), ИдентификаторУслугиКасса());
	Исключение
		ИнформацияПоТарифам = Неопределено;
	КонецПопытки;
	
	Возврат ИнформацияПоТарифам;
КонецФункции

Функция ИдентификаторПоставщика()
	Возврат "1С_Касса";
КонецФункции

Функция ИдентификаторУслугиКасса()
	Возврат "КоличествоКасс";
КонецФункции

Процедура ОбновлениеЦенНаКассеШтрихМПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	РегистрацияНаУзлах = ?(Источник.ДополнительныеСвойства.Свойство("РегистрацияНаУзлах"), Источник.ДополнительныеСвойства.РегистрацияНаУзлах, Истина);
	Если Не РегистрацияНаУзлах Тогда			
		Возврат;
	КонецЕсли;
	
	УзелТовары = УзелТовары();
	Для Каждого Строка Из Источник Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелТовары(), Строка.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти