
#Область ПрограммныйИнтерфейс

// Процедура - Добавляет экземпляр развернутого набора в документ
//
// Параметры:
//  НоменклатураНабора			 - СправочникСсылка.Номенклатура - Набор 
//  ХарактеристикаНабора		 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора 
//  НомерВариантаКП				 - Число - Номер варианта коммерческого предложения 
//  ТабличнаяЧасть				 - ДанныеФормы, ТабличнаяЧасть - Обрабатываемая табличная часть документа
//  ПараметрыНабора				 - Структура, Неопределено - Структура параметров набора, возвращаемая функцией НаборыВызовСервера.ПараметрыНабора 
//  СтароеКоличествоЭкземпляров	 - Число - Количество экземпляров набора до изменения
//  НовоеКоличествоЭкземпляров	 - Число - Новое количество экземпляров набора
//
Процедура ДобавитьЭкземплярНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, ТабличнаяЧасть, ПараметрыНабора = Неопределено, СтароеКоличествоЭкземпляров, Знач НовоеКоличествоЭкземпляров = Неопределено) Экспорт
	
	Если ПараметрыНабора=Неопределено Тогда
		ПараметрыНабора = НаборыВызовСервера.ПараметрыНабора(НоменклатураНабора, ХарактеристикаНабора);
	Иначе
		СвернутьНабор(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ПараметрыНабора.СоставНабора);
	КонецЕсли; 
	
	ПересчитатьЦены = ТабличнаяЧасть.Количество()>0 И ТабличнаяЧасть[0].Свойство("Цена") 
	И ПараметрыНабора.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") 
	И ПараметрыНабора.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.ПустаяСсылка");
	Если ПараметрыНабора.Свойство("РежимСборки")
		И ПараметрыНабора.РежимСборки Тогда
		ПересчитатьЦены = Ложь;
	КонецЕсли;
	Если ПересчитатьЦены Тогда
		СтоимостьНабора = 0;
		СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
		Для каждого СтрокаТабличнойЧасти Из СтрокиНабора Цикл
			ЭтоРаботы = СтрокаТабличнойЧасти.Свойство("Кратность");
			СтоимостьНабора = СтоимостьНабора+СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество*?(ЭтоРаботы, СтрокаТабличнойЧасти.Кратность*СтрокаТабличнойЧасти.Коэффициент, 1);
		КонецЦикла;
	КонецЕсли;
	
	СвернутьНабор(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	
	СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НовоеКоличествоЭкземпляров=Неопределено Тогда
		НовоеКоличествоЭкземпляров = СтароеКоличествоЭкземпляров+1;
	КонецЕсли;
	
	Если СтароеКоличествоЭкземпляров=0 Тогда
		КоэффициентПересчета = 0;
	Иначе
		КоэффициентПересчета = НовоеКоличествоЭкземпляров/СтароеКоличествоЭкземпляров;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из СтрокиНабора Цикл
		ЭтоРаботы = СтрокаТабличнойЧасти.Свойство("Кратность");
		СтрокаБазовогоСостава = Неопределено;
		Для каждого ЭлементСостава Из ПараметрыНабора.СоставНабора Цикл
			Если ЭлементСостава.Номенклатура<>СтрокаТабличнойЧасти.Номенклатура
				ИЛИ ЭлементСостава.Характеристика<>СтрокаТабличнойЧасти.Характеристика
				ИЛИ (СтрокаТабличнойЧасти.Свойство("ЕдиницаИзмерения") И ЭлементСостава.ЕдиницаИзмерения<>СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаБазовогоСостава = ЭлементСостава;
			Прервать;
		КонецЦикла; 
		Если СтрокаБазовогоСостава<>Неопределено Тогда
			// Расчет по базовому количеству
			Если ЭтоРаботыПоНормеВремени(СтрокаТабличнойЧасти) Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаБазовогоСостава.Количество;
				СтрокаТабличнойЧасти.Кратность = НовоеКоличествоЭкземпляров;
			ИначеЕсли ЭтоРаботыПоФиксированнойСтоимости(СтрокаТабличнойЧасти) Тогда
				СтрокаТабличнойЧасти.Количество = 1;
				СтрокаТабличнойЧасти.Кратность = СтрокаБазовогоСостава.Количество*НовоеКоличествоЭкземпляров;
			ИначеЕсли ПараметрыНабора.Свойство("РежимСборки")
				И ПараметрыНабора.РежимСборки Тогда
				СтрокаТабличнойЧасти.КоличествоСобрано = СтрокаТабличнойЧасти.КоличествоСобрано
					+ СтрокаБазовогоСостава.Количество*(НовоеКоличествоЭкземпляров-СтароеКоличествоЭкземпляров);
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаБазовогоСостава.Количество*НовоеКоличествоЭкземпляров;
			КонецЕсли;
			Если ПараметрыНабора.Свойство("РежимСборки")
				И ПараметрыНабора.РежимСборки Тогда
				ПересчитыватьДолюСтоимости = Ложь;
			Иначе
				ПересчитыватьДолюСтоимости = Истина;
			КонецЕсли;
			Если ПересчитыватьДолюСтоимости Тогда
				СтрокаТабличнойЧасти.ДоляСтоимости = СтрокаБазовогоСостава.ДоляСтоимости*НовоеКоличествоЭкземпляров;
			КонецЕсли;
		Иначе
			// Пропорциональный расчет
			Если ЭтоРаботыПоНормеВремени(СтрокаТабличнойЧасти) ИЛИ ЭтоРаботыПоФиксированнойСтоимости(СтрокаТабличнойЧасти) Тогда
				СтрокаТабличнойЧасти.Кратность = СтрокаТабличнойЧасти.Кратность*КоэффициентПересчета;
			ИначеЕсли ПараметрыНабора.Свойство("РежимСборки")
				И ПараметрыНабора.РежимСборки Тогда
				СтрокаТабличнойЧасти.КоличествоСобрано = СтрокаТабличнойЧасти.КоличествоСобрано*КоэффициентПересчета;
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество*КоэффициентПересчета;
			КонецЕсли;
			Если ПараметрыНабора.Свойство("РежимСборки")
				И ПараметрыНабора.РежимСборки Тогда
				ПересчитыватьДолюСтоимости = Ложь;
			Иначе
				ПересчитыватьДолюСтоимости = Истина;
			КонецЕсли;
			Если ПересчитыватьДолюСтоимости Тогда
				СтрокаТабличнойЧасти.ДоляСтоимости = СтрокаТабличнойЧасти.ДоляСтоимости*КоэффициентПересчета;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПересчитатьЦены Тогда
		СтоимостьНабора = Окр(СтоимостьНабора*?(КоэффициентПересчета=0, 1, КоэффициентПересчета), 2);
		ПересчитатьЦены(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть, СтоимостьНабора, ПараметрыНабора);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - Удаляет экземпляр развернутого набора из документа
//
// Параметры:
//  НоменклатураНабора			 - СправочникСсылка.Номенклатура - Набор 
//  ХарактеристикаНабора		 - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора 
//  НомерВариантаКП				 - Число - Номер варианта коммерческого предложения 
//  ТабличнаяЧасть				 - ДанныеФормы, ТабличнаяЧасть - Обрабатываемая табличная часть документа
//  ПараметрыНабора				 - Структура, Неопределено - Структура параметров набора, возвращаемая функцией НаборыВызовСервера.ПараметрыНабора 
//  СтароеКоличествоЭкземпляров	 - Число - Количество экземпляров набора до изменения
//  НовоеКоличествоЭкземпляров	 - Число - Новое количество экземпляров набора
//
Процедура УдалитьЭкземплярНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, ТабличнаяЧасть, ПараметрыНабора = Неопределено, СтароеКоличествоЭкземпляров, Знач НовоеКоличествоЭкземпляров = Неопределено) Экспорт
	
	Если ПараметрыНабора=Неопределено Тогда
		ПараметрыНабора = НаборыВызовСервера.ПараметрыНабора(НоменклатураНабора, ХарактеристикаНабора);
	Иначе
		СвернутьНабор(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ПараметрыНабора.СоставНабора);
	КонецЕсли; 
	
	ПересчитатьЦены = ТабличнаяЧасть.Количество()>0 
	И ТабличнаяЧасть[0].Свойство("Цена") 
	И ПараметрыНабора.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") 
	И ПараметрыНабора.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.ПустаяСсылка"); 
	Если ПересчитатьЦены Тогда
		СтоимостьНабора = 0;
		СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
		Для каждого СтрокаТабличнойЧасти Из СтрокиНабора Цикл
			ЭтоРаботы = СтрокаТабличнойЧасти.Свойство("Кратность");
			СтоимостьНабора = СтоимостьНабора+СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество*?(ЭтоРаботы, СтрокаТабличнойЧасти.Кратность*СтрокаТабличнойЧасти.Коэффициент, 1);
		КонецЦикла; 
	КонецЕсли;
	
	СвернутьНабор(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	
	СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НовоеКоличествоЭкземпляров=Неопределено Тогда
		НовоеКоличествоЭкземпляров = СтароеКоличествоЭкземпляров-1;
	КонецЕсли;
	Если СтароеКоличествоЭкземпляров=0 Тогда
		КоэффициентПересчета = 0;
	Иначе
		КоэффициентПересчета = НовоеКоличествоЭкземпляров/СтароеКоличествоЭкземпляров;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для каждого Стр Из СтрокиНабора Цикл
		ЭтоРаботы = Стр.Свойство("Кратность");
		Если Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1)=0 Тогда
			СтрокиКУдалению.Добавить(Стр);
			Продолжить;
		КонецЕсли;
		СтрокаБазовогоСостава = Неопределено;
		Для каждого ЭлементСостава Из ПараметрыНабора.СоставНабора Цикл
			Если ЭлементСостава.Номенклатура<>Стр.Номенклатура
				ИЛИ ЭлементСостава.Характеристика<>Стр.Характеристика
				ИЛИ (Стр.Свойство("ЕдиницаИзмерения") И ЭлементСостава.ЕдиницаИзмерения<>Стр.ЕдиницаИзмерения) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаБазовогоСостава = ЭлементСостава;
			Прервать;
		КонецЦикла; 
		Если СтрокаБазовогоСостава<>Неопределено Тогда
			// Расчет по базовому количеству
			Если ЭтоРаботыПоНормеВремени(Стр) Тогда
				Стр.Количество = СтрокаБазовогоСостава.Количество;
				Стр.Кратность = НовоеКоличествоЭкземпляров;
			ИначеЕсли ЭтоРаботыПоФиксированнойСтоимости(Стр) Тогда
				Стр.Количество = 1;
				Стр.Кратность = СтрокаБазовогоСостава.Количество*НовоеКоличествоЭкземпляров;
			Иначе
				Стр.Количество = СтрокаБазовогоСостава.Количество*НовоеКоличествоЭкземпляров;
			КонецЕсли; 
			Стр.ДоляСтоимости = СтрокаБазовогоСостава.ДоляСтоимости*НовоеКоличествоЭкземпляров;
		Иначе
			// Пропорциональный расчет
			Если ЭтоРаботыПоНормеВремени(Стр) ИЛИ ЭтоРаботыПоФиксированнойСтоимости(Стр) Тогда
				Стр.Кратность = Стр.Кратность*КоэффициентПересчета;
			Иначе
				Стр.Количество = Стр.Количество*КоэффициентПересчета;
			КонецЕсли;
			Стр.ДоляСтоимости = Стр.ДоляСтоимости*КоэффициентПересчета;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Стр Из СтрокиКУдалению Цикл
		СтрокиНабора.Удалить(СтрокиНабора.Найти(Стр));
		ТабличнаяЧасть.Удалить(Стр);
	КонецЦикла;
	
	Если ПересчитатьЦены Тогда
		СтоимостьНабора = Окр(СтоимостьНабора*КоэффициентПересчета, 2);
		ПересчитатьЦены(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть, СтоимостьНабора, ПараметрыНабора);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - Распределяет отличие стоимости набора и стоимости комплектующих по составу набора
//
// Параметры:
//  НоменклатураНабора	 - СправочникСсылка.Номенклатура - Набор
//  ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора
//  НомерВариантаКП		 - Число - Номер варианта коммерческого предложения
//  СоставНабора		 - ТаблицаЗначений - Таблица состава набора, сформированная процедурой НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры 
//  СуммаРасхождения	 - Число - Сумма, которую следует распределить по составу
//
Процедура ОкруглениеЦеныНабора(НоменклатураНабора = Неопределено, ХарактеристикаНабора = Неопределено, НомерВариантаКП = Неопределено, СоставНабора, СуммаРасхождения) Экспорт
	
	СуммаРасхождения = Окр(СуммаРасхождения, 3);
	СуммаРасхождения = Окр(СуммаРасхождения, 2, ?(СуммаРасхождения<0, РежимОкругления.Окр15как20, РежимОкругления.Окр15как10));
	Если СуммаРасхождения=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЦены = Ложь;
	Для каждого ЭлементСостава Из СоставНабора Цикл
		Если ЗначениеЗаполнено(ЭлементСостава.Цена) Тогда
			ЕстьЦены = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Если НЕ ЕстьЦены Тогда
		// Если не заполнены цены состава - округление не выполняем.
		Возврат;
	КонецЕсли; 
	
	// 1. Построчное округление на сумму расхождения
	Для каждого ОписаниеСостава Из СоставНабора Цикл
		Если НоменклатураНабора<>Неопределено И ОписаниеСостава.НоменклатураНабора<>НоменклатураНабора Тогда
			Продолжить;
		КонецЕсли; 
		Если ХарактеристикаНабора<>Неопределено И ОписаниеСостава.ХарактеристикаНабора<>ХарактеристикаНабора Тогда
			Продолжить;
		КонецЕсли; 
		Если НомерВариантаКП<>Неопределено И ОписаниеСостава.НомерВариантаКП<>НомерВариантаКП Тогда
			Продолжить;
		КонецЕсли; 
		Если ОписаниеСостава.Цена=0 ИЛИ ОписаниеСостава.Количество*?(ОписаниеСостава.Свойство("Кратность"), ОписаниеСостава.Кратность*ОписаниеСостава.Коэффициент, 1)=0 Тогда
			Продолжить;
		КонецЕсли; 
		Если Окр(СуммаРасхождения, 2)=0 Тогда
			Прервать;
		КонецЕсли;
		РасхождениеСтроки = Окр(СуммаРасхождения/(ОписаниеСостава.Количество*?(ОписаниеСостава.Свойство("Кратность"), ОписаниеСостава.Кратность*ОписаниеСостава.Коэффициент, 1)), 2);
		Если РасхождениеСтроки=0 Тогда
			Продолжить;
		КонецЕсли; 
		ОписаниеСостава.Цена = ОписаниеСостава.Цена+РасхождениеСтроки;
		СуммаРасхождения = СуммаРасхождения-РасхождениеСтроки*ОписаниеСостава.Количество*?(ОписаниеСостава.Свойство("Кратность"), ОписаниеСостава.Кратность*ОписаниеСостава.Коэффициент, 1);
	КонецЦикла;
	
	// 2. Поиск строки состава с количеством равным единице
	Если Окр(СуммаРасхождения, 2)<>0 Тогда
		Для каждого ОписаниеСостава Из СоставНабора Цикл
			Если НЕ ИскомаяСтрокаНабора(ОписаниеСостава, НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП) Тогда
				Продолжить;
			КонецЕсли; 
			Если ОписаниеСостава.Количество*?(ОписаниеСостава.Свойство("Кратность"), ОписаниеСостава.Кратность*ОписаниеСостава.Коэффициент, 1)=1 Тогда
				ОписаниеСостава.Цена = ОписаниеСостава.Цена+Окр(СуммаРасхождения, 2);
				СуммаРасхождения = СуммаРасхождения-Окр(СуммаРасхождения, 2);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// 3. Выделяем отдельную строку состава для корректировки округлений
	Если Окр(СуммаРасхождения, 2)<>0 Тогда
		ОписаниеСостава = Неопределено;
		КоличествоЭлементов = СоставНабора.Количество();
		Для ии = 1 По КоличествоЭлементов Цикл
			ТекущаяСтрока = СоставНабора[КоличествоЭлементов-ии];
			Если НЕ ИскомаяСтрокаНабора(ТекущаяСтрока, НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП) Тогда
				Продолжить;
			КонецЕсли; 
			// Заказ-наряд
			// Строки сразу с несколькими количественными показателями >1 не подходят
			РасчетПоНорме = ТекущаяСтрока.Свойство("ФиксированнаяСтоимость") И НЕ ТекущаяСтрока.ФиксированнаяСтоимость 
			И (НЕ ТекущаяСтрока.Свойство("ТипНоменклатуры") ИЛИ ТекущаяСтрока.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			Если ТекущаяСтрока.Свойство("Кратность") 
				И ((ТекущаяСтрока.Количество>1 И ТекущаяСтрока.Кратность>1) 
				ИЛИ (ТекущаяСтрока.Количество>1 И ТекущаяСтрока.Коэффициент>1)
				ИЛИ (ТекущаяСтрока.Кратность>1 И ТекущаяСтрока.Коэффициент>1))
				ИЛИ РасчетПоНорме Тогда
				Продолжить;
			КонецЕсли; 
			// Конец Заказ-наряд
			Если ТекущаяСтрока.Количество*?(ТекущаяСтрока.Свойство("Кратность"), ТекущаяСтрока.Кратность*ТекущаяСтрока.Коэффициент, 1)>1 Тогда
				ОписаниеСостава = ТекущаяСтрока;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если ОписаниеСостава<>Неопределено Тогда
			Если ТипЗнч(ОписаниеСостава)=Тип("Структура") Тогда
				#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				НоваяСтрока = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеСостава);
				#Иначе
				НоваяСтрока = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ОписаниеСостава);
				#КонецЕсли 
				ИндексВставки = СоставНабора.Найти(ОписаниеСостава)+1;
				Если ИндексВставки>=СоставНабора.Количество() Тогда
					СоставНабора.Добавить(НоваяСтрока);
				Иначе
					СоставНабора.Вставить(ИндексВставки, НоваяСтрока);
				КонецЕсли; 
			Иначе
				ИндексВставки = СоставНабора.Индекс(ОписаниеСостава)+1;
				Если ИндексВставки>=СоставНабора.Количество() Тогда
					НоваяСтрока = СоставНабора.Добавить();
				Иначе
					НоваяСтрока = СоставНабора.Вставить(ИндексВставки);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава);
				Если НоваяСтрока.Свойство("КлючСвязи") Тогда
			        НоваяСтрока.КлючСвязи = 0;
				КонецЕсли; 
				Если НоваяСтрока.Свойство("КлючСвязиДляСкидокНаценок") Тогда
			        НоваяСтрока.КлючСвязиДляСкидокНаценок = 0;
				КонецЕсли;
				ЗаполнитьРеквизитыНовойСтроки(СоставНабора, НоваяСтрока);
			КонецЕсли; 
			НоваяСтрока.Количество = 1;
			Если ОписаниеСостава.Свойство("Кратность") Тогда
				НоваяСтрока.Кратность = 1;
				НоваяСтрока.Коэффициент = 1;
			КонецЕсли;
			Если ОписаниеСостава.Количество>1 Тогда
				ОписаниеСостава.Количество = ОписаниеСостава.Количество-1;
			ИначеЕсли ОписаниеСостава.Свойство("Кратность") И ОписаниеСостава.Кратность>1 Тогда
				ОписаниеСостава.Кратность = ОписаниеСостава.Кратность-1;
			ИначеЕсли ОписаниеСостава.Свойство("Коэффициент") И ОписаниеСостава.Коэффициент>1 Тогда
				ОписаниеСостава.Коэффициент = ОписаниеСостава.Коэффициент-1;
			КонецЕсли; 
			НоваяСтрока.Цена = НоваяСтрока.Цена+Окр(СуммаРасхождения, 2);
			НоваяСтрока.ДоляСтоимости = 0;
			Если ТипЗнч(НоваяСтрока)=Тип("Структура") Тогда
				НоваяСтрока.Вставить("КорректировкаЦены", Истина);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Разворачивает набор в табличной части документа до составляющих
//
// Параметры:
//  Объект				 - ДанныеФормы, ДокументОбъект - обрабатываемый экземпляр документа
//  ИмяТабличнойЧасти	 - Строка - Имя обрабатываемой табличной части документа
//  СтрокаТабличнойЧасти - ДанныеФормыЭлементКоллекции, СтрокаТабличнойЧасти - Строка табличной части, содержащая набор
//  СтруктураДанные		 - Структура - Структура параметров набора, сформированная процедурой НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры
//
Процедура ЗаменитьСтрокуДаннымиНабора(Объект, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураДанные) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ЕстьВариантыКП = (ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "НомерВариантаКП") И ТабличнаяЧасть.Итог("НомерВариантаКП") > 0);
	ЕстьКратность = (ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "Кратность"));
	ЭтоВозврат = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная"));
	ЭтоЗаказНаряд = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
	ПоложениеСклада = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ПоложениеСклада"), Объект.ПоложениеСклада, Неопределено);
	
	ИндексСтроки = ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
	КоличествоНаборов = ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СброситьФлагСкидкиРассчитаны", Истина);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
	ИндексСтроки = ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
	КоличествоНаборов = ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
	ДобавленыСтроки = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
	Если ЕстьВариантыКП Тогда
		СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
	КонецЕсли;
	ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Если ДобавленныеСтроки.Количество() = 0 Тогда
		
		Если НЕ СтруктураДанные.Свойство("СоставНабора") Тогда
			Если СтруктураДанные.Свойство("ВидОперации") Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Наборы недоступны для операции ""%1""'"), СтруктураДанные.ВидОперации);
			Иначе
				ТекстСообщения = НСтр("ru = 'Наборы недоступны для документа'");
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТабличнаяЧасть.Удалить(СтрокаТабличнойЧасти);
			Возврат;
		КонецЕсли; 
		Если СтруктураДанные.СоставНабора.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен состав набора'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		
		// Добавление строк состава набора
		Если СтруктураДанные.Свойство("РежимСборки")
			И СтруктураДанные.РежимСборки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В заказе отсутствует ""%1"". Позиция не добавлена'"), СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			
			ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
			
			Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСостава);
				Если ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "ЕдиницаИзмерения") Тогда
					СтруктураПоиска.Вставить("ЕдиницаИзмерения", ОписаниеСостава.ЕдиницаИзмерения);
				КонецЕсли; 
				СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
				Если ЕстьВариантыКП Тогда
					СтруктураПоиска.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
				КонецЕсли; 
				СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
				Если ОписаниеСостава.Свойство("КорректировкаЦены") И ОписаниеСостава.КорректировкаЦены Тогда
					СтруктураПоиска.Вставить("Цена", СтрокаТабличнойЧасти.Цена);
				КонецЕсли;
				НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока = НайденныеСтроки[0];
					Если СтруктураДанные.СпособРасчетаЦеныНабора <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") Тогда
						Если НоваяСтрока.Количество + ОписаниеСостава.Количество <> 0 И НоваяСтрока.Цена <> ОписаниеСостава.Цена Тогда
							НоваяСтрока.Цена = (НоваяСтрока.Количество * НоваяСтрока.Цена + ОписаниеСостава.Количество * ОписаниеСостава.Цена) 
								/ (НоваяСтрока.Количество + ОписаниеСостава.Количество);
						КонецЕсли; 
					КонецЕсли; 
					Если ЕстьКратность Тогда
						Если ОписаниеСостава.Свойство("ФиксированнаяСтоимость") И ОписаниеСостава.ФиксированнаяСтоимость Тогда
							НоваяСтрока.Кратность = НоваяСтрока.Кратность + ОписаниеСостава.Количество 
								* ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
						Иначе
							НоваяСтрока.Кратность = НоваяСтрока.Кратность+?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
						КонецЕсли; 
					КонецЕсли; 
				Иначе
					НоваяСтрока = ТабличнаяЧасть.Вставить(ИндексСтроки);
					ИндексСтроки = ИндексСтроки + 1;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава, , "Количество, ДоляСтоимости");
					Если ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "НоменклатураСсылка") Тогда
						НоваяСтрока.НоменклатураСсылка = НоваяСтрока.Номенклатура;
					КонецЕсли; 
					НоваяСтрока.НоменклатураНабора = СтрокаТабличнойЧасти.Номенклатура;
					НоваяСтрока.ХарактеристикаНабора = СтрокаТабличнойЧасти.Характеристика;
					Если ЕстьВариантыКП Тогда
						НоваяСтрока.НомерВариантаКП = СтрокаТабличнойЧасти.НомерВариантаКП;
					КонецЕсли; 
					Если СтруктураДанные.Свойство("ПроцентСкидкиНаценки") Тогда
						НоваяСтрока.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
					Иначе
						НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
					КонецЕсли;
					Если ЕстьКратность И Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						НоваяСтрока.ВидРабот = СтрокаТабличнойЧасти.ВидРабот;
					КонецЕсли;
					Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "КартинкаНабора") Тогда
						НоваяСтрока.КартинкаНабора = Объект.ДобавленныеНаборы.Индекс(ДобавленнаяСтрока) + 1;
						Если НоваяСтрока.КартинкаНабора > 5 Тогда
							НоваяСтрока.КартинкаНабора = ((НоваяСтрока.КартинкаНабора - 1) % 5) + 1;
						КонецЕсли; 
					КонецЕсли; 
					Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "КлючСвязи") Тогда
						ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, НоваяСтрока, "КлючСвязи");
					КонецЕсли; 
					Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "Пометка") Тогда
						НоваяСтрока.Пометка = СтрокаТабличнойЧасти.Пометка;
					КонецЕсли; 
					Если ЕстьКратность Тогда
						НоваяСтрока.Коэффициент = 1;
						ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, НоваяСтрока, "КлючСвязиДляСкидокНаценок");
					КонецЕсли; 
					ДобавленыСтроки = Истина;
				КонецЕсли;
				Если ЕстьКратность Тогда
					Если ОписаниеСостава.Свойство("ФиксированнаяСтоимость") И ОписаниеСостава.ФиксированнаяСтоимость Тогда
						НоваяСтрока.Количество = 1;
						НоваяСтрока.Кратность = НоваяСтрока.Кратность + ОписаниеСостава.Количество 
							* ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
					Иначе
						НоваяСтрока.Количество = ОписаниеСостава.Количество;
						НоваяСтрока.Кратность = НоваяСтрока.Кратность + ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
					КонецЕсли; 
				Иначе
					НоваяСтрока.Количество = НоваяСтрока.Количество + ОписаниеСостава.Количество*КоличествоНаборов;
				КонецЕсли;
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "Вес") И ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "ВесЕдиницыТовара") Тогда
					НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
				КонецЕсли;
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "Объем") И ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "ОбъемЕдиницыТовара") Тогда
					НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
				КонецЕсли;
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "Резерв") Тогда
					НоваяСтрока.Резерв = НоваяСтрока.Резерв + ОписаниеСостава.Количество * СтрокаТабличнойЧасти.Резерв;
				КонецЕсли; 
				Если ЭтоЗаказНаряд И ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "РезервОтгрузка") Тогда
					НоваяСтрока.РезервОтгрузка = НоваяСтрока.РезервОтгрузка + ОписаниеСостава.Количество * СтрокаТабличнойЧасти.РезервОтгрузка;
				КонецЕсли;
				НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимости + ОписаниеСостава.ДоляСтоимости * КоличествоНаборов;
				Если ТипЗнч(НоваяСтрока) = Тип("ДанныеФормыЭлементКоллекции") Тогда
					ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, ПараметрыРасчета);
				Иначе
					РассчитатьСуммыВСтрокеТЧ(ТабличнаяЧасть, НоваяСтрока, ПараметрыРасчета);
				КонецЕсли; 
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "СтруктурнаяЕдиница") Тогда
					Если ЗначениеЗаполнено(ОписаниеСостава.Склад) 
						И ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						Если СтруктураДанные.Свойство("СписокДоступныхСкладов")
							И СтруктураДанные.СписокДоступныхСкладов.НайтиПоЗначению(ОписаниеСостава.Склад) <> Неопределено Тогда
							НоваяСтрока.СтруктурнаяЕдиница = ОписаниеСостава.Склад;
						Иначе
							НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
						КонецЕсли;
					Иначе
						НоваяСтрока.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
					КонецЕсли; 
				КонецЕсли;
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "СтруктурнаяЕдиницаРезерв") Тогда
					Если ЗначениеЗаполнено(ОписаниеСостава.Склад) 
						И ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = ОписаниеСостава.Склад;
					Иначе
						НоваяСтрока.СтруктурнаяЕдиницаРезерв = Объект.СтруктурнаяЕдиницаРезерв;
					КонецЕсли; 
				КонецЕсли;
				Если ЕстьКолонка(ТабличнаяЧасть, НоваяСтрока, "Ячейка") Тогда
					Если ЗначениеЗаполнено(ОписаниеСостава.Ячейка) Тогда
						НоваяСтрока.Ячейка = ОписаниеСостава.Ячейка;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ячейка") Тогда 
						НоваяСтрока.Ячейка = Объект.Ячейка;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		// Добавление экземпляров набора
		ДобавленнаяСтрока = ДобавленныеСтроки[0];
		ДобавитьЭкземплярНабора(
			СтрокаТабличнойЧасти.Номенклатура,
			СтрокаТабличнойЧасти.Характеристика,
			?(ЕстьВариантыКП, СтрокаТабличнойЧасти.НомерВариантаКП, Неопределено),
			ТабличнаяЧасть,
			СтруктураДанные,
			ДобавленнаяСтрока.Количество,
			ДобавленнаяСтрока.Количество+КоличествоНаборов);
		
		Если СтруктураДанные.Свойство("РежимСборки")
			И СтруктураДанные.РежимСборки Тогда
			РассчитыватьСуммы = Ложь;
		Иначе
			РассчитыватьСуммы = Истина;
		КонецЕсли;
		
		Если РассчитыватьСуммы Тогда
			
			СтрокиНабора = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНабора Из СтрокиНабора Цикл
				ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаНабора, ПараметрыРасчета);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавленнаяСтрока.Количество = ДобавленнаяСтрока.Количество + КоличествоНаборов;
	
	ТабличнаяЧасть.Удалить(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Функция - Возвращает номер картинки набора в коллекции для строки табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - ДанныеФормыЭлементКоллекции, СтрокаТабличной части - Строка табличной части, для которой
//                                                                              получается картинка набора
//  ДобавленныеНаборы	 - ДанныеФормы, ТабличнаяЧасть - Таблица добавленных наборов. Индекс картинки определяется по индексу строки набора в этой табличной части
// 
// Возвращаемое значение:
//   Число - Номер картинки набора
//
Функция КартинкаНабора(СтрокаТабличнойЧасти, ДобавленныеНаборы) Экспорт
	
	Если ДобавленныеНаборы.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли; 
	Если НЕ СтрокаТабличнойЧасти.Свойство("НоменклатураНабора") Тогда
		Возврат 0;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураНабора) Тогда
		Возврат 0;
	КонецЕсли;
	ИспользуетсяМассивСтрок = (ТипЗнч(ДобавленныеНаборы)=Тип("Массив"));
	ЕстьВариантыКП = (СтрокаТабличнойЧасти.Свойство("НомерВариантаКП"));
	
	Если ИспользуетсяМассивСтрок Тогда
		ДобавленныеСтроки = Новый Массив;
		Для каждого ДобавленнаяСтрока Из ДобавленныеНаборы Цикл
			Если ДобавленнаяСтрока.НоменклатураНабора<>СтрокаТабличнойЧасти.НоменклатураНабора ИЛИ ДобавленнаяСтрока.ХарактеристикаНабора<>СтрокаТабличнойЧасти.ХарактеристикаНабора Тогда
				Продолжить;
			КонецЕсли; 
			Если ЕстьВариантыКП И ДобавленнаяСтрока.НомерВариантаКП<>СтрокаТабличнойЧасти.НомерВариантаКП Тогда
				Продолжить;
			КонецЕсли;
			ДобавленныеСтроки.Добавить(ДобавленнаяСтрока);
			Прервать;
		КонецЦикла; 
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.ХарактеристикаНабора);
		Если ЕстьВариантыКП Тогда
			СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТабличнойЧасти.НомерВариантаКП);
		КонецЕсли;
		ДобавленныеСтроки = ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	КонецЕсли; 
	Если ДобавленныеСтроки.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Если ИспользуетсяМассивСтрок Тогда
			КартинкаНабора = ДобавленныеНаборы.Найти(ДобавленныеСтроки[0])+1;
		Иначе
			КартинкаНабора = ДобавленныеНаборы.Индекс(ДобавленныеСтроки[0])+1;
		КонецЕсли; 
		Если КартинкаНабора>5 Тогда
			КартинкаНабора = ((КартинкаНабора - 1) % 5) + 1;
		КонецЕсли; 
		Возврат КартинкаНабора;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура РассчитатьСуммыВСтрокеТЧ(ТабличнаяЧасть, СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт

	Если ПараметрыРасчета.Свойство("РассчитатьСуммуСкидки")=Неопределено И ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки")=Неопределено Тогда
		ПараметрыРасчета.Вставить("РассчитатьСуммуСкидки", Истина);
	КонецЕсли;
	
	Если ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "Кратность") И ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "Коэффициент") Тогда
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент;
	Иначе
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Сумма = КоличествоСтроки * СтрокаТабличнойЧасти.Цена;
	
	Если ПараметрыРасчета.Свойство("СброситьФлагСкидкиРассчитаны") И ПараметрыРасчета.СброситьФлагСкидкиРассчитаны
		И ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "ПроцентАвтоматическойСкидки")
		Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	КонецЕсли;
	
	Если ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "ПроцентСкидкиНаценки") Тогда
		Если ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки") И ПараметрыРасчета.РассчитатьПроцентСкидки И СтрокаТабличнойЧасти.Сумма > 0 Тогда //Если ввел сумму скидки
			Если СтрокаТабличнойЧасти.СуммаСкидкиНаценки >= СтрокаТабличнойЧасти.Сумма Тогда
				СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.Сумма = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100;
			Иначе
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Окр(100*СтрокаТабличнойЧасти.СуммаСкидкиНаценки / (КоличествоСтроки * СтрокаТабличнойЧасти.Цена), 2);
			КонецЕсли;
		Иначе  //Если ввел процент скидки или по-умолчанию, если указан процент и сумма, пересчитываем сумму скидки из процента
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Окр(КоличествоСтроки * СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100, 2);
		КонецЕсли;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЕсли;
	
	Если ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, "СуммаСкидки") Тогда
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЕсли; 
	
	ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовойСтроки(ТабличнаяЧасть, НоваяСтрока) Экспорт
	
	Если НоваяСтрока.Свойство("КлючСвязи") Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, НоваяСтрока, "КлючСвязи");
	КонецЕсли; 
	Если НоваяСтрока.Свойство("КлючСвязиДляСкидокНаценок") Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, НоваяСтрока, "КлючСвязиДляСкидокНаценок");
	КонецЕсли;
	Если НоваяСтрока.Свойство("Вес") И НоваяСтрока.Свойство("ВесЕдиницыТовара") Тогда
		НоваяСтрока.Вес = НоваяСтрока.ВесЕдиницыТовара * НоваяСтрока.Количество;
	КонецЕсли; 
	Если НоваяСтрока.Свойство("Объем") И НоваяСтрока.Свойство("ОбъемЕдиницыТовара") Тогда
		НоваяСтрока.Объем = НоваяСтрока.ОбъемЕдиницыТовара * НоваяСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ЭтоРаботыПоНормеВремени(СтрокаТабличнойЧасти)
	
	Возврат СтрокаТабличнойЧасти.Свойство("Кратность") И (НЕ СтрокаТабличнойЧасти.Свойство("ФиксированнаяСтоимость") ИЛИ НЕ СтрокаТабличнойЧасти.ФиксированнаяСтоимость);	
	
КонецФункции

Функция ЭтоРаботыПоФиксированнойСтоимости(СтрокаТабличнойЧасти)
	
	Возврат СтрокаТабличнойЧасти.Свойство("Кратность") И СтрокаТабличнойЧасти.Свойство("ФиксированнаяСтоимость") И СтрокаТабличнойЧасти.ФиксированнаяСтоимость;	
	
КонецФункции

Процедура СвернутьНабор(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, ТабличнаяЧасть)
	
	СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаНабора Из СтрокиНабора Цикл
		ЭтоРаботы = СтрокаНабора.Свойство("Кратность");
		Если СтрокаНабора.Количество*?(ЭтоРаботы, СтрокаНабора.Кратность*СтрокаНабора.Коэффициент, 1)=0 Тогда
			// Обработанная строка
			Продолжить;
		КонецЕсли; 
		Для каждого СтрокаПоиска Из СтрокиНабора Цикл
			Если СтрокаНабора=СтрокаПоиска Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаНабора.Номенклатура<>СтрокаПоиска.Номенклатура 
				ИЛИ СтрокаНабора.Характеристика<>СтрокаПоиска.Характеристика
				ИЛИ (СтрокаНабора.Свойство("ЕдиницаИзмерения") И СтрокаНабора.ЕдиницаИзмерения<>СтрокаПоиска.ЕдиницаИзмерения) Тогда
				Продолжить;
			КонецЕсли; 
			Если ЭтоРаботы Тогда
				СтрокаНабора.Коэффициент = 1;
				Если СтрокаНабора.Свойство("ФиксированнаяСтоимость") И СтрокаНабора.ФиксированнаяСтоимость Тогда
					СтрокаНабора.Кратность = СтрокаНабора.Кратность+СтрокаПоиска.Кратность;
					СтрокаНабора.Количество = 1;
				Иначе
					СтрокаНабора.Количество = СтрокаНабора.Количество+СтрокаПоиска.Количество;
				КонецЕсли; 
			Иначе
				СтрокаНабора.Количество = СтрокаНабора.Количество+СтрокаПоиска.Количество;
			КонецЕсли; 
			СтрокаНабора.ДоляСтоимости = СтрокаНабора.ДоляСтоимости+СтрокаПоиска.ДоляСтоимости;
			СтрокаПоиска.Количество = 0;
			УдаляемыеСтроки.Добавить(СтрокаПоиска);
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого СтрокаНабора Из УдаляемыеСтроки Цикл
		Если ТипЗнч(ТабличнаяЧасть)=Тип("Массив") Тогда
			Если ТабличнаяЧасть.Найти(СтрокаНабора)<>Неопределено Тогда
				ТабличнаяЧасть.Удалить(ТабличнаяЧасть.Найти(СтрокаНабора));
			КонецЕсли; 
		Иначе
			ТабличнаяЧасть.Удалить(СтрокаНабора);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, ТабличнаяЧасть)
	
	Если ТипЗнч(ТабличнаяЧасть)=Тип("Массив") Тогда
		СтрокиНабора = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Если НЕ ИскомаяСтрокаНабора(СтрокаТабличнойЧасти, НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокиНабора.Добавить(СтрокаТабличнойЧасти);
		КонецЦикла; 
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
		СтруктураОтбора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
		Если НомерВариантаКП<>Неопределено Тогда
			СтруктураОтбора.Вставить("НомерВариантаКП", НомерВариантаКП);
		КонецЕсли;
		СтрокиНабора = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	КонецЕсли; 
	Возврат СтрокиНабора;
	
КонецФункции

Функция ИскомаяСтрокаНабора(СтрокаНабора, НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП=Неопределено)
	
	Если НоменклатураНабора<>Неопределено И СтрокаНабора.Свойство("НоменклатураНабора") И СтрокаНабора.НоменклатураНабора<>НоменклатураНабора Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если ХарактеристикаНабора<>Неопределено И СтрокаНабора.Свойство("ХарактеристикаНабора") И СтрокаНабора.ХарактеристикаНабора<>ХарактеристикаНабора Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НомерВариантаКП<>Неопределено И СтрокаНабора.Свойство("НомерВариантаКП") И СтрокаНабора.НомерВариантаКП<>НомерВариантаКП Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура ПересчитатьЦены(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, ТабличнаяЧасть, СтоимостьНабора, ПараметрыНабора)
	
	СтрокиНабора = СтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть);
	Если СтрокиНабора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Пересчет цен состава набора
	БазаРасчета = 0;
	Для каждого Стр Из СтрокиНабора Цикл
		ЭтоРаботы = Стр.Свойство("Кратность");
		Если ПараметрыНабора.СпособРасчетаЦеныНабора=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене") Тогда
			БазаРасчета = БазаРасчета+Стр.Цена*Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1);
		ИначеЕсли ПараметрыНабора.СпособРасчетаЦеныНабора=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости") Тогда
			БазаРасчета = БазаРасчета+Стр.ДоляСтоимости;
		КонецЕсли; 
	КонецЦикла;
	Если БазаРасчета>0 Тогда
		СтоимостьНабораНовая = 0;
		Для каждого Стр Из СтрокиНабора Цикл
			ЭтоРаботы = Стр.Свойство("Кратность");
			Если Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1)=0 Тогда
				Продолжить;
			КонецЕсли; 
			Если ПараметрыНабора.СпособРасчетаЦеныНабора=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене") Тогда
				Стр.Цена = Окр(СтоимостьНабора*(Стр.Цена*Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1))/БазаРасчета/(Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1)), 2);
			ИначеЕсли ПараметрыНабора.СпособРасчетаЦеныНабора=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости") Тогда
				Стр.Цена = Окр(СтоимостьНабора*(Стр.ДоляСтоимости)/БазаРасчета/(Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1)), 2);
			КонецЕсли;
			СтоимостьНабораНовая = СтоимостьНабораНовая+Стр.Цена*Стр.Количество*?(ЭтоРаботы, Стр.Кратность, 1); 
		КонецЦикла;
		Если СтоимостьНабораНовая<>СтоимостьНабора Тогда
			СуммаРасхождения = СтоимостьНабора-СтоимостьНабораНовая;
			ОкруглениеЦеныНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП, ТабличнаяЧасть, СуммаРасхождения);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьКолонка(ТабличнаяЧасть, СтрокаТабличнойЧасти, ИмяКолонки)
	
	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("ДанныеФормыЭлементКоллекции") Тогда
		// Вызов из формы
		Возврат СтрокаТабличнойЧасти.Свойство(ИмяКолонки);
	Иначе
		#Если Сервер Тогда
		Возврат ТабличнаяЧасть.ВыгрузитьКолонки().Колонки.Найти(ИмяКолонки)<>Неопределено;
		#Иначе
		Возврат Ложь;	
		#КонецЕсли 
	КонецЕсли; 	
	
КонецФункции
 
#КонецОбласти 

 
