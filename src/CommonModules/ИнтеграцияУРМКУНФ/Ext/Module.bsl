#Область ПрограммныйИнтерфейс

// См. ИнтеграцияУРМКПереопределяемый.ПриИзмененииОбщихПараметров.
//
Процедура ПриИзмененииОбщихПараметров(ОбщиеПараметры, ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "ТорговыйОбъект"
		И ЗначениеЗаполнено(ОбщиеПараметры.ТорговыйОбъект) Тогда
		ОбщиеПараметры.ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщиеПараметры.ТорговыйОбъект, "РозничныйВидЦен");
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.ПланОбменаУРМК.
//
Процедура ПланОбменаУРМК(ПланыОбменаXDTO) Экспорт
	ПланыОбменаXDTO.Добавить(Метаданные.ПланыОбмена.ОбменСУРМК);
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.ТорговыйОбъектУРМКПоУмолчанию.
//
Процедура ТорговыйОбъектУРМКПоУмолчанию(ТорговыйОбъект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.УстановитьПараметрыВыбораКассыККМ.
//
Процедура УстановитьПараметрыВыбораКассыККМ(Форма, ИмяПоляВвода) Экспорт
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипКассы", Перечисления.ТипыКассККМ.ККМED);
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.УстановитьПараметрыВыбораТорговыйОбъект.
//
Процедура УстановитьПараметрыВыбораТорговыйОбъект(Форма, ИмяПоляВвода) Экспорт
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ЗначениеМассив		= Новый Массив;
	ЗначениеМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	ЗначениеМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	
	ЗначениеПараметра	= Новый ФиксированныйМассив(ЗначениеМассив);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", ЗначениеПараметра);
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.УстановитьОтборПоТипуКассыККМ.
//
Процедура УстановитьОтборПоТипуКассыККМ(Список) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,,
	                                                                        ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ТипКассы",
		ВидСравненияКомпоновкиДанных.Равно,
		ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ККМED"),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

// См. ИнтеграцияУРМКПереопределяемый.ПараметрыЗаполненияПередНачаломДобавленияУРМК.
//
Функция ПараметрыЗаполненияПередНачаломДобавленияУРМК(Форма, СтруктураПараметров) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ТипКассы", 			ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ККМED"));
	ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница",	Форма.ТорговыйОбъект);
	
	Если СтруктураПараметров.Свойство("ОбъектКопирования") Тогда
		ПараметрыЗаполнения.Вставить("Владелец",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ОбъектКопирования, "Владелец"));
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// См. ИнтеграцияУРМКПереопределяемый.ОтборыТекстаЗапросовПодготовитьДанныеНастроекОбмена.
//
Функция ОтборыТекстаЗапросовПодготовитьДанныеНастроекОбмена() Экспорт
	
	ТекстЗапроса = "И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМED)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьЧекиБезКассовойСмены(КассоваяСмена, ОтчетОРозничныхПродажах) Экспорт
	
	// отложенная обработка чеков
	Запрос = Новый Запрос(ТекстЗапросаЧекиБезКассовойСмены());
	
	Запрос.УстановитьПараметр("КассаККМ", 		 	 КассоваяСмена.КассаККМ);
	Запрос.УстановитьПараметр("НомерСменыККТ", 		 КассоваяСмена.НомерСменыККТ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены", КассоваяСмена.НачалоКассовойСмены);
	
	ВыборкаЧеков = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧеков.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЧеков.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КассоваяСмена = ОтчетОРозничныхПродажах;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОткрытиеСмены(КассоваяСмена) Экспорт
	
	РозничныеПродажиСервер.ПриЗаписиКассовойСменыПереопределяемый(КассоваяСмена.Ссылка);
	
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена.Ссылка);
	
	ОбработатьЧекиБезКассовойСмены(КассоваяСмена, ОтчетОРозничныхПродажах);
	
КонецПроцедуры

Процедура ОбработатьЗакрытиеСмены(КассоваяСмена) Экспорт
	
	Перем ОписаниеОшибки;
	
	ОтчетОРозничныхПродажах 	  = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена.Ссылка);
	ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
	СтруктураВозвращаемоеЗначение = Документы.ОтчетОРозничныхПродажах.ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект);
	
	Если СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = Неопределено Тогда
		
		ОписаниеОшибки = СтруктураВозвращаемоеЗначение.ОписаниеОшибки;
		
	Иначе
		
		Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
			Документы.ОтчетОРозничныхПродажах.ВыполнитьАрхивациюЧековККМ(ОтчетОРозничныхПродажах.ПолучитьОбъект(), ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОшибки		  = ЗначениеЗаполнено(ОписаниеОшибки);
				
	Если Не ЕстьОшибки 
		И ОтчетОРозничныхПродажах <> Неопределено Тогда
					
		СформироватьДокументВыемки(КассоваяСмена.КассаККМ, ОтчетОРозничныхПродажах, ЕстьОшибки, ОписаниеОшибки);
					
		Если Не ЕстьОшибки Тогда
			
			ЕстьОшибки = НЕ РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассоваяСмена.Ссылка, ОписаниеОшибки);
					
		КонецЕсли;
					
	КонецЕсли;
				
	Если ЕстьОшибки Тогда
				
		ШаблонОшибки   = НСтр("ru = 'При обработке кассовой смены произошла ошибка.
	                            |Дополнительное описание:
	                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ШаблонОшибки, "%ДополнительноеОписание%", ОписаниеОшибки);

		ВызватьИсключение ОписаниеОшибки; 
			
	КонецЕсли;

КонецПроцедуры

Функция СформироватьПКОВозврата(ПриходнаяНакладная, СуммаОплатыНаличными, УзелОбмена) Экспорт
	
	ПлатежКонтрагентуОбъект = Документы.РасходИзКассы.СоздатьДокумент();
	ПлатежКонтрагентуОбъект.Заполнить(ПриходнаяНакладная.Ссылка);
	
	ПлатежКонтрагентуОбъект.Касса 			= УзелОбмена.КассаВозврата;
	ПлатежКонтрагентуОбъект.НомерЧекаККМ 	= ПриходнаяНакладная.НомерЧекаККМ;
	ПлатежКонтрагентуОбъект.НомерСменыККМ 	= ПриходнаяНакладная.НомерСменыККМ;
	ПлатежКонтрагентуОбъект.Дата 			= ПриходнаяНакладная.Дата;
	ПлатежКонтрагентуОбъект.СуммаДокумента	= СуммаОплатыНаличными;
	
	СуммаПлатежа = ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Если СуммаПлатежа <> ПлатежКонтрагентуОбъект.СуммаДокумента Тогда
				
		МассивКоэффициентов = ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивСумм 			= РаспределитьПропорционально(ПлатежКонтрагентуОбъект.СуммаДокумента, МассивКоэффициентов);
		
		Если МассивСумм <> Неопределено Тогда
			ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
		КонецЕсли;
				
		Для каждого СтрокаПлатеж Из ПлатежКонтрагентуОбъект.РасшифровкаПлатежа Цикл
			
			ЗначениеСтавкиНДС 		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС 	= РассчитатьСуммуНДС(СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС);
			
		КонецЦикла;
				
	КонецЕсли;
	
	СуффиксЗамены					   = " " + НСтр("ru='(не проведен)'");
	
	ПлатежКонтрагентуОбъект.Основание  = СтрЗаменить(ПлатежКонтрагентуОбъект.Основание,  СуффиксЗамены, "");
	ПлатежКонтрагентуОбъект.Приложение = СтрЗаменить(ПлатежКонтрагентуОбъект.Приложение, СуффиксЗамены, "");

	ПлатежКонтрагентуОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ПлатежКонтрагентуОбъект;	
	
КонецФункции

Функция ЗачестьВозвратОплатыБезналом(ПриходнаяНакладная, СтрокаОплаты, УзелОбмена) Экспорт
	
	ПлатежКонтрагентуОбъект = Документы.ОперацияПоПлатежнымКартам.СоздатьДокумент();
	ПлатежКонтрагентуОбъект.Заполнить(ПриходнаяНакладная.Ссылка);
	
	ПлатежКонтрагентуОбъект.Касса 					= УзелОбмена.КассаВозврата;
	ПлатежКонтрагентуОбъект.НомерЧекаККМ 			= ПриходнаяНакладная.НомерЧекаККМ;
	ПлатежКонтрагентуОбъект.НомерСменыККМ 			= ПриходнаяНакладная.НомерСменыККМ;
	ПлатежКонтрагентуОбъект.Дата 					= ПриходнаяНакладная.Дата;
	ПлатежКонтрагентуОбъект.СуммаДокумента			= СтрокаОплаты.Сумма;
	ПлатежКонтрагентуОбъект.ЭквайринговыйТерминал   = СтрокаОплаты.ЭквайринговыйТерминал;
	ПлатежКонтрагентуОбъект.НомерПлатежнойКарты		= СтрокаОплаты.НомерКарты;
	
	Если ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
		ПлатежКонтрагентуОбъект.ВидПлатежнойКарты 	= СтрокаОплаты.ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ВидПлатежнойКарты;
	КонецЕсли;
	
	СуммаПлатежа = ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Если СуммаПлатежа <> ПлатежКонтрагентуОбъект.СуммаДокумента Тогда
				
		МассивКоэффициентов = ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивСумм 			= РаспределитьПропорционально(ПлатежКонтрагентуОбъект.СуммаДокумента, МассивКоэффициентов);
		
		Если МассивСумм <> Неопределено Тогда
			ПлатежКонтрагентуОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
		КонецЕсли;
				
		Для каждого СтрокаПлатеж Из ПлатежКонтрагентуОбъект.РасшифровкаПлатежа Цикл
			
			ЗначениеСтавкиНДС 		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС 	= РассчитатьСуммуНДС(СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС);
			
		КонецЦикла;
				
	КонецЕсли;
	
	ПлатежКонтрагентуОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ПлатежКонтрагентуОбъект;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС)
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции

Функция РаспределитьПропорционально(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2)

	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	Дельта = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Если Дельта > 0 Тогда 
		
		// Погрешности округления отнесем на коэффициент с максимальным весом.
		Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
			Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + Дельта;
		КонецЕсли;
		
	ИначеЕсли Дельта < 0 Тогда 
		
		// Если распределили больше чем положено, размазываем погрешность по ближайшим максимальным весам.
		ЗначениеПогрешности = 1 / Pow(10, Точность);
		КоличествоЭлементовПогрешности = -Дельта / ЗначениеПогрешности;
		
		КоэффициентыРешето = Новый Массив(Новый ФиксированныйМассив(Коэффициенты));
		
		Для Сч = 1 По КоличествоЭлементовПогрешности Цикл 
			МаксимальныйКоэффициент = МаксимальноеЗначениеВМассиве(КоэффициентыРешето);
			Индекс = КоэффициентыРешето.Найти(МаксимальныйКоэффициент);
			Результат[Индекс] = Результат[Индекс] - ЗначениеПогрешности;
			КоэффициентыРешето[Индекс] = 0;
		КонецЦикла;
		
	Иначе 
		// Если Дельта = 0, то все идеально.
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция МаксимальноеЗначениеВМассиве(Массив)
	
	МаксимальноеЗначение = 0;
	
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Значение = Массив[Индекс];
		
		Если МаксимальноеЗначение < Значение Тогда
			МаксимальноеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеЗначение;
	
КонецФункции

Функция СформироватьДокументВыемки(КассаККМ, ОтчетОРозничныхПродажах, ЕстьОшибки, ОписаниеОшибки)
	
	СуммаДокумента = РозничныеПродажиСервер.ПолучитьОстатокДенежныхСредствВКассеККМ(КассаККМ);
	
	Если СуммаДокумента > 0  Тогда
		
		ДокументВыемка = Документы.ВыемкаНаличных.СоздатьДокумент();
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
		СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
		СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", КассаККМ.ВалютаДенежныхСредств);
		СтруктураЗаполнения.Вставить("Организация", КассаККМ.Владелец);
		СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		ДокументВыемка.Заполнить(СтруктураЗаполнения);
		
		Попытка
			ДокументВыемка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЕстьОшибки 	   = Истина;
		КонецПопытки;
		
		Возврат ДокументВыемка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаЧекиБезКассовойСмены()
	
	Возврат
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.МоментВремени КАК МоментВремени,
	|	ЧекККМ.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Дата > &НачалоКассовойСмены
	|	И ЧекККМ.НомерСменыККМ = &НомерСменыККТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Дата,
	|	ЧекККМВозврат.МоментВремени,
	|	ЧекККМВозврат.Проведен
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМВозврат.КассаККМ = &КассаККМ
	|	И ЧекККМВозврат.Дата > &НачалоКассовойСмены
	|	И ЧекККМВозврат.НомерСменыККМ = &НомерСменыККТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	МоментВремени"	
	
КонецФункции

#КонецОбласти

#КонецОбласти
