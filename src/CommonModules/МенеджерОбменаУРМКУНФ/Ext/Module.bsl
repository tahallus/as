
#Область ПрограммныйИнтерфейс

// См. МенеджерОбменаЧерезУниверсальныйФормат.ЗаполнитьПравилаОбработкиДанных.
//
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// См. МенеджерОбменаЧерезУниверсальныйФормат.ЗаполнитьПравилаКонвертацииОбъектов.
//
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМПриходнаяНакладная_Получение(ПравилаКонвертации);
		
	КонецЕсли;
	
КонецПроцедуры

// См. МенеджерОбменаЧерезУниверсальныйФормат.ВыполнитьПроцедуруМодуляМенеджера.
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	
	Если ИмяПроцедуры = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЧекККМПриходнаяНакладная" Тогда 
		ОтложеннаяОбработка_ЧекККМПриходнаяНакладная(
			Параметры.Объект, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КассоваяСменаОткрытие" Тогда 
		ОтложеннаяОбработка_КассоваяСменаОткрытие(
			Параметры.Объект, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КассоваяСменаЗакрытие" Тогда 
		ОтложеннаяОбработка_КассоваяСменаЗакрытие(
			Параметры.Объект, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЧекККМ" Тогда 
		ОтложеннаяОбработка_ЧекККМ(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	КонецЕсли;
		
КонецПроцедуры

// Обработчик регистрации изменений для начальной выгрузки данных.
//
// Параметры:
//
//   Получатель - ПланОбменаСсылка - узел плана обмена, в который требуется выгрузить данные.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной
//                          (системной) обработки события.
//                          Если в теле процедуры-обработчика установить данному параметру значение Ложь,
//                          стандартная обработка события производиться не будет.
//                          Отказ от стандартной обработки не отменяет действие.
//                          Значение по умолчанию - Истина.
//   Отбор - Массив из ОбъектМетаданных
//         - ОбъектМетаданных - определяет отбор по объектам метаданных,
//           для которых следует выполнить регистрацию изменений.
//
Процедура РегистрацияИзмененийНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка = Ложь, Отбор = Неопределено) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.ОбменСУРМК") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	Отбор					= Новый Массив;
	
	ЗначенияРеквизитов 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
								"ВариантНастройки, ИспользоватьОтборПоОрганизациям, ДатаНачалаВыгрузкиДокументов, Организации");
	
	Для Каждого ЭлементСостава Из Получатель.Метаданные().Состав Цикл
		Отбор.Добавить(ЭлементСостава.Метаданные);
	КонецЦикла;
	
	МетаданныеРегистрируютсяПриНеобходимости = Новый Массив;
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.ЕдиницыИзмерения);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.СерииНоменклатуры);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.Номенклатура);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.Контрагенты);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	Для каждого ЭлементМассива Из МетаданныеРегистрируютсяПриНеобходимости Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;
	
	Если ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям Тогда
		ОтборОрганизации = ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
	Иначе
		ОтборОрганизации = Неопределено;
	КонецЕсли;
	
	ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель,
		ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, ОтборОрганизации, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

Процедура ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_КассоваяСменаЗакрытие_Получение");
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке";

	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_КассоваяСменаЗакрытие_Получение") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Получение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		ИспользованиеПКО.Документ_КассоваяСменаЗакрытие_Получение = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_КассоваяСменаОткрытие_Получение");
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОткрытиеКассовойСмены";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке";
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_КассоваяСменаОткрытие_Получение") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Получение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		ИспользованиеПКО.Документ_КассоваяСменаОткрытие_Получение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ТипыЦен_Отправка");
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке";

КонецПроцедуры

Процедура ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
				|	1 КАК Поле1 ИЗ РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК ОбщиеНастройкиУзловИнформационныхБаз ГДЕ ОбщиеНастройкиУзловИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
				|	И ОбщиеНастройкиУзловИнформационныхБаз.НачальнаяВыгрузкаДанных");
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", КомпонентыОбмена.УзелКорреспондента);
	
	НачальнаяВыгрузкаДанных =  Не Запрос.Выполнить().Пустой();

	Если НЕ НачальнаяВыгрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатурыРегистр_Отправка", "Имя");
	Если ПравилоУстановкаЦенОтправка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодЦен    	= КомпонентыОбмена.УзелКорреспондентаОбъект.ДатаНачалаВыгрузкиДокументов-1;
	ВидЦен		 	= ДанныеИБ.Ссылка;
	ДанныеИБРегистр	= РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	
	ДанныеИБРегистр.Отбор.ВидЦен.Установить(ДанныеИБ.Ссылка);
	ДанныеИБРегистр.Отбор.Период.Установить(ПериодЦен);
	
	Запрос 		 = Новый Запрос();
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	&ПериодЦен КАК Период,
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодЦен,
	|			ВидЦен = &ВидЦен
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И НЕ Номенклатура.Недействителен) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЦен", 	ВидЦен);
	Запрос.УстановитьПараметр("ПериодЦен",	ПериодЦен);

	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтрокаЗаписи = ДанныеИБРегистр.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ВыборкаЗапроса);
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
			И НЕ (ЗначениеЗаполнено(ВыборкаЗапроса.Характеристика.Владелец) И ТипЗнч(ВыборкаЗапроса.Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
			СтрокаЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДанныеИБРегистр.Количество() > 0 Тогда
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			ДанныеИБРегистр, 
			ПравилоУстановкаЦенОтправка);
			
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)   
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_ЧекККМ_Получение");
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_ЧекККМПриходнаяНакладная_Получение") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМПриходнаяНакладная_Получение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_ЧекККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	
	Перем AdditionalInfo;
	
	ИспользованиеПКО.Документ_ЧекККМПриходнаяНакладная_Получение    	= Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Корректировочный")
		И ДанныеXDTO.Корректировочный Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧастиТовары 		= ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыПродажа", "Товары");
	
	ИмяТабличнойЧастиВозвратТоваров = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыВозвратПродажи", "ВозвратТоваров");
	
	ЕстьОснованиеЧека               = ДанныеXDTO.Свойство("AdditionalInfo", AdditionalInfo) И AdditionalInfo.Свойство("Основание");
	
	ИспользованиеПКО.Документ_ЧекККМ_Получение 							= ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары) ИЛИ ДанныеXDTO.Свойство("Услуги");
	ИспользованиеПКО.Документ_ЧекККМВозврат_Получение 					= ЕстьОснованиеЧека И ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров);
	ИспользованиеПКО.Документ_ЧекККМПриходнаяНакладная_Получение    	= НЕ ЕстьОснованиеЧека И ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров);
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_БонусныеПрограммы_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_БонусныеПрограммы_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БонусныеПрограммы_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ДисконтныеКарты_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДисконтныеКарты;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_ДисконтныеКарты_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДисконтныеКарты_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ЭквайринговыеТерминалы_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЭквайринговыеТерминалы;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_ЭквайринговыеТерминалы_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользованиеПКО.Справочник_Номенклатура_Отправка Тогда
		
		Номенклатура = ДанныеИБ.Ссылка;
		
		НаборВсехШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборВсехШК.Отбор.Номенклатура.Установить(Номенклатура);
		
		НаборВсехШК.Прочитать();
		
		Для Каждого ЗаписьШК Из НаборВсехШК Цикл
			
			ОбъектШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
			
			ОбъектШтрихкод.Отбор.Штрихкод.Установить(ЗаписьШК.Штрихкод);
			ОбъектШтрихкод.Отбор.Номенклатура.Установить(ЗаписьШК.Номенклатура);
			ОбъектШтрихкод.Отбор.Характеристика.Установить(ЗаписьШК.Характеристика);
			ОбъектШтрихкод.Отбор.Партия.Установить(ЗаписьШК.Партия);
			ОбъектШтрихкод.Отбор.ЕдиницаИзмерения.Установить(ЗаписьШК.ЕдиницаИзмерения);
			
			ЗаполнитьЗначенияСвойств(ОбъектШтрихкод.Добавить(), ЗаписьШК);
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектШтрихкод);
			
		КонецЦикла;
		
		ВыборкаСерии = Справочники.СерииНоменклатуры.Выбрать(, Номенклатура);
			
		Пока ВыборкаСерии.Следующий() Цикл
				
			СерияОбъект = ВыборкаСерии.Ссылка.ПолучитьОбъект();
				
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СерияОбъект);
				
		КонецЦикла;
			
		ВыборкаЕдиницы = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
			
		Пока ВыборкаЕдиницы.Следующий() Цикл
				
			ЕдиницаИзмеренияОбъект = ВыборкаЕдиницы.Ссылка.ПолучитьОбъект();
				
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ЕдиницаИзмеренияОбъект);
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_КассоваяСменаЗакрытие_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КассоваяСменаЗакрытие";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",          "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",            "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Статус",               	 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,НачалоКассовойСмены,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	КассоваяСменаЗакрыта = Ложь;
	
	Если ДанныеИБ <> Неопределено 
		И ДанныеИБ.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(ДанныеИБ.Ссылка);
        ДанныеОРП				= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтчетОРозничныхПродажах, "СтатусКассовойСмены, Проведен");
		
		КассоваяСменаЗакрыта	= ЗначениеЗаполнено(ОтчетОРозничныхПродажах)
									И ДанныеОРП.Проведен 
									И (ДанныеОРП.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта
										ИЛИ ДанныеОРП.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы);
		
	КонецЕсли;
	
	Если КассоваяСменаЗакрыта Тогда
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОчиститьДанныеИБ");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
		
	Иначе
		
		ПолученныеДанные.Статус 	 = Перечисления.СтатусыКассовойСмены.Закрыта;
		ПолученныеДанные.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
		ПолученныеДанные.Дата 		 = ПолученныеДанные.ОкончаниеКассовойСмены;
        ПолученныеДанные.Проведен 	 = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтложеннаяОбработка_КассоваяСменаЗакрытие(КассоваяСмена, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена.Ссылка);
	
	// Заполнение реквизита "КассоваяСмена" для чеков, которые приехали вместе с открытием кассовой смены
	Запрос = Новый Запрос();
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.МоментВремени КАК МоментВремени,
	|	ЧекККМ.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Дата > &НачалоКассовойСмены
	|	И ЧекККМ.НомерСменыККМ = &НомерСменыККТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Дата,
	|	ЧекККМВозврат.МоментВремени,
	|	ЧекККМВозврат.Проведен
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМВозврат.КассаККМ = &КассаККМ
	|	И ЧекККМВозврат.Дата > &НачалоКассовойСмены
	|	И ЧекККМВозврат.НомерСменыККМ = &НомерСменыККТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	МоментВремени";	
	
	Запрос.УстановитьПараметр("КассаККМ", 		 	 КассоваяСмена.КассаККМ);
	Запрос.УстановитьПараметр("НомерСменыККТ", 		 КассоваяСмена.НомерСменыККТ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены", КассоваяСмена.НачалоКассовойСмены);
	
	ВыборкаЧеков = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧеков.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЧеков.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КассоваяСмена = ОтчетОРозничныхПродажах;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

	// требуется для корректного проведения чека ккм
	КассоваяСмена.Проведен = Истина;
	
	// Кассовую смену необходимо провести после всех чеков ККМ
	ТекущийПриоритет = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Найти(КассоваяСмена.Ссылка, "ДокументСсылка");
	НужныйПриоритет	 = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Количество() - 1;
	
	Если ТекущийПриоритет <> Неопределено
		И КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Индекс(ТекущийПриоритет) <> НужныйПриоритет Тогда
		
		НоваяСтрокаОП = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Вставить(НужныйПриоритет);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОП, ТекущийПриоритет);
		
		КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Удалить(ТекущийПриоритет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_КассоваяСменаОткрытие_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_КассоваяСменаОткрытие";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        			"Дата");
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены",  	"Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСменыККТ",  		"Дата");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",        	"НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",    			"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",       			"НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация", 			"", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",    			"", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",      			"", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,НачалоКассовойСмены,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(ДанныеИБ.Ссылка);
		
		Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
			ДанныеИБ.ДополнительныеСвойства.Вставить("ОчиститьДанныеИБ");
			
		КонецЕсли;
		
	Иначе
		
		РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ПолученныеДанные.КассаККМ);
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);

		ПолученныеДанные.Статус 	= Перечисления.СтатусыКассовойСмены.Открыта;
        ПолученныеДанные.Проведен 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложеннаяОбработка_КассоваяСменаОткрытие(КассоваяСмена, КомпонентыОбмена)

	// для корректного проведения чеков смены
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	КассоваяСмена.Проведен = Истина;  
	
	// Формирование ОРП
	РозничныеПродажиСервер.ПриЗаписиКассовойСменыПереопределяемый(КассоваяСмена.Ссылка);
	
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена.Ссылка);
	
	// Заполнение реквизита "КассоваяСмена" для чеков, которые приехали вместе с открытием кассовой смены
	Запрос = Новый Запрос();
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.МоментВремени КАК МоментВремени,
	|	ЧекККМ.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Дата > &НачалоКассовойСмены
	|	И ЧекККМ.НомерСменыККМ = &НомерСменыККТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Дата,
	|	ЧекККМВозврат.МоментВремени,
	|	ЧекККМВозврат.Проведен
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И ЧекККМВозврат.КассаККМ = &КассаККМ
	|	И ЧекККМВозврат.Дата > &НачалоКассовойСмены
	|	И ЧекККМВозврат.НомерСменыККМ = &НомерСменыККТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	МоментВремени";	
	
	Запрос.УстановитьПараметр("КассаККМ", 		 	 КассоваяСмена.КассаККМ);
	Запрос.УстановитьПараметр("НомерСменыККТ", 		 КассоваяСмена.НомерСменыККТ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены", КассоваяСмена.НачалоКассовойСмены);
	
	ВыборкаЧеков = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧеков.Следующий() Цикл
		
		ДокументОбъект = ВыборкаЧеков.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КассоваяСмена = ОтчетОРозничныхПродажах;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_УстановкаЦенНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "SKU", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Перем Записи;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" 
		ИЛИ ДанныеXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары", Записи) Тогда
		
		МассивНоменклатуры = Записи.ВыгрузитьКолонку("Номенклатура");
		
		// удаление работ и операций
		Записи.Индексы.Добавить("Номенклатура");
		
		Запрос = Новый Запрос("ВЫБРАТЬ Т.Ссылка ИЗ Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка В (&Номенклатура)
								|И НЕ Т.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))");
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			СтрокиНаУдаление = Записи.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Ссылка));
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
				Записи.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
			СтрокаМассива = МассивНоменклатуры.Найти(ВыборкаЗапроса.Ссылка);
			
			Если СтрокаМассива <> Неопределено Тогда
				МассивНоменклатуры.Удалить(СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			
			// Заполнение SKU
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КодыТоваровSKU.SKU КАК SKU,
			|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
			|	КодыТоваровSKU.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.Номенклатура В(&Номенклатура)";
			
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	
			КодыТоваров = Запрос.Выполнить().Выгрузить();
			КодыТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
			Если КодыТоваров.Количество() Тогда
		
				Если Записи.Колонки.Найти("SKU") = Неопределено Тогда
					Записи.Колонки.Добавить("SKU", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
				КонецЕсли;
		
				Для Каждого СтрокаТЧ Из Записи Цикл
			
					СтрокаСКодом = КодыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
					СтрокаСКодом = ?(СтрокаСКодом.Количество(), СтрокаСКодом[0], Неопределено);
			
					Если СтрокаСКодом <> Неопределено Тогда
						СтрокаТЧ.SKU 		= Формат(СтрокаСКодом.SKU, "ЧГ=");
					КонецЕсли;
			
				КонецЦикла;
		
			КонецЕсли;
	
		Иначе
			ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_УстановкаЦенНоменклатурыРегистр_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "SKU", 1);
	
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Перем Записи;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" 
		ИЛИ ДанныеXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСтрокой = СтрЗаменить(ДанныеИБ.Отбор.Период.Значение, "/", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "");
		
		НомерСтрокой = Сред(ДатаСтрокой,1,6) + Прав(ДанныеИБ.Отбор.Номенклатура.Значение.Код, "3") + Прав(ДанныеИБ.Отбор.ВидЦен.Значение.Код, "2");
		
			// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеИБ.Отбор.Период.Значение);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерСтрокой);
		
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.Отбор.ВидЦен.Значение);
		
		// Подготовка таблицы значений, содержащую данные из набора записей.
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Номенклатура");
		Записи.Колонки.Добавить("Характеристика");
		Записи.Колонки.Добавить("Упаковка");
		Записи.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаНабора Из ДанныеИБ Цикл
			СтрокаЗаписи = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
				И НЕ (ЗначениеЗаполнено(СтрокаНабора.Характеристика.Владелец) И ТипЗнч(СтрокаНабора.Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрокаЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			Если ТипЗнч(СтрокаНабора.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаЗаписи.Упаковка = СтрокаНабора.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", Записи);
		КонецЕсли;
		
	Если ДанныеXDTO.Свойство("Товары", Записи) Тогда
		
		МассивНоменклатуры = Записи.ВыгрузитьКолонку("Номенклатура");
		
		// удаление работ и операций
		Записи.Индексы.Добавить("Номенклатура");
		
		Запрос = Новый Запрос("ВЫБРАТЬ Т.Ссылка ИЗ Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка В (&Номенклатура)
								|И НЕ Т.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))");
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			СтрокиНаУдаление = Записи.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Ссылка));
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
				Записи.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
			СтрокаМассива = МассивНоменклатуры.Найти(ВыборкаЗапроса.Ссылка);
			
			Если СтрокаМассива <> Неопределено Тогда
				МассивНоменклатуры.Удалить(СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			
			// Заполнение SKU
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КодыТоваровSKU.SKU КАК SKU,
			|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
			|	КодыТоваровSKU.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.Номенклатура В(&Номенклатура)";
			
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	
			КодыТоваров = Запрос.Выполнить().Выгрузить();
			КодыТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
			Если КодыТоваров.Количество() Тогда
		
				Если Записи.Колонки.Найти("SKU") = Неопределено Тогда
					Записи.Колонки.Добавить("SKU", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
				КонецЕсли;
		
				Для Каждого СтрокаТЧ Из Записи Цикл
			
					СтрокаСКодом = КодыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
					СтрокаСКодом = ?(СтрокаСКодом.Количество(), СтрокаСКодом[0], Неопределено);
			
					Если СтрокаСКодом <> Неопределено Тогда
						СтрокаТЧ.SKU 		= Формат(СтрокаСКодом.SKU, "ЧГ=");
					КонецЕсли;
			
				КонецЦикла;
		
			КонецЕсли;
	
		Иначе
			ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЧекККМ_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",				   "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",				   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЧекККМВозврат_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен 	= Истина;
	ПолученныеДанные.ЧекККМ	  	= ДанныеXDTO.AdditionalInfo.Основание.Ссылка;
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = НРЕГ("ИдентификаторДисконтнойКарты")
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ИдентификаторДисконтнойКарты = Новый УникальныйИдентификатор(ЗначениеДополнительногоРеквизита);
					СсылкаДК = Справочники.ДисконтныеКарты.ПолучитьСсылку(ИдентификаторДисконтнойКарты);
					Если ОбщегоНазначения.СсылкаСуществует(СсылкаДК) Тогда
						ПолученныеДанные.ДисконтнаяКарта = СсылкаДК;
					
						ВладелецДК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДК, "ВладелецКарты");
						Если ЗначениеЗаполнено(ВладелецДК) Тогда
							ПолученныеДанные.Контрагент = ВладелецДК;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Истина);
	
	МассивСтрокОплата = ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена);
		
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМПриходнаяНакладная_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЧекККМПриходнаяНакладная_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМПриходнаяНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЧекККМПриходнаяНакладная";

	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  	"", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  	"", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     	"", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          	"", 1,"Справочник_СерииНоменклатуры");
	

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен	= Истина;
	
	ИмяПКО 						= "Справочник_КассыККМ_Получение";
	ПКОКассаККМ 				= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
	КассаККМ 					= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.КлючевыеСвойства.КассаККМ, ПКОКассаККМ, "ПолучитьСсылку").Ссылка;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("КассаККМ", КассаККМ);
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = НРЕГ("ИдентификаторДисконтнойКарты")
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ИдентификаторДисконтнойКарты = Новый УникальныйИдентификатор(ЗначениеДополнительногоРеквизита);
					СсылкаДК = Справочники.ДисконтныеКарты.ПолучитьСсылку(ИдентификаторДисконтнойКарты);
					Если ОбщегоНазначения.СсылкаСуществует(СсылкаДК) Тогда
						ПолученныеДанные.ДисконтнаяКарта = СсылкаДК;
					
						ВладелецДК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДК, "ВладелецКарты");
						Если ЗначениеЗаполнено(ВладелецДК) Тогда
							ПолученныеДанные.Контрагент = ВладелецДК;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Истина);
	
		#Область Оплата
		МассивСтрокОплатаПС = Новый Массив;
		МассивСтрокОплата   = ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена);
		
		Если МассивСтрокОплата.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("ОплатаСертификатами")
			
			И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
			
			Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
				СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
				
				МассивСтрокОплатаПС.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
			И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
			
			Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
				СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
				
				МассивСтрокОплатаПС.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивСтрокОплата.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", 	  МассивСтрокОплата);
		КонецЕсли;
		
		Если МассивСтрокОплатаПС.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодарочныеСертификаты", МассивСтрокОплатаПС);
		КонецЕсли;
		
		#КонецОбласти
		
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации 	= Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	
	Если ДанныеИБ <> Неопределено Тогда
		
		Для каждого КлючЗначение Из ПолученныеДанные.ДополнительныеСвойства Цикл
			ДанныеИБ.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОчиститьДанныеИБ");
		
		Возврат;
		
	КонецЕсли;
	
	КассаККМ 	= ПолученныеДанные.ДополнительныеСвойства.КассаККМ;
	КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(КассаККМ.ВалютаДенежныхСредств, ПолученныеДанные.Дата);
	
	ПолученныеДанные.Контрагент 			 = КомпонентыОбмена.УзелКорреспондента.КонтрагентВозврата;
	ПолученныеДанные.Договор 			 	 = КомпонентыОбмена.УзелКорреспондента.Договор;
	ПолученныеДанные.СтруктурнаяЕдиница 	 = КассаККМ.СтруктурнаяЕдиница;
	
	ПолученныеДанные.Организация 			 = КассаККМ.Владелец;
	ПолученныеДанные.СтруктурнаяЕдиница 	 = КассаККМ.СтруктурнаяЕдиница;
	ПолученныеДанные.Подразделение 			 = КассаККМ.Подразделение;
	ПолученныеДанные.НалогообложениеНДС 	 = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	
	ПолученныеДанные.ВалютаДокумента 		 = КурсыВалюты.Валюта;
	ПолученныеДанные.Курс					 = КурсыВалюты.Курс;
	ПолученныеДанные.Кратность				 = КурсыВалюты.Кратность;
	
	Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
		ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
		ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
	КонецЕсли;
	
	ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
	ЗаполнитьПартииИСерии(ПолученныеДанные);
	
	Для каждого СтрокаТаблицы Из ПолученныеДанные.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Всего) Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		КонецЕсли;
		СтрокаТаблицы.СтранаПроисхождения = СтрокаТаблицы.Номенклатура.СтранаПроисхождения;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтложеннаяОбработка_ЧекККМПриходнаяНакладная(ПриходнаяНакладная, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыНаличными 	= ПриходнаяНакладная.СуммаДокумента;
	
	Если ПриходнаяНакладная.ДополнительныеСвойства.Свойство("БезналичнаяОплата") Тогда
		
		Для Каждого СтрокаОплаты Из ПриходнаяНакладная.ДополнительныеСвойства.БезналичнаяОплата Цикл
			
			ПлатежКонтрагентуОбъект = ИнтеграцияУРМКУНФ.ЗачестьВозвратОплатыБезналом(ПриходнаяНакладная, СтрокаОплаты, КомпонентыОбмена.УзелКорреспондента);
			
			ОтложенноеПроведение 	= КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
			ОтложенноеПроведение.ДокументСсылка = ПлатежКонтрагентуОбъект.Ссылка;
			ОтложенноеПроведение.ДатаДокумента  = ПлатежКонтрагентуОбъект.Дата;
			
			СуммаОплатыНаличными 	= СуммаОплатыНаличными - СтрокаОплаты.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПриходнаяНакладная.ДополнительныеСвойства.Свойство("ПодарочныеСертификаты") Тогда
		
		Для Каждого СтрокаОплаты Из ПриходнаяНакладная.ДополнительныеСвойства.ПодарочныеСертификаты Цикл
			
			СтрокаПредоплаты = ПриходнаяНакладная.Предоплата.Добавить();
			
			СтрокаПредоплаты.СуммаРасчетов 		= СтрокаОплаты.Сумма;
			СтрокаПредоплаты.СуммаПлатежа 		= СтрокаОплаты.Сумма;
			СтрокаПредоплаты.Курс 		   		= ПриходнаяНакладная.Курс;
			СтрокаПредоплаты.Кратность 			= ПриходнаяНакладная.Кратность;
			СтрокаПредоплаты.ОплатаСертификатом = Истина;
			
			СуммаОплатыНаличными 	= СуммаОплатыНаличными - СтрокаОплаты.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СуммаОплатыНаличными > 0 Тогда
		
		ПлатежКонтрагентуОбъект = ИнтеграцияУРМКУНФ.СформироватьПКОВозврата(ПриходнаяНакладная, СуммаОплатыНаличными, КомпонентыОбмена.УзелКорреспондента);
		
		ОтложенноеПроведение 	= КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
		ОтложенноеПроведение.ДокументСсылка = ПлатежКонтрагентуОбъект.Ссылка;
		ОтложенноеПроведение.ДатаДокумента  = ПлатежКонтрагентуОбъект.Дата;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_БонусныеПрограммы_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрограммыЛояльности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "НеНачислятьПриОплатеБонусами", 		"НеНачислятьБаллыПриОплатеБонусами");
	ДобавитьПКС(СвойстваШапки, "",           						"КурсКонвертацииБонусовВВалюту", 1);
	ДобавитьПКС(СвойстваШапки, "МаксимальныйПроцентОплаты",       	"МаксимальныйПроцентОплатыБонусами");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                                  "ВалютаКонвертацииБонусов", 1, "Справочник_Валюты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ДисконтныеКарты_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты",            "ВладелецКарты", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",             "НомерКарты", 1);
	ДобавитьПКС(СвойстваШапки, "", 	   					   "ПрограммаЛояльности", 	1, "Справочник_БонусныеПрограммы_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_КатегорииНоменклатурыВН_Отправка");
	СвойстваШапки 		= ПравилоКонвертации.Свойства;
	
	ДобавитьПКС(СвойстваШапки, "",            	"ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",            	"ИспользоватьСрокГодностиСерии", 1);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_Номенклатура_Отправка");
	СвойстваШапки 		= ПравилоКонвертации.Свойства;
	
	ДобавитьПКС(СвойстваШапки, "Крепость",                               	"Крепость");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры",            	"ИспользоватьСерии");
	ДобавитьПКС(СвойстваШапки, "",            								"Маркируемый", 1);
	
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;

	СтруктураДанные = Новый Структура("Номенклатура", ДанныеИБ.Ссылка);
	
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	
	ДанныеXDTO.Вставить("Маркируемый", СтруктураДанные.МаркируемаяПродукция);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник.ТипыЦен");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_Отправка_ПриОтправкеДанных";
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Идентификатор", ДанныеИБ.ИдентификаторФормул);
	
КонецПроцедуры

Процедура ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВладелецКарты)  Тогда
		ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
	Иначе
		
		СтруктураВладельца = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВладелецКарты, "Справочник_Контрагенты_Отправка");
		БонуснаяПрограмма  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Владелец, "БонуснаяПрограмма");
		
		Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
			ДанныеXDTO.Вставить("ПрограммаЛояльности", БонуснаяПрограмма);
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецКарты", СтруктураВладельца);
		
		Если ЗначениеЗаполнено(ДанныеИБ.КодКартыШтрихкод) Тогда
			ДанныеXDTO.Вставить("НомерКарты", ДанныеИБ.КодКартыШтрихкод);
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.КодКартыМагнитный) Тогда
			ДанныеXDTO.Вставить("НомерКарты", ДанныеИБ.КодКартыМагнитный);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Константы.НациональнаяВалюта.Получить();
	
	ДанныеXDTO.Вставить("КурсКонвертацииБонусовВВалюту", 1);
	ДанныеXDTO.Вставить("ВалютаКонвертацииБонусов", Валюта);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаКонвертацииБонусов", Валюта);
	
КонецПроцедуры

Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСерии", 				ДанныеИБ.ИспользоватьСрокГодностиСерии);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСрокГодностиСерии", 	ДанныеИБ.ИспользоватьСерииНоменклатуры);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ИспользоватьХарактеристики", ДанныеИБ.ИспользоватьХарактеристики);
	
	МассивДопРеквизитов = Новый Массив;
	
	Для каждого ЭлементНастроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
	КонецЦикла;
	
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
		
	Для каждого Элемент Из МассивДопРеквизитов Цикл
		СтрокаДопРеквизита = ДопРеквизиты.Добавить();
		Свойство = Новый Структура("Наименование", Элемент);
		СтрокаДопРеквизита.Свойство = Свойство;
		СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ[Элемент];
	КонецЦикла;
		
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ЭквайринговыеТерминалы_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЭквайринговыеТерминалы";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",     "Эквайер", , "Справочник_Контрагенты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ЭквайринговыеТерминалы_Получение");
	ПравилоКонвертации.ИмяПКО            	= "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных      	= Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата     	= "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник.СерииНоменклатуры");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных";
	
	ДобавитьПКС(ПравилоКонвертации.Свойства, "",     	"Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства, "ГоденДо", "ГоденДо");
	
КонецПроцедуры

Процедура ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Номенклатура", ДанныеИБ.Владелец);
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = НРЕГ("ИдентификаторДисконтнойКарты")
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ИдентификаторДисконтнойКарты = Новый УникальныйИдентификатор(ЗначениеДополнительногоРеквизита);
					СсылкаДК = Справочники.ДисконтныеКарты.ПолучитьСсылку(ИдентификаторДисконтнойКарты);
					Если ОбщегоНазначения.СсылкаСуществует(СсылкаДК) Тогда
						ПолученныеДанные.ДисконтнаяКарта = СсылкаДК;
					
						ВладелецДК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаДК, "ВладелецКарты");
						Если ЗначениеЗаполнено(ВладелецДК) Тогда
							ПолученныеДанные.Контрагент = ВладелецДК;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	МассивСтрокОплата = ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена);
		
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДанныеИБ = Неопределено 
		ИЛИ ДанныеИБ.Статус <> Перечисления.СтатусыЧековККМ.Пробит)
		И ПолученныеДанные <> Неопределено Тогда
		
		ПолученныеДанные.ВидЦен		   		= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
		ПолученныеДанные.КассоваяСмена 		= НайтиКассовуюСмену(ПолученныеДанные.КассаККМ, ПолученныеДанные.НомерСменыККМ, ПолученныеДанные.Дата); 
			
		Если ТипЗнч(ПолученныеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ПолученныеДанные.Статус 			= Перечисления.СтатусыЧековККМ.Пробит;
		КонецЕсли;

		Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
			ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
			ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
			ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
		КонецЕсли;
		
		ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
		ЗаполнитьПартииИСерии(ПолученныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено 
		И ПолученныеДанные <> Неопределено Тогда
		
		ПолученныеДанные.ВидЦен		   	= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
		ПолученныеДанные.КассоваяСмена 	= НайтиКассовуюСмену(ПолученныеДанные.КассаККМ, ПолученныеДанные.НомерСменыККМ, ПолученныеДанные.Дата); 
			
		Если ТипЗнч(ПолученныеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ПолученныеДанные.Статус 			= Перечисления.СтатусыЧековККМ.Пробит;
		КонецЕсли;
		
		Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
			ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
			ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
			ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
		КонецЕсли;
		
		ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
		ЗаполнитьПартииИСерии(ПолученныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложеннаяОбработка_ЧекККМ(Объект, КомпонентыОбмена)

	Запрос = Новый Запрос("ВЫБРАТЬ Т.Ссылка КАК Номенклатура ИЗ Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка В (&Номенклатура) И Т.ЭтоНабор");
	Запрос.УстановитьПараметр("Номенклатура", Объект.Запасы.ВыгрузитьКолонку("Номенклатура"));
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл

		СтрокиНабора = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Номенклатура));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиНабора Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", 		Константы.УчетПоКомпании.Компания(Объект.Организация));
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаТабличнойЧасти.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", 	Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("Цена", 				СтрокаТабличнойЧасти.Цена);
			СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("ВидЦен", 				Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
			НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
			
			ИндексСтроки = Объект.Запасы.Индекс(СтрокаТабличнойЧасти);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
			
			ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Если ДобавленныеСтроки.Количество()=0 Тогда
				ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
			Иначе
				ДобавленнаяСтрока = ДобавленныеСтроки[0];
			КонецЕсли; 
			ДобавленнаяСтрока.Количество = ДобавленнаяСтрока.Количество+?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
			ДобавленыСтроки = Ложь;
			
			Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
				
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСостава);
				СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
				СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
				НайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество()>0 Тогда
					НоваяСтрока = НайденныеСтроки[0];
					Если СтруктураДанные.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") Тогда
						Если НоваяСтрока.Количество+ОписаниеСостава.Количество<>0 И НоваяСтрока.Цена<>ОписаниеСостава.Цена Тогда
							НоваяСтрока.Цена = (НоваяСтрока.Количество*НоваяСтрока.Цена+ОписаниеСостава.Количество*ОписаниеСостава.Цена)/(НоваяСтрока.Количество+ОписаниеСостава.Количество);
						КонецЕсли; 
					КонецЕсли; 
				Иначе
					НоваяСтрока = Объект.Запасы.Вставить(ИндексСтроки);
					ИндексСтроки = ИндексСтроки+1;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава, , "Количество, ДоляСтоимости");
					НоваяСтрока.НоменклатураНабора = СтрокаТабличнойЧасти.Номенклатура;
					НоваяСтрока.ХарактеристикаНабора = СтрокаТабличнойЧасти.Характеристика;
					НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
					ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
					ДобавленыСтроки = Истина;
				КонецЕсли; 
				
				НоваяСтрока.Количество = НоваяСтрока.Количество+ОписаниеСостава.Количество*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
				НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимости+ОписаниеСостава.ДоляСтоимости*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
					НоваяСтрока.Сумма = 0;
				ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0 И НоваяСтрока.Количество <> 0 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				Если Объект.СуммаВключаетНДС Тогда
					НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.Сумма / ((СтавкаНДС + 100) / 100);
				Иначе
					НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
				КонецЕсли;
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
			КонецЦикла;
			
			Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		
		ПараметрыПолитики = ПараметрыНалогообложения(ДанныеИБ.Владелец);
			
		Если ПараметрыПолитики <> Неопределено Тогда
			
			Если ПараметрыПолитики.ПрименяетсяПатент Тогда
				ДанныеXDTO.Вставить("СистемаНалогообложения", "ПатентнаяСистема");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзмененийНачальнойВыгрузкиДанных

// Выполняет регистрацию изменений для начальной выгрузки данных с учетом даты начала выгрузки и списка организаций.
// Процедура является универсальной и может быть использована для регистрации изменений данных по дате начала выгрузки
// и списку организаций для объектных типов данных и наборов записей регистров.
// Если список организаций не задан (Организации = Неопределено), то изменения регистрируются только по дате начала
// выгрузки.
// Регистрации подлежат данные для всех объектов метаданных, включенных в состав плана обмена.
// Если для объекта метаданных в составе плана обмена установлен признак авторегистрации
// или если признак авторегистрации не установлен и правила регистрации не заданы,
// то регистрация изменений будет выполнена безусловно для всех данных этого типа.
// Если для объекта метаданных заданы правила регистрации, то регистрация изменений будет выполнена 
// с учетом даты начала выгрузки и списка организаций.
// Для документов поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Для бизнес-процессов и для задач поддерживается регистрация изменений по дате начала выгрузки.
// Для наборов записей регистров поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Данная процедура может служить прототипом для разработки собственных процедур регистрации изменений
// для начальной выгрузки данных.
//
// Параметры:
//
//  Получатель - ПланОбменаСсылка - узел плана обмена,
//               для которого требуется выполнить регистрацию изменений данных.
//  ДатаНачалаВыгрузки - Дата - дата, относительно которой необходимо выполнить
//               регистрацию изменений данных для выгрузки. Изменения будут зарегистрированы для данных,
//               которые на оси времени располагаются после этой даты.
//  Организации - Массив
//              - Неопределено - список организаций, для которых необходимо выполнить регистрацию
//               изменений данных. Если параметр не задан, то организации не будут
//               учитываться при регистрации изменений.
//  Данные 		- Массив
//              - Неопределено - список объектов метаданных, для которых необходимо выполнить регистрацию
//               изменений данных. Если параметр не задан, то будут зарегистрированы все объекты из плана обмена.
//
Процедура ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Знач Получатель, ДатаНачалаВыгрузки,
	Организации = Неопределено,
	Данные = Неопределено)
	
	ОтборПоОрганизациям = (Организации <> Неопределено);
	ОтборПоДатеНачалаВыгрузки = ЗначениеЗаполнено(ДатаНачалаВыгрузки);
	
	Если Не ОтборПоОрганизациям И Не ОтборПоДатеНачалаВыгрузки Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОтборПоДатеНачалаВыгрузкиИОрганизациям = ОтборПоДатеНачалаВыгрузки И ОтборПоОрганизациям;
	
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ИспользоватьФильтрПоМетаданным = (ТипЗнч(Данные) = Тип("Массив"));
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ИспользоватьФильтрПоМетаданным
			И Данные.Найти(ЭлементСоставаПланаОбмена.Метаданные) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Документы
				
				Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
					// Регистрация по дате и организациям.
					И ЭлементСоставаПланаОбмена.Метаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					Выборка = ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				Иначе // Регистрация по дате
					
					Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ЭлементСоставаПланаОбмена.Метаданные)
				ИЛИ ОбщегоНазначения.ЭтоЗадача(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Бизнес-процессы и Задачи
				
				// Регистрация по дате
				Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
					
				КонецЦикла;
				
				Продолжить;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Регистры
				
				// Регистры сведений (независимые).
				Если ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
					И ЭлементСоставаПланаОбмена.Метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					ОсновнойОтбор = ОсновнойОтборРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
					
					ОтборПоПериоду     = (ОсновнойОтбор.Найти("Период") <> Неопределено);
					ОтборПоОрганизации = (ОсновнойОтбор.Найти("Организация") <> Неопределено);
					
					// Регистрация по дате и организациям.
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям И ОтборПоПериоду И ОтборПоОрганизации Тогда
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
					ИначеЕсли ОтборПоДатеНачалаВыгрузки И ОтборПоПериоду Тогда // Регистрация по дате
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
					ИначеЕсли ОтборПоОрганизациям И ОтборПоОрганизации Тогда // Регистрация по организациям.
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации);
						
					Иначе
						
						Выборка = Неопределено;
						
					КонецЕсли;
					
					Если Выборка <> Неопределено Тогда
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							Для Каждого ИмяИзмерения Из ОсновнойОтбор Цикл
								
								НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка[ИмяИзмерения];
								НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
								
							КонецЦикла;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе // Регистры (прочие)
					ЕстьПериодВРегистре = ОбщегоНазначения.ЭтоРегистрБухгалтерии(ЭлементСоставаПланаОбмена.Метаданные)
							ИЛИ ОбщегоНазначения.ЭтоРегистрНакопления(ЭлементСоставаПланаОбмена.Метаданные)
							ИЛИ (ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
								И ЭлементСоставаПланаОбмена.Метаданные.ПериодичностьРегистраСведений 
									<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
						И ЕстьПериодВРегистре
						// Регистрация по дате и организациям.
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Организация") <> Неопределено Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					// Регистрация по дате
					ИначеЕсли ЕстьПериодВРегистре Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ЭлементСоставаПланаОбмена.Метаданные);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Организация В(&Организации)
	|	И Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор,
	ПолноеИмяОбъекта,
	ДатаНачалаВыгрузки,
	Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ОсновнойОтборРегистраСведений(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработкаДанных

Функция СтавкаНДСПоСтроке(СтавкаСтрокой)
	Если СтавкаСтрокой = "НДС18" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС18_118" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10_110" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС0" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0
		|	И НЕ СтавкиНДС.НеОблагается";
	ИначеЕсли СтавкаСтрокой = "НДС20" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС20_120" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.НеОблагается";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция НайтиКассовуюСмену(КассаККМ, НомерСмены, ДатаСмены)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.НомерСменыККТ = &НомерКассовойСменыККМ
	|	И КассоваяСмена.НачалоКассовойСмены > НАЧАЛОПЕРИОДА(&ДатаСмены, ДЕНЬ)
	|	И (КассоваяСмена.ОкончаниеКассовойСмены <= НАЧАЛОПЕРИОДА(&ДатаСмены, ДЕНЬ)
	|			ИЛИ КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1))");
	
	Запрос.УстановитьПараметр("НомерКассовойСменыККМ", Число(НомерСмены));
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаСмены", ДатаСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(Выборка.Ссылка);
	Иначе
		Документ = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена)
	
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты, НомерКарты, ЭквайринговыйТерминал");
			СтруктураДанныхСтроки.Сумма 				= Строка.СуммаОплаты;
			СтруктураДанныхСтроки.ВидОплаты 			= Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
			СтруктураДанныхСтроки.НомерКарты 			= Строка.НомерКарты;
			СтруктураДанныхСтроки.ЭквайринговыйТерминал	= Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО 					= "Справочник_Контрагенты_Получение";
				ПКОКонтрагент 			= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент 				= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
															ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
															
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ЭквайринговыйТерминал) Тогда
				
				ИмяПКО 					= "Справочник_ЭквайринговыеТерминалы_Получение";
				ПКОЭТ 					= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ЭквайринговыйТерминал 	= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ЭквайринговыйТерминал,
															ПКОЭТ, "ПолучитьСсылку").Ссылка;
															
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
				
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрокОплата;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьПравилоКонвертации(ПравилаКонвертации, ОбъектФорматаИмяПКО)
	
	ПравилоКонвертации = ПравилаКонвертации.Найти(ОбъектФорматаИмяПКО, "ОбъектФормата");
	
	Если ПравилоКонвертации = Неопределено Тогда
		ПравилоКонвертации = ПравилаКонвертации.Найти(ОбъектФорматаИмяПКО, "ИмяПКО");
	КонецЕсли;

	Если ПравилоКонвертации = Неопределено Тогда
		ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	КонецЕсли;
	
	Возврат ПравилоКонвертации;
	
КонецФункции

Функция ПолучитьПравилоОбработки(ПравилаОбработки, Имя)
	
	ПравилоКонвертации = ПравилаОбработки.Найти(Имя, "Имя");

	Если ПравилоКонвертации = Неопределено Тогда
		
		ПравилоКонвертации = ПравилаОбработки.Добавить();
		ПравилоКонвертации.Имя = Имя;
		
	КонецЕсли;
	
	Возврат ПравилоКонвертации;
	
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
					
	Если (ЗначениеЗаполнено(СвойствоКонфигурации)
			И РодительПКС.Найти(СвойствоКонфигурации, "СвойствоКонфигурации") <> Неопределено)
		ИЛИ (НЕ ЗначениеЗаполнено(СвойствоКонфигурации)
			И ЗначениеЗаполнено(СвойствоФормата)
			И РодительПКС.Найти(СвойствоФормата, "СвойствоФормата") <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
	
	КонвертацияТабличнойЧасти = ПравилоКонвертации.СвойстваТабличныхЧастей.Найти(ИмяТЧКонфигурации, "ТЧКонфигурации");
	
	Если КонвертацияТабличнойЧасти = Неопределено Тогда
		
		КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
		
	КонецЕсли;
	
    Возврат КонвертацияТабличнойЧасти.Свойства;
	
КонецФункции

Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции

Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции

Процедура ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если ДанныеXDTO.Свойство("Кассир") Тогда
		
		ИмяПКО 		= "Справочник_ФизическиеЛица_Получение";
		ПКОФизЛицо	= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		Кассир 		= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Кассир, ПКОФизЛицо, "ПолучитьСсылку").Ссылка;
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Кассир", Кассир);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные)
	
	Перем Кассир;
	
	Если  ПолученныеДанные.ДополнительныеСвойства.Свойство("Кассир", Кассир) 
		И ЗначениеЗаполнено(Кассир) Тогда
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПользователя.Пользователь КАК Автор,
		|	Сотрудники.Ссылка КАК Ответственный
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
		|		ПО СотрудникиПользователя.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Физлицо = &Кассир";
		
		Запрос.УстановитьПараметр("Кассир",	Кассир);
		
		ДанныеПоиска = Запрос.Выполнить().Выбрать();
		
		Если ДанныеПоиска.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПартииИСерии(ПолученныеДанные)
	
	Перем Запасы, ШтрихКод, Партия;
	
	СписокШтрихкодов 	= Новый Массив;
	СоответствиеСтрок   = Новый Соответствие;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Запасы", Запасы) Тогда
		
		Для НомерСтроки = 1 По Запасы.Количество() Цикл
			
			СтруктураСтроки = Запасы[НомерСтроки-1];
			
			Если СтруктураСтроки.Свойство("ШтрихКод", ШтрихКод)
				И ЗначениеЗаполнено(ШтрихКод) Тогда
				
				Если СоответствиеСтрок.Получить(ШтрихКод) = Неопределено Тогда 
					
					СписокШтрихкодов.Добавить(СтруктураСтроки);
					СоответствиеСтрок.Вставить(ШтрихКод, Новый Массив);
					
				КонецЕсли;
				
				МассивСтрок = СоответствиеСтрок.Получить(ШтрихКод);
				МассивСтрок.Добавить(НомерСтроки);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если СписокШтрихкодов.Количество() Тогда
	
		ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СписокШтрихкодов);

		Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам Цикл
			
			Если НЕ КлючИЗначение.Значение.Свойство("Партия", Партия) 
				ИЛИ Не ЗначениеЗаполнено(Партия) Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихКод  	= КлючИЗначение.Ключ;
			СтрокиТЧ	= СоответствиеСтрок.Получить(ШтрихКод);
			
			Для Каждого НомерСтроки Из СтрокиТЧ Цикл
				
				ПолученныеДанные.Запасы[НомерСтроки-1].Партия = Партия;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолученныеДанные.СерииНоменклатуры.Количество() Тогда
		
		Для Каждого СтрокаТЧ Из ПолученныеДанные.Запасы Цикл
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(СтрокаТЧ, ПолученныеДанные, "КлючСвязи");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ДляВозврата = Ложь)
	
	МассивСтрокТовары 	= Новый Массив;
	МассивСтрокСерии	= Новый Массив;
	
	Если ДляВозврата Тогда
		
		ИмяТабличнойЧасти = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыВозвратПродажи", "ВозвратТоваров");
		
	Иначе
		
		ИмяТабличнойЧасти = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыПродажа", "Товары");
		
	КонецЕсли;
	
	КлючСвязи = 0;
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧасти, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Штрихкод", "Штрихкод");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьТовары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			
			КлючСвязи 			  = КлючСвязи + 1;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("Серия", Строка.Серия);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Штрихкод", "Штрихкод");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыНалогообложения(Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти
			
