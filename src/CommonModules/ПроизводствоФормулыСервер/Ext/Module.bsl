
#Область ПрограммныйИнтерфейс

// Выполняет проверку формулы.
//
// Параметры:
//  Ошибки - Неопределено, СписокЗначений - Возвращает список ошибок, возникших при проверке.
//  Формула - Строка - Проверяемая формула.
//  ФиксированныеЗначения - ТаблицаЗначений - Таблица фиксированных значений, использованных в формуле
//		Колонки:
//			Идентификатор - Строка - Представление значения в формуле
//			Значение - ОпределяемыйТип.ФиксированныеЗначенияФормул - Значение в формуле
//  ОграничениеТипа - ОписаниеТипов - Ожидаемый тип результата расчета.
//  КатегорияНоменклатуры - СправочникСсылка.КатегорииНоменклатуры - Категория номенклатуры для определения
//                                                                   дополнительных реквизитов.
//
Процедура ПроверитьФормулу(Ошибки, Формула, ФиксированныеЗначения, ОграничениеТипа, КатегорияНоменклатуры) Экспорт
	Перем СоответствиеОперандов, РасчетныеДанные;
	
	ТекстФормулы = СокрЛП(Формула);
	Если СтрЧислоВхождений(ТекстФормулы, СтрокаНачалаОперанда()) <> СтрЧислоВхождений(ТекстФормулы, СтрокаКонцаОперанда()) Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых операндов не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ТекстФормулы, "(") <> СтрЧислоВхождений(ТекстФормулы, ")") Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых скобок не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(ТекущаяДатаСеанса(), Формула);
	СоответствиеЗначенийОперандов = СоответствиеОперандовДляПроверки(КатегорияНоменклатуры);
	Для каждого СтрокаТаблицы Из ФиксированныеЗначения Цикл
		СоответствиеЗначенийОперандов.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.Значение);
	КонецЦикла; 	
	Для каждого Строка Из ТаблицаОперандов Цикл
		
		Идентификатор = Сред(Строка.Операнд, 2, СтрДлина(Строка.Операнд) - 2);
		ЗначениеПоУмолчанию = СоответствиеЗначенийОперандов.Получить(Идентификатор);
		
		Если ЗначениеПоУмолчанию = Неопределено Тогда
		
			ТекстОшибки = НСтр("ru ='Не распознан операнд %1.
									|Проверьте правильность написания формулы.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Операнд);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьОперандВСтруктуру(СоответствиеОперандов, Строка.Операнд, ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	Если Ошибки<>Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	РасчетДанныхПоФормуле(ТекстФормулы, СоответствиеОперандов, РасчетныеДанные);
	
	Если РасчетныеДанные.ОшибкаРасчета Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru ='При расчете возникли ошибки. Проверьте правильность написания формулы.
			|Подробное описание:
			|%1'"), РасчетныеДанные.ТекстОшибки);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	ИначеЕсли ОграничениеТипа <> Неопределено 
		И РасчетныеДанные.Результат <> Неопределено 
		И НЕ ОграничениеТипа.СодержитТип(ТипЗнч(РасчетныеДанные.Результат)) Тогда 
		
		ТекстОшибки = СтрШаблон(НСтр("ru ='Тип полученного значения <%1> не соответствует ожидаемому <%2>'"), Строка(ТипЗнч(РасчетныеДанные.Результат)), Строка(ОграничениеТипа));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
		
КонецПроцедуры

// Выполняет расчет параметрических спецификации по табличной части заказа. В результате расчета формируются
//		рабочие спецификации, привязанные к заказу.
//
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказПокупателя, ДокументОбъект.ЗаказНаПроизводство, ДанныеФормыСтруктура - Объект заказа, при вызове из формы объект должен быть записан.
//  ИмяТабличнойЧасти - Строка - Имя обрабатываемой табличной части.
//  Отказ - Булево - Признак наличия ошибок при расчете формул.
//
Процедура РассчитатьПараметрическиеСпецификации(ЗаказОбъект, ИмяТабличнойЧасти, Отказ) Экспорт
	Перем Ошибки;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Спецификации) Тогда
		Возврат;
	КонецЕсли;
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ИзменяемаяИнформация = Новый Соответствие;
	ТабличнаяЧасть = ЗаказОбъект[ИмяТабличнойЧасти];
	
	ПроверяемыеСпецификации = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			ПроверяемыеСпецификации.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла;
	ПараметрическиеСпецификации = ВыбратьПараметрические(ПроверяемыеСпецификации);
	Если ПараметрическиеСпецификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Добавление", Метаданные.Справочники.Спецификации) Тогда
		ТекстОшибки = НСтр("ru = 'Документ содержит параметрические спецификации, проведение возможно только для профиля прав ""Производство"".'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		Если ПараметрическиеСпецификации.Найти(СтрокаТабличнойЧасти.Спецификация) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЗаказОбъект.Ссылка)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ЗаказПокупателя = СтрокаТабличнойЧасти.ЗаказПокупателя;
		Иначе
			ЗаказПокупателя = Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТабличнойЧасти, "КлючСвязи");
		КонецЕсли; 
		
		Данные = ДанныеРасчета(
			ЗаказОбъект, 
			ЗаказПокупателя, 
			СтрокаТабличнойЧасти.Номенклатура, 
			СтрокаТабличнойЧасти.Характеристика, 
			СтрокаТабличнойЧасти.Спецификация, 
			СтрокаТабличнойЧасти.КлючСвязи);
		
		ИндексСтроки = ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
		ИзменяемаяИнформация.Вставить(ИндексСтроки, Новый Структура("Состав, Операции", Новый Соответствие, Новый Соответствие));
		ПутьКПолю = СтрШаблон("Объект.%1[%2].Спецификация", ИмяТабличнойЧасти, ИндексСтроки);
		ПараметрыВыбораНоменклатура = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав.Реквизиты.Номенклатура.ПараметрыВыбора;
		ПараметрыВыбораХарактеристика = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав.Реквизиты.Характеристика.ПараметрыВыбора;
		
		Для каждого СтрокаСостава Из Данные["Спецификация.Состав"] Цикл
			СтруктураРеквизитов = Новый Структура;
			Если СтрокаСостава.ИспользуетсяСопоставление Тогда
				РасчетныеДанные = Неопределено;
				РасчетДанныхПоСопоставлению(Данные["Спецификация.СопоставлениеСостава"], СтрокаСостава, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, , ПараметрыВыбораНоменклатура, ПутьКПолю) Тогда
					СтруктураРеквизитов.Вставить("Номенклатура", РасчетныеДанные.Результат.Номенклатура);
					СтруктураРеквизитов.Вставить("Характеристика", РасчетныеДанные.Результат.Характеристика);
					СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитов.Номенклатура, "ЕдиницаИзмерения")); 
					СтруктураРеквизитов.Вставить("Спецификация", 
						Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураРеквизитов.Номенклатура,
						СтруктураРеквизитов.Характеристика));
				КонецЕсли; 
			Иначе
				Если Не ПустаяСтрока(СтрокаСостава.ФормулаНоменклатура) Тогда
					РасчетныеДанные = Неопределено;
					ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаНоменклатура, Данные, РасчетныеДанные);
					Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипНоменклатура, ПараметрыВыбораНоменклатура, ПутьКПолю) Тогда
						СтруктураРеквизитов.Вставить("Номенклатура", РасчетныеДанные.Результат);
						Если ЗначениеЗаполнено(РасчетныеДанные.Результат) Тогда
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураРеквизитов.Номенклатура, "ЕдиницаИзмерения, ИспользоватьХарактеристики");
							СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
							Если ЗначениеЗаполнено(СтруктураРеквизитов.Номенклатура) И ЗначенияРеквизитов.ИспользоватьХарактеристики Тогда
								СтруктураРеквизитов.Вставить("Характеристика", НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураРеквизитов.Номенклатура));
							Иначе
								СтруктураРеквизитов.Вставить("Характеристика", Справочники.Спецификации.ПустаяСсылка());
							КонецЕсли; 
							СтруктураРеквизитов.Вставить("Спецификация", 
								Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураРеквизитов.Номенклатура,
								СтруктураРеквизитов.Характеристика));
						Иначе
							СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
							СтруктураРеквизитов.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
							СтруктураРеквизитов.Вставить("Спецификация", Справочники.Спецификации.ПустаяСсылка());
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				Если Не ПустаяСтрока(СтрокаСостава.ФормулаХарактеристика) Тогда
					РасчетныеДанные = Неопределено;
					ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаХарактеристика, Данные, РасчетныеДанные);
					Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипХарактеристика, ПараметрыВыбораХарактеристика, ПутьКПолю) Тогда
						СтруктураРеквизитов.Вставить("Характеристика", РасчетныеДанные.Результат);
						Если ЗначениеЗаполнено(РасчетныеДанные.Результат) Тогда
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураРеквизитов.Характеристика, "Владелец");
							Если НЕ СтруктураРеквизитов.Свойство("Номенклатура")
								И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) 
								И ТипЗнч(ЗначенияРеквизитов.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
								СтруктураРеквизитов.Вставить("Номенклатура", ЗначенияРеквизитов.Владелец);
								ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураРеквизитов.Номенклатура, "ЕдиницаИзмерения");
								СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
							КонецЕсли; 
						Иначе
							СтруктураРеквизитов.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						КонецЕсли;
						Если СтруктураРеквизитов.Свойство("Номенклатура") Тогда
							СтруктураРеквизитов.Вставить("Спецификация",
								Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураРеквизитов.Номенклатура,
								СтруктураРеквизитов.Характеристика));
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			Если НЕ ПустаяСтрока(СтрокаСостава.ФормулаКоличество) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаКоличество, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло, , ПутьКПолю) Тогда
					СтруктураРеквизитов.Вставить("Количество", РасчетныеДанные.Результат);
				КонецЕсли; 
			КонецЕсли;
			Если СтруктураРеквизитов.Количество() > 0 Тогда
				СтруктураРеквизитов.Вставить("ИспользуетсяСопоставление", Ложь);
				СтруктураРеквизитов.Вставить("ФормулаНоменклатура", "");
				СтруктураРеквизитов.Вставить("ФормулаХарактеристика", "");
				СтруктураРеквизитов.Вставить("ФормулаКоличество", "");
				ИндексСостава = Данные["Спецификация.Состав"].Индекс(СтрокаСостава);
				ИзменяемаяИнформация[ИндексСтроки].Состав.Вставить(ИндексСостава, СтруктураРеквизитов);
			КонецЕсли; 
		КонецЦикла;
		
		ПараметрыВыбора = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Операции.Реквизиты.Операция.ПараметрыВыбора;
		Для каждого СтрокаОперации Из Данные["Спецификация.Операции"] Цикл
			СтруктураРеквизитов = Новый Структура;
			Если СтрокаОперации.ИспользуетсяСопоставление Тогда
				РасчетныеДанные = Неопределено;
				РасчетДанныхПоСопоставлению(Данные["Спецификация.СопоставлениеОпераций"], СтрокаОперации, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, , ПараметрыВыбора, ПутьКПолю) Тогда
					СтруктураРеквизитов.Вставить("Операция", РасчетныеДанные.Результат.Операция);
				КонецЕсли; 
			Иначе
				Если Не ПустаяСтрока(СтрокаОперации.ФормулаОперация) Тогда
					РасчетныеДанные = Неопределено;
					ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаОперация, Данные, РасчетныеДанные);
					Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипНоменклатура, ПараметрыВыбора, ПутьКПолю) Тогда
						СтруктураРеквизитов.Вставить("Операция", РасчетныеДанные.Результат);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			Если НЕ ПустаяСтрока(СтрокаОперации.ФормулаКоличество) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаКоличество, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло, , ПутьКПолю) Тогда
					СтруктураРеквизитов.Вставить("Количество", РасчетныеДанные.Результат);
				КонецЕсли; 
			КонецЕсли; 
			Если НЕ ПустаяСтрока(СтрокаОперации.ФормулаНормаВремени) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаНормаВремени, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло, , ПутьКПолю) Тогда
					СтруктураРеквизитов.Вставить("НормаВремени", РасчетныеДанные.Результат);
				КонецЕсли; 
			КонецЕсли; 
			Если СтруктураРеквизитов.Количество()>0 Тогда
				СтруктураРеквизитов.Вставить("ИспользуетсяСопоставление", Ложь);
				СтруктураРеквизитов.Вставить("ФормулаОперация", "");
				СтруктураРеквизитов.Вставить("ФормулаКоличество", "");
				СтруктураРеквизитов.Вставить("ФормулаНормаВремени", "");
				ИндексОперации = Данные["Спецификация.Операции"].Индекс(СтрокаОперации);
				ИзменяемаяИнформация[ИндексСтроки].Операции.Вставить(ИндексОперации, СтруктураРеквизитов);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Отказ = Истина;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ЗаказОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		// При вызове из формы объект всегда записан 
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = НЕ ЗначениеЗаполнено(ЗаказОбъект.Ссылка);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЗаказОбъект.Ссылка.Метаданные()) И ЭтоНовый Тогда
		СсылкаНаЗаказ = ЗаказОбъект.ПолучитьСсылкуНового();
		Если СсылкаНаЗаказ.Пустая() Тогда
			МетаданныеОбъекта = СсылкаНаЗаказ.Метаданные();
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
			СсылкаНаЗаказ = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			ЗаказОбъект.УстановитьСсылкуНового(СсылкаНаЗаказ);
		КонецЕсли;
		Если ПустаяСтрока(ЗаказОбъект.Номер) Тогда
			ЗаказОбъект.УстановитьНовыйНомер();
		КонецЕсли; 
	Иначе
		СсылкаНаЗаказ = ЗаказОбъект.Ссылка;
	КонецЕсли; 
	
	Для каждого КлючИЗначение Из ИзменяемаяИнформация Цикл
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть[КлючИЗначение.Ключ];
		
		НоваяСпецификация = СтрокаТабличнойЧасти.Спецификация.Скопировать();
		НоваяСпецификация.Наименование = НоваяСпецификация.Наименование + СтрШаблон(" (%1)", ПредставлениеЗаказа(Данные, ЗаказОбъект.Ссылка.Метаданные().Имя));
		НоваяСпецификация.Заказ = СсылкаНаЗаказ;
		Если НЕ ЗначениеЗаполнено(НоваяСпецификация.ХарактеристикаПродукции) Тогда
			НоваяСпецификация.ХарактеристикаПродукции = СтрокаТабличнойЧасти.Характеристика;
		КонецЕсли; 
		НоваяСпецификация.ЭтоШаблон = Ложь;
		НоваяСпецификация.БазоваяСпецификация = СтрокаТабличнойЧасти.Спецификация;
		
		СтрокиКУдалению = Новый Массив;
		Для каждого КлючИЗначениеСтроки Из КлючИЗначение.Значение.Состав Цикл
			СтрокаСпецификации = НоваяСпецификация.Состав[КлючИЗначениеСтроки.Ключ];
			ЗаполнитьЗначенияСвойств(СтрокаСпецификации, КлючИЗначениеСтроки.Значение);
			Если (КлючИЗначениеСтроки.Значение.Свойство("Количество") И КлючИЗначениеСтроки.Значение.Количество=0)
				ИЛИ (КлючИЗначениеСтроки.Значение.Свойство("Номенклатура") И НЕ ЗначениеЗаполнено(КлючИЗначениеСтроки.Значение.Номенклатура)) Тогда
				СтрокиКУдалению.Добавить(СтрокаСпецификации);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаСпецификации Из СтрокиКУдалению Цикл
			НоваяСпецификация.Состав.Удалить(СтрокаСпецификации);
		КонецЦикла;
		
		СтрокиКУдалению = Новый Массив;
		Для каждого КлючИЗначениеСтроки Из КлючИЗначение.Значение.Операции Цикл
			СтрокаСпецификации = НоваяСпецификация.Операции[КлючИЗначениеСтроки.Ключ];
			ЗаполнитьЗначенияСвойств(СтрокаСпецификации, КлючИЗначениеСтроки.Значение);
			Если (КлючИЗначениеСтроки.Значение.Свойство("Количество") И КлючИЗначениеСтроки.Значение.Количество=0)
				ИЛИ (КлючИЗначениеСтроки.Значение.Свойство("НормаВремени") И КлючИЗначениеСтроки.Значение.НормаВремени=0)
				ИЛИ (КлючИЗначениеСтроки.Значение.Свойство("Операция") И НЕ ЗначениеЗаполнено(КлючИЗначениеСтроки.Значение.Операция)) Тогда
				СтрокиКУдалению.Добавить(СтрокаСпецификации);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаСпецификации Из СтрокиКУдалению Цикл
			НоваяСпецификация.Операции.Удалить(СтрокаСпецификации);
		КонецЦикла;
		
		НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиРеквизитыСпецификаций = ЗаказОбъект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаДополнительныйРеквизит Из СтрокиРеквизитыСпецификаций Цикл
			НовыйРеквизит = НоваяСпецификация.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйРеквизит, СтрокаДополнительныйРеквизит);
		КонецЦикла;
		
		НоваяСпецификация.СопоставлениеСостава.Очистить(); 
		НоваяСпецификация.СопоставлениеОпераций.Очистить();
		НоваяСпецификация.Записать();
		СтрокаТабличнойЧасти.Спецификация = НоваяСпецификация.Ссылка;
		
	КонецЦикла; 
	
КонецПроцедуры

// Перезаполняет состав и операции спецификации по базовой с расчетом формул.
//
// Параметры:
//  СпецификацияОбъект - ДанныеФормы, СправочникОбъект.Спецификация - Объект спецификации, которые следует перезаполнить.
//  Отказ - Булево - Признак наличия ошибок при расчете формул.
//
Процедура ЗаполнитьСпецификацию(СпецификацияОбъект, Отказ) Экспорт
	Перем Ошибки;
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	БазоваяСпецификация = СпецификацияОбъект.БазоваяСпецификация;
	
	КэшСостав = СпецификацияОбъект.Состав.Выгрузить();
	КэшОперации = СпецификацияОбъект.Операции.Выгрузить();
	Если ЗначениеЗаполнено(БазоваяСпецификация) Тогда
		СпецификацияОбъект.Состав.Загрузить(БазоваяСпецификация.Состав.Выгрузить());
		СпецификацияОбъект.Операции.Загрузить(БазоваяСпецификация.Операции.Выгрузить());
		СопоставлениеСостава = БазоваяСпецификация.СопоставлениеСостава.Выгрузить();
		СопоставлениеОпераций = БазоваяСпецификация.СопоставлениеОпераций.Выгрузить();
	Иначе
		СопоставлениеСостава = СпецификацияОбъект.СопоставлениеСостава.Выгрузить();
		СопоставлениеОпераций = СпецификацияОбъект.СопоставлениеОпераций.Выгрузить();
	КонецЕсли; 
	
	Данные = ДанныеРасчета(Неопределено, СпецификацияОбъект.Заказ, СпецификацияОбъект.Владелец, СпецификацияОбъект.ХарактеристикаПродукции, СпецификацияОбъект, Неопределено);
	
	СтрокиКУдалению = Новый Массив;
	ПараметрыВыбораНоменклатура = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав.Реквизиты.Номенклатура.ПараметрыВыбора;
	ПараметрыВыбораХарактеристика = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав.Реквизиты.Характеристика.ПараметрыВыбора;
	
	Для каждого СтрокаСостава Из СпецификацияОбъект.Состав Цикл
		Если СтрокаСостава.ИспользуетсяСопоставление Тогда
			РасчетныеДанные = Неопределено;
			РасчетДанныхПоСопоставлению(СопоставлениеСостава, СтрокаСостава, Данные, РасчетныеДанные);
			Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, , ПараметрыВыбораНоменклатура) Тогда
				СтрокаСостава.Номенклатура = РасчетныеДанные.Результат.Номенклатура;
				СтрокаСостава.Характеристика = РасчетныеДанные.Результат.Характеристика;
				СтрокаСостава.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСостава.Номенклатура, "ЕдиницаИзмерения");
				СтрокаСостава.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(
					СтрокаСостава.Номенклатура, СтрокаСостава.Характеристика);
			КонецЕсли;
		Иначе
			Если Не ПустаяСтрока(СтрокаСостава.ФормулаНоменклатура) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаНоменклатура, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипНоменклатура, ПараметрыВыбораНоменклатура) Тогда
					СтрокаСостава.Номенклатура = РасчетныеДанные.Результат;
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСостава.Номенклатура, "ЕдиницаИзмерения, ИспользоватьХарактеристики");
					СтрокаСостава.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
					Если ЗначениеЗаполнено(СтрокаСостава.Номенклатура) И ЗначенияРеквизитов.ИспользоватьХарактеристики Тогда
						СтрокаСостава.Характеристика = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтрокаСостава.Номенклатура);
					Иначе
						СтрокаСостава.Характеристика = Справочники.Спецификации.ПустаяСсылка();
					КонецЕсли; 
					СтрокаСостава.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(
						СтрокаСостава.Номенклатура, СтрокаСостава.Характеристика);
				КонецЕсли; 
			КонецЕсли; 
			Если Не ПустаяСтрока(СтрокаСостава.ФормулаХарактеристика) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаХарактеристика, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипХарактеристика, ПараметрыВыбораХарактеристика) Тогда
					СтрокаСостава.Характеристика = РасчетныеДанные.Результат;
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСостава.Характеристика, "Владелец");
					Если НЕ ЗначениеЗаполнено(СтрокаСостава.Номенклатура)
						И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) 
						И ТипЗнч(ЗначенияРеквизитов.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
						СтрокаСостава.Номенклатура = ЗначенияРеквизитов.Владелец;
						ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСостава.Номенклатура, "ЕдиницаИзмерения");
						СтрокаСостава.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
					КонецЕсли; 
					СтрокаСостава.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(
						СтрокаСостава.Номенклатура, СтрокаСостава.Характеристика); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаСостава.ФормулаКоличество) Тогда
			РасчетныеДанные = Неопределено;
			ЗаполнитьОперандыИРассчитать(СтрокаСостава.ФормулаКоличество, Данные, РасчетныеДанные);
			Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло) Тогда
				СтрокаСостава.Количество = РасчетныеДанные.Результат;
			КонецЕсли; 
		КонецЕсли;
		СтрокаСостава.ИспользуетсяСопоставление = Ложь;
		СтрокаСостава.ФормулаНоменклатура = "";
		СтрокаСостава.ФормулаХарактеристика = "";
		СтрокаСостава.ФормулаКоличество = "";
		Если СтрокаСостава.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокаСостава.Номенклатура) Тогда
			СтрокиКУдалению.Добавить(СтрокаСостава);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаСпецификации Из СтрокиКУдалению Цикл
		СпецификацияОбъект.Состав.Удалить(СтрокаСпецификации);
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	ПараметрыВыбора = Метаданные.Справочники.Спецификации.ТабличныеЧасти.Операции.Реквизиты.Операция.ПараметрыВыбора;
	Для каждого СтрокаОперации Из СпецификацияОбъект.Операции Цикл
		Если СтрокаОперации.ИспользуетсяСопоставление Тогда
			РасчетныеДанные = Неопределено;
			РасчетДанныхПоСопоставлению(СопоставлениеОпераций, СтрокаОперации, Данные, РасчетныеДанные);
			Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, , ПараметрыВыбора) Тогда
				СтрокаОперации.Операция = РасчетныеДанные.Результат.Операция;
			КонецЕсли; 
		Иначе
			Если Не ПустаяСтрока(СтрокаОперации.ФормулаОперация) Тогда
				РасчетныеДанные = Неопределено;
				ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаОперация, Данные, РасчетныеДанные);
				Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипНоменклатура, ПараметрыВыбора) Тогда
					СтрокаОперации.Операция = РасчетныеДанные.Результат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаОперации.ФормулаКоличество) Тогда
			РасчетныеДанные = Неопределено;
			ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаКоличество, Данные, РасчетныеДанные);
			Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло) Тогда
				СтрокаОперации.Количество = РасчетныеДанные.Результат;
			КонецЕсли; 
		КонецЕсли; 
		Если НЕ ПустаяСтрока(СтрокаОперации.ФормулаНормаВремени) Тогда
			РасчетныеДанные = Неопределено;
			ЗаполнитьОперандыИРассчитать(СтрокаОперации.ФормулаНормаВремени, Данные, РасчетныеДанные);
			Если НЕ ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ТипЧисло) Тогда
				СтрокаОперации.НормаВремени = РасчетныеДанные.Результат;
			КонецЕсли; 
		КонецЕсли; 
		СтрокаОперации.ИспользуетсяСопоставление = Ложь;
		СтрокаОперации.ФормулаОперация = "";
		СтрокаОперации.ФормулаКоличество = "";
		СтрокаОперации.ФормулаНормаВремени = "";
		Если СтрокаОперации.Количество = 0 
			ИЛИ СтрокаОперации.НормаВремени = 0 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаОперации.Операция) Тогда
			СтрокиКУдалению.Добавить(СтрокаОперации);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаСпецификации Из СтрокиКУдалению Цикл
		СпецификацияОбъект.Операции.Удалить(СтрокаСпецификации);
	КонецЦикла;
		
	Если Ошибки<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		СпецификацияОбъект.Состав.Загрузить(КэшСостав);
		СпецификацияОбъект.Операции.Загрузить(КэшОперации);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
 
// Возвращает только параметрические спецификации из массива спецификаций, переданного в функцию.
//
// Параметры:
//  Спецификации - Массив - Массив спецификаций, из которого нужно выбрать параметрические
// Возвращаемое значение:
//  Массив - Массив параметрических спецификаций.
//
Функция ВыбратьПараметрические(Спецификации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спецификации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Ссылка В(&Спецификации)
	|	И Спецификации.ЭтоШаблон";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
 
// Проверяет заполнение обязательных доп. реквизитов параметрических спецификаций в заказе.
//
// Параметры:
//  Объект - ДанныеФормы - Обрабатываемый заказ.
//  ИмяТЧ - Строка - Имя табличной части запасов.
//  Отказ - Булево - Признак наличия незаполненных обязательных реквизитов.
//
Процедура ПроверитьЗаполнениеДопРеквизитовСпецификаций(Объект, ИмяТЧ, Отказ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПараметрическиеСпецификации") Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	ТаблицаВыборки = Новый ТаблицаЗначений;
	ТаблицаВыборки.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаВыборки.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти. Спецификация) ИЛИ СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаВыборки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если ТаблицаВыборки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВыборки", ТаблицаВыборки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыборки.Спецификация КАК Спецификация,
	|	ТаблицаВыборки.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ТаблицаВыборки
	|ИЗ
	|	&ТаблицаВыборки КАК ТаблицаВыборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыборки.Спецификация КАК Спецификация,
	|	ТаблицаВыборки.КлючСвязи КАК КлючСвязи,
	|	Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ПОМЕСТИТЬ СпецификацииИКатегории
	|ИЗ
	|	ТаблицаВыборки КАК ТаблицаВыборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации КАК Спецификации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО Спецификации.Владелец = Номенклатура.Ссылка
	|		ПО ТаблицаВыборки.Спецификация = Спецификации.Ссылка
	|ГДЕ
	|	Спецификации.ЭтоШаблон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииИКатегории.Спецификация КАК Спецификация,
	|	СпецификацииИКатегории.КлючСвязи КАК КлючСвязи,
	|	ДополнительныеРеквизитыПоКатегории.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыПоКатегории.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
	|ИЗ
	|	СпецификацииИКатегории КАК СпецификацииИКатегории
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыПоКатегории
	|			ПО КатегорииНоменклатуры.НаборСвойствСпецификации = ДополнительныеРеквизитыПоКатегории.Ссылка
	|		ПО СпецификацииИКатегории.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ДополнительныеРеквизитыПоКатегории.Свойство.ЗаполнятьОбязательно, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВыборки.Спецификация,
	|	ТаблицаВыборки.КлючСвязи,
	|	ДополнительныеРеквизитыОбщие.Свойство,
	|	ДополнительныеРеквизитыОбщие.Свойство.ЗаполнятьОбязательно
	|ИЗ
	|	ТаблицаВыборки КАК ТаблицаВыборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбщие
	|		ПО (ДополнительныеРеквизитыОбщие.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Спецификации_Общие))
	|ГДЕ
	|	ЕСТЬNULL(ДополнительныеРеквизитыОбщие.Свойство.ЗаполнятьОбязательно, ЛОЖЬ)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", Выборка.КлючСвязи);
		СтрокиТЧ = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		СтруктураОтбора.Вставить("Свойство", Выборка.Свойство);
		СтрокиЗначения = Объект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОтбора);
		Если СтрокиЗначения.Количество()>0 И ЗначениеЗаполнено(СтрокиЗначения[0].Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЗависимостей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Свойство, "ЗависимостиДополнительныхРеквизитов").Выгрузить();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗависимоеСвойство", "ЗаполнятьОбязательно");
		ТаблицаЗависимостей = ТаблицаЗависимостей.Скопировать(СтруктураОтбора);
		
		Если ТаблицаЗависимостей.Количество() > 0 Тогда
			
			// Нужно получить все реквизиты объекта на случай, если по ним настроена зависимость.
			ДополнительныеРеквизитыОбъекта = УправлениеСвойствами.СвойстваОбъекта(Выборка.Спецификация, Истина, Ложь);
			ЗначенияРеквизитов = Новый Структура;
			Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизитыОбъекта Цикл
				Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныйРеквизит, "Имя,ТипЗначения");
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("КлючСвязи", Выборка.КлючСвязи);
				СтруктураОтбора.Вставить("Свойство", ДополнительныйРеквизит);
				СтрокиЗначения = Объект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОтбора);
				Значение = ?(СтрокиЗначения.Количество()>0, Свойства.ТипЗначения.ПривестиЗначение(СтрокиЗначения[0].Значение), Свойства.ТипЗначения.ПривестиЗначение(Неопределено));
				ЗначенияРеквизитов.Вставить(Свойства.Имя, Значение);
			КонецЦикла;
			
			ОписаниеЗависимогоРеквизита = Новый Структура;
			ОписаниеЗависимогоРеквизита.Вставить("УсловиеОбязательностиЗаполнения", Неопределено);
			Для Каждого СтрокаЗависимостей Из ТаблицаЗависимостей Цикл
				Если ТипЗнч(СтрокаЗависимостей.Реквизит) = Тип("Строка") Тогда
					ПутьКРеквизиту = "Параметры.ОписаниеОбъекта." + СтрокаЗависимостей.Реквизит;
				Иначе
					ПутьКРеквизиту = "Параметры.Форма." + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗависимостей.Реквизит, "Имя");
				КонецЕсли;
				УправлениеСвойствамиСлужебный.ПостроитьУсловияЗависимостей(ОписаниеЗависимогоРеквизита, ПутьКРеквизиту, СтрокаЗависимостей);
				Параметры = ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения;
			КонецЦикла;
			
			ПараметрыУсловия = Новый Структура;
			ПараметрыУсловия.Вставить("ЗначенияПараметров", Параметры.ЗначенияПараметров);
			ПараметрыУсловия.Вставить("Форма", ЗначенияРеквизитов);
			ПараметрыУсловия.Вставить("ОписаниеОбъекта", Выборка.Спецификация);
			
			НеобходимоЗаполнить = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Параметры.КодУсловия, ПараметрыУсловия);
			Если НЕ НеобходимоЗаполнить Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти = СтрокиТЧ[0];
		ИндексСтроки = ТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти);
		ТекстСообщения = НСтр("ru = 'Не заполнен реквизит ""%1"" для спецификации ""%2"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Свойство, Выборка.Спецификация);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТабличнойЧасти.НомерСтроки, "ПараметрыСпецификации");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект." + Поле, , Отказ);
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтрокаКонцаОперанда() Экспорт
	
	Возврат "]";
	
КонецФункции

Функция СтрокаНачалаОперанда() Экспорт
	
	Возврат "[";
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуОперандовФормулы(ПериодЗаписи, ХранилищеФормул)
	
	Операнды = Новый ТаблицаЗначений;
	Операнды.Колонки.Добавить("Операнд");
	Операнды.Индексы.Добавить("Операнд");
	
	Если ТипЗнч(ХранилищеФормул) = Тип("Строка") Тогда
		
		ПарсингФормулыНаОперанды(ПериодЗаписи, ХранилищеФормул, Операнды);
		
	ИначеЕсли ТипЗнч(ХранилищеФормул) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ХранилищеФормул Цикл
			
			ПарсингФормулыНаОперанды(ПериодЗаписи, ЭлементМассива, Операнды);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Операнды;
	
КонецФункции

Функция СоответствиеОперандовДляПроверки(КатегорияНоменклатуры)
	
	СоответствиеОперандов = Новый Соответствие;
	
	Схема = Справочники.Спецификации.ПолучитьМакет("СхемаКонструктораФормул");
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		РеквизитыКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияНоменклатуры, "НаборСвойств, НаборСвойствХарактеристики, НаборСвойствСпецификации");
		Схема.Параметры.НаборСвойств.Значение = РеквизитыКатегории.НаборСвойств;
		Схема.Параметры.НаборСвойствХарактеристики.Значение = РеквизитыКатегории.НаборСвойствХарактеристики;
		Схема.Параметры.НаборСвойствСпецификации.Значение = РеквизитыКатегории.НаборСвойствСпецификации;
	КонецЕсли; 
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	ДоступныеПоля = Компоновщик.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	Для каждого Поле Из ДоступныеПоля Цикл
		Если Поле.Папка ИЛИ Поле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = Строка(Поле.Поле);
		СоответствиеОперандов.Вставить(ИмяПоля, ЗначениеПоУмолчанию(Поле.ТипЗначения));
		Для каждого Реквизит Из Поле.Элементы Цикл
			ИмяРеквизита = Строка(Реквизит.Поле);
			ЭтоСтрокаПродукции = (ИмяРеквизита = "ЗаказПокупателя.Запасы" ИЛИ ИмяРеквизита = "ЗаказНаПроизводство.Продукция");
			Если Реквизит.Папка И НЕ ЭтоСтрокаПродукции Тогда
				// Прочие табличные части
				Продолжить;
			КонецЕсли;
			Если НЕ Реквизит.Папка Тогда
				СоответствиеОперандов.Вставить(Строка(Реквизит.Поле), ЗначениеПоУмолчанию(Реквизит.ТипЗначения));
			Иначе
				Для каждого РеквизитТЧ Из Реквизит.Элементы Цикл
					СоответствиеОперандов.Вставить(Строка(РеквизитТЧ.Поле), ЗначениеПоУмолчанию(РеквизитТЧ.ТипЗначения));
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоответствиеОперандов;
	
КонецФункции

Функция ЗначениеПоУмолчанию(ОписаниеТипов)
	
	Типы = ОписаниеТипов.Типы();
	Если Типы.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Тип = Типы[0];
	Если Тип=Тип("Число") Тогда
		Возврат 10; // При проверке формулы значения всех числовых операндов принимаем равным 10
	ИначеЕсли Тип=Тип("Булево") Тогда
		Возврат Истина; // При проверке формулы значения всех булевых операндов принимаем равным "Истина"
	ИначеЕсли Тип=Тип("Строка") Тогда
		Возврат ""; // При проверке формулы значения всех строковых операндов принимаем равным пустой строке
	ИначеЕсли Тип=Тип("Дата") Тогда
		Возврат ТекущаяДатаСеанса(); // При проверке формулы значения всех периодических операндов принимаем равным текущей дате
	Иначе
		Возврат Новый(Типы[0]);
	КонецЕсли; 
	
КонецФункции
 
Процедура ПарсингФормулыНаОперанды(ПериодЗаписи, Формула, Операнды)
	
	ТекстФормулы = СокрЛП(Формула);
	Если ПустаяСтрока(Формула) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СимволНачалоОперанда = СтрокаНачалаОперанда();
	СимволКонецОперанда	= СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда = Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда = Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд = Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		КоличествоВхождений = СтрЧислоВхождений(Операнд, СимволНачалоОперанда);
		Если КоличествоВхождений>1 Тогда
			// Частный случай: имена дополнительных реквизитов также берутся в квадратные скобки
			КонецОперанда = СтрНайти(ТекстФормулы, СимволКонецОперанда, , , КоличествоВхождений);
			Операнд = Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
			Идентификатор = Сред(Операнд, 2, СтрДлина(Операнд) - 2);
		Иначе
			Идентификатор = СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		КонецЕсли; 
		
		Если Операнды.Найти(Операнд, "Операнд") <> Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НовыйОперанд = Операнды.Добавить();
		НовыйОперанд.Операнд = Операнд;
		
		ТекстФормулы = СтрЗаменить(ТекстФормулы, Операнд, "");
		КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеЗаказа(Данные, ИмяОбъекта)
	
	СинонимЗаказа = Метаданные.Документы[ИмяОбъекта].Синоним;
	Дата = Данные[ИмяОбъекта + ".Дата"];
	Номер = Данные[ИмяОбъекта + ".Номер"];
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3'"),
		СинонимЗаказа,
		НомерНаПечать,
		Формат(Дата, "ДЛФ=D"));
	
КонецФункции

Функция ДанныеРасчета(ЗаказОбъект, Заказ, Номенклатура, Характеристика, Спецификация, КлючСвязи)
	
	ПоДаннымСпецификации = (ТипЗнч(Спецификация) <> Тип("СправочникСсылка.Спецификации"));
	Если ПоДаннымСпецификации Тогда
		КлючСвязи  = ОпределитьКлючСвязиПоСпецификации(Заказ, Спецификация.Ссылка);
	КонецЕсли; 
	Данные = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Спецификация", ?(ПоДаннымСпецификации, Неопределено, Спецификация));
	Запрос.УстановитьПараметр("КлючСвязи", КлючСвязи);
	Запрос.Текст = ТекстЗапросаВыборкиДанных();
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = Результат[0].Выгрузить();
	ДополнитьДанныеРасчета(Данные, ТаблицаНоменклатура);
	
	ТаблицаХарактеристика = Результат[1].Выгрузить();
	ДополнитьДанныеРасчета(Данные, ТаблицаХарактеристика);
	
	Если ПоДаннымСпецификации Тогда
		МетаданныеСпецификации = Метаданные.Справочники.Спецификации;
		ИмяТаблицы = "Спецификация";
		Данные.Вставить(ИмяТаблицы, Спецификация.Ссылка);
		Для каждого Реквизит Из МетаданныеСпецификации.СтандартныеРеквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, Реквизит.Имя);
			Данные.Вставить(ИмяСвойства, Спецификация[Реквизит.Имя]);
		КонецЦикла; 
		Для каждого Реквизит Из МетаданныеСпецификации.Реквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, Реквизит.Имя);
			Данные.Вставить(ИмяСвойства, Спецификация[Реквизит.Имя]);
		КонецЦикла;
		Для каждого СтрокаДополнительныйРеквизит Из Спецификация.ДополнительныеРеквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.[%2]", ИмяТаблицы, Строка(СтрокаДополнительныйРеквизит.Свойство));
			Данные.Вставить(ИмяСвойства, СтрокаДополнительныйРеквизит.Значение);
		КонецЦикла;
		ДополнительныеРеквизитыОбъекта = УправлениеСвойствами.СвойстваОбъекта(Спецификация.Ссылка, Истина, Ложь);
		ДанныеДополнительныхРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДополнительныеРеквизитыОбъекта, "Представление, ТипЗначения", Истина);
		Для Каждого КлючИЗначение Из ДанныеДополнительныхРеквизитов Цикл
			ДанныеРеквизита = КлючИЗначение.Значение;
			ИмяСвойства = СтрШаблон("%1.[%2]", ИмяТаблицы, ДанныеРеквизита.Представление);
			Если Данные.Получить(ИмяСвойства) = Неопределено Тогда
				Данные.Вставить(ИмяСвойства, ДанныеРеквизита.ТипЗначения.ПривестиЗначение(Неопределено));
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаФиксированныеЗначения Из Спецификация.ФиксированныеЗначения Цикл
			Данные.Вставить(СтрокаФиксированныеЗначения.Идентификатор, СтрокаФиксированныеЗначения.Значение);
		КонецЦикла; 
	Иначе
		ТаблицаСпецификация = Результат[2].Выгрузить();
		ДополнитьДанныеРасчета(Данные, ТаблицаСпецификация);
		Данные["Спецификация.Состав"].Сортировать("НомерСтроки");
		Данные["Спецификация.Операции"].Сортировать("НомерСтроки");
		Данные["Спецификация.СопоставлениеСостава"].Сортировать("НомерСтроки");
		Данные["Спецификация.СопоставлениеОпераций"].Сортировать("НомерСтроки");
	КонецЕсли; 

	ТаблицаЗаказПокупателя = Результат[3].Выгрузить();
	ДополнитьДанныеРасчета(Данные, ТаблицаЗаказПокупателя);

	ТаблицаЗаказНаПроизводство = Результат[4].Выгрузить();
	ДополнитьДанныеРасчета(Данные, ТаблицаЗаказНаПроизводство);
	
	Если ЗаказОбъект <> Неопределено Тогда
		МетаданныеДокумента = ЗаказОбъект.Ссылка.Метаданные();
		ИмяТаблицы = МетаданныеДокумента.Имя;
		Данные.Вставить(ИмяТаблицы, ЗаказОбъект.Ссылка);
		Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, Реквизит.Имя);
			Данные.Вставить(ИмяСвойства, ЗаказОбъект[Реквизит.Имя]);
		КонецЦикла; 
		Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.%2", ИмяТаблицы, Реквизит.Имя);
			Данные.Вставить(ИмяСвойства, ЗаказОбъект[Реквизит.Имя]);
		КонецЦикла;
		Для каждого СтрокаДополнительныйРеквизит Из ЗаказОбъект.ДополнительныеРеквизиты Цикл
			СвойстваДополнительногоРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтрокаДополнительныйРеквизит.Свойство, "Представление, ТипЗначения");
			ИмяСвойства = СтрШаблон("%1.[%2]", ИмяТаблицы, СвойстваДополнительногоРеквизита.Представление);
			Данные.Вставить(ИмяСвойства, СтрокаДополнительныйРеквизит.Значение);
		КонецЦикла;
		ДополнительныеРеквизитыОбъекта = УправлениеСвойствами.СвойстваОбъекта(ЗаказОбъект.Ссылка, Истина, Ложь);
		ДанныеДополнительныхРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДополнительныеРеквизитыОбъекта, 
			"Представление, ТипЗначения", Истина);
		Для Каждого КлючИЗначение Из ДанныеДополнительныхРеквизитов Цикл
			ДанныеРеквизита = КлючИЗначение.Значение;
			ИмяСвойства = СтрШаблон("%1.[%2]", ИмяТаблицы, ДанныеРеквизита.Представление);
			Если Данные.Получить(ИмяСвойства) = Неопределено Тогда
				Данные.Вставить(ИмяСвойства, ДанныеРеквизита.ТипЗначения.ПривестиЗначение(Неопределено));
			КонецЕсли; 
		КонецЦикла;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
		СтрокиРеквизитыСпецификаций = ЗаказОбъект.РеквизитыПараметрическихСпецификаций.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаДополнительныйРеквизит Из СтрокиРеквизитыСпецификаций Цикл
			ИмяСвойства = СтрШаблон("%1.[%2]", "Спецификация", Строка(СтрокаДополнительныйРеквизит.Свойство));
			Данные.Вставить(ИмяСвойства, СтрокаДополнительныйРеквизит.Значение);
		КонецЦикла;
		Если МетаданныеДокумента=Метаданные.Документы.ЗаказНаПроизводство Тогда
			МетаданныеТЧ = МетаданныеДокумента.ТабличныеЧасти.Продукция;
		Иначе
			МетаданныеТЧ = МетаданныеДокумента.ТабличныеЧасти.Запасы;
		КонецЕсли; 
		СтрокиЗаказа = ЗаказОбъект[МетаданныеТЧ.Имя].НайтиСтроки(СтруктураОтбора);
		Если СтрокиЗаказа.Количество() = 1 Тогда
			СтрокаЗаказа = СтрокиЗаказа[0];
			Для каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
				ИмяСвойства = СтрШаблон("%1.%2.%3", ИмяТаблицы, МетаданныеТЧ.Имя, РеквизитТЧ.Имя);
				Данные.Вставить(ИмяСвойства, СтрокаЗаказа[РеквизитТЧ.Имя]);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Данные;
	
КонецФункции

Процедура ДополнитьДанныеРасчета(Данные, Таблица)
		
	Если Таблица.Количество() > 0 Тогда
		СтрокаТаблицы = Таблица[0];
		Данные.Вставить(СтрокаТаблицы.ИмяТаблицы, СтрокаТаблицы.Ссылка);
		Для каждого Колонка Из Таблица.Колонки Цикл
			Если Колонка.Имя = "ДополнительныеРеквизиты" Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("ТаблицаЗначений") 
				И (Колонка.Имя = "Запасы" ИЛИ Колонка.Имя = "Продукция") Тогда
				ТаблицаТЧ = СтрокаТаблицы[Колонка.Имя];
				Если ТаблицаТЧ.Количество() = 1 Тогда
					СтрокаТЧ = ТаблицаТЧ[0];
					Для каждого КолонкаТЧ Из ТаблицаТЧ.Колонки Цикл
						ИмяСвойства = СтрШаблон("%1.%2.%3", СтрокаТаблицы.ИмяТаблицы, Колонка.Имя, КолонкаТЧ.Имя);
						Данные.Вставить(ИмяСвойства, СтрокаТЧ[КолонкаТЧ.Имя]);
					КонецЦикла; 
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("ТаблицаЗначений") 
				И (Колонка.Имя = "ФиксированныеЗначения") Тогда
				Для каждого СтрокаФиксированныеЗначения Из СтрокаТаблицы[Колонка.Имя] Цикл
					Данные.Вставить(СтрокаФиксированныеЗначения.Идентификатор, СтрокаФиксированныеЗначения.Значение);
				КонецЦикла; 
			Иначе
				ИмяСвойства = СтрШаблон("%1.%2", СтрокаТаблицы.ИмяТаблицы, Колонка.Имя);
				Данные.Вставить(ИмяСвойства, СтрокаТаблицы[Колонка.Имя]);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаДополнительныйРеквизит Из СтрокаТаблицы.ДополнительныеРеквизиты Цикл
			ИмяСвойства = СтрШаблон("%1.[%2]", СтрокаТаблицы.ИмяТаблицы, Строка(СтрокаДополнительныйРеквизит.Свойство));
			Данные.Вставить(ИмяСвойства, СтрокаДополнительныйРеквизит.Значение);
		КонецЦикла;
		ДополнительныеРеквизитыОбъекта = УправлениеСвойствами.СвойстваОбъекта(СтрокаТаблицы.Ссылка, Истина, Ложь);
		Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизитыОбъекта Цикл
			СвойстваДополнительногоРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныйРеквизит, 
				"Представление, ТипЗначения");
			ИмяСвойства = СтрШаблон("%1.[%2]", СтрокаТаблицы.ИмяТаблицы, СвойстваДополнительногоРеквизита.Представление);
			Если Данные.Получить(ИмяСвойства) = Неопределено Тогда
				Данные.Вставить(ИмяСвойства, СвойстваДополнительногоРеквизита.ТипЗначения.ПривестиЗначение(Неопределено));
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьКлючСвязиПоСпецификации(Заказ, Спецификация)
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ИмяТЧ = Метаданные.Документы.ЗаказНаПроизводство.ТабличныеЧасти.Продукция.Имя;
	Иначе
		ИмяТЧ = Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Запасы.Имя;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Спецификация", Спецификация);
	Строки = Заказ[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=1 Тогда
		Возврат Строки[0].КлючСвязи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ТекстЗапросаВыборкиДанных()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Номенклатура"" КАК ИмяТаблицы,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.АвтоматическиГенерироватьПартии КАК АвтоматическиГенерироватьПартии,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.ВариантОграниченияСертификата КАК ВариантОграниченияСертификата,
	|	Номенклатура.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|	Номенклатура.ВерхняяГраницаОстатков КАК ВерхняяГраницаОстатков,
	|	Номенклатура.Вес КАК Вес,
	|	Номенклатура.Весовой КАК Весовой,
	|	Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	Номенклатура.ВидМаркировки КАК ВидМаркировки,
	|	Номенклатура.ВыписыватьГарантийныйТалон КАК ВыписыватьГарантийныйТалон,
	|	Номенклатура.Высота КАК Высота,
	|	Номенклатура.ГарантийныйСрок КАК ГарантийныйСрок,
	|	Номенклатура.ДатаИзменения КАК ДатаИзменения,
	|	Номенклатура.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	Номенклатура.Длина КАК Длина,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	Номенклатура.ИсключитьИзПрайсЛистов КАК ИсключитьИзПрайсЛистов,
	|	Номенклатура.ИспользоватьДатуПроизводстваПартии КАК ИспользоватьДатуПроизводстваПартии,
	|	Номенклатура.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии КАК ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии,
	|	Номенклатура.ИспользоватьИдентификаторПартииВЕТИСПартии КАК ИспользоватьИдентификаторПартииВЕТИСПартии,
	|	Номенклатура.ИспользоватьНомерПартии КАК ИспользоватьНомерПартии,
	|	Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	Номенклатура.ИспользоватьПроизводителяВЕТИСПартии КАК ИспользоватьПроизводителяВЕТИСПартии,
	|	Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	Номенклатура.ИспользоватьСрокГодностиПартии КАК ИспользоватьСрокГодностиПартии,
	|	Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	Номенклатура.КиЗГИСМ КАК КиЗГИСМ,
	|	Номенклатура.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
	|	Номенклатура.КиЗГИСМВид КАК КиЗГИСМВид,
	|	Номенклатура.КиЗГИСМРазмер КАК КиЗГИСМРазмер,
	|	Номенклатура.КиЗГИСМСпособВыпускаВОборот КАК КиЗГИСМСпособВыпускаВОборот,
	|	Номенклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	Номенклатура.Комментарий КАК Комментарий,
	|	Номенклатура.Крепость КАК Крепость,
	|	Номенклатура.МетодОценки КАК МетодОценки,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Номенклатура.Недействителен КАК Недействителен,
	|	Номенклатура.НижняяГраницаОстатков КАК НижняяГраницаОстатков,
	|	Номенклатура.Номинал КАК Номинал,
	|	Номенклатура.НормаВремени КАК НормаВремени,
	|	Номенклатура.Объем КАК Объем,
	|	Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	Номенклатура.Периодичность КАК Периодичность,
	|	Номенклатура.ПодконтрольнаяПродукцияВЕТИС КАК ПодконтрольнаяПродукцияВЕТИС,
	|	Номенклатура.Поставщик КАК Поставщик,
	|	Номенклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	Номенклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	Номенклатура.Производитель КАК Производитель,
	|	Номенклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	Номенклатура.РеквизитДопУпорядочиванияУНФ КАК РеквизитДопУпорядочиванияУНФ,
	|	Номенклатура.РекомендуемЗаказать КАК РекомендуемЗаказать,
	|	Номенклатура.Склад КАК Склад,
	|	Номенклатура.СпособОграниченияСертификата КАК СпособОграниченияСертификата,
	|	Номенклатура.СпособПополнения КАК СпособПополнения,
	|	Номенклатура.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	Номенклатура.СрокДействияФлагаНовинка КАК СрокДействияФлагаНовинка,
	|	Номенклатура.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
	|	Номенклатура.СрокПополнения КАК СрокПополнения,
	|	Номенклатура.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Номенклатура.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Номенклатура.ТипСрокаДействия КАК ТипСрокаДействия,
	|	Номенклатура.ТНВЭДГИСМ КАК ТНВЭДГИСМ,
	|	Номенклатура.ТоварнаяНоменклатураВЭД КАК ТоварнаяНоменклатураВЭД,
	|	Номенклатура.ФайлКартинки КАК ФайлКартинки,
	|	Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	Номенклатура.Ширина КАК Ширина,
	|	Номенклатура.ЭтоНабор КАК ЭтоНабор,
	|	Номенклатура.ЭтоНовинка КАК ЭтоНовинка,
	|	Номенклатура.Ячейка КАК Ячейка,
	|	Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	Номенклатура.ТабачнаяПродукция КАК ТабачнаяПродукция,
	|	Номенклатура.ТолькоПоддержкаОстаткаПриРасчетеПотребностей КАК ТолькоПоддержкаОстаткаПриРасчетеПотребностей,
	|	Номенклатура.ОбувнаяПродукция КАК ОбувнаяПродукция,
	|	Номенклатура.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		Свойство.Представление КАК Представление
	|	) КАК ДополнительныеРеквизиты
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Характеристика"" КАК ИмяТаблицы,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Код КАК Код,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	ХарактеристикиНоменклатуры.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
	|	ХарактеристикиНоменклатуры.Недействителен КАК Недействителен,
	|	ХарактеристикиНоменклатуры.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		Свойство.Представление КАК Представление
	|	) КАК ДополнительныеРеквизиты
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Спецификация"" КАК ИмяТаблицы,
	|	Спецификации.Ссылка КАК Ссылка,
	|	Спецификации.ПометкаУдаления КАК ПометкаУдаления,
	|	Спецификации.Владелец КАК Владелец,
	|	Спецификации.Код КАК Код,
	|	Спецификации.Наименование КАК Наименование,
	|	Спецификации.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	Спецификации.Заказ КАК Заказ,
	|	Спецификации.Комментарий КАК Комментарий,
	|	Спецификации.ВидПроизводства КАК ВидПроизводства,
	|	Спецификации.Недействителен КАК Недействителен,
	|	Спецификации.ЭтоШаблон КАК ЭтоШаблон,
	|	Спецификации.БазоваяСпецификация КАК БазоваяСпецификация,
	|	Спецификации.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		Свойство.Представление КАК Представление
	|	) КАК ДополнительныеРеквизиты,
	|	Спецификации.Состав.(
	|		НомерСтроки КАК НомерСтроки,
	|		ТипСтрокиСостава КАК ТипСтрокиСостава,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Спецификация КАК Спецификация,
	|		Количество КАК Количество,
	|		КоличествоПродукции КАК КоличествоПродукции,
	|		ДоляСтоимости КАК ДоляСтоимости,
	|		Этап КАК Этап,
	|		ФормулаНоменклатура КАК ФормулаНоменклатура,
	|		ФормулаХарактеристика КАК ФормулаХарактеристика,
	|		ФормулаКоличество КАК ФормулаКоличество,
	|		КлючСвязи КАК КлючСвязи,
	|		ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	|		Описание КАК Описание
	|	) КАК Состав,
	|	Спецификации.Операции.(
	|		НомерСтроки КАК НомерСтроки,
	|		Операция КАК Операция,
	|		НормаВремени КАК НормаВремени,
	|		Количество КАК Количество,
	|		КоличествоПродукции КАК КоличествоПродукции,
	|		Этап КАК Этап,
	|		ФормулаОперация КАК ФормулаОперация,
	|		ФормулаКоличество КАК ФормулаКоличество,
	|		ФормулаНормаВремени КАК ФормулаНормаВремени,
	|		КлючСвязи КАК КлючСвязи,
	|		ИспользуетсяСопоставление КАК ИспользуетсяСопоставление,
	|		Описание КАК Описание
	|	) КАК Операции,
	|	Спецификации.СопоставлениеСостава.(
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		РеквизитСопоставления КАК РеквизитСопоставления,
	|		ЗначениеРеквизита КАК ЗначениеРеквизита,
	|		КлючСтрокиПравил КАК КлючСтрокиПравил
	|	) КАК СопоставлениеСостава,
	|	Спецификации.СопоставлениеОпераций.(
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		Операция КАК Операция,
	|		РеквизитСопоставления КАК РеквизитСопоставления,
	|		ЗначениеРеквизита КАК ЗначениеРеквизита,
	|		КлючСтрокиПравил КАК КлючСтрокиПравил
	|	) КАК СопоставлениеОпераций,
	|	Спецификации.ФиксированныеЗначения.(
	|		НомерСтроки КАК НомерСтроки,
	|		Идентификатор КАК Идентификатор,
	|		Значение КАК Значение
	|	) КАК ФиксированныеЗначения
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""ЗаказПокупателя"" КАК ИмяТаблицы,
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.Автор КАК Автор,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	|	ЗаказПокупателя.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ЗаказПокупателя.АдресЭП КАК АдресЭП,
	|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПокупателя.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа,
	|	ЗаказПокупателя.ВидимостьИндикатораТребуетсяРасчет КАК ВидимостьИндикатораТребуетсяРасчет,
	|	ЗаказПокупателя.ВидОперации КАК ВидОперации,
	|	ЗаказПокупателя.ВидРабот КАК ВидРабот,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	|	ЗаказПокупателя.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ЗаказПокупателя.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ЗаказПокупателя.Высота КАК Высота,
	|	ЗаказПокупателя.Грузоотправитель КАК Грузоотправитель,
	|	ЗаказПокупателя.Грузополучатель КАК Грузополучатель,
	|	ЗаказПокупателя.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ЗаказПокупателя.ДатаИзменения КАК ДатаИзменения,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.Длина КАК Длина,
	|	ЗаказПокупателя.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ЗаказПокупателя.ДоверенностьДата КАК ДоверенностьДата,
	|	ЗаказПокупателя.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ЗаказПокупателя.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ДокументОснование КАК ДокументОснование,
	|	ЗаказПокупателя.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ЗаказПокупателя.Заметки КАК Заметки,
	|	ЗаказПокупателя.ЗапаснойТелефон КАК ЗапаснойТелефон,
	|	ЗаказПокупателя.ЗапланироватьОплату КАК ЗапланироватьОплату,
	|	ЗаказПокупателя.ЗонаТариф КАК ЗонаТариф,
	|	ЗаказПокупателя.ИдентификаторНаправленияДоставки КАК ИдентификаторНаправленияДоставки,
	|	ЗаказПокупателя.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЗаказПокупателя.ИспользоватьЗарплатаИсполнителей КАК ИспользоватьЗарплатаИсполнителей,
	|	ЗаказПокупателя.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
	|	ЗаказПокупателя.ИспользоватьМатериалыЗаказчика КАК ИспользоватьМатериалыЗаказчика,
	|	ЗаказПокупателя.ИспользоватьТовары КАК ИспользоватьТовары,
	|	ЗаказПокупателя.ИсточникПривлечения КАК ИсточникПривлечения,
	|	ЗаказПокупателя.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	ЗаказПокупателя.Касса КАК Касса,
	|	ЗаказПокупателя.КассаККМ КАК КассаККМ,
	|	ЗаказПокупателя.КоличествоВариантовКП КАК КоличествоВариантовКП,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.КомментарийКалькуляции КАК КомментарийКалькуляции,
	|	ЗаказПокупателя.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаказПокупателя.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	ЗаказПокупателя.КонтактныйТелефон КАК КонтактныйТелефон,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Кратность КАК Кратность,
	|	ЗаказПокупателя.Курс КАК Курс,
	|	ЗаказПокупателя.Курьер КАК Курьер,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ЗаказПокупателя.НоменклатураДоставки КАК НоменклатураДоставки,
	|	ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ЗаказПокупателя.НомерСменыККМ КАК НомерСменыККМ,
	|	ЗаказПокупателя.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ЗаказПокупателя.Объем КАК Объем,
	|	ЗаказПокупателя.ОбъявленнаяЦенность КАК ОбъявленнаяЦенность,
	|	ЗаказПокупателя.ОжидаемаяДатаВручения КАК ОжидаемаяДатаВручения,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.ОснованиеПечати КАК ОснованиеПечати,
	|	ЗаказПокупателя.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ЗаказПокупателя.ОсновнойВариантКП КАК ОсновнойВариантКП,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	ЗаказПокупателя.ПодписьКладовщика КАК ПодписьКладовщика,
	|	ЗаказПокупателя.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ЗаказПокупателя.ПоложениеВидаРабот КАК ПоложениеВидаРабот,
	|	ЗаказПокупателя.ПоложениеДатыОтгрузки КАК ПоложениеДатыОтгрузки,
	|	ЗаказПокупателя.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказПокупателя.ПочтаПолучателя КАК ПочтаПолучателя,
	|	ЗаказПокупателя.ПричинаОтмены КАК ПричинаОтмены,
	|	ЗаказПокупателя.Проект КАК Проект,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ПунктВыдачиЗаказа КАК ПунктВыдачиЗаказа,
	|	ЗаказПокупателя.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	ЗаказПокупателя.СлужбаДоставки КАК СлужбаДоставки,
	|	ЗаказПокупателя.Событие КАК Событие,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	ЗаказПокупателя.СписокНоменклатуры КАК СписокНоменклатуры,
	|	ЗаказПокупателя.СписокРесурсов КАК СписокРесурсов,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЗаказПокупателя.СпособОтгрузки КАК СпособОтгрузки,
	|	ЗаказПокупателя.СпособРасчетаСебестоимостиКалькуляции КАК СпособРасчетаСебестоимостиКалькуляции,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиницаПродажи,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.Телефон КАК Телефон,
	|	ЗаказПокупателя.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ЗаказПокупателя.ТрекНомер КАК ТрекНомер,
	|	ЗаказПокупателя.УдалитьЗакрыт КАК УдалитьЗакрыт,
	|	ЗаказПокупателя.УдалитьИспользоватьФаксимиле КАК УдалитьИспользоватьФаксимиле,
	|	ЗаказПокупателя.УсловияГарантийногоТалона КАК УсловияГарантийногоТалона,
	|	ЗаказПокупателя.УсловияКоммерческогоПредложения КАК УсловияКоммерческогоПредложения,
	|	ЗаказПокупателя.УсловияСчетаЗаказа КАК УсловияСчетаЗаказа,
	|	ЗаказПокупателя.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ЗаказПокупателя.Финиш КАК Финиш,
	|	ЗаказПокупателя.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказПокупателя.ШаблонКалькуляции КАК ШаблонКалькуляции,
	|	ЗаказПокупателя.Ширина КАК Ширина,
	|	ЗаказПокупателя.Ячейка КАК Ячейка,
	|	ЗаказПокупателя.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказПокупателя.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам,
	|	ЗаказПокупателя.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		Свойство.Представление КАК Представление
	|	) КАК ДополнительныеРеквизиты,
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		СерииНоменклатуры КАК СерииНоменклатуры,
	|		Резерв КАК Резерв,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ДатаОтгрузки КАК ДатаОтгрузки,
	|		Спецификация КАК Спецификация,
	|		Содержание КАК Содержание,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Количество КАК Количество,
	|		КлючСвязи КАК КлючСвязи,
	|		СтранаПроисхождения КАК СтранаПроисхождения,
	|		НомерГТД КАК НомерГТД,
	|		Партия КАК Партия,
	|		Вес КАК Вес,
	|		Объем КАК Объем,
	|		НомерВариантаКП КАК НомерВариантаКП,
	|		ЭтоРазделитель КАК ЭтоРазделитель,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ДоляСтоимости КАК ДоляСтоимости,
	|		СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|		Ячейка КАК Ячейка
	|	) КАК Запасы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Заказ
	|	И (&КлючСвязи = НЕОПРЕДЕЛЕНО
	|			ИЛИ ЗаказПокупателя.Запасы.КлючСвязи = &КлючСвязи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ЗаказНаПроизводство"" КАК ИмяТаблицы,
	|	ЗаказНаПроизводство.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводство.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказНаПроизводство.Номер КАК Номер,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.Проведен КАК Проведен,
	|	ЗаказНаПроизводство.Автор КАК Автор,
	|	ЗаказНаПроизводство.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНаПроизводство.ВидОперации КАК ВидОперации,
	|	ЗаказНаПроизводство.ДокументОснование КАК ДокументОснование,
	|	ЗаказНаПроизводство.ЗаказНаПроизводствоОснование КАК ЗаказНаПроизводствоОснование,
	|	ЗаказНаПроизводство.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.Заметки КАК Заметки,
	|	ЗаказНаПроизводство.Комментарий КАК Комментарий,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗаказНаПроизводство.Ответственный КАК Ответственный,
	|	ЗаказНаПроизводство.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНаПроизводство.СписокНоменклатуры КАК СписокНоменклатуры,
	|	ЗаказНаПроизводство.СписокРесурсов КАК СписокРесурсов,
	|	ЗаказНаПроизводство.Старт КАК Старт,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказНаПроизводство.УдалитьЗакрыт КАК УдалитьЗакрыт,
	|	ЗаказНаПроизводство.Финиш КАК Финиш,
	|	ЗаказНаПроизводство.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаказНаПроизводство.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЗаказНаПроизводство.РучноеРаспределение КАК РучноеРаспределение,
	|	ЗаказНаПроизводство.Исполнитель КАК Исполнитель,
	|	ЗаказНаПроизводство.ПоложениеИсполнителя КАК ПоложениеИсполнителя,
	|	ЗаказНаПроизводство.ИсполнительПредставление КАК ИсполнительПредставление,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаОпераций КАК СтруктурнаяЕдиницаОпераций,
	|	ЗаказНаПроизводство.ПоложениеСтруктурнойЕдиницыОпераций КАК ПоложениеСтруктурнойЕдиницыОпераций,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиницаОперацийПредставление КАК СтруктурнаяЕдиницаОперацийПредставление,
	|	ЗаказНаПроизводство.ЗапланированыОперации КАК ЗапланированыОперации,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказамНаПроизводство КАК УчетПотребностиПоЗаказамНаПроизводство,
	|	ЗаказНаПроизводство.УчетПотребностиПоСкладам КАК УчетПотребностиПоСкладам,
	|	ЗаказНаПроизводство.УчетПотребностиПоЗаказам КАК УчетПотребностиПоЗаказам,
	|	ЗаказНаПроизводство.ДополнительныеРеквизиты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		ТекстоваяСтрока КАК ТекстоваяСтрока
	|	) КАК ДополнительныеРеквизиты,
	|	ЗаказНаПроизводство.Продукция.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ТипНоменклатуры КАК ТипНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		Резерв КАК Резерв,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Спецификация КАК Спецификация,
	|		Партия КАК Партия,
	|		СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		КлючСвязи КАК КлючСвязи,
	|		ПодразделениеЗавершающегоЭтапа КАК ПодразделениеЗавершающегоЭтапа
	|	) КАК Продукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &Заказ
	|	И (&КлючСвязи = НЕОПРЕДЕЛЕНО
	|			ИЛИ ЗаказНаПроизводство.Продукция.КлючСвязи = &КлючСвязи)";
	
КонецФункции

Процедура ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, Значение)
	
	Если ТипЗнч(СоответствиеОперандов) <> Тип("Соответствие") Тогда
		
		СоответствиеОперандов = Новый Соответствие;
		
	КонецЕсли;
	
	СоответствиеОперандов.Вставить(Операнд, Значение);
	
КонецПроцедуры

Процедура РасчетДанныхПоСопоставлению(ТаблицаСопоставления, СтрокаСпецификации, Данные, РасчетныеДанные)
	
	Если РасчетныеДанные = Неопределено Тогда
		РасчетныеДанные = Новый Структура("Результат, ОшибкаРасчета, ПоСопоставлению, ТекстОшибки", Неопределено, Ложь, Истина);
	КонецЕсли;
	
	ПоОперациям = ТаблицаСопоставления.Колонки.Найти("Операция")<>Неопределено;
	Результат = Новый Структура;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСопоставления.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСопоставления.КлючСтрокиПравил КАК КлючСтрокиПравил,
	|	ТаблицаСопоставления.РеквизитСопоставления КАК РеквизитСопоставления,
	|	ТаблицаСопоставления.ЗначениеРеквизита КАК ЗначениеРеквизита,
	|	%ОбластьНоменклатура%
	|	
	|ПОМЕСТИТЬ ТаблицаСопоставления
	|ИЗ
	|	&ТаблицаСопоставления КАК ТаблицаСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСопоставления.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСопоставления.КлючСтрокиПравил КАК КлючСтрокиПравил,
	|	ТаблицаСопоставления.РеквизитСопоставления КАК РеквизитСопоставления,
	|	ТаблицаСопоставления.ЗначениеРеквизита КАК ЗначениеРеквизита,
	|	%ОбластьНоменклатура%
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|ГДЕ
	|	ТаблицаСопоставления.КлючСвязи = &КлючСвязи
	|ИТОГИ ПО
	|	КлючСтрокиПравил";
	
	Если ПоОперациям Тогда
		ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"%ОбластьНоменклатура%",
		"ТаблицаСопоставления.Операция КАК Операция");
	Иначе
		ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"%ОбластьНоменклатура%",
		"ТаблицаСопоставления.Номенклатура КАК Номенклатура,
		|	ТаблицаСопоставления.Характеристика КАК Характеристика");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаСопоставления);
	Запрос.УстановитьПараметр("КлючСвязи", СтрокаСпецификации.КлючСвязи);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаПравила = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПравила.Следующий() Цикл
		Выполнено = Истина;
		ВыборкаЭлементы = ВыборкаПравила.Выбрать();
		Если ВыборкаЭлементы.Количество()=0 Тогда
			Продолжить;
		КонецЕсли; 
		Пока ВыборкаЭлементы.Следующий() Цикл
			Значение = Данные.Получить(ВыборкаЭлементы.РеквизитСопоставления);
			Если Значение<>ВыборкаЭлементы.ЗначениеРеквизита Тогда
				Выполнено = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Выполнено Тогда
			ВыборкаЭлементы.Сбросить();
			ВыборкаЭлементы.Следующий();
			Если ПоОперациям Тогда
				Результат.Вставить("Операция", ВыборкаЭлементы.Операция);
			Иначе
				Результат.Вставить("Номенклатура", ВыборкаЭлементы.Номенклатура);
				Результат.Вставить("Характеристика", ВыборкаЭлементы.Характеристика);
			КонецЕсли; 
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Результат.Количество()=0 Тогда
		РасчетныеДанные.ОшибкаРасчета = Истина;
		РасчетныеДанные.ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не удалось определить %1 по сопоставлению %2'"), 
		?(ПоОперациям, НСтр("ru = 'операцию'"), НСтр("ru = 'запас'")),
		СтрокаСпецификации.Описание);
	Иначе 
		РасчетныеДанные.Результат = Результат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьОперандыИРассчитать(ФормулаСтрокой, Данные, РасчетныеДанные)
	Перем СоответствиеОперандов;	
	
	ОтсутствуютРеквизиты = Новый Массив;
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(ТекущаяДатаСеанса(), ФормулаСтрокой);
	Для каждого Строка Из ТаблицаОперандов Цикл
		
		Идентификатор = Сред(Строка.Операнд, 2, СтрДлина(Строка.Операнд) - 2);
		Если ЕстьКлючСоответствия(Данные, Идентификатор) Тогда
			Значение = Данные.Получить(Идентификатор);
			ДобавитьОперандВСтруктуру(СоответствиеОперандов, Строка.Операнд, Значение);
		Иначе
			ОтсутствуютРеквизиты.Добавить(Идентификатор); 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОтсутствуютРеквизиты.Количество()>0 Тогда
		Если РасчетныеДанные = Неопределено Тогда
			РасчетныеДанные = Новый Структура("Результат, ОшибкаРасчета, ТекстОшибки", Неопределено, Ложь);
		КонецЕсли;
		РасчетныеДанные.ОшибкаРасчета = Истина;
		РасчетныеДанные.ТекстОшибки = СтрШаблон(НСтр("ru = 'Недоступны реквизиты, требующиеся для расчета формулы: %1'"), СтрСоединить(ОтсутствуютРеквизиты, ", "));
	Иначе
		РасчетДанныхПоФормуле(ФормулаСтрокой, СоответствиеОперандов, РасчетныеДанные);
	КонецЕсли; 

КонецПроцедуры

Процедура РасчетДанныхПоФормуле(Знач ФормулаСтрокой, СтруктураОперандов, РасчетныеДанные)
	
	Если РасчетныеДанные = Неопределено Тогда
		РасчетныеДанные = Новый Структура("Результат, ОшибкаРасчета, ТекстОшибки", Неопределено, Ложь);
	КонецЕсли;
	
	Если Найти(ФормулаСтрокой, "#ЕСЛИ") > 0 Тогда
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ЕСЛИ",		"?(");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ТОГДА",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ИНАЧЕ",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#КОНЕЦЕСЛИ",	")");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Символы.ПС,	"");
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	
	Если СтруктураОперандов <> Неопределено Тогда
		
		НомерПараметра = 1;
		Для каждого Операнд Из СтруктураОперандов Цикл
			
			Если ТипЗнч(Операнд.Значение) = Тип("Число") Тогда
				ЗначениеСтрокой = Формат(Операнд.Значение, "ЧРД=.; ЧН=0; ЧГ=0");
			ИначеЕсли ТипЗнч(Операнд.Значение) = Тип("Строка") Тогда
				ЗначениеСтрокой = СтрШаблон("""%1""", Операнд.Значение);
			ИначеЕсли ТипЗнч(Операнд.Значение) = Тип("Булево") Тогда
				ЗначениеСтрокой = Формат(Операнд.Значение, "БЛ=Ложь; БИ=Истина");
			ИначеЕсли ТипЗнч(Операнд.Значение) = Тип("Дата") Тогда
				ЗначениеСтрокой = СтрШаблон("'%1'", Формат(Операнд.Значение, НСтр("ru = 'ДФ=''yyyy-MM-dd HH:mm:ss'''")));
			Иначе
				ИмяПараметра = "Параметр" + НомерПараметра;
				ПараметрыРасчета.Вставить(ИмяПараметра, Операнд.Значение);
				ЗначениеСтрокой = "Параметры." + ИмяПараметра;
				НомерПараметра = НомерПараметра + 1;
			КонецЕсли; 
			ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Операнд.Ключ, ЗначениеСтрокой);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Попытка
		
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаСтрокой, ПараметрыРасчета);
		РасчетныеДанные.Результат = Результат;
		
	Исключение
		
		РасчетныеДанные.ОшибкаРасчета = Истина;
		РасчетныеДанные.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьОшибкиРасчета(РасчетныеДанные, Ошибки, ОграничениеТипа = Неопределено, ПараметрыВыбора = Неопределено, ПутьКПолю = "")
	
	// Тест расчета формулы
	Если РасчетныеДанные.ОшибкаРасчета Тогда
		
		Если РасчетныеДанные.Свойство("ПоСопоставлению") И РасчетныеДанные.ПоСопоставлению Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru ='При расчете возникли ошибки. Проверьте правильность сопоставления.
				|Подробное описание:
				|%1'"), РасчетныеДанные.ТекстОшибки);
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru ='При расчете возникли ошибки. Проверьте правильность написания формулы.
				|Подробное описание:
				|%1'"), РасчетныеДанные.ТекстОшибки);
		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПутьКПолю, ТекстОшибки, "");
		Возврат Истина;
		
	КонецЕсли;
	
	// Проверка типа результата 
	Если ОграничениеТипа <> Неопределено
		И РасчетныеДанные.Результат <> Неопределено
		И НЕ ОграничениеТипа.СодержитТип(ТипЗнч(РасчетныеДанные.Результат)) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru ='Тип полученного значения не соответствует ожидаемому: %1'"), Строка(ТипЗнч(РасчетныеДанные.Результат)));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПутьКПолю, ТекстОшибки, "");
		Возврат Истина;
		
	КонецЕсли;
	
	// Проверка ограничений типа результата по параметрам выбора
	Если ПараметрыВыбора <> Неопределено И ПараметрыВыбора.Количество()>0 Тогда
		ПроверяемоеЗначение = РасчетныеДанные.Результат;
		Если ТипЗнч(ПроверяемоеЗначение)=Тип("Структура") Тогда
			Если ПроверяемоеЗначение.Свойство("Номенклатура") Тогда
				ПроверяемоеЗначение = ПроверяемоеЗначение.Номенклатура;
			ИначеЕсли ПроверяемоеЗначение.Свойство("Операция") Тогда
				ПроверяемоеЗначение = ПроверяемоеЗначение.Операция;
			Иначе
				ПроверяемоеЗначение = Неопределено;
			КонецЕсли; 
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
			СтруктураОграничений = Новый Структура;
			ИменаПолей = Новый Массив;
			Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
				ИмяПоля = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
				СтруктураОграничений.Вставить(ИмяПоля, ПараметрВыбора.Значение);
				ИменаПолей.Добавить(ИмяПоля);
			КонецЦикла; 
			ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроверяемоеЗначение, СтрСоединить(ИменаПолей, ","));
			Для каждого Ограничения Из СтруктураОграничений Цикл
				ТекущееЗначение = ЗначенияПолей[Ограничения.Ключ];
				Если (ТипЗнч(Ограничения.Значение)=Тип("ФиксированныйМассив") И Ограничения.Значение.Найти(ТекущееЗначение) = Неопределено)
					ИЛИ (ТипЗнч(Ограничения.Значение)<>Тип("ФиксированныйМассив") И Ограничения.Значение<>ТекущееЗначение) Тогда
					
					ТекстОшибки = СтрШаблон(НСтр("ru ='Неподходящий результат расчета %1 по полю: %2'"), ПроверяемоеЗначение, Ограничения.Ключ);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ПутьКПолю, ТекстОшибки, "");
					Возврат Истина;
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьКлючСоответствия(Соответствие, Ключ) Экспорт
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		Если КлючИЗначение.Ключ=Ключ Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти 

 