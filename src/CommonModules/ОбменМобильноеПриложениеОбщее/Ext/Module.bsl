
#Область ВыгрузкаВМобильноеПриложение

Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	НужноНакладыватьФильтр = НужноНакладыватьФильтр(УзелОбмена);
	
	Перенос = Истина;
	
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
		
		Если НужноНакладыватьФильтр Тогда
			// Проверяем, что организация соответствует выгружаемой.
			Если Данные.Организация <> ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация
			 ИЛИ Данные.Дата < ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки Тогда
				Перенос = Ложь;
			КонецЕсли;
			
			// Если заполнены ответственный, то выгружаем по нему.
			Если ЗначениеЗаполнено(ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный)
			   И ЗначениеЗаполнено(Данные.Ответственный) Тогда
				Если Данные.Ответственный <> ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный Тогда
					Перенос = Ложь;
				КонецЕсли;
			Иначе
				// Проверяем, что автор документа - это текущий пользователь
				Если Данные.Автор <> Пользователь Тогда
					Перенос = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Данные.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ Данные.Проведен Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Для каждого ТекСтрока Из Данные.Запасы Цикл
			Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				И ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				Перенос = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЗаписиКалендаряПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности") Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
		Если Данные.Организация <> ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если НЕ Данные.ЭтоГруппа
		   И Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
		   И Данные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		Если Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
		   И Данные.Отбор.Номенклатура.Значение.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.Отбор.Характеристика.Значение) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СборкаЗапасов")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоВерсияСПроизводством(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЧекККМ")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЧекККМ")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.ЧекККМВозврат") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЧекККМВозврат")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Если ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоВерсияСРозницей(УзелОбмена) Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		КассаККМ = ПолучитьКассуККМУзла(УзелОбмена);
		
		Если НЕ УзелОбмена.ПоВсемКассамККМ
			И ЗначениеЗаполнено(КассаККМ)
			И Данные.КассаККМ <> КассаККМ Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Если НЕ Данные.Проведен Тогда
			Перенос = Ложь;
		КонецЕсли;
		
		Для каждого ТекСтрока Из Данные.Запасы Цикл
			Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				Перенос = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Перенос;
	
КонецФункции // НуженПереносДанных()

Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Если (ЭтоВерсияСоСтарымОбменом(УзелОбмена) И ПолноеИмяОбъекта = "Документ.ЗаказПокупателя")
				ИЛИ (НЕ ЭтоВерсияСоСтарымОбменом(УзелОбмена)) Тогда
				Выборка = ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
					
					Перенос = Истина;
					Если ПолноеИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
						Данные = Выборка.Ссылка.ПолучитьОбъект();
						Для каждого ТекСтрока Из Данные.Запасы Цикл
							Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
								И ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
								Перенос = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Перенос Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

Функция ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойОтветственный"
	);
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнаяОрганизация"
	);
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	ПериодВыгрузкиВМобильноеПриложение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ПериодВыгрузкиВМобильноеПриложение"
	);
	
	Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийКвартал Тогда
		ДатаНачалаВыгрузки = НачалоКвартала(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
		ДатаНачалаВыгрузки = НачалоМесяца(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
		ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
		ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	Иначе
		ДатаНачалаВыгрузки = '00010101';
	КонецЕсли;
	
	ОтборыДляВыгрузкиДокументов = Новый Структура;
	
	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнойОтветственный", ОсновнойОтветственный);
	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	
	Возврат ОтборыДляВыгрузкиДокументов;
	
КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

Функция ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта, УзелОбмена)
	
	НужноНакладыватьФильтр = НужноНакладыватьФильтр(УзелОбмена);
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
	
	Запрос = Новый Запрос;
	Если ПолноеИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
		Если НужноНакладыватьФильтр Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОбъекта] КАК Таблица
			|ГДЕ
			|	Таблица.Дата >= &ДатаНачалаВыгрузки
			|	И Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
			|	И Таблица.Организация = &Организация
			|	%ОтборПоОтветственным%
			|	И Таблица.Проведен
			|	И Таблица.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
			
			Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
			Запрос.УстановитьПараметр("Организация", ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация);
			Если ЗначениеЗаполнено(ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственным%", "И Таблица.Ответственный = &Ответственный");
				Запрос.УстановитьПараметр("Ответственный", ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный);
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственным%", "И Таблица.Автор = &Автор");
				Запрос.УстановитьПараметр("Автор", Пользователи.ТекущийПользователь());
			КонецЕсли;
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОбъекта] КАК Таблица
			|ГДЕ
			|	Таблица.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
			|	И Таблица.Проведен
			|	И Таблица.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
		КонецЕсли;
	ИначеЕсли ПолноеИмяОбъекта = "Документ.ЧекККМ"
		ИЛИ ПолноеИмяОбъекта = "Документ.ЧекККМВозврат"
		ИЛИ ПолноеИмяОбъекта = "Документ.ОтчетОРозничныхПродажах" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	[ПолноеИмяОбъекта] КАК Таблица
		|ГДЕ
		|	Таблица.Проведен
		|	%ОтборПоКассаККМ%";
		
		КассаККМ = ПолучитьКассуККМУзла(УзелОбмена);
		
		Если НЕ УзелОбмена.ПоВсемКассамККМ
			И ЗначениеЗаполнено(КассаККМ) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоКассаККМ%", "И Таблица.КассаККМ = &КассаККМ");
			Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоКассаККМ%", "");
		КонецЕсли;

	ИначеЕсли ЭтоВерсияСоСтарымОбменом(УзелОбмена) Тогда
		Возврат Неопределено;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	[ПолноеИмяОбъекта] КАК Таблица";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуДокументовДляРегистрации()

Процедура ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МобильныйКлиент.Установить(УзелОбмена);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщенияОчереди);
	НаборЗаписей.Прочитать();
	
	// Если сообщение с таким номером уже есть в очереди, генерируем исключение.
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным клиентом.Добавление сообщения в очередь сообщений обмена'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			УзелОбмена,
			НСтр("ru = 'Очередь сообщений обмена уже содержит сообщение с номером " + НомерСообщенияОчереди + ".'"));
			
		// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		
		ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
		
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.МобильныйКлиент = УзелОбмена;
	НоваяЗапись.НомерСообщения = НомерСообщенияОчереди;
	НоваяЗапись.СообщениеОбмена = СообщениеОбмена;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ДобавитьСообщениеВОчередьСообщенийОбмена()

Функция ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	Возврат ЗаписьXML;
	
КонецФункции

Процедура ПроверитьОчередьСообщенийОбмена(УзелОбмена, Знач НомерПринятого) Экспорт

	НомерСообщенияОчереди = НомерПринятого + 1;
	
	Отбор = Новый Структура("МобильныйКлиент", УзелОбмена);
	Порядок = "НомерСообщения Возр";
	ВыборкаСообщенийОбмена = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.Выбрать(Отбор, Порядок);
	
	Пока ВыборкаСообщенийОбмена.Следующий() Цикл
		
		Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияОчереди Тогда
			
			Продолжить;
			
		ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияОчереди Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным клиентом.Проверка очереди сообщений обмена'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ВыборкаСообщенийОбмена.МобильныйКлиент,
				НСтр("ru = 'Нарушен порядок следования сообщений обмена.'"));
				
			// Обнуляем счетчики принятых и отправленных сообщений для перерегистрации и отправки всех данных при следующем обмене.
			ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
			
			ВызватьИсключение(НСтр("ru='Не удалось выполнить отправку данных. Подробности см. в Журнале регистрации информационной базы.'"));
			
		КонецЕсли;
		
		НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	КонецЦикла;

КонецПроцедуры

Функция СформироватьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого, НужнаИнициализацияУзла = Ложь, ЭтоНовыйОбмен = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НужнаИнициализацияУзла Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
		ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена);
		ЗарегистрироватьИзмененияДанных(УзелОбмена);
	Иначе
		ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(УзелОбмена, НомерПринятого);
	КонецЕсли;
	
	НомерСообщенияОчереди = УзелОбмена.НомерОтправленного;
	
	// Запись данных в очередь.
	СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, ЭтоНовыйОбмен);
	
	// Проверка порядка следования сообщений обмена.
	ПроверитьОчередьСообщенийОбмена(УзелОбмена, НомерПринятого);
	
	// Удаляем регистрацию изменений для сообщений обмена, помещенных в очередь.
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
	
КонецФункции // СформироватьОчередьСообщенийОбмена()

Процедура СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, ЭтоНовыйОбмен) Экспорт
	
	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПравилаВыгрузки.СоздатьОбъектXDTO("Objects");
	
	КоличествоОбъектов = 0; // Счетчик объектов.
	
	// Запись справочников и документов
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьСправочникиИДокументыВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
	
	// Запись остатков
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьОстаткиЗапасовВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
	
	Если ЭтоНовыйОбмен Тогда
		// Запись ролей.
		ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьРолиВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок,УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
		// Запись сведений о компании.
		ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьСведенияОКомпанииВОбъектXDTO(ВозвращаемыйСписок, КоличествоОбъектов);
		// НастройкиНалогообложения
		ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьСведенияОНастройкахНалогообложенияВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов);
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
	НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
	ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);

КонецПроцедуры // СериализоватьИДобавитьДанныеВОчередьСообщенийОбмена()

Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(УзелОбмена, КодМобильногоКомпьютера, НомерПринятого, НужнаИнициализацияУзла, ИдентификаторЗадания, ЭтоНовыйОбмен = Ложь) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(УзелОбмена);
	МассивПараметров.Добавить(НомерПринятого);
	МассивПараметров.Добавить(НужнаИнициализацияУзла);
	МассивПараметров.Добавить(ЭтоНовыйОбмен);
	
	ИмяФункции = "ОбменМобильноеПриложениеОбщее.СформироватьОчередьСообщенийОбмена";
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить(
		ИмяФункции,
		МассивПараметров,
		,
		КодМобильногоКомпьютера);
		
	ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры

Функция ПолучитьСообщениеОбмена(УзелОбмена, НомерСообщенияОбмена, ИдентификаторЗадания) Экспорт

	СтруктураОтвета = Новый Структура("Подождать, ПродолжитьЗагрузку, ПрерватьЗагрузку, СообщениеОбмена", Ложь, Истина, Ложь, Неопределено);
	
	СообщениеОбмена = ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена);
	Если СообщениеОбмена <> Неопределено Тогда
		СтруктураОтвета.СообщениеОбмена = СообщениеОбмена;
		Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));
	КонецЕсли;
	
	// Если сообщения нет в очереди, проверим состояние выполнения фонового задания.
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОчередьСообщенийСформирована = ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке);
	
	НужноОчиститьОчередьСообщений = Ложь;
	// Если есть ошибки, сбрасываем счетчики сообщений для переотправки данных при следующем сеансе обмена.
	Если ЕстьОшибки Тогда
		ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
		НужноОчиститьОчередьСообщений = Истина;
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	// Если нет сообщений и очередь была сформирована, считаем что все пакеты успешно получены, иначе ожидаем пакеты.
	Если ОчередьСообщенийСформирована Тогда
		СтруктураОтвета.Подождать = Ложь;
		СтруктураОтвета.ПродолжитьЗагрузку = Ложь;
		НужноОчиститьОчередьСообщений = Истина;
	Иначе
		СтруктураОтвета.Подождать = Истина;
		СтруктураОтвета.ПродолжитьЗагрузку = НЕ ЕстьОшибки;
	КонецЕсли;
	
	СтруктураОтвета.ПрерватьЗагрузку = ЕстьОшибки;
	
	Если НужноОчиститьОчередьСообщений Тогда
		
		ОтборЗадания = Новый Структура("Ключ", Строка(ИдентификаторЗадания));
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗадания);
		
		Если МассивЗаданий.Количество() = 0  Тогда // Если очистка не запускалась, то запустить.
			
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(УзелОбмена);
			
			ИмяФункции = "ОбменМобильноеПриложениеОбщее.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом";
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(
				ИмяФункции,
				МассивПараметров,
				Строка(ИдентификаторЗадания),
				НСтр("ru='Очистка очереди сообщений с мобильным клиентом'"));
				
			СтруктураОтвета.Подождать = Истина; // Подождем очистку.
			СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			
		Иначе
			
			Если МассивЗаданий[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
				СтруктураОтвета.Подождать = Истина; // Подождем очистку.
				СтруктураОтвета.ПродолжитьЗагрузку = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9));

КонецФункции

Функция СформироватьЕдиныйПакетВыгрузки(УзелОбмена) Экспорт
	
	ЗаписьСообщения = Неопределено;
	ЗаписьXML = ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = ОбменМобильноеПриложениеПравилаВыгрузки.СоздатьОбъектXDTO("Objects");
	КоличествоОбъектов = 0;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			ОбменМобильноеПриложениеПравилаВыгрузки.УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбъектXDTO = ОбменМобильноеПриложениеПравилаВыгрузки.ПолучитьОбъектXDTO(Данные, КоличествоОбъектов);
		Если ОбъектXDTO <> Неопределено Тогда
			ВозвращаемыйСписок.objects.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменМобильноеПриложениеПравилаВыгрузки.СериализоватьИДобавитьОстаткиЗапасовВЕдиныйПакетВыгрузки(ВозвращаемыйСписок, Данные);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции // СформироватьПакетОбмена()

#КонецОбласти

#Область ЗагрузкаИзМобильногоПриложения

Функция ОчередьСообщенийСформирована(ИдентификаторЗадания, ЕстьОшибки, СообщениеОбОшибке = "") Экспорт

	ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Информация,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		Возврат ЗаданиеВыполнено;
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибки = Истина;
		ЗаписьЖурналаРегистрации("Отладка", УровеньЖурналаРегистрации.Ошибка,,, "Идентификатор задания " + Строка(ИдентификаторЗадания));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЗаданиеФормированияОчередиЗавершеноУспешно()

Функция ПолучитьСообщениеОбменаПоНомеру(УзелОбмена, НомерСообщенияОбмена) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.СообщениеОбмена
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения = &НомерСообщения";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", УзелОбмена);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщенияОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СообщениеОбмена;

КонецФункции // ПолучитьСообщениеОбменаПоНомеру()

Функция ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Объект, ТабЧасть) Экспорт
	
	ПрерватьЗаполнение = Ложь;
	КолонкиТабЧасти = Объект[ТабЧасть].ВыгрузитьКолонки().Колонки;
	
	Для каждого ТекСтрока Из Объект[ТабЧасть] Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
			И ТипЗнч(ТекСтрока.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас
			И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Характеристика") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Характеристика)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Партия") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Партия)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СерииНоменклатуры") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СерииНоменклатуры)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Резерв") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Резерв)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("РезервОтгрузка") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.РезервОтгрузка)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("Спецификация") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.Спецификация)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ПроцентАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ПроцентАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СуммаАвтоматическойСкидки") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СуммаАвтоматическойСкидки)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НомерГТД") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НомерГТД)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("ЗаказПоставщику") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("СтруктурнаяЕдиница") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.СтруктурнаяЕдиница)
			И ТекСтрока.СтруктурнаяЕдиница <> Объект.СтруктурнаяЕдиница) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
		Если (КолонкиТабЧасти.Найти("НаправлениеДеятельности") <> Неопределено
			И ЗначениеЗаполнено(ТекСтрока.НаправлениеДеятельности)) Тогда
			ПрерватьЗаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПрерватьЗаполнение;
	
КонецФункции

Процедура ОбработатьПринятыйПакетЗагрузки(УзелОбмена, ДанныеОбмена, ОчиститьИзменения = Ложь, ЭтоНовыйОбмен = Ложь) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ОчиститьИзменения Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	КонецЕсли;
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://www.1c.ru/SB/MobileExchange", "Objects");
	
	Объекты = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	ОбменМобильноеПриложениеПравилаЗагрузки.ЗагрузитьОбъекты(УзелОбмена, Объекты, ЭтоНовыйОбмен);
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // ОбработатьПринятыйПакетЗагрузки()

#КонецОбласти

#Область Подписки

Процедура ОбменМобильноеПриложениеПриЗаписиДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			НужноВыгружать = Ложь;
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя")
			   И Источник.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
			   И Источник.Проведен Тогда
				НужноВыгружать = Истина;
				Для каждого ТекСтрока Из Источник.Запасы Цикл
					Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
						И ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
						НужноВыгружать = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НЕ ЭтоВерсияСоСтарымОбменом(Выборка.Ссылка) Тогда
				Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеВКассу")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходИзКассы") 
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходнаяНакладная")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
					НужноВыгружать = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоВерсияСПроизводством(Выборка.Ссылка) Тогда
				Если ТипЗнч(Источник) = Тип("ДокументОбъект.СборкаЗапасов") Тогда
					НужноВыгружать = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоВерсияСРозницей(Выборка.Ссылка) Тогда
				Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЧекККМ")
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЧекККМВозврат") 
					ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
					КассаККМ = ПолучитьКассуККМУзла(Выборка.Ссылка);
					Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
						НужноВыгружать = Истина;
					КонецЕсли;
					Если ЗначениеЗаполнено(КассаККМ)
						И Источник.КассаККМ = КассаККМ Тогда
						НужноВыгружать = Истина;
					КонецЕсли;
					Если Выборка.ПоВсемКассамККМ Тогда
						НужноВыгружать = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НужноВыгружать Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПриЗаписиДокумента()

Процедура ОбменМобильноеПриложениеПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов")
		ИЛИ ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей")) Тогда
		Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОплатаСчетовИЗаказов") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ОплатаСчетовИЗаказов.СчетНаОплату КАК Заказ,
				|	ИСТИНА КАК Регистрировать
				|ИЗ
				|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
				|ГДЕ
				|	ОплатаСчетовИЗаказов.Регистратор = &Регистратор
				|	И ОплатаСчетовИЗаказов.СчетНаОплату.ВидОперации = &ВидОперации
				|
				|СГРУППИРОВАТЬ ПО
				|	ОплатаСчетовИЗаказов.СчетНаОплату"
			);
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЗаказыПокупателей.ЗаказПокупателя КАК Заказ,
				|	ИСТИНА КАК Регистрировать
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
				|ГДЕ
				|	ЗаказыПокупателей.Регистратор = &Регистратор
				|	И ЗаказыПокупателей.ЗаказПокупателя.ВидОперации = &ВидОперации
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказыПокупателей.ЗаказПокупателя"
			);
		КонецЕсли;
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
			ОбъектЗаказ = ТекСтрока.Заказ.ПолучитьОбъект();
			Для каждого СтрокаЗаказа Из ОбъектЗаказ.Запасы Цикл
				Если ТипЗнч(СтрокаЗаказа.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И СтрокаЗаказа.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					ТекСтрока.Регистрировать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	МассивУзловДляРегистрации = Новый Массив;
	ВидЦенПродажиПоУмолчанию = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
				Если Источник.Отбор.ВидЦен.Значение = ВидЦенПродажиПоУмолчанию
					И НЕ ЗначениеЗаполнено(Источник.Отбор.Характеристика.Значение) Тогда
					МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			Иначе
				Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
					Если ЗначениеЗаполнено(ТекСтрока.Заказ)
					   И ТекСтрока.Регистрировать Тогда
						МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
			Если Источник.Отбор.ВидЦен.Значение = ВидЦенПродажиПоУмолчанию
				И НЕ ЗначениеЗаполнено(Источник.Отбор.Характеристика.Значение) Тогда
				Для каждого ТекЗапись Из Источник Цикл
					НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(ТекЗапись.Период);
					НаборЗаписей.Отбор.Номенклатура.Установить(ТекЗапись.Номенклатура);
					НаборЗаписей.Отбор.ВидЦен.Установить(ТекЗапись.ВидЦен);
					НаборЗаписей.Отбор.Характеристика.Установить(ТекЗапись.Характеристика);
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, НаборЗаписей);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
			ТаблицаНоменклатуры = Источник.Выгрузить();
			Для каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				   И ТекСтрока.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
				   И НЕ ЗначениеЗаполнено(ТекСтрока.Характеристика)
				   И НЕ ЗначениеЗаполнено(ТекСтрока.Партия) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, ТекСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Заказ)
				   И ТекСтрока.Регистрировать Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, ТекСтрока.Заказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ОбменМобильноеПриложениеПередЗаписьюРегистра()

Процедура ОбменМобильноеПриложениеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура")
			   И (Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			   ИЛИ Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЕсли;
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктурныеЕдиницы")
			   И Источник.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
				МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрации, Источник.Ссылка);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВерсияМобильногоПриложенияСНовымОбменом()
	
	Возврат "1.2.33.1";

КонецФункции

Функция ВерсияМобильногоПриложенияСПроизводством()
	
	Возврат "1.2.60.1";

КонецФункции

Функция ВерсияМобильногоПриложенияСРозницей()
	
	Возврат "1.2.80.1";

КонецФункции

Функция НужноНакладыватьФильтр(УзелОбмена)
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УзелОбмена.ПоОтветственному;
	
КонецФункции

Функция ПолучитьКассуККМУзла(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат УзелОбмена.КассаККМ;
	
КонецФункции

Функция ЭтоВерсияСоСтарымОбменом(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияМобильногоПриложенияСНовымОбменом(), УзелОбмена.ВерсияМобильногоПриложения) > 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ЭтоВерсияСПроизводством(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(УзелОбмена.ВерсияМобильногоПриложения, ВерсияМобильногоПриложенияСПроизводством()) >= 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ЭтоВерсияСРозницей(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена.ВерсияМобильногоПриложения) Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(УзелОбмена.ВерсияМобильногоПриложения, ВерсияМобильногоПриложенияСРозницей()) >= 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Процедура ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(МобильныйКлиент, НомерСообщения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения
	|ИЗ
	|	РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
	|ГДЕ
	|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
	|	И (&НомерСообщения = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОчередиСообщенийОбменаСМобильнымиКлиентами.НомерСообщения <= &НомерСообщения)";
	
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	ВыборкаСообщений = Результат.Выбрать();
	Пока ВыборкаСообщений.Следующий() Цикл
		
		НаборЗаписей.Отбор.МобильныйКлиент.Установить(МобильныйКлиент);
		НаборЗаписей.Отбор.НомерСообщения.Установить(ВыборкаСообщений.НомерСообщения);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерПринятого = 0;
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

Функция ПолучитьКартинку(СсылкаНаОбъект) Экспорт
	
	Файл = СсылкаНаОбъект.ФайлКартинки;
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
	СериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		КартинкаXDTO = СериализаторXDTO.ЗаписатьXDTO(ДвоичныеДанныеФайла);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат КартинкаXDTO;
	
КонецФункции

Функция ПолучитьДанныеАутентификации()
	
	Возврат "AIzaSyB75SosZcatLAMPFw17Zgs5MnxoH3AtBcI";
	
КонецФункции

Процедура ПозвонитьКонтрагенту(Телефон, Устройство) Экспорт
	
	Уведомление = Новый ДоставляемоеУведомление;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	ИДПодписчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Устройство, "ИДПодписчика");
	
	Если ЗначениеЗаполнено(ИДПодписчика) Тогда
		Получатель = ИДПодписчика.Получить();
	Иначе
		Получатель = Неопределено;
	КонецЕсли;

	Если Получатель <> Неопределено Тогда
		Уведомление.Получатели.Добавить(Получатель.Получить());
	КонецЕсли;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Данные = Телефон;
		Уведомление.Текст = НСтр("ru='Звонок контрагенту'");
		ДанныеАутентификации = ПолучитьДанныеАутентификации(); // пока только гугл
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьPushУведомлениеУстройствамСНалоговымКалендарем(ЗаголовокСообщения, ТекстСообщения) Экспорт
	
	Уведомление = Новый ДоставляемоеУведомление;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	Выборка = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.МобильноеПриложение.ЭтотУзел()
			И Выборка.Роли.Найти(Перечисления.РолиМобильногоПриложения.НалоговыйКалендарь, "Роль") <> Неопределено Тогда
			Получатель = Выборка.ИДПодписчика.Получить();
			Если Получатель <> Неопределено Тогда
				Уведомление.Получатели.Добавить(Получатель.Получить());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Текст = ТекстСообщения;
		Уведомление.Заголовок = ЗаголовокСообщения;
		ДанныеАутентификации = ПолучитьДанныеАутентификации(); // пока только гугл
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации,, Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

