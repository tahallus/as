
#Область ПрограммныйИнтерфейс

// Возвращает текущий подключенный сервис.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СервисыМассовыхРассылок - Сервис массовой рассылки.
//
Функция ПодключенныйСервис() Экспорт
	
	Возврат Константы.СервисМассовыхРассылок.Получить();
	
КонецФункции

// Получает представление выбранного сервиса для использования в интерфейсе.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыМассовыхРассылок - Сервис рассылок.
// 
// Возвращаемое значение:
//  Строка - Представление сервиса.
//
Функция ПредставлениеСервиса(Сервис = Неопределено) Экспорт
	
	Если Сервис = Неопределено Тогда
		Сервис = ПодключенныйСервис();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сервис) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Перечисления.СервисыМассовыхРассылок.ПредставлениеСервиса(Сервис);
	
КонецФункции

// Получает коллекцию шаблонов писем подключенного сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. НовыйОписаниеШаблоновСервиса().
//
Функция ПолучитьШаблоныСервиса() Экспорт
	Ошибки = Неопределено;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	ШаблоныСервиса = НовыйОписаниеШаблоновСервиса();
	МодульИнтеграции().ПолучитьШаблоны(НастройкаИнтеграции, ШаблоныСервиса, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ШаблоныСервиса;
	
КонецФункции

// Получает описание шаблона письма подключенного сервиса.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор выбранного шаблона.
// 
// Возвращаемое значение:
//  Структура - Описание ключевых полей шаблона сервиса.
//
Функция ПолучитьШаблонСервиса(Идентификатор) Экспорт
	Ошибки = Неопределено;
	
	ДанныеШаблона = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НовыйОписаниеШаблоновСервиса().Добавить());
	ДанныеШаблона.Идентификатор = Идентификатор;
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ПолучитьШаблон(НастройкаИнтеграции, ДанныеШаблона, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ДанныеШаблона;
	
КонецФункции

// Получает коллекцию учетных записей почты подключенного сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. НовыйОписаниеОтправителейСервиса().
//
Функция ПолучитьОтправителейСервиса() Экспорт
	Ошибки = Неопределено;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	ОтправителиСервиса = НовыйОписаниеОтправителейСервиса();
	МодульИнтеграции().ПолучитьОтправителей(НастройкаИнтеграции, ОтправителиСервиса, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ОтправителиСервиса;
	
КонецФункции

#Область НастройкаИнтеграции

// Возвращает специфичные для выбранного сервиса сценарии поведения.
// 
// Возвращаемое значение:
//  Структура - Коллекция настроек:
//   * ИспользоватьПисьмоОснование - Булево - Определяет, требуется ли создание письма-основания для создания рассылки.
//   * ИспользоватьКлючAPI         - Булево - Определяет способ подключения к API.
//   * ИспользоватьСекретныйКлюч   - Булево - Определяет способ подключения к API.
//   * ИспользоватьЛогин           - Булево - Определяет способ подключения к API.
//
Функция НастройкиИнтерфейса(Сервис = Неопределено) Экспорт
	
	НастройкиИнтерфейса = Новый Структура;
	НастройкиИнтерфейса.Вставить("ИспользоватьПисьмоОснование", Ложь);
	НастройкиИнтерфейса.Вставить("ИспользоватьКлючAPI", Ложь);
	НастройкиИнтерфейса.Вставить("ИспользоватьСекретныйКлюч", Ложь);
	НастройкиИнтерфейса.Вставить("ИспользоватьЛогин", Ложь);
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции(Сервис).ПриОпределенииНастроекИнтерфейса(НастройкаИнтеграции, НастройкиИнтерфейса);
	
	Возврат НастройкиИнтерфейса;
	
КонецФункции

// Конструктор экземпляра настроек, см. параметр НастройкаИнтеграции.
// 
// Возвращаемое значение:
//  Структура - Описание ключевых параметров настроек интеграции:
//
Функция НовыйНастройкаИнтеграции() Экспорт
	
	НовыйНастройкаИнтеграции = Новый Структура;
	НовыйНастройкаИнтеграции.Вставить("Используется", Неопределено);
	НовыйНастройкаИнтеграции.Вставить("Сервис", Неопределено);
	НовыйНастройкаИнтеграции.Вставить("КлючAPI", Неопределено);
	НовыйНастройкаИнтеграции.Вставить("СекретныйКлюч", Неопределено);
	НовыйНастройкаИнтеграции.Вставить("Логин", Неопределено);
	Возврат НовыйНастройкаИнтеграции;
	
КонецФункции

// Возвращает текущие настройки интеграции с сервисом рассылок.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыМассовыхРассылок - Необязательный, сервис для которого необходимо получить настройки.
// 
// Возвращаемое значение:
//  Структура - См. НовыйНастройкаИнтеграции().
//
Функция НастройкаИнтеграции(Сервис = Неопределено) Экспорт
	
	Если Сервис = Неопределено Тогда
		ВыбранныйСервис = ПодключенныйСервис();
	Иначе
		ВыбранныйСервис = Сервис;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиИнтеграцииМассовыхРассылок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = ВыбранныйСервис;
	МенеджерЗаписи.Прочитать();
	
	НастройкаИнтеграции = НовыйНастройкаИнтеграции();
	НастройкаИнтеграции.Сервис        = ВыбранныйСервис;
	НастройкаИнтеграции.КлючAPI       = МенеджерЗаписи.Идентификатор;
	НастройкаИнтеграции.СекретныйКлюч = МенеджерЗаписи.СекретныйКлюч;
	НастройкаИнтеграции.Логин         = МенеджерЗаписи.Логин;
	
	Возврат НастройкаИнтеграции;
	
КонецФункции

// Сохраняет значение настроек интеграции.
//
// Параметры:
//  НастройкаИнтеграции - Структура - См. НовыйНастройкаИнтеграции().
//
Процедура СохранитьНастройкиИнтеграции(НастройкаИнтеграции) Экспорт
	
	Если НастройкаИнтеграции.Используется = Ложь Тогда
		Константы.ИспользоватьМассовыеРассылкиИнтеграция.Установить(Ложь);
		Возврат;
	КонецЕсли;
	
	Используется = Константы.ИспользоватьМассовыеРассылкиИнтеграция.Получить();
	Если Не Используется Тогда
		Константы.ИспользоватьМассовыеРассылкиИнтеграция.Установить(Истина);
		Используется = Истина;
	КонецЕсли;
	
	ПодключенныйСервис = ПодключенныйСервис();
	Если ПодключенныйСервис <> НастройкаИнтеграции.Сервис Тогда
		ПодключенныйСервис = НастройкаИнтеграции.Сервис;
		Константы.СервисМассовыхРассылок.Установить(НастройкаИнтеграции.Сервис);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиИнтеграцииМассовыхРассылок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = НастройкаИнтеграции.Сервис;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Сервис = НастройкаИнтеграции.Сервис;
	МенеджерЗаписи.Идентификатор = НастройкаИнтеграции.КлючAPI;
	МенеджерЗаписи.СекретныйКлюч = НастройкаИнтеграции.СекретныйКлюч;
	МенеджерЗаписи.Логин         = НастройкаИнтеграции.Логин;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область АдресныеКниги

// Получает коллекцию адресных книг подключенного сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. НовыйАдресныеКнигиСервиса().
//
Функция ПолучитьАдресныеКнигиСервиса() Экспорт
	Ошибки = Неопределено;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	АдресныеКнигиСервиса = НовыйОписаниеАдресныхКнигСервиса();
	МодульИнтеграции().ПолучитьАдресныеКниги(НастройкаИнтеграции, АдресныеКнигиСервиса, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат АдресныеКнигиСервиса;
	
КонецФункции

// Создает новую адресную книгу с указанными получателями в подключенный сервис.
//
// Параметры:
//  ДанныеАдреснойКниги - Структура - См. НовыйДанныеАдреснойКнигиСервиса().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция СоздатьАдреснуюКнигуСервиса(ДанныеАдреснойКниги) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().СоздатьАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Создает новых получателей в существующую адресную книгу сервиса.
//
// Параметры:
//  ДанныеАдреснойКниги - Структура - См. НовыйДанныеАдреснойКнигиСервиса().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция ДобавитьПолучателейВАдреснуюКнигуСервиса(ДанныеАдреснойКниги) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ДобавитьПолучателейВАдреснуюКнигу(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Конструктор параметра ДанныеАдреснойКниги.
// Описывает ключевые поля адресной книги сервиса.
// 
// Возвращаемое значение:
//  Структура - Описание адресной книги сервиса:
//   * Идентификатор - Строка - Идентификатор адресной книги сервиса.
//   * Наименование  - Строка - Наименование адресной книги сервиса.
//   * Получатели    - ТаблицаЗначений - Коллекция получателей адресной книги сервиса:
//     ** Контакт - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Лиды
//     ** Email   - Строка
//
Функция НовыйДанныеАдреснойКнигиСервиса() Экспорт
	
	Возврат НовыйОписаниеАдреснойКнигиСервиса();
	
КонецФункции

// Получает ключевые значения адресной книги сервиса и коллекцию получателей.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор адресной книги сервиса.
// 
// Возвращаемое значение:
//  Структура - См. НовыйОписаниеАдреснойКнигиСервиса().
//
Функция ДанныеАдреснойКнигиСервиса(Идентификатор) Экспорт
	Ошибки = Неопределено;
	
	ДанныеАдреснойКниги = НовыйОписаниеАдреснойКнигиСервиса();
	ДанныеАдреснойКниги.Идентификатор = Идентификатор;
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ДанныеАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	СопоставитьКонтактыПоEmail(ДанныеАдреснойКниги);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ДанныеАдреснойКниги;
	
КонецФункции

// Получает коллекцию получателей адресной книги сервиса.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор адресной книги сервиса.
// 
// Возвращаемое значение:
//  Структура - См. НовыйОписаниеАдреснойКнигиСервиса().
//
Функция ПолучателиАдреснойКнигиСервиса(Идентификатор) Экспорт
	Ошибки = Неопределено;
	
	ДанныеАдреснойКниги = НовыйОписаниеАдреснойКнигиСервиса();
	ДанныеАдреснойКниги.Идентификатор = Идентификатор;
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ПолучателиАдреснойКниги(НастройкаИнтеграции, ДанныеАдреснойКниги, Ошибки);
	СопоставитьКонтактыПоEmail(ДанныеАдреснойКниги);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ДанныеАдреснойКниги;
	
КонецФункции

// Конструктор параметра Получатели.
//  Коллекция получателей адресной книги сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Коллекция получателей:
//   * Контакт - ОпределяемыйТип.КонтактСобытия
//   * Email   - Строка
//
Функция НовыйТаблицаПолучателей() Экспорт
	
	ДанныеПолучателя = Новый ТаблицаЗначений;
	ДанныеПолучателя.Колонки.Добавить("Контакт", НовыйТипКонтакт());
	ДанныеПолучателя.Колонки.Добавить("Email", НовыйТипСтрока());
	
	Возврат ДанныеПолучателя;
	
КонецФункции

// Удаляет выбранных получателей из адресной книги сервиса.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор адресной книги.
//  Получатели - См. НовыйТаблицаПолучателей().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция УдалитьИзАдреснойКнигиСервиса(Идентификатор, Получатели) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().УдалитьИзАдреснойКниги(НастройкаИнтеграции, Идентификатор, Получатели, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	Возврат ЕстьОшибки;
	
КонецФункции

// Удаляет выбранных получателей из всех адресных книг сервиса.
//
// Параметры:
//  Получатели - См. НовыйТаблицаПолучателей().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция УдалитьИзВсехАдресныхКнигСервиса(Получатели) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().УдалитьИзВсехАдресныхКниг(НастройкаИнтеграции, Получатели, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область Рассылки

// Конструктор параметра ДанныеРассылки.
// Описывает ключевые поля рассылки сервиса.
// 
// Возвращаемое значение:
//  Структура - Описание рассылки сервиса.
//
Функция НовыйДанныеРассылки() Экспорт
	
	НастройкиИнтерфейса = НастройкиИнтерфейса();
	
	ДанныеРассылки = Новый Структура;
	ДанныеРассылки.Вставить("Сервис", Неопределено);
	ДанныеРассылки.Вставить("Отправитель", Неопределено);
	ДанныеРассылки.Вставить("ИмяОтправителя", Неопределено);
	ДанныеРассылки.Вставить("ТемаПисьма", Неопределено);
	ДанныеРассылки.Вставить("ТелоПисьма", Неопределено);
	ДанныеРассылки.Вставить("Идентификатор", Неопределено);
	Если НастройкиИнтерфейса.ИспользоватьПисьмоОснование Тогда
		ДанныеРассылки.Вставить("ИдентификаторПисьмаОснования", Неопределено);
	КонецЕсли;
	ДанныеРассылки.Вставить("ИдентификаторШаблона", Неопределено);
	ДанныеРассылки.Вставить("ИдентификаторАдреснойКниги", Неопределено);
	ДанныеРассылки.Вставить("Наименование", Неопределено);
	ДанныеРассылки.Вставить("Состояние", Неопределено);
	ДанныеРассылки.Вставить("ПрошлаПроверкиИОтправляется", Неопределено);
	ДанныеРассылки.Вставить("ПлановаяДатаОтправки", Неопределено);
	ДанныеРассылки.Вставить("Вложения", Новый Соответствие);
	ДанныеРассылки.Вставить("КоличествоПолучателейПлан", Неопределено);
	
	ДанныеРассылки.Вставить("ВнешниеСсылки", Новый Структура);
	ДанныеРассылки.ВнешниеСсылки.Вставить("СтраницаСтатистикиРассылки", "");
	ДанныеРассылки.ВнешниеСсылки.Вставить("СтраницаОписанияРассылки", "");
	ДанныеРассылки.ВнешниеСсылки.Вставить("СтраницаПисьма", "");
	ДанныеРассылки.ВнешниеСсылки.Вставить("ВебВерсияПисьма", "");
	
	ДанныеРассылки.Вставить("Статистика", Новый Структура);
	ДанныеРассылки.Статистика.Вставить("Всего", Неопределено);
	ДанныеРассылки.Статистика.Вставить("НеОтправлено", Неопределено);
	ДанныеРассылки.Статистика.Вставить("Отправлено", Неопределено);
	ДанныеРассылки.Статистика.Вставить("Доставлено", Неопределено);
	ДанныеРассылки.Статистика.Вставить("НеПрочитано", Неопределено);
	ДанныеРассылки.Статистика.Вставить("Открыто", Неопределено);
	ДанныеРассылки.Статистика.Вставить("ПереходовПоСсылке", Неопределено);
	ДанныеРассылки.Статистика.Вставить("ОтписокПослеПрочтения", Неопределено);
	ДанныеРассылки.Статистика.Вставить("Ошибок", Неопределено);
	ДанныеРассылки.Статистика.Вставить("Исключено", Неопределено);
	
	ДанныеРассылки.Вставить("Получатели", Новый ТаблицаЗначений);
	ДанныеРассылки.Получатели.Колонки.Добавить("Контакт", НовыйТипКонтакт());
	ДанныеРассылки.Получатели.Колонки.Добавить("Email", НовыйТипСтрока());
	ДанныеРассылки.Получатели.Колонки.Добавить("Состояние", НовыйТипСтрока());
	ДанныеРассылки.Получатели.Колонки.Добавить("КодСостояния", НовыйТипСтрока());
	
	Возврат ДанныеРассылки;
	
КонецФункции

// Заполняет связанные параметры рассылки сервиса.
//
// Параметры:
//  ДанныеРассылки - Структура - См. НовыйДанныеРассылки().
//
Процедура ИнициализироватьДанныеРассылки(ДанныеРассылки) Экспорт
	
	ЗаполнитьВнешниеURLРассылки(ДанныеРассылки);
	
КонецПроцедуры

// Создает новое письмо-основание для рассылки сервиса.
// Опциональная функциональность, смотри использование в НастройкиИнтерфейса().
//
// Параметры:
//  ДанныеРассылки - Структура - См. НовыйДанныеРассылки().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция СоздатьПисьмоОснование(ДанныеРассылки) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().СоздатьПисьмоОснование(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	ИнициализироватьДанныеРассылки(ДанныеРассылки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	Возврат ЕстьОшибки;
	
КонецФункции

// Создает новую массовую рассылку сервиса.
//
// Параметры:
//  ДанныеРассылки - Структура - См. НовыйДанныеРассылки().
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнено успешно.
//
Функция СоздатьРассылку(ДанныеРассылки) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().СоздатьРассылку(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	ИнициализироватьДанныеРассылки(ДанныеРассылки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	Возврат ЕстьОшибки;
	
КонецФункции

// Получает актуальный статус рассылки и общую статистику по отправке писем.
//
// Параметры:
//  ДанныеРассылки - Структура - См. НовыйДанныеРассылки().
//
Функция ПолучитьСостояниеРассылки(ДанныеРассылки) Экспорт
	Ошибки = Неопределено;
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеРассылки.Идентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ПолучитьСостояниеРассылки(НастройкаИнтеграции, ДанныеРассылки, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, ЕстьОшибки);
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяСобытияЖР() Экспорт
	
	Возврат НСтр("ru='МассовыеРассылкиИнтеграция'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает пустую коллекцию адресных книг сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Коллекция адресных книг сервиса:
//   * Идентификатор - Строка - Идентификатор адресной книги сервиса.
//   * Наименование  - Строка - Наименование адресной книги сервиса.
//   * Получатели    - ТаблицаЗначений - Коллекция получателей адресной книги сервиса:
//     ** Контакт - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Лиды
//     ** Email   - Строка
//
Функция НовыйАдресныеКнигиСервиса() Экспорт
	
	Возврат НовыйОписаниеАдресныхКнигСервиса();
	
КонецФункции

// Получает добавленные пользовательские поля 1С в адресную книгу сервиса.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание добавленных полей:
//   * Имя - Строка - Имя поля.
//   * Представление - Строка - Синоним поля.
//
Функция ПользовательскиеПоляАдреснойКниги() Экспорт
	
	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("Имя", НовыйТипСтрока());
	ОписаниеПолей.Колонки.Добавить("Представление", НовыйТипСтрока());
	
	МассовыеРассылкиИнтеграцияПереопределяемый.ПриОпределенииПользовательскихПолейАдреснойКниги(ОписаниеПолей);
	ПроверитьУникальностьПользовательскихПолей(ОписаниеПолей);
	
	Возврат ОписаниеПолей;
	
КонецФункции

// Возвращает значения экспортируемых параметров контакта для экспорта.
// См. ПользовательскиеПоляАдреснойКниги().
//
// Параметры:
//  Контакт - ОпределяемыйТип.КонтактСобытия - Экспортируемый контакт.
// 
// Возвращаемое значение:
//  Структура - Значения параметров контакта.
//
Функция ПараметрыПолучателяДляЭкспорта(Контакт) Экспорт
	
	ДанныеПолучателяСтруктурой = Новый Структура;
	МассовыеРассылкиИнтеграцияПереопределяемый.ПриДобавленииПолейПолучателяАдреснойКниги(Контакт, ДанныеПолучателяСтруктурой);
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("Структура"));
	
	ОжидаемыеТипыСвойств = Новый Массив;
	ОжидаемыеТипыСвойств.Добавить(Тип("Дата"));
	ОжидаемыеТипыСвойств.Добавить(Тип("Число"));
	ОжидаемыеТипыСвойств.Добавить(Тип("Строка"));
	
	Для каждого КлючЗначение Из ДанныеПолучателяСтруктурой Цикл
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("МассовыеРассылкиИнтеграцияПереопределяемый.ПриДобавленииПолейПолучателяАдреснойКниги",
			КлючЗначение.Ключ,
			КлючЗначение.Значение,
			ОжидаемыеТипыСвойств);
	КонецЦикла;
	
	Возврат ДанныеПолучателяСтруктурой;
	
КонецФункции

// Словарь универсальных сообщений для отображения в интерфейсе программы.
// 
// Возвращаемое значение:
//  Структура - Словарь:
//   * Ключ - Код сообщения для использования в коде.
//   * Значение - Строка - Сообщение для вывода пользователю.
//
Функция Словарь() Экспорт
	
	Словарь = Новый Структура;
	Словарь.Вставить("СообщениеЕщеНеОтправлено",                   НСтр("ru='Сообщение еще не отправлено'"));
	Словарь.Вставить("СообщениеОтправленоСтатусНеизвестен",        НСтр("ru='Сообщение отправлено, статус доставки пока неизвестен'"));
	Словарь.Вставить("СообщениеДоставленоНеПрочитано",             НСтр("ru='Сообщение доставлено, еще не прочитано'"));
	Словарь.Вставить("СообщениеДоставленоПрочитано",               НСтр("ru='Сообщение доставлено и прочитано'"));
	Словарь.Вставить("СообщениеДоставленоПереходПоСсылке",         НСтр("ru='Сообщение доставлено, прочитано, есть переход по ссылке'"));
	Словарь.Вставить("СообщениеДоставленоПрочитаноОтписался",      НСтр("ru='Получатель прочитал сообщение и отписался'"));
	Словарь.Вставить("EmailНеВключенВРассылку",                    НСтр("ru='Email не включен в рассылку'"));
	Словарь.Вставить("ПочтовыйЯщикПолучателяПереполнен",           НСтр("ru='Почтовый ящик получателя переполнен'"));
	Словарь.Вставить("СообщениеНеОтправлялосьПолучательОтписан",   НСтр("ru='Сообщение не отправлялось, получатель отписался ранее'"));
	Словарь.Вставить("СообщениеОтклоненоСерверомКакСпам",          НСтр("ru='Письмо отклонено сервером как спам'"));
	Словарь.Вставить("СообщениеДоставленоПомеченоСпамПолучателем", НСтр("ru='Сообщение доставлено, помещено как спам получателем'"));
	Словарь.Вставить("ДоменНеСуществует",                          НСтр("ru='Домен не принимает почту или не существует'"));
	Словарь.Вставить("АдресНеСуществует",                          НСтр("ru='Email не существует'"));
	Словарь.Вставить("АдресНедоступен",                            НСтр("ru='Email недоступен'"));
	Словарь.Вставить("АдресВременноНедоступен",                    НСтр("ru='Email временно недоступен'"));
	Словарь.Вставить("АдресНекорректный",                          НСтр("ru='Некорректный Email'"));
	Словарь.Вставить("ДоставкаНеУдалась",                          НСтр("ru='Доставка не удалась'"));
	Словарь.Вставить("ДоставкаНеУдаласьПовторнаяОтправка",         НСтр("ru='Доставка не удалась, будет отправлено повторно'"));
	
	Возврат Словарь;
	
КонецФункции

// Возвращает коллекцию кодов состояний доставки email-сообщения получателю.
// Используется для группировки, визуального оформления и фильтрации статусов доставки.
// 
// Возвращаемое значение:
//  Структура - Коды состояний.
//
Функция КодыСостояний() Экспорт
	
	СписокКодов = Новый Массив;
	СписокКодов.Добавить("ИсключениеИзРассылки");
	СписокКодов.Добавить("НеОтправлено");
	СписокКодов.Добавить("Отправлено");
	СписокКодов.Добавить("Доставлено");
	СписокКодов.Добавить("ДоставленоНеПрочитано");
	СписокКодов.Добавить("ДоставленоПрочитано");
	СписокКодов.Добавить("ДоставленоПереходПоСсылке");
	СписокКодов.Добавить("ДоставленоПрочитаноОтписался");
	СписокКодов.Добавить("Ошибка");
	
	КодыСостояний = Новый Структура;
	Для каждого Код Из СписокКодов Цикл
		КодыСостояний.Вставить(Код, Код);
	КонецЦикла;
	
	Возврат КодыСостояний;
	
КонецФункции

// Заполняет ключевую статистику экземпляра рассылки сервиса по коду состояния доставки.
//
// Параметры:
//  ДанныеРассылки - Структура - См. НовыйДанныеРассылки().
//  КодСостояния - Строка - См. КодыСостояний().
//  ЗначениеСтатистики - Число - Значение показателя.
//
Процедура ЗаполнитьСтатистикуРассылкиПоКодуСостояния(ДанныеРассылки, КодСостояния, ЗначениеСтатистики) Экспорт
	
	СоответствиеКодаЗначениюСтатистики = Новый Соответствие;
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().ИсключениеИзРассылки,         "Исключено");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().НеОтправлено,                 "НеОтправлено");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().Отправлено,                   "Отправлено");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().Доставлено,                   "Доставлено");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().ДоставленоНеПрочитано,        "НеПрочитано");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().ДоставленоПрочитано,          "Открыто");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().ДоставленоПереходПоСсылке,    "ПереходовПоСсылке");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().ДоставленоПрочитаноОтписался, "ОтписокПослеПрочтения");
	СоответствиеКодаЗначениюСтатистики.Вставить(КодыСостояний().Ошибка,                       "Ошибок");
	
	КлючЗначенияСтатистики = СоответствиеКодаЗначениюСтатистики.Получить(КодСостояния);
	Если КлючЗначенияСтатистики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеРассылки.Статистика[КлючЗначенияСтатистики] = Неопределено Тогда
		ДанныеРассылки.Статистика[КлючЗначенияСтатистики] = 0;
	КонецЕсли;
	
	ДанныеРассылки.Статистика[КлючЗначенияСтатистики] = ДанныеРассылки.Статистика[КлючЗначенияСтатистики] + ЗначениеСтатистики;
	
КонецПроцедуры

// Возвращает токен доступа API подключенного сервиса.
// Если актуальный токен еще не был получен или истек его срок действия - будет запрошен и сохранен новый.
// Опциональная функциональность.
// 
// Возвращаемое значение:
//  Строка - Токен доступа сервиса для подписи исходящих запросов к API.
//
Функция ТокенДоступаAPI() Экспорт
	Перем Ошибка;
	
	Сервис = ПодключенныйСервис();
	
	Токен = АктуальныйТокенДоступаAPI(Сервис);
	
	Если Токен = Неопределено Тогда
		Токен = НовыйТокенДоступаAPI(Сервис, Ошибка);
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТокеныДоступаAPI

Функция НовыйОписаниеТокенаДоступаAPI()
	
	ОписаниеТокена = Новый Структура;
	ОписаниеТокена.Вставить("Значение", Неопределено);
	ОписаниеТокена.Вставить("СрокДействия", Неопределено);
	
	Возврат ОписаниеТокена;
	
КонецФункции

Функция АктуальныйТокенДоступаAPI(Сервис)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ТокеныДоступаAPIСервисаМассовыхРассылок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = Сервис;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МенеджерЗаписи.СрокДействия < ТекущаяДатаСеанса() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Токен;
	
КонецФункции

Функция НовыйТокенДоступаAPI(Сервис, Ошибка)
	
	ОписаниеТокена = ЗапроситьТокенДоступаAPI(Сервис, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписатьТокенДоступаAPI(Сервис, ОписаниеТокена);
	
	Возврат ОписаниеТокена.Значение;
	
КонецФункции

Функция ЗапроситьТокенДоступаAPI(Сервис, Ошибка)
	Ошибки = Неопределено;
	
	ОписаниеТокена = НовыйОписаниеТокенаДоступаAPI();
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции(Сервис).ПолучитьТокенДоступаAPI(НастройкаИнтеграции, ОписаниеТокена, Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ОписаниеТокена;
	
КонецФункции

Процедура ЗаписатьТокенДоступаAPI(Сервис, ОписаниеТокена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ТокеныДоступаAPIСервисаМассовыхРассылок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = Сервис;
	МенеджерЗаписи.Токен = ОписаниеТокена.Значение;
	МенеджерЗаписи.СрокДействия = ОписаниеТокена.СрокДействия;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

Функция НовыйОписаниеШаблоновСервиса()
	
	ОписаниеШаблоновСервиса = Новый ТаблицаЗначений;
	ОписаниеШаблоновСервиса.Колонки.Добавить("Идентификатор", НовыйТипСтрока());
	ОписаниеШаблоновСервиса.Колонки.Добавить("Наименование", НовыйТипСтрока());
	ОписаниеШаблоновСервиса.Колонки.Добавить("СсылкаНаПредпросмотр", НовыйТипСтрока());
	ОписаниеШаблоновСервиса.Колонки.Добавить("ТемаПисьма", НовыйТипСтрока());
	
	Возврат ОписаниеШаблоновСервиса;
	
КонецФункции

Функция НовыйОписаниеОтправителейСервиса()
	
	ОписаниеОтправителейСервиса = Новый ТаблицаЗначений;
	ОписаниеОтправителейСервиса.Колонки.Добавить("Наименование", НовыйТипСтрока());
	ОписаниеОтправителейСервиса.Колонки.Добавить("Email", НовыйТипСтрока());
	
	Возврат ОписаниеОтправителейСервиса;
	
КонецФункции

Функция НовыйОписаниеАдресныхКнигСервиса()
	
	ОписаниеАдресныхКнигСервиса = Новый ТаблицаЗначений;
	ОписаниеАдресныхКнигСервиса.Колонки.Добавить("Идентификатор", НовыйТипСтрока());
	ОписаниеАдресныхКнигСервиса.Колонки.Добавить("Наименование", НовыйТипСтрока());
	ОписаниеАдресныхКнигСервиса.Колонки.Добавить("Получатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ОписаниеАдресныхКнигСервиса;
	
КонецФункции

Функция НовыйОписаниеАдреснойКнигиСервиса()
	
	ОписаниеАдреснойКнигиСервиса = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НовыйОписаниеАдресныхКнигСервиса().Добавить());
	ОписаниеАдреснойКнигиСервиса.Получатели = НовыйТаблицаПолучателей();
	Возврат ОписаниеАдреснойКнигиСервиса;
	
КонецФункции

#КонецОбласти

Функция МодульИнтеграции(Сервис = Неопределено)
	
	Если Сервис = Неопределено Тогда
		ВыбранныйСервис = ПодключенныйСервис();
	Иначе
		ВыбранныйСервис = Сервис;
	КонецЕсли;
	
	ИмяМодуля = "МассовыеРассылкиИнтеграция" + ОбщегоНазначения.ИмяЗначенияПеречисления(ВыбранныйСервис);
	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

Процедура СопоставитьКонтактыПоEmail(ДанныеАдреснойКниги)
	
	Для каждого Получатель Из ДанныеАдреснойКниги.Получатели Цикл
		Если Не ЗначениеЗаполнено(Получатель.Контакт) Тогда
			Получатель.Контакт = КонтактнаяИнформацияУНФ.КонтрагентПоАдресуЭП(Получатель.Email);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнешниеURLРассылки(ДанныеРассылки)
	
	НастройкаИнтеграции = НастройкаИнтеграции();
	МодульИнтеграции().ЗаполнитьВнешниеURLРассылки(НастройкаИнтеграции, ДанныеРассылки);
	
КонецПроцедуры

Функция НовыйТипКонтакт()
	
	Возврат Метаданные.ОпределяемыеТипы.КонтактСобытия.Тип;
	
КонецФункции

Функция НовыйТипСтрока()
	
	Возврат Новый ОписаниеТипов("Строка");
	
КонецФункции

Процедура ПроверитьУникальностьПользовательскихПолей(ОписаниеПолей)
	
	ОписаниеПолейКопия = ОписаниеПолей.Скопировать(, "Имя");
	ОписаниеПолейКопия.Колонки.Добавить("Количество");
	ОписаниеПолейКопия.ЗаполнитьЗначения(1, "Количество");
	ОписаниеПолейКопия.Свернуть("Имя", "Количество");
	
	Для каждого ОписаниеПоля Из ОписаниеПолейКопия Цикл
		Если ОписаниеПоля.Количество > 1 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Обнаружены неуникальные поля для экспорта контактов: ""%1"".
			|См. МассовыеРассылкиИнтеграцияПереопределяемый.ПриОпределенииПользовательскихПолейАдреснойКниги'"), ОписаниеПоля.Имя);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти