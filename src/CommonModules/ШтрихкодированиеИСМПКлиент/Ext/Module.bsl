#Область ПрограммныйИнтерфейс

#Область ПроверкаКодовМаркировкиСредствамиКТТ

// Запускает проверку кодов маркировки средствами ККТ. По завершении проверки будет вызвано оповещение, переданное в параметрах.
// 
// Параметры:
//  ПараметрыНачалаПроверки - см. ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ.
Процедура НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыНачалаПроверки) Экспорт
	
	ПараметрыПроверки = НовыеПараметрыПроверкиНаККТ(ПараметрыНачалаПроверки);
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.ЭлементыПроверки Цикл
		
		ЭлементПроверки.ПланируемыйСтатусТовара = ПланируемыйСтатусТовара(ПараметрыПроверки.ПараметрыСканирования);
		
		РезультатПроверки = НовыйРезультатПроверкиЭлементаСредствамиККТ();
		ПараметрыПроверки.Результат.ДанныеПроверки.Вставить(ЭлементПроверки.ИдентификаторЭлемента, РезультатПроверки);
		
		РезультатПроверки.ОтображатьОшибки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьКодыМаркировкиСредствамиККТ(
			ЭлементПроверки.ВидПродукции,
			ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП);
			
		ПроизведенКонтрольСтатусов = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
			ЭлементПроверки.ВидПродукции,
			ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП);
		ПроизведенКонтрольВладельцев = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
			ЭлементПроверки.ВидПродукции,
			ПараметрыПроверки.ПараметрыСканирования.ВидОперацииИСМП);
			
		Если ПараметрыПроверки.ПропускатьПроверкуСредствамиККТ
			И (ПроизведенКонтрольСтатусов Или ПроизведенКонтрольВладельцев) Тогда
			
			РезультатПроверки.ОтображатьОшибки             = Ложь;
			РезультатПроверки.ПропуститьОжиданиеОтветаОИСМ = Истина;
			
		КонецЕсли
		
	КонецЦикла;
	
	Если ДанныеДляПроверкиСредствамиККТСодержатОшибки(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки.ЭлементыПроверки.Количество()
		И ПараметрыПроверки.ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИдентификаторУстройства) Тогда
			ВызватьИсключение НСтр("ru = 'Внутреняя ошибка. Не заполнен идентификатор устройства ККТ'");
		КонецЕсли;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ЗакрытиеФормыОжиданияПроверкиЗавершение",
			ЭтотОбъект,
			ПараметрыПроверки);
		
		ОткрытьФорму(
			"ОбщаяФорма.ОжиданиеПроверкиКодовМаркировкиИСМП",,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),,,,
			ОписаниеОповещенияОЗакрытии);
		
		Оповестить(
			"НачалоПроверки",
			ПараметрыПроверки,
			ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки));
		
	Иначе
		
		ПараметрыПроверки.Результат.ВыполнитьФискализацию = Истина;
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры начала проверки кодов маркировки средствами ККТ.
// Параметры используюся дла начала проверки методом (см. НачатьПроверкуКодовМаркировкиСредствамиККТ).
// 
// Возвращаемое значение:
//  Структура:
// * ОповещениеОЗавершении   - ОписаниеОповещения - Оповещение, которое будет вызвано по окончании проверки,
//                             в качестве результат будет передано значения типа (см. НовыйРезультатПроверкиСредствамиККТ).
// * ДанныеДляПроверки       - см. ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ.
// * ДанныеДляПроверки       - Массив из см. ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ.
// * ПараметрыСканирования   - см. ШтрихкодированиеИС.ПараметрыСканирования.
// * ФормаОсновногоОбъекта   - ФормаКлиентскогоПриложения               - Форма, связанная с основным объектов проверки, например, форма РТиУ.
// * ФормаВспомогательная    - ФормаКлиентскогоПриложения, неопределено - Форма, отображаемая пользоваетелю в текущий момент, например, форма предпросмотра чека.
// * ЗаголовокКнопкиИгнорировать - Строка, Неопределено - Заголовок кнопки для игнорирования ошибки проверки на ККТ.
//                                                        Результат проверки на ККТ может быть отрицательным, описание ошибки
//                                                        отображается в соответствующей форме.
//                                                        После подтверждения покупателем отрицательного результата проверки
//                                                        ошибка может быть проигнорирована и операция продолжена.
//                                                        Если это операция пробития чека то в этом свойстве может быть задано, например:
//                                                        "Прибить чек", "Покупатель согласен", "Оформить передачу". По-умолчанию "Игнорировать ошибку". 
// * ЭтоДокументОплаты       - Булево - Взвести флаг, если вызов происходит по отдельному документу оплаты, без привязки к форме документа с кодами маркировки, Например ПКО по РТиУ.
// * ЭтоСканирование         - Булево - Внутренний. Признак вызова проверки при сканировании.
Функция ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДляПроверки",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыСканирования",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаОсновногоОбъекта",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаВспомогательная",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗаголовокКнопкиИгнорировать", Неопределено);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоДокументОплаты",           Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует новый элемент проверки средствами ККТ на основании данных распределения.
// 
// Параметры:
//  РезультатРаспределения - см. ШтрихкодированиеИСМП.НовыйРезультатРаспределенияШтрихкодовПоТоварам.
// 
// Возвращаемое значение:
//  Структура - см. ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
Функция НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения(РезультатРаспределения) Экспорт
	
	ЭлементДанных = ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ();
	ЭлементДанных.ВидПродукции         = РезультатРаспределения.ВидПродукции;
	ЭлементДанных.ВидУпаковки          = РезультатРаспределения.ВидУпаковки;
	ЭлементДанных.КодМаркировки        = РезультатРаспределения.КодМаркировки;
	ЭлементДанных.ПолныйКодМаркировки  = РезультатРаспределения.ПолныйКодМаркировки;
	ЭлементДанных.СоставКодаМаркировки = РезультатРаспределения.СоставКодаМаркировки;
	ЭлементДанных.ШтрихкодУпаковки     = РезультатРаспределения.ШтрихкодУпаковки;
	
	Возврат ЭлементДанных;
	
КонецФункции

// Выполняет проверку результата завершения проверки средствами ККТ и определяет необходимость фискализации.
// Например, в результате проверки были найдены ошибки, но пользователь согласен продолжать и игнорирует ошибки.
// Параметры:
//  Результат - см. НовыйРезультатПроверкиСредствамиККТ
// 
// Возвращаемое значение:
//  Булево - Результат проверки не препятствует фискализации.
Функция РезультатПроверкиСредствамиККТТребуетФискализации(Результат) Экспорт
	
	Возврат Результат.ВыполнитьФискализацию;
	
КонецФункции

// Выполняет проверку результата завершения проверки средствами ККТ и определяет необходимость закрытия не основной формы.
// Например, для пробития чека используется дополнительная форма, а в форме ошибки выполнено действие, приводящее к открытию
// дополнительных форм. В таком случае вспомогательная форма становится не актуальной и требует закрытия.
// Параметры:
//  Результат - см. НовыйРезультатПроверкиСредствамиККТ
// 
// Возвращаемое значение:
//  Булево - Требуется закрыть вспомогательную форму.
Функция РезультатПроверкиСредствамиККТЗакрытьВспомогательнуюФорму(Результат) Экспорт
	
	Возврат Результат.ЗакрытьВспомогательнуюФорму;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет анализ результат обработки штрихкода, на основании которого выполняет необходимые действия.
// 
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - Структура - (См. ШтрихкодированиеКлиент.ПараметрыЗавершенияОбработкиШтрихкода).
//  ВыполнятьОбработчикОповещения     - Булево    - Выполнять обработчик оповещения.
// 
// Возвращаемое значение:
//  Булево - Завершить обработку ввода штрихкода.
Функция ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, ВыполнятьОбработчикОповещения = Истина) Экспорт
	
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	ПараметрыСканирования       = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	
	АвторизацияИСМП = РезультатОбработкиШтрихкода.Свойство("ТребуетсяАвторизацияИСМП") И РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП;
	Если АвторизацияИСМП Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("АвторизацияПользователяЗавершение",
			ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ПараметрыСканирования.Организация);
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(ПараметрыЗапросаКлючаСессии, ОписаниеОповещения);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ВыводитьСообщенияОбОшибках
		И (РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
		Или РезультатОбработкиШтрихкода.ЕстьОшибки
		Или ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ТекстОшибки)) Тогда
		
		ВидПродукции = Неопределено;
		Если ТипЗнч(РезультатОбработкиШтрихкода.ДанныеШтрихкода) = Тип("Структура") Тогда
			
			ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ПредставлениеНоменклатуры) Тогда
				ПредставлениеНоменклатуры = Строка(ДанныеШтрихкода.ПредставлениеНоменклатуры);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				ПредставлениеНоменклатуры = Строка(ДанныеШтрихкода.Номенклатура);
			Иначе
				ПредставлениеНоменклатуры = НСтр("ru = '<Неизвестная маркируемая продукция>'");
			КонецЕсли;
			
			ВидПродукции = ДанныеШтрихкода.ВидПродукции;
			
		КонецЕсли;
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции);
		ПараметрыОткрытияФормы.Штрихкод                  = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытияФормы.ТекстОшибки               = РезультатОбработкиШтрихкода.ТекстОшибки;
		ПараметрыОткрытияФормы.Организация               = ПараметрыСканирования.Организация;
		ПараметрыОткрытияФормы.ТипШтрихкода              = РезультатОбработкиШтрихкода.ТипШтрихкода;
		ПараметрыОткрытияФормы.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		ПараметрыОткрытияФормы.АдресДереваУпаковок       = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ПараметрыОткрытияФормы.ПараметрыОшибки           = РезультатОбработкиШтрихкода.ПараметрыОшибки;
		ПараметрыОткрытияФормы.ИмяФормыИсточник          = Форма.ИмяФормы;
		ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		ШтрихкодированиеИСКлиент.УточнитьДанныеУПользователя(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(
		РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции, Истина)
		И РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
		И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена Тогда
			
		ПараметрыЗавершенияВводаШтрихкода.Форма = Неопределено;
		Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияВводаШтрихкода;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат Истина;
			
	КонецЕсли;
	
	Если ВыполнятьОбработчикОповещения И Не (ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении = Неопределено) Тогда
		
		ВыполнитьОбработкуОповещения(ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении, РезультатОбработкиШтрихкода);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Открывает форму, которая информирует пользователя об ошибке добавления введенного штрихкода.
//
Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если  ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет результат обработки штрихкода на необходимость интерактивного уточнения данных у пользователя.
// 
// Параметры:
//  РезультатОбработки - Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если необходимо уточнить данные у пользователя.
Функция ТребуетсяУточнениеДанныхУПользователя(РезультатОбработки) Экспорт
	
	Возврат РезультатОбработки.ТребуетсяАвторизацияИСМП Или РезультатОбработки.ТребуетсяУточнениеДанных;
	
КонецФункции

// Выполняет повторно вызов клиентских функий обработки штрихкодов в случае успешного прохождения авторизации.
// 
// Параметры:
// 	Результат - Соответствие - содержит информация о необходимости авторизации по организации.
// 	ДополнительныеПараметры - (См. ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода).
Процедура АвторизацияПользователяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ДополнительныеПараметры.ПараметрыСканирования.Организация;
	
	АвторизацияПрошлаУспешно = Результат[Организация] = Истина;
	
	Если АвторизацияПрошлаУспешно Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда
			
			ОповещениеПовторнойОбработки = Новый ОписаниеОповещения(ДополнительныеПараметры.ОбработатьШтрихкод, Форма);
			ВыполнитьОбработкуОповещения(ОповещениеПовторнойОбработки, ДополнительныеПараметры.ДанныеШтрихкода);
			
		Иначе
			
			ЗавершениеОбработки   = ДополнительныеПараметры.ЗавершениеОбработки;
			ДанныеШтрихкода       = ДополнительныеПараметры.ДанныеШтрихкода;
			ПараметрыСканирования = ДополнительныеПараметры.ПараметрыСканирования;
			
			ШтрихкодированиеИСКлиент.ОбработатьДанныеШтрихкода(
				ЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат[Организация]) = Тип("Строка") Тогда
		
		ПараметрыОткрытияФормы = Новый Структура("ТекстОшибки", Результат[Организация]);
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет действия после выбора серии пользователем.
//
//Параметры:
//   РезультатВыбора        - ОпределяемыйТип.СерияНоменклатуры - выбранная серия.
//  ДополнительныеПараметры - Структура - данные источника вызова
//
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Если ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
		Иначе
			ОповещениеЗавершениеОбработки = Новый ОписаниеОповещения(ДополнительныеПараметры.ЗавершениеОбработки, ДополнительныеПараметры.Форма);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.Свойство("ВызовИзФормыДокумента") Тогда
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда

			Действие = "ОбработатьВыборСерии";
			РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
				Действие,
				РезультатВыбора,
				ДополнительныеПараметры.РезультатОбработкиШтрихкода,
				ДополнительныеПараметры.КэшированныеЗначения);

			ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","","");
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
			ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
			ДополнительныеПараметры.Свойство("ЗавершениеОбработки", ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки);
			ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);

		Иначе

			ДанныеШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьДанныеШтрихкодаПослеВыбораСерии(
				ДополнительныеПараметры.РезультатОбработкиШтрихкода, РезультатВыбора);

			ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);

			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ДанныеШтрихкода);

		КонецЕсли;
		
	Иначе

		РезультатУточнения = Новый Структура;
		РезультатУточнения.Вставить("РезультатВыбора",             РезультатВыбора);
		РезультатУточнения.Вставить("КэшированныеЗначения",        ДополнительныеПараметры.КэшированныеЗначения);
		РезультатУточнения.Вставить("ПараметрыСканирования",       ДополнительныеПараметры.ПараметрыСканирования);
		РезультатУточнения.Вставить("Действие",                    "ОбработатьУточнениеДанных");
		РезультатУточнения.Вставить("РезультатОбработкиШтрихкода", ДополнительныеПараметры.РезультатОбработкиШтрихкода);
		РезультатУточнения.Вставить("ИсходныеДанные",              ДополнительныеПараметры.ДанныеШтрихкода);
		ОповещениеВыполнитьДействие = Новый ОписаниеОповещения(ДополнительныеПараметры.ВыполнитьДействие, Форма);
		ВыполнитьОбработкуОповещения(ОповещениеВыполнитьДействие, РезультатУточнения);

	КонецЕсли;
	
КонецПроцедуры

// Открыывает форму проверки кодов маркировки с параметрами.
// 
// Параметры:
// 	ПараметрыОткрытия   - Структура, Неопределено                  - Параметры открытия формы.
// 	ВладелецФормы       - ФормаКлиентскогоПриложения, Неопределено - Владелец открываемой формы.
// 	ОповещениеОЗакрытии - ОписаниеОповещения, Неопределено         - Описание оповещения при закрытии формы.
Процедура ОткрытьФормуПроверкиКодовМаркировки(ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ВладелецФормы = Неопределено Тогда
		РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПроверкаКодовМаркировкиИСМП.Форма",
		ПараметрыОткрытия,
		ВладелецФормы,,,,
		ОповещениеОЗакрытии,
		РежимОткрытия);
	
КонецПроцедуры

Процедура СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ДанныеШтрихкода.Свойство("ЕстьВПулеКодовМаркировки")
		Или ДанныеШтрихкода.ЕстьВПулеКодовМаркировки
		Или ПараметрыСканирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ДанныеРазбора <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
		ШтрихкодированиеИСМПВызовСервера.СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

#Область ПотоковаяПечать

// Описание
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой вызвано событие
//  ДанныеШтрихкода - Структура - данные считанного штрихкода
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//
Процедура ОбработатьСобытиеПотоковойПечати(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ДоступнаПечатьЭтикеток Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Свойство("ШаблонМаркировки")
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.ШаблонМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(ДанныеШтрихкода.Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ДанныеШтрихкода.Штрихкод);
	ДанныеВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если GTIN <> ДанныеВыбора.GTIN Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтруктураПечати = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организация") Тогда
		СтруктураПечати.Организация    = Форма.Организация;
		СтруктураПечати.ВидПродукции   = Форма.ВидМаркируемойПродукции;
		ДокументПечати                 = Форма.ПроверяемыйДокумент;
	Иначе
		СтруктураПечати.Организация    = Форма.Объект.Организация;
		СтруктураПечати.ВидПродукции   = Форма.Объект.ВидПродукции;
		ДокументПечати                 = Форма.Объект.Ссылка;
	КонецЕсли;
	СтруктураПечати.Номенклатура       = ДанныеВыбора.Номенклатура;
	СтруктураПечати.Характеристика     = ДанныеВыбора.Характеристика;
	СтруктураПечати.Серия              = ДанныеВыбора.Серия;
	СтруктураПечати.ШаблонЭтикетки     = ДанныеВыбора.ШаблонЭтикетки;
	СтруктураПечати.Шаблон             = ДанныеВыбора.ШаблонМаркировки;
	СтруктураПечати.СпособВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		
	Если ПараметрыСканирования.Свойство("ЭтоМаркировкаОстатков") И ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
		СтруктураПечати.МаркировкаОстатков = Истина;
	КонецЕсли;
	
	ДанныеДляПечати = ПечатьЭтикетокИСМПКлиентСервер.ДанныеДляПечатиЭтикеток(СтруктураПечати, Форма, ДокументПечати);
	СтруктураРезультата = ПечатьЭтикетокИСМПВызовСервера.ПечатьЭтикетокСРезервированиемПоДокументу(ДанныеДляПечати);
	
	Если СтруктураРезультата <> Неопределено
			И СтруктураРезультата.РезультатРезервирования.Количество() Тогда
		СтрокаРезультат = СтруктураРезультата.РезультатРезервирования.Получить(0);
		
		// Подмена кода кодом из пула
		ДанныеШтрихкода.Вставить("Штрихкод",     СтрокаРезультат.ПолныйКодМаркировки);
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		
		// Оптимизация параметров сканирования
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот      = Неопределено;
		ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП = Истина;
		
		Если ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП") Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП             = Ложь;
			ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Ложь;
		КонецЕсли;
		// Печать КМ
		ПечатьЭтикетокИСМПКлиент.ВывестиНаПечатьТабличныйДокумент(
			СтруктураРезультата.ТабличныйДокумент, Форма, ДанныеВыбора.СразуНаПринтер);
		Если Не ДанныеВыбора.СразуНаПринтер Тогда
			Форма.Активизировать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку навигационной ссылки в тексте ошибки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-источние события.
// 	НавигационнаяСсылкаФорматированнойСтроки - Строка - Данные навигационной ссылки.
// 	СтандартнаяОбработка                     - Булево - Признак стандартной обработки.
Процедура ОбработкаНавигационнойСсылкиТекстаОшибки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПроверкуКодаМаркировкиИСМП" Тогда
		
		ПараметрыОткрытияПроверкиКМ              = ЛогированиеЗапросовИСМПКлиент.ПараметрыОткрытияПроверкиКодовМаркирови();
		ПараметрыОткрытияПроверкиКМ.Штрихкоды    = Форма.Штрихкод;
		ПараметрыОткрытияПроверкиКМ.Организация  = Форма.Организация;
		ПараметрыОткрытияПроверкиКМ.ВидПродукции = Форма.ВидПродукции;
		
		ЛогированиеЗапросовИСМПКлиент.ОткрытьРабочееМестоПроверкиКодовМаркировки(ПараметрыОткрытияПроверкиКМ, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЛогЗапросов" Тогда
		
		ЛогированиеЗапросовИСМПКлиент.ОткрытьПросмотрЛогаЗапросов(Форма.УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВключитьЛогированиеЗапросов" Тогда
		
		ЛогированиеЗапросовИСМПКлиент.ВключитьЛогированиеЗапросов(Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПанельАдминистрирования" Тогда
		
		ЛогированиеЗапросовИСМПКлиент.ОткрытьПанельАдминистрирования(Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьКонтрольВладельцев" Тогда
		
		ВладелецФормы = Форма.ВладелецФормы;
		
		Если ВладелецФормы <> Неопределено Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборПродукцииИСМП")
				Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
				
				Оповестить("ОтключениеКонтроляВладельцев", ВладелецФормы.УникальныйИдентификатор);
				Форма.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьКонтрольСтатусов" Тогда
		
		ВладелецФормы = Форма.ВладелецФормы;
		
		Если ВладелецФормы <> Неопределено Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборПродукцииИСМП")
				Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
				
				Оповестить("ОтключениеКонтроляСтатусов", ВладелецФормы.УникальныйИдентификатор);
				Форма.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПроверкиПоВидуПродукции" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ПараметрыПроверки                      = Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ПараметрыПроверки;
		ПараметрыПроверки.ОткрытьФормуПроверки = Истина;
		ПараметрыПроверки.ВидПродукции         = Форма.ВидПродукции;
		ПараметрыПроверки.Результат.ЗакрытьВспомогательнуюФорму = Истина;
		Форма.Закрыть(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКодовМаркировкиСредствамиКТТ

Процедура ОповещениеОЗакрытииФормыОшибки(РезультатЗарктытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрыПроверки     = ДополнительныеПараметры.ПараметрыПроверки;
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	СсылкаНаОбъект        = ПараметрыСканирования.СсылкаНаОбъект;
	
	ШтрихкодированиеИСМПВызовСервера.СохранитьРезультатПроверкиСредствамиККТ(
		ПараметрыПроверки.Результат,
		СсылкаНаОбъект);
	
	Если ПараметрыПроверки <> Неопределено Тогда
		
		Если ПараметрыПроверки.ЭтоСканирование Тогда
			
			Если РезультатЗарктытияФормы <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			КонецЕсли;
			
		ИначеЕсли ПараметрыПроверки.Результат.ВыполнитьФискализацию
			И РезультатЗарктытияФормы <> Неопределено Тогда
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
		ИначеЕсли ПараметрыПроверки.ОткрытьФормуПроверки Тогда
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
			ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(
				ПараметрыПроверки.ФормаОсновногоОбъекта,
				ПараметрыПроверки.ВидПродукции,
				ПараметрыПроверки.ФормаОсновногоОбъекта.ПараметрыУказанияСерий);
		
		Иначе
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаКодаМаркировкиСредствамиККТПоДаннымШтрихкода(ДополнительныеПараметры, ФормаВладелец, ОписаниеОповещения, ИсходныйРезультатВыбора = Неопределено) Экспорт
	
	ПараметрыСканирования       = ДополнительныеПараметры.ПараметрыСканирования;
	РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
	
	Если ИсходныйРезультатВыбора <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции)
			И ЗначениеЗаполнено(ИсходныйРезультатВыбора.ДанныеВыбора.Номенклатура) Тогда
			ШтрихкодированиеИСМПВызовСервера.ДополнитьДанныеШтрихкодаПоРезультатамУточненияДляПроверкиККТ(
				РезультатОбработкиШтрихкода.ДанныеШтрихкода,
				ИсходныйРезультатВыбора.ДанныеВыбора,
				ПараметрыСканирования);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		ЭлементыПроверки = РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ;
		
	Иначе
		
		ЭлементыПроверки = Новый Массив;
		
		ЭлементПроверки = ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода(
			РезультатОбработкиШтрихкода.ДанныеШтрихкода);
		ЭлементыПроверки.Добавить(ЭлементПроверки);
		
	КонецЕсли;
	
	ПараметрыОповещенияЗавершения = Новый Структура;
	ПараметрыОповещенияЗавершения.Вставить("УточнениеДанныхЗавершение",   ОписаниеОповещения);
	ПараметрыОповещенияЗавершения.Вставить("ПараметрыСканирования",       ПараметрыСканирования);
	ПараметрыОповещенияЗавершения.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыОповещенияЗавершения.Вставить("ИсходныйРезультатВыбора",     ИсходныйРезультатВыбора);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(
		"ПроверкаКодовМаркировкиСредствамиККТЗавершение",
		ЭтотОбъект,
		ПараметрыОповещенияЗавершения);
	
	ПараметрыПроверки = ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
	ПараметрыПроверки.ОповещениеОЗавершении = ОповещениеЗавершения;
	ПараметрыПроверки.ДанныеДляПроверки     = ЭлементыПроверки;
	ПараметрыПроверки.ПараметрыСканирования = ПараметрыСканирования;
	ПараметрыПроверки.ФормаОсновногоОбъекта = ФормаВладелец;
	ПараметрыПроверки.ЭтоСканирование       = Истина;
	
	ПараметрыПроверки.ЗаголовокКнопкиИгнорировать = НСтр("ru = 'Добавить товар'");
	
	НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверкаКодовМаркировкиСредствамиККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ       = Ложь;
	ДополнительныеПараметры.РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ = Ложь;
	ДополнительныеПараметры.РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена = Истина;
	
	Если ДополнительныеПараметры.ИсходныйРезультатВыбора = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.УточнениеДанныхЗавершение, Результат);
	
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.УточнениеДанныхЗавершение, ДополнительныеПараметры.ИсходныйРезультатВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ФормаВспомогательная = Неопределено Тогда
		Возврат ПараметрыПроверки.ФормаОсновногоОбъекта;
	Иначе
		Возврат ПараметрыПроверки.ФормаВспомогательная;
	КонецЕсли;
	
КонецФункции

Функция РежимПроверкиПриСканировании() Экспорт

	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	Возврат (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПриСканировании);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаКодовМаркировкиСредствамиКТТ

Процедура ЗакрытиеФормыОжиданияПроверкиЗавершение(РезультатЗакрытия, ПараметрыПроверки) Экспорт
	
	Возврат;
	
КонецПроцедуры

Функция ПланируемыйСтатусТовара(ПараметрыСканирования)
	
	ВозвращаемоеЗначение = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ПустаяСсылка");
	
	Если ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа")
		Или ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован");
		
	ИначеЕсли ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации")
		Или ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПриемкаПродажа") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДанныеДляПроверкиСредствамиККТСодержатОшибки(ПараметрыПроверки)
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	
	Для Каждого СтрокаПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		СтрокаРезультат = ПараметрыПроверки.Результат.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
		
		Если Не ЗначениеЗаполнено(СтрокаПроверки.ПолныйКодМаркировки) Тогда
			
			Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
				И СтрокаПроверки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
				И СтрокаПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			
				СоставКодаМаркировки   = СтрокаПроверки.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;
				КодВключаетМРЦ         = Ложь;
				
				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетМРЦ") Тогда
						КодВключаетМРЦ = СоставКодаМаркировки.ВключаетМРЦ;
					КонецЕсли;
					Если СоставКодаМаркировки.Свойство("КодВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.КодВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;
				
				Если Не (КодВключаетКриптоХвост Или КодВключаетМРЦ ) Тогда
					СтрокаРезультат.ТекстОшибки = НСтр("ru = 'Требуется полный код маркировки (включая МРЦ)'");
					СтрокаРезультат.ТребуетсяПолныйКодМаркировки = Истина;
					СтрокаРезультат.ПредставлениеВЧеке           = ШтрихкодированиеИСМПКлиентСервер.ПредставлениеКодаМаркировкиВЧеке().Отсутствует;
					ПараметрыПроверки.Результат.ЕстьОшибки       = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПроверки.Результат.ЕстьОшибки Тогда
	
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ТекстОшибки      = ПараметрыПроверки.Результат.ТекстОшибки;
		ПараметрыОткрытияФормы.Организация      = ПараметрыСканирования.Организация;
		ПараметрыОткрытияФормы.ИмяФормыИсточник = ПараметрыПроверки.ФормаОсновногоОбъекта.ИмяФормы;
		ПараметрыОткрытияФормы.СсылкаНаОбъект   = ПараметрыСканирования.СсылкаНаОбъект;
		
		ПараметрыОписания = ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
		ПараметрыОписания.ДанныеПроверкиНаККТ  = ПараметрыПроверки.Результат;
		ПараметрыОписания.ЗаголовокПродолжить  = ПараметрыПроверки.ЗаголовокКнопкиИгнорировать;
		ПараметрыОткрытияФормы.ПараметрыОшибки = ПараметрыОписания;
		
		ПараметрыОповещенияОбертки = Новый Структура;
		ПараметрыОповещенияОбертки.Вставить("ПараметрыПроверки", ПараметрыПроверки);
		
		ОповещениеОЗакрытииФормыОшибки = Новый ОписаниеОповещения(
			"ОповещениеОЗакрытииФормыОшибки",
			ЭтотОбъект,
			ПараметрыОповещенияОбертки);
		
		ОткрытьФормуНевозможностиДобавленияОтсканированного(
			ШтрихкодированиеИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),
			ПараметрыОткрытияФормы,
			ОповещениеОЗакрытииФормыОшибки);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция НовыйРезультатПроверкиЭлементаСредствамиККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	ВозвращаемоеЗначение.Вставить("КодМаркировкиПроверен", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатПроверки",     Ложь);
	
	ВозвращаемоеЗначение.Вставить("РезультаПроверкиОИСМ",  Ложь);
	ВозвращаемоеЗначение.Вставить("КодРезультатаПроверки", 0);
	ВозвращаемоеЗначение.Вставить("СтатусТовара",          Неопределено);
	ВозвращаемоеЗначение.Вставить("КодОбработкиЗапроса",   0);
	
	ВозвращаемоеЗначение.Вставить("ПодтвержденНаККТ",      Ложь);
	ВозвращаемоеЗначение.Вставить("ОтображатьОшибки",      Ложь);
	
	ВозвращаемоеЗначение.Вставить("ПропуститьОжиданиеОтветаОИСМ",    Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПолныйКодМаркировки",    Ложь);
	ВозвращаемоеЗначение.Вставить("ПредставлениеРезультатаПроверки", "");
	ВозвращаемоеЗначение.Вставить("ПредставлениеВЧеке",              "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Новые параметры проверки на ККТ.
// 
// Параметры:
//  ПараметрыНачалаПроверки - см. ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ.
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки на ККТ:
// * ФормаОсновногоОбъекта       - ФормаКлиентскогоПриложения - Форма объекта с доступной формой проверки.
// * ФормаВспомогательная        - ФормаКлиентскогоПриложения - Дополнительная форма, вспомогательная, например, форма предпросмотра чека.
// * ОповещениеОЗавершении       - ОписаниеОповещения         - Вызываемое оповещение при завершении проверки.
// * ПараметрыСканирования       - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ИдентификаторУстройства     - Неопределено, СправочникСсылка.ПодключаемоеОборудование - ККТ.
// * ТекущийИндекс               - Число - Текущий индекс проверяемого элемента
// * ЭлементыПроверки            - Массив из см. НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения.
// * ВыполняетсяЛогирование      - Булево - Записывать в лог запросы и ответы ККТ.
// * ЗаголовокКнопкиИгнорировать - Неопределено, Строка - Надпись на кнопки для игнорирования отрицательного результата проверки.
// * ЗапрещеноИгнорироватьОшибку - Булево - Возникла ошибка цепочки проверки. При такой ошибки фискализация завершиться не успешно.
// * ЭтоСканирование             - Булево - Проверка запущена при сканиронии.
// * ВидПродукции                - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * ОткрытьФормуПроверки        - Булево - Необходимость отображения формы проверки и подобра.
// * ПерерватьОперацию           - Булево - Признак прервания цепочки операции проверки.
// * ПропускатьПроверкуСредствамиККТ  - Булево - Пропускать проверку статуса средствами ККТ если выполнен контроль статусов.
Функция НовыеПараметрыПроверкиНаККТ(ПараметрыНачалаПроверки)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ФормаОсновногоОбъекта",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ФормаВспомогательная",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыСканирования",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторУстройства", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекущийИндекс",           0);
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки",        Новый Массив);
	ВозвращаемоеЗначение.Вставить("Результат",               НовыйРезультатПроверкиСредствамиККТ());
	ВозвращаемоеЗначение.Вставить(
		"ВыполняетсяЛогирование",
		ЛогированиеЗапросовИСМПКлиент.ВыполняетсяЛогированиеЗапросов());
	ВозвращаемоеЗначение.Вставить("ЗаголовокКнопкиИгнорировать", Неопределено);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ОткрытьФормуПроверки",        Ложь);
	ВозвращаемоеЗначение.Вставить("ПерерватьОперацию",           Ложь);
	ВозвращаемоеЗначение.Вставить("ЗапрещеноИгнорироватьОшибку", Ложь);
	
	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	ВозвращаемоеЗначение.Вставить(
		"ПропускатьПроверкуСредствамиККТ",
		НастройкиСканирования.ПропускатьПроверкуСредствамиККТ);
	
	ВозвращаемоеЗначение.ОповещениеОЗавершении       = ПараметрыНачалаПроверки.ОповещениеОЗавершении;
	ВозвращаемоеЗначение.ПараметрыСканирования       = ПараметрыНачалаПроверки.ПараметрыСканирования;
	ВозвращаемоеЗначение.ФормаОсновногоОбъекта       = ПараметрыНачалаПроверки.ФормаОсновногоОбъекта;
	ВозвращаемоеЗначение.ЗаголовокКнопкиИгнорировать = ПараметрыНачалаПроверки.ЗаголовокКнопкиИгнорировать;
	ВозвращаемоеЗначение.ФормаВспомогательная        = ПараметрыНачалаПроверки.ФормаВспомогательная;
	ВозвращаемоеЗначение.ЭтоСканирование             = ПараметрыНачалаПроверки.ЭтоСканирование;
	ВозвращаемоеЗначение.Результат.ЭтоСканирование   = ПараметрыНачалаПроверки.ЭтоСканирование;
	ВозвращаемоеЗначение.Результат.ЭтоДокументОплаты = ПараметрыНачалаПроверки.ЭтоДокументОплаты;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ВозвращаемоеЗначение.ФормаОсновногоОбъекта,
		"ПараметрыУказанияСерий") Тогда
		ВозвращаемоеЗначение.Результат.ОтсутствуетФормаПроверки = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНачалаПроверки.ДанныеДляПроверки) = Тип("Массив") Тогда
		ВозвращаемоеЗначение.ЭлементыПроверки = ПараметрыНачалаПроверки.ДанныеДляПроверки;
	Иначе
		ВозвращаемоеЗначение.ЭлементыПроверки.Добавить(ПараметрыНачалаПроверки.ДанныеДляПроверки);
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ЭлементыПроверки.Количество() Тогда
		ВозвращаемоеЗначение.ИдентификаторУстройства = ПараметрыНачалаПроверки.ПараметрыСканирования.ККТФФД12ИСМП;
	КонецЕсли;
	
	ВозвращаемоеЗначение.Результат.ЭлементыПроверки = ВозвращаемоеЗначение.ЭлементыПроверки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Конструктор структуры данных результата проверки средствами ККТ.
// 
// Возвращаемое значение:
//  Структура:
// * ЕстьОшибки            - Булево       - Признак наличия ошибок при проверке
// * ТекстОшибки           - Строка       - Текст общей ошибки, например, не подключено оборудование.
// * ДанныеПроверки        - Соответствие - результат проверки в соответсвии с исходными переданным данными для проверки.
// * ЭлементыПроверки      - Массив       - Элементы проверки.
// * ВыполнитьФискализацию - Булево       - Истина, если ошибок не было или пользователь согласен с ошибками проверки.
// * ЗакрытьВспомогательнуюФорму - Булево - Истина, если требуется закрыть не основную форму.
// * ДанныеВыбора          - Структура    - Служебное. Не предназначено для использования.
// * ЗапомнитьВыбор        - Булево       - Служебное. Не предназначено для использования.
// * ЭтоДокументОплаты     - Булево       - Взвести флаг, если вызов происходит по отдельному документу оплаты, без привязки к форме документа с кодами маркировки.
// * ЭтоСканирование       - Булево       - Внутренний. Признак вызова проверки при сканировании.
// * ЭтоДокументОплаты     - Булево       - Внутренний. Признак пробития чека объектом, отличным от объекта хранения марок.
// * ОтсутствуетФормаПроверки - Булево    - Внутренний. Истина, если к форме объекта не подключена форма проверки.
Функция НовыйРезультатПроверкиСредствамиККТ()
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",       Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	ВозвращаемоеЗначение.Вставить("ДанныеПроверки",   Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ЭлементыПроверки", Новый Массив());
	
	ВозвращаемоеЗначение.Вставить("ВыполнитьФискализацию",       Ложь);
	ВозвращаемоеЗначение.Вставить("ЗакрытьВспомогательнуюФорму", Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоСканирование",             Ложь);
	ВозвращаемоеЗначение.Вставить("ЭтоДокументОплаты",           Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствуетФормаПроверки",    Ложь);
	
	// для механизмов штрихкодирования
	ВозвращаемоеЗначение.Вставить("ДанныеВыбора",   Новый Структура);
	ВозвращаемоеЗначение.Вставить("ЗапомнитьВыбор", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
