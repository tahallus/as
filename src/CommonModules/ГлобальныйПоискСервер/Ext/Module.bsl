
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьПолнотекстовыйПоискКонтактов(СтрокаПоиска, РезультатыПоиска, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПолнотекстовыйПоискИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПоиска = "ВыполнитьПолнотекстовыйПоискКонтактов";
	
	НастройкаПоиска = ПодготовитьНастройкуПолнотекстовогоПоиска(СтрокаПоиска);
	
	НастройкаПоиска.ОбластьПоиска.Добавить(Метаданные.Справочники.Лиды);
	НастройкаПоиска.ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактыЛидов);
	НастройкаПоиска.ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛица);
	НастройкаПоиска.ОбластьПоиска.Добавить(Метаданные.Справочники.Контрагенты);
	
	ДополнитьНастройкиПоискаКонтактов(НастройкаПоиска);
	
	СписокПоиска = НовыйСписокПоиска(НастройкаПоиска);
	СписокПоиска.ПерваяЧасть();
	
	НайденныеКонтакты = РезультатыПоискаДляПостобработки(СписокПоиска);
	
	НайденныеКонтактыДополненные = НовыйРезультатыПоиска();
	ДобавитьСвязанныеКонтрагентыКонтактыВРезультатПоиска(СтрокаПоиска, НайденныеКонтакты, НайденныеКонтактыДополненные,
		ДополнительныеПараметры);
	ДобавитьНесвязанныеКонтактыВРезультатПоиска(СтрокаПоиска, НайденныеКонтакты, НайденныеКонтактыДополненные,
		ДополнительныеПараметры);
	ДобавитьЛидыВРезультатПоиска(СтрокаПоиска, НайденныеКонтакты, НайденныеКонтактыДополненные, ДополнительныеПараметры);
	
	Для каждого Результат Из НайденныеКонтактыДополненные Цикл
		ПерваяСтрока = ПредставлениеОбъектаСПрефиксомМетаданного(Результат);
		Если Результат.НайденоПолнотекстовымПоиском Тогда
			ВтораяСтрока = ГлобальныйПоискКлиентСервер.НайтиПодстрокуИВыделитьОформлением(Результат.Описание,
				СтрокаПоиска);
		Иначе
			ВтораяСтрока = Результат.Описание;
		КонецЕсли;
		Представление = ГлобальныйПоискКлиентСервер.ОписаниеРезультата(ПерваяСтрока, ВтораяСтрока);
		
		РезультатыПоиска.Добавить(
			Результат.Значение,
			Представление,
			КартинкаКонтакта(Результат.Значение));
		ДобавитьКонтактнуюИнформациюВРезультатПоиска(Результат.Значение, РезультатыПоиска);
	КонецЦикла;
	
	ЗаполнитьВидПоиска(РезультатыПоиска, ВидПоиска);
	
КонецПроцедуры

Процедура ВыполнитьПолнотекстовыйПоиск(СтрокаПоиска, РезультатыПоиска, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПолнотекстовыйПоискИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПоиска = "ВыполнитьПолнотекстовыйПоиск";
	
	ИменаМетаданныхИсключений = Новый Массив;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("МетаданныеИсключения") Тогда
		ИменаМетаданныхИсключений = ДополнительныеПараметры.МетаданныеИсключения;
	КонецЕсли;
	
	МетаданныеИсключения = Новый Массив;
	Для каждого ИмяОбъектаМетаданных Из ИменаМетаданныхИсключений Цикл
		МетаданныеИсключения.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных));
	КонецЦикла;
	
	НастройкаПоиска = ПодготовитьНастройкуПолнотекстовогоПоиска(СтрокаПоиска);
	НастройкаПоиска.ОбластьПоиска = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ВсеМетаданныеДляПолнотекстовогоПоиска(),
		МетаданныеИсключения);
	СписокПоиска = НовыйСписокПоиска(НастройкаПоиска);
	СписокПоиска.ПерваяЧасть();
	
	Для Индекс = 0 По СписокПоиска.Количество() - 1 Цикл
		НайденныйЭлемент = СписокПоиска.Получить(Индекс);
		
		ПерваяСтрока = ПредставлениеОбъектаСПрефиксомМетаданного(НайденныйЭлемент);
		ВтораяСтрока = ГлобальныйПоискКлиентСервер.ПодсказкаРезультата(НайденныйЭлемент.Описание);
		ВыделеннаяВтораяСтрока = ГлобальныйПоискКлиентСервер.НайтиПодстрокуИВыделитьОформлением(ВтораяСтрока, СтрокаПоиска);
		Если ВыделеннаяВтораяСтрока <> Неопределено Тогда
			ВтораяСтрока = ВыделеннаяВтораяСтрока;
		КонецЕсли;
		Представление = ГлобальныйПоискКлиентСервер.ОписаниеРезультата(ПерваяСтрока, ВтораяСтрока);
		
		РезультатыПоиска.Добавить(
			НайденныйЭлемент.Значение,
			Представление,
			БиблиотекаКартинок.ЛупаГлобальногоПоиска);
	КонецЦикла;
	
	ЗаполнитьВидПоиска(РезультатыПоиска, ВидПоиска);
	
КонецПроцедуры

// Обработчик плана глобального поиска "ВыполнитьКонвертациюСуммыВВалюте"
// 
// Параметры:
// 	СтрокаПоиска - Строка - строка, по которой выполняется поиск.
// 	РезультатыПоиска - РезультатГлобальногоПоиска - выходной параметр, содержит результаты поиска.
// 	ДополнительныеПараметры - Структура - дополнительные параметры.
Процедура ВыполнитьКонвертациюСуммыВВалюте(СтрокаПоиска, РезультатыПоиска, ДополнительныеПараметры) Экспорт
	ВидПоиска = "ВыполнитьКонвертациюСуммыВВалюте";
	
	ИсходнаяСумма = ДополнительныеПараметры.Сумма;
	ИсходнаяВалюта = ДополнительныеПараметры.Валюта;
	
	ДанныеВалют = ДанныеВалют();
	
	Для каждого НоваяВалюта Из ДанныеВалют Цикл
		Если ИсходнаяВалюта = НоваяВалюта.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаВВалюте = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИсходнаяСумма, ИсходнаяВалюта, НоваяВалюта.Ссылка,
			ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(НоваяВалюта.СимвольноеПредставление) Тогда
			ПредставлениеВалюты = НоваяВалюта.СимвольноеПредставление;
		Иначе
			ПредставлениеВалюты = НоваяВалюта.Наименование;
		КонецЕсли;
		
		Результат = СтрШаблон("%1 %2", СуммаВВалюте,  ПредставлениеВалюты);
		РезультатыПоиска.Добавить(СуммаВВалюте, Результат, БиблиотекаКартинок.Калькулятор);
	КонецЦикла;
	
	ЗаполнитьВидПоиска(РезультатыПоиска, ВидПоиска);
	
КонецПроцедуры

// Обработчик плана глобального поиска "ВыполнитьПоискКонтрагентовПоИНН"
// 
// Параметры:
// 	СтрокаПоиска - Строка - строка, по которой выполняется поиск.
// 	РезультатыПоиска - РезультатГлобальногоПоиска - выходной параметр, содержит результаты поиска.
// 	ДополнительныеПараметры - Структура - дополнительные параметры.
Процедура ВыполнитьПоискКонтрагентовПоИНН(СтрокаПоиска, РезультатыПоиска, ДополнительныеПараметры) Экспорт
	ВидПоиска = "ВыполнитьПоискКонтрагентовПоИНН";
	
	ИНН = ДополнительныеПараметры.ИНН;
	ЭтоЮрЛицо = ДополнительныеПараметры.ЭтоЮрЛицо;
	
	СписокПоиска = НовыйРезультатыПоиска();
	ВыполнитьПоискКонтрагентовПоИННВИнформационнойБазе(СтрокаПоиска, ИНН, СписокПоиска);
	
	Если СписокПоиска.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискКонтрагентовПоДаннымЕГРН(СтрокаПоиска, ИНН, ЭтоЮрЛицо, СписокПоиска);
	
	Для каждого Результат Из СписокПоиска Цикл
		ПерваяСтрока = ПредставлениеОбъектаСПрефиксомМетаданного(Результат);
		Если Результат.НайденоПолнотекстовымПоиском Тогда
			ВтораяСтрока = ГлобальныйПоискКлиентСервер.НайтиПодстрокуИВыделитьОформлением(Результат.Описание,
				СтрокаПоиска);
		Иначе
			ВтораяСтрока = Результат.Описание;
		КонецЕсли;
		Представление = ГлобальныйПоискКлиентСервер.ОписаниеРезультата(ПерваяСтрока, ВтораяСтрока);
		
		Если Результат.Картинка <> Неопределено Тогда
			Картинка = Результат.Картинка;
		Иначе
			Картинка = КартинкаКонтакта(Результат.Значение);
		КонецЕсли;
		
		РезультатыПоиска.Добавить(
			Результат.Значение,
			Представление,
			Картинка);
	КонецЦикла;
	
	ЗаполнитьВидПоиска(РезультатыПоиска, ВидПоиска);
	
КонецПроцедуры

// Обработчик плана глобального поиска "ВыполнитьПоискПоШтрихкодуПечатнойФормы"
// 
// Параметры:
// 	СтрокаПоиска - Строка - строка, по которой выполняется поиск.
// 	РезультатыПоиска - РезультатГлобальногоПоиска - выходной параметр, содержит результаты поиска.
// 	ДополнительныеПараметры - Структура - дополнительные параметры.
Процедура ВыполнитьПоискПоШтрихкодуПечатнойФормы(СтрокаПоиска, РезультатыПоиска, ДополнительныеПараметры) Экспорт
	ВидПоиска = "ВыполнитьПоискПоШтрихкодуПечатнойФормы";
	
	ВсеПоддерживаемыеМенеджеры = ШтрихкодированиеПечатныхФормКлиентСервер.ВсеПоддерживаемыеМенеджеры();
	
	НайденныеСсылки = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(
		ДополнительныеПараметры.ДанныеШтрихкода, ВсеПоддерживаемыеМенеджеры);
	
	Если Не ЗначениеЗаполнено(НайденныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Результат Из НайденныеСсылки Цикл
		РезультатыПоиска.Добавить(Результат, Строка(Результат), КартинкаОбъекта(Результат), ВидПоиска);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолнотекстовыйПоиск

Функция ПолнотекстовыйПоискИспользуется()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");
	
КонецФункции

Функция НовыйНастройкаПолнотекстовогоПоиска()
	
	Настройка = Новый Структура;
	Настройка.Вставить("СтрокаПоискаИсходная", "");
	Настройка.Вставить("СтрокаПоискаОбработанная", "");
	Настройка.Вставить("СтрокаПоискаНечеткийПоиск", "");
	Настройка.Вставить("СтрокаПоискаТочныйПоиск", "");
	Настройка.Вставить("СтрокаПоиска", "");
	Настройка.Вставить("ПорогНечеткости", 0);
	Настройка.Вставить("ОбластьПоиска", Новый Массив);
	Настройка.Вставить("РазмерПорции", 30);
	Возврат Настройка;
	
КонецФункции

Функция НовыйСписокПоиска(НастройкаПоиска)
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(НастройкаПоиска.СтрокаПоиска, НастройкаПоиска.РазмерПорции);
	Если НастройкаПоиска.ОбластьПоиска.Количество() <> 0 Тогда
		СписокПоиска.ОбластьПоиска = НастройкаПоиска.ОбластьПоиска;
	КонецЕсли;
	СписокПоиска.ПорогНечеткости = НастройкаПоиска.ПорогНечеткости;
	
	Возврат СписокПоиска;
	
КонецФункции

Функция ПодготовитьНастройкуПолнотекстовогоПоиска(Знач ИсходнаяСтрокаПоиска)
	
	НастройкаПоиска = НовыйНастройкаПолнотекстовогоПоиска();
	НастройкаПоиска.СтрокаПоискаИсходная = ИсходнаяСтрокаПоиска;
	НастройкаПоиска.СтрокаПоискаОбработанная = ИсходнаяСтрокаПоиска;
	
	СимволКавычка = """";
	
	СтрокаЗаключенаВКавычки = СтрНачинаетсяС(ИсходнаяСтрокаПоиска, СимволКавычка)
		И СтрЗаканчиваетсяНа(ИсходнаяСтрокаПоиска, СимволКавычка);
	
	Если СтрокаЗаключенаВКавычки Тогда
		НастройкаПоиска.СтрокаПоиска = НастройкаПоиска.СтрокаПоискаОбработанная;
		НастройкаПоиска.СтрокаПоискаТочныйПоиск = НастройкаПоиска.СтрокаПоискаОбработанная;
		Возврат НастройкаПоиска;
	КонецЕсли;
	
	НастройкаПоиска.СтрокаПоискаОбработанная = УдалитьЛишниеСимволы(НастройкаПоиска.СтрокаПоискаОбработанная);
	НастройкаПоиска.СтрокаПоискаОбработанная = СокрЛП(НастройкаПоиска.СтрокаПоискаОбработанная);
	НастройкаПоиска.СтрокаПоискаОбработанная = УдалитьОператорыПолнотекстовогоПоиска(
		НастройкаПоиска.СтрокаПоискаОбработанная);
	НастройкаПоиска.СтрокаПоискаНечеткийПоиск = ДобавитьОператорыГрупповогоПолнотекстовогоПоиска(
		НастройкаПоиска.СтрокаПоискаОбработанная);
	НастройкаПоиска.СтрокаПоискаТочныйПоиск = СимволКавычка + НастройкаПоиска.СтрокаПоискаОбработанная + СимволКавычка;
	НастройкаПоиска.СтрокаПоиска = НастройкаПоиска.СтрокаПоискаНечеткийПоиск;
	
	Возврат НастройкаПоиска;
	
КонецФункции

Процедура ДополнитьНастройкиПоискаКонтактов(НастройкаПоиска)
	
	Если ЭтаСтрокаПоискаПохожаНаEmail(НастройкаПоиска.СтрокаПоискаОбработанная) Тогда
		// Точный поиск нужен если введен email полностью. Например "xx@yy.zz".
		НастройкаПоиска.СтрокаПоиска = НастройкаПоиска.СтрокаПоискаТочныйПоиск;
	ИначеЕсли ЭтаСтрокаПоискаПохожаНаНомерТелефона(НастройкаПоиска.СтрокаПоискаОбработанная) Тогда
		НомерТелефона = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(
			НастройкаПоиска.СтрокаПоискаОбработанная);
		
		ВариантыНомеровТелефоновДляПоиска = Новый Массив;
		ВариантыНомеровТелефоновДляПоиска.Добавить(НастройкаПоиска.СтрокаПоискаОбработанная);
		ВариантыНомеровТелефоновДляПоиска.Добавить(НомерТелефона);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВариантыНомеровТелефоновДляПоиска,
			АльтернативныеКодыИскомогоНомераТелефона(НомерТелефона));
		ВариантыНомеровТелефоновДляПоиска = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			ВариантыНомеровТелефоновДляПоиска);
		
		СтрокиПоиска = Новый Массив;
		Для каждого Строка Из ВариантыНомеровТелефоновДляПоиска Цикл
			СтрокиПоиска.Добавить(ДобавитьОператорыГрупповогоПолнотекстовогоПоиска(Строка));
		КонецЦикла;
		НастройкаПоиска.СтрокаПоиска = СтрСоединить(СтрокиПоиска, " ИЛИ ");
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтаСтрокаПоискаПохожаНаEmail(СтрокаПоиска)
	
	Возврат СтрНайти(СтрокаПоиска, " ") = 0
		И СтрЧислоВхождений(СтрокаПоиска, "@") = 1
		И СтрНайти(СтрокаПоиска, ".",, СтрНайти(СтрокаПоиска, "@")) <> 0
		И СтрДлина(СтрокаПоиска) <> 2
		И НЕ СтрЗаканчиваетсяНа(СтрокаПоиска, ".");
	
КонецФункции

Функция ЭтаСтрокаПоискаПохожаНаНомерТелефона(СтрокаПоиска)
	
	ДопустимыеУникальныеСимволы = Новый Массив;
	ДопустимыеУникальныеСимволы.Добавить("+");
	ДопустимыеУникальныеСимволы.Добавить("(");
	ДопустимыеУникальныеСимволы.Добавить(")");
	
	Для каждого Символ Из ДопустимыеУникальныеСимволы Цикл
		Если СтрЧислоВхождений(СтрокаПоиска, Символ) > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ПоложениеСимволаПлюс = СтрНайти(СтрокаПоиска, "+");
	Если ПоложениеСимволаПлюс <> 0 И ПоложениеСимволаПлюс <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопустимыеСимволы = Новый Массив;
	ДопустимыеСимволы.Добавить("+");
	ДопустимыеСимволы.Добавить("(");
	ДопустимыеСимволы.Добавить(")");
	ДопустимыеСимволы.Добавить(" ");
	ДопустимыеСимволы.Добавить("-");
	
	СтрокаСодержитТолькоДопустимыеСимволы = ГлобальныйПоискКлиентСервер.СтрокаСодержитТолькоДопустимыеСимволы(
		СтрокаПоиска, ДопустимыеСимволы, Ложь, Ложь, Истина);
	
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОставшиесяЦифры = СтрокаПоиска;
	Для каждого Символ Из ДопустимыеСимволы Цикл
		ОставшиесяЦифры = СтрЗаменить(ОставшиесяЦифры, Символ, "");
	КонецЦикла;
	
	ПредполагаемаяМинимальнаяДлинаНомера = 5;
	Если СтрДлина(ОставшиесяЦифры) < ПредполагаемаяМинимальнаяДлинаНомера Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьЛишниеСимволы(Знач СтрокаПоиска)
	
	ЗаменяемыеСимволы = Новый Массив;
	ЗаменяемыеСимволы.Добавить(Символы.ВК);
	ЗаменяемыеСимволы.Добавить(Символы.ВТаб);
	ЗаменяемыеСимволы.Добавить(Символы.НПП);
	ЗаменяемыеСимволы.Добавить(Символы.ПС);
	ЗаменяемыеСимволы.Добавить(Символы.ПФ);
	ЗаменяемыеСимволы.Добавить(Символы.Таб);
	
	Для каждого Символ Из ЗаменяемыеСимволы Цикл
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, Символ, " ");
	КонецЦикла;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ДобавитьОператорыГрупповогоПолнотекстовогоПоиска(Знач СтрокаПоиска)
	
	Если СтрНайти(СтрокаПоиска, " ") = 0 Тогда
		Возврат СтрокаПоиска + "*";
	КонецЕсли;
	
	ПодстрокиСтроки = СтрРазделить(СтрокаПоиска, " ", Ложь);
	Для каждого Подстрока Из ПодстрокиСтроки Цикл
		Подстрока = Подстрока + "*";
	КонецЦикла;
	
	Возврат СтрСоединить(ПодстрокиСтроки, " ");
	
КонецФункции

Функция УдалитьОператорыПолнотекстовогоПоиска(Знач СтрокаПоиска)
	
	ОператорыПолнотекстовогоПоиска = Новый Массив;
	ОператорыПолнотекстовогоПоиска.Добавить(" И ");
	ОператорыПолнотекстовогоПоиска.Добавить(" AND ");
	ОператорыПолнотекстовогоПоиска.Добавить(" ИЛИ ");
	ОператорыПолнотекстовогоПоиска.Добавить(" OR ");
	ОператорыПолнотекстовогоПоиска.Добавить(" НЕ ");
	ОператорыПолнотекстовогоПоиска.Добавить(" NOT ");
	ОператорыПолнотекстовогоПоиска.Добавить("*");
	ОператорыПолнотекстовогоПоиска.Добавить("~");
	ОператорыПолнотекстовогоПоиска.Добавить("!");
	ОператорыПолнотекстовогоПоиска.Добавить("&");
	ОператорыПолнотекстовогоПоиска.Добавить("|");
	
	ИзменяемыеОператорыПолнотекстовогоПоиска = Новый Массив;
	ИзменяемыеОператорыПолнотекстовогоПоиска.Добавить("РЯДОМ");
	ИзменяемыеОператорыПолнотекстовогоПоиска.Добавить("NEAR");
	
	Для каждого Оператор Из ОператорыПолнотекстовогоПоиска Цикл
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, Оператор, " ");
	КонецЦикла;
	
	ПодстрокиСтроки = СтрРазделить(СтрокаПоиска, " ", Ложь);
	ПодстрокиСтрокиРезультат = Новый Массив;
	
	Для каждого Подстрока Из ПодстрокиСтроки Цикл
		ЭтоОператор = Ложь;
		Для каждого Оператор Из ИзменяемыеОператорыПолнотекстовогоПоиска Цикл
			ЭтоОператор = СтрНачинаетсяС(Подстрока, Оператор);
			Если ЭтоОператор Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЭтоОператор Тогда
			ПодстрокиСтрокиРезультат.Добавить(Подстрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ПодстрокиСтрокиРезультат, " ");
	
КонецФункции

Функция НовыйРезультатыПоиска()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Метаданные");
	Результат.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	Результат.Колонки.Добавить("НайденоПолнотекстовымПоиском", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыПоискаДляПостобработки(СписокПоиска)
	
	Результат = НовыйРезультатыПоиска();
	
	Для Индекс = 0 По СписокПоиска.Количество() - 1 Цикл
		НайденныйЭлемент = СписокПоиска.Получить(Индекс);
		СтрокаРезультата = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, НайденныйЭлемент);
		СтрокаРезультата.НайденоПолнотекстовымПоиском = Истина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОбъектаСПрефиксомМетаданного(ЭлементПоиска)
	
	Если ЭлементПоиска.Метаданные = Неопределено Тогда
		Возврат ЭлементПоиска.Представление;
	КонецЕсли;
	
	ПредставлениеТипаОбъекта = ПредставлениеТипаОбъекта(ЭлементПоиска.Метаданные);
	Если ПредставлениеТипаОбъекта <> "" Тогда
		ПредставлениеТипаОбъекта = ПредставлениеТипаОбъекта + ": ";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка(ЭлементПоиска.Представление)) Тогда
		ПредставлениеОбъекта = ЭлементПоиска.Представление;
	Иначе
		ПредставлениеОбъекта = Строка(ЭлементПоиска.Значение);
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(
		ПредставлениеТипаОбъекта,
		ПредставлениеОбъекта);
	
КонецФункции

#КонецОбласти

#Область Сценарий_ВыполнитьПолнотекстовыйПоискКонтактов

Функция СобытияПоКонтакту(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Событие.Ссылка КАК Ссылка,
	|	Событие.Дата КАК Дата,
	|	Событие.Тема КАК Тема,
	|	Событие.ТемаИСодержание КАК ТемаИСодержание,
	|	Событие.ТипСобытия КАК ТипСобытия,
	|	Событие.СписокУчастников КАК СписокУчастников
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Участники.Контакт = &Контакт
	|	И Событие.НачалоСобытия < &ТекущаяДатаСеанса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Событие.НачалоСобытия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка КАК Ссылка,
	|	Событие.Дата КАК Дата,
	|	Событие.Тема КАК Тема,
	|	Событие.ТемаИСодержание КАК ТемаИСодержание,
	|	Событие.ТипСобытия КАК ТипСобытия,
	|	Событие.СписокУчастников КАК СписокУчастников
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Участники.Контакт = &Контакт
	|	И Событие.НачалоСобытия >= &ТекущаяДатаСеанса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Событие.НачалоСобытия УБЫВ";
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	СобытияПоКонтакту = Новый Структура;
	СобытияПоКонтакту.Вставить("ПоследниеСобытия", Новый Массив);
	СобытияПоКонтакту.Вставить("ПредстоящиеСобытия", Новый Массив);
	
	Результат = Запрос.ВыполнитьПакет();
	ПоследниеСобытия = Результат[0].Выбрать();
	ПредстоящиеСобытия = Результат[1].Выбрать();
	
	Пока ПоследниеСобытия.Следующий() Цикл
		ДанныеСобытия = Новый Структура("Ссылка,ТемаИСодержание,СписокУчастников");
		ЗаполнитьЗначенияСвойств(ДанныеСобытия, ПоследниеСобытия);
		СобытияПоКонтакту.ПоследниеСобытия.Добавить(ДанныеСобытия);
	КонецЦикла;
	Пока ПредстоящиеСобытия.Следующий() Цикл
		ДанныеСобытия = Новый Структура("Ссылка,ТемаИСодержание,СписокУчастников");
		ЗаполнитьЗначенияСвойств(ДанныеСобытия, ПредстоящиеСобытия);
		СобытияПоКонтакту.ПредстоящиеСобытия.Добавить(ДанныеСобытия);
	КонецЦикла;
	
	Возврат СобытияПоКонтакту;
	
КонецФункции

Функция ЗаказыПокупателейПоКонтакту(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.ВариантЗавершения КАК ВариантЗавершения
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Контрагент = &Контакт
	|	И ЗаказПокупателя.ДатаОтгрузки < &ТекущаяДатаСеанса
	|	И ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя.ДатаОтгрузки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.ВариантЗавершения КАК ВариантЗавершения
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Контрагент = &Контакт
	|	И ЗаказПокупателя.ДатаОтгрузки >= &ТекущаяДатаСеанса
	|	И ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|	И ЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)";
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	ЗаказыПокупателей = Новый Структура;
	ЗаказыПокупателей.Вставить("ПоследниеЗаказы", Новый Массив);
	ЗаказыПокупателей.Вставить("ПредстоящиеЗаказы", Новый Массив);
	
	Результат = Запрос.ВыполнитьПакет();
	ПоследниеЗаказы = Результат[0].Выбрать();
	ПредстоящиеЗаказы = Результат[1].Выбрать();
	
	Пока ПоследниеЗаказы.Следующий() Цикл
		ДанныеЗаказа = Новый Структура("Ссылка,СостояниеЗаказа,ВариантЗавершения");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПоследниеЗаказы);
		ЗаказыПокупателей.ПоследниеЗаказы.Добавить(ДанныеЗаказа);
	КонецЦикла;
	Пока ПредстоящиеЗаказы.Следующий() Цикл
		ДанныеЗаказа = Новый Структура("Ссылка,СостояниеЗаказа,ВариантЗавершения");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПредстоящиеЗаказы);
		ЗаказыПокупателей.ПредстоящиеЗаказы.Добавить(ДанныеЗаказа);
	КонецЦикла;
	
	Возврат ЗаказыПокупателей;
	
КонецФункции

Функция ЗаказыПоставщикуПоКонтакту(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПоставщику.ВариантЗавершения КАК ВариантЗавершения
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Контрагент = &Контакт
	|	И ЗаказПоставщику.ДатаПоступления < &ТекущаяДатаСеанса
	|	И ЗаказПоставщику.Проведен
	|	И ЗаказПоставщику.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.ДатаПоступления УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПоставщику.ВариантЗавершения КАК ВариантЗавершения
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Контрагент = &Контакт
	|	И ЗаказПоставщику.ДатаПоступления >= &ТекущаяДатаСеанса
	|	И ЗаказПоставщику.Проведен
	|	И ЗаказПоставщику.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)";
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	ЗаказыПоставщику = Новый Структура;
	ЗаказыПоставщику.Вставить("ПоследниеЗаказы", Новый Массив);
	ЗаказыПоставщику.Вставить("ПредстоящиеЗаказы", Новый Массив);
	
	Результат = Запрос.ВыполнитьПакет();
	ПоследниеЗаказы = Результат[0].Выбрать();
	ПредстоящиеЗаказы = Результат[1].Выбрать();
	
	Пока ПоследниеЗаказы.Следующий() Цикл
		ДанныеЗаказа = Новый Структура("Ссылка,СостояниеЗаказа,ВариантЗавершения");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПоследниеЗаказы);
		ЗаказыПоставщику.ПоследниеЗаказы.Добавить(ДанныеЗаказа);
	КонецЦикла;
	Пока ПредстоящиеЗаказы.Следующий() Цикл
		ДанныеЗаказа = Новый Структура("Ссылка,СостояниеЗаказа,ВариантЗавершения");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПредстоящиеЗаказы);
		ЗаказыПоставщику.ПредстоящиеЗаказы.Добавить(ДанныеЗаказа);
	КонецЦикла;
	
	Возврат ЗаказыПоставщику;
	
КонецФункции

Функция НайтиСобытияПоКонтакту(Контакт)
	
	РезультатПоиска = НовыйРезультатыПоиска();
	
	СобытияПоКонтакту = СобытияПоКонтакту(Контакт);
	
	Для каждого Событие Из СобытияПоКонтакту.ПоследниеСобытия Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Значение = Событие.Ссылка;
		НоваяСтрока.Метаданные = Событие.Ссылка.Метаданные();
		НоваяСтрока.Представление = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(Строка(Событие.Ссылка), НСтр("ru='последнее'"));
		НоваяСтрока.Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(
			Новый Структура(
				"Тема,Участники",
				Событие.ТемаИСодержание,
				Событие.СписокУчастников));
	КонецЦикла;
	
	Для каждого Событие Из СобытияПоКонтакту.ПредстоящиеСобытия Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Значение = Событие.Ссылка;
		НоваяСтрока.Метаданные = Событие.Ссылка.Метаданные();
		НоваяСтрока.Представление = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(Строка(Событие.Ссылка), НСтр("ru='запланировано'"));
		НоваяСтрока.Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(
			Новый Структура(
				"Тема,Участники",
				Событие.ТемаИСодержание,
				Событие.СписокУчастников));
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция НайтиДокументыПоКонтакту(Контакт)
	
	РезультатПоиска = НовыйРезультатыПоиска();
	
	Если ТипЗнч(Контакт) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контакт, "Покупатель,Поставщик");
	
	Если ДанныеКонтрагента.Покупатель Тогда
		Заказы = ЗаказыПокупателейПоКонтакту(Контакт);
	ИначеЕсли ДанныеКонтрагента.Поставщик Тогда
		Заказы = ЗаказыПоставщикуПоКонтакту(Контакт);
	КонецЕсли;
	
	Для каждого ЗаказПокупателя Из Заказы.ПоследниеЗаказы Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Значение = ЗаказПокупателя.Ссылка;
		НоваяСтрока.Метаданные = ЗаказПокупателя.Ссылка.Метаданные();
		НоваяСтрока.Представление = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(Строка(ЗаказПокупателя.Ссылка), НСтр("ru='последний'"));
		НоваяСтрока.Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(
			Новый Структура("Состояние", СтрШаблон("%1 (%2)", ЗаказПокупателя.СостояниеЗаказа, ЗаказПокупателя.ВариантЗавершения)));
	КонецЦикла;
	
	Для каждого ЗаказПокупателя Из Заказы.ПредстоящиеЗаказы Цикл
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Значение = ЗаказПокупателя.Ссылка;
		НоваяСтрока.Метаданные = ЗаказПокупателя.Ссылка.Метаданные();
		НоваяСтрока.Представление = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(Строка(ЗаказПокупателя.Ссылка), НСтр("ru='не завершен'"));
		НоваяСтрока.Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(
			Новый Структура("Состояние", ЗаказПокупателя.СостояниеЗаказа));
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

Процедура ДобавитьКонтактнуюИнформациюВРезультатПоиска(Контакт, РезультатыПоиска)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ВладельцыКИ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контакт)
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ВладельцыКИ = Новый Массив;
		КонтактыЛида = Справочники.КонтактыЛидов.Выбрать(, Контакт);
		Пока КонтактыЛида.Следующий() Цикл
			ВладельцыКИ.Добавить(КонтактыЛида.Ссылка);
		КонецЦикла;
		ВладельцыКИ.Добавить(Контакт);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыКонтактнойИнформации = Новый Массив;
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ВладельцыКИ,
		ТипыКонтактнойИнформации,
		,
		ТекущаяДатаСеанса());
	
	ДобавитьКонтактнуюИнформациюПоТипуВРезультатПоиска(
		КонтактнаяИнформацияОбъекта,
		Перечисления.ТипыКонтактнойИнформации.Телефон,
		РезультатыПоиска);
	ДобавитьКонтактнуюИнформациюПоТипуВРезультатПоиска(
		КонтактнаяИнформацияОбъекта,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		РезультатыПоиска);
	
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформациюПоТипуВРезультатПоиска(КонтактнаяИнформацияОбъекта, ТипКонтактнойИнформации, РезультатыПоиска)
	
	Для каждого ДанныеКИ Из КонтактнаяИнформацияОбъекта Цикл
		Если ДанныеКИ.Тип <> ТипКонтактнойИнформации Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеКИ = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ДанныеКИ.Значение);
		Если НЕ ЗначениеЗаполнено(ПредставлениеКИ) Тогда
			Продолжить;
		КонецЕсли;
		КомментарийКИ = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
		
		Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Постфикс = НСтр("ru='позвонить'");
		ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Постфикс = НСтр("ru='написать'");
		Иначе
			Постфикс = Неопределено;
		КонецЕсли;
		
		Если Постфикс <> Неопределено Тогда
			ПредставлениеРезультата = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(ПредставлениеКИ, Постфикс);
		Иначе
			ПредставлениеРезультата = ПредставлениеКИ;
		КонецЕсли;
		
		ПодсказкаРезультата = Новый Массив;
		ПодсказкаРезультата.Добавить(Строка(ДанныеКИ.Вид));
		Если ЗначениеЗаполнено(КомментарийКИ) Тогда
			ПодсказкаРезультата.Добавить(КомментарийКИ);
		КонецЕсли;
		ПодсказкаРезультата = СтрСоединить(ПодсказкаРезультата, Символы.ПС);
		
		Значение = Новый Структура;
		Значение.Вставить("Тип", ТипКонтактнойИнформации);
		Значение.Вставить("Представление", ПредставлениеКИ);
		Значение.Вставить("Владелец", ДанныеКИ.Объект);
		
		РезультатыПоиска.Добавить(
			Новый Структура("КонтактнаяИнформация", Значение),
			ГлобальныйПоискКлиентСервер.ОписаниеРезультата(
				ПредставлениеРезультата,
				ПодсказкаРезультата));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСвязанныеКонтрагентыКонтактыВРезультатПоиска(СтрокаПоиска, ИсходныйРезультатПоиска, РезультатПоиска,
	ДополнительныеПараметры)

	Для Каждого СтрокаКонтрагент Из ИсходныйРезультатПоиска Цикл
		Если ТипЗнч(СтрокаКонтрагент.Значение) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = РезультатПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагент);

		ДобавленныеКонтакты = Новый Массив;

		СвязанныеКонтакты = Справочники.Контрагенты.СвязанныеКонтакты(СтрокаКонтрагент.Значение);
		Для Каждого Контакт Из СвязанныеКонтакты Цикл
			КонтактДобавлен = ДополнитьТаблицуСтрокамиПоОтбору(ИсходныйРезультатПоиска, РезультатПоиска,
				Новый Структура("Значение", Контакт));
			Если КонтактДобавлен Тогда
				ДобавленныеКонтакты.Добавить(Контакт);
			КонецЕсли;
		КонецЦикла;

		КонтекстПоКонтактам = НовыйРезультатыПоиска();

		ДобавленныеКонтакты.Вставить(0, СтрокаКонтрагент.Значение);
		Для Каждого Контакт Из ДобавленныеКонтакты Цикл
			ДополнитьТаблицуУникальнымиСтроками(НайтиСобытияПоКонтакту(Контакт), КонтекстПоКонтактам, "Значение");
		КонецЦикла;
		Для Каждого Контакт Из ДобавленныеКонтакты Цикл
			ДополнитьТаблицуУникальнымиСтроками(НайтиДокументыПоКонтакту(Контакт), КонтекстПоКонтактам, "Значение");
		КонецЦикла;
		ДобавленныеКонтакты.Удалить(0);

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КонтекстПоКонтактам, РезультатПоиска);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьНесвязанныеКонтактыВРезультатПоиска(СтрокаПоиска, ИсходныйРезультатПоиска, РезультатПоиска,
	ДополнительныеПараметры)

	Для Каждого СтрокаКонтакт Из ИсходныйРезультатПоиска Цикл
		Если ТипЗнч(СтрокаКонтакт.Значение) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатПоиска.НайтиСтроки(Новый Структура("Значение", СтрокаКонтакт.Значение)).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(РезультатПоиска.Добавить(), СтрокаКонтакт);

		КонтекстПоКонтактам = НовыйРезультатыПоиска();
		ДополнитьТаблицуУникальнымиСтроками(НайтиСобытияПоКонтакту(СтрокаКонтакт.Значение), КонтекстПоКонтактам,
			"Значение");

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КонтекстПоКонтактам, РезультатПоиска);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЛидыВРезультатПоиска(СтрокаПоиска, ИсходныйРезультатПоиска, РезультатПоиска, ДополнительныеПараметры)

	Для Каждого СтрокаЛид Из ИсходныйРезультатПоиска Цикл

		Если ТипЗнч(СтрокаЛид.Значение) = Тип("СправочникСсылка.Лиды") Тогда
			СсылкаЗначение = СтрокаЛид.Значение;
		ИначеЕсли ТипЗнч(СтрокаЛид.Значение) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
			СсылкаЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЛид.Значение, "Владелец");
		Иначе
			Продолжить;
		КонецЕсли;

		СтруктураОписание = Новый Соответствие;
		СтруктураОписание.Вставить(НСтр("ru='Состояние'"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаЗначение,
			"СостояниеЛида"));
		ОписаниеДополнение = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(СтруктураОписание);

		НоваяСтрока = РезультатПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛид);
		НоваяСтрока.Значение = СсылкаЗначение;
		НоваяСтрока.Метаданные = СсылкаЗначение.Метаданные();
		Если ЗначениеЗаполнено(ОписаниеДополнение) Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Описание) Тогда
				НоваяСтрока.Описание = Новый ФорматированнаяСтрока(НоваяСтрока.Описание, Символы.ПС, ОписаниеДополнение);
			Иначе
				НоваяСтрока.Описание = ОписаниеДополнение;
			КонецЕсли;
		КонецЕсли;

		КонтекстПоКонтактам = НовыйРезультатыПоиска();
		ДополнитьТаблицуУникальнымиСтроками(НайтиСобытияПоКонтакту(СтрокаЛид.Значение), КонтекстПоКонтактам, "Значение");

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КонтекстПоКонтактам, РезультатПоиска);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Сценарий_ВыполнитьКонвертациюСуммыВВалюте

Функция ДанныеВалют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка,
	|	Валюты.СимвольноеПредставление КАК СимвольноеПредставление,
	|	Валюты.Код КАК Код,
	|	Валюты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Сценарий_ВыполнитьПоискКонтрагентовПоИНН

Процедура ВыполнитьПоискКонтрагентовПоИННВИнформационнойБазе(СтрокаПоиска, ИНН, РезультатПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Контрагенты = Запрос.Выполнить().Выбрать();
	Пока Контрагенты.Следующий() Цикл
		СтруктураОписание = Новый Структура;
		СтруктураОписание.Вставить("ИНН", ИНН);
		
		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Представление = Контрагенты.Наименование;
		НоваяСтрока.Значение = Контрагенты.Ссылка;
		НоваяСтрока.Метаданные = Контрагенты.Ссылка.Метаданные();
		НоваяСтрока.Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(СтруктураОписание);
		НоваяСтрока.НайденоПолнотекстовымПоиском = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПоискКонтрагентовПоДаннымЕГРН(СтрокаПоиска, ИНН, ЭтоЮрЛицо, РезультатПоиска)

	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоЮрЛицо Тогда
		ДанныеКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
	Иначе
		ДанныеКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеКонтрагента.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЕГРЮЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоЮрЛицо Тогда
		НаименованиеКонтрагента = ДанныеКонтрагента.ЕГРЮЛ.НаименованиеПолное;
	Иначе
		НаименованиеКонтрагента = ДанныеКонтрагента.Наименование;
	КонецЕсли;

	СтруктураОписание = Новый Соответствие;
	СтруктураОписание.Вставить(НСтр("ru='ИНН'"), ИНН);
	Если ЭтоЮрЛицо Тогда
		Если ДанныеКонтрагента.ЕГРЮЛ.ЮридическийАдрес <> Неопределено Тогда
			СтруктураОписание.Вставить(НСтр("ru='Юридический адрес'"), ДанныеКонтрагента.ЕГРЮЛ.ЮридическийАдрес.Представление);
		КонецЕсли;
		Если ДанныеКонтрагента.ЕГРЮЛ.Руководители.Количество() <> 0 Тогда
			СтруктураОписание.Вставить(НСтр("ru='Руководитель'"), ДанныеКонтрагента.ЕГРЮЛ.Руководители[0].Представление);
		КонецЕсли;
	КонецЕсли;

	Описание = ГлобальныйПоискКлиентСервер.СтрокаИзСтруктуры(СтруктураОписание);
	Описание = НаименованиеКонтрагента + Символы.ПС + Описание;

	НоваяСтрока = РезультатПоиска.Добавить();
	НоваяСтрока.Значение = ИНН;
	НоваяСтрока.Представление = ГлобальныйПоискКлиентСервер.ПредставлениеРезультата(НСтр("ru='Найдено в ЕГРН'"), НСтр(
		"ru='создать'"));
	НоваяСтрока.Картинка = БиблиотекаКартинок.Добавить;
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.НайденоПолнотекстовымПоиском = Истина;

КонецПроцедуры

#КонецОбласти

Функция ВсеМетаданныеДляПолнотекстовогоПоиска()
	
	Результат = Новый Массив;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Результат.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Результат.Добавить(ОбъектМетаданных);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТипаОбъекта(ОбъектМетаданных)
	
	Если ОбъектМетаданных = Документы.Событие.ПустаяСсылка().Метаданные() Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеОбъекта) Тогда
		Возврат ОбъектМетаданных.ПредставлениеОбъекта;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМетаданных.Синоним) Тогда
		Возврат ОбъектМетаданных.Синоним;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция КартинкаКонтакта(Контакт)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "ВидКонтрагента");
		Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			ИЛИ ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			Возврат БиблиотекаКартинок.КоллекцияКонтрагентыФизическоеЛицо;
		Иначе
			Возврат БиблиотекаКартинок.КоллекцияКонтрагентыКомпания;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт КАК Контакт
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна = ЛОЖЬ";
		Результат = Запрос.Выполнить().Выбрать();
		ЕстьСвязиКонтакта = Результат.Количество() <> 0;
		
		Если ЕстьСвязиКонтакта Тогда
			Возврат БиблиотекаКартинок.УстановитьСвязь;
		Иначе
			Возврат БиблиотекаКартинок.РазорватьСвязь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		Возврат БиблиотекаКартинок.Реквизит;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АльтернативныеКодыИскомогоНомераТелефона(НомерТелефона)
	
	АльтернативноеНачалоСтроки = Новый Соответствие;
	АльтернативноеНачалоСтроки.Вставить("79", "89");
	АльтернативноеНачалоСтроки.Вставить("89", "79");
	
	Результат = Новый Массив;
	Для каждого КлючЗначение Из АльтернативноеНачалоСтроки Цикл
		Если СтрНачинаетсяС(НомерТелефона, КлючЗначение.Ключ) Тогда
			Результат.Добавить(ЗаменитьНачалоСтроки(НомерТелефона, КлючЗначение.Ключ, КлючЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьНачалоСтроки(Строка, ПодстрокаПоиска, ПодстрокаЗамены)
	
	Возврат ПодстрокаЗамены + Прав(Строка, СтрДлина(Строка) - СтрДлина(ПодстрокаПоиска));
	
КонецФункции

Функция ДополнитьТаблицуСтрокамиПоОтбору(ТаблицаИсточник, ТаблицаПриемник, Отбор) Экспорт
	
	СтрокиТаблицыИсточник = ТаблицаИсточник.НайтиСтроки(Отбор);
	Для каждого СтрокаТаблицыИсточник Из СтрокиТаблицыИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
	КонецЦикла;
	
	Возврат СтрокиТаблицыИсточник.Количество() <> 0;
	
КонецФункции

Процедура ДополнитьТаблицуУникальнымиСтроками(ТаблицаИсточник, ТаблицаПриемник, КолонкаСравнение) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		
		Строки = ТаблицаПриемник.НайтиСтроки(Новый Структура(КолонкаСравнение, СтрокаТаблицыИсточник[КолонкаСравнение]));
		Если Строки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидПоиска(РезультатыПоиска, ВидПоиска)
	
	Для каждого РезультатПоиска Из РезультатыПоиска Цикл
		Если НЕ ЗначениеЗаполнено(РезультатПоиска.ВидПоиска) Тогда
			РезультатПоиска.ВидПоиска = ВидПоиска;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КартинкаОбъекта(СсылкаНаОбъект)
	
	Если ОбщегоНазначения.ЭтоДокумент(СсылкаНаОбъект.Метаданные()) Тогда
		Возврат БиблиотекаКартинок.ДокументОбъект;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСправочник(СсылкаНаОбъект.Метаданные()) Тогда
		Возврат БиблиотекаКартинок.СправочникОбъект;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


#КонецОбласти
