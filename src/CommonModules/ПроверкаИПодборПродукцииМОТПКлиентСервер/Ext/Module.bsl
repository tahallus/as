#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

Функция ДатаНачалаКонтроляКодовМаркировки() Экспорт
	
	Возврат '20200701';
	
КонецФункции

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(
		ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для всех родительских строк
// переданной строки дерева маркируемой продукции.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(
		СтрокаДерева, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
// 	СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// 	ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПачек Тогда
		СтрокаДерева.КоличествоПодчиненныхПачек     = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхБлоков        = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Если СтрокаДерева.НеПересчитыватьКоличествоПачек Тогда
		
		СтрокаДерева.КоличествоПодчиненныхБлоков   = 0;
		СтрокаДерева.КоличествоПодчиненныхУпаковок = 0;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхПачек;
			
		ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхПачек;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхПачек;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхПачек;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхПачек;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
				Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
				
			КонецЕсли;
			
			Если ПересчитыватьПодчиненные Тогда
				
				ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
				
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПачек = СтрокаДерева.КоличествоПодчиненныхПачек + 1;
				
			ИначеЕсли ЭтоУпаковкаБлока(ПодчиненнаяСтрока) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхБлоков = СтрокаДерева.КоличествоПодчиненныхБлоков + 1;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
				
			КонецЕсли;
			
			СтрокаДерева.КоличествоПодчиненныхПачек         = СтрокаДерева.КоличествоПодчиненныхПачек         + ПодчиненнаяСтрока.КоличествоПодчиненныхПачек;
			СтрокаДерева.КоличествоПодчиненныхБлоков        = СтрокаДерева.КоличествоПодчиненныхБлоков        + ПодчиненнаяСтрока.КоличествоПодчиненныхБлоков;
			СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
			СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
			СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего
		= СтрокаДерева.КоличествоПодчиненныхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхБлоков
		+ СтрокаДерева.КоличествоПодчиненныхПачек;
	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки типа упаковки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт

	Если ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 5;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 4;
		КонецЕсли;

	ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 6;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки")
		Или ТекущаяСтрока.НеСодержитсяВДанныхДокумента Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
	
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
			ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустой блок>'");
		Иначе
			ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		И ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 
		И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2'"),
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВНаличии,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
			Иначе
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
		 Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		ИначеЕсли ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустой блок>'");
		Иначе
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		ПредставлениеСодержимоеУпаковки = Новый Массив;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'упаковок - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхБлоков > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'блоков - %1'"), ТекущаяСтрока.КоличествоПодчиненныхБлоков));
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхПачек > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'пачек - %1'"), ТекущаяСтрока.КоличествоПодчиненныхПачек));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ПредставлениеСодержимоеУпаковки.Добавить(
				ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия));
			
		КонецЕсли;
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрСоединить(ПредставлениеСодержимоеУпаковки, ", ");
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ТребуетсяПеремаркировка Тогда
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1'"),
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;

КонецПроцедуры

// Формирует признак допустимости и представление проверки данных МОТП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева, содержащая данные упаковки.
// ПараметрыПроверкиКодовМаркировки - Структура со свойствами
// 		ЗапрашиватьДанныеСервиса - Булево - Признак включенной опции запроса данных сервиса
// 		КонтролироватьСтатусыКодовМаркировки - Булево - Признак необходимости временного отключения контроля статусов кодов маркировки
// 		ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП - Булево - Признак необходимости проверки вхождения кодов в серую зону МОТП
// 		ДопустимыеСтатусыКодовМаркировки - Массив значений типа ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - допустимые статусы кода маркировки для текущей хоз.операции
// 		ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП - Дата - Дата производства, начиная с которой выполняется контроль статусов кода маркировки
// 		ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС МОТП
// 		КонтролироватьВложенностьУпаковок - Булево - Признак необходимости проверить допустимые типы вложений согласно ограничения СУЗ API.
// 		ДопустимыеВложенияАгрегатов - Соответствие - найстройки для котроля вложенности упаковок.
//
Процедура ПроверитьДопустимостьКодаМаркировки(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки, РежимПодбораСуществующихУпаковок = Истина, ЕстьПодчиненныеСтроки = Неопределено) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
	 Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли Не ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Статус неопределен'");
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.СтатусКодаМаркировки)
		Или ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца) Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
			
		Если ПараметрыПроверкиКодовМаркировки.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
			ВыполнятьКонтрольСУчетомСеройЗоны = Не ТекущаяСтрока.ВСеройЗоне;
		Иначе
			ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
		КонецЕсли;
		
		ДатаПроизводстваДопускаетКонтроль = Истина;
		
		// Приоритет 1. Статус
		Если ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыУпаковокМОТП;
		Иначе
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыМОТП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПроизводства)
			И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
			ДатаПроизводстваДопускаетКонтроль = ТекущаяСтрока.ДатаПроизводства >= ПараметрыПроверкиКодовМаркировки.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
		Иначе
			ДатаПроизводстваДопускаетКонтроль = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусКодаМаркировки)
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки 
			И ДопустимыеСтатусыКодовМаркировки.Найти(ТекущаяСтрока.СтатусКодаМаркировки) = Неопределено
			И ВыполнятьКонтрольСУчетомСеройЗоны
			И ДатаПроизводстваДопускаетКонтроль Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ТекущаяСтрока.СтатусКодаМаркировки);
		КонецЕсли;
		
		// Приоритет 2. Вложения. Пустая упаковка
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И (ЕстьПодчиненныеСтроки = Ложь И ТекущаяСтрока.КоличествоПодчиненныхПачек = 0) Тогда
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Пустая упаковка'");
		КонецЕсли;
		
		// Приоритет 3. Вложенность стандартных упаковок
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И ТекущаяСтрока.КоличествоПодчиненныхПачек <> ТекущаяСтрока.Коэффициент И ТекущаяСтрока.Коэффициент > 0 Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(
				НСтр("ru = 'По данным ГИС МТ в упаковке %2 ед. из %1'"),
				ТекущаяСтрока.Коэффициент, ТекущаяСтрока.КоличествоПодчиненныхПачек);
		КонецЕсли;
		
		// Приоритет 4. Владелец
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ВыполнятьКонтрольСУчетомСеройЗоны
			И ДатаПроизводстваДопускаетКонтроль
			И ТекущаяСтрока.СтатусКодаМаркировки <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Неопределен")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца)
				И ТекущаяСтрока.ИННВладельца <> ПараметрыПроверкиКодовМаркировки.ИННВладельца Тогда
				
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
					+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
					+ СтрШаблон(НСтр("ru = 'ИНН владельца: %1'"), ТекущаяСтрока.ИННВладельца);
				
			ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца)
				И РежимПодбораСуществующихУпаковок Тогда
				
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
					+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
					+ НСтр("ru = 'Владелец неопределен'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок
		И ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов <> Неопределено Тогда
		
		ПроверитьДопустимостьВложения(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДопустимыеВложенияАгрегатовПоВидамПродукции() Экспорт
	
	Результат = Новый Соответствие;
	
	ВложенияЛогистическаяУпаковка = Новый Массив;
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	ВложенияЛогистическаяУпаковкаТабак = Новый Массив;
	ВложенияЛогистическаяУпаковкаТабак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ВложенияЛогистическаяУпаковкаТабак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	
	ВложенияГрупповаяУпаковка = Новый Массив;
	ВложенияГрупповаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	ВложенияПоТипуШтрихкодаSSCC = Новый Массив;
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"));
	
	ВложенияПоТипуШтрихкодаGS1 = Новый Массив;
	ВложенияПоТипуШтрихкодаGS1.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	
	ВложенияПоТипуШтрихкодаGS1Табак = Новый Массив;
	ВложенияПоТипуШтрихкодаGS1Табак.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаGS1Табак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	// АТП
	ДопустимыеВложенияАгретовАТП = Новый Соответствие;
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковка);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),     ВложенияГрупповаяУпаковка);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"), ДопустимыеВложенияАгретовАТП);
	
	// Табак
	ДопустимыеВложенияАгретовТабак = Новый Соответствие;
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1Табак);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковкаТабак);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),     ВложенияГрупповаяУпаковка);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"), ДопустимыеВложенияАгретовТабак);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДопустимостьВложения(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	Иначе
		РодительТекущейСтроки = ТекущаяСтрока.Родитель;
	КонецЕсли;
	
	Если РодительТекущейСтроки <> Неопределено И ТипЗнч(РодительТекущейСтроки.ТипУпаковки) = Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда 
		
		ДопустимыеВложенияАгрегатов = ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов;
		ДопустимыеВложенияПоВидуУпаковки  = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ВидУпаковки);
		ДопустимыеВложенияПоТипуШтрихкода = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ТипШтрихкода);
		
		СтрокаОшибки = "";
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидУпаковки) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
				ТекущаяСтрока.Штрихкод);
			
		ИначеЕсли Не ЗначениеЗаполнено(РодительТекущейСтроки.ВидУпаковки) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
				РодительТекущейСтроки.Штрихкод);
			
		ИначеЕсли ДопустимыеВложенияПоВидуУпаковки.Найти(ТекущаяСтрока.ВидУпаковки) = Неопределено
			И (РодительТекущейСтроки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			   Или РодительТекущейСтроки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			       И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено
			       И ДопустимыеВложенияПоТипуШтрихкода.Найти(ТекущаяСтрока.ВидУпаковки) = Неопределено) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = '%1 упаковка не может содержать %2'"),
				РодительТекущейСтроки.ВидУпаковки,
				ТекущаяСтрока.ВидУпаковки);
			
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено Тогда
			
			Если ДопустимыеВложенияПоТипуШтрихкода.Найти(ТекущаяСтрока.ТипШтрихкода) = Неопределено Тогда
				
				СтрокаОшибки = СтрШаблон(
					НСтр("ru = 'Упаковка %1 не может содержать %2'"),
					РодительТекущейСтроки.ТипШтрихкода,
					ТекущаяСтрока.ТипШтрихкода);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьСоставБлока")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставБлока
			И РодительТекущейСтроки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
			
			Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
				ВложенныеСтрокиГрупповойУпаковки = РодительТекущейСтроки.ПолучитьЭлементы();
			Иначе
				ВложенныеСтрокиГрупповойУпаковки = РодительТекущейСтроки.Строки;
			КонецЕсли;
			
			ТекущийТипШтрихкода = ТекущаяСтрока.ТипШтрихкода;
			
			Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтрокиГрупповойУпаковки Цикл
				
				Если ВложеннаяСтрокаДерева.ТипШтрихкода <> ТекущийТипШтрихкода Тогда
					СтрокаОшибки = СтрШаблон(
						НСтр("ru = '%1 упаковка не может содержать разные шаблоны кодов маркировки'"),
						РодительТекущейСтроки.ВидУпаковки);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки +
				?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ") +
				СтрокаОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Перемаркировка

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(
		Форма, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(
		Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Процедура УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(
		СтрокаДерева, СоответствуетОтбору, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Функция ЗаголовокТребуетсяПеремаркировка(Форма) Экспорт
	
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаголовокТребуетсяПеремаркировка(Форма);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСтрокуПачкиБезБлока(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока");
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуБлокиБезКоробки(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки");
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Функция ЭтоУпаковкаБлока(ТекущаяСтрока) Экспорт
	Возврат (ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти

