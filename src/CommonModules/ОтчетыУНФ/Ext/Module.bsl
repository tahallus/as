
#Область ПрограммныйИнтерфейс

#Область Обновление

// Обновляет настройки встроенных и дополнительных отчетов 
// в регистрах сведений НастройкиВариантовОтчетовУНФ и ПривязкаПолейОтчетовУНФ
//
// Параметры:
//   СтруктураПараметров  - не используется
//
Процедура Обновить(СтруктураПараметров = Неопределено) Экспорт
	
	ОбновитьОтчеты();
	
КонецПроцедуры

// Актуализирует данные справочника ТегиОтчетов
//
// Параметры:
//   СтруктураПараметров  - не используется
//
Процедура ОбновитьТегиОтчетов(СтруктураПараметров = Неопределено) Экспорт
	
	АктуализироватьТеги(); 
	
КонецПроцедуры

// Обновляет настройки отчетов по списку 
//    в регистрах сведений НастройкиВариантовОтчетовУНФ и ПривязкаПолейОтчетовУНФ;
//    добавляет отсутствующие элементы в справочник ТегиОтчетов
//
// Параметры:
//   МассивОтчетов  - Массив значений типа ОбъектМетаданных, Строка или
//      СправочникСсылка.ИдентификаторыОбъектовМетаданных - массив отчетов, служебные данные которых требуется обновить
//
Процедура ОбновитьОтчетыВыборочно(МассивОтчетов) Экспорт
	
	МассивИдентификаторов = МассивОтчетовВМассивИдентификаторов(МассивОтчетов);
	ОбновитьОтчеты(МассивИдентификаторов);
	АктуализироватьТеги(МассивИдентификаторов);
	
КонецПроцедуры

// Обновляет пользовательские настройки рассылки отчетов
//
// Параметры:
//  ОбъектРассылка	 - СправочникОбъект.РассылкиОтчетов	 - Обновляемые объект справочника рассылки
//
Процедура ОбновитьНастройкиРассылки(ОбъектРассылка) Экспорт
	
	// Заголовок отчета
	ОбновляемыеСвойства = "Значение, ИдентификаторПользовательскойНастройки, РежимОтображения";
	Для каждого СтрокаОтчета Из ОбъектРассылка.Отчеты Цикл
		Вариант = СтрокаОтчета.Отчет;
		Если ТипЗнч(Вариант) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			Продолжить;		
		КонецЕсли;     
		ПользовательскиеНастройки = СтрокаОтчета.Настройки.Получить();
		Если ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			Продолжить;		
		КонецЕсли;
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Обновлен_1_6_26") Тогда
			Продолжить;		
		КонецЕсли;
		ВыводитьЗаголовок = Ложь;
		ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок");
		Для каждого Настройка Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(Настройка) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;     
			Если Настройка.Параметр <> ИскомыйПараметр Тогда
				Продолжить;
			КонецЕсли;
			ВыводитьЗаголовок = Настройка.Значение И Настройка.Использование;
			Прервать;
		КонецЦикла;
		Если ВыводитьЗаголовок Тогда
			Если ТипЗнч(Вариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
				Продолжить;	
			КонецЕсли;
			ОтчетМетаданные = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Вариант.Отчет);
			Если ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
			СхемаКД = ОтчетМенеджер.ПолучитьМакет(ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя);
			Если Вариант.Пользовательский Тогда
				НастройкиКД = Вариант.Настройки.Получить();
			Иначе
				НастройкиКД = Неопределено;
				Для каждого ВариантНастроек Из СхемаКД.ВариантыНастроек Цикл
					Если Вариант.КлючВарианта = ВариантНастроек.Имя Тогда
						НастройкиКД = ВариантНастроек.Настройки;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			Если НастройкиКД = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД);
			Компоновщик.Инициализировать(Источник);
			Компоновщик.ЗагрузитьНастройки(НастройкиКД);
			Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
			ПользовательскиеНастройки = Компоновщик.ПользовательскиеНастройки;
			ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("Заголовок");
			ПараметрВывода = НастройкиКД.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
			Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
				ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
				Если ПользовательскийПараметр <> Неопределено Тогда
					ПользовательскийПараметр.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
			ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных");
			ПараметрВывода = НастройкиКД.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
			Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
				ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
				Если ПользовательскийПараметр <> Неопределено Тогда
					ПользовательскийПараметр.Использование = Истина;
					ПользовательскийПараметр.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
				КонецЕсли;
			КонецЕсли;
			ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("ВыводитьОтбор");
			ПараметрВывода = НастройкиКД.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
			Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
				ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
				Если ПользовательскийПараметр <> Неопределено Тогда
					ПользовательскийПараметр.Использование = Истина;
					ПользовательскийПараметр.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
				КонецЕсли;
			КонецЕсли;
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Обновлен_1_6_26", Истина);
			СтрокаОтчета.Настройки = Новый ХранилищеЗначения(ПользовательскиеНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переносит параметры заголовка из пользовательских настроек компоновки данных
//  Используется при формировании отчета из рассылки для поддержки возможности вывода заголовка, фильтров и параметров
//
// Параметры:
//  Настройки					 - НастройкиКомпоновкиДанных				 - Настройки отчета
//  ПользовательскиеНастройки	 - ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки отчета
//
Процедура ПеренестиПараметрыЗаголовкаВНастройки(Настройки, ПользовательскиеНастройки) Экспорт
	
	ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("Заголовок");
	ПараметрВывода = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
	Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
		ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
		Если ПользовательскийПараметр <> Неопределено И ПользовательскийПараметр.Использование Тогда
			ПараметрВывода.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных");
	ПараметрВывода = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
	Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
		ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
		Если ПользовательскийПараметр <> Неопределено И ПользовательскийПараметр.Использование 
			И ПользовательскийПараметр.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
			ПараметрВывода.Использование = Истина;
			ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
		КонецЕсли;
	КонецЕсли;
	ИскомыйПараметр = Новый ПараметрКомпоновкиДанных("ВыводитьОтбор");
	ПараметрВывода = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ИскомыйПараметр);
	Если ПараметрВывода <> Неопределено И НЕ ПустаяСтрока(ПараметрВывода.ИдентификаторПользовательскойНастройки) Тогда
		ПользовательскийПараметр = ПользовательскиеНастройки.Элементы.Найти(ПараметрВывода.ИдентификаторПользовательскойНастройки);
		Если ПользовательскийПараметр <> Неопределено И ПользовательскийПараметр.Использование 
			И ПользовательскийПараметр.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
			ПараметрВывода.Использование = Истина;
			ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Подписка на событие дополнительный отчет при записи.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки - элемент справочника.
//  Отказ - Булево - признак отказа.
//
Процедура ПодпискаНаСобытиеДополнительныйОтчетПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Источник.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		И НЕ Источник.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления 
		ИЛИ Источник.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
		ОтключитьДополнительныйОтчет(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Источник.Ссылка);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КомментарийЗаписиЖурналаРегистрации = СтрШаблон(
		НСтр("ru = 'Ошибка при записи варианта дополнительного отчета ""%1"":
		|%2'"),
		Источник.Наименование,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru ='Запись вариантов дополнительного отчета'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		КомментарийЗаписиЖурналаРегистрации);
		
		Возврат;
		
	КонецПопытки;
	
	МетаданныеОбъекта = ОтчетОбъект.Метаданные();
	
	НастройкиОтчета = Новый Структура;
	ИнициализироватьНастройкиОтчета(НастройкиОтчета);
	НастройкиВариантов = Новый Соответствие;
	Если Источник.ИспользуетХранилищеВариантов Тогда
		ТаблицаВариантов = ТаблицаВариантовПредопределенногоОтчета(Источник.Ссылка);
		Для Каждого Стр Из ТаблицаВариантов Цикл
			НастройкиВариантов[Стр.КлючВарианта] = Новый Структура;
			ИнициализироватьНастройкиВарианта(НастройкиВариантов[Стр.КлючВарианта]);
			НастройкиВариантов[Стр.КлючВарианта].Вставить("Вариант", Стр.Ссылка);
		КонецЦикла;
		ИмяСправочникаОчистки = "ВариантыДополнительныхОтчетов";
	Иначе
		Для каждого Стр Из Источник.Команды Цикл
			НастройкиВариантов[Стр.Идентификатор] = Новый Структура;
			ИнициализироватьНастройкиВарианта(НастройкиВариантов[Стр.Идентификатор]);
		КонецЦикла; 
		НайтиСоздатьДополнительныеВарианты(Источник, НастройкиВариантов);
		ИмяСправочникаОчистки = "ВариантыОтчетов";
	КонецЕсли;
	// Удаление настроек в случае изменения хранилища вариантов отчета
	Если НЕ Источник.ЭтоНовый() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Отчет", Источник.Ссылка);
		Выборка = Справочники[ИмяСправочникаОчистки].Выбрать(,, Отбор);
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли; 
			Выборка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);	
		КонецЦикла; 
	КонецЕсли; 
	Если НЕ МетаданныеОбъекта.Реквизиты.Найти("ЭтоОтчетУНФ")=Неопределено И ОтчетОбъект.ЭтоОтчетУНФ Тогда
		ОтчетОбъект.ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов);
	КонецЕсли; 
	Для Каждого ОписаниеНастроек Из НастройкиВариантов Цикл
		СтруктураНастроек = ОписаниеНастроек.Значение;
		// Настройки отчета УНФ
		ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, ОтчетОбъект, ОписаниеНастроек.Ключ);
		СтруктураНастроек.Вставить("ЭтоВнешнийОтчет", Истина);
		ОбновитьНастройкиВарианта(СтруктураНастроек.Вариант, СтруктураНастроек, Истина);
	КонецЦикла; 
	
КонецПроцедуры

// При создании на сервере формы связанного объекта
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой открывается форма связанного объекта.
//
Процедура ПриСозданииНаСервереФормыСвязанногоОбъекта(Форма) Экспорт
	
	ИдентификаторОбъектаМетаданных = ОтчетыУНФПовтИсп.ИдентификаторОбъектаМетаданныхПоИмениФормы(Форма.ИмяФормы);
	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("СвязанныеОтчеты", ИдентификаторОбъектаМетаданных);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
КонецПроцедуры

// Переопределенный обработчик события общей формы отчетов ПередЗагрузкойВариантаНаСервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета или настроек отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - настройки для загрузки в компоновщик настроек.
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если ТипЗнч(Форма.ФормаПараметры.Отбор) = Тип("Структура") Тогда
		Отбор = Форма.ФормаПараметры.Отбор;
		// В отчетах используются разные параметры периода, требуется привести отбор к общему виду
		Если Отбор.Свойство("ПериодРасшифровки") Тогда
			ИмяПараметра = "СтПериод";
			ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
			Если ЗначениеПараметра = Неопределено Тогда
				ИмяПараметра = "Период";
				ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
			КонецЕсли;
			Если ЗначениеПараметра = Неопределено ИЛИ ТипЗнч(ЗначениеПараметра) <> Тип("СтандартныйПериод") Тогда
				ИмяПараметра = "КонецПериода";	
				ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
			КонецЕсли;
			Если ЗначениеПараметра <> Неопределено Тогда
				Если ИмяПараметра = "КонецПериода" Тогда
					Отбор.Вставить("НачалоПериода", Отбор.ПериодРасшифровки.ДатаНачала);	
					Отбор.Вставить("КонецПериода", Отбор.ПериодРасшифровки.ДатаОкончания);
				Иначе
					Отбор.Вставить(ИмяПараметра, Отбор.ПериодРасшифровки);	
				КонецЕсли;
			КонецЕсли;
			Отбор.Удалить("ПериодРасшифровки");
		КонецЕсли;
		Если Отбор.Свойство("ДатаРасшифровки") Тогда
			ИмяПараметра = "СтПериод";
			ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
			Если ЗначениеПараметра = Неопределено Тогда
				ИмяПараметра = "Период";
				ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
				Если ТипЗнч(ЗначениеПараметра) <> Тип("СтандартныйПериод") Тогда
					ЗначениеПараметра = Неопределено; 
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеПараметра = Неопределено Тогда
				ИмяПараметра = "КонецПериода";
				ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
			КонецЕсли;
			Если ЗначениеПараметра = Неопределено Тогда
				ИмяПараметра = "Период";
				ЗначениеПараметра = ЗначениеПараметраДанных(НовыеНастройкиКД, ИмяПараметра, , Истина); 
				Если ТипЗнч(ЗначениеПараметра) <> Тип("Дата") Тогда
					ЗначениеПараметра = Неопределено; 
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеПараметра <> Неопределено Тогда
				Если ТипЗнч(ЗначениеПараметра) = Тип("СтандартныйПериод") Тогда
					Отбор.Вставить(ИмяПараметра, Новый СтандартныйПериод('0001-01-01', КонецДня(Отбор.ДатаРасшифровки)));	
				Иначе
					Отбор.Вставить(ИмяПараметра, КонецДня(Отбор.ДатаРасшифровки));
					Если ИмяПараметра = "КонецПериода" Тогда
						Отбор.Вставить("НачалоПериода", '0001-01-01');
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Отбор.Удалить("ДатаРасшифровки");
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

// Обработчик при записи варианта отчета
//
// Параметры:
//  Источник - СправочникОбъект.ВариантыОтчетов	 - Записываемый вариант отчета
//  Отказ	 - Булево							 - Признак отмены транзакции записи
//
Процедура ВариантыОтчетовПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.Пользовательский И ЗначениеЗаполнено(Источник.Ссылка) Тогда
		ДобавитьОтчетВИсторию(Источник.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийФормыОтчета

// Вызывается из модуля отчета в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	КомпоновщикНастроекФормы = Форма.Отчет.КомпоновщикНастроек;
	
	// Поддержка сложных отборов при открытии формы
	Если Параметры.Свойство("ОтборРасшифровка")
		И ТипЗнч(Параметры.ОтборРасшифровка) = Тип("Соответствие") Тогда 
		ОтчетыСервер.УстановитьФиксированныеОтборы(Параметры.ОтборРасшифровка, КомпоновщикНастроекФормы.Настройки, 
			Форма.НастройкиОтчета);
	КонецЕсли;
	
	// Масштабирование отчета на форме
	ЭлементФормыТаблица = Форма.Элементы.Найти("ОтчетТабличныйДокумент");
	Если ЭлементФормыТаблица <> Неопределено Тогда
		ЭлементФормыТаблица.РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Обычный;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из модуля отчета в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета.
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки компоновки данных отчета
//
Процедура ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.ИмяФормы <> "ОбщаяФорма.ФормаОтчета" Тогда
		Возврат;	
	КонецЕсли;
	
	Вариант = Неопределено;
	Форма.НастройкиОтчета.Свойство("ВариантСсылка", Вариант);
	Если ЗначениеЗаполнено(Вариант) Тогда
		ДобавитьОтчетВИсторию(Вариант);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СписокОтчетов

// Процедура формирует таблицу отчетов по заданным отборам
// 	Вызывается в фоновом задании из общей формы ФормаСпискаОтчетов.
//
// Параметры:
//  Параметры					 - Структура - Параметры используемые для расчета, обязательные ключи:
//										* Период - период расчет потребностей,
//										* СпособПополнения - ПеречислениеСсылка.СпособыПополненияЗапасов - способ пополнения, по которому будет отобрана номенклатура,
//										* Настройки - НастройкиКомпоновкиДанных - настройки КД, содержащие отборы для расчета потребностей
//  ВременноеХранилищеРезультата - Строка	 - Возвращаемый в родительский сеанс параметр. Содержит таблицу отчетов.
//
Процедура СформироватьСписокОтчетов(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Если ВариантыОтчетов.ПредставленияЗаполнены() = "НеЗаполнены" Тогда
		Настройки = ВариантыОтчетов.ПараметрыОбновленияНастроек();
		Настройки.Отложенное = Истина;
		ВариантыОтчетов.Обновить(Настройки);
	КонецЕсли;
	
	СписокОтчетов = Параметры.СписокОтчетов.СкопироватьКолонки();
	ОтчетыПользователя = Новый СписокЗначений;
	ОтчетыПользователя.ЗагрузитьЗначения(ВариантыОтчетов.ОтчетыТекущегоПользователя());
	ОтключенныеВарианты = Новый СписокЗначений;
	ОтключенныеВарианты.ЗагрузитьЗначения(ОтчетыУНФПовтИсп.ВариантыНедоступныеПоФО());
	ОтключенныеПредопределенныеВарианты = Новый СписокЗначений;
	ОтключенныеПредопределенныеВарианты.ЗагрузитьЗначения(ОтчетыУНФПовтИсп.ПредопределенныеВариантыНедоступныеПоФО());
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапросаТаблицаОтчетов(Параметры);
	НаборДанных.Имя = "НаборДанных1";
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Параметры.УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтчетыПользователя", 
		ОтчетыПользователя);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтключенныеВарианты", 
		ОтключенныеВарианты);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтключенныеПредопределенныеВарианты", 
		ОтключенныеПредопределенныеВарианты);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийПользователь", 
		Пользователи.ТекущийПользователь());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Подсистема", 
		Параметры.ТекущийРаздел);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТаблицаПодсистем", 
		Параметры.ПодсистемыПрограммы);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЭтоОсновнойЯзык", 
		ОбщегоНазначения.ЭтоОсновнойЯзык());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КодЯзыка", 
		ТекущийЯзык().КодЯзыка);
	
	Если Параметры.Раздел = РазделИзбранные() Тогда
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Параметры.Избранное);
		УстановитьОтборКомпоновщика(КомпоновщикНастроек.Настройки, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, Список);
	КонецЕсли;
	Если Параметры.Раздел = РазделВнешние() Тогда
		УстановитьОтборКомпоновщика(КомпоновщикНастроек.Настройки, "Внешний", ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Параметры.ПоОбъекту) Тогда
		УстановитьОтборКомпоновщика(КомпоновщикНастроек.Настройки, "Включен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЕсли;
	ДобавитьОтборыТеги(КомпоновщикНастроек.Настройки, Параметры); 
	Если Параметры.Раздел = РазделПоследние() Тогда
		УстановитьОтборыИстория(КомпоновщикНастроек.Настройки, Параметры);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПоОбъекту) Тогда
		УстановитьОтборыКонтекстныеОтчеты(КомпоновщикНастроек.Настройки, Параметры);
	КонецЕсли;
	
	Если Параметры.Раздел <> РазделИзбранные() Тогда
	    ДобавитьЭлементУпорядочивания(КомпоновщикНастроек.Настройки, "Важный", "Убыв");
	КонецЕсли;
    ДобавитьЭлементУпорядочивания(КомпоновщикНастроек.Настройки, "Порядок");
	
	Для каждого Колонка Из СписокОтчетов.Колонки Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;
	ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаОтчетов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЗаполняемыеПоля = Новый Массив;
	ЗаполняемыеПоля.Добавить("Отчет, ИмяОтчета, Вариант, КлючВарианта, Наименование, Теги, Описание, Пользовательский");
	ЗаполняемыеПоля.Добавить("АвторТекущийПользователь, Подсистема, Важный, СмТакже, Внешний, Видимость, Порядок, Автор");
	ЗаполняемыеПоля = СтрСоединить(ЗаполняемыеПоля, ", ");
	
	// Проверка на присутствие отчета в нескольких подсистемах - отображаем только в первой
	ДобавленныеОтчеты = Новый Массив;
	Для каждого НайденныйОтчет Из ТаблицаОтчетов Цикл
		Если ДобавленныеОтчеты.Найти(НайденныйОтчет.Вариант) <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		ДобавленныеОтчеты.Добавить(НайденныйОтчет.Вариант);
		СтрОтчет = СписокОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрОтчет, НайденныйОтчет, ЗаполняемыеПоля);
		Если ТипЗнч(СтрОтчет.Вариант) = Тип("СправочникСсылка.ВариантыОтчетов")
			Или ТипЗнч(СтрОтчет.Вариант) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
			СтрОтчет.УИД = СтрЗаменить(СтрОтчет.Вариант.УникальныйИдентификатор(), "-", "");
		Иначе
			СтрОтчет.УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ПоОбъекту) Тогда
			СтрОтчет.Раздел = Параметры.ТекущийРаздел;
		Иначе	
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", НайденныйОтчет.Подсистема);
			НайденныеПодсистемы = Параметры.ПодсистемыПрограммы.НайтиСтроки(СтруктураОтбора);
			Если НайденныеПодсистемы.Количество() > 0 Тогда
				СтрОтчет.Раздел = НайденныеПодсистемы[0].РазделСсылка;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(НайденныйОтчет.Образец) = Тип("ХранилищеЗначения") Тогда
			Образец = НайденныйОтчет.Образец.Получить();
			СтрОтчет.Образец = Образец;
		КонецЕсли;
	КонецЦикла;
	Если Параметры.Раздел = РазделПоследние() Тогда
		СписокОтчетов.Сортировать("Порядок");
	Иначе
		СписокОтчетов.Сортировать("Важный УБЫВ, Порядок");
	КонецЕсли;
	ТекущийИндекс = 0;
	Для каждого СтрокаОтчета Из СписокОтчетов Цикл
		СтрокаОтчета.ИндексСтроки = ТекущийИндекс;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	ПроверитьДоступность(СписокОтчетов, Параметры);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("СписокОтчетов", СписокОтчетов);
	Если Параметры.Свойство("СвязанныеПоля") Тогда
		СтруктураРезультат.Вставить("СвязанныеПоля", Параметры.СвязанныеПоля);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(СтруктураРезультат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтчета

// Заполняет структуру настроек отчета параметрами по умолчанию
//
// Параметры:
//   НастройкиОтчета - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиОтчета(НастройкиОтчета) Экспорт
	
	// Признак поддержки отчетом интерфейса программного изменения общей формы отчета
	НастройкиОтчета.Вставить("ПрограммноеИзменениеФормыОтчета", Ложь);
	
	// Признак возможности изменения настроек диаграмм в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьНастройкиДиаграммыНаФормеОтчета", Истина);
	
	// Признак возможности выбора колонок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуКолонкиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуСтрокиНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппировкиКолонокНаФормеОтчета", Истина);
	
	// Признак возможности изменения группировок в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьПоказателиНаФормеОтчета", Истина);
	
	// Признак возможности изменения фильтров в форме отчета
	НастройкиОтчета.Вставить("ПоказыватьГруппуФильтрыНаФормеОтчета", Истина);
	
	// Признак разрешения ручного редактирования настроек варианта СКД
	НастройкиОтчета.Вставить("РазрешитьРедактироватьСКД", Истина);
	
	// Признак разрешения использования режима сравнения 
	НастройкиОтчета.Вставить("ИспользоватьСравнение", Ложь);
	
	// Возможность отображения относительного и абсолютного отклонения при сравнении по периоду
	НастройкиОтчета.Вставить("ИспользоватьДополнительныеРежимыСравнения", Истина);
	
	// Признак автоматического формирования отчета при открытии формы
	НастройкиОтчета.Вставить("СформироватьПриОткрытии", Ложь);
	
	// Признак возможности разворачивания отчета по периоду. Имеет смысл только если разрешен режим сравнения 
	НастройкиОтчета.Вставить("ИспользоватьПериодичность", Истина);
	
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокСтрок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихГруппировокКолонок", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихПолейСравнения", Истина);
	НастройкиОтчета.Вставить("РазрешитьДобавлениеПрочихФильтров", Истина);
	
	// Список наиболее часто используемых полей группировки строк, отображаемых в меню при добавлении строки
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиСтрок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей сравнения и группировки колонок 
	НастройкиОтчета.Вставить("ДополнительныеГруппировкиКолонок", Новый СписокЗначений);
	
	// Список наиболее часто используемых полей отбора, отображаемых в меню при добавлении фильтра
	НастройкиОтчета.Вставить("ДополнительныеФильтры", Новый СписокЗначений);
	
	// Поля, для которых следует выполнять проверку актуальности расчет себестоимости
	НастройкиОтчета.Вставить("ПоляСебестоимости", "");
	
КонецПроцедуры

// Заполняет структуру настроек варианта параметрами по умолчанию
//
// Параметры:
//   НастройкиВарианта - Структура - Структура настроек
//
Процедура ИнициализироватьНастройкиВарианта(НастройкиВарианта) Экспорт
	
	// Отчет отображается в режиме "Рекомендуемые отчеты" панели отчетов
	НастройкиВарианта.Вставить("Рекомендуемый", Ложь);
	
	// Содержит имя функциональной опции, связанной с вариантом отчета
	НастройкиВарианта.Вставить("ФункциональнаяОпция", "");
	
	// Признак разрешения использования в варианте отчета только полей-ресурсов с ролью "Конечный остаток"
	НастройкиВарианта.Вставить("ТолькоРесурсыОстатков", Ложь);
	
	// Содержит массив описаний связи полей отчета и объектов метаданных для контекстного формирования. 
	//   см. подробнее процедуру ДобавитьОписаниеПривязки 
	НастройкиВарианта.Вставить("СвязанныеПоля", Новый Массив);
	
	// Содержит варианты оформления полей отчета. Соответствие вида: ИмяПоля (Строка) - ОписанийОформлений (Соответствие)
	//   см. подробнее процедуру ДобавитьВариантОформления
	НастройкиВарианта.Вставить("ВариантыОформления", Новый Соответствие);
	
	// Содержит массив описаний отчетов расшифровки
	//   см. подробнее процедуру ДобавитьВариантРасшифровки
	НастройкиВарианта.Вставить("ВариантыРасшифровки", Новый Массив);
	
	// Имя макета (типа ДвоичныеДанные), содержащего картинку с образцом варианта
	//   стандарт образца: картинка размерами 580х366 пикселей
	НастройкиВарианта.Вставить("ИмяМакетаОбразца", "");
	
	// Содержит теги для поиска варианта
	//   теги в строке разделяются запятыми
	НастройкиВарианта.Вставить("Теги", "");
	
	// Массив имен полей, по которым можно наложить отбор через строку поиска в форме отчета
	//   если массив пустой, то отбор можно будет наложить только по значениям полей фильтров, отображенных в форме
	НастройкиВарианта.Вставить("ПоляПоиска", Новый Массив);
	
КонецПроцедуры

// Добавляет описание контекстной привязки
//
// Параметры:
//   СвязанныеПоля - Массив - Массив описаний связанных полей
//   Поле - Строка - Имя поля, по которому выполняется отбор при контекстном открытии
//   Объект - Строка - Полное имя объекта метаданных, к которому выполняется привязка, например "Справочник.Номенклатура"
//   ДополнительныйРазрез - Произвольная ссылка - Дополнительная фильтрация. Поддерживается:
//      ПеречислениеСсылка.ТипыНоменклатуры - для разделения номенклатуры
//      ПеречислениеСсылка.ТипыСтруктурныхЕдиниц - для разделения структурных единиц
//      Перечисления вариантов операций документов
//   СложныйАлгоритм - Булево - Признак использования сложного алгоритма наложения отборов при контекстном открытии
//      В модуле объекта отчета должна присутствовать экспортируемая процедура ПриКонтекстномОткрытии
//   Рекомендуемый - Булево - Признак того, что для контекстного режима списка отчет является рекомендуемым.
//
Процедура ДобавитьОписаниеПривязки(СвязанныеПоля, Поле, Объект, ДополнительныйРазрез = Неопределено, СложныйАлгоритм = Ложь, Рекомендуемый = Ложь) Экспорт
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Объект", Объект);
	СтруктураОписания.Вставить("СложныйАлгоритм", СложныйАлгоритм);
	СтруктураОписания.Вставить("ДополнительныйРазрез", ДополнительныйРазрез);
	СтруктураОписания.Вставить("Рекомендуемый", Рекомендуемый);
	СвязанныеПоля.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет предопределенный вариант оформления поля отчета
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поле - Строка - Имя поля, для которого добавляется предопределенный вариант оформления
//   КлючВариантаОформления - Строка - Имя предопределенного варианта оформления
//   ЭлементОформления - Строка - Имя параметра оформления
//   ЗначениеОформления - Произвольный - Значение параметра оформления
//
Процедура ДобавитьВариантОформления(ВариантыОформления, Поле, КлючВариантаОформления, ЭлементОформления, ЗначениеОформления) Экспорт
	
	Если ВариантыОформления.Получить(Поле)=Неопределено Тогда
		ВариантыОформления.Вставить(Поле, Новый Соответствие);
	КонецЕсли;
	ОформленияПоля = ВариантыОформления.Получить(Поле);
	
	Если ОформленияПоля.Получить(КлючВариантаОформления)=Неопределено Тогда
		ОформленияПоля.Вставить(КлючВариантаОформления, Новый Структура);
	КонецЕсли;
	Оформление = ОформленияПоля.Получить(КлючВариантаОформления);
	
	Оформление.Вставить(ЭлементОформления, ЗначениеОформления);
	
КонецПроцедуры

// Добавляет описание нестандартного варианта расшифровки
//
// Параметры:
//   ВариантыРасшифровки - Массив - Варианты расшифровки
//   ИмяОтчета - Строка - Имя отчета для расшифровки
//   КлючВарианта - Строка - Ключ вариант отчета для расшифровки
//   Поле - Строка - Имя расшифровываемого поля
//   Заголовок - Строка - Заголовок варианта расшифровки
//
Процедура ДобавитьВариантРасшифровки(ВариантыРасшифровки, ИмяОтчета, КлючВарианта, Поле = "", Заголовок = "") Экспорт
	
	Вариант = ВариантыОтчетов.ВариантОтчета(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОтчета), КлючВарианта);
	
	Если Не ЗначениеЗаполнено(Вариант) Тогда
		ВызватьИсключение СтрШаблон(НСтр(
		"ru = 'Не удалось определить вариант отчета по переданным параметрам:
		|ИмяОтчета = ""%1"", КлючВарианта = ""%2"".'"),
		ИмяОтчета, КлючВарианта);
	КонецЕсли;
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("Вариант", Вариант);
	СтруктураОписания.Вставить("Поле", Поле);
	СтруктураОписания.Вставить("Заголовок", Заголовок);
	ВариантыРасшифровки.Добавить(СтруктураОписания);
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для суммовых полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена суммовых полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияСумм(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'С копейками'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=2");
		
		КлючВариантаОформления = НСтр("ru = 'Без копеек'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0");
		
		КлючВариантаОформления = НСтр("ru = 'В тысячах'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=0; ЧС=3");
			
	КонецЦикла; 
	
	Если НЕ НастройкиКД = Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			ОтчетыУНФКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, 
				ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет стандартные варианты оформления для количественных полей
//
// Параметры:
//   ВариантыОформления - Соответствие - Описания предопределенных вариантов оформления в разрезе полей
//   Поля - Строка, Массив - Имена количественных полей
//   НастройкиКД - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета для установки основного варианта оформления
//
Процедура ДобавитьВариантыОформленияКоличества(ВариантыОформления, Поля, НастройкиКД = Неопределено) Экспорт
	
	Если ТипЗнч(Поля)=Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	ИначеЕсли ТипЗнч(Поля)=Тип("Массив") Тогда
		МассивПолей = Поля;
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОсновногоВариантаОформления = НСтр("ru = 'Не выравнивать'");
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		
		КлючВариантаОформления = КлючОсновногоВариантаОформления;
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧГ=3,0");
			
		КлючВариантаОформления = НСтр("ru = 'Выравнивать до 3-х знаков после запятой'");
		ДобавитьВариантОформления(ВариантыОформления, ИмяПоля, КлючВариантаОформления, "Формат", "ЧДЦ=3");
		
	КонецЦикла;
	
	Если НЕ НастройкиКД=Неопределено Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			ОтчетыУНФКлиентСервер.ДобавитьУсловноеОформление(НастройкиКД, ИмяПоля, ВариантыОформления[ИмяПоля][КлючОсновногоВариантаОформления]); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Преобразовать настройки варианта, сохраненные не библиотечной формой отчетов
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.НастройкиОтчета.Пользовательский Тогда
		
		НастройкиКД = Форма.Отчет.КомпоновщикНастроек.Настройки;
		
		ОбновитьНастройкиПериодичности(НастройкиКД);
		ОбновитьПредставлениеПользовательскихНастроек(НастройкиКД);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчета

// Возвращает структуру служебных данных для формирования отчета
//
// Параметры:
//  НастройкиОтчета	 - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
// 
// Возвращаемое значение:
//  Структура - Структура служебных данных для формирования. Содержит поля:
//  * НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//  * ВыводитьЗаголовок - Булево - Признак отображения заголовка отчета
//  * Заголовок - Строка - Заголовок отчета
//  * ПараметрыВключаемыеВТекстОтбора - Массив - Массив имен параметров, включаемых в текст отбора при выводе заголовка
//  Переносит параметры из структуры ДополнительныеСвойства настроек компоновки данных
//
Функция ПараметрыФормированияОтчета(НастройкиОтчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОтчета", НастройкиОтчета);
	
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	Для каждого Свойство Из ДополнительныеСвойства Цикл
		Результат.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Параметр = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Результат.Вставить("ВыводитьЗаголовок", НЕ Параметр = Неопределено И Параметр.Использование И Параметр.Значение);
	Если Результат.ВыводитьЗаголовок И НЕ Результат.Свойство("Заголовок") Тогда
		Параметр = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
		Если НЕ Параметр = Неопределено И Параметр.Использование Тогда
			Результат.Вставить("Заголовок", Параметр.Значение);
		Иначе
			Результат.Вставить("Заголовок", "");
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыВключаемыеВТекстОтбора = Новый Массив;
	НевыводимыеПараметры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"НачалоПериода,КонецПериода,Период,СтПериод,Периодичность,ТипДиаграммы,ВыводитьЗаголовок");
	Для каждого Параметр Из НастройкиОтчета.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если НЕ НевыводимыеПараметры.Найти(Строка(Параметр.Параметр)) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ПараметрыВключаемыеВТекстОтбора.Добавить(Параметр); 
	КонецЦикла;
	Если ПараметрыВключаемыеВТекстОтбора.Количество() > 0 Тогда
		Результат.Вставить("ПараметрыВключаемыеВТекстОтбора", ПараметрыВключаемыеВТекстОтбора);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Добавляет дополнительные вычисляемые поля в схему компоновки данных отчета
//    Добавляемые поля: МесяцГода, ДеньМесяцГода, НеделяГода
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных) Экспорт
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодДляРасчета");
	Если Поле = Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Период");
	КонецЕсли; 
	Если Поле = Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "ПериодСекунда");
	КонецЕсли; 
	Если НЕ Поле = Неопределено Тогда
		ИмяПоля = Поле.ПутьКДанным;
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("МесяцГода");
		Если ВычисляемоеПоле = Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "МесяцГода";
			ВычисляемоеПоле.Выражение = СтрШаблон("ОтчетыУНФ.МесяцГода(%1)", ИмяПоля);
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=ММММ'"));
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДеньМесяцГода");
		Если ВычисляемоеПоле = Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДеньМесяцГода";
			ВычисляемоеПоле.Выражение = СтрШаблон("ОтчетыУНФ.ДеньМесяцГода(%1)", ИмяПоля);
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'День и месяц года'");
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
			ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=''д ММММ'''")); 
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("НеделяГода");
		Если ВычисляемоеПоле = Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "НеделяГода";
			ВычисляемоеПоле.Выражение = СтрШаблон("ОтчетыУНФ.НомерНеделиГода(%1)", ИмяПоля);
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, 
				ДопустимыйЗнак.Неотрицательный));
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Неделя года'");
			ВычисляемоеПоле.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Контрагент");
	Если Поле = Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Покупатель");
	КонецЕсли;
	Если Поле = Неопределено Тогда
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, "Поставщик");
	КонецЕсли;
	Если Поле <> Неопределено Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Тег");
		Если ВычисляемоеПоле = Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Тег";
			ВычисляемоеПоле.Выражение = "";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Теги");
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Тег'");
			ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли; 
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДобавленноеПоле_Сегмент");
		Если ВычисляемоеПоле = Неопределено Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = "ДобавленноеПоле_Сегмент";
			ВычисляемоеПоле.Выражение = "";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыКонтрагентов");
			ВычисляемоеПоле.Заголовок = НСтр("ru = 'Сегмент'");
			ВычисляемоеПоле.ОграничениеИспользования.Группировка = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Поле = Истина;
			ВычисляемоеПоле.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Стандартизирует схему компоновки данных отчета
//    * Устанавливает стандартные заголовки периодических полей отчета
//    * Устанавливает стандартные форматы вывода периодических полей отчета
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//
Процедура СтандартизироватьСхему(СхемаКомпоновкиДанных) Экспорт
	
	ТабПолей = Новый ТаблицаЗначений;
	ТабПолей.Колонки.Добавить("Поле");
	ТабПолей.Колонки.Добавить("Заголовок");
	ТабПолей.Колонки.Добавить("Формат");
	
	// Форматы по умолчанию
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодСекунда", НСтр("ru = 'Секунда'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм:сс'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМинута", НСтр("ru = 'Минута'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:мм'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодЧас", НСтр("ru = 'Час'"), НСтр("ru = 'ДФ=''дд.ММ.гггг ЧЧ:00'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДень", НСтр("ru = 'День'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодНеделя", НСтр("ru = 'Начало недели'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодДекада", НСтр("ru = 'Начало декады'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодМесяц", НСтр("ru = 'Месяц'"), НСтр("ru = 'ДФ=''МММ гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодКвартал", НСтр("ru = 'Квартал'"), НСтр("ru = 'ДФ=''к ''''кв.'''' гггг'''"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодПолугодие", НСтр("ru = 'Начало полугодия'"), НСтр("ru = 'ДФ=дд.ММ.гггг'"));
	ДобавитьСтрокуТаблицыПолей(ТабПолей, "ПериодГод", НСтр("ru = 'Год'"), НСтр("ru = 'ДФ=гггг'"));
	
	Для каждого Стр Из ТабПолей Цикл
		Поле = ПолеСхемы(СхемаКомпоновкиДанных, Стр.Поле);
		Если Поле = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Заголовок) Тогда
			Поле.Заголовок = Стр.Заголовок;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Формат) Тогда
			Поле.Оформление.УстановитьЗначениеПараметра("Формат", Стр.Формат); 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Стандартный обработчик компоновки результата отчета
//
// Параметры:
//    КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек компоновки данных отчета
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//    СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки компоновки
//
Процедура ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	ДополнительныеСвойства = НастройкиОтчета.ДополнительныеСвойства;
	// Признак формирования отчета не библиотечной формой
	ЭтоОтчетУНФ = (ДополнительныеСвойства.Свойство("ЭтоОтчетУНФ") И ДополнительныеСвойства.ЭтоОтчетУНФ = Истина);
	
	УстановитьМинимальнуюШиринуКолонок(НастройкиОтчета, СхемаКомпоновкиДанных);
	ОбновитьЗначенияПараметровПериода(НастройкиОтчета, ЭтоОтчетУНФ);
	
	Если ДополнительныеСвойства.Свойство("АдресСхемы") И ЭтоАдресВременногоХранилища(ДополнительныеСвойства.АдресСхемы) Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ДополнительныеСвойства.АдресСхемы);
	Иначе
		СтандартизироватьСхему(СхемаКомпоновкиДанных);
		ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	КонецЕсли;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ЭтоОтчетУНФ", ЭтоОтчетУНФ);
	ПараметрыФормирования.Вставить("Сравнивать", Ложь);
	ПараметрыФормирования.Вставить("ПоказыватьАбсолютноеИзменение", Ложь);
	ПараметрыФормирования.Вставить("ПоказыватьОтносительноеИзменение", Ложь);
	ПараметрыФормирования.Вставить("ПоляРесурсов", Новый Массив);
	ПараметрыФормирования.Вставить("ПоляСравнения", Новый Массив);
	ПараметрВывода = НастройкиОтчета.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов");
	Если ПараметрВывода.Использование И (ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.Начало 
		ИЛИ ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.Нет) Тогда
		ПараметрыФормирования.Вставить("ОбщиеИтогиПоГоризонтали", Ложь);
	Иначе
		ПараметрыФормирования.Вставить("ОбщиеИтогиПоГоризонтали", Истина);
	КонецЕсли;
	ПараметрыФормирования.Вставить("Период", ПериодИзПараметровОтчета(НастройкиОтчета.ПараметрыДанных.Элементы));
	
	Если ЭтоОтчетУНФ Тогда
		ПараметрыОтчета = ПараметрыФормированияОтчета(НастройкиОтчета);
		УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
		УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
		Если ДополнительныеСвойства.Свойство("Сравнение") И ТипЗнч(ДополнительныеСвойства.Сравнение) = Тип("ПеречислениеСсылка.Периодичность") Тогда
			ПараметрыФормирования.Вставить("Сравнивать", Истина);
		КонецЕсли;
		Если ПараметрыФормирования.Сравнивать Тогда
			УправлениеНебольшойФирмойОтчеты.НастроитьДинамическийПериод(СхемаКомпоновкиДанных, ПараметрыОтчета);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение") И ДополнительныеСвойства.ПоказыватьАбсолютноеИзменение Тогда
			ПараметрыФормирования.Вставить("ПоказыватьАбсолютноеИзменение", Истина);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение") И ДополнительныеСвойства.ПоказыватьОтносительноеИзменение Тогда
			ПараметрыФормирования.Вставить("ПоказыватьОтносительноеИзменение", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПоляСравнения(СхемаКомпоновкиДанных, НастройкиОтчета, ПараметрыФормирования);
	
	Если НЕ ЭтоОтчетУНФ Тогда
		ОбновитьГруппировкуДинамическийПериод(НастройкиОтчета, ПараметрыФормирования);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ДополнительныеСвойства.Свойство("ВнешниеНаборыДанных") И ЭтоАдресВременногоХранилища(ДополнительныеСвойства.ВнешниеНаборыДанных) Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ПолучитьИзВременногоХранилища(ДополнительныеСвойства.ВнешниеНаборыДанных), ДанныеРасшифровки, Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	КонецЕсли; 

	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	
	// Основной цикл вывода отчета
	ПараметрыФормирования.Вставить("НомераУдаляемыхКолонок", Новый Массив);
	ПараметрыФормирования.Вставить("ПорядокРесурсов", Новый Массив);
	ПараметрыФормирования.Вставить("ПерваяКолонкаВГруппе", Истина);
	ПараметрыФормирования.Вставить("ПорядокРесурсовЗаполнен", Ложь);
	ПараметрыФормирования.Вставить("ВысотаШапки", 0);
	ПараметрыФормирования.Вставить("ЕстьЗаголовок", Ложь);
	СтекВысот = Новый Массив;
	Пока Истина Цикл
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе
			// Зафиксируем шапку
			Если  Не ТаблицаЗафиксирована 
				  И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				  И ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда

				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
				Индекс = СтекВысот.Количество() - 1;
				ПредыдущаяВысота = ДокументРезультат.ВысотаТаблицы;
				Пока Индекс >= 0 И ПредыдущаяВысота = ДокументРезультат.ВысотаТаблицы Цикл
					ПредыдущаяВысота = СтекВысот[Индекс];
					Индекс = Индекс - 1;
				КонецЦикла;
				Если ДокументРезультат.ВысотаТаблицы <> ПредыдущаяВысота Тогда
					ПараметрыФормирования.Вставить("ВысотаШапки", ДокументРезультат.ВысотаТаблицы - ПредыдущаяВысота);
					ПараметрыФормирования.Вставить("ЕстьЗаголовок", ПредыдущаяВысота > 0);
				КонецЕсли;

			КонецЕсли;
			
			Если ДокументРезультат.ФиксацияСверху = 0 Тогда
				СтекВысот.Добавить(ДокументРезультат.ВысотаТаблицы);
			КонецЕсли;
			
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
			Если ПараметрыФормирования.ПоляСравнения.Количество() > 0 Тогда
				ВывестиЭлементРезультатаСравнения(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования); 
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	Если ДокументРезультат.ФиксацияСверху > 10 Тогда
		// При отображении фильтров и параметров заголовок может быть очень большой,
		// требуется ограничить максимальную высоту фиксирования 
		ДокументРезультат.ФиксацияСверху = 0;
	ИначеЕсли ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		// Для мобильного клиента фиксация не позволяет корректно работать с табличным документом 
		ДокументРезультат.ФиксацияСлева = 0;
		ДокументРезультат.ФиксацияСверху = 0;
	ИначеЕсли (ДополнительныеСвойства.Свойство("ФиксироватьКолонки") И ДополнительныеСвойства.ФиксироватьКолонки) Тогда
		ДокументРезультат.ФиксацияСлева = СтрокФиксироватьСлева(КомпоновщикНастроек);
	КонецЕсли;
	
	ВыполнитьОперацииПослеФормирования(ДокументРезультат, ПараметрыФормирования, ДанныеРасшифровки);
	УдалитьВременныеНастройкиОформления(НастройкиОтчета);
	
КонецПроцедуры

// Процедура - Обновляет значения периодических параметров отчета для корректного формирования
//  Для наборов данных - запросов с виртуальной таблицей остатков следует включить в выборку последнюю
//  секунду дня
//
// Параметры:
//  Настройки	 - НастройкиКомпоновкиДанных - Обновляемые настройки компоновки данных
//  ЭтоОтчетУНФ	 - Булево					 - Признак использования общей формы отчетов УНФ
//
Процедура ОбновитьЗначенияПараметровПериода(Настройки, ЭтоОтчетУНФ = Истина) Экспорт
	
	ПараметрСтПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтПериод"));
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрНачалоПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если НЕ ЭтоОтчетУНФ Тогда
		
		НачалоПериода = '0001-01-01';
		КонецПериода = '0001-01-01';
		Если ПараметрСтПериод <> Неопределено И ПараметрСтПериод.Использование И ТипЗнч(ПараметрСтПериод.Значение) = Тип("СтандартныйПериод") Тогда
			НачалоПериода = НачалоДня(ПараметрСтПериод.Значение.ДатаНачала);
			Если ЗначениеЗаполнено(ПараметрСтПериод.Значение.ДатаОкончания) Тогда
				КонецПериода = КонецДня(ПараметрСтПериод.Значение.ДатаОкончания);
			КонецЕсли;
		ИначеЕсли ПараметрПериод <> Неопределено И ПараметрПериод.Использование И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
			НачалоПериода = НачалоДня(ПараметрПериод.Значение.ДатаНачала);
			Если ЗначениеЗаполнено(ПараметрПериод.Значение.ДатаОкончания) Тогда
				КонецПериода = КонецДня(ПараметрПериод.Значение.ДатаОкончания);
			КонецЕсли;
		ИначеЕсли ПараметрКонецПериода <> Неопределено И ПараметрКонецПериода.Использование Тогда
			Если ТипЗнч(ПараметрКонецПериода.Значение) = Тип("Дата") И ЗначениеЗаполнено(ПараметрКонецПериода.Значение) Тогда
				КонецПериода = КонецДня(ПараметрКонецПериода.Значение);
			ИначеЕсли ТипЗнч(ПараметрКонецПериода.Значение) = Тип("СтандартнаяДатаНачала") И ЗначениеЗаполнено(ПараметрКонецПериода.Значение) Тогда
				КонецПериода = КонецДня(ПараметрКонецПериода.Значение.Дата);
			КонецЕсли;
			Если ПараметрНачалоПериода <> Неопределено И ПараметрНачалоПериода.Использование Тогда
				Если ТипЗнч(ПараметрНачалоПериода.Значение) = Тип("Дата") Тогда
					НачалоПериода = НачалоДня(ПараметрНачалоПериода.Значение);
				ИначеЕсли ТипЗнч(ПараметрНачалоПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда
					КонецПериода = НачалоДня(ПараметрНачалоПериода.Значение.Дата);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПараметрПериод <> Неопределено И ПараметрПериод.Использование И ТипЗнч(ПараметрПериод.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ПараметрПериод.Значение) Тогда
				КонецПериода = КонецДня(ПараметрПериод.Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если КонецПериода >= НачалоПериода Тогда
			Если ПараметрСтПериод <> Неопределено И ТипЗнч(ПараметрСтПериод.Значение) = Тип("СтандартныйПериод") Тогда
				ПараметрСтПериод.Значение = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
				ПараметрСтПериод.Использование = Истина;
			КонецЕсли;
			Если ПараметрПериод <> Неопределено И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
				ПараметрПериод.Значение = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
				ПараметрПериод.Использование = Истина;
			КонецЕсли;
			Если ПараметрПериод <> Неопределено И ТипЗнч(ПараметрПериод.Значение) = Тип("Дата") Тогда
				ПараметрПериод.Значение = КонецПериода;
				ПараметрПериод.Использование = Истина;
			КонецЕсли;
			Если ПараметрКонецПериода <> Неопределено И ТипЗнч(ПараметрКонецПериода.Значение) = Тип("Дата") Тогда
				ПараметрКонецПериода.Значение = КонецПериода;
				ПараметрКонецПериода.Использование = Истина;
			КонецЕсли;
			Если ПараметрКонецПериода <> Неопределено И ТипЗнч(ПараметрКонецПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ПараметрКонецПериода.Значение = Новый СтандартнаяДатаНачала(КонецПериода);
				ПараметрКонецПериода.Использование = Истина;
			КонецЕсли;
			Если ПараметрНачалоПериода <> Неопределено И ТипЗнч(ПараметрНачалоПериода.Значение) = Тип("Дата") Тогда
				ПараметрНачалоПериода.Значение = НачалоПериода;
				ПараметрНачалоПериода.Использование = Истина;
			КонецЕсли;
			Если ПараметрНачалоПериода <> Неопределено И ТипЗнч(ПараметрНачалоПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ПараметрНачалоПериода.Значение = Новый СтандартнаяДатаНачала(НачалоПериода);
				ПараметрНачалоПериода.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрПериод <> Неопределено 
		И ПараметрПериод.Использование 
		И ЗначениеЗаполнено(ПараметрПериод.Значение)
		И ТипЗнч(ПараметрПериод.Значение) = Тип("Дата") Тогда
		ПараметрПериод.Значение = Новый Граница(ПараметрПериод.Значение, ВидГраницы.Включая);
	КонецЕсли;
	
КонецПроцедуры
 
// Изменяет схему отчета для поддержки мультивалютности
//
// Параметры:
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//    Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
Процедура ОбработатьСхемуМультивалютногоОтчета(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	Если Настройки.Структура.Количество()>1 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиСВалютами = МультивалютныеГруппировкиРекурсивно(Настройки.Структура);
	ДобавитьГруппировкиПериодов(ГруппировкиСВалютами, СхемаКомпоновкиДанных);
	Если ГруппировкиСВалютами.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ГруппировкиКолонок = ГруппировкиКолонокРекурсивно(Настройки.Структура);
	ГруппировкиБезВалют = ПрочиеГруппировки(Настройки, ГруппировкиСВалютами, ГруппировкиКолонок);
	Для каждого Ресурс Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Ресурс.Группировки.Очистить();
		Для каждого ИмяГруппировки Из ГруппировкиБезВалют Цикл
			Ресурс.Группировки.Добавить(ИмяГруппировки);
		КонецЦикла;
		Ресурс.Группировки.Добавить("ОбщийИтог");
	КонецЦикла; 
	Для каждого ПолеВыбор Из Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ПолеВыбор.Ресурс Тогда
			Продолжить;
		КонецЕсли; 
		ИмяПоля = Строка(ПолеВыбор.Поле);
		Если Найти(ИмяПоля, "Вал")>0 Тогда
			Продолжить;
		КонецЕсли; 
		Суффиксы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("НачальныйОстаток,Приход,Расход,Оборот,КонечныйОстаток,Остаток,");
		ПолеВыборВал = Неопределено;
		Для каждого Суффикс Из Суффиксы Цикл
			Если ПустаяСтрока(Суффикс) Тогда
				ИмяПоляВал = ИмяПоля+"Вал";
			Иначе
				Позиция = Найти(ИмяПоля, Суффикс);
				Если Позиция=0 Тогда
					Продолжить;
				КонецЕсли;
				ИмяПоляВал = Лев(ИмяПоля, Позиция-1)+"Вал"+Сред(ИмяПоля, Позиция);
			КонецЕсли; 
			ПолеВыборВал = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляВал));
			Если ПолеВыборВал=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Прервать;
		КонецЦикла;
		Если НЕ ПолеВыборВал=Неопределено Тогда
			НовыйРесурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовыйРесурс.ПутьКДанным = ИмяПоля;
			НовыйРесурс.Выражение = "СУММА("+ИмяПоляВал+")";
			Для каждого Группировка Из ГруппировкиСВалютами Цикл
				НовыйРесурс.Группировки.Добавить(Группировка);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обновляет состав дополнительных вычисляемых полей для поддержки режима сравнения
//
// Параметры:
//  СхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//  НастройкиОтчета			 - НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//  ПараметрыФормирования	 - Структура				 - Служебные параметры формирования отчета
//
Процедура ОбновитьПоляСравнения(СхемаКомпоновкиДанных, НастройкиОтчета, ПараметрыФормирования) Экспорт
	
	Если НастройкиОтчета.Структура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ПериодыБезДвижений", 
		ЗначениеПараметраДанных(НастройкиОтчета, "ПериодыБезДвижений", Ложь, Истина));
	Если ПараметрыФормирования.ПериодыБезДвижений Тогда
		УстановитьТипДополненияРекурсивно(НастройкиОтчета.Структура, ПоляПериодов(СхемаКомпоновкиДанных), ПараметрыФормирования);	
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если НЕ ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	Структура = ЭлементСтруктуры.Колонки;
	Если Структура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьПериодВКолонках(СхемаКомпоновкиДанных, Структура, ПараметрыФормирования) Тогда
		// Ресурсы сравнения добавляем только при сравнении периодов
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = СписокПоказателей(НастройкиОтчета);
	
	Если НЕ ПараметрыФормирования.Сравнивать Тогда
		ПараметрыФормирования.Вставить("Сравнивать", ЗначениеПараметраДанных(НастройкиОтчета, "Сравнивать", Ложь, Истина));
	КонецЕсли;
	Если НЕ ПараметрыФормирования.ПоказыватьАбсолютноеИзменение Тогда
		ПараметрыФормирования.Вставить("ПоказыватьАбсолютноеИзменение", ЗначениеПараметраДанных(НастройкиОтчета, 
			"АбсолютноеОтклонение", Ложь, Истина));
	КонецЕсли;
	Если НЕ ПараметрыФормирования.ПоказыватьОтносительноеИзменение Тогда
		ПараметрыФормирования.Вставить("ПоказыватьОтносительноеИзменение", ЗначениеПараметраДанных(НастройкиОтчета, 
			"ОтносительноеОтклонение", Ложь, Истина));
	КонецЕсли;
		
	НастройкиВыбор = НастройкиОтчета.Выбор.Элементы;
	Для каждого Показатель Из СписокПоказателей Цикл
		Если Показатель.Пометка Тогда
			ПараметрыФормирования.ПоляРесурсов.Добавить(Показатель.Значение);	
		КонецЕсли;
		ИменаПолей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1Иконка,%1Разница,%1Прирост", Показатель.Значение);
		УдалитьПоляСравнения(ИменаПолей, НастройкиВыбор, СхемаКомпоновкиДанных);
		Для каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
			Если НЕ ПолеИтога.ПутьКДанным = Показатель.Значение Тогда
				Продолжить;
			КонецЕсли;
			Выражение = ПолеИтога.Выражение;
			Смещение = 0;
			// Иконка
			Если ПараметрыФормирования.Сравнивать И Показатель.Пометка Тогда
				ИмяПоля = СтрШаблон("%1Иконка", Показатель.Значение);
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
				Если ВычисляемоеПоле = Неопределено Тогда
					ПараметрыФормирования.ПоляРесурсов.Добавить(ИмяПоля);
					ПараметрыФормирования.ПоляСравнения.Добавить(ИмяПоля);
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
					ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
					ВычисляемоеПоле.Выражение = "0";
					ВычисляемоеПоле.Заголовок = " ";
					ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 2);
					ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0));
					ИндексВставки = ИндексПоляВыбора(НастройкиВыбор, Новый ПолеКомпоновкиДанных(Показатель.Значение));
					Если ИндексВставки <> Неопределено Тогда
						Смещение = Смещение + 1;
						Если ИндексВставки + Смещение >= НастройкиВыбор.Количество() Тогда
							НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						Иначе
							НовыйПоказатель = НастройкиВыбор.Вставить(ИндексВставки + Смещение, Тип("ВыбранноеПолеКомпоновкиДанных"));
						КонецЕсли;
						НовыйПоказатель.Использование = Истина;
						НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
						НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
					КонецЕсли; 
				КонецЕсли;
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтрШаблон(
				"ВЫБОР КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)= 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА Неопределено
				|КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)> 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА 1
				|КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0)< 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0) ТОГДА 2
				|КОНЕЦ",
				СтрЗаменить(СтрЗаменить(Выражение, """-""", "0"), """", """"""), 
				ПараметрыФормирования.Периодичность);
			КонецЕсли; 
			// + / -
			Если ПараметрыФормирования.ПоказыватьАбсолютноеИзменение И Показатель.Пометка Тогда
				ИмяПоля = СтрШаблон("%1Разница", Показатель.Значение);
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
				Если ВычисляемоеПоле = Неопределено Тогда
					ПараметрыФормирования.ПоляРесурсов.Добавить(ИмяПоля);
					ПараметрыФормирования.ПоляСравнения.Добавить(ИмяПоля);
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
					ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
					ВычисляемоеПоле.Выражение = Показатель.Значение;
					ВычисляемоеПоле.Заголовок = НСтр("ru = 'Разница'");
					ИндексВставки = ИндексПоляВыбора(НастройкиВыбор, Новый ПолеКомпоновкиДанных(Показатель.Значение));
					Если ИндексВставки <> Неопределено Тогда
						Смещение = Смещение + 1;
						Если ИндексВставки + Смещение >= НастройкиВыбор.Количество() Тогда
							НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						Иначе
							НовыйПоказатель = НастройкиВыбор.Вставить(ИндексВставки + Смещение, Тип("ВыбранноеПолеКомпоновкиДанных"));
						КонецЕсли;
						НовыйПоказатель.Использование = Истина;
						НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
						НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
					КонецЕсли; 
				КонецЕсли;
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтрШаблон(
				"ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0) - 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0)",
				СтрЗаменить(СтрЗаменить(Выражение, """-""", "0"), """", """"""), 
				ПараметрыФормирования.Периодичность);
			КонецЕсли; 
			// %
			Если ПараметрыФормирования.ПоказыватьОтносительноеИзменение И Показатель.Пометка Тогда
				ИмяПоля = СтрШаблон("%1Прирост", Показатель.Значение);
				ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
				Если ВычисляемоеПоле = Неопределено Тогда
					ПараметрыФормирования.ПоляРесурсов.Добавить(ИмяПоля);
					ПараметрыФормирования.ПоляСравнения.Добавить(ИмяПоля);
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
					ВычисляемоеПоле.ПутьКДанным = ИмяПоля;
					ВычисляемоеПоле.Выражение = Показатель.Значение;
					ВычисляемоеПоле.Заголовок = НСтр("ru = '%'");
					ДобавитьУФФормат(ЭлементСтруктуры, ВычисляемоеПоле.ПутьКДанным, "ЧДЦ=2");
					ИндексВставки = ИндексПоляВыбора(НастройкиВыбор, Новый ПолеКомпоновкиДанных(Показатель.Значение));
					Если ИндексВставки <> Неопределено Тогда
						Смещение = Смещение + 1;
						Если ИндексВставки + Смещение >= НастройкиВыбор.Количество() Тогда
							НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						Иначе
							НовыйПоказатель = НастройкиВыбор.Вставить(ИндексВставки + Смещение, Тип("ВыбранноеПолеКомпоновкиДанных"));
						КонецЕсли;
						НовыйПоказатель = НастройкиВыбор.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовыйПоказатель.Использование = Истина;
						НовыйПоказатель.Поле = Новый ПолеКомпоновкиДанных(ВычисляемоеПоле.ПутьКДанным);
						НовыйПоказатель.Заголовок = ВычисляемоеПоле.Заголовок;
					КонецЕсли; 
				КонецЕсли;
				Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Ресурс.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
				Ресурс.Группировки.Очистить();
				Для каждого ИмяГруппировки Из ПолеИтога.Группировки Цикл
					Ресурс.Группировки.Добавить(ИмяГруппировки); 
				КонецЦикла; 
				Ресурс.Выражение = СтрШаблон(
				"ВЫБОР КОГДА ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0)=0 
				|ТОГДА 0 ИНАЧЕ (ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"",,, ""Текущая"", ""Текущая""),0) - 
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0))/
				|ЕСТЬNULL(ВЫЧИСЛИТЬВЫРАЖЕНИЕ(""%1"", ""%2"",, ""Предыдущая"", ""Предыдущая""),0) * 100 КОНЕЦ",
				СтрЗаменить(СтрЗаменить(Выражение, """-""", "0"), """", """"""), 
				ПараметрыФормирования.Периодичность);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

// Устарела. См. ОтчетыУНФ.ВывестиЭлементРезультатаСравнения
// 
Процедура ВывестиКартинкиВЭлементРезультата(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования) Экспорт
	
	ВывестиЭлементРезультатаСравнения(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования);	
	
КонецПроцедуры

// Выводит картинки из данных расшифровки в отчет. Используется в режиме сравнения
//
// Параметры:
//    ЭлементРезультата - ЭлементРезультатаКомпоновкиДанных - Элемент результата выполнения компоновки данных
//    ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ВывестиЭлементРезультатаСравнения(ЭлементРезультата, ДанныеРасшифровки, ДокументРезультат, ПараметрыФормирования) Экспорт
	
	Если ЭлементРезультата.ЗначенияПараметров.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;

	Для Каждого ЭлементПараметра Из ЭлементРезультата.ЗначенияПараметров Цикл
		Если ТипЗнч(ЭлементПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			Поля = ДанныеРасшифровки.Элементы[ЭлементПараметра.Значение].ПолучитьПоля();
			ЕстьПолеСравнения = Ложь;
			Для Каждого Поле Из Поля Цикл
				Если Поле.Поле = ПараметрыФормирования.Периодичность Тогда
					ЕстьПолеСравнения = Истина;
				КонецЕсли;
				Если НЕ ПараметрыФормирования.ПорядокРесурсовЗаполнен 
					И ПараметрыФормирования.ПоляРесурсов.Найти(Поле.Поле) <> Неопределено 
					И ПараметрыФормирования.ПорядокРесурсов.Найти(Поле.Поле) = Неопределено Тогда
					ПараметрыФормирования.ПорядокРесурсов.Добавить(Поле.Поле);
				КонецЕсли;
			КонецЦикла;
			Если ПараметрыФормирования.ПорядокРесурсов.Количество() > 0 Тогда
				Продолжить;	
			КонецЕсли;
			Если НЕ ЕстьПолеСравнения ИЛИ ПараметрыФормирования.ПерваяКолонкаВГруппе Тогда
				Если ПараметрыФормирования.НомераУдаляемыхКолонок.Найти(ДокументРезультат.ШиринаТаблицы) = Неопределено Тогда
					ПараметрыФормирования.НомераУдаляемыхКолонок.Добавить(ДокументРезультат.ШиринаТаблицы);
				КонецЕсли;
				Если ЕстьПолеСравнения Тогда
					ПараметрыФормирования.ПерваяКолонкаВГруппе = Ложь;
				Иначе
					ПараметрыФормирования.ПерваяКолонкаВГруппе = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыФормирования.ПорядокРесурсовЗаполнен 
		И ПараметрыФормирования.ПорядокРесурсов.Количество() > 0 Тогда
		ПараметрыФормирования.Вставить("ПорядокРесурсовЗаполнен", Истина);	
	КонецЕсли;
			
КонецПроцедуры

// Служебные операции после формирования отчета
//    * Удаление лишних колонок для отчетов в режиме сравнения
//    * Обработка диаграмм табличного документа
//
// Параметры:
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//    ПараметрыФормирования - Структура - Служебные параметры формирования отчета
//
Процедура ВыполнитьОперацииПослеФормирования(ДокументРезультат, ПараметрыФормирования, ДанныеРасшифровки) Экспорт
	
	// Картинки сравнения
	Если ПараметрыФормирования.Сравнивать И ПараметрыФормирования.Свойство("ПоляСравнения") 
		И ПараметрыФормирования.ПоляСравнения.Количество() > 0 Тогда
		Для НомерСтроки = 1 По ДокументРезультат.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ДокументРезультат.ШиринаТаблицы Цикл
				ОбластьЯчейки = ДокументРезультат.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ТипЗнч(ОбластьЯчейки.Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;     
				Поля = ДанныеРасшифровки.Элементы[ОбластьЯчейки.Расшифровка].ПолучитьПоля();
				ЕстьПолеСравнения = Ложь;
				Для Каждого Поле Из Поля Цикл
					ИмяПоля = Строка(Поле.Поле);
					Если Прав(ИмяПоля, 6) = "Иконка" И ПараметрыФормирования.ПоляСравнения.Найти(ИмяПоля) <> Неопределено Тогда
						Если ОбластьЯчейки.Текст = "1" Тогда
							Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
						ИначеЕсли ОбластьЯчейки.Текст = "2" Тогда
							Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
						Иначе
							ОбластьЯчейки.Текст = "";
							Продолжить;
						КонецЕсли; 
						Изображение = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
						Изображение.РазмерКартинки = РазмерКартинки.АвтоРазмер;
						Изображение.ГраницаСверху = Ложь;
						Изображение.ГраницаСнизу = Ложь;
						Изображение.ГраницаСправа = Ложь;
						Изображение.ГраницаСлева = Ложь;
						Изображение.ГраницаСлева = Ложь;
						Изображение.ЦветФона = Новый Цвет;
						Изображение.Расположить(ОбластьЯчейки);
						Изображение.Картинка = Картинка;
						ОбластьЯчейки.Текст = "";
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбластиКУдалению = Новый Массив;
	Если ПараметрыФормирования.ЭтоОтчетУНФ Тогда
		НачальнаяСтрока = 0;
	ИначеЕсли ПараметрыФормирования.ВысотаШапки <> 0 Тогда
		НачальнаяСтрока = ДокументРезультат.ФиксацияСверху - ПараметрыФормирования.ВысотаШапки + 1;
	Иначе
		НачальнаяСтрока = Неопределено;
	КонецЕсли;
	
	ВыводитьСравнение = Ложь;
	Если ПараметрыФормирования.Свойство("ПоляСравнения") И ПараметрыФормирования.ПоляСравнения.Количество() > 0 
		И ПараметрыФормирования.Свойство("НомераУдаляемыхКолонок") И ПараметрыФормирования.НомераУдаляемыхКолонок.Количество() > 0 
		И ПараметрыФормирования.Свойство("ПорядокРесурсов") И ПараметрыФормирования.ПорядокРесурсов.Количество() > 0
		И НЕ ПараметрыФормирования.ЕстьЗаголовок Тогда
		
		Если ПараметрыФормирования.ОбщиеИтогиПоГоризонтали 
			И ПараметрыФормирования.НомераУдаляемыхКолонок.Найти(ДокументРезультат.ШиринаТаблицы) = Неопределено Тогда
			ПараметрыФормирования.НомераУдаляемыхКолонок.Добавить(ДокументРезультат.ШиринаТаблицы);
		КонецЕсли;
		Для каждого НомерКолонки Из ПараметрыФормирования.НомераУдаляемыхКолонок Цикл
			НомерРесурса = 0;
			Для каждого ИмяРесурса Из ПараметрыФормирования.ПоляРесурсов Цикл
				НомерРесурса = НомерРесурса + 1;
				Если ПараметрыФормирования.ПоляСравнения.Найти(ИмяРесурса) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Смещение = ПараметрыФормирования.ПоляРесурсов.Количество() - НомерРесурса;
				Если НачальнаяСтрока <> Неопределено Тогда
					ОбластиКУдалению.Вставить(0, ДокументРезультат.Область(, НомерКолонки - Смещение, , НомерКолонки - Смещение));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Область Из ОбластиКУдалению Цикл
		ДокументРезультат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;
	
	ОбработатьДиаграммыТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

// Устанавливает минимальную ширину колонок с учетом иконок сортировки в шапке
//
// Параметры:
//  НастройкиОтчета	 - НастройкиКомпоновкиДанных - Компоновщик настроек отчета
//  СхемаКомпоновки	 - СхемаКомпоновкиДанных	 - Схема компоновки данных отчета
//
Процедура УстановитьМинимальнуюШиринуКолонок(НастройкиОтчета, СхемаКомпоновки) Экспорт
	
	ПоляОтчета = СписокВыводимыхПолейРекурсивно(НастройкиОтчета, СхемаКомпоновки);
	ЭлементыОформления = НастройкиОтчета.УсловноеОформление.Элементы;
	Для каждого ОписаниеПоля Из ПоляОтчета Цикл
		Если ПустаяСтрока(ОписаниеПоля.Представление) Тогда
			Продолжить;	
		КонецЕсли;
		ДлинаЗаголовка = СтрДлина(ОписаниеПоля.Представление);
		ШиринаКолонки = 0; 
		Если ДлинаЗаголовка > 15 Тогда
			ШиринаКолонки = Окр(ДлинаЗаголовка / 2) + 4;
		КонецЕсли;
		Если ШиринаКолонки = 0 Тогда
			Продолжить;	
		КонецЕсли;
		Если ОформлениеДобавлено(ЭлементыОформления, ОписаниеПоля.Значение, "МинимальнаяШирина") Тогда
			Продолжить;
		КонецЕсли;
		НовоеУсловноеОформление = ЭлементыОформления.Добавить();
		НовоеУсловноеОформление.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		НовоеУсловноеОформление.Использование = Истина;
		НовоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		НовоеПоле.Поле = ОписаниеПоля.Значение;
		НовоеПоле.Использование = Истина;
		НовоеУсловноеОформление.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", ШиринаКолонки);
		НовоеУсловноеОформление.Представление = ПредставлениеУдаляемойНастройки();
	КонецЦикла;
	
КонецПроцедуры                                                       

// Возвращает список выводимых полей отчета
//
// Параметры:
//  Настройки		 - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных	 - Настройки отчета
//  СхемаКомпоновки	 - СхемаКомпоновкиДанных											 - Схема компоновки данных отчета
// 
// Возвращаемое значение:
//  СписокЗначение - Список выводимых полей отчета
//
Функция СписокВыводимыхПолейРекурсивно(Настройки, СхемаКомпоновки) Экспорт
	
	Результат = Новый СписокЗначений;
	Если ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВложенныеПоля = СписокВыводимыхПолейРекурсивно(Настройки.Настройки, СхемаКомпоновки);
		Для каждого Элемент Из ВложенныеПоля Цикл
			ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		КонецЦикла;
		ВложенныеПоля = СписокВыводимыхПолейРекурсивно(Настройки.ПользовательскиеНастройки, СхемаКомпоновки);
		Для каждого Элемент Из ВложенныеПоля Цикл
			ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВложенныеПоля = СписокВыводимыхПолейРекурсивно(Настройки.Структура, СхемаКомпоновки);
		Для каждого Элемент Из ВложенныеПоля Цикл
			ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		КонецЦикла;
		ВложенныеПоля = СписокВыводимыхПолейРекурсивно(Настройки.Выбор, СхемаКомпоновки);
		Для каждого Элемент Из ВложенныеПоля Цикл
			ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Для каждого ЭлементСтруктуры Из Настройки Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Для каждого Поле Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
						Продолжить;
					КонецЕсли;
					ПолеСхемы = ПолеСхемы(СхемаКомпоновки, Поле.Поле);
					Если ПолеСхемы = Неопределено ИЛИ ПустаяСтрока(ПолеСхемы.Заголовок) Тогда
						ЗаголовокПоля = Строка(Поле.Поле);
					Иначе
						ЗаголовокПоля = ПолеСхемы.Заголовок;
					КонецЕсли;
					ДобавитьПолеВСписок(Результат, Поле.Поле, ЗаголовокПоля, Поле.Использование);
				КонецЦикла;
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Структура, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Строки, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Колонки, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Серии, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Точки, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
			КонецЕсли;
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") 
				ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементСтруктуры.Выбор, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("ВыбранныеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(Настройки) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Для каждого ЭлементВыбор Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементВыбор) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				ВложенныеПоля = СписокВыводимыхПолейРекурсивно(ЭлементВыбор, СхемаКомпоновки);
				Для каждого Элемент Из ВложенныеПоля Цикл
					ДобавитьПолеВСписок(Результат, Элемент.Значение, Элемент.Представление, Элемент.Пометка);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементВыбор) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Если НЕ ПустаяСтрока(ЭлементВыбор.Заголовок) Тогда
					ЗаголовокПоля = ЭлементВыбор.Заголовок;
				Иначе
					ПолеСхемы = ПолеСхемы(СхемаКомпоновки, ЭлементВыбор.Поле);
					Если ПолеСхемы = Неопределено ИЛИ ПустаяСтрока(ПолеСхемы.Заголовок) Тогда
						ЗаголовокПоля = Строка(ЭлементВыбор.Поле);
					Иначе
						ЗаголовокПоля = ПолеСхемы.Заголовок;
					КонецЕсли;
				КонецЕсли;
				ДобавитьПолеВСписок(Результат, ЭлементВыбор.Поле, ЗаголовокПоля, ЭлементВыбор.Использование);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВложенныеПоля = Новый СравнениеЗначений;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Приведение к общему виду диаграмм табличного документа
//
// Параметры:
//    ДокументРезультат - ТабличныйДокумент - Результат компоновки отчета
//
Процедура ОбработатьДиаграммыТабличногоДокумента(ДокументРезультат) Экспорт
	
	ТонкаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ТолстаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	ЦветаСерий = ЦветаСерийДиаграмм32();
	// Если точек на диаграмме меньше, то серии рисуем толстой линией, если больше - то тонкой
	МаксТочекДиаграммыСТолстойЛинией = 10;
	ПроцентОграничения = 20;
	
	Для каждого Рисунок Из ДокументРезультат.Рисунки Цикл
		Если НЕ Рисунок.ТипРисунка=ТипРисункаТабличногоДокумента.Диаграмма Тогда
			Продолжить;
		КонецЕсли;
		Рисунок.Высота = 95;
		Рисунок.Ширина = 180;
		Диаграмма = Рисунок.Объект;
		Диаграмма.ОтображатьЗаголовок = Ложь;
		Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
			Серия = Диаграмма.Серии[ИндексСерии];
			Если НЕ ЗначениеЗаполнено(Серия.Значение) Тогда
				Серия.Значение = НСтр("ru = '<Не указано>'")
			КонецЕсли; 
			Если ИндексСерии<ЦветаСерий.Количество() Тогда
				Серия.Цвет = ЦветаСерий[ИндексСерии];
			Иначе
				Серия.Цвет = ЦветаСерий[ИндексСерии%ЦветаСерий.Количество()];
			КонецЕсли;
			Если Диаграмма.Точки.Количество() > МаксТочекДиаграммыСТолстойЛинией Тогда
				Серия.Линия = ТонкаяЛиния;
			Иначе
				Серия.Линия = ТолстаяЛиния;
			КонецЕсли;
		КонецЦикла;
		
		ЭтоГистограмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.Гистограмма 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемОбъемная);
		ЭтоГоризонтальнаяГистограмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаГоризонтальная 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаНормированнаяГоризонтальнаяОбъемная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальная
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная);
		ЭтоГрафик = (Диаграмма.ТипДиаграммы=ТипДиаграммы.График 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикПоШагам
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластями
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиИНакоплением
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластямиНормированный);
		ЭтоКруговаяДиаграмма = (Диаграмма.ТипДиаграммы=ТипДиаграммы.Круговая 
		ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная);
		
		Если Диаграмма.Серии.Количество()<=5 Тогда
			СвернутоСерий = 0;
		ИначеЕсли ЭтоГистограмма ИЛИ ЭтоГрафик Тогда
			ВыводимыеСерии = Новый Массив;
			МаксимальноеЗначение = 0;
			СоответствиеСерий = Новый Соответствие;
			Для ИндексТочки = 0 По Диаграмма.Точки.Количество() - 1 Цикл
				Точка = Диаграмма.Точки[ИндексТочки];
				Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
					Серия = Диаграмма.Серии[ИндексСерии];
					Значение = Диаграмма.ПолучитьЗначение(Точка, Серия).Значение;
					Значение = ?(ЗначениеЗаполнено(Значение) И ТипЗнч(Значение)=Тип("Число"), Значение, 0);
					МаксимальноеЗначение = Макс(МаксимальноеЗначение, Значение);
					ТекущееЗначение = СоответствиеСерий.Получить(Серия);
					Если НЕ ТипЗнч(ТекущееЗначение)=Тип("Число") ИЛИ Значение>ТекущееЗначение Тогда
						СоответствиеСерий.Вставить(Серия, Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла;
			Ограничение = МаксимальноеЗначение*ПроцентОграничения/100;
			Для каждого Элемент Из СоответствиеСерий Цикл
				Если Элемент.Значение>=Ограничение И ВыводимыеСерии.Найти(Элемент.Ключ)=Неопределено Тогда
					ВыводимыеСерии.Добавить(Элемент.Ключ);
				КонецЕсли; 
			КонецЦикла; 
			СвернутоСерий = (Диаграмма.Серии.Количество()-ВыводимыеСерии.Количество());
		ИначеЕсли ЭтоКруговаяДиаграмма Тогда
			СвернутоСерий = (Диаграмма.Серии.Количество()-10);
		КонецЕсли;
		
		Диаграмма.СводнаяСерия.Цвет = ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
		Диаграмма.СводнаяСерия.Текст = НСтр("ru = 'Прочее'");
		Если ЗначениеЗаполнено(СвернутоСерий) Тогда
			Диаграмма.СводнаяСерия.Текст = Диаграмма.СводнаяСерия.Текст+" ("+Формат(СвернутоСерий, "ЧГ=0")+")";
		КонецЕсли; 
		Если ЭтоГрафик Тогда
			Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
			Если Диаграмма.Серии.Количество()>5 Тогда
				Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
				Диаграмма.МаксимумСерийПроцент = ПроцентОграничения;
			КонецЕсли; 
			Диаграмма.ОбластьПостроения.Право = 0.75;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.76;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
		ИначеЕсли ЭтоГистограмма ИЛИ ЭтоГоризонтальнаяГистограмма Тогда
			Если ЭтоГистограмма Тогда
				Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Вертикально;
			Иначе
				Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
			КонецЕсли; 
			Если Диаграмма.Серии.Количество()>5 Тогда
				Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
				Диаграмма.МаксимумСерийПроцент = ПроцентОграничения;
			КонецЕсли; 
			Диаграмма.ОбластьПостроения.Право = 0.75;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.76;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
		ИначеЕсли ЭтоКруговаяДиаграмма Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			Диаграмма.МаксимумСерийКоличество = 10;
			Диаграмма.ОбластьПостроения.Право = 0.65;
			Диаграмма.ОбластьПостроения.Низ = 0.99;
			Диаграмма.ОбластьЛегенды.Лево = 0.66;
			Диаграмма.ОбластьЛегенды.Верх = 0;
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Процент;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив цветов стандартной палитры диаграмм
// 
// Возвращаемое значение:
//  Массив - Массив элементов типа Цвет
//
Функция ЦветаСерийДиаграмм32() Экспорт
	
	Цвета = Новый Массив;
	Цвета.Добавить(Новый Цвет(245, 152, 150));
	Цвета.Добавить(Новый Цвет(142, 201, 249));
	Цвета.Добавить(Новый Цвет(255, 202, 125));
	Цвета.Добавить(Новый Цвет(178, 154, 218));
	Цвета.Добавить(Новый Цвет(163, 214, 166));
	Цвета.Добавить(Новый Цвет(244, 140, 175));
	Цвета.Добавить(Новый Цвет(125, 221, 233));
	Цвета.Добавить(Новый Цвет(255, 242, 128));
	Цвета.Добавить(Новый Цвет(205, 145, 215));
	Цвета.Добавить(Новый Цвет(125, 202, 194));
	//10
	Цвета.Добавить(Новый Цвет(229, 216, 165));
	Цвета.Добавить(Новый Цвет(178, 136, 143));
	Цвета.Добавить(Новый Цвет(135, 151, 106));
	Цвета.Добавить(Новый Цвет(94, 163, 153));
	Цвета.Добавить(Новый Цвет(163, 137, 109));
	Цвета.Добавить(Новый Цвет(169, 155, 174));
	Цвета.Добавить(Новый Цвет(122, 131, 135));
	Цвета.Добавить(Новый Цвет(132, 122, 112));
	Цвета.Добавить(Новый Цвет(240, 185, 200));
	Цвета.Добавить(Новый Цвет(158, 152, 131));
	//20
	Цвета.Добавить(Новый Цвет(107, 195, 102));
	Цвета.Добавить(Новый Цвет(188, 255, 189));
	Цвета.Добавить(Новый Цвет(150, 197, 191));
	Цвета.Добавить(Новый Цвет(193, 146, 64));
	Цвета.Добавить(Новый Цвет(197, 146, 250));
	Цвета.Добавить(Новый Цвет(210, 110, 71));
	Цвета.Добавить(Новый Цвет(158, 140, 255));
	Цвета.Добавить(Новый Цвет(114, 149, 92));
	Цвета.Добавить(Новый Цвет(126, 144, 230));
	Цвета.Добавить(Новый Цвет(252, 119, 87));
	//30
	Цвета.Добавить(Новый Цвет(127, 192, 255));
	Цвета.Добавить(Новый Цвет(179, 114, 101));
	Возврат Цвета;
	
КонецФункции

// Процедура - Объединить основные и пользовательские настройками компоновки
//
// Параметры:
//  КомпоновщикНастроек	 - 	КомпоновщикНастроекКомпоновкиДанных - Компоновщик с объединяемыми настройками
//
Процедура ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроек.ПользовательскиеНастройки);
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти 

// Возвращает картинку-образец отчета по ссылке на вариант
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов или СправочникСсылка.ВариантыДополнительных - ссылка на вариант отчета
//
// Возвращаемое значение:
//   Картинка или Неопределено - образец отчета или Неопределено в случае его отсутствия
//
Функция ОбразецВарианта(Вариант) Экспорт
	
	Образец = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Образец
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	НастройкиВариантовОтчетовУНФ.Вариант = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Значение = Выборка.Образец.Получить();
		Если ТипЗнч(Значение)=Тип("Картинка") Тогда
			Образец = Значение;
		КонецЕсли; 
	КонецЕсли;
	Возврат Образец;
	
КонецФункции

// Определяет количество элементов для заданного типа значений
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется расчет
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Число         - Количество элементов заданного типа
//
Функция ОпределитьКоличествоЭлементов(ТипЗначения, ПараметрыВыбора = Неопределено) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		Возврат МетаданныеОбъекта.ЗначенияПеречисления.Количество();
	Иначе
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли;
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли; 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(Выборка.Количество=Null, 0, Выборка.Количество);
		Иначе
			Возврат 0;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Возвращает список элементов заданного типа с учетом параметров выбора
//
// Параметры:
//   ТипЗначения     - Тип - Тип значения, для которого выполняется выборка элементов
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив из элементов типа ПараметрВыбора
//
// Возвращаемое значение: 
//   * Массив        - Массив элементов заданного типа
//
Функция ПолучитьСписокЭлементов(ТипЗначения, ПараметрыВыбора) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Ссылка = Новый(ТипЗначения);
		МетаданныеОбъекта = Ссылка.Метаданные();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		МассивЗначений = Новый Массив;
		Для каждого Значение Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
			МассивЗначений.Добавить(МенеджерОбъекта[Значение.Имя]);
		КонецЦикла; 
		Возврат МассивЗначений;
	Иначе
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначения));
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Объект.Ссылка КАК Ссылка
		|ИЗ
		|	%1 КАК Объект",
		ИмяТаблицы);
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Условия = "";
			Для каждого Параметр Из ПараметрыВыбора Цикл
				Если Найти(Параметр.Имя, "Отбор.")=0 Тогда
					Продолжить;
				КонецЕсли; 
				Если ТипЗнч(ПараметрыВыбора)=Тип("ПараметрыВыбораКомпоновкиДанных") Тогда
					Индекс = ПараметрыВыбора.Индекс(Параметр);
				ИначеЕсли ТипЗнч(ПараметрыВыбора)=Тип("Массив") Тогда 
					Индекс = ПараметрыВыбора.Найти(Параметр);
				Иначе
					Продолжить;
				КонецЕсли; 
				ИмяРеквизита = СтрЗаменить(Параметр.Имя, "Отбор.", "");
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено И НЕ СуществуетСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли; 
				Условия = Условия+
				?(ПустаяСтрока(Условия), "ГДЕ ", Символы.ПС+"	И")+
				" Объект."+ИмяРеквизита+
				?(ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") ИЛИ ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив"), " В (&Значение"+Индекс+")", " = &Значение"+Индекс);
				Если ТипЗнч(Параметр.Значение)=Тип("СписокЗначений") Тогда
					ЗначениеПараметра = Параметр.Значение.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("ФиксированныйМассив") Тогда
					ЗначениеПараметра = Новый Массив(Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Значение"+Индекс, ЗначениеПараметра);
			КонецЦикла; 
			Если НЕ ПустаяСтрока(Условия) Тогда
				Запрос.Текст = Запрос.Текст+Символы.ПС+Условия;
			КонецЕсли; 
		КонецЕсли;
		Запрос.Текст = Запрос.Текст+Символы.ПС+"АВТОУПОРЯДОЧИВАНИЕ";
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗначений.Количество()>0 Тогда
			Возврат ТаблицаЗначений.ВыгрузитьКолонку("Ссылка");
		Иначе
			Возврат Новый Массив;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

// Отмечает в списке значений используемые выбранные поля отчета
//
// Параметры:
//  Элементы - КоллекцияВыбранныхПолейКомпоновкиДанных - коллекция выбранных полей, для которой выполняется рекурсивная
//                                                       отметка полей
//  Результат - СписокЗначений - Список полей выбора, для которых нужно определить признак использования
//
Процедура ОтметитьВыбранныеПоляРекурсивно(Элементы, Результат)
	
	Для каждого ВыбранноеПоле Из Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Элемент = Результат.НайтиПоЗначению(Строка(ВыбранноеПоле.Поле));
			Если НЕ Элемент=Неопределено И ВыбранноеПоле.Использование Тогда
				Элемент.Пометка = Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыбранноеПоле)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ОтметитьВыбранныеПоляРекурсивно(ВыбранноеПоле.Элементы, Результат);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает формат вывода поля отчета
//
// Параметры:
//   Группировка - ГруппировкаКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных,
//	     ТаблицаКомпоновкиДанных или ГруппировкаТаблицыКомпоновкиДанных - Элемент структуры, для которого устанавливается
//       условное оформление с форматом поля
//   ИмяПоля - Строка - Имя поля, для которого изменяется формат вывода
//   Формат - Строка - Устанавливаемый формат вывода
//
Процедура ДобавитьУФФормат(Группировка, ИмяПоля, Формат)
	
	ЭлементОформления = Группировка.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ПолеУФ = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеУФ.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ПолеУФ.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат",Формат);
	
КонецПроцедуры

// Возвращает признак использования иерархии для описания типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов, для которого определяется использование иерархии
//
// Возвращаемое значение: 
//   * Булево      - Истина в случае если среди типов есть хоть один иерархический
//
Функция ОписаниеТиповСодержитИерархическийТип(ОписаниеТипов) Экспорт
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		ПустаяСсылка = Новый(Тип);
		ОбъектМетаданных = ПустаяСсылка.Метаданные();
		Если НЕ ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) И НЕ ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Добавляет отчет в список последних используемых отчетов
//
// Параметры:
//   Вариант - СправочникСсылка.ВариантыОтчетов, СправочникСсылка.ВариантыДополнительныхОтчетов - 
//       Вариант отчета, добавляемый в историю
//
Процедура ДобавитьОтчетВИсторию(Вариант) Экспорт
	
	История = ХранилищеСистемныхНастроек.Загрузить("СписокОтчетов", "История");
	Если ТипЗнч(История) <> Тип("Массив") Тогда
		// Очищаем пустые строки и восстанавливаем историю
		История = Новый Массив;
	КонецЕсли;
	
	Индекс = История.Найти(Вариант);
	Если Индекс <> Неопределено Тогда
		История.Удалить(Индекс);
	КонецЕсли; 
	История.Вставить(0, Вариант);
	
	ХранилищеСистемныхНастроек.Сохранить("СписокОтчетов", "История", История);
	
КонецПроцедуры

// Возвращает поле схемы компоновки данных по имени или полю компоновки данных
//
// Параметры:
//   Схема - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//   Поле - Строка, ПолеКомпоновкиДанных - Поле компоновки для которого нужно получить соответствующее поле схемы
//
// Возвращаемое значение: 
//   * ПолеНабораДанныхСхемыКомпоновкиДанных,ВычисляемоеПолеСхемыКомпоновкиДанных - Найденное поле схемы компоновки данных
//   * Неопределено                                                               - Если поле не найдено
//
Функция ПолеСхемы(Схема, Поле) Экспорт
	
	ИмяПоля = Строка(Поле);
	Если ПустаяСтрока(ИмяПоля) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Для каждого Набор Из Схема.НаборыДанных Цикл
		ПолеСхемы = Набор.Поля.Найти(ИмяПоля);
		Если НЕ ПолеСхемы = Неопределено Тогда
			Возврат ПолеСхемы;
		КонецЕсли;  
	КонецЦикла;
	ПолеСхемы = Схема.ВычисляемыеПоля.Найти(ИмяПоля);
	Если НЕ ПолеСхемы = Неопределено Тогда
		Возврат ПолеСхемы;
	КонецЕсли; 
	Возврат Неопределено;
	
КонецФункции

// Функция - Возвращает значение параметра данных компоновки
//
// Параметры:
//  Настройки						 - НастройкиКомпоновкиДанных - Настройки компоновки
//  ИмяПараметра					 - Строка					 - Имя искомого параметра
//  ЗначениеПоУмолчанию				 - Произвольный				 - Значение, возвращаемое если параметр не найден или не установлен
//  ИгнорироватьПризнакИспользования - Булево					 - Не учитывать признак "Использование" значения параметра
// 
// Возвращаемое значение:
//  Произвольный - Значение параметра компоновки данных
//
Функция ЗначениеПараметраДанных(Настройки, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено, ИгнорироватьПризнакИспользования = Ложь) ЭКспорт
		
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено ИЛИ (НЕ Параметр.Использование И НЕ ИгнорироватьПризнакИспользования) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат Параметр.Значение;
	
КонецФункции

// Ограничивает использование поля схемы компоновки данных с заданным именем
//
// Параметры:
//   Схема - СхемаКомпоновкиДанных - Схема компоновки данных отчета
//   ИмяПоля - Строка - Имя поля компоновки, которое следует ограничить
//
Процедура ОграничитьИспользованиеПоля(Схема, ИмяПоля) Экспорт
	
	ПолеСКД = ПолеСхемы(Схема, ИмяПоля);
	Если ПолеСКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеСКД.ОграничениеИспользования.Группировка = Истина;
	ПолеСКД.ОграничениеИспользования.Поле = Истина;
	ПолеСКД.ОграничениеИспользования.Порядок = Истина;
	ПолеСКД.ОграничениеИспользования.Условие = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Группировка = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Поле = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Порядок = Истина;
	ПолеСКД.ОграничениеИспользованияРеквизитов.Условие = Истина;
	
КонецПроцедуры

// Возвращает таблицу периодов для заданного промежутка 
//
// Параметры:
//   НачалоПериода - Дата - Дата начала определения периодов
//   КонецПериода - Дата - Дата конца определения периодов
//   ПараметрыОтчета - Структура - Служебные параметры формирования отчета
//
// Возвращаемое значение: 
//   * ТаблицаЗначений - Таблица периодов с колонками ПериодНачало, ПериодКонец
//
Функция ТаблицаПериодов(НачалоПериода, КонецПериода, ПараметрыОтчета) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПериодНачало");
	Результат.Колонки.Добавить("ПериодКонец");
	
	Если ПараметрыОтчета.Периодичность <> Перечисления.Периодичность.ПустаяСсылка() Тогда
		Периодичность = ПараметрыОтчета.Периодичность;
	Иначе
		Периодичность = УправлениеНебольшойФирмойОтчеты.ПолучитьЗначениеПериодичности(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ТекущаяДата = НачалоПериода;
	
	Пока ТекущаяДата <= КонецПериода Цикл
		НоваяСтрока = Результат.Добавить();
		Если Периодичность = Перечисления.Периодичность.День Тогда
			НоваяСтрока.ПериодНачало = НачалоДня(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецДня(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
			НоваяСтрока.ПериодНачало = НачалоНедели(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецНедели(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
			НоваяСтрока.ПериодНачало = НачалоДекады(ТекущаяДата);
			НоваяСтрока.ПериодКонец = КонецДекады(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
			НоваяСтрока.ПериодНачало = НачалоМесяца(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецМесяца(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			НоваяСтрока.ПериодНачало = НачалоКвартала(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецКвартала(ТекущаяДата);
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			Если Месяц(ТекущаяДата) > 6 Тогда
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 7, 1));
				НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
			Иначе
				НоваяСтрока.ПериодНачало = НачалоДня(Дата(Год(ТекущаяДата), 1, 1));
				НоваяСтрока.ПериодКонец  = КонецМесяца(Дата(Год(ТекущаяДата), 6, 1));
			КонецЕсли;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			НоваяСтрока.ПериодНачало = НачалоГода(ТекущаяДата);
			НоваяСтрока.ПериодКонец  = КонецГода(ТекущаяДата);
		Иначе
			ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отсутствует обработчик параметра Периодичность = ""%1"".'"),
			Периодичность);
		КонецЕсли;
		ТекущаяДата = НоваяСтрока.ПериодКонец + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает начало декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения начала декады
//
// Возвращаемое значение: 
//    * Дата - Дата начала декады
//
Функция НачалоДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) < 11 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 1);
	КонецЕсли;
	
	Если День(ПараметрДата) < 21 Тогда
		Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 11);
	КонецЕсли;
	
	Возврат Дата(Год(ПараметрДата), Месяц(ПараметрДата), 21);
	
КонецФункции

// Возвращает конец декады для заданной даты
//
// Параметры:
//    ПараметрДата - Дата - Дата определения конца декады
//
// Возвращаемое значение: 
//    * Дата - Дата конца декады
//
Функция КонецДекады(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если День(ПараметрДата) >= 21 Тогда
		Возврат КонецМесяца(ПараметрДата);
	КонецЕсли;
	
	Если День(ПараметрДата) >= 11 Тогда
		Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 20));
	КонецЕсли;
	
	Возврат КонецДня(Дата(Год(ПараметрДата), Месяц(ПараметрДата), 10));
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц
//
Функция МесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), 1, 0, 0, 0);		
	
КонецФункции

// Возвращает преобразованную дату, для которой актуальными остается только месяц и день, остальные части даты сбрасываются 
//
// Параметры:
//    ПараметрДата - Дата - Дата определения месяца и дня
//
// Возвращаемое значение: 
//    * Дата - Дата содержащая месяц и день
//
Функция ДеньМесяцГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Дата(1900, Месяц(ПараметрДата), День(ПараметрДата), 0, 0, 0);		
	
КонецФункции

// Возвращает номер недели года. Используется в вычисляемых полях отчетов
//
// Параметры:
//    ПараметрДата - Дата - Дата определения номера недели
//
// Возвращаемое значение: 
//    * Число - Номер недели года
//
Функция НомерНеделиГода(ПараметрДата) Экспорт
	
	Если ТипЗнч(ПараметрДата)<>Тип("Дата") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НеделяГода(ПараметрДата);		
	
КонецФункции

// Возвращает исходный текст, очищенный от html-тегов
//
// Параметры:
//    Текст - Строка - Текст с тегами
//
// Возвращаемое значение: 
//    * Строка - Текст с удаленными тегами
//
Функция ТекстБезТегов(Текст) Экспорт
	
	Результат = "";
	ОстатокСтроки = Текст;
	Позиция = Найти(ОстатокСтроки, "<");
	Пока Позиция>0 Цикл
		ТекстДо = Лев(ОстатокСтроки, Позиция-1);
		Результат = Результат+ТекстДо;
		ОстатокСтроки = Сред(ОстатокСтроки, Позиция);
		ПозицияКонца = Найти(ОстатокСтроки, ">");
		Если ПозицияКонца=0 Тогда
			ОстатокСтроки = "";
			Прервать;
		КонецЕсли; 
		ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонца+1);
		Позиция = Найти(ОстатокСтроки, "<");
	КонецЦикла;
	Результат = Результат+ОстатокСтроки;
	Возврат Результат;
	
КонецФункции

// Определяет режим отображения периода отчета.
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - объект отчета, для которого следует определить режим отображения периода.
// 
// Возвращаемое значение:
//  Строка - ОтчетыУНФКлиентСервер.РежимПериодаБезПериода()
//           ОтчетыУНФКлиентСервер.РежимПериодаЗаПериод()
//           ОтчетыУНФКлиентСервер.РежимПериодаНаДату()
//
Функция РежимОтображенияПериода(ОтчетОбъект) Экспорт
	
	ПараметрыПериодов = ПараметрыПериодовСКД(ОтчетОбъект);
	
	Если ПараметрыПериодов.Период=Неопределено Тогда
		Возврат ОтчетыУНФКлиентСервер.РежимПериодаБезПериода();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартныйПериод") Тогда
		
		Если ПараметрыПериодов.КонецПериода=Неопределено ИЛИ ПараметрыПериодов.КонецПериодаСКД=Неопределено Тогда
			Возврат ОтчетыУНФКлиентСервер.РежимПериодаЗаПериод();
		КонецЕсли;
		
		Если ПараметрыПериодов.КонецПериодаСКД.ВключатьВДоступныеПоля 
			И НЕ ПустаяСтрока(ПараметрыПериодов.КонецПериода.ИдентификаторПользовательскойНастройки) 
			И ПараметрыПериодов.КонецПериода.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
			Возврат ОтчетыУНФКлиентСервер.РежимПериодаНаДату();
		КонецЕсли;
		
		Возврат ОтчетыУНФКлиентСервер.РежимПериодаЗаПериод();
		
	ИначеЕсли ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("Дата") 
		ИЛИ ТипЗнч(ПараметрыПериодов.Период.Значение)=Тип("СтандартнаяДатаНачала") Тогда
		
		Если НЕ ПараметрыПериодов.ПериодСКД=Неопределено И НЕ ПараметрыПериодов.ПериодСКД.ОграничениеИспользования Тогда
			Возврат ОтчетыУНФКлиентСервер.РежимПериодаНаДату();
		КонецЕсли; 
		
		Если ПараметрыПериодов.КонецПериода=Неопределено Тогда
			Возврат ОтчетыУНФКлиентСервер.РежимПериодаБезПериода();
		КонецЕсли;
		
		Если НЕ ПараметрыПериодов.КонецПериодаСКД=Неопределено И НЕ ПараметрыПериодов.КонецПериодаСКД.ОграничениеИспользования Тогда
			Возврат ОтчетыУНФКлиентСервер.РежимПериодаНаДату();
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ОтчетыУНФКлиентСервер.РежимПериодаБезПериода();
	
КонецФункции

// Возвращает параметры периодов СКД.
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - объект отчета, для которого следует определить параметры периодов.
//
// Возвращаемое значение:
//  Структура - описание периодов отчета.
//
Функция ПараметрыПериодовСКД(ОтчетОбъект) Экспорт
	
	ПараметрПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СтПериод");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	КонецЕсли;
	ПараметрНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ПараметрКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ПараметрДанныхПериодичность = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Периодичность");
	
	ПараметрСхемыКонецПериода = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
	ПараметрСхемыПериод = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("СтПериод");
	Если ПараметрСхемыПериод = Неопределено Тогда
		ПараметрСхемыПериод = ОтчетОбъект.СхемаКомпоновкиДанных.Параметры.Найти("Период");
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Период", ПараметрПериод);
	Результат.Вставить("НачалоПериода", ПараметрНачалоПериода);
	Результат.Вставить("КонецПериода", ПараметрКонецПериода);
	Результат.Вставить("Периодичность", ПараметрДанныхПериодичность);
	
	Результат.Вставить("КонецПериодаСКД", ПараметрСхемыКонецПериода);
	Результат.Вставить("ПериодСКД", ПараметрСхемыПериод);
	
	Возврат Результат;
	
КонецФункции

// Извлекает Период из параметров отчета.
//
// Параметры:
//  ПараметрыДанныхЭлементы - КоллекцияЗначенийПараметровКомпоновкиДанных - коллекция значений параметров данных.
// 
// Возвращаемое значение:
//  СтандартныйПериод - период, извлеченный из параметров отчета.
//
Функция ПериодИзПараметровОтчета(ПараметрыДанныхЭлементы) Экспорт
	
	ПараметрПериод = ПараметрыДанныхЭлементы.Найти("СтПериод");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ПараметрыДанныхЭлементы.Найти("Период");
	КонецЕсли;
	ПараметрКонецПериода = ПараметрыДанныхЭлементы.Найти("КонецПериода");
	
	Если ПараметрПериод = Неопределено ИЛИ НЕ ПараметрПериод.Использование Тогда
		Если ПараметрКонецПериода = Неопределено ИЛИ НЕ ПараметрКонецПериода.Использование Тогда
			Возврат Новый СтандартныйПериод;
		ИначеЕсли ТипЗнч(ПараметрКонецПериода.Значение) = Тип("Дата") Тогда 
			Возврат Новый СтандартныйПериод('0001-01-01', ПараметрКонецПериода.Значение);
		ИначеЕсли ТипЗнч(ПараметрКонецПериода.Значение) = Тип("СтандартнаяДатаНачала") Тогда 
			Возврат Новый СтандартныйПериод('0001-01-01', ПараметрКонецПериода.Значение.Дата);
		Иначе
			Возврат Новый СтандартныйПериод;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрПериод.Значение) = Тип("Дата") Тогда
		Возврат Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
		Возврат ПараметрПериод.Значение;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		Возврат Новый СтандартныйПериод('0001-01-01', ПараметрПериод.Значение.Дата);
	КонецЕсли;
	
	Возврат Новый СтандартныйПериод;
	
КонецФункции

// Функция создает компоновщик настроек отчета и переопределяет заданные параметры и отборы
//
// Параметры:
//  СвойстваОтчета		 - Структура - ключи: "ИмяОтчета" - имя отчета как задано в конфигураторе, "КлючВарианта" (необязательный) - имя варианта отчета
//  ПараметрыИОтборы	 - Массив - массив структур для задания изменяемых параметров и отборов. Ключи структуры:
//									"ИмяПоля" (обязательный) - имя параметра или поле компоновки данных по которому задается отбор,
//									"ПравоеЗначение" (обязательный) - устанавливаемое значение параметра или отбора,
//									"ВидНастройки" (необязательный) - определяет контейнер для помещения параметра или отбора, варианты: "Настройки", "ФиксированныеНастройки",
//									прочие ключи структуры являются необязательными и задают свойства элемента отбора.
//
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек с измененными параметрами и отборами.
//
Функция ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы) Экспорт
	Перем ИмяОтчета, КлючВарианта;
	
	СвойстваОтчета.Свойство("ИмяОтчета", ИмяОтчета);
	СвойстваОтчета.Свойство("КлючВарианта", КлючВарианта);
	
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Если КлючВарианта <> Неопределено И НЕ ПустаяСтрока(КлючВарианта) Тогда
		ИскомыйВариантОтчета = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);
		Если ИскомыйВариантОтчета <> Неопределено Тогда
			Настройки = ИскомыйВариантОтчета.Настройки;
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Настройки);
	
	Для Каждого ПараметрОтбор Из ПараметрыИОтборы Цикл
		
		Если ПараметрОтбор.Свойство("ВидНастройки") Тогда
			Если ПараметрОтбор.ВидНастройки = "Настройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
			ИначеЕсли ПараметрОтбор.ВидНастройки = "ФиксированныеНастройки" Тогда
				Контейнер = КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки;
			КонецЕсли;
		Иначе
			Контейнер = КомпоновщикНастроекКомпоновкиДанных.Настройки;
		КонецЕсли;
		
		НайденныйПараметр = Контейнер.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ПараметрОтбор.ИмяПоля));
		Если НайденныйПараметр <> Неопределено Тогда
			Контейнер.ПараметрыДанных.УстановитьЗначениеПараметра(НайденныйПараметр.Параметр, ПараметрОтбор.ПравоеЗначение);
		КонецЕсли;
		
		НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Контейнер.Отбор, ПараметрОтбор.ИмяПоля);
		Для Каждого НайденныйОтбор Из НайденныеОтборы Цикл
			
			Если ТипЗнч(НайденныйОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НайденныйОтбор, ПараметрОтбор);
			
			Если НЕ ПараметрОтбор.Свойство("ВидСравнения") Тогда
				НайденныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("Использование") Тогда
				НайденныйОтбор.Использование = Истина;
			КонецЕсли;
			Если НЕ ПараметрОтбор.Свойство("РежимОтображения") Тогда
				НайденныйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеОтборы.Количество() = 0 И НайденныйПараметр = Неопределено Тогда
			ДобавленныйЭлемент = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Контейнер.Отбор, ПараметрОтбор.ИмяПоля, ВидСравненияКомпоновкиДанных.Равно);
			ЗаполнитьЗначенияСвойств(ДобавленныйЭлемент, ПараметрОтбор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКомпоновкиДанных;
	
КонецФункции

// Массив заказов.
// 
// Параметры:
//  МассивДокументов - Массив - Массив документов
// 
// Возвращаемое значение:
//  Массив - Массив заказов
Функция МассивЗаказов(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктВыполненныхРаботРаботыИУслуги.ЗаказПокупателя КАК Заказ
	|ПОМЕСТИТЬ Вт_Заказы
	|ИЗ
	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервированиеЗапасов.ЗаказПокупателя
	|ИЗ
	|	Документ.РезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	РезервированиеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетПереработчика.ДокументОснование
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|ГДЕ
	|	ОтчетПереработчика.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вт_Заказы.Заказ
	|ИЗ
	|	Вт_Заказы КАК Вт_Заказы");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ") Цикл
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирование контактов для экспорта
//
// Параметры:
//  ОтчетДанныеРасшифровки	 - 	Строка - Адрес данных расшифровки отчета
//  КонтактыОтчета			 - 	Массив - Контакты отчета
//
Процедура СформироватьКонтактыДляЭкспорта(ОтчетДанныеРасшифровки, КонтактыОтчета) Экспорт
	
	ИспользуемыеДанныеРасшифровки =  ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	
	Если ИспользуемыеДанныеРасшифровки = Неопределено 
		ИЛИ ТипЗнч(ИспользуемыеДанныеРасшифровки) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементРасшифровки Из ИспользуемыеДанныеРасшифровки.Элементы Цикл
		
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			
			ЗначенияПолей = ЭлементРасшифровки.ПолучитьПоля();
			
			Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
				
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля.Значение) 
					ИЛИ (ТипЗнч(ЗначениеПоля.Значение) <> ТИП("СправочникСсылка.Контрагенты") 
					И ТипЗнч(ЗначениеПоля.Значение) <> ТИП("СправочникСсылка.КонтактныеЛица")) Тогда 
					Продолжить; 
				КонецЕсли;
				
				ЗначениеУжеЕсть = КонтактыОтчета.Найти(ЗначениеПоля.Значение);
				Если ЗначениеУжеЕсть <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				КонтактыОтчета.Добавить(ЗначениеПоля.Значение);
											
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Добавление реквизитов и команд отправки контактов на форму отчета
//
// Параметры:
//  Форма	 - 	ФормаКлиентскогоПриложения - форма отчета
//
Процедура ДобавитьРеквизитыИКомандыОтправкиКонтактов(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ЭкспортироватьКонтактыОтчета") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ДобавитьРеквизитыОтправкиКонтактов(Форма, МассивДобавляемыхРеквизитов);
	ДобавитьКомандыОтправкиКонтактов(Форма);
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Форма.СервисМассовойРассылки = МассовыеРассылкиИнтеграция.ПодключенныйСервис();
	Форма.ИспользоватьМассовыеРассылкиИнтеграция = 
		ПолучитьФункциональнуюОпцию("ИспользоватьМассовыеРассылкиИнтеграция") 
		И ЗначениеЗаполнено(Форма.СервисМассовойРассылки);
		
	Форма.ВидСвязиЕмейл = Перечисления.ВидыКаналовСвязи.Email;
	Форма.ВидСвязиСмс   = Перечисления.ВидыКаналовСвязи.SMS;
	
	Если Форма.ИспользоватьМассовыеРассылкиИнтеграция Тогда
		ПредставлениеСервиса = МассовыеРассылкиИнтеграция.ПредставлениеСервиса(Форма.СервисМассовойРассылки);
		ЗаголовокКомандыЭкспорта = СтрШаблон(НСтр("ru = 'Экспортировать результат отчета в %1'"), ПредставлениеСервиса);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"ЭкспортироватьКонтактыОтчета", 
			"Заголовок",
			ЗаголовокКомандыЭкспорта);
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
		"ЭкспортироватьКонтактыОтчета", 
		"Видимость", 
		Форма.ИспользоватьМассовыеРассылкиИнтеграция);

КонецПроцедуры

// Удаляет отбор из настроек и пользовательских настроек отчета
// Если переданы настройки компоновки данных, то только из них.
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		ЭлементПользовательскихНастроек = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		Иначе
			Для Каждого ЭлементПользНастроек Из ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементПользНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
					ЭлементыПользовательскихОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ЭлементПользНастроек, ИмяЭлемента);
					Для Каждого ЭлементПользовательскогоОтбора Из ЭлементыПользовательскихОтборов Цикл
						ЭлементПользНастроек.Элементы.Удалить(ЭлементПользовательскогоОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет видимость организации в быстрых настройках отчета
//
// Параметры:
//  КомпоновщикНастроек	 - 	КомпоновщикНастроек, НастройкиКомпоновкиДанных - Настройки компоновки данных отчета или сам компоновщик
//
Процедура ОбновитьВидимостьОтбораОрганизация(КомпоновщикНастроек) Экспорт

	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Компания = Константы.УчетПоКомпании.Компания(Справочники.Организации.ПустаяСсылка());
	
	Если НЕ ИспользоватьНесколькоОрганизаций ИЛИ ЗначениеЗаполнено(Компания) Тогда
		УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, "Организация");
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет видимость организации в быстрых настройках отчета
//
// Параметры:
//  НастройкиКД	 - 	НастройкиКомпоновкиДанных - Настройки компоновки данных отчета
//
Процедура ОбновитьВидимостьПараметраОрганизация(НастройкиКД) Экспорт
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Компания = Константы.УчетПоКомпании.Компания(Справочники.Организации.ПустаяСсылка());
	ПараметрОрганизация = НастройкиКД.ПараметрыДанных.Элементы.Найти("Организация");
	
	Если ПараметрОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьНесколькоОрганизаций ИЛИ ЗначениеЗаполнено(Компания) Тогда
		ПараметрОрганизация.ИдентификаторПользовательскойНастройки = "";
		ПараметрОрганизация.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Если ЗначениеЗаполнено(Компания) Тогда
			ПараметрОрганизация.Значение = Компания;
			ПараметрОрганизация.Использование = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрОрганизация.ИдентификаторПользовательскойНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрОрганизация.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ПараметрОрганизация.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

// Процедура определяет видимость параметра в быстрых настройках отчета в зависимости от функциональной опции
//
// Параметры:
//  НастройкиКД			 - НастройкиКомпоновкиДанных	 - Настройки компоновки данных отчета
//  ИмяПараметра		 - Строка						 - Имя параметра КД
//  ИмяФО				 - Строка						 - Имя проверяемой функциональной опции
//  ЗначениеПоУмолчанию	 - Произвольный					 - Устанавливаемое значение параметра, если функциональная опция не используется
//
Процедура ОбновитьВидимостьПараметраПоФункциональнойОпции(НастройкиКД, ИмяПараметра, ИмяФО, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ЗначениеФО = ПолучитьФункциональнуюОпцию(ИмяФО);
	Параметр = НастройкиКД.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеФО Тогда
		Параметр.ИдентификаторПользовательскойНастройки = "";
		Параметр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			Параметр.Значение = ЗначениеПоУмолчанию;
			Параметр.Использование = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметр.ИдентификаторПользовательскойНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	Параметр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыСозданияЭлементов

// Добавляет фильтр на форму отчета
//
// Параметры:
//   Стр - ДанныеФормыЭлементДерева или СтрокаДереваЗначений - строка описания фильтра
//   Форма - ФормаКлиентскогоПриложения - Экземпляр формы отчета, на которую добавляется фильтр
//   ПараметрыВыбора - ФиксированныйМассив - Фиксированный массив элементов типа ПараметрВыбора
//   СвязиПараметровВыбора - ФиксированныйМассив - Фиксированный массив элементов типа СвязьПараметраВыбора
//
// Места использования:
//   ОбщаяФорма.ОтчетыУНФ.ВнестиИзмененияВРеквизитыНаФорме()
//
Процедура ДобавитьЭлементФильтр(Стр, Форма, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Элементы = Форма.Элементы;
	Если Стр.ВидЭлемента="Поле" Тогда
		СоздатьФильтрПолеВвода(Стр, Форма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора);
	ИначеЕсли Стр.ВидЭлемента="Период" Тогда
		СоздатьФильтрПериод(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Пределы" Тогда
		СоздатьФильтрПределы(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Тумблер" Тогда
		СоздатьФильтрТумблер(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Флажок" Тогда
		СоздатьФильтрФлажки(Стр, Форма, Элементы);
	ИначеЕсли Стр.ВидЭлемента="Булево" Тогда
		СоздатьФильтрБулево(Стр, Форма, Элементы);
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область РассылкаОтчетов

// Настройки рассылаемых отчетов хранятся в пользовательских настройках, которые в УНФ не используются.
// Здесь перед формированием объединяем пользовательские настройки, заданные в настройках рассылки с обычными
// настройками отчета.
//
// Параметры:
//  ПараметрыФормирования - Структура:
//    * ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - настройки отчета,
//                                    установленные для соответствующей рассылки.
//  ДополнительныеПараметры - Структура:
//    * Отчет - СправочникСсылка.ВариантыОтчетов - ссылка на хранилище настроек варианта рассылаемого отчета.
//    * Объект - ОтчетОбъект - объект рассылаемого отчета.
//    * СКД - Булево - признак того, что отчет строится посредством системы компоновки данных.
//    * КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек рассылаемого отчета.
//
Процедура ПодготовитьПараметрыДляРассылки(ПараметрыФормирования, ДополнительныеПараметры) Экспорт

	Если Не ДополнительныеПараметры.СКД Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыФормирования.Свойство("ПользовательскиеНастройкиКД") Тогда
		ПользовательскиеНастройкиКД = ПараметрыФормирования.ПользовательскиеНастройкиКД;
	Иначе
		ПользовательскиеНастройкиКД = ДополнительныеПараметры.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	КонецЕсли;
	ДополнительныеПараметры.КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	ДополнительныеПараметры.КомпоновщикНастроекКД.ЗагрузитьНастройки(
		ДополнительныеПараметры.КомпоновщикНастроекКД.ПолучитьНастройки());

	РежимПериода = РежимОтображенияПериода(ДополнительныеПараметры.Объект);
	Период = ПериодИзПараметровОтчета(ДополнительныеПараметры.КомпоновщикНастроекКД.Настройки.ПараметрыДанных.Элементы);

	ПредставлениеПериодаВЗаголовке = ОтчетыУНФКлиентСервер.ПредставлениеПериодаВЗаголовке(РежимПериода, Период.ДатаНачала,
		Период.ДатаОкончания, Ложь);

	ЗаголовокОтчета = ОтчетыУНФКлиентСервер.Заголовок(ДополнительныеПараметры.Отчет, РежимПериода, Период.ДатаНачала,
		Период.ДатаОкончания, ПредставлениеПериодаВЗаголовке);

	ДополнительныеПараметры.КомпоновщикНастроекКД.Настройки.ДополнительныеСвойства.Вставить("Заголовок", ЗаголовокОтчета);

	ПараметрыФормирования.Вставить("НастройкиКД", ДополнительныеПараметры.КомпоновщикНастроекКД.Настройки);

КонецПроцедуры

#КонецОбласти

#Область УниверсальныйОтчет

// Возвращает отбор источника для Универсального отчета БСП.
// Вызов требуется для компенсации нарушения https://its.1c.ru/db/v8std#content:474:hdoc
// в некоторых объектах УНФ.
//
// Параметры:
//  МетаданныеИсточника	 - ОбъектМетаданных
//  ПараметрыОтчета		 - Структура
// 
// Возвращаемое значение:
//  Строка - ОтборИсточника для переопределения в модуле менеджера Универсального отчета.
//
Функция ОтборИсточникаУниверсальногоОтчета(Знач МетаданныеИсточника, Знач ПараметрыОтчета) Экспорт
	
	ОтборИсточника = "";
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" 
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "Задачи"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "БизнесПроцессы" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.ИмяТаблицы)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеИсточника, "ТабличныеЧасти")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МетаданныеИсточника.ТабличныеЧасти, ПараметрыОтчета.ИмяТаблицы) Тогда 
			ОтборИсточника = " КАК ВиртуальнаяТаблица
				|{ГДЕ
				|	(ВиртуальнаяТаблица.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)}";
		Иначе
			ОтборИсточника = " КАК ВиртуальнаяТаблица
				|{ГДЕ
				|	(ВиртуальнаяТаблица.Дата МЕЖДУ &НачалоПериода И &КонецПериода)}";
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты"
		Или ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
		ОтборИсточника = "({&НачалоПериода}, {&КонецПериода}, Авто) КАК ВиртуальнаяТаблица";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки"
		Или ПараметрыОтчета.ИмяТаблицы = "СрезПоследних" Тогда
		ОтборИсточника = "({&КонецПериода},) КАК ВиртуальнаяТаблица";
	ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "СрезПервых" Тогда
		ОтборИсточника = "({&НачалоПериода},) КАК ВиртуальнаяТаблица";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений"
		И МетаданныеИсточника.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ОтборИсточника = " КАК ВиртуальнаяТаблица
			|{ГДЕ
			|	(ВиртуальнаяТаблица.Период МЕЖДУ &НачалоПериода И &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыНакопления"
		Или ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыБухгалтерии" Тогда
		ОтборИсточника = " КАК ВиртуальнаяТаблица
			|{ГДЕ
			|	(ВиртуальнаяТаблица.Период МЕЖДУ &НачалоПериода И &КонецПериода)}";
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыРасчета" Тогда
		ОтборИсточника = " КАК ВиртуальнаяТаблица
			|{ГДЕ
			|	ВиртуальнаяТаблица.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода}";
	КонецЕсли;
	
	Возврат ОтборИсточника;
	
КонецФункции

#КонецОбласти

#Область СтандартизацияПрограммногоИзмененияФормыОтчета

Процедура УстановитьПараметрОтчетаПоУмолчанию(НастройкиСКД, ИмяПараметра, Значение) Экспорт
	
	ЗначениеПараметраКД = НастройкиСКД.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ЗначениеПараметраКД=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЗначениеПараметраКД.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраКД.Значение = Значение;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ОбновитьОтчеты(МассивИдентификаторов = Неопределено)
	
	Результаты = РезультатыЗапросаВариантыОтчетов(МассивИдентификаторов);
	
	НачатьТранзакцию();
	
	УдалитьНеактуальныеНастройки(Результаты);
	ОбновитьНастройкиОтчетов(Результаты);
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

Функция РезультатыЗапросаВариантыОтчетов(МассивИдентификаторов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", ?(МассивИдентификаторов=Неопределено, Новый Массив, МассивИдентификаторов));
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.Ссылка КАК Вариант,
	|	ВариантыОтчетов.КлючВарианта
	|ПОМЕСТИТЬ АктуальныеВарианты
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И (&БезОтбора
	|			ИЛИ ВариантыОтчетов.Отчет В (&Отчеты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ЕСТЬNULL(ВариантыДополнительныхОтчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ВариантыДополнительныхОтчетов.ПустаяСсылка)),
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ДополнительныеОтчетыИОбработкиКоманды.Ссылка = ВариантыДополнительныхОтчетов.Отчет
	|			И ДополнительныеОтчетыИОбработкиКоманды.Идентификатор = ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ГДЕ
	|	НЕ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ПометкаУдаления
	|	И НЕ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ИспользуетХранилищеВариантов
	|	И (ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
	|			ИЛИ ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет))
	|	И &БезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Вариант
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	НЕ НастройкиВариантовОтчетовУНФ.Вариант В
	|				(ВЫБРАТЬ
	|					АктуальныеВарианты.Вариант
	|				ИЗ
	|					АктуальныеВарианты КАК АктуальныеВарианты)
	|	И (&БезОтбора
	|			ИЛИ НастройкиВариантовОтчетовУНФ.Вариант.Отчет В (&Отчеты))
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиВариантовОтчетовУНФ.Вариант
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПривязкаПолейОтчетовУНФ.Вариант
	|ИЗ
	|	РегистрСведений.ПривязкаПолейОтчетовУНФ КАК ПривязкаПолейОтчетовУНФ
	|ГДЕ
	|	НЕ ПривязкаПолейОтчетовУНФ.Вариант В
	|				(ВЫБРАТЬ
	|					АктуальныеВарианты.Вариант
	|				ИЗ
	|					АктуальныеВарианты КАК АктуальныеВарианты)
	|	И (&БезОтбора
	|			ИЛИ ПривязкаПолейОтчетовУНФ.Вариант.Отчет В (&Отчеты))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПривязкаПолейОтчетовУНФ.Вариант
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеВарианты.Отчет КАК Отчет,
	|	АктуальныеВарианты.Вариант,
	|	АктуальныеВарианты.КлючВарианта
	|ИЗ
	|	АктуальныеВарианты КАК АктуальныеВарианты
	|ИТОГИ ПО
	|	Отчет";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура УдалитьНеактуальныеНастройки(Результаты)
	
	ВыборкаНастройки = Результаты[1].Выбрать();
	Пока ВыборкаНастройки.Следующий() Цикл
		Набор = РегистрыСведений.НастройкиВариантовОтчетовУНФ.СоздатьНаборЗаписей();
		Набор.Отбор.Вариант.Установить(ВыборкаНастройки.Вариант);
		Набор.Записать(Истина);
	КонецЦикла; 
	
	ВыборкаПоля = Результаты[2].Выбрать();
	Пока ВыборкаПоля.Следующий() Цикл
		Набор = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьНаборЗаписей();
		Набор.Отбор.Вариант.Установить(ВыборкаНастройки.Вариант);
		Набор.Записать(Истина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиОтчетов(Результаты)
	
	ВыборкаОтчеты = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтчеты.Следующий() Цикл
		НастройкиОтчета = Новый Структура;
		ИнициализироватьНастройкиОтчета(НастройкиОтчета);
		НастройкиВариантов = Новый Соответствие;
		Если ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			Попытка
				ОтчетОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВыборкаОтчеты.Отчет);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить дополнительный внешний отчет ""%1"" по причине:
				|%2'"), 
				ВыборкаОтчеты.Отчет, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
				ВыборкаОтчеты.Отчет,
				ТекстСообщения);
				
				Продолжить;
			КонецПопытки;
			МетаданныеОбъекта = ОтчетОбъект.Метаданные();
		ИначеЕсли ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			Или ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			МетаданныеОбъекта = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВыборкаОтчеты.Отчет);
			ОтчетОбъект = Новый(Тип("ОтчетОбъект."+МетаданныеОбъекта.Имя));
		Иначе
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") И НЕ ВыборкаОтчеты.Отчет.ИспользуетХранилищеВариантов Тогда
			// Для дополнительных отчетов, не использующих хранилище вариантов, требуется актуализация справочника ВариантыДополнительныхОтчетов
			ВыборкаВарианты = ВыборкаОтчеты.Выбрать();
			Пока ВыборкаВарианты.Следующий() Цикл
				СтруктураНастроек = Новый Структура;
				ИнициализироватьНастройкиВарианта(СтруктураНастроек);
				Если ЗначениеЗаполнено(ВыборкаВарианты.Вариант) Тогда
					СтруктураНастроек.Вставить("Вариант", ВыборкаВарианты.Вариант);
				КонецЕсли; 
				НастройкиВариантов[ВыборкаВарианты.КлючВарианта] = СтруктураНастроек;
			КонецЦикла;
			НайтиСоздатьДополнительныеВарианты(ВыборкаОтчеты.Отчет, НастройкиВариантов);
		Иначе
			// Обновление настроек предопределенных вариантов
			Для Каждого Стр Из ТаблицаВариантовПредопределенногоОтчета(ВыборкаОтчеты.Отчет) Цикл
				СтруктураНастроек = Новый Структура;
				ИнициализироватьНастройкиВарианта(СтруктураНастроек);
				СтруктураНастроек.Вставить("Вариант", Стр.Ссылка);
				СтруктураНастроек.Вставить("КлючВарианта", Стр.КлючВарианта);
				НастройкиВариантов[Стр.КлючВарианта] = СтруктураНастроек;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ МетаданныеОбъекта=Неопределено И НЕ МетаданныеОбъекта.Реквизиты.Найти("ЭтоОтчетУНФ")=Неопределено И ОтчетОбъект.ЭтоОтчетУНФ Тогда
			Попытка
				ОтчетОбъект.ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при вызове обработчика ""ПриОпределенииНастроекОтчета"" в отчете ""%1"" по причине:
				|%2'"), 
				ВыборкаОтчеты.Отчет, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
				ВыборкаОтчеты.Отчет,
				ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого ОписаниеНастроек Из НастройкиВариантов Цикл
			СтруктураНастроек = ОписаниеНастроек.Значение;
			Если ПустаяСтрока(ОписаниеНастроек.Ключ) Тогда
				Для каждого Элемент Из НастройкиОтчета Цикл
					СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла; 
			КонецЕсли; 
			ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, ОтчетОбъект, ОписаниеНастроек.Ключ);
			СтруктураНастроек.Вставить("ЭтоВнешнийОтчет", ТипЗнч(ВыборкаОтчеты.Отчет)=Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			ОбновитьНастройкиВарианта(СтруктураНастроек.Вариант, СтруктураНастроек);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьДополнительныеВарианты(ДопОтчет, НастройкиВариантов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ДопОтчет.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка,
	|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Отчет = &Отчет";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Вариант = Выборка.Ссылка.ПолучитьОбъект();
		Вариант.Автор = ДопОтчет.Ответственный;
		Если НЕ НастройкиВариантов.Получить(Выборка.ИдентификаторКоманды)=Неопределено Тогда
			НастройкиВариантов[Выборка.ИдентификаторКоманды].Вставить("Вариант", Выборка.Ссылка);
			Вариант.ПометкаУдаления = ДопОтчет.ПометкаУдаления;
			Вариант.Записать();
		Иначе
			// Устаревший вариант дополнительного отчета
			Вариант.Записать();
			Вариант.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ДопОтчет.ИспользуетХранилищеВариантов Тогда
		Для каждого Стр Из ДопОтчет.Команды Цикл
			СтруктураНастроек = НастройкиВариантов[Стр.Идентификатор];
			Если СтруктураНастроек.Свойство("Вариант") Тогда
				Продолжить;
			КонецЕсли; 
			Вариант = Справочники.ВариантыДополнительныхОтчетов.СоздатьЭлемент();
			Вариант.Наименование = Стр.Представление;
			Вариант.Отчет = ДопОтчет.Ссылка;
			Вариант.ИдентификаторКоманды = Стр.Идентификатор;
			Вариант.ПометкаУдаления = ДопОтчет.ПометкаУдаления;
			Вариант.Автор = ДопОтчет.Ответственный;
			Вариант.Контекстный = ДопОтчет.Назначение.Количество()>0;
			Вариант.Записать();
			СтруктураНастроек.Вставить("Вариант", Вариант.Ссылка);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьОбразецВСтруктуруНастроекВарианта(СтруктураНастроек, Отчет, КлючВарианта)
	
	МетаданныеОтчета = Отчет.Метаданные();
	
	ИмяМакета = "";
	СтруктураНастроек.Свойство("ИмяМакетаОбразца", ИмяМакета);
	Если НЕ ЗначениеЗаполнено(ИмяМакета) И Найти(КлючВарианта, " ")=0 Тогда
		ИмяМакета = "Образец"+КлючВарианта;
	КонецЕсли;
	Если ПустаяСтрока(ИмяМакета) Тогда
		СтруктураНастроек.Вставить("Образец");
		Возврат;
	КонецЕсли; 
	
	Если МетаданныеОтчета.Макеты.Найти(ИмяМакета)=Неопределено Тогда
		СтруктураНастроек.Вставить("Образец");
		Возврат;
	КонецЕсли; 
	
	Макет = Отчет.ПолучитьМакет(ИмяМакета);
	Если ТипЗнч(Макет)=Тип("ДвоичныеДанные") Тогда
		СтруктураНастроек.Вставить("Образец", Макет);
	Иначе
		СтруктураНастроек.Вставить("Образец");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтключитьДополнительныйОтчет(ДополнительныйОтчет)
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйОтчет.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДополнительныйОтчет.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ДополнительныеОтчетыИОбработкиКоманды.Ссылка = ВариантыДополнительныхОтчетов.Отчет
	|			И ДополнительныеОтчетыИОбработкиКоманды.Идентификатор = ВариантыДополнительныхОтчетов.ИдентификаторКоманды
	|ГДЕ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка = &Ссылка
	|	И НЕ ВариантыДополнительныхОтчетов.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиВарианта(Вариант, СтруктураНастроек, ЗаменятьСуществующие = Ложь)
	
	Запись = РегистрыСведений.НастройкиВариантовОтчетовУНФ.СоздатьМенеджерЗаписи();
	Запись.Вариант = Вариант;
	Запись.Прочитать();
	Если НЕ ЗаменятьСуществующие И Запись.Выбран() И СтруктураНастроек.ЭтоВнешнийОтчет Тогда
		// Настройки дополнительных отчетов автоматически обновляются только один раз
		Возврат;
	КонецЕсли; 
	Если (НЕ Запись.ИзмененаПользователем ИЛИ ЗаменятьСуществующие) И НастройкаОтчетаИзменена(Запись, СтруктураНастроек) Тогда
		Запись.Вариант = Вариант;
		Если СтруктураНастроек.Свойство("Теги") Тогда
			Запись.Теги = СтруктураНастроек.Теги;
		Иначе
			Запись.Теги = "";
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("Рекомендуемый") Тогда
			Запись.Рекомендуемый = СтруктураНастроек.Рекомендуемый;
		Иначе
			Запись.Рекомендуемый = Ложь;
		КонецЕсли; 
		Если СтруктураНастроек.Свойство("ФункциональнаяОпция") Тогда
			Запись.ФункциональнаяОпция = СтруктураНастроек.ФункциональнаяОпция;
		Иначе
			Запись.ФункциональнаяОпция = "";
		КонецЕсли; 
		Если НЕ СтруктураНастроек.Свойство("Образец") ИЛИ НЕ ТипЗнч(СтруктураНастроек.Образец)=Тип("ДвоичныеДанные") Тогда
			Запись.Образец = Новый ХранилищеЗначения(Неопределено);
		Иначе
			Запись.Образец = Новый ХранилищеЗначения(Новый Картинка(СтруктураНастроек.Образец));
		КонецЕсли;
		Запись.ИзмененаПользователем = ЗаменятьСуществующие;
		Запись.Записать(Истина);
	КонецЕсли;
	
	// Связанные поля отчета
	ОбновитьПривязки = Истина;
	Набор = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьНаборЗаписей();
	Набор.Отбор.Вариант.Установить(Вариант);
	Набор.Прочитать();
	Для каждого Запись Из Набор Цикл
		Если Запись.ИзмененаПользователем Тогда
			// Если редактировалось пользователем - не изменяем
			ОбновитьПривязки = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если ОбновитьПривязки ИЛИ ЗаменятьСуществующие Тогда
		Набор.Очистить();
		Набор.Записать(Истина);
	КонецЕсли; 
	
	Если СтруктураНастроек.Свойство("СвязанныеПоля") И (ОбновитьПривязки ИЛИ ЗаменятьСуществующие) Тогда
		Для каждого ОписаниеПоля Из СтруктураНастроек.СвязанныеПоля Цикл
			Попытка
				ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеПоля.Объект);
			Исключение
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Неверное описание типа связанного поля ""%1"" в модуле ""%2"", вариант ""%3""'"), 
				ОписаниеПоля.Объект,
				Вариант.Отчет.ПолноеИмя,
				Вариант.КлючВарианта);
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ПривязкаПолейОтчетовУНФ,,
				ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки; 
			Если ЗначениеЗаполнено(ОписаниеПоля.ДополнительныйРазрез) Тогда
				// Если есть настройка с дополнительным разрезом, удаляем общую настройку
				Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
				Запись.Вариант = Вариант;
				Запись.Объект = ИдентификаторОбъекта;
				Запись.Поле = ОписаниеПоля.Поле;
				Запись.ДополнительныйРазрез = Неопределено;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.Удалить();
				КонецЕсли; 
			КонецЕсли; 
			Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
			Запись.Вариант = Вариант;
			Запись.Объект = ИдентификаторОбъекта;
			ЗаполнитьЗначенияСвойств(Запись, ОписаниеПоля,, "Объект");
			Запись.ИзмененаПользователем = ЗаменятьСуществующие;
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТипЗнч(Вариант)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") И (ОбновитьПривязки ИЛИ ЗаменятьСуществующие) Тогда
		// Дополнительный контекстный отчет
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Вариант);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
		|		ПО ВариантыДополнительныхОтчетов.Отчет = ДополнительныеОтчетыИОбработкиНазначение.Ссылка
		|ГДЕ
		|	ВариантыДополнительныхОтчетов.Ссылка = &Ссылка
		|	И НЕ ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ПривязкаПолейОтчетовУНФ.СоздатьМенеджерЗаписи();
			Запись.Вариант = Вариант;
			Запись.Объект = Выборка.ОбъектНазначения;
			Запись.ИзмененаПользователем = ЗаменятьСуществующие;
			Запись.Записать(Истина);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция НастройкаОтчетаИзменена(Запись, СтруктураВарианта)
	
	Если НЕ Запись.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("Теги") И НЕ Запись.Теги=СтруктураВарианта.Теги Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("ФункциональнаяОпция") И НЕ Запись.ФункциональнаяОпция=СтруктураВарианта.ФункциональнаяОпция Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураВарианта.Свойство("Рекомендуемый") И НЕ Запись.Рекомендуемый=СтруктураВарианта.Рекомендуемый Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеХранилища = Запись.Образец.Получить();
	Если НЕ ТипЗнч(ДанныеХранилища)=Тип("Картинка") И ТипЗнч(СтруктураВарианта.Образец)=Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ ТипЗнч(СтруктураВарианта.Образец)=Тип("ДвоичныеДанные") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеХранилища)=Тип("Картинка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанныеКартинки = ДанныеХранилища.ПолучитьДвоичныеДанные();
	Если НЕ ТипЗнч(ДвоичныеДанныеКартинки)=Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДвоичныеДанныеКартинки.Размер()=СтруктураВарианта.Образец.Размер() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Процедура АктуализироватьТеги(МассивИдентификаторов = Неопределено)
	
	МассивТегов = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", МассивИдентификаторов);
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиВариантовОтчетовУНФ.Теги
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|ГДЕ
	|	(&БезОтбора
	|			ИЛИ НастройкиВариантовОтчетовУНФ.Вариант.Отчет В (&Отчеты))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПорцияТегов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Теги);
		Для каждого Тег Из ПорцияТегов Цикл
			Если МассивТегов.Найти(Тег)=Неопределено Тогда
				МассивТегов.Добавить(Тег);
			КонецЕсли; 
		КонецЦикла;  
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Теги", МассивТегов);
	Запрос.УстановитьПараметр("БезОтбора", НЕ ЗначениеЗаполнено(МассивИдентификаторов));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТегиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	НЕ ТегиОтчетов.Наименование В (&Теги)
	|	И &БезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТегиОтчетов.Ссылка,
	|	ТегиОтчетов.Наименование
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование В(&Теги)";
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаКУдалению = Результат[0].Выбрать();
	МассивСуществующих = Результат[1].Выгрузить().ВыгрузитьКолонку("Наименование");
	
	Пока ВыборкаКУдалению.Следующий() Цикл
		Спр = ВыборкаКУдалению.Ссылка.ПолучитьОбъект();
		Спр.Удалить();
	КонецЦикла;  
	
	Для каждого Тег Из МассивТегов Цикл
		Если НЕ МассивСуществующих.Найти(Тег)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Спр = Справочники.ТегиОтчетов.СоздатьЭлемент();
		Спр.Наименование = Тег;
		Спр.Записать();
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область СписокОтчетов

Функция ТекстЗапросаТаблицаОтчетов(Параметры)
	
	ЭлементыЗапроса = Новый Массив;
	ЭлементыЗапроса.Добавить( 
	"ВЫБРАТЬ
	|	Подсистемы.Ссылка КАК Подсистема,
	|	Подсистемы.РазделСсылка КАК РазделСсылка,
	|	Подсистемы.Представление КАК Представление,
	|	Подсистемы.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ Подсистемы
	|ИЗ
	|	&ТаблицаПодсистем КАК Подсистемы");
	Если Параметры.Раздел = РазделПоследние() Тогда
		ЭлементыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Таб.Вариант КАК Вариант,
		|	Таб.Порядок КАК Порядок
		|ПОМЕСТИТЬ ТаблицаОтчетов
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтчетов.Вариант КАК Вариант,
		|	ТаблицаОтчетов.Порядок КАК Порядок,
		|	ИСТИНА КАК Использование,
		|	ЕСТЬNULL(ВариантыОтчетовРазмещение.Подсистема, ПредопределенныеВариантыОтчетовРазмещение.Подсистема) КАК Подсистема,
		|	ЛОЖЬ КАК Важный,
		|	ЛОЖЬ КАК СмТакже
		|ПОМЕСТИТЬ ВариантыОтчетов
		|ИЗ
		|	ТаблицаОтчетов КАК ТаблицаОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК ВариантыОтчетовРазмещение
		|		ПО ТаблицаОтчетов.Вариант = ВариантыОтчетовРазмещение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК ПредопределенныеВариантыОтчетовРазмещение
		|			ПО ВариантыОтчетов.ПредопределенныйВариант = ПредопределенныеВариантыОтчетовРазмещение.Ссылка
		|		ПО ТаблицаОтчетов.Вариант = ВариантыОтчетов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ВариантыОтчетовРазмещение.Подсистема, ПредопределенныеВариантыОтчетовРазмещение.Подсистема) В
		|			(ВЫБРАТЬ
		|				Подсистемы.Подсистема
		|			ИЗ
		|				Подсистемы КАК Подсистемы
		|			ГДЕ
		|				Подсистемы.РазделСсылка = &Подсистема)");
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПоОбъекту) Тогда
		ЭлементыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Таб.Вариант КАК Вариант,
		|	Таб.Порядок КАК Порядок,
		|	Таб.Важный КАК Важный
		|ПОМЕСТИТЬ ТаблицаОтчетов
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтчетов.Вариант КАК Вариант,
		|	ТаблицаОтчетов.Порядок КАК Порядок,
		|	ИСТИНА КАК Использование,
		|	&Подсистема КАК Подсистема,
		|	ЕСТЬNULL(ВариантыОтчетовРазмещение.Важный, ЕСТЬNULL(ПредопределенныеВариантыОтчетовРазмещение.Важный, ТаблицаОтчетов.Важный)) КАК Важный,
		|	ЕСТЬNULL(ВариантыОтчетовРазмещение.СмТакже, ЕСТЬNULL(ПредопределенныеВариантыОтчетовРазмещение.СмТакже, ЛОЖЬ)) КАК СмТакже
		|ПОМЕСТИТЬ ВариантыОтчетов
		|ИЗ
		|	ТаблицаОтчетов КАК ТаблицаОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК ВариантыОтчетовРазмещение
		|		ПО ТаблицаОтчетов.Вариант = ВариантыОтчетовРазмещение.Ссылка
		|			И (ВариантыОтчетовРазмещение.Подсистема = &Подсистема)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК ПредопределенныеВариантыОтчетовРазмещение
		|			ПО ВариантыОтчетов.ПредопределенныйВариант = ПредопределенныеВариантыОтчетовРазмещение.Ссылка
		|				И (ПредопределенныеВариантыОтчетовРазмещение.Подсистема = &Подсистема)
		|		ПО ТаблицаОтчетов.Вариант = ВариантыОтчетов.Ссылка");
	Иначе
		ЭлементыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетовРазмещение.Ссылка КАК Вариант,
		|	ВариантыОтчетовРазмещение.Ссылка.Наименование КАК Порядок,
		|	ВариантыОтчетовРазмещение.Ссылка.ПредопределенныйВариант КАК ПредопределенныйВариант,
		|	ВариантыОтчетовРазмещение.Использование КАК Использование,
		|	ВариантыОтчетовРазмещение.Подсистема КАК Подсистема,
		|	ВариантыОтчетовРазмещение.Важный КАК Важный,
		|	ВариантыОтчетовРазмещение.СмТакже КАК СмТакже
		|ПОМЕСТИТЬ ПользовательскиеРазмещения
		|{ВЫБРАТЬ
		|	Вариант.* КАК Ссылка}
		|ИЗ
		|	Справочник.ВариантыОтчетов.Размещение КАК ВариантыОтчетовРазмещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыОтчетов.Ссылка КАК Вариант,
		|	ВариантыОтчетов.Ссылка.Наименование КАК Порядок,
		|	ПредопределенныеВариантыОтчетовРазмещение.Ссылка.Включен КАК Использование,
		|	ПредопределенныеВариантыОтчетовРазмещение.Подсистема КАК Подсистема,
		|	ПредопределенныеВариантыОтчетовРазмещение.Важный КАК Важный,
		|	ПредопределенныеВариантыОтчетовРазмещение.СмТакже КАК СмТакже
		|ПОМЕСТИТЬ ВариантыОтчетов
		|{ВЫБРАТЬ
		|	Вариант.* КАК Ссылка}
		|ИЗ
		|	Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК ПредопределенныеВариантыОтчетовРазмещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеРазмещения КАК ПользовательскиеРазмещения
		|		ПО ПредопределенныеВариантыОтчетовРазмещение.Ссылка = ПользовательскиеРазмещения.ПредопределенныйВариант
		|			И ПредопределенныеВариантыОтчетовРазмещение.Подсистема = ПользовательскиеРазмещения.Подсистема
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|		ПО ПредопределенныеВариантыОтчетовРазмещение.Ссылка = ВариантыОтчетов.ПредопределенныйВариант
		|ГДЕ
		|	ПользовательскиеРазмещения.Вариант ЕСТЬ NULL
		|	И ПредопределенныеВариантыОтчетовРазмещение.Подсистема В
		|			(ВЫБРАТЬ
		|				Подсистемы.Подсистема
		|			ИЗ
		|				Подсистемы КАК Подсистемы
		|			ГДЕ
		|				Подсистемы.РазделСсылка = &Подсистема)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользовательскиеРазмещения.Вариант,
		|	ПользовательскиеРазмещения.Порядок,
		|	ПользовательскиеРазмещения.Использование,
		|	ПользовательскиеРазмещения.Подсистема,
		|	ПользовательскиеРазмещения.Важный,
		|	ПользовательскиеРазмещения.СмТакже
		|ИЗ
		|	ПользовательскиеРазмещения КАК ПользовательскиеРазмещения
		|ГДЕ
		|	ПользовательскиеРазмещения.Подсистема В
		|			(ВЫБРАТЬ
		|				Подсистемы.Подсистема
		|			ИЗ
		|				Подсистемы КАК Подсистемы
		|			ГДЕ
		|				Подсистемы.РазделСсылка = &Подсистема)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВариантыДополнительныхОтчетов.Ссылка,
		|	ВариантыДополнительныхОтчетов.Наименование,
		|	ИСТИНА,
		|	&Подсистема,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов");
	КонецЕсли;
	
	ЭлементыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТабВариантыОтчетов.Вариант КАК Справочник.ВариантыОтчетов) КАК Вариант,
	|	ТабВариантыОтчетов.Порядок КАК Порядок,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ИдентификаторыОбъектовМетаданных
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных).Имя
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ИдентификаторыОбъектовРасширений
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовРасширений).Имя
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык
	|				И (ВариантыОтчетов.Пользовательский
	|					ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВариантыОтчетов.Наименование
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И (ВариантыОтчетов.Пользовательский
	|					ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияОтчетов.Наименование, ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Наименование, ОтчетыРасширений.Наименование), ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Наименование, ПредставленияОтчетовРасширений.Наименование), ПредставленияОтчетов.Наименование) КАК СТРОКА(1000))
	|	КОНЕЦ КАК Наименование,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвторТекущийПользователь,
	|	ВариантыОтчетов.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Описание, ОтчетыРасширений.Описание), """") КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ПредставленияОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПредставленияОтчетов.Описание КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Описание, ПредставленияОтчетовРасширений.Описание), ВариантыОтчетов.Описание) КАК СТРОКА(1000))
	|	КОНЕЦ КАК Описание,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК Теги,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО) КАК Образец,
	|	ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык
	|				И (ВариантыОтчетов.Пользовательский
	|					ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВариантыОтчетов.Наименование
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И (ВариантыОтчетов.Пользовательский
	|					ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияОтчетов.Наименование, ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Наименование, ОтчетыРасширений.Наименование), ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Наименование, ПредставленияОтчетовРасширений.Наименование), ПредставленияОтчетов.Наименование) КАК СТРОКА(1000))
	|	КОНЕЦ + ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Описание, ОтчетыРасширений.Описание), """") КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ПредставленияОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПредставленияОтчетов.Описание КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Описание, ПредставленияОтчетовРасширений.Описание), ВариантыОтчетов.Описание) КАК СТРОКА(1000))
	|	КОНЕЦ + (ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыОтчетов.НаименованияПолей, """") КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыОтчетов.Автор.Наименование, """") КАК СТРОКА(1000))) КАК СтрокаПоиска,
	|	ЕСТЬNULL(ОтчетыКонфигурации.Включен, ИСТИНА) КАК Включен,
	|	ТабВариантыОтчетов.Подсистема КАК Подсистема,
	|	Подсистемы.Приоритет КАК ПодсистемаПриоритет,
	|	ТабВариантыОтчетов.Важный КАК Важный,
	|	ТабВариантыОтчетов.СмТакже КАК СмТакже,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиВариантовОтчетовПользователяПодсистемы.Видимость ЕСТЬ NULL
	|			ТОГДА НастройкиВариантовОтчетовПользователяПодсистемы.Видимость
	|		КОГДА НЕ НастройкиВариантовОтчетовПользователя.Видимость ЕСТЬ NULL
	|			ТОГДА НастройкиВариантовОтчетовПользователя.Видимость
	|		КОГДА НЕ НастройкиВариантовОтчетовПодсистема.Видимость ЕСТЬ NULL
	|			ТОГДА НастройкиВариантовОтчетовПодсистема.Видимость
	|		КОГДА НЕ НастройкиВариантовОтчетовОбщие.Видимость ЕСТЬ NULL
	|			ТОГДА НастройкиВариантовОтчетовОбщие.Видимость
	|		ИНАЧЕ ТабВариантыОтчетов.Использование
	|	КОНЕЦ КАК Видимость,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Внешний
	|ИЗ
	|	ВариантыОтчетов КАК ТабВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ТабВариантыОтчетов.Вариант = ВариантыОтчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовУНФ.Вариант
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетовОбщие
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовОбщие.Вариант
	|			И (НастройкиВариантовОтчетовОбщие.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка)))
	|			И (НастройкиВариантовОтчетовОбщие.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетовПодсистема
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовПодсистема.Вариант
	|			И (НастройкиВариантовОтчетовПодсистема.Подсистема = ТабВариантыОтчетов.Подсистема)
	|			И (НастройкиВариантовОтчетовПодсистема.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетовПользователя
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовПользователя.Вариант
	|			И (НастройкиВариантовОтчетовПользователя.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка)))
	|			И (НастройкиВариантовОтчетовПользователя.Пользователь = &ТекущийПользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетовПользователяПодсистемы
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовПользователяПодсистемы.Вариант
	|			И (НастройкиВариантовОтчетовПользователяПодсистемы.Подсистема = ТабВариантыОтчетов.Подсистема)
	|			И (НастройкиВариантовОтчетовПользователяПодсистемы.Пользователь = &ТекущийПользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Подсистемы КАК Подсистемы
	|		ПО ТабВариантыОтчетов.Подсистема = Подсистемы.Подсистема
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Представления КАК ПредставленияОтчетов
	|		ПО (ПредставленияОтчетов.Ссылка = ВариантыОтчетов.Ссылка)
	|			И (ПредставленияОтчетов.КодЯзыка = &КодЯзыка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ОтчетыКонфигурации
	|		ПО (ОтчетыКонфигурации.Ссылка = ВариантыОтчетов.ПредопределенныйВариант)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Представления КАК ПредставленияОтчетовКонфигурации
	|		ПО (ПредставленияОтчетовКонфигурации.Ссылка = ВариантыОтчетов.ПредопределенныйВариант)
	|			И (ПредставленияОтчетовКонфигурации.КодЯзыка = &КодЯзыка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ОтчетыРасширений
	|		ПО (ОтчетыРасширений.Ссылка = ВариантыОтчетов.ПредопределенныйВариант)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Представления КАК ПредставленияОтчетовРасширений
	|		ПО (ПредставленияОтчетовРасширений.Ссылка = ВариантыОтчетов.ПредопределенныйВариант)
	|			И (ПредставленияОтчетовРасширений.КодЯзыка = &КодЯзыка)
	|ГДЕ
	|	ТабВариантыОтчетов.Вариант ССЫЛКА Справочник.ВариантыОтчетов
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
	|	И НЕ ТабВариантыОтчетов.Вариант В (&ОтключенныеВарианты)
	|	И (ВариантыОтчетов.ТолькоДляАвтора
	|				И ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ИЛИ ВариантыОтчетов.Автор В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
	|			ИЛИ ВариантыОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					НастройкиВариантовОтчетов.Вариант
	|				ИЗ
	|					РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|				ГДЕ
	|					НастройкиВариантовОтчетов.Пользователь = &ТекущийПользователь
	|					И НастройкиВариантовОтчетов.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка))
	|					И НастройкиВариантовОтчетов.Видимость))
	|{ГДЕ
	|	ВариантыОтчетов.Ссылка.* КАК Ссылка,
	|	(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """")) КАК Теги,
	|	ВариантыОтчетов.Описание,
	|	ВариантыОтчетов.Наименование,
	|	ТабВариантыОтчетов.Важный КАК Важный,
	|	ВариантыОтчетов.Отчет,
	|	(ВЫБОР
	|			КОГДА &ЭтоОсновнойЯзык
	|					И (ВариантыОтчетов.Пользовательский
	|						ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|				ТОГДА ВариантыОтчетов.Наименование
	|			КОГДА НЕ &ЭтоОсновнойЯзык
	|					И (ВариантыОтчетов.Пользовательский
	|						ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияОтчетов.Наименование, ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|			КОГДА &ЭтоОсновнойЯзык
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Наименование, ОтчетыРасширений.Наименование), ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Наименование, ПредставленияОтчетовРасширений.Наименование), ПредставленияОтчетов.Наименование) КАК СТРОКА(1000))
	|		КОНЕЦ + ВЫБОР
	|			КОГДА &ЭтоОсновнойЯзык
	|					И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) <> """"
	|				ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
	|			КОГДА &ЭтоОсновнойЯзык
	|					И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ОтчетыКонфигурации.Описание, ОтчетыРасширений.Описание), """") КАК СТРОКА(1000))
	|			КОГДА НЕ &ЭтоОсновнойЯзык
	|					И ПОДСТРОКА(ПредставленияОтчетов.Описание, 1, 1) <> """"
	|				ТОГДА ВЫРАЗИТЬ(ПредставленияОтчетов.Описание КАК СТРОКА(1000))
	|			ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияОтчетовКонфигурации.Описание, ПредставленияОтчетовРасширений.Описание), ВариантыОтчетов.Описание) КАК СТРОКА(1000))
	|		КОНЕЦ + (ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыОтчетов.НаименованияПолей, """") КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыОтчетов.Автор.Наименование, """") КАК СТРОКА(1000)))) КАК СтрокаПоиска,
	|	(ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Включен, ИСТИНА)) КАК Включен,
	|	(ВЫБОР
	|			КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Внешний}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабВариантыОтчетов.Вариант КАК Справочник.ВариантыДополнительныхОтчетов),
	|	ТабВариантыОтчетов.Порядок,
	|	ВариантыДополнительныхОтчетов.Отчет,
	|	"""",
	|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды,
	|	ВариантыДополнительныхОтчетов.Наименование,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ВариантыДополнительныхОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВариантыДополнительныхОтчетов.Автор,
	|	"""",
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"),
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО),
	|	ВариантыДополнительныхОтчетов.Наименование + (ВЫРАЗИТЬ(ВариантыДополнительныхОтчетов.Описание КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК СТРОКА(1000))) + ВариантыДополнительныхОтчетов.Автор.Наименование,
	|	НЕ ВариантыДополнительныхОтчетов.Контекстный,
	|	&Подсистема,
	|	"""",
	|	ВЫБОР
	|		КОГДА НастройкиВариантовОтчетовУНФ.ИзмененаПользователем
	|			ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|		ИНАЧЕ ТабВариантыОтчетов.Важный
	|	КОНЕЦ,
	|	ТабВариантыОтчетов.СмТакже,
	|	НЕ НастройкиВариантовОтчетовУНФ.Устаревший,
	|	ИСТИНА
	|ИЗ
	|	ВариантыОтчетов КАК ТабВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ТабВариантыОтчетов.Вариант = ВариантыДополнительныхОтчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовУНФ.Вариант
	|ГДЕ
	|	ТабВариантыОтчетов.Вариант ССЫЛКА Справочник.ВариантыДополнительныхОтчетов
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|	И (НЕ ВариантыДополнительныхОтчетов.ТолькоДляАвтора
	|			ИЛИ ВариантыДополнительныхОтчетов.Автор = &ТекущийПользователь)
	|{ГДЕ
	|	(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """")) КАК Теги,
	|	ВариантыДополнительныхОтчетов.Наименование КАК Наименование,
	|	ВариантыДополнительныхОтчетов.Описание КАК Описание,
	|	(ВЫБОР
	|			КОГДА ТабВариантыОтчетов.Важный = 0
	|				ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|			ИНАЧЕ ТабВариантыОтчетов.Важный
	|		КОНЕЦ) КАК Важный,
	|	ВариантыДополнительныхОтчетов.Отчет.* КАК Отчет,
	|	ВариантыДополнительныхОтчетов.Ссылка.* КАК Ссылка,
	|	(ВариантыДополнительныхОтчетов.Наименование + (ВЫРАЗИТЬ(ВариантыДополнительныхОтчетов.Описание КАК СТРОКА(1000))) + (ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК СТРОКА(1000))) + ВариантыДополнительныхОтчетов.Автор.Наименование) КАК СтрокаПоиска,
	|	(НЕ ВариантыДополнительныхОтчетов.Контекстный) КАК Включен,
	|	(ИСТИНА) КАК Внешний}");

	Возврат СтрСоединить(ЭлементыЗапроса, РазделительЗапросов());
	
КонецФункции

Функция РазделительЗапросов()

	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Процедура УстановитьОтборыИстория(НастройкиКомпоновки, Параметры)
		
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Вариант", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов,СправочникСсылка.ВариантыДополнительныхОтчетов"));
	Таб.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ии = 0;
	Для каждого Вариант Из Параметры.История Цикл
		Стр = Таб.Добавить();
		Стр.Вариант = Вариант;
		Стр.Порядок = ии;
		ии = ии + 1;
	КонецЦикла; 
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Таб", Таб);
	
КонецПроцедуры

Процедура УстановитьОтборыКонтекстныеОтчеты(НастройкиКомпоновки, Параметры)
	
	Если ТипЗнч(Параметры.ПоОбъекту) = Тип("Структура") И Параметры.ПоОбъекту.Свойство("Контекст") Тогда
		КонтекстОтчетов = Параметры.ПоОбъекту.Контекст;
	Иначе
		КонтекстОтчетов = Параметры.ПоОбъекту;
	КонецЕсли;
	Если ТипЗнч(КонтекстОтчетов) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Идентификатор = КонтекстОтчетов;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтекстОтчетов)) Тогда 
		Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КонтекстОтчетов.Метаданные());
	Иначе
		Возврат;
	КонецЕсли;
	
	СоответствиеПолей = Новый Соответствие;
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Вариант", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов,СправочникСсылка.ВариантыДополнительныхОтчетов"));
	Таб.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Таб.Колонки.Добавить("Важный", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаПолейОтчетовУНФ.Вариант КАК Вариант,
	|	ПривязкаПолейОтчетовУНФ.Поле КАК Поле,
	|	ПривязкаПолейОтчетовУНФ.СложныйАлгоритм КАК СложныйАлгоритм,
	|	ПривязкаПолейОтчетовУНФ.Рекомендуемый КАК Важный
	|ИЗ
	|	РегистрСведений.ПривязкаПолейОтчетовУНФ КАК ПривязкаПолейОтчетовУНФ
	|ГДЕ
	|	ПривязкаПолейОтчетовУНФ.Объект = &Объект
	|	И (ПривязкаПолейОтчетовУНФ.ДополнительныйРазрез В (&ДополнительныеРазрезы)
	|			ИЛИ &БезОтбораПоРазрезам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Важный УБЫВ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПривязкаПолейОтчетовУНФ.Вариант) = ТИП(Справочник.ВариантыОтчетов)
	|			ТОГДА ВЫРАЗИТЬ(ПривязкаПолейОтчетовУНФ.Вариант КАК Справочник.ВариантыОтчетов).Наименование
	|		КОГДА ТИПЗНАЧЕНИЯ(ПривязкаПолейОтчетовУНФ.Вариант) = ТИП(Справочник.ВариантыДополнительныхОтчетов)
	|			ТОГДА ВЫРАЗИТЬ(ПривязкаПолейОтчетовУНФ.Вариант КАК Справочник.ВариантыДополнительныхОтчетов).Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ";
	ДобавитьОтборПоДополнительномуРазделителю(Запрос, Параметры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеСвязи = Новый Структура;
		ОписаниеСвязи.Вставить("Поле", Выборка.Поле);
		ОписаниеСвязи.Вставить("СложныйАлгоритм", Выборка.СложныйАлгоритм);
		Если СоответствиеПолей.Получить(Выборка.Вариант) = Неопределено Тогда
			Стр = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Стр.Порядок = Таб.Количество();
		КонецЕсли; 
		СоответствиеПолей.Вставить(Выборка.Вариант, ОписаниеСвязи);
	КонецЦикла;

	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("Таб", Таб);
	СвязанныеПоля = Новый ФиксированноеСоответствие(СоответствиеПолей);
	Параметры.Вставить("СвязанныеПоля", СвязанныеПоля);
	
КонецПроцедуры

Процедура ПроверитьДоступность(ТаблицаОтчетов, Параметры)
	
	МассивНедоступных = Новый Массив;
	
	Для Каждого Стр Из ТаблицаОтчетов Цикл
		
		Если ТипЗнч(Стр.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			И ТипЗнч(Стр.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.Отчеты[Параметры.СоответствиеОтчетов.Получить(Стр.Отчет)];
		Если НЕ ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			МассивНедоступных.Добавить(Стр);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из МассивНедоступных Цикл
		ТаблицаОтчетов.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтборПоДополнительномуРазделителю(Запрос, Параметры)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Неопределено);
	ДопРазрез = Неопределено;
	Если ТипЗнч(Параметры.ПоОбъекту) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПоОбъекту, "ТипНоменклатуры");
	ИначеЕсли ТипЗнч(Параметры.ПоОбъекту) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПоОбъекту, "ТипСтруктурнойЕдиницы");
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметры.ПоОбъекту))
		И НЕ Параметры.ПоОбъекту.Метаданные().Реквизиты.Найти("ВидОперации") = Неопределено Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПоОбъекту, "ВидОперации");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопРазрез) Тогда
		СписокТипов.Добавить(ДопРазрез);
		СписокТипов.Добавить(Новый(ТипЗнч(ДопРазрез)));
		Запрос.УстановитьПараметр("ДополнительныеРазрезы", СписокТипов);
		Запрос.УстановитьПараметр("БезОтбораПоРазрезам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ДополнительныеРазрезы", Новый СписокЗначений);
		Запрос.УстановитьПараметр("БезОтбораПоРазрезам", Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьОтборыТеги(НастройкиКомпоновки, Параметры)
	
	Для каждого Стр Из Параметры.НаложенныеФильтры Цикл
		Если ПустаяСтрока(Стр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		УстановитьОтборКомпоновщика(НастройкиКомпоновки, "СтрокаПоиска", ВидСравненияКомпоновкиДанных.Содержит, Стр.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборКомпоновщика(НастройкиКомпоновки, Поле, ВидСравнения, Значение)
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры 

Процедура ДобавитьЭлементУпорядочивания(НастройкиКомпоновки, Поле, ТипУпорядочивания = "Возр")

    ЭлементПорядка = НастройкиКомпоновки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[ТипУпорядочивания];
	ЭлементПорядка.Использование = Истина;
	
КонецПроцедуры

Функция РазделИзбранные()
	
	Возврат "Избранные";
	
КонецФункции

Функция РазделПоследние()
	
	Возврат "Последние";
	
КонецФункции

Функция РазделВнешние()
	
	Возврат "Внешние";
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчета

Процедура ДобавитьСтрокуТаблицыПолей(Таблица, Поле, Заголовок = Неопределено, Формат = Неопределено)
	
	Стр = Таблица.Добавить();
	Стр.Поле = Поле;
	Стр.Заголовок = Заголовок;
	Стр.Формат = Формат;
	
КонецПроцедуры

Функция МультивалютныеГруппировкиРекурсивно(Структура, Знач Добавить = Ложь)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") ИЛИ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если ИмяПоля="Валюта" Тогда
					Добавить = Истина;
				КонецЕсли; 
			КонецЦикла;
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Добавить И Результат.Найти(ИмяПоля)=Неопределено Тогда
					Если Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(ИмяПоля+" Иерархия");
					ИначеЕсли Поле.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(ИмяПоля+" Иерархия");
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Структура, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = МультивалютныеГруппировкиРекурсивно(Элемент.Строки, Добавить);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля)=Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьГруппировкиПериодов(Группировки, СхемаКомпоновкиДанных)
	
	Если Группировки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ПоляПериода = Новый Массив;
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из Набор.Поля Цикл
			Если НЕ ТипЗнч(Поле)=Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			Если Поле.Роль.НомерПериода>0 Тогда
				ПоляПериода.Добавить(Поле.ПутьКДанным);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Добавлять = Ложь;
	Для каждого ИмяПоля Из ПоляПериода Цикл
		Если НЕ Группировки.Найти(ИмяПоля)=Неопределено Тогда
			Добавлять = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Добавлять Тогда
		Для каждого ИмяПоля Из ПоляПериода Цикл
			Если Группировки.Найти(ИмяПоля)=Неопределено Тогда
				Группировки.Добавить(ИмяПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ГруппировкиКолонокРекурсивно(Структура)
	
	Результат = Новый Массив;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если Результат.Найти(ИмяПоля) = Неопределено Тогда
					Если Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы Тогда
						Результат.Добавить(ИмяПоля);
					ИначеЕсли Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
						Результат.Добавить(СтрШаблон("%1 Иерархия", ИмяПоля));
					ИначеЕсли Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
						Результат.Добавить(ИмяПоля);
						Результат.Добавить(СтрШаблон("%1 Иерархия", ИмяПоля));
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Структура);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ВложенныйРезультат = ГруппировкиКолонокРекурсивно(Элемент.Колонки);
			Для каждого ИмяПоля Из ВложенныйРезультат Цикл
				Если НЕ Результат.Найти(ИмяПоля) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Результат.Добавить(ИмяПоля);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПрочиеГруппировки(Настройки, ГруппировкиВалют, ГруппировкиКолонок)
	
	ТипыСправочник = Справочники.ТипВсеСсылки();
	ТипыПВХ = ПланыВидовХарактеристик.ТипВсеСсылки();
	Результат = Новый Массив;
	Для каждого Поле Из Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		ИмяПоля = Строка(Поле.Поле);
		Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
			Результат.Добавить(ИмяПоля);
		КонецЕсли;
		Для каждого Тип Из Поле.ТипЗначения.Типы() Цикл
			Если ТипыСправочник.СодержитТип(Тип) ИЛИ ТипыПВХ.СодержитТип(Тип) Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
				Если МетаданныеОбъекта.Иерархический Тогда
					ИмяПоля = ИмяПоля+" Иерархия";
					Если ГруппировкиВалют.Найти(ИмяПоля)=Неопределено И ГруппировкиКолонок.Найти(ИмяПоля)=Неопределено Тогда
						Результат.Добавить(ИмяПоля);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;   
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтрокФиксироватьСлева(КомпоновщикНастроек) Экспорт

    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе Тогда
		ГруппировкиОтдельно = Ложь; 
	Иначе
		ГруппировкиОтдельно = Истина;
	КонецЕсли; 
    ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если ПараметрВывода.Использование 
		И ПараметрВывода.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		РеквизитыОтдельно = Истина; 
	Иначе
		РеквизитыОтдельно = Ложь;
	КонецЕсли; 
    СтрокФиксироватьСлева = МаксимальноеКоличествоПолейРекурсивно(КомпоновщикНастроек.Настройки.Структура,
		ГруппировкиОтдельно, РеквизитыОтдельно);

	ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти(
		"ГоризонтальноеРасположениеОбщихИтогов");
	Если (ПараметрВывода.Значение = РасположениеИтоговКомпоновкиДанных.Начало Или ПараметрВывода.Значение
		= РасположениеИтоговКомпоновкиДанных.НачалоИКонец) И ПараметрВывода.Использование = Истина Тогда

		СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

	КонецЕсли;

	ПараметрВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРесурсов");
	Если ПараметрВывода.Значение = РасположениеРесурсовКомпоновкиДанных.Вертикально И ПараметрВывода.Использование
		= Истина Тогда

		СтрокФиксироватьСлева = СтрокФиксироватьСлева + 1;

	КонецЕсли;

	Возврат СтрокФиксироватьСлева;

КонецФункции

Функция МаксимальноеКоличествоПолейРекурсивно(ЭлементыСтруктуры, ГруппировкиОтдельно, РеквизитыОтдельно)
	
	КоличествоПолей = 0;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ТипЗнч(Элемент)=Тип("ГруппировкаКомпоновкиДанных") И НЕ ТипЗнч(Элемент)=Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ГруппировкиОтдельно Тогда
			Возврат 1;
		КонецЕсли; 
		КоличествоПолейГруппировки = 0;
		Для каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ТипЗнч(ПолеГруппировки)=Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = Строка(ПолеГруппировки.Поле);
			ЭтоРеквизит = Ложь;
			Позиция = Найти(ИмяПоля, ".");
			Если НЕ РеквизитыОтдельно И Позиция>0 Тогда
				ИмяРодителя = Лев(ИмяПоля, Позиция-1);
				Для каждого ПолеПроверки Из Элемент.ПоляГруппировки.Элементы Цикл
					ИмяПоляПроверки  = Строка(ПолеПроверки.Поле);
					Если ИмяПоля=ИмяПоляПроверки Тогда
						Прервать;
					КонецЕсли;
					ПозицияПроверки = Найти(ИмяПоляПроверки, ".");
					ИмяРодителяПроверки = ?(ПозицияПроверки=0, ИмяПоляПроверки, Лев(ИмяПоляПроверки, ПозицияПроверки-1));
					Если ИмяРодителя=ИмяРодителяПроверки Тогда
						ЭтоРеквизит = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			КоличествоПолейГруппировки = КоличествоПолейГруппировки+?(ЭтоРеквизит, ?(КоличествоПолейГруппировки=0, 1, 0), 1);
		КонецЦикла;
		КоличествоПолей = Макс(КоличествоПолей, КоличествоПолейГруппировки);
	КонецЦикла;
	Для каждого Элемент Из ЭлементыСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МаксимальноеКоличествоПолейРекурсивно(Элемент.Структура, 
				ГруппировкиОтдельно, РеквизитыОтдельно));
		ИначеЕсли ТипЗнч(Элемент)=Тип("ТаблицаКомпоновкиДанных") Тогда
			КоличествоПолей = Макс(КоличествоПолей, МаксимальноеКоличествоПолейРекурсивно(Элемент.Строки, 
				ГруппировкиОтдельно, РеквизитыОтдельно));
		КонецЕсли; 
	КонецЦикла; 
	Возврат КоличествоПолей;
	
КонецФункции

Процедура УстановитьТипДополненияРекурсивно(Структура, ПоляПериодов, ПараметрыФормирования)
	
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если ПоляПериодов.Найти(ИмяПоля) = Неопределено Тогда
					Продолжить;
				КонецЕсли;    
				Поле.ТипДополнения = ТипДополненияПоИмениПоля(ИмяПоля);
				Поле.НачалоПериода = ПараметрыФормирования.Период.ДатаНачала;
				Поле.КонецПериода = ПараметрыФормирования.Период.ДатаОкончания;
			КонецЦикла;
			УстановитьТипДополненияРекурсивно(Элемент.Структура, ПоляПериодов, ПараметрыФормирования);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			УстановитьТипДополненияРекурсивно(Элемент.Строки, ПоляПериодов, ПараметрыФормирования);
			УстановитьТипДополненияРекурсивно(Элемент.Колонки, ПоляПериодов, ПараметрыФормирования);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСимволВалютыКЗаголовкамПолей(СхемаКомпоновкиДанных, Поля, Валюта = Неопределено) Экспорт
	
	Если Валюта=Неопределено Тогда
		СимволВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(Константы.ВалютаУчета.Получить());
	Иначе
		СимволВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(Валюта);
	КонецЕсли;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля);
	
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из МассивПолей Цикл
			ПолеСхемы = Набор.Поля.Найти(Поле);
			Если ПолеСхемы=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПолеСхемы.Заголовок = ПолеСхемы.Заголовок+", "+СимволВалюты;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПериодВКолонках(СхемаКомпоновкиДанных, Структура, ПараметрыФормирования)

	ВсеГруппировки = ГруппировкиКолонокРекурсивно(Структура);
	ПоляПериода = ПоляПериодов(СхемаКомпоновкиДанных);
	ПоляПериода.Добавить("ДинамическийПериод");
	ПараметрыФормирования.Вставить("ГруппировкиКолонок", Новый Массив);
	
	Для каждого Группировка Из ВсеГруппировки Цикл
		ПараметрыФормирования.ГруппировкиКолонок.Добавить(Группировка);
		Если ПоляПериода.Найти(Группировка) = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		Если НЕ ПараметрыФормирования.Свойство("Сравнение") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыФормирования.Сравнение) Тогда
			ПараметрыФормирования.Вставить("Сравнение", ПериодичностьПоИмениПоля(Группировка));
		КонецЕсли;
		ПараметрыФормирования.Вставить("Периодичность", Группировка);
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПоляПериодов(СхемаКомпоновкиДанных)
		
	ПоляПериода = Новый Массив;
	Для каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для каждого Поле Из Набор.Поля Цикл
			Если ТипЗнч(Поле) <> Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;	
			КонецЕсли;
			Если Поле.Роль.НомерПериода > 0 Тогда
				ПоляПериода.Добавить(Поле.ПутьКДанным);	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	Возврат ПоляПериода;
	
КонецФункции

Функция ПериодичностьПоИмениПоля(Группировка)
	
	ИмяПоля = СтрЗаменить(Группировка, "Период", "");
	Если Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти(ИмяПоля) = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	Возврат Перечисления.Периодичность[ИмяПоля];
	
КонецФункции

Процедура ОбновитьГруппировкуДинамическийПериод(НастройкиОтчета, ПараметрыФормирования)
	
	
	Период = ПараметрыФормирования.Период;
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Разность = Период.ДатаОкончания - Период.ДатаНачала;
	Если Разность / 3600 < 48 Тогда
		ИмяПоля = "ПериодЧас";
	ИначеЕсли Разность / 86400 < 45 Тогда
		ИмяПоля = "ПериодДень";
	ИначеЕсли Разность / 86400 < 500 Тогда
		ИмяПоля = "ПериодМесяц";
	Иначе
		ИмяПоля = "ПериодГод";
	КонецЕсли;
	
	ПериодыБезДвижений = (ПараметрыФормирования.Свойство("ПериодыБезДвижений") 
		И ПараметрыФормирования.ПериодыБезДвижений);
	Если ПериодыБезДвижений Тогда
		СтрокаДлительностьПериода = СтрЗаменить(ИмяПоля, "Период", "");
		ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[СтрокаДлительностьПериода];
	Иначе
		ДополнениеПериода = Неопределено;
	КонецЕсли;
	ЗаменитьДинамическийПериодРекурсивно(НастройкиОтчета.Структура, Новый ПолеКомпоновкиДанных(ИмяПоля), 
		ДополнениеПериода, Период);
	
КонецПроцедуры

Процедура ЗаменитьДинамическийПериодРекурсивно(Структура, ПолеПериода, ДополнениеПериода = Неопределено, Период = Неопределено)
		
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				ИмяПоля = Строка(Поле.Поле);
				Если ИмяПоля = "ДинамическийПериод" Тогда
					Поле.Поле = ПолеПериода;
					Если ЗначениеЗаполнено(ДополнениеПериода) Тогда
						Поле.ТипДополнения = ДополнениеПериода;
						Если ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
							Поле.НачалоПериода = Период.ДатаНачала;
							Поле.КонецПериода = Период.ДатаОкончания;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;    
			КонецЦикла;
			ЗаменитьДинамическийПериодРекурсивно(Элемент.Структура, ПолеПериода, ДополнениеПериода, Период);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЗаменитьДинамическийПериодРекурсивно(Элемент.Строки, ПолеПериода, ДополнениеПериода, Период);
			ЗаменитьДинамическийПериодРекурсивно(Элемент.Колонки, ПолеПериода, ДополнениеПериода, Период);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ЗаменитьДинамическийПериодРекурсивно(Элемент.Точки, ПолеПериода, ДополнениеПериода, Период);
			ЗаменитьДинамическийПериодРекурсивно(Элемент.Серии, ПолеПериода, ДополнениеПериода, Период);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ОформлениеДобавлено(УсловноеОформление, Поле, Параметр)
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		ПараметрОформления = Новый ПараметрКомпоновкиДанных(Параметр);
	Иначе
		ПараметрОформления = Параметр;
	КонецЕсли;
	Для каждого ЭлементОформления Из УсловноеОформление Цикл
		Если НЕ ЭлементОформления.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЕстьПоле = Ложь;
		Для каждого ОформляемоеПоле Из ЭлементОформления.Поля.Элементы Цикл
			Если ОформляемоеПоле.Поле = Поле Тогда
				ЕстьПоле = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если НЕ ЕстьПоле Тогда
			Продолжить;	
		КонецЕсли;	   
		ЗначениеПараметра = ЭлементОформления.Оформление.НайтиЗначениеПараметра(ПараметрОформления);
		Если ЗначениеПараметра = Неопределено ИЛИ НЕ ЗначениеПараметра.Использование Тогда
			Продолжить;	
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Процедура УдалитьВременныеНастройкиОформления(НастройкиОтчета)

	УдаляемыеНастройки = Новый Массив;
	Для каждого ЭлементОформления Из НастройкиОтчета.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = ПредставлениеУдаляемойНастройки() Тогда
			УдаляемыеНастройки.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементОформления Из УдаляемыеНастройки Цикл
		НастройкиОтчета.УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыСозданияЭлементов

Функция СоздатьГруппу(Стр, ЭтаФорма, Элементы, Отображение = Неопределено)
	
	Идентификатор = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Группа = Элементы.Добавить("ГруппаФильтр" + Идентификатор, Тип("ГруппаФормы"), ?(Стр.Тип = "Фильтр",
		Элементы.ГруппаФильтрЭлементы, Элементы.ГруппаПараметрыЭлементы));
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.Заголовок = Стр.Заголовок;
	Группа.Подсказка = Стр.Заголовок;
	Группа.ОтображатьОтступСлева = Ложь;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Если Отображение = Неопределено Тогда
		Группа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Иначе
		Группа.Отображение = Отображение;
	КонецЕсли;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Стр.ИмяГруппы = Группа.Имя;
	Возврат Группа;
	
КонецФункции

Процедура СоздатьФильтрПериод(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита+"Начало", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаНачала";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Разделитель", Тип("ДекорацияФормы"), Группа);
		Элемент.Вид = ВидДекорацииФормы.Надпись;
		Элемент.Заголовок = "-";
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.Ширина = 1;
		Стр.Элементы.Вставить(Элемент.Имя);
		
		Элемент = Элементы.Добавить(ИмяРеквизита+"Окончание", Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита+".ДатаОкончания";
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Элемент.Ширина = 9;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрПределы(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы);
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = ?(Прав(ИмяРеквизита,2)="От", НСтр("ru = 'от'"), НСтр("ru = 'до'"));
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.КнопкаОчистки = Истина;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.Ширина = 10;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрТумблер(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы, ОтображениеОбычнойГруппы.Нет);
	Группа.Поведение = ПоведениеОбычнойГруппы.Обычное;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Значения = Реквизит.Значение;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
		Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Заголовок = Группа.Заголовок;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если ТипЗнч(Значения)=Тип("Массив") Тогда
			Если НЕ Стр.ДополнительныеПараметры.Свойство("АвтоОтметкаНезаполненного") ИЛИ Стр.ДополнительныеПараметры.АвтоОтметкаНезаполненного=Ложь Тогда
				Элемент.СписокВыбора.Добавить(Стр.ТипЗначения.ПривестиЗначение(Неопределено), НСтр("ru = 'Все'"));
			КонецЕсли; 
			Для каждого Значение Из Значения Цикл
				Элемент.СписокВыбора.Добавить(Значение);
			КонецЦикла; 
		Иначе
			Для каждого ЭлементСписка Из Значения Цикл
				Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка);
			КонецЦикла; 
		КонецЕсли;
		Если Элемент.СписокВыбора.Количество()<=1 Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли; 
		ЭтаФорма[ИмяРеквизита] = ?(ТипЗнч(ЭтаФорма[ИмяРеквизита])=Тип("ПеречислениеСсылка.БулевоТриСостояния"), 
		ПредопределенноеЗначение("Перечисление.БулевоТриСостояния.НеИзменять"), 
		Неопределено);
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрФлажки(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Заголовок = Строка(Реквизит.Значение);
		Элемент.Заголовок = Заголовок;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура СоздатьФильтрБулево(Стр, ЭтаФорма, Элементы)
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.Заголовок = Стр.Заголовок;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьФильтрПолеВвода(Стр, ЭтаФорма, Элементы, ПараметрыВыбора, СвязиПараметровВыбора) Экспорт
	
	Группа = СоздатьГруппу(Стр, ЭтаФорма, Элементы);
	Группа.ОтображатьЗаголовок = Ложь;
	
	Для каждого Реквизит Из Стр.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.КнопкаСоздания = Ложь;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		Если Стр.ТипЗначения.Типы().Количество()>1 Тогда
			Элемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		ИначеЕсли НЕ Стр.ТипЗначения.Типы().Количество()=0 И ОбщегоНазначения.ЭтоСсылка(Стр.ТипЗначения.Типы().Получить(0)) Тогда
			Элемент.КнопкаВыпадающегоСписка = Истина;
		Иначе
			Элемент.КнопкаВыпадающегоСписка = Неопределено;
		КонецЕсли;
		Элемент.Заголовок = Стр.Заголовок;
		Если Стр.ТипЗначения.Типы().Количество()=1 И Стр.ТипЗначения.Типы().Получить(0)=Тип("Число") Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Иначе
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.ПодсказкаВвода = Стр.Заголовок;
		КонецЕсли; 
		Элемент.Ширина = 23;
		
		Если Стр.ДополнительныеПараметры.Свойство("БыстрыйВыбор") И Стр.ДополнительныеПараметры.БыстрыйВыбор Тогда
			Элемент.БыстрыйВыбор = Истина;
			Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		Иначе
			Элемент.БыстрыйВыбор = Ложь;
		КонецЕсли; 
		Если Стр.ДополнительныеПараметры.Свойство("АвтоОтметкаНезаполненного") И Стр.ДополнительныеПараметры.АвтоОтметкаНезаполненного Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли; 
		Если Стр.Тип="Фильтр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ФильтрПриИзменении");
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ФильтрОбработкаВыбора");
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ФильтрНачалоВыбора");
			Если ОписаниеТиповСодержитИерархическийТип(Стр.ТипЗначения) Тогда
				Кнопка = Элементы.Добавить(ИмяРеквизита+"_Иерархия", Тип("ДекорацияФормы"), Группа);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Ширина = 2;
				Элемент.Ширина = Элемент.Ширина-3;
				Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				Кнопка.Высота = 1;
				Кнопка.РастягиватьПоГоризонтали = Ложь;
				Кнопка.РастягиватьПоВертикали = Ложь;
				Кнопка.Картинка = БиблиотекаКартинок.РежимВыбораЭлементов;
				Кнопка.Подсказка = НСтр("ru = 'Используется выбор элементов'");
				Кнопка.УстановитьДействие("Нажатие", "Подключаемый_ИерархияФильтраНажатие");
			КонецЕсли; 
		ИначеЕсли Стр.Тип="Параметр" Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрПриИзменении");
		КонецЕсли; 
		Если НЕ ПараметрыВыбора=Неопределено И ПараметрыВыбора.Количество()>0 Тогда
			Если ТипЗнч(ПараметрыВыбора)=Тип("СписокЗначений") Тогда
				Элемент.СписокВыбора.Очистить();
				Для каждого Параметр Из ПараметрыВыбора Цикл
					Элемент.СписокВыбора.Добавить(Параметр.Значение, Параметр.Представление);
				КонецЦикла;
				Если Элемент.СписокВыбора.Количество()>0 Тогда
					Элемент.РежимВыбораИзСписка = Истина;
					Элемент.КнопкаВыбора = Ложь;
				КонецЕсли; 
			Иначе
				МассивПараметров = Новый Массив;
				Для каждого Параметр Из ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Новый ПараметрВыбора(Параметр.Имя, Параметр.Значение));
				КонецЦикла;
				Если МассивПараметров.Количество()>0 Тогда
					Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Стр.Элементы.Вставить(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтчета

Процедура ОбновитьНастройкиПериодичности(НастройкиКД)
	
	ПараметрСравнивать = НастройкиКД.ПараметрыДанных.Элементы.Найти("Сравнивать");
	ПараметрАбсолютноеОтклонение = НастройкиКД.ПараметрыДанных.Элементы.Найти("АбсолютноеОтклонение");
	ПараметрОтносительноеОтклонение = НастройкиКД.ПараметрыДанных.Элементы.Найти("ОтносительноеОтклонение");
	ПараметрПериодыБезДвижений = НастройкиКД.ПараметрыДанных.Элементы.Найти("ПериодыБезДвижений");
	ПараметрПериодичность = НастройкиКД.ПараметрыДанных.Элементы.Найти("Периодичность");
	Если ПараметрСравнивать <> Неопределено И ПараметрПериодичность.Использование 
		И ТипЗнч(ПараметрПериодичность.Значение) = Тип("ПеречислениеСсылка.Периодичность") Тогда
		// Сравнивать
		ПараметрСравнивать.Использование = Истина;
		ПараметрСравнивать.Значение = Истина;
		Если ПустаяСтрока(ПараметрСравнивать.ИдентификаторПользовательскойНастройки) Тогда
			ПараметрСравнивать.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			ПараметрСравнивать.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		КонецЕсли;
		// АбсолютноеОтклонение
		Если ПараметрАбсолютноеОтклонение <> Неопределено 
			И НастройкиКД.ДополнительныеСвойства.Свойство("ПоказыватьАбсолютноеИзменение") 
			И НастройкиКД.ДополнительныеСвойства.ПоказыватьАбсолютноеИзменение Тогда
			ПараметрАбсолютноеОтклонение.Использование = Истина;
			ПараметрАбсолютноеОтклонение.Значение = Истина;
			Если ПустаяСтрока(ПараметрАбсолютноеОтклонение.ИдентификаторПользовательскойНастройки) Тогда
				ПараметрАбсолютноеОтклонение.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
				ПараметрАбсолютноеОтклонение.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			КонецЕсли;
		КонецЕсли;
		// ОтносительноеОтклонение
		Если ПараметрОтносительноеОтклонение <> Неопределено 
			И НастройкиКД.ДополнительныеСвойства.Свойство("ПоказыватьОтносительноеИзменение") 
			И НастройкиКД.ДополнительныеСвойства.ПоказыватьОтносительноеИзменение Тогда
			ПараметрОтносительноеОтклонение.Использование = Истина;
			ПараметрОтносительноеОтклонение.Значение = Истина;
			Если ПустаяСтрока(ПараметрОтносительноеОтклонение.ИдентификаторПользовательскойНастройки) Тогда
				ПараметрОтносительноеОтклонение.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
				ПараметрОтносительноеОтклонение.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			КонецЕсли;
		КонецЕсли;
		// ПериодыБезДвижений
		Если ПараметрПериодыБезДвижений <> Неопределено Тогда
			ПараметрПериодыБезДвижений.Использование = Истина;
			ПараметрПериодыБезДвижений.Значение = Истина;
			Если ПустаяСтрока(ПараметрПериодыБезДвижений.ИдентификаторПользовательскойНастройки) Тогда
				ПараметрПериодыБезДвижений.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
				ПараметрПериодыБезДвижений.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			КонецЕсли;
		КонецЕсли;
		ИмяПоля = СтрШаблон("Период%1", ПараметрПериодичность.Значение);
		Если НастройкиКД.ДоступныеПоляГруппировок.Элементы.Найти(ИмяПоля) <> Неопределено Тогда
			ЗаменитьДинамическийПериодРекурсивно(НастройкиКД.Структура, Новый ПолеКомпоновкиДанных(ИмяПоля));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеПользовательскихНастроек(Настройки, Скрыть = Ложь)
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОбновитьПредставлениеПользовательскихНастроек(Настройки.Отбор.Элементы);
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		Для каждого ЭлементОтбора Из Настройки Цикл
			Если Скрыть Тогда
				ЭлементОтбора.ИдентификаторПользовательскойНастройки = "";	
			КонецЕсли;
			Если Не ПустаяСтрока(ЭлементОтбора.Представление) Тогда
				ЭлементОтбора.ПредставлениеПользовательскойНастройки = ЭлементОтбора.Представление;	
			КонецЕсли;
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ОбновитьПредставлениеПользовательскихНастроек(ЭлементОтбора.Элементы, Истина);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьРеквизитыОтправкиКонтактов(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СервисМассовойРассылки", 
			Новый ОписаниеТипов("ПеречислениеСсылка.СервисыМассовыхРассылок")));
			
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьМассовыеРассылкиИнтеграция", 
			Новый ОписаниеТипов("Булево")));
			
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидСвязиЕмейл", 
			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКаналовСвязи")));
			
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидСвязиСмс", 
			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКаналовСвязи")));
			
	ИмяТаблицы = "КонтактыОтчета";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Контакт",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица"),
		ИмяТаблицы));

КонецПроцедуры

Процедура ДобавитьКомандыОтправкиКонтактов(Форма)
		
	Команда = Форма.Команды.Добавить("СоздатьЗадачуПоРезультатамОтчета");
	Команда.Действие  = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'Создать задачу по результатам отчета'");
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправить);
	Кнопка.ИмяКоманды = Команда.Имя;
	
	Кнопка = Форма.Элементы.Добавить(СтрШаблон("%1Еще",Команда.Имя), Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправитьЕще);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Форма.ПостоянныеКоманды.Добавить(Команда.Имя);
	
	ГруппаКнопокРассылки = Форма.Элементы.Добавить("ГруппаКомандМассовойРассылкиУНФ", 
		Тип("ГруппаФормы"), 
		Форма.Элементы.ГруппаОтправить);
		
	ГруппаКнопокРассылкиЕще = Форма.Элементы.Добавить("ГруппаКомандМассовойРассылкиУНФЕще", 
		Тип("ГруппаФормы"), 
		Форма.Элементы.ГруппаОтправитьЕще);
		
	ГруппаКнопокРассылки.Вид		= ВидГруппыФормы.Подменю;
	ГруппаКнопокРассылки.Заголовок 	= НСтр("ru = 'Добавить результат отчета в массовую рассылку'");
	
	ГруппаКнопокРассылкиЕще.Вид		= ВидГруппыФормы.Подменю;
	ГруппаКнопокРассылкиЕще.Заголовок 	= НСтр("ru = 'Добавить результат отчета в массовую рассылку'");
	
	Команда = Форма.Команды.Добавить("ВключитьРезультатВЕмейлРассылку");
	Команда.Действие  = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'E-mail'");
	
	Форма.ПостоянныеКоманды.Добавить(Команда.Имя);
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ГруппаКнопокРассылки);
	Кнопка.ИмяКоманды = Команда.Имя;
	
	Кнопка = Форма.Элементы.Добавить(СтрШаблон("%1Еще",Команда.Имя), 
		Тип("КнопкаФормы"), 
		ГруппаКнопокРассылкиЕще);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Команда = Форма.Команды.Добавить("ВключитьРезультатВСмсРассылку");
	Команда.Действие  = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'SMS'");
	
	Форма.ПостоянныеКоманды.Добавить(Команда.Имя);
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ГруппаКнопокРассылки);
	Кнопка.ИмяКоманды = Команда.Имя;
	
	Кнопка = Форма.Элементы.Добавить(СтрШаблон("%1Еще",Команда.Имя), 
		Тип("КнопкаФормы"), 
		ГруппаКнопокРассылкиЕще);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Команда = Форма.Команды.Добавить("ЭкспортироватьКонтактыОтчета");
	Команда.Действие  = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'Экспортировать результат отчета'");
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.ГруппаОтправить);
	Кнопка.ИмяКоманды = Команда.Имя;
	
	Кнопка = Форма.Элементы.Добавить(СтрШаблон("%1Еще",Команда.Имя), 
		Тип("КнопкаФормы"), 
		Форма.Элементы.ГруппаОтправитьЕще);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Форма.ПостоянныеКоманды.Добавить(Команда.Имя);
	
	Если Форма.Элементы.ГруппаОтправить.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Форма.Элементы.Переместить(Форма.Элементы.ОтправитьПоПочте, 
			Форма.Элементы.ГруппаОтправить, 
			Форма.Элементы.СоздатьЗадачуПоРезультатамОтчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаВариантовПредопределенногоОтчета(Отчет)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	(ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)
	|			ИЛИ ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Расширение)
	|			ИЛИ ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный))
	|	И ВариантыОтчетов.Отчет = &Отчет
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И НЕ ВариантыОтчетов.Пользовательский
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	КлючВарианта";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СписокПоказателей(НастройкиОтчета)
	
	Результат = Новый СписокЗначений;
	Для каждого ДоступноеПоле Из НастройкиОтчета.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		Результат.Добавить(Строка(ДоступноеПоле.Поле)); 
	КонецЦикла;
	ОтметитьВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, Результат);
	Возврат Результат;
	
КонецФункции

Функция ИндексПоляВыбора(НастройкиВыбор, Поле)
	
	Для каждого ПолеВыбора Из НастройкиВыбор Цикл
		Если НЕ ТипЗнч(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		Если ПолеВыбора.Поле = Поле Тогда
			Возврат НастройкиВыбор.Индекс(ПолеВыбора);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Неопределено;
	
КонецФункции

Функция ТипДополненияПоИмениПоля(ИмяПоля)
	
	Если ИмяПоля = "ПериодДень" ИЛИ ИмяПоля = "День" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли ИмяПоля = "ПериодНеделя" ИЛИ ИмяПоля = "Неделя" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли ИмяПоля = "ПериодМесяц" ИЛИ ИмяПоля = "Месяц" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли ИмяПоля = "ПериодКвартал" ИЛИ ИмяПоля = "Квартал" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли ИмяПоля = "ПериодПолугодие" ИЛИ ИмяПоля = "Полугодие" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли ИмяПоля = "ПериодГод" ИЛИ ИмяПоля = "Год" Тогда
		Возврат ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	Возврат ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
КонецФункции

Процедура УдалитьПоляСравнения(ИменаПолей, НастройкиВыбор, СхемаКомпоновкиДанных)
	
	МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для каждого ИмяПоля Из МассивИменПолей Цикл
		Для каждого ВыбранноеПоле Из НастройкиВыбор Цикл
			Если НЕ ТипЗнч(ВыбранноеПоле)=Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ВыбранноеПоле.Поле=Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				НастройкиВыбор.Удалить(ВыбранноеПоле);
			КонецЕсли;
		КонецЦикла;
		Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Найти(ИмяПоля);
		Если НЕ Ресурс=Неопределено Тогда
			СхемаКомпоновкиДанных.ПоляИтога.Удалить(Ресурс);
		КонецЕсли;
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
		Если НЕ ВычисляемоеПоле=Неопределено Тогда
			СхемаКомпоновкиДанных.ВычисляемыеПоля.Удалить(ВычисляемоеПоле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СуществуетСтандартныйРеквизит(СтандартныеРеквизиты, Имя)
	
	Для каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя=Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция МассивОтчетовВМассивИдентификаторов(МассивОтчетов)
	
	МассивИдентификаторов = Новый Массив;
	Для каждого Элемент Из МассивОтчетов Цикл
		Если ТипЗнч(Элемент)=Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			МассивИдентификаторов.Добавить(Элемент);
		ИначеЕсли ТипЗнч(Элемент)=Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			МассивИдентификаторов.Добавить(Элемент);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ОбъектМетаданных") И Метаданные.Отчеты.Содержит(Элемент) Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент));
		ИначеЕсли ТипЗнч(Элемент)=Тип("Строка") И Найти(Элемент, "Отчет.")>0 Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент));
		ИначеЕсли ТипЗнч(Элемент)=Тип("Строка") И Найти(Элемент, "Отчет.")=0 Тогда
			МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет."+Элемент));
		КонецЕсли; 
	КонецЦикла;
	Возврат МассивИдентификаторов;
	
КонецФункции

Процедура ДобавитьПолеВСписок(Список, Поле, Заголовок, Использование)
	
	Если Список.НайтиПоЗначению(Поле) = Неопределено Тогда
		Список.Добавить(Поле, Заголовок, Использование);	
	КонецЕсли;
	
КонецПроцедуры

#Область ФиксированныеСтроки

Функция ПредставлениеУдаляемойНастройки()
	
	Возврат "УдалитьПослеФормирования";	
	
КонецФункции

#КонецОбласти

#КонецОбласти

