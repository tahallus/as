#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОбъектXDTO(Данные, КоличествоОбъектов) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПередаваемыйОбъект = СериализацияКонтрагент(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПередаваемыйОбъект = СериализацияНоменклатура(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтруктурныеЕдиницы")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПередаваемыйОбъект = СериализацияСтруктурнаяЕдиница(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КассыККМ")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.КассыККМ") Тогда
		ПередаваемыйОбъект = СериализацияКассаККМ(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ЗаписиКалендаряПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности") Тогда
		ПередаваемыйОбъект = СериализацияЗаписиКалендаряПодготовкиОтчетности(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КалендарьПодготовкиОтчетности")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.КалендарьПодготовкиОтчетности") Тогда
		ПередаваемыйОбъект = СериализацияКалендарьПодготовкиОтчетности(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтатьиДвиженияДенежныхСредств")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ПередаваемыйОбъект = СериализацияСтатьяДвиженияДенежныхСредств(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПередаваемыйОбъект = СериализацияЗаказПокупателя(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ПередаваемыйОбъект = СериализацияРасходнаяНакладная(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПриходнаяНакладная")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ПередаваемыйОбъект = СериализацияПриходнаяНакладная(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СборкаЗапасов")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ПередаваемыйОбъект = СериализацияСборкаЗапасов(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		ПередаваемыйОбъект = СериализацияПоступлениеВКассу(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		ПередаваемыйОбъект = СериализацияРасходИзКассы(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЧекККМ")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПередаваемыйОбъект = СериализацияЧекККМ(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЧекККМВозврат")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ПередаваемыйОбъект = СериализацияЧекККМВозврат(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПередаваемыйОбъект = СериализацияОтчетОРозничныхПродажах(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		ПередаваемыйОбъект = СериализацияТипыНоменклатуры(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		ПередаваемыйОбъект = СериализацияЦеныНоменклатуры(Данные, КоличествоОбъектов);
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		ПередаваемыйОбъект = СериализацияУдалениеОбъекта(Данные, КоличествоОбъектов);
	КонецЕсли;
	
	КоличествоОбъектов = КоличествоОбъектов + 1;
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

#КонецОбласти

#Область Справочники

Функция СериализацияКонтрагент(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("CatContractors");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.Name = Данные.Наименование;
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	Если ЗначениеЗаполнено(Данные.Родитель) Тогда
		ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
	КонецЕсли;
	Если Данные.ЭтоГруппа Тогда
		ПередаваемыйОбъект.ThisIsGroup = Истина;
		Возврат ПередаваемыйОбъект;
	Иначе
		ПередаваемыйОбъект.ThisIsGroup = Ложь;
	КонецЕсли;
	
	ПочтовыйАдресКонтрагента = "";
	ЮрАдресКонтрагента = "";
	ФактАдресКонтрагента = "";
	ПередаваемыйОбъект.Tel = "";
	ПередаваемыйОбъект.Fax = "";
	ПередаваемыйОбъект.Email = "";
	ПередаваемыйОбъект.Web = "";
	ПередаваемыйОбъект.Adress = "";
	
	Для каждого ТекСтрока Из Данные.КонтактнаяИнформация Цикл
		Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ПередаваемыйОбъект.Tel = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			ПередаваемыйОбъект.Fax = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда
			ПочтовыйАдресКонтрагента = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			ЮрАдресКонтрагента = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ТекСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			ФактАдресКонтрагента = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ПередаваемыйОбъект.Email = ТекСтрока.Представление;
		ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ПередаваемыйОбъект.Web = ТекСтрока.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ФактАдресКонтрагента) Тогда
		ПередаваемыйОбъект.Adress = ФактАдресКонтрагента;
	ИначеЕсли НЕ ПустаяСтрока(ПочтовыйАдресКонтрагента) Тогда
		ПередаваемыйОбъект.Adress = ПочтовыйАдресКонтрагента;
	ИначеЕсли НЕ ПустаяСтрока(ЮрАдресКонтрагента) Тогда
		ПередаваемыйОбъект.Adress = ЮрАдресКонтрагента;
	КонецЕсли;
	
	ПередаваемыйОбъект.AdditionalInfo = Данные.Комментарий;
	ПередаваемыйОбъект.ContactName = Данные.КонтактноеЛицо.Наименование;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияНоменклатура(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("CatItems");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.Name = Данные.Наименование;
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	Если ЗначениеЗаполнено(Данные.Родитель) Тогда
		ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
	КонецЕсли;
	Если Данные.ЭтоГруппа Тогда
		ПередаваемыйОбъект.ThisIsGroup = Истина;
		Возврат ПередаваемыйОбъект;
	Иначе
		ПередаваемыйОбъект.ThisIsGroup = Ложь;
	КонецЕсли;
	ПередаваемыйОбъект.Article = Данные.Артикул;
	Если ЗначениеЗаполнено(Данные.Поставщик) Тогда
		ПередаваемыйОбъект.Supplier = ПолучитьОбъектXDTO(Данные.Поставщик, КоличествоОбъектов);
	КонецЕсли;
	ПередаваемыйОбъект.TypeItem = ПолучитьОбъектXDTO(Данные.ТипНоменклатуры, КоличествоОбъектов);
	ПередаваемыйОбъект.ImageAviable = ЗначениеЗаполнено(Данные.Ссылка.ФайлКартинки);
	
	ПередаваемыйОбъект.BarCode = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(Данные.Ссылка);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияСтруктурнаяЕдиница(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("CatStructuralUnit");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.Name = Данные.Наименование;
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Predefined = Данные.Предопределенный;
	Если ЗначениеЗаполнено(Данные.Родитель) Тогда
		ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
	КонецЕсли;

	Если Данные.Предопределенный Тогда
		Если Данные.Ссылка = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение Тогда
			ПередаваемыйОбъект.PredefinedCode = "000000001";
		ИначеЕсли Данные.Ссылка = Справочники.СтруктурныеЕдиницы.ОсновнойСклад Тогда
			ПередаваемыйОбъект.PredefinedCode = "000000002";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияКассаККМ(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("CatCashDesk");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.Name = Данные.Наименование;
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.RetailStructuralUnit = ПолучитьОбъектXDTO(Данные.СтруктурнаяЕдиница, КоличествоОбъектов);;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияЗаписиКалендаряПодготовкиОтчетности(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("RecTaxCalendar");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Date = Данные.ДатаСменыСостояния;
	ПередаваемыйОбъект.Complete = Данные.Завершено;
	ПередаваемыйОбъект.EventTax = ПолучитьОбъектXDTO(Данные.СобытиеКалендаря, КоличествоОбъектов);
	ПередаваемыйОбъект.Condition = Строка(Данные.Состояние);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияКалендарьПодготовкиОтчетности(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("EventTaxCalendar");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Task = ?(ЗначениеЗаполнено(Данные.Задача), Данные.Задача.Наименование, "");
	ПередаваемыйОбъект.StartDateInfo = Данные.ДатаНачалаИнформирования;
	ПередаваемыйОбъект.StartDateEvent = Данные.ДатаНачалаСобытия;
	ПередаваемыйОбъект.EndDateEvent = Данные.ДатаОкончанияСобытия;
	ПередаваемыйОбъект.DocProcDateEvent = Данные.ДатаДокументаОбработкиСобытия;
	ПередаваемыйОбъект.StartDateDocs = Данные.ДатаНачалаДокументов;
	ПередаваемыйОбъект.EndDateDocs = Данные.ДатаОкончанияДокументов;
	
	ПередаваемыйОбъект.ForEntrepreneur = Данные.ПрименяетсяДляИП;
	ПередаваемыйОбъект.ForLLC = Данные.ПрименяетсяДляООО;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияСтатьяДвиженияДенежныхСредств(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("CashFlowItems");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.Name = Данные.Наименование;
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Predefined = Данные.Предопределенный;
	
	Если ЗначениеЗаполнено(Данные.Родитель) Тогда
		ПередаваемыйОбъект.Group = ПолучитьОбъектXDTO(Данные.Родитель, КоличествоОбъектов);
	КонецЕсли;
	Если Данные.ЭтоГруппа Тогда
		ПередаваемыйОбъект.ThisIsGroup = Истина;
		Возврат ПередаваемыйОбъект;
	Иначе
		ПередаваемыйОбъект.ThisIsGroup = Ложь;
	КонецЕсли;
	
	Если Данные.Предопределенный Тогда
		Если Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей Тогда
			ПередаваемыйОбъект.PredefinedCode = "000000001";
		ИначеЕсли Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам Тогда
			ПередаваемыйОбъект.PredefinedCode = "000000002";
		ИначеЕсли Данные.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.Прочее Тогда
			ПередаваемыйОбъект.PredefinedCode = "000000003";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область Документы

Функция СериализацияЗаказПокупателя(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocOrders");
		
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		ПередаваемыйОбъект.Buyer = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
	КонецЕсли;
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		Если Данные.КоличествоВариантовКП >= 2
			И СтрокаТЧ.НомерВариантаКП <> Данные.ОсновнойВариантКП Тогда
			ПередаваемыйОбъект.ReadOnly = Истина;
			Продолжить;
		КонецЕсли;
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		Если НужноПересчитыватьСуммы Тогда
			ДобавляемаяСтрока.Price = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Цена,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Сумма,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Discount = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.СуммаСкидкиНаценки,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			ДобавляемаяСтрока.Discount = СтрокаТЧ.СуммаСкидкиНаценки;
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход, 0) <> 0
		|				И ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоРасход, 0) <> 0
		|				И ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтгруженПолностью,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОборот, 0) <= ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплаченПолностью,
		|	ДокументЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(, , Авто, , ) КАК ЗаказыПокупателейОстаткиИОбороты
		|		ПО ДокументЗаказПокупателя.Ссылка = ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты КАК ОплатаСчетовИЗаказовОбороты
		|		ПО ДокументЗаказПокупателя.Ссылка = ОплатаСчетовИЗаказовОбороты.СчетНаОплату
		|ГДЕ
		|	ДокументЗаказПокупателя.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", Данные.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПередаваемыйОбъект.Shipped = Выборка.ОтгруженПолностью;
		ПередаваемыйОбъект.Paid = Выборка.ОплаченПолностью;
	КонецЕсли;
	
	СуммаСкидкиНаценки = Данные.Запасы.Итог("СуммаСкидкиНаценки");
	Если НужноПересчитыватьСуммы Тогда
		ПередаваемыйОбъект.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			Данные.СуммаДокумента,
			Данные.Курс,
			1,
			Данные.Кратность,
			1
		);
		ПередаваемыйОбъект.Discount = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СуммаСкидкиНаценки,
			Данные.Курс,
			1,
			Данные.Кратность,
			1
		);
	Иначе
		ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		ПередаваемыйОбъект.Discount = СуммаСкидкиНаценки;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияРасходнаяНакладная(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocInvoice");
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	Попытка
		Если ЗначениеЗаполнено(Данные.Заказ) Тогда
				Если ТипЗнч(Данные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.Заказ.ПолучитьОбъект(), КоличествоОбъектов);
				КонецЕсли;
		ИначеЕсли Данные.Запасы.Количество() > 0 
			И ТипЗнч(Данные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") 
			И ЗначениеЗаполнено(Данные.Запасы[0].Заказ)
			И ЗначениеЗаполнено(Данные.Запасы[0].Всего) = Данные.СуммаДокумента Тогда
			ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.Запасы[0].Заказ.ПолучитьОбъект(), КоличествоОбъектов);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		ПередаваемыйОбъект.Buyer = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
	КонецЕсли;
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		Если НужноПересчитыватьСуммы Тогда
			ДобавляемаяСтрока.Price = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Цена,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Сумма,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Discount = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.СуммаСкидкиНаценки,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
			ДобавляемаяСтрока.Discount = СтрокаТЧ.СуммаСкидкиНаценки;
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	
	СуммаСкидкиНаценки = Данные.Запасы.Итог("СуммаСкидкиНаценки");
	Если НужноПересчитыватьСуммы Тогда
		ПередаваемыйОбъект.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			Данные.СуммаДокумента,
			Данные.Курс,
			1,
			Данные.Кратность,
			1
		);
		ПередаваемыйОбъект.Discount = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			СуммаСкидкиНаценки,
			Данные.Курс,
			1,
			Данные.Кратность,
			1
		);
	Иначе
		ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
		ПередаваемыйОбъект.Discount = СуммаСкидкиНаценки;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияПриходнаяНакладная(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocPurshareInvoice");
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		ПередаваемыйОбъект.Supplier = ПолучитьОбъектXDTO(Данные.Контрагент, КоличествоОбъектов);
	КонецЕсли;
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	НужноПересчитыватьСуммы = Данные.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить();
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		Если НужноПересчитыватьСуммы Тогда
			ДобавляемаяСтрока.Price = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Цена,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Сумма,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из Данные.Расходы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		Если НужноПересчитыватьСуммы Тогда
			ДобавляемаяСтрока.Price = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Цена,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
			ДобавляемаяСтрока.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТЧ.Сумма,
				Данные.Курс,
				1,
				Данные.Кратность,
				1
			);
		Иначе
			ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
			ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
		
	Если НужноПересчитыватьСуммы Тогда
		ПередаваемыйОбъект.Total = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
			Данные.СуммаДокумента,
			Данные.Курс,
			1,
			Данные.Кратность,
			1
		);
	Иначе
		ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияСборкаЗапасов(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocProduction");
	ТолькоДляЧтенияПродукция = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Продукция");
	ТолькоДляЧтенияЗапасы = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтенияПродукция ИЛИ ТолькоДляЧтенияЗапасы;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Products").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	Для каждого СтрокаТЧ Из Данные.Продукция Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	ПередаваемыйОбъект.Products = ДобавляемыеСтроки;

	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Materials").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	ПередаваемыйОбъект.Materials = ДобавляемыеСтроки;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияПоступлениеВКассу(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocIncomingPayment");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	Попытка
		Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
			Если ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
				ПередаваемыйОбъект.Invoice = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
			ИначеЕсли ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
				И Данные.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
				ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
			Иначе
				ПередаваемыйОбъект.ReadOnly = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Заказ)
			И Данные.РасшифровкаПлатежа[0].Заказ = Тип("ДокументСсылка.ЗаказПокупателя")
			И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
				ПередаваемыйОбъект.Order = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Заказ.ПолучитьОбъект(), КоличествоОбъектов);
			КонецЕсли;
			Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Документ)
			И Данные.РасшифровкаПлатежа[0].Документ = Тип("ДокументСсылка.РасходнаяНакладная")
			И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
				ПередаваемыйОбъект.Invoice = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Документ.ПолучитьОбъект(), КоличествоОбъектов);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		ПередаваемыйОбъект.Contractor = ПолучитьОбъектXDTO(Данные.Контрагент.ПолучитьОбъект(), КоличествоОбъектов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Статья) Тогда
		ПередаваемыйОбъект.CashFlowItem = ПолучитьОбъектXDTO(Данные.Статья.ПолучитьОбъект(), КоличествоОбъектов);
	КонецЕсли;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияРасходИзКассы(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocOutgoingPayment");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	Попытка
		Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
			Если ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
				ПередаваемыйОбъект.PurshareInvoice = ПолучитьОбъектXDTO(Данные.ДокументОснование.ПолучитьОбъект(), КоличествоОбъектов);
			Иначе
				ПередаваемыйОбъект.ReadOnly = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Данные.РасшифровкаПлатежа.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Данные.РасшифровкаПлатежа[0].Документ)
			И Данные.РасшифровкаПлатежа[0].Документ = Тип("ДокументСсылка.ПриходнаяНакладная")
			И Данные.РасшифровкаПлатежа[0].СуммаПлатежа = Данные.СуммаДокумента Тогда
				ПередаваемыйОбъект.PurshareInvoice = ПолучитьОбъектXDTO(Данные.РасшифровкаПлатежа[0].Документ.ПолучитьОбъект(), КоличествоОбъектов);
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		ПередаваемыйОбъект.Contractor = ПолучитьОбъектXDTO(Данные.Контрагент.ПолучитьОбъект(), КоличествоОбъектов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.Статья) Тогда
		ПередаваемыйОбъект.CashFlowItem = ПолучитьОбъектXDTO(Данные.Статья.ПолучитьОбъект(), КоличествоОбъектов);
	КонецЕсли;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияЧекККМ(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocCashReceipt");
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	ПередаваемыйОбъект.CheckNumber = Данные.НомерЧекаККМ;
	ПередаваемыйОбъект.ShiftNumber = Данные.НомерСменыККМ;
	ПередаваемыйОбъект.Printed = Данные.НомерЧекаККМ <> 0;
	
	Если ЗначениеЗаполнено(Данные.КассаККМ) Тогда
		ПередаваемыйОбъект.CashDesk = ПолучитьОбъектXDTO(Данные.КассаККМ, КоличествоОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.СтруктурнаяЕдиница) Тогда
		ПередаваемыйОбъект.StructuralUnit = ПолучитьОбъектXDTO(Данные.СтруктурнаяЕдиница, КоличествоОбъектов);
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.КассоваяСмена) Тогда
		ПередаваемыйОбъект.RetailSalesReport = ПолучитьОбъектXDTO(Данные.КассоваяСмена, КоличествоОбъектов);
	КонецЕсли;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
		ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	ПередаваемыйОбъект.InCashTotal = Данные.ПолученоНаличными;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияЧекККМВозврат(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocCashReceiptReturn");
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	ПередаваемыйОбъект.CheckNumber = Данные.НомерЧекаККМ;
	ПередаваемыйОбъект.ShiftNumber = Данные.НомерСменыККМ;
	ПередаваемыйОбъект.Printed = Данные.НомерЧекаККМ <> 0;
	
	Если ЗначениеЗаполнено(Данные.КассаККМ) Тогда
		ПередаваемыйОбъект.CashDesk = ПолучитьОбъектXDTO(Данные.КассаККМ, КоличествоОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.СтруктурнаяЕдиница) Тогда
		ПередаваемыйОбъект.StructuralUnit = ПолучитьОбъектXDTO(Данные.СтруктурнаяЕдиница, КоличествоОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ЧекККМ) Тогда
		ПередаваемыйОбъект.CashReceipt = ПолучитьОбъектXDTO(Данные.ЧекККМ, КоличествоОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.КассоваяСмена) Тогда
		ПередаваемыйОбъект.RetailSalesReport = ПолучитьОбъектXDTO(Данные.КассоваяСмена, КоличествоОбъектов);
	КонецЕсли;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
		ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияОтчетОРозничныхПродажах(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("DocRetailSalesReport");
	ТолькоДляЧтения = ОбменМобильноеПриложениеОбщее.ПроверитьВозможностьИзмененияТабличнойЧастиСНоменклатурой(Данные, "Запасы");
	ПередаваемыйОбъект.ReadOnly = ТолькоДляЧтения;
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Posted = Данные.Проведен;
	ПередаваемыйОбъект.Name = Данные.Номер;
	ПередаваемыйОбъект.Date = Данные.Дата;
	ПередаваемыйОбъект.Comment = Данные.Комментарий;
	Если ЗначениеЗаполнено(Данные.КассоваяСмена) Тогда
		ПередаваемыйОбъект.DateBegin = Данные.КассоваяСмена.НачалоКассовойСмены;
		ПередаваемыйОбъект.DateEnd = Данные.КассоваяСмена.ОкончаниеКассовойСмены;
	Иначе
		ПередаваемыйОбъект.DateBegin = Данные.НачалоКассовойСмены;
		ПередаваемыйОбъект.DateEnd = Данные.ОкончаниеКассовойСмены;
	КонецЕсли;
	
	Если Данные.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
		ПередаваемыйОбъект.Status = "Open";
	Иначе
		ПередаваемыйОбъект.Status = "Closed";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.КассаККМ) Тогда
		ПередаваемыйОбъект.CashDesk = ПолучитьОбъектXDTO(Данные.КассаККМ, КоличествоОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.СтруктурнаяЕдиница) Тогда
		ПередаваемыйОбъект.StructuralUnit = ПолучитьОбъектXDTO(Данные.СтруктурнаяЕдиница, КоличествоОбъектов);
	КонецЕсли;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Items").Тип;
	ДобавляемыеСтроки = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Запасы Цикл
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(СтрокаТЧ.Номенклатура, КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Price = СтрокаТЧ.Цена;
		ДобавляемаяСтрока.Total = СтрокаТЧ.Сумма;
		ДобавляемаяСтрока.Quantity = СтрокаТЧ.Количество;
		ДобавляемыеСтроки.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	ПередаваемыйОбъект.Items = ДобавляемыеСтроки;
	ПередаваемыйОбъект.Total = Данные.СуммаДокумента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область РегистрыСведений

Функция СериализацияТипыНоменклатуры(Данные, КоличествоОбъектов)
	
	Если Данные = Перечисления.ТипыНоменклатуры.Запас Тогда
		ПередаваемыйОбъект = "Product";
	Иначе
		ПередаваемыйОбъект = "Service";
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияЦеныНоменклатуры(Данные, КоличествоОбъектов)
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Prices");
	ВыгрузкаРегистра = Данные.Выгрузить();
	
	Если ЗначениеЗаполнено(ВыгрузкаРегистра[0].Номенклатура) Тогда
		ПередаваемыйОбъект.Nomenclature = ПолучитьОбъектXDTO(ВыгрузкаРегистра[0].Номенклатура, КоличествоОбъектов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	ПередаваемыйОбъект.Date = ВыгрузкаРегистра[0].Период;
	ПередаваемыйОбъект.Price = ВыгрузкаРегистра[0].Цена;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область ПрочиеОбъекты

Функция СериализацияУдалениеОбъекта(Данные, КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ObjectDeletion");
	ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
	
	Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПередаваемыйОбъект.Type = "CatContractors";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПередаваемыйОбъект.Type = "CatItems";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ПередаваемыйОбъект.Type = "CatStructuralUnit";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ПередаваемыйОбъект.Type = "CashFlowItems";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ПередаваемыйОбъект.Type = "DocOrders";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ПередаваемыйОбъект.Type = "DocPurshareInvoice";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ПередаваемыйОбъект.Type = "DocInvoice";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		ПередаваемыйОбъект.Type = "DocOutgoingPayment";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
		ПередаваемыйОбъект.Type = "DocIncomingPayment";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ПередаваемыйОбъект.Type = "DocProduction";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПередаваемыйОбъект.Type = "DocCashReceipt";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ПередаваемыйОбъект.Type = "DocCashReceiptReturn";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ПередаваемыйОбъект.Type = "DocRetailSalesReport";
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияСведенияОКомпании(КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Company");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователь,
			"ОсновнаяОрганизация"
		);
	Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	
	ПередаваемыйОбъект.name = Организация.Наименование;
	
	КоличествоОбъектов = КоличествоОбъектов + 1;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция СериализацияНастройкиНалогообложения(КоличествоОбъектов)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("TaxSettings");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователь,
			"ОсновнаяОрганизация"
		);
	Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	
	ПередаваемыйОбъект.IsLLC = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	Срез = РегистрыСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Новый Структура("Организация", Организация));
	Если Срез.Количество() = 0 Тогда
		ПередаваемыйОбъект.IsEmployer = ЛОЖЬ;
		ПередаваемыйОбъект.IsFilingTaxReporting = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerUSN = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerENVD = ЛОЖЬ;
		ПередаваемыйОбъект.IsPayerShoppingTax = ЛОЖЬ;
		ПередаваемыйОбъект.IsRetailSaleOfAlcohol = ЛОЖЬ;
	Иначе
		Срез = Срез[0];
		ПередаваемыйОбъект.IsEmployer = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников");
		ПередаваемыйОбъект.IsFilingTaxReporting = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИспользуетсяОтчетность");
		ПередаваемыйОбъект.IsPayerUSN = Срез.ПлательщикУСН;
		ПередаваемыйОбъект.IsPayerENVD = Срез.ПлательщикЕНВД;
		ПередаваемыйОбъект.IsPayerShoppingTax = Срез.ПлательщикТорговыйСбор;
		ПередаваемыйОбъект.IsRetailSaleOfAlcohol = Срез.РозничнаяПродажаАлкоголя;
	КонецЕсли;
	
	КоличествоОбъектов = КоличествоОбъектов + 1;
	
	Возврат ПередаваемыйОбъект;	
	
КонецФункции

Процедура СериализоватьИДобавитьОстаткиЗапасовВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток,
		|	ЗапасыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
		|ГДЕ
		|	ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И ЗапасыОстатки.КоличествоОстаток > 0"
	);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОстатков = Результат.Выбрать();
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");
	
	Пока ВыборкаОстатков.Следующий() Цикл
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		Если КоличествоОбъектов >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеОбщее.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ОбменМобильноеПриложениеОбщее.ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");
			
			КоличествоОбъектов = 0;
			
		КонецЕсли;
		
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(ВыборкаОстатков.Номенклатура) Тогда
			КоличествоОбъектов = 0;
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(ВыборкаОстатков.Номенклатура.ПолучитьОбъект(), КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = ВыборкаОстатков.КоличествоОстаток;
		ДобавляемаяСтрока.Total = ВыборкаОстатков.СуммаОстаток;
		ПередаваемыйОбъект.Item.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	Если ПередаваемыйОбъект <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОстаткиСКонтролемКоличестваОбъектов()

Процедура СериализоватьИДобавитьОстаткиЗапасовВЕдиныйПакетВыгрузки(ВозвращаемыйСписок, Данные) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток,
		|	ЗапасыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
		|ГДЕ
		|	ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|	И ЗапасыОстатки.КоличествоОстаток > 0"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Remains");

	Пока Выборка.Следующий() Цикл
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("Item").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			КоличествоОбъектов = 0;
			ДобавляемаяСтрока.Nomenclature = ПолучитьОбъектXDTO(Выборка.Номенклатура.ПолучитьОбъект(), КоличествоОбъектов);
		КонецЕсли;
		ДобавляемаяСтрока.Quantity = Выборка.КоличествоОстаток;
		ДобавляемаяСтрока.Total = Выборка.СуммаОстаток;
		ПередаваемыйОбъект.Item.Добавить(ДобавляемаяСтрока);
	КонецЦикла;
	
	Если ПередаваемыйОбъект <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры 

Процедура СериализоватьИДобавитьРолиВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов) Экспорт
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Roles");
	
	ЭтоВерсияСПроизводством = ОбменМобильноеПриложениеОбщее.ЭтоВерсияСПроизводством(УзелОбмена);
	ЭтоВерсияСРозницей = ОбменМобильноеПриложениеОбщее.ЭтоВерсияСРозницей(УзелОбмена);
	
	Для каждого ТекРоль Из УзелОбмена.Роли Цикл
		
		Если (ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ПроизводствоПросмотрИРедактирование
			ИЛИ ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ПроизводствоТолькоПросмотр)
			И НЕ ЭтоВерсияСПроизводством Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.РозницаПросмотрИРедактирование
			ИЛИ ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.РозницаТолькоПросмотр
			ИЛИ ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ИнформацияОКомпанииПросмотрИРедактирование
			ИЛИ ТекРоль.Роль = Перечисления.РолиМобильногоПриложения.ИнформацияОКомпанииТолькоПросмотр)
			И НЕ ЭтоВерсияСРозницей Тогда
			Продолжить;
		КонецЕсли;

		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		Если КоличествоОбъектов >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеОбщее.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ОбменМобильноеПриложениеОбщее.ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			ПередаваемыйОбъект = СоздатьОбъектXDTO("Roles");
			
			КоличествоОбъектов = 0;
			
		КонецЕсли;
		
		ДобавляемаяСтрокаТип = ПередаваемыйОбъект.Свойства().Получить("role").Тип;
		ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		ДобавляемаяСтрока.name = Строка(ТекРоль.Роль);
		ПередаваемыйОбъект.Role.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	Если ПередаваемыйОбъект <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // СериализоватьИДобавитьРолиВОбъектXDTO()

Процедура СериализоватьИДобавитьСведенияОКомпанииВОбъектXDTO(ВозвращаемыйСписок, КоличествоОбъектов) Экспорт
	
	ПередаваемыйОбъект = СериализацияСведенияОКомпании(КоличествоОбъектов);
	Если ПередаваемыйОбъект <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // СериализоватьИДобавитьСведенияОКомпанииВОбъектXDTO()

Процедура СериализоватьИДобавитьСведенияОНастройкахНалогообложенияВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов) Экспорт
	
	ПередаваемыйОбъект = СериализацияНастройкиНалогообложения(КоличествоОбъектов);
	Если ПередаваемыйОбъект <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ПередаваемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // СериализоватьИДобавитьСведенияОНастройкахНалогообложенияВОбъектXDTO()

Процедура СериализоватьИДобавитьСправочникиИДокументыВОбъектXDTO(ЗаписьСообщения, ЗаписьXML, ВозвращаемыйСписок, УзелОбмена, НомерСообщенияОчереди, КоличествоОбъектов) Экспорт
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		Если КоличествоОбъектов >= ПолучитьКоличествоОбъектовВПакете() Тогда
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
			ЗаписьСообщения.ЗакончитьЗапись();
			СообщениеОбмена = Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
			НомерСообщенияОчереди = НомерСообщенияОчереди + 1;
			ОбменМобильноеПриложениеОбщее.ДобавитьСообщениеВОчередьСообщенийОбмена(УзелОбмена, НомерСообщенияОчереди, СообщениеОбмена);
			
			ЗаписьXML = ОбменМобильноеПриложениеОбщее.ПолучитьЗаписьXMLДляСообщенияОбмена(УзелОбмена, ЗаписьСообщения);
			ВозвращаемыйСписок = СоздатьОбъектXDTO("Objects");
			
			КоличествоОбъектов = 0;
			
		КонецЕсли;
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если НЕ ОбменМобильноеПриложениеОбщее.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных.
			УдалениеДанных(Данные);
			
		КонецЕсли;
		
		ОбъектXDTO = ПолучитьОбъектXDTO(Данные, КоличествоОбъектов);
		Если ОбъектXDTO <> Неопределено Тогда
			ВозвращаемыйСписок.objects.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СериализоватьИДобавитьСправочникиИДокументыВОбъектXDTO()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьОбъектXDTO(ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/SB/MobileExchange", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

Функция ПолучитьКоличествоОбъектовВПакете()
	
	Возврат 1000;
	
КонецФункции

Процедура УдалениеДанных(Данные) Экспорт
	
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных.
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные.
		Данные.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // УдалениеДанных()

#КонецОбласти
