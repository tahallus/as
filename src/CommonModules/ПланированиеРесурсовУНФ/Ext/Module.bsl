
#Область ПрограммныйИнтерфейс

// Возвращает расписание загрузки ресурсов.
//
Функция ПолучитьРасписаниеЗагрузкиРесурсов(СписокРесурсов, НачалоПериода, ОкончаниеПериода) Экспорт
	
	СписокДатПериода = Новый СписокЗначений;
	
	СчетчикДней = НачалоПериода;
	
	Пока НачалоДня(СчетчикДней) <= НачалоДня(ОкончаниеПериода) Цикл
		СписокДатПериода.Добавить(НачалоДня(СчетчикДней));
		СчетчикДней = СчетчикДней + 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыРесурсов.Период КАК Период,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК РесурсПредприятия
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|ГДЕ
	|	НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника
	|	И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	НЕ КлючевыеРесурсы.Недействителен
	|	И КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Период,
	|	Сотрудники.ГрафикРаботы,
	|	КлючевыеРесурсы.Ссылка
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
	|		ПО КлючевыеРесурсы.ЗначениеРесурса = Сотрудники.Сотрудник
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КлючевыеРесурсы.ЗначениеРесурса) = ТИП(Справочник.Сотрудники)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ИспользоватьГрафикСотрудника
	|	И НЕ КлючевыеРесурсы.Ссылка В
	|				(ВЫБРАТЬ
	|					ГрафикиРаботыРесурсов.РесурсПредприятия КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|				ГДЕ
	|					НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.Недействителен
	|					И НЕ ГрафикиРаботыРесурсов.РесурсПредприятия.ИспользоватьГрафикСотрудника)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.Период КАК Период,
	|	Итог.ГрафикРаботы КАК ГрафикРаботы,
	|	Итог.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	Итог КАК Итог
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсПредприятия,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	РесурсПредприятия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРесурс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("Период", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("ГрафикРаботы", ОписаниеТипов);
	
	Пока ВыборкаРесурс.Следующий() Цикл
		
		МассивДнейГрафиков = Новый Массив();
		Для каждого ЭлСписка Из СписокДатПериода Цикл
			МассивДнейГрафиков.Добавить(ЭлСписка.Значение);
		КонецЦикла;
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Период) Тогда Продолжить КонецЕсли;
			
			Инд = 0;
			Пока Инд <= МассивДнейГрафиков.Количество() - 1 Цикл
				
				Если Выборка.Период <= МассивДнейГрафиков[Инд] Тогда
					
					НоваяСтрока = ТаблицаГрафиков.Добавить();
					НоваяСтрока.РесурсПредприятия = Выборка.РесурсПредприятия;
					НоваяСтрока.Период = МассивДнейГрафиков[Инд];
					НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
					МассивДнейГрафиков.Удалить(Инд);
					
				Иначе
					Инд = Инд + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РесурсыБезГрафика = Новый Массив;
	ОбщийСписокРесурсов = Новый Массив;
	
	Для Каждого ЭлементМассива Из СписокРесурсов Цикл
		ОбщийСписокРесурсов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Для Каждого РесурсСписка Из ОбщийСписокРесурсов Цикл
		
		НайденноеЗначение = ТаблицаГрафиков.Найти(РесурсСписка);
		
		Если НайденноеЗначение = Неопределено Тогда
			РесурсыБезГрафика.Добавить(РесурсСписка);
			УдаляемыйЭлемент = СписокРесурсов.Найти(РесурсСписка);
			СписокРесурсов.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	НЕ КлючевыеРесурсы.ПометкаУдаления
	|	И КлючевыеРесурсы.Ссылка В(&ОтборСписокКлючевыхРесурсов)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ РесурсыБезГрафика
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	КлючевыеРесурсы.Ссылка В(&РесурсыБезГрафика)
	|	И НЕ КлючевыеРесурсы.Недействителен
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГрафиков.Период КАК Период,
	|	ТаблицаГрафиков.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВременнаяТаблицаГрафиков
	|ИЗ
	|	&ТаблицаГрафиков КАК ТаблицаГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаГрафиков.Период КАК Период,
	|	ВременнаяТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ГОД(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ ГОД(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Год,
	|	ВЫБОР
	|		КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала)
	|		ИНАЧЕ МЕСЯЦ(ГрафикиРаботы.ВремяНачала)
	|	КОНЕЦ КАК Месяц,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, МИНУТА), ГрафикиРаботы.ВремяОкончания, СЕКУНДА) = 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|					ИНАЧЕ ГрафикиРаботы.ВремяОкончания
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|			КОНЕЦ
	|	КОНЕЦ КАК ОкончаниеРабочегоПериодаЗаДень,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, МИНУТА), ГрафикиРаботы.ВремяНачала, СЕКУНДА) = 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|					ИНАЧЕ ГрафикиРаботы.ВремяНачала
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала
	|			КОНЕЦ
	|	КОНЕЦ КАК НачалоРабочегоПериодаЗаДень
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГрафиков КАК ВременнаяТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВременнаяТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ВременнаяТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.День, ДЕНЬ))
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РесурсыБезГрафика.РесурсПредприятия,
	|	РесурсыБезГрафика.Мощность,
	|	ОтклоненияОтГрафиковРаботыРесурсов.День,
	|	""ГрафикНеЗадан"",
	|	ГОД(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала),
	|	МЕСЯЦ(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала),
	|	ВЫБОР
	|		КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, СЕКУНДА) = 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания, МИНУТА), СЕКУНДА, 60)
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, СЕКУНДА) = 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, МИНУТА), СЕКУНДА, 60)
	|		ИНАЧЕ ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала
	|	КОНЕЦ
	|ИЗ
	|	РесурсыБезГрафика КАК РесурсыБезГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО РесурсыБезГрафика.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоРабочегоПериодаЗаДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ОбщаяТаблицаРесурсов
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РесурсыБезГрафика.РесурсПредприятия,
	|	РесурсыБезГрафика.Мощность,
	|	РесурсыБезГрафика.РесурсНаименование
	|ИЗ
	|	РесурсыБезГрафика КАК РесурсыБезГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	|	ВложенныйЗапрос.Старт КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВложенныйЗапрос.Мощность КАК Загрузка,
	|	МЕСЯЦ(ВложенныйЗапрос.Старт) КАК Месяц,
	|	ГОД(ВложенныйЗапрос.Старт) КАК Год,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Старт, ДЕНЬ) КАК Период,
	|	РАЗНОСТЬДАТ(ВложенныйЗапрос.Старт, ВложенныйЗапрос.Финиш, СЕКУНДА) / 300 КАК КоличествоЯчеек,
	|	ВложенныйЗапрос.НомерСтрокиТаблицыРесурсов КАК НомерСтроки,
	|	ОбщаяТаблицаРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	ОбщаяТаблицаРесурсов.Мощность КАК Мощность
	|ИЗ
	|	ОбщаяТаблицаРесурсов КАК ОбщаяТаблицаРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасписаниеЗагрузкиРесурсов.Регистратор КАК Ссылка,
	|			РасписаниеЗагрузкиРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|			РасписаниеЗагрузкиРесурсов.Мощность КАК Мощность,
	|			ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, МИНУТА), РасписаниеЗагрузкиРесурсов.Старт, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Старт, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ РасписаниеЗагрузкиРесурсов.Старт
	|			КОНЕЦ КАК Старт,
	|			ВЫБОР
	|				КОГДА НЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Финиш, МИНУТА), РасписаниеЗагрузкиРесурсов.Финиш, СЕКУНДА) = 0
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасписаниеЗагрузкиРесурсов.Финиш, МИНУТА), СЕКУНДА, 60)
	|				ИНАЧЕ РасписаниеЗагрузкиРесурсов.Финиш
	|			КОНЕЦ КАК Финиш,
	|			РасписаниеЗагрузкиРесурсов.Контрагент КАК Контрагент,
	|			РасписаниеЗагрузкиРесурсов.Ответственный КАК Ответственный,
	|			РасписаниеЗагрузкиРесурсов.Подразделение КАК Подразделение,
	|			РасписаниеЗагрузкиРесурсов.НомерСтрокиТаблицыРесурсов КАК НомерСтрокиТаблицыРесурсов
	|		ИЗ
	|			РегистрСведений.РасписаниеЗагрузкиРесурсов КАК РасписаниеЗагрузкиРесурсов
	|		ГДЕ
	|			РасписаниеЗагрузкиРесурсов.РесурсПредприятия В(&ОбщийСписокРесурсов)
	|			И РасписаниеЗагрузкиРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И РасписаниеЗагрузкиРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания) КАК ВложенныйЗапрос
	|		ПО ОбщаяТаблицаРесурсов.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаГрафиков", ТаблицаГрафиков);
	Запрос.УстановитьПараметр("РесурсыБезГрафика", РесурсыБезГрафика);
	Запрос.УстановитьПараметр("ОбщийСписокРесурсов", ОбщийСписокРесурсов);
	
	СтруктураВозврата = Новый Структура;
	
	ПакетДанныхРесурсов = Запрос.ВыполнитьПакет();
	
	РабочиеПериоды = ПакетДанныхРесурсов[3].Выгрузить();
	ПроверитьГраницыИнтервалов(РабочиеПериоды, Истина);
	
	РасписаниеЗагрузки = ПакетДанныхРесурсов[5].Выгрузить();
	ПроверитьГраницыИнтервалов(РасписаниеЗагрузки);
	
	СтруктураВозврата.Вставить("РабочиеПериоды", РабочиеПериоды);
	СтруктураВозврата.Вставить("РасписаниеЗагрузки", РасписаниеЗагрузки);
	
	Возврат СтруктураВозврата;;
	
КонецФункции // ПолучитьРасписаниеЗагрузкиРесурсов()

// Возвращает структуру с минимальным значением начала и максимальным значением окончания интервала
//
Функция МаксимальныеГраницыИнтервала(ТаблицаИнтервалов, ИмяКолонкиНачала, ИмяКолонкиОкончания) Экспорт
	
	Если Не ТаблицаИнтервалов.Количество() Тогда Возврат Неопределено КонецЕсли;
	
	НачалоИнтервала = ТаблицаИнтервалов[0][ИмяКолонкиНачала];
	ОкончаниеИнтервала = Дата(1,1,1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаИнтервалов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиНачала])
			И СтрокаТаблицы[ИмяКолонкиНачала] < НачалоИнтервала Тогда
			НачалоИнтервала = СтрокаТаблицы[ИмяКолонкиНачала];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиОкончания])
			И СтрокаТаблицы[ИмяКолонкиОкончания] > ОкончаниеИнтервала Тогда
			ОкончаниеИнтервала = СтрокаТаблицы[ИмяКолонкиОкончания];
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураИнтервалов = Новый Структура("НачалоИнтервала, ОкончаниеИнтервала", НачалоИнтервала, ОкончаниеИнтервала);
	
	Возврат СтруктураИнтервалов;
	
КонецФункции

// Возвращает документы по ресурсу за указанный период
//
Функция ТаблицаДокументовЗаПериод(СтрокиПоРесурсу, НачалоИнтервала, ОкончанияИнтервала, КратностьПланирования, ПериодДень = Ложь) Экспорт
	
	Если ПериодДень Тогда
		ОкончаниеИнтервалаПроверки = КонецДня(НачалоИнтервала);
	ИначеЕсли Не НачалоИнтервала = ОкончанияИнтервала
		Тогда
		ОкончаниеИнтервалаПроверки = ОкончанияИнтервала;
	Иначе
		
		ОкончаниеИнтервалаПроверки = НачалоИнтервала + КратностьПланирования*60;
	КонецЕсли;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Ссылка");
	ТаблицаДокументов.Колонки.Добавить("Загрузка");
	ТаблицаДокументов.Колонки.Добавить("ВремяНачала");
	ТаблицаДокументов.Колонки.Добавить("ВремяОкончания");
	ТаблицаДокументов.Колонки.Добавить("НомерСтроки");
	ТаблицаДокументов.Колонки.Добавить("КоличествоЯчеек");
	
	Для Каждого ПериодТаблицы Из СтрокиПоРесурсу Цикл
		
		Если Не ЗначениеЗаполнено(ПериодТаблицы.Ссылка) Тогда Продолжить КонецЕсли;
		Если ПериодТаблицы.ВремяНачала > ОкончаниеИнтервалаПроверки Тогда Продолжить КонецЕсли;
		
		Если ПериодТаблицы.ВремяОкончания <= ОкончаниеИнтервалаПроверки И ПериодТаблицы.ВремяНачала>=НачалоИнтервала Тогда
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Ссылка = ПериодТаблицы.Ссылка;
			НоваяСтрока.Загрузка = ПериодТаблицы.Загрузка;
			НоваяСтрока.ВремяНачала = ПериодТаблицы.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ПериодТаблицы.ВремяОкончания;
			НоваяСтрока.НомерСтроки = ПериодТаблицы.НомерСтроки;
			НоваяСтрока.КоличествоЯчеек = ПериодТаблицы.КоличествоЯчеек;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПериодТаблицы.ВремяОкончания <= ОкончаниеИнтервалаПроверки И ПериодТаблицы.ВремяОкончания > НачалоИнтервала Тогда
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Ссылка = ПериодТаблицы.Ссылка;
			НоваяСтрока.Загрузка = ПериодТаблицы.Загрузка;
			НоваяСтрока.ВремяНачала = ПериодТаблицы.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ПериодТаблицы.ВремяОкончания;
			НоваяСтрока.НомерСтроки = ПериодТаблицы.НомерСтроки;
			НоваяСтрока.КоличествоЯчеек = ПериодТаблицы.КоличествоЯчеек;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПериодТаблицы.ВремяНачала>=НачалоИнтервала И ПериодТаблицы.ВремяНачала<ОкончаниеИнтервалаПроверки Тогда
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Ссылка = ПериодТаблицы.Ссылка;
			НоваяСтрока.Загрузка = ПериодТаблицы.Загрузка;
			НоваяСтрока.ВремяНачала = ПериодТаблицы.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ПериодТаблицы.ВремяОкончания;
			НоваяСтрока.НомерСтроки = ПериодТаблицы.НомерСтроки;
			НоваяСтрока.КоличествоЯчеек = ПериодТаблицы.КоличествоЯчеек;
			
			Продолжить;
			
		КонецЕсли;
		
		Если (НачалоИнтервала>=ПериодТаблицы.ВремяНачала И НачалоИнтервала< ПериодТаблицы.ВремяОкончания) Тогда
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Ссылка = ПериодТаблицы.Ссылка;
			НоваяСтрока.Загрузка = ПериодТаблицы.Загрузка;
			НоваяСтрока.ВремяНачала = ПериодТаблицы.ВремяНачала;
			НоваяСтрока.ВремяОкончания = ПериодТаблицы.ВремяОкончания;
			НоваяСтрока.НомерСтроки = ПериодТаблицы.НомерСтроки;
			НоваяСтрока.КоличествоЯчеек = ПериодТаблицы.КоличествоЯчеек;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Возвращает итоги по интервалу в рамках дня
Функция ИтогиПоДню(ДеньВывода, Кратность, РабочиеПериоды, Ресурс, РасписаниеЗагрузки, ДокументыРасшифровки, МатрицаИнтервалов, НайденныеСтроки = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура();
	
	КратностьСек = Кратность*60;
	
	КратностьСек = ?(КратностьСек = 0, 300, КратностьСек);
	
	ПараметрыОтбора = Новый Структура("Период, РесурсПредприятия", НачалоДня(ДеньВывода), Ресурс);
	НайденныеСтрокиЗаДень = РабочиеПериоды.НайтиСтроки(ПараметрыОтбора);
	
	РабочиеПериодыЗаДень = РабочиеПериоды.СкопироватьКолонки();
	
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиЗаДень Цикл
		
		НоваяСтрока = РабочиеПериодыЗаДень.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		
	КонецЦикла;
	
	РабочиеПериодыЗаДень.Свернуть("НачалоРабочегоПериодаЗаДень, ОкончаниеРабочегоПериодаЗаДень");
	КоличествоПериодов = РабочиеПериодыЗаДень.Количество();
	
	ДокументыЗаДень = ДокументыРасшифровки.Скопировать();
	ДокументыЗаДень.Свернуть("Ссылка, ВремяНачала, ВремяОкончания, КоличествоЯчеек");
	
	Если Не ДокументыЗаДень.Количество() И (КоличествоПериодов = 0 
		ИЛИ (КоличествоПериодов = 1 И (Не ЗначениеЗаполнено(РабочиеПериодыЗаДень[0].НачалоРабочегоПериодаЗаДень)
		ИЛИ Не ЗначениеЗаполнено(РабочиеПериодыЗаДень[0].ОкончаниеРабочегоПериодаЗаДень)))) Тогда
		
		СтруктураВозврата.Вставить("Загрузка", 0);
		СтруктураВозврата.Вставить("ИнтервалыБезЗагрузки", 0);
		СтруктураВозврата.Вставить("ИнтервалыСЗагрузкой", 0);
		СтруктураВозврата.Вставить("ЕстьПревышение", Ложь);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ТаблицаРабочихИнтервалов = Новый ТаблицаЗначений;
	ТаблицаРабочихИнтервалов.Колонки.Добавить("НачалоИнтервала");
	ТаблицаРабочихИнтервалов.Колонки.Добавить("ОкончаниеИнтервала");
	ТаблицаРабочихИнтервалов.Колонки.Добавить("КоличествоЯчеекВИнтервале");
	ТаблицаРабочихИнтервалов.Колонки.Добавить("ПоДокументу");
	
	СоответствиеЯчеекВремени = Новый Соответствие;
	МатрицаИнтервалов.Очистить();
	
	ИндексЯчейки = 1;
	ВремяИнтервала = НачалоДня(ДеньВывода);
	ОкончанияИнтервала = КонецДня(ДеньВывода)+1;
	
	Пока ВремяИнтервала <= ОкончанияИнтервала Цикл

		СоответствиеЯчеекВремени.Вставить(ВремяИнтервала, ИндексЯчейки);
		
		ВремяИнтервала = ВремяИнтервала + 300;
		ИндексЯчейки = ИндексЯчейки + 1;
	КонецЦикла;
	
	СтрокаМатрицы = МатрицаИнтервалов.Добавить();
	
	Для Каждого РабочийПериод Из РабочиеПериодыЗаДень Цикл
		
		НачалоПериода = РабочийПериод.НачалоРабочегоПериодаЗаДень;
		ОкончаниеПериода = РабочийПериод.ОкончаниеРабочегоПериодаЗаДень;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда Продолжить КонецЕсли;
		
		ОкончаниеПериода = ?(ОкончаниеПериода = КонецДня(ОкончаниеПериода), ОкончаниеПериода+1, ОкончаниеПериода);
		
		КолонкаМатрицыНачалоПериода = СоответствиеЯчеекВремени.Получить(НачалоПериода);
		КолонкаМатрицыОкончаниеПериода = СоответствиеЯчеекВремени.Получить(ОкончаниеПериода);
		
		Пока НачалоПериода <= ОкончаниеПериода Цикл
			
			ОкончаниеИнтервала = НачалоПериода + КратностьСек;
			
			НоваяСтрока = ТаблицаРабочихИнтервалов.Добавить();
			НоваяСтрока.НачалоИнтервала = НачалоПериода;
			НоваяСтрока.ОкончаниеИнтервала = ?(ОкончаниеИнтервала>ОкончаниеПериода, ОкончаниеПериода, ОкончаниеИнтервала);
			НоваяСтрока.КоличествоЯчеекВИнтервале = (НоваяСтрока.ОкончаниеИнтервала - НоваяСтрока.НачалоИнтервала)/300;
			НоваяСтрока.ПоДокументу = Ложь;
			
			НачалоПериода = ОкончаниеИнтервала;
		КонецЦикла;
		
		Пока КолонкаМатрицыНачалоПериода < КолонкаМатрицыОкончаниеПериода Цикл
			
			ИмяКолонки = "Колонка"+Строка(КолонкаМатрицыНачалоПериода);
			
			СтрокаМатрицы[ИмяКолонки] = 5000;
			КолонкаМатрицыНачалоПериода = КолонкаМатрицыНачалоПериода+1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПредыдущийДокумент = Неопределено;
	
	Для Каждого Документ Из ДокументыЗаДень Цикл
		
		Если НЕ Документ.Ссылка = ПредыдущийДокумент Тогда
			СтрокаМатрицы = МатрицаИнтервалов.Добавить();
		КонецЕсли;
		
		ВремяОкончания = Документ.ВремяОкончания;
		ВремяНачала = Документ.ВремяНачала;
		
		Если ВремяОкончания = КонецДня(ВремяОкончания) Тогда
			ВремяОкончания = ВремяОкончания + 1;
		КонецЕсли;
		
		КолонкаМатрицыНачалоПериода = СоответствиеЯчеекВремени.Получить(ВремяНачала);
		КолонкаМатрицыОкончаниеПериода = СоответствиеЯчеекВремени.Получить(ВремяОкончания);
		
		Пока КолонкаМатрицыНачалоПериода < КолонкаМатрицыОкончаниеПериода Цикл
			
			СтрокаМатрицы["Колонка"+Строка(КолонкаМатрицыНачалоПериода)] = 1;
			КолонкаМатрицыНачалоПериода = КолонкаМатрицыНачалоПериода+1;
			
		КонецЦикла;
		
		ПредыдущийДокумент = Документ.Ссылка;
		
	КонецЦикла;
	
	ИндексКолонки = 1;
	КоличествоОбъединяемыхИнтервалов = 0;
	
	ВремяИнтервала = НачалоДня(ДеньВывода);
	
	ЯчеекВКратности = Кратность/5;
	
	Пока ВремяИнтервала <= ОкончанияИнтервала Цикл
		
		ИмяКолонки = "Колонка"+ ИндексКолонки;
		
		ИтогПоИнтервалу = МатрицаИнтервалов.Итог(ИмяКолонки);
		
		ЭтоЯчейкаДляОбъединения = ЗначениеЗаполнено(ИтогПоИнтервалу) И ИтогПоИнтервалу<5000;
		
		Если ЭтоЯчейкаДляОбъединения И Не КоличествоОбъединяемыхИнтервалов = ЯчеекВКратности Тогда
			
			Если КоличествоОбъединяемыхИнтервалов = 0 Тогда
				НоваяСтрока = ТаблицаРабочихИнтервалов.Добавить();
				НоваяСтрока.НачалоИнтервала = ВремяИнтервала;
				НоваяСтрока.ПоДокументу = Истина;
			КонецЕсли;
			КоличествоОбъединяемыхИнтервалов =КоличествоОбъединяемыхИнтервалов + 1;
			
		ИначеЕсли ЭтоЯчейкаДляОбъединения И КоличествоОбъединяемыхИнтервалов = ЯчеекВКратности Тогда
			
			НоваяСтрока.ОкончаниеИнтервала = ВремяИнтервала;
			НоваяСтрока.КоличествоЯчеекВИнтервале = (НоваяСтрока.ОкончаниеИнтервала - НоваяСтрока.НачалоИнтервала)/300;
			
			НоваяСтрока = ТаблицаРабочихИнтервалов.Добавить();
			НоваяСтрока.НачалоИнтервала = ВремяИнтервала;
			НоваяСтрока.ПоДокументу = Истина;
			
			КоличествоОбъединяемыхИнтервалов = 1;
			
		ИначеЕсли ЗначениеЗаполнено(КоличествоОбъединяемыхИнтервалов) Тогда
			НоваяСтрока.ОкончаниеИнтервала = ВремяИнтервала;
			НоваяСтрока.КоличествоЯчеекВИнтервале = (НоваяСтрока.ОкончаниеИнтервала - НоваяСтрока.НачалоИнтервала)/300;
			КоличествоОбъединяемыхИнтервалов = 0;
		КонецЕсли;
		
		ВремяИнтервала = ВремяИнтервала + 300;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
	ТаблицаРабочихИнтервалов.Сортировать("НачалоИнтервала Возр");
	
	ИтогПоЗагрузкам = 0;
	ИнтервалыБезЗагрузки = 0;
	ИнтервалыСЗагрузкой = 0;
	ЕстьПревышение = Ложь;
	Мощность = Ресурс.Мощность;
	
	Для Каждого РабочийИнтервал Из ТаблицаРабочихИнтервалов Цикл;
		
		Если РабочийИнтервал.КоличествоЯчеекВИнтервале = 0 Тогда Продолжить КонецЕсли;
		
		ДокументыЗаПериод = ТаблицаДокументовЗаПериод(НайденныеСтроки, РабочийИнтервал.НачалоИнтервала, РабочийИнтервал.ОкончаниеИнтервала, Кратность);
		ЗагрузкаЗаИнтервал = МаксимумПоЗагрузке(ДокументыЗаПериод, РабочийИнтервал.НачалоИнтервала, РабочийИнтервал.ОкончаниеИнтервала, РабочийИнтервал.КоличествоЯчеекВИнтервале, МатрицаИнтервалов);
		ИнтервалыБезЗагрузки = ?(ЗагрузкаЗаИнтервал = 0, ИнтервалыБезЗагрузки+1, ИнтервалыБезЗагрузки);
		ИнтервалыСЗагрузкой = ?(Не ЗагрузкаЗаИнтервал = 0 И Не РабочийИнтервал.ПоДокументу, ИнтервалыСЗагрузкой+1, ИнтервалыСЗагрузкой);
		ЕстьПревышение = ?(ЗагрузкаЗаИнтервал>Мощность, Истина, ЕстьПревышение);
		
		ИтогПоЗагрузкам = ИтогПоЗагрузкам + ЗагрузкаЗаИнтервал;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("Загрузка", ИтогПоЗагрузкам);
	СтруктураВозврата.Вставить("ИнтервалыБезЗагрузки", ИнтервалыБезЗагрузки);
	СтруктураВозврата.Вставить("ИнтервалыСЗагрузкой", ИнтервалыСЗагрузкой);
	СтруктураВозврата.Вставить("ЕстьПревышение", ЕстьПревышение);
	
	Возврат СтруктураВозврата;
	
	
КонецФункции

// Возвращает максимальную загрузку в рамках интервала
//
Функция МаксимумПоЗагрузке(ДокументыРасшифровки, НачалоИнтервала, ОкончанияИнтервала, КоличествоЯчеекВИнтервале, ТаблицаИнтервалаПо5Мин) Экспорт
	
	Если Не ДокументыРасшифровки.Количество() Тогда Возврат 0 КонецЕсли;
	
	МаксимальнаяЗагрузка = 0;
	
	СоответствиеЯчеекВремени = Новый Соответствие;
	
	ТаблицаИнтервалаПо5Мин.Очистить();
	
	ИндексЯчейки = 1;
	НачалоИнтервала = ?(Секунда(НачалоИнтервала) = 0, НачалоИнтервала, НачалоИнтервала - Секунда(НачалоИнтервала));
	ВремяИнтервала = НачалоИнтервала;
	
	Если ОкончанияИнтервала = КонецДня(ОкончанияИнтервала) Тогда
		ОкончанияИнтервала = ОкончанияИнтервала + 1;
	КонецЕсли;
	
	Пока ВремяИнтервала <= ОкончанияИнтервала Цикл
		СоответствиеЯчеекВремени.Вставить(ВремяИнтервала, ИндексЯчейки);
		
		ВремяИнтервала = ВремяИнтервала + 300;
		ИндексЯчейки = ИндексЯчейки + 1;
	КонецЦикла;
	
	Для Каждого СтрокаДокументаРасшифровки Из ДокументыРасшифровки Цикл
		
		Если СтрокаДокументаРасшифровки.ВремяНачала>=НачалоИнтервала Тогда
			ВремяЯчейкиИнтервала = СтрокаДокументаРасшифровки.ВремяНачала;
			КоличествоЯчеек = СтрокаДокументаРасшифровки.КоличествоЯчеек;
		Иначе
			ВремяЯчейкиИнтервала = НачалоИнтервала;
			КоличествоЯчеек = (СтрокаДокументаРасшифровки.ВремяОкончания - НачалоИнтервала)/300;
		КонецЕсли;
		
		НомерЯчейкиНачалаИнтервала = СоответствиеЯчеекВремени.Получить(ВремяЯчейкиИнтервала);
		
		НомерЯчейкиОкончанияИнтервала = НомерЯчейкиНачалаИнтервала + (КоличествоЯчеек-1);
		НомерЯчейкиОкончанияИнтервала = ?(НомерЯчейкиОкончанияИнтервала > КоличествоЯчеекВИнтервале, КоличествоЯчеекВИнтервале, НомерЯчейкиОкончанияИнтервала);
		
		НоваяСтрока = ТаблицаИнтервалаПо5Мин.Добавить();
		
		Пока НомерЯчейкиНачалаИнтервала <= НомерЯчейкиОкончанияИнтервала Цикл
			
			ИмяКолонки = "Колонка"+Строка(НомерЯчейкиНачалаИнтервала);
			
			НоваяСтрока[ИмяКолонки] = СтрокаДокументаРасшифровки.Загрузка;
			
			НомерЯчейкиНачалаИнтервала = НомерЯчейкиНачалаИнтервала + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КолонкаТаблицы Из ТаблицаИнтервалаПо5Мин.Колонки Цикл
		ИтогПоКолонке = ТаблицаИнтервалаПо5Мин.Итог(КолонкаТаблицы);
		МаксимальнаяЗагрузка = ?(МаксимальнаяЗагрузка<ИтогПоКолонке, ИтогПоКолонке, МаксимальнаяЗагрузка);
	КонецЦикла;
	
	Возврат МаксимальнаяЗагрузка;
	
КонецФункции

// Формирует колонки интервалов
//
Функция СформироватьКолонкиИнтервалов() Экспорт
	
	МатрицаИнтервалов = Новый ТаблицаЗначений;
	
	Для ИндексКолонки = 1 По 289 Цикл
		МатрицаИнтервалов.Колонки.Добавить("Колонка"+Строка(ИндексКолонки));
	КонецЦикла;
	
	Возврат МатрицаИнтервалов;
	
КонецФункции

// Осуществляет контроль параметров загрузки в зависимости от входящих условий
//
Процедура КонтрольПараметровЗагрузкиРесурсов(ПроверкаПревышенияЗагрузки = Ложь,ПроверкаГраницИнтерваловЗагрузки = Ложь,ВыбранныеРесурсы, Объект) Экспорт
	
	Если Не ВыбранныеРесурсы.количество() ИЛИ ЕстьОшибкиЗаполнения(ВыбранныеРесурсы, Объект) Тогда Возврат КонецЕсли; 
	
	ТаблицаРесурсов = ВыбранныеРесурсы.Выгрузить(,"РесурсПредприятия");
	МассивРесурсов = ТаблицаРесурсов.ВыгрузитьКолонку("РесурсПредприятия");
	РазвернутаяТаблица = РазложитьСтрокиПоРасписанию(ВыбранныеРесурсы);
	ПериодПроверки = МаксимальныеГраницыИнтервала(РазвернутаяТаблица, "НачалоПериода", "ОкончаниеПериода");
	ПакетДанныхРесурсов = ПолучитьРасписаниеЗагрузкиРесурсов(МассивРесурсов, ПериодПроверки.НачалоИнтервала, ПериодПроверки.ОкончаниеИнтервала);
	
	ТаблицаРесурсов = РазвернутаяТаблица.Скопировать(,"Ресурс, Период, НачалоПериода, ОкончаниеПериода, Загрузка");
	ТаблицаРесурсов.Свернуть("Ресурс, Период, НачалоПериода, ОкончаниеПериода, Загрузка");
	
	Если ПроверкаПревышенияЗагрузки Тогда
		КонтрольПревышенияЗагрузки(ПакетДанныхРесурсов, ТаблицаРесурсов, Объект);
	КонецЕсли;
	
	Если ПроверкаГраницИнтерваловЗагрузки Тогда
		КонтрольГраницИнтерваловОтносительноГрафика(ПакетДанныхРесурсов, ТаблицаРесурсов, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет ошибки заполнения в ТЧ РесурсыПредприятия Документов Заказ-наряд и Заказ на производство
//
Функция ЕстьОшибкиЗаполнения(ВыбранныеРесурсы, Объект) Экспорт
	
	ЕстьОшибка = Ложь;
	НомерСтроки = 1;
	
	Для Каждого СтрокаРесурс Из ВыбранныеРесурсы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРесурс.РесурсПредприятия) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 табл. части не указан ресурс.'"), НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РесурсыПредприятия", НомерСтроки,
				"РесурсПредприятия");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, КонтекстноеПоле, , ЕстьОшибка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаРесурс.Мощность) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 табл. части не указано значение загрузки.'"),
				НомерСтроки);
			КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РесурсыПредприятия", НомерСтроки,
				"Мощность");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, КонтекстноеПоле, , ЕстьОшибка);
		КонецЕсли;
		
		Если НачалоДня(СтрокаРесурс.Старт) = НачалоДня(СтрокаРесурс.Финиш) 
			И (Не СтрокаРесурс.ВидПовтора = Перечисления.ВидыПовторовРасписания.НеПовторять И ЗначениеЗаполнено(СтрокаРесурс.ВидПовтора)) Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаРесурс.ВидЗавершения) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке №%1 табл. части не указан вид окончания повторов.'"),
					НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РесурсыПредприятия", НомерСтроки,
					"ВидЗавершения");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, КонтекстноеПоле, , ЕстьОшибка);
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаРесурс.ЗавершатьПосле) Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'В строке №%1 табл. части не указано значение окончания повторов.'"), НомерСтроки);
				КонтекстноеПоле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РесурсыПредприятия", НомерСтроки,
					"ЗавершатьПосле");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, КонтекстноеПоле, , ЕстьОшибка);
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки +1;
		
	КонецЦикла;
	
	Возврат ЕстьОшибка;
	
КонецФункции

// Разворачивает строки из ТЧ РесурсыПредприятия по расписанию в таблицу значений
//
Функция РазложитьСтрокиПоРасписанию(ТаблицаРасписания) Экспорт
	
	РазвернутаяТаблица = Новый ТаблицаЗначений;
	
	РазвернутаяТаблица.Колонки.Добавить("Ресурс");
	РазвернутаяТаблица.Колонки.Добавить("НачалоПериода");
	РазвернутаяТаблица.Колонки.Добавить("ОкончаниеПериода");
	РазвернутаяТаблица.Колонки.Добавить("Загрузка");
	РазвернутаяТаблица.Колонки.Добавить("Период");
	
	Для Каждого СтрокаРасписания Из ТаблицаРасписания Цикл
		
		Ресурс = СтрокаРасписания.РесурсПредприятия;
		НачалоИнтервала = СтрокаРасписания.Старт;
		ОкончаниеИнтервала = СтрокаРасписания.Финиш;
		ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
		ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
		Загрузка = СтрокаРасписания.Мощность;
		ИндексПовторения = 0;
		
		Если Не НачалоДня(НачалоИнтервала) = НачалоДня(ОкончаниеИнтервала) Тогда
			
			СчетчикДень = НачалоИнтервала;
			
			Пока СчетчикДень<= НачалоДня(ОкончаниеИнтервала) Цикл
				
				НоваяСтрока = РазвернутаяТаблица.Добавить();
				НоваяСтрока.НачалоПериода = СчетчикДень;
				
				НоваяСтрока.ОкончаниеПериода = ?(НачалоДня(СчетчикДень)= НачалоДня(ОкончаниеИнтервала), ОкончаниеИнтервала, КонецДня(СчетчикДень));
				
				НоваяСтрока.Загрузка = Загрузка;
				НоваяСтрока.Ресурс = Ресурс;
				НоваяСтрока.Период = НачалоДня(СчетчикДень);
				
				СчетчикДень = НачалоДня(СчетчикДень+86401);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(НачалоИнтервала) = НачалоДня(ОкончаниеИнтервала) 
			И (Не ЗначениеЗаполнено(СтрокаРасписания.ВидПовтора) ИЛИ СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.НеПовторять) Тогда
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = НачалоИнтервала;
			НоваяСтрока.ОкончаниеПериода = ОкончаниеИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(НачалоИнтервала);
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежедневно Тогда
			
			НачалоПериода = НачалоИнтервала;
			ОкончаниеПериода = ОкончаниеИнтервала;
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				НачалоПериода = НачалоИнтервала;
				ОкончаниеПериода = ОкончаниеИнтервала;
				
				Пока НачалоДня(НачалоПериода) <= ЗавершатьПосле Цикл
					
					Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.НачалоПериода = НачалоПериода;
						НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
						НоваяСтрока.Загрузка = Загрузка;
						НоваяСтрока.Ресурс = Ресурс;
						НоваяСтрока.Период = НачалоДня(НачалоПериода);
						
						ИндексПовторения = 0;
					КонецЕсли;
					
					ИндексПовторения = ИндексПовторения + 1;
					НачалоПериода = НачалоПериода + 86400;
					ОкончаниеПериода = ОкончаниеПериода + 86400;
				КонецЦикла;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				КоличествоПовторений = 1;
				
				Пока КоличествоПовторений <= ЗавершатьПосле Цикл
					
					Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.НачалоПериода = НачалоПериода;
						НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
						НоваяСтрока.Загрузка = Загрузка;
						НоваяСтрока.Ресурс = Ресурс;
						НоваяСтрока.Период = НачалоДня(НачалоПериода);
						
						КоличествоПовторений = КоличествоПовторений + 1;
						ИндексПовторения = 0;
					КонецЕсли;
					
					ИндексПовторения = ИндексПовторения + 1;
					НачалоПериода = НачалоПериода + 86400;
					ОкончаниеПериода = ОкончаниеПериода + 86400;
					
				КонецЦикла;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
		ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
		ГодПериода = Год(НачалоИнтервала);
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Еженедельно Тогда
			
			МассивДнейНедели = МассивДнейНеделиДляПовторов(СтрокаРасписания);
			
			НомерТекущейНедели = НеделяГода(НачалоИнтервала);
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				НомерНеделиЗавершения = НеделяГода(ЗавершатьПосле);
				ГодЗавершения = Год(ЗавершатьПосле);
				
				Пока ГодПериода <= ГодЗавершения Цикл
					
					ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
					НеделяЗавершенияЗаГодПериода = ?(ГодПериода <ГодЗавершения, ПоследняяНеделяГода,НомерНеделиЗавершения);
					
					Пока НомерТекущейНедели < НеделяЗавершенияЗаГодПериода Цикл
						
						Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
							
							НачалоНедели = ДатаНачалаНеделиПоНомеру(ГодПериода,НомерТекущейНедели);
							
							Для Каждого ДеньНедели Из МассивДнейНедели Цикл
								
								ДатаПоНомеру = НачалоДня(НачалоНедели-1+(86400*ДеньНедели));
								
								Если ДатаПоНомеру < НачалоДня(НачалоИнтервала) Тогда Продолжить КонецЕсли;
								Если ДатаПоНомеру > НачалоДня(ЗавершатьПосле) Тогда Прервать КонецЕсли;
								
								НоваяСтрока = РазвернутаяТаблица.Добавить();
								НоваяСтрока.НачалоПериода = ДатаПоНомеру + ВремяСекНачалаИнтервала;
								НоваяСтрока.ОкончаниеПериода = ДатаПоНомеру + ВремяСекОкончанияИнтервала;
								НоваяСтрока.Загрузка = Загрузка;
								НоваяСтрока.Ресурс = Ресурс;
								НоваяСтрока.Период = НачалоДня(ДатаПоНомеру);
								
							КонецЦикла;
							
							ИндексПовторения = 0;
						КонецЕсли;
						
						ИндексПовторения = ИндексПовторения + 1;
						НомерТекущейНедели = НомерТекущейНедели +1;
					КонецЦикла;
					
					НомерТекущейНедели = 1;
					ГодПериода = ГодПериода + 1;
				КонецЦикла;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
				
				Пока ИндексПовторения < ЗавершатьПосле Цикл
					
					НачалоНедели = ДатаНачалаНеделиПоНомеру(ГодПериода,НомерТекущейНедели);
					
					Для Каждого ДеньНедели Из МассивДнейНедели Цикл
						
						ДатаПоНомеру = НачалоДня(НачалоНедели-1+(86400*ДеньНедели));
						
						Если ДатаПоНомеру < НачалоДня(НачалоИнтервала) Тогда Продолжить КонецЕсли;
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.НачалоПериода = ДатаПоНомеру + ВремяСекНачалаИнтервала;
						НоваяСтрока.ОкончаниеПериода = ДатаПоНомеру + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Загрузка = Загрузка;
						НоваяСтрока.Ресурс = Ресурс;
						НоваяСтрока.Период = НачалоДня(ДатаПоНомеру);
						
					КонецЦикла;
					
					ИндексПовторения = ИндексПовторения + 1;
					НомерТекущейНедели = НомерТекущейНедели +ИнтервалПовторения;
					
					Если НомерТекущейНедели > ПоследняяНеделяГода Тогда
						ГодПериода = ГодПериода+1;
						ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
						НомерТекущейНедели = 1+ИнтервалПовторения;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежемесячно Тогда
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				РазложитьСтрокиМесяцПоДате(СтрокаРасписания,РазвернутаяТаблица);
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				РазложитьСтрокиМесяцПоСчетчику(СтрокаРасписания,РазвернутаяТаблица)
				
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежегодно Тогда
			
			НомерМесяца = СтрокаРасписания.НомерМесяца;
			ДатаПовторения = СтрокаРасписания.ДатаПовторения;
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				Если ЗначениеЗаполнено(ДатаПовторения) И ЗначениеЗаполнено(НомерМесяца) Тогда
					
					ГодПериода = Год(НачалоИнтервала);
					ГодЗавершения = Год(ЗавершатьПосле);
					
					Пока ГодПериода<=ГодЗавершения Цикл
						
						СчетчикПериода = Дата(ГодПериода, НомерМесяца, ДатаПовторения, 0,0,0);
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.НачалоПериода = СчетчикПериода + ВремяСекНачалаИнтервала;
						НоваяСтрока.ОкончаниеПериода = СчетчикПериода + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Загрузка = Загрузка;
						НоваяСтрока.Ресурс = Ресурс;
						НоваяСтрока.Период = НачалоДня(СчетчикПериода);
						
						ГодПериода = ГодПериода + ИнтервалПовторения;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				Если ЗначениеЗаполнено(ДатаПовторения) И ЗначениеЗаполнено(НомерМесяца) Тогда
					
					ИндексПовторения = 1;
					
					Пока ИндексПовторения<=ЗавершатьПосле Цикл
						
						СчетчикПериода = Дата(ГодПериода, НомерМесяца, ДатаПовторения, 0,0,0);
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.НачалоПериода = СчетчикПериода + ВремяСекНачалаИнтервала;
						НоваяСтрока.ОкончаниеПериода = СчетчикПериода + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Загрузка = Загрузка;
						НоваяСтрока.Ресурс = Ресурс;
						НоваяСтрока.Период = НачалоДня(СчетчикПериода);
						
						ГодПериода = ГодПериода + ИнтервалПовторения;
						
						ИндексПовторения = ИндексПовторения + 1;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутаяТаблица;
	
КонецФункции

// Разворачивает строки из ТЧ РесурсыПредприятия по расписанию в таблицу значений для формирования движений
//
Функция РазложитьСтрокиПоРасписаниюДляДвижений(ДокументСсылка,ТаблицаРасписания, Контрагент = Неопределено, Подразделение = Неопределено, Ответственный = Неопределено) Экспорт
	
	РазвернутаяТаблица = Новый ТаблицаЗначений;
	
	РазвернутаяТаблица.Колонки.Добавить("Контрагент");
	РазвернутаяТаблица.Колонки.Добавить("Подразделение");
	РазвернутаяТаблица.Колонки.Добавить("Ответственный");
	РазвернутаяТаблица.Колонки.Добавить("РесурсПредприятия");
	РазвернутаяТаблица.Колонки.Добавить("Старт");
	РазвернутаяТаблица.Колонки.Добавить("Финиш");
	РазвернутаяТаблица.Колонки.Добавить("Мощность");
	РазвернутаяТаблица.Колонки.Добавить("Период");
	РазвернутаяТаблица.Колонки.Добавить("НомерСтрокиТаблицыРесурсов");
	РазвернутаяТаблица.Колонки.Добавить("Документ");
	
	Для Каждого СтрокаРасписания Из ТаблицаРасписания Цикл
		
		РесурсПредприятия = СтрокаРасписания.РесурсПредприятия;
		НачалоИнтервала = СтрокаРасписания.Старт;
		ОкончаниеИнтервала = СтрокаРасписания.Финиш;
		ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
		ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
		Мощность = СтрокаРасписания.Мощность;
		ИндексПовторения = 0;
		
		Если Не НачалоДня(НачалоИнтервала) = НачалоДня(ОкончаниеИнтервала) Тогда
			
			СчетчикДень = НачалоИнтервала;
			
			Пока СчетчикДень<= НачалоДня(ОкончаниеИнтервала) Цикл
				
				НоваяСтрока = РазвернутаяТаблица.Добавить();
				НоваяСтрока.Старт = СчетчикДень;
				
				НоваяСтрока.Финиш = ?(НачалоДня(СчетчикДень)= НачалоДня(ОкончаниеИнтервала), ОкончаниеИнтервала, КонецДня(СчетчикДень));
				
				НоваяСтрока.Мощность = Мощность;
				НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
				НоваяСтрока.Период = НачалоДня(СчетчикДень);
				
				НоваяСтрока.Контрагент = Контрагент;
				НоваяСтрока.Подразделение = Подразделение;
				НоваяСтрока.Ответственный = Ответственный;
				НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
				НоваяСтрока.Документ = ДокументСсылка;
				
				СчетчикДень = НачалоДня(СчетчикДень+86401);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(НачалоИнтервала) = НачалоДня(ОкончаниеИнтервала) 
			И (Не ЗначениеЗаполнено(СтрокаРасписания.ВидПовтора) ИЛИ СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.НеПовторять) Тогда
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = НачалоИнтервала;
			НоваяСтрока.Финиш = ОкончаниеИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(НачалоИнтервала);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			НоваяСтрока.Документ = ДокументСсылка;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежедневно Тогда
			
			Старт = НачалоИнтервала;
			Финиш = ОкончаниеИнтервала;
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				Старт = НачалоИнтервала;
				Финиш = ОкончаниеИнтервала;
				
				Пока НачалоДня(Старт) <= ЗавершатьПосле Цикл
					
					Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.Старт = Старт;
						НоваяСтрока.Финиш = Финиш;
						НоваяСтрока.Мощность = Мощность;
						НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
						НоваяСтрока.Период = НачалоДня(Старт);
						
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Подразделение = Подразделение;
						НоваяСтрока.Ответственный = Ответственный;
						НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
						НоваяСтрока.Документ = ДокументСсылка;
						
						ИндексПовторения = 0;
					КонецЕсли;
					
					ИндексПовторения = ИндексПовторения + 1;
					Старт = Старт + 86400;
					Финиш = Финиш + 86400;
				КонецЦикла;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				КоличествоПовторений = 1;
				
				Пока КоличествоПовторений <= ЗавершатьПосле Цикл
					
					Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.Старт = Старт;
						НоваяСтрока.Финиш = Финиш;
						НоваяСтрока.Мощность = Мощность;
						НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
						НоваяСтрока.Период = НачалоДня(Старт);
						
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Подразделение = Подразделение;
						НоваяСтрока.Ответственный = Ответственный;
						НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
						НоваяСтрока.Документ = ДокументСсылка;
						
						КоличествоПовторений = КоличествоПовторений + 1;
						ИндексПовторения = 0;
					КонецЕсли;
					
					ИндексПовторения = ИндексПовторения + 1;
					Старт = Старт + 86400;
					Финиш = Финиш + 86400;
					
				КонецЦикла;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
		ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
		ГодПериода = Год(НачалоИнтервала);
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Еженедельно Тогда
			
			МассивДнейНедели = МассивДнейНеделиДляПовторов(СтрокаРасписания);
			
			НомерТекущейНедели = НеделяГода(НачалоИнтервала);
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				НомерНеделиЗавершения = НеделяГода(ЗавершатьПосле);
				ГодЗавершения = Год(ЗавершатьПосле);
				
				Пока ГодПериода <= ГодЗавершения Цикл
					
					ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
					НеделяЗавершенияЗаГодПериода = ?(ГодПериода <ГодЗавершения, ПоследняяНеделяГода,НомерНеделиЗавершения);
					
					Пока НомерТекущейНедели < НеделяЗавершенияЗаГодПериода Цикл
						
						Если ИндексПовторения = 0 ИЛИ ИндексПовторения = ИнтервалПовторения Тогда
							
							НачалоНедели = ДатаНачалаНеделиПоНомеру(ГодПериода,НомерТекущейНедели);
							
							Для Каждого ДеньНедели Из МассивДнейНедели Цикл
								
								ДатаПоНомеру = НачалоДня(НачалоНедели-1+(86400*ДеньНедели));
								
								Если ДатаПоНомеру < НачалоДня(НачалоИнтервала) Тогда Продолжить КонецЕсли;
								Если ДатаПоНомеру > НачалоДня(ЗавершатьПосле) Тогда Прервать КонецЕсли;
								
								НоваяСтрока = РазвернутаяТаблица.Добавить();
								НоваяСтрока.Старт = ДатаПоНомеру + ВремяСекНачалаИнтервала;
								НоваяСтрока.Финиш = ДатаПоНомеру + ВремяСекОкончанияИнтервала;
								НоваяСтрока.Мощность = Мощность;
								НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
								НоваяСтрока.Период = НачалоДня(ДатаПоНомеру);
								
								НоваяСтрока.Контрагент = Контрагент;
								НоваяСтрока.Подразделение = Подразделение;
								НоваяСтрока.Ответственный = Ответственный;
								НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
								НоваяСтрока.Документ = ДокументСсылка;
								
							КонецЦикла;
							
							ИндексПовторения = 0;
						КонецЕсли;
						
						ИндексПовторения = ИндексПовторения + 1;
						НомерТекущейНедели = НомерТекущейНедели +1;
					КонецЦикла;
					
					НомерТекущейНедели = 1;
					ГодПериода = ГодПериода + 1;
				КонецЦикла;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
				
				Пока ИндексПовторения < ЗавершатьПосле Цикл
					
					НачалоНедели = ДатаНачалаНеделиПоНомеру(ГодПериода,НомерТекущейНедели);
					
					Для Каждого ДеньНедели Из МассивДнейНедели Цикл
						
						ДатаПоНомеру = НачалоДня(НачалоНедели-1+(86400*ДеньНедели));
						
						Если ДатаПоНомеру < НачалоДня(НачалоИнтервала) Тогда Продолжить КонецЕсли;
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.Старт = ДатаПоНомеру + ВремяСекНачалаИнтервала;
						НоваяСтрока.Финиш = ДатаПоНомеру + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Мощность = Мощность;
						НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
						НоваяСтрока.Период = НачалоДня(ДатаПоНомеру);
						
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Подразделение = Подразделение;
						НоваяСтрока.Ответственный = Ответственный;
						НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
						НоваяСтрока.Документ = ДокументСсылка;
						
					КонецЦикла;
					
					ИндексПовторения = ИндексПовторения + 1;
					НомерТекущейНедели = НомерТекущейНедели +ИнтервалПовторения;
					
					Если НомерТекущейНедели > ПоследняяНеделяГода Тогда
						ГодПериода = ГодПериода+1;
						ПоследняяНеделяГода = НеделяГода(Дата(ГодПериода,12,31,1,1,1));
						НомерТекущейНедели = 1+ИнтервалПовторения;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежемесячно Тогда
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				РазложитьСтрокиМесяцПоДатеДвижения(СтрокаРасписания,РазвернутаяТаблица, Контрагент, Подразделение, Ответственный, ДокументСсылка);
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				РазложитьСтрокиМесяцПоСчетчикуДвижения(СтрокаРасписания,РазвернутаяТаблица, Контрагент, Подразделение, Ответственный, ДокументСсылка)
				
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРасписания.ВидПовтора = Перечисления.ВидыПовторовРасписания.Ежегодно Тогда
			
			НомерМесяца = СтрокаРасписания.НомерМесяца;
			ДатаПовторения = СтрокаРасписания.ДатаПовторения;
			
			Если СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоДате Тогда
				
				Если ЗначениеЗаполнено(ДатаПовторения) И ЗначениеЗаполнено(НомерМесяца) Тогда
					
					ГодПериода = Год(НачалоИнтервала);
					ГодЗавершения = Год(ЗавершатьПосле);
					
					Пока ГодПериода<=ГодЗавершения Цикл
						
						СчетчикПериода = Дата(ГодПериода, НомерМесяца, ДатаПовторения, 0,0,0);
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.Старт = СчетчикПериода + ВремяСекНачалаИнтервала;
						НоваяСтрока.Финиш = СчетчикПериода + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Мощность = Мощность;
						НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
						НоваяСтрока.Период = НачалоДня(СчетчикПериода);
						
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Подразделение = Подразделение;
						НоваяСтрока.Ответственный = Ответственный;
						НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
						НоваяСтрока.Документ = ДокументСсылка;
						
						ГодПериода = ГодПериода + ИнтервалПовторения;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаРасписания.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику Тогда
				
				Если ЗначениеЗаполнено(ДатаПовторения) И ЗначениеЗаполнено(НомерМесяца) Тогда
					
					ИндексПовторения = 1;
					
					Пока ИндексПовторения<=ЗавершатьПосле Цикл
						
						СчетчикПериода = Дата(ГодПериода, НомерМесяца, ДатаПовторения, 0,0,0);
						
						НоваяСтрока = РазвернутаяТаблица.Добавить();
						НоваяСтрока.Старт = СчетчикПериода + ВремяСекНачалаИнтервала;
						НоваяСтрока.Финиш = СчетчикПериода + ВремяСекОкончанияИнтервала;
						НоваяСтрока.Мощность = Мощность;
						НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
						НоваяСтрока.Период = НачалоДня(СчетчикПериода);
						
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Подразделение = Подразделение;
						НоваяСтрока.Ответственный = Ответственный;
						НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
						НоваяСтрока.Документ = ДокументСсылка;
						
						ГодПериода = ГодПериода + ИнтервалПовторения;
						
						ИндексПовторения = ИндексПовторения + 1;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутаяТаблица;
	
КонецФункции

// Устанавливает условное оформление для элементов ТЧ содержащих Ресурсы
//
Процедура УстановитьУсловноеОформлениеРесурсы(ИмяТЧ="", Форма, ЭтоДокумент = Ложь) Экспорт
	
	Если Форма.Объект.Свойство("Ссылка") Тогда
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
			И Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд 
			И Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") Тогда
			Возврат
		КонецЕсли;
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаПроизводство") 
			И Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда
			Возврат
		КонецЕсли;
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.Событие") 
			И Форма.Объект.ТипСобытия = Перечисления.ТипыСобытий.Запись 
			И Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи") Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ДополнениеПоляОтбора = ?(ЭтоДокумент, "Объект."+ИмяТЧ, ИмяТЧ);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ВидЗавершения", Перечисления.ВидыЗавершенияПовторовРасписания.ПустаяСсылка()
	,ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ЗавершатьПосле");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ВидПовтора", Перечисления.ВидыПовторовРасписания.ПустаяСсылка()
	,ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ВидЗавершения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ВидПовтора", Перечисления.ВидыПовторовРасписания.НеПовторять
	, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ВидЗавершения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Ложь);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПовторыДоступны", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ВидЗавершения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПовторыДоступны", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ЗавершатьПосле");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПовторыДоступны", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"РасписаниеПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПериодРазличный", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ВидЗавершения");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПериодРазличный", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"ЗавершатьПосле");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<не задано>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ДополнениеПоляОтбора+".ПериодРазличный", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ИмяТЧ+"РасписаниеПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<доступно в рамках дня>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
КонецПроцедуры

// Возвращает таблицу движений для документов
//
Функция ТаблицаДвиженийДокументов(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Контрагент = ?(ЗначениеЗаполнено(ДокументСсылка.ЗаказПокупателя), ДокументСсылка.ЗаказПокупателя.Контрагент, Неопределено);
		Подразделение = ДокументСсылка.СтруктурнаяЕдиница;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Контрагент = ДокументСсылка.Контрагент;
		Подразделение = ДокументСсылка.СтруктурнаяЕдиницаПродажи;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Событие") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументОбъект.Событие") Тогда
		
		Если ДокументСсылка.Участники.Количество() И ЗначениеЗаполнено(ДокументСсылка.Участники[0].Контакт) Тогда
			Контрагент =ДокументСсылка.Участники[0].Контакт;
		Иначе
			Контрагент = Неопределено;
		КонецЕсли;
				
		Подразделение = Неопределено;
	Иначе
		Контрагент = Неопределено;
		Подразделение = Неопределено;
	КонецЕсли;
	
	Возврат РазложитьСтрокиПоРасписаниюДляДвижений(ДокументСсылка, ДокументСсылка.РесурсыПредприятия, Контрагент, Подразделение, ДокументСсылка.Ответственный);
	
КонецФункции

// Перезаполняет служебные реквизиты табличной части РесурсыПредприятия
//
Процедура ПерезаполнитьСлужебныеРеквизитыТаблицыРесурсов(РесурсыПредприятия) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаРесурсов Из РесурсыПредприятия Цикл
		
		СтрокаРесурсов.КонтролироватьШаг = СтрокаРесурсов.РесурсПредприятия.КонтролироватьШагИнтервалаВДокументах;
		СтрокаРесурсов.КратностьПланирования = СтрокаРесурсов.РесурсПредприятия.КратностьПланирования;
		
		ВыбранныеДниНедели = ПредставлениеДнейНедели(СтрокаРесурсов);
		
		ДополнениеПоМесяцуГоду = "";
		
		Старт = СтрокаРесурсов.Старт;
		Финиш = СтрокаРесурсов.Финиш;
		ДеньНеделиМесяца = СтрокаРесурсов.ДеньНеделиМесяца;
		ДатаПовторения = СтрокаРесурсов.ДатаПовторения;
		
		//Расписание
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно")
			ИЛИ СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			
			Если ЗначениеЗаполнено(ДатаПовторения) Тогда
				
				ДополнениеПоМесяцуГоду = "";
				Если ЗначениеЗаполнено(ЗначениеЗаполнено(ДатаПовторения)) Тогда
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', каждое %1 %2.'"), Строка(ДатаПовторения), ПолучитьМесяцПоНомеру(СтрокаРесурсов.НомерМесяца));
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
				
				Если ЭтоПоследняяНеделяМесяца(Старт) Тогда
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ', в послед. %1 месяца'"), СоответствиеНомераДнюНедели(ДеньНеделиМесяца));
				Иначе
					НомерНеделиМесяца = НеделяГода(Старт)-НеделяГода(НачалоМесяца(Старт))+1;
					ДополнениеПоМесяцуГоду = СтрШаблон(НСтр("ru = ' %1 каждой %2 недели'"), СоответствиеНомераДнюНедели(ДеньНеделиМесяца), Строка(НомерНеделиМесяца));
				КонецЕсли;
				
			ИначеЕсли СтрокаРесурсов.ПоследнийДеньМесяца = Истина Тогда
				ДополнениеПоМесяцуГоду = НСтр("ru = ', последний день месяца.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Междометие = ?(СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно"),НСтр("ru='каждую'"), НСтр("ru='каждый'"));
		
		Окончание = "";
		
		Если СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Еженедельно") Тогда
			Окончание = НСтр("ru='неделю'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежедневно") Тогда
			Окончание = НСтр("ru='день'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежемесячно") Тогда
			Окончание = НСтр("ru='месяц'")
		ИначеЕсли СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.Ежегодно") Тогда
			Окончание = НСтр("ru='год'")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРесурсов.ВидПовтора) 
			И Не СтрокаРесурсов.ВидПовтора = ПредопределенноеЗначение("Перечисление.ВидыПовторовРасписания.НеПовторять") Тогда
			
			РасписаниеПредставление = Строка(СтрокаРесурсов.ВидПовтора)+", "+Междометие+" "+Строка(СтрокаРесурсов.ИнтервалПовторения)+
			" "+ Окончание+ВыбранныеДниНедели+ДополнениеПоМесяцуГоду;
		Иначе
			РасписаниеПредставление = НСтр("ru='Не повторять'")
		КонецЕсли;
		
		СтрокаРесурсов.РасписаниеПредставление = РасписаниеПредставление;
		
		//Повторы
		СтрокаРесурсов.ПовторыДоступны = Ложь;
		СтрокаРесурсов.ПериодРазличный = Ложь;
		
		Если ЗначениеЗаполнено(Старт) И ЗначениеЗаполнено(СтрокаРесурсов.Финиш) Тогда
			
			СтрокаРесурсов.ПериодРазличный = ?(Не НачалоДня(Старт) = НачалоДня(СтрокаРесурсов.Финиш), Истина, Ложь);
			
			Если НачалоДня(Старт) = НачалоДня(СтрокаРесурсов.Финиш) Тогда
				СтрокаРесурсов.ПовторыДоступны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		//Длительность
		
		ДлительностьВМинутах = (Финиш - Старт)/60;
		
		СтрокаРесурсов.Дни = 0;
		
		Если ДлительностьВМинутах >= 1440 Тогда
			СтрокаРесурсов.Дни = Цел(ДлительностьВМинутах/1440);
		КонецЕсли;
		
		СтрокаРесурсов.Время = Дата(1,1,1)+((ДлительностьВМинутах - СтрокаРесурсов.Дни*1440)*60);
		
		// Расшифровка счетчика
		
		Если СтрокаРесурсов.ВидЗавершения = Перечисления.ВидыЗавершенияПовторовРасписания.ПоСчетчику
			И ЗначениеЗаполнено(СтрокаРесурсов.ЗавершатьПосле) Тогда 
			
			РасшифровкаСчетчика = ПредметИсчисления(СтрокаРесурсов.ЗавершатьПосле, НСтр("ru = 'раза'"), НСтр(
				"ru = 'раз'"), НСтр("ru = 'раз'"), "м");
			
			СтрокаРесурсов.РасшифровкаСчетчика = РасшифровкаСчетчика;
		Иначе
			СтрокаРесурсов.РасшифровкаСчетчика = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет на кратность равную пяти окончания границ интервалов
Процедура ПроверитьГраницыИнтервалов(ТаблицаПроверки ,ЭтоРабочиеПериоды = Ложь) Экспорт
	
	Если ЭтоРабочиеПериоды Тогда
		Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
			
			ОкончаниеПериода = СтрокаПроверки.ОкончаниеРабочегоПериодаЗаДень;
			НачалоПериода= СтрокаПроверки.НачалоРабочегоПериодаЗаДень;
			
			Если Не ЗначениеЗаполнено(НачалоПериода) Тогда Продолжить КонецЕсли;
			
			ОстатокОкончание = Минута(ОкончаниеПериода)%5;
			ОстатокНачало = Минута(НачалоПериода)%5;
			
			Если Не ОстатокНачало = 0 ИЛИ Не ОстатокОкончание = 0 Тогда
				СтрокаПроверки.ОкончаниеРабочегоПериодаЗаДень = ?(ОстатокОкончание = 0, ОкончаниеПериода, ОкончаниеПериода - (ОстатокОкончание*60));
				СтрокаПроверки.НачалоРабочегоПериодаЗаДень = ?(ОстатокНачало = 0, НачалоПериода, НачалоПериода + (300 - ОстатокНачало*60));
			КонецЕсли;
			
		КонецЦикла;
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
		
		ОкончаниеПериода = СтрокаПроверки.ВремяОкончания;
		НачалоПериода= СтрокаПроверки.ВремяНачала;
		
		Если Не ЗначениеЗаполнено(НачалоПериода) Тогда Продолжить КонецЕсли;
		
		ОстатокОкончание = Минута(ОкончаниеПериода)%5;
		ОстатокНачало = Минута(НачалоПериода)%5;
		
		Если Не ОстатокНачало = 0 ИЛИ Не ОстатокОкончание = 0 Тогда
			СтрокаПроверки.ВремяОкончания = ?(ОстатокОкончание = 0, ОкончаниеПериода, ОкончаниеПериода + (300 - ОстатокОкончание*60));
			СтрокаПроверки.ВремяНачала = ?(ОстатокНачало = 0, НачалоПериода, НачалоПериода - (ОстатокНачало*60));
			СтрокаПроверки.КоличествоЯчеек = (СтрокаПроверки.ВремяОкончания - СтрокаПроверки.ВремяНачала)/300;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует записи календаря сотрудника при проведении документа
//
Процедура СформироватьЗаписиКалендаряСотрудникаПоРесурсам(ДокументСсылка, ТаблицаДвижений, Отказ) Экспорт
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	ПометитьНаУдалениеЗаписиКалендаряСотрудника(ДокументСсылка, Отказ);
	
	Если ТаблицаДвижений = Неопределено 
		ИЛИ Не ТаблицаДвижений.Количество() 
		ИЛИ Отказ Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник",ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудника.Ссылка КАК Ссылка,
	|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
	|	ЗаписиКалендаряСотрудника.Окончание КАК Окончание,
	|	ИСТИНА КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	ЗаписиКалендаряСотрудника.Источник = &Источник";
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура("Начало, Окончание, ПометкаУдаления");
	
	ЕстьОшибка = Ложь;
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаРасписания Из ТаблицаДвижений Цикл
		
		Календарь = СтрокаРасписания.РесурсПредприятия.Календарь;
		
		Если Не ЗначениеЗаполнено(Календарь) Тогда Продолжить КонецЕсли;
		
		ПараметрыОтбора.Начало = СтрокаРасписания.Старт;
		ПараметрыОтбора.Окончание = СтрокаРасписания.Финиш;
		ПараметрыОтбора.ПометкаУдаления = Истина;
		
		НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(ПараметрыОтбора);
		
		Если Не НайденныеСтроки.Количество() Тогда
			
			НоваяЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
			НоваяЗаписьКалендаря.Источник = ДокументСсылка;
			НоваяЗаписьКалендаря.Начало = СтрокаРасписания.Старт;
			НоваяЗаписьКалендаря.Окончание = СтрокаРасписания.Финиш;
			НоваяЗаписьКалендаря.НомерСтрокиИсточника = СтрокаРасписания.НомерСтрокиТаблицыРесурсов;
			НоваяЗаписьКалендаря.Календарь = Календарь;
			НоваяЗаписьКалендаря.ОтветственныйИсточника = СтрокаРасписания.Ответственный;
			УстановитьСостояниеЗавершенЗаписиКалендаря(НоваяЗаписьКалендаря, ДокументСсылка);
			ЗаполнитьКолонкуЗаписиКалендаря(НоваяЗаписьКалендаря);
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Событие") Тогда
				НоваяЗаписьКалендаря.Наименование = Строка(ДокументСсылка);
			Иначе
				ВидОперации = "";
				
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					ВидОперации = Строка(ДокументСсылка.ВидОперации)+ " - ";
				КонецЕсли;
				
				НоваяЗаписьКалендаря.Наименование = НСтр("ru = 'Задание: '") + ВидОперации + Строка(ДокументСсылка);
			КонецЕсли;
			
			Попытка
				НоваяЗаписьКалендаря.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка записи календаря сотрудника'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка, , , ЕстьОшибка);
				Прервать;
			КонецПопытки;
			
		Иначе
			НайденныеСтроки[0].ПометкаУдаления = Ложь;
			ОбъектЗаписьКалендаря = НайденныеСтроки[0].Ссылка.ПолучитьОбъект();
			ОбъектЗаписьКалендаря.ОтветственныйИсточника = СтрокаРасписания.Ответственный;
			ОбъектЗаписьКалендаря.ПометкаУдаления = Ложь;
			УстановитьСостояниеЗавершенЗаписиКалендаря(ОбъектЗаписьКалендаря, ДокументСсылка);
			Попытка
				ОбъектЗаписьКалендаря.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Ошибка установки пометки на удаление записи календаря сотрудника %1'"),
					ОбъектЗаписьКалендаря);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка, , , ЕстьОшибка);
				Прервать;
			КонецПопытки;
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		ОтменитьТранзакцию();
		Отказ = Истина;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Помечает на удаление записи календаря сотрудника при удалении проведения документа
//
Процедура ПометитьНаУдалениеЗаписиКалендаряСотрудника(ДокументСсылка, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудника.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	ЗаписиКалендаряСотрудника.Источник = &Источник
	|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			ЗаписьКалендаряСотрудника = Выборка.Ссылка.ПолучитьОбъект();
			ЗаписьКалендаряСотрудника.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка установки пометки на удаление записи календаря сотрудника %1'"),
			Выборка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка, , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

// Записывает данные в регистр сведений "Расписание загрузки ресурсов"
//
Процедура ЗаписатьРасписаниеЗагрузкиРесурсов(ДокументСсылка, ТаблицаДвиженийРесурсы = Неопределено, Отказ) Экспорт
	
	НаборЗаписей = РегистрыСведений.РасписаниеЗагрузкиРесурсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Если ТаблицаДвиженийРесурсы = Неопределено Тогда
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	Ответственный = ДокументСсылка.Ответственный;
	
	Для Каждого ЗаписьТаблицы Из ТаблицаДвиженийРесурсы Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьТаблицы);
		
		НоваяЗапись.Ответственный = Ответственный;
		НоваяЗапись.Документ = ДокументСсылка;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Преобразует число в заданный формат
//
Функция ПредметИсчисления(Число, ПараметрыПредметаИсчисления1, ПараметрыПредметаИсчисления2, ПараметрыПредметаИсчисления3, Род) Экспорт
	
	ФорматнаяСтрока = "Л = ru_RU";
	
	ПараметрыПредметаИсчисления = "%1,%2,%3,%4,,,,,0";
	ПараметрыПредметаИсчисления = СтрШаблон(
		ПараметрыПредметаИсчисления,
		ПараметрыПредметаИсчисления1,
		ПараметрыПредметаИсчисления2,
		ПараметрыПредметаИсчисления3,
		Род);
		
	ЧислоСтрокойИПредметИсчисления = НРег(ЧислоПрописью(Число, ФорматнаяСтрока, ПараметрыПредметаИсчисления));
	
	ЧислоПрописью = ЧислоСтрокойИПредметИсчисления;
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления1, "");
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, ПараметрыПредметаИсчисления2, "");
		
	ПредметИсчисления = СтрЗаменить(ЧислоСтрокойИПредметИсчисления, ЧислоПрописью, "");
	
	Возврат ПредметИсчисления;
	
КонецФункции

// Возвращает строковое значение дня недели по номеру дня
//
Функция СоответствиеНомераДнюНедели(НомерДня) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	СоответствиеВозврата.Вставить(1,"понедельник");
	СоответствиеВозврата.Вставить(2,"вторник");
	СоответствиеВозврата.Вставить(3,"среда");
	СоответствиеВозврата.Вставить(4,"четверг");
	СоответствиеВозврата.Вставить(5,"пятница");
	СоответствиеВозврата.Вставить(6,"суббота");
	СоответствиеВозврата.Вставить(7,"воскресенье");
	
	Возврат СоответствиеВозврата.Получить(НомерДня);
	
КонецФункции

// Возвращает строковое значение месяца по номеру дня
//
Функция ПолучитьМесяцПоНомеру(НомерМесяца, БезСклонения = Ложь) Экспорт
	
	СоответствиеМесяцев = Новый Соответствие();
	
	Если БезСклонения Тогда
		
		СоответствиеМесяцев.Вставить(1, "январь");
		СоответствиеМесяцев.Вставить(2, "Февраль");
		СоответствиеМесяцев.Вставить(3, "март");
		СоответствиеМесяцев.Вставить(4, "апрель");
		СоответствиеМесяцев.Вставить(5, "май");
		СоответствиеМесяцев.Вставить(6, "июнь");
		СоответствиеМесяцев.Вставить(7, "июль");
		СоответствиеМесяцев.Вставить(8, "август");
		СоответствиеМесяцев.Вставить(9, "сентябрь");
		СоответствиеМесяцев.Вставить(10, "октябрь");
		СоответствиеМесяцев.Вставить(11, "ноябрь");
		СоответствиеМесяцев.Вставить(12, "декабрь");
		
	Иначе
		
		СоответствиеМесяцев.Вставить(1, "января");
		СоответствиеМесяцев.Вставить(2, "Февраля");
		СоответствиеМесяцев.Вставить(3, "марта");
		СоответствиеМесяцев.Вставить(4, "апреля");
		СоответствиеМесяцев.Вставить(5, "мая");
		СоответствиеМесяцев.Вставить(6, "июня");
		СоответствиеМесяцев.Вставить(7, "июля");
		СоответствиеМесяцев.Вставить(8, "августа");
		СоответствиеМесяцев.Вставить(9, "сентября");
		СоответствиеМесяцев.Вставить(10, "октября");
		СоответствиеМесяцев.Вставить(11, "ноября");
		СоответствиеМесяцев.Вставить(12, "декабря");
		
	КонецЕсли;
	
	Возврат СоответствиеМесяцев.Получить(НомерМесяца);
	
КонецФункции

// Возвращает признак последней недели месяца по дате
//
Функция ЭтоПоследняяНеделяМесяца(ДатаНедели) Экспорт
	
	МесяцДатыНедели = Месяц(ДатаНедели);
	
	Если Не МесяцДатыНедели = Месяц(КонецНедели(ДатаНедели)) 
		Или Не МесяцДатыНедели = Месяц(КонецНедели(ДатаНедели+10)) Тогда
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает строковое значение представления дней недели в заданном формате
//
Функция ПредставлениеДнейНедели(ТекущиеДанные) Экспорт
	
	СтрокаПредставления = "";
	
	Если ТекущиеДанные.Пн Тогда СтрокаПредставления = " Пн," КонецЕсли;
	Если ТекущиеДанные.Вт Тогда СтрокаПредставления = СтрокаПредставления + " Вт," КонецЕсли;
	Если ТекущиеДанные.Ср Тогда СтрокаПредставления = СтрокаПредставления + " Ср," КонецЕсли;
	Если ТекущиеДанные.Чт Тогда СтрокаПредставления = СтрокаПредставления + " Чт," КонецЕсли;
	Если ТекущиеДанные.Пт Тогда СтрокаПредставления = СтрокаПредставления + " Пт," КонецЕсли;
	Если ТекущиеДанные.Сб Тогда СтрокаПредставления = СтрокаПредставления + " Сб," КонецЕсли;
	Если ТекущиеДанные.Вс Тогда СтрокаПредставления = СтрокаПредставления + " Вс" КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(СтрокаПредставления, " ,") Тогда
		ДлинаСтроки = СтрДлина(СтрокаПредставления);
		СтрокаПредставления = " в "+Лев(СтрокаПредставления,ДлинаСтроки - 2);
		СтрокаПредставления = СтрокаПредставления;
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Осуществляет контроль превышения загрузки по интервалам
//
Процедура КонтрольПревышенияЗагрузки(ПакетДанныхРесурсов, ТаблицаРесурсов, Объект)
	
	РасписаниеЗагрузки = ПакетДанныхРесурсов.РасписаниеЗагрузки;
	
	ЕстьОшибки = Ложь;
	
	ДокументПроведен = Объект.Объект.Проведен;
	
	РасшифровкаЗагрузки = ?(ДокументПроведен, "Загрузка с учетом тек. документа", "Текущая загрузка");
	
	ТаблицаИнтервалаПо5Мин = СформироватьКолонкиИнтервалов();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРесурсов Цикл
		
		ОкончаниеПериода = ?(СтрокаТаблицы.ОкончаниеПериода = КонецДня(СтрокаТаблицы.ОкончаниеПериода)
		, СтрокаТаблицы.ОкончаниеПериода + 1, СтрокаТаблицы.ОкончаниеПериода);
		
		КратностьПланирования = СтрокаТаблицы.Ресурс.КратностьПланирования;
		Мощность = СтрокаТаблицы.Ресурс.Мощность;
		
		ПараметрыОтбора = Новый Структура("РесурсПредприятия, Период",СтрокаТаблицы.Ресурс,СтрокаТаблицы.Период);
		НайденныеСтроки = РасписаниеЗагрузки.НайтиСтроки(ПараметрыОтбора);
		
		ДокументыЗаПериод = ТаблицаДокументовЗаПериод(НайденныеСтроки, СтрокаТаблицы.НачалоПериода, ОкончаниеПериода, КратностьПланирования);
		
		КоличествоЯчеекВИнтервале = (ОкончаниеПериода - СтрокаТаблицы.НачалоПериода)/300;
		
		ЗагрузкаЗаИнтервал = МаксимумПоЗагрузке(ДокументыЗаПериод, СтрокаТаблицы.НачалоПериода, ОкончаниеПериода, КоличествоЯчеекВИнтервале, ТаблицаИнтервалаПо5Мин);
		
		ЗначениеЗагрузки = ?(ДокументПроведен, ЗагрузкаЗаИнтервал, ЗагрузкаЗаИнтервал+СтрокаТаблицы.Загрузка);
		
		Если ЗначениеЗагрузки>Мощность Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Для %Ресурс% в период с %НачалоПериода% по %ОкончаниеПериода% есть превышение загрузки. %РасшифровкаЗагрузки%: %ТекущаяЗагрузка%'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Ресурс%", Строка(СтрокаТаблицы.Ресурс));
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%НачалоПериода%", Строка(СтрокаТаблицы.НачалоПериода));
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ОкончаниеПериода%", Строка(СтрокаТаблицы.ОкончаниеПериода));
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ТекущаяЗагрузка%", Строка(ЗагрузкаЗаИнтервал));
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%РасшифровкаЗагрузки%", РасшифровкаЗагрузки);
			Сообщение.Поле = "ВыбранныеРесурсы";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Ошибок превышения загрузки не обнаружено.'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет контроль выхода интервалов загрузки за границы графика работы
//
Процедура КонтрольГраницИнтерваловОтносительноГрафика(ПакетДанныхРесурсов, ТаблицаРесурсов, Объект)
	
	РабочиеПериоды = ПакетДанныхРесурсов.РабочиеПериоды;
	РабочиеПериоды.Свернуть("РесурсПредприятия, НачалоРабочегоПериодаЗаДень, ОкончаниеРабочегоПериодаЗаДень");
	
	ЕстьОшибки = Ложь;
	
	ТексОшибок = "";
	
	ВыходитЗаГраницы = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРесурсов Цикл
		
		Если Не СтрокаТаблицы.Ресурс.КонтролироватьЗагрузкуТолькоВРабочееВремя Тогда Продолжить КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("РесурсПредприятия", СтрокаТаблицы.Ресурс);
		
		НайденныеСтроки = РабочиеПериоды.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаРабочегоПериода Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаРабочегоПериода.НачалоРабочегоПериодаЗаДень) 
				ИЛИ Не ЗначениеЗаполнено(СтрокаРабочегоПериода.ОкончаниеРабочегоПериодаЗаДень) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не НачалоДня(СтрокаТаблицы.НачалоПериода) = НачалоДня(СтрокаТаблицы.ОкончаниеПериода) Тогда
				ОкончаниеПериода = КонецДня(СтрокаТаблицы.НачалоПериода);
			Иначе
				ОкончаниеПериода = СтрокаТаблицы.ОкончаниеПериода;
			КонецЕсли;
			
			Если СтрокаТаблицы.НачалоПериода < СтрокаРабочегоПериода.НачалоРабочегоПериодаЗаДень И ОкончаниеПериода >= СтрокаРабочегоПериода.ОкончаниеРабочегоПериодаЗаДень Тогда
				
				ТексОшибок = ТексОшибок + НСтр("ru = 'Для %Ресурс% период с %НачалоПериода% по %ОкончаниеПериода% выходит за границы рабочего графика.
				|'");
				ТексОшибок = СтрЗаменить(ТексОшибок, "%Ресурс%", Строка(СтрокаТаблицы.Ресурс));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%НачалоПериода%", Строка(СтрокаТаблицы.НачалоПериода));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%ОкончаниеПериода%", Строка(ОкончаниеПериода));
				ВыходитЗаГраницы = Истина;
				Прервать;
				
			КонецЕсли;
			
			Если (СтрокаТаблицы.НачалоПериода >= СтрокаРабочегоПериода.НачалоРабочегоПериодаЗаДень И СтрокаТаблицы.НачалоПериода < СтрокаРабочегоПериода.ОкончаниеРабочегоПериодаЗаДень)
				И ОкончаниеПериода > СтрокаРабочегоПериода.ОкончаниеРабочегоПериодаЗаДень Тогда
				
				ТексОшибок = ТексОшибок + НСтр("ru = 'Для %Ресурс% период с %НачалоПериода% по %ОкончаниеПериода% выходит за границы рабочего графика.
				|'");
				ТексОшибок = СтрЗаменить(ТексОшибок, "%Ресурс%", Строка(СтрокаТаблицы.Ресурс));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%НачалоПериода%", Строка(СтрокаТаблицы.НачалоПериода));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%ОкончаниеПериода%", Строка(ОкончаниеПериода));
				ВыходитЗаГраницы = Истина;
				Прервать;
				
			КонецЕсли;
			
			Если (ОкончаниеПериода > СтрокаРабочегоПериода.НачалоРабочегоПериодаЗаДень И ОкончаниеПериода <= СтрокаРабочегоПериода.ОкончаниеРабочегоПериодаЗаДень)
				И СтрокаТаблицы.НачалоПериода < СтрокаРабочегоПериода.НачалоРабочегоПериодаЗаДень Тогда
				
				ТексОшибок = ТексОшибок + НСтр("ru = 'Для %Ресурс% период с %НачалоПериода% по %ОкончаниеПериода% выходит за границы рабочего графика.
				|'");
				ТексОшибок = СтрЗаменить(ТексОшибок, "%Ресурс%", Строка(СтрокаТаблицы.Ресурс));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%НачалоПериода%", Строка(СтрокаТаблицы.НачалоПериода));
				ТексОшибок = СтрЗаменить(ТексОшибок, "%ОкончаниеПериода%", Строка(ОкончаниеПериода));
				ВыходитЗаГраницы = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыходитЗаГраницы Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТексОшибок;
		Сообщение.Поле = "ВыбранныеРесурсы";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Границ загрузки вне графика работы не обнаружено.'");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	КонецЕсли;
	
	
	
КонецПроцедуры

// Разворачивает строки Ежемесячного расписания с учетом даты завершения
//
Процедура РазложитьСтрокиМесяцПоДате(СтрокаРасписания, РазвернутаяТаблица)
	
	Ресурс = СтрокаРасписания.РесурсПредприятия;
	
	НачалоИнтервала = СтрокаРасписания.Старт;
	ОкончаниеИнтервала = СтрокаРасписания.Финиш;
	ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
	
	ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
	Загрузка = СтрокаРасписания.Мощность;
	
	ДатаПовторения = СтрокаРасписания.ДатаПовторения;
	ДеньНеделиМесяца = СтрокаРасписания.ДеньНеделиМесяца;
	
	ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
	ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
	
	ПоследнийДеньМесяца = СтрокаРасписания.ПоследнийДеньМесяца;
	
	ТекМесяц = Месяц(НачалоИнтервала);
	ТекГод = Год(НачалоИнтервала);
	
	ОкончаниеОтсчета = НачалоМесяца(ЗавершатьПосле);
	
	Если ЗначениеЗаполнено(ДатаПовторения) Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = СчетчикПериода + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = СчетчикПериода + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(СчетчикПериода);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		НомерНеделиМесяца = СтрокаРасписания.НомерНеделиМесяца;
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			НеделяНачалаМесяцаПоСчетчику = НеделяГода(НачалоМесяца(СчетчикПериода));
			ИскомаяНеделя = НеделяНачалаМесяцаПоСчетчику + НомерНеделиМесяца - 1;
			
			ДатаНачалаНедели = ДатаНачалаНеделиПоНомеру(ТекГод,ИскомаяНеделя);
			ИскомаяДата =  НачалоДня(ДатаНачалаНедели-1+(86400*ДеньНеделиМесяца));
			
			Если ИскомаяДата > ЗавершатьПосле Тогда Прервать КонецЕсли;
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоследнийДеньМесяца Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			
			ИскомаяДата = НачалоДня(КонецМесяца(СчетчикПериода));
			
			Если ИскомаяДата > ЗавершатьПосле Тогда Прервать КонецЕсли;
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает строки Ежемесячного расписания с учетом количества повторений
//
Процедура РазложитьСтрокиМесяцПоСчетчику(СтрокаРасписания, РазвернутаяТаблица)
	
	Ресурс = СтрокаРасписания.РесурсПредприятия;
	
	НачалоИнтервала = СтрокаРасписания.Старт;
	ОкончаниеИнтервала = СтрокаРасписания.Финиш;
	ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
	
	ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
	Загрузка = СтрокаРасписания.Мощность;
	
	ДатаПовторения = СтрокаРасписания.ДатаПовторения;
	ДеньНеделиМесяца = СтрокаРасписания.ДеньНеделиМесяца;
	
	ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
	ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
	
	ПоследнийДеньМесяца = СтрокаРасписания.ПоследнийДеньМесяца;
	
	ТекМесяц = Месяц(НачалоИнтервала);
	ТекГод = Год(НачалоИнтервала);
	
	ОкончаниеОтсчета = ЗавершатьПосле;
	СчетчикПериода = 1;
	
	Если ЗначениеЗаполнено(ДатаПовторения) Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = ПериодВывода + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = ПериодВывода + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(ПериодВывода);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		НомерНеделиМесяца = СтрокаРасписания.НомерНеделиМесяца;
	
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			НеделяНачалаМесяцаПоСчетчику = НеделяГода(НачалоМесяца(ПериодВывода));
			ИскомаяНеделя = НеделяНачалаМесяцаПоСчетчику + НомерНеделиМесяца - 1;
			
			ДатаНачалаНедели = ДатаНачалаНеделиПоНомеру(ТекГод,ИскомаяНеделя);
			ИскомаяДата =  НачалоДня(ДатаНачалаНедели-1+(86400*ДеньНеделиМесяца));
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоследнийДеньМесяца Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
		
			ИскомаяДата = НачалоДня(КонецМесяца(ПериодВывода));
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.НачалоПериода = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.ОкончаниеПериода = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Загрузка = Загрузка;
			НоваяСтрока.Ресурс = Ресурс;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает строки Ежемесячного расписания с учетом даты завершения для движений
//
Процедура РазложитьСтрокиМесяцПоДатеДвижения(СтрокаРасписания, РазвернутаяТаблица
	,Контрагент = Неопределено, Подразделение = Неопределено, Ответственный = Неопределено, ДокументСсылка = Неопределено)
	
	РесурсПредприятия = СтрокаРасписания.РесурсПредприятия;
	
	НачалоИнтервала = СтрокаРасписания.Старт;
	ОкончаниеИнтервала = СтрокаРасписания.Финиш;
	ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
	
	ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
	Мощность = СтрокаРасписания.Мощность;
	
	ДатаПовторения = СтрокаРасписания.ДатаПовторения;
	ДеньНеделиМесяца = СтрокаРасписания.ДеньНеделиМесяца;
	
	ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
	ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
	
	ПоследнийДеньМесяца = СтрокаРасписания.ПоследнийДеньМесяца;
	
	ТекМесяц = Месяц(НачалоИнтервала);
	ТекГод = Год(НачалоИнтервала);
	
	ОкончаниеОтсчета = НачалоМесяца(ЗавершатьПосле);
	
	Если ЗначениеЗаполнено(ДатаПовторения) Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = СчетчикПериода + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = СчетчикПериода + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(СчетчикПериода);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		НомерНеделиМесяца = СтрокаРасписания.НомерНеделиМесяца;
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			НеделяНачалаМесяцаПоСчетчику = НеделяГода(НачалоМесяца(СчетчикПериода));
			ИскомаяНеделя = НеделяНачалаМесяцаПоСчетчику + НомерНеделиМесяца - 1;
			
			ДатаНачалаНедели = ДатаНачалаНеделиПоНомеру(ТекГод,ИскомаяНеделя);
			ИскомаяДата =  НачалоДня(ДатаНачалаНедели-1+(86400*ДеньНеделиМесяца));
			
			Если ИскомаяДата > ЗавершатьПосле Тогда Прервать КонецЕсли;
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоследнийДеньМесяца Тогда
		
		СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			
			ИскомаяДата = НачалоДня(КонецМесяца(СчетчикПериода));
			
			Если ИскомаяДата > ЗавершатьПосле Тогда Прервать КонецЕсли;
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			СчетчикПериода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает строки Ежемесячного расписания с учетом количества повторений для движений
//
Процедура РазложитьСтрокиМесяцПоСчетчикуДвижения(СтрокаРасписания, РазвернутаяТаблица,
	Контрагент = Неопределено, Подразделение = Неопределено, Ответственный = Неопределено, ДокументСсылка = Неопределено)
	
	РесурсПредприятия = СтрокаРасписания.РесурсПредприятия;
	
	НачалоИнтервала = СтрокаРасписания.Старт;
	ОкончаниеИнтервала = СтрокаРасписания.Финиш;
	ЗавершатьПосле = СтрокаРасписания.ЗавершатьПосле;
	
	ИнтервалПовторения = СтрокаРасписания.ИнтервалПовторения;
	Мощность = СтрокаРасписания.Мощность;
	
	ДатаПовторения = СтрокаРасписания.ДатаПовторения;
	ДеньНеделиМесяца = СтрокаРасписания.ДеньНеделиМесяца;
	
	ВремяСекНачалаИнтервала = НачалоИнтервала - НачалоДня(НачалоИнтервала);
	ВремяСекОкончанияИнтервала = ОкончаниеИнтервала - НачалоДня(ОкончаниеИнтервала);
	
	ПоследнийДеньМесяца = СтрокаРасписания.ПоследнийДеньМесяца;
	
	ТекМесяц = Месяц(НачалоИнтервала);
	ТекГод = Год(НачалоИнтервала);
	
	ОкончаниеОтсчета = ЗавершатьПосле;
	СчетчикПериода = 1;
	
	Если ЗначениеЗаполнено(ДатаПовторения) Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = ПериодВывода + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = ПериодВывода + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(ПериодВывода);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, ДатаПовторения, 0,0,0);
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеньНеделиМесяца) Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		НомерНеделиМесяца = СтрокаРасписания.НомерНеделиМесяца;
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			НеделяНачалаМесяцаПоСчетчику = НеделяГода(НачалоМесяца(ПериодВывода));
			ИскомаяНеделя = НеделяНачалаМесяцаПоСчетчику + НомерНеделиМесяца - 1;
			
			ДатаНачалаНедели = ДатаНачалаНеделиПоНомеру(ТекГод,ИскомаяНеделя);
			ИскомаяДата =  НачалоДня(ДатаНачалаНедели-1+(86400*ДеньНеделиМесяца));
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ПоследнийДеньМесяца Тогда
		
		ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
		
		Пока СчетчикПериода <= ОкончаниеОтсчета Цикл
			
			ИскомаяДата = НачалоДня(КонецМесяца(ПериодВывода));
			
			ТекМесяц = ТекМесяц + ИнтервалПовторения;
			
			НоваяСтрока = РазвернутаяТаблица.Добавить();
			НоваяСтрока.Старт = ИскомаяДата + ВремяСекНачалаИнтервала;
			НоваяСтрока.Финиш = ИскомаяДата + ВремяСекОкончанияИнтервала;
			НоваяСтрока.Мощность = Мощность;
			НоваяСтрока.РесурсПредприятия = РесурсПредприятия;
			НоваяСтрока.Период = НачалоДня(ИскомаяДата);
			
			НоваяСтрока.Контрагент = Контрагент;
			НоваяСтрока.Подразделение = Подразделение;
			НоваяСтрока.Ответственный = Ответственный;
			НоваяСтрока.НомерСтрокиТаблицыРесурсов = СтрокаРасписания.НомерСтроки;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				НоваяСтрока.Документ = ДокументСсылка;
			КонецЕсли;
			
			Если ТекМесяц>12 Тогда
				ТекГод = ТекГод+1;
				ТекМесяц = ТекМесяц - 12;
			КонецЕсли;
			
			ПериодВывода = Дата(ТекГод, ТекМесяц, 1, 0,0,0);
			
			СчетчикПериода = СчетчикПериода +1;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Возвращает Даты начала недели по номеру недели
//
Функция ДатаНачалаНеделиПоНомеру(НомерГода,НомерНедели)
	Возврат НачалоНедели(Дата(НомерГода,1,1))+604800*(НомерНедели-1); 
КонецФункции

// Возвращает Массив дней недели для повторения в рамках заданного расписания
//
Функция МассивДнейНеделиДляПовторов(ТекущиеДанные)
	
	МассивДней = Новый Массив;
	
	Если ТекущиеДанные.Пн Тогда
		МассивДней.Добавить(1);
	КонецЕсли;
	Если ТекущиеДанные.Вт Тогда
		МассивДней.Добавить(2);
	КонецЕсли;
	Если ТекущиеДанные.Ср Тогда
		МассивДней.Добавить(3);
	КонецЕсли;
	Если ТекущиеДанные.Чт Тогда
		МассивДней.Добавить(4);
	КонецЕсли;
	Если ТекущиеДанные.Пт Тогда
		МассивДней.Добавить(5);
	КонецЕсли;
	Если ТекущиеДанные.Сб Тогда
		МассивДней.Добавить(6);
	КонецЕсли;
	Если ТекущиеДанные.Вс Тогда
		МассивДней.Добавить(7);
	КонецЕсли;
	
	Возврат МассивДней;
	
КонецФункции

Процедура УстановитьСостояниеЗавершенЗаписиКалендаря(ЗаписьКалендаря, Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ЗаписьКалендаря.Завершено = СостоянияЗаказов.ЭтоСостояниеЗавершен(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "СостояниеЗаказа"));
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.Событие") Тогда
		СостояниеСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Состояние");
		ЗаписьКалендаря.Завершено = СостояниеСобытия = Справочники.СостоянияСобытий.Завершено;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаписьКалендаря.Завершено = СостоянияЗаказов.ЭтоСостояниеЗавершен(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "СостояниеЗаказа"));
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуЗаписиКалендаря(ЗаписьКалендаря)
		
	Если НЕ ЗначениеЗаполнено(ЗаписьКалендаря.КолонкаКалендаря) Тогда
		ЗаписьКалендаря.КолонкаКалендаря = Справочники.КолонкиКалендарейСотрудников.КолонкаНеобработанное(ЗаписьКалендаря.Календарь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
