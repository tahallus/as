#Область СлужебныйПрограммныйИнтерфейс

Функция ИспользоватьРасширенныйРежимНастройкиУРМК() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныйРежимНастройкиУРМК");
	
КонецФункции

// Менеджер по определяемому типу.
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - наименование определяемого типа.
// 
// Возвращаемое значение:
//  Произвольный - метаданные переданного типа.
//
Функция МетаданныеПоОпределяемомуТипу(ИмяОпределяемогоТипа) Экспорт
	
	Менеджер = Неопределено;
	
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип <> Неопределено Тогда
	
		Тип = ОпределяемыйТип.Тип.Типы()[0];
		Менеджер = Метаданные.НайтиПоТипу(Тип);
		
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

// Возвращает имена реквизитов объекта заданного типа.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на элемент базы данных, для которого требуется получить результат функции;
//  Тип    - Тип - тип значения реквизита.
//  ЗаИсключениемРеквизитов - Строка - Последовательность имен реквизитов через запятую, которые не являются значимыми при определении типа
//
// Возвращаемое значение:
//  Строка - строка реквизитов объекта метаданных конфигурации, разделенных символом ",".
//
// Пример:
//  РеквизитыОрганизации = ОбщегоНазначения.ИменаРеквизитовПоТипу(Документ.Ссылка, Тип("СправочникСсылка.Организации"));
//
Функция ИменаРеквизитовПоТипу(Ссылка, Тип, ЗаИсключениемРеквизитов = "") Экспорт
	
	ИсключающиеРеквизиты = СтрРазделить(ЗаИсключениемРеквизитов, ",");
	Результат = "";
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип) 
			И ИсключающиеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип) Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция СтруктураОбщихПараметров() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТорговыйОбъект");
	Результат.Вставить("ВидЦен");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКартинкуQRКода(ПараметрыКартинки, Штрихкод) Экспорт
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          ПараметрыКартинки.Ширина);
	ПараметрыШтрихкода.Вставить("Высота",          ПараметрыКартинки.Высота);
	ПараметрыШтрихкода.Вставить("Штрихкод",        Штрихкод);
	ПараметрыШтрихкода.Вставить("ТипКода",         16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	
	РезультатОперации = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	Если РезультатОперации.Результат Тогда
		Возврат РезультатОперации.Картинка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НаименованиеПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.ОбменСУРМК.ЭтотУзел(), "Наименование");
КонецФункции

Функция МодульПомощникСозданияОбменаДанными() Экспорт
	
	Возврат ОбщегоНазначения.ОбщийМодуль("Обработки.ПомощникСозданияОбменаДанными");
	
КонецФункции

// Возвращает ключ сообщения журнала регистрации.
//
Функция КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	ИмяПланаОбмена     = "ОбменСУРМК";
	
	КлючСообщения = НСтр("ru = 'Обмен данными.[ИмяПланаОбмена].[ДействиеПриОбмене]'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
	
КонецФункции

#КонецОбласти
