////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что функциональная опция использования видов номенклатуры включена.
// 
// Параметры:
//   ИмяФормы - Строка - имя формы, для которой получаются данные.
//   Результат - Булево - признак того, что функциональная опция включена.
//
Процедура ФункциональнаяОпцияИспользуется(Знач ИмяФормы, Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Переопределяет настройки подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//    Ключи:
//    * ДоступнаФункциональностьЗапросаЦен - Булево - флаг наличия функционала запроса цен в прикладном решении.
//    * ВариантыПубликацииОстатков - Массив из ПеречислениеСсылка.ВариантыПубликацииОстатковТорговыеПредложения - 
//                                                           массив из доступных вариантов публикации остатков. 
//                                                           Если массив заполнен не будет, функциональность 
//                                                           публикации остатков будет отключена.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ДоступнаФункциональностьЗапросаЦен = Истина;
	
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Наличие);
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Количество);
	Настройки.ВариантыПубликацииОстатков.Добавить(Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.КоличествоИНаличие);

КонецПроцедуры

// Выдает сообщение пользователю о том, что функциональная опция использования видов номенклатуры отключена.
//
// Параметры:
//  ИмяФормы - Строка - имя формы из которой вызывается сообщение.
//  Используется - Булево - признак того, что функциональная опция включена или нет.
//  Отказ - Булево - признак того, что форму сопоставления номенклатуры открывать не нужно.
//
Процедура СообщитьОНеобходимостиИспользованияФункциональнойОпции(Знач ИмяФормы, Знач Используется, Отказ) Экспорт
	
КонецПроцедуры

// Получение валюты регламентированного учета.
// 
// Параметры:
//  Валюта - СправочникСсылка - валюта регламентированного учета.
//
Процедура ПолучитьВалютуРегламентированногоУчета(Валюта) Экспорт
	
	Валюта =  Константы.НациональнаяВалюта.Получить();
	
КонецПроцедуры

// Вызывается для определения кода единицы измерения по единице измерения.
//  В случае если не определять код единицы измерения внутри данной процедуры,
//  код будет определен как значение реквизита код элемента, в случае, если
//  справочник имеет длину кода не равную нулю.
//
// Параметры:
//  ЕдиницаИзмерения    - СправочникСсылка - единица измерения
//  КодЕдиницыИзмерения - Строка - Код единицы измерения
//
Процедура ОпределитьКодЕдиницыИзмерения(ЕдиницаИзмерения, КодЕдиницыИзмерения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КодЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Код");
	
КонецПроцедуры

// Создает документ заказ поставщику на основании данных торгового предложения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные торгового предложения:
//   * КонтекстИсточника - Структура - набор данных из документа основания содержащий данные для заполнения шапки документа.
//   * СтрокиЗаказа - ТаблицаЗначений - содержит данные табличной части.
//   * Организация - СправочникСсылка.Организации - организация торгового предложения.
//   * Валюта - СправочникСсылка.Валюты - валюта торгового предложения.
//  ДокументОбъект - ДокументОбъект - возвращается созданный, но не записанный документ.
//
Процедура СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(Знач ДанныеЗаполнения, ДокументОбъект, Отказ) Экспорт
	
	КонтекстИсточника = ДанныеЗаполнения.КонтекстИсточника;
	СтрокиЗаказа = ДанныеЗаполнения.СтрокиЗаказа;
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Валюта = ДанныеЗаполнения.Валюта;
	
	ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();

	// Реквизиты шапки.
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Контрагент =  Контрагент;
	ДокументОбъект.ВалютаДокумента = Валюта;
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
	ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	ДокументОбъект.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	Если КонтекстИсточника <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, КонтекстИсточника);
	КонецЕсли;
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
		ДокументОбъект,
		ДокументОбъект.Контрагент,
		ДокументОбъект.Организация,
		ДокументОбъект.ВалютаДокумента);
	
	Сегодня = НачалоДня(ТекущаяДата());
	Сутки = 60 * 60 * 24;
	
	Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДокументОбъект.Договор = ДоговорПоУмолчанию;
		ДокументОбъект.ВидЦенКонтрагента = ДоговорПоУмолчанию.ВидЦенКонтрагента;
	КонецЕсли;
	
	// Товары.
	Для каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		СтрокаТовары = ДокументОбъект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа);
		СтрокаТовары.Характеристика = СтрокаЗаказа.Характеристика;
		СтрокаТовары.ЕдиницаИзмерения = СтрокаЗаказа.Номенклатура.ЕдиницаИзмерения;
		СтрокаТовары.ДатаПоступления = Сегодня + (СтрокаЗаказа.СрокПоставки * Сутки);
		
		Если ЗначениеЗаполнено(СтрокаЗаказа.Номенклатура.ВидСтавкиНДС) Тогда
			СтрокаТовары.СтавкаНДС =  Справочники.СтавкиНДС.СтавкаНДС(СтрокаЗаказа.Номенклатура.ВидСтавкиНДС);
		Иначе
			СтрокаТовары.СтавкаНДС =  Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию );
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗаказа.КонтекстСтроки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа.КонтекстСтроки);
			
		КонецЕсли;
		СтрокаТовары.Всего = СтрокаТовары.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТовары.СуммаНДС);
	КонецЦикла;
	
	ДокументОбъект.Заполнить(Неопределено); // Инициализация документа.
	ДокументОбъект.УстановитьНовыйНомер();
	
	ТаблицаДатПоступления = ДокументОбъект.Запасы.Выгрузить(, "ДатаПоступления");
	ТаблицаДатПоступления.Свернуть("ДатаПоступления");
	Если ТаблицаДатПоступления.Количество() = 1 Тогда
		ДокументОбъект.ДатаПоступления = ТаблицаДатПоступления[0].ДатаПоступления;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет созданные заказы поставщику при переходе на шаг назад.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений - таблица документов для удаления, состав:
//    * Ссылка - ДокументСсылка - ссылка на удаляемый документ.
//  Отказ - Булево - признак результата удаления документов.
//
Процедура УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	ТекстИмеютсяСсылки = НСтр("ru = 'Имеются ссылки на %1 - %2.'");
	ТекстПомечен = НСтр("ru = '%1 - помечен на удаление.'");
	ТекстЗаблокирован  = НСтр("ru = '%1 - заблокирован. Пометить на удаление не удалось.'");
	ТекстУдален = НСтр("ru = '%1 - удален.'");
	
	ИменаОбъектовМетаданных = "Документ.ЗаказПоставщику";
	Регистры = РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, Истина);
	
	СсылкиНаУдаление = Новый Массив();
	Для Каждого Строка Из ТаблицаДокументы Цикл
		СсылкиНаУдаление.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		Если Ссылка[0] = Ссылка[1] Или ЭтоЗаписьВедомогоРегистраСведений(Ссылка[1], Регистры) Тогда
			ТаблицаСсылок.Удалить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ПомечатьНаУдаление = Новый Массив();
	
	ВсегоСтрок = ТаблицаСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
		Индекс = СсылкиНаУдаление.Найти(Ссылка[1]);
		Если Индекс = Неопределено Тогда
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) = Неопределено Тогда
				ПомечатьНаУдаление.Добавить(Ссылка[0]);
			КонецЕсли;
			ТаблицаСсылок.Удалить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаЗавершена = Ложь;
	Пока Не ОбработкаЗавершена Цикл
		ОбработкаЗавершена = Истина;
		ВсегоСтрок = ТаблицаСсылок.Количество();
		Для Счетчик = 1 По ВсегоСтрок Цикл
			Ссылка = ТаблицаСсылок[ВсегоСтрок - Счетчик];
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) <> Неопределено Тогда
				Если ПомечатьНаУдаление.Найти(Ссылка[1]) = Неопределено Тогда
					ПомечатьНаУдаление.Добавить(Ссылка[1]);
				КонецЕсли;
				ТаблицаСсылок.Удалить(Ссылка);
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	Для Каждого Ссылка Из ПомечатьНаУдаление Цикл
		Индекс = СсылкиНаУдаление.Найти(Ссылка);
		Если Индекс <> Неопределено Тогда
			СсылкиНаУдаление.Удалить(Индекс);
		КонецЕсли;
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.Заблокирован() Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПомечен, СокрЛП(Ссылка));
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаблокирован, СокрЛП(Ссылка));
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиНаУдаление Цикл
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУдален, СокрЛП(Ссылка));
		Сообщение.Сообщить();
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает значения контекста на основании которого будет производиться поиск предложений
// и которые будут переданы в шапку создаваемых заказов.
//
// Параметры:
//  ПараметрКоманды - Массив - ссылки на документы для заполнения таблицы поиска товаров в 1С:Бизнес-сеть.
//  КонтекстИсточника - Структура - свойства источника, используемые для формирования заказов.
//  ТаблицаТовары - ТаблицаЗначений - товары для поиска с реквизитами, состав:
//    * Номенклатура - СправочникСсылка - номенклатура.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка - СправочникСсылка - упаковка номенклатуры.
//    * Количество - Число - количество.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Числитель - Число - числитель упаковки.
//    * Знаменатель - число - знаменатель номенклатуры.
//    * Склад - СправочникСсылка - склад для заказа.
//    * КонтекстСтроки - Произвольный - дополнительные свойства по источнику.
//
Процедура СвойстваКонтекстаДокументовДляПоискаПредложений(Знач ПараметрКоманды, КонтекстИсточника, ТаблицаТовары) Экспорт
	
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ДополнительныеРеквизиты = Новый Структура();
		ДополнительныеРеквизиты.Вставить("Организация");
		ДополнительныеРеквизиты.Вставить("Проведен");
		ДополнительныеРеквизиты.Вставить("ВалютаДокумента");
		ДополнительныеРеквизиты.Вставить("СтруктурнаяЕдиница");
		
		СтруктураКонтекстаСтроки = Новый Структура("КонтекстСтрокиСклад");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура                      КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Номенклатура.Наименование         КАК Наименование,
		|	ЗаказПоставщикуТовары.Номенклатура.Артикул                 КАК Артикул,
		|	ЗаказПоставщикуТовары.Характеристика                    КАК Характеристика,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения     КАК Упаковка,
		|	ЗаказПоставщикуТовары.Количество                        КАК Количество,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")          КАК ШтрихКоды,
		|	1                                                       КАК Числитель,
		|	1                                                       КАК Знаменатель,
		|	""""                                                    КАК КонтекстСтрокиСклад
		|ИЗ
		|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ЗаказПоставщикуТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ЗаказПоставщикуТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ЗаказПоставщикуТовары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка В(&СписокСсылок)"
		
		
	ИначеЕсли ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ДополнительныеРеквизиты = Новый Структура();
		ДополнительныеРеквизиты.Вставить("Организация");
		ДополнительныеРеквизиты.Вставить("ВалютаДокумента");
		ДополнительныеРеквизиты.Вставить("Проведен");
		ДополнительныеРеквизиты.Вставить("СтруктурнаяЕдиницаПродажи");
		ДополнительныеРеквизиты.Вставить("ДокументОснование",      "Ссылка");
		
		СтруктураКонтекстаСтроки = Новый Структура("КонтекстСтрокиСклад");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура                      КАК Номенклатура,
		|	ЗаказКлиентаТовары.Номенклатура.Наименование         КАК Наименование,
		|	ЗаказКлиентаТовары.Номенклатура.Артикул              КАК Артикул,
		|	ЗаказКлиентаТовары.Характеристика                    КАК Характеристика,
		|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения     КАК Упаковка,
		|	ЗаказКлиентаТовары.Количество                        КАК Количество,
		|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")          КАК ШтрихКоды,
		|	1                                                    КАК Числитель,
		|	1                                                    КАК Знаменатель,
		|	""""                                                 КАК КонтекстСтрокиСклад
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ЗаказКлиентаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ЗаказКлиентаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ЗаказКлиентаТовары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&СписокСсылок)"
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", ПараметрКоманды);
	Товары = Запрос.Выполнить().Выгрузить();
	Товары.Колонки.Добавить("КонтекстСтроки");
	Для Каждого СтрокаТоваров Из Товары Цикл
		КонтекстСтроки = Новый Структура();
		Для Каждого Свойство Из СтруктураКонтекстаСтроки Цикл
			ИмяРеквизита = СтрЗаменить(Свойство.Ключ, "КонтекстСтроки", "");
			КонтекстСтроки.Вставить(ИмяРеквизита, СтрокаТоваров[Свойство.Ключ])
		КонецЦикла;
		СтрокаТоваров.КонтекстСтроки = КонтекстСтроки;
		ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокаТоваров);
	КонецЦикла;
	КонтекстИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрКоманды[0], ДополнительныеРеквизиты);
	КонтекстИсточника.Вставить("Валюта", КонтекстИсточника.ВалютаДокумента);
	Если ТипЗнч(ПараметрКоманды[0]) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		КонтекстИсточника.Вставить("Склад", КонтекстИсточника.СтруктурнаяЕдиницаПродажи);
	КонецЕсли;
	
КонецПроцедуры

// Производит пересчет суммы для заказа товаров.
//
// Параметры:
//  СтрокаТоваров - Структура - реквизиты строки товаров для пересчета суммы при формировании заказов.
//                              См. ФормированиеЗаказов.ОписаниеСтрокиТаблицыТовары(), состав:
//    * ПроцентНДС      - Строка - значение НДС, полученное из сервиса.
//    * СтавкаНДС       - Ссылка - значение ставки НДС.
//    * Цена            - Число - цена товара для заказа.
//    * ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//    * Количество      - Число - количество товара для заказа.
//    * Сумма           - Число - сумма заказа по строке.
//    * СуммаНДС        - Число - сумма НДС строки.
//    * СуммаСНДС       - Число - значение суммы с НДС.
//    * ПроцентСкидки   - Число - процент скидки по строке.
//    * СуммаСкидки     - Число - сумма скидки по строке.
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаТоваров) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТоваров.СтавкаНДС);
	Если СтавкаНДС = Неопределено Тогда
		СтавкаНДС = 0;
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТоваров.Цена * СтрокаТоваров.Количество;
	СуммаСкидки = Окр(СуммаБезСкидки * СтрокаТоваров.ПроцентСкидки / 100, 2);
	
	СтрокаТоваров.Сумма = Макс(СуммаБезСкидки - СуммаСкидки,0);
	СтрокаТоваров.СуммаНДС = ?(СтрокаТоваров.ЦенаВключаетНДС, 
									  СтрокаТоваров.Сумма - (СтрокаТоваров.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТоваров.Сумма * СтавкаНДС / 100);
	Если СтрокаТоваров.ЦенаВключаетНДС Тогда
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма;
	Иначе
		СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма + СтрокаТоваров.СуммаНДС;
	КонецЕсли;

КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(ИменаЭлементов);
		Иначе
			СтруктураИменЭлементов = ИменаЭлементов;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента.Ключ, ИмяСвойства, Значение);
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

// Получение доступных типов значений свойств для сопоставления.
// 
// Параметры:
//  ТипыЗначенийСвойств - СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
	ТипыЗначенийСвойств.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	ТипыЗначенийСвойств.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"));
	
КонецПроцедуры

// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка - пустая ссылка для заполнения сопоставления,
//                         например ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
//
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
	Ссылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
КонецПроцедуры

// Заполнение контактной информации по контактному лицу.
//
// Параметры:
//  КонтактноеЛицо    - СправочникСсылка - контактное лицо в информационной базе, например СправочникСсылка.ФизическиеЛица.
//  ЭлектроннаяПочта  - Строка - адрес электронной почты.
//  Телефон           - Строка - номер телефона.
//  УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте.
//  Перезаполнять     - Булево - признак необходимости перезаполнения информации.
//
Процедура ЗаполнитьКонтактнуюИнформациюПоКонтактномуЛицу(Знач КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте, Знач Перезаполнять = Ложь) Экспорт
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И Не КонтактноеЛицо.Пустая() Тогда
		Если ПустаяСтрока(ЭлектроннаяПочта) ИЛИ Перезаполнять Тогда
			ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, 
				Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица);
		КонецЕсли;
		Если ПустаяСтрока(Телефон) ИЛИ Перезаполнять Тогда
			Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, 
				Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
		КонецЕсли;
	КонецЕсли;
	
	УведомлятьПоПочте = Не ПустаяСтрока(ЭлектроннаяПочта);
	
КонецПроцедуры

// Заполнение реквизитов номенклатуры в процедуре формирования заказа.
// См. Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатура.
//  Результат	 - Структура - возвращаемые реквизиты ссылки справочника, состав:
//    ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры.
//    ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    НоменклатураПоставщика - СправочникСсылка - пустая ссылка номенклатура поставщика.
//
Процедура ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Знач Номенклатура, Результат) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК Ссылка,
	|	КатегорииНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеКатегорий
	|		ПО КатегорииНоменклатуры.Ссылка = СоответствиеКатегорий.ВидНоменклатуры";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.КатегорииНоменклатуры";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Товары - ТаблицаЗначений - исходная таблица с товарами, колонки:
//    Обязательные поля:
//    * Номенклатура   - СправочникСсылка - номенклатурная позиция.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка       - СправочникСсылка - упаковка номенклатуры.
//    * Количество     - Число - количество.
//    Заполняемые поля:
//    * УпаковкаЕдиницаИзмеренияКод - Строка - код упаковки.
//    * ЕдиницаИзмеренияКод         - Строка - код единицы измерения.
//    * УпаковкаЧислитель           - Число - числитель упаковки номенклатуры.
//    * УпаковкаЗнаменатель         - Число - знаменатель упаковки номенклатуры.
//    * ШтрихКод                    - Массив - штрихкоды номенклатуры.
//    * Артикул                     - Строка - артикул номенклатуры.
//    * Наименование                - Строка - наименование номенклатуры.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//
Процедура ДобавитьСлужебныеКолонкиТовары(Товары, Знач ПолучатьШтрихКоды = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.ЕдиницаИзмерения КАК Справочник.КлассификаторЕдиницИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3)) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК УпаковкаЗнаменатель,
	|	1 КАК УпаковкаЧислитель,
	|	Товары.Количество КАК Количество,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	Товары.ЕдиницаИзмерения.Код КАК УпаковкаЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатуры
	|		ПО Товары.Номенклатура.КатегорияНоменклатуры = СоответствиеВидовНоменклатуры.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И Товары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
			Выборка.Номенклатура, Выборка.Характеристика, Выборка.ЕдиницаИзмерения));
		Если СтрокаТовары.Количество()>0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары[0], Выборка,, "Номенклатура, Характеристика, ЕдиницаИзмерения");
			СтрокаТовары[0].Упаковка = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучатьШтрихКоды Тогда
		ВыборкаШтрихКоды = РезультатПакета[2].Выбрать();
		Пока ВыборкаШтрихКоды.Следующий() Цикл
			СтрокаТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка",
				ВыборкаШтрихКоды.Номенклатура, ВыборкаШтрихКоды.Характеристика, ВыборкаШтрихКоды.Упаковка));
				
			Если СтрокаТовары.Количество()>0 Тогда
				Если СтрокаТовары[0].ШтрихКоды = Неопределено Тогда
					МассивШтрихКодов = Новый Массив;
					МассивШтрихКодов.Добавить(ВыборкаШтрихКоды.ШтрихКод);
					СтрокаТовары[0].ШтрихКоды = МассивШтрихКодов;
				Иначе
					СтрокаТовары[0].ШтрихКоды.Добавить(ВыборкаШтрихКоды.ШтрихКод);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ОбъектСопоставления - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	    - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	        - ОписаниеТипов - тип значений реквизита.
//  ЗначенияРеквизита   - ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
	// Вывод в список всех реквизитов в ИБ.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ЗначенияСвойствОбъектов
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В
	|			(ВЫБРАТЬ
	|				ВЫБОР
	|					КОГДА ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
	|						ТОГДА &Владелец
	|					ИНАЧЕ ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений
	|				КОНЕЦ КАК Поле1
	|			ИЗ
	|				ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|			ГДЕ
	|				ДополнительныеРеквизитыИСведения.Ссылка = &Владелец)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектовИерархия.Ссылка,
	|	ЗначенияСвойствОбъектовИерархия.Владелец
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
	|ГДЕ
	|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Значение,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначенияРеквизитаКатегории,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ПредставлениеЗначенияРеквизитаКатегории КАК ПредставлениеЗначенияРеквизитаКатегории
	|ИЗ
	|	ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|		ПО ЗначенияСвойствОбъектов.Ссылка = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение
	|			И (СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ВидНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение
	|АВТОУПОРЯДОЧИВАНИЕ";	
	
	Если ТипЗнч(РеквизитОбъекта) = Тип("Строка") Тогда
		
		// Модификация запроса для получения значений справочника.
		Тип = ТипЗначения.Типы()[0];
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ЗначенияСвойствОбъектовИерархия", "." + ОбъектМетаданных.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектовИерархия.Владелец", "NULL");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", РеквизитОбъекта);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ОбъектСопоставления);
	
	ЗначенияРеквизита =  Запрос.Выполнить().Выгрузить();
	
	
КонецПроцедуры

// Заполнение реквизитов заказов.
//
// Параметры:
//  ТаблицаЗаказов	 - ТаблицаЗначений - таблица с ссылками и реквизитами для заполнения.
//                     см. ТорговыеПредложения.ФормированиеЗаказов.Заказы.
//
Процедура ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Организация,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ВалютаДокумента КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Проведен
	|			ТОГДА 1
	|		КОГДА ЗаказПоставщику.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеКартинки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&СписокДокументов)
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаЗаказов.ВыгрузитьКолонку("Ссылка"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗаказов.Найти(Выборка.Ссылка, "Ссылка");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// В обработчике требуется определить право текущего пользователя на создание
//   документов заказа поставщику.
//
// Параметры:
//  ЕстьПраво      - Булево - признак наличия прав у текущего пользователя на
//                         создание документов заказа поставщику
//                         Истина - пользователь имеет права создавать документы
//                         Ложь - права на создание документов отсутствуют
//  ТекстСообщения - Строка - текст сообщения пользователю, выводимое при отсутствии
//                         права на создание документов.
//
Процедура ПриОпределенииПраваСозданияЗаказовПоставщику(ЕстьПраво, ТекстСообщения) Экспорт
	
	ЕстьПраво = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику);
	ТекстСообщения = НСтр("ru = 'Отсутствуют права на создание документов.';
							|en = 'Отсутствуют права на создание документов.'");
	
КонецПроцедуры


// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПолучитьЗначениеСтавкиНДС(Знач ИмяСтавкиНДС, Ссылка) Экспорт
	
	Если ИмяСтавкиНДС = "БезНДС" Тогда
		Ссылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	ИначеЕсли ИмяСтавкиНДС = "НДС0" Тогда
		Ссылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	ИначеЕсли ИмяСтавкиНДС = "НДС10" ИЛИ  ИмяСтавкиНДС = "НДС10_110" Тогда
		Ссылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
	ИначеЕсли ИмяСтавкиНДС = "НДС18" ИЛИ  ИмяСтавкиНДС = "НДС18_118" Тогда
		Ссылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
	ИначеЕсли ИмяСтавкиНДС = "НДС20" ИЛИ  ИмяСтавкиНДС = "НДС20_120" Тогда
		Ссылка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(20);
	КонецЕсли;
	
КонецПроцедуры

// Получение имени ставки НДС.
//
// Параметры:
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//
Процедура ПолучитьИмяСтавкиНДС(Знач Ссылка, ИмяСтавкиНДС) Экспорт
	
	ИмяСтавкиНДС = "БезНДС";
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСтавкиНДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ставка,Расчетная");
	Если РеквизитыСтавкиНДС.Ставка = 18
		И НЕ РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС18";
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 18
		И РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС18_118";
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 10 
		И НЕ РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС10";
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 10 
		И РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС10_110";
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 20 
		И НЕ РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС20";
	ИначеЕсли РеквизитыСтавкиНДС.Ставка = 20 
		И РеквизитыСтавкиНДС.Расчетная Тогда
		ИмяСтавкиНДС = "НДС20_120";
	КонецЕсли;
	
КонецПроцедуры

// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - Произвольный - значение реквизита сопоставления, см. определяемый тип ДополнительныеРеквизитыБизнесСеть.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
	ПубликуемыеРеквизиты = Новый Соответствие;
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("Представление",    НСтр("ru = 'Вес'"));
	СвойстваРеквизита.Вставить("ПутьКДанным",
		"ВЫБОР КОГДА Номенклатура.Весовой И Номенклатура.Вес <> 0 ТОГДА
		|	Номенклатура.Вес ИНАЧЕ 0 КОНЕЦ");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Вес, СвойстваРеквизита);
	
	// Номенклатура.Объем.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("Представление",    НСтр("ru = 'Объем'"));
	СвойстваРеквизита.Вставить("ПутьКДанным", "Номенклатура.Объем");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Объем, СвойстваРеквизита);
	
	// Номенклатура.Производитель.
	СвойстваРеквизита = Новый Структура();
	СвойстваРеквизита.Вставить("Представление",    НСтр("ru = 'Производитель'"));
	СвойстваРеквизита.Вставить("ПутьКДанным", "Номенклатура.Производитель");
	СвойстваРеквизита.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СвойстваРеквизита.Вставить("ПустоеЗначение", Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Производитель, СвойстваРеквизита);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если Найти(Форма.ИмяФормы, "ПоискПоТоварам") Тогда
		
		ГруппЭлементов = Форма.Элементы.Найти("ГруппаКоманднойПанелиПереопределяемая");
		Если ГруппЭлементов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКоманды = ГруппЭлементов.Имя + "ВставкаИзБуфера";
		
		Если Форма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Формирование команды вставки из буфера.
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Заголовок = НСтр("ru = 'Вставка из буфера'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		КомандаФормы.Картинка = БиблиотекаКартинок.ВставитьИзБуфераОбмена;
		КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.V, , Истина, Истина);
		КомандаФормы.Подсказка = "Вставка из буфера";
		КнопкаФормы = Форма.Элементы.Добавить("ТоварыВставитьСтроки", Тип("КнопкаФормы"), ГруппЭлементов);
		КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
		
		// Формирование команды вставки из буфера.
		ИмяКоманды = ГруппЭлементов.Имя + "ПодобратьТовары";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Заголовок = НСтр("ru = 'Подобрать товары'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КомандаФормы.Подсказка = "Открыть подбор товаров";
		КнопкаФормы = Форма.Элементы.Добавить("ПодобратьТовары", Тип("КнопкаФормы"), ГруппЭлементов);
		КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаФормы.ИмяКоманды = ИмяКоманды;
		
		УстановитьДоступностьКомандБуфераОбмена(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора формы (переопределяемое события).
// Вызов производится на сервере. См. описание метода ОбработкаВыбора.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма источник события.
//  ВыбранноеЗначение	 - Произвольный - выбранное событие.
//  ИсточникВыбора		 - Произвольный - форма, где осуществлен выбор.
//
Процедура ОбработатьВыбор(Форма, Знач ВыбранноеЗначение, Знач ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПоОтбору.Форма.Форма"
		И Форма.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам" Тогда
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
		ЕдиницыИзмеренияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"),
			"ЕдиницаИзмерения");
		
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			ТекущаяСтрока = Форма.Список.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			
			ТекущаяСтрока.Упаковка = ЕдиницыИзмеренияНоменклатуры.Получить(СтрокаТовара.Номенклатура);
			ТекущаяСтрока.Количество = 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения формы (переопределяемое событие).
// Вызывается на сервере. См. метод ОбработкаОповещения.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма источник события.
//  ИмяСобытия - Строка - имя оповещения.
//
Процедура ОбработатьОповещение( Знач ИмяСобытия, Параметр, Форма) Экспорт
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена"
		И Форма.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(Форма);
	ИначеЕсли ИмяСобытия = "ПодборПроизведен"
		И Форма.ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам" Тогда
			ПолучитьЗапасыИзХранилища(Форма, Параметр, "Список", Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ОбъектСопоставления      - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//    * Представление                   - Строка - представление реквизита.
//  ДополнительныеРеквизиты  - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения     - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий       - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
	// Заполнение списка набора реквизитов.
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоступныеРеквизиты.РеквизитОбъекта КАК РеквизитОбъекта,
	|	ДоступныеРеквизиты.Представление КАК Представление
	|ПОМЕСТИТЬ ДоступныеРеквизиты
	|ИЗ
	|	&ДоступныеРеквизиты КАК ДоступныеРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыНоменклатуры.Свойство КАК РеквизитОбъекта,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	РеквизитыНоменклатуры.Свойство.Наименование КАК Представление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК РеквизитыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО РеквизитыНоменклатуры.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|			И (СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ОбъектСопоставления)
	|ГДЕ
	|	РеквизитыНоменклатуры.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств
	|			ИЗ
	|				Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.РеквизитОбъекта,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории,
	|	ВЫРАЗИТЬ(ДополнительныеРеквизиты.Представление КАК СТРОКА(50))
	|ИЗ
	|	ДоступныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО (ДополнительныеРеквизиты.РеквизитОбъекта = (ВЫРАЗИТЬ(СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК Перечисление.РеквизитыСопоставленияНоменклатурыБизнесСеть)))
	|			И (СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ОбъектСопоставления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитов.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ДополнительныеРеквизиты.Свойство = ЗначенияСвойствОбъектов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО ДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|			И (СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления = &ОбъектСопоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитов
	|		ПО ДополнительныеРеквизиты.Свойство = СоответствиеЗначенийРеквизитов.РеквизитОбъекта
	|			И (СоответствиеЗначенийРеквизитов.ОбъектСопоставления = &ОбъектСопоставления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеРеквизиты.Свойство";

	
	СоответствиеРеквизитов = Новый Соответствие;
	ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(СоответствиеРеквизитов);
	Для Каждого Реквизит Из СоответствиеРеквизитов Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитОбъекта = Реквизит.Ключ;
		НоваяСтрока.ТипЗначения = Реквизит.Значение.ТипЗначения;
		НоваяСтрока.Представление   = Реквизит.Значение.Представление;
	КонецЦикла;
	Если ТипЗнч(ОбъектСопоставления) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		ВидНоменклатуры = ОбъектСопоставления;
	ИначеЕсли ТипЗнч(ОбъектСопоставления) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСопоставления, "КатегорияНоменклатуры");
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидНоменклатуры",           ВидНоменклатуры);
	Запрос.УстановитьПараметр("ОбъектСопоставления",     ОбъектСопоставления);
	Запрос.УстановитьПараметр("ДоступныеРеквизиты",        ДополнительныеРеквизиты);
	Запрос.УстановитьПараметр("ОбщийРеквизитНоменклатура", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СопоставленныеРеквизиты.Добавить(), Выборка);
	КонецЦикла;
	
	ВременныйМассив = Новый Массив;
	Выборка = ПакетЗапросов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасчетСоответствий.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет основные сведения о номенклатуре. В обработчике следует по колонке "Номенклатура"
//  заполнить колонки "ЕдиницаИзмерения", "Упаковка", "ИспользованиеХарактеристик". При заполнении
//  следует учитывать, что все заполняемые колонки не являются обязательными. Устанавливать значения
//  следует конструкцией ЗаполнитьЗначенияСвойств(Строка, ИсточникДанных, , "Номенклатура").
//
// Параметры:
//  ДанныеНоменклатуры - ТаблицаЗначений, ДанныеФормыКоллекция - заполняемая таблица номенклатуры:
//    * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры
//    * Упаковка - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка номенклатуры
//    * ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры
//
Процедура ЗаполнитьСведенияОНоменклатуре(ДанныеНоменклатуры) Экспорт
	
	ИспользуемаяНоменклатура = Новый Массив;
	
	Для каждого Строка Из ДанныеНоменклатуры Цикл
		ИспользуемаяНоменклатура.Добавить(Строка.Номенклатура);
	КонецЦикла;
	
	ИспользуемаяНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемаяНоменклатура);
	
	ИспользованиеХарактеристик = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользуемаяНоменклатура", ИспользуемаяНоменклатура);
	Запрос.УстановитьПараметр("ИспользованиеХарактеристик", ИспользованиеХарактеристик);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	&ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	               |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Номенклатура.ЕдиницаИзмерения  КАК Упаковка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |
	               |ГДЕ
	               |	Номенклатура.Ссылка В(&ИспользуемаяНоменклатура)";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ВыборкаЗапроса.Номенклатура);
		
		НайденныеСтроки = ДанныеНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаЗапроса, , "Номенклатура");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение свойств торгового предложения.
//
// Параметры:
//  Источник        - СправочникСсылка - источник торгового соглашения, например СправочникСсылка.Соглашения.
//  ЗначенияСвойств - Структура - возвращаемое значение заполнения.
//
Процедура ПолучитьСвойстваТорговогоПредложения(Знач Источник, ЗначенияСвойств) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Валюта"));
	
КонецПроцедуры

// Получение текста запроса публикуемых товаров.
// 
// В запросе необходимо вернуть данные для публикации товаров.
// См. ТорговыеПредложения.ОписаниеПакетаПредложений таблица Товары.
// Обязательный параметр &ТорговыеПредложения (определяемый тип ТорговыеПредложения).
//
// Параметры:
//   ТекстЗапроса - Строка - формируемый текст запроса.
//   ФормироватьСвойства - Булево - признак добавления подзапроса для получения свойств товаров, штрих-кодов.
//   ИспользоватьПараметры - Булево - признак использования параметров запроса &ТорговоеПредложение, &Период.
//
// Пример:
//   ТорговыеПредложенияПереопределяемый.ТекстЗапросаПубликуемыхТоваров(Ложь) =
//     "ВЫБРАТЬ
//     |  Товары.ВидНоменклатуры,
//     |  Товары.Номенклатура,
//     |  Товары.Характеристика,
//     |  Товары.КатегорияНаименование,
//     |  Товары.Упаковка,
//     |  Товары.СрокаПоставки,
//     |  Товары.Цена
//     |ИЗ Справочник.ПрайсЛист.Товары КАК Товары
//     |  ГДЕ Товары.Ссылка = &ТорговыеПредложения"
//
Процедура ПолучитьТекстЗапросаПубликуемыхТоваров(ТекстЗапроса, ФормироватьСвойства = Ложь, ИспользоватьПараметры = Ложь) Экспорт
	
	
	ТекстТовары =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТовары.Ссылка КАК ТорговоеПредложение
	|ПОМЕСТИТЬ ВТПредложенияСТоварами
	|ИЗ
	|	Справочник.ТорговыеПредложения.Товары КАК ТорговыеПредложенияТовары
	|ГДЕ
	|	ТорговыеПредложенияТовары.Ссылка = &ТорговоеПредложение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТорговыеПредложенияТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияСинхронизации.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияСинхронизации.ТорговоеПредложение.Организация КАК Организация,
	|	СостоянияСинхронизации.ТорговоеПредложение.ВидЦен КАК ВидЦены,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта КАК Валюта,
	|	СостоянияСинхронизации.ТорговоеПредложение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта.Код КАК ВалютаКод,
	|	СостоянияСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	ВЫБОР
	|		КОГДА ВТПредложенияСТоварами.ТорговоеПредложение ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПубликоватьВсеТовары
	|ПОМЕСТИТЬ СостоянияТорговыеПредложения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредложенияСТоварами КАК ВТПредложенияСТоварами
	|		ПО (ВТПредложенияСТоварами.ТорговоеПредложение = СостоянияСинхронизации.ТорговоеПредложение)
	|ГДЕ
	|	НЕ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|	И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение";
	
	ТекстТовары = ТекстТовары + ";";
	
	ТекстТовары = ТекстТовары +
	"ВЫБРАТЬ
	|	СУММА(Запасы.КоличествоОстаток) КАК Остаток,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.Организация КАК Организация
	|				ИЗ
	|					СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК Запасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияТорговыеПредложения КАК ТорговыеПредложения
	|		ПО (ТорговыеПредложения.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ТорговыеПредложения.СтруктурнаяЕдиница = Запасы.СтруктурнаяЕдиница)
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика";
	
	ТекстТовары = ТекстТовары + ";";
	
	ТекстТовары = ТекстТовары + Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС();
	
	ТекстТовары = ТекстТовары +
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	СправочникНоменклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьЦены
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Цена,
	|	СостоянияТорговыеПредложения.Валюта.Код КАК ВалютаКод,
	|	1 КАК УпаковкаЧислитель,
	|	1 КАК УпаковкаЗнаменатель,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьСрокиПоставки
	|			ТОГДА СостоянияТорговыеПредложения.СрокПоставки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПоставки,
	|	СправочникНоменклатура.ФайлКартинки КАК Картинка,
	|	СправочникНоменклатура.ФайлКартинки.Расширение КАК Расширение,
	|	СправочникНоменклатура.ФайлКартинки.ДатаМодификацииУниверсальная КАК ДатаИзмененияКартинки,
	|	СправочникНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоВидам.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоИерархии.ВидНоменклатуры, СправочникНоменклатура.КатегорияНоменклатуры))) КАК ОбъектСопоставления,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК КатегорияНаименование,
	|	СостоянияТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияТорговыеПредложения.Организация КАК Организация,
	|	СостоянияТорговыеПредложения.ВидЦены КАК ВидЦены,
	|	ОстаткиНоменклатуры.Остаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Остаток < 5
	|			ТОГДА 1
	|		КОГДА ОстаткиНоменклатуры.Остаток < 10
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	СостоянияТорговыеПредложения КАК СостоянияТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СостоянияТорговыеПредложения.ПубликоватьВсеТовары)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО (СправочникНоменклатура.Ссылка = СоответствиеПоНоменклатуре.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО (СправочникНоменклатура.Ссылка.КатегорияНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО (СправочникНоменклатура.Ссылка.Родитель = СоответствиеПоИерархии.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период {(&Период)},
	|				ВидЦен В
	|					(ВЫБРАТЬ
	|						ТорговыеПредложения.ВидЦены КАК ВидЦены
	|					ИЗ
	|						СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО (СправочникНоменклатура.Ссылка = ОстаткиНоменклатуры.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ОстаткиНоменклатуры.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (СправочникНоменклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	(ЦеныНоменклатурыСрезПоследних.Цена <> 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьЦены)
	|	И (ОстаткиНоменклатуры.Остаток > 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьОстатки)
	|	И СправочникНоменклатура.КатегорияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТовары.Номенклатура,
	|	ТорговыеПредложенияТовары.Номенклатура.Артикул,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Код,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Код,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)),
	|	ТорговыеПредложенияТовары.Номенклатура.Наименование,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	СостоянияТорговыеПредложения.Валюта.Код,
	|	1,
	|	1,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьСрокиПоставки
	|			ТОГДА 0
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки,
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки.Расширение,
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки.ДатаМодификацииУниверсальная,
	|	ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры,
	|	ТорговыеПредложенияТовары.Характеристика,
	|	ТорговыеПредложенияТовары.Характеристика.Наименование,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоВидам.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоИерархии.ВидНоменклатуры, ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры))),
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)),
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)),
	|	СостоянияТорговыеПредложения.ТорговоеПредложение,
	|	СостоянияТорговыеПредложения.Организация,
	|	СостоянияТорговыеПредложения.ВидЦены,
	|	ОстаткиНоменклатуры.Остаток,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Остаток < 5
	|			ТОГДА 1
	|		КОГДА ОстаткиНоменклатуры.Остаток < 10
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|ИЗ
	|	СостоянияТорговыеПредложения КАК СостоянияТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговыеПредложения.Товары КАК ТорговыеПредложенияТовары
	|		ПО (ТорговыеПредложенияТовары.Ссылка = СостоянияТорговыеПредложения.ТорговоеПредложение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = СоответствиеПоНоменклатуре.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.Родитель = СоответствиеПоИерархии.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период {(&Период)},
	|				ВидЦен В
	|					(ВЫБРАТЬ
	|						ТорговыеПредложения.ВидЦены КАК ВидЦены
	|					ИЗ
	|						СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|			И (ТорговыеПредложенияТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика)
	|			И (ТорговыеПредложенияТовары.Ссылка.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = ОстаткиНоменклатуры.Номенклатура)
	|			И (ТорговыеПредложенияТовары.Характеристика = ОстаткиНоменклатуры.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	(ЦеныНоменклатурыСрезПоследних.Цена <> 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьЦены)
	|	И (ОстаткиНоменклатуры.Остаток > 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьОстатки)
	|	И ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)";
	
	ТекстТовары = ТекстТовары + ";";
	
	ТекстТовары = ТекстТовары +
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Артикул КАК Артикул,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.УпаковкаКод КАК УпаковкаКод,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Наименование КАК Наименование,
	|	Товары.Цена КАК Цена,
	|	Товары.ВалютаКод КАК ВалютаКод,
	|	Товары.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	Товары.УпаковкаЧислитель КАК УпаковкаЧислитель,
	|	Товары.УпаковкаЗнаменатель КАК УпаковкаЗнаменатель,
	|	Товары.Картинка КАК Картинка,
	|	Товары.Расширение КАК Расширение,
	|	Товары.ДатаИзмененияКартинки КАК ДатаИзмененияКартинки,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.ТорговоеПредложение КАК ТорговоеПредложение,
	|	Товары.Организация КАК Организация,
	|	Товары.ВидЦены КАК ВидЦены,
	|	Товары.Количество КАК Количество,
	|	Товары.Остаток КАК Остаток
	|ИЗ
	|	Товары КАК Товары";
	
	ТекстСвойства =
	"ВЫБРАТЬ
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ПредставлениеРеквизитаКатегории КАК Наименование,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ДополнительныеРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = ДополнительныеРеквизиты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО (Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления)
	|			И ДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И (СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта = ""&Свойство"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.ИдентификаторРеквизитаКатегории КАК ИдентификаторРеквизитаКатегории,
	|	Свойства.Значение КАК Значение,
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории КАК ИдентификаторЗначения
	|ИЗ
	|	Свойства КАК Свойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|		ПО Свойства.ВидНоменклатуры = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И Свойства.Свойство = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|			И Свойства.Значение = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Штрихкоды.Штрихкод КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения";
	
	// Формирование реквизитов номенклатуры.
	БлокРеквизитовШаблон = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ОбъектСопоставления КАК ОбъектСопоставления,
	|	Товары.ВидНоменклатуры,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ПредставлениеРеквизитаКатегории,
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И (СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта = ""&Свойство"")
	|";
	
	Если СтрЧислоВхождений(ТекстСвойства, БлокРеквизитовШаблон) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка запроса получения демонстрационных данных.'");
	КонецЕсли;
	
	// БлокРеквизитовПодстановка - дополнительные свойства товара, например Номенклатура.Вес.
	БлокРеквизитовПодстановка = "";
	
	ТекстСвойства = СтрЗаменить(ТекстСвойства, БлокРеквизитовШаблон, БлокРеквизитовПодстановка);
	// Конец Формирование реквизитов номенклатуры.
	
	
	// Удаление параметров запроса ТОВАРЫ.
	Если Не ИспользоватьПараметры Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "ГДЕ
		|	ТорговыеПредложенияТовары.Ссылка = &ТорговоеПредложение", "");
		ТекстТовары = СтрЗаменить(ТекстТовары, "И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение", "");
		ТекстТовары = СтрЗаменить(ТекстТовары, "&Период ", ""); // с пробелом.
	КонецЕсли;
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "Организация В
			|				(ВЫБРАТЬ
			|					ТорговыеПредложения.Организация КАК Организация
			|				ИЗ
			|					СостоянияТорговыеПредложения КАК ТорговыеПредложения)", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстТовары;
	Если ФормироватьСвойства Тогда
		Разделитель = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапроса = ТекстЗапроса + Разделитель
			+ ТекстСвойства;
	Иначе
		
		// Удаление последнего запроса.
		МассивЗапросов = СтрРазделить(ТекстЗапроса, ";");
		МассивЗапросов.Удалить(МассивЗапросов.Количество() - 1);
		
		// Удаление использования временной таблицы ВыборкаНоменклатуры.
		ТекстЗапроса = СтрСоединить(МассивЗапросов, ";");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ Товары", "");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение адресов абонента по зарегистрированным организациям и складам.
//
// Параметры:
//  АдресаАбонента - ТаблицаЗначения - таблица для заполнения, см. ТорговыеПредложения.ОписаниеАдресовАбонента().
//
Процедура ЗаполнитьАдресаАбонента(АдресаАбонента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = ОрганизацииБизнесСеть.Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	ТаблицаОрганизации 	= Запрос.Выполнить().Выгрузить();
	МассивОрганизации 	= ТаблицаОрганизации.ВыгрузитьКолонку("Ссылка");
	ДатаКИ 				= ТекущаяДатаСеанса();
	
	ТипАдрес = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТаблицаАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОрганизации,
		ТипАдрес,
		,
		ДатаКИ);
		
	Для Каждого Адрес Из ТаблицаАдреса Цикл
		СтрокаАдреса = АдресаАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Адрес);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Адрес.Вид, Адрес.Объект);
		СтрокаАдреса.Ссылка   = Адрес.Объект;
	КонецЦикла;
	
	АдресаАбонента.Сортировать("Представление");
	
КонецПроцедуры

// Получение способов доставки для заполнения по умолчанию значений при формировании заказов.
//
// Параметры:
//  СпособыДоставки - СписокЗначений - возможные значения способа доставки.
//                                     Первое значение является значением по умолчанию.
//  ВидДоставки	- Строка - значение вида доставки, варианты "Самовывоз", "Доставка".
//
Процедура ПолучитьСпособыДоставки(СпособыДоставки, ВидДоставки = Неопределено) Экспорт
	
	СпособыДоставки = Новый СписокЗначений;
	Если ВРег(ВидДоставки) = "САМОВЫВОЗ" Тогда
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Самовывоз);
	ИначеЕсли ВРег(ВидДоставки) = "ДОСТАВКА" Тогда 
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ПунктВыдачи);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Курьер);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Почта);
	Иначе
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Самовывоз);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ПунктВыдачи);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Курьер);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.Почта);
	КонецЕсли;
	
	
КонецПроцедуры



// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеКатегорий
	|		ПО Номенклатура.Ссылка = СоответствиеКатегорий.ВидНоменклатуры
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК Категория,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	СоответствиеПоНоменклатуре.ПредставлениеКатегории КАК КатегорияПоНоменклатуре,
	|	СоответствиеПоНоменклатуре.ИдентификаторКатегории КАК ИдентификаторКатегорииПоНоменклатуре,
	|	СоответствиеПоВидам.ПредставлениеКатегории КАК КатегорияПоВидам,
	|	СоответствиеПоВидам.ИдентификаторКатегории КАК ИдентификаторКатегорииПоВидам,
	|	СоответствиеПоИерархии.ПредставлениеКатегории КАК КатегорияПоИерархии,
	|	СоответствиеПоИерархии.ИдентификаторКатегории КАК ИдентификаторКатегорииПоИерархии,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО Номенклатура.Ссылка = СоответствиеПоНоменклатуре.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО Номенклатура.Родитель = СоответствиеПоИерархии.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО Номенклатура.КатегорияНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);	
	
КонецПроцедуры

// Получение доступности функционала запроса цен в прикладном решении.
//
// Параметры:
//  Результат	 - Булево - признак доступности функционала запроса цен.
//
Процедура ПолучитьДоступностьФункционалаЗапросаЦен(Результат) Экспорт
	Результат = Ложь;
КонецПроцедуры

// Заполнение штрихкодов для выгрузки.
//
// Параметры:
//  Организации	 - Массив - Список организация, для которых производится выгрузка.
//  РежимПоставщика - Булево - Выгружать только данные по продажам.
//  РежимПокупателя - Булево - Выгружать только данные по покупкам.
//  Штрихкоды	 - ТаблицаЗначений - данные по штрихкодам, 
//                 см. ТорговыеПредложения.ОбновитьПодсказкиТорговыеПредложения:
//    * Штрихкод - Строка - штрихкод товара.
//    * Наименование - Строка - Наименование товара
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК РежимПоставщика,
		|	ИСТИНА КАК РежимПокупателя,
		|	ЗакупкиОбороты.Организация КАК Организация,
		|	ЗакупкиОбороты.Номенклатура КАК Номенклатура,
		|	ЗакупкиОбороты.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ЗакупкиПродажи
		|ИЗ
		|	РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, , Организация В (&Организации)) КАК ЗакупкиОбороты
		|ГДЕ
		|	&РежимПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ПродажиОбороты.Организация,
		|	ПродажиОбороты.Номенклатура,
		|	ПродажиОбороты.Характеристика
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Организация В (&Организации)) КАК ПродажиОбороты
		|ГДЕ
		|	&РежимПоставщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗакупкиПродажи.РежимПоставщика) КАК РежимПоставщика,
		|	МАКСИМУМ(ЗакупкиПродажи.РежимПокупателя) КАК РежимПокупателя,
		|	ЗакупкиПродажи.Организация КАК Организация,
		|	ЗакупкиПродажи.Номенклатура КАК Номенклатура,
		|	ЗакупкиПродажи.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Обороты
		|ИЗ
		|	ЗакупкиПродажи КАК ЗакупкиПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакупкиПродажи.Организация,
		|	ЗакупкиПродажи.Номенклатура,
		|	ЗакупкиПродажи.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
		|	Обороты.РежимПоставщика КАК РежимПоставщика,
		|	Обороты.РежимПокупателя КАК РежимПокупателя,
		|	Обороты.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Обороты.Номенклатура.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Обороты.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(Обороты.Номенклатура.НаименованиеПолное КАК СТРОКА(200))
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Обороты.Характеристика.Наименование ЕСТЬ NULL
		|				ИЛИ Обороты.Характеристика.Наименование ПОДОБНО """"
		|			ТОГДА """"
		|		ИНАЧЕ "", "" + Обороты.Характеристика.Наименование
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Обороты.Номенклатура.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
		|				ИЛИ Обороты.Номенклатура.ЕдиницаИзмерения.Наименование ПОДОБНО """"
		|			ТОГДА """"
		|		ИНАЧЕ "" ("" + Обороты.Номенклатура.ЕдиницаИзмерения.Наименование + "")""
		|	КОНЕЦ КАК Наименование,
		|	Обороты.Номенклатура.Артикул КАК Артикул,
		|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
		|	Обороты.Номенклатура.КатегорияНоменклатуры.Наименование КАК ВидНоменклатуры
		|ИЗ
		|	Обороты КАК Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|		ПО Обороты.Номенклатура = Штрихкоды.Номенклатура
		|			И Обороты.Характеристика = Штрихкоды.Характеристика";
	
	Запрос.УстановитьПараметр("РежимПоставщика", РежимПоставщика);
	Запрос.УстановитьПараметр("РежимПокупателя", РежимПокупателя);
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("ДатаНачала",      НачалоДня(НачалоДня(ТекущаяДатаСеанса()) - 1));
	Запрос.УстановитьПараметр("ДатаОкончания",   НачалоДня(ТекущаяДатаСеанса()) - 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Штрихкоды.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ с товарами.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//  Товары - ТаблицаЗначений - таблица с товарами, см. ТорговыеПредложения.ОписаниеТаблицыТоваровДляПоиска().
//
Процедура ПолучитьТоварыДляПодсказокПоСсылке(Знач Ссылка, Знач ПолучатьШтрихКоды, Товары) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
		|	ЗаказПоставщикуТовары.ЕдиницаИзмерения КАК Упаковка,
		|	ЗаказПоставщикуТовары.Количество КАК Количество
		|ИЗ
		|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика, //todo РаботаСНоменклатурой
		|	Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Выборка);
		КонецЦикла;
		ДобавитьСлужебныеКолонкиТовары(Товары, ПолучатьШтрихКоды);
		
	КонецЕсли;
	
КонецПроцедуры

// Выгружать относительные остатки товаров.
// Определяет возможность выгрузки в конфигурации торговых предложений
// с указанием остатков номенклатуры в значениях "мало-много".
//
// Параметры:
//  Результат	 - Булево - признак наличия функционала.
//
Процедура ВыгружатьОтносительныеОстаткиТоваров(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, Валюта)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора, Валюта);
	
	Возврат СоздатьДоговорПоУмолчанию(Контрагент, Организация, Валюта);
	
КонецФункции

Функция  СоздатьДоговорПоУмолчанию(Контрагент, Организация, Валюта)
	
	ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ДоговорОбъект.Заполнить(Контрагент);
	ДоговорОбъект.Организация = Организация;
	ДоговорОбъект.ВалютаРасчетов = Валюта;
	ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;
	
	ДоговорОбъект.Записать();
	
	Возврат ДоговорОбъект.Ссылка;
КонецФункции

Функция РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, ТолькоВедущиеИзмерения = Ложь) Экспорт
	
	МассивИменМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаОбъектовМетаданных, ",",, Истина);
	
	МассивРегистров = Новый Массив;
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		
		Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		
		Для Каждого Измерение Из Регистр.Измерения Цикл
			
			Если ТолькоВедущиеИзмерения И НЕ Измерение.Ведущее Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			
			Для Каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИзмерения);
				Если ОбъектМетаданных <> Неопределено
				 И МассивИменМетаданных.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда
					
					МассивТипов.Добавить(ОбъектМетаданных.ПолноеИмя());
					
			 	КонецЕсли;
				
			КонецЦикла; // типы
			
			Если МассивТипов.Количество() > 0 Тогда
				МассивИзмерений.Добавить(Новый Структура("Имя, Типы", Измерение.Имя, МассивТипов));
			КонецЕсли;
			
		КонецЦикла; // измерения
		
		Если МассивИзмерений.Количество() > 0 Тогда
			МассивРегистров.Добавить(Новый Структура("Имя, Измерения", Регистр.Имя, МассивИзмерений));
		КонецЕсли;
		
	КонецЦикла; // регистры
	
	Возврат МассивРегистров;
	
КонецФункции

// Получение признака записи ведомого регистра сведений.
//
// Параметры:
//  Ссылка	 - Произвольный - ссылка на объект информационной базы.
//  Регистры - Массив - список регистров сведений.
// 
// Возвращаемое значение:
//  Булево - признак записи ведомого регистра.
//
Функция ЭтоЗаписьВедомогоРегистраСведений(Ссылка, Регистры)
	
	Для Каждого Элемент Из Регистры Цикл
		Если ТипЗнч(Ссылка) = Тип("РегистрСведенийКлючЗаписи." + Элемент.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Установка доступность команд буфера обмена в форме.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма установки доступности команд.
//
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма)
	
	// Наименование элементов формы.
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("Строки");
	
	УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		НЕ ПустойБуферОбмена);
		
КонецПроцедуры

Процедура ПолучитьЗапасыИзХранилища(Форма, АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Форма[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Всего")
			И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			
			НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////


// Получить параметры поиска номенклатуры сервиса.
//
// Параметры:
//  Номенклатура	 - Ссылка - номенклатура.
//  Характеристика	 - Ссылка - характеристика.
//  Результат		 - Структура - возвращаемые данные:
//   * НаименованиеНоменклатуры - Строка - имя номенклатуры.
//   * НаименованиеХарактеристики - Строка - наименование характеристики.
//   * Штрихкоды - Массив - штрихкоды по ссылке, тип строка.
//
Процедура ПолучитьПараметрыПоискаНоменклатурыСервиса(Знач Номенклатура, Знач Характеристика, Результат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка = &Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Штрихкоды.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	Штрихкоды.Характеристика = &Характеристика
	|	И СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	Запрос.Параметры.Вставить("Характеристика", Характеристика);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаНоменклатура = ПакетЗапроса[0].Выбрать();
	Если Не ВыборкаНоменклатура.Следующий() Тогда
		Результат = Неопределено;
		Возврат;
	КонецЕсли;
	Результат.НаименованиеНоменклатуры = ВыборкаНоменклатура.НаименованиеНоменклатуры;
	
	ВыборкаХарактеристика = ПакетЗапроса[1].Выбрать();
	Если ВыборкаХарактеристика.Следующий() Тогда
		Результат.НаименованиеХарактеристики = ВыборкаХарактеристика.НаименованиеХарактеристики;
	КонецЕсли;
	
	ВыборкаШтрихкоды = ПакетЗапроса[2].Выбрать();
	Пока ВыборкаШтрихкоды.Следующий() Цикл
		Результат.Штрихкоды.Добавить(ВыборкаШтрихкоды.Штрихкод);
	КонецЦикла;
	
КонецПроцедуры

// Получить единицы измерения.
//
// Параметры:
//  Код	   - Строка - код единицы измерения.
//  Ссылка - Ссылка - ссылку на единицу измерения
//  Представление - Строка - представление единицы измерения в базе.
//
Процедура ПолучитьПараметрыЕдиницыИзмерения(Знач Код, Ссылка, Представление) Экспорт
	
	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
	КонецЕсли;
	
КонецПроцедуры

// Инициализация запроса соответствия значений реквизитов вида номенклатуры.
// 
// В запросе необходимо вернуть таблицу содержащую количество значений
// реквизита в информационной базе и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ОбъектСопоставления.
// Поля запроса:
//  * КоличествоЗначенийРеквизита - Число - количество возможных значений реквизита.
//  * КоличествоСопоставленныхРеквизитов - Число - количество реквизитов, сопоставленных в базе.
//
// Параметры:
//  Запрос - Запрос - запрос инициализации, установки параметров
//
Процедура ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос) Экспорт
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеквизитыТоваров.Свойство КАК РеквизитОбъекта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияСвойствОбъектов.Ссылка) КАК КоличествоЗначенийРеквизита,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение) КАК КоличествоСопоставленныхРеквизитов
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК РеквизитыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО (ЗначенияСвойствОбъектов.Владелец В (СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|			ПО СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|		ПО РеквизитыТоваров.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|ГДЕ
	|	РеквизитыТоваров.Свойство = &РеквизитОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыТоваров.Свойство";
		
КонецПроцедуры

// Инициализация запроса публикуемых прайс листов.
// В запросе необходимо описать получение временных таблицы с предопределенными полями.
// Возможно добавление дополнительных полей для использования в других временных таблицах.
//
// Параметры запроса:
//  * ПрайсЛист - ссылка на прайс-лист.
//  * Период    - дата получения периодических данных, например дата установки цены.
//
// Временные таблицы и предопределенные поля:
// ПрайсЛисты:
//  * Ссылка                - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * Организация           - Ссылка - ссылка на организацию.
//  * Наименование          - Строка - наименование.
//  * Валюта                - СправочникСсылка.Валюты - валюта.
//  * ДатаНачалаДействия    - Дата - дата начала действия.
//  * ДатаОкончанияДействия - Дата - дата окончания действия.
//  * МинимальнаяСуммаЗаказа - Число - минимальная сумма для оформления заказа (0 - сумма заказа может быть любой).
//  * ЦенаВключаетНДС        - Булево - признак включения НДС в минимальную сумму заказа.
//
// Контрагенты (для которых доступны торговые предложения):
//  * ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - ссылка прайс-листа.
//  * Контрагент - ОпределяемыйТип.КонтрагентыБЭД - ссылка на контрагента.
//
// Контакты - временная таблица с полями:
//  * ПрайсЛист             - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * ПредставлениеКонтакта - Строка - представление контакта, например ФИО.
//  * Телефон               - Строка - телефон.
//  * ЭлектроннаяПочта      - Строка - адрес электронной почты.
//  * ВебСайт               - Строка - адрес сайта.
//
// Товары:
//  * ПрайсЛист        - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист.
//  * Номенклатура     - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика   - ОпределяемыйТип.ХарактеристикаБЭД - характеристика.
//  * ЕдиницаИзмерения - СправочникСсылка - базовая единица измерения товара.
//  * НаименованиеНоменклатуры   - Строка - публикуемое представление номенклатуры.
//  * НаименованиеХарактеристики - Строка - публикуемое представление характеристики.
//  * ОписаниеНоменклатуры       - Строка - описание номенклатуры.
//  * Артикул              - Строка - артикул товара.
//  * Упаковка             - Ссылка - упаковка товара.
//  * НаименованиеУпаковки - Строка - наименование упаковки товара.
//  * ЧислительУпаковки    - Число  - числитель отношения упаковки к единице измерения.
//  * ЗнаменательУпаковки  - Число  - знаменатель отношения упаковки к единице измерения.
//  * КратностьУпаковки    - Число  - кратность кол-ва логистических упаковок в торговом предложении.
//  * СтавкаНДС            - Ссылка - значение ставки НДС.
//  * ЦенаВключаетНДС      - Булево - признак включения НДС в цену
//  * Цена                 - Число  - стоимость товара в валюте публикации.
//  * СрокПоставки         - Число  - срок поставки на склад поставщика.
//  * Наличие              - Число  - наличие товара на складах (1 - мало, 2 - достаточно, 3 - много).
//  * Количество           - Число - количество товара на складах.
//  * ВидНоменклатуры      - СправочникСсылка - группировка номенклатуры в прикладном решении.
//  * Родитель             - СправочникСсылка - родитель номенклатуры в иерархии.
//  * ПричинаИсключенияИзПубликации - ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения - причина по которой
//         данная позиция не должна быть опубликована в сервисе. В случае, если данная позиция должна быть опубликована
//         содержит в себе пустое значение типа ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения.
//
// Свойства:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаБЭД - характеристика.
//  * Свойство       - Ссылка - свойство товара.
//  * Значение       - Ссылка - значение свойства товара.
//
// Штрихкоды:
//  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаБЭД - характеристика.
//  * Упаковка       - СправочникСсылка - единица измерения упаковки товара.
//  * Значение       - Строка - штрихкод.
//
// Изображения - отбираются актуальные изображения товаров поставщика для публикации:
//  * Номенклатура    - ОпределяемыйТип.НоменклатураБЭД                                   - номенклатура.
//  * Характеристика  - ОпределяемыйТип.ХарактеристикаБЭД                                 - характеристика.
//  * ФайлИзображения - ОпределяемыйТип.ПрисоединенныеФайлыИзображенийТорговоеПредложение - ссылка на
//                        справочник "ПрисоединенныеФайлы", реализованный по технологии библиотеки стандартных подсистем,
//                        обрабатываются с расширением: jpeg, jpg, jpe, png, gif, bmp.
//
// Параметры:
//  Запрос - Запрос - запрос для получения публикуемых прайс-листов и товаров.
//
Процедура ИнициализацияЗапросаПубликуемыхТоваров(Запрос) Экспорт
	
	ТекстТовары =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТорговыеПредложения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТорговыеПредложенияСТоварамиИзСписка
	|ИЗ
	|	Справочник.ТорговыеПредложения.Товары КАК ТорговыеПредложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛист.Ссылка КАК Ссылка,
	|	ПрайсЛист.Организация КАК Организация,
	|	ПрайсЛист.Наименование КАК Наименование,
	|	ПрайсЛист.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ПрайсЛист.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ПрайсЛист.ВидЦен.ВалютаЦены КАК Валюта,
	|	ПрайсЛист.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПрайсЛист.СрокПоставки КАК СрокПоставки,
	|	ПрайсЛист.МинимальнаяСуммаЗаказа КАК МинимальнаяСуммаЗаказа,
	|	ВЫБОР
	|		КОГДА ТорговыеПредложенияСТоварамиИзСписка.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоВсемТоварам,
	|	ИСТИНА КАК ОбновлятьОстаткиИЦены,
	|	ПрайсЛист.ВидЦен КАК ВидЦены
	|ПОМЕСТИТЬ ПрайсЛисты
	|ИЗ
	|	Справочник.ТорговыеПредложения КАК ПрайсЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТорговыеПредложенияСТоварамиИзСписка КАК ТорговыеПредложенияСТоварамиИзСписка
	|		ПО (ТорговыеПредложенияСТоварамиИзСписка.Ссылка = ПрайсЛист.Ссылка)
	|ГДЕ
	|	(&ПрайсЛист = НЕОПРЕДЕЛЕНО
	|			ИЛИ ПрайсЛист.Ссылка В (&ПрайсЛист))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТорговыеПредложенияСТоварамиИзСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛисты.Ссылка КАК ПрайсЛист,
	|	ТорговыеПредложенияКонтрагенты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	ПрайсЛисты КАК ПрайсЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговыеПредложения.Контрагенты КАК ТорговыеПредложенияКонтрагенты
	|		ПО ПрайсЛисты.Ссылка = ТорговыеПредложенияКонтрагенты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛисты.Ссылка КАК ПрайсЛист,
	|	&ПредставлениеКонтакта КАК ПредставлениеКонтакта,
	|	ЕСТЬNULL(ОрганизацияТелефон.Представление, """") КАК Телефон,
	|	ЕСТЬNULL(ОрганизацияЭлектроннаяПочта.Представление, """") КАК ЭлектроннаяПочта
	|ПОМЕСТИТЬ Контакты
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК Контакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрайсЛисты КАК ПрайсЛисты
	|		ПО Контакты.Ссылка = ПрайсЛисты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияТелефон
	|		ПО Контакты.Ссылка = ОрганизацияТелефон.Ссылка
	|			И (ОрганизацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияЭлектроннаяПочта
	|		ПО Контакты.Ссылка = ОрганизацияЭлектроннаяПочта.Ссылка
	|			И (ОрганизацияЭлектроннаяПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТовары.Ссылка КАК ТорговоеПредложение
	|ПОМЕСТИТЬ ВТПредложенияСТоварами
	|ИЗ
	|	Справочник.ТорговыеПредложения.Товары КАК ТорговыеПредложенияТовары
	|ГДЕ
	|	ТорговыеПредложенияТовары.Ссылка = &ТорговоеПредложение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТорговыеПредложенияТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияСинхронизации.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияСинхронизации.ТорговоеПредложение.Организация КАК Организация,
	|	СостоянияСинхронизации.ТорговоеПредложение.ВидЦен КАК ВидЦены,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта КАК Валюта,
	|	СостоянияСинхронизации.ТорговоеПредложение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СостоянияСинхронизации.ТорговоеПредложение.Валюта.Код КАК ВалютаКод,
	|	СостоянияСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизации.ТорговоеПредложение.СрокПоставки КАК СрокПоставки,
	|	СостоянияСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	ВЫБОР
	|		КОГДА ВТПредложенияСТоварами.ТорговоеПредложение ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПубликоватьВсеТовары
	|ПОМЕСТИТЬ СостоянияТорговыеПредложения
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредложенияСТоварами КАК ВТПредложенияСТоварами
	|		ПО (ВТПредложенияСТоварами.ТорговоеПредложение = СостоянияСинхронизации.ТорговоеПредложение)
	|ГДЕ
	|	НЕ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|	И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение";
	
	ТекстТовары = ТекстТовары + ";";
	
	ТекстТовары = ТекстТовары +
	"ВЫБРАТЬ
	|	СУММА(Запасы.КоличествоОстаток) КАК Остаток,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ТорговыеПредложения.Организация КАК Организация
	|				ИЗ
	|					СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК Запасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияТорговыеПредложения КАК ТорговыеПредложения
	|		ПО (ТорговыеПредложения.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ТорговыеПредложения.СтруктурнаяЕдиница = Запасы.СтруктурнаяЕдиница)
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика";
	
	ТекстТовары = ТекстТовары + ";";
	
	ТекстТовары = ТекстТовары + Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС();
	
	ТекстТовары = ТекстТовары +
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК НаименованиеУпаковки,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьЦены
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Цена,
	|	СостоянияТорговыеПредложения.Валюта.Код КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьСрокиПоставки
	|			ТОГДА СостоянияТорговыеПредложения.СрокПоставки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПоставки,
	|	"""" КАК ОписаниеНоменклатуры,
	|	СправочникНоменклатура.ФайлКартинки КАК Картинка,
	|	СправочникНоменклатура.ФайлКартинки.Расширение КАК Расширение,
	|	СправочникНоменклатура.ФайлКартинки.ДатаМодификацииУниверсальная КАК ДатаИзмененияКартинки,
	|	СправочникНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоВидам.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоИерархии.ВидНоменклатуры, СправочникНоменклатура.КатегорияНоменклатуры))) КАК ОбъектСопоставления,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК КатегорияНаименование,
	|	СостоянияТорговыеПредложения.ТорговоеПредложение КАК ПрайсЛист,
	|	СостоянияТорговыеПредложения.Организация КАК Организация,
	|	СостоянияТорговыеПредложения.ВидЦены КАК ВидЦены,
	|	ОстаткиНоменклатуры.Остаток КАК Количество,
	|	1 КАК ЧислительУпаковки,
	|	1 КАК ЗнаменательУпаковки,
	|	1 КАК КратностьУпаковки,
	|	СостоянияТорговыеПредложения.ВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Остаток < 5
	|			ТОГДА 1
	|		КОГДА ОстаткиНоменклатуры.Остаток < 10
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Наличие,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьЦены
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныИсключенияИзПубликацииТорговогоПредложения.НеУказанаЦена)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныИсключенияИзПубликацииТорговогоПредложения.ПустаяСсылка)
	|	КОНЕЦ КАК ПричинаИсключенияИзПубликации
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	СостоянияТорговыеПредложения КАК СостоянияТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СостоянияТорговыеПредложения.ПубликоватьВсеТовары)
	|			И (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО (СправочникНоменклатура.Ссылка = СоответствиеПоНоменклатуре.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО (СправочникНоменклатура.Ссылка.КатегорияНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО (СправочникНоменклатура.Ссылка.Родитель = СоответствиеПоИерархии.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период {(&Период)},
	|				ВидЦен В
	|					(ВЫБРАТЬ
	|						ТорговыеПредложения.ВидЦены КАК ВидЦены
	|					ИЗ
	|						СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО (СправочникНоменклатура.Ссылка = ОстаткиНоменклатуры.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ОстаткиНоменклатуры.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (СправочникНоменклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	(ОстаткиНоменклатуры.Остаток > 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьОстатки)
	|	И СправочникНоменклатура.КатегорияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТовары.Номенклатура,
	|	ТорговыеПредложенияТовары.Номенклатура.Артикул,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Код,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ТорговыеПредложенияТовары.Номенклатура.ЕдиницаИзмерения.Код,
	|	ТорговыеПредложенияТовары.Номенклатура.Родитель,
	|	ЕСТЬNULL(ВТСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)),
	|	СправочникНоменклатура.НаименованиеПолное,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	СостоянияТорговыеПредложения.Валюта.Код,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьСрокиПоставки
	|			ТОГДА СостоянияТорговыеПредложения.СрокПоставки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	"""",
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки,
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки.Расширение,
	|	ТорговыеПредложенияТовары.Номенклатура.ФайлКартинки.ДатаМодификацииУниверсальная,
	|	ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры,
	|	ТорговыеПредложенияТовары.Характеристика,
	|	ТорговыеПредложенияТовары.Характеристика.Наименование,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоВидам.ВидНоменклатуры, ЕСТЬNULL(СоответствиеПоИерархии.ВидНоменклатуры, ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры))),
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)),
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)),
	|	СостоянияТорговыеПредложения.ТорговоеПредложение,
	|	СостоянияТорговыеПредложения.Организация,
	|	СостоянияТорговыеПредложения.ВидЦены,
	|	ОстаткиНоменклатуры.Остаток,
	|	1,
	|	1,
	|	1,
	|	СостоянияТорговыеПредложения.ВидЦены.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатуры.Остаток < 5
	|			ТОГДА 1
	|		КОГДА ОстаткиНоменклатуры.Остаток < 10
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СостоянияТорговыеПредложения.ПубликоватьЦены
	|				И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныИсключенияИзПубликацииТорговогоПредложения.НеУказанаЦена)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныИсключенияИзПубликацииТорговогоПредложения.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	СостоянияТорговыеПредложения КАК СостоянияТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговыеПредложения.Товары КАК ТорговыеПредложенияТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО ТорговыеПредложенияТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ПО (ТорговыеПредложенияТовары.Ссылка = СостоянияТорговыеПредложения.ТорговоеПредложение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоНоменклатуре
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = СоответствиеПоНоменклатуре.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоВидам
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры = СоответствиеПоВидам.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеПоИерархии
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.Родитель = СоответствиеПоИерархии.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период {(&Период)},
	|				ВидЦен В
	|					(ВЫБРАТЬ
	|						ТорговыеПредложения.ВидЦены КАК ВидЦены
	|					ИЗ
	|						СостоянияТорговыеПредложения КАК ТорговыеПредложения)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|			И (ТорговыеПредложенияТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика)
	|			И (ТорговыеПредложенияТовары.Ссылка.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНоменклатуры КАК ОстаткиНоменклатуры
	|		ПО (ТорговыеПредложенияТовары.Номенклатура = ОстаткиНоменклатуры.Номенклатура)
	|			И (ТорговыеПредложенияТовары.Характеристика = ОстаткиНоменклатуры.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (ТорговыеПредложенияТовары.Номенклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	(ОстаткиНоменклатуры.Остаток > 0
	|			ИЛИ НЕ СостоянияТорговыеПредложения.ПубликоватьОстатки)
	|	И ТорговыеПредложенияТовары.Номенклатура.КатегорияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)";
	
	ТекстСвойства =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ДополнительныеРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = ДополнительныеРеквизиты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО (Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления)
	|			И ДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|		ПО Товары.ВидНоменклатуры = СоответствиеРеквизитовРаботаСНоменклатурой.ОбъектСопоставления
	|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Значение
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК ФайлИзображения
	|ПОМЕСТИТЬ Изображения
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ПО Товары.Номенклатура = НоменклатураПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ИндексКартинки МЕЖДУ 42 И 50
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ФайлИзображения";
	
	
	
	// Удаление параметров запроса ТОВАРЫ.
	ТекстТовары = СтрЗаменить(ТекстТовары, "ГДЕ
	|	ТорговыеПредложенияТовары.Ссылка = &ТорговоеПредложение", "");
	ТекстТовары = СтрЗаменить(ТекстТовары, "И СостоянияСинхронизации.ТорговоеПредложение = &ТорговоеПредложение", "");
	ТекстТовары = СтрЗаменить(ТекстТовары, "&Период ", ""); // с пробелом.
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		ТекстТовары = СтрЗаменить(ТекстТовары, "Организация В
			|				(ВЫБРАТЬ
			|					ТорговыеПредложения.Организация КАК Организация
			|				ИЗ
			|					СостоянияТорговыеПредложения КАК ТорговыеПредложения)", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстТовары;
	Разделитель = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = ТекстЗапроса + Разделитель
		+ ТекстСвойства;
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПредставлениеКонтакта", НСтр("ru = 'Отдел продаж'"));
	ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос);
	
КонецПроцедуры

#Область ДиагностикаОшибокТорговыхПредложений

// Определяет возможность изменения реквизитов карточки торгового предложения, которые доступны
//    к интерактивному редактированию из печатной формы.
//
// Реквизиты, для которых доступность редактирования будет установлена в Истина будут выделены
//    цветом и пиктограммой в карточке торгового предложения. При нажатии на значение данного 
//    реквизита будет вызван метод ОбработатьНажатиеПоГиперссылкеРеквизитаКарточкиТорговогоПредложения
//    общего модуля ТорговыеПредложенияКлиентПереопределяемый.
//
// Параметры:
//  Реквизиты - Соответствие     - соответствие, определяющее доступность интерактивного изменения
//        реквизитов торгового предложения в карточке торгового предложения:
//            * Ключ - Строка - имя реквизита с учетом имени таблицы. Например:
//                    "Товары.НаименованиеНоменклатуры", "Контакты.Телефон"
//            * Значение - Булево - определяет, будет ли доступно интерактивное изменение реквизита
//
// Пример:
//    Реквизиты["Товары.НаименованиеНоменклатуры"] = Истина;
//    Реквизиты["Контакты.Телефон"] = Ложь;
//
Процедура ОпределитьОбрабатываемыеРеквизитыКарточкиТорговогоПредложения(Реквизиты) Экспорт 
	
	// ++ НЕ ГОСИС
	
	// Таблица "Товары"
	Реквизиты.Вставить("Товары.НаименованиеНоменклатуры"                 , Истина);
	Реквизиты.Вставить("Товары.Артикул"                                  , Истина);
	Реквизиты.Вставить("Товары.Цена"                                     , Истина);
	Реквизиты.Вставить("Товары.СтавкаНДС"                                , Истина);
	Реквизиты.Вставить("Товары.Наличие"                                  , Истина);
	
	// Таблица "ПрайсЛистыСлужебный"
	Реквизиты.Вставить("ПрайсЛистыСлужебный.НаименованиеОрганизации"     , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.ИННОрганизации"              , Истина);
	Реквизиты.Вставить("ПрайсЛистыСлужебный.КППОрганизации"              , Истина);
	
	// Таблица "Контакты"
	Реквизиты.Вставить("Контакты.Телефон"                                , Истина);
	Реквизиты.Вставить("Контакты.ЭлектроннаяПочта"                       , Истина);
	
	// Изображения.
	Реквизиты.Вставить("Изображения.ФайлИзображения"                     , Истина);

	// -- НЕ ГОСИС
	
КонецПроцедуры

// Вызывается для получения информации о объектах-источниках незаполненных данных при
//    проверке заполнения обязательных реквизитов.
//
// В последствии выводит ссылки для диагностики на форму и при нажатии пользователем на 
//    ошибку открывает объект и выводит сообщение, позиционируясь на реквизите для заполнения.
//
// Параметры:
//  ПроверяемыйРеквизит        -     Строка - имя колонки и таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  СтрокаТорговогоПредложения -     СтрокаТаблицыЗначений - строка таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  ДополнительныйРеквизит     -     ОпределяемыйТип.ДополнительныеРеквизитыБизнесСеть - 
//            ссылка на дополнительный реквизит. Используется только в случае, если
//            ПроверяемыйРеквизит равен "Свойства.Свойство" или "Свойства.Значение".
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров
//  СсылкаНаОбъект             -     ЛюбаяСсылка - ссылка на объект-владелец данных,
//            заполнение реквизита которого приведет к заполнению данных в таблице для
//            публикации товаров
//  ПутьКДанным                -     Строка - путь к данным объекта на открываемой форме
//            для заполнения
//  ТекстСообщения             -     Строка - текст сообщения, выводимый пользователю при
//            активации реквизита
//
// Пример:
//    Если ПроверяемыйРеквизит = "Товары.Артикул" Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
//        ПутьКДанным = "Объект.Артикул";
//        ТекстСообщения = "Не заполнен артикул номенклатуры";
//    ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеНоменклатуры" Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
//        ПутьКДанным = "Объект.Наименование";
//        ТекстСообщения = "Не заполнено наименование номенклатуры";
//    ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеХарактеристики"
//        И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Характеристика;
//        ПутьКДанным = "Объект.Наименование";
//        ТекстСообщения = "Не заполнено наименование характеристики";
//    ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеУпаковки" 
//        И СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
//        ПутьКДанным = "Объект.ЕдиницаИзмерения";
//        ТекстСообщения = "Не заполнено наименование единицы измерения";
//    ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеУпаковки" 
//        И НЕ СтрокаТорговогоПредложения.Упаковка.Пустая() Тогда
//        СсылкаНаОбъект = СтрокаТорговогоПредложения.Упаковка;
//        ПутьКДанным = "Объект.Наименование";
//        ТекстСообщения = "Не заполнена единица измерения номенклатуры";
//    КонецЕсли;
//
Процедура ОпределитьВладельцевНезаполненныхРеквизитов(ПроверяемыйРеквизит, СтрокаТорговогоПредложения, ДополнительныйРеквизит, СсылкаНаОбъект, ПутьКДанным, ТекстСообщения) Экспорт 
	
	// ++ НЕ ГОСИС
	Если ПроверяемыйРеквизит = "Товары.Артикул" Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.Артикул";
		ТекстСообщения = НСтр("ru = 'Не заполнен артикул номенклатуры';
								|en = 'Не заполнен артикул номенклатуры'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеНоменклатуры" Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
		ПутьКДанным    = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование номенклатуры';
								|en = 'Не заполнено наименование номенклатуры'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.НаименованиеХарактеристики"
		И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Характеристика;
		ПутьКДанным    = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = '""Не заполнено наименование характеристики';
								|en = '""Не заполнено наименование характеристики'");
	ИначеЕсли ПроверяемыйРеквизит = "Товары.СтавкаНДС" Тогда
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТорговогоПредложения.Номенклатура, "ВидСтавкиНДС");
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
			ПутьКДанным    = "Объект.ВидСтавкиНДС";
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ставка НДС %1 является недопустимой для публикации товаров';
											|en = 'Ставка НДС %1 является недопустимой для публикации товаров'"), СтавкаНДС);
		Иначе
			СсылкаНаОбъект = СтрокаТорговогоПредложения.Номенклатура;
			ПутьКДанным    = "Объект.ВидСтавкиНДС";
			ТекстСообщения = НСтр("ru = 'Некорректно заполнена ставка НДС';
									|en = 'Некорректно заполнена ставка НДС'");
		КонецЕсли;
		
	ИначеЕсли ПроверяемыйРеквизит = "Свойства.Свойство" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.Номенклатура;
		ДанныеРеквизита = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныйРеквизит, "НаборСвойств, Заголовок");
		ПутьКДанным     = СтрШаблон("ДополнительныйРеквизитЗначение_%1_%2", 
			СтрЗаменить(ВРег(Строка(ДанныеРеквизита.НаборСвойств.УникальныйИдентификатор())), "-", "x"),
			СтрЗаменить(ВРег(Строка(ДополнительныйРеквизит.УникальныйИдентификатор())), "-", "x"));
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Некорректно заполнен реквизит ""%1""';
										|en = 'Некорректно заполнен реквизит ""%1""'"), ДанныеРеквизита.Заголовок);
	ИначеЕсли ПроверяемыйРеквизит = "Контакты.Телефон" Тогда
		СсылкаНаОбъект  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТорговогоПредложения.ПрайсЛист, "Организация");
		ПутьКДанным     = СтрШаблон("КонтактнаяИнформацияПоле%1%2", 
			СтрЗаменить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.УникальныйИдентификатор(), "-", "x"), 1);
		ТекстСообщения = НСтр("ru = 'Не заполнен рабочий телефон организации'");
	ИначеЕсли ПроверяемыйРеквизит = "Контакты.ЭлектроннаяПочта" Тогда
		СсылкаНаОбъект  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТорговогоПредложения.ПрайсЛист, "Организация");
		ПутьКДанным     = СтрШаблон("КонтактнаяИнформацияПоле%1%2", 
			СтрЗаменить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица.УникальныйИдентификатор(), "-", "x"), 1);
		ТекстСообщения = НСтр("ru = 'Не заполнен адрес электронной почты организации'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.Наименование" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.Наименование";
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование торгового предложения';
								|en = 'Не заполнено наименование торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.ДатаНачалаДействия" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.ДатаНачалаДействия";
		ТекстСообщения = НСтр("ru = 'Не заполнена дата начала публикации торгового предложения';
								|en = 'Не заполнена дата начала публикации торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "ПрайсЛисты.ДатаОкончанияДействия" Тогда
		СсылкаНаОбъект  = СтрокаТорговогоПредложения.ПрайсЛист;
		ПутьКДанным     = "Объект.ДатаОкончанияДействия";
		ТекстСообщения = НСтр("ru = 'Не верно заполнена дата окончания публикации торгового предложения';
								|en = 'Не верно заполнена дата окончания публикации торгового предложения'");
	ИначеЕсли ПроверяемыйРеквизит = "КонтрагентыСлужебный.КонтрагентИНН" Тогда
		СсылкаНаОбъект  = ДополнительныйРеквизит;
		ПутьКДанным     = "Объект.ИНН";
		ТекстСообщения = НСтр("ru = 'Не верно задан ИНН контрагента';
								|en = 'Не верно задан ИНН контрагента'");
	ИначеЕсли ПроверяемыйРеквизит = "КонтрагентыСлужебный.КонтрагентКПП" Тогда
		СсылкаНаОбъект  = ДополнительныйРеквизит;
		ПутьКДанным     = "Объект.КПП";
		ТекстСообщения = НСтр("ru = 'Не верно задан КПП контрагента';
								|en = 'Не верно задан КПП контрагента'");
	КонецЕсли;
	// -- НЕ ГОСИС
	
КонецПроцедуры

// Вызывается для определения причин отсутствия позиции торгового предложения в публикации,
//    доступных для исправления интерактивно.
//
// Для указанных в обработчике значений при расшифровке причины будет вызван обработчик
//    ТорговыеПредложенияКлиентПереопределяемый.ОбработатьНажатиеПоГиперссылкеПричиныИсключенияИзПубликации.
//
// Параметры:
//  Причины - Массив из ОпределяемыйТип.ПричинаИсключенияИзПубликацииТорговыеПредложения - значения,
//             для которых доступна расшифровка причины, по которой данная позиция не публикуется в
//             сервисе.
//
// Пример:
//    Причины.Добавить(Перечисления._ДемоПричиныИсключенияИзПубликации.ОтсутствуетНаСкладе);
//    Причины.Добавить(Перечисления._ДемоПричиныИсключенияИзПубликации.НеУказанаЦена);
//
Процедура ОпределитьОбрабатываемыеПричиныИсключенияИзПубликации(Причины) Экспорт 
	
КонецПроцедуры

#КонецОбласти



#Область УстаревшиеПроцедурыИФункции

// Устарела. Не используется
// Заполнение пакета торговых предложений.
//
// Параметры:
//  ТорговоеПредложение	 - СправочникСсылка - ссылка на элемент справочника определяющего торговые предложения,
//                                            например СправочникСсылка.Соглашения.
//  ПакетПредложений	 - Структура - свойства публикуемого торгового предложения.
//                         см. ТорговыеПредложения.ОписаниеПакетаПредложений().
//
Процедура ЗаполнитьПакетПредложений(Знач ТорговоеПредложение, ПакетПредложений) Экспорт
	
	Реквизиты = "Организация, Валюта, ВидЦен, ДатаНачалаДействия, ДатаОкончанияДействия";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТорговоеПредложение, Реквизиты);
	ЗаполнитьЗначенияСвойств(ПакетПредложений, ЗначенияРеквизитов);
	ПакетПредложений.ЦенаВключаетНДС = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	ЕСТЬNULL(ОрганизацияТелефон.Представление, """") КАК ТелефонОрганизации,
	|	ЕСТЬNULL(ОрганизацияЭлектроннаяПочта.Представление, """") КАК ЭлектроннаяПочта
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияТелефон
	|		ПО Организации.Ссылка = ОрганизацияТелефон.Ссылка
	|			И (ОрганизацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацияЭлектроннаяПочта
	|		ПО Организации.Ссылка = ОрганизацияЭлектроннаяПочта.Ссылка
	|			И (ОрганизацияЭлектроннаяПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", ЗначенияРеквизитов.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПакетПредложений.КонтактыОрганизации.ИНН = Выборка.ИНН;
		ПакетПредложений.КонтактыОрганизации.КПП = ?(ПустаяСтрока(Выборка.КПП), "0", Выборка.КПП);
		ПакетПредложений.КонтактыОрганизации.Телефон          = Выборка.ТелефонОрганизации;
		ПакетПредложений.КонтактыОрганизации.ЭлектроннаяПочта = Выборка.ЭлектроннаяПочта;
	КонецЕсли;
	
	ПакетПредложений.КонтактыОрганизации.Сайт        = "";
	
	ПакетПредложений.КонтактноеЛицо.ФИО              = "";
	ПакетПредложений.КонтактноеЛицо.Телефон          = Выборка.ТелефонОрганизации;
	ПакетПредложений.КонтактноеЛицо.ЭлектроннаяПочта = Выборка.ЭлектроннаяПочта;
	
	// Заполнение контрагентов.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговыеПредложения.Контрагент КАК Контрагент,
	|	ТорговыеПредложения.Контрагент.ИНН КАК ИНН,
	|	ТорговыеПредложения.Контрагент.КПП КАК КПП
	|ИЗ
	|	Справочник.ТорговыеПредложения.Контрагенты КАК ТорговыеПредложения
	|ГДЕ
	|	ТорговыеПредложения.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТорговоеПредложение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ИНН) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПакетПредложений.СписокКонтрагентов.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ПолучитьТекстЗапросаПубликуемыхТоваров(Запрос.Текст,Истина, Истина);
	Запрос.УстановитьПараметр("ТорговоеПредложение", ТорговоеПредложение);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());

	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаТовары    = ПакетЗапроса[ПакетЗапроса.Количество() - 4].Выбрать(); // Товары.
	АтрибутыТоваров  = ПакетЗапроса[ПакетЗапроса.Количество() - 2].Выгрузить(); // Свойства товаров.
	ШтрихкодыТоваров = ПакетЗапроса[ПакетЗапроса.Количество() - 1].Выгрузить(); // Штрих-коды товаров.
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		НоваяСтрокаПакета = ПакетПредложений.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПакета, ВыборкаТовары);
		
		// Формирование атрибутов.
		СтрокиАтрибутов = АтрибутыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика));
		ТаблицаАтрибутов = ПакетПредложений.Атрибуты.Скопировать();
		ТаблицаАтрибутов.Очистить();
		Для Каждого СтрокаАтрибутов Из СтрокиАтрибутов Цикл
			НоваяСтрокаАтрибутов = ТаблицаАтрибутов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАтрибутов, СтрокаАтрибутов);
			Если ТипЗнч(НоваяСтрокаАтрибутов.Значение) = Тип("Число") Тогда
				НоваяСтрокаАтрибутов.Значение = XMLСтрока(НоваяСтрокаАтрибутов.Значение); // Конвертация в строку.
			Иначе
				НоваяСтрокаАтрибутов.Значение = Строка(НоваяСтрокаАтрибутов.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрокаПакета.Атрибуты = ТаблицаАтрибутов;
		// Конец Формирование атрибутов.
		
		// Формирование штрихкодов.
		СтрокиШтрихкодов = ШтрихкодыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", 
			ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика, ВыборкаТовары.ЕдиницаИзмерения));
		ТаблицаШтрихкодов = ПакетПредложений.Штрихкоды.Скопировать();
		ТаблицаШтрихкодов.Очистить();
		Для Каждого СтрокаШтрихкода Из СтрокиШтрихкодов Цикл
			НоваяСтрокаШтрихкодов = ТаблицаШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкодов, СтрокаШтрихкода);
		КонецЦикла;
		НоваяСтрокаПакета.Штрихкоды = ТаблицаШтрихкодов;
		// Конец Формирование штрихкодов.
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Дополнение в запрос источников по дополнительным реквизитам номенклатуры.
//
// Параметры:
//   Запрос - Запрос - основной запрос сбора данных.
//
Процедура ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос)
	
	БлокРеквизитовШаблон =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	""&Свойство"",
	|	&Значение
	|ИЗ
	|	Товары КАК Товары";
	
	ДоступныеДляПубликацииРеквизиты = Новый Соответствие;
	ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ДоступныеДляПубликацииРеквизиты);
	
	МассивПодзапросов = Новый Массив;
	СчетчикРеквизитов = 0;
	Для каждого СвойстваРеквизита Из ДоступныеДляПубликацииРеквизиты Цикл
		
		ИндексСтрокой = XMLСтрока(СчетчикРеквизитов);
		
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		ТекстПодзапроса = БлокРеквизитовШаблон;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Значение", СвойстваРеквизита.Значение.ПутьКДанным);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Свойство", "&Свойство" + ИндексСтрокой);
		
		Запрос.УстановитьПараметр("Свойство" + ИндексСтрокой, СвойстваРеквизита.Ключ);
		
		Если СвойстваРеквизита.Значение.Свойство("ПустоеЗначение") Тогда
			ТекстПодзапроса = ТекстПодзапроса + Символы.ПС
				+ "ГДЕ НЕ "+ СвойстваРеквизита.Значение.ПутьКДанным + " = &ПустоеЗначение" + ИндексСтрокой;
			Запрос.УстановитьПараметр("ПустоеЗначение" + ИндексСтрокой,
				СвойстваРеквизита.Значение.ПустоеЗначение);
		КонецЕсли;
		
		МассивПодзапросов.Добавить(ТекстПодзапроса);
		
	КонецЦикла;
	
	БлокРеквизитовПодстановка = СтрСоединить(МассивПодзапросов, Символы.ПС + Символы.ПС
		+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	// Если реквизиты не найдены, то возврат.
	Если ПустаяСтрока(БлокРеквизитовПодстановка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(Запрос.Текст, БлокРеквизитовШаблон) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка компоновки запроса получения данных номенклатуры.'");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, БлокРеквизитовШаблон, БлокРеквизитовПодстановка);
	
КонецПроцедуры

#КонецОбласти

