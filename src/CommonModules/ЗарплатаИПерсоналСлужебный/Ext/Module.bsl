///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Персонал".
// 
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныеПроцедурыИФункции

#Область Экспортные

Функция РассчитатьЗначениеПараметра(СтруктураПараметров, ПараметрРасчета, ТекстОшибки = "") Экспорт
	
	Запрос = Новый Запрос(ПараметрРасчета.Запрос);
	
	ТаблицаЗначенийПараметровРасчетов = ТаблицуФормыВТаблицуОтборов(ПараметрРасчета.ПараметрыЗапроса);
	Для каждого ПараметрЗапроса Из ТаблицаЗначенийПараметровРасчетов Цикл
		
		Если ЗначениеЗаполнено(ПараметрЗапроса.Значение) Тогда
			
			Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), ПараметрЗапроса.Значение);
			
		Иначе
			
			Если СтруктураПараметров.Свойство(СтрЗаменить(ПараметрЗапроса.Имя, ".", "")) Тогда
				
				СтрокаПериод = ПараметрРасчета.ПериодыОтбораДанных.Найти(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), "ИмяДатаГраницы");
				Если СтрокаПериод <> Неопределено  Тогда
					
					Если СтрокаПериод.ПериодСдвиг <> 0 Тогда
						НовыйПериод = ДобавитьИнтервал(СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")], СтрокаПериод.ПериодСмещения, СтрокаПериод.ПериодСдвиг);
						Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), НовыйПериод);
					Иначе
						Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")]);
					КонецЕсли;
					
				Иначе
					
					Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), СтруктураПараметров[СтрЗаменить(ПараметрЗапроса.Имя, ".", "")]);
					
				КонецЕсли; 
				
			ИначеЕсли ЗначениеЗаполнено(ТипЗнч(ПараметрЗапроса.Значение)) Тогда
				
				Запрос.УстановитьПараметр(СтрЗаменить(ПараметрЗапроса.Имя, ".", ""), ПараметрЗапроса.Значение);
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = 'Не задано значение параметра запроса '") + ПараметрЗапроса.Имя + ТекстОшибки;
				Сообщение.Сообщить();
				
				Возврат 0;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		
		Возврат 0;
		
	Иначе
		
		Возврат РезультатЗапроса[0][0];
		
	КонецЕсли;
	
КонецФункции

// Получает счет затрат по умолчанию вида начисления.
//
// Параметры:
//  СтруктураДанных - Структура - Содержащая реквизиты объекта, которые требуется
//                 получить и заполненная реквизитами, которые требуются для получения.
//       * ВидНачисленияУдержания - СправочникСсылка.ВидыНачисленийИУдержаний - Обязательный. Вид начисления или
//           удержания, для которого получаем счет затрат
//       * СтруктурнаяЕдиница - СправочникСсылка.структурныеЕдиницы - Обязательный. Подразделение, в рамках которого
//           получаем счет затрат. Используется только в начислениях.
//
Процедура ПолучитьСчетЗатратВидаНачисления(СтруктураДанных) Экспорт
	
	ВидНачисленияУдержания = СтруктураДанных.ВидНачисленияУдержания;
	СчетЗатрат = ВидНачисленияУдержания.СчетЗатрат;
	
	Если ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Налог Тогда
		
		СчетЗатрат = ВидНачисленияУдержания.ВидНалога.СчетУчета;
		Если СчетЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
			
			СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
			
		КонецЕсли;
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Начисление Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктурнаяЕдиница) Тогда
			
			ТипСчета = СчетЗатрат.ТипСчета;
			Если СтруктураДанных.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
				И НЕ (ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
					ИЛИ ТипСчета = Перечисления.ТипыСчетов.Расходы
					ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы
					ИЛИ ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
					ИЛИ ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы)
				Тогда
				
				СчетЗатрат = ПланыСчетов.Управленческий.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
		
		СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеДоходы;
		
	КонецЕсли;
	
	СтруктураДанных.СчетЗатрат = СчетЗатрат;
	СтруктураДанных.ТипСчета = СчетЗатрат.ТипСчета;
	
КонецПроцедуры // ПолучитьСчетЗатратВидаНачисления()

#КонецОбласти

#Область Локальные

Функция ТаблицуФормыВТаблицуОтборов(ТаблицаФормыПараметровЗапроса)
	
	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("НомерСтроки");
	РезультирующаяТаблица.Колонки.Добавить("Имя");
	РезультирующаяТаблица.Колонки.Добавить("Представление");
	РезультирующаяТаблица.Колонки.Добавить("ВидСравнения");
	РезультирующаяТаблица.Колонки.Добавить("Значение");
	
	КопияТаблицыФормы = ТаблицаФормыПараметровЗапроса.Выгрузить(, "Имя, Представление, ВидСравнения");
	КопияТаблицыФормы.Свернуть("Имя, Представление, ВидСравнения");
	
	СтруктураОтбора = Новый Структура("Имя, Представление, ВидСравнения");
	Для каждого СтрокаОписанияОтбора Из КопияТаблицыФормы Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОписанияОтбора);
		НайденныеСтроки = ТаблицаФормыПараметровЗапроса.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			ПравоеЗначение = НайденныеСтроки[0].Значение;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			ПравоеЗначение = Новый СписокЗначений;
			Для каждого СтрокаСоЗначениемОтбора Из НайденныеСтроки Цикл
				
				ПравоеЗначение.Добавить(СтрокаСоЗначениемОтбора.Значение);
				
			КонецЦикла;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = РезультирующаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОписанияОтбора, "Имя, Представление, ВидСравнения");
		
		НоваяСтрока.Значение = ПравоеЗначение;
		
	КонецЦикла;
	
	Возврат РезультирующаяТаблица;
	
КонецФункции

// Функция добавляет интервал к дате
//
// Параметры:
//     ДатаВПериоде (Дата)                            - произвольная дата
//     Периодичность (Перечисления.Периодичность)     - периодичность планирования по сценарию.
//     Смещение (число)                               - определяет направление и количество периодов, в котором
//     сдвигается дата
//
// Возвращаемое значение:
//     Дата, отстоящая от исходной на заданное количество периодов 
//
Функция ДобавитьИнтервал(ДатаПериода, Периодичность, Смещение)
	
	Если Смещение = 0 Тогда
		НоваяДатаПериода = ДатаПериода;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НоваяДатаПериода = НачалоДня(ДатаПериода + Смещение * 24 * 3600);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НоваяДатаПериода = НачалоНедели(ДатаПериода + Смещение * 7 * 24 * 3600);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение * 3);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НоваяДатаПериода = ДобавитьМесяц(ДатаПериода, Смещение * 12);
		
	Иначе
		НоваяДатаПериода=НачалоДня(ДатаПериода) + Смещение * 24 * 3600;
		
	КонецЕсли;
	
	Возврат НоваяДатаПериода;
	
КонецФункции // ДобавитьИнтервал()

#КонецОбласти

#КонецОбласти