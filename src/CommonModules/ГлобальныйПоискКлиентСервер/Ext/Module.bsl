
#Область СлужебныйПрограммныйИнтерфейс

Функция ПредставлениеРезультата(ОсновнаяСтрока, Постфикс) Экспорт
	
	Возврат Новый ФорматированнаяСтрока(
		ОсновнаяСтрока,
		" ",
		ПодсказкаРезультата(СтрШаблон("(%1)", Постфикс)));
	
КонецФункции

Функция ОписаниеРезультата(ОсновнаяСтрока, ВторостепеннаяСтрока) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ОсновнаяСтрока);
	Если ТипЗнч(ВторостепеннаяСтрока) = Тип("ФорматированнаяСтрока") Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(ВторостепеннаяСтрока);
	ИначеЕсли ТипЗнч(ВторостепеннаяСтрока) = Тип("Строка") И ЗначениеЗаполнено(ВторостепеннаяСтрока) Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(ПодсказкаРезультата(ВторостепеннаяСтрока));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ПодсказкаРезультата(Строка) Экспорт
	
#Если Сервер Или ВнешнееСоединение Тогда
	ЦветТекстаПодсказки = Метаданные.ЭлементыСтиля.ЦветВторостепеннаяСтрокаГлобальногоПоиска.Значение;
#Иначе
	ЦветТекстаПодсказки = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветВторостепеннаяСтрокаГлобальногоПоиска");
#КонецЕсли
	
	Возврат Новый ФорматированнаяСтрока(Строка,, ЦветТекстаПодсказки);
	
КонецФункции

Функция НайтиПодстрокуИВыделитьОформлением(Описание, СтрокаПоиска) Экспорт
	
	ОписаниеНРег = НРег(Описание);
	СтрокаПоискаНРег = НРег(СтрокаПоиска);
	
	ДопустимоеКоличествоОтклоненийСимволов = 2;
	
	ИнтервалыСтрок = Новый Массив;
	
	Если СтрНайти(ОписаниеНРег, СтрокаПоискаНРег) <> 0 Тогда
		ПодстрокиПоиска = Новый Массив;
		ПодстрокиПоиска.Добавить(СтрокаПоискаНРег);
	Иначе
		ПодстрокиПоиска = СтрРазделить(СтрокаПоискаНРег, " ");
	КонецЕсли;
	
	ПредыдущееВхождение = 0;
	Для каждого Подстрока Из ПодстрокиПоиска Цикл
		
		ПодбираемыеСтроки = Новый Массив;
		ПодбираемыеСтроки.Добавить(Подстрока);
		
		Для НомерСимвола = 1 По ДопустимоеКоличествоОтклоненийСимволов Цикл
			ПодбираемыеСтроки.Добавить(Прав(Подстрока, СтрДлина(Подстрока) - НомерСимвола));
			ПодбираемыеСтроки.Добавить(Лев(Подстрока, СтрДлина(Подстрока) - НомерСимвола));
		КонецЦикла;
		
		СтрокаВхождение = "";
		НачалоВхождения = 0;
		
		Для каждого ПодбираемаяСтрока Из ПодбираемыеСтроки Цикл
			НачалоВхождения = СтрНайти(ОписаниеНРег, ПодбираемаяСтрока);
			Если НачалоВхождения <> 0 Тогда
				СтрокаВхождение = ПодбираемаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НачалоВхождения <> 0 Тогда
			Если ПредыдущееВхождение + 1 <> НачалоВхождения Тогда
				ИнтервалыСтрок.Добавить(
					Новый Структура("От,До,ЭтоВхождение",
						ПредыдущееВхождение + 1,
						НачалоВхождения - 1,
						Ложь));
			КонецЕсли;
			ИнтервалыСтрок.Добавить(
				Новый Структура("От,До,ЭтоВхождение",
					НачалоВхождения,
					НачалоВхождения + СтрДлина(СтрокаВхождение) - 1,
					Истина));
			ПредыдущееВхождение = НачалоВхождения + СтрДлина(СтрокаВхождение) - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущееВхождение <> СтрДлина(ОписаниеНРег) Тогда
		ИнтервалыСтрок.Добавить(
			Новый Структура("От,До,ЭтоВхождение",
				ПредыдущееВхождение + 1,
				СтрДлина(ОписаниеНРег),
				Ложь));
	КонецЕсли;
	
#Если Сервер Или ВнешнееСоединение Тогда
	ЦветТекстаПодсказки = Метаданные.ЭлементыСтиля.ЦветВторостепеннаяСтрокаГлобальногоПоиска.Значение;
	ЦветТекстаВыделения = Метаданные.ЭлементыСтиля.ЦветСовпавшейПодстрокиГлобальногоПоиска.Значение;
#Иначе
	ЦветТекстаПодсказки = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветВторостепеннаяСтрокаГлобальногоПоиска");
	ЦветТекстаВыделения = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ЦветСовпавшейПодстрокиГлобальногоПоиска");
#КонецЕсли
	
	НаборСтрок = Новый Массив;
	Для каждого Интервал Из ИнтервалыСтрок Цикл
		
		Если Интервал.ЭтоВхождение Тогда
			Цвет = ЦветТекстаВыделения;
		Иначе
			Цвет = ЦветТекстаПодсказки;
		КонецЕсли;
		
		НаборСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				Сред(Описание, Интервал.От, Интервал.До - Интервал.От + 1),,
				Цвет));
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(НаборСтрок);
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка,
		ДопустимыеСимволы = Неопределено, РазрешенаЛатиница = Ложь, РазрешенаКириллица = Ложь, РазрешеныЦифры = Ложь) Экспорт
	
	Для каждого Символ Из РазделитьСтрокуНаСимволы(Строка) Цикл
		
		Если ДопустимыеСимволы <> Неопределено И ДопустимыеСимволы.Найти(Символ) <> Неопределено Тогда
			ЭтоДопустимыйСимвол = Истина;
		ИначеЕсли РазрешенаЛатиница И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Строка) Тогда
			ЭтоДопустимыйСимвол = Истина;
		ИначеЕсли РазрешенаКириллица И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(Строка) Тогда
			ЭтоДопустимыйСимвол = Истина;
		ИначеЕсли РазрешеныЦифры И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка) Тогда
			ЭтоДопустимыйСимвол = Истина;
		Иначе
			ЭтоДопустимыйСимвол = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СтрокаИзСтруктуры(СтруктураПараметров) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
		Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		МассивПодстрок.Добавить(Строка(КлючЗначение.Ключ) + ": " + КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивПодстрок, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазделитьСтрокуНаСимволы(Строка)
	
	Результат = Новый Массив;
	Для Итератор = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(Сред(Строка, Итератор, 1));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти
