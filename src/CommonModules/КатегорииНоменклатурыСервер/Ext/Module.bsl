
#Область ПрограммныйИнтерфейс

// Возвращает дерево используемых категорий.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево используемых категорий.
//
Функция ДеревоКатегорий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК Значение,
	|	КатегорииНоменклатуры.Наименование КАК Представление
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииНоменклатуры.ЭтоГруппа ИЕРАРХИЯ, КатегорииНоменклатуры.РеквизитДопУпорядочивания, КатегорииНоменклатуры.Наименование";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Дерево.Строки.Количество() > 1 Тогда
		
		СтрокаНетКатегории = Дерево.Строки.Вставить(0);
		СтрокаНетКатегории.Значение = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетКатегории.Представление = НСтр("ru='<Все категории>'");
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Возвращает дерево используемых категорий с учетом использования характеристик.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево используемых категорий.
//
Функция ДеревоКатегорийХарактеристики() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК Значение,
	|	КатегорииНоменклатуры.Наименование КАК Представление,
	|	ЕСТЬNULL(КатегорииНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ИспользоватьХарактеристики,
	|	КатегорииНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА НЕ КатегорииНоменклатуры.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА КатегорииНоменклатуры.ПометкаУдаления
	|						ТОГДА 5
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КатегорииНоменклатуры.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	КатегорииНоменклатуры.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
	|	КатегорииНоменклатуры.РеквизитДопУпорядочивания,
	|	КатегорииНоменклатуры.Наименование";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Дерево.Строки.Количество() > 1 Тогда
		
		СтрокаНетКатегории = Дерево.Строки.Вставить(0);
		СтрокаНетКатегории.Значение = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаНетКатегории.Представление = НСтр("ru='<Все категории>'");
		СтрокаНетКатегории.Картинка = - 1;
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Создает на форме список используемых свойств выбранной категории для выполнения отборов по списку номенклатуры.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода списка свойств.
//  ВыбраннаяКатегория		 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры, являющаяся
//                             владельцем свойств.
//  ИмяЭлементаДляРазмещения - Строка - Имя группы на форме, в которой будут размещены свойства номенклатуры.
//  СвойстваХарактеристики	 - Булево - Определяет, нужно ли показывать свойства характеристик выбранной номенклатуры.
//
Процедура ПоказатьСвойстваКатегории(Форма, Список, ВыбраннаяКатегория, ИмяЭлементаДляРазмещения, СвойстваХарактеристики) Экспорт
	
	Элементы = Форма.Элементы;
	
	УдалитьСтарыеРеквизитыИЭлементы(Форма, Список, СвойстваХарактеристики);
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваХарактеристики Тогда
		НаборСвойств = ВыбраннаяКатегория.НаборСвойствХарактеристики;
	Иначе
		НаборСвойств = ВыбраннаяКатегория.НаборСвойств;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК Порядок,
	|	ЗаполненностьСвойствКатегорий.Свойство КАК Свойство,
	|	ЗаполненностьСвойствКатегорий.Значение КАК Значение,
	|	ЕСТЬNULL(ЗаполненностьСвойствКатегорий.ТипЗначения.ПолноеИмя, """") КАК ТипЗначенияПолноеИмя
	|ПОМЕСТИТЬ СвойстваИЗначения
	|ИЗ
	|	РегистрСведений.ЗаполненностьСвойствКатегорий КАК ЗаполненностьСвойствКатегорий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ПО ЗаполненностьСвойствКатегорий.Свойство = НаборыДополнительныхРеквизитов.Свойство
	|ГДЕ
	|	ЗаполненностьСвойствКатегорий.НаборСвойств = &НаборСвойств
	|	И НаборыДополнительныхРеквизитов.Ссылка = &НаборСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваИЗначения.Порядок КАК Порядок,
	|	СвойстваИЗначения.Свойство КАК Свойство,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СвойстваИЗначения.Значение) КАК Количество
	|ИЗ
	|	СвойстваИЗначения КАК СвойстваИЗначения
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваИЗначения.Порядок,
	|	СвойстваИЗначения.Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Выборка.Свойство.ТипЗначения, Тип("Число")) Тогда
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики,
				"от");
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики,
				"до");
			
		Иначе
			
			НовыйОписаниеСвойства(
				Форма.СвойстваОписаниеДополнительныхРеквизитов,
				НаборСвойств,
				Выборка.Свойство,
				СвойстваХарактеристики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для каждого ОписаниеСвойства Из Форма.СвойстваОписаниеДополнительныхРеквизитов Цикл
		
		Если ОписаниеСвойства.СвойствоХарактеристики <> СвойстваХарактеристики Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначения = ?(ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Число")),
						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024)),
						ОписаниеСвойства.ТипЗначения);
		
		Реквизит = Новый РеквизитФормы(
			ОписаниеСвойства.ИмяРеквизитаЗначение,
			ТипЗначения,,
			ОписаниеСвойства.Наименование);
			
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементРодительРазмещенияСвойств = Элементы[ИмяЭлементаДляРазмещения];
	Для каждого ОписаниеСвойства Из Форма.СвойстваОписаниеДополнительныхРеквизитов Цикл
		
		Если ОписаниеСвойства.СвойствоХарактеристики <> СвойстваХарактеристики Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			
			ЭлементЛеваяГраница = ОписаниеСвойства;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИмяРеквизитаЗначение", СтрЗаменить(ОписаниеСвойства.ИмяРеквизитаЗначение, "_от", "_до"));
			Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() <> 0 Тогда
				ЭлементПраваяГраница = Строки[0];
			КонецЕсли;
			
			СоздаваемыеЭлементы = Новый Массив;
			СоздаваемыеЭлементы.Добавить(ЭлементЛеваяГраница);
			СоздаваемыеЭлементы.Добавить(ЭлементПраваяГраница);
			НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, ЭлементРодительРазмещенияСвойств);
			
		ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			
			Продолжить;
			
		Иначе
			
			ЗначенияВыбора = Неопределено;
			
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
				ИЛИ ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
				ПараметрыОтбора = Новый Структура("Свойство", ОписаниеСвойства.Свойство);
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СвойстваИЗначения.Свойство КАК Свойство,
				|	СвойстваИЗначения.Значение КАК Значение,
				|	СвойстваИЗначения.ТипЗначенияПолноеИмя КАК ТипЗначенияПолноеИмя
				|ИЗ
				|	СвойстваИЗначения КАК СвойстваИЗначения
				|ГДЕ
				|	СвойстваИЗначения.Свойство = &Свойство
				|	И СвойстваИЗначения.ТипЗначенияПолноеИмя <> """"";
				Запрос.УстановитьПараметр("Свойство", ОписаниеСвойства.Свойство);
				ВыборкаЗначенийВыбора = Запрос.Выполнить().Выбрать();
				
				ЗначенияВыбора = Новый Массив;
				Пока ВыборкаЗначенийВыбора.Следующий() Цикл
					ЗначенияВыбора.Добавить(
						ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВыборкаЗначенийВыбора.ТипЗначенияПолноеИмя)
							.ПолучитьСсылку(ВыборкаЗначенийВыбора.Значение));
				КонецЦикла;
			КонецЕсли;
			
			СоздаваемыеЭлементы = Новый Массив;
			СоздаваемыеЭлементы.Добавить(ОписаниеСвойства);
			
			НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, ЭлементРодительРазмещенияСвойств, ЗначенияВыбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет свойства номенклатуры по выбранной категории.
// Заполняемые свойства: тип номенклатуры, единица измерения, признак использования характеристик.
//
// Параметры:
//  Номенклатура - ДанныеФормыСтруктура - Объект номенклатуры.
//
Процедура ЗаполнитьСвойстваНоменклатурыПоКатегории(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры) Тогда
		Категория = Номенклатура.КатегорияНоменклатуры;
	Иначе
		Категория = ЗначениеЗаполненияКатегории();
		Номенклатура.КатегорияНоменклатуры = Категория;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Категория.ТипНоменклатурыПоУмолчанию)Тогда
			Номенклатура.ТипНоменклатуры = Категория.ТипНоменклатурыПоУмолчанию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Категория.ЕдиницаИзмерения) Тогда
			Номенклатура.ЕдиницаИзмерения = Категория.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.Ссылка) И (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
		ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа) Тогда
		
		ИспользоватьХарактеристики = Категория.ИспользоватьХарактеристики;
		Если НЕ ИспользоватьХарактеристики Тогда
			ИспользоватьХарактеристики = Справочники.Номенклатура.ЕстьХарактеристики(Номенклатура.Ссылка);
		КонецЕсли;
		
		Номенклатура.ИспользоватьХарактеристики = ИспользоватьХарактеристики;
		Номенклатура.ПроверятьЗаполнениеХарактеристики = Категория.ПроверятьЗаполнениеХарактеристики;
		
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ЗаполнитьЗначенияСвойств(Номенклатура, Категория,
			"СтранаПроисхождения, ПроизводительИмпортерАлкогольнойПродукции, Производитель, ТНВЭДГИСМ,КиЗГИСМGTIN, КиЗГИСМРазмер, КиЗГИСМСпособВыпускаВОборот, КиЗГИСМВид, ВидАлкогольнойПродукции, ВидМаркировки," + 
			"ТабачнаяПродукция, ОбувнаяПродукция, ПодконтрольнаяПродукцияВЕТИС, ИспользоватьПроизводителяВЕТИСПартии, ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии, " +
			"ИспользоватьИдентификаторПартииВЕТИСПартии, ИспользоватьДатуПроизводстваПартии, ИспользоватьСрокГодностиПартии, " +
			"АвтоматическиГенерироватьПартии, ИспользоватьНомерПартии, ИспользоватьСерииНоменклатуры, ИспользоватьСрокГодностиСерии, ИспользоватьДатуПроизводстваСерии, " +
			"ТочностьУказанияСрокаГодностиСерии, ИспользоватьУникальныеСерии, ПолитикаУчетаСерий");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ВидМаркировки) Тогда Номенклатура.ВидМаркировки = Перечисления.ВидыМаркировки.НеМаркируется КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		Номенклатура.Весовой = Категория.Весовой;
		Номенклатура.МетодОценки = Категория.МетодОценки;
		Номенклатура.НаправлениеДеятельности = Категория.НаправлениеДеятельности;
		Номенклатура.Склад = Категория.Склад;
		Номенклатура.Ячейка = Категория.Ячейка;
		
		Если ЗначениеЗаполнено(Категория.СпособПополнения) Тогда
			Номенклатура.СпособПополнения = Категория.СпособПополнения;
		КонецЕсли;
		
		Номенклатура.ЦеноваяГруппа = Категория.ЦеноваяГруппа;
		Номенклатура.СрокИсполненияЗаказа = Категория.СрокИсполненияЗаказа;
		Номенклатура.ВидСтавкиНДС = Категория.ВидСтавкиНДС;
		
		Номенклатура.ПодакцизныйТовар = Категория.ПодакцизныйТовар;
		
		НеобходимоСменитьСчетаУчета = Ложь;
		
		Если Номенклатура.ТипНоменклатуры = Категория.ТипНоменклатурыПоУмолчанию Тогда
			
			Если (ЗначениеЗаполнено(Категория.СчетУчетаЗапасов) И НЕ Номенклатура.СчетУчетаЗапасов = Категория.СчетУчетаЗапасов)
				Или (ЗначениеЗаполнено(Категория.СчетУчетаЗатрат) И НЕ Номенклатура.СчетУчетаЗатрат = Категория.СчетУчетаЗатрат)
				Или (ЗначениеЗаполнено(Категория.СчетУчетаДоходов) И НЕ Номенклатура.СчетУчетаДоходов = Категория.СчетУчетаДоходов) Тогда
				НеобходимоСменитьСчетаУчета = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Номенклатура.Ссылка) И НеобходимоСменитьСчетаУчета 
				И ОтказИзменитьСчетУчета(Номенклатура.Ссылка) Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В базе есть движения по данной номенклатуре: счета учета не изменены.'"));
				Возврат
			КонецЕсли;
			
			Номенклатура.СчетУчетаЗапасов = ?(ЗначениеЗаполнено(Категория.СчетУчетаЗапасов), Категория.СчетУчетаЗапасов, Номенклатура.СчетУчетаЗапасов);
			Номенклатура.СчетУчетаЗатрат = ?(ЗначениеЗаполнено(Категория.СчетУчетаЗатрат), Категория.СчетУчетаЗатрат, Номенклатура.СчетУчетаЗатрат);
			Номенклатура.СчетУчетаДоходов = ?(ЗначениеЗаполнено(Категория.СчетУчетаДоходов), Категория.СчетУчетаДоходов, Номенклатура.СчетУчетаДоходов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя поля отбора для установления отбора списка номенклатуры по значению свойства.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма объекта-владельца, в котором происходит отбор по свойству номенклатуры.
//  ЭлементИмя				 - Строка - Имя элемента на форме, в котором был произведен выбор значения номенклатуры для отбора.
//  КатегорияНоменклатуры	 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры.
// 
// Возвращаемое значение:
//  Строка - Имя поля отбора.
//
Функция ПолеОтбораДополнительногоРеквизита(Форма, ЭлементИмя, КатегорияНоменклатуры) Экспорт
	
	ОписаниеСвойства = ОписаниеСвойства(Форма, ЭлементИмя);
	ПолеОтбора = ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры);
	Возврат ПолеОтбора;
	
КонецФункции

// Устанавливает отбор списка номенклатуры по выбранной категории.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - Форма объекта-владельца, в котором требуется установить отбор номенклатуры по категории.
//  Список				 - ДинамическийСписок - Список на форме.
//  ВыбраннаяКатегория	 - СправочникСсылка.КатегорииНоменклатуры - Категория, по которой требуется установить отбор.
//
Процедура УстановитьОтборПоКатегории(Форма, Список, ВыбраннаяКатегория) Экспорт
	
	УдалитьОтборыСвойствПредыдущейКатегории(Форма, Список);
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,,
			"ОтборПоКатегории");
		Возврат;
		
	КонецЕсли;
	
	ГруппаОтборПоКатегории = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоКатегории",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияНоменклатуры",
		ВидСравненияКомпоновкиДанных.Равно,
		ВыбраннаяКатегория,
		"ОтборПоКатегории",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКатегории,
		"КатегорияНоменклатуры",
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВыбраннаяКатегория,
		"ОтборПоКатегорииВИерархии",
		ЗначениеЗаполнено(ВыбраннаяКатегория));
	
КонецПроцедуры

// Устанавливает отбор списка номенклатуры по значению свойства номенклатуры или характеристики.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма объекта-владельца, в котором происходит отбор по свойству.
//  Список					 - ДинамическийСписок - Список на форме.
//  ЭлементИмя				 - Строка - Имя элемента на форме, в котором был произведен выбор значения номенклатуры для отбора.
//  КатегорияНоменклатуры	 - СправочникСсылка.КатегорииНоменклатуры - Выбранная категория номенклатуры.
//
Процедура УстановитьОтборПоДополнительномуРеквизиту(Форма, Список, ЭлементИмя, КатегорияНоменклатуры) Экспорт
	
	ОписаниеСвойства = ОписаниеСвойства(Форма, ЭлементИмя);
	ПолеОтбора = ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры);
	
	Значение = Форма[ЭлементИмя];
	ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Число")) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			УдалитьОтборВСписке(Список, ЭлементИмя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Попытка
				Значение = Число(Значение);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Ожидается ввод числа!'"),,,
					Форма.Элементы[ЭлементИмя].ПутьКДанным);
			КонецПопытки;
			
			Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ЭлементИмя) Тогда
				ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ЭлементИмя) Тогда
				ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			КонецЕсли;
			
			УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Булево")) Тогда
		
		Если Значение Тогда
			УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
		Иначе
			УдалитьОтборВСписке(Список, ЭлементИмя);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Значение) Тогда
			УстановитьОтборВСписке(Список, ПолеОтбора, ВидСравненияЗначения, Значение, ЭлементИмя);
		Иначе
			УдалитьОтборВСписке(Список, ЭлементИмя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияСвойствПередЗаписью(Объект, Отказ) Экспорт
	
	// Сохраним предыдущие значения для анализа в ПриЗаписи()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектДополнительныеРеквизиты.Свойство,
	|	ОбъектДополнительныеРеквизиты.Значение
	|ИЗ
	|	" + Объект.Ссылка.Метаданные().ПолноеИмя() + ".ДополнительныеРеквизиты КАК ОбъектДополнительныеРеквизиты
	|ГДЕ
	|	ОбъектДополнительныеРеквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.ПометкаУдаления
	|	%ПоляОбъекта%
	|ИЗ
	|	" + Объект.Ссылка.Метаданные().ПолноеИмя() + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка";
	
	ЭтоНоменклатура = (ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура"));
	Если ЭтоНоменклатура Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОбъекта%", ",Объект.КатегорияНоменклатуры");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОбъекта%", "");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	СвойстваОбъекта = Результат[0].Выгрузить();
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПометкаУдаления = Выборка.ПометкаУдаления;
		
		Если ЭтоНоменклатура Тогда
			КатегорияНоменклатуры = Выборка.КатегорияНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПометкаУдаления = Неопределено Тогда
		ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("СвойстваОбъекта", СвойстваОбъекта);
	Объект.ДополнительныеСвойства.Вставить("ПометкаУдаления", ПометкаУдаления);
	Если ЭтоНоменклатура Тогда
		Объект.ДополнительныеСвойства.Вставить("КатегорияНоменклатуры", КатегорияНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияСвойствПриЗаписи(Объект, КатегорияНоменклатуры, Отказ) Экспорт
	
	ЭтоНоменклатура = (ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура"));
	
	Если Объект.ДополнительныеСвойства.Свойство("ПометкаУдаления") Тогда
		ОбъектПометкаУдаления = Объект.ДополнительныеСвойства.ПометкаУдаления;
	Иначе
		ОбъектПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		Если Объект.ДополнительныеСвойства.Свойство("КатегорияНоменклатуры") Тогда
			ОбъектКатегорияНоменклатуры = Объект.ДополнительныеСвойства.КатегорияНоменклатуры;
			Если ОбъектКатегорияНоменклатуры <> Объект.КатегорияНоменклатуры Тогда
				ЗаписатьЗначениеЗаполненияКатегории(Объект.КатегорияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		НаборСвойств = КатегорияНоменклатуры.НаборСвойств;
	Иначе
		НаборСвойств = КатегорияНоменклатуры.НаборСвойствХарактеристики;
	КонецЕсли;
	
	// При обмене данными НаборСвойств может оказаться пустым, поэтому прекращаем запись
	// данные регистра свой 
	Если НЕ ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСвойства = Новый ТаблицаЗначений;
	ДобавляемыеСвойства = Новый ТаблицаЗначений;
	
	УдаляемыеСвойства.Колонки.Добавить("Свойство");
	УдаляемыеСвойства.Колонки.Добавить("Значение");
	
	ДобавляемыеСвойства.Колонки.Добавить("Свойство");
	ДобавляемыеСвойства.Колонки.Добавить("Значение");
	
	Если Объект.ПометкаУдаления И Объект.ПометкаУдаления <> ОбъектПометкаУдаления Тогда 
		
		// Объект стал помечен на удаление
		Для каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
			
			НоваяСтрока = УдаляемыеСвойства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
			
		КонецЦикла;
		
	ИначеЕсли НЕ Объект.ПометкаУдаления И Объект.ПометкаУдаления <> ОбъектПометкаУдаления Тогда
		
		// Объект снят с удаления
		Для Каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
			
			НоваяСтрока = ДобавляемыеСвойства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
			
		КонецЦикла;
		
	ИначеЕсли НЕ Объект.ПометкаУдаления И Объект.ПометкаУдаления = ОбъектПометкаУдаления Тогда 
		
		// Обычная запись
		Если Объект.ДополнительныеСвойства.Свойство("СвойстваОбъекта") Тогда
			
			СвойстваОбъекта = Объект.ДополнительныеСвойства.СвойстваОбъекта;
			
			Для каждого СтрокаОбъекта Из Объект.ДополнительныеРеквизиты Цикл
				
				СтрокаБД = СвойстваОбъекта.Найти(СтрокаОбъекта.Свойство, "Свойство");
				
				Если СтрокаБД = Неопределено Тогда 
					
					// Добавлено свойство
					НоваяСтрока = ДобавляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
					Продолжить;
					
				КонецЕсли;
					
				Если СтрокаБД.Значение = СтрокаОбъекта.Значение Тогда
					
					// Свойство не изменено
					СвойстваОбъекта.Удалить(СтрокаБД);
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаБД.Значение <> СтрокаОбъекта.Значение Тогда
					
					// Свойство изменено
					НоваяСтрока = УдаляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБД);
					
					НоваяСтрока = ДобавляемыеСвойства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъекта);
					
					СвойстваОбъекта.Удалить(СтрокаБД);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Остались удаленные свойства
			Для каждого СтрокаБД Из СвойстваОбъекта Цикл
				
				НоваяСтрока = УдаляемыеСвойства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБД);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого УдаляемоеСвойство Из УдаляемыеСвойства Цикл
		УдалитьСвойствоИзРегистра(УдаляемоеСвойство.Свойство, УдаляемоеСвойство.Значение, НаборСвойств);
	КонецЦикла;
	
	Для каждого ДобавляемоеСвойство Из ДобавляемыеСвойства Цикл
		ДобавитьСвойствоВРегистр(ДобавляемоеСвойство.Свойство, ДобавляемоеСвойство.Значение, НаборСвойств);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкуВидОтбораНоменклатуры(ВидОтбора = Неопределено) Экспорт
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтбора = Неопределено Тогда
		ВидОтбора = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
	КонецЕсли;
	
	ТекущаяНастройка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидОтбора");
	Если ТекущаяНастройка <> ВидОтбора Тогда
		РегистрыСведений.НастройкиПользователей.Установить(ВидОтбора, "ОсновнойВидОтбора");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкуВидОтбораНоменклатуры() Экспорт
	
	ВидОтбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидОтбора");
	Если ВидОтбора = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ВидОтбора) Тогда
		
		ВидОтбораПоУмолчанию = НастройкаВидОтбораНоменклатурыПоУмолчанию();
		Если ВидОтбораПоУмолчанию = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ВидОтбораПоУмолчанию) Тогда
			ВидОтбора = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
		Иначе
			ВидОтбора = ВидОтбораПоУмолчанию;
		КонецЕсли;
		
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиПользователей) Тогда
			РегистрыСведений.НастройкиПользователей.Установить(ВидОтбора, "ОсновнойВидОтбора");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОтбора;
	
КонецФункции

// Удаляет свойство из регистра.
//
// Параметры:
//  Свойство				 - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Свойство.
//  Значение				 - Значение - Значение дополнительного реквизита.
//  НаборСвойств	 - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Набор свойств.
Процедура УдалитьСвойствоИзРегистра(Свойство, Значение, НаборСвойств) Экспорт
	
	ИдентификаторЗначения = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		ИдентификаторЗначения = Значение.УникальныйИдентификатор();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаполненностьСвойствКатегорий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НаборСвойств.Установить(НаборСвойств);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	НаборЗаписей.Отбор.Значение.Установить(ИдентификаторЗначения);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Получить(0);
	Если Запись.Счетчик > 1 Тогда
		Запись.Счетчик = Запись.Счетчик - 1;
	Иначе
		НаборЗаписей.Удалить(Запись);
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Добавляет свойство в регистр.
//
// Параметры:
//  Свойство				 - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Свойство.
//  Значение				 - Значение - Значение дополнительного реквизита.
//  НаборСвойств	 - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - Набор свойств.
Процедура ДобавитьСвойствоВРегистр(Свойство, Значение, НаборСвойств) Экспорт
	
	ИдентификаторЗначения = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		ИдентификаторЗначения = Значение.УникальныйИдентификатор();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаполненностьСвойствКатегорий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НаборСвойств.Установить(НаборСвойств);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	НаборЗаписей.Отбор.Значение.Установить(ИдентификаторЗначения);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НаборСвойств = НаборСвойств;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Значение = ИдентификаторЗначения;
		Если ИдентификаторЗначения <> Неопределено Тогда
			НоваяЗапись.ТипЗначения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Значение));
		КонецЕсли;
		НоваяЗапись.Счетчик = 1;
		
	Иначе
		
		Запись = НаборЗаписей.Получить(0);
		Запись.Счетчик = Запись.Счетчик + 1;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтказИзменитьСчетУчета(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Период,
	|	Запасы.Регистратор,
	|	Запасы.НомерСтроки,
	|	Запасы.Активность,
	|	Запасы.ВидДвижения,
	|	Запасы.Организация,
	|	Запасы.СтруктурнаяЕдиница,
	|	Запасы.СчетУчета,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Партия,
	|	Запасы.ЗаказПокупателя,
	|	Запасы.Количество,
	|	Запасы.Сумма,
	|	Запасы.КоррСтруктурнаяЕдиница,
	|	Запасы.КоррСчетУчета,
	|	Запасы.КоррНоменклатура,
	|	Запасы.КоррХарактеристика,
	|	Запасы.КоррПартия,
	|	Запасы.КоррЗаказПокупателя,
	|	Запасы.Спецификация,
	|	Запасы.КоррСпецификация,
	|	Запасы.ЗаказПродажи,
	|	Запасы.ДокументПродажи,
	|	Запасы.Подразделение,
	|	Запасы.Ответственный,
	|	Запасы.СтавкаНДС,
	|	Запасы.ФиксированнаяСтоимость,
	|	Запасы.ЗатратыНаВыпуск,
	|	Запасы.Возврат,
	|	Запасы.СодержаниеПроводки,
	|	Запасы.ПеремещениеВРозницуСуммовойУчет
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Номенклатура = &Номенклатура
	|	ИЛИ Запасы.КоррНоменклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции 

Функция НастройкаВидОтбораНоменклатурыПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОтбора.ТипЗначения.ПривестиЗначение();
	
	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;
		
	ИначеЕсли Выборка.Следующий() Тогда
		
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
		
	Иначе
		Возврат ПустоеЗначение;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеНастройки()

Функция ЗначениеЗаполненияКатегории() Экспорт
	
	КатегорияЗаполнения = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	
	Категория = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗначениеЗаполненияКатегорияНоменклатуры");
	
	Если НЕ Категория.ЭтоГруппа Тогда
		КатегорияЗаполнения = Категория;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КатегорияЗаполнения) Тогда
		КатегорияЗаполнения = Справочники.КатегорииНоменклатуры.БезКатегории;
		ЗаписатьЗначениеЗаполненияКатегории(КатегорияЗаполнения);
	КонецЕсли;
	
	Возврат КатегорияЗаполнения;
	
КонецФункции

Процедура ЗаписатьЗначениеЗаполненияКатегории(Категория) Экспорт
	
	КатегорияВНастройке = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗначениеЗаполненияКатегорияНоменклатуры");
	Если КатегорияВНастройке = Категория
		ИЛИ НЕ ЗначениеЗаполнено(Категория) Тогда
		
		Возврат;
	КонецЕсли;
	РегистрыСведений.НастройкиПользователей.Установить(Категория, "ЗначениеЗаполненияКатегорияНоменклатуры");
	
КонецПроцедуры

Функция ОписаниеСвойства(Форма, ЭлементИмя)
	
	ПараметрыОтбора = Новый Структура("ИмяРеквизитаЗначение", ЭлементИмя);
	Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() <> 0 Тогда
		Возврат Строки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСвойстваЭлемента(Форма, Элемент, ОписаниеСвойства, ЗначенияВыбора = Неопределено)
	
	Если ОписаниеСвойства.Булево Тогда
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.КнопкаОткрытия = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			ПодсказкаВвода = СтрШаблон(НСтр("ru = '%1 от'"), ОписаниеСвойства.Заголовок);
			Подсказка = ОписаниеСвойства.Заголовок;
		ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ОписаниеСвойства.ИмяРеквизитаЗначение) Тогда
			ПодсказкаВвода = НСтр("ru = 'до'");
			Подсказка = ОписаниеСвойства.Заголовок;
		Иначе
			ПодсказкаВвода = ОписаниеСвойства.Заголовок;
			Подсказка = ОписаниеСвойства.Заголовок;
		КонецЕсли;
		
		Элемент.ПодсказкаВвода = ПодсказкаВвода;
		Элемент.Подсказка = Подсказка;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
	КонецЕсли;
	
	Элемент.Заголовок = ОписаниеСвойства.Заголовок;
	Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоРеквизита");
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
		ИЛИ ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
		
		Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораДополнительногоРеквизита");
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
			?(ЗначениеЗаполнено(ОписаниеСвойства.ВладелецДополнительныхЗначений),
				ОписаниеСвойства.ВладелецДополнительныхЗначений, ОписаниеСвойства.Свойство)));
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЗначенияВыбора <> Неопределено Тогда
			
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораДополнительногоРеквизита");
			
			Если ЗначенияВыбора.Количество() <= 10 Тогда
				Элемент.СписокВыбора.ЗагрузитьЗначения(ЗначенияВыбора);
				Элемент.РежимВыбораИзСписка = Истина;
			Иначе
				ОписаниеСвойства.СписокВыбораЗначенийСсылка = ПоместитьВоВременноеХранилище(ЗначенияВыбора, Форма.УникальныйИдентификатор);
				
				Элемент.РежимВыбораИзСписка = Ложь;
				Элемент.БыстрыйВыбор = Ложь;
				Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.КнопкаСоздания = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйЭлементФормы(Форма, СоздаваемыеЭлементы, Родитель, ЗначенияВыбора = Неопределено)
	
	ПервыйЭлемент = СоздаваемыеЭлементы[0].ИмяРеквизитаЗначение;
	Если ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ПервыйЭлемент) Тогда
		ПервыйЭлемент = СтрЗаменить(ПервыйЭлемент, "_от", "");
	ИначеЕсли ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ПервыйЭлемент) Тогда
		ПервыйЭлемент = СтрЗаменить(ПервыйЭлемент, "_до", "");
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ПервыйЭлемент + "_группа", Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Если СоздаваемыеЭлементы.Количество() > 1 Тогда
		
		Группа = Форма.Элементы.Добавить(ПервыйЭлемент + "_группа_группа", Тип("ГруппаФормы"), Группа);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Для каждого ДобавляемыйЭлемент Из СоздаваемыеЭлементы Цикл
			
			Элемент = Форма.Элементы.Добавить(ДобавляемыйЭлемент.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Группа);
			
			УстановитьСвойстваЭлемента(Форма, Элемент, ДобавляемыйЭлемент);
			
		КонецЦикла;
		
	Иначе
		
		Элемент = Форма.Элементы.Добавить(СоздаваемыеЭлементы[0].ИмяРеквизитаЗначение, Тип("ПолеФормы"), Группа);
		
		УстановитьСвойстваЭлемента(Форма, Элемент, СоздаваемыеЭлементы[0], ЗначенияВыбора);
		
	КонецЕсли;
	
КонецФункции

Функция НовыйОписаниеСвойства(ТаблицаОписание, НаборСвойств, Свойство, ЭтоСвойствоХарактеристики, Постфикс = "")
	
	НоваяСтрока = ТаблицаОписание.Добавить();
	НоваяСтрока.НаборСвойств                   = НаборСвойств;
	НоваяСтрока.Свойство                       = Свойство;
	НоваяСтрока.ВладелецДополнительныхЗначений = Свойство.ВладелецДополнительныхЗначений;
	НоваяСтрока.Заголовок                      = Свойство.Заголовок;
	НоваяСтрока.Наименование                   = Свойство.Наименование;
	НоваяСтрока.ТипЗначения                    = Свойство.ТипЗначения;
	НоваяСтрока.ФорматСвойства                 = Свойство.ФорматСвойства;
	НоваяСтрока.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(НоваяСтрока.ТипЗначения, Тип("Булево"));
	НоваяСтрока.СвойствоХарактеристики         = ЭтоСвойствоХарактеристики;
	
	НоваяСтрока.ДополнительноеЗначение = 
		УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(Свойство.ТипЗначения);
	
	Если ЗначениеЗаполнено(Постфикс) Тогда
		Постфикс = "_" + Постфикс;
	КонецЕсли;
	
	ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(НаборСвойств.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(Свойство.УникальныйИдентификатор())), "-", "x")
			+ Постфикс;
	
	НоваяСтрока.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
	
КонецФункции

Функция ЭтоЛеваяГраницаДиапазонаЧисловогоРеквизита(ИмяРеквизита)
	
	ПостфиксНачалаДиапазона = "_от";
	Возврат СтрНайти(ИмяРеквизита,
					ПостфиксНачалаДиапазона,, 
					СтрДлина(ИмяРеквизита) - СтрДлина(ПостфиксНачалаДиапазона) + 1) <> 0;
	
КонецФункции

Функция ЭтоПраваяГраницаДиапазонаЧисловогоРеквизита(ИмяРеквизита)
	
	ПостфиксНачалаДиапазона = "_до";
	Возврат СтрНайти(ИмяРеквизита,
					ПостфиксНачалаДиапазона,, 
					СтрДлина(ИмяРеквизита) - СтрДлина(ПостфиксНачалаДиапазона) + 1) <> 0;
	
КонецФункции

Процедура УдалитьСтарыеРеквизитыИЭлементы(Форма, Список, СвойстваХарактеристики)
	
	Если СвойстваХарактеристики Тогда
		
		Отбор = Новый Структура("СвойствоХарактеристики", Истина);
		ЭлементыФормы = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
	Иначе
		
		ЭлементыФормы = Форма.СвойстваОписаниеДополнительныхРеквизитов;
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого ЭлементФормы Из ЭлементыФормы Цикл
		
		УдаляемыеРеквизиты.Добавить(ЭлементФормы.ИмяРеквизитаЗначение);
		
		ЭлементРеквизита = ЭлементФормы.ИмяРеквизитаЗначение;
		
		УдаляемыеЭлементы.Очистить();
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита);
		
		ЭлементРеквизита = СтрЗаменить(ЭлементРеквизита, "_от", "");
		ЭлементРеквизита = СтрЗаменить(ЭлементРеквизита, "_до", "");
		
		ЭлементРеквизита = ЭлементРеквизита + "_группа";
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита);
		
		ЭлементРеквизита = ЭлементРеквизита + "_группа";
		УдаляемыеЭлементы.Добавить(ЭлементРеквизита + "_группа" + "_группа");
		
		Для каждого ИмяЭлемента Из УдаляемыеЭлементы Цикл
			
			УдаляемыйЭлемент = Элементы.Найти(ИмяЭлемента);
			Если УдаляемыйЭлемент <> Неопределено Тогда
				
				Элементы.Удалить(УдаляемыйЭлемент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого УдаляемыйРеквизит Из УдаляемыеРеквизиты Цикл
		
		УдалитьОтборВСписке(Список, УдаляемыйРеквизит);
		
		Отбор = Новый Структура("ИмяРеквизитаЗначение", УдаляемыйРеквизит);
		Строки = Форма.СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если Строки.Количество() <> 0 Тогда
			Форма.СвойстваОписаниеДополнительныхРеквизитов.Удалить(Строки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

Процедура УдалитьОтборыСвойствПредыдущейКатегории(Форма, Список)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,,
		"ОтборПоСвойствамВыбраннойКатегории");
			
	ДанныеМеток = Форма.ДанныеМеток.Выгрузить(, "ИмяПоляОтбора");
	ДанныеМеток.Свернуть("ИмяПоляОтбора");
	Для каждого Метка Из ДанныеМеток Цикл
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			Метка.ИмяПоляОтбора);
		
	КонецЦикла;
	
	Форма.ДанныеМеток.Очистить();
	
КонецПроцедуры

Процедура УстановитьОтборВСписке(Список, ИмяПоля, ВидСравненияЗначения, Значение, Представление)
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоСвойствамВыбраннойКатегории");
	
	Если ГруппаОтбора = Неопределено Тогда
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
			"ОтборПоСвойствамВыбраннойКатегории",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	КонецЕсли;
	
	ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		ГруппаОтбора.Элементы,
		Представление);
	
	Если ЭлементОтбора = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора,
			ИмяПоля,
			ВидСравненияЗначения,
			Значение,
			Представление,
			Истина);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,
			ИмяПоля,
			Представление,
			Значение,
			ВидСравненияЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОтборВСписке(Список, Представление)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,,
		Представление);
	
КонецПроцедуры

Функция ПолеОтбораДополнительногоРеквизитаИзОписанияСвойства(ОписаниеСвойства, КатегорияНоменклатуры)
	
	Если ОписаниеСвойства.НаборСвойств = КатегорияНоменклатуры.НаборСвойств Тогда
		РодительСвойства = "Ссылка.";
	ИначеЕсли ОписаниеСвойства.НаборСвойств = КатегорияНоменклатуры.НаборСвойствХарактеристики Тогда
		РодительСвойства = "Характеристика.";
	КонецЕсли;
	
	Возврат РодительСвойства + Строка(ОписаниеСвойства.Свойство);
	
КонецФункции

#КонецОбласти
