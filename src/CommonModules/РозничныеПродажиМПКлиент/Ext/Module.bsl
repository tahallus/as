#Область ПрограммныйИнтерфейс

Процедура ПечатьЧекаПродажи(Параметры, РезультатПечатиЧека) Экспорт
	
	ВыходныеПараметры = Неопределено;
	
	ПараметрыЧека = Параметры.ОбщиеПараметры;
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ПредзаполнитьПостоянныеПараметрыЧека(ПараметрыФискализацииЧека);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФискализацииЧека, ПараметрыЧека);
	
	Если ПараметрыЧека.ЭтоВозврат Тогда
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	ПараметрыФискализацииЧека.Вставить("ПодписьЕГАИС", Ложь);
	//ПараметрыФискализацииЧека.СпособФорматноЛогическогоКонтроля = ПолучитьСпособФорматноЛогическогоКонтроля();
		
	Попытка
		
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыФискализацииЧека, Параметры.ОборудованиеПечати);
		
		#Если МобильноеПриложениеКлиент Тогда
			// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
			МодульМенеджерОборудованияКлиент = Вычислить("МенеджерОборудованияКлиент");
			// АПК:488-вкл
			Если ТипЗнч(МодульМенеджерОборудованияКлиент) = Тип("ОбщийМодуль") Тогда
				Результат = МодульМенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаНаФискальномУстройстве(
				Параметры.УникальныйИдентификатор,
				Параметры.ОборудованиеПечати,
				ПараметрыФискализацииЧека,
				ВыходныеПараметры
				);
			КонецЕсли;
		#Иначе
			Результат = Истина;
		#КонецЕсли

	Исключение
		
		Описание = ОписаниеОшибки();
		
		РезультатПечатиЧека.ОписаниеОшибки = Описание;
		РезультатПечатиЧека.Успешно = Ложь;
		
		// Сбор статистики
		ПолноеОписание = ПодробноеПредставлениеОшибки(Описание);
		СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьОшибкуВGA(ПолноеОписание);
		// Конец сбор статистики
		
		Возврат;
		
	КонецПопытки;
	
	Если Результат Тогда
	
		РезультатПечатиЧека.НомерЧека  = ВыходныеПараметры.НомерЧека;
		РезультатПечатиЧека.НомерСмены = ВыходныеПараметры.НомерСмены;
		РезультатПечатиЧека.Успешно = Истина;
		
		РезультатПечатиЧека.ПодписьЧекаЕГАИС = ПараметрыФискализацииЧека.ПодписьЧека;
		РезультатПечатиЧека.АдресЧекаЕГАИС   = ПараметрыФискализацииЧека.АдресЧека;
	Иначе
		РезультатПечатиЧека.ОписаниеОшибки = ВыходныеПараметры.ТекстОшибки;
		РезультатПечатиЧека.Успешно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПечатиЧека() Экспорт
	
	РезультатПечатиЧека = Новый Структура;
	РезультатПечатиЧека.Вставить("Успешно",          Ложь);
	РезультатПечатиЧека.Вставить("НомерЧека",          "");
	РезультатПечатиЧека.Вставить("НомерСмены",          0);
	РезультатПечатиЧека.Вставить("ПодписьЧекаЕГАИС",   "");
	РезультатПечатиЧека.Вставить("АдресЧекаЕГАИС",     "");
	РезультатПечатиЧека.Вставить("ОписаниеОшибки",     "");
	
	Возврат РезультатПечатиЧека;
	
КонецФункции

Процедура ПредзаполнитьПостоянныеПараметрыЧека(Параметры) Экспорт
	
	ПараметрыЧека = РозничныеПродажиМППовтИсп.ПараметрыЧека();
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЧека);
	
КонецПроцедуры

Функция ПараметрыОплатыПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сумма"              , 0);
	Параметры.Вставить("НомерЧека"          , "");
	Параметры.Вставить("НомерКарты"         , "");
	Параметры.Вставить("НомерСсылкиОперации", "");
	Параметры.Вставить("КодАвторизации"     , "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	
	Возврат Параметры;
	
КонецФункции

Функция ОплатитьПоПлатежнойСистеме(ПараметрыОплаты) Экспорт
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"               , ПараметрыОплаты.Сумма);
	ВходныеПараметры.Вставить("НомерЧека"           , ПараметрыОплаты.НомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"          , ПараметрыОплаты.НомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации" , ПараметрыОплаты.НомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"      , ПараметрыОплаты.КодАвторизации);
	
	РезультатОплаты = РезультатОплатыПоПлатежнойСистеме();
	
	#Если МобильноеПриложениеКлиент Тогда
		// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
		МодульМенеджерОборудованияКлиент = Вычислить("МенеджерОборудованияКлиент");
		// АПК:488-вкл
		Если ТипЗнч(МодульМенеджерОборудованияКлиент) = Тип("ОбщийМодуль") Тогда
			Если МодульМенеджерОборудованияКлиент.ВыполнитьОплатуПоПлатежнойСистеме(
				ПараметрыОплаты.УникальныйИдентификатор,
				ПараметрыОплаты.Оборудование,
				ВходныеПараметры,
				ВыходныеПараметры) Тогда
				
				РезультатОплаты.Успешно = Истина;
				
				РезультатОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
				РезультатОплаты.НомерСсылкиОперации = ?(ВыходныеПараметры.НомерСсылкиОперации = Неопределено, "", ВыходныеПараметры.НомерСсылкиОперации);
				РезультатОплаты.КодАвторизации      = ?(ВыходныеПараметры.КодАвторизации = Неопределено, "", ВыходныеПараметры.КодАвторизации);
				РезультатОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
				РезультатОплаты.ДатаОперации        = ТекущаяДата();
			Иначе
				
				РезультатОплаты.Успешно = Ложь;
				РезультатОплаты.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
			КонецЕсли;
			
			
			Возврат РезультатОплаты;
		КонецЕсли;
	#Иначе
		Возврат Истина;
	#КонецЕсли

КонецФункции

Функция РезультатОплатыПоПлатежнойСистеме() Экспорт
	
	РезультатОплаты = Новый Структура;
	
	РезультатОплаты.Вставить("ВидОперации"        , ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемыМП.Оплата"));
	РезультатОплаты.Вставить("Успешно"            , Ложь);
	РезультатОплаты.Вставить("ТекстОшибки"        , "");
	РезультатОплаты.Вставить("НомерКарты"         , "");
	РезультатОплаты.Вставить("НомерСсылкиОперации", "");
	РезультатОплаты.Вставить("КодАвторизации"     , "");
	РезультатОплаты.Вставить("СлипЧек", "");
	РезультатОплаты.Вставить("ДатаОперации");
	
	Возврат РезультатОплаты;
	
КонецФункции

Процедура ВыполнитьЗакрытиеИОткрытиеСменыЕслиНужно(Форма, Отказ) Экспорт
	
	ОчиститьСообщения();
	
	ОписаниеКассовойСмены = РозничныеПродажиМПСервер.ПолучитьСостояниеКассовойСмены();
	Если ОписаниеКассовойСмены.СменаОткрыта Тогда
		Если ТекущаяДата() - ОписаниеКассовойСмены.НачалоКассовойСмены < 86400 Тогда
			Форма.Объект.ОтчетОРозничныхПродажах = ОписаниеКассовойСмены.ОтчетОРозничныхПродажах;
			Возврат;
		Иначе
			//ВходныеПараметры  = Новый Структура();
			ВходныеПараметры = Новый Структура("ОтчетСГашением", Истина);
			ДобавитьПостоянныеПараметрыЧека(ВходныеПараметры);
			ВыходныеПараметры = Неопределено;
			
			#Если МобильноеПриложениеКлиент Тогда
				ОборудованиеУстройстваПечати = ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ОборудованиеПечати");
			#Иначе
				ОборудованиеУстройстваПечати = Неопределено;
			#КонецЕсли
			
			Если ЗначениеЗаполнено(ОборудованиеУстройстваПечати) Тогда 
				#Если МобильноеПриложениеКлиент Тогда
					// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
					МодульМенеджерОборудованияКлиент = Вычислить("МенеджерОборудованияКлиент");
					// АПК:488-вкл
					Если ТипЗнч(МодульМенеджерОборудованияКлиент) = Тип("ОбщийМодуль") Тогда
						
						Если МодульМенеджерОборудованияКлиент.ВыполнитьЗакрытиеСменыНаФискальномУстройстве(Форма.УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
							Результат = РозничныеПродажиМПСервер.ЗакрытьКассовуюСмену();
							Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
								Сообщить(Результат.ОписаниеОшибки);
								Отказ = Истина;
								Возврат;
							КонецЕсли;
						Иначе
							ТекстОшибкиЗакрытияСмены = ВыходныеПараметры.ТекстОшибки;
							Сообщить(ТекстОшибкиЗакрытияСмены);
							Отказ = Истина;
							Возврат;
						КонецЕсли;
					КонецЕсли;
				#КонецЕсли
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеКассовойСмены = РозничныеПродажиМПСервер.ПолучитьСостояниеКассовойСмены();
	Если НЕ ОписаниеКассовойСмены.СменаОткрыта Тогда
		ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
		ДобавитьПостоянныеПараметрыЧека(ВходныеПараметры);
		ВыходныеПараметры = Неопределено;
		#Если МобильноеПриложениеКлиент Тогда
			
			ОборудованиеУстройстваПечати = ОбщегоНазначенияМПВызовСервера.ПолучитьЗначениеКонстанты("ОборудованиеПечати");
		#Иначе
			ОборудованиеУстройстваПечати = Неопределено;
		#КонецЕсли
		Если ЗначениеЗаполнено(ОборудованиеУстройстваПечати) Тогда
			#Если МобильноеПриложениеКлиент Тогда
				// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
				МодульМенеджерОборудованияКлиент = Вычислить("МенеджерОборудованияКлиент");
				// АПК:488-вкл
				Если ТипЗнч(МодульМенеджерОборудованияКлиент) = Тип("ОбщийМодуль") Тогда
					
					Если МодульМенеджерОборудованияКлиент.ВыполнитьОткрытиеСменыНаФискальномУстройстве(Форма.УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
						ОтчетОРозничныхПродажах = Неопределено;
						Результат = РозничныеПродажиМПСервер.ОткрытьКассовуюСмену(ОтчетОРозничныхПродажах);
						Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
							Форма.Объект.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах;
						Иначе
							Сообщить(НСтр("ru='Нельзя создать чек, т.к. смена не открыта на ККТ'"));
							Отказ = Истина;
							Возврат
						КонецЕсли;
					Иначе
						ТекстОшибкиОткрытияСмены = ВыходныеПараметры.ТекстОшибки;
						Сообщить(ТекстОшибкиОткрытияСмены);
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			#КонецЕсли

		Иначе
			ОтчетОРозничныхПродажах = Неопределено;
			Результат = РозничныеПродажиМПСервер.ОткрытьКассовуюСмену(ОтчетОРозничныхПродажах);
			Форма.Объект.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВозвратаОплатыПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сумма"              , 0);
	Параметры.Вставить("НомерЧека"          , "");
	Параметры.Вставить("НомерКарты"         , "");
	Параметры.Вставить("НомерСсылкиОперации", "");
	Параметры.Вставить("КодАвторизации"     , "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатВозвратаОплатыПоПлатежнойСистеме() Экспорт
	
	РезультатОплаты = Новый Структура;
	
	РезультатОплаты.Вставить("ВидОперации"        , ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемыМП.ВозвратОплаты"));
	РезультатОплаты.Вставить("Успешно"            , Ложь);
	РезультатОплаты.Вставить("ТекстОшибки"        , "");
	РезультатОплаты.Вставить("НомерКарты"         , "");
	РезультатОплаты.Вставить("НомерСсылкиОперации", "");
	РезультатОплаты.Вставить("КодАвторизации"     , "");
	РезультатОплаты.Вставить("СлипЧек"            , "");
	РезультатОплаты.Вставить("ДатаОперации");
	
	Возврат РезультатОплаты;
	
КонецФункции

Функция ВозвратитьОплатуПоПлатежнойСистеме(ПараметрыВозвратаОплаты) Экспорт
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ПараметрыВозвратаОплаты.Сумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ПараметрыВозвратаОплаты.НомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ПараметрыВозвратаОплаты.НомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ПараметрыВозвратаОплаты.НомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ПараметрыВозвратаОплаты.КодАвторизации);
	
	РезультатВозвратаОплаты = РезультатВозвратаОплатыПоПлатежнойСистеме();
	
	#Если МобильноеПриложениеКлиент Тогда
		// АПК:488-выкл методы безопасного запуска обеспечиваются этой функцией
		МодульМенеджерОборудованияКлиент = Вычислить("МенеджерОборудованияКлиент");
		// АПК:488-вкл
		Если ТипЗнч(МодульМенеджерОборудованияКлиент) = Тип("ОбщийМодуль") Тогда
			
			Если МодульМенеджерОборудованияКлиент.ВыполнитьВозвратПлатежаПоПлатежнойСистеме(
				ПараметрыВозвратаОплаты.УникальныйИдентификатор,
				ПараметрыВозвратаОплаты.Оборудование,
				ВходныеПараметры,
				ВыходныеПараметры) Тогда
				
				РезультатВозвратаОплаты.Успешно = Истина;
				
				РезультатВозвратаОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
				РезультатВозвратаОплаты.НомерСсылкиОперации = ?(ВыходныеПараметры.НомерСсылкиОперации = Неопределено, "", ВыходныеПараметры.НомерСсылкиОперации);
				РезультатВозвратаОплаты.КодАвторизации      = ?(ВыходныеПараметры.КодАвторизации = Неопределено, "", ВыходныеПараметры.КодАвторизации);
				РезультатВозвратаОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
				РезультатВозвратаОплаты.ДатаОперации        = ТекущаяДата();
			Иначе
				
				РезультатВозвратаОплаты.Успешно = Ложь;
				РезультатВозвратаОплаты.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
			КонецЕсли;
			
			Возврат РезультатВозвратаОплаты;
		КонецЕсли;
	#Иначе
		РезультатВозвратаОплаты.Успешно = Истина;
		
		РезультатВозвратаОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
		РезультатВозвратаОплаты.НомерСсылкиОперации = ?(ВыходныеПараметры.НомерСсылкиОперации = Неопределено, "", ВыходныеПараметры.НомерСсылкиОперации);
		РезультатВозвратаОплаты.КодАвторизации      = ?(ВыходныеПараметры.КодАвторизации = Неопределено, "", ВыходныеПараметры.КодАвторизации);
		РезультатВозвратаОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
		РезультатВозвратаОплаты.ДатаОперации        = ТекущаяДата();
		Возврат РезультатВозвратаОплаты;
	#КонецЕсли

КонецФункции

Процедура ДобавитьПостоянныеПараметрыЧека(Параметры) Экспорт
	
	ПараметрыЧека = РозничныеПродажиМППовтИсп.ПараметрыЧека();
	
	Параметры.Вставить("ОрганизацияНазвание");
	Параметры.Вставить("ОрганизацияИНН");
	Параметры.Вставить("ОрганизацияКПП");
	Параметры.Вставить("Кассир");
	Параметры.Вставить("ИмяКассира");
	Параметры.Вставить("НомерКассы");
	Параметры.Вставить("ТекстШапки");
	Параметры.Вставить("ТекстПодвала");
	Параметры.Вставить("КассирДолжностьМП");
	Параметры.Вставить("КассирФИОМП");
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЧека);
	
КонецПроцедуры

Процедура Оплатить(Форма, Команда, ЭтоВозврат = Ложь, ЭтоЗаказ = Ложь) Экспорт
	
	Если Команда <> Неопределено Тогда
		// Сбор статистики
		СборСтатистикиМПКлиентСерверПереопределяемый.ОтправитьДействиеВGA(Форма.ИмяФормы + ".Команда." + Команда.Имя);
		// Конец Сбор статистики
	КонецЕсли;

	Если Форма.Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Ошибка. Нет позиций в чеке!'"),,ОбщегоНазначенияМПВызовСервераПовтИсп.ПолучитьСинонимКонфигурации());
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Ошибка. Сумма чека - 0.'"),,ОбщегоНазначенияМПВызовСервераПовтИсп.ПолучитьСинонимКонфигурации());
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если ЭтоЗаказ Тогда
		Форма.ЗаписатьЗаказ(Отказ)
	Иначе
		Форма.ЗаписатьЧек(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СуммаДокумента", Форма.Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаОплаты", Форма.Объект.СуммаОплаты);
	СтруктураПараметров.Вставить("СуммаКартой", Форма.Объект.СуммаКартой);
	
	Если ЭтоЗаказ Тогда
		РеквизитыДокументаОплаты = Форма.ПолучитьРеквизитыДокументаОплаты();
		СтруктураПараметров.Вставить("АдресЭП", РеквизитыДокументаОплаты.АдресЭП);
		СтруктураПараметров.Вставить("Телефон", РеквизитыДокументаОплаты.Телефон);
		СтруктураПараметров.Вставить("Ссылка", РеквизитыДокументаОплаты.Ссылка);
	Иначе
		СтруктураПараметров.Вставить("АдресЭП", Форма.Объект.АдресЭП);
		СтруктураПараметров.Вставить("Телефон", Форма.Объект.Телефон);
		СтруктураПараметров.Вставить("Ссылка", Форма.Объект.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЭтоВозврат", ЭтоВозврат);
	Если ЭтоВозврат Тогда
		СтруктураПараметров.Вставить("ДанныеОплатыПоПлатежнойКартеЧекаПродажи", Форма.ОпределитьДанныеОплатыПоПлатежнойКартеЧекаПродажи());
	КонецЕсли;

	ПозицииЧека = Новый Массив();
	Для каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТаблицы.НомерСтроки;
		СтрокаПозицииЧека.Наименование = Строка(СтрокаТаблицы.Товар); // 1 - Наименование
		СтрокаПозицииЧека.Количество = СтрокаТаблицы.Количество; // 2 - Количество
		СтрокаПозицииЧека.Цена = СтрокаТаблицы.Цена; // 3 - Цена
		СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаТаблицы.Цена; // 3 - ЦенаСоСкидками
		СтрокаПозицииЧека.Сумма = СтрокаТаблицы.Сумма; // 4 - Сумма
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиМПСервер.ПолучитьПризнакПредметаРасчетаТовара(СтрокаТаблицы.Товар);
		СтрокаПозицииЧека.НомерСекции = 1; // 5 - НомерСекции
		СтрокаПозицииЧека.СтавкаНДС = РозничныеПродажиМППовтИсп.ПолучитьЗначениеСтавкиНДСНоменклатуры(СтрокаТаблицы.Товар); // 6 - СтавкаНДС
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	ТаблицаОплат = Новый Массив();
	Форма.Объект.Дата = ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Номер) Тогда
		Форма.УстановитьНовыйНомер();
	КонецЕсли;
	
	// Структура чека
	ОбщиеПараметры = Новый Структура();
	Если ЭтоВозврат Тогда 
		ОбщиеПараметры.Вставить("ТипЧека" , 2);
	Иначе
		ОбщиеПараметры.Вставить("ТипЧека" , 1);
	КонецЕсли;
	ОбщиеПараметры.Вставить("ПозицииЧека" , ПозицииЧека);
	ОбщиеПараметры.Вставить("ТаблицаОплат" , ТаблицаОплат);
	Если ЭтоЗаказ Тогда
		ОбщиеПараметры.Вставить("НомерЧека", РеквизитыДокументаОплаты.Номер);
	Иначе
		ОбщиеПараметры.Вставить("НомерЧека" , Форма.Объект.Номер);
	КонецЕсли;
	ОбщиеПараметры.Вставить("НомерСмены", РозничныеПродажиМПСервер.ПолучитьНомерСмены());
	ОбщиеПараметры.Вставить("СистемаНалогообложения", РозничныеПродажиМПСервер.ПолучитьСистемуНалогообложенияККТ());
	ОбщиеПараметры.Вставить("ПараметрыЧекаЕГАИС" , Неопределено);
	
	СтруктураПараметров.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуОплатыЗавершение", Форма.ЭтотОбъект);
	Если ЭтоЗаказ Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаОплатаМП", СтруктураПараметров, Форма.ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаОплатаЧекМП", СтруктураПараметров, Форма.ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти