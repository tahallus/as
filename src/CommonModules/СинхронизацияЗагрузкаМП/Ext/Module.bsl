#Область НачалоЗагрузки

Процедура ЗапускЗагрузки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятыеСообщенияДляЗагрузкиМП.НомерСообщения КАК НомерСообщения,
	|	ПринятыеСообщенияДляЗагрузкиМП.Версия КАК Версия,
	|	ПринятыеСообщенияДляЗагрузкиМП.КодУзла КАК КодУзла,
	|	ПринятыеСообщенияДляЗагрузкиМП.СообщениеОбмена КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.ПринятыеСообщенияДляЗагрузкиМП КАК ПринятыеСообщенияДляЗагрузкиМП
	|ГДЕ
	|	ПринятыеСообщенияДляЗагрузкиМП.СообщениеОбрабатывается = &Ложь
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСообщения";
	
	Запрос.УстановитьПараметр("Ложь", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РегистрыСведений.ПринятыеСообщенияДляЗагрузкиМП.ИзменитьСтатусСообщения(ВыборкаДетальныеЗаписи.НомерСообщения);
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗагрузитьПакет(ВыборкаДетальныеЗаписи.СообщениеОбмена.Получить(), ВыборкаДетальныеЗаписи.НомерСообщения, ВыборкаДетальныеЗаписи.Версия);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаПакета

Процедура ЗагрузитьПакет(Сообщение, НомерСообщения, ВерсияПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Сообщение);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ФабрикаВыгрузки = ФабрикаВыгрузки(ВерсияПакета);
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	КодУзла = ЧтениеСообщения.Отправитель.Код;
	
	ПродолжитьЧтение = Истина;
	Пока ПродолжитьЧтение Цикл
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		Если ТипДанныхXML = Неопределено Тогда
			ПродолжитьЧтение = Ложь;
			Продолжить;
		КонецЕсли;
		
		// -----НОВОЕ
		УзелСсылка = ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла);
		Если НЕ УзелСсылка.ДобавленыНовыеДанные Тогда
			УзелОбъект = УзелСсылка.ПолучитьОбъект();
			УзелОбъект.ДобавленыНовыеДанные = Истина;
			УзелОбъект.Записать();
		КонецЕсли;
		//
		
		ТипОбъекта = ФабрикаXDTO.Тип(ТипДанныхXML.URIПространстваИмен, ТипДанныхXML.ИмяТипа);
		Тип = СериализаторXDTO.ИзXMLТипа(ТипДанныхXML);
		
		Если Тип = Неопределено Тогда
			Если ТипДанныхXML.ИмяТипа = "PredefinedData" Тогда
				ЧтениеXML.Прочитать();
				СтруктураПредопределенныхДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				ЧтениеXML.Прочитать();
				Продолжить;
			Иначе
				ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
				СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.СохранитьНовыйОбъект(ОбъектXDTOВыгрузки, ФабрикаВыгрузки, ВерсияПакета, КодУзла, СтруктураПредопределенныхДанных, ТипДанныхXML.ИмяТипа);
				СтруктураПредопределенныхДанных = Неопределено;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		Если Тип = Тип("УдалениеОбъекта") Тогда
			УдалитьОбъект(ЧтениеXML, ТипОбъекта, ЧтениеСообщения, ФабрикаВыгрузки, ОбъектМетаданных, Тип)
		ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			ЗаписатьКонстанту(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип);
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ЗаписатьСправочник(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			ЗаписатьРегистрСведений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип);
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			ЗаписатьРегистрНакоплений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип);
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ЗаписатьДокумент(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ЗафиксироватьТранзакцию();
	
	РегистрыСведений.ПринятыеСообщенияДляЗагрузкиМП.УдалитьСообщение(НомерСообщения, КодУзла);
	
	//ВключитьНаЦентральномУзле
	Если КодУзла <> "001" Тогда
		СинхронизацияМПУНФ.СоздатьСообщениеСПодтвержденнымиНомерами(КодУзла);
	КонецЕсли;
	
КонецПроцедуры

Функция ФабрикаВыгрузки(Версия) Экспорт
	
	Схема = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СхемыКонфигурацийМП.Схема КАК Схема,
	|	СхемыКонфигурацийМП.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.СхемыКонфигурацийМП КАК СхемыКонфигурацийМП
	|ГДЕ
	|	СхемыКонфигурацийМП.Версия = &Версия";
	
	Запрос.УстановитьПараметр("Версия", Версия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Схема = ВыборкаДетальныеЗаписи.Схема;
		Схема = Схема.Получить();
	КонецЕсли;
	
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлСхемы);
	ЗаписьXML.ЗаписатьБезОбработки(Схема);
	ЗаписьXML.Закрыть();
	ФабрикаВыгрузки = СоздатьФабрикуXDTO(ФайлСхемы);
	
	Возврат ФабрикаВыгрузки;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	СвойстваИсключенияМассив = ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	СвойстваИсключенияСтрока = МассивСвойствИсключенийВСтроку(СвойстваИсключенияМассив);
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , СвойстваИсключенияСтрока);
	
	Для каждого Свойство Из СвойстваИсключенияМассив Цикл
		
		Если ОбъектXDTOВыгрузки[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXML = СериализаторXDTO.XMLТип(ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]));
		НовыйОбъектТип = ФабрикаXDTO.Тип(ДанныеXML.URIПространстваИмен, ДанныеXML.ИмяТипа);
		
		НовыйОбъектXDTO = ФабрикаXDTO.Создать(НовыйОбъектТип, ОбъектXDTOВыгрузки[Свойство.Имя]);
		ОбъектXDTOКонфигурации[Свойство.Имя] = НовыйОбъектXDTO;
		
	КонецЦикла;
	
	КоллекцияСвойствВыгрузки = ОбъектXDTOВыгрузки.Свойства();
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если ОбъектXDTOКонфигурации[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияСвойствВыгрузки.Получить(Свойство.Имя) = Неопределено
			И НЕ ЭтоГруппа(ОбъектXDTOКонфигурации) Тогда 
			
			ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство);
		ИначеЕсли Свойство.Тип = ТипAnyType Тогда
			ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(ТипAnyType);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствОбъектаXDTOДляСправочника(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, ТипОбъекта)
	
	СвойстваИсключенияМассив = ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	СвойстваИсключенияСтрока = МассивСвойствИсключенийВСтроку(СвойстваИсключенияМассив);
	
	Если ТипЗнч(ОбъектXDTOВыгрузки.Ref) = Тип("СправочникСсылка.СпецификацииМП") Тогда
		
		FilterТип = ТипОбъекта;
		OwnerОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , "Owner, PredefinedDataName");
		
		URL =  "http://v8.1c.ru/8.1/data/enterprise/current-config";
		
		OwnerТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOВыгрузки.Owner)).Имя);
		OwnerОбъектXDTO = ФабрикаXDTO.Создать(OwnerТип, ОбъектXDTOВыгрузки.Owner);
		
		ОбъектXDTOКонфигурации.Owner = OwnerОбъектXDTO;
	Иначе
		ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , СвойстваИсключенияСтрока);
	КонецЕсли;
	
	Для каждого Свойство Из СвойстваИсключенияМассив Цикл
		
		Если ОбъектXDTOВыгрузки[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXML = СериализаторXDTO.XMLТип(ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]));
		НовыйОбъектТип = ФабрикаXDTO.Тип(ДанныеXML.URIПространстваИмен, ДанныеXML.ИмяТипа);
		
		НовыйОбъектXDTO = ФабрикаXDTO.Создать(НовыйОбъектТип, ОбъектXDTOВыгрузки[Свойство.Имя]);
		ОбъектXDTOКонфигурации[Свойство.Имя] = НовыйОбъектXDTO;
		
	КонецЦикла;
	
	КоллекцияСвойствВыгрузки = ОбъектXDTOВыгрузки.Свойства();
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если ОбъектXDTOКонфигурации[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияСвойствВыгрузки.Получить(Свойство.Имя) = Неопределено
			И НЕ ЭтоГруппа(ОбъектXDTOКонфигурации) Тогда 
			ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство);
		ИначеЕсли Свойство.Тип = ТипAnyType Тогда
			ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(ТипAnyType);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоГруппа(ОбъектXDTO)
	
	СвойствоЭтоГруппа = ОбъектXDTO.Свойства().Получить("IsFolder");
	Если СвойствоЭтоГруппа = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ОбъектXDTO["IsFolder"] = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ?(ОбъектXDTO["IsFolder"], Истина, Ложь);
	
КонецФункции

Процедура ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство)
	
	Если Свойство.Тип.Имя = "decimal" Тогда
		Значение = 0;
	ИначеЕсли Свойство.Тип.Имя = "string" Тогда
		Значение = "";
	ИначеЕсли Свойство.Тип.Имя = "dateTime" Тогда
		Значение = Дата(1, 1, 1);
	ИначеЕсли Свойство.Тип.Имя = "boolean" Тогда
		Значение = Ложь;
	ИначеЕсли Свойство.Тип.Имя = "ValueStorage" Тогда
		Значение = Новый ХранилищеЗначения(Неопределено);
	ИначеЕсли Свойство.Тип.Имя = "УникальныйИдентификатор" Тогда
		Значение = Новый УникальныйИдентификатор;
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.КонтрагентыМП" Тогда
		Значение = Справочники.КонтрагентыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.ТоварыМП" Тогда
		Значение = Справочники.ТоварыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СпецификацииМП" Тогда
		Значение = Справочники.СпецификацииМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтатьиМП" Тогда
		Значение = Справочники.СтатьиМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтавкиНДСМП" Тогда
		Значение = Справочники.СтавкиНДСМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.КассыККММП" Тогда
		Значение = Справочники.КассыККММП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтруктурныеЕдиницыМП" Тогда
		Значение = Справочники.СтруктурныеЕдиницыМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ВводОстатковМП" Тогда
		Значение = Документы.ВводОстатковМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЗаказМП" Тогда
		Значение = Документы.ЗаказМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходДенегМП" Тогда
		Значение = Документы.ПриходДенегМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходТовараМП" Тогда
		Значение = Документы.ПриходТовараМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходДенегМП" Тогда
		Значение = Документы.РасходДенегМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходТовараМП" Тогда
		Значение = Документы.РасходТовараМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККММП" Тогда
		Значение = Документы.ЧекККММП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККМВозвратМП" Тогда
		Значение = Документы.ЧекККМВозвратМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ОтчетОРозничныхПродажахМП" Тогда
		Значение = Документы.ОтчетОРозничныхПродажахМП.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "EnumRef.СтатусЧекаККММП" Тогда
		Значение = Перечисления.СтатусЧекаККММП.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(Свойство.Тип, Значение);
	
КонецПроцедуры

Функция МассивСвойствИсключенийВСтроку(Массив)
	
	СтрокаСвойствИсключений = "";
	Для каждого Элемент Из Массив Цикл 
		Если ЗначениеЗаполнено(СтрокаСвойствИсключений) Тогда
			СтрокаСвойствИсключений = СтрокаСвойствИсключений + ",";
		КонецЕсли;
		СтрокаСвойствИсключений = СтрокаСвойствИсключений + Элемент.Имя;
	КонецЦикла;
	Возврат СтрокаСвойствИсключений;
	
КонецФункции

Процедура ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл 
		Если ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]) <> Тип("СписокXDTO") Тогда 
			Продолжить;
		КонецЕсли;
		
		СвойствоОбъектаXDTOКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоОбъектаXDTOКонфигурации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементСпискаОбъектаXDTOВыгрузки Из ОбъектXDTOВыгрузки[Свойство.Имя] Цикл 
			ЭлементСпискаОбъектаXDTOКонфигурации = ФабрикаXDTO.Создать(СвойствоОбъектаXDTOКонфигурации.Тип);
			ЗаполнитьЗначенияСвойств(ЭлементСпискаОбъектаXDTOКонфигурации, ЭлементСпискаОбъектаXDTOВыгрузки);
			ОбъектXDTOКонфигурации[Свойство.Имя].Добавить(ЭлементСпискаОбъектаXDTOКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	МассивСвойствИсключений = Новый Массив;
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если Свойство.Тип = ТипAnyType Тогда 
			МассивСвойствИсключений.Добавить(Свойство);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл
		Если ОбъектXDTOВыгрузки[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСвойствИсключений.Найти(Свойство) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоКонфигурации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСвойствИсключений.Добавить(СвойствоКонфигурации);
	КонецЦикла;
	
	Возврат МассивСвойствИсключений;
	
КонецФункции

#КонецОбласти

#Область ЗаписьИУдалениеОбъекта

Процедура ЗаписатьКонстанту(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросККонстанте(ОбъектМетаданных.Имя);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляКонстанты(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Константа = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Константа.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	Константа.ОбменДанными.Загрузка = Истина;
	Константа.Записать();
	
	СтруктураПредопределенныхДанных = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьСправочник(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКСправочнику(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	СинхронизацияРаботаСПредопределеннымиДаннымиМП.НайтиПредопределенныеДанные(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	СинхронизацияРаботаСКлассификаторамиМП.НайтиКлассификаторы(ОбъектXDTOВыгрузки, ОбъектМетаданных);
	
	ЗаполнитьЗначенияСвойствОбъектаXDTOДляСправочника(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, ТипОбъекта);
	ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	СтруктураСНовымиДанными = Неопределено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Если Метаданные.Справочники[ОбъектМетаданных.Имя].ДлинаКода > 0 Тогда
			НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоКоду(ОбъектXDTOВыгрузки.code);
		Иначе
			НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоНаименованию(ОбъектXDTOВыгрузки.Description, Истина);
		КонецЕсли;
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсии(ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, СтруктураПредопределенныхДанных, НайденнаяСсылка, КодУзла);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
		КонецЕсли;
	КонецЕсли;
	
	Если КодУзла <> "001" Тогда
		ЗаписьНовогоНомера = ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных);
	КонецЕсли;
	
	Справочник = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Справочник.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	Справочник.ОбменДанными.Загрузка = Истина;
	Справочник.Записать();
	
	Если КодУзла <> "001" Тогда
		Если ЗаписьНовогоНомера Тогда
			СправочникОбъект = ОбъектXDTOКонфигурации.Ref.ПолучитьОбъект();
			СправочникОбъект.УстановитьНовыйКод();
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, СправочникОбъект.Ссылка,СправочникОбъект.Код);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), СправочникОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.СохранитьНовыеДанные(СтруктураСНовымиДанными, ОбъектXDTOВыгрузки, ВерсияПакета, СтруктураПредопределенныхДанных, КодУзла);
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьРегистрСведений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКРегиструСведений(ОбъектXDTOВыгрузки, ОбъектМетаданных.Имя, ТипОбъекта);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	Статус = Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.НичегоНеНайдено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Регистр = "РегистрыСведений";
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсииДляРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, ОбъектМетаданных, ФабрикаВыгрузки, ЧтениеXML, ТипОбъекта, КодУзла, СтруктураПредопределенныхДанных);
		Статус = СтруктураСНовымиДанными.Результат;
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.ВВыгрузкеНеХватаетИзмерения Тогда
		
		Регистры = РегистрыСведений[ОбъектМетаданных.Имя];
		СтруктураПредопределенныхДанныхДляСохранения = СтруктураПредопределенныхДанных;
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
			
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
			
			Если FilterItemВыгрузки.Name = "Recorder" Тогда
				ЗаписатьРегистрСведенийСРегистратором(FilterItemВыгрузки, FilterОбъектXDTO, FilterТип);
				Продолжить;
			КонецЕсли;
			
			ИзмерениеКонфигурации = Метаданные.РегистрыСведений[ОбъектМетаданных.Имя].Измерения.Найти(FilterItemВыгрузки.Name);
			
			Если ИзмерениеКонфигурации <> Неопределено Тогда 
				ИмяИзмерения = ИзмерениеКонфигурации.Имя ;
				
				Если FilterItemВыгрузки.Name = ИмяИзмерения Тогда
					FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
					FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
					
					Если (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Строка") ИЛИ (ТипЗнч(FilterItemВыгрузки.Value)) = Тип("Число") Тогда
						FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
						FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
						
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Usage, ComparisonType, ValueFrom, ValueTo");
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					Иначе
						ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
						
						URL = FilterItemТип.URIПространстваИмен + "/current-config";
						
						ValueТип = ФабрикаXDTO.Тип(URL, "CatalogRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
						
						Если СтруктураПредопределенныхДанных <> Неопределено Тогда
							НайденноеЗначение = Неопределено;
							СтруктураПредопределенныхДанных.Свойство(FilterItemВыгрузки.Name, НайденноеЗначение);
						КонецЕсли;
						Если НайденноеЗначение <> Неопределено Тогда
							Для каждого Элемент Из СтруктураПредопределенныхДанных Цикл
								Если Элемент.Ключ = FilterItemВыгрузки.Name Тогда
									ОбъектМетаданныхРеквизита = Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value));
									НужныйРеквизит = Справочники[ОбъектМетаданныхРеквизита.Имя][Элемент.Значение];
									ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, НужныйРеквизит);
									FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
							FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
						КонецЕсли;
						
						FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьРегистрСведенийСРегистратором(Знач FilterItemВыгрузки, Знач FilterОбъектXDTO, Знач FilterТип)
	
	Перем FilterItemОбъектXDTO, FilterItemТип, URL, ValueОбъектXDTO, ValueТип;
	
	FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
	FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
	
	ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
	
	URL = FilterItemТип.URIПространстваИмен + "/current-config";
	
	ValueТип = ФабрикаXDTO.Тип(URL, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
	ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
	FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
	
	FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
	
КонецПроцедуры

Процедура ЗаписатьРегистрНакоплений(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКРегиструНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных.Имя, ТипОбъекта);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляРегистраСведенийИлиРегистраНакопления(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	Статус = Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.НичегоНеНайдено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		Регистр = "РегистрыНакопления";
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсииДляРегистра(Регистр, ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, ОбъектМетаданных, ФабрикаВыгрузки, ЧтениеXML, ТипОбъекта, КодУзла, СтруктураПредопределенныхДанных);
		Статус = СтруктураСНовымиДанными.Результат;
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПоискаНовыхДанныхВРегистрахМП.ВВыгрузкеНеХватаетИзмерения Тогда
		
		Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
			ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
			Запись = ФабрикаXDTO.Создать(ЗаписьТип);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
			
			Если СтруктураПредопределенныхДанных <> Неопределено Тогда
				Если СтруктураПредопределенныхДанных.Количество() > 0 Тогда
					СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(Запись, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
				КонецЕсли;
			КонецЕсли;
			
			ОбъектXDTOКонфигурации.Record.Добавить(Запись);
		КонецЦикла;
		
		FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
		FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
		
		Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл 
			
			FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
			FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
			
			ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
			
			URL = FilterItemТип.URIПространстваИмен + "/current-config";
			
			ValueТип = ФабрикаXDTO.Тип(URL, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
			ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
			FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
			
			FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
		КонецЦикла;
		
		ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
		
		НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
		НаборЗаписей.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ФабрикаВыгрузки, СтруктураПредопределенныхДанных, ОбъектМетаданных, ВерсияПакета, КодУзла, ЧтениеСообщения, ТипОбъекта, ЧтениеXML, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
		ЕстьДанныеВТаблицеРегистрации = ЗапросКДокументу(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
		Если ЕстьДанныеВТаблицеРегистрации Тогда
			СтруктураПредопределенныхДанных = Неопределено;
			Возврат;
		КонецЕсли;
		СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOДляСправочникаИлиДокумента(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	
	ВерсияПакетаБольшеТекущейВерсии = СравнитьВерсии(СинхронизацияМПУНФ.ПолучитьТекущуюВерсиюПриложения(), ВерсияПакета);
	
	СтруктураСНовымиДанными = Неопределено;
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		НайденнаяСсылка = ОбъектXDTOВыгрузки.Ref;
		СтруктураСНовымиДанными = СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.НайтиДанныеИзДругойВерсии(ОбъектXDTOВыгрузки, ОбъектXDTOКонфигурации, ВерсияПакета, СтруктураПредопределенныхДанных,НайденнаяСсылка,КодУзла);
	КонецЕсли;
	
	Если СтруктураПредопределенныхДанных <> Неопределено Тогда
		Если СтруктураПредопределенныхДанных.МассивПредопределенныхРеквизитовВТЧ.Количество() > 0 ИЛИ СтруктураПредопределенныхДанных.СтруктураПредопределенныхРеквизитов.Количество() > 0 Тогда
			СинхронизацияРаботаСПредопределеннымиДаннымиМП.НачатьЗаписьПредопределенныхДанных(ОбъектXDTOКонфигурации, СтруктураПредопределенныхДанных, ОбъектМетаданных, СтруктураСНовымиДанными);
		КонецЕсли;
	КонецЕсли;
	
	Если КодУзла <> "001" Тогда
		ЗаписьНовогоНомера = ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных);
	КонецЕсли;
	
	Документ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
	Документ.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	Документ.ОбменДанными.Загрузка = Истина;
	Документ.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязаннымиДокументами", Истина);
	Документ.Записать();
	
	Если КодУзла <> "001" Тогда
		Если ЗаписьНовогоНомера Тогда
			ДокументОбъект = ОбъектXDTOКонфигурации.Ref.ПолучитьОбъект();
			ДокументОбъект.УстановитьНовыйНомер();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязаннымиДокументами", Истина);
			ДокументОбъект.Записать();
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ДокументОбъект.Ссылка, ДокументОбъект.Номер);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
			ПланыОбмена.УдалитьРегистрациюИзменений(ПланыОбмена.СинхронизацияМП.НайтиПоКоду(КодУзла), ДокументОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПакетаБольшеТекущейВерсии Тогда
		СинхронизацияПоискИСохранениеДанныхИзДругойВерсииМП.СохранитьНовыеДанные(СтруктураСНовымиДанными, ОбъектXDTOВыгрузки, ВерсияПакета, СтруктураПредопределенныхДанных, КодУзла);
	КонецЕсли;
	
	СтруктураПредопределенныхДанных = Неопределено;
КонецПроцедуры

Процедура УдалитьОбъект(ЧтениеXML, ТипОбъекта, ЧтениеСообщения, ФабрикаВыгрузки, ОбъектМетаданных, Тип)
	
	ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
	ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектXDTOВыгрузки.Ref));
	
	Если ОбъектМетаданных = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИзДругойВерсииМП.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.СообщенияИзДругойВерсииМП КАК СообщенияИзДругойВерсииМП
		|ГДЕ
		|	СообщенияИзДругойВерсииМП.УникальныйИдентификаторНовогоОбъекта = &УникальныйИдентификаторНовогоОбъекта";
		
		Запрос.УстановитьПараметр("УникальныйИдентификаторНовогоОбъекта", Новый УникальныйИдентификатор(ОбъектXDTOВыгрузки.Ref));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегистрыСведений.СообщенияИзДругойВерсииМП.УдалитьСообщение(ВыборкаДетальныеЗаписи.Номер);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
			ЕстьДанныеВТаблицеРегистрации = ЗапросКСправочнику(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
			Если ЕстьДанныеВТаблицеРегистрации Тогда
				Возврат;
			КонецЕсли;
			СинхронизацияРаботаСКлассификаторамиМП.ПоискСсылокНаКлассификаторыВОбъектеXDTOПриУдалении(ОбъектXDTOВыгрузки, ОбъектМетаданных, Тип);
		КонецЕсли;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Если ПланыОбмена.СинхронизацияМП.ЭтотУзел().Код <> "001" Тогда
			ЕстьДанныеВТаблицеРегистрации = ЗапросКДокументу(ОбъектXDTOВыгрузки.Ref, ОбъектМетаданных.Имя);
			Если ЕстьДанныеВТаблицеРегистрации Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект = ОбъектXDTOВыгрузки.Ref.ПолучитьОбъект();
	Если Объект <> Неопределено Тогда
		
		Объект.ПометкаУдаления = Истина;
		Объект.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("НеЗапускатьСинхронизацию", Истина);
		Попытка
			
			Объект.Записать();
			
		Исключение
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			Попытка
				Если ОбщегоНазначенияМПСервер.ЗначениеРеквизитаОбъекта(ПланыОбмена.СинхронизацияМП.ЭтотУзел(), "Код") = "001" Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(ПолучитьМассивВсехУзловДляРегистрации(), Объект);
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001"), Объект);
				КонецЕсли;
			Исключение
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	
	
	//Узел = ПланыОбмена.СинхронизацияМП.ЭтотУзел();
	//Удаление = Новый УдалениеОбъекта(ОбъектXDTOВыгрузки.Ref);
	//Удаление.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	//Удаление.ОбменДанными.Загрузка = Истина;
	////Удаление.ДополнительныеСвойства.Вставить("НеЗапускатьСинхронизацию", Истина);
	//Удаление.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Функция СравнитьВерсии(ТекущаяВерсия, ВерсияПакета)
	
	СтруктураТекущейВерсии = РегистрыСведений.СообщенияИзДругойВерсииМП.РазложитьВерсиюНаЧисла(ТекущаяВерсия);
	СтруктураВерсииПакета = РегистрыСведений.СообщенияИзДругойВерсииМП.РазложитьВерсиюНаЧисла(ВерсияПакета);
	
	ВерсияПакетаБольшеТекущейВерсии = Ложь;
	
	Если СтруктураВерсииПакета.Редакция > СтруктураТекущейВерсии.Редакция Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция > СтруктураТекущейВерсии.Подредакция Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция = СтруктураТекущейВерсии.Подредакция И СтруктураВерсииПакета.Версия > СтруктураТекущейВерсии.Версия Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Если НЕ ВерсияПакетаБольшеТекущейВерсии И СтруктураВерсииПакета.Редакция = СтруктураТекущейВерсии.Редакция И СтруктураВерсииПакета.Подредакция = СтруктураТекущейВерсии.Подредакция И СтруктураВерсииПакета.Версия = СтруктураТекущейВерсии.Версия И СтруктураВерсииПакета.Сборка > СтруктураТекущейВерсии.Сборка Тогда
		ВерсияПакетаБольшеТекущейВерсии = Истина;
	КонецЕсли;
	
	Возврат ВерсияПакетаБольшеТекущейВерсии
	
КонецФункции

Функция ПоискОдинаковогоНомераУСправочникаИлиДокументаДляЦентральногоУзла(ОбъектXDTOКонфигурации, КодУзла, ОбъектМетаданных) Экспорт
	
	ЗаписьНовогоНомера = Ложь;
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		СсылкаДокументаНаСерверномУзле = НайтиДокументПоНомеру(ОбъектМетаданных.Имя, ОбъектXDTOКонфигурации.Number);
		Если СсылкаДокументаНаСерверномУзле = Неопределено Тогда
			ЗаписьНовогоНомера = Ложь;
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ОбъектXDTOКонфигурации.Ref, ОбъектXDTOКонфигурации.Number);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
		ИначеЕсли СсылкаДокументаНаСерверномУзле.УникальныйИдентификатор() <> ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор() Тогда
			ЗаписьНовогоНомера = Истина;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) И ТипЗнч(ОбъектXDTOКонфигурации.Ref) <> Тип("СправочникСсылка.СтавкиНДСМП") И ТипЗнч(ОбъектXDTOКонфигурации.Ref) <> Тип("СправочникСсылка.КассыККММП") Тогда
		
		СсылкаСправочникаНаСерверномУзле = НайтиСправочникПоКоду(ОбъектМетаданных.Имя, ОбъектXDTOКонфигурации.Code);
		Если СсылкаСправочникаНаСерверномУзле = Неопределено Тогда
			ЗаписьНовогоНомера = Ложь;
			СтруктураЗаписи = Новый Структура("КодУзла, Ссылка, Номер", КодУзла, ОбъектXDTOКонфигурации.Ref, ОбъектXDTOКонфигурации.Code);
			РегистрыСведений.НомераСправочниковИДокументовДляИзмененияНаКлиентскомУзлеМП.ЗаписатьИнформацию(СтруктураЗаписи);
		ИначеЕсли СсылкаСправочникаНаСерверномУзле.УникальныйИдентификатор() <> ОбъектXDTOКонфигурации.Ref.УникальныйИдентификатор() Тогда
			ЗаписьНовогоНомера = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаписьНовогоНомера
	
КонецФункции

Функция НайтиДокументПоНомеру(ИмяДокумента, Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИмяДокумента КАК ИмяДокумента
	|ГДЕ
	|	ИмяДокумента.Номер = &Номер";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Ссылка = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка
	
КонецФункции

Функция НайтиСправочникПоКоду(ИмяСправочника, Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника
	|ГДЕ
	|	ИмяСправочника.Код = &Код";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Ссылка = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка
	
КонецФункции

Функция ПолучитьМассивВсехУзловДляРегистрации() 
	
	МассивУзловДляРегистрации = Новый Массив;
	
	Выборка = ПланыОбмена.СинхронизацияМП.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ПланыОбмена.СинхронизацияМП.ЭтотУзел() Тогда
			МассивУзловДляРегистрации.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивУзловДляРегистрации;
	
КонецФункции

#КонецОбласти

#Область ЗапросыКТаблицеРегистрацийДляКлиентскогоУзла

Функция ЗапросКСправочнику(Ссылка, ИмяСправочника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяСправочникаИзменения.Узел.Ссылка КАК УзелСсылка,
	|	ИмяСправочникаИзменения.НомерСообщения КАК НомерСообщения,
	|	ИмяСправочникаИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИмяСправочника.Изменения КАК ИмяСправочникаИзменения
	|ГДЕ
	|	ИмяСправочникаИзменения.Узел.Ссылка = &Узел
	|	И ИмяСправочникаИзменения.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ЗапросКДокументу(Ссылка, ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяДокументаИзменения.Узел.Ссылка КАК УзелСсылка,
	|	ИмяДокументаИзменения.НомерСообщения КАК НомерСообщения,
	|	ИмяДокументаИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИмяДокумента.Изменения КАК ИмяДокументаИзменения
	|ГДЕ
	|	ИмяДокументаИзменения.Узел.Ссылка = &Узел
	|	И ИмяДокументаИзменения.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ЗапросККонстанте(ИмяКонстанты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяКонстантыИзменения.Узел.Ссылка КАК УзелСсылка,
	|	ИмяКонстантыИзменения.НомерСообщения КАК НомерСообщения
	|ИЗ
	|	Константа.ИмяКонстанты.Изменения КАК ИмяКонстантыИзменения
	|ГДЕ
	|	ИмяКонстантыИзменения.Узел.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяКонстанты", ИмяКонстанты);
	
	Запрос.УстановитьПараметр("Ссылка", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ЗапросКРегиструСведений(ОбъектXDTOВыгрузки, ИмяРегистраСведений, ТипОбъекта)
	
	ИзмеренияРегистраСведений = Метаданные.РегистрыСведений[ИмяРегистраСведений].Измерения;
	
	FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
	FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
	
	СовокупностьИзмерений = Новый Структура;
	Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
		СовокупностьИзмерений.Вставить(FilterItemВыгрузки.Name, FilterItemВыгрузки.Value);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ИмяРегистраСведений.Изменения КАК ИмяРегистраСведенийИзменения";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраСведений", ИмяРегистраСведений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПродолжитьЦикл = Ложь;
		
		Для каждого Измерение Из ИзмеренияРегистраСведений Цикл
			Если ВыборкаДетальныеЗаписи[Измерение.Имя] <> СовокупностьИзмерений[Измерение.Имя] Тогда
				ПродолжитьЦикл = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Метаданные.РегистрыСведений[ИмяРегистраСведений].ОсновнойОтборПоПериоду Тогда
			Если ВыборкаДетальныеЗаписи.Период <> СовокупностьИзмерений.Period Тогда
				ПродолжитьЦикл = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null Тогда
			ПродолжитьЦикл = Истина;
		КонецЕсли;
		
		Если ПродолжитьЦикл Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ЗапросКРегиструНакопления(ОбъектXDTOВыгрузки, ИмяРегистраНакопления, ТипОбъекта)
	
	FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
	FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
	
	Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
		Регистратор = FilterItemВыгрузки.Value;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмяРегистраНакопленияИзменения.Узел КАК Узел,
	|	ИмяРегистраНакопленияИзменения.НомерСообщения КАК НомерСообщения,
	|	ИмяРегистраНакопленияИзменения.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ИмяРегистраНакопления.Изменения КАК ИмяРегистраНакопленияИзменения
	|ГДЕ
	|	ИмяРегистраНакопленияИзменения.Узел.Ссылка = &Узел";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистраНакопления", ИмяРегистраНакопления);
	
	Запрос.УстановитьПараметр("Узел", ПланыОбмена.СинхронизацияМП.НайтиПоКоду("001").Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.НомерСообщения = Null ИЛИ ВыборкаДетальныеЗаписи.Регистратор <> Регистратор Тогда
			Продолжить;
		КонецЕсли;
		Результат = Истина;
		Прервать;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти
