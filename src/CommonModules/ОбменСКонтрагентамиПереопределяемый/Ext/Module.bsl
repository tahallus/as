

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкаИнтеграцииЭлектронныхДокументов

// Вызывается при определении типов электронных документов, которые можно формировать или отражать в учете в конфигурации.
// Для добавления типа электронного документа в коллекцию необходимо использовать процедуру см. ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента.
//
// Параметры:
//  ИспользуемыеТипы - Соответствие - типы актуальных электронных документов.
//
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт
	
	// Для обмена по форматам ФНС.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().ТоварнаяНакладная);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().АктВыполненныхРабот);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().СчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().КорректировочныйСчетФактура);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().СоглашениеОбИзмененииСтоимости);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().АктНаПередачуПрав);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().УПД);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().УКД);
	
	// Для обмена по форматам CML 2.
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().СчетНаОплату);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().ЗаказТовара);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().ОтветНаЗаказ);
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ОбменСКонтрагентами.ТипыДокументов().КаталогТоваров);
	
КонецПроцедуры

// Определяет возможность использования прямого обмена в конфигурации.
//
// Параметры:
//  Использовать - Булево - признак использования прямого обмена в конфигурации.
//                          Значение по умолчанию - Ложь.
//
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
КонецПроцедуры

// Определяет состояние использования конфигурацией внутренних электронных документов.
//
// Параметры:
//  Использовать - Булево - признак использования внутреннего ЭДО в конфигурации.
//                          Значение по умолчанию - Истина.
//
//@skip-warning
Процедура РазрешеноИспользоватьВнутреннийЭДО(Использовать) Экспорт
	Использовать = Ложь;
КонецПроцедуры

// Определяет список документов конфигурации (являющихся основаниями электронных документов),
// в модулях форм которых в обработчике события
// ПослеЗаписи размещен вызов процедуры ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, показывающей
// список накопленных в процессе записи ошибок в форме, которая предоставляет инструменты их исправления.
// Если в модуле формы документа в обработчике события ПослеЗаписи не размещен вызов процедуры
// ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, ошибки будут выведены пользователю стандартным способом.
//
// Параметры:
//   СписокДокументов - Массив Из ОбъектМетаданных - объекты метаданных, в модуле форм которых в обработчике
//                               события ПослеЗаписи размещен вызов см. ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента.
//
// Пример:
//  СписокДокументов.Добавить(Метаданные.Документы.ЗаказПокупателя);
//
Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	
КонецПроцедуры

// Определяет список идентификаторов печатных форм докумнетов,
// исключаемых из списка доступных для формирования документов из печатных форм.

// Параметры:
//   СписокИдентификаторов - Массив Из Строка - идентификаторы печатных форм.
//
//@skip-warning
Процедура ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(СписокИдентификаторов) Экспорт
	
КонецПроцедуры

// Определяет необходимость вывода в интерфейсах настроек отправки электронных документов опций формирования первичных /
// корректировочных документов и счетов-фактур в составе единого документа (т.е. использования УПД / УКД).
// 
// Параметры:
// 	Использовать - Булево - Выходной параметр. Необходимо присвоить Истина, в случае, если прикладное решение
// 	                        самостоятельно определяет для каждого экземпляра учетного документа необходимость формирования 
// 	                        универсальных документов (УПД / УКД) - см. ЗаполнитьПараметрыЭДПоИсточнику, либо не использует их.
//
//@skip-warning
Процедура ИспользованиеНастройкиФормированияУниверсальныхДокументов(Использовать = Истина) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеОбъектовУчетаОбъектамПодсистемы

// Заполняет соответствие исходящих типов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеТиповЭлектронныхДокументовДокументамИБ - Соответствие - перечень типов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - см. ОбменСКонтрагентами.ТипыДокументов - тип электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хозяйственной операции).
//
Процедура СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(СоответствиеТиповЭлектронныхДокументовДокументамИБ) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ТоварнаяНакладная,         НСтр("ru = 'Реализация товаров'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктВыполненныхРабот,         НСтр("ru = 'Реализация услуг'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СоглашениеОбИзмененииСтоимости, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура (корректировка)'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтветНаЗаказ,           НСтр("ru = 'Заказ поставщику'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ЗаказТовара,            НСтр("ru = 'Заказ покупателя'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ПрайсЛист,              НСтр("ru = 'Прайс-лист'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.СчетНаОплату,           НСтр("ru = 'Счет на оплату'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.КаталогТоваров,         НСтр("ru = 'Каталог товаров'"));
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.УПД, НСтр("ru = 'Акты, накладные, счета-фактуры'"));
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.УКД, НСтр("ru = 'Акты, накладные, счета-фактуры (Корректировка)'"));
	
	СоответствиеТиповЭлектронныхДокументовДокументамИБ.Вставить(ТипыДокументов.ОтчетОПродажахКомиссионногоТовара, "");
	
КонецПроцедуры

// Задает соответствие типов и представлений объектов учета по типу электронного документа.
//
// Параметры:
//  ТипДокумента          - см. ОбменСКонтрагентами.ТипыДокументов   - тип электронного документа.
//  ОписанияОбъектовУчета - СписокЗначений - список ссылок на объекты учета. В качестве ключа задается пустая ссылка
//                          объекта, в качестве представления представление объекта учета, которое может быть показано пользователю.
//
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	
	Если ТипДокумента = ТипыДокументов.ТоварнаяНакладная
		ИЛИ ТипДокумента = ТипыДокументов.АктВыполненныхРабот
		ИЛИ ТипДокумента	= ТипыДокументов.АктНаПередачуПрав Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.ПриходнаяНакладная.ПустаяСсылка(),
			Метаданные.Документы.ПриходнаяНакладная.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ТипДокумента	= ТипыДокументов.СчетНаОплату Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.СчетНаОплатуПоставщика.ПустаяСсылка(), 
			Метаданные.Документы.СчетНаОплатуПоставщика.Представление());
		
	ИначеЕсли ТипДокумента	= ТипыДокументов.ЗаказТовара Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.ЗаказПокупателя.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПокупателя.Представление());
		
	ИначеЕсли ТипДокумента	= ТипыДокументов.ОтветНаЗаказ Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.РеквизитыОрганизации Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
			
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		ОписанияОбъектовУчета.Добавить(
			Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());

	КонецЕсли;
		
КонецПроцедуры

// Выполняет получение соответствия ссылки на контрагента по связанному объекту.
// Используется для получения контрагента в случае если его функцию может выполнять другой объект конфигурации.
// Например при использовании опции прикладного решения ИспользоватьПартнеровКакКонтрагентов
// 
// Параметры:
//  СсылкаНаОбъект - Массив Из ЛюбаяСсылка - ссылки на объекты.
//  СоответствиеКонтрагентов - Соответствие - соответствие объектов (возвращаемый параметр):
//   * Ключ - ЛюбаяСсылка - ссылка на объект.
//   * Значение - ОпределяемыйТип.КонтрагентБЭД - ссылка на контрагента.
//
Процедура СвязанныеКонтрагенты(СсылкиНаОбъекты, СоответствиеКонтрагентов) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокументов

#КонецОбласти

#Область ФормированиеИОтражениеВУчетеДокументов

#Область УКД2020

// Подготвлявает данные для электронного документа УКД (информация продавца) по приказу ФНС № ММВ-7-15/???@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - СоглашениеОбИзмененииСтоимости, 
//                                    - КорректировочныйСчетФактура, 
//                                    - УКД.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного см. ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УКД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_2020. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУКД2020_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ);
	
КонецПроцедуры

// Подготвлявает данные для электронного документа УКД (информация покупателя) по приказу ФНС № ММВ-7-15/???@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_УКД_ИнформацияПокупателя_2020.
//                            Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область УПД_2019

// Подготавливает данные для электронного документа УПД (информация продавца) по приказу ФНС № ММВ-7-15/820@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктВыполненныхРабот, 
//                                    - АктНаПередачуПрав, 
//                                    - ТоварнаяНакладная, 
//                                    - СчетФактура, 
//                                    - УПД.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УПД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПродавца_2019. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУПД2019_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ);
	
КонецПроцедуры

// Подготавливает данные для электронного документа УПД (информация покупателя) по приказу ФНС № ММВ-7-15/820@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_2019. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУПД = "СЧФДОП" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент,, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			// Заполним основание в СФ
			ДокументыОснованияСчетаФактуры = Новый Массив();
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУПД = "ДОП" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, ПервичныйДокумент,, СпособОбработки, ОписаниеОшибки);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные для электронного документа УПД (информация покупателя) по приказу ФНС № ММВ-7-15/155@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УПД_ИнформацияПокупателя_2019. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУПД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
КонецПроцедуры

#Область УПД

#КонецОбласти

#Область УКД

// Подготвлявает данные для электронного документа УКД (информация продавца) по приказу ФНС № ММВ-7-15/189@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - тип документа, который нужно сформировать. Возможные значения представлены следующими 
//                                   свойствами результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                   - СоглашениеОбИзмененииСтоимости
//                                   - УКД.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "УКД_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт 
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУКД_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ);
	
КонецПроцедуры

// Подготвлявает данные для электронного документа УКД (информация покупателя) по приказу ФНС № ММВ-7-15/189@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания для электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПокупателя. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеУКД_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУКД_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров

// Подготвлявает данные для электронного документа Передача товаров (информация продавца). Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый тип документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                   - ТоварнаяНакладная.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "ПередачаТоваров_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ);
	
КонецПроцедуры

// Подготвлявает данные для электронного документа Передача товаров (информация покупателя). Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Покупатель. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПоТорг12ПокупательФНС(Основания, Данные, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаРезультатовРабот

// Подготвлявает данные для электронного документа Передачи результатов работ (информация продавца) по приказу ФНС № ММВ-7-10/552@.
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый тип документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктВыполненныхРабот.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(Основание, Настройки, Данные, Описание, Отказ);
	
КонецПроцедуры

// Подготвлявает данные для электронного документа Передачи услуг (информация покупателя) по приказу ФНС № ММВ-7-10/552@.
//
// Параметры:
//  Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основания электронного документа.
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Заказчик. Выходной параметр.
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Знач Основания, Данные, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(Основания, Данные, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область АктОРасхождениях

// Подготавливает данные для электронного документа вида "Акт о расхождениях".
//
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  Настройки - ФиксированнаяСтруктура - настройки заполнения данных:
//   * ТипДокумента - Произвольный - ожидаемый вид документа. Доступные значения представлены следующими свойствами
//                                   результата функции см. ОбменСКонтрагентами.ТипыДокументов:
//                                    - АктОРасхождениях.
//   * ВариантыЗаполненияПолей - Структура - пользовательские настройки для заполнения полей:
//    ** ТоварКод - Строка - значение из списка, заданного в ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов
//                           для идентификатора "АктОРасхождениях_ТоварКод".
//  Данные - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                            см. Обработка.ОбменСКонтрагентами.Макет.АктОРасхождениях_2019. Выходной параметр.
//  Описание - Структура - дополнительная информация о документе. Выходной параметр.
//   * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на дополнительные объекты-основания
//                 электронного документа помимо указанного в параметре "Основание".
//  Отказ - Булево - признак отказа от дальнейшего формирования электронного документа.
//                   Информационное сообщение пользователю необходимо формировать самостоятельно.
//
Процедура ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(Знач Основание, Знач Настройки, Данные, Описание, Отказ) Экспорт
	
КонецПроцедуры

// Поиск и создание учетного документа при отражении в учете документа Акт о расхождениях (информация покупателя).
// Формат по приказу ММВ-7-15/423@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.АктОРасхождениях_2019.
//  ДокументУчета	     - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область CML_Форматы

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ПрайсЛист. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ОтчетКомиссионераОПродажах. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоДокумента - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ОтчетКомиссионераОСписании. Выходной параметр.
//  Отказ           - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Интеркампани

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоЭД - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                              см. Обработка.ОбменСКонтрагентами.Макет.ПередачаВозвратТоваровМеждуОрганизациями. Выходной параметр.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание для электронного документа.
//  ДеревоЭД - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                              см. Обработка.ОбменСКонтрагентами.Макет.ПередачаВозвратТоваровМеждуОрганизациями. Выходной параметр.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, ДеревоЭД, Отказ) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ЗапросКоммерческихПредложений

// Подготавливает данные для формирования исходящего электронного документа по Запросу коммерческих предложений.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание электронного документа.
//  ДеревоДанных    - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.ЗапросКоммерческихПредложений.
//                                     Если используется подсистема
//                                     ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчикне вызывается 
//                                     (см. КоммерческиеПредложенияПереопределяемый.ЗаполнитьДанныеПоЗапросуКоммерческихПредложений).
//                                     Выходной параметр.
//  Отказ           - Булево         - Если нужно отказаться от создания электронного документа, необходимо установить
//                                     значение в Истина. После этого дальнейшие действия по формированию документа 
//                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                     необходимости самостоятельно.
//
//@skip-warning
Процедура ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(Знач СсылкаНаОбъект, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Запрос коммерческих предложений от клиента
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - данные электронного документа, см. Обработка.ОбменСКонтрагентами.Макет.ЗапросКоммерческихПредложений.
//  УчетныйДокумент          - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на учетный документ Запрос коммерческих предложений от клиента.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
//@skip-warning
Процедура НайтиСоздатьЗапросКоммерческихПредложений(Знач ДанныеВходящегоДокумента, УчетныйДокумент, СпособОбработки, ОписаниеОшибки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область КоммерческиеПредложения

// Подготавливает данные для формирования исходящего электронного документа по Коммерческому предложению.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - основание электронного документа.
//  ДеревоДанных    - ДеревоЗначений - данные для заполнения электронного документа. Строится по макету 
//                                     см. Обработка.ОбменСКонтрагентами.Макет.КоммерческоеПредложение.
//                                     Если используется подсистема
//                                     ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчикне вызывается 
//                                     (см. КоммерческиеПредложенияПереопределяемый.ЗаполнитьДанныеПоКоммерческомуПредложению).
//                                     Выходной параметр.
//  Отказ           - Булево         - Если нужно отказаться от создания электронного документа, необходимо установить
//                                     значение в Истина. После этого дальнейшие действия по формированию документа 
//                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                     необходимости самостоятельно.
//
//@skip-warning
Процедура ЗаполнитьДанныеПоКоммерческомуПредложению(Знач СсылкаНаОбъект, ДеревоДанных,
		Отказ) Экспорт
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Коммерческое предложение поставщика
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - данные электронного документа, см. Обработка.ОбменСКонтрагентами.Макет.КоммерческоеПредложение.
//  УчетныйДокумент          - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Ссылка на учетный документ Коммерческое предложение поставщика.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
//@skip-warning
Процедура НайтиСоздатьКоммерческоеПредложение(Знач ДанныеВходящегоДокумента, УчетныйДокумент, СпособОбработки, ОписаниеОшибки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкаОтраженияВУчете

// Возвращает идентификаторы способов отражения в учете, доступных при загрузке электронного документа.
//
// Параметры:
//  ТипДокумента   - см. ОбменСКонтрагентами.ТипыДокументов   - тип элекронного документа.
//  СпособыОтраженияВУчете - СписокЗначений - список способов отражения в учете. В качестве значения задается строковый
//                           идентификатор, который будет передан в переопределяемый методы создания учетных документов
//                           по данным электронных. В качестве представления - представление способа отражения, которое
//                           может быть отображено пользователю.
//                           Выходной параметр.
//
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт 
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	Если ТипДокумента = ТипыДокументов.АктВыполненныхРабот  Тогда
		
		СпособыОтраженияВУчете.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		СпособыОтраженияВУчете.Добавить("ДополнительныеРасходы", НСтр("ru = 'Дополнительные расходы'"), Ложь);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		
		СпособыОтраженияВУчете.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		
		СпособыОтраженияВУчете.Добавить("ОпределяетсяПрограммой", НСтр("ru = 'Определяется программой'"), Истина);
		СпособыОтраженияВУчете.Добавить("КорректировкаПоступления", НСтр("ru = 'Корректировка поступления'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		
		СпособыОтраженияВУчете.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
		
		СпособыОтраженияВУчете.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ПрайсЛист Тогда
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
		
		СпособыОтраженияВУчете.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ПередачаТоваровМеждуОрганизациями Тогда	
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
		
		СпособыОтраженияВУчете.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.КорректировочныйСчетФактура Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"),Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетФактура Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
		
		СпособыОтраженияВУчете.Добавить("СчетНаОплатуПоставщика", НСтр("ru = 'Счет на оплату (полученный)'"), Истина);
		
	ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
	ИначеЕсли ТипДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		
		СпособыОтраженияВУчете.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет имя объекта метаданных для способа обработки входящего электронного документа, в случае, если оно не
// совпадает с именем способа обработки.
//
// Параметры:
//  СпособОтраженияВУчете - Строка - один из способов отражения в учете входящего документа, заданный в переопределении. 
//                          см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  ИмяДокумента - Строка - в параметр необходимо поместить имя объекта метаданных, соответствующее переданному способу обработки.
//                          Выходной параметр.
//
Процедура ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОтраженияВУчете, ИмяДокумента) Экспорт 
	
	Если СпособОтраженияВУчете = "ПоступлениеТоваров"
		Или СпособОтраженияВУчете = "ПоступлениеУслуг"
		Или СпособОтраженияВУчете = "ПередачаПрав" Тогда
		
		ИмяДокумента = "ПриходнаяНакладная";
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет заполнение таблицы настройки отражения в учете по имени профиля.
//
// Параметры:
//  ТаблицаПрофиля - ТаблицаЗначений - таблица соответствия способов отражения в учете и электронных документов:
//   * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов() - тип электронного документа.
//   * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип документа.
//                              Указывается при встраивании в конфигурацию собственных типов электронных документов.
//   * СпособОбработки - Строка - идентификатор способа отражения в учете, заданный в см. СпособыОтраженияВУчетеТипаЭлектронногоДокумента.
//  Профиль		   - Строка - имя профиля настроек. Возможные значения:
//   - Автоматически
//   - Вручную
//   - Поставщик
//   - Покупатель
//   - ПервоначальноеЗаполнение
//
//@skip-warning
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля, Профиль) Экспорт 
	
КонецПроцедуры

// Выполняется при проверке возможности создания учетного документа по электронному документу.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, отражаемого в учете.
//   * ЭтоСводныйУПД - Булево - электронный документ имеет формат УПД и содержит несколько продавцов, покупателей и т.п.
//  Отказ - Булево - признак отказа от отражения в учете. Если установить Истина, то документ не отражается в учете
//                   (для изменения). По умолчанию Ложь.
//  Описание - Строка - описание причины отказа от отражения в учете.
//
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлектронныхДокументов

// Событие возникает при формировании электронных документов. Данные электронных документов сформированы, но не записаны.
// На данном этапе можно отказаться от записи электронных документов.
// Событие может выполняться в фоновом задании, в связи с этим не следует помещать данные во временное хранилище.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - сформированные данные электронных документов.
//    * Ключ - Число - ключ связи с данными для проверки. Используется для отказа от записи электроного документа
//                     при произвольной обработке результатов проверок.
//    * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов()
//    * ОписаниеФайла
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументов
//    * Отказ - Булево - признак отказа от записи электроного документа при обработке результата по умолчанию.
//    * ПричинаОтказа - Строка - описание причины отказа для отображения пользователю при обработке результата по умолчанию.
//  СтандартнаяОбработка - Булево - признак обработки результата проверки по умолчанию.
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//     Используется при нестадартной обработке (см. ПриОбработкеРезультатовПроверокФормированияДокументовЭДО).
//
//@skip-warning
Процедура ПриПроверкеФормированияДокументовЭДО(ДанныеДляПроверки, СтандартнаяОбработка, РезультатыПроверок) Экспорт
	
КонецПроцедуры

// Событие возникает при нестандартной обработке результатов проверок данных электронных документов при формировании.
// Т.е. в процедуре см. ПриПроверкеФормированияДокументовЭДО флаг СтандартнаяОбработка установлен в Ложь.
//
// Параметры:
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//  ПараметрыОбработкиНаКлиенте - Структура - параметры для передачи на клиент. Значения свойств должны сериализоваться.
//      См. ОбменСКонтрагентамиКлиентПереопределяемый.ПриОбработкеРезультатовПроверокФормированияДокументовЭДО
//
//@skip-warning
Процедура ПриОбработкеРезультатовПроверокФормированияДокументовЭДО(РезультатыПроверок, ПараметрыОбработкиНаКлиенте) Экспорт
	
КонецПроцедуры

// Событие возникает при формировании ответов по электронным документам. Данные ответов по электронным документам сформированы, но не записаны.
// На данном этапе можно отказаться от записи ответов по электронным документам.
// Событие может выполняться в фоновом задании, в связи с этим не следует помещать данные во временное хранилище.
//
// Параметры:
//  ДанныеДляПроверки - ТаблицаЗначений - сформированные данные электронных документов.
//    * Ключ - Число - ключ связи с данными для проверки. Используется для отказа от записи электроного документа
//                     при произвольной обработке результатов проверок.
//    * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов()
//    * ОписаниеФайлаИнформацииОтправителя
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОписаниеФайлаИнформацииПолучателя
//      ** ДвоичныеДанные - ДвоичныеДанные - данные xml.
//      ** ИмяФайла - Строка - имя файла с расширением.
//      ** Формат - см. ОбменСКонтрагентами.ФорматыДокументов()
//    * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументов
//    * Отказ - Булево - признак отказа от записи электроного документа при обработке результата по умолчанию.
//    * ПричинаОтказа - Строка - описание причины отказа для отображения пользователю при обработке результата по умолчанию.
//  СтандартнаяОбработка - Булево - признак обработки проверки по умолчанию.
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//     Используется при нестадартной обработке (см. ПриОбработкеРезультатовПроверокФормированияДокументовЭДО).
//
//@skip-warning
Процедура ПриПроверкеФормированияОтветовПоДокументамЭДО(ДанныеДляПроверки, СтандартнаяОбработка, РезультатыПроверок) Экспорт
	
КонецПроцедуры

// Событие возникает при нестандартной обработке результатов проверок данных сформированных ответов по электронным документам.
// Т.е. в процедуре см. ПриПроверкеФормированияОтветовПоДокументамЭДО флаг СтандартнаяОбработка установлен в Ложь.
//
// Параметры:
//  РезультатыПроверок - Структура - результаты проверок для произвольной обработки.
//  ПараметрыОбработкиНаКлиенте - Структура - параметры для передачи на клиент. Значения свойств должны сериализоваться.
//      См. ОбменСКонтрагентамиКлиентПереопределяемый.ПриОбработкеРезультатовПроверокФормированияОтветовПоДокументамЭДО
//
//@skip-warning
Процедура ПриОбработкеРезультатовПроверокФормированияОтветовПоДокументамЭДО(РезультатыПроверок, ПараметрыОбработкиНаКлиенте) Экспорт
	
КонецПроцедуры

// Событие возникает после формирования электронного документа (в том числе входящего).
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после утверждения электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеУтвержденияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после полного подписания электронного документа.
// Для документов, отправляемых контрагентам, событие возникает после полного подписания на стороне отправителя.
// Для документов, получаемых от контрагентов, событие возникает после полного подписания на стороне получателя.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеПодписанияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после успешного получения ответа (утверждение или отклонение) по электронному документу.
// 
//Параметры:
// ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ
// ДокументУтвержден - Булево - Истина, если контрагент утвердил документ, Ложь - если отклонил.
Процедура ПослеПолученияОтветаОтКонтрагентаПоДокументу(ЭлектронныйДокумент, ДокументУтвержден) Экспорт
	
КонецПроцедуры

// Событие возникает после успешного завершения электронного документооборота.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
//@skip-warning
Процедура ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после после аннулирования электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//@skip-warning
Процедура ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Событие возникает после изменения списка объектов учета, привязанных к электронному документу (при отражении в учете,
// подборе объекта учета, разрыве связи с объектом учета и т.д.).
// 
// Параметры:
// 	ЭлектронныйДокумент     - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                          - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
// 	ДобавленныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета, добавленных
// 	                            в список связанных с электронным документом.
// 	УдаленныеОбъектыУчета   - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - набор объектов учета, удаленных
// 	                            из списка связанных с электронным документом.
//@skip-warning
Процедура ПослеИзмененияОтраженияВУчете(ЭлектронныйДокумент, ДобавленныеОбъектыУчета, УдаленныеОбъектыУчета) Экспорт
	
КонецПроцедуры

// Обработчик ключевых событий по электронному счету-фактуре, описанных в приказе от 10 ноября 2015 г. N 174н.: 
// получение ПДО, ПДП, ИоП, ПДОИоП.
// 
// Параметры:
//  ДокументыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - документы учета, привязанные к электронному счету-фактуре.
// 	Событие - Строка - идентфикатор события. Возможные события: 
// 	 * "ПолученПДО" - получено подтверждение даты отправки.
// 	 * "ПолученПДП" - получено подтверждение даты получения.
// 	 * "ПолученИоП" - получено извещение о получении электронного счета-фактуры.
// 	 * "ПолученИоППДО" - получено подтверждение даты отправки извещения о получении электронного счета-фактуры.
// 	СостояниеОбработки - Структура:
//	 * ПДППолучен - Булево - Истина, если по документу получен ПДП
//	 * ДатаПоступленияСФОператоруОтПродавца - Дата - дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
//     указанная в подтверждении (ПДП) этого Оператора ЭДО
//   * ПДОПолучен - Булево - Истина, если по документу получен ПДО
//	 * ДатаОтправкиСФПокупателюОператором - Дата - дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
//     указанная в подтверждении (ПДОЭСФ) Оператора ЭДО
//   * ИоППолучен - Булево - Истина, если по документу получено извещение о его получении покупателем.
//	 * ИоППДОПолучен - Булево - Истина, если по документу получено подтверждение даты отправки изввещения о получении.  
Процедура ПослеВозникновенииСобытияПоЭлектронномуСчетуФактуре(ДокументыУчета, Событие, СостояниеОбработки) Экспорт
	
	// Выделим счет-фактуру из документов учета
	СчетФактура = Неопределено;
	Для Каждого ДокументУчета Из ДокументыУчета Цикл
		Если ТипЗнч(ДокументУчета) = Тип("ДокументСсылка.СчетФактура")
			ИЛИ ТипЗнч(ДокументУчета) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			СчетФактура = ДокументУчета;
		КонецЕсли;
	КонецЦикла;
	
	Если СчетФактура = Неопределено Тогда
		// Счет-фактура еще не привязан к электронному документу - прерываем обработку.
		Возврат;
	КонецЕсли;
	
	Если Событие = "ПолученПДП" Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО.
		// Приказ Минфина России от 10.11.2015 N 174н.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактура");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СчетФактура);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			СчетФактура = СчетФактура.ПолучитьОбъект();
			СчетФактура.ДатаВыставления = СостояниеОбработки.ДатаПоступленияСФОператоруОтПродавца;
			СчетФактура.КодСпособаВыставления = 2;
			СчетФактура.ВыставленСтатус = 1;
			СчетФактура.Записать(?(СчетФактура.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли Событие = "ПолученПДО" Тогда
	
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО.
		// Приказ Минфина России от 10.11.2015 N 174н.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураПолученный");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СчетФактура);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			СчетФактура = СчетФактура.ПолучитьОбъект();
			
			ДатаДоИзменения = СчетФактура.Дата;
			СчетФактура.Дата = СостояниеОбработки.ДатаОтправкиСФПокупателюОператором;
			РазностьЛет = Год(ДатаДоИзменения) - Год(СчетФактура.Дата);
			Если РазностьЛет <> 0 Тогда
				СчетФактура.УстановитьНовыйНомер();
			КонецЕсли;
			
			СчетФактура.КодСпособаВыставления = 2;
			СчетФактура.Записать(?(СчетФактура.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	ИначеЕсли Событие = "ПолученИоП" Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактура");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СчетФактура);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			СчетФактура = СчетФактура.ПолучитьОбъект();
			
			ДатаВыставленияЭСФ = СостояниеОбработки.ДатаПоступленияСФОператоруОтПродавца;
			
			Если ЗначениеЗаполнено(ДатаВыставленияЭСФ) И (НЕ СчетФактура.ВыставленСтатус = 1 ИЛИ СчетФактура.КодСпособаВыставления <> 2
				ИЛИ СчетФактура.ДатаВыставления <> ДатаВыставленияЭСФ) Тогда
				
				СчетФактура.ДатаВыставления = ДатаВыставленияЭСФ;
				СчетФактура.КодСпособаВыставления = 2;
				СчетФактура.ВыставленСтатус = 1;
				
				СчетФактура.Записать(?(СчетФактура.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	ИначеЕсли Событие = "ПолученИоППДО" Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураПолученный");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СчетФактура);
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			СчетФактура = СчетФактура.ПолучитьОбъект();
			
			Если СчетФактура.КодСпособаВыставления <> 2 Тогда
				
				СчетФактура.КодСпособаВыставления = 2;
				СчетФактура.Записать(?(СчетФактура.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПрикладныхДанных

// Процедура заполняет данные для заполнения заявки на получение уникального идентификатора абонента, добавления 
// сертификата абонента
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на элемент справочника Организации;
//  ДанныеОрганизации - Структура - данные об организации:
//    * Индекс - Строка - почтовый индекс организации.
//    * КодРегиона - Строка - код региона организации.
//    * Регион - Строка - регион организации.
//    * Район - Строка - Район.
//    * Город - Строка - Город.
//    * НаселенныйПункт - Строка - населенный пункт расположения организации.
//    * Улица - Строка - Улица.
//    * Дом - Строка - Дом.
//    * Корпус - Строка - Корпус.
//    * Квартира - Строка - Квартира.
//    * Телефон - Строка - телефон организации.
//    * Наименование - Строка - наименование организации.
//    * ИНН - Строка - ИНН организации.
//    * КПП - Строка - КПП организации.
//    * ОГРН - Строка - ОГРН организации.
//    * КодИМНС - Строка - код ИМНС организации.
//    * ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо".
//    * Фамилия - Строка - фамилия руководителя.
//    * Имя - Строка - имя руководителя.
//    * Отчество - Строка - отчество руководителя.
//    * Должность - Строка - должность руководителя.
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
			"НаименованиеПолное, ИНН, КПП, ОГРН, ЮридическоеФизическоеЛицо");
	
	ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
	
	ДанныеОрганизации.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
	ДанныеОрганизации.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
	ДанныеОрганизации.Вставить("КПП"            , СвойстваОрганизации.КПП);
	ДанныеОрганизации.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
	ДанныеОрганизации.Вставить("КодИМНС"        , "");
	
	Если ОрганизацияФизЛицо Тогда
		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
	Иначе
		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
	КонецЕсли;
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация, ВидКонтактнойИнформации, ТекущаяДатаСеанса(), Ложь);
	
	Если АдресаОрганизации.Количество() > 0 Тогда
		
		АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(АдресаОрганизации[0].Значение);
		Если АдресСтруктурой.Свойство("Индекс") Тогда
			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Регион") Тогда
			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("КодРегиона") Тогда
			ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Район") Тогда
			ДанныеОрганизации.Район = АдресСтруктурой.Район;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Город") Тогда
			ДанныеОрганизации.Город = АдресСтруктурой.Город;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Улица") Тогда
			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
			ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
		КонецЕсли;
		Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
			ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса()));
		
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

#КонецОбласти

#Область ПрикладныеТипыЭлектронныхДокументов

// Определяет прикладные типы электронных документов.
//
// Параметры:
//  ТипыЭлектронныхДокументов - Массив Из ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - используемые прикладные 
//                              типы электронных документов.
//
Процедура ПриОпределенииПрикладныхТиповЭлектронныхДокументов(ТипыЭлектронныхДокументов) Экспорт
	
КонецПроцедуры

// Определяет сведения о прикладных форматах электронных документов.
// 
// Параметры:
//  ТаблицаФорматов - ТаблицаЗначений - Таблица сведений о прикладных форматах.
//     * ПрикладнойТипДокумента      - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип электронного документа.
//     * ИдентификаторФормата        - Строка - Текстовый идентификатор формата,
//          используется для идентификации формата в программном коде библиотеки.
//     * ПредставлениеФормата        - Строка - Пользовательское представление для вывода пользователю.
//     * Отключен                    - Булево - Если указано "Да", то формат не используется.
//     * ДатаНачалаДействия          - Дата - Дата, начиная с которой формат вступает в силу.
//     * ДатаОкончанияДействия       - Дата - Дата, после которой формат не должен использоваться.
//     * УсловиеВыводаПредупреждения - Строка - Задает условие вывода предупреждения для входящих документов.
//          Возможные значения:
//          ""ДатаФормированияЭлектронногоДокумента"" - предупреждение выводится только в том случае,
//          если электронный документ сформирован вне периода действия формата.
//          Пустая строка - предупреждение выводится в любом случае.
//     * ТекстПредупрежденияДляВходящегоДокумента - Строка - Содержит текст предупреждения,
//          который будет выводиться в форме визуализации входящего документа, сформированного по данному формату.
//          Используется для утративших силу форматов и для других предупреждений.
//          Может содержать в тексте символы ""%"", которые будут заменены на параметры из колонки ""ПараметрыПредупрежденияДляВходящегоДокумента"".
//          Если не задано, предупреждение выводиться не будет. Локализуется.
//
Процедура ПриОпределенииСведенийОПрикладныхФорматах(ТаблицаФорматов) Экспорт
	
КонецПроцедуры

// Определяет настройки регламента электронного документооборота для прикладных типов электронных документов.
//
// Параметры:
//  Настройки - Структура - 
//     * ТребуетсяИзвещениеОПолучении - Булево - По данному признаку, на стороне получателя определяется необходимость 
//                                      отправки извещения о получении.
//     * ТребуетсяОтветнаяПодпись     - Булево - По данному признаку, на стороне получателя определяется, требуется 
//                                      ответное подписание документа.
//     * РедактироватьПодпись         - Булево - Признак редактирования параметра "Подписывать документ" в форме 
//                                      настроек регламента ЭДО.
//     * РедактироватьИзвещение       - Булево - Признак редактирования параметра "Ожидать извещение о получении" в 
//                                      форме настроек регламента ЭДО.
//     * РедактироватьОтветнуюПодпись - Булево - Признак редактирования параметра "Ожидать ответную подпись" в форме 
//                                      настроек регламента ЭДО.
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип
//                             электронного документа.
//  ВерсияФормата            - Строка - Текстовый идентификатор формата соответствующего прикладного вида электронного
//                             документа. См. ПриОпределенииСведенийОПрикладныхФорматах
//  СтандартнаяОбработка     - Булево - Признак использования настроек регламента по умолчанию.
//                             Если Ложь, то используются данные из параметра Настройки. По умолчанию Истина.
//
Процедура ПриОпределенииНастроекРегламентаЭДО(Настройки, ТипЭлектронногоДокумента, ВерсияФормата, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет соответствие списка учетных документов прикладному типу электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//  ТипыУчетныхДокументов    - СписокЗначений - список ссылок на объекты учета. В качестве ключа задается пустая ссылка
//                             объекта, в качестве представления представление объекта учета, которое может быть показано пользователю.
//
Процедура ПриОпределенииТиповУчетныхДокументовПоПрикладномуТипуЭлектронногоДокумента(ТипЭлектронногоДокумента, ТипыУчетныхДокументов) Экспорт
	
КонецПроцедуры

// Заполняет соответствие рикладных типов исходящих электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеТиповДокументам - Соответствие - перечень типов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хозяйственной операции).
//
Процедура ПриОпределенииСоответствияИсходящихПрикладныхТиповДокументамУчета(СоответствиеТиповДокументам) Экспорт 
	
КонецПроцедуры

// Возвращает идентификаторы способов отражения в учете, доступных при загрузке электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип элекронного документа.
//  СпособыОбработки         - СписокЗначений - список способов отражения в учете. В качестве значения задается строковый
//                             идентификатор, который будет передан в переопределяемый методы создания учетных документов
//                             по данным электронных. В качестве представления - представление способа отражения, которое
//                             может быть отображено пользователю.
//                             Выходной параметр.
//
Процедура ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента(ТипЭлектронногоДокумента, СпособыОбработки) Экспорт 
	
КонецПроцедуры

// Предназначена для распределения объектов, к которым подключаются команды ЭДО, по группам.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО. Для каждого из ключей указывается массив полных имен 
//                    объектов метаданных, к которым подключаются команды ЭДО.
//    Исходящие    - Массив Из Строка - объекты для команд работы с исходящими документами.
//    Входящие     - Массив Из Строка - объекты для команд работы со входящими документами.
//    БезПодписи   - Массив Из Строка - объекты для команд выполнения ЭДО без подписи.
//    Интеркампани - Массив Из Строка - объекты для команд обмена между организациями в рамках одной базы.
//
// Пример:
//  СоставКомандЭДО.Исходящие.Добавить("Документ.ТранспортнаяНакладная");
//	СоставКомандЭДО.Исходящие.Добавить("Документ.Извещение");
//
Процедура ПриОпределенииСоставаКомандЭДООснованияПрикладногоЭлектронногоДокумента(СоставКомандЭДО) Экспорт
	
КонецПроцедуры

// Получает описание объекта учета, являющегося основанием прикладного электронного документа.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент.
//   * Дата - Дата - дата.
//   * Номер - Строка - номер.
//   * СуммаДокумента - Число - сумма документа.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
//
Процедура ПриПолученииОписанияОснованияПрикладногоЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Предназначена для получения параметров ЭДО по ссылке на объект учета
//
// Параметры:
//  Источник  - Объект, ЛюбаяСсылка - документ или справочник источника.
//  Параметры - Структура - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип электронного документа.
//    * Входящий               - Булево - Признак того, что электронный документ является входящим.
//    * Организация            - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент             - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента     - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику(Источник, Параметры) Экспорт
	
КонецПроцедуры

// Определяет параметры прикладного электронного документа по данным файла.
//
// Параметры:
//  ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла - Строка - Расширение файла без точки.
//  Параметры       - Структура - Параметры прикладного электронного документа.
//     * ТипЭлектронногоДокумента         - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип
//                                          электронного документа.
//     * НаименованиеДокументаОтправителя - Строка - Наименование документа по данным отправителя.
//     * НомерДокументаОтправителя        - Строка - Номер документа по данным отправителя.
//     * ДатаДокументаОтправителя         - Дата  - Дата документа по данным отправителя.
//     * СуммаДокумента                   - Число - Сумма документа по данным отправителя 
//
Процедура ПриОпределенииПараметровФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, Параметры) Экспорт
	
КонецПроцедуры

// Формирует файл прикладного электронного документа.
//
// Параметры:
//  ПараметрыФормирования - Структура - данные для формирования файла электронного документа.
//     * СсылкаНаОбъект           - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект, по которому необходимо
//                                  сформировать электронный документ.
//     * ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - тип формируемого электронного 
//                                  документа.
//  РезультатФормирования - Структура - данные, которые необходимо заполнить по результатам формирования файла
//                          электронного документа.
//     * ДанныеФайла                      - ДвоичныеДанные - файл электронного документа.
//     * ИмяФайла                         - Строка - Имя файла без расширения.
//     * Расширение                       - Строка - Расширение файла (без точки вначале).
//     * НаименованиеДокументаОтправителя - Строка - наименование электронного документа в информационной базе.
//     * НомерДокументаОтправителя        - Строка - номер электронного документа в информационной базе.
//     * ДатаДокументаОтправителя         - Строка - дата электронного документа в информационной базе.
//     * СуммаДокумента                   - Число - сумма электронного документа в информационной базе.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПриФормированииФайлаПрикладногоЭлектронногоДокумента(ПараметрыФормирования, РезультатФормирования, Отказ) Экспорт
	
КонецПроцедуры

// Определяет необходимость использования механизма сопоставления номенклатуры контрагентов для прикладного типа 
// электронного документа.
//
// Параметры:
//  ТипЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
//  Использовать             - Булево - Признак использования сопоставления номенклатуры контрагентов. По умолчанию Ложь.
//
//@skip-warning
Процедура ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(ТипЭлектронногоДокумента, Использовать) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при отражении в учете прикладного электронного документа, содержащего информацию для сопоставления номенклатуры.
// Позволяет определить необходимость сопоставления номенклатуры для указанного способа обработки электронных документов,
// а также отказаться от отражения в учете, если сопоставление не выполнено.
// Если в электронном документе не передана информация для сопоставления,
// то отражение в учете будет продолжено независимо от настроек.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  Документ - Структура - данные электронного документа (только чтение):
//   * СпособОбработки - Строка - способ отражения в учете электронного документа.
//                       См. ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//  Настройки - Структура - настройки сопоставления номенклатуры (для изменения):
//   * ОтражатьТолькоСопоставленные - Булево - признак разрешения отражать в учете только документы с сопоставленной номенклатурой. По умолчанию Истина.
//                                             Если в электронном документе не передана информация для сопоставления,
//                                             то отражение в учете будет продолжено независимо от настроек.
//
//@skip-warning
Процедура ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(Знач Документ, Настройки) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при создании или при повторном заполнении документа учета по данным файла электронного документа.
//
// Параметры:
//  ПараметрыФайлаЭлектронногоДокумента - Структура - Параметры 
//     * ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//     * СпособОбработки - Строка - Способ отражения в учете электронного документа.
//                         См. ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//     * Входящий        - Булево - Признак того, что электронный документ является входящим.
//  СсылкиНаОбъекты - Массив - Документы информационной базы, созданные ранее по электронному документу.
//
Процедура ПриСозданииОбъектовУчетаИзФайлаПрикладногоЭлектронногоДокумента(ПараметрыФайлаЭлектронногоДокумента, СсылкиНаОбъекты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Задает имена связей параметров выбора для полей форм библиотеки, в которых выбирается договор контрагента.
//
// Параметры:
//  ИмяСвязиПоОрганизации  - Строка - Имя связи параметров выбора для связанного поля "Организация",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//  ИмяСвязиПоКонтрагенту  - Строка - Имя связи параметров выбора для связанного поля "Контрагент",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

// Определяет, включать ли прием информационной базой уведомлений от сервиса ЭДО.
// В случае, если использование включено, необходимо обеспечить доступность HTTP-сервиса /hs/events/newdocs.
// В частности, при публикации прикладного решения в модели сервиса необходимо опубликовать HTTP-сервис "ЭДО" с basic-авторизацией.
// Логин и пароль пользователя указаны в методе ОбменСКонтрагентами.СоздатьСлужебногоПользователяОповещенийЭДО.
//
// Параметры:
//  Используется - Булево - признак использования уведомлений в прикладном решении
//
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	Используется = Истина
	
КонецПроцедуры

// Определяет, включать ли функциональную опцию "Использовать внутренние документы" при обновлении.
//
// Параметры:
//   Включать - Булево - если Истина, функциональная опция будет включена.
//
// Пример:
//  Включать = Истина;
//
Процедура ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(Включать) Экспорт
	
	Включать = Ложь;
	
КонецПроцедуры

// Поиск и создание учетных документов при отражении в учете документа УКД (информация продавца). Вызвается для УКД всех
// возможных функций (КСЧФ, КСЧФДИС, ДИС). Приказ по формату в стадии согласования.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.УКД_ИнформацияПродавца_2020
//  СсылкиНаВладельцев	 - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылки на документы учета, если они уже
//                         прикреплены к электронному документу.
//  СпособОбработки		 - Структура - способы сохранения данных в информационной базе, выбранные пользователем. 
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры. См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД.
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьУКД_2020(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция"); 
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУКД = "КСЧФДИС" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУКД = "ДИС" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает сведения физического лица по переданному пользователю ИБ и организации.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.Пользователь - пользователь ИБ.
//  Организация - ОпределяемыйТип.Организация - организация.
//  СведенияФизЛица - Структура - данные физического лица:
//   * ИмяПолное - Строка - полное имя физического лица пользователя, неапример "Иванов Иван Иванович" .
//   * Должность - Строка - занимаемая должность.
//
Процедура СведенияФизЛицаПользователя(Знач Пользователь, Знач Организация, СведенияФизЛица) Экспорт
	
	СведенияФизЛица.ИмяПолное = Пользователь.Наименование; 
	СведенияФизЛица.Должность = "";
	
КонецПроцедуры

// Формирование представления прикладного электронного документа по данным файла.
//
// Параметры:
//  ТабличныйДокумент   - ТабличныйДокумент - Представление прикладного электронного документа.
//  ДанныеФайла         - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  ПараметрыЗаполнения - Структура - Дополнительные параметры для формирования табличного документа.
//     * ВыводитьБанковскиеРеквизиты     - Булево - Значение настройки "Отображать банковские реквизиты",
//            установленной в форме просмотра электронного документа.
//            Если Истина, то в представлении участника ЭДО следует выводить банковские реквизиты.
//     * СкрыватьДопДанные               - Булево - Инвертированное значение настройки "Отображать дополнительную информацию",
//            установленной в форме просмотра электронного документа.
//            Если Ложь, то в табличном документе следует отображать дополнительную информацию, если она есть.
//     * ВыводитьПостраничныйРазделитель - Булево - Признак необходимости выводить постраничный разделитель.
//            Принимает значение Истина при выводе представления электронного документа на печать.
//     * ЭлектронныеПодписи              - Массив - Список установленных подписей.
//        ** ЭлементМассива - Структура - Свойства установленной подписи.
//           *** ОтветнаяПодпись       - Булево - Признак ответной подписи.
//               Производные свойства: см. ЭлектроннаяПодпись.УстановленныеПодписи.
//
Процедура ПриЗаполненииТабличногоДокументаИзФайлаПрикладногоЭлектронногоДокумента(ТабличныйДокумент, ДанныеФайла, ПараметрыЗаполнения) Экспорт
	
КонецПроцедуры

// Заполнение информации о товаре прикладного электронного документа по данным в файла.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  ДанныеФайла       - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла   - Строка - Расширение файла без точки.
//  ИнформациюОТоваре - ТаблицаЗначений - Таблица товаров.
//     * ИД                                    - Строка - Идентификатор товара по данным поставщика.
//     * Наименование                          - Строка - Наименование номенклатуры.
//     * НаименованиеХарактеристики            - Строка - Наименование характеристики.
//     * КодТовара                             - Строка - Код товара.
//     * Артикул                               - Строка - Артикул.
//     * БазоваяЕдиницаКод                     - Строка - Код единицы измерения.
//     * БазоваяЕдиницаНаименование            - Строка - Наименование единицы измерения.
//     * БазоваяЕдиницаНаименованиеПолное      - Строка - Полное наименование единицы измерения.
//     * БазоваяЕдиницаМеждународноеСокращение - Строка - Международное сокращение единицы измерения.
//     * Описание                              - Строка - Произвольное описание товара.
//     * Сопоставление                         - Структура - Параметры сопоставления номенклатуры.
//                                               Заполняется, если необходимо переопределить стандартный механизм.
//        ** Идентификатор    - Строка - Идентификатор товара.
//        ** Наименование     - Строка - Наименование номенклатуры.
//        ** Характеристика   - Строка - Наименование характеристики.
//        ** ЕдиницаИзмерения - Строка - Наименование единицы измерения.
//        ** Артикул          - Строка - Артикул.
//
Процедура ПриЗаполненииИнформацииОТовареИзФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, ИнформациюОТоваре) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при выводе формы настроек регламента ЭДО. Используется для получения возможных вариантов
// заполнения некоторых полей формализованных форматов.
//
// Параметры:
//  ВариантыЗаполненияПолей	 - Структура - описание полей и вариантов их заполнения. В качестве ключа задается идентификатор поля,
//     а в качестве значения - список значений возможных вариантов заполнения.
//     Возможные идентификаторы:
//       * УПД_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//       * ПередачаТоваров_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//
Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
	ВариантыЗаполненияПолей.УПД_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	ВариантыЗаполненияПолей.ПередачаТоваров_ТоварКод.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	
КонецПроцедуры

// Получает запросы, описывающие документы-источники данных для формирования электронного документа указанного типа.
// Запросы используются для указания пользователем формулы заполнения значений доп. полей по данным источника.
// Запрос должен включать в себя отбор по параметру Ссылка.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, для которого производится настройка.
//     * ТипДокумента - см. ОбменСКонтрагентами.ТипыДокументов - тип электронного документа. Могут передаваться
//                                  следующие типы документов:
//                                  АктВыполненныхРабот, ТоварнаяНакладная, СчетФактура, КорректировочныйСчетФактура,
//                                  СоглашениеОбИзмененииСтоимости, АктНаПередачуПрав, УПД, УКД.
//  ТекстЗапроса - Строка - текст запроса, который должен быть использован в конструкторе доп. полей шапки.
//
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса);
	
КонецПроцедуры

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт      //*/
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
	
КонецПроцедуры

#КонецОбласти

// Предназначена для получения параметров ЭДО по ссылке на объект учета
//
// Параметры:
//  Источник                       - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭлектронногоДокумента - Структура - параметры источника, необходимые для определения настроек обмена электронными документами: 
//    * Тип                - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.ТипыДокументов. Используются все ключи, кроме УПД, УКД. Обязательный.
//                           Необходимость формирования УПД, УКД определяется на основании нескольких критериев
//                           (указанный тип, вариант формирования универсальных документов, настройки отправки
//                           электронных документов). 
//    * ФормированиеУниверсальногоДокумента - Произвольный - значение элемента структуры, возвращаемой
//                           см. ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов. Обязательный при указании типов:
//                            - ТоварнаяНакладная
//                            - АктВыполненныхРабот
//                            - АктНаПередачуПрав
//                            - СоглашениеОбИзмененииСтоимости
//                            - СчетФактура
//                            - КорректировочныйСчетФактура
//    * СведенияОПечатныхАналогах - Структура - сведения о печатных аналогах электронных документов:
//     ** Ключ - Строка - Идентификатор печатной формы.
//     ** Значение - Массив Из см. ОбменСКонтрагентами.ФорматыДокументов - форматы документов, являющиеся заменой печатной форме.                         
//    * Направление        - Произвольный - значение элемента структуры возвращаемой
//                           см. ОбменСКонтрагентами.НаправленияДокументов(). Обязательный.
//    * Организация        - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент         - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	НаправленияДокументов = ОбменСКонтрагентами.НаправленияДокументов();
	
	Если ТипИсточника = Тип("ДокументСсылка.РасходнаяНакладная") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		ПараметрыЭД.Тип = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаРеализации(Источник);
		
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Тип) Тогда
			Если Источник.Запасы.Количество() > 0 Тогда
				ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
			Иначе
				ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.Направление = НаправленияДокументов.Входящий;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ПараметрыЭД.Тип = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаКорректировки(Источник);
		
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.Тип			= Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
		ПараметрыЭД.Направление = НаправленияДокументов.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплату") Тогда
		
		ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
		ПараметрыЭД.Направление = НаправленияДокументов.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда 
		
		ПараметрыЭД.Тип =  Перечисления.ТипыДокументовЭДО.ЗаказТовара;
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидОперации");
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
			КонецЕсли;
			ПараметрыЭД.Тип = ВидЭД;
		Иначе
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ;
			КонецЕсли;
			ПараметрыЭД.Тип = ВидЭД;
		КонецЕсли;
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактура") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактура") Тогда
		
		Если УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.Направление = НаправленияДокументов.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ПараметрыЭД.Тип =  Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ДополнительныеРасходы") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ДополнительныеРасходы") Тогда
		
		ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
		ПараметрыЭД.Направление = НаправленияДокументов.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ПараметрыЭД.Тип = Перечисления.ТипыДокументовЭДО.Прочее;
		ПараметрыЭД.Направление = НаправленияДокументов.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.КонтрагентПолучатель;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("Структура") Тогда
		
		// Бизнес-сеть.
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮридическоеФизическоеЛицо");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(Организация);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Произвольный");
	
	ТоварыКаталога.Колонки.Добавить("Сопоставление");
	Для Каждого СтрокаТовара Из ТоварыКаталога Цикл
		
		Сопоставление = Новый Структура;
		Сопоставление.Вставить("Наименование", СтрокаТовара.НоменклатураНаименование);
		Сопоставление.Вставить("Характеристика", СтрокаТовара.ХарактеристикаНаименование);
		Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТовара.БазоваяЕдиницаНаименование);
		Сопоставление.Вставить("Артикул", СтрокаТовара.Артикул);
		Сопоставление.Вставить("НоменклатураИБ", СтрокаТовара.Номенклатура);
		Сопоставление.Вставить("ХарактеристикаИБ", СтрокаТовара.Характеристика);
		Сопоставление.Вставить("УпаковкаИБ", СтрокаТовара.БазоваяЕдиница);
		
		Если ЗначениеЗаполнено(СтрокаТовара.Упаковка) Тогда
			Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТовара.УпаковкаНаименование);
			Сопоставление.Вставить("УпаковкаИБ", СтрокаТовара.Упаковка);
		КонецЕсли;
		
		НаборШтрихкодов = Неопределено;
		Если ТоварыКаталога.Колонки.Найти("Штрихкоды") <> Неопределено Тогда
			Если ТипЗнч(СтрокаТовара.Штрихкоды) = Тип("ТаблицаЗначений") Тогда
				НаборШтрихкодов = СтрокаТовара.Штрихкоды.ВыгрузитьКолонку("Штрихкод");
				Если ЗначениеЗаполнено(НаборШтрихкодов) Тогда
					Сопоставление.Вставить("ШтрихкодыНоменклатуры", НаборШтрихкодов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаборШтрихкодов) Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.Упаковка) Тогда
				ОтборШтрихкодов = Новый Структура;
				ОтборШтрихкодов.Вставить("ЕдиницаИзмерения", СтрокаТовара.Упаковка);
				СтрокаПоиска = СтрокаТовара.Штрихкоды.НайтиСтроки(ОтборШтрихкодов);
				Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
					Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
				КонецЕсли;
			ИначеЕсли НаборШтрихкодов.Количество() = 1 Тогда
				Сопоставление.Вставить("ШтрихкодКомбинации", НаборШтрихкодов[0]);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТовара.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект учета.
//
// Параметры:
//  СтрокаДляЗагрузки - СтрокаДереваЗначений - строка дерева, описывающая данные электронного документа. Реквизиты
//                                             документа содержатся в подчененных строках. Сама строка обладает следующими свойствами:
//    * ВидЭД - см. ОбменСКонтрагентами.ТипыДокументов - используется для определения типа пришедшего документа.
//  ДеревоРазбора     - ДеревоЗначений - дерево с найденными ссылками на учетные сущности.
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта.
//    * СсылкаНаВладельца - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - владелец электронного документа (передается 
//    	                                                                     при перезаполнении уже существующего документа учета).
//    * Записывать        - Булево - если Истина, то объект должен быть записан. По умолчанию Истина.
//    * СпособОбработки   - Строка - способ сохранения данных в информационной базе.
//      См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД,
//      См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента.
//	ДополнительныеДанные - Структура - Дополнительные данные для отражения в учете. Могут передаваться другими подсистемами
//	                                   из состава библиотеки. Состав данных должен быть описан в документации соответствующей подсистемы.
//  НайденныйОбъект - Произвольный - созданный объект.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки = Неопределено,
	ДополнительныеДанные, НайденныйОбъект = Неопределено, ОписаниеОшибки) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект, ОписаниеОшибки);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУПД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУПД = "СЧФДОП" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			// Заполним основание в СФ
			ДокументыОснованияСчетаФактуры = Новый Массив();
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУПД = "ДОП" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактура")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	СпособОбработки  = Неопределено, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	ФункцияУКД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		Если ФункцияУКД = "КСЧФДИС" Тогда
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		ИначеЕсли ФункцияУКД = "ДИС" Тогда 
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент);
			ДокументыУчета.Добавить(ПервичныйДокумент);
			
		Иначе
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура);
			ДокументыУчета.Добавить(СчетФактура);
			
		КонецЕсли;
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры



// Поиск и создание учетного документа при отражении в учете документа Передача товаров (информация продавца).
// Формат по приказу ММВ-7-10/551@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.ТОРГ12_Продавец.
//  СсылкаНаВладельца	 - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Поиск и создание учетного документа при отражении в учете документа Передача результатов работ (информация продавца). 
// Формат по приказу ММВ-7-10/552@.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - данные электронного документа в виде заполненного макета 
//                         см. Обработка.ОбменСКонтрагентами.Макет.Акт501_Исполнитель.
//  СсылкаНаВладельца	 - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на документ учета, если он уже
//                         прикреплен к электронному документу.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе, выбранный пользователем. Передается 
//                         значение элемента списка значений, заданного в см. ОбменСКонтрагентамиПереопределяемый.СписокОперацийТипаЭД
//  ОписаниеОшибки       - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца, СпособОбработки);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	НовыйЭлемент = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовыйЭлемент = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры

// Ищет элемента справочника, хранящего контрагентов или организаций по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - строковый идентификатор сущности. Возможные значения:
//    - "Организации"
//    - "Контрагенты"
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Ссылка - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - ссылка на найденный объект.
//  ДатаСведений - Дата - дата сведений о ИНН/КПП объекта.
//               - Неопределено - дата сведений не определена.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, ДатаСведений = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	&ТипСправочника КАК Справочник
	|ГДЕ
	|	&УсловиеПоискаПоИНН И &УсловиеПоискаПоКПП";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипСправочника", "Справочник." + ТипОбъекта); 
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоИНН", "Справочник.ИНН ПОДОБНО (&ИНН)");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоИНН", Истина);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КПП) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоКПП", "Справочник.КПП ПОДОБНО &КПП");
		Запрос.УстановитьПараметр("КПП", КПП);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоКПП", Истина);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Ссылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//  КонтрагентСсылка    - СправочникСсылка.Контрагенты - ссылка на контрагента, которого нужно заполнить.
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		СсылкаНового = Неопределено;
		
	Иначе
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		СсылкаНового = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СсылкаОбъекта(Контрагент);
		
	КонецЕсли;
	
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП,"/")+1);
	Контрагент.КодПоОКПО = СтруктураРеквизитов.ОКПО;
	
	// Контактная информация
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ФактАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИФактическийАдрес = Неопределено Тогда
			
			КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИФактическийАдрес.Вид = КИВид;
			КИФактическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
			
		КИФактическийАдрес.Представление = СтруктураРеквизитов.ФактАдресПредставление;
		КИФактическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ФактАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ЮрАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИЮридическийАдрес = Неопределено Тогда
			
			КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИЮридическийАдрес.Вид = КИВид;
			КИЮридическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
		
		КИЮридическийАдрес.Представление = СтруктураРеквизитов.ЮрАдресПредставление;
		КИЮридическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ЮрАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.Телефон) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КИТелефоны = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИТелефоны = Неопределено Тогда
			
			КИТелефоны = Контрагент.КонтактнаяИнформация.Добавить();
			КИТелефоны.Вид = КИВид;
			КИТелефоны.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
		КонецЕсли;
		
		КИТелефоны.Представление = СтруктураРеквизитов.Телефон;
		КИТелефоны.ЗначенияПолей = "НомерТелефона=" + СокрЛП(СтруктураРеквизитов.Телефон);
		
	КонецЕсли;
	
	// БАНКОВСКИЙ СЧЕТ
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.БИК)
		И ЗначениеЗаполнено(СтруктураРеквизитов.РасчетныйСчет) Тогда
		
		Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.БИК);
		
		Если Банки.Количество() = 0 Тогда
				
			БанкКонтрагента = Справочники.Банки.СоздатьЭлемент();
			БанкКонтрагента.Код = СтруктураРеквизитов.БИК;
			БанкКонтрагента.КоррСчет = СтруктураРеквизитов.КорреспондентскийСчет;
			БанкКонтрагента.Наименование = СтруктураРеквизитов.Банк;
			БанкКонтрагента.Записать();
			
		Иначе
			
			БанкКонтрагента = Банки[0].Ссылка;
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоКоду(СтруктураРеквизитов.РасчетныйСчет);
		Если НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			Если СсылкаНового = Неопределено Тогда
				БанковскийСчетКонтрагента.Владелец = Контрагент.Ссылка;
			Иначе
				БанковскийСчетКонтрагента.Владелец = СсылкаНового;
			КонецЕсли;
			
			БанковскийСчетКонтрагента.Банк = БанкКонтрагента;
			БанковскийСчетКонтрагента.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
			БанковскийСчетКонтрагента.НомерСчета = СтруктураРеквизитов.РасчетныйСчет;
			БанковскийСчетКонтрагента.Наименование = СтруктураРеквизитов.РасчетныйСчет + ", в " + БанкКонтрагента.Наименование;
			БанковскийСчетКонтрагента.ОбменДанными.Загрузка = Истина;
			БанковскийСчетКонтрагента.Записать();
			
		КонецЕсли;
		
		Контрагент.БанковскийСчетПоУмолчанию = БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	Попытка
		
		Контрагент.Записать();
		ЗафиксироватьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю();
		
		Если СсылкаНового <> Неопределено Тогда
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Новый контрагент ""%1"" был успешно создан.'"),
				Контрагент.Наименование);
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные контрагента ""%1"" перезаполнены.'"),
				Контрагент.Наименование);
		КонецЕсли;
		
		Сообщение.Сообщить();
		
		КонтрагентСсылка = Контрагент.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка реквизитов контрагента'"), УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки,ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если СтрНайти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ СтрНайти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		
		Сведения = "Свидетельство № " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоСерияНомер") 
								+ НСтр("ru = ' от '") + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоДатаВыдачи");
		
	КонецЕсли;
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭП - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	АдресЭП = "";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Получатели = Новый СписокЗначений;
		Получатели.Добавить(Контрагент);
		
		ЭлектронныеАдресаПолучателей = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Ложь);
		
		Если ЭлектронныеАдресаПолучателей.Количество() > 0 Тогда
			
			АдресЭП = ЭлектронныеАдресаПолучателей[0].Адрес;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает банковские счета организации для выгрузки сведений о ней.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  Таблица - ТаблицаЗначений - таблица с перечнем банковских счетов. Содержит колонки:
//    * БанковскийСчет - ЛюбаяСсылка - ссылка на банковский счет.
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//  Таблица - ТаблицаЗначений - перечень банковских реквизитов. Должна содержать следующие колонки:
//    * Ссылка - Ссылка - ссылка на банковский счет.
//    * РасчетныйСчет - Строка - номер расчетного счета.
//    * КорреспондентскийСчет - Строка - номер корреспондентского счета.
//    * БИК - Строка - БИК банка.
//    * Банк - Ссылка - ссылка на банк.
//    * БанкДляРасчетов - Ссылка - ссылка на банк для расчетов.
//    * БанкДляРасчетовБИК - БИК банка для расчетов.
//    * БанкДляРасчетовКоррСчет - Строка - корреспондентский счет банка для расчетов.
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//  Результат - Строка - сумма прописью.
//
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Валюта = ?(ПустаяСтрока(КодВалюты), Константы.НациональнаяВалюта.Получить(), УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	Результат = ПечатьДокументовУНФ.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецПроцедуры


// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому надо найти ответственного.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное лицо.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Организация, ДоговорКонтрагента, ОтветственныйПоЭД) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	ПризнакФизЛица = Ложь;
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ВидКонтрагента") <> Неопределено Тогда
		
		ПризнакФизЛица = ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
			ИЛИ ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		
	ИначеЕсли ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		
		ПризнакФизЛица = ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.РасходнаяНакладная") 
		ИЛИ ТипОснования = Тип("ДокументОбъект.СчетФактура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Контрагент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
		Описание.СуммаДокумента = ОснованиеОбъект.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКоманд - Структура - структура состава команд ЭДО
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактура");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("Документ.ДополнительныеРасходы");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ДополнительныеРасходы");
	
	СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮридическоеФизическоеЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
		
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СтруктураОтветственных = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.РасшифровкаПодписиРуководителя;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.ДолжностьРуководителя;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Позволяет переопределить порядок создания типов объектов в дереве. Это может быть необходимо, когда одни типы
// зависимы от других, например, номенклатура поставщика, как правило, зависима от номенклатуры. Используется при
// заполнении в дереве электронного документа ссылок на объекты информационной базы.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - содержит колонки:
//    * ТипОбъекта - Строка - строковый идентификатор библиотечного типа.
//    * Порядок - Число - порядок создания типа в дереве (нумеруется с 1).
//
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10/110",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18/118",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20/120",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("без НДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""0"" КАК Ставка,
	|	СтавкиНДС.Ссылка КАК Значение
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|	И НЕ СтавкиНДС.НеОблагается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10/110"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18/118"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20/120"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""без НДС"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|	И СтавкиНДС.НеОблагается";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ставка, Выборка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
	Отказ = Истина;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный
//                                      документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, Данные, Отказ) Экспорт

	СведенияОбОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(Данные, СведенияОбОрганизации, "Организация", "Юр", ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);

КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетНаОплату(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаРабот;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документ не содержит данных для формирования ЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(РеквизитыШапки.ДатаДокумента, РеквизитыШапки.НомерДокумента, РеквизитыШапки.Организация.Префикс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Номер", НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата", РеквизитыШапки.ДатаДокумента);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.НомерСтроки 						   = ДанныеСтроки.НомерСтроки;
		СтрокаТаблицыТоваров.Артикул 							   = ДанныеСтроки.Артикул;
		СтрокаТаблицыТоваров.Наименование 						   = ДанныеСтроки.НаименованиеНоменклатуры;
		СтрокаТаблицыТоваров.Описание 							   = ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 						   = ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.БазоваяЕдиницаСсылка 				   = ДанныеСтроки.БазоваяЕдиница;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 					   = СокрЛП(ДанныеСтроки.БазоваяЕдиницаКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование 		   = ДанныеСтроки.БазоваяЕдиницаНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное 	   = ДанныеСтроки.БазоваяЕдиницаНаименованиеПолное;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = ДанныеСтроки.БазоваяЕдиницаМеждународноеСокращение;
		СтрокаТаблицыТоваров.Упаковка							   = ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.ЕдиницаИзмерения			 		   = ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.ЕдиницаИзмеренияКодПоОКЕИ			   = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКодПоОКЕИ);
		СтрокаТаблицыТоваров.ЕдиницаИзмеренияНаименование		   = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.ЕдиницаИзмеренияКоэффициент		   = ДанныеСтроки.ЕдиницаИзмеренияКоэффициент;
		СтрокаТаблицыТоваров.Цена 								   = ДанныеСтроки.Цена;
		СтрокаТаблицыТоваров.Количество 						   = ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 								   = ДанныеСтроки.Сумма;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 					   = РеквизитыШапки.СуммаВключаетНДС;
		
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
		
		СтрокаТаблицыТоваров.СуммаСкидки = ДанныеСтроки.СуммаСкидки;
		СтрокаТаблицыТоваров.ПроцентСкидки = ДанныеСтроки.ПроцентСкидки;
		
		СтрокаТаблицыТоваров.Сопоставление = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СтруктураДляСопоставленияНоменклатурыЭД(ДанныеСтроки.Номенклатура, ДанныеСтроки.Характеристика, ДанныеСтроки.ЕдиницаИзмерения);
		
	КонецЦикла;
	
	СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	
	НазначениеПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Ссылка, "ОснованиеПечати");
	Если ЗначениеЗаполнено(НазначениеПлатежа) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", НазначениеПлатежа);
	Иначе
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", "");   
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаОбъект);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", 
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.СуммаВключаетНДС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",
		ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 
		СуммаСкидки, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",
		РеквизитыШапки.СуммаДокумента + СуммаСкидки, ТекстОшибки);
	
	// Итоговая строка
	СуммаКПрописи = РеквизитыШапки.СуммаДокумента;
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ПечатьДокументовУНФ.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ПечатьДокументовУНФ.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПоставщику(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документ не содержит данных для формирования ЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ШтрихкодыКомбинаций   = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	Если НЕ ДанныеДокумента.Свойство("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры)
		ИЛИ НЕ ДанныеДокумента.Свойство("ШтрихкодыКомбинаций", ШтрихкодыКомбинаций) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ШтрихкодыПоТоварам(ТабличнаяЧасть, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НоменклатураПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторПоставщика");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Упаковка = СтрокаТаблицы.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Содержание) Тогда
			НоваяСтрока.Наименование = СтрокаТаблицы.Содержание;
		КонецЕсли;
		
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда
			НоваяСтрока.Артикул = СтрокаТаблицы.НоменклатураАртикул;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураНаименованиеПолное) Тогда
				НоваяСтрока.Наименование = СтрокаТаблицы.НоменклатураНаименованиеПолное;
			Иначе
				НоваяСтрока.Наименование = СтрокаТаблицы.НоменклатураНаименование;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаименованиеХарактеристики) Тогда
			НоваяСтрока.НаименованиеХарактеристики = СтрокаТаблицы.ХарактеристикаНаименование;
		КонецЕсли;
		
		Сопоставление = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СтруктураДляСопоставленияНоменклатурыЭД(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.ЕдиницаИзмерения);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторНоменклатурыПоставщика) Тогда
			
			Сопоставление.Вставить("Идентификатор", СтрокаТаблицы.ИдентификаторНоменклатурыПоставщика);
			Сопоставление.Вставить("ИдентификаторНоменклатурыСервиса", СтрокаТаблицы.ИдентификаторНоменклатурыСервиса);
			Сопоставление.Вставить("ИдентификаторХарактеристикиСервиса", СтрокаТаблицы.ИдентификаторХарактеристикиСервиса);
			Сопоставление.Вставить("Артикул", СтрокаТаблицы.Артикул);
			Сопоставление.Вставить("Наименование", СтрокаТаблицы.Наименование);
			Сопоставление.Вставить("НаименованиеХарактеристики", СтрокаТаблицы.НаименованиеХарактеристики);
			Сопоставление.Вставить("ЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмеренияПоставщика);
			Сопоставление.Вставить("ЕдиницаИзмеренияКод", СтрокаТаблицы.ЕдиницаИзмеренияПоставщикаКод);
			Сопоставление.Вставить("ШтрихкодыНоменклатуры", СтрокаТаблицы.ШтрихкодыНоменклатурыПоставщика);
			Сопоставление.Вставить("ШтрихкодКомбинации",    СтрокаТаблицы.ШтрихкодКомбинацииПоставщика);
			Сопоставление.Вставить("СтавкаНДС", СтрокаТаблицы.СтавкаНДСПоставщика);
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураНаименованиеПолное) Тогда
				СтрокаТаблицы.НоменклатураНаименованиеПолное = НоваяСтрока.Наименование;
			КонецЕсли;
			
			Сопоставление.Вставить("Наименование", СтрокаТаблицы.НоменклатураНаименованиеПолное);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНаименование) Тогда
				Сопоставление.Вставить("Характеристика", СтрокаТаблицы.ХарактеристикаНаименование);
			КонецЕсли;
			Сопоставление.Вставить("ЕдиницаИзмерения"   , СтрокаТаблицы.ЕдиницаИзмеренияНаименование);
			Сопоставление.Вставить("ЕдиницаИзмеренияКод", СтрокаТаблицы.ЕдиницаИзмеренияКодПоОКЕИ);
			Сопоставление.Вставить("СтавкаНДС", СтрокаТаблицы.СтавкаНДС);
			Сопоставление.Вставить("Артикул"  , СтрокаТаблицы.НоменклатураАртикул);
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.ЕдиницаИзмерения);
			
		КонецЕсли;
		
		НоваяСтрока.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
		СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	Иначе
		СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
		СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Получатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Итоги по документу
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ПечатьДокументовУНФ.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ПечатьДокументовУНФ.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, ДеревоДокумента, Отказ) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПокупателя(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документ не содержит данных для формирования ЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ШтрихкодыКомбинаций   = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	Если НЕ ДанныеДокумента.Свойство("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры)
		ИЛИ НЕ ДанныеДокумента.Свойство("ШтрихкодыКомбинаций", ШтрихкодыКомбинаций) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ШтрихкодыПоТоварам(ТабличнаяЧасть, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Упаковка = СтрокаТаблицы.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаСсылка = СтрокаТаблицы.БазоваяЕдиница;
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
		Сопоставление = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СтруктураДляСопоставленияНоменклатурыЭД(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.ЕдиницаИзмерения);
		
		Сопоставление.Вставить("Наименование", СтрокаТаблицы.Наименование);
		Если ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеХарактеристики) Тогда
			Сопоставление.Вставить("Характеристика", СтрокаТаблицы.НаименованиеХарактеристики);
		КонецЕсли;
		Сопоставление.Вставить("ЕдиницаИзмерения"   , СтрокаТаблицы.ЕдиницаИзмеренияНаименование);
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", СтрокаТаблицы.ЕдиницаИзмеренияКодПоОКЕИ);
		Сопоставление.Вставить("СтавкаНДС", СтрокаТаблицы.СтавкаНДС);
		Сопоставление.Вставить("Артикул"  , СтрокаТаблицы.НоменклатураАртикул);
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.ЕдиницаИзмерения);
			
		НоваяСтрока.Сопоставление = Сопоставление;
		
	КонецЦикла;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НомерДокументаОснования", РеквизитыШапки.НомерПоДаннымКлиента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаДокументаОснования", РеквизитыШапки.ДатаПоДаннымКлиента);
	
	СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.СуммаВключаетНДС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог",
		РеквизитыШапки.СуммаДокумента + СуммаСкидки, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", 
		СуммаСкидки, ТекстОшибки);
		
	// Документ основание.
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.ДокументОснование");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаОбъект);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение данных о доставке.
	АдресДоставки = Новый Структура("АдресДоставки", РеквизитыШапки.АдресДоставки);
	АдресДоставкиЗначенияПолей = Новый Структура("АдресДоставкиЗначенияПолей", РеквизитыШапки.АдресДоставкиЗначенияПолей);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",
		?(РеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.Курьер, "Доставка", "Самовывоз"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Итоги по документу
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = РеквизитыШапки.СуммаДокумента;
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ПечатьДокументовУНФ.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ПечатьДокументовУНФ.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры
