
#Область ПрограммныйИнтерфейс

Функция ШаблоныНаименованийКатегории(Категория, ДляХарактеристики) Экспорт
	
	Если ДляХарактеристики Тогда
		Шаблоны = ШаблоныНаименованийПовтИсп.ШаблоныНаименованийКатегорииДляХарактеристики(Категория);
	Иначе
		Шаблоны = ШаблоныНаименованийПовтИсп.ШаблоныНаименованийКатегорииДляНоменклатуры(Категория);
	КонецЕсли;
	
	Возврат Шаблоны;
	
КонецФункции

Функция ПолучитьШаблонДляВидаНаименования(КатегорияНоменклатуры, ВидНаименования) Экспорт
	
	НаборЗаписей = РегистрыСведений.ШаблоныНаименований.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КатегорияНоменклатуры.Установить(КатегорияНоменклатуры);
	НаборЗаписей.Отбор.ВидНаименования.Установить(ВидНаименования);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 0 Тогда
		Запись = НаборЗаписей.Получить(0);
		Возврат Запись.Шаблон;
	Иначе
		Возврат Справочники.ШаблоныНаименований.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции


Функция ШаблоныНаименованийДоговоровКонтрагентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныНаименований.Ссылка КАК Ссылка,
	|	ШаблоныНаименований.ШаблонДляФормирования КАК ШаблонДляФормирования,
	|	ШаблоныНаименований.ВидНаименования КАК ВидНаименования,
	|	ШаблоныНаименований.Рекурсивный КАК Рекурсивный,
	|	ВЫБОР
	|		КОГДА ШаблонНаименованияДоговоров.Значение ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПРИОРИТЕТ
	|ИЗ
	|	Справочник.ШаблоныНаименований КАК ШаблоныНаименований
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ШаблонНаименованияДоговоров КАК ШаблонНаименованияДоговоров
	|		ПО (ШаблонНаименованияДоговоров.Значение = ШаблоныНаименований.Ссылка)
	|ГДЕ
	|	ШаблоныНаименований.ВидНаименования = &ВидНаименования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПРИОРИТЕТ,
	|	ШаблоныНаименований.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ВидНаименования", Перечисления.ВидыНаименованийОбъектов.ДоговорКонтрагента);
	
	Шаблоны = Запрос.Выполнить().Выгрузить();
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблоныНаименованийКатегорииДляНоменклатуры(Категория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныНаименований.Ссылка,
	|	ШаблоныНаименований.ШаблонДляФормирования,
	|	ШаблоныНаименований.ВидНаименования,
	|	ШаблоныНаименований.ДляХарактеристики,
	|	ШаблоныНаименований.Рекурсивный
	|ИЗ
	|	Справочник.ШаблоныНаименований КАК ШаблоныНаименований
	|ГДЕ
	|	ШаблоныНаименований.КатегорияНоменклатуры = &Категория
	|	И ШаблоныНаименований.ДляХарактеристики = &ДляХарактеристики
	|	И НЕ ШаблоныНаименований.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныНаименований.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Категория", Категория);
	Запрос.УстановитьПараметр("ДляХарактеристики", Ложь);
	
	Шаблоны = Запрос.Выполнить().Выгрузить();
	Возврат Шаблоны;
	
КонецФункции

Функция ШаблоныНаименованийКатегорииДляХарактеристики(Категория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныНаименований.Ссылка,
	|	ШаблоныНаименований.ШаблонДляФормирования,
	|	ШаблоныНаименований.ВидНаименования,
	|	ШаблоныНаименований.ДляХарактеристики,
	|	ШаблоныНаименований.Рекурсивный
	|ИЗ
	|	Справочник.ШаблоныНаименований КАК ШаблоныНаименований
	|ГДЕ
	|	ШаблоныНаименований.КатегорияНоменклатуры = &Категория
	|	И ШаблоныНаименований.ДляХарактеристики = &ДляХарактеристики
	|	И НЕ ШаблоныНаименований.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныНаименований.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Категория", Категория);
	Запрос.УстановитьПараметр("ДляХарактеристики", Истина);
	
	Шаблоны = Запрос.Выполнить().Выгрузить();
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти