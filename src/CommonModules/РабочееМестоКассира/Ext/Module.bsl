#Область ПрограммныйИнтерфейс

// Определяет необходимость показа рабочего места кассира
// РМК показывается в случае наличия профиля РабочееМестоКассира у пользователя
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	
#Если ВнешнееСоединение Тогда
	Параметры.Вставить(
		"ЕстьПрофильРМК", Ложь);
#Иначе
		Параметры.Вставить(
		"ЕстьПрофильРМК", УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира());
#КонецЕсли
	
КонецПроцедуры

#Область ПредпросмотрЧека

Процедура ЗаполнитьТекстовоеПредставлениеЧека(СтрокаСостава, ЧекККМ, ИдентификаторУстройства = Неопределено) Экспорт
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ЧекККМ, ИдентификаторУстройства);
	
	СобратьПараметрыВТекст(ОбщиеПараметры, СтрокаСостава);
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры) Экспорт
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Зачет аванса"" КАК ВидОплаты,
	|	Предоплата.СуммаРасчетов КАК Сумма
	|ПОМЕСТИТЬ Предоплата
	|ИЗ
	|	&Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Оплата КАК Оплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.ВидОплаты,
	|	Предоплата.Сумма
	|ИЗ
	|	Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоВидамОплат = Результат.Выгрузить();
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.БанковскаяКарта, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Кредит
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.Кредит, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно <> 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЗачетАванса = 0;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Зачет аванса
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти("Зачет аванса", "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванс'"));
		СтрокаОплаты.Вставить("Сумма", ЗачетАванса);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Наличные
	Если ДокументОбъект.СуммаДокумента
			- ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
			- ДокументОбъект.Предоплата.Итог("СуммаРасчетов") > 0 Тогда 
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента
									 - ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
									 - ДокументОбъект.Предоплата.Итог("СуммаРасчетов"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ОбщиеПараметры.ТаблицаОплат.Количество() = 0 Тогда
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Сумма", 0);
		
		// Проверка полной оплаты бонусами
		СуммаОплатыБонусом = ДокументОбъект.Запасы.Итог("СуммаСкидкиОплатыБонусом");
		Если СуммаОплатыБонусом > 0 И ДокументОбъект.СуммаДокумента = 0 Тогда
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.ВстречноеПредоставление);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Встречное предоставление'"));
		Иначе
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		КонецЕсли;
		
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМНаККТ()

Функция ПолучитьПараметрыРегистрацииККТ(ККТ) Экспорт
	
	Параметры = Новый Структура;
	
	ИскомаяСтрока = ККТ.ПараметрыРегистрации.Найти("ОрганизацияНазвание", "НаименованиеПараметра");
	Если ИскомаяСтрока <> Неопределено Тогда
		Параметры.Вставить("ОрганизацияНазвание", ИскомаяСтрока.ЗначениеПараметра);
	КонецЕсли;
	
	ИскомаяСтрока = ККТ.ПараметрыРегистрации.Найти("АдресПроведенияРасчетов", "НаименованиеПараметра");
	Если ИскомаяСтрока <> Неопределено Тогда
		Параметры.Вставить("АдресРасчетов", ИскомаяСтрока.ЗначениеПараметра);
	КонецЕсли;
	
	ИскомаяСтрока = ККТ.ПараметрыРегистрации.Найти("ОрганизацияИНН", "НаименованиеПараметра");
	Если ИскомаяСтрока <> Неопределено Тогда
		Параметры.Вставить("ОрганизацияИНН", ИскомаяСтрока.ЗначениеПараметра);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Формирует структуру параметров чека
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат
//  ИдентфикаторУстройства - СправочникСсылка.ПодулючаемоеОборудование
// 
// Возвращаемое значние:
//  Структура - параметры чека, необходимые для фискализации
// 
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМ, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
	ТранспортныйМодуль = Неопределено;
	ДанныеЕГАИСДостаточны = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТоваровЧека = ПодготовкаДанныхДляПробитияЧекаККМ(ЧекККМ, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ.Организация, "НаименованиеПолное,ИНН,КПП");
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("ИсточникФИОКассираВЧеке");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ.КассаККМ, СтруктураРеквизитов);
	
	ПользовательКассирДляПечати = Справочники.КассыККМ.ПолучитьПользователяКассираДляПечатиЧека(ЧекККМ, РеквизитыКассыККМ.ИсточникФИОКассираВЧеке);
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользовательКассирДляПечати);
	
	ОбщиеПараметры.ТипРасчета = ?(ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМВозврат"),
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(ЧекККМ.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(ЧекККМ.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекККМ.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = ЧекККМ.АдресЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекККМ.Контрагент) Тогда
		СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
		Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = ЧекККМ;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ЧекККМ.Дата,
		ЧекККМ.Номер,
		ЧекККМ.Организация.Префикс);
	ОбщиеПараметры.НомерСмены     = "1";
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ЧекККМ.Организация, ЧекККМ.Дата);
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(ЧекККМ.СтруктурнаяЕдиница, ПредопределенноеЗначение(
		"Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	
	СерийныйНомер = "1";
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(ЧекККМ.СтруктурнаяЕдиница);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ДатаЧека = ЧекККМ.Дата;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ЧекККМ.Организация,
		ЧекККМ.СтруктурнаяЕдиница,
		ДатаЧека,
		ЧекККМ.СпециальныйНалоговыйРежим);
	
	// Подготовка таблицы товаров
	ДополнитьТоварамиПараметрыПриПробитииЧека(ЧекККМ, ОбщиеПараметры, ТаблицаТоваровЧека, Документы.ЧекККМ.ПризнакСпособаРасчета(ЧекККМ));
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ЧекККМ, ОбщиеПараметры);
	
	РазницаСумм = ЧекККМ.Запасы.Итог("Сумма") - ЧекККМ.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты",Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(ЧекККМ, ОбщиеПараметры);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ИдентификаторУстройства = ?(
				ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование") // Проверка на включенную ФО "Использовать ПО"
			  И ЗначениеЗаполнено(ЧекККМ.КассаККМ)
			  И ЗначениеЗаполнено(ЧекККМ.КассаККМ.ПодключаемоеОборудование),
			  ЧекККМ.КассаККМ.ПодключаемоеОборудование.Ссылка,
			  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
			);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыРегистрации = ПолучитьПараметрыРегистрацииККТ(ИдентификаторУстройства);
		
		Если ПараметрыРегистрации.Свойство("ОрганизацияНазвание") Тогда
			ОбщиеПараметры.Вставить("ОрганизацияНазвание", ПараметрыРегистрации.ОрганизацияНазвание);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("АдресРасчетов") Тогда
			ОбщиеПараметры.Вставить("АдресРасчетов", ПараметрыРегистрации.АдресРасчетов);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("ОрганизацияИНН") Тогда
			ОбщиеПараметры.Вставить("ОрганизацияИНН", ПараметрыРегистрации.ОрганизацияИНН);
		КонецЕсли;
		
		СтатусПоследнейСмены = МенеджерОборудованияВызовСервера.ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства);
		ОбщиеПараметры.НомерЧека = СтатусПоследнейСмены.ТекущийНомерЧека;
		ОбщиеПараметры = МенеджерОборудованияВызовСервера.СформироватьШаблонЧека(ОбщиеПараметры, , ИдентификаторУстройства);
		ОсновныеПараметры = ОбщиеПараметры;
		ОписаниеОшибки = "";
		Если НЕ МенеджерОборудованияВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(ОсновныеПараметры, ИдентификаторУстройства, ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Отказ = Ложь;
		ИсправленыОсновныеПараметры = Ложь;
		МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		ИначеЕсли ИсправленыОсновныеПараметры Тогда
			ОбщиеПараметры = ОсновныеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

#КонецОбласти

#Область ЧекККМ

Функция ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС) Экспорт
	
	ТаблицаТовары = ДокументОбъект.Запасы.Выгрузить();
	НаборыСервер.ПодготовитьНаборыДляПробитияЧекаККМ(ТаблицаТовары, ДокументОбъект);
	
	ТаблицаАкцизы = ДокументОбъект.АкцизныеМарки.Выгрузить();
	
	ЕстьАлкогольнаяПродукцияЕГАИС = ИнтеграцияЕГАИСУНФ.ЕстьАлкогольнаяПродукцияЕГАИС(ДокументОбъект.Запасы);
	
	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ПродажаСПроверкойЕГАИС = ИнтеграцияЕГАИСУНФВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ДокументОбъект.Дата);
	Иначе
		ПродажаСПроверкойЕГАИС = Ложь;
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("ПроцентАвтоматическойСкидки") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
		ТаблицаТовары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.Партия,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.ПроцентСкидкиНаценки,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.Всего,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.КлючСвязи,
	|	ТаблицаДокумента.НеобходимостьВводаАкцизнойМарки,
	|	ТаблицаДокумента.Штрихкод,
	|	ТаблицаДокумента.КодМаркировки,
	|	ТаблицаДокумента.ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Всего,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ТаблицаТовары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК Маркируемый,
	|	ТаблицаТовары.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Номенклатура.Крепость КАК Крепость,
	|	ТаблицаТовары.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаПродукции,
	// ++( ГосИС 1.1.1.12
	//|	ТаблицаТовары.Номенклатура.ТабачнаяПродукция КАК ТабачнаяПродукция,
	//|	ТаблицаТовары.Номенклатура.ОбувнаяПродукция КАК ОбувнаяПродукция,
	|	ТаблицаТовары.Номенклатура.ВидПродукцииИС КАК ВидПродукцииИС,
	|	НЕ ТаблицаТовары.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ПродукцияИС,
	//)++
	|	ТаблицаТовары.Всего,
	|	ТаблицаТовары.НеобходимостьВводаАкцизнойМарки,
	|	ТаблицаТовары.Штрихкод,
	|	ТаблицаТовары.КодМаркировки,
	|	ТаблицаТовары.ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.НомерСтроки,
	|	ЧекККМАкцизныеМарки.КлючСвязи,
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаАкцизныхМарок
	|ИЗ
	|	&ТаблицаАкцизы КАК ЧекККМАкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаШтрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТаблицаТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И ТаблицаТовары.Партия = ШтрихкодыНоменклатуры.Партия
	|			И (ТИПЗНАЧЕНИЯ(ТаблицаТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ИЛИ ТаблицаТовары.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Всего,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.Штрихкод,
	|	ТаблицаТовары.КодМаркировки,
	|	ТаблицаТовары.ДоговорПлатежногоАгента,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Маркируемый
	|							И НЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки ЕСТЬ NULL 
	|						ТОГДА ТаблицаАкцизныхМарок.КодАкцизнойМарки
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КодАкцизнойМарки,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.ОбъемДАЛ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемДАЛ,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.Крепость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.АлкогольнаяПродукция
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.КодВидаПродукции
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодВидаПродукции,
	// ++( ГосИС 1.1.1.12
	//|	ТаблицаТовары.Номенклатура.ТабачнаяПродукция КАК ТабачнаяПродукция,
	//|	ТаблицаТовары.Номенклатура.ОбувнаяПродукция КАК ОбувнаяПродукция,
	|	ТаблицаТовары.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ТаблицаТовары.ПродукцияИС КАК ПродукцияИС,
	//)++
	|	ТаблицаШтрихкоды.Штрихкод
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
	|		ПО (ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
	|			И ТаблицаТовары.Маркируемый)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаШтрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаШтрихкоды.Характеристика
	|			И ТаблицаТовары.Партия = ТаблицаШтрихкоды.Партия";
	
	Запрос.УстановитьПараметр("ПродажаСПроверкойЕГАИС", ПродажаСПроверкойЕГАИС);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаАкцизы", ТаблицаАкцизы);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаТоваровЧека = Результат.Выгрузить();
		
	Если ПродажаСПроверкойЕГАИС Тогда
		ИнтеграцияЕГАИСУНФ.ПроверитьДанныеЕГАИС(ТаблицаТоваровЧека, ДанныеЕГАИСДостаточны, ДокументОбъект);
	Иначе
		ДанныеЕГАИСДостаточны = Истина;
	КонецЕсли;
		
	Возврат ТаблицаТоваровЧека;
	
КонецФункции

Функция СерийныйНомерККМ(КассаККМ) Экспорт
	
	СерийныйНомер = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КассыККМ.СерийныйНомер <> """"
	|			ТОГДА КассыККМ.СерийныйНомер
	|		ИНАЧЕ КассыККМ.ПодключаемоеОборудование.СерийныйНомер
	|	КОНЕЦ КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ";
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СерийныйНомер;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПредпросмотрЧека

Процедура СобратьПараметрыВТекст(Параметры, СтрокаСостава)
	
	Разделитель = "-------------------------------";
	КУдалению = "===============================";
	ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(Параметры, 31);
	ТекстЧека = СтрЗаменить(ТекстЧека, КУдалению, "");
	Позиция1 = СтрНайти(ТекстЧека, Разделитель);
	Позиция2 = СтрНайти(ТекстЧека, Разделитель,, Позиция1 + 1);
	Позиция3 = СтрНайти(ТекстЧека, Разделитель,, Позиция2 + 1);
	Шапка = Лев(ТекстЧека, Позиция1 - 1);
	Состав = Сред(ТекстЧека, Позиция1 + 32, Позиция2 - Позиция1 - 33);
	Итог = Сред(ТекстЧека, Позиция2 + 32, Позиция3 - Позиция2 - 32);
	Подвал = Сред(ТекстЧека, Позиция3 + 32);
	
	СтрокаСостава.Состав = Состав;
	СтрокаСостава.Реквизиты = Шапка + Итог + Подвал;
	
КонецПроцедуры

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета)
	
	ЭтоАванс = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат от:'") + " " + ДокументОбъект.Контрагент;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + ДокументОбъект.Контрагент;
		КонецЕсли;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если ДокументОбъект.Дата > '20190101' Тогда
				СтрокаПозицииЧека.СтавкаНДС = 120;
				СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииЧека.Сумма / 120 * 20;
			Иначе
				СтрокаПозицииЧека.СтавкаНДС = 118;
				СтрокаПозицииЧека.СуммаНДС = СтрокаПозицииЧека.Сумма / 118 * 18;
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	Иначе
		
		ДанныеДляИСМП = СформироватьДанныеДляИСМП(ДокументОбъект);
		
		Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
			
			МассивСтрокДляДобавленияВЧек = Новый Массив;
			МассивСтрокДляДобавленияВЧек.Добавить(СтрокаТЧ);
			
			// ++( ГосИС 1.1.1.12
			//Если (СтрокаТЧ.ТабачнаяПродукция ИЛИ СтрокаТЧ.ОбувнаяПродукция)
			Если СтрокаТЧ.ПродукцияИС
			//)++
				И ДанныеДляИСМП.Количество() > 0 Тогда
				МассивСтрокДляДобавленияВЧек = ДанныеДляИСМП.НайтиСтроки(
					Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
			КонецЕсли;
			
			Для Каждого СтрокаДляДобавленияВЧек Из МассивСтрокДляДобавленияВЧек Цикл
				
				СтрокаТаблицыТоваров = Новый СписокЗначений();
				РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаТЧ.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар");
				Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
					НаименованиеХарактеристикиДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Характеристика, "НаименованиеДляПечати");
					НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное + " (" + НаименованиеХарактеристикиДляПечати + ")";
				Иначе
					НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное;
				КонецЕсли;
				
				ДанныеАлкогольнойПродукции = Новый Структура;
				ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
				ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
				ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
				ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);
				ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", СтрокаТЧ.ОбъемДАЛ);
				ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
				ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
				ДанныеАлкогольнойПродукции.Вставить("Штрихкод", СтрокаТЧ.Штрихкод);
				
				ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСУНФ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
				
				СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
				СтрокаПозицииЧека.Наименование = НаименованиеТовара;
				СтрокаПозицииЧека.Количество   = СтрокаДляДобавленияВЧек.Количество;
				СтрокаПозицииЧека.Цена         = СтрокаТЧ.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество)); //  5 - Цена за позицию без скидки;
				СуммаСкидки = СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество - (СтрокаДляДобавленияВЧек.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС));
				СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Цена - СуммаСкидки / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество), 2);
				Если СтрокаТЧ.Всего = СтрокаДляДобавленияВЧек.Сумма Тогда
					СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Всего;
				ИначеЕсли ДокументОбъект.СуммаВключаетНДС Тогда
					СтрокаПозицииЧека.Сумма = СтрокаДляДобавленияВЧек.Сумма;
				Иначе
					СтрокаПозицииЧека.Сумма = СтрокаДляДобавленияВЧек.Сумма + СтрокаДляДобавленияВЧек.СуммаНДС;
				КонецЕсли;
				СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки;
				СтрокаПозицииЧека.НомерСекции  = 1;
				СтрокаПозицииЧека.СуммаНДС = СтрокаДляДобавленияВЧек.СуммаНДС;
				СтрокаПозицииЧека.Штрихкод     = СтрокаДляДобавленияВЧек.Штрихкод;
				СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
				Если ЗначениеЗаполнено(СтрокаТЧ.Партия)
					И СтрокаТЧ.Партия.Статус <> Перечисления.СтатусыПартий.СобственныеЗапасы Тогда
					СтруктураРеквизитов = Новый Структура();
					СтруктураРеквизитов.Вставить("НаименованиеПолное", "ВладелецПартии.НаименованиеПолное");
					СтруктураРеквизитов.Вставить("ИНН", "ВладелецПартии.ИНН");
					СтруктураРеквизитов.Вставить("ВладелецПартии", "ВладелецПартии");
					РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Партия, СтруктураРеквизитов);
					СтрокаПозицииЧека.ДанныеПоставщика.Наименование = РеквизитыВладельца.НаименованиеПолное;
					СтрокаПозицииЧека.ДанныеПоставщика.ИНН = РеквизитыВладельца.ИНН;
					Если СтрокаТЧ.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
						СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
					КонецЕсли;
					Телефон = Справочники.Контрагенты.ПолучитьТелефонКонтрагента(РеквизитыВладельца.ВладелецПартии);
					Телефон = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Телефон);
					СтрокаПозицииЧека.ДанныеПоставщика.Телефон = Телефон;
				КонецЕсли;
				
				СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
				СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
				СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = СтрокаТЧ.Номенклатура.КодМедицинскогоИзделия;
				
				Если СтрокаТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
					СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, Истина);
				Иначе
					СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
					СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
				КонецЕсли;
				
				Если СтрокаТЧ.ПродукцияИС
					И ДанныеДляИСМП.Количество() > 0 Тогда
					
					ДанныеШтрихкода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(СтрокаДляДобавленияВЧек.Штрихкод);
					Если ДанныеШтрихКода <> Неопределено Тогда
						СтрокаПозицииЧека.Штрихкод = СтрокаДляДобавленияВЧек.Штрихкод;
						Если СтрокаТЧ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда //++( ГосИС_6 поле ТипМаркировки оставлено для совместимости )++
							СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
						ИначеЕсли СтрокаТЧ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
							СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
						КонецЕсли;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеШтрихкода.GTIN;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ДанныеШтрихкода.СерийныйНомер;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки)
					ИЛИ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод)
					ИЛИ ЗначениеЗаполнено(СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации) Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда
						Штрихкод = СтрокаТЧ.КодМаркировки;
					ИначеЕсли ЗначениеЗаполнено(СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации) Тогда
						Штрихкод = СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации;
					Иначе
						Штрихкод = СтрокаТЧ.Штрихкод;
					КонецЕсли;
					ДанныеШтрихКода = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
					Если ДанныеШтрихКода.Разобран Тогда
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара = ДанныеШтрихКода.РеквизитКодаТовара;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеШтрихКода.GTIN;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ДанныеШтрихКода.СерийныйНомер;
					КонецЕсли;
				КонецЕсли;
				
				АгентскиеПлатежиУНФ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека, СтрокаТЧ);
				
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДанныеДляИСМП(ДокументОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("НомерСтроки");
		Возврат Результат;
		
	КонецЕсли;
	
	МассивУпаковок = ДокументОбъект.АкцизныеМарки.ВыгрузитьКолонку("АкцизнаяМарка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Серии.Серия КАК Серия,
	|	Серии.КлючСвязи КАК КлючСвязи,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	Запасы.Количество КАК Количество,
	|	Запасы.Цена КАК Цена,
	|	Запасы.СуммаАвтоматическойСкидки + Запасы.СуммаСкидкиНаценки + Запасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидки,
	|	Запасы.Сумма КАК Сумма,
	|	Запасы.СтавкаНДС КАК СтавкаНДС,
	|	Запасы.СуммаНДС КАК СуммаНДС,
	|	Запасы.Штрихкод КАК Штрихкод,
	|	Запасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.НомерСтроки КАК НомерСтроки,
	|	ВТ_Запасы.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Запасы.Характеристика КАК Характеристика,
	|	ВТ_Запасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.Количество
	|		ИНАЧЕ ВТ_Серии.Количество
	|	КОНЕЦ КАК Количество,
	|	ВТ_Запасы.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.СуммаСкидки
	|		ИНАЧЕ ВТ_Запасы.СуммаСкидки / ВТ_Запасы.Количество
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.Сумма
	|		ИНАЧЕ ВТ_Запасы.Сумма / ВТ_Запасы.Количество
	|	КОНЕЦ КАК Сумма,
	|	ВТ_Запасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА ВТ_Запасы.СуммаНДС
	|		ИНАЧЕ ВТ_Запасы.СуммаНДС / ВТ_Запасы.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ВТ_Запасы.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВТ_Серии.Серия
	|	КОНЕЦ КАК Серия
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
	|		ПО ВТ_Запасы.КлючСвязи = ВТ_Серии.КлючСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СправочникНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|		ИЛИ СправочникНоменклатура.АлкогольнаяПродукция");
	
	Запрос.УстановитьПараметр("Запасы", ДокументОбъект.Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Серии", РазгруппироватьСерии(ДокументОбъект.СерииНоменклатуры.Выгрузить()));
	
	Запасы = Запрос.Выполнить().Выгрузить();
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументОбъект.Ссылка);
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(МассивУпаковок, ПараметрыСканирования);
	
	ТипизироватьКолонкиМаркированныхТоваров(ШтрихкодыУпаковок.МаркированныеТовары);
	
	ЗапасыРазобранные = Запасы.СкопироватьКолонки();
	
	Для Каждого СтрокаЗапасы Из Запасы Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НоменклатураСсылка", СтрокаЗапасы.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаСсылка", СтрокаЗапасы.Характеристика);
		СтруктураОтбора.Вставить("СерияСсылка", СтрокаЗапасы.Партия);
		
		МассивМаркированныхТоваров = ШтрихкодыУпаковок.МаркированныеТовары.НайтиСтроки(СтруктураОтбора);
		
		Если МассивМаркированныхТоваров.Количество() = 0 Тогда
			
			СтрокаЗапасыРазобранные = ЗапасыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗапасыРазобранные, СтрокаЗапасы);
			Продолжить;
			
		КонецЕсли;
		
		КоличествоСтрокМассиваМаркированныхТоваров = МассивМаркированныхТоваров.Количество(); 
		ТекущаяСтрока = 1;
		
		Пока КоличествоСтрокМассиваМаркированныхТоваров >= ТекущаяСтрока Цикл
			
			Если СтрокаЗапасы.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МаркированныйТовар = МассивМаркированныхТоваров[КоличествоСтрокМассиваМаркированныхТоваров - ТекущаяСтрока];
			
			ЭтоГрупповаяТоварнаяУпаковка = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				МаркированныйТовар.СтрокаДерева, "ГрупповаяТоварнаяУпаковка") Тогда
				
				ЭтоГрупповаяТоварнаяУпаковка = МаркированныйТовар.СтрокаДерева.ГрупповаяТоварнаяУпаковка;
				
			КонецЕсли;
			
			Если НЕ (МаркированныйТовар.СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И ЭтоГрупповаяТоварнаяУпаковка = Ложь) Тогда
				
				ШтрихкодыУпаковок.МаркированныеТовары.Удалить(МаркированныйТовар);
				ТекущаяСтрока = ТекущаяСтрока + 1;
				Продолжить;
				
			КонецЕсли;
			
			СтрокаЗапасыРазобранные = ЗапасыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗапасыРазобранные, СтрокаЗапасы);
			
			СтрокаЗапасыРазобранные.Штрихкод = МаркированныйТовар.ШтрихкодСтрока;
			
			СтрокаЗапасыРазобранные.Количество	= 1;
			СтрокаЗапасыРазобранные.СуммаСкидки	= Окр(СтрокаЗапасы.СуммаСкидки / СтрокаЗапасы.Количество, 2);
			СтрокаЗапасыРазобранные.СуммаНДС	= Окр(СтрокаЗапасы.СуммаНДС / СтрокаЗапасы.Количество, 2);
			СтрокаЗапасыРазобранные.Сумма		= Окр(СтрокаЗапасы.Сумма / СтрокаЗапасы.Количество, 2);
			СтрокаЗапасыРазобранные.Цена		= СтрокаЗапасыРазобранные.Сумма - СтрокаЗапасыРазобранные.СуммаСкидки;
			
			СтрокаЗапасы.Количество		= СтрокаЗапасы.Количество - СтрокаЗапасыРазобранные.Количество;
			СтрокаЗапасы.СуммаСкидки	= СтрокаЗапасы.СуммаСкидки - СтрокаЗапасыРазобранные.СуммаСкидки;
			СтрокаЗапасы.СуммаНДС		= СтрокаЗапасы.СуммаНДС - СтрокаЗапасыРазобранные.СуммаНДС;
			СтрокаЗапасы.Сумма			= СтрокаЗапасы.Сумма - СтрокаЗапасыРазобранные.Сумма;
			
			ШтрихкодыУпаковок.МаркированныеТовары.Удалить(МаркированныйТовар);
			
			ТекущаяСтрока = ТекущаяСтрока + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗапасыРазобранные;
	
КонецФункции

// Типизируем колонки таблицы МаркированныеТовары для передачи в запрос
// и добавляем колонку НомерСтроки
Процедура ТипизироватьКолонкиМаркированныхТоваров(ТаблицаМаркированныхТоваров)
	
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НоменклатураСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ХарактеристикаСсылка", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("СерияСсылка", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ШтрихкодСтрока", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаШтрихкодыУпаковок Из ТаблицаМаркированныхТоваров Цикл
		СтрокаШтрихкодыУпаковок.НомерСтроки = ТаблицаМаркированныхТоваров.Индекс(СтрокаШтрихкодыУпаковок);
		СтрокаШтрихкодыУпаковок.НоменклатураСсылка = СтрокаШтрихкодыУпаковок.Номенклатура;
		СтрокаШтрихкодыУпаковок.ХарактеристикаСсылка = СтрокаШтрихкодыУпаковок.Характеристика;
		СтрокаШтрихкодыУпаковок.СерияСсылка = СтрокаШтрихкодыУпаковок.Серия;
		СтрокаШтрихкодыУпаковок.ШтрихкодСтрока = СтрокаШтрихкодыУпаковок.Штрихкод;
	КонецЦикла;	
	
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Номенклатура");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Характеристика");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Серия");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Штрихкод");
	
КонецПроцедуры

#КонецОбласти

Функция РазгруппироватьСерии(ТаблицаСерии)
	
	Результат = ТаблицаСерии.Скопировать();
	Результат.Очистить();
	
	Для Каждого Строка Из ТаблицаСерии Цикл
		
		Количество = Строка.Количество;
		
		Для Итератор = 1 По Количество Цикл
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "Количество");
			НоваяСтрока.Количество = 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти