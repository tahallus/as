
#Область ПрограммныйИнтерфейс

// Проверяет срок действия сертификатов
// Параметры:
//  Объект - ДокументОбъект - Документ для проверки
//  ИмяТабличнойЧасти - Строка - Табличная часть в которой ищем сертификаты,
//                               если не указана, значит в шапке документа
Процедура ПроверитьСрокДействия(Объект, ИмяТабличнойЧасти = "", Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка таблицы для проверки
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК ПодарочныйСертификат,
		|	Запасы.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ Запасы
		|ИЗ
		|	&Запасы КАК Запасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииНоменклатуры.Серия КАК НомерСертификата,
		|	СерииНоменклатуры.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ СерииНоменклатуры
		|ИЗ
		|	&СерииНоменклатуры КАК СерииНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Запасы.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ЕСТЬNULL(СерииНоменклатуры.НомерСертификата, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК НомерСертификата
		|ПОМЕСТИТЬ ПодарочныеСертификаты
		|ИЗ
		|	Запасы КАК Запасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ СерииНоменклатуры КАК СерииНоменклатуры
		|		ПО Запасы.КлючСвязи = СерииНоменклатуры.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Запасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СерииНоменклатуры";
		Запрос.УстановитьПараметр("Запасы", Объект.Запасы.Выгрузить());
		Запрос.УстановитьПараметр("СерииНоменклатуры", Объект.СерииНоменклатуры.Выгрузить());
		Запрос.Выполнить();
		
	ИначеЕсли ИмяТабличнойЧасти = "БезналичнаяОплата" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БезналичнаяОплата.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	БезналичнаяОплата.НомерСертификата КАК НомерСертификата
		|ПОМЕСТИТЬ ПодарочныеСертификаты
		|ИЗ
		|	&БезналичнаяОплата КАК БезналичнаяОплата";
		Запрос.УстановитьПараметр("БезналичнаяОплата", Объект.БезналичнаяОплата.Выгрузить());
		Запрос.Выполнить();
		
	ИначеЕсли ИмяТабличнойЧасти = "Предоплата" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предоплата.Документ КАК ПодарочныйСертификат,
		|	Предоплата.НомерСертификата КАК НомерСертификата
		|ПОМЕСТИТЬ ПодарочныеСертификаты
		|ИЗ
		|	&Предоплата КАК Предоплата
		|ГДЕ
		|	Предоплата.ОплатаСертификатом";
		Запрос.УстановитьПараметр("Предоплата", Объект.Предоплата.Выгрузить());
		Запрос.Выполнить();
		
	ИначеЕсли ИмяТабличнойЧасти = "" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСертификата.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ТаблицаСертификата.НомерСертификата КАК НомерСертификата
		|ПОМЕСТИТЬ ПодарочныеСертификаты
		|ИЗ
		|	&ТаблицаСертификата КАК ТаблицаСертификата";
		ТаблицаСертификата = Новый ТаблицаЗначений;
		ТаблицаСертификата.Колонки.Добавить("ПодарочныйСертификат", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаСертификата.Колонки.Добавить("НомерСертификата", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		СтрокаСертификата = ТаблицаСертификата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСертификата, Объект);
		Запрос.УстановитьПараметр("ТаблицаСертификата", ТаблицаСертификата);
		Запрос.Выполнить();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Определение периодов окончания сроков действия
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ПодарочныеСертификаты.НомерСертификата КАК НомерСертификата,
	|	Номенклатура.Периодичность КАК ПериодичностьДействия,
	|	Номенклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия
	|ПОМЕСТИТЬ СертификатыСПериодичностью
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = Номенклатура.Ссылка
	|			И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			И (Номенклатура.ТипСрокаДействия <> ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.БезОграниченияСрока))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСПериодичностью.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	СертификатыСПериодичностью.НомерСертификата КАК НомерСертификата,
	|	СертификатыСПериодичностью.ПериодичностьДействия КАК ПериодичностьДействия,
	|	СертификатыСПериодичностью.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	МАКСИМУМ(СерииНоменклатурыОбороты.Период) КАК ПериодПродажи
	|ПОМЕСТИТЬ СертификатыСПериодомПродажи
	|ИЗ
	|	СертификатыСПериодичностью КАК СертификатыСПериодичностью
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Обороты(, , Регистратор, ) КАК СерииНоменклатурыОбороты
	|		ПО СертификатыСПериодичностью.НомерСертификата = СерииНоменклатурыОбороты.Серия
	|			И (СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|				ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|				ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СертификатыСПериодичностью.ПодарочныйСертификат,
	|	СертификатыСПериодичностью.НомерСертификата,
	|	СертификатыСПериодичностью.ПериодичностьДействия,
	|	СертификатыСПериодичностью.КоличествоПериодовДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСПериодомПродажи.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	СертификатыСПериодомПродажи.НомерСертификата КАК НомерСертификата,
	|	ВЫБОР
	|		КОГДА Номенклатура.ДатаОкончанияДействия ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, ДЕНЬ, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, НЕДЕЛЯ, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, ДЕКАДА, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, МЕСЯЦ, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, КВАРТАЛ, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, ПОЛУГОДИЕ, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСПериодомПродажи.ПериодичностьДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СертификатыСПериодомПродажи.ПериодПродажи, ГОД, СертификатыСПериодомПродажи.КоличествоПериодовДействия), ДЕНЬ)
	|					ИНАЧЕ NULL
	|				КОНЕЦ
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Номенклатура.ДатаОкончанияДействия, ДЕНЬ)
	|	КОНЕЦ КАК СрокОкончания
	|ИЗ
	|	СертификатыСПериодомПродажи КАК СертификатыСПериодомПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СертификатыСПериодомПродажи.ПодарочныйСертификат = Номенклатура.Ссылка
	|			И (Номенклатура.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату))";
	Результат = Запрос.Выполнить().Выбрать();
	ДатаСравнения = НачалоДня(ТекущаяДатаСеанса());
	Пока Результат.Следующий() Цикл
		Если ЗначениеЗаполнено(Результат.СрокОкончания)
			И Результат.СрокОкончания < ДатаСравнения Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Срок действия %ПодарочныйСертификат%%НомерСертификата% истек %СрокОкончания%!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодарочныйСертификат%", Результат.ПодарочныйСертификат);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСертификата%", ": " + Результат.НомерСертификата);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СрокОкончания%", Формат(Результат.СрокОкончания, "ДФ=dd.MM.yyyy"));
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет поиск номера среди штрихкодов и серийных номеров
// и возвращает таблицу значений с остатками и сроками действия
// найденных сертификатов
// Параметры:
//  Номер - Строка - Номер сертификата
//
Функция ВыполнитьПоискСертификатаПоНомеру(Номер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Владелец КАК ПодарочныйСертификат,
	|	СерииНоменклатуры.Ссылка КАК НомерСертификата
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Продан
	|	И СерииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И СерииНоменклатуры.Наименование = &Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Номер
	|	И ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.ИспользоватьСерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	Сертификаты.НомерСертификата КАК НомерСертификата,
	|	Номенклатура.ТипСрокаДействия КАК ТипСрокаДействия,
	|	Номенклатура.Периодичность КАК Периодичность,
	|	Номенклатура.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	Номенклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия
	|ПОМЕСТИТЬ СертификатыСРеквизитами
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Сертификаты.ПодарочныйСертификат = Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОбороты.Серия КАК Серия,
	|	МАКСИМУМ(СерииНоменклатурыОбороты.Период) КАК Период
	|ПОМЕСТИТЬ ПродажиСерийНоменклатуры
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Серия В
	|				(ВЫБРАТЬ
	|					Сертификаты.НомерСертификата КАК НомерСертификата
	|				ИЗ
	|					Сертификаты КАК Сертификаты)) КАК СерииНоменклатурыОбороты
	|ГДЕ
	|	(СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииНоменклатурыОбороты.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыСРеквизитами.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	СертификатыСРеквизитами.НомерСертификата КАК НомерСертификата,
	|	ВЫБОР
	|		КОГДА СертификатыСРеквизитами.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату)
	|			ТОГДА СертификатыСРеквизитами.ДатаОкончанияДействия
	|		КОГДА СертификатыСРеквизитами.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи)
	|			ТОГДА ВЫБОР
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕНЬ, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, НЕДЕЛЯ, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕКАДА, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, МЕСЯЦ, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, КВАРТАЛ, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ПОЛУГОДИЕ, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА СертификатыСРеквизитами.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ГОД, СертификатыСРеквизитами.КоличествоПериодовДействия), ДЕНЬ)
	|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СертификатыСРеквизитами.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры
	|			ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
	|		ИНАЧЕ СертификатыСРеквизитами.ПодарочныйСертификат.Номинал
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	СертификатыСРеквизитами КАК СертификатыСРеквизитами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиСерийНоменклатуры КАК ПродажиСерийНоменклатуры
	|		ПО СертификатыСРеквизитами.НомерСертификата = ПродажиСерийНоменклатуры.Серия
	|			И (СертификатыСРеквизитами.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки КАК ПодарочныеСертификатыОстатки
	|		ПО СертификатыСРеквизитами.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И СертификатыСРеквизитами.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата");
	
	Запрос.УстановитьПараметр("Номер", Номер);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру с остатком и сроком действия переданного сертификата
// Параметры:
//  ПодарочныйСертификат - Справочник.Номенклатура - Вид искомого сертификата
//  НомерСертификата - Справочник.СерииНоменклатуры - Номер искомого сертификата
//
Функция ПолучитьСтруктуруДанныхСертификата(ПодарочныйСертификат, НомерСертификата, Документ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ПодарочныйСертификат,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	Номенклатура.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	Номенклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	Номенклатура.Периодичность КАК Периодичность,
	|	Номенклатура.ТипСрокаДействия КАК ТипСрокаДействия
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (СерииНоменклатуры.Ссылка = &НомерСертификата)
	|ГДЕ
	|	Номенклатура.Ссылка = &ПодарочныйСертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОбороты.Серия КАК Серия,
	|	МАКСИМУМ(СерииНоменклатурыОбороты.Период) КАК Период
	|ПОМЕСТИТЬ ПродажиСерийНоменклатуры
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Обороты(, , Регистратор, Серия = &НомерСертификата) КАК СерииНоменклатурыОбороты
	|ГДЕ
	|	(СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииНоменклатурыОбороты.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификатыОбороты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ПодарочныеСертификатыОбороты.НомерСертификата КАК НомерСертификата,
	|	ПодарочныеСертификатыОбороты.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ОборотПоДокументу
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ПодарочныйСертификат = &ПодарочныйСертификат
	|				И НомерСертификата = &НомерСертификата) КАК ПодарочныеСертификатыОбороты
	|ГДЕ
	|	ПодарочныеСертификатыОбороты.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ЕСТЬNULL(ОборотПоДокументу.СуммаОборот, 0) КАК Остаток,
	|	ВЫБОР
	|		КОГДА Сертификаты.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату)
	|			ТОГДА Сертификаты.ДатаОкончанияДействия
	|		КОГДА Сертификаты.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи)
	|			ТОГДА ВЫБОР
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕНЬ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, НЕДЕЛЯ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕКАДА, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, МЕСЯЦ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, КВАРТАЛ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ПОЛУГОДИЕ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ГОД, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиСерийНоменклатуры КАК ПродажиСерийНоменклатуры
	|		ПО Сертификаты.Серия = ПродажиСерийНоменклатуры.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|				,
	|				ПодарочныйСертификат = &ПодарочныйСертификат
	|					И НомерСертификата = &НомерСертификата) КАК ПодарочныеСертификатыОстатки
	|		ПО Сертификаты.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И Сертификаты.Серия = ПодарочныеСертификатыОстатки.НомерСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотПоДокументу КАК ОборотПоДокументу
	|		ПО Сертификаты.ПодарочныйСертификат = ОборотПоДокументу.ПодарочныйСертификат
	|			И Сертификаты.Серия = ОборотПоДокументу.НомерСертификата");
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("НомерСертификата", НомерСертификата);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	СтруктураВозврата = Новый Структура("Остаток, ДатаОкончания");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает таблицу с остатками и окончанием действия переданных сертификатов
// Параметры:
//  ТаблицаСертификатов - ТаблицаЗначений - содержит колонки:
//   *ПодарочныйСертификат - СправочникСсылка.Номенклатура
//   *НомерСертификата - СправочникСсылка.СерииНоменклатуры
//
Функция ПолучитьСтруктуруДанныхПоТаблицеСертификатов(ТаблицаСертификатов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаСертификатов.НомерСертификата КАК НомерСертификата
	|ПОМЕСТИТЬ ТаблицаСертификатов
	|ИЗ
	|	&ТаблицаСертификатов КАК ТаблицаСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСертификатов.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаСертификатов.НомерСертификата КАК НомерСертификата,
	|	Номенклатура.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	Номенклатура.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	Номенклатура.Периодичность КАК Периодичность,
	|	Номенклатура.ТипСрокаДействия КАК ТипСрокаДействия
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	ТаблицаСертификатов КАК ТаблицаСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаСертификатов.ПодарочныйСертификат = Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОбороты.Серия КАК Серия,
	|	МАКСИМУМ(СерииНоменклатурыОбороты.Период) КАК Период
	|ПОМЕСТИТЬ ПродажиСерийНоменклатуры
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Серия В
	|				(ВЫБРАТЬ
	|					ТаблицаСертификатов.НомерСертификата КАК НомерСертификата
	|				ИЗ
	|					ТаблицаСертификатов КАК ТаблицаСертификатов)) КАК СерииНоменклатурыОбороты
	|ГДЕ
	|	(СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ СерииНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииНоменклатурыОбороты.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	Сертификаты.НомерСертификата КАК НомерСертификата,
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК Остаток,
	|	ВЫБОР
	|		КОГДА Сертификаты.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.СОграничениемНаДату)
	|			ТОГДА Сертификаты.ДатаОкончанияДействия
	|		КОГДА Сертификаты.ТипСрокаДействия = ЗНАЧЕНИЕ(Перечисление.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи)
	|			ТОГДА ВЫБОР
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕНЬ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, НЕДЕЛЯ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ДЕКАДА, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, МЕСЯЦ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, КВАРТАЛ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ПОЛУГОДИЕ, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					КОГДА Сертификаты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПродажиСерийНоменклатуры.Период, ГОД, Сертификаты.КоличествоПериодовДействия), ДЕНЬ)
	|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
	|		ПО Сертификаты.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|			И Сертификаты.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиСерийНоменклатуры КАК ПродажиСерийНоменклатуры
	|		ПО Сертификаты.НомерСертификата = ПродажиСерийНоменклатуры.Серия");
	Запрос.УстановитьПараметр("ТаблицаСертификатов", ТаблицаСертификатов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет позволяет ли область действия сертификатов оплатить все товары документа
// Параметры:
//  СтруктураДляПроверки - Структура - содержит две таблицы значений:
//   * Запасы - ТаблицаЗначений - Таблица товаров с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//    * Сумма - Число
//   * Сертификаты - ТаблицаЗначений - Таблица сертификатов с колонками:
//    * ПодарочныйСертификат - СправочникСсылка.Номенклатура
//    * Сумма - Число
//  Отказ - Булево
Процедура ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ) Экспорт
	
	// Если не было оплаты сертификатами
	Если СтруктураДляПроверки.Сертификаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	СтруктураДляПроверки.Сертификаты.Свернуть("ПодарочныйСертификат", "Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОграниченийПодарочногоСертификата();
	Запрос.УстановитьПараметр("Товары", СтруктураДляПроверки.Запасы);
	
	Для Каждого СтрокаСертификата Из СтруктураДляПроверки.Сертификаты Цикл
		
		// Если у сертификата нет ограничений, он не нуждается в проверке
		Если СтрокаСертификата.ПодарочныйСертификат.НоменклатураГруппыЦеновыеГруппы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСертификата.ПодарочныйСертификат.СпособОграниченияСертификата = Перечисления.СпособыОграниченияПодарочныхСертификатов.НеОграничен Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПараметрыЗапросаОграниченийПодарочногоСертификата(Запрос, СтрокаСертификата.ПодарочныйСертификат);
		
		СуммаВозможнойОплаты = Запрос.Выполнить().Выгрузить().Итог("Сумма");
		
		Если СуммаВозможнойОплаты < СтрокаСертификата.Сумма Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru='Сертификатом вида """ + СтрокаСертификата.ПодарочныйСертификат + """ можно оплатить не более "
				+ СуммаВозможнойОплаты + " " + УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() + ".'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроверкаОбластиДействияСертификатов", ВремяНачала);
	
КонецПроцедуры

Процедура УдалитьСертификатыИзТаблицы(ТаблицаЗначений, ИмяКолонки) Экспорт
	
	ТипПодарочныйСертификат = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	Для Индекс = 1 - ТаблицаЗначений.Количество() По 0 Цикл
		СтрокаТаблицы = ТаблицаЗначений.Получить(-Индекс);
		Если СтрокаТаблицы[ИмяКолонки].ТипНоменклатуры = ТипПодарочныйСертификат Тогда
			ТаблицаЗначений.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьСлужебногоКонтрагента() Экспорт
	
	Контрагент = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйЭлемент.Заполнить(Неопределено);
	
	НовыйЭлемент.Наименование = "Служебный контрагент для подарочных сертификатов";
	НовыйЭлемент.НаименованиеПолное = "Служебный контрагент для подарочных сертификатов";
	
	НовыйЭлемент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	
	НовыйЭлемент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйЭлемент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйЭлемент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	НовыйЭлемент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	НовыйЭлемент.ВестиРасчетыПоДоговорам = Истина;
	НовыйЭлемент.ВестиРасчетыПоДокументам = Ложь;
	НовыйЭлемент.ВестиРасчетыПоЗаказам = Ложь;
	НовыйЭлемент.ВестиУчетОплатыПоСчетам = Ложь;
	
	НовыйЭлемент.Записать();
	
	Константы.КонтрагентДляПодарочныхСертификатов.Установить(НовыйЭлемент.Ссылка);
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьБезналичнуюОплатуДокумента(Документ) Экспорт
	
	ЕстьТерминал =  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "ЭквайринговыйТерминал");
	
	Для Каждого СтрокаОплаты Из Документ.БезналичнаяОплата Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) Тогда
			СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
			Если Не ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) И ЕстьТерминал Тогда
				СтрокаОплаты.ЭквайринговыйТерминал = Документ.ЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет указан ли в документе ордерный склад, и если да, присутствуют ли
// в ТЧ подарочные сертификаты
// Параметры:
//  Отказ - Булево - переменная из процедуры проверки заполнения
//  Объект - ДокументОбъект - проверяемый документ
//  ИмяТаблицы - Строка - имя табличной части для поиска сертификатов
//  ИмяСклада - Строка - имя реквизита склада для проверки
//  СкладВШапке - Булево - положение склада в документе
Процедура ПроверитьВозможностьИспользованияСертификатов(Отказ, Объект, ИмяТаблицы, ИмяСклада, СкладВШапке) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		Возврат;
	КонецЕсли;
	
	Если СкладВШапке Тогда
		Если Не Объект[ИмяСклада].ОрдерныйСклад Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТипСертификат = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		Если (СтрокаТаблицы.Номенклатура.ТипНоменклатуры = ТипСертификат) Тогда
			
			Если СкладВШапке Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Нельзя перемещать, либо приходовать подарочные сертификаты на ордерные склады!'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
				Прервать;
				
			ИначеЕсли СтрокаТаблицы[ИмяСклада].ОрдерныйСклад Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Нельзя перемещать, либо приходовать подарочные сертификаты на ордерные склады!'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьСертификаты(ТабличнаяЧасть) Экспорт
	
	Результат = Ложь;
	
	Если ТабличнаяЧасть.Колонки.Найти("ОплатаСертификатом") <> Неопределено Тогда // Предоплата
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если СтрокаТаблицы.ОплатаСертификатом Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТабличнаяЧасть.Колонки.Найти("ВидОплаты") <> Неопределено Тогда // БезналичнаяОплата
		
		ВидСертификат = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат");
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			Если СтрокаТаблицы.ВидОплаты = ВидСертификат Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТабличнаяЧасть.Колонки.Найти("Номенклатура") <> Неопределено Тогда // Запасы
		
		ТипСертификат = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры = ТипСертификат Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСписокНомеровСертификатов(Текст, Владелец) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Владелец
	|	И СерииНоменклатуры.Наименование ПОДОБНО &Текст
	|	И СерииНоменклатуры.Продан");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Текст", "%"+Текст+"%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		Список.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция УказанКонтрагентДляПредоплаты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ЗначениеЗаполнено(Константы.КонтрагентДляПодарочныхСертификатов.Получить());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПроверкуОграниченийСертификатовВРМК(СтруктураЧека, Отказ) Экспорт
	
	// Проверка срока действия
	ПроверитьСрокДействия(СтруктураЧека, "БезналичнаяОплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	СтруктураДляПроверки.Вставить("Запасы", СтруктураЧека.Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	СтруктураДляПроверки.Вставить("Сертификаты", СтруктураЧека.БезналичнаяОплата.Выгрузить(
		Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат),
		"ПодарочныйСертификат, Сумма"));
	ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

Функция СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(ЭтоОпт = Ложь, ЭтоВозврат = Ложь, ЭтоОтчет = Ложь) Экспорт
	
	Если ЭтоОпт Тогда
	
		Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТаблицаДокумента.Документ КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.СуммаСертификата * &ЭтоВозврат КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ОплатаСертификатом";
		
	Иначе
		
		Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Период,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.СуммаСертификата * &ЭтоВозврат КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
		
		Если ЭтоОтчет Тогда
			Текст = Текст + "
			|И &ПолноеПроведение";
		Иначе
			Текст = Текст + "
			|И &ЧекПробит
			|И Не &Архивный";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		Текст = СтрЗаменить(Текст, "&ЭтоВозврат", "-1");
	Иначе
		Текст = СтрЗаменить(Текст, "&ЭтоВозврат", "1");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьПредставлениеПодарочногоСертификатаКакПлатежногоДокумента(СертификатСсылка, ОплачиваемыйДокументСсылка, НомерСертификата) Экспорт
	
	Возврат Новый Структура("Дата, Номер", "", ""+НомерСертификата);
	
КонецФункции

Процедура ДобавитьВнереализационнуюПрибыль(ДокументОбъект, ОбщиеПараметры) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "БезналичнаяОплата") Тогда
		Запрос.Текст = ТекстЗапросаПоВнереализационнойПрибылиДляФискализацииРозница();
		Запрос.УстановитьПараметр("БезналичнаяОплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Предоплата") Тогда
		Запрос.Текст = ТекстЗапросаПоВнереализационнойПрибылиДляФискализацииОпт();
		Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата.Выгрузить());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Если ПотериПокупателя > 0 Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		СтрокаПозицииЧека.Количество = 1;
		СтрокаПозицииЧека.Наименование = "8";
		Если ОбщиеПараметры.ПозицииЧека.Количество() > 0 Тогда
			ПоследняяПозиция = ОбщиеПараметры.ПозицииЧека[ОбщиеПараметры.ПозицииЧека.Количество() - 1];
			СтрокаПозицииЧека.НомерСекции = ПоследняяПозиция.НомерСекции;
		Иначе
			СтрокаПозицииЧека.НомерСекции = 1;
		КонецЕсли; 
		
		СтрокаПозицииЧека.НомерСтрокиТовара      = ОбщиеПараметры.ПозицииЧека.Количество();
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход;
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		СтрокаПозицииЧека.СтавкаНДС              = Неопределено;
		СтрокаПозицииЧека.Сумма                  = ПотериПокупателя;
		СтрокаПозицииЧека.Цена                   = ПотериПокупателя;
		СтрокаПозицииЧека.ЦенаСоСкидками         = ПотериПокупателя;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		СтрокаТаблицыОплат = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаТаблицыОплат.Сумма     = ПотериПокупателя;
		СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаТаблицыОплат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаОграниченийПодарочногоСертификата()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК ГруппаНоменклатуры
	|ПОМЕСТИТЬ ОграниченияГруппыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа
	|	И &ОграничениеПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК Номенклатура
	|ПОМЕСТИТЬ ОграниченияНоменклатура
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И НЕ НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа
	|	И &ОграничениеПоНоменклатуре
	|	И НоменклатураНоменклатураГруппыЦеновыеГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК Номенклатура,
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОграниченияНоменклатураХарактеристика
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И НЕ НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа
	|	И &ОграничениеПоНоменклатуре
	|	И НЕ НоменклатураНоменклатураГруппыЦеновыеГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК ГруппаКатегорий
	|ПОМЕСТИТЬ ОграниченияГруппыКатегорий
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа
	|	И &ОграничениеПоКатегориям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК Категория
	|ПОМЕСТИТЬ ОграниченияКатегорий
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И НЕ НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа
	|	И &ОграничениеПоКатегориям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения КАК ГруппаНоменклатуры
	|ПОМЕСТИТЬ ОграниченияЦеновыхГрупп
	|ИЗ
	|	Справочник.Номенклатура.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураНоменклатураГруппыЦеновыеГруппы
	|ГДЕ
	|	НоменклатураНоменклатураГруппыЦеновыеГруппы.Ссылка = &ПодарочныйСертификат
	|	И &ОграничениеПоЦеновымГруппам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма) КАК Сумма
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	&ОграничениеПоНоменклатуре
	|	И &ВключатьОграничение
	|	И (Товары.Номенклатура В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					ОграниченияГруппыНоменклатуры.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|				ИЗ
	|					ОграниченияГруппыНоменклатуры КАК ОграниченияГруппыНоменклатуры)
	|			ИЛИ Товары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ОграниченияНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ОграниченияНоменклатура КАК ОграниченияНоменклатура)
	|			ИЛИ (Товары.Номенклатура, Товары.Характеристика) В
	|				(ВЫБРАТЬ
	|					ОграниченияНоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|					ОграниченияНоменклатураХарактеристика.Характеристика КАК Характеристика
	|				ИЗ
	|					ОграниченияНоменклатураХарактеристика КАК ОграниченияНоменклатураХарактеристика))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	(СпрНоменклатура.КатегорияНоменклатуры В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					ОграниченияГруппыКатегорий.ГруппаКатегорий КАК ГруппаКатегорий
	|				ИЗ
	|					ОграниченияГруппыКатегорий КАК ОграниченияГруппыКатегорий)
	|			ИЛИ СпрНоменклатура.КатегорияНоменклатуры В
	|				(ВЫБРАТЬ
	|					ОграниченияКатегорий.Категория КАК Категория
	|				ИЗ
	|					ОграниченияКатегорий КАК ОграниченияКатегорий))
	|	И &ОграничениеПоКатегориям
	|	И &ВключатьОграничение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ЦеноваяГруппа В
	|			(ВЫБРАТЬ
	|				ОграниченияЦеновыхГрупп.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|			ИЗ
	|				ОграниченияЦеновыхГрупп КАК ОграниченияЦеновыхГрупп)
	|	И &ОграничениеПоЦеновымГруппам
	|	И &ВключатьОграничение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Номенклатура В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					ОграниченияГруппыНоменклатуры.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|				ИЗ
	|					ОграниченияГруппыНоменклатуры КАК ОграниченияГруппыНоменклатуры)
	|	И НЕ Товары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ОграниченияНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ОграниченияНоменклатура КАК ОграниченияНоменклатура)
	|	И НЕ (Товары.Номенклатура, Товары.Характеристика) В
	|				(ВЫБРАТЬ
	|					ОграниченияНоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|					ОграниченияНоменклатураХарактеристика.Характеристика КАК Характеристика
	|				ИЗ
	|					ОграниченияНоменклатураХарактеристика КАК ОграниченияНоменклатураХарактеристика)
	|	И &ОграничениеПоНоменклатуре
	|	И &ИсключатьОграничение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.КатегорияНоменклатуры В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					ОграниченияГруппыКатегорий.ГруппаКатегорий КАК ГруппаКатегорий
	|				ИЗ
	|					ОграниченияГруппыКатегорий КАК ОграниченияГруппыКатегорий)
	|	И НЕ СпрНоменклатура.КатегорияНоменклатуры В
	|				(ВЫБРАТЬ
	|					ОграниченияКатегорий.Категория КАК Категория
	|				ИЗ
	|					ОграниченияКатегорий КАК ОграниченияКатегорий)
	|	И &ОграничениеПоКатегориям
	|	И &ИсключатьОграничение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма)
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ЦеноваяГруппа В
	|				(ВЫБРАТЬ
	|					ОграниченияЦеновыхГрупп.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|				ИЗ
	|					ОграниченияЦеновыхГрупп КАК ОграниченияЦеновыхГрупп)
	|	И &ОграничениеПоЦеновымГруппам
	|	И &ИсключатьОграничение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаОграниченийПодарочногоСертификата(Запрос, Знач ПодарочныйСертификат)
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("ОграничениеПоНоменклатуре",
		ПодарочныйСертификат.ВариантОграниченияСертификата = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре);
	Запрос.УстановитьПараметр("ОграничениеПоКатегориям",
		ПодарочныйСертификат.ВариантОграниченияСертификата = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям);
	Запрос.УстановитьПараметр("ОграничениеПоЦеновымГруппам",
		ПодарочныйСертификат.ВариантОграниченияСертификата = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам);
	Запрос.УстановитьПараметр("ВключатьОграничение",
		ПодарочныйСертификат.СпособОграниченияСертификата = Перечисления.СпособыОграниченияПодарочныхСертификатов.ЗапрещеныКроме);
	Запрос.УстановитьПараметр("ИсключатьОграничение",
		ПодарочныйСертификат.СпособОграниченияСертификата = Перечисления.СпособыОграниченияПодарочныхСертификатов.РазрешеныКроме);
	Запрос.УстановитьПараметр("НеОграничивать",
		ПодарочныйСертификат.СпособОграниченияСертификата = Перечисления.СпособыОграниченияПодарочныхСертификатов.НеОграничен);
	
КонецПроцедуры

Функция ТекстЗапросаПоВнереализационнойПрибылиДляФискализацииРозница()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БезналичнаяОплата.ВидОплаты КАК ВидОплаты,
	|	БезналичнаяОплата.Сумма КАК Сумма,
	|	БезналичнаяОплата.СуммаПогашенияСертификата КАК СуммаПогашенияСертификата
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&БезналичнаяОплата КАК БезналичнаяОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.СуммаПогашенияСертификата - ТаблицаОплаты.Сумма КАК Разница
	|ИЗ
	|	ТаблицаОплаты КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаПоВнереализационнойПрибылиДляФискализацииОпт()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Предоплата.ОплатаСертификатом КАК ОплатаСертификатом,
	|	Предоплата.СуммаПогашенияСертификата КАК СуммаПогашенияСертификата,
	|	Предоплата.СуммаРасчетов КАК СуммаРасчетов
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.СуммаПогашенияСертификата - ТаблицаОплаты.СуммаРасчетов КАК Разница
	|ИЗ
	|	ТаблицаОплаты КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.ОплатаСертификатом";
	
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти
