
#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	УстановитьВернутьОграничениеПоТарификацииЕслиНужно(ТребуетсяОбновлениеИнтерфейса = Ложь);
	Параметры.Вставить("УстановленСоставФормТребуетсяОбновлениеИнтерфейса", ТребуетсяОбновлениеИнтерфейса);
	
КонецПроцедуры

// Запускается при начале работы клиента. Устанавливает ограничения по тарификации.
//
Процедура УстановитьВернутьОграничениеПоТарификацииЕслиНужно(ТребуетсяОбновлениеИнтерфейса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПользователей = ПолучитьМассивПользователей();
	
	ЕстьОграничениеМобильногоУНФ = ЕстьОграничениеМобильногоУНФ() И НЕ ЕстьПробныйПериод();
	Если ЕстьОграничениеМобильногоУНФ <> ЭтоМобильноеПриложение() Тогда
		УстановитьЭтоМобильноеПриложение(ЕстьОграничениеМобильногоУНФ);
		// Устанавливаем/снимаем ограничения
		Если ЕстьОграничениеМобильногоУНФ Тогда
			УстановитьМинимальныйИнтерфейс(МассивПользователей);
		Иначе
			УстановитьОбычныйИнтерфейс(МассивПользователей);
		КонецЕсли;
		УстановитьСоставФормДляПользователей(МассивПользователей, ТребуетсяОбновлениеИнтерфейса);
	КонецЕсли;
	
	ЕстьОграничениеМобильногоУНФ20 = ЕстьОграничениеМобильногоУНФ20() И НЕ ЕстьПробныйПериод();
	Если ЕстьОграничениеМобильногоУНФ20 <> ЭтоМобильноеПриложение20() Тогда
		УстановитьЭтоМобильноеПриложение20(ЕстьОграничениеМобильногоУНФ20);
		// Устанавливаем/снимаем ограничения
		Если ЕстьОграничениеМобильногоУНФ20 Тогда
			УстановитьМинимальныйИнтерфейс(МассивПользователей);
		Иначе
			УстановитьОбычныйИнтерфейс(МассивПользователей);
		КонецЕсли;
		УстановитьСоставФормДляПользователей(МассивПользователей, ТребуетсяОбновлениеИнтерфейса);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОграничениеМобильногоУНФ20() Экспорт
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		И ИспользоватьКонтрольТарификации() Тогда
		Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторПоставщикаУслугМобильногоПриложения(), ИдентификаторУслугиОграниченияМобильногоПриложения20());
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ЕстьОграничениеМобильногоУНФ() Экспорт
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		И ИспользоватьКонтрольТарификации() Тогда
		Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторПоставщикаУслугМобильногоПриложения(), ИдентификаторУслугиОграниченияМобильногоПриложения());
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьПробныйПериод() Экспорт
	
	Если РаботаВМоделиСервиса.РазделениеВключено()
		И ИспользоватьКонтрольТарификации() Тогда
		Возврат Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторПоставщикаУслугМобильногоПриложения(), ИдентификаторУслугиПробныйПериод());
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что эта информационная база работает в режиме ограниченной функциональности.
//
Функция ЭтоМобильноеПриложение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЭтоМобильноеПриложение.Получить();
	
КонецФункции   

Функция ЭтоМобильноеПриложение20() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЭтоМобильноеПриложение20.Получить();
	
КонецФункции

// Возвращает признак того, что эта информационная база работает в режиме ограниченной функциональности.
//
Функция НужноОграничитьФункциональность() Экспорт
	
	Возврат ЭтоМобильноеПриложение();
	
КонецФункции

Функция НужноОграничитьФункциональность20() Экспорт
	
	Возврат ЭтоМобильноеПриложение20();
	
КонецФункции

Функция ПолучитьМассивПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИД
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустойИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПользователей = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Возврат МассивПользователей;

КонецФункции

Процедура УстановитьСоставФормДляПользователей(МассивПользователей, ТребуетсяОбновлениеИнтерфейса) Экспорт
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РабочийСтолУНФ.УстановитьСоставФорм(ТребуетсяОбновлениеИнтерфейса, ПользовательИБ.Имя);
	КонецЦикла;
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	РабочийСтолУНФ.УстановитьСоставФорм(ТребуетсяОбновлениеИнтерфейса, ИмяПользователя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановитьЭтоМобильноеПриложение(Знач Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ЭтоМобильноеПриложение.Установить(Значение);
	Константы.ЭтоОбычноеПриложение.Установить(НЕ Значение);
	Если Значение Тогда
		Константы.ЭтоМобильноеПриложение20.Установить(Ложь);
	КонецЕсли;
	
КонецФункции

Функция УстановитьЭтоМобильноеПриложение20(Знач Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ЭтоМобильноеПриложение20.Установить(Значение);
	Константы.ЭтоОбычноеПриложение.Установить(НЕ Значение);
	Если Значение Тогда
		Константы.ЭтоМобильноеПриложение.Установить(Ложь);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьОбычныйИнтерфейс(МассивПользователей) Экспорт
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Неопределено,, ПользовательИБ.Имя);
	КонецЦикла;
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Неопределено,, ИмяПользователя);
	
КонецПроцедуры 

Процедура УстановитьМинимальныйИнтерфейс(МассивПользователей) Экспорт

	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Настройки.УстановитьСостав(НастройкиСостава);
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки,, ПользовательИБ.Имя);
	КонецЦикла;
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки,, ИмяПользователя);

КонецПроцедуры

Процедура СервисныеОперацииМобильногоПриложения() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка,
	|	МобильноеПриложение.ДатаПоследнейСинхронизации
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	МобильноеПриложение.ДатаПоследнейСинхронизации <= &ДатаПоследнейСинхронизации";
	
	Запрос.УстановитьПараметр("ДатаПоследнейСинхронизации", ТекущаяДатаСеанса() - 86400);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаПоследнейСинхронизации) Тогда
			ОбменМобильноеПриложениеОбщее.ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом(Выборка.Ссылка);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				Узел = Выборка.Ссылка.ПолучитьОбъект();
				Узел.ДатаПоследнейСинхронизации = ТекущаяДатаСеанса();
				Узел.Записать();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Мобильное приложение.Установка даты последней синхронизации в регламентном задании'"),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	МассивУслуг = Новый Массив;
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОграниченияМобильногоПриложения20());
	Услуга.Вставить("Наименование", "Ограничения мобильного приложения 1С:УНФ 2.0");
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	МассивУслуг.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиОграниченияМобильногоПриложения());
	Услуга.Вставить("Наименование", "Ограничения мобильного приложения 1С:УНФ");
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	МассивУслуг.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиПробныйПериод());
	Услуга.Вставить("Наименование", "Пробный период 1С:УНФ");
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	МассивУслуг.Добавить(Услуга);
	
	НовыйПоставщикУНФ = Новый Структура;
	НовыйПоставщикУНФ.Вставить("Идентификатор", ИдентификаторПоставщикаУслугМобильногоПриложения());
	НовыйПоставщикУНФ.Вставить("Наименование", "1С:УНФ на мобильном");
	НовыйПоставщикУНФ.Вставить("Услуги", МассивУслуг);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщикУНФ);
	
КонецПроцедуры  

Функция ИдентификаторУслугиОграниченияМобильногоПриложения20()
	
	Возврат "ОграниениеМПУНФ20";
	
КонецФункции

Функция ИдентификаторУслугиОграниченияМобильногоПриложения()
	
	Возврат "ОграниениеМПУНФ";
	
КонецФункции

Функция ИдентификаторУслугиПробныйПериод() Экспорт
	
	Возврат "ПробныйПериод";
	
КонецФункции

Функция ИдентификаторПоставщикаУслугМобильногоПриложения()
	
	Возврат "1С_МПУНФ";
	
КонецФункции

// Возвращает значение константы "ИспользоватьКонтрольТарификации".
//
// Параметры:
//  Булево - Истина, если включена тарификация, Ложь - иначе.
//
Функция ИспользоватьКонтрольТарификации()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьКонтрольТарификации.Получить();
	
КонецФункции

#КонецОбласти

