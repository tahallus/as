////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСерверПереопределяемый: содержит ряд функций и процедур,
// используемых для расчета скидок и обработки связанных со скидками объектов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список значений способов предоставления скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийСпособовПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен);
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийСпособовПредоставленияСкидки()

// Формирует список значений способов начисления бонусов
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийСпособовНачисленияБонусов(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов, "Процент");
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов, "Количество");
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийСпособовПредоставленияСкидки()

// Формирует список значений возможных условий скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокЗначенийУсловийПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения);
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьДисконтныеКарты") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту,,, БиблиотекаКартинок.СчитатьДисконтнуюКарту);
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж,,, БиблиотекаКартинок.СчитатьДисконтнуюКарту);
	КонецЕсли;
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийУсловийПредоставленияСкидки()

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаСкидок

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") ИЛИ
		ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
	Тогда
		
		ДеревоСкидок = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ДеревоСкидок = РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		ДеревоСкидок = РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ДеревоСкидок = РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДеревоСкидок = РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры);
		Иначе
			ДеревоСкидок = РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		ДеревоСкидок = РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры);
		
	КонецЕсли;
	Если ВходныеПараметры.Свойство("СведенияДокумента") Тогда
		ДеревоСкидок.Вставить("СведенияДокумента", ВходныеПараметры.СведенияДокумента);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетАвтоматическихСкидок", ВремяНачала);
	
	Возврат ДеревоСкидок;
	
КонецФункции // Рассчитать()

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	КурсыВалют
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "КурсыВалют");
	
КонецФункции

#КонецОбласти

#Область ОтображениеСкидки

// Обновляет табличную Части скидки
//
// Параметры:
//  Объект - Чек ККМ или Реализация Товаров
//  ИмяТЧ - Имя табличной части
//  ИмяОсновнойТЧ - Имя табличной части
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
			
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.Номенклатура.ИспользоватьХарактеристики;
			
		КонецЕсли;
		
		СтрокаСкидкиНаценки.СкидкаЗапрещенаКПросмору = НЕ ПроверитьДоступКРеквизиту(СтрокаСкидкиНаценки, "СкидкаНаценка", "Справочник.АвтоматическиеСкидки");
		
	КонецЦикла;
	

КонецПроцедуры // ОбновитьОтображениеСкидки()

// Проверка доступа к реквизиту объекта
//
Функция ПроверитьДоступКРеквизиту(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуТовары(ТаблицаТоваров, пСоответствиеРеквизитов = Неопределено, пМассивУдаляемыхРеквизитов = Неопределено, ТаблицаРабот = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	РасходнаяНакладнаяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.Заказ КАК Заказ,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&РасходнаяНакладнаяЗапасы КАК РасходнаяНакладнаяЗапасы";
	
	Запрос.Текст = Запрос.Текст + "
	|
	|;
	|";
	
	Если ТаблицаРабот <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяРаботы.КлючСвязиДляСкидокНаценок КАК КлючСвязи,
		|	ВЫРАЗИТЬ(РасходнаяНакладнаяРаботы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	РасходнаяНакладнаяРаботы.Характеристика КАК Характеристика,
		|	РасходнаяНакладнаяРаботы.Количество КАК Количество,
		|	РасходнаяНакладнаяРаботы.Коэффициент КАК Коэффициент,
		|	РасходнаяНакладнаяРаботы.Кратность КАК Кратность,
		|	РасходнаяНакладнаяРаботы.Цена КАК Цена,
		|	РасходнаяНакладнаяРаботы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	РасходнаяНакладнаяРаботы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяРаботы.Заказ КАК Заказ,
		|	РасходнаяНакладнаяРаботы.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРаботы
		|ИЗ
		|	&РасходнаяНакладнаяРаботы КАК РасходнаяНакладнаяРаботы
		|ГДЕ
		|	&ЕстьРаботы";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|;
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ВременнаяТаблица.КлючСвязи КАК КлючСвязи,
	|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблица.Характеристика КАК Характеристика,
	|	ВременнаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблица.Количество КАК Количество,
	|	ВременнаяТаблица.Количество * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблица.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоВБазовыхЕдиницах,
	|	ВременнаяТаблица.Цена КАК Цена,
	|	ВременнаяТаблица.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ВременнаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблица.Заказ КАК Заказ,
	|	ВременнаяТаблица.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	
	Если ТаблицаРабот <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаРаботы.КлючСвязи КАК КлючСвязи,
		|	ВременнаяТаблицаРаботы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаРаботы.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ВременнаяТаблицаРаботы.Количество * ВременнаяТаблицаРаботы.Коэффициент * ВременнаяТаблицаРаботы.Кратность КАК Количество,
		|	ВременнаяТаблицаРаботы.Количество * ВременнаяТаблицаРаботы.Коэффициент * ВременнаяТаблицаРаботы.Кратность КАК КоличествоВБазовыхЕдиницах,
		|	ВременнаяТаблицаРаботы.Цена КАК Цена,
		|	ВременнаяТаблицаРаботы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ВременнаяТаблицаРаботы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаРаботы.Заказ КАК Заказ,
		|	ВременнаяТаблицаРаботы.Сумма КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасходнаяНакладнаяЗапасы", ТаблицаТоваров);
	Запрос.УстановитьПараметр("РасходнаяНакладнаяРаботы", ?(ТаблицаРабот = Неопределено, Новый ТаблицаЗначений, ТаблицаРабот));
	Запрос.УстановитьПараметр("ЕстьРаботы", ТаблицаРабот <> Неопределено);
	
	Если пСоответствиеРеквизитов <> Неопределено Тогда
		Для Каждого КлючЗначение Из пСоответствиеРеквизитов Цикл
			Запрос.Текст = СтрЗаменить(Запрос.Текст, КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Если пМассивУдаляемыхРеквизитов <> Неопределено Тогда
		Для Каждого ТекущееЗначение Из пМассивУдаляемыхРеквизитов Цикл
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	РасходнаяНакладнаяЗапасы."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ВременнаяТаблица."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
			
			// Для заказ-наряда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	РасходнаяНакладнаяРаботы."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ВременнаяТаблицаРаботы."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(Объект, СтруктурнаяЕдиница, ВходныеПараметры)
	
	ТекущаяДата = Объект.Дата;
	
	// Нам нужно получить список всех автоматических скидок, которые нужно рассчитывать.
	// 1. Получим все скидки, которые подходят по времени действия.
	// 2. Получим все скидки, которые подходят по получателями по равенству получателя скидки и контрагента, который выбран
	// в документе. 3. Отдельно обработаем скидки, в которых встречаются группы в качестве получателей скидки.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСкладам КАК ЕстьОграниченияПоПолучателямСкладам
	|ПОМЕСТИТЬ ВТ_СкидкиПослеОтбораПоДнямНедели
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|				И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Везде)
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСкладам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И (АвтоматическиеСкидки.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидки.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидки.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидки.ДатаОкончания, ДЕНЬ))
	|	И (АвтоматическиеСкидки.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидки.Ссылка.Назначение = &Везде)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуПолучателя
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиСклады КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|			И (АвтоматическиеСкидкиПолучателиСкидки.Получатель = &СтруктурнаяЕдиница)
	|ГДЕ
	|	(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Розница
	|			ИЛИ АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Везде)
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Действует
	|	И (АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ЕстьОграниченияПоПолучателямСкладам
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|ГДЕ
	|	НЕ ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямСкладам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|		ПО ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка = ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ГДЕ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямСкладам
	|	И ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &БонуснаяПрограмма = ЗНАЧЕНИЕ(Справочник.БонусныеПрограммы.ПустаяСсылка)
	|				ТОГДА НЕ ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка.ЭтоПравилоНачисленияБонусов
	|			ИНАЧЕ ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка.ЭтоПравилоНачисленияБонусов
	|					И ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка.БонуснаяПрограмма = &БонуснаяПрограмма
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Розница", Перечисления.НазначенияАвтоматическихСкидок.Розница);
	Запрос.УстановитьПараметр("Везде", Перечисления.НазначенияАвтоматическихСкидок.Везде);
	// Для скидки "За время продажи".
	Запрос.УстановитьПараметр("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Если ВходныеПараметры.Свойство("БонуснаяПрограмма") Тогда
		Запрос.УстановитьПараметр("БонуснаяПрограмма", ВходныеПараметры.БонуснаяПрограмма);
	Иначе
		Запрос.УстановитьПараметр("БонуснаяПрограмма", Справочники.БонусныеПрограммы.ПустаяСсылка());
	КонецЕсли;
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗСкидок = МРезультатов[3].Выгрузить();
	
	Возврат ТЗСкидок;
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, СтруктурнаяЕдиница, ВходныеПараметры)
	
	ТекущаяДата = Объект.Дата;
	
	// Нам нужно получить список всех автоматических скидок, которые нужно рассчитывать.
	// 1. Получим все скидки, которые подходят по времени действия.
	// 2. Получим все скидки, которые подходят по получателями по равенству получателя скидки и контрагента, который выбран
	// в документе. 3. Отдельно обработаем скидки, в которых встречаются группы в качестве получателей скидки.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам КАК ЕстьОграниченияПоПолучателямКонтрагентам,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСегментам КАК ЕстьОграниченияПоПолучателямСегментам
	|ПОМЕСТИТЬ ВТ_СкидкиПослеОтбораПоДнямНедели
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|				И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Везде)
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямКонтрагентам,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСегментам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И (АвтоматическиеСкидки.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидки.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидки.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидки.ДатаОкончания, ДЕНЬ))
	|	И (АвтоматическиеСкидки.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидки.Ссылка.Назначение = &Везде)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСегментам КАК ЕстьОграниченияПоПолучателямСегментам,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам КАК ЕстьОграниченияПоПолучателямКонтрагентам
	|ПОМЕСТИТЬ ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|				И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение = &Везде)
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСегментам,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямКонтрагентам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И (АвтоматическиеСкидки.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидки.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидки.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидки.ДатаОкончания, ДЕНЬ))
	|	И (АвтоматическиеСкидки.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидки.Ссылка.Назначение = &Везде)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуПолучателя
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка
	|			И (АвтоматическиеСкидкиПолучателиСкидки.Получатель = &СтруктурнаяЕдиница)
	|ГДЕ
	|	(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Назначение = &Везде)
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.Действует
	|	И (АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидкиПолучателиСегменты.Ссылка,
	|	СоставСегментаКонтрагентов.Контрагент
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиСегменты КАК АвтоматическиеСкидкиПолучателиСегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты КАК ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты
	|		ПО АвтоматическиеСкидкиПолучателиСегменты.Ссылка = ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаКонтрагентов КАК СоставСегментаКонтрагентов
	|		ПО АвтоматическиеСкидкиПолучателиСегменты.Получатель = СоставСегментаКонтрагентов.Сегмент
	|			И (СоставСегментаКонтрагентов.Контрагент = &СтруктурнаяЕдиница)
	|ГДЕ
	|	(АвтоматическиеСкидкиПолучателиСегменты.Ссылка.Назначение = &Опт
	|			ИЛИ АвтоматическиеСкидкиПолучателиСегменты.Ссылка.Назначение = &Везде)
	|	И АвтоматическиеСкидкиПолучателиСегменты.Ссылка.Действует
	|	И (АвтоматическиеСкидкиПолучателиСегменты.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиПолучателиСегменты.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиПолучателиСегменты.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиПолучателиСегменты.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И АвтоматическиеСкидкиПолучателиСегменты.Ссылка.ЕстьОграниченияПоПолучателямСегментам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|ГДЕ
	|	НЕ ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямКонтрагентам
	|	И НЕ ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямСегментам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты.Ссылка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты КАК ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты
	|ГДЕ
	|	НЕ ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты.ЕстьОграниченияПоПолучателямСегментам
	|	И НЕ ВТ_СкидкиПослеОтбораПоДнямНеделиСегменты.ЕстьОграниченияПоПолучателямКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|ИЗ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели КАК ВТ_СкидкиПослеОтбораПоДнямНедели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|		ПО ВТ_СкидкиПослеОтбораПоДнямНедели.Ссылка = ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка
	|ГДЕ
	|	ВТ_СкидкиПослеОтбораПоДнямНедели.ЕстьОграниченияПоПолучателямКонтрагентам
	|	И ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиПоРавенствуПолучателя.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ВТ_СкидкиПоРавенствуПолучателя КАК ВТ_СкидкиПоРавенствуПолучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиНеПрошедшиеОтборПоПолучателю КАК ВТ_СкидкиНеПрошедшиеОтборПоПолучателю
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиНеПрошедшиеОтборПоПолучателю.Ссылка
	|ГДЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Опт", Перечисления.НазначенияАвтоматическихСкидок.Опт);
	Запрос.УстановитьПараметр("Везде", Перечисления.НазначенияАвтоматическихСкидок.Везде);
	// Для скидки "За время продажи".
	Запрос.УстановитьПараметр("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));	
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗСкидок = МРезультатов[4].Выгрузить();
	
	Если Не МРезультатов[5].Пустой() Тогда
		ШаблонТекстаЗапроса = "ВЫБРАТЬ
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Получатель,
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Ссылка
		                      |ПОМЕСТИТЬ ВТ_ПолучателиСкидки
		                      |ИЗ
		                      |	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
		                      |ГДЕ
		                      |	АвтоматическиеСкидкиПолучателиСкидки.Ссылка = &СсылкаАвтоСкидка
		                      |	И АвтоматическиеСкидкиПолучателиСкидки.Получатель.ЭтоГруппа
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	Получатель
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	&СсылкаАвтоСкидка КАК СкидкаНаценка
		                      |ГДЕ
		                      |	&СсылкаКонтрагент В ИЕРАРХИИ
		                      |			(ВЫБРАТЬ
		                      |				ВТ_ПолучателиСкидки.Получатель
		                      |			ИЗ
		                      |				ВТ_ПолучателиСкидки КАК ВТ_ПолучателиСкидки)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ВТ_ПолучателиСкидки";
	
		СчЗапросов = 0;
		ТекстЗапроса = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаКонтрагент", СтруктурнаяЕдиница);
		ВыборкаСкидокДляДополнительнойОбработки = МРезультатов[5].Выбрать();
		Пока ВыборкаСкидокДляДополнительнойОбработки.Следующий() Цикл
			СчЗапросов = СчЗапросов + 1;
			ТекСкидка = ВыборкаСкидокДляДополнительнойОбработки.Ссылка;
			
			Запрос.Текст = Запрос.Текст + СтрЗаменить(ШаблонТекстаЗапроса, "&СсылкаАвтоСкидка", "&СсылкаАвтоСкидка"+СчЗапросов)+Символы.ПС+"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
			Запрос.УстановитьПараметр("СсылкаАвтоСкидка"+СчЗапросов, ТекСкидка);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		МРезультатовСкидок = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		СчЗапросов = 1;
		Пока СчЗапросов < МРезультатовСкидок.Количество() Цикл
			Если НЕ МРезультатовСкидок[СчЗапросов].Пустой() Тогда
				СтрСкидок = ТЗСкидок.Добавить();
				СтрСкидок.СкидкаНаценка = МРезультатовСкидок[СчЗапросов].Выгрузить()[0].СкидкаНаценка;
			КонецЕсли;
			СчЗапросов = СчЗапросов + 3;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТЗСкидок;
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляОптовойТорговли()

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	
	ОтборСтрок = Неопределено;
	ВходныеПараметры.Свойство("ОтборСтрок", ОтборСтрок);
	
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(ОтборСтрок),, МассивУдаляемыхРеквизитов);
	
	СтруктураДополнительныхПараметров = Новый Структура("ПрименитьОбщийВидЦен, СкладТолькоВТЧ, СкладВШапке", НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"), Ложь, Неопределено);
	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы", СтруктураДополнительныхПараметров);

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыРасчета.Вставить("СкладПродажи" , Объект.СтруктурнаяЕдиницаПродажи);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки,,,, ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы", "Работы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(),, МассивУдаляемыхРеквизитов, Объект.Работы.Выгрузить());

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы"); 
	СтруктураДополнительныхПараметров = Новый Структура("ПрименитьОбщийВидЦен, СкладТолькоВТЧ, СкладВШапке", Ложь, Ложь, Истина);
	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Работы", СтруктураДополнительныхПараметров);

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.СтруктурнаяЕдиницаПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , "Работы", ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить());

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки",			ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(Объект, Объект.СтруктурнаяЕдиница, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор",			Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин",				Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",        			Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи",			Объект.Подразделение);
	ПараметрыРасчета.Вставить("Товары",					Товары);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",			Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",			ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",				Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",			ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",		Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",		Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		Иначе
			СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , , ПримененныеСкидкиНаценки.ДеревоСкидок);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЧекуККМ()

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Запасы".
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить());

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки",     ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор",       Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин",           Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",            Объект.ВидЦен);
	
	ПараметрыРасчета.Вставить("СкладПродажи",      Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа, , ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по отчету о переработке.
//
Функция РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Продукция");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Продукция".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	Товары = ПолучитьТаблицуТовары(Объект.Продукция.Выгрузить(),, МассивУдаляемыхРеквизитов);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Продукция");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Продукция", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , ,ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по СчетуНаОплату.
//
Функция РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(),, МассивУдаляемыхРеквизитов);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("ВидЦен"		 , Объект.ВидЦен);
	ПараметрыРасчета.Вставить("Магазин"      , Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , , ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по АктуВыполненныхРабот.
//
Функция РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "РаботыИУслуги");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "РаботыИУслуги".
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("Заказ", "ЗаказПокупателя");
	Товары = ПолучитьТаблицуТовары(Объект.РаботыИУслуги.Выгрузить(), СоответствиеРеквизитов);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "РаботыИУслуги");

	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗаказПокупателя) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(Объект, Объект.Контрагент, ВходныеПараметры));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.Подразделение);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "РаботыИУслуги", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа, , ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Возвращает переданную дату в текущем году
// 
// Возвращаемое значение:
//   Дата
//
Функция ДатаВТекущемГоду(ДатаРождения, ТекущаяДата)
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		Попытка
			Возврат Дата(Год(ТекущаяДата), Месяц(ДатаРождения), День(ДатаРождения));
		Исключение
			Возврат Дата(Год(ТекущаяДата), Месяц(ДатаРождения), День(ДатаРождения)-1);
		КонецПопытки;
	Иначе
		Возврат ДатаРождения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
