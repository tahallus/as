#Область ПрограммныйИнтерфейс

// Инициализирует дополнительные свойства для проведения документа.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - ссылка на проводимый документ.
// 	ДополнительныеСвойства - Структура - описание полей смотри в комментариях в теле процедуры.
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения",
	// "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура с ключом "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ - имя временной таблицы
	// и значение - признак наличия записей во временной таблице.
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
		Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	ЗаполнитьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	ДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", '00010101');
	ДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", '39991231');
		
	// Установка организации в случае ведения учета по компании.
	ДополнительныеСвойства.ДляПроведения.Организация = Константы.УчетПоКомпании.Компания(
		ДополнительныеСвойства.ДляПроведения.Организация);
	
	ЗаполнитьУчетнуюПолитику(ДополнительныеСвойства);
	
	// Данные по учету подарочных сертификатов
	ДополнительныеСвойства.Вставить("ДляСертификатов", Новый Структура);
	
	КонтрагентДляПредоплаты = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
	ДополнительныеСвойства.ДляСертификатов.Вставить("КонтрагентДляПредоплаты", КонтрагентДляПредоплаты);
	ДополнительныеСвойства.ДляСертификатов.Вставить("ДоговорПоУмолчанию",
		Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентДляПредоплаты));
	ДополнительныеСвойства.ДляСертификатов.Вставить("СчетУчетаАвансовПокупателя",
		КонтрагентДляПредоплаты.СчетУчетаАвансовПокупателя);
	
	// Данные по мультивалютному учету
	ДополнительныеСвойства.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	ДополнительныеСвойства.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	ДополнительныеСвойства.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
КонецПроцедуры

// Подготавливает таблицу для движений по регистру бухгалтерии "Управленческий".
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - ссылка на проводимый документ,
// 	ДополнительныеСвойства - Структура - поле "ДополнительныеСвойства" проводимого документа.
Процедура СформироватьТаблицуПроводок(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	ТаблицаУправленческий = Новый ТаблицаЗначений;
	
	ТаблицаУправленческий.Колонки.Добавить("НомерСтроки");
	ТаблицаУправленческий.Колонки.Добавить("Период");
	ТаблицаУправленческий.Колонки.Добавить("Организация");
	ТаблицаУправленческий.Колонки.Добавить("СценарийПланирования");
	ТаблицаУправленческий.Колонки.Добавить("СчетДт");
	ТаблицаУправленческий.Колонки.Добавить("ВалютаДт");
	ТаблицаУправленческий.Колонки.Добавить("СуммаВалДт");
	ТаблицаУправленческий.Колонки.Добавить("СчетКт");
	ТаблицаУправленческий.Колонки.Добавить("ВалютаКт");
	ТаблицаУправленческий.Колонки.Добавить("СуммаВалКт");
	ТаблицаУправленческий.Колонки.Добавить("Сумма");
	ТаблицаУправленческий.Колонки.Добавить("Содержание");
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", ТаблицаУправленческий);
	
КонецПроцедуры

// Выполняет подготовку наборов записей документа.
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект - документ, для которого подготавливаются наборы записей.
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект) Экспорт
	
	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаИспользуемыхРегистров = ИменаИспользуемыхРегистров(ДокументОбъект.Ссылка,
		ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для Каждого ИмяРегистра Из ИменаИспользуемыхРегистров Цикл
		ДокументОбъект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект - документ, для которого записываются наборы записей.
Процедура ЗаписатьНаборыЗаписей(ДокументОбъект) Экспорт
	
	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы",
					ДокументОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				Если ДокументОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи") Тогда
					НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("РежимЗаписи",
						ДокументОбъект.ДополнительныеСвойства.РежимЗаписи);
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		Иначе
			
			МетаданныеРегистра = НаборЗаписей.Метаданные();
			Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра)
				И ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(МетаданныеРегистра) Тогда
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя());
				//@skip-warning см. ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение 
				МенеджерОбъекта.СоздатьПустуюВременнуюТаблицуИзменение(ДокументОбъект.ДополнительныеСвойства);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает истинное значение, когда в информационной базе отключен контроль остатков при проведении.
// 
// Возвращаемое значение:
//  Булево - в информационной базе выключен контроль остатков при проведении.
Функция КонтрольОстатковВыключен() Экспорт
	Возврат Не Константы.КонтролироватьОстаткиПриПроведении.Получить();
КонецФункции

// Записывает движения указанного регистра из таблицы для движений
// 
// Параметры:
// 	ИмяРегистра - Строка - имя регистра,
// 	ТаблицыДляДвижений - Структура - таблицы для движений,
// 	Движения - КоллекцияДвижений - коллекция движений проводимого документа,
// 	Отказ - Булево - признак "Отказ".
Процедура ОтразитьДвижения(ИмяРегистра, ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = СтрШаблон("Таблица%1", ИмяРегистра);
	
	Если ТаблицыДляДвижений[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения[ИмяРегистра].Записывать = Истина;
	Движения[ИмяРегистра].Загрузить(ТаблицыДляДвижений[ИмяТаблицы]);
	
КонецПроцедуры

// Выполняет движения регистра бухгалтерии Управленческий.
// 
// Параметры:
// 	ДополнительныеСвойства - Структура - поле "ДополнительныеСвойства" проводимого документа.
// 	Движения - КоллекцияДвижений - коллекция движений проводимого документа,
// 	Отказ - Булево - признак "Отказ".
Процедура ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ПроверитьОграничениеБазовойВерсии(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУправленческий = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий;
	
	Если ТаблицаУправленческий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Управленческий.Записывать = Истина;
	
	Для каждого СтрокаТаблицаУправленческий Из ТаблицаУправленческий Цикл
		ДвижениеУправленческий = Движения.Управленческий.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеУправленческий, СтрокаТаблицаУправленческий);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номер КАК Номер,
	|	ТаблицаДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОрганизацияДляРегОтчетности,
	|	ТаблицаДокумента.МоментВремени КАК МоментВремени,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаРегистрации,
	|	ТаблицаДокумента.Представление КАК Представление
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументСсылка");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)",
			"ТаблицаДокумента.Организация");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕОПРЕДЕЛЕНО КАК ВидОперации",
			"ТаблицаДокумента.ВидОперации КАК ВидОперации");
	КонецЕсли; 
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)",
			"ТаблицаДокумента.Контрагент.СтранаРегистрации");
	КонецЕсли;
	
	ИмяТаблицыДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыДокумента", ИмяТаблицыДокумента);
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	ЗаполнитьДанныеПриходнойНакладной(ДокументСсылка, ДополнительныеСвойства, ВыборкаИзРезультатаЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПриходнойНакладной(ДокументСсылка, ДополнительныеСвойства, ВыборкаИзРезультатаЗапроса)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная")Тогда
		
		ДополнительныеСвойства.ДляПроведения.Вставить(
			"ЭтоКонтрагентИзЕАЭС",
			ПрослеживаемостьУНФ.ГосударствоЧленТаможенногоСоюза(ВыборкаИзРезультатаЗапроса.СтранаРегистрации));
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойство "УчетнаяПолитика", содержащее значения всех параметров учетной политики
// на момент времени документа и по выбранной в документе организации
// или по компании (в случае ведения учета по компании).
Процедура ЗаполнитьУчетнуюПолитику(ДополнительныеСвойства)
	
	ДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов,
	|	Константы.ФункциональнаяОпцияУчетПоПроектам КАК УчетПоПроектам,
	|	Константы.ФункциональнаяОпцияУчетПоЯчейкам КАК УчетПоЯчейкам,
	|	Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов КАК КассовыйМетодУчетаДоходовИРасходов,
	|	Константы.ФункциональнаяОпцияИспользоватьПартии КАК ИспользоватьПартии,
	|	Константы.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Константы.ФункциональнаяОпцияИспользоватьТехоперации КАК ИспользоватьТехоперации,
	|	Константы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства КАК ИспользоватьЭтапыПроизводства,
	|	Константы.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	Константы.КонтрольОстатковСерийНоменклатуры КАК ОстаткиСерийНоменклатуры,
	|	Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты КАК ИспользоватьПодарочныеСертификаты,
	|	Константы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов КАК ИспользоватьЧастичноеПогашениеСертификатов,
	|	Константы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях КАК РазрешитьСкладыВТабличныхЧастях,
	|	Константы.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями,
	|	Константы.ВестиУчетПрослеживаемыхТоваров КАК ВестиУчетПрослеживаемыхТоваров,
	|	Константы.МиграцияСерийНоменклатурыВыполнена КАК МиграцияСерийНоменклатурыВыполнена
	|ИЗ
	|	Константы КАК Константы");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
	
КонецПроцедуры

// Возвращает имена регистров, по которым есть движения документа.
// 
// Параметры:
// 	Регистратор - ДокументСсылка - ссылка на документ,
// 	МетаданныеДокумента - ОбъектМетаданных - объект метаданных.
// Возвращаемое значение:
// 	Массив - имена регистров, по которым есть движения документа. 
Функция ИменаИспользуемыхРегистров(Регистратор, МетаданныеДокумента)

	Результат = Новый Массив;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	ЗапросыКДвижениям = Новый Массив;
	ОбъединитьВсе = "
					|ОБЪЕДИНИТЬ ВСЕ
					|";

	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл

		СчетчикЦикла = СчетчикЦикла + 1;

		ТекстЗапросаДвижение = ТекстЗапросаДвижение(Движение.Имя, Движение.ПолноеИмя());
		ЗапросыКДвижениям.Добавить(ТекстЗапросаДвижение);

		Если ЗапросыКДвижениям.Количество() = 256 Или СчетчикЦикла = ВсегоРегистров Тогда

			ТекстЗапроса = СтрСоединить(ЗапросыКДвижениям, ОбъединитьВсе);
			ЗапросыКДвижениям.Очистить();
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);

			ДополнитьРезультатИменаИспользуемыхРегистров(Результат, Запрос);

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура ДополнитьРезультатИменаИспользуемыхРегистров(Результат, Запрос)

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ИмяРегистра);
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаДвижение(ИмяРегистра, ИмяТаблицы)

	Результат = СтрШаблон(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""%1"" КАК ИмяРегистра
	|ИЗ
	|	&ИмяТаблицы КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор", ИмяРегистра);

	Возврат СтрЗаменить(Результат, "&ИмяТаблицы", ИмяТаблицы);

КонецФункции

Функция ЕстьПроцедураСоздатьПустуюВременнуюТаблицуИзменение(МетаданныеРегистра)
	
	РегистрыСПроцедурой = Новый Соответствие;
	
	РегистрыСПроцедурой["ВнеоборотныеАктивы"] = Истина;
	РегистрыСПроцедурой["ДенежныеСредства"] = Истина;
	РегистрыСПроцедурой["ДенежныеСредстваВКассахККМ"] = Истина;
	РегистрыСПроцедурой["ДенежныеСредстваКПоступлению"] = Истина;
	РегистрыСПроцедурой["ДоходыИРасходыНераспределенные"] = Истина;
	РегистрыСПроцедурой["ДоходыИРасходыОтложенные"] = Истина;
	РегистрыСПроцедурой["ЗаказыНаПроизводство"] = Истина;
	РегистрыСПроцедурой["ЗаказыПокупателей"] = Истина;
	РегистрыСПроцедурой["ЗаказыПоставщикам"] = Истина;
	РегистрыСПроцедурой["ЗаказыНаПеремещение"] = Истина;
	РегистрыСПроцедурой["Запасы"] = Истина;
	РегистрыСПроцедурой["ЗапасыВРазрезеГТД"] = Истина;
	РегистрыСПроцедурой["ЗапасыПереданныеВРазрезеГТД"] = Истина;
	РегистрыСПроцедурой["ЗапасыПринятыеВРазрезеГТД"] = Истина;
	РегистрыСПроцедурой["ЗапасыКПоступлениюНаСклады"] = Истина;
	РегистрыСПроцедурой["ЗапасыКРасходуСоСкладов"] = Истина;
	РегистрыСПроцедурой["ЗапасыНаСкладах"] = Истина;
	РегистрыСПроцедурой["ЗапасыПереданные"] = Истина;
	РегистрыСПроцедурой["ЗапасыИАгентскиеУслугиПринятые"] = Истина;
	РегистрыСПроцедурой["КнигаУчетаДоходовИРасходов"] = Истина;
	РегистрыСПроцедурой["НДФЛДоходы"] = Истина;
	РегистрыСПроцедурой["НДФЛРасчетыНалоговыхАгентовСБюджетом"] = Истина;
	РегистрыСПроцедурой["ПотребностьВЗапасах"] = Истина;
	РегистрыСПроцедурой["ПримененныеВычетыПоНДФЛ"] = Истина;
	РегистрыСПроцедурой["РазмещениеЗаказов"] = Истина;
	РегистрыСПроцедурой["РасчетыПоНалогам"] = Истина;
	РегистрыСПроцедурой["РасчетыПоЭквайрингу"] = Истина;
	РегистрыСПроцедурой["РасчетыСПерсоналом"] = Истина;
	РегистрыСПроцедурой["РасчетыСПодотчетниками"] = Истина;
	РегистрыСПроцедурой["РасчетыСПокупателями"] = Истина;
	РегистрыСПроцедурой["РасчетыСПоставщиками"] = Истина;
	РегистрыСПроцедурой["РасчетыСФондамиПоСтраховымВзносам"] = Истина;
	РегистрыСПроцедурой["СтраховыеВзносыДоходы"] = Истина;
	РегистрыСПроцедурой["СтраховыеВзносыПереданныеВПФР"] = Истина;
	РегистрыСПроцедурой["СуммовойУчетВРознице"] = Истина;
	РегистрыСПроцедурой["СерииНоменклатуры"] = Истина;
	РегистрыСПроцедурой["ЗапасыВРемонте"] = Истина;
	РегистрыСПроцедурой["ЗапасыПереданныеВРемонте"] = Истина;
	РегистрыСПроцедурой["ПодарочныеСертификаты"] = Истина;
	РегистрыСПроцедурой["БонусныеБаллы"] = Истина;
	РегистрыСПроцедурой["ДенежныеСредстваВРезерве"] = Истина;
	// Прослеживаемость
	РегистрыСПроцедурой["ПрослеживаемыеТовары"] = Истина;
	
	Возврат РегистрыСПроцедурой[МетаданныеРегистра.Имя] <> Неопределено;
	
КонецФункции

Процедура ПроверитьОграничениеБазовойВерсии(Отказ)
	
	Если ВРег(Метаданные.Имя) <> ВРег("УправлениеНебольшойФирмойБазовая") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
						  |ИЗ
						  |	Справочник.Организации КАК Организации");
						  
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоОрганизаций > 2 Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(НСтр(
					"ru='Ограничение базовой версии: в информационной базе могут быть введены только две организации.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
