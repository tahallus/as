#Область ВызовыМодулейГИСМ

#Область СобытияФормГИСМПереопределяемый

// Переопределение параметров интеграции ГИСМ (расположения форматированной строки)
//
// Параметры:
//   Форма            - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования)
Процедура ПриОпределенииПараметровИнтеграцииДляДокументаОснования(Форма, ПараметрыНадписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента" Тогда
		
		ПараметрыНадписи.ИмяЭлементаФормы  = "";
		ПараметрыНадписи.ИмяРеквизитаФормы = "";
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	
КонецПроцедуры

// Переопределение параметров интеграции ГИСМ (расположения форматированной строки)
//
// Параметры:
//   Форма            - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования)
Процедура ПриОпределенииПараметровИнтеграцииДляОбмена(Форма, ПараметрыНадписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента" Тогда
		
		ПараметрыНадписи.ИмяЭлементаФормы  = "СтатусГИСМ";
		ПараметрыНадписи.ИмяРеквизитаФормы = "СтатусГИСМПредставление";
		ПараметрыНадписи.Заголовок         = НСтр("ru = 'Статус обмена с ГИСМ'");
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет требуемый тип надписи в прикладной форме из фиксированного списка:
//   УведомлениеОбОтгрузке
//   УведомлениеОСписании
//   <пустая строка> (надпись не требуется)
// 
// Параметры:
//   Форма      - УправляемаяФорма - форма для размещения надписи
//   ТипНадписи - Строка           - тип надписи связанных документов ГИСМ
Процедура ПриОпределенииТипаНадписиПоФорме(Форма, ТипНадписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
			ТипНадписи = "УведомлениеОбОтгрузке";
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.СписаниеЗапасов.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Или Форма.Объект.ЕстьКиЗГИСМ Тогда
			ТипНадписи = "УведомлениеОСписании";
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.СборкаЗапасов.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
			ТипНадписи = "Маркировка";
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьКиЗГИСМ Тогда
			ТипНадписи = "ЗаявкаНаВыпускКиЗГИСМ";
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
			ВидИмпорта = РассчитатьВидИмпорта(Форма.Объект.Контрагент);
			Если ВидИмпорта = "ПоступлениеПоИмпорту" Тогда
				ТипНадписи = "ЗакупкаПоИмпорту";
			ИначеЕсли ВидИмпорта = "ПоступлениеИзЕАЭС" Тогда
				ТипНадписи = "ЗакупкаВЕАЭС";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииТипаСтатусаОбмена(Форма, ТипНадписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента" Тогда
		
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ
			И Форма.Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
			
			ТипНадписи = "СтатусОбмена";
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОбщаяКомандаПротоколОбменаГИСМ",
			"Видимость",
			Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента" Тогда
		
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
			
			ТипНадписи = "СтатусОбмена";
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОбщаяКомандаПротоколОбменаГИСМ",
			"Видимость",
			Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
		
	КонецЕсли;
	
КонецПроцедуры

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента" Тогда
		Если Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
			СобытияФормГИСМ.ЗаполнениеРеквизитовФормы(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Предоставляет возможность переопределить обработку заполнения документа "Заявка на выпуск КиЗ".
//
// Параметры:
//  ЗаявкаОбъект - ДокументОбъект.ЗаявкаНаВыпускКиЗ - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка,Неопределено - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияЗаявкиНаВыпускКиЗ(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииЗаказаПоставщику(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	Иначе
		
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЗаявкаОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаявкаОбъект.Ответственный = Пользователи.ТекущийПользователь();
	Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Организация) Тогда
		ЗаявкаОбъект.Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ЗаявкаОбъект.Ответственный, "ОсновнаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

// Предоставляет возможность переопределить заполнение документа "Заявка на выпуск КиЗ" .
//
// Параметры:
//  ЗаявкаОбъект         - ДокументОбъект.ЗаявкаНаВыпускКиЗ - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения     - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения      - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииДругогоДокумента(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииЗаказаПоставщику(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление об отгрузке маркированных
// товаров ГИСМ".
//
// Параметры:
//  УведомлениеОбъект    - ДокументОбъект.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ - документ, для которого
//                                                                                        выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияУведомленияОбОтгрузкеГИСМ(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьУведомлениеОбОтгрузкеГИСМНаОснованииРеализации(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	УведомлениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление о ввозе маркированных товаров из
// ЕАЭС".
//
// Параметры:
//  УведомлениеОбъект    - ДокументОбъект.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ - документ, для которого
//                                                                                          выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияУведомленияОВвозеИзЕАЭСГИСМ(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",   Константы.ВалютаУчета.Получить());
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Дата,ВалютаДокумента");
	Запрос.УстановитьПараметр("ДатаОснования", РеквизитыОснования.Дата);
	Запрос.УстановитьПараметр("ВалютаОснования", РеквизитыОснования.ВалютаДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Основание,
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	КОЛИЧЕСТВО(ПоступлениеТоваровУслугСерии.Серия) КАК КоличествоСерий
	|ПОМЕСТИТЬ втСерии
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК ПоступлениеТоваровУслугСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Запасы
	|		ПО (Запасы.КлючСвязи = ПоступлениеТоваровУслугСерии.КлючСвязи)
	|			И (Запасы.Ссылка = ПоступлениеТоваровУслугСерии.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Запасы.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И ПоступлениеТоваровУслугСерии.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	ПоступлениеТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ДатаОснования,
	|			Валюта = &ВалютаРеглУчета
	|				ИЛИ Валюта = &ВалютаОснования) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	СУММА(ПоступлениеТоваровУслугТовары.Сумма * ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|							ТОГДА КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность / (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаСНДС
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсВалютыОснования
	|		ПО (КурсВалютыОснования.Валюта = &ВалютаОснования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК КурсВалютыРегл
	|		ПО (КурсВалютыРегл.Валюта = &ВалютаРеглУчета)
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И ПоступлениеТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТовары.СуммаСНДС, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ втТовары.СуммаСНДС / ВЫБОР
	|				КОГДА ЕСТЬNULL(втСерии.КоличествоСерий, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ втСерии.КоличествоСерий
	|			КОНЕЦ
	|	КОНЕЦ КАК СтоимостьКиЗ
	|ПОМЕСТИТЬ втСтоимостьКиЗ
	|ИЗ
	|	втСерии КАК втСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО втСерии.Номенклатура = втТовары.Номенклатура
	|			И втСерии.Характеристика = втТовары.Характеристика
	|			И втСерии.Склад = втТовары.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугСерии.Серия.RFIDTID КАК RFIDTID,
	|	ПоступлениеТоваровУслугСерии.Серия.RFIDEPC КАК RFIDEPC,
	|	ПоступлениеТоваровУслугСерии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	втСтоимостьКиЗ.СтоимостьКиЗ КАК Стоимость
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК ПоступлениеТоваровУслугСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Запасы
	|		ПО (Запасы.КлючСвязи = ПоступлениеТоваровУслугСерии.КлючСвязи)
	|			И (Запасы.Ссылка = ПоступлениеТоваровУслугСерии.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Запасы.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимостьКиЗ КАК втСтоимостьКиЗ
	|		ПО (втСтоимостьКиЗ.Номенклатура = Запасы.Номенклатура)
	|			И (втСтоимостьКиЗ.Характеристика = Запасы.Характеристика)
	|			И (втСтоимостьКиЗ.Склад = ПоступлениеТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница)
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И ПоступлениеТоваровУслугСерии.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	Если Не РегистрыСведений.СтатусыИнформированияГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление о ввозе маркированных товаров ГИСМ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.АктуальноеУведомлениеОбОтгрузкеГИСМ);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[5].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[5].Выгрузить());
	
	
	УведомлениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление об импорте маркированных товаров".
//
// Параметры:
//  УведомлениеОбъект    - ДокументОбъект.УведомлениеОбИмпортеМаркированныхТоваровГИСМ - документ, для которого
//                                                                                       выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияУведомленияОбИмпортеГИСМ(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Основание,
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТНВЭДГИСМ КАК КодТНВЭД,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоступлениеТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И ПоступлениеТоваровУслугТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяСерииНоменклатуры.Серия.Наименование КАК НомерКиЗ,
	|	ПриходнаяНакладнаяСерииНоменклатуры.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК ПриходнаяНакладнаяСерииНоменклатуры
	|ГДЕ
	|	ПриходнаяНакладнаяСерииНоменклатуры.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	Если Не РегистрыСведений.СтатусыИнформированияГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление об импорте маркированных товаров ГИСМ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.АктуальноеУведомлениеОбОтгрузкеГИСМ);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из УведомлениеОбъект.Товары Цикл
		Индекс = Индекс + 1;
		СтрокаТЧ.КлючСвязи = Индекс;
	КонецЦикла;

	УведомлениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление о списании КиЗ для маркировки".
//
// Параметры:
//  УведомлениеОбъект    - ДокументОбъект.УведомлениеОСписанииКиЗГИСМ - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения - Произвольный - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  ТекстЗаполнения - Строка - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//  СтандартнаяОбработка - Булево - см. описание параметра в синтаксис-помощнике к обработчику ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполненияУведомленияОСписанииКиЗ(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьУведомлениеОСписанииКиЗНаОснованииВнутреннегоПотребления(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	УведомлениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Предоставляет возможность переопределить обработку заполнения документа "Уведомление об импорте маркированных товаров".
//
// Параметры:
//  Объект - ДокументОбъект.УведомлениеОбИмпортеМаркированныхТоваровГИСМ - документ, для которого выполняется заполнение.
//  Отказ - Булево - Признак отказа.
//  ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты.
//
Процедура УведомлениеОбИмпортеОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает структуру, содержащую ИНН, КПП, GLN организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
//  ИННКППGLNОрганизации - Структура - со свойствами:
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     GLN  - Строка - GLN контрагента.
//
Процедура ИННКППGLNОрганизации(Организация, Подразделение, ИННКППGLNОрганизации) Экспорт
	
	Если ТипЗнч(ИННКППGLNОрганизации) <> Тип("Структура") Тогда
		ИННКППGLNОрганизации = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.ИНН КАК ИНН,
	|	ОрганизацииДляОбменаГИСМ.Организация.КПП КАК КПП,
	|	ОрганизацииДляОбменаГИСМ.GLN КАК GLN
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
	|		ПО Организации.Ссылка = ОрганизацииДляОбменаГИСМ.Организация
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИННКППGLNОрганизации.Вставить("ИНН", Выборка.ИНН);
		ИННКППGLNОрганизации.Вставить("КПП", Выборка.КПП);
		ИННКППGLNОрганизации.Вставить("GLN", Выборка.GLN);
	Иначе
		ИННКППGLNОрганизации.Вставить("ИНН", "");
		ИННКППGLNОрганизации.Вставить("КПП", "");
		ИННКППGLNОрганизации.Вставить("GLN", "");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру через параметр Реквизиты, содержащую Страну,
// Регистрационный номер, наименование, признак физического лица, ИНН и КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГосИС - Контрагент.
//  Реквизиты  - Структура - со свойствами:
//     Страна  - Строка - Страна регистрации контрагента.
//     РегистрационныйНомер  - Строка - Регистрационный номер контрагента.
//     Наименование  - Строка - Наименование контрагента.
//     НаименованиеПолное  - Строка - Полное наименование контрагента.
//     ЭтоФизическоеЛицо  - Булево - Признак физического лица.
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     ЮридическийАдрес - Строка - Юридический адрес контрагента.
//
Процедура РеквизитыКонтрагента(Контрагент, Реквизиты) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Контрагенты.СтранаРегистрации.КодАльфа2, """") КАК Страна,
	|	Контрагенты.РегистрационныйНомер КАК РегистрационныйНомер,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоФизическоеЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Реквизиты.Вставить("Страна", Выборка.Страна);
		Реквизиты.Вставить("РегистрационныйНомер", Выборка.РегистрационныйНомер);
		Реквизиты.Вставить("Наименование", Выборка.Наименование);
		Реквизиты.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
		Реквизиты.Вставить("ИНН", Выборка.ИНН);
		Реквизиты.Вставить("КПП", Выборка.КПП);
		Реквизиты.Вставить("ЭтоФизическоеЛицо", Выборка.ЭтоФизическоеЛицо);
	КонецЕсли;
	
	ЮридическийАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		ТекущаяДатаСеанса());
	Реквизиты.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	
КонецПроцедуры

// Проверяет использование подразделений в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Подразделения используются.
//
Процедура ИспользоватьПодразделения(Использовать) Экспорт
	
	Использовать = Ложь;
	
КонецПроцедуры

// Проверяет использование заявок на выпуск КиЗ.
// 
// Параметры:
//  Использовать - Булево - Заявки используются.
//
Процедура ИспользоватьЗаявкиНаВыпускКиЗ(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

// Проверяет использование нескольких организаций в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Несколько организаций используются.
//
Процедура ИспользоватьНесколькоОрганизаций(Использовать) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

// Документ-основание является возвратом поставщику
//
// Параметры:
//  ДокументСсылка    - ДокументСсылка- Документ-основание.
//  РезультатПроверки - Булево - Основание является возвратом поставщику.
//
Процедура ДокументОснованиеВозвратПоставщику(ДокументСсылка, РезультатПроверки) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ВидОперацииРасходнойНакладной = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументСсылка,
			"ВидОперации");
		
		Если ВидОперацииРасходнойНакладной = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
			РезультатПроверки = Истина;
		Иначе
			РезультатПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Получить организацию и подразделение документа.
//
// Параметры:
//  ДокументСсылка           - ДокументСсылка - Документ, подразделение и организацию которого необходимо получить.
//  ОрганизацияПодразделение - Исходящий параметр, структура со свойствами:
//    * Организация - ОпределяемыйТип.Организация - Организация документа.
//    * Подразделение - ОпределяемыйТип.Подразделение - Подразделение документа.
//
Процедура ОрганизацияПодразделениеДокумента(ДокументСсылка, ОрганизацияПодразделение) Экспорт
	
	ОрганизацияПодразделение = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация,СтруктурнаяЕдиница");
	
КонецПроцедуры

// Позволяет определить получение валюты регламентированного учета.
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты - Исходящий параметр, валюта регламентированного учета.
//
Процедура ВалютаРегламентированногоУчета(Валюта) Экспорт
	
	Валюта = Константы.ВалютаУчета.Получить();
	
КонецПроцедуры

// В данной функции необходимо реализовать запрос, который определяет поступившие КиЗ
// для документов "Заявка на выпуск КиЗ", "Уведомление о поступлении маркированной продукции".
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект.
//  ЗапросРезультат - Запрос - Исходящий параметр, запрос для определения поступивших КиЗ.
//
Процедура ЗапросПоПоступившимКиЗ(Объект, ЗапросРезультат) Экспорт
	
	Если ТипЗнч(ЗапросРезультат) <> Тип("Запрос") Тогда
		ЗапросРезультат = Новый Запрос;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления,
	|	НомераКиЗ.СостояниеПодтверждения,
	|	НомераКиЗ.НомерСтроки
	|ПОМЕСТИТЬ НомераКиЗ
	|ИЗ
	|	&НомераКиЗ КАК НомераКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления,
	|	НомераКиЗ.СостояниеПодтверждения,
	|	НомераКиЗ.НомерСтроки
	|ПОМЕСТИТЬ НеподтвержденныеКиЗ
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияСерийТоваров.Регистратор КАК ДокументПоступления,
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ ВсеДокументыПоступленияПоКиЗ
	|ИЗ
	|	РегистрСведений.СерииНоменклатурыГарантии КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО ДвиженияСерийТоваров.Серия = СправочникСерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО ДвиженияСерийТоваров.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|			И (&Организация = ПоступлениеТоваровУслуг.Организация)
	|			И (&Контрагент = ПоступлениеТоваровУслуг.Контрагент)
	|ГДЕ
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|	И ДвиженияСерийТоваров.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления
	|ПОМЕСТИТЬ РанееСопоставленныеПоступления
	|ИЗ
	|	Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НЕ НомераКиЗ.ДокументПоступления В (&ПустыеЗначенияДокументовПоступления)
	|	И НомераКиЗ.НомерКиЗ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|	И НомераКиЗ.Ссылка <> &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НЕ НомераКиЗ.ДокументПоступления В (&ПустыеЗначенияДокументовПоступления)
	|	И НомераКиЗ.НомерКиЗ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|	И НомераКиЗ.Ссылка <> &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДокументыПоступленияПоКиЗ.ДокументПоступления,
	|	ВсеДокументыПоступленияПоКиЗ.НомерКиЗ
	|ПОМЕСТИТЬ ДокументыПоступленияКандидаты
	|ИЗ
	|	ВсеДокументыПоступленияПоКиЗ КАК ВсеДокументыПоступленияПоКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РанееСопоставленныеПоступления КАК РанееСопоставленныеПоступления
	|		ПО ВсеДокументыПоступленияПоКиЗ.НомерКиЗ = РанееСопоставленныеПоступления.НомерКиЗ
	|			И ВсеДокументыПоступленияПоКиЗ.ДокументПоступления = РанееСопоставленныеПоступления.ДокументПоступления
	|ГДЕ
	|	РанееСопоставленныеПоступления.ДокументПоступления ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеподтвержденныеКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НеподтвержденныеКиЗ.ДокументПоступления,
	|	НеподтвержденныеКиЗ.НомерСтроки,
	|	НеподтвержденныеКиЗ.СостояниеПодтверждения,
	|	ЕСТЬNULL(ДокументыПоступленияКандидаты.ДокументПоступления, ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)) КАК ДокументПоступленияКандидат
	|ИЗ
	|	НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоступленияКандидаты КАК ДокументыПоступленияКандидаты
	|		ПО НеподтвержденныеКиЗ.НомерКиЗ = ДокументыПоступленияКандидаты.НомерКиЗ
	|ИТОГИ ПО
	|	НомерКиЗ";
	ЗапросРезультат.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		ЗапросРезультат.УстановитьПараметр("НомераКиЗ", Объект.ВыпущенныеКиЗ.Выгрузить());
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
		ЗапросРезультат.УстановитьПараметр("НомераКиЗ", Объект.НомераКиЗ.Выгрузить());
	КонецЕсли;
	
	ПустыеЗначенияДокументовПоступления = ИнтеграцияГИСМ.МассивПустыхЗначенийДокументовПоступленияМаркированнойПродукции();
	
	ЗапросРезультат.УстановитьПараметр("ДокументСсылка",                      Объект.Ссылка);
	ЗапросРезультат.УстановитьПараметр("Организация",                         Объект.Организация);
	ЗапросРезультат.УстановитьПараметр("Контрагент",                          Объект.Контрагент);
	ЗапросРезультат.УстановитьПараметр("ПустыеЗначенияДокументовПоступления", ПустыеЗначенияДокументовПоступления);
	
КонецПроцедуры

// Обновляет в табличной части документа "Заявкам на выпуск КиЗ" табличную часть "Заказанные КиЗ".
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект.
//
Процедура ОбновитьКолонкиВыпущеноПолученоВТЧЗаказанныеКиЗ(Объект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Получает данные по "Заявкам на выпуск КиЗ" для заполнения обработки "Подтверждение поступивших КиЗ".
//
// Параметры:
//  ДокументыКПодтверждению - Массив - Содержит документы "Заявка на выпуск КиЗ", для которых будет выполняться
//                                     подтверждение поступления.
//  ДанныеПоЗаявкам - Исходящий параметр, структура - со свойствами:
//     НомераКиЗКПодтверждению - ТаблицаЗначений - содержит данные по выпущенным КиЗ, их статусам и документам поступления.
//     ПроблемыДублиКиЗ        - ТаблицаЗначений - содержит информацию о дублирующихся в обрабатываемых документах
//                                                 номерах КиЗ.
//     ПроблемыСопоставления   - ТаблицаЗначений - содержит информацию о выпущенных КиЗ, которые не удалось сопоставить
//                                                 заказанным КиЗ.
//
Процедура ДанныеПоЗаявкамНаВыпускКиЗ(ДокументыКПодтверждению, ДанныеПоЗаявкам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ДублирующиесяНомераКиЗ
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.Ссылка В(&ДокументыКПодтверждению)
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераКиЗ.НомерКиЗ
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.Ссылка КАК Документ,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ПОМЕСТИТЬ НомераКиЗНоменклатура
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО НомераКиЗ.ВидКиЗ = Номенклатура.КиЗГИСМВид
	|			И НомераКиЗ.СпособВыпускаВОборот = Номенклатура.КиЗГИСМСпособВыпускаВОборот
	|			И НомераКиЗ.GTIN = Номенклатура.КиЗГИСМGTIN
	|			И НомераКиЗ.РазмерКиЗ = Номенклатура.КиЗГИСМРазмер
	|			И (Номенклатура.КиЗГИСМ)
	|ГДЕ
	|	НомераКиЗ.Ссылка В(&ДокументыКПодтверждению)
	|	И НЕ НомераКиЗ.НомерКиЗ В
	|				(ВЫБРАТЬ
	|					ДублирующиесяНомераКиЗ.НомерКиЗ
	|				ИЗ
	|					ДублирующиесяНомераКиЗ КАК ДублирующиесяНомераКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКиЗНоменклатура.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗНоменклатура.Документ КАК Документ,
	|	НомераКиЗНоменклатура.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НомераКиЗПроблемыСопоставления
	|ИЗ
	|	НомераКиЗНоменклатура КАК НомераКиЗНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ.ЗаказанныеКиЗ КАК ТаблицаЗаказанныеКиЗ
	|		ПО НомераКиЗНоменклатура.Документ = ТаблицаЗаказанныеКиЗ.Ссылка
	|			И НомераКиЗНоменклатура.Номенклатура = ТаблицаЗаказанныеКиЗ.Номенклатура
	|ГДЕ
	|	ТаблицаЗаказанныеКиЗ.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.Ссылка КАК Документ,
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления,
	|	НомераКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
	|	Документы.Организация КАК Организация,
	|	Документы.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ НеподтвержденныеКиЗ
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ КАК Документы
	|		ПО НомераКиЗ.Ссылка = Документы.Ссылка
	|ГДЕ
	|	НомераКиЗ.Ссылка В(&ДокументыКПодтверждению)
	|	И НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче))
	|	И НЕ НомераКиЗ.НомерКиЗ В
	|				(ВЫБРАТЬ
	|					ДублирующиесяНомераКиЗ.НомерКиЗ
	|				ИЗ
	|					ДублирующиесяНомераКиЗ КАК ДублирующиесяНомераКиЗ)
	|	И НЕ (НомераКиЗ.НомерКиЗ, НомераКиЗ.Ссылка) В
	|				(ВЫБРАТЬ
	|					НомераКиЗПроблемыСопоставления.НомерКиЗ,
	|					НомераКиЗПроблемыСопоставления.Документ
	|				ИЗ
	|					НомераКиЗПроблемыСопоставления КАК НомераКиЗПроблемыСопоставления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияСерийТоваров.Регистратор КАК ДокументПоступления,
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация
	|ПОМЕСТИТЬ ВсеДокументыПоступленияПоКиЗ
	|ИЗ
	|	РегистрСведений.СерииНоменклатурыГарантии КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО ДвиженияСерийТоваров.Серия = СправочникСерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО ДвиженияСерийТоваров.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|	И ДвиженияСерийТоваров.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления,
	|	НомераКиЗ.Ссылка КАК Ссылка,
	|	Документы.Организация КАК Организация,
	|	Документы.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ РанееСопоставленныеПоступления
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ КАК Документы
	|		ПО НомераКиЗ.Ссылка = Документы.Ссылка
	|ГДЕ
	|	НомераКиЗ.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|	И НомераКиЗ.НомерКиЗ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеподтвержденныеКиЗ.Документ КАК Документ,
	|	НеподтвержденныеКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НеподтвержденныеКиЗ.ДокументПоступления КАК ДокументПоступления,
	|	НеподтвержденныеКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
	|	ЕСТЬNULL(ВсеДокументыПоступленияПоКиЗ.ДокументПоступления, ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)) КАК ДокументПоступленияКандидат,
	|	ЕСТЬNULL(РанееСопоставленныеПоступления.ДокументПоступления, ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)) КАК ДокументПоступленияУжеСопоставлено
	|ИЗ
	|	НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РанееСопоставленныеПоступления КАК РанееСопоставленныеПоступления
	|		ПО НеподтвержденныеКиЗ.НомерКиЗ = РанееСопоставленныеПоступления.НомерКиЗ
	|			И НеподтвержденныеКиЗ.Организация = РанееСопоставленныеПоступления.Организация
	|			И НеподтвержденныеКиЗ.НомерКиЗ = РанееСопоставленныеПоступления.НомерКиЗ
	|			И НеподтвержденныеКиЗ.Документ <> РанееСопоставленныеПоступления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеДокументыПоступленияПоКиЗ КАК ВсеДокументыПоступленияПоКиЗ
	|		ПО НеподтвержденныеКиЗ.НомерКиЗ = ВсеДокументыПоступленияПоКиЗ.НомерКиЗ
	|			И НеподтвержденныеКиЗ.Контрагент = ВсеДокументыПоступленияПоКиЗ.Контрагент
	|			И НеподтвержденныеКиЗ.Организация = ВсеДокументыПоступленияПоКиЗ.Организация
	|ИТОГИ ПО
	|	Документ,
	|	НомерКиЗ,
	|	ДокументПоступления,
	|	СостояниеПодтверждения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублирующиесяНомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|ИЗ
	|	ДублирующиесяНомераКиЗ КАК ДублирующиесяНомераКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗПроблемыСопоставления.Документ КАК Документ,
	|	НомераКиЗПроблемыСопоставления.НомерКиЗ КАК НомерКиЗ
	|ИЗ
	|	НомераКиЗПроблемыСопоставления КАК НомераКиЗПроблемыСопоставления";
	
	Если ДокументыКПодтверждению.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ДокументыКПодтверждению", ДокументыКПодтверждению);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументыКПодтверждению", Обработки.ПодтверждениеПоступившихКиЗГИСМ.ТекстУсловияПоЗаявкамНаВыпускКиЗ());
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеПоЗаявкам.Вставить("НомераКиЗКПодтверждению", РезультатЗапроса[6]);
	ДанныеПоЗаявкам.Вставить("ПроблемыДублиКиЗ",        РезультатЗапроса[7]);
	ДанныеПоЗаявкам.Вставить("ПроблемыСопоставления",   РезультатЗапроса[8]);
	
КонецПроцедуры

// Получает данные по "Заявкам на выпуск КиЗ" для заполнения обработки "Подтверждение поступивших КиЗ".
//
// Параметры:
//  ДокументыКПодтверждению - Массив - Содержит документы "Заявка на выпуск КиЗ", для которых будет выполняться
//                                     подтверждение поступления.
//  ДанныеПоЗаявкамКиЗ      - Исходящий параметр, структура - со свойствами:
//     НомераКиЗКПодтверждению - ТаблицаЗначений - содержит данные по ожидаемым маркированным товарам, их статусам и
//                                                 документам поступления.
//     ПроблемыДублиКиЗ        - ТаблицаЗначений - содержит информацию о дублирующихся в обрабатываемых документах
//                                                 номерах КиЗ ожидаемых товарах.
//     ПроблемыСопоставления   - Неопределено    - всегда устанавливается в Неопределено.
//
Процедура ДанныеПоУведомлениямОПоступлении(ДокументыКПодтверждению, ДанныеПоЗаявкамКиЗ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Формирует текст запроса для отчета "ПоступленияБезДокументовГИСМ"
//
// Параметры:
//  ИмяНабораДанных - Строка - определяет, по каким документу ГИСМ будут получаться данные. 
//     Если имя "КиЗ", то по "Заявкам на выпуск КиЗ", если "МаркированныеТовары", то по "Уведомлениям о поступлении
//     маркированной продукции"
//  ОтборОрганизация - ОпределяемыйТип.Организация - отбор по организации.
//  ОтборКонтрагент  - ОпределяемыйТип.Контрагенты - отбор по контрагентам.
//  ТекстЗапроса - Строка - исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаПоПроблемнымПоступлениям(ИмяНабораДанных, ОтборОрганизация, ОтборКонтрагент, ТекстЗапроса) Экспорт
	
	Если ИмяНабораДанных = "КиЗ" Тогда
		ИмяТабличнойЧастиДокументаГИСМ = "Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ";
		ТекстОтбораПоНоменклатуре        = "СерииНоменклатурыПриходныхДокументов.КиЗГИСМ";
	ИначеЕсли ИмяНабораДанных = "МаркированныеТовары" Тогда
		ИмяТабличнойЧастиДокументаГИСМ = "Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ";
		ТекстОтбораПоНоменклатуре        = "СерииНоменклатурыПриходныхДокументов.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)";
	КонецЕсли;
	
	ТекстОтбораДокументыПоступления = "";
	ТекстОтбораДокументыГИСМ        = "";
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстОтбораДокументыПоступления = ТекстОтбораДокументыПоступления + " И СерииНоменклатурыПриходныхДокументов.Организация = &Организация ";
		ТекстОтбораДокументыГИСМ        = ТекстОтбораДокументыГИСМ + " И ТабличнаяЧастьДокументаГИСМ.Ссылка.Организация = &Организация ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		ТекстОтбораДокументыПоступления = ТекстОтбораДокументыПоступления + " И СерииНоменклатурыПриходныхДокументов.Контрагент = &Контрагент ";
		ТекстОтбораДокументыГИСМ        = ТекстОтбораДокументыГИСМ + " И ТабличнаяЧастьДокументаГИСМ.Ссылка.Контрагент = &Контрагент ";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СерииНоменклатурыПриходныхДокументов.Организация КАК Организация,
	|	СерииНоменклатурыПриходныхДокументов.Контрагент КАК Контрагент,
	|	СерииНоменклатурыПриходныхДокументов.НомерКиЗ КАК НомерКИЗ,
	|	СУММА(СерииНоменклатурыПриходныхДокументов.КоличествоВДокументахПоступления) КАК КоличествоВДокументахПоступления,
	|	СерииНоменклатурыПриходныхДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НеСопоставленныеПоступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриходнаяНакладная.Ссылка КАК Ссылка,
	|		ПриходнаяНакладная.Организация КАК Организация,
	|		ПриходнаяНакладная.Контрагент КАК Контрагент,
	|		РегистрСерииНоменклатуры.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|		1 КАК КоличествоВДокументахПоступления,
	|		РегистрСерииНоменклатуры.Номенклатура.КиЗГИСМ КАК КиЗГИСМ,
	|		РегистрСерииНоменклатуры.Номенклатура.ВидМаркировки КАК ВидМаркировки
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатуры КАК РегистрСерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|			ПО РегистрСерииНоменклатуры.Регистратор = ПриходнаяНакладная.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйОрдер.Ссылка,
	|		ПриходныйОрдер.Организация,
	|		NULL,
	|		РегистрСерииНоменклатуры.Серия.НомерКиЗГИСМ,
	|		1,
	|		РегистрСерииНоменклатуры.Номенклатура.КиЗГИСМ,
	|		РегистрСерииНоменклатуры.Номенклатура.ВидМаркировки
	|	ИЗ
	|		РегистрНакопления.СерииНоменклатуры КАК РегистрСерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдер КАК ПриходныйОрдер
	|			ПО РегистрСерииНоменклатуры.Регистратор = ПриходныйОрдер.Ссылка) КАК СерииНоменклатурыПриходныхДокументов,
	|	ИмяТабличнойЧастиДокументаГИСМ КАК ТабличнаяЧастьДокументаГИСМ
	|ГДЕ
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка ЕСТЬ NULL
	|	И &ТекстОтбораПоНоменклатуре
	|	И &ТекстОтбораДокументыПоступления
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииНоменклатурыПриходныхДокументов.Организация,
	|	СерииНоменклатурыПриходныхДокументов.Контрагент,
	|	СерииНоменклатурыПриходныхДокументов.НомерКиЗ,
	|	СерииНоменклатурыПриходныхДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьДокументаГИСМ.НомерКиЗ КАК НомерКиЗ,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Контрагент КАК Контрагент,
	|	СУММА(1) КАК КоличествоВДокументахГИСМ
	|ПОМЕСТИТЬ НеСопоставленныеДокументыГИСМ
	|ИЗ
	|	ИмяТабличнойЧастиДокументаГИСМ КАК ТабличнаяЧастьДокументаГИСМ
	|ГДЕ
	|	НЕ ТабличнаяЧастьДокументаГИСМ.Ссылка.ПометкаУдаления
	|	И ТабличнаяЧастьДокументаГИСМ.ДокументПоступления В (ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И &ТекстОтбораДокументыГИСМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧастьДокументаГИСМ.НомерКиЗ,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Организация,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеСопоставленныеПоступления.НомерКИЗ КАК НомерКИЗ,
	|	НеСопоставленныеПоступления.Организация КАК Организация,
	|	НеСопоставленныеПоступления.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(НеСопоставленныеДокументыГИСМ.КоличествоВДокументахГИСМ, 0) КАК КоличествоВДокументахГИСМ,
	|	НеСопоставленныеПоступления.КоличествоВДокументахПоступления КАК КоличествоВДокументахПоступления
	|ПОМЕСТИТЬ ПроблемныеНомераКиЗ
	|ИЗ
	|	НеСопоставленныеПоступления КАК НеСопоставленныеПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеСопоставленныеДокументыГИСМ КАК НеСопоставленныеДокументыГИСМ
	|		ПО НеСопоставленныеПоступления.Организация = НеСопоставленныеДокументыГИСМ.Организация
	|			И НеСопоставленныеПоступления.Контрагент = НеСопоставленныеДокументыГИСМ.Контрагент
	|			И НеСопоставленныеПоступления.НомерКИЗ = НеСопоставленныеДокументыГИСМ.НомерКиЗ
	|ГДЕ
	|	НеСопоставленныеПоступления.КоличествоВДокументахПоступления > ЕСТЬNULL(НеСопоставленныеДокументыГИСМ.КоличествоВДокументахГИСМ, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроблемныеНомераКиЗ.НомерКИЗ КАК НомерКИЗ,
	|	ПроблемныеНомераКиЗ.Организация КАК Организация,
	|	ПроблемныеНомераКиЗ.Контрагент КАК Контрагент,
	|	ПроблемныеНомераКиЗ.КоличествоВДокументахГИСМ КАК КоличествоВДокументахГИСМ,
	|	ПроблемныеНомераКиЗ.КоличествоВДокументахПоступления КАК КоличествоВДокументахПоступления
	|ИЗ
	|	ПроблемныеНомераКиЗ КАК ПроблемныеНомераКиЗ
	|ИТОГИ ПО
	|	Контрагент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеСопоставленныеПоступления.Ссылка КАК ДокументПоступления,
	|	НеСопоставленныеПоступления.Организация КАК Организация,
	|	НеСопоставленныеПоступления.Контрагент КАК Контрагент,
	|	НеСопоставленныеПоступления.НомерКИЗ КАК НомерКИЗ
	|ИЗ
	|	НеСопоставленныеПоступления КАК НеСопоставленныеПоступления,
	|	ПроблемныеНомераКиЗ КАК ПроблемныеНомераКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка КАК ДокументГИСМ,
	|	ТабличнаяЧастьДокументаГИСМ.НомерКиЗ КАК НомерКиЗ,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧастьДокументаГИСМ.Ссылка.Контрагент КАК Контрагент
	|ИЗ
	|	ИмяТабличнойЧастиДокументаГИСМ КАК ТабличнаяЧастьДокументаГИСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроблемныеНомераКиЗ КАК ПроблемныеНомераКиЗ
	|		ПО ТабличнаяЧастьДокументаГИСМ.Ссылка.Организация = ПроблемныеНомераКиЗ.Организация
	|			И ТабличнаяЧастьДокументаГИСМ.Ссылка.Контрагент = ПроблемныеНомераКиЗ.Контрагент
	|			И ТабличнаяЧастьДокументаГИСМ.НомерКиЗ = ПроблемныеНомераКиЗ.НомерКИЗ
	|ГДЕ
	|	НЕ ТабличнаяЧастьДокументаГИСМ.Ссылка.ПометкаУдаления
	|	И ТабличнаяЧастьДокументаГИСМ.ДокументПоступления В (ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И &ТекстОтбораДокументыГИСМ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТабличнойЧастиДокументаГИСМ",     ИмяТабличнойЧастиДокументаГИСМ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораПоНоменклатуре",         ТекстОтбораПоНоменклатуре);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстОтбораДокументыГИСМ",        ТекстОтбораДокументыГИСМ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстОтбораДокументыПоступления", ТекстОтбораДокументыПоступления);
	
КонецПроцедуры

Процедура ОпределитьПолеОписанияНоменклатурыУведомленияОбИмпорте(Поле) Экспорт
	
	Поле = Поле = "Товары.Номенклатура.Комментарий";
	
КонецПроцедуры

#Область ПодпискиНаСобытия

// Обработчик события перед записью, документов влияющих на расчет поступления КиЗ от эмитента.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//  РежимЗаписи  - РежимЗаписиДокумента - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//  РежимПроведения - РежимПроведенияДокумента - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью
//                                               документа.
//
Процедура ВлияющийНаСтатусПоступленияКиЗДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события при проведении, документов влияющих на расчет поступления КиЗ от эмитента.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//  РежимПроведения - РежимПроведенияДокумента - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью
//                                               документа.
//
Процедура ВлияющийНаСтатусПоступленияКиЗДокументПриПроведении(Источник, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события при записи документа "Заявка на выпуск КиЗ" и его оснований для расчета статуса заявки.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//
Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗ(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаказуПоставщику(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		
		РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаявкеНаВыпускКиЗ(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при записи документа "Уведомления о поступлении маркированных товаров" для расчета статуса уведомления.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//
Процедура РассчитатьСтатусУведомленияОПоступлении(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
				 И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ КАК Документ,
	|	Статусы.Статус КАК Статус,
	|	Статусы.ДальнейшееДействие КАК ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров КАК КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления КАК СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &УведомлениеОПоступлении");
	
	Запрос.УстановитьПараметр("УведомлениеОПоступлении", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
		
		Регистр = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ;
		Если Регистр.СтатусТребуетРасчетаПоступления(ДанныеЗаписи.Статус) Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ           = Источник.Ссылка;
			ДанныеЗаписи.Статус             = Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.Получено;
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при записи документа "Уведомления о отгрузке маркированных товаров" и его оснований для расчета
// статуса уведомления.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//
Процедура РассчитатьСтатусУведомленияОбОтгрузке(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		РассчитатьСтатусУведомленияОбОтгрузкеПоРеализацииТоваровУслуг(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ") Тогда
		
		РассчитатьСтатусУведомленияОбОтгрузкеПоУведомлениюОбОтгрузке(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при записи документов, влияющих на расчет состояний информирования ГИСМ для расчета статуса уведомлений.
//
// Параметры:
//  Источник         - ДокументОбъект - документ, влияющий на расчет.
//  Отказ - Булево - см. описание параметра в синтаксис-помощнике к обработчику ПередЗаписью документа.
//
Процедура РассчитатьСтатусИнформированияГИСМ(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеЗапасов") Тогда
		
		ЗаписьТребуется = (Источник.ЕстьКиЗГИСМ Или Источник.ЕстьМаркируемаяПродукцияГИСМ);
		РассчитатьСтатусИнформированияГИСМДляДокументаРаспоряжения(Источник, ЗаписьТребуется);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		ВидИмпорта = РассчитатьВидИмпорта(Источник.Контрагент);
		ЗаписьТребуется = (ВидИмпорта = "ПоступлениеПоИмпорту" ИЛИ ВидИмпорта = "ПоступлениеИзЕАЭС") 
		                   И Источник.ЕстьМаркируемаяПродукцияГИСМ;
		РассчитатьСтатусИнформированияГИСМДляДокументаРаспоряжения(Источник, ЗаписьТребуется);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОСписанииКиЗГИСМ")
		  Или ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ")
		  Или ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбИмпортеМаркированныхТоваровГИСМ") Тогда
		
		РассчитатьСтатусИнформированияГИСМДляДокументаСРаспоряжением(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ЗаписьТребуется = Источник.ЕстьМаркируемаяПродукцияГИСМ;
		РассчитатьСтатусИнформированияГИСМДляДокумента(Источник, ЗаписьТребуется);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.МаркировкаТоваровГИСМ")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремаркировкаТоваровГИСМ") Тогда
		
		РассчитатьСтатусИнформированияГИСМДляДокумента(Источник, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполненияПредставленияТоваров

// Заполняет представление номенклатуры в документах уведомлениях по номерам КиЗ, указанным в документе основании.
//
// Параметры:
//  Основание  - ДокументСсылка - документ, являющийся основанием для уведомления.
//  НомераКиЗ  - ТабличнаяЧастьДокумента - ТЧ, которая содержит колонку НомерКиЗ.
//
Процедура ЗаполнитьПредставлениеТоваровУведомленияПоНомерамКиЗОснования(Основание, НомераКиЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|ПОМЕСТИТЬ втНомераКиЗ
	|ИЗ
	|	&НомераКиЗ КАК НомераКиЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗАпасы.Номенклатура КАК Номенклатура,
	|	ЗАпасы.Характеристика КАК Характеристика,
	|	СерииОснования.Серия КАК Серия,
	|	СерииОснования.Серия.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ втСерииОснования
	|ИЗ
	|	Документ.#ДокументОснование#.СерииНоменклатуры КАК СерииОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.#ДокументОснование#.Запасы КАК ЗАпасы
	|		ПО (ЗАпасы.Ссылка = СерииОснования.Ссылка)
	|			И (ЗАпасы.КлючСвязи = СерииОснования.КлючСвязи)
	|ГДЕ
	|	СерииОснования.Ссылка = &Основание
	|	И СерииОснования.Серия.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				втНомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|			ИЗ
	|				втНомераКиЗ КАК втНомераКиЗ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	втСерииОснования.Номенклатура КАК Номенклатура,
	|	втСерииОснования.Характеристика КАК Характеристика,
	|	втСерииОснования.Серия КАК Серия
	|ИЗ
	|	втСерииОснования КАК втСерииОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНомераКиЗ КАК втНомераКиЗ
	|		ПО (втНомераКиЗ.НомерКиЗ = втСерииОснования.НомерКиЗ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	

	
	Запрос.УстановитьПараметр("НомераКиЗ", НомераКиЗ.Выгрузить(, "НомерСтроки,НомерКиЗ"));
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументОснование#", "РасходнаяНакладная");
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументОснование#", "ПриходнаяНакладная");
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументОснование#", "СписаниеЗапасов");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого ТекСтрока Из НомераКиЗ Цикл
		
		Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
			
			ТекСтрока.Номенклатура   = Выборка.Номенклатура;
			ТекСтрока.Характеристика = Выборка.Характеристика;
			ТекСтрока.Серия          = Выборка.Серия;
			ТекСтрока.НоменклатураПредставление = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура,Выборка.Характеристика);
			
		Иначе
			
			ТекСтрока.Номенклатура   = Неопределено;
			ТекСтрока.Характеристика = Неопределено;
			ТекСтрока.Серия                     = Неопределено;
			ТекСтрока.НоменклатураПредставление = Неопределено;
			
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представление номенклатуры в документе "Уведомление о поступлении маркированной продукции" по номерам КиЗ,
// указанным в документе основании.
//
// Параметры:
//  НомераКиЗ  - ТабличнаяЧастьДокумента - ТЧ, которая содержит колонку НомерКиЗ.
//
Процедура ЗаполнитьПредставлениеТоваровУведомленияОПоступлении(НомераКиЗ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ втНомераКиЗ
	|ИЗ
	|	&НомераКиЗ КАК НомераКиЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерКиЗ,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	СерииОснования.Серия КАК Серия,
	|	СерииОснования.Ссылка КАК ДокументПоступления,
	|	СерииОснования.Серия.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ втСерииОснования
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерииНоменклатуры КАК СерииОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК Запасы
	|		ПО (Запасы.Ссылка = СерииОснования.Ссылка)
	|			И (Запасы.КлючСвязи = СерииОснования.КлючСвязи)
	|ГДЕ
	|	СерииОснования.Ссылка В
	|			(ВЫБРАТЬ
	|				втНомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|			ИЗ
	|				втНомераКиЗ КАК втНомераКиЗ)
	|	И СерииОснования.Серия.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				втНомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|			ИЗ
	|				втНомераКиЗ КАК втНомераКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНомераКиЗ.НомерСтроки КАК НомерСтроки,
	|	втСерииОснования.Номенклатура КАК Номенклатура,
	|	втСерииОснования.Характеристика КАК Характеристика,
	|	втСерииОснования.Серия КАК Серия
	|ИЗ
	|	втСерииОснования КАК втСерииОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНомераКиЗ КАК втНомераКиЗ
	|		ПО (втНомераКиЗ.НомерКиЗ = втСерииОснования.НомерКиЗ)
	|			И (втНомераКиЗ.ДокументПоступления = втСерииОснования.ДокументПоступления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("НомераКиЗ", НомераКиЗ.Выгрузить(, "НомерСтроки, НомерКиЗ, ДокументПоступления"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого ТекСтрока Из НомераКиЗ Цикл
		
		Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
			
			ТекСтрока.Номенклатура   = Выборка.Номенклатура;
			ТекСтрока.Характеристика = Выборка.Характеристика;
			ТекСтрока.Серия          = Выборка.Серия;
			ТекСтрока.НоменклатураПредставление = Справочники.Номенклатура.Представление(Выборка.Номенклатура,
				Выборка.Характеристика);
			
		Иначе
			
			ТекСтрока.Номенклатура   = Неопределено;
			ТекСтрока.Характеристика = Неопределено;
			ТекСтрока.Серия                     = Неопределено;
			ТекСтрока.НоменклатураПредставление = Неопределено;
			
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаявкаНаВыпускКиЗ

// Проверяет корректность заказываемых КиЗ. В одном документе могут быть либо персонифицированные, либо
// неперсонифицированные КиЗ.
//
// Параметры:
//  Объект             - ДокументОбъект - документ, в котором выполняется проверка.
//  ИмяТабличнойЧасти  - Строка - имя табличной части, которая содержит заказываемые КиЗ.
//  Отказ              - Булево - устанавливается в Ложь, если проверка завершилась неудачей.
//
Процедура ПроверитьКорректностьПерсонифицированностиЗаказываемыхКиЗ(Объект, ИмяТабличнойЧасти, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказанныеКиЗ.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ЗаказанныеКиЗ
	|ИЗ
	|	&ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.КиЗГИСМGTIN = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Персонифицирован
	|ИЗ
	|	ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ЗаказанныеКиЗ.Номенклатура = СправочникНоменклатура.Ссылка";
	
	ЗаказанныеКиЗ = Объект[ИмяТабличнойЧасти].Выгрузить(, "Номенклатура");
	Запрос.УстановитьПараметр("ЗаказанныеКиЗ", ЗаказанныеКиЗ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		
		ТекстОшибки = НСтр("ru='Для заказа персонифицированных и неперсонифицированных КиЗ нужно использовать разные документы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,ИмяТабличнойЧасти
			,"Объект"
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет указания характеристик в табличной части документа.
//
// Параметры:
//  Объект                         - ДокументОбъект - документ, в котором выполняется проверка.
//  МассивНепроверяемыхРеквизитов  - Массив - содержит реквизиты, для которых в метаданных установлен признак проверки,
//                                            но они исключаются из платформенной проверки.
//  ИмяТаблицы                     - Строка - имя табличной части, которая содержит заказываемые КиЗ.
//  Отказ                          - Булево - устанавливается в Ложь, если проверка завершилась неудачей.
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект, МассивНепроверяемыхРеквизитов, ИмяТаблицы, Отказ) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТаблицы+".Характеристика");
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Характеристика"" в строке %НомерСтроки% списка ""%ИмяТаблицы%"".'");
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл
		Если СтрокаТЧ.Номенклатура.ПроверятьЗаполнениеХарактеристики И Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ИмяТаблицы%", ИмяТаблицы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТЧ.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает результат подбора заказываемых КиЗ в документе "Заявка на выпуск КиЗ".
//
// Параметры:
//  Форма              - УправляемаяФорма - форма, из которой был вызван подбор.
//  ВыбранноеЗначение  - Произвольный - результат, возвращенный обработкой подбора КиЗ.
//
Процедура ОбработкаПодбораЗаявкиНаВыпускКиЗ(Форма, ВыбранноеЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предоставляет возможность заполнить служебные реквизиты в ТЧ документа "Заявка на выпуск КиЗ".
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа "Заявка на выпуск КиЗ".
//
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧастиЗаявкиНаВыпускКиЗ(Форма) Экспорт
	
	Для Каждого СтрокаТЧ Из Форма.Объект.ЗаказанныеКиЗ Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			СтрокаТЧ.ХарактеристикиИспользуются = СтрокаТЧ.Номенклатура.ИспользоватьХарактеристики;
			СтрокаТЧ.Артикул = СтрокаТЧ.Номенклатура.Артикул;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предоставляет возможность заполнить служебные реквизиты в ТЧ документа "Уведомление об импорте маркированных товаров".
//
// Параметры:
//  Форма - ТабличнаяЧасть - ТЧ "Товары "документа "Уведомление об импорте маркированных товаров".
//
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧастиУведомлениеОбИмпорте(Товары) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Панель1СМаркировка

// Проверяет наличие права чтения на документ и функциональную опцию использования,
// которым отражается факт розничных продаж.
//
// Параметры:
//   Доступен - Булево - Исходящий параметр, Истина, если право есть, Ложь в обратном случае.
//
Процедура ДоступенОтчетОРозничныхПродажах(Доступен) Экспорт
	
	Доступен = Истина;
	
КонецПроцедуры

// Проверяет наличие права чтения на документ и функциональную опцию использования,
// которыми отражается факт возврата от розничного покупателя.
//
// Параметры:
//   Доступен - Булево - Исходящий параметр, Истина, если право есть, Ложь в обратном случае.
//
Процедура ДоступенВозвратТоваровОтРозничногоКлиента(Доступен) Экспорт
	
	Доступен = Истина;
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт розничных продаж,
// требующих дальнейшего действия или ожидания для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаОтчетыОРозничныхПродажах(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие <> ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И (ОтчетОРозничныхПродажах.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт розничных продаж,
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаОтчетыОРозничныхПродажахОтработайте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие В 
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И (ОтчетОРозничныхПродажах.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт розничных продаж,
// требующих ожидания для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаОтчетыОРозничныхПродажахОжидайте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие В 
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И (ОтчетОРозничныхПродажах.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт возврата от розничного покупателя,
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
///
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаВозвратыТоваровОтРозничныхКлиентов(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка ЕСТЬ НЕ NULL
	|	И ВозвратТоваровОтКлиента.ВидОперации = Значение(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие <> ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И (ВозвратТоваровОтКлиента.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт возврата от розничного покупателя,
// требующих дальнейшего действия или ожидания для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаВозвратыТоваровОтРозничныхКлиентовОтработайте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка ЕСТЬ НЕ NULL
	|	И ВозвратТоваровОтКлиента.ВидОперации = Значение(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие В 
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И (ВозвратТоваровОтКлиента.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов, которыми оформляется факт возврата от розничного покупателя,
// требующих ожидания для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаВозвратыТоваровОтРозничныхКлиентовОжидайте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка ЕСТЬ НЕ NULL
	|	И ВозвратТоваровОтКлиента.ВидОперации = Значение(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие В 
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И (ВозвратТоваровОтКлиента.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о списании КиЗ",
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОСписанииКиЗГИСМ(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОСписанииКиЗГИСМ КАК УведомлениеОСписанииКиЗГИСМ
	|ПО
	|	СтатусыИнформированияГИСМ.ТекущееУведомление = УведомлениеОСписанииКиЗГИСМ.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.СписаниеЗапасов КАК ВнутреннееПотреблениеТоваров
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ВнутреннееПотреблениеТоваров.Ссылка
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.СписаниеЗапасов
	|	И (ВнутреннееПотреблениеТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И (СтатусыИнформированияГИСМ.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|	И (ВнутреннееПотреблениеТоваров.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО))
	|	ИЛИ
	|	(УведомлениеОСписанииКиЗГИСМ.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.ДальнейшееДействие <> ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|	И (УведомлениеОСписанииКиЗГИСМ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о списании КиЗ",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОСписанииКиЗГИСМОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.СписаниеЗапасов КАК ВнутреннееПотреблениеТоваров
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ВнутреннееПотреблениеТоваров.Ссылка
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.СписаниеЗапасов
	|	И (ВнутреннееПотреблениеТоваров.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о отгрузке маркированных товаров",
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОбОтгрузке(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|ПО
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|ПО
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = РеализацияТоваровУслуг.Ссылка
	|
	|ГДЕ
	|	((РеализацияТоваровУслуг.Ссылка ЕСТЬ НЕ NULL ) И
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка))
	|	И (РеализацияТоваровУслуг.Организация = &Организация  ИЛИ
	|		&Организация = НЕОПРЕДЕЛЕНО))
	|	ИЛИ
	|	(УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ДальнейшееДействие <>
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|	И (УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о отгрузке маркированных товаров",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОбОтгрузкеОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|ПО
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = РеализацияТоваровУслуг.Ссылка
	|	
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка ЕСТЬ НЕ NULL И
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)
	|	)
	|	И (РеализацияТоваровУслуг.Организация = &Организация ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Заявка на выпуск КиЗ",
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ(ТекстЗапроса)  Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка))

	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО))
	|	ИЛИ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие В (
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПолучитеСчетНаОплату),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОплатитеСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.Аннулируйте)
	|	)
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Заявка на выпуск КиЗ",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите(ТекстЗапроса)  Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ ССЫЛКА Документ.ЗаявкаНаВыпускКиЗГИСМ
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка)
	|	))
	|	И (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о ввозе маркированных товаров из ЕАЭС",
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОВвозеИзЕАЭС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ КАК УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ
	|		ПО СтатусыИнформированияГИСМ.ТекущееУведомление = УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ НЕ NULL 
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Код В (""112"", ""398"", ""051"", ""417"")
	|	И (СтатусыИнформированияГИСМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|				И (ПоступлениеТоваровУслуг.Организация = &Организация
	|					ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|			ИЛИ УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ.Ссылка ЕСТЬ НЕ NULL 
	|				И СтатусыИнформированияГИСМ.ДальнейшееДействие <> ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|				И (УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ.Организация = &Организация
	|					ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|				И (УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ.Ответственный = &Ответственный
	|					ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление о ввозе маркированных товаров из ЕАЭС",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОВвозеИзЕАЭСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ НЕ NULL 
	|	И СтатусыИнформированияГИСМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Код В ( ""112"", ""398"", ""051"", ""417"")
	|	И (СтатусыИнформированияГИСМ.Документ.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление об импорте маркированных товаров",
// требующих дальнейшего действия для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОбИмпорте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИмпортеМаркированныхТоваровГИСМ КАК УведомлениеОбИмпортеМаркированныхТоваровГИСМ
	|		ПО СтатусыИнформированияГИСМ.ТекущееУведомление = УведомлениеОбИмпортеМаркированныхТоваровГИСМ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ НЕ NULL 
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И НЕ ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Код В ( ""643"", ""112"", ""398"", ""051"", ""417"")
	|	И (СтатусыИнформированияГИСМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|				И (ПоступлениеТоваровУслуг.Организация = &Организация
	|					ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|			ИЛИ УведомлениеОбИмпортеМаркированныхТоваровГИСМ.Ссылка ЕСТЬ НЕ NULL 
	|				И СтатусыИнформированияГИСМ.ДальнейшееДействие <> ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется)
	|				И (УведомлениеОбИмпортеМаркированныхТоваровГИСМ.Организация = &Организация
	|					ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|				И (УведомлениеОбИмпортеМаркированныхТоваровГИСМ.Ответственный = &Ответственный
	|					ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов "Уведомление об импорте маркированных товаров",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаУведомленияОбИмпортеОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|ПО
	|	СтатусыИнформированияГИСМ.Документ = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыИнформированияГИСМ.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка))
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И НЕ ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Код В ( ""643"", ""112"", ""398"", ""051"", ""417"")
	|	И (ПоступлениеТоваровУслуг.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов ожидающих отправки "Отчеты о розничных продажах",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаКоличествоОтчетовОРозничныхПродажахОжидающиеОтправки(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыИнформированияГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ПО
	|	СтатусыИнформированияГИСМ.ТекущееУведомление = ОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL
	|	И (СтатусыИнформированияГИСМ.ДальнейшееДействие В (
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием)
	|	)
	|	И СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И (ОтчетОРозничныхПродажах.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (ОтчетОРозничныхПродажах.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО))
	|/////////////////////////////////////////////////////////////////////////////
	|ОБЪЕДИНИТЬ ВСЕ ";
	
КонецПроцедуры

// Формирует текст запроса, вычисляющий количество документов ожидающих отправки "Возвраты товаров от клиентов",
// требующих дальнейшего действия "оформите" для отображения в панели "1С - Маркировка".
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаКоличествоВозвратовОтРозничныхКлиентовОжидающиеОтправки(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ 0 
	|/////////////////////////////////////////////////////////////////////////////
	|ОБЪЕДИНИТЬ ВСЕ ";
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросыДинамическихСписковРаспоряжений

// Формирует текст запроса для динамического списка распоряжений уведомлений об импорте.
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОбИмпорте(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И СтатусыИнформированияГИСМ.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И СтатусыИнформированияГИСМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует), ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|";
	
КонецПроцедуры

// Формирует текст запроса для динамического списка распоряжений уведомлений о ввозе из ЕАЭС.
//
// Параметры:
//   ТекстЗапроса - Строка - Исходящий параметр, текст запроса.
//
Процедура ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОВвозеИзЕАЭС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	СтатусыИнформированияГИСМ.Документ.Контрагент КАК Контрагент,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.ПриходнаяНакладная
	|	И СтатусыИнформированияГИСМ.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И СтатусыИнформированияГИСМ.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|";
	
КонецПроцедуры

// Формирует текст запроса для динамического списка распоряжений уведомлений о списании.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса динамического списка.
//            Если пустой - то в динамическом списке остается библиотечный запрос.
//
Процедура ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОСписании(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыИнформированияГИСМ.Документ КАК Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление КАК ТекущееУведомление,
	|	ВЫБОР
	|		КОГДА СтатусыИнформированияГИСМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует)
	|		ИНАЧЕ СтатусыИнформированияГИСМ.Статус
	|	КОНЕЦ КАК СтатусГИСМКОформлению,
	|	СтатусыИнформированияГИСМ.Документ.Дата КАК Дата,
	|	СтатусыИнформированияГИСМ.Документ.Номер КАК Номер,
	|	СтатусыИнформированияГИСМ.Документ.Организация КАК Организация,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ ССЫЛКА Документ.СписаниеЗапасов
	|	И СтатусыИнформированияГИСМ.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ОтклоненоГИСМ))
	|	И НЕ СтатусыИнформированияГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
КонецПроцедуры

// Формирует текст запроса для динамического списка распоряжений уведомлений об отгрузке.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса динамического списка.
//            Если пустой - то в динамическом списке остается библиотечный запрос.
//
Процедура ТекстЗапросаДинамическогоСпискаРаспоряженийУведомлениеОбОтгрузке(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Дата КАК ДатаУведомления,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.НомерГИСМ КАК НомерГИСМ,
	|	УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Контрагент КАК Контрагент,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ КАК Документ,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Организация КАК Организация,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке КАК ТекущееУведомлениеОбОтгрузке,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус КАК СтатусГИСМУведомленияКОформлению,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Дата КАК Дата,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Номер КАК Номер,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус В 
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоКлиентом),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ОтклоненоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка))
	|	И НЕ СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
КонецПроцедуры

// Формирует текст запроса для динамического списка заявок на выпуск КиЗ.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса динамического списка.
//            Если пустой - то в динамическом списке остается библиотечный запрос.
//
Процедура ТекстЗапросаДинамическогоСпискаРаспоряженийЗаявкаНаВыпускКиЗ(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ,
	|	ВЫБОР
	|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ПустаяСсылка)
	|			ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует)
	|	КОНЕЦ КАК СтатусГИСМКОформлению,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.ПометкаУдаления КАК ПометкаУдаления,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Проведен КАК Проведен,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Организация КАК Организация,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Контрагент КАК Контрагент,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ссылка КАК Ссылка,
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ответственный КАК Ответственный,
	|	ИСТИНА КАК Картинка
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ГДЕ
	|	(СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)
	|			ИЛИ НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ ССЫЛКА Документ.ЗаявкаНаВыпускКиЗГИСМ
	|				И СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом)))
	|	И НЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ.Ссылка ЕСТЬ NULL 
	|";
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Формирует текст запроса ограничения доступа для RLS формата БСП 3.0
//
// Параметры:
//   Ограничение - Структура - См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//   ИмяТаблицы - Строка - Полное имя объекта метаданных. Например "Документ.МаркировкаТоваровГИСМ".
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение, ИмяТаблицы) Экспорт
	
	Если СтрНайти(ИмяТаблицы, "ЗаявкаНаВыпускКиЗГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "УведомлениеОПоступленииМаркированныхТоваровГИСМ") <> 0 Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
		
	ИначеЕсли СтрНайти(ИмяТаблицы, "МаркировкаТоваровГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "ПеремаркировкаТоваровГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "УведомлениеОбИмпортеМаркированныхТоваровГИСМ") <> 0
	 ИЛИ СтрНайти(ИмяТаблицы, "УведомлениеОСписанииКиЗГИСМ") <> 0 Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура инициализации данных документа для механизма проведения.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДополнительныеСвойства - Структура - Дополнительные свойства для проведения.
//  Регистры - Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой
//                                                  - имена регистров Если неопределено - то всегда возвращается ИСТИНА.
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаТоваров

// Заполняет GTINВСтроках
//
// Параметры:
//  ДокументОбъект - ДокументОбъект. - Документ для заполнения GTIN.
//
Процедура ЗаполнитьGTINВСтроках(ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийМодуляОбъекта

// Инициализировать документ
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//  ДанныеЗаполнения - Структура - данные заполнения.
//
Процедура ИнициализироватьДокументМаркировкаТоваров(ДокументОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработка заполнения маркировка товаров
//
// Параметры:
//  ДанныеЗаполнения	 - Структура - данные заполнения.
//  СтандартнаяОбработка - Булево - стандартная обработка.
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаЗаполненияМаркировкаТоваров(ДанныеЗаполнения, СтандартнаяОбработка, ДокументОбъект) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработка проверки заполнения маркировка товаров
//
// Параметры:
//  Отказ							 - Булево - Отказ.
//  ПроверяемыеРеквизиты			 - Массив - массив проверяемых реквизитов.
//  МассивНепроверяемыхРеквизитов	 - Массив - массив непроверяемых реквизитов.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаПроверкиЗаполненияМаркировкаТоваров(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Перед записью маркировка товаров
//
// Параметры:
//  Отказ							 - Булево - Отказ.
//  РежимЗаписи						 - РежимЗаписи - Режим записи документа.
//  РежимПроведения	 				 - РежимПроведения - Режим проведения документа.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ПередЗаписьюМаркировкаТоваров(Отказ, РежимЗаписи, РежимПроведения, ДокументОбъект) Экспорт
	
	НомераКИЗ = ДокументОбъект.Серии.Выгрузить();
	НоменклатураКИЗ = ДокументОбъект.Товары.Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	тзНомераКИЗ.КлючСвязи КАК КлючСвязи,
	|	тзНомераКИЗ.Серия КАК Серия
	|ПОМЕСТИТЬ втТаблицаСерий
	|ИЗ
	|	&НомераКИЗ КАК тзНомераКИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзНомераКИЗ.КлючСвязи КАК КлючСвязи,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
	|	СерииНоменклатуры.НомерГИСМ КАК НомерГИСМ,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗГИСМ
	|ПОМЕСТИТЬ втНомераКиЗ
	|ИЗ
	|	втТаблицаСерий КАК тзНомераКИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО тзНомераКИЗ.Серия = СерииНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тзНоменклатураКИЗ.НоменклатураКИЗ КАК НоменклатураКИЗ,
	|	тзНоменклатураКИЗ.ХарактеристикаКИЗ КАК ХарактеристикаКИЗ,
	|	тзНоменклатураКИЗ.КлючСвязи КАК КлючСвязи,
	|	тзНоменклатураКИЗ.GTIN КАК GTIN
	|ПОМЕСТИТЬ втНоменклатураКИЗ
	|ИЗ
	|	&НоменклатураКИЗ КАК тзНоменклатураКИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураКИЗ.НоменклатураКИЗ КАК Владелец,
	|	СерииНоменклатуры.Ссылка КАК Ссылка,
	|	втНомераКИЗ.КлючСвязи КАК КлючСвязи,
	|	втНомераКИЗ.RFIDTID КАК RFIDTID,
	|	втНомераКИЗ.RFIDUser КАК RFIDUser,
	|	втНомераКИЗ.RFIDEPC КАК RFIDEPC,
	|	втНомераКИЗ.EPCGTIN КАК EPCGTIN,
	|	втНомераКИЗ.НомерГИСМ КАК НомерГИСМ,
	|	втНомераКИЗ.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	втНомераКИЗ.НомерКиЗГИСМ КАК Наименование,
	|	втНоменклатураКИЗ.НоменклатураКИЗ КАК Номенклатура,
	|	втНоменклатураКИЗ.ХарактеристикаКИЗ КАК Характеристика,
	|	втНоменклатураКИЗ.GTIN КАК GTIN
	|ИЗ
	|	втНоменклатураКИЗ КАК втНоменклатураКИЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНомераКиЗ КАК втНомераКИЗ
	|		ПО втНоменклатураКИЗ.КлючСвязи = втНомераКИЗ.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО втНоменклатураКИЗ.НоменклатураКИЗ = СерииНоменклатуры.Владелец
	|			И (втНомераКИЗ.НомерКиЗГИСМ = СерииНоменклатуры.НомерКиЗГИСМ)");
	
	Запрос.УстановитьПараметр("НомераКИЗ", НомераКИЗ);
	Запрос.УстановитьПараметр("НоменклатураКИЗ",НоменклатураКИЗ);
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[3].Выбрать();
	ДокументОбъект.СерииКиЗ.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Серия = Неопределено;
		
		// если в номенклатуре КИЗ уже существует такая метка, значит используем ее
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Серия = Выборка.Ссылка;
		Иначе // создаем новую метку 
			
			Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Серия, Выборка);
			Серия.Записать();
			
		КонецЕсли;
		
		Строка = ДокументОбъект.СерииКиЗ.Добавить();
		Строка.КлючСвязи = Выборка.КлючСвязи;
		Строка.Номенклатура = Выборка.Номенклатура;
		Строка.Характеристика = Выборка.Характеристика;
		Строка.GTIN = Выборка.GTIN;
		Строка.Количество = 1;
		
		Строка.Серия = Серия;
		
	КонецЦикла;
	
КонецПроцедуры

// При копировании документа Маркировка товаров.
//
// Параметры:
//  ОбъектКопирования - см. описание параметра в синтаксис-помощнике к обработчику "ПриКопировании".
//  ДокументОбъект - ДокументОбъект.МаркировкаТоваров - обрабатываемый документ.
//
Процедура ПриКопированииМаркировкаТоваров(ОбъектКопирования, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения маркировка товаров
//
// Параметры:
//  Отказ			 - Булево - Отказ.
//  РежимПроведения	 				 - РежимПроведения - Режим проведения документа.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаПроведенияМаркировкаТоваров(Отказ, РежимПроведения, ДокументОбъект) Экспорт
	
	Ссылка = ДокументОбъект.Ссылка;
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	Движения =  ДокументОбъект.Движения;
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	ИнициализироватьДанныеДокументаМаркировкиТоваров(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ДокументОбъект);

	// Контроль
	ВыполнитьКонтрольМаркировкаТоваровГИСМ(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Обработка удаления проведения маркировка товаров
//
// Параметры:
//  Отказ			 - Булево - Отказ.
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаУдаленияПроведенияМаркировкаТоваров(Отказ, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПеремаркировкаТоваров

#Область ОбработчикиСобытийМодуляОбъекта

// Инициализировать документ
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//  ДанныеЗаполнения - Структура - данные заполнения.
//
Процедура ИнициализироватьДокументПеремаркировкаТоваров(ДокументОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработка проверки заполнения перемаркировка товаров
//
// Параметры:
//  Отказ							 - Булево - Отказ.
//  ПроверяемыеРеквизиты			 - Массив - массив проверяемых реквизитов.
//  МассивНепроверяемыхРеквизитов	 - Массив - массив непроверяемых реквизитов.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаЗаполненияПеремаркировкаТоваров(ДанныеЗаполнения, СтандартнаяОбработка, ДокументОбъект) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ДокументОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработка проверки заполнения перемаркировка товаров
//
// Параметры:
//  Отказ							 - Булево - Отказ.
//  ПроверяемыеРеквизиты			 - Массив - массив проверяемых реквизитов.
//  МассивНепроверяемыхРеквизитов	 - Массив - массив непроверяемых реквизитов.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаПроверкиЗаполненияПеремаркировкаТоваров(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Перед записью перемаркировка товаров
//
// Параметры:
//  Отказ							 - Булево - Отказ.
//  РежимЗаписи						 - РежимЗаписи - Режим записи документа.
//  РежимПроведения	 				 - РежимПроведения - Режим проведения документа.
//  ДокументОбъект	 				 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ПередЗаписьюПеремаркировкаТоваров(Отказ, РежимЗаписи, РежимПроведения, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// При копировании документа Перемаркировка товаров.
//
// Параметры:
//  ОбъектКопирования - см. описание параметра в синтаксис-помощнике к обработчику "ПриКопировании".
//  ДокументОбъект - ДокументОбъект.ПеремаркировкаТоваров - обрабатываемый документ.
//
Процедура ПриКопированииПеремаркировкаТоваров(ОбъектКопирования, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения перемаркировка товаров
//
// Параметры:
//  Отказ			 - Булево - Отказ.
//  РежимПроведения	 - РежимПроведения - Режим проведения документа.
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаПроведенияПеремаркировкаТоваров(Отказ, РежимПроведения, ДокументОбъект) Экспорт
	
	Ссылка = ДокументОбъект.Ссылка;
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	Движения =  ДокументОбъект.Движения;
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеДокументовУНФ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	ИнициализироватьДанныеДокументаПеремаркировкиТоваров(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеДокументовУНФ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	// Отражение в разделах учета
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыКРасходуСоСкладов", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ЗапасыНаСкладах", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("Запасы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДоходыИРасходы", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерииНоменклатуры
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатурыГарантии", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("ДвиженияСерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	ПроведениеДокументовУНФ.ОтразитьДвижения("СерииНоменклатуры", ТаблицыДляДвижений, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеДокументовУНФ.ЗаписатьНаборыЗаписей(ДокументОбъект);

	// Контроль
	ВыполнитьКонтрольПеремаркировкаТоваровГИСМ(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Обработка удаления проведения перемаркировка товаров
//
// Параметры:
//  Отказ			 - Булево - Отказ.
//  ДокументОбъект	 - ДокументОбъект.* - обрабатываемый документ.
//
Процедура ОбработкаУдаленияПроведенияПеремаркировкаТоваров(Отказ, ДокументОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииФормыДокумента

// Заполняет GTIN в строке документа
//
// Параметры:
//  ТекущаяСтрока				 - ТекущаяСтрока - текущая строка таблицы Товары.
//
Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ВЫБОР
	|			КОГДА &ХарактеристикаЗаполнена
	|				ТОГДА ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
	Запрос.УстановитьПараметр("ХарактеристикаЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Характеристика));
	ТаблицаGTIN = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаGTIN.Количество() = 1 Тогда
		СтрокаТаблицы = ТаблицаGTIN.Получить(0);
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаТаблицы.GTIN) Тогда
			ТекущаяСтрока.GTIN = СтрокаТаблицы.GTIN;
		КонецЕсли;
	ИначеЕсли ТаблицаGTIN.Найти(ТекущаяСтрока.GTIN, "GTIN") <> Неопределено Тогда
		// ничего не делаем, GTIN подходит
	Иначе
		ТекущаяСтрока.GTIN = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список КиЗ, подходящих для заполнения документ по выбранным категориям КиЗ.
//
// Параметры:
//  Объект				 		 - ДокументОбъект.* - текущая строка таблицы Товары.
//  СписокНоменклатураКиЗ		 - СписокЗначений - список номенклатуры КиЗ, подходящих под выбранную категорию КиЗ в документе.
//
Процедура ПолучитьКиЗДляЗаполнения(Объект, СписокНоменклатураКиЗ) Экспорт
	
	СписокНоменклатураКиЗ.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КиЗГИСМВид)
		И НЕ ЗначениеЗаполнено(Объект.КиЗГИСМРазмер)
		И НЕ ЗначениеЗаполнено(Объект.КиЗГИСМСпособВыпускаВОборот) Тогда
		
		Возврат
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК НоменклатураКиЗ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КиЗГИСМВид = &КиЗГИСМВид
	|	И Номенклатура.КиЗГИСМСпособВыпускаВОборот = &КиЗГИСМСпособВыпускаВОборот
	|	И Номенклатура.КиЗГИСМРазмер = &КиЗГИСМРазмер
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И ВЫБОР КОГДА &КиЗГИСМСИндивидуализацией = ЛОЖЬ ТОГДА
	|		НЕ Номенклатура.ИспользоватьХарактеристики 
	|		И Номенклатура.КиЗГИСМGTIN ПОДОБНО """"
	|	ИНАЧЕ
	|		Номенклатура.ИспользоватьХарактеристики
	|		ИЛИ НЕ Номенклатура.КиЗГИСМGTIN ПОДОБНО """" 
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("КиЗГИСМВид",                  Объект.КиЗГИСМВид);
	Запрос.УстановитьПараметр("КиЗГИСМРазмер",               Объект.КиЗГИСМРазмер);
	Запрос.УстановитьПараметр("КиЗГИСМСпособВыпускаВОборот", Объект.КиЗГИСМСпособВыпускаВОборот);
	Запрос.УстановитьПараметр("КиЗГИСМСИндивидуализацией",   Объект.КиЗГИСМСИндивидуализацией);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокНоменклатураКиЗ.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокНоменклатураКиЗ.Добавить(Выборка.НоменклатураКиЗ);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет списки выбора реквизитов шапки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма документа.
//
Процедура ЗаполнитьСпискиВыбораРеквизитовШапки(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет списки выбора реквизитов шапки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма документа.
//
Процедура ЗаполнитьСпискиВыбораРеквизитовШапкиПеремаркировкаТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик Категория КиЗ при изменении
//
// Параметры:
//  ДокументОбъект			 - ДокументОбъект.* - обрабатываемый документ.
//  СписокНоменклатураКиЗ	 - СписокЗначений - список номенклатуры КиЗ, подходящих под выбранную категорию КиЗ в документе.
//  ЗаполнятьСерии			 - Булево - Признак заполнения серий в ТЧ Серии.
//
Процедура КатегорияКиЗПриИзменении(ДокументОбъект, СписокНоменклатураКиЗ, ЗаполнятьСерии = Истина) Экспорт
	
	ПолучитьКиЗДляЗаполнения(ДокументОбъект, СписокНоменклатураКиЗ);
	ЗаполнитьНоменклатуруКиЗВСтроках(ДокументОбъект, СписокНоменклатураКиЗ, ЗаполнятьСерии);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииЗаказаПоставщику(ЗаявкаОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗаказПоставщику.Контрагент КАК Контрагент,
	|	ДокументЗаказПоставщику.Организация КАК Организация,
	|	ДокументЗаказПоставщику.Ссылка КАК Основание,
	|	НЕ ДокументЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяЭмитентом)
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПустаяСсылка)
	|						ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|					ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует))
	|	КОНЕЦ КАК СтатусЗаявкиНаВыпускКиЗ,
	|	ЕСТЬNULL(СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ, ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)) КАК ТекущаяЗаявкаНаВыпускКиЗ,
	|	ДокументЗаказПоставщику.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДатаДоговора, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.НомерДоговора, """") КАК НомерДоговора
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|		ПО (СтатусыЗаявокНаВыпускКиЗГИСМ.Документ = ДокументЗаказПоставщику.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДокументЗаказПоставщику.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДокументЗаказПоставщику.Ссылка = &ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ЗаказПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.КиЗГИСМ
	|	И ЗаказПоставщикуТовары.Ссылка = &ЗаказПоставщику";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
	РеквизитыЗаказа.Следующий();
	
	
	Если Не РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЭтоСтатусНеАктуальнойЗаявки(РеквизитыЗаказа.СтатусЗаявкиНаВыпускКиЗ) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальная заявка на выпуск КиЗ - %Заявка%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заявка%", РеквизитыЗаказа.ТекущаяЗаявкаНаВыпускКиЗ);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют контрольные (идентификационные) знаки.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, РеквизитыЗаказа);
	ЗаявкаОбъект.ЗаказанныеКиЗ.Загрузить(РезультатЗапроса[1].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтгрузкеГИСМНаОснованииРеализации(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",   Константы.ВалютаУчета.Получить());
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Дата,ВалютаДокумента");
	Запрос.УстановитьПараметр("ДатаОснования", РеквизитыОснования.Дата);
	Запрос.УстановитьПараметр("ВалютаОснования", РеквизитыОснования.ВалютаДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Ссылка КАК Основание,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Продажа)
	|		КОГДА РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Комиссия)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидОборотаТовараГИСМ.Продажа)
	|	КОНЕЦ КАК ВидОборотаТовара,
	|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|	ЕСТЬNULL(СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке,
	|		ЗНАЧЕНИЕ(Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)) КАК АктуальноеУведомлениеОбОтгрузкеГИСМ,
	|	ЕСТЬNULL(СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	КОЛИЧЕСТВО(РеализацияТоваровУслугСерии.Серия) КАК КоличествоСерий
	|ПОМЕСТИТЬ
	|	втСерии
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК РеализацияТоваровУслугСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Запасы
	|		ПО РеализацияТоваровУслугСерии.КлючСвязи = Запасы.КлючСвязи И РеализацияТоваровУслугСерии.Ссылка = Запасы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугСерии.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования,
	|		Валюта = &ВалютаРеглУчета ИЛИ Валюта = &ВалютаОснования) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС
	|	* ВЫБОР
	|		КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|						/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.Всего
	|	* ВЫБОР
	|		КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|						/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	втТовары
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втКурсыВалют КАК КурсВалютыОснования
	|ПО
	|	КурсВалютыОснования.Валюта = &ВалютаОснования
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втКурсыВалют КАК КурсВалютыРегл
	|ПО
	|	КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница 
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РеализацияТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница 
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТовары.СуммаНДС, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			втТовары.СуммаНДС /
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(втСерии.КоличествоСерий, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ 
	|					втСерии.КоличествоСерий
	|			КОНЕЦ
	|	КОНЕЦ КАК НДСКиЗ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТовары.СуммаСНДС, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 
	|			втТовары.СуммаСНДС /
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(втСерии.КоличествоСерий, 0) = 0
	|					ТОГДА 1
	|				ИНАЧЕ 
	|					втСерии.КоличествоСерий
	|			КОНЕЦ
	|	КОНЕЦ КАК СтоимостьКиЗ
	|ПОМЕСТИТЬ
	|	втСтоимостьКиЗ
	|ИЗ
	|	втСерии КАК втСерии 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	втТовары КАК втТовары
	|ПО
	|	втСерии.Номенклатура = втТовары.Номенклатура И
	|	втСерии.Характеристика = втТовары.Характеристика И
	|	втСерии.Склад = втТовары.Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугСерии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	РеализацияТоваровУслугСерии.Серия.RFIDTID КАК RFIDTID,
	|	РеализацияТоваровУслугСерии.Серия.RFIDEPC КАК RFIDEPC,
	|	втСтоимостьКиЗ.НДСКиЗ КАК СуммаНДС,
	|	втСтоимостьКиЗ.СтоимостьКиЗ КАК Стоимость
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК РеализацияТоваровУслугСерии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК Запасы
	|	ПО Запасы.КлючСвязи = РеализацияТоваровУслугСерии.КлючСвязи И Запасы.Ссылка = РеализацияТоваровУслугСерии.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ПО
	|	Запасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	втСтоимостьКиЗ КАК втСтоимостьКиЗ
	|ПО
	|	втСтоимостьКиЗ.Номенклатура = Запасы.Номенклатура И
	|	втСтоимостьКиЗ.Характеристика = Запасы.Характеристика И
	|	втСтоимостьКиЗ.Склад = РеализацияТоваровУслугСерии.Ссылка.СтруктурнаяЕдиница
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|	И РеализацияТоваровУслугСерии.Ссылка = &ДокументОснование
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	
	Если Не РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление об отгрузке ГИСМ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.АктуальноеУведомлениеОбОтгрузкеГИСМ);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[5].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[5].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОСписанииКиЗНаОснованииВнутреннегоПотребления(УведомлениеОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваров.Ссылка КАК Основание,
	|	НЕ ВнутреннееПотреблениеТоваров.Проведен КАК ЕстьОшибкиПроведен,
	|	ВнутреннееПотреблениеТоваров.Организация КАК Организация,
	|	ВнутреннееПотреблениеТоваров.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.ТекущееУведомление, ЗНАЧЕНИЕ(Документ.УведомлениеОСписанииКИЗГИСМ.ПустаяСсылка)) КАК ТекущееУведомление,
	|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	Документ.СписаниеЗапасов КАК ВнутреннееПотреблениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО ВнутреннееПотреблениеТоваров.Ссылка = СтатусыИнформированияГИСМ.Документ
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ,
	|	СправочникСерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СправочникСерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	ВЫБОР
	|		КОГДА СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписаниеЗапасовЗапасы.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Индивидуализирован,
	|	ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ.Ссылка КАК ЗаявкаНаВыпускКиЗ
	|ИЗ
	|	Документ.СписаниеЗапасов.СерииНоменклатуры КАК ВнутреннееПотреблениеТоваровСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО ВнутреннееПотреблениеТоваровСерии.Серия = СправочникСерииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|		ПО ВнутреннееПотреблениеТоваровСерии.Ссылка = СписаниеЗапасовЗапасы.Ссылка
	|			И ВнутреннееПотреблениеТоваровСерии.КлючСвязи = СписаниеЗапасовЗапасы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ
	|		ПО (ЗаявкаНаВыпускКиЗГИСМВыпущенныеКиЗ.НомерКиЗ = СправочникСерииНоменклатуры.НомерКиЗГИСМ)
	|			И (СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ)
	|ГДЕ
	|	(СписаниеЗапасовЗапасы.Номенклатура.КиЗГИСМ
	|			ИЛИ СписаниеЗапасовЗапасы.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция))
	|	И (СправочникСерииНоменклатуры.НомерКиЗГИСМ <> """"
	|			ИЛИ СправочникСерииНоменклатуры.RFIDTID <> """"
	|			ИЛИ СправочникСерииНоменклатуры.RFIDEPC <> """")
	|	И ВнутреннееПотреблениеТоваровСерии.Ссылка = &ДокументОснование";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = РезультатЗапроса[0].Выбрать();
	РеквизитыОснования.Следующий();
	
	Если Не РегистрыСведений.СтатусыИнформированияГИСМ.ЭтоСтатусНеАктуальногоУведомления(РеквизитыОснования.Статус) Тогда
		
		ТекстОшибки = НСтр("ru='Для %Документ% уже существует актуальное уведомление об списании КиЗ - %Уведомление%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Уведомление%", РеквизитыОснования.ТекущееУведомление);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='В %Документ% отсутствуют товары, маркированные контрольными (идентификационными) знаками и контрольные (идентификационные) знаки.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(УведомлениеОбъект, РеквизитыОснования);
	УведомлениеОбъект.НомераКиЗ.Загрузить(РезультатЗапроса[1].Выгрузить());
	
КонецПроцедуры

Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаказуПоставщику(Источник) 
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущаяЗаявкаНаВыпускКиЗ,
	|	Статусы.СтатусЗаявкиНаВыпускКиЗ,
	|	Статусы.СтатусОбработкиЭмитентом,
	|	Статусы.ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &ЗаказПоставщику
	|");
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не Источник.ЕстьКиЗГИСМ)
			И Не ЗначениеЗаполнено(Выборка.ТекущаяЗаявкаНаВыпускКиЗ) Тогда
			РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли  Источник.ЕстьКиЗГИСМ Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ                   = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие         = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусЗаявкиНаВыпускКиЗПоЗаявкеНаВыпускКиЗ(Источник)
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущаяЗаявкаНаВыпускКиЗ,
	|	Статусы.СтатусЗаявкиНаВыпускКиЗ,
	|	Статусы.СтатусОбработкиЭмитентом,
	|	Статусы.ДальнейшееДействие,
	|	Статусы.ПоступлениеТоваров,
	|	Статусы.КоличествоПоступленийТоваров,
	|	Статусы.СтатусПоступления
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК Статусы
	|ГДЕ
	|	    Статусы.Документ = &Основание
	|	ИЛИ Статусы.Документ = &Заявка");
	
	Запрос.УстановитьПараметр("Основание", Источник.Основание);
	Запрос.УстановитьПараметр("Заявка", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗаписьНового Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущаяЗаявкаНаВыпускКиЗ) 
				Или РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЭтоСтатусНеАктуальнойЗаявки(Выборка.СтатусЗаявкиНаВыпускКиЗ)  Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
				ДанныеЗаписи.Документ                 = Выборка.Документ;
				ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ = Источник.Ссылка;
				ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ  = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик;
				ДанныеЗаписи.ДальнейшееДействие       = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
			
			Регистр = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ;
			Если Регистр.СтатусТребуетРасчетаПоступления(ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ,
				                                         ДанныеЗаписи.СтатусОбработкиЭмитентом) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ                    = Источник.Ссылка;
			ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ = Источник.Ссылка;
			ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ  = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие          = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусУведомленияОбОтгрузкеПоРеализацииТоваровУслуг(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущееУведомлениеОбОтгрузке,
	|	Статусы.Статус,
	|	Статусы.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &Реализация
	|");
	
	Запрос.УстановитьПараметр("Реализация", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не Источник.ЕстьМаркируемаяПродукцияГИСМ)
			И Не ЗначениеЗаполнено(Выборка.ТекущееУведомлениеОбОтгрузке) Тогда
			РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Источник.ЕстьМаркируемаяПродукцияГИСМ Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ           = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.Статус             = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусУведомленияОбОтгрузкеПоУведомлениюОбОтгрузке(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Документ,
	|	Статусы.ТекущееУведомлениеОбОтгрузке,
	|	Статусы.Статус,
	|	Статусы.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК Статусы
	|ГДЕ
	|	    Статусы.Документ = &Основание
	|	ИЛИ Статусы.Документ = &Уведомление");
	
	Запрос.УстановитьПараметр("Основание", Источник.Основание);
	Запрос.УстановитьПараметр("Уведомление", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗаписьНового Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущееУведомлениеОбОтгрузке) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
			ИначеЕсли РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ЭтоСтатусНеАктуальногоУведомления(Выборка.Статус) Тогда
				
				ВыполнятьЗаписьВРегистр = Истина;
				
			КонецЕсли;
			
			ДанныеЗаписи.Документ                     = Выборка.Документ;
			ДанныеЗаписи.ТекущееУведомлениеОбОтгрузке = Источник.Ссылка;
			ДанныеЗаписи.Статус                       = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие           = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаписьНового Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ                     = Источник.Основание;
			ДанныеЗаписи.ТекущееУведомлениеОбОтгрузке = Источник.Ссылка;
			ДанныеЗаписи.Статус                       = Перечисления.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Черновик;
			ДанныеЗаписи.ДальнейшееДействие           = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусИнформированияГИСМДляДокументаРаспоряжения(Источник, ЗаписьТребуется)

	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не ЗаписьТребуется)
			И Не ЗначениеЗаполнено(Выборка.ТекущееУведомление) Тогда
			
			РегистрыСведений.СтатусыИнформированияГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Источник.Проведен И ЗаписьТребуется Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		
		ДанныеЗаписи.Документ            = Источник.Ссылка;
		ДанныеЗаписи.ДальнейшееДействие  = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
		ДанныеЗаписи.Статус              = Перечисления.СтатусыИнформированияГИСМ.Отсутствует;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусИнформированияГИСМДляДокументаСРаспоряжением(Источник)

	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЗаписьНового")
	             И Источник.ДополнительныеСвойства.ЗаписьНового;
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Источник.Основание);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВыполнятьЗаписьВРегистр         = Истина;
		ДанныеЗаписи.Документ           = Выборка.Документ;
		ДанныеЗаписи.ТекущееУведомление = Источник.Ссылка;
		ДанныеЗаписи.Статус             = Перечисления.СтатусыИнформированияГИСМ.Черновик;
		ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусИнформированияГИСМДляДокумента(Источник, ЗаписьТребуется)

	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияГИСМ.ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.Документ,
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.Статус,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не Источник.Проведен Или Не ЗаписьТребуется) Тогда
			РегистрыСведений.СтатусыИнформированияГИСМ.УдалитьЗаписьИзРегистра(Источник.Ссылка);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если Источник.Проведен И ЗаписьТребуется Тогда
			
			ВыполнятьЗаписьВРегистр = Истина;
			
			ДанныеЗаписи.Документ            = Источник.Ссылка;
			ДанныеЗаписи.ДальнейшееДействие  = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			ДанныеЗаписи.Статус              = Перечисления.СтатусыИнформированияГИСМ.Черновик;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		РегистрыСведений.СтатусыИнформированияГИСМ.ВыполнитьЗаписьВРегистрПоДаннымСтруктура(ДанныеЗаписи);
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСтатусПоступленияПоДокументу(Источник, ДанныеЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ") Тогда
		
		ДокументСсылка      = ДанныеЗаписи.ТекущаяЗаявкаНаВыпускКиЗ;
		ЗначенияПоУмолчанию = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ЗначенияПоУмолчанию();
		
		Текст = 
		"ВЫБРАТЬ
		|	НомераКиЗ.НомерКиЗ               КАК НомерКиЗ,
		|	НомераКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
		|	НомераКиЗ.ДокументПоступления    КАК ДокументПоступления
		|ПОМЕСТИТЬ НомераКиЗ
		|ИЗ
		|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК НомераКиЗ
		|ГДЕ
		|	НомераКиЗ.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
		
		ДокументСсылка      = ДанныеЗаписи.Документ;
		ЗначенияПоУмолчанию = РегистрыСведений.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ЗначенияПоУмолчанию();
		
		Текст = 
		"ВЫБРАТЬ
		|	НомераКиЗ.НомерКиЗ               КАК НомерКиЗ,
		|	НомераКиЗ.СостояниеПодтверждения КАК СостояниеПодтверждения,
		|	НомераКиЗ.ДокументПоступления    КАК ДокументПоступления
		|ПОМЕСТИТЬ НомераКиЗ
		|ИЗ
		|	Документ.УведомлениеОПоступленииМаркированныхТоваровГИСМ.НомераКиЗ КАК НомераКиЗ
		|ГДЕ
		|	НомераКиЗ.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДанныеЗаписи,
		ЗначенияПоУмолчанию,
		"ПоступлениеТоваров, КоличествоПоступленийТоваров, СтатусПоступления, КПередачеПодтверждения, ПроцентПодтвержденныхКиЗ");
	
	Подтверждено = 0;
	КПередаче    = 0;
	Передано     = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст +
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомераКиЗ.НомерКиЗ) КАК ВсегоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Поступило,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ПринятоГИСМ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КПередаче,
	|	СУММА(ВЫБОР
	|			КОГДА НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Передано))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Передано
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НЕ НомераКиЗ.ДокументПоступления В (&МассивПустыхЗначенийДокументовПоступления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ
	|ПОМЕСТИТЬ НеподтвержденныеКиЗ
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НомераКиЗ.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление), ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСерииНоменклатуры.Регистратор КАК ДокументПоступления,
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ КАК НомерКиЗ
	|ПОМЕСТИТЬ ВсеДокументыПоступленияПоКиЗ
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры КАК РегистрСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО РегистрСерииНоменклатуры.Серия = СправочникСерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ПО РегистрСерииНоменклатуры.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|			И (&Организация = ПоступлениеТоваровУслуг.Организация)
	|			И (&Контрагент = ПоступлениеТоваровУслуг.Контрагент)
	|ГДЕ
	|	СправочникСерииНоменклатуры.НомерКиЗГИСМ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераКиЗ.НомерКиЗ КАК НомерКиЗ,
	|	НомераКиЗ.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ РанееСопоставленныеПоступления
	|ИЗ
	|	НомераКиЗ КАК НомераКиЗ
	|ГДЕ
	|	НЕ НомераКиЗ.ДокументПоступления В (ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НомераКиЗ.НомерКиЗ В
	|			(ВЫБРАТЬ
	|				НеподтвержденныеКиЗ.НомерКиЗ
	|			ИЗ
	|				НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДокументыПоступленияПоКиЗ.ДокументПоступления КАК ДокументПоступления,
	|	ВсеДокументыПоступленияПоКиЗ.НомерКиЗ КАК НомерКиЗ
	|ПОМЕСТИТЬ ДокументыПоступленияКандидаты
	|ИЗ
	|	ВсеДокументыПоступленияПоКиЗ КАК ВсеДокументыПоступленияПоКиЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РанееСопоставленныеПоступления КАК РанееСопоставленныеПоступления
	|		ПО ВсеДокументыПоступленияПоКиЗ.НомерКиЗ = РанееСопоставленныеПоступления.НомерКиЗ
	|			И ВсеДокументыПоступленияПоКиЗ.ДокументПоступления = РанееСопоставленныеПоступления.ДокументПоступления
	|ГДЕ
	|	РанееСопоставленныеПоступления.ДокументПоступления ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НеподтвержденныеКиЗ.НомерКиЗ КАК НомерКиЗ
	|ИЗ
	|	НеподтвержденныеКиЗ КАК НеподтвержденныеКиЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоступленияКандидаты КАК ДокументыПоступленияКандидаты
	|		ПО НеподтвержденныеКиЗ.НомерКиЗ = ДокументыПоступленияКандидаты.НомерКиЗ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",    Источник.Организация);
	Запрос.УстановитьПараметр("Контрагент",     Источник.Контрагент);
	Запрос.УстановитьПараметр("МассивПустыхЗначенийДокументовПоступления", ИнтеграцияГИСМ.МассивПустыхЗначенийДокументовПоступленияМаркированнойПродукции());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоступилоПодтверждено = Результат[1].Выбрать();
	
	Если ВыборкаПоступилоПодтверждено.Следующий() Тогда
		
		ВсегоСтрок   = ВыборкаПоступилоПодтверждено.ВсегоСтрок;
		Поступило    = ?(ВыборкаПоступилоПодтверждено.Поступило = NULL, 0, ВыборкаПоступилоПодтверждено.Поступило);
		Подтверждено = ?(ВыборкаПоступилоПодтверждено.Подтверждено = NULL, 0, ВыборкаПоступилоПодтверждено.Подтверждено);
		КПередаче    = ?(ВыборкаПоступилоПодтверждено.КПередаче = NULL, 0, ВыборкаПоступилоПодтверждено.КПередаче);
		Передано     = ?(ВыборкаПоступилоПодтверждено.Передано = NULL, 0, ВыборкаПоступилоПодтверждено.Передано);
		
		Если ВсегоСтрок <> 0 Тогда
		
			Если Поступило = ВсегоСтрок Тогда
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.Поступило;
			ИначеЕсли Поступило > 0 Тогда
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.ПоступилоЧастично;
			Иначе
				ДанныеЗаписи.СтатусПоступления = Перечисления.СтатусыПоступленийГИСМ.ОжидаетсяПоступление;
			КонецЕсли;
			
			ДанныеЗаписи.ПроцентПодтвержденныхКиЗ = Окр(Подтверждено / ВсегоСтрок, 2) * 100;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыборкаДокументыПоступления = Результат[2].Выбрать();
	
	КоличествоДокументовПоступления = ВыборкаДокументыПоступления.Количество();
	Если ВыборкаДокументыПоступления.Количество() = 1 Тогда
		Если ВыборкаДокументыПоступления.Следующий() Тогда
			ДанныеЗаписи.ПоступлениеТоваров = ВыборкаДокументыПоступления.ДокументПоступления;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаписи.КоличествоПоступленийТоваров = КоличествоДокументовПоступления;
	
	ВыборкаДокументыЕстьЧтоПодтверждать = Результат[7].Выбрать();
	Если ВыборкаДокументыЕстьЧтоПодтверждать.Следующий() Тогда
		
		ДанныеЗаписи.КПередачеПодтверждения  = Истина;
		ДанныеЗаписи.ДальнейшееДействие      = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаВыпускКиЗГИСМ") Тогда
			ДанныеЗаписи.СтатусЗаявкиНаВыпускКиЗ = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяПоступление;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОПоступленииМаркированныхТоваровГИСМ") Тогда
			ДанныеЗаписи.Статус = Перечисления.СтатусыУведомленийОПоступленииМаркированныхТоваровГИСМ.ОбрабатываетсяПоступление;
		КонецЕсли;
		
	Иначе
		
		ДанныеЗаписи.КПередачеПодтверждения = Ложь;
		
		Если КПередаче > 0 Тогда
			
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение;
			
		ИначеЕсли Передано > 0 Тогда
			
			ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		Иначе
			
			Если Подтверждено = ВсегоСтрок И Подтверждено > 0 Тогда
				ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку;
			Иначе
				ДанныеЗаписи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокументаМаркировкиТоваров(ДокументСсылкаМаркировкиТоваров,СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровГИСМТовары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	МаркировкаТоваровГИСМТовары.Ссылка КАК Ссылка,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Дата КАК Период,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад.ОрдерныйСклад КАК ОрдерныйСклад,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад КАК СтруктурнаяЕдиница,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетУчета,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.ХарактеристикаКиЗ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	МаркировкаТоваровГИСМТовары.Номенклатура КАК НоменклатураТовар,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаТовар,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка) КАК Ячейка,
	|	МаркировкаТоваровГИСМТовары.Количество КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы) КАК СчетДт,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетКт,
	|	&СписаниеЗапасов КАК СодержаниеПроводки,
	|	МаркировкаТоваровГИСМТовары.КлючСвязи КАК КлючСвязи,
	|	МаркировкаТоваровГИСМТовары.Номенклатура.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ.Товары КАК МаркировкаТоваровГИСМТовары
	|ГДЕ
	|	МаркировкаТоваровГИСМТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ссылка КАК ДокументПродажи,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Ссылка,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход) КАК Операция,
	|	МаркировкаТоваровГИСМСерии.Серия КАК Серия,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА МаркировкаТоваровГИСМСерии.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ МаркировкаТоваровГИСМСерии.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ОстаткиСерийНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровГИСМ.СерииКиЗ КАК МаркировкаТоваровГИСМСерии
	|		ПО ТаблицаЗапасы.Ссылка = МаркировкаТоваровГИСМСерии.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = МаркировкаТоваровГИСМСерии.КлючСвязи
	|ГДЕ
	|	МаркировкаТоваровГИСМСерии.Ссылка = &Ссылка
	|	И ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход),
	|	МаркировкаТоваровГИСМСерии.Серия,
	|	&Организация,
	|	ТаблицаЗапасы.НоменклатураТовар,
	|	ТаблицаЗапасы.ХарактеристикаТовар,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	ВЫБОР
	|		КОГДА МаркировкаТоваровГИСМСерии.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ МаркировкаТоваровГИСМСерии.Количество
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикаУчетаСерий.ПустаяСсылка)
	|			ТОГДА &ОстаткиСерийНоменклатуры
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровГИСМ.Серии КАК МаркировкаТоваровГИСМСерии
	|		ПО ТаблицаЗапасы.Ссылка = МаркировкаТоваровГИСМСерии.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = МаркировкаТоваровГИСМСерии.КлючСвязи
	|ГДЕ
	|	МаркировкаТоваровГИСМСерии.Ссылка = &Ссылка
	|	И ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаМаркировкиТоваров);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	Запрос.УстановитьПараметр("ОстаткиСерийНоменклатуры", ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийНоменклатуры"));
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[3].Выгрузить());
	
	// Серии номенклатуры
	РезультатЗапроса4 = МассивРезультатов[4].Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса4);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса4);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ОстаткиСерийНоменклатуры", Истина);
	ОстаткиСерийНоменклатурыСтроки = РезультатЗапроса4.НайтиСтроки(ПараметрыОтбора);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса4.Скопировать(ОстаткиСерийНоменклатурыСтроки));
	
	// Сформируем пустую таблицу проводок.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаМаркировкиТоваров, СтруктураДополнительныеСвойства);
	
	// Расчет стоимости списания запасов.
	СформироватьТаблицаЗапасы(ДокументСсылкаМаркировкиТоваров, СтруктураДополнительныеСвойства);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписаниеЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	&Сумма КАК СуммаРасходов,
	|	&Сумма КАК Сумма,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция КАК СчетУчета,
	|	&ПоступлениеРасходов КАК СодержаниеПроводки
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|ГДЕ
	|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
	|	И &Сумма > 0
	|	И СписаниеЗапасовЗапасы.Ссылка.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапасовЗапасы.Ссылка,
	|	СписаниеЗапасовЗапасы.Ссылка.Дата,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаМаркировкиТоваров);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Сумма", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Итог("Сумма"));
	
	Запрос.УстановитьПараметр("ПоступлениеРасходов", НСтр("ru = 'Прочие расходы'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", МассивРезультатов[0].Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокументаПеремаркировкиТоваров(ДокументСсылкаПеремаркировка,СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровГИСМТовары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	МаркировкаТоваровГИСМТовары.Ссылка КАК Ссылка,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Дата КАК Период,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад.ОрдерныйСклад КАК ОрдерныйСклад,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	МаркировкаТоваровГИСМТовары.Ссылка.Склад КАК СтруктурнаяЕдиница,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетУчета,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.ХарактеристикаКиЗ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	МаркировкаТоваровГИСМТовары.Номенклатура КАК НоменклатураТовар,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА МаркировкаТоваровГИСМТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаТовар,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка) КАК Ячейка,
	|	МаркировкаТоваровГИСМТовары.Количество КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПрочиеРасходы) КАК СчетДт,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.СчетУчетаЗапасов КАК СчетКт,
	|	&СписаниеЗапасов КАК СодержаниеПроводки,
	|	МаркировкаТоваровГИСМТовары.КлючСвязи КАК КлючСвязи, 
	|	МаркировкаТоваровГИСМТовары.Серия КАК Серия, 
	|	МаркировкаТоваровГИСМТовары.СписываемаяСерия КАК СписываемаяСерия 
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ПеремаркировкаТоваровГИСМ.Товары КАК МаркировкаТоваровГИСМТовары
	|ГДЕ
	|	МаркировкаТоваровГИСМТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ссылка КАК ДокументПродажи,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Ссылка,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход) КАК Операция,
	|	ТаблицаЗапасы.СписываемаяСерия КАК Серия,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасы.НоменклатураТовар КАК Номенклатура,
	|	ТаблицаЗапасы.ХарактеристикаТовар КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Расход),
	|	СерийныйНомерКИЗа.Ссылка,
	|	&Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерийныйНомерКИЗа
	|		ПО ТаблицаЗапасы.Серия.Наименование = СерийныйНомерКИЗа.Наименование 
	|			И ТаблицаЗапасы.Номенклатура = СерийныйНомерКИЗа.Владелец
	|ГДЕ
	|  ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийНоменклатуры.Приход),
	|	ТаблицаЗапасы.Серия,
	|	&Организация,
	|	ТаблицаЗапасы.НоменклатураТовар,
	|	ТаблицаЗапасы.ХарактеристикаТовар,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка,
	|	1
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|  ТаблицаЗапасы.Ссылка = &Ссылка
	|	И &ИспользоватьСерииНоменклатуры
	|	И НЕ ТаблицаЗапасы.ОрдерныйСклад";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПеремаркировка);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	Запрос.УстановитьПараметр("ИспользоватьСерииНоменклатуры", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерииНоменклатуры);
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[3].Выгрузить());
	
	// Серии номенклатуры
	РезультатЗапроса4 = МассивРезультатов[4].Выгрузить();
	
	Если Не СтруктураДополнительныеСвойства.УчетнаяПолитика.МиграцияСерийНоменклатурыВыполнена Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", РезультатЗапроса4);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", Новый ТаблицаЗначений);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерииНоменклатуры", РезультатЗапроса4);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатурыГарантии", Новый ТаблицаЗначений);
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийНоменклатуры Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", РезультатЗапроса4);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерииНоменклатуры", Новый ТаблицаЗначений);
	КонецЕсли; 
	
	// Сформируем пустую таблицу проводок.
	ПроведениеДокументовУНФ.СформироватьТаблицуПроводок(ДокументСсылкаПеремаркировка, СтруктураДополнительныеСвойства);
	
	// Расчет стоимости списания запасов.
	СформироватьТаблицаЗапасы(ДокументСсылкаПеремаркировка, СтруктураДополнительныеСвойства);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписаниеЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельности,
	|	&Сумма КАК СуммаРасходов,
	|	&Сумма КАК Сумма,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция КАК СчетУчета,
	|	&ПоступлениеРасходов КАК СодержаниеПроводки
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|ГДЕ
	|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
	|	И &Сумма > 0
	|	И СписаниеЗапасовЗапасы.Ссылка.Корреспонденция.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеЗапасовЗапасы.Ссылка,
	|	СписаниеЗапасовЗапасы.Ссылка.Дата,
	|	СписаниеЗапасовЗапасы.Ссылка.Корреспонденция");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПеремаркировка);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Сумма", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Итог("Сумма"));
	
	Запрос.УстановитьПараметр("ПоступлениеРасходов", НСтр("ru = 'Прочие расходы'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", МассивРезультатов[0].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаСписаниеЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСписаниеЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			СтрокаТаблицаЗапасы.Сумма = СуммаКСписанию;
			СтрокаТаблицаЗапасы.Количество = КоличествоТребуется;
					
		КонецЕсли;
		
		// Сформируем проводки.
		Если Окр(СтрокаТаблицаЗапасы.Сумма, 2, 1) <> 0 Тогда
			СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасов()

Функция ПолучитьКИЗ(СписокНоменклатураКиЗ, GTIN)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК НоменклатураКИЗ,
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаКиЗ,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.КиЗГИСМGTIN, Номенклатура.КиЗГИСМGTIN) КАК GTIN,
	|	Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиКиЗИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец	
	|				)
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатураКиЗ)
	|	И ЕСТЬNULL(ХарактеристикиНоменклатуры.КиЗГИСМGTIN, Номенклатура.КиЗГИСМGTIN) В(&GTIN)";
	
	Запрос.УстановитьПараметр("GTIN", GTIN);
	Запрос.УстановитьПараметр("СписокНоменклатураКиЗ", СписокНоменклатураКиЗ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
КонецФункции

Функция ИННКПППоКонтрагенту(Контрагент) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП");
	
КонецФункции

Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И (Контрагенты.ВидКонтрагента = &ВидКонтрагента
	|			ИЛИ Контрагенты.КПП = &КПП)");
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЭтоГИСМНоменклатура(Номенклатура) Экспорт
	
	ВидМаркировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидМаркировки");
	
	Если ЗначениеЗаполнено(ВидМаркировки)
		И ВидМаркировки <> Перечисления.ВидыМаркировки.НеМаркируется Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Рассчитывает GTIN, записываемый эмитентом в КиЗ ГИСМ
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура 
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры
// 
// Возвращаемое значение:
// 		Строка 
//
Функция GTINКиЗ(Номенклатура, Характеристика) Экспорт
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика ,"КиЗГИСМGTIN");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	Иначе
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "КиЗГИСМGTIN,ИспользоватьХарактеристики");
		
		Если РеквизитыНоменклатуры.ИспользоватьХарактеристики Тогда
			ТекстИсключения = НСтр("ru = 'Невозможно определить GTIN КиЗ, т.к. не передана характеристика.'");
			ВызватьИсключение ТекстИсключения;
		Иначе
			Возврат РеквизитыНоменклатуры.КиЗГИСМGTIN;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьВидИмпорта(Контрагент) Экспорт
	
	КодСтраныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации.Код");
	
	// если поставщик Россия, то это не импортная поставка
	Если ПустаяСтрока(КодСтраныПоставщика) ИЛИ КодСтраныПоставщика = "643" Тогда
		Возврат "НеИмпорт";
	КонецЕсли;
	
	// Если код страны поставщика не из страны ЕАЭС (Белоруссия, Казахстан, Россия, Армения, Киргизия),
	// то оформляем поступление по общему импорту
	Если СтрНайти("112;398;051;417",КодСтраныПоставщика) = 0 Тогда
		Возврат "ПоступлениеПоИмпорту";
	Иначе
		Возврат "ПоступлениеИзЕАЭС";
	КонецЕсли;
	
КонецФункции

Функция ЕстьКиЗГИСМ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.КиЗГИСМ";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура СформироватьТекстЗаявкаНаВыпускКиЗ(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстЗаявкаНаВыпускКиЗ", "Видимость", Форма.Объект.ЕстьКиЗГИСМ);
	Если НЕ Форма.Объект.ЕстьКиЗГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеЗаявки = Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ;
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеЗаявки);
	ПравоЧтения     = ПравоДоступа("Чтение", МетаданныеЗаявки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать заявку на выпуск КиЗ'");
		ИмяКоманды   = "СоздатьЗаявкуНаВыпускКиЗ";
	Иначе
		ТекстНадписи =  НСтр("ru = 'Заявка на выпуск КиЗ не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка,
	|	ВЫБОР
	|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяЭмитентом)
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПустаяСсылка)
	|						ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|					ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом
	|				КОНЕЦ
	|		ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
	|	КОНЕЦ КАК СостояниеЗаявкиНаВыпускКиЗ
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|		ПО (СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗаявкаНаВыпускКиЗГИСМ.Ссылка)
	|ГДЕ
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.Документ = &ЗаказПоставщику
	|	И СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВыпускКиЗГИСМ.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи = СтрШаблон(НСтр("ru = 'Заявка на выпуск КиЗ: %1'"), Выборка.СостояниеЗаявкиНаВыпускКиЗ);
		ИмяКоманды   = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстЗаявкаНаВыпускКиЗ = Новый ФорматированнаяСтрока(
	                                     ТекстНадписи, ,
	                                     ЦветаСтиля.ЦветГиперссылкиГосИС, ,
	                                     ИмяКоманды);

КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС
//
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстУведомленияГИСМ", "Видимость", Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
	Если Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомлениеОбИмпорте      = Метаданные.Документы.УведомлениеОбИмпортеМаркированныхТоваровГИСМ;
	ПравоДобавленияУведомлениеОбИмпорте = ПравоДоступа("Добавление", МетаданныеУведомлениеОбИмпорте);
	ПравоЧтенияУведомлениеОбИмпорте     = ПравоДоступа("Чтение", МетаданныеУведомлениеОбИмпорте);
	
	МетаданныеУведомлениеОВвозеЕАЭС  = Метаданные.Документы.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ;
	ПравоДобавленияУведомлениеОВвозе = ПравоДоступа("Добавление", МетаданныеУведомлениеОВвозеЕАЭС);
	ПравоЧтенияУведомлениеОВвозе     = ПравоДоступа("Чтение", МетаданныеУведомлениеОВвозеЕАЭС);
	
	ВидИмпорта = РассчитатьВидИмпорта(Форма.Объект.Контрагент);
	
	// если поставщик Россия, то это не импортная поставка
	Если ВидИмпорта = "НеИмпорт" Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидИмпорта = "ПоступлениеПоИмпорту" Тогда
		Если Не ПравоЧтенияУведомлениеОбИмпорте Тогда
			Возврат;
		КонецЕсли;
		Если ПравоДобавленияУведомлениеОбИмпорте Тогда
			ТекстНадписи = НСтр("ru = 'Создать уведомление об импорте ГИСМ'");
			ИмяКоманды   = "СоздатьУведомлениеГИСМ";
		Иначе
			ТекстНадписи = НСтр("ru = 'Уведомление об импорте ГИСМ не создано'");
			ИмяКоманды   = "";
		КонецЕсли;
	ИначеЕсли ВидИмпорта = "ПоступлениеИзЕАЭС" Тогда
		Если Не ПравоЧтенияУведомлениеОВвозе Тогда
			Возврат;
		КонецЕсли;
		Если ПравоДобавленияУведомлениеОВвозе Тогда
			ТекстНадписи = НСтр("ru = 'Создать уведомление о ввозе из ЕАЭС ГИСМ'");
			ИмяКоманды   = "СоздатьУведомлениеГИСМЕАЭС";
		Иначе
			ТекстНадписи = НСтр("ru = 'Уведомление о ввозе из ЕАЭС ГИСМ не создано'");
			ИмяКоманды   = "";
		КонецЕсли;
	Иначе 
		ВызватьИсключение (НСтр("ru='Ошибочный вид импорта'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &ДокументОснование
	|	И СтатусыИнформированияГИСМ.ТекущееУведомление <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДокументОснование", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ВидИмпорта = "ПоступлениеПоИмпорту" Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление об импорте ГИСМ: %1'"), Выборка.Статус);
		ИначеЕсли ВидИмпорта = "ПоступлениеИзЕАЭС" Тогда
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление о ввозе из ЕАЭС ГИСМ: %1'"), Выборка.Статус);
		КонецЕсли;
		
	
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстУведомленияГИСМПредставление = Новый ФорматированнаяСтрока(
	                                        ТекстНадписи,,
	                                        ЦветаСтиля.ЦветГиперссылкиГосИС,,
	                                        ИмяКоманды)
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.СформироватьТекстУведомлениеОСписанииКиЗ
//
Процедура СформироватьТекстУведомлениеОСписанииКиЗ(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ТекстУведомленияОСписанииГИСМ", 
		"Видимость", 
		Форма.Объект.ЕстьКиЗГИСМ ИЛИ Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
		
	Если Не Форма.Объект.ЕстьКиЗГИСМ И Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОСписанииКиЗГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеУведомления);
	ПравоЧтения          = ПравоДоступа("Чтение",     МетаданныеУведомления);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать уведомление о списании КиЗ ГИСМ'");
		ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	Иначе
		ТекстНадписи = НСтр("ru = 'Уведомление о списании КиЗ ГИСМ не создано'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	ТекстНадписи =  НСтр("ru = 'Создать уведомление о списании КиЗ ГИСМ'");
	ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыИнформированияГИСМ.ТекущееУведомление,
	|	СтатусыИнформированияГИСМ.ДальнейшееДействие,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|ГДЕ
	|	СтатусыИнформированияГИСМ.Документ = &ДокументОснование
	|	И СтатусыИнформированияГИСМ.ТекущееУведомление <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ДокументОснование", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Уведомление о списании КиЗ ГИСМ: %1'"), Выборка.Статус);
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	
	Форма.ТекстУведомленияОСписанииГИСМ = Новый ФорматированнаяСтрока(
	                                        ТекстНадписи,,
	                                        ЦветаСтиля.ЦветГиперссылкиГосИС,,
	                                        ИмяКоманды)
	
КонецПроцедуры

// См. описание процедуры ИнтеграцияГИСМПереопределяемый.РассчитатьСтатусИнформированияГИСМДляДокумента
//
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТекстУведомленияОбОтгрузкеГИСМ", "Видимость", Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ);
	Если Не Форма.Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеУведомления = Метаданные.Документы.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ;
	ПравоДобавления       = ПравоДоступа("Добавление", МетаданныеУведомления);
	ПравоЧтения           = ПравоДоступа("Чтение", МетаданныеУведомления);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи =  НСтр("ru = 'Создать уведомление об отгрузке ГИСМ'");
		ИмяКоманды   = "СоздатьУведомлениеГИСМ";
	Иначе
		ТекстНадписи = НСтр("ru = 'Уведомление об отгрузке ГИСМ не создано'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке,
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Статус
	|ИЗ
	|	РегистрСведений.СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ КАК СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ КАК УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ
	|		ПО (СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке = УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.Ссылка)
	|ГДЕ
	|	СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.Документ = &Документ
	|	И СтатусыУведомленийОбОтгрузкеМаркированныхТоваровГИСМ.ТекущееУведомлениеОбОтгрузке <> ЗНАЧЕНИЕ(Документ.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи = СтрШаблон(НСтр("ru = 'Уведомление об отгрузке ГИСМ: %1'"), Выборка.Статус);
		ИмяКоманды   = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	Форма.ТекстУведомленияОбОтгрузкеГИСМ = Новый ФорматированнаяСтрока(
	                                  ТекстНадписи,,
	                                  ЦветаСтиля.ЦветГиперссылкиГосИС,,
	                                  ИмяКоманды);

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруКиЗВСтроке(ТекущаяСтрока, СписокНоменклатураКиЗ, КиЗГИСМСИндивидуализацией) Экспорт
	
	GTIN = ?(КиЗГИСМСИндивидуализацией, ТекущаяСтрока.GTIN, "");
	ТаблицаРезультат = ПолучитьКИЗ(СписокНоменклатураКиЗ, GTIN);
	
	Если ТаблицаРезультат.Количество() = 1 Тогда
		СтрокаРезультат = ТаблицаРезультат.Получить(0);
		ТекущаяСтрока.НоменклатураКиЗ = СтрокаРезультат.НоменклатураКиЗ;
		ТекущаяСтрока.ХарактеристикаКиЗ = СтрокаРезультат.ХарактеристикаКиЗ;

	ИначеЕсли ТаблицаРезультат.Количество() = 0 Тогда
		ТекущаяСтрока.НоменклатураКиЗ = Неопределено;
		ТекущаяСтрока.ХарактеристикаКиЗ = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольМаркировкаТоваровГИСМ(ДокументСсылкаСписаниеЗапасов, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
		|		ПО ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
		|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
		|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
		|			И ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
		|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
		|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(ДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой() Тогда
			ДокументОбъектСписаниеЗапасов = ДокументСсылкаСписаниеЗапасов.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладах(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтрольПеремаркировкаТоваровГИСМ(ДокументСсылкаСписаниеЗапасов, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ПроведениеДокументовУНФ.КонтрольОстатковВыключен() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерииНоменклатурыИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерииНоменклатурыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерииНоменклатурыИзменение.Серия КАК СерияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерииНоменклатурыИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерииНоменклатурыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерииНоменклатурыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияСерииНоменклатурыИзменение КАК ДвиженияСерииНоменклатурыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерииНоменклатуры.Остатки(&МоментКонтроля, ) КАК СерииНоменклатурыОстатки
		|		ПО ДвиженияСерииНоменклатурыИзменение.СтруктурнаяЕдиница = СерииНоменклатурыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерииНоменклатурыИзменение.Номенклатура = СерииНоменклатурыОстатки.Номенклатура
		|			И ДвиженияСерииНоменклатурыИзменение.Характеристика = СерииНоменклатурыОстатки.Характеристика
		|			И ДвиженияСерииНоменклатурыИзменение.Партия = СерииНоменклатурыОстатки.Партия
		|			И ДвиженияСерииНоменклатурыИзменение.Серия = СерииНоменклатурыОстатки.Серия
		|			И ДвиженияСерииНоменклатурыИзменение.Ячейка = СерииНоменклатурыОстатки.Ячейка
		|			И (ЕСТЬNULL(СерииНоменклатурыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
			Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментВремени);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой() Тогда
			ДокументОбъектСписаниеЗапасов = ДокументСсылкаСписаниеЗапасов.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			КонтрольОстатковУНФ.ЗапасыНаСкладах(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			КонтрольОстатковУНФ.Запасы(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			КонтрольОстатковУНФ.СерииНоменклатуры(ДокументОбъектСписаниеЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

Функция ЕстьМаркируемаяПродукцияГИСМ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.МаркируемаяПродукция)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЕстьПродукцияКИЗ(Товары) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Номенклатура
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ВидМаркировки = Значение(Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Заполняет номенклатуру КиЗ в строках документа
//
// Параметры:
//  Объект				 		 - ДокументОбъект.* - текущая строка таблицы Товары.
//  СписокНоменклатураКиЗ		 - СписокЗначений - список номенклатуры КиЗ, подходящих под выбранную категорию КиЗ в документе.
//  ЗаполнятьСерии				 - Булево - Признак заполнения серий в ТЧ Серии.
//
Процедура ЗаполнитьНоменклатуруКиЗВСтроках(ДокументОбъект, СписокНоменклатураКиЗ, ЗаполнятьСерии = Истина) Экспорт
	
	GTIN = ?(ДокументОбъект.КиЗГИСМСИндивидуализацией, ДокументОбъект.Товары.Выгрузить(,"GTIN").ВыгрузитьКолонку("GTIN"),"");
	ТаблицаРезультат = ПолучитьКИЗ(СписокНоменклатураКиЗ, GTIN);
	
	СтруктураПоиска = Новый Структура("GTIN","");
	Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Если ДокументОбъект.КиЗГИСМСИндивидуализацией Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
		КонецЕсли;
		НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденнаяСтрока = НайденныеСтроки.Получить(0);
			СтрокаТовары.НоменклатураКиЗ = НайденнаяСтрока.НоменклатураКиЗ;
			СтрокаТовары.ХарактеристикаКиЗ = НайденнаяСтрока.ХарактеристикаКиЗ;
		ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.НоменклатураКиЗ = Неопределено;
			СтрокаТовары.ХарактеристикаКиЗ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьСерии Тогда
		Для каждого СтрокаСерии Из ДокументОбъект.Серии Цикл
			Если ДокументОбъект.КиЗГИСМСИндивидуализацией Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
			КонецЕсли;
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки.Получить(0);
				СтрокаСерии.НоменклатураКиЗ = НайденнаяСтрока.НоменклатураКиЗ;
				СтрокаСерии.ХарактеристикаКиЗ = НайденнаяСтрока.ХарактеристикаКиЗ;
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				СтрокаСерии.НоменклатураКиЗ = Неопределено;
				СтрокаСерии.ХарактеристикаКиЗ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайловГИСМ.Тип.СодержитТип(ТипВладелецФайла) Тогда
		Если ТипВладелецФайла = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.РасходнаяНакладная")
			ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			ОсновнойСправочник = Ложь;
		Иначе
			ОсновнойСправочник = Истина;
		КонецЕсли;
		ИменаСправочников.Вставить("ГИСМПрисоединенныеФайлы", ОсновнойСправочник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

