
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-сеть".
// ОбщийМодуль.БизнесСетьПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполнение адресов организации и ее складов.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, по которой заполняются адреса.
//  Адреса - ТаблицаЗначения - таблица для заполнения. Содержит колонки:
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - адрес в формате XML. Формат должен соответствовать XDTO-пакету Адрес.
//   * Описание - Строка - комментарий адреса.
//   * Ссылка - Ссылка - объект хранения контактной информации.
//   * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Процедура ЗаполнитьАдресаОрганизации(Организация, Адреса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииБизнесСеть.Организация КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|ГДЕ
	|	ОрганизацииБизнесСеть.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	ТаблицаОрганизации 	= Запрос.Выполнить().Выгрузить();
	МассивОрганизации 	= ТаблицаОрганизации.ВыгрузитьКолонку("Ссылка");
	ДатаКИ 				= ТекущаяДатаСеанса();
	
	ТипАдрес = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТаблицаАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОрганизации,
		ТипАдрес,
		,
		ДатаКИ);
		
	Для Каждого Адрес Из ТаблицаАдреса Цикл
		СтрокаАдреса = Адреса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Адрес);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Адрес.Вид, Адрес.Объект);
		СтрокаАдреса.Ссылка   = Адрес.Объект;
	КонецЦикла;
	
	Адреса.Сортировать("Представление");
	
КонецПроцедуры	

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	РеквизитыКонтрагента = РеквизитыКонтрагента;
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	
	Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
		РеквизитыКонтрагента.Вставить("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	Иначе
		РеквизитыКонтрагента.Вставить("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(РеквизитыКонтрагента);
	
	НовыйКонтрагент.Покупатель = Истина;
	НовыйКонтрагент.Поставщик = Истина;
	НовыйКонтрагент.ПрочиеОтношения = Истина;
	
	Попытка
		НовыйКонтрагент.Записать();
	Исключение
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Контрагенты'"),
			УровеньЖурналаРегистрации.Ошибка,
			НовыйКонтрагент.Метаданные(),
			НовыйКонтрагент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	Если НеобходимоСозданиеКонтактногоЛица(Отказ, РеквизитыКонтрагента) Тогда
		НайтиСоздатьКонтактноеЛицо(РеквизитыКонтрагента, НовыйКонтрагент);
	КонецЕсли;
	
	Контрагент = НовыйКонтрагент.Ссылка;
	
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе, см. БизнесСеть.ОписаниеКонтактнойИнформацииПользователя():
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
	
	
КонецПроцедуры

// Проверка соответствия реквизитов в документах.
//
// Параметры:
//   МассивСсылокНаОбъект - Массив - проверяемые ссылки объектов.
//   Реквизиты - Строка - список проверяемых реквизитов через запятую.
//
// Возвращаемое значение:
//   Булево - Истина, если все реквизиты соответствуют
//
Процедура ВыполнитьКонтрольРеквизитовДокументов(МассивСсылокНаОбъект, ТекстСообщения, Отказ) Экспорт
	
	ИмяМетаданных = "";
	Для каждого Ссылка Из МассивСсылокНаОбъект Цикл
		Если ИмяМетаданных = "" Тогда
			ИмяМетаданных = Ссылка.Метаданные().Имя;
		ИначеЕсли ИмяМетаданных <> Ссылка.Метаданные().Имя Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Операция невозможна для разных видов документов'");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты = "Организация, Контрагент";
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ";
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Реквизиты, ",");
	ПоследнийЭлемент = МассивРеквизитов.Получить(МассивРеквизитов.Количество()-1);
	Для каждого Элемент Из МассивРеквизитов Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + ИмяМетаданных + "." + СокрЛП(Элемент)
			+ ?(Элемент = ПоследнийЭлемент, "", ",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ " + "Документ." + ИмяМетаданных + " КАК "
		+ ИмяМетаданных	+ " ГДЕ " + ИмяМетаданных + ".Ссылка В(&МассивСсылокНаОбъект)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Отказ = Истина;
		Шаблон = НСтр("ru = 'Операция невозможна. Отличаются реквизиты документов (%1)'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//    * Зарегистрирован  - Булево - признак регистрации организации в 1С:БизнесСеть.
//
Процедура ПолучитьКонтрагентовПоСделкам(Знач Организация, Знач РежимЗаполнения, Знач НачалоПериода, СписокКонтрагентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаполнитьПоПоставкам",   РежимЗаполнения = "ЗаполнитьПоПоставкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоЗакупкам",    РежимЗаполнения = "ЗаполнитьПоЗакупкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемСделкам", РежимЗаполнения = "ЗаполнитьПоВсемСделкам");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПокупателямиОбороты.Контрагент КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Обороты(
	|				&НачалоПериода,
	|				,
	|				,
	|				Организация = &Организация
	|					И (&ЗаполнитьПоПоставкам
	|						ИЛИ &ЗаполнитьПоВсемСделкам)) КАК РасчетыСПокупателямиОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыСПоставщикамиОбороты.Контрагент
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|				&НачалоПериода,
	|				,
	|				,
	|				Организация = &Организация
	|					И (&ЗаполнитьПоЗакупкам
	|						ИЛИ &ЗаполнитьПоВсемСделкам)) КАК РасчетыСПоставщикамиОбороты) КАК Контрагенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Контрагенты = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Контрагенты.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	// СтандартныеПодсистмы.КонтактнаяИнформация
	ЭлектронныеАдресаКонтрагентов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		Контрагенты, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, , ТекущаяДатаСеанса());
	// Конец СтандартныеПодсистмы.КонтактнаяИнформация

	Для Каждого СтрокаАдреса Из ЭлектронныеАдресаКонтрагентов Цикл
		НоваяСтрока = СписокКонтрагентов.Добавить();
		НоваяСтрока.Ссылка = СтрокаАдреса.Объект;
		НоваяСтрока.ЭлектроннаяПочта = СтрокаАдреса.Представление;
	КонецЦикла;
	
КонецПроцедуры

#Область QRКод

// Формирует представление прикладного документа с QR-кодом, если включена ФО ВыводитьQRКодНаПечатныхФормахДокументов.
// По этим данным можно найти и загрузить в базу 1С документ из сервиса 1С:Бизнес-сеть.
//
// Параметры:
//  СсылкиНаДокументы         - Массив из ДокументСсылка  - ссылки на документы, по которым необходимо сформировать представления файла ЭД.
//  ВидЭД                     - ПеречислениеСсылка.ВидыЭД - ссылка на вид электронного документа.
//  ДанныеQRКодовПоДокументам - Список значений           - объекты печати (значение - ссылка на объект, представление - имя области, в которой был выведен объект).
//  ПечатнаяФорма             - ТабличныйДокумент         - печатная форма, в которой должна быть область "ДанныеQRКода", в которой должны быть параметры:
//                                                          КартинкаQRКода        - Картинка - для заполнения рисунка QR-кода. 
//                                                          ПубличнаяСсылкаQRКода - Строка   - для заполнения публичной ссылки.
//
Процедура СформироватьПредставлениеПрикладногоДокументаСQRКодом(Знач СсылкиНаДокументы, Знач ВидЭД, Знач ДанныеQRКодовПоДокументам, ПечатнаяФорма) Экспорт
	
КонецПроцедуры

// Переопределяет картинку на форме поиска электронного документа с отображением подсказки, где искать QR-код.
//
// Параметры:
//  ЭлементФормыКартинка - ДекорацияФормы - элемент формы картинки подсказки.
//
Процедура УстановитьКартинкуПодсказкиОтображенияQRКодаНаДокументе(ЭлементФормыКартинка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НайтиСоздатьКонтактноеЛицо(РеквизитыКонтрагента, Контрагент)
	
	КонтактЗаписан = Истина;
	НовыйКонтакт = НайтиКонтактПоРеквизитам(РеквизитыКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(НовыйКонтакт) Тогда
		НовыйКонтакт = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовыйКонтакт.Наименование  = РеквизитыКонтрагента.КонтактноеЛицо;
		НовыйКонтакт.ГруппаДоступа = Контрагент.ГруппаДоступа;
		НовыйКонтакт.Заполнить(Контрагент);
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
			НовыйКонтакт,
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(РеквизитыКонтрагента.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица),
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон
			);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ЭлектроннаяПочта) Тогда
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
			НовыйКонтакт,
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(РеквизитыКонтрагента.ЭлектроннаяПочта, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица),
			Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
			);
		КонецЕсли;
		
		Попытка
			НовыйКонтакт.Записать();
		Исключение
			КонтактЗаписан = Ложь;
		КонецПопытки;
			
	КонецЕсли;
	
	Если КонтактЗаписан Тогда
		
		Справочники.Контрагенты.ДобавитьСвязьСКонтактом(Контрагент.Ссылка, НовыйКонтакт.Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры

Функция НайтиКонтактПоРеквизитам(РеквизитыКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.НомерТелефонаДляПоиска КАК НомерТелефонаДляПоиска
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	(КонтактныеЛица.НомерТелефонаДляПоиска ПОДОБНО &ТелефонДляПоиска
	|				И &НомерТелефонаЗаполнен
	|			ИЛИ КонтактныеЛица.АдресЭПДляПоиска ПОДОБНО &АдресЭПДляПоиска
	|				И &АдресЭПЗаполнен)";
	
	СтрокаПоискаТелефон = "%"+РеквизитыКонтрагента.Телефон+"%";
	ТелефонДляПоиска = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(СтрокаПоискаТелефон);
	ТелефонДляПоиска = СтрЗаменить(СтрокаПоискаТелефон, "+", "");
	
	Запрос.УстановитьПараметр("АдресЭПДляПоиска", "%"+РеквизитыКонтрагента.ЭлектроннаяПочта+"%");
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+РеквизитыКонтрагента.Телефон+"%");
	Запрос.УстановитьПараметр("НомерТелефонаЗаполнен", ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон));
	Запрос.УстановитьПараметр("АдресЭПЗаполнен", ЗначениеЗаполнено(РеквизитыКонтрагента.ЭлектроннаяПочта));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	 
КонецФункции

Функция НеобходимоСозданиеКонтактногоЛица(Отказ, РеквизитыКонтрагента)
	
	Возврат НЕ Отказ И РеквизитыКонтрагента.Свойство("КонтактноеЛицо") 
		И ЗначениеЗаполнено(РеквизитыКонтрагента.КонтактноеЛицо)
		И (ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) 
		ИЛИ ЗначениеЗаполнено(РеквизитыКонтрагента.ЭлектроннаяПочта));
		
КонецФункции

#КонецОбласти

