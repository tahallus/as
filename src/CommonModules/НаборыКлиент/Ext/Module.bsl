
#Область ПрограммныйИнтерфейс

// Выполняет проверку необходимости обработки события механизмом наборов
//
// Параметры:
//  Форма		 - 	УправляемаяФорма - Форма, получившая оповещение
//  ИмяСобытия	 - 	Строка - Имя обрабатываемого события
//  Источник	 - 	Произвольный - Источник события
// 
// Возвращаемое значение:
//  Булево - Признак необходимости обработки события
//
Функция ОбрабатыватьОповещения(Форма, ИмяСобытия, Источник) Экспорт
	
	Возврат (ИмяСобытия = ИмяСобытияИзменениеСоставаНабора() И Источник = Форма.УникальныйИдентификатор);	
	
КонецФункции

// Выполняет удаление строк набора
//
// Параметры:
//  НоменклатураНабора	 - 	СправочникСсылка.Номенклатура - Номенклатура удаляемого набора
//  ХарактеристикаНабора - 	СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика удаляемого набора
//  НомерВариантаКП		 - 	Число - Номер варианта коммерческого предложения, в котором нужно удалить набор
//  Запасы				 - 	ТаблицаФормы - Табличная часть запасов
//  ДобавленныеНаборы	 - 	ТаблицаФормы - Табличная часть добавленных наборов
//
Процедура УдалитьСтрокиНабора(НоменклатураНабора, ХарактеристикаНабора, НомерВариантаКП = Неопределено, Запасы, ДобавленныеНаборы) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураОтбора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	Если НомерВариантаКП<>Неопределено Тогда
		СтруктураОтбора.Вставить("НомерВариантаКП", НомерВариантаКП);
	КонецЕсли; 
	СтрокиНабора = Запасы.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из СтрокиНабора Цикл
		Запасы.Удалить(Стр);
	КонецЦикла;
	ДобавленныеСтроки = ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из ДобавленныеСтроки Цикл
		ДобавленныеНаборы.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет строки подчиненной таблицы, для которых нет соответствия в основной
//
// Параметры:
//  ОсновнаяТЧ				 - 	ТаблицаФормы - Основная таблица
//  ПодчиненнаяТЧ			 - 	ТаблицаФормы - Подчиненная таблица
//  ИмяРеквизитаКлючСвязи	 - 	Строка - Имя реквизита, по которому осуществляется связь
//
Процедура УдалитьЛишниеСтрокиПодчиненнойТЧ(ОсновнаяТЧ, ПодчиненнаяТЧ, ИмяРеквизитаКлючСвязи = "КлючСвязи") Экспорт
	
	МассивДействующихКлючей = Новый Массив;
	
	Для каждого Стр Из ОсновнаяТЧ Цикл
		Если Стр[ИмяРеквизитаКлючСвязи]>0 И МассивДействующихКлючей.Найти(Стр[ИмяРеквизитаКлючСвязи])=Неопределено Тогда
			МассивДействующихКлючей.Добавить(Стр[ИмяРеквизитаКлючСвязи]);
		КонецЕсли; 
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для каждого Стр Из ПодчиненнаяТЧ Цикл
		Если МассивДействующихКлючей.Найти(Стр[ИмяРеквизитаКлючСвязи])=Неопределено Тогда
			СтрокиКУдалению.Добавить(Стр);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Стр Из СтрокиКУдалению Цикл
		ПодчиненнаяТЧ.Удалить(Стр);
	КонецЦикла; 
	
КонецПроцедуры
 
// Имя события изменения состава набора
// 
// Возвращаемое значение:
//  Строка - Имя события
//
Функция ИмяСобытияИзменениеСоставаНабора() Экспорт
	
	Возврат "ИзмененСоставНабора";	
	
КонецФункции

// Имя события изменения реквизитов набора
// 
// Возвращаемое значение:
//  Строка - Имя события
//
Функция ИмяСобытияИзменениеРеквизитовНабора() Экспорт
	
	Возврат "ИзмененыРеквизитыНабора";	
	
КонецФункции

// Имя события при записи состава набора
// 
// Возвращаемое значение:
//  Строка - Имя события
//
Функция ИмяСобытияЗаписанСоставаНабора() Экспорт
	
	Возврат "ЗаписанСоставНабора";	
	
КонецФункции

#КонецОбласти 

